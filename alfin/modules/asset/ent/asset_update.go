// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/asset/ent/asset"
	"github.com/samlet/petrel/alfin/modules/asset/ent/predicate"
	"github.com/samlet/petrel/alfin/modules/asset/ent/workloadpkg"
)

// AssetUpdate is the builder for updating Asset entities.
type AssetUpdate struct {
	config
	hooks    []Hook
	mutation *AssetMutation
}

// Where adds a new predicate for the AssetUpdate builder.
func (au *AssetUpdate) Where(ps ...predicate.Asset) *AssetUpdate {
	au.mutation.predicates = append(au.mutation.predicates, ps...)
	return au
}

// SetStringRef sets the "string_ref" field.
func (au *AssetUpdate) SetStringRef(s string) *AssetUpdate {
	au.mutation.SetStringRef(s)
	return au
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (au *AssetUpdate) SetNillableStringRef(s *string) *AssetUpdate {
	if s != nil {
		au.SetStringRef(*s)
	}
	return au
}

// ClearStringRef clears the value of the "string_ref" field.
func (au *AssetUpdate) ClearStringRef() *AssetUpdate {
	au.mutation.ClearStringRef()
	return au
}

// SetModel sets the "model" field.
func (au *AssetUpdate) SetModel(s string) *AssetUpdate {
	au.mutation.SetModel(s)
	return au
}

// SetRegisteredAt sets the "registered_at" field.
func (au *AssetUpdate) SetRegisteredAt(t time.Time) *AssetUpdate {
	au.mutation.SetRegisteredAt(t)
	return au
}

// SetPkgID sets the "pkg" edge to the WorkloadPkg entity by ID.
func (au *AssetUpdate) SetPkgID(id int) *AssetUpdate {
	au.mutation.SetPkgID(id)
	return au
}

// SetNillablePkgID sets the "pkg" edge to the WorkloadPkg entity by ID if the given value is not nil.
func (au *AssetUpdate) SetNillablePkgID(id *int) *AssetUpdate {
	if id != nil {
		au = au.SetPkgID(*id)
	}
	return au
}

// SetPkg sets the "pkg" edge to the WorkloadPkg entity.
func (au *AssetUpdate) SetPkg(w *WorkloadPkg) *AssetUpdate {
	return au.SetPkgID(w.ID)
}

// Mutation returns the AssetMutation object of the builder.
func (au *AssetUpdate) Mutation() *AssetMutation {
	return au.mutation
}

// ClearPkg clears the "pkg" edge to the WorkloadPkg entity.
func (au *AssetUpdate) ClearPkg() *AssetUpdate {
	au.mutation.ClearPkg()
	return au
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AssetUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	au.defaults()
	if len(au.hooks) == 0 {
		affected, err = au.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AssetMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			au.mutation = mutation
			affected, err = au.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(au.hooks) - 1; i >= 0; i-- {
			mut = au.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, au.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (au *AssetUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AssetUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AssetUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (au *AssetUpdate) defaults() {
	if _, ok := au.mutation.UpdateTime(); !ok {
		v := asset.UpdateDefaultUpdateTime()
		au.mutation.SetUpdateTime(v)
	}
}

func (au *AssetUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   asset.Table,
			Columns: asset.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: asset.FieldID,
			},
		},
	}
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asset.FieldUpdateTime,
		})
	}
	if value, ok := au.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asset.FieldStringRef,
		})
	}
	if au.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asset.FieldStringRef,
		})
	}
	if value, ok := au.mutation.Model(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asset.FieldModel,
		})
	}
	if value, ok := au.mutation.RegisteredAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asset.FieldRegisteredAt,
		})
	}
	if au.mutation.PkgCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asset.PkgTable,
			Columns: []string{asset.PkgColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workloadpkg.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.PkgIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asset.PkgTable,
			Columns: []string{asset.PkgColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workloadpkg.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{asset.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// AssetUpdateOne is the builder for updating a single Asset entity.
type AssetUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AssetMutation
}

// SetStringRef sets the "string_ref" field.
func (auo *AssetUpdateOne) SetStringRef(s string) *AssetUpdateOne {
	auo.mutation.SetStringRef(s)
	return auo
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (auo *AssetUpdateOne) SetNillableStringRef(s *string) *AssetUpdateOne {
	if s != nil {
		auo.SetStringRef(*s)
	}
	return auo
}

// ClearStringRef clears the value of the "string_ref" field.
func (auo *AssetUpdateOne) ClearStringRef() *AssetUpdateOne {
	auo.mutation.ClearStringRef()
	return auo
}

// SetModel sets the "model" field.
func (auo *AssetUpdateOne) SetModel(s string) *AssetUpdateOne {
	auo.mutation.SetModel(s)
	return auo
}

// SetRegisteredAt sets the "registered_at" field.
func (auo *AssetUpdateOne) SetRegisteredAt(t time.Time) *AssetUpdateOne {
	auo.mutation.SetRegisteredAt(t)
	return auo
}

// SetPkgID sets the "pkg" edge to the WorkloadPkg entity by ID.
func (auo *AssetUpdateOne) SetPkgID(id int) *AssetUpdateOne {
	auo.mutation.SetPkgID(id)
	return auo
}

// SetNillablePkgID sets the "pkg" edge to the WorkloadPkg entity by ID if the given value is not nil.
func (auo *AssetUpdateOne) SetNillablePkgID(id *int) *AssetUpdateOne {
	if id != nil {
		auo = auo.SetPkgID(*id)
	}
	return auo
}

// SetPkg sets the "pkg" edge to the WorkloadPkg entity.
func (auo *AssetUpdateOne) SetPkg(w *WorkloadPkg) *AssetUpdateOne {
	return auo.SetPkgID(w.ID)
}

// Mutation returns the AssetMutation object of the builder.
func (auo *AssetUpdateOne) Mutation() *AssetMutation {
	return auo.mutation
}

// ClearPkg clears the "pkg" edge to the WorkloadPkg entity.
func (auo *AssetUpdateOne) ClearPkg() *AssetUpdateOne {
	auo.mutation.ClearPkg()
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AssetUpdateOne) Select(field string, fields ...string) *AssetUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Asset entity.
func (auo *AssetUpdateOne) Save(ctx context.Context) (*Asset, error) {
	var (
		err  error
		node *Asset
	)
	auo.defaults()
	if len(auo.hooks) == 0 {
		node, err = auo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AssetMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			auo.mutation = mutation
			node, err = auo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(auo.hooks) - 1; i >= 0; i-- {
			mut = auo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, auo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AssetUpdateOne) SaveX(ctx context.Context) *Asset {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AssetUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AssetUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auo *AssetUpdateOne) defaults() {
	if _, ok := auo.mutation.UpdateTime(); !ok {
		v := asset.UpdateDefaultUpdateTime()
		auo.mutation.SetUpdateTime(v)
	}
}

func (auo *AssetUpdateOne) sqlSave(ctx context.Context) (_node *Asset, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   asset.Table,
			Columns: asset.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: asset.FieldID,
			},
		},
	}
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Asset.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, asset.FieldID)
		for _, f := range fields {
			if !asset.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != asset.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asset.FieldUpdateTime,
		})
	}
	if value, ok := auo.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asset.FieldStringRef,
		})
	}
	if auo.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asset.FieldStringRef,
		})
	}
	if value, ok := auo.mutation.Model(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asset.FieldModel,
		})
	}
	if value, ok := auo.mutation.RegisteredAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asset.FieldRegisteredAt,
		})
	}
	if auo.mutation.PkgCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asset.PkgTable,
			Columns: []string{asset.PkgColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workloadpkg.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.PkgIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asset.PkgTable,
			Columns: []string{asset.PkgColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workloadpkg.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Asset{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{asset.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
