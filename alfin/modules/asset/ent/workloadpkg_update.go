// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/asset/ent/asset"
	"github.com/samlet/petrel/alfin/modules/asset/ent/predicate"
	"github.com/samlet/petrel/alfin/modules/asset/ent/workloadpkg"
)

// WorkloadPkgUpdate is the builder for updating WorkloadPkg entities.
type WorkloadPkgUpdate struct {
	config
	hooks    []Hook
	mutation *WorkloadPkgMutation
}

// Where adds a new predicate for the WorkloadPkgUpdate builder.
func (wpu *WorkloadPkgUpdate) Where(ps ...predicate.WorkloadPkg) *WorkloadPkgUpdate {
	wpu.mutation.predicates = append(wpu.mutation.predicates, ps...)
	return wpu
}

// SetName sets the "name" field.
func (wpu *WorkloadPkgUpdate) SetName(s string) *WorkloadPkgUpdate {
	wpu.mutation.SetName(s)
	return wpu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (wpu *WorkloadPkgUpdate) SetNillableName(s *string) *WorkloadPkgUpdate {
	if s != nil {
		wpu.SetName(*s)
	}
	return wpu
}

// AddAssetIDs adds the "assets" edge to the Asset entity by IDs.
func (wpu *WorkloadPkgUpdate) AddAssetIDs(ids ...int) *WorkloadPkgUpdate {
	wpu.mutation.AddAssetIDs(ids...)
	return wpu
}

// AddAssets adds the "assets" edges to the Asset entity.
func (wpu *WorkloadPkgUpdate) AddAssets(a ...*Asset) *WorkloadPkgUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return wpu.AddAssetIDs(ids...)
}

// Mutation returns the WorkloadPkgMutation object of the builder.
func (wpu *WorkloadPkgUpdate) Mutation() *WorkloadPkgMutation {
	return wpu.mutation
}

// ClearAssets clears all "assets" edges to the Asset entity.
func (wpu *WorkloadPkgUpdate) ClearAssets() *WorkloadPkgUpdate {
	wpu.mutation.ClearAssets()
	return wpu
}

// RemoveAssetIDs removes the "assets" edge to Asset entities by IDs.
func (wpu *WorkloadPkgUpdate) RemoveAssetIDs(ids ...int) *WorkloadPkgUpdate {
	wpu.mutation.RemoveAssetIDs(ids...)
	return wpu
}

// RemoveAssets removes "assets" edges to Asset entities.
func (wpu *WorkloadPkgUpdate) RemoveAssets(a ...*Asset) *WorkloadPkgUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return wpu.RemoveAssetIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wpu *WorkloadPkgUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(wpu.hooks) == 0 {
		affected, err = wpu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WorkloadPkgMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			wpu.mutation = mutation
			affected, err = wpu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(wpu.hooks) - 1; i >= 0; i-- {
			mut = wpu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, wpu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (wpu *WorkloadPkgUpdate) SaveX(ctx context.Context) int {
	affected, err := wpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wpu *WorkloadPkgUpdate) Exec(ctx context.Context) error {
	_, err := wpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wpu *WorkloadPkgUpdate) ExecX(ctx context.Context) {
	if err := wpu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (wpu *WorkloadPkgUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   workloadpkg.Table,
			Columns: workloadpkg.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: workloadpkg.FieldID,
			},
		},
	}
	if ps := wpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wpu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: workloadpkg.FieldName,
		})
	}
	if wpu.mutation.AssetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workloadpkg.AssetsTable,
			Columns: []string{workloadpkg.AssetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: asset.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wpu.mutation.RemovedAssetsIDs(); len(nodes) > 0 && !wpu.mutation.AssetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workloadpkg.AssetsTable,
			Columns: []string{workloadpkg.AssetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: asset.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wpu.mutation.AssetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workloadpkg.AssetsTable,
			Columns: []string{workloadpkg.AssetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: asset.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workloadpkg.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// WorkloadPkgUpdateOne is the builder for updating a single WorkloadPkg entity.
type WorkloadPkgUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WorkloadPkgMutation
}

// SetName sets the "name" field.
func (wpuo *WorkloadPkgUpdateOne) SetName(s string) *WorkloadPkgUpdateOne {
	wpuo.mutation.SetName(s)
	return wpuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (wpuo *WorkloadPkgUpdateOne) SetNillableName(s *string) *WorkloadPkgUpdateOne {
	if s != nil {
		wpuo.SetName(*s)
	}
	return wpuo
}

// AddAssetIDs adds the "assets" edge to the Asset entity by IDs.
func (wpuo *WorkloadPkgUpdateOne) AddAssetIDs(ids ...int) *WorkloadPkgUpdateOne {
	wpuo.mutation.AddAssetIDs(ids...)
	return wpuo
}

// AddAssets adds the "assets" edges to the Asset entity.
func (wpuo *WorkloadPkgUpdateOne) AddAssets(a ...*Asset) *WorkloadPkgUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return wpuo.AddAssetIDs(ids...)
}

// Mutation returns the WorkloadPkgMutation object of the builder.
func (wpuo *WorkloadPkgUpdateOne) Mutation() *WorkloadPkgMutation {
	return wpuo.mutation
}

// ClearAssets clears all "assets" edges to the Asset entity.
func (wpuo *WorkloadPkgUpdateOne) ClearAssets() *WorkloadPkgUpdateOne {
	wpuo.mutation.ClearAssets()
	return wpuo
}

// RemoveAssetIDs removes the "assets" edge to Asset entities by IDs.
func (wpuo *WorkloadPkgUpdateOne) RemoveAssetIDs(ids ...int) *WorkloadPkgUpdateOne {
	wpuo.mutation.RemoveAssetIDs(ids...)
	return wpuo
}

// RemoveAssets removes "assets" edges to Asset entities.
func (wpuo *WorkloadPkgUpdateOne) RemoveAssets(a ...*Asset) *WorkloadPkgUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return wpuo.RemoveAssetIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wpuo *WorkloadPkgUpdateOne) Select(field string, fields ...string) *WorkloadPkgUpdateOne {
	wpuo.fields = append([]string{field}, fields...)
	return wpuo
}

// Save executes the query and returns the updated WorkloadPkg entity.
func (wpuo *WorkloadPkgUpdateOne) Save(ctx context.Context) (*WorkloadPkg, error) {
	var (
		err  error
		node *WorkloadPkg
	)
	if len(wpuo.hooks) == 0 {
		node, err = wpuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WorkloadPkgMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			wpuo.mutation = mutation
			node, err = wpuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(wpuo.hooks) - 1; i >= 0; i-- {
			mut = wpuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, wpuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (wpuo *WorkloadPkgUpdateOne) SaveX(ctx context.Context) *WorkloadPkg {
	node, err := wpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wpuo *WorkloadPkgUpdateOne) Exec(ctx context.Context) error {
	_, err := wpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wpuo *WorkloadPkgUpdateOne) ExecX(ctx context.Context) {
	if err := wpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (wpuo *WorkloadPkgUpdateOne) sqlSave(ctx context.Context) (_node *WorkloadPkg, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   workloadpkg.Table,
			Columns: workloadpkg.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: workloadpkg.FieldID,
			},
		},
	}
	id, ok := wpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing WorkloadPkg.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := wpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, workloadpkg.FieldID)
		for _, f := range fields {
			if !workloadpkg.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != workloadpkg.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wpuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: workloadpkg.FieldName,
		})
	}
	if wpuo.mutation.AssetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workloadpkg.AssetsTable,
			Columns: []string{workloadpkg.AssetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: asset.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wpuo.mutation.RemovedAssetsIDs(); len(nodes) > 0 && !wpuo.mutation.AssetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workloadpkg.AssetsTable,
			Columns: []string{workloadpkg.AssetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: asset.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wpuo.mutation.AssetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workloadpkg.AssetsTable,
			Columns: []string{workloadpkg.AssetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: asset.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &WorkloadPkg{config: wpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workloadpkg.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
