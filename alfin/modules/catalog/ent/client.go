// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/samlet/petrel/alfin/modules/catalog/ent/migrate"

	"github.com/samlet/petrel/alfin/modules/catalog/ent/contentassoctype"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/contenttype"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/costcomponenttype"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/custommethod"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/custommethodtype"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/enumeration"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/enumerationtype"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/facilityassoctype"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/facilitygroup"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/facilitygrouptype"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/facilitytype"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/goodidentificationtype"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/inventoryitemdetail"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/inventoryitemtype"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/orderadjustment"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/ordercontactmech"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/orderheader"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/orderitem"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/orderitemshipgroup"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/orderitemshipgroupassoc"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/orderitemshipgrpinvres"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/orderpaymentpreference"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/orderrole"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/orderstatus"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/prodcatalogcategorytype"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/prodconfitemcontenttype"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/product"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productassoc"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productassoctype"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productcategory"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productcategorycontenttype"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productcategorytype"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productconfigitem"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productcontenttype"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productfeature"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productfeatureappltype"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productfeaturecategory"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productfeatureiactntype"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productfeaturetype"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productmainttype"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productmetertype"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productprice"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productpriceactiontype"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productpricepurpose"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productpricetype"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productreview"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productstore"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productstoregroup"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/producttype"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/quantitybreaktype"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/rejectionreason"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/roletype"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/shipmentcontactmechtype"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/shipmentgatewayconfig"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/shipmentgatewayconfigtype"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/shipmentgatewaydhl"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/shipmentgatewayfedex"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/shipmentgatewayups"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/shipmentgatewayusps"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/shipmenttype"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/statusitem"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/statustype"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/statusvalidchange"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/subscriptiontype"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/supplierpreforder"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/variancereason"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// ContentAssocType is the client for interacting with the ContentAssocType builders.
	ContentAssocType *ContentAssocTypeClient
	// ContentType is the client for interacting with the ContentType builders.
	ContentType *ContentTypeClient
	// CostComponentType is the client for interacting with the CostComponentType builders.
	CostComponentType *CostComponentTypeClient
	// CustomMethod is the client for interacting with the CustomMethod builders.
	CustomMethod *CustomMethodClient
	// CustomMethodType is the client for interacting with the CustomMethodType builders.
	CustomMethodType *CustomMethodTypeClient
	// Enumeration is the client for interacting with the Enumeration builders.
	Enumeration *EnumerationClient
	// EnumerationType is the client for interacting with the EnumerationType builders.
	EnumerationType *EnumerationTypeClient
	// FacilityAssocType is the client for interacting with the FacilityAssocType builders.
	FacilityAssocType *FacilityAssocTypeClient
	// FacilityGroup is the client for interacting with the FacilityGroup builders.
	FacilityGroup *FacilityGroupClient
	// FacilityGroupType is the client for interacting with the FacilityGroupType builders.
	FacilityGroupType *FacilityGroupTypeClient
	// FacilityType is the client for interacting with the FacilityType builders.
	FacilityType *FacilityTypeClient
	// GoodIdentificationType is the client for interacting with the GoodIdentificationType builders.
	GoodIdentificationType *GoodIdentificationTypeClient
	// InventoryItemDetail is the client for interacting with the InventoryItemDetail builders.
	InventoryItemDetail *InventoryItemDetailClient
	// InventoryItemType is the client for interacting with the InventoryItemType builders.
	InventoryItemType *InventoryItemTypeClient
	// OrderAdjustment is the client for interacting with the OrderAdjustment builders.
	OrderAdjustment *OrderAdjustmentClient
	// OrderContactMech is the client for interacting with the OrderContactMech builders.
	OrderContactMech *OrderContactMechClient
	// OrderHeader is the client for interacting with the OrderHeader builders.
	OrderHeader *OrderHeaderClient
	// OrderItem is the client for interacting with the OrderItem builders.
	OrderItem *OrderItemClient
	// OrderItemShipGroup is the client for interacting with the OrderItemShipGroup builders.
	OrderItemShipGroup *OrderItemShipGroupClient
	// OrderItemShipGroupAssoc is the client for interacting with the OrderItemShipGroupAssoc builders.
	OrderItemShipGroupAssoc *OrderItemShipGroupAssocClient
	// OrderItemShipGrpInvRes is the client for interacting with the OrderItemShipGrpInvRes builders.
	OrderItemShipGrpInvRes *OrderItemShipGrpInvResClient
	// OrderPaymentPreference is the client for interacting with the OrderPaymentPreference builders.
	OrderPaymentPreference *OrderPaymentPreferenceClient
	// OrderRole is the client for interacting with the OrderRole builders.
	OrderRole *OrderRoleClient
	// OrderStatus is the client for interacting with the OrderStatus builders.
	OrderStatus *OrderStatusClient
	// ProdCatalogCategoryType is the client for interacting with the ProdCatalogCategoryType builders.
	ProdCatalogCategoryType *ProdCatalogCategoryTypeClient
	// ProdConfItemContentType is the client for interacting with the ProdConfItemContentType builders.
	ProdConfItemContentType *ProdConfItemContentTypeClient
	// Product is the client for interacting with the Product builders.
	Product *ProductClient
	// ProductAssoc is the client for interacting with the ProductAssoc builders.
	ProductAssoc *ProductAssocClient
	// ProductAssocType is the client for interacting with the ProductAssocType builders.
	ProductAssocType *ProductAssocTypeClient
	// ProductCategory is the client for interacting with the ProductCategory builders.
	ProductCategory *ProductCategoryClient
	// ProductCategoryContentType is the client for interacting with the ProductCategoryContentType builders.
	ProductCategoryContentType *ProductCategoryContentTypeClient
	// ProductCategoryType is the client for interacting with the ProductCategoryType builders.
	ProductCategoryType *ProductCategoryTypeClient
	// ProductConfigItem is the client for interacting with the ProductConfigItem builders.
	ProductConfigItem *ProductConfigItemClient
	// ProductContentType is the client for interacting with the ProductContentType builders.
	ProductContentType *ProductContentTypeClient
	// ProductFeature is the client for interacting with the ProductFeature builders.
	ProductFeature *ProductFeatureClient
	// ProductFeatureApplType is the client for interacting with the ProductFeatureApplType builders.
	ProductFeatureApplType *ProductFeatureApplTypeClient
	// ProductFeatureCategory is the client for interacting with the ProductFeatureCategory builders.
	ProductFeatureCategory *ProductFeatureCategoryClient
	// ProductFeatureIactnType is the client for interacting with the ProductFeatureIactnType builders.
	ProductFeatureIactnType *ProductFeatureIactnTypeClient
	// ProductFeatureType is the client for interacting with the ProductFeatureType builders.
	ProductFeatureType *ProductFeatureTypeClient
	// ProductMaintType is the client for interacting with the ProductMaintType builders.
	ProductMaintType *ProductMaintTypeClient
	// ProductMeterType is the client for interacting with the ProductMeterType builders.
	ProductMeterType *ProductMeterTypeClient
	// ProductPrice is the client for interacting with the ProductPrice builders.
	ProductPrice *ProductPriceClient
	// ProductPriceActionType is the client for interacting with the ProductPriceActionType builders.
	ProductPriceActionType *ProductPriceActionTypeClient
	// ProductPricePurpose is the client for interacting with the ProductPricePurpose builders.
	ProductPricePurpose *ProductPricePurposeClient
	// ProductPriceType is the client for interacting with the ProductPriceType builders.
	ProductPriceType *ProductPriceTypeClient
	// ProductReview is the client for interacting with the ProductReview builders.
	ProductReview *ProductReviewClient
	// ProductStore is the client for interacting with the ProductStore builders.
	ProductStore *ProductStoreClient
	// ProductStoreGroup is the client for interacting with the ProductStoreGroup builders.
	ProductStoreGroup *ProductStoreGroupClient
	// ProductType is the client for interacting with the ProductType builders.
	ProductType *ProductTypeClient
	// QuantityBreakType is the client for interacting with the QuantityBreakType builders.
	QuantityBreakType *QuantityBreakTypeClient
	// RejectionReason is the client for interacting with the RejectionReason builders.
	RejectionReason *RejectionReasonClient
	// RoleType is the client for interacting with the RoleType builders.
	RoleType *RoleTypeClient
	// ShipmentContactMechType is the client for interacting with the ShipmentContactMechType builders.
	ShipmentContactMechType *ShipmentContactMechTypeClient
	// ShipmentGatewayConfig is the client for interacting with the ShipmentGatewayConfig builders.
	ShipmentGatewayConfig *ShipmentGatewayConfigClient
	// ShipmentGatewayConfigType is the client for interacting with the ShipmentGatewayConfigType builders.
	ShipmentGatewayConfigType *ShipmentGatewayConfigTypeClient
	// ShipmentGatewayDhl is the client for interacting with the ShipmentGatewayDhl builders.
	ShipmentGatewayDhl *ShipmentGatewayDhlClient
	// ShipmentGatewayFedex is the client for interacting with the ShipmentGatewayFedex builders.
	ShipmentGatewayFedex *ShipmentGatewayFedexClient
	// ShipmentGatewayUps is the client for interacting with the ShipmentGatewayUps builders.
	ShipmentGatewayUps *ShipmentGatewayUpsClient
	// ShipmentGatewayUsps is the client for interacting with the ShipmentGatewayUsps builders.
	ShipmentGatewayUsps *ShipmentGatewayUspsClient
	// ShipmentType is the client for interacting with the ShipmentType builders.
	ShipmentType *ShipmentTypeClient
	// StatusItem is the client for interacting with the StatusItem builders.
	StatusItem *StatusItemClient
	// StatusType is the client for interacting with the StatusType builders.
	StatusType *StatusTypeClient
	// StatusValidChange is the client for interacting with the StatusValidChange builders.
	StatusValidChange *StatusValidChangeClient
	// SubscriptionType is the client for interacting with the SubscriptionType builders.
	SubscriptionType *SubscriptionTypeClient
	// SupplierPrefOrder is the client for interacting with the SupplierPrefOrder builders.
	SupplierPrefOrder *SupplierPrefOrderClient
	// VarianceReason is the client for interacting with the VarianceReason builders.
	VarianceReason *VarianceReasonClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.ContentAssocType = NewContentAssocTypeClient(c.config)
	c.ContentType = NewContentTypeClient(c.config)
	c.CostComponentType = NewCostComponentTypeClient(c.config)
	c.CustomMethod = NewCustomMethodClient(c.config)
	c.CustomMethodType = NewCustomMethodTypeClient(c.config)
	c.Enumeration = NewEnumerationClient(c.config)
	c.EnumerationType = NewEnumerationTypeClient(c.config)
	c.FacilityAssocType = NewFacilityAssocTypeClient(c.config)
	c.FacilityGroup = NewFacilityGroupClient(c.config)
	c.FacilityGroupType = NewFacilityGroupTypeClient(c.config)
	c.FacilityType = NewFacilityTypeClient(c.config)
	c.GoodIdentificationType = NewGoodIdentificationTypeClient(c.config)
	c.InventoryItemDetail = NewInventoryItemDetailClient(c.config)
	c.InventoryItemType = NewInventoryItemTypeClient(c.config)
	c.OrderAdjustment = NewOrderAdjustmentClient(c.config)
	c.OrderContactMech = NewOrderContactMechClient(c.config)
	c.OrderHeader = NewOrderHeaderClient(c.config)
	c.OrderItem = NewOrderItemClient(c.config)
	c.OrderItemShipGroup = NewOrderItemShipGroupClient(c.config)
	c.OrderItemShipGroupAssoc = NewOrderItemShipGroupAssocClient(c.config)
	c.OrderItemShipGrpInvRes = NewOrderItemShipGrpInvResClient(c.config)
	c.OrderPaymentPreference = NewOrderPaymentPreferenceClient(c.config)
	c.OrderRole = NewOrderRoleClient(c.config)
	c.OrderStatus = NewOrderStatusClient(c.config)
	c.ProdCatalogCategoryType = NewProdCatalogCategoryTypeClient(c.config)
	c.ProdConfItemContentType = NewProdConfItemContentTypeClient(c.config)
	c.Product = NewProductClient(c.config)
	c.ProductAssoc = NewProductAssocClient(c.config)
	c.ProductAssocType = NewProductAssocTypeClient(c.config)
	c.ProductCategory = NewProductCategoryClient(c.config)
	c.ProductCategoryContentType = NewProductCategoryContentTypeClient(c.config)
	c.ProductCategoryType = NewProductCategoryTypeClient(c.config)
	c.ProductConfigItem = NewProductConfigItemClient(c.config)
	c.ProductContentType = NewProductContentTypeClient(c.config)
	c.ProductFeature = NewProductFeatureClient(c.config)
	c.ProductFeatureApplType = NewProductFeatureApplTypeClient(c.config)
	c.ProductFeatureCategory = NewProductFeatureCategoryClient(c.config)
	c.ProductFeatureIactnType = NewProductFeatureIactnTypeClient(c.config)
	c.ProductFeatureType = NewProductFeatureTypeClient(c.config)
	c.ProductMaintType = NewProductMaintTypeClient(c.config)
	c.ProductMeterType = NewProductMeterTypeClient(c.config)
	c.ProductPrice = NewProductPriceClient(c.config)
	c.ProductPriceActionType = NewProductPriceActionTypeClient(c.config)
	c.ProductPricePurpose = NewProductPricePurposeClient(c.config)
	c.ProductPriceType = NewProductPriceTypeClient(c.config)
	c.ProductReview = NewProductReviewClient(c.config)
	c.ProductStore = NewProductStoreClient(c.config)
	c.ProductStoreGroup = NewProductStoreGroupClient(c.config)
	c.ProductType = NewProductTypeClient(c.config)
	c.QuantityBreakType = NewQuantityBreakTypeClient(c.config)
	c.RejectionReason = NewRejectionReasonClient(c.config)
	c.RoleType = NewRoleTypeClient(c.config)
	c.ShipmentContactMechType = NewShipmentContactMechTypeClient(c.config)
	c.ShipmentGatewayConfig = NewShipmentGatewayConfigClient(c.config)
	c.ShipmentGatewayConfigType = NewShipmentGatewayConfigTypeClient(c.config)
	c.ShipmentGatewayDhl = NewShipmentGatewayDhlClient(c.config)
	c.ShipmentGatewayFedex = NewShipmentGatewayFedexClient(c.config)
	c.ShipmentGatewayUps = NewShipmentGatewayUpsClient(c.config)
	c.ShipmentGatewayUsps = NewShipmentGatewayUspsClient(c.config)
	c.ShipmentType = NewShipmentTypeClient(c.config)
	c.StatusItem = NewStatusItemClient(c.config)
	c.StatusType = NewStatusTypeClient(c.config)
	c.StatusValidChange = NewStatusValidChangeClient(c.config)
	c.SubscriptionType = NewSubscriptionTypeClient(c.config)
	c.SupplierPrefOrder = NewSupplierPrefOrderClient(c.config)
	c.VarianceReason = NewVarianceReasonClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                        ctx,
		config:                     cfg,
		ContentAssocType:           NewContentAssocTypeClient(cfg),
		ContentType:                NewContentTypeClient(cfg),
		CostComponentType:          NewCostComponentTypeClient(cfg),
		CustomMethod:               NewCustomMethodClient(cfg),
		CustomMethodType:           NewCustomMethodTypeClient(cfg),
		Enumeration:                NewEnumerationClient(cfg),
		EnumerationType:            NewEnumerationTypeClient(cfg),
		FacilityAssocType:          NewFacilityAssocTypeClient(cfg),
		FacilityGroup:              NewFacilityGroupClient(cfg),
		FacilityGroupType:          NewFacilityGroupTypeClient(cfg),
		FacilityType:               NewFacilityTypeClient(cfg),
		GoodIdentificationType:     NewGoodIdentificationTypeClient(cfg),
		InventoryItemDetail:        NewInventoryItemDetailClient(cfg),
		InventoryItemType:          NewInventoryItemTypeClient(cfg),
		OrderAdjustment:            NewOrderAdjustmentClient(cfg),
		OrderContactMech:           NewOrderContactMechClient(cfg),
		OrderHeader:                NewOrderHeaderClient(cfg),
		OrderItem:                  NewOrderItemClient(cfg),
		OrderItemShipGroup:         NewOrderItemShipGroupClient(cfg),
		OrderItemShipGroupAssoc:    NewOrderItemShipGroupAssocClient(cfg),
		OrderItemShipGrpInvRes:     NewOrderItemShipGrpInvResClient(cfg),
		OrderPaymentPreference:     NewOrderPaymentPreferenceClient(cfg),
		OrderRole:                  NewOrderRoleClient(cfg),
		OrderStatus:                NewOrderStatusClient(cfg),
		ProdCatalogCategoryType:    NewProdCatalogCategoryTypeClient(cfg),
		ProdConfItemContentType:    NewProdConfItemContentTypeClient(cfg),
		Product:                    NewProductClient(cfg),
		ProductAssoc:               NewProductAssocClient(cfg),
		ProductAssocType:           NewProductAssocTypeClient(cfg),
		ProductCategory:            NewProductCategoryClient(cfg),
		ProductCategoryContentType: NewProductCategoryContentTypeClient(cfg),
		ProductCategoryType:        NewProductCategoryTypeClient(cfg),
		ProductConfigItem:          NewProductConfigItemClient(cfg),
		ProductContentType:         NewProductContentTypeClient(cfg),
		ProductFeature:             NewProductFeatureClient(cfg),
		ProductFeatureApplType:     NewProductFeatureApplTypeClient(cfg),
		ProductFeatureCategory:     NewProductFeatureCategoryClient(cfg),
		ProductFeatureIactnType:    NewProductFeatureIactnTypeClient(cfg),
		ProductFeatureType:         NewProductFeatureTypeClient(cfg),
		ProductMaintType:           NewProductMaintTypeClient(cfg),
		ProductMeterType:           NewProductMeterTypeClient(cfg),
		ProductPrice:               NewProductPriceClient(cfg),
		ProductPriceActionType:     NewProductPriceActionTypeClient(cfg),
		ProductPricePurpose:        NewProductPricePurposeClient(cfg),
		ProductPriceType:           NewProductPriceTypeClient(cfg),
		ProductReview:              NewProductReviewClient(cfg),
		ProductStore:               NewProductStoreClient(cfg),
		ProductStoreGroup:          NewProductStoreGroupClient(cfg),
		ProductType:                NewProductTypeClient(cfg),
		QuantityBreakType:          NewQuantityBreakTypeClient(cfg),
		RejectionReason:            NewRejectionReasonClient(cfg),
		RoleType:                   NewRoleTypeClient(cfg),
		ShipmentContactMechType:    NewShipmentContactMechTypeClient(cfg),
		ShipmentGatewayConfig:      NewShipmentGatewayConfigClient(cfg),
		ShipmentGatewayConfigType:  NewShipmentGatewayConfigTypeClient(cfg),
		ShipmentGatewayDhl:         NewShipmentGatewayDhlClient(cfg),
		ShipmentGatewayFedex:       NewShipmentGatewayFedexClient(cfg),
		ShipmentGatewayUps:         NewShipmentGatewayUpsClient(cfg),
		ShipmentGatewayUsps:        NewShipmentGatewayUspsClient(cfg),
		ShipmentType:               NewShipmentTypeClient(cfg),
		StatusItem:                 NewStatusItemClient(cfg),
		StatusType:                 NewStatusTypeClient(cfg),
		StatusValidChange:          NewStatusValidChangeClient(cfg),
		SubscriptionType:           NewSubscriptionTypeClient(cfg),
		SupplierPrefOrder:          NewSupplierPrefOrderClient(cfg),
		VarianceReason:             NewVarianceReasonClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		config:                     cfg,
		ContentAssocType:           NewContentAssocTypeClient(cfg),
		ContentType:                NewContentTypeClient(cfg),
		CostComponentType:          NewCostComponentTypeClient(cfg),
		CustomMethod:               NewCustomMethodClient(cfg),
		CustomMethodType:           NewCustomMethodTypeClient(cfg),
		Enumeration:                NewEnumerationClient(cfg),
		EnumerationType:            NewEnumerationTypeClient(cfg),
		FacilityAssocType:          NewFacilityAssocTypeClient(cfg),
		FacilityGroup:              NewFacilityGroupClient(cfg),
		FacilityGroupType:          NewFacilityGroupTypeClient(cfg),
		FacilityType:               NewFacilityTypeClient(cfg),
		GoodIdentificationType:     NewGoodIdentificationTypeClient(cfg),
		InventoryItemDetail:        NewInventoryItemDetailClient(cfg),
		InventoryItemType:          NewInventoryItemTypeClient(cfg),
		OrderAdjustment:            NewOrderAdjustmentClient(cfg),
		OrderContactMech:           NewOrderContactMechClient(cfg),
		OrderHeader:                NewOrderHeaderClient(cfg),
		OrderItem:                  NewOrderItemClient(cfg),
		OrderItemShipGroup:         NewOrderItemShipGroupClient(cfg),
		OrderItemShipGroupAssoc:    NewOrderItemShipGroupAssocClient(cfg),
		OrderItemShipGrpInvRes:     NewOrderItemShipGrpInvResClient(cfg),
		OrderPaymentPreference:     NewOrderPaymentPreferenceClient(cfg),
		OrderRole:                  NewOrderRoleClient(cfg),
		OrderStatus:                NewOrderStatusClient(cfg),
		ProdCatalogCategoryType:    NewProdCatalogCategoryTypeClient(cfg),
		ProdConfItemContentType:    NewProdConfItemContentTypeClient(cfg),
		Product:                    NewProductClient(cfg),
		ProductAssoc:               NewProductAssocClient(cfg),
		ProductAssocType:           NewProductAssocTypeClient(cfg),
		ProductCategory:            NewProductCategoryClient(cfg),
		ProductCategoryContentType: NewProductCategoryContentTypeClient(cfg),
		ProductCategoryType:        NewProductCategoryTypeClient(cfg),
		ProductConfigItem:          NewProductConfigItemClient(cfg),
		ProductContentType:         NewProductContentTypeClient(cfg),
		ProductFeature:             NewProductFeatureClient(cfg),
		ProductFeatureApplType:     NewProductFeatureApplTypeClient(cfg),
		ProductFeatureCategory:     NewProductFeatureCategoryClient(cfg),
		ProductFeatureIactnType:    NewProductFeatureIactnTypeClient(cfg),
		ProductFeatureType:         NewProductFeatureTypeClient(cfg),
		ProductMaintType:           NewProductMaintTypeClient(cfg),
		ProductMeterType:           NewProductMeterTypeClient(cfg),
		ProductPrice:               NewProductPriceClient(cfg),
		ProductPriceActionType:     NewProductPriceActionTypeClient(cfg),
		ProductPricePurpose:        NewProductPricePurposeClient(cfg),
		ProductPriceType:           NewProductPriceTypeClient(cfg),
		ProductReview:              NewProductReviewClient(cfg),
		ProductStore:               NewProductStoreClient(cfg),
		ProductStoreGroup:          NewProductStoreGroupClient(cfg),
		ProductType:                NewProductTypeClient(cfg),
		QuantityBreakType:          NewQuantityBreakTypeClient(cfg),
		RejectionReason:            NewRejectionReasonClient(cfg),
		RoleType:                   NewRoleTypeClient(cfg),
		ShipmentContactMechType:    NewShipmentContactMechTypeClient(cfg),
		ShipmentGatewayConfig:      NewShipmentGatewayConfigClient(cfg),
		ShipmentGatewayConfigType:  NewShipmentGatewayConfigTypeClient(cfg),
		ShipmentGatewayDhl:         NewShipmentGatewayDhlClient(cfg),
		ShipmentGatewayFedex:       NewShipmentGatewayFedexClient(cfg),
		ShipmentGatewayUps:         NewShipmentGatewayUpsClient(cfg),
		ShipmentGatewayUsps:        NewShipmentGatewayUspsClient(cfg),
		ShipmentType:               NewShipmentTypeClient(cfg),
		StatusItem:                 NewStatusItemClient(cfg),
		StatusType:                 NewStatusTypeClient(cfg),
		StatusValidChange:          NewStatusValidChangeClient(cfg),
		SubscriptionType:           NewSubscriptionTypeClient(cfg),
		SupplierPrefOrder:          NewSupplierPrefOrderClient(cfg),
		VarianceReason:             NewVarianceReasonClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		ContentAssocType.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.ContentAssocType.Use(hooks...)
	c.ContentType.Use(hooks...)
	c.CostComponentType.Use(hooks...)
	c.CustomMethod.Use(hooks...)
	c.CustomMethodType.Use(hooks...)
	c.Enumeration.Use(hooks...)
	c.EnumerationType.Use(hooks...)
	c.FacilityAssocType.Use(hooks...)
	c.FacilityGroup.Use(hooks...)
	c.FacilityGroupType.Use(hooks...)
	c.FacilityType.Use(hooks...)
	c.GoodIdentificationType.Use(hooks...)
	c.InventoryItemDetail.Use(hooks...)
	c.InventoryItemType.Use(hooks...)
	c.OrderAdjustment.Use(hooks...)
	c.OrderContactMech.Use(hooks...)
	c.OrderHeader.Use(hooks...)
	c.OrderItem.Use(hooks...)
	c.OrderItemShipGroup.Use(hooks...)
	c.OrderItemShipGroupAssoc.Use(hooks...)
	c.OrderItemShipGrpInvRes.Use(hooks...)
	c.OrderPaymentPreference.Use(hooks...)
	c.OrderRole.Use(hooks...)
	c.OrderStatus.Use(hooks...)
	c.ProdCatalogCategoryType.Use(hooks...)
	c.ProdConfItemContentType.Use(hooks...)
	c.Product.Use(hooks...)
	c.ProductAssoc.Use(hooks...)
	c.ProductAssocType.Use(hooks...)
	c.ProductCategory.Use(hooks...)
	c.ProductCategoryContentType.Use(hooks...)
	c.ProductCategoryType.Use(hooks...)
	c.ProductConfigItem.Use(hooks...)
	c.ProductContentType.Use(hooks...)
	c.ProductFeature.Use(hooks...)
	c.ProductFeatureApplType.Use(hooks...)
	c.ProductFeatureCategory.Use(hooks...)
	c.ProductFeatureIactnType.Use(hooks...)
	c.ProductFeatureType.Use(hooks...)
	c.ProductMaintType.Use(hooks...)
	c.ProductMeterType.Use(hooks...)
	c.ProductPrice.Use(hooks...)
	c.ProductPriceActionType.Use(hooks...)
	c.ProductPricePurpose.Use(hooks...)
	c.ProductPriceType.Use(hooks...)
	c.ProductReview.Use(hooks...)
	c.ProductStore.Use(hooks...)
	c.ProductStoreGroup.Use(hooks...)
	c.ProductType.Use(hooks...)
	c.QuantityBreakType.Use(hooks...)
	c.RejectionReason.Use(hooks...)
	c.RoleType.Use(hooks...)
	c.ShipmentContactMechType.Use(hooks...)
	c.ShipmentGatewayConfig.Use(hooks...)
	c.ShipmentGatewayConfigType.Use(hooks...)
	c.ShipmentGatewayDhl.Use(hooks...)
	c.ShipmentGatewayFedex.Use(hooks...)
	c.ShipmentGatewayUps.Use(hooks...)
	c.ShipmentGatewayUsps.Use(hooks...)
	c.ShipmentType.Use(hooks...)
	c.StatusItem.Use(hooks...)
	c.StatusType.Use(hooks...)
	c.StatusValidChange.Use(hooks...)
	c.SubscriptionType.Use(hooks...)
	c.SupplierPrefOrder.Use(hooks...)
	c.VarianceReason.Use(hooks...)
}

// ContentAssocTypeClient is a client for the ContentAssocType schema.
type ContentAssocTypeClient struct {
	config
}

// NewContentAssocTypeClient returns a client for the ContentAssocType from the given config.
func NewContentAssocTypeClient(c config) *ContentAssocTypeClient {
	return &ContentAssocTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `contentassoctype.Hooks(f(g(h())))`.
func (c *ContentAssocTypeClient) Use(hooks ...Hook) {
	c.hooks.ContentAssocType = append(c.hooks.ContentAssocType, hooks...)
}

// Create returns a create builder for ContentAssocType.
func (c *ContentAssocTypeClient) Create() *ContentAssocTypeCreate {
	mutation := newContentAssocTypeMutation(c.config, OpCreate)
	return &ContentAssocTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ContentAssocType entities.
func (c *ContentAssocTypeClient) CreateBulk(builders ...*ContentAssocTypeCreate) *ContentAssocTypeCreateBulk {
	return &ContentAssocTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ContentAssocType.
func (c *ContentAssocTypeClient) Update() *ContentAssocTypeUpdate {
	mutation := newContentAssocTypeMutation(c.config, OpUpdate)
	return &ContentAssocTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ContentAssocTypeClient) UpdateOne(cat *ContentAssocType) *ContentAssocTypeUpdateOne {
	mutation := newContentAssocTypeMutation(c.config, OpUpdateOne, withContentAssocType(cat))
	return &ContentAssocTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ContentAssocTypeClient) UpdateOneID(id int) *ContentAssocTypeUpdateOne {
	mutation := newContentAssocTypeMutation(c.config, OpUpdateOne, withContentAssocTypeID(id))
	return &ContentAssocTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ContentAssocType.
func (c *ContentAssocTypeClient) Delete() *ContentAssocTypeDelete {
	mutation := newContentAssocTypeMutation(c.config, OpDelete)
	return &ContentAssocTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ContentAssocTypeClient) DeleteOne(cat *ContentAssocType) *ContentAssocTypeDeleteOne {
	return c.DeleteOneID(cat.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ContentAssocTypeClient) DeleteOneID(id int) *ContentAssocTypeDeleteOne {
	builder := c.Delete().Where(contentassoctype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ContentAssocTypeDeleteOne{builder}
}

// Query returns a query builder for ContentAssocType.
func (c *ContentAssocTypeClient) Query() *ContentAssocTypeQuery {
	return &ContentAssocTypeQuery{
		config: c.config,
	}
}

// Get returns a ContentAssocType entity by its id.
func (c *ContentAssocTypeClient) Get(ctx context.Context, id int) (*ContentAssocType, error) {
	return c.Query().Where(contentassoctype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ContentAssocTypeClient) GetX(ctx context.Context, id int) *ContentAssocType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ContentAssocTypeClient) Hooks() []Hook {
	return c.hooks.ContentAssocType
}

// ContentTypeClient is a client for the ContentType schema.
type ContentTypeClient struct {
	config
}

// NewContentTypeClient returns a client for the ContentType from the given config.
func NewContentTypeClient(c config) *ContentTypeClient {
	return &ContentTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `contenttype.Hooks(f(g(h())))`.
func (c *ContentTypeClient) Use(hooks ...Hook) {
	c.hooks.ContentType = append(c.hooks.ContentType, hooks...)
}

// Create returns a create builder for ContentType.
func (c *ContentTypeClient) Create() *ContentTypeCreate {
	mutation := newContentTypeMutation(c.config, OpCreate)
	return &ContentTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ContentType entities.
func (c *ContentTypeClient) CreateBulk(builders ...*ContentTypeCreate) *ContentTypeCreateBulk {
	return &ContentTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ContentType.
func (c *ContentTypeClient) Update() *ContentTypeUpdate {
	mutation := newContentTypeMutation(c.config, OpUpdate)
	return &ContentTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ContentTypeClient) UpdateOne(ct *ContentType) *ContentTypeUpdateOne {
	mutation := newContentTypeMutation(c.config, OpUpdateOne, withContentType(ct))
	return &ContentTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ContentTypeClient) UpdateOneID(id int) *ContentTypeUpdateOne {
	mutation := newContentTypeMutation(c.config, OpUpdateOne, withContentTypeID(id))
	return &ContentTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ContentType.
func (c *ContentTypeClient) Delete() *ContentTypeDelete {
	mutation := newContentTypeMutation(c.config, OpDelete)
	return &ContentTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ContentTypeClient) DeleteOne(ct *ContentType) *ContentTypeDeleteOne {
	return c.DeleteOneID(ct.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ContentTypeClient) DeleteOneID(id int) *ContentTypeDeleteOne {
	builder := c.Delete().Where(contenttype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ContentTypeDeleteOne{builder}
}

// Query returns a query builder for ContentType.
func (c *ContentTypeClient) Query() *ContentTypeQuery {
	return &ContentTypeQuery{
		config: c.config,
	}
}

// Get returns a ContentType entity by its id.
func (c *ContentTypeClient) Get(ctx context.Context, id int) (*ContentType, error) {
	return c.Query().Where(contenttype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ContentTypeClient) GetX(ctx context.Context, id int) *ContentType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryParent queries the parent edge of a ContentType.
func (c *ContentTypeClient) QueryParent(ct *ContentType) *ContentTypeQuery {
	query := &ContentTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ct.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(contenttype.Table, contenttype.FieldID, id),
			sqlgraph.To(contenttype.Table, contenttype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, contenttype.ParentTable, contenttype.ParentColumn),
		)
		fromV = sqlgraph.Neighbors(ct.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildren queries the children edge of a ContentType.
func (c *ContentTypeClient) QueryChildren(ct *ContentType) *ContentTypeQuery {
	query := &ContentTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ct.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(contenttype.Table, contenttype.FieldID, id),
			sqlgraph.To(contenttype.Table, contenttype.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, contenttype.ChildrenTable, contenttype.ChildrenColumn),
		)
		fromV = sqlgraph.Neighbors(ct.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildContentTypes queries the child_content_types edge of a ContentType.
func (c *ContentTypeClient) QueryChildContentTypes(ct *ContentType) *ContentTypeQuery {
	query := &ContentTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ct.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(contenttype.Table, contenttype.FieldID, id),
			sqlgraph.To(contenttype.Table, contenttype.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, contenttype.ChildContentTypesTable, contenttype.ChildContentTypesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(ct.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ContentTypeClient) Hooks() []Hook {
	return c.hooks.ContentType
}

// CostComponentTypeClient is a client for the CostComponentType schema.
type CostComponentTypeClient struct {
	config
}

// NewCostComponentTypeClient returns a client for the CostComponentType from the given config.
func NewCostComponentTypeClient(c config) *CostComponentTypeClient {
	return &CostComponentTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `costcomponenttype.Hooks(f(g(h())))`.
func (c *CostComponentTypeClient) Use(hooks ...Hook) {
	c.hooks.CostComponentType = append(c.hooks.CostComponentType, hooks...)
}

// Create returns a create builder for CostComponentType.
func (c *CostComponentTypeClient) Create() *CostComponentTypeCreate {
	mutation := newCostComponentTypeMutation(c.config, OpCreate)
	return &CostComponentTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CostComponentType entities.
func (c *CostComponentTypeClient) CreateBulk(builders ...*CostComponentTypeCreate) *CostComponentTypeCreateBulk {
	return &CostComponentTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CostComponentType.
func (c *CostComponentTypeClient) Update() *CostComponentTypeUpdate {
	mutation := newCostComponentTypeMutation(c.config, OpUpdate)
	return &CostComponentTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CostComponentTypeClient) UpdateOne(cct *CostComponentType) *CostComponentTypeUpdateOne {
	mutation := newCostComponentTypeMutation(c.config, OpUpdateOne, withCostComponentType(cct))
	return &CostComponentTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CostComponentTypeClient) UpdateOneID(id int) *CostComponentTypeUpdateOne {
	mutation := newCostComponentTypeMutation(c.config, OpUpdateOne, withCostComponentTypeID(id))
	return &CostComponentTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CostComponentType.
func (c *CostComponentTypeClient) Delete() *CostComponentTypeDelete {
	mutation := newCostComponentTypeMutation(c.config, OpDelete)
	return &CostComponentTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CostComponentTypeClient) DeleteOne(cct *CostComponentType) *CostComponentTypeDeleteOne {
	return c.DeleteOneID(cct.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CostComponentTypeClient) DeleteOneID(id int) *CostComponentTypeDeleteOne {
	builder := c.Delete().Where(costcomponenttype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CostComponentTypeDeleteOne{builder}
}

// Query returns a query builder for CostComponentType.
func (c *CostComponentTypeClient) Query() *CostComponentTypeQuery {
	return &CostComponentTypeQuery{
		config: c.config,
	}
}

// Get returns a CostComponentType entity by its id.
func (c *CostComponentTypeClient) Get(ctx context.Context, id int) (*CostComponentType, error) {
	return c.Query().Where(costcomponenttype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CostComponentTypeClient) GetX(ctx context.Context, id int) *CostComponentType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryParent queries the parent edge of a CostComponentType.
func (c *CostComponentTypeClient) QueryParent(cct *CostComponentType) *CostComponentTypeQuery {
	query := &CostComponentTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := cct.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(costcomponenttype.Table, costcomponenttype.FieldID, id),
			sqlgraph.To(costcomponenttype.Table, costcomponenttype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, costcomponenttype.ParentTable, costcomponenttype.ParentColumn),
		)
		fromV = sqlgraph.Neighbors(cct.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildren queries the children edge of a CostComponentType.
func (c *CostComponentTypeClient) QueryChildren(cct *CostComponentType) *CostComponentTypeQuery {
	query := &CostComponentTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := cct.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(costcomponenttype.Table, costcomponenttype.FieldID, id),
			sqlgraph.To(costcomponenttype.Table, costcomponenttype.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, costcomponenttype.ChildrenTable, costcomponenttype.ChildrenColumn),
		)
		fromV = sqlgraph.Neighbors(cct.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildCostComponentTypes queries the child_cost_component_types edge of a CostComponentType.
func (c *CostComponentTypeClient) QueryChildCostComponentTypes(cct *CostComponentType) *CostComponentTypeQuery {
	query := &CostComponentTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := cct.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(costcomponenttype.Table, costcomponenttype.FieldID, id),
			sqlgraph.To(costcomponenttype.Table, costcomponenttype.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, costcomponenttype.ChildCostComponentTypesTable, costcomponenttype.ChildCostComponentTypesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(cct.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CostComponentTypeClient) Hooks() []Hook {
	return c.hooks.CostComponentType
}

// CustomMethodClient is a client for the CustomMethod schema.
type CustomMethodClient struct {
	config
}

// NewCustomMethodClient returns a client for the CustomMethod from the given config.
func NewCustomMethodClient(c config) *CustomMethodClient {
	return &CustomMethodClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `custommethod.Hooks(f(g(h())))`.
func (c *CustomMethodClient) Use(hooks ...Hook) {
	c.hooks.CustomMethod = append(c.hooks.CustomMethod, hooks...)
}

// Create returns a create builder for CustomMethod.
func (c *CustomMethodClient) Create() *CustomMethodCreate {
	mutation := newCustomMethodMutation(c.config, OpCreate)
	return &CustomMethodCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CustomMethod entities.
func (c *CustomMethodClient) CreateBulk(builders ...*CustomMethodCreate) *CustomMethodCreateBulk {
	return &CustomMethodCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CustomMethod.
func (c *CustomMethodClient) Update() *CustomMethodUpdate {
	mutation := newCustomMethodMutation(c.config, OpUpdate)
	return &CustomMethodUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CustomMethodClient) UpdateOne(cm *CustomMethod) *CustomMethodUpdateOne {
	mutation := newCustomMethodMutation(c.config, OpUpdateOne, withCustomMethod(cm))
	return &CustomMethodUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CustomMethodClient) UpdateOneID(id int) *CustomMethodUpdateOne {
	mutation := newCustomMethodMutation(c.config, OpUpdateOne, withCustomMethodID(id))
	return &CustomMethodUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CustomMethod.
func (c *CustomMethodClient) Delete() *CustomMethodDelete {
	mutation := newCustomMethodMutation(c.config, OpDelete)
	return &CustomMethodDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CustomMethodClient) DeleteOne(cm *CustomMethod) *CustomMethodDeleteOne {
	return c.DeleteOneID(cm.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CustomMethodClient) DeleteOneID(id int) *CustomMethodDeleteOne {
	builder := c.Delete().Where(custommethod.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CustomMethodDeleteOne{builder}
}

// Query returns a query builder for CustomMethod.
func (c *CustomMethodClient) Query() *CustomMethodQuery {
	return &CustomMethodQuery{
		config: c.config,
	}
}

// Get returns a CustomMethod entity by its id.
func (c *CustomMethodClient) Get(ctx context.Context, id int) (*CustomMethod, error) {
	return c.Query().Where(custommethod.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CustomMethodClient) GetX(ctx context.Context, id int) *CustomMethod {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCustomMethodType queries the custom_method_type edge of a CustomMethod.
func (c *CustomMethodClient) QueryCustomMethodType(cm *CustomMethod) *CustomMethodTypeQuery {
	query := &CustomMethodTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := cm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(custommethod.Table, custommethod.FieldID, id),
			sqlgraph.To(custommethodtype.Table, custommethodtype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, custommethod.CustomMethodTypeTable, custommethod.CustomMethodTypeColumn),
		)
		fromV = sqlgraph.Neighbors(cm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProductAssocs queries the product_assocs edge of a CustomMethod.
func (c *CustomMethodClient) QueryProductAssocs(cm *CustomMethod) *ProductAssocQuery {
	query := &ProductAssocQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := cm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(custommethod.Table, custommethod.FieldID, id),
			sqlgraph.To(productassoc.Table, productassoc.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, custommethod.ProductAssocsTable, custommethod.ProductAssocsColumn),
		)
		fromV = sqlgraph.Neighbors(cm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProductPrices queries the product_prices edge of a CustomMethod.
func (c *CustomMethodClient) QueryProductPrices(cm *CustomMethod) *ProductPriceQuery {
	query := &ProductPriceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := cm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(custommethod.Table, custommethod.FieldID, id),
			sqlgraph.To(productprice.Table, productprice.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, custommethod.ProductPricesTable, custommethod.ProductPricesColumn),
		)
		fromV = sqlgraph.Neighbors(cm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CustomMethodClient) Hooks() []Hook {
	return c.hooks.CustomMethod
}

// CustomMethodTypeClient is a client for the CustomMethodType schema.
type CustomMethodTypeClient struct {
	config
}

// NewCustomMethodTypeClient returns a client for the CustomMethodType from the given config.
func NewCustomMethodTypeClient(c config) *CustomMethodTypeClient {
	return &CustomMethodTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `custommethodtype.Hooks(f(g(h())))`.
func (c *CustomMethodTypeClient) Use(hooks ...Hook) {
	c.hooks.CustomMethodType = append(c.hooks.CustomMethodType, hooks...)
}

// Create returns a create builder for CustomMethodType.
func (c *CustomMethodTypeClient) Create() *CustomMethodTypeCreate {
	mutation := newCustomMethodTypeMutation(c.config, OpCreate)
	return &CustomMethodTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CustomMethodType entities.
func (c *CustomMethodTypeClient) CreateBulk(builders ...*CustomMethodTypeCreate) *CustomMethodTypeCreateBulk {
	return &CustomMethodTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CustomMethodType.
func (c *CustomMethodTypeClient) Update() *CustomMethodTypeUpdate {
	mutation := newCustomMethodTypeMutation(c.config, OpUpdate)
	return &CustomMethodTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CustomMethodTypeClient) UpdateOne(cmt *CustomMethodType) *CustomMethodTypeUpdateOne {
	mutation := newCustomMethodTypeMutation(c.config, OpUpdateOne, withCustomMethodType(cmt))
	return &CustomMethodTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CustomMethodTypeClient) UpdateOneID(id int) *CustomMethodTypeUpdateOne {
	mutation := newCustomMethodTypeMutation(c.config, OpUpdateOne, withCustomMethodTypeID(id))
	return &CustomMethodTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CustomMethodType.
func (c *CustomMethodTypeClient) Delete() *CustomMethodTypeDelete {
	mutation := newCustomMethodTypeMutation(c.config, OpDelete)
	return &CustomMethodTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CustomMethodTypeClient) DeleteOne(cmt *CustomMethodType) *CustomMethodTypeDeleteOne {
	return c.DeleteOneID(cmt.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CustomMethodTypeClient) DeleteOneID(id int) *CustomMethodTypeDeleteOne {
	builder := c.Delete().Where(custommethodtype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CustomMethodTypeDeleteOne{builder}
}

// Query returns a query builder for CustomMethodType.
func (c *CustomMethodTypeClient) Query() *CustomMethodTypeQuery {
	return &CustomMethodTypeQuery{
		config: c.config,
	}
}

// Get returns a CustomMethodType entity by its id.
func (c *CustomMethodTypeClient) Get(ctx context.Context, id int) (*CustomMethodType, error) {
	return c.Query().Where(custommethodtype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CustomMethodTypeClient) GetX(ctx context.Context, id int) *CustomMethodType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryParent queries the parent edge of a CustomMethodType.
func (c *CustomMethodTypeClient) QueryParent(cmt *CustomMethodType) *CustomMethodTypeQuery {
	query := &CustomMethodTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := cmt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(custommethodtype.Table, custommethodtype.FieldID, id),
			sqlgraph.To(custommethodtype.Table, custommethodtype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, custommethodtype.ParentTable, custommethodtype.ParentColumn),
		)
		fromV = sqlgraph.Neighbors(cmt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildren queries the children edge of a CustomMethodType.
func (c *CustomMethodTypeClient) QueryChildren(cmt *CustomMethodType) *CustomMethodTypeQuery {
	query := &CustomMethodTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := cmt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(custommethodtype.Table, custommethodtype.FieldID, id),
			sqlgraph.To(custommethodtype.Table, custommethodtype.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, custommethodtype.ChildrenTable, custommethodtype.ChildrenColumn),
		)
		fromV = sqlgraph.Neighbors(cmt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCustomMethods queries the custom_methods edge of a CustomMethodType.
func (c *CustomMethodTypeClient) QueryCustomMethods(cmt *CustomMethodType) *CustomMethodQuery {
	query := &CustomMethodQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := cmt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(custommethodtype.Table, custommethodtype.FieldID, id),
			sqlgraph.To(custommethod.Table, custommethod.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, custommethodtype.CustomMethodsTable, custommethodtype.CustomMethodsColumn),
		)
		fromV = sqlgraph.Neighbors(cmt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildCustomMethodTypes queries the child_custom_method_types edge of a CustomMethodType.
func (c *CustomMethodTypeClient) QueryChildCustomMethodTypes(cmt *CustomMethodType) *CustomMethodTypeQuery {
	query := &CustomMethodTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := cmt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(custommethodtype.Table, custommethodtype.FieldID, id),
			sqlgraph.To(custommethodtype.Table, custommethodtype.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, custommethodtype.ChildCustomMethodTypesTable, custommethodtype.ChildCustomMethodTypesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(cmt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CustomMethodTypeClient) Hooks() []Hook {
	return c.hooks.CustomMethodType
}

// EnumerationClient is a client for the Enumeration schema.
type EnumerationClient struct {
	config
}

// NewEnumerationClient returns a client for the Enumeration from the given config.
func NewEnumerationClient(c config) *EnumerationClient {
	return &EnumerationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `enumeration.Hooks(f(g(h())))`.
func (c *EnumerationClient) Use(hooks ...Hook) {
	c.hooks.Enumeration = append(c.hooks.Enumeration, hooks...)
}

// Create returns a create builder for Enumeration.
func (c *EnumerationClient) Create() *EnumerationCreate {
	mutation := newEnumerationMutation(c.config, OpCreate)
	return &EnumerationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Enumeration entities.
func (c *EnumerationClient) CreateBulk(builders ...*EnumerationCreate) *EnumerationCreateBulk {
	return &EnumerationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Enumeration.
func (c *EnumerationClient) Update() *EnumerationUpdate {
	mutation := newEnumerationMutation(c.config, OpUpdate)
	return &EnumerationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EnumerationClient) UpdateOne(e *Enumeration) *EnumerationUpdateOne {
	mutation := newEnumerationMutation(c.config, OpUpdateOne, withEnumeration(e))
	return &EnumerationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EnumerationClient) UpdateOneID(id int) *EnumerationUpdateOne {
	mutation := newEnumerationMutation(c.config, OpUpdateOne, withEnumerationID(id))
	return &EnumerationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Enumeration.
func (c *EnumerationClient) Delete() *EnumerationDelete {
	mutation := newEnumerationMutation(c.config, OpDelete)
	return &EnumerationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *EnumerationClient) DeleteOne(e *Enumeration) *EnumerationDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *EnumerationClient) DeleteOneID(id int) *EnumerationDeleteOne {
	builder := c.Delete().Where(enumeration.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EnumerationDeleteOne{builder}
}

// Query returns a query builder for Enumeration.
func (c *EnumerationClient) Query() *EnumerationQuery {
	return &EnumerationQuery{
		config: c.config,
	}
}

// Get returns a Enumeration entity by its id.
func (c *EnumerationClient) Get(ctx context.Context, id int) (*Enumeration, error) {
	return c.Query().Where(enumeration.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EnumerationClient) GetX(ctx context.Context, id int) *Enumeration {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEnumerationType queries the enumeration_type edge of a Enumeration.
func (c *EnumerationClient) QueryEnumerationType(e *Enumeration) *EnumerationTypeQuery {
	query := &EnumerationTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enumeration.Table, enumeration.FieldID, id),
			sqlgraph.To(enumerationtype.Table, enumerationtype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, enumeration.EnumerationTypeTable, enumeration.EnumerationTypeColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryReasonInventoryItemDetails queries the reason_inventory_item_details edge of a Enumeration.
func (c *EnumerationClient) QueryReasonInventoryItemDetails(e *Enumeration) *InventoryItemDetailQuery {
	query := &InventoryItemDetailQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enumeration.Table, enumeration.FieldID, id),
			sqlgraph.To(inventoryitemdetail.Table, inventoryitemdetail.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, enumeration.ReasonInventoryItemDetailsTable, enumeration.ReasonInventoryItemDetailsColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySalesChannelOrderHeaders queries the sales_channel_order_headers edge of a Enumeration.
func (c *EnumerationClient) QuerySalesChannelOrderHeaders(e *Enumeration) *OrderHeaderQuery {
	query := &OrderHeaderQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enumeration.Table, enumeration.FieldID, id),
			sqlgraph.To(orderheader.Table, orderheader.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, enumeration.SalesChannelOrderHeadersTable, enumeration.SalesChannelOrderHeadersColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryVirtualVariantMethodProducts queries the virtual_variant_method_products edge of a Enumeration.
func (c *EnumerationClient) QueryVirtualVariantMethodProducts(e *Enumeration) *ProductQuery {
	query := &ProductQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enumeration.Table, enumeration.FieldID, id),
			sqlgraph.To(product.Table, product.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, enumeration.VirtualVariantMethodProductsTable, enumeration.VirtualVariantMethodProductsColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRatingProducts queries the rating_products edge of a Enumeration.
func (c *EnumerationClient) QueryRatingProducts(e *Enumeration) *ProductQuery {
	query := &ProductQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enumeration.Table, enumeration.FieldID, id),
			sqlgraph.To(product.Table, product.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, enumeration.RatingProductsTable, enumeration.RatingProductsColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRequirementMethodProducts queries the requirement_method_products edge of a Enumeration.
func (c *EnumerationClient) QueryRequirementMethodProducts(e *Enumeration) *ProductQuery {
	query := &ProductQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enumeration.Table, enumeration.FieldID, id),
			sqlgraph.To(product.Table, product.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, enumeration.RequirementMethodProductsTable, enumeration.RequirementMethodProductsColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryReserveOrderProductStores queries the reserve_order_product_stores edge of a Enumeration.
func (c *EnumerationClient) QueryReserveOrderProductStores(e *Enumeration) *ProductStoreQuery {
	query := &ProductStoreQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enumeration.Table, enumeration.FieldID, id),
			sqlgraph.To(productstore.Table, productstore.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, enumeration.ReserveOrderProductStoresTable, enumeration.ReserveOrderProductStoresColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRequirementMethodProductStores queries the requirement_method_product_stores edge of a Enumeration.
func (c *EnumerationClient) QueryRequirementMethodProductStores(e *Enumeration) *ProductStoreQuery {
	query := &ProductStoreQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enumeration.Table, enumeration.FieldID, id),
			sqlgraph.To(productstore.Table, productstore.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, enumeration.RequirementMethodProductStoresTable, enumeration.RequirementMethodProductStoresColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDefaultSalesChannelProductStores queries the default_sales_channel_product_stores edge of a Enumeration.
func (c *EnumerationClient) QueryDefaultSalesChannelProductStores(e *Enumeration) *ProductStoreQuery {
	query := &ProductStoreQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enumeration.Table, enumeration.FieldID, id),
			sqlgraph.To(productstore.Table, productstore.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, enumeration.DefaultSalesChannelProductStoresTable, enumeration.DefaultSalesChannelProductStoresColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStoreCreditAccountProductStores queries the store_credit_account_product_stores edge of a Enumeration.
func (c *EnumerationClient) QueryStoreCreditAccountProductStores(e *Enumeration) *ProductStoreQuery {
	query := &ProductStoreQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enumeration.Table, enumeration.FieldID, id),
			sqlgraph.To(productstore.Table, productstore.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, enumeration.StoreCreditAccountProductStoresTable, enumeration.StoreCreditAccountProductStoresColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EnumerationClient) Hooks() []Hook {
	return c.hooks.Enumeration
}

// EnumerationTypeClient is a client for the EnumerationType schema.
type EnumerationTypeClient struct {
	config
}

// NewEnumerationTypeClient returns a client for the EnumerationType from the given config.
func NewEnumerationTypeClient(c config) *EnumerationTypeClient {
	return &EnumerationTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `enumerationtype.Hooks(f(g(h())))`.
func (c *EnumerationTypeClient) Use(hooks ...Hook) {
	c.hooks.EnumerationType = append(c.hooks.EnumerationType, hooks...)
}

// Create returns a create builder for EnumerationType.
func (c *EnumerationTypeClient) Create() *EnumerationTypeCreate {
	mutation := newEnumerationTypeMutation(c.config, OpCreate)
	return &EnumerationTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EnumerationType entities.
func (c *EnumerationTypeClient) CreateBulk(builders ...*EnumerationTypeCreate) *EnumerationTypeCreateBulk {
	return &EnumerationTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EnumerationType.
func (c *EnumerationTypeClient) Update() *EnumerationTypeUpdate {
	mutation := newEnumerationTypeMutation(c.config, OpUpdate)
	return &EnumerationTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EnumerationTypeClient) UpdateOne(et *EnumerationType) *EnumerationTypeUpdateOne {
	mutation := newEnumerationTypeMutation(c.config, OpUpdateOne, withEnumerationType(et))
	return &EnumerationTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EnumerationTypeClient) UpdateOneID(id int) *EnumerationTypeUpdateOne {
	mutation := newEnumerationTypeMutation(c.config, OpUpdateOne, withEnumerationTypeID(id))
	return &EnumerationTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EnumerationType.
func (c *EnumerationTypeClient) Delete() *EnumerationTypeDelete {
	mutation := newEnumerationTypeMutation(c.config, OpDelete)
	return &EnumerationTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *EnumerationTypeClient) DeleteOne(et *EnumerationType) *EnumerationTypeDeleteOne {
	return c.DeleteOneID(et.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *EnumerationTypeClient) DeleteOneID(id int) *EnumerationTypeDeleteOne {
	builder := c.Delete().Where(enumerationtype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EnumerationTypeDeleteOne{builder}
}

// Query returns a query builder for EnumerationType.
func (c *EnumerationTypeClient) Query() *EnumerationTypeQuery {
	return &EnumerationTypeQuery{
		config: c.config,
	}
}

// Get returns a EnumerationType entity by its id.
func (c *EnumerationTypeClient) Get(ctx context.Context, id int) (*EnumerationType, error) {
	return c.Query().Where(enumerationtype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EnumerationTypeClient) GetX(ctx context.Context, id int) *EnumerationType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryParent queries the parent edge of a EnumerationType.
func (c *EnumerationTypeClient) QueryParent(et *EnumerationType) *EnumerationTypeQuery {
	query := &EnumerationTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := et.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enumerationtype.Table, enumerationtype.FieldID, id),
			sqlgraph.To(enumerationtype.Table, enumerationtype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, enumerationtype.ParentTable, enumerationtype.ParentColumn),
		)
		fromV = sqlgraph.Neighbors(et.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildren queries the children edge of a EnumerationType.
func (c *EnumerationTypeClient) QueryChildren(et *EnumerationType) *EnumerationTypeQuery {
	query := &EnumerationTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := et.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enumerationtype.Table, enumerationtype.FieldID, id),
			sqlgraph.To(enumerationtype.Table, enumerationtype.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, enumerationtype.ChildrenTable, enumerationtype.ChildrenColumn),
		)
		fromV = sqlgraph.Neighbors(et.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEnumerations queries the enumerations edge of a EnumerationType.
func (c *EnumerationTypeClient) QueryEnumerations(et *EnumerationType) *EnumerationQuery {
	query := &EnumerationQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := et.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enumerationtype.Table, enumerationtype.FieldID, id),
			sqlgraph.To(enumeration.Table, enumeration.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, enumerationtype.EnumerationsTable, enumerationtype.EnumerationsColumn),
		)
		fromV = sqlgraph.Neighbors(et.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildEnumerationTypes queries the child_enumeration_types edge of a EnumerationType.
func (c *EnumerationTypeClient) QueryChildEnumerationTypes(et *EnumerationType) *EnumerationTypeQuery {
	query := &EnumerationTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := et.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enumerationtype.Table, enumerationtype.FieldID, id),
			sqlgraph.To(enumerationtype.Table, enumerationtype.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, enumerationtype.ChildEnumerationTypesTable, enumerationtype.ChildEnumerationTypesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(et.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EnumerationTypeClient) Hooks() []Hook {
	return c.hooks.EnumerationType
}

// FacilityAssocTypeClient is a client for the FacilityAssocType schema.
type FacilityAssocTypeClient struct {
	config
}

// NewFacilityAssocTypeClient returns a client for the FacilityAssocType from the given config.
func NewFacilityAssocTypeClient(c config) *FacilityAssocTypeClient {
	return &FacilityAssocTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `facilityassoctype.Hooks(f(g(h())))`.
func (c *FacilityAssocTypeClient) Use(hooks ...Hook) {
	c.hooks.FacilityAssocType = append(c.hooks.FacilityAssocType, hooks...)
}

// Create returns a create builder for FacilityAssocType.
func (c *FacilityAssocTypeClient) Create() *FacilityAssocTypeCreate {
	mutation := newFacilityAssocTypeMutation(c.config, OpCreate)
	return &FacilityAssocTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of FacilityAssocType entities.
func (c *FacilityAssocTypeClient) CreateBulk(builders ...*FacilityAssocTypeCreate) *FacilityAssocTypeCreateBulk {
	return &FacilityAssocTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for FacilityAssocType.
func (c *FacilityAssocTypeClient) Update() *FacilityAssocTypeUpdate {
	mutation := newFacilityAssocTypeMutation(c.config, OpUpdate)
	return &FacilityAssocTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FacilityAssocTypeClient) UpdateOne(fat *FacilityAssocType) *FacilityAssocTypeUpdateOne {
	mutation := newFacilityAssocTypeMutation(c.config, OpUpdateOne, withFacilityAssocType(fat))
	return &FacilityAssocTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FacilityAssocTypeClient) UpdateOneID(id int) *FacilityAssocTypeUpdateOne {
	mutation := newFacilityAssocTypeMutation(c.config, OpUpdateOne, withFacilityAssocTypeID(id))
	return &FacilityAssocTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FacilityAssocType.
func (c *FacilityAssocTypeClient) Delete() *FacilityAssocTypeDelete {
	mutation := newFacilityAssocTypeMutation(c.config, OpDelete)
	return &FacilityAssocTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *FacilityAssocTypeClient) DeleteOne(fat *FacilityAssocType) *FacilityAssocTypeDeleteOne {
	return c.DeleteOneID(fat.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *FacilityAssocTypeClient) DeleteOneID(id int) *FacilityAssocTypeDeleteOne {
	builder := c.Delete().Where(facilityassoctype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FacilityAssocTypeDeleteOne{builder}
}

// Query returns a query builder for FacilityAssocType.
func (c *FacilityAssocTypeClient) Query() *FacilityAssocTypeQuery {
	return &FacilityAssocTypeQuery{
		config: c.config,
	}
}

// Get returns a FacilityAssocType entity by its id.
func (c *FacilityAssocTypeClient) Get(ctx context.Context, id int) (*FacilityAssocType, error) {
	return c.Query().Where(facilityassoctype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FacilityAssocTypeClient) GetX(ctx context.Context, id int) *FacilityAssocType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *FacilityAssocTypeClient) Hooks() []Hook {
	return c.hooks.FacilityAssocType
}

// FacilityGroupClient is a client for the FacilityGroup schema.
type FacilityGroupClient struct {
	config
}

// NewFacilityGroupClient returns a client for the FacilityGroup from the given config.
func NewFacilityGroupClient(c config) *FacilityGroupClient {
	return &FacilityGroupClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `facilitygroup.Hooks(f(g(h())))`.
func (c *FacilityGroupClient) Use(hooks ...Hook) {
	c.hooks.FacilityGroup = append(c.hooks.FacilityGroup, hooks...)
}

// Create returns a create builder for FacilityGroup.
func (c *FacilityGroupClient) Create() *FacilityGroupCreate {
	mutation := newFacilityGroupMutation(c.config, OpCreate)
	return &FacilityGroupCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of FacilityGroup entities.
func (c *FacilityGroupClient) CreateBulk(builders ...*FacilityGroupCreate) *FacilityGroupCreateBulk {
	return &FacilityGroupCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for FacilityGroup.
func (c *FacilityGroupClient) Update() *FacilityGroupUpdate {
	mutation := newFacilityGroupMutation(c.config, OpUpdate)
	return &FacilityGroupUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FacilityGroupClient) UpdateOne(fg *FacilityGroup) *FacilityGroupUpdateOne {
	mutation := newFacilityGroupMutation(c.config, OpUpdateOne, withFacilityGroup(fg))
	return &FacilityGroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FacilityGroupClient) UpdateOneID(id int) *FacilityGroupUpdateOne {
	mutation := newFacilityGroupMutation(c.config, OpUpdateOne, withFacilityGroupID(id))
	return &FacilityGroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FacilityGroup.
func (c *FacilityGroupClient) Delete() *FacilityGroupDelete {
	mutation := newFacilityGroupMutation(c.config, OpDelete)
	return &FacilityGroupDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *FacilityGroupClient) DeleteOne(fg *FacilityGroup) *FacilityGroupDeleteOne {
	return c.DeleteOneID(fg.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *FacilityGroupClient) DeleteOneID(id int) *FacilityGroupDeleteOne {
	builder := c.Delete().Where(facilitygroup.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FacilityGroupDeleteOne{builder}
}

// Query returns a query builder for FacilityGroup.
func (c *FacilityGroupClient) Query() *FacilityGroupQuery {
	return &FacilityGroupQuery{
		config: c.config,
	}
}

// Get returns a FacilityGroup entity by its id.
func (c *FacilityGroupClient) Get(ctx context.Context, id int) (*FacilityGroup, error) {
	return c.Query().Where(facilitygroup.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FacilityGroupClient) GetX(ctx context.Context, id int) *FacilityGroup {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryFacilityGroupType queries the facility_group_type edge of a FacilityGroup.
func (c *FacilityGroupClient) QueryFacilityGroupType(fg *FacilityGroup) *FacilityGroupTypeQuery {
	query := &FacilityGroupTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := fg.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(facilitygroup.Table, facilitygroup.FieldID, id),
			sqlgraph.To(facilitygrouptype.Table, facilitygrouptype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, facilitygroup.FacilityGroupTypeTable, facilitygroup.FacilityGroupTypeColumn),
		)
		fromV = sqlgraph.Neighbors(fg.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryParent queries the parent edge of a FacilityGroup.
func (c *FacilityGroupClient) QueryParent(fg *FacilityGroup) *FacilityGroupQuery {
	query := &FacilityGroupQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := fg.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(facilitygroup.Table, facilitygroup.FieldID, id),
			sqlgraph.To(facilitygroup.Table, facilitygroup.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, facilitygroup.ParentTable, facilitygroup.ParentColumn),
		)
		fromV = sqlgraph.Neighbors(fg.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildren queries the children edge of a FacilityGroup.
func (c *FacilityGroupClient) QueryChildren(fg *FacilityGroup) *FacilityGroupQuery {
	query := &FacilityGroupQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := fg.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(facilitygroup.Table, facilitygroup.FieldID, id),
			sqlgraph.To(facilitygroup.Table, facilitygroup.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, facilitygroup.ChildrenTable, facilitygroup.ChildrenColumn),
		)
		fromV = sqlgraph.Neighbors(fg.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FacilityGroupClient) Hooks() []Hook {
	return c.hooks.FacilityGroup
}

// FacilityGroupTypeClient is a client for the FacilityGroupType schema.
type FacilityGroupTypeClient struct {
	config
}

// NewFacilityGroupTypeClient returns a client for the FacilityGroupType from the given config.
func NewFacilityGroupTypeClient(c config) *FacilityGroupTypeClient {
	return &FacilityGroupTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `facilitygrouptype.Hooks(f(g(h())))`.
func (c *FacilityGroupTypeClient) Use(hooks ...Hook) {
	c.hooks.FacilityGroupType = append(c.hooks.FacilityGroupType, hooks...)
}

// Create returns a create builder for FacilityGroupType.
func (c *FacilityGroupTypeClient) Create() *FacilityGroupTypeCreate {
	mutation := newFacilityGroupTypeMutation(c.config, OpCreate)
	return &FacilityGroupTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of FacilityGroupType entities.
func (c *FacilityGroupTypeClient) CreateBulk(builders ...*FacilityGroupTypeCreate) *FacilityGroupTypeCreateBulk {
	return &FacilityGroupTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for FacilityGroupType.
func (c *FacilityGroupTypeClient) Update() *FacilityGroupTypeUpdate {
	mutation := newFacilityGroupTypeMutation(c.config, OpUpdate)
	return &FacilityGroupTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FacilityGroupTypeClient) UpdateOne(fgt *FacilityGroupType) *FacilityGroupTypeUpdateOne {
	mutation := newFacilityGroupTypeMutation(c.config, OpUpdateOne, withFacilityGroupType(fgt))
	return &FacilityGroupTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FacilityGroupTypeClient) UpdateOneID(id int) *FacilityGroupTypeUpdateOne {
	mutation := newFacilityGroupTypeMutation(c.config, OpUpdateOne, withFacilityGroupTypeID(id))
	return &FacilityGroupTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FacilityGroupType.
func (c *FacilityGroupTypeClient) Delete() *FacilityGroupTypeDelete {
	mutation := newFacilityGroupTypeMutation(c.config, OpDelete)
	return &FacilityGroupTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *FacilityGroupTypeClient) DeleteOne(fgt *FacilityGroupType) *FacilityGroupTypeDeleteOne {
	return c.DeleteOneID(fgt.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *FacilityGroupTypeClient) DeleteOneID(id int) *FacilityGroupTypeDeleteOne {
	builder := c.Delete().Where(facilitygrouptype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FacilityGroupTypeDeleteOne{builder}
}

// Query returns a query builder for FacilityGroupType.
func (c *FacilityGroupTypeClient) Query() *FacilityGroupTypeQuery {
	return &FacilityGroupTypeQuery{
		config: c.config,
	}
}

// Get returns a FacilityGroupType entity by its id.
func (c *FacilityGroupTypeClient) Get(ctx context.Context, id int) (*FacilityGroupType, error) {
	return c.Query().Where(facilitygrouptype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FacilityGroupTypeClient) GetX(ctx context.Context, id int) *FacilityGroupType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryFacilityGroups queries the facility_groups edge of a FacilityGroupType.
func (c *FacilityGroupTypeClient) QueryFacilityGroups(fgt *FacilityGroupType) *FacilityGroupQuery {
	query := &FacilityGroupQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := fgt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(facilitygrouptype.Table, facilitygrouptype.FieldID, id),
			sqlgraph.To(facilitygroup.Table, facilitygroup.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, facilitygrouptype.FacilityGroupsTable, facilitygrouptype.FacilityGroupsColumn),
		)
		fromV = sqlgraph.Neighbors(fgt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FacilityGroupTypeClient) Hooks() []Hook {
	return c.hooks.FacilityGroupType
}

// FacilityTypeClient is a client for the FacilityType schema.
type FacilityTypeClient struct {
	config
}

// NewFacilityTypeClient returns a client for the FacilityType from the given config.
func NewFacilityTypeClient(c config) *FacilityTypeClient {
	return &FacilityTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `facilitytype.Hooks(f(g(h())))`.
func (c *FacilityTypeClient) Use(hooks ...Hook) {
	c.hooks.FacilityType = append(c.hooks.FacilityType, hooks...)
}

// Create returns a create builder for FacilityType.
func (c *FacilityTypeClient) Create() *FacilityTypeCreate {
	mutation := newFacilityTypeMutation(c.config, OpCreate)
	return &FacilityTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of FacilityType entities.
func (c *FacilityTypeClient) CreateBulk(builders ...*FacilityTypeCreate) *FacilityTypeCreateBulk {
	return &FacilityTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for FacilityType.
func (c *FacilityTypeClient) Update() *FacilityTypeUpdate {
	mutation := newFacilityTypeMutation(c.config, OpUpdate)
	return &FacilityTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FacilityTypeClient) UpdateOne(ft *FacilityType) *FacilityTypeUpdateOne {
	mutation := newFacilityTypeMutation(c.config, OpUpdateOne, withFacilityType(ft))
	return &FacilityTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FacilityTypeClient) UpdateOneID(id int) *FacilityTypeUpdateOne {
	mutation := newFacilityTypeMutation(c.config, OpUpdateOne, withFacilityTypeID(id))
	return &FacilityTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FacilityType.
func (c *FacilityTypeClient) Delete() *FacilityTypeDelete {
	mutation := newFacilityTypeMutation(c.config, OpDelete)
	return &FacilityTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *FacilityTypeClient) DeleteOne(ft *FacilityType) *FacilityTypeDeleteOne {
	return c.DeleteOneID(ft.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *FacilityTypeClient) DeleteOneID(id int) *FacilityTypeDeleteOne {
	builder := c.Delete().Where(facilitytype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FacilityTypeDeleteOne{builder}
}

// Query returns a query builder for FacilityType.
func (c *FacilityTypeClient) Query() *FacilityTypeQuery {
	return &FacilityTypeQuery{
		config: c.config,
	}
}

// Get returns a FacilityType entity by its id.
func (c *FacilityTypeClient) Get(ctx context.Context, id int) (*FacilityType, error) {
	return c.Query().Where(facilitytype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FacilityTypeClient) GetX(ctx context.Context, id int) *FacilityType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryParent queries the parent edge of a FacilityType.
func (c *FacilityTypeClient) QueryParent(ft *FacilityType) *FacilityTypeQuery {
	query := &FacilityTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ft.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(facilitytype.Table, facilitytype.FieldID, id),
			sqlgraph.To(facilitytype.Table, facilitytype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, facilitytype.ParentTable, facilitytype.ParentColumn),
		)
		fromV = sqlgraph.Neighbors(ft.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildren queries the children edge of a FacilityType.
func (c *FacilityTypeClient) QueryChildren(ft *FacilityType) *FacilityTypeQuery {
	query := &FacilityTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ft.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(facilitytype.Table, facilitytype.FieldID, id),
			sqlgraph.To(facilitytype.Table, facilitytype.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, facilitytype.ChildrenTable, facilitytype.ChildrenColumn),
		)
		fromV = sqlgraph.Neighbors(ft.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildFacilityTypes queries the child_facility_types edge of a FacilityType.
func (c *FacilityTypeClient) QueryChildFacilityTypes(ft *FacilityType) *FacilityTypeQuery {
	query := &FacilityTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ft.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(facilitytype.Table, facilitytype.FieldID, id),
			sqlgraph.To(facilitytype.Table, facilitytype.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, facilitytype.ChildFacilityTypesTable, facilitytype.ChildFacilityTypesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(ft.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FacilityTypeClient) Hooks() []Hook {
	return c.hooks.FacilityType
}

// GoodIdentificationTypeClient is a client for the GoodIdentificationType schema.
type GoodIdentificationTypeClient struct {
	config
}

// NewGoodIdentificationTypeClient returns a client for the GoodIdentificationType from the given config.
func NewGoodIdentificationTypeClient(c config) *GoodIdentificationTypeClient {
	return &GoodIdentificationTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `goodidentificationtype.Hooks(f(g(h())))`.
func (c *GoodIdentificationTypeClient) Use(hooks ...Hook) {
	c.hooks.GoodIdentificationType = append(c.hooks.GoodIdentificationType, hooks...)
}

// Create returns a create builder for GoodIdentificationType.
func (c *GoodIdentificationTypeClient) Create() *GoodIdentificationTypeCreate {
	mutation := newGoodIdentificationTypeMutation(c.config, OpCreate)
	return &GoodIdentificationTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of GoodIdentificationType entities.
func (c *GoodIdentificationTypeClient) CreateBulk(builders ...*GoodIdentificationTypeCreate) *GoodIdentificationTypeCreateBulk {
	return &GoodIdentificationTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for GoodIdentificationType.
func (c *GoodIdentificationTypeClient) Update() *GoodIdentificationTypeUpdate {
	mutation := newGoodIdentificationTypeMutation(c.config, OpUpdate)
	return &GoodIdentificationTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GoodIdentificationTypeClient) UpdateOne(git *GoodIdentificationType) *GoodIdentificationTypeUpdateOne {
	mutation := newGoodIdentificationTypeMutation(c.config, OpUpdateOne, withGoodIdentificationType(git))
	return &GoodIdentificationTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GoodIdentificationTypeClient) UpdateOneID(id int) *GoodIdentificationTypeUpdateOne {
	mutation := newGoodIdentificationTypeMutation(c.config, OpUpdateOne, withGoodIdentificationTypeID(id))
	return &GoodIdentificationTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for GoodIdentificationType.
func (c *GoodIdentificationTypeClient) Delete() *GoodIdentificationTypeDelete {
	mutation := newGoodIdentificationTypeMutation(c.config, OpDelete)
	return &GoodIdentificationTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *GoodIdentificationTypeClient) DeleteOne(git *GoodIdentificationType) *GoodIdentificationTypeDeleteOne {
	return c.DeleteOneID(git.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *GoodIdentificationTypeClient) DeleteOneID(id int) *GoodIdentificationTypeDeleteOne {
	builder := c.Delete().Where(goodidentificationtype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GoodIdentificationTypeDeleteOne{builder}
}

// Query returns a query builder for GoodIdentificationType.
func (c *GoodIdentificationTypeClient) Query() *GoodIdentificationTypeQuery {
	return &GoodIdentificationTypeQuery{
		config: c.config,
	}
}

// Get returns a GoodIdentificationType entity by its id.
func (c *GoodIdentificationTypeClient) Get(ctx context.Context, id int) (*GoodIdentificationType, error) {
	return c.Query().Where(goodidentificationtype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GoodIdentificationTypeClient) GetX(ctx context.Context, id int) *GoodIdentificationType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryParent queries the parent edge of a GoodIdentificationType.
func (c *GoodIdentificationTypeClient) QueryParent(git *GoodIdentificationType) *GoodIdentificationTypeQuery {
	query := &GoodIdentificationTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := git.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(goodidentificationtype.Table, goodidentificationtype.FieldID, id),
			sqlgraph.To(goodidentificationtype.Table, goodidentificationtype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, goodidentificationtype.ParentTable, goodidentificationtype.ParentColumn),
		)
		fromV = sqlgraph.Neighbors(git.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildren queries the children edge of a GoodIdentificationType.
func (c *GoodIdentificationTypeClient) QueryChildren(git *GoodIdentificationType) *GoodIdentificationTypeQuery {
	query := &GoodIdentificationTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := git.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(goodidentificationtype.Table, goodidentificationtype.FieldID, id),
			sqlgraph.To(goodidentificationtype.Table, goodidentificationtype.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, goodidentificationtype.ChildrenTable, goodidentificationtype.ChildrenColumn),
		)
		fromV = sqlgraph.Neighbors(git.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildGoodIdentificationTypes queries the child_good_identification_types edge of a GoodIdentificationType.
func (c *GoodIdentificationTypeClient) QueryChildGoodIdentificationTypes(git *GoodIdentificationType) *GoodIdentificationTypeQuery {
	query := &GoodIdentificationTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := git.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(goodidentificationtype.Table, goodidentificationtype.FieldID, id),
			sqlgraph.To(goodidentificationtype.Table, goodidentificationtype.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, goodidentificationtype.ChildGoodIdentificationTypesTable, goodidentificationtype.ChildGoodIdentificationTypesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(git.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *GoodIdentificationTypeClient) Hooks() []Hook {
	return c.hooks.GoodIdentificationType
}

// InventoryItemDetailClient is a client for the InventoryItemDetail schema.
type InventoryItemDetailClient struct {
	config
}

// NewInventoryItemDetailClient returns a client for the InventoryItemDetail from the given config.
func NewInventoryItemDetailClient(c config) *InventoryItemDetailClient {
	return &InventoryItemDetailClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `inventoryitemdetail.Hooks(f(g(h())))`.
func (c *InventoryItemDetailClient) Use(hooks ...Hook) {
	c.hooks.InventoryItemDetail = append(c.hooks.InventoryItemDetail, hooks...)
}

// Create returns a create builder for InventoryItemDetail.
func (c *InventoryItemDetailClient) Create() *InventoryItemDetailCreate {
	mutation := newInventoryItemDetailMutation(c.config, OpCreate)
	return &InventoryItemDetailCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of InventoryItemDetail entities.
func (c *InventoryItemDetailClient) CreateBulk(builders ...*InventoryItemDetailCreate) *InventoryItemDetailCreateBulk {
	return &InventoryItemDetailCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for InventoryItemDetail.
func (c *InventoryItemDetailClient) Update() *InventoryItemDetailUpdate {
	mutation := newInventoryItemDetailMutation(c.config, OpUpdate)
	return &InventoryItemDetailUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *InventoryItemDetailClient) UpdateOne(iid *InventoryItemDetail) *InventoryItemDetailUpdateOne {
	mutation := newInventoryItemDetailMutation(c.config, OpUpdateOne, withInventoryItemDetail(iid))
	return &InventoryItemDetailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *InventoryItemDetailClient) UpdateOneID(id int) *InventoryItemDetailUpdateOne {
	mutation := newInventoryItemDetailMutation(c.config, OpUpdateOne, withInventoryItemDetailID(id))
	return &InventoryItemDetailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for InventoryItemDetail.
func (c *InventoryItemDetailClient) Delete() *InventoryItemDetailDelete {
	mutation := newInventoryItemDetailMutation(c.config, OpDelete)
	return &InventoryItemDetailDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *InventoryItemDetailClient) DeleteOne(iid *InventoryItemDetail) *InventoryItemDetailDeleteOne {
	return c.DeleteOneID(iid.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *InventoryItemDetailClient) DeleteOneID(id int) *InventoryItemDetailDeleteOne {
	builder := c.Delete().Where(inventoryitemdetail.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &InventoryItemDetailDeleteOne{builder}
}

// Query returns a query builder for InventoryItemDetail.
func (c *InventoryItemDetailClient) Query() *InventoryItemDetailQuery {
	return &InventoryItemDetailQuery{
		config: c.config,
	}
}

// Get returns a InventoryItemDetail entity by its id.
func (c *InventoryItemDetailClient) Get(ctx context.Context, id int) (*InventoryItemDetail, error) {
	return c.Query().Where(inventoryitemdetail.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *InventoryItemDetailClient) GetX(ctx context.Context, id int) *InventoryItemDetail {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOrderItemShipGrpInvRes queries the order_item_ship_grp_inv_res edge of a InventoryItemDetail.
func (c *InventoryItemDetailClient) QueryOrderItemShipGrpInvRes(iid *InventoryItemDetail) *OrderItemShipGrpInvResQuery {
	query := &OrderItemShipGrpInvResQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := iid.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(inventoryitemdetail.Table, inventoryitemdetail.FieldID, id),
			sqlgraph.To(orderitemshipgrpinvres.Table, orderitemshipgrpinvres.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, inventoryitemdetail.OrderItemShipGrpInvResTable, inventoryitemdetail.OrderItemShipGrpInvResColumn),
		)
		fromV = sqlgraph.Neighbors(iid.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryReasonEnumeration queries the reason_enumeration edge of a InventoryItemDetail.
func (c *InventoryItemDetailClient) QueryReasonEnumeration(iid *InventoryItemDetail) *EnumerationQuery {
	query := &EnumerationQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := iid.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(inventoryitemdetail.Table, inventoryitemdetail.FieldID, id),
			sqlgraph.To(enumeration.Table, enumeration.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, inventoryitemdetail.ReasonEnumerationTable, inventoryitemdetail.ReasonEnumerationColumn),
		)
		fromV = sqlgraph.Neighbors(iid.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *InventoryItemDetailClient) Hooks() []Hook {
	return c.hooks.InventoryItemDetail
}

// InventoryItemTypeClient is a client for the InventoryItemType schema.
type InventoryItemTypeClient struct {
	config
}

// NewInventoryItemTypeClient returns a client for the InventoryItemType from the given config.
func NewInventoryItemTypeClient(c config) *InventoryItemTypeClient {
	return &InventoryItemTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `inventoryitemtype.Hooks(f(g(h())))`.
func (c *InventoryItemTypeClient) Use(hooks ...Hook) {
	c.hooks.InventoryItemType = append(c.hooks.InventoryItemType, hooks...)
}

// Create returns a create builder for InventoryItemType.
func (c *InventoryItemTypeClient) Create() *InventoryItemTypeCreate {
	mutation := newInventoryItemTypeMutation(c.config, OpCreate)
	return &InventoryItemTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of InventoryItemType entities.
func (c *InventoryItemTypeClient) CreateBulk(builders ...*InventoryItemTypeCreate) *InventoryItemTypeCreateBulk {
	return &InventoryItemTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for InventoryItemType.
func (c *InventoryItemTypeClient) Update() *InventoryItemTypeUpdate {
	mutation := newInventoryItemTypeMutation(c.config, OpUpdate)
	return &InventoryItemTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *InventoryItemTypeClient) UpdateOne(iit *InventoryItemType) *InventoryItemTypeUpdateOne {
	mutation := newInventoryItemTypeMutation(c.config, OpUpdateOne, withInventoryItemType(iit))
	return &InventoryItemTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *InventoryItemTypeClient) UpdateOneID(id int) *InventoryItemTypeUpdateOne {
	mutation := newInventoryItemTypeMutation(c.config, OpUpdateOne, withInventoryItemTypeID(id))
	return &InventoryItemTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for InventoryItemType.
func (c *InventoryItemTypeClient) Delete() *InventoryItemTypeDelete {
	mutation := newInventoryItemTypeMutation(c.config, OpDelete)
	return &InventoryItemTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *InventoryItemTypeClient) DeleteOne(iit *InventoryItemType) *InventoryItemTypeDeleteOne {
	return c.DeleteOneID(iit.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *InventoryItemTypeClient) DeleteOneID(id int) *InventoryItemTypeDeleteOne {
	builder := c.Delete().Where(inventoryitemtype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &InventoryItemTypeDeleteOne{builder}
}

// Query returns a query builder for InventoryItemType.
func (c *InventoryItemTypeClient) Query() *InventoryItemTypeQuery {
	return &InventoryItemTypeQuery{
		config: c.config,
	}
}

// Get returns a InventoryItemType entity by its id.
func (c *InventoryItemTypeClient) Get(ctx context.Context, id int) (*InventoryItemType, error) {
	return c.Query().Where(inventoryitemtype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *InventoryItemTypeClient) GetX(ctx context.Context, id int) *InventoryItemType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryParent queries the parent edge of a InventoryItemType.
func (c *InventoryItemTypeClient) QueryParent(iit *InventoryItemType) *InventoryItemTypeQuery {
	query := &InventoryItemTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := iit.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(inventoryitemtype.Table, inventoryitemtype.FieldID, id),
			sqlgraph.To(inventoryitemtype.Table, inventoryitemtype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, inventoryitemtype.ParentTable, inventoryitemtype.ParentColumn),
		)
		fromV = sqlgraph.Neighbors(iit.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildren queries the children edge of a InventoryItemType.
func (c *InventoryItemTypeClient) QueryChildren(iit *InventoryItemType) *InventoryItemTypeQuery {
	query := &InventoryItemTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := iit.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(inventoryitemtype.Table, inventoryitemtype.FieldID, id),
			sqlgraph.To(inventoryitemtype.Table, inventoryitemtype.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, inventoryitemtype.ChildrenTable, inventoryitemtype.ChildrenColumn),
		)
		fromV = sqlgraph.Neighbors(iit.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildInventoryItemTypes queries the child_inventory_item_types edge of a InventoryItemType.
func (c *InventoryItemTypeClient) QueryChildInventoryItemTypes(iit *InventoryItemType) *InventoryItemTypeQuery {
	query := &InventoryItemTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := iit.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(inventoryitemtype.Table, inventoryitemtype.FieldID, id),
			sqlgraph.To(inventoryitemtype.Table, inventoryitemtype.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, inventoryitemtype.ChildInventoryItemTypesTable, inventoryitemtype.ChildInventoryItemTypesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(iit.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProducts queries the products edge of a InventoryItemType.
func (c *InventoryItemTypeClient) QueryProducts(iit *InventoryItemType) *ProductQuery {
	query := &ProductQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := iit.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(inventoryitemtype.Table, inventoryitemtype.FieldID, id),
			sqlgraph.To(product.Table, product.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, inventoryitemtype.ProductsTable, inventoryitemtype.ProductsColumn),
		)
		fromV = sqlgraph.Neighbors(iit.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *InventoryItemTypeClient) Hooks() []Hook {
	return c.hooks.InventoryItemType
}

// OrderAdjustmentClient is a client for the OrderAdjustment schema.
type OrderAdjustmentClient struct {
	config
}

// NewOrderAdjustmentClient returns a client for the OrderAdjustment from the given config.
func NewOrderAdjustmentClient(c config) *OrderAdjustmentClient {
	return &OrderAdjustmentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `orderadjustment.Hooks(f(g(h())))`.
func (c *OrderAdjustmentClient) Use(hooks ...Hook) {
	c.hooks.OrderAdjustment = append(c.hooks.OrderAdjustment, hooks...)
}

// Create returns a create builder for OrderAdjustment.
func (c *OrderAdjustmentClient) Create() *OrderAdjustmentCreate {
	mutation := newOrderAdjustmentMutation(c.config, OpCreate)
	return &OrderAdjustmentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OrderAdjustment entities.
func (c *OrderAdjustmentClient) CreateBulk(builders ...*OrderAdjustmentCreate) *OrderAdjustmentCreateBulk {
	return &OrderAdjustmentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OrderAdjustment.
func (c *OrderAdjustmentClient) Update() *OrderAdjustmentUpdate {
	mutation := newOrderAdjustmentMutation(c.config, OpUpdate)
	return &OrderAdjustmentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrderAdjustmentClient) UpdateOne(oa *OrderAdjustment) *OrderAdjustmentUpdateOne {
	mutation := newOrderAdjustmentMutation(c.config, OpUpdateOne, withOrderAdjustment(oa))
	return &OrderAdjustmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrderAdjustmentClient) UpdateOneID(id int) *OrderAdjustmentUpdateOne {
	mutation := newOrderAdjustmentMutation(c.config, OpUpdateOne, withOrderAdjustmentID(id))
	return &OrderAdjustmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OrderAdjustment.
func (c *OrderAdjustmentClient) Delete() *OrderAdjustmentDelete {
	mutation := newOrderAdjustmentMutation(c.config, OpDelete)
	return &OrderAdjustmentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *OrderAdjustmentClient) DeleteOne(oa *OrderAdjustment) *OrderAdjustmentDeleteOne {
	return c.DeleteOneID(oa.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *OrderAdjustmentClient) DeleteOneID(id int) *OrderAdjustmentDeleteOne {
	builder := c.Delete().Where(orderadjustment.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrderAdjustmentDeleteOne{builder}
}

// Query returns a query builder for OrderAdjustment.
func (c *OrderAdjustmentClient) Query() *OrderAdjustmentQuery {
	return &OrderAdjustmentQuery{
		config: c.config,
	}
}

// Get returns a OrderAdjustment entity by its id.
func (c *OrderAdjustmentClient) Get(ctx context.Context, id int) (*OrderAdjustment, error) {
	return c.Query().Where(orderadjustment.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrderAdjustmentClient) GetX(ctx context.Context, id int) *OrderAdjustment {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOrderHeader queries the order_header edge of a OrderAdjustment.
func (c *OrderAdjustmentClient) QueryOrderHeader(oa *OrderAdjustment) *OrderHeaderQuery {
	query := &OrderHeaderQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := oa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderadjustment.Table, orderadjustment.FieldID, id),
			sqlgraph.To(orderheader.Table, orderheader.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, orderadjustment.OrderHeaderTable, orderadjustment.OrderHeaderColumn),
		)
		fromV = sqlgraph.Neighbors(oa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrderItem queries the order_item edge of a OrderAdjustment.
func (c *OrderAdjustmentClient) QueryOrderItem(oa *OrderAdjustment) *OrderItemQuery {
	query := &OrderItemQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := oa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderadjustment.Table, orderadjustment.FieldID, id),
			sqlgraph.To(orderitem.Table, orderitem.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, orderadjustment.OrderItemTable, orderadjustment.OrderItemColumn),
		)
		fromV = sqlgraph.Neighbors(oa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrderItemShipGroup queries the order_item_ship_group edge of a OrderAdjustment.
func (c *OrderAdjustmentClient) QueryOrderItemShipGroup(oa *OrderAdjustment) *OrderItemShipGroupQuery {
	query := &OrderItemShipGroupQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := oa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderadjustment.Table, orderadjustment.FieldID, id),
			sqlgraph.To(orderitemshipgroup.Table, orderitemshipgroup.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, orderadjustment.OrderItemShipGroupTable, orderadjustment.OrderItemShipGroupColumn),
		)
		fromV = sqlgraph.Neighbors(oa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrderItemShipGroupAssoc queries the order_item_ship_group_assoc edge of a OrderAdjustment.
func (c *OrderAdjustmentClient) QueryOrderItemShipGroupAssoc(oa *OrderAdjustment) *OrderItemShipGroupAssocQuery {
	query := &OrderItemShipGroupAssocQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := oa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderadjustment.Table, orderadjustment.FieldID, id),
			sqlgraph.To(orderitemshipgroupassoc.Table, orderitemshipgroupassoc.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, orderadjustment.OrderItemShipGroupAssocTable, orderadjustment.OrderItemShipGroupAssocColumn),
		)
		fromV = sqlgraph.Neighbors(oa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryParent queries the parent edge of a OrderAdjustment.
func (c *OrderAdjustmentClient) QueryParent(oa *OrderAdjustment) *OrderAdjustmentQuery {
	query := &OrderAdjustmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := oa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderadjustment.Table, orderadjustment.FieldID, id),
			sqlgraph.To(orderadjustment.Table, orderadjustment.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, orderadjustment.ParentTable, orderadjustment.ParentColumn),
		)
		fromV = sqlgraph.Neighbors(oa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildren queries the children edge of a OrderAdjustment.
func (c *OrderAdjustmentClient) QueryChildren(oa *OrderAdjustment) *OrderAdjustmentQuery {
	query := &OrderAdjustmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := oa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderadjustment.Table, orderadjustment.FieldID, id),
			sqlgraph.To(orderadjustment.Table, orderadjustment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, orderadjustment.ChildrenTable, orderadjustment.ChildrenColumn),
		)
		fromV = sqlgraph.Neighbors(oa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OrderAdjustmentClient) Hooks() []Hook {
	return c.hooks.OrderAdjustment
}

// OrderContactMechClient is a client for the OrderContactMech schema.
type OrderContactMechClient struct {
	config
}

// NewOrderContactMechClient returns a client for the OrderContactMech from the given config.
func NewOrderContactMechClient(c config) *OrderContactMechClient {
	return &OrderContactMechClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `ordercontactmech.Hooks(f(g(h())))`.
func (c *OrderContactMechClient) Use(hooks ...Hook) {
	c.hooks.OrderContactMech = append(c.hooks.OrderContactMech, hooks...)
}

// Create returns a create builder for OrderContactMech.
func (c *OrderContactMechClient) Create() *OrderContactMechCreate {
	mutation := newOrderContactMechMutation(c.config, OpCreate)
	return &OrderContactMechCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OrderContactMech entities.
func (c *OrderContactMechClient) CreateBulk(builders ...*OrderContactMechCreate) *OrderContactMechCreateBulk {
	return &OrderContactMechCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OrderContactMech.
func (c *OrderContactMechClient) Update() *OrderContactMechUpdate {
	mutation := newOrderContactMechMutation(c.config, OpUpdate)
	return &OrderContactMechUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrderContactMechClient) UpdateOne(ocm *OrderContactMech) *OrderContactMechUpdateOne {
	mutation := newOrderContactMechMutation(c.config, OpUpdateOne, withOrderContactMech(ocm))
	return &OrderContactMechUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrderContactMechClient) UpdateOneID(id int) *OrderContactMechUpdateOne {
	mutation := newOrderContactMechMutation(c.config, OpUpdateOne, withOrderContactMechID(id))
	return &OrderContactMechUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OrderContactMech.
func (c *OrderContactMechClient) Delete() *OrderContactMechDelete {
	mutation := newOrderContactMechMutation(c.config, OpDelete)
	return &OrderContactMechDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *OrderContactMechClient) DeleteOne(ocm *OrderContactMech) *OrderContactMechDeleteOne {
	return c.DeleteOneID(ocm.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *OrderContactMechClient) DeleteOneID(id int) *OrderContactMechDeleteOne {
	builder := c.Delete().Where(ordercontactmech.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrderContactMechDeleteOne{builder}
}

// Query returns a query builder for OrderContactMech.
func (c *OrderContactMechClient) Query() *OrderContactMechQuery {
	return &OrderContactMechQuery{
		config: c.config,
	}
}

// Get returns a OrderContactMech entity by its id.
func (c *OrderContactMechClient) Get(ctx context.Context, id int) (*OrderContactMech, error) {
	return c.Query().Where(ordercontactmech.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrderContactMechClient) GetX(ctx context.Context, id int) *OrderContactMech {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOrderHeader queries the order_header edge of a OrderContactMech.
func (c *OrderContactMechClient) QueryOrderHeader(ocm *OrderContactMech) *OrderHeaderQuery {
	query := &OrderHeaderQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ocm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(ordercontactmech.Table, ordercontactmech.FieldID, id),
			sqlgraph.To(orderheader.Table, orderheader.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ordercontactmech.OrderHeaderTable, ordercontactmech.OrderHeaderColumn),
		)
		fromV = sqlgraph.Neighbors(ocm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OrderContactMechClient) Hooks() []Hook {
	return c.hooks.OrderContactMech
}

// OrderHeaderClient is a client for the OrderHeader schema.
type OrderHeaderClient struct {
	config
}

// NewOrderHeaderClient returns a client for the OrderHeader from the given config.
func NewOrderHeaderClient(c config) *OrderHeaderClient {
	return &OrderHeaderClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `orderheader.Hooks(f(g(h())))`.
func (c *OrderHeaderClient) Use(hooks ...Hook) {
	c.hooks.OrderHeader = append(c.hooks.OrderHeader, hooks...)
}

// Create returns a create builder for OrderHeader.
func (c *OrderHeaderClient) Create() *OrderHeaderCreate {
	mutation := newOrderHeaderMutation(c.config, OpCreate)
	return &OrderHeaderCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OrderHeader entities.
func (c *OrderHeaderClient) CreateBulk(builders ...*OrderHeaderCreate) *OrderHeaderCreateBulk {
	return &OrderHeaderCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OrderHeader.
func (c *OrderHeaderClient) Update() *OrderHeaderUpdate {
	mutation := newOrderHeaderMutation(c.config, OpUpdate)
	return &OrderHeaderUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrderHeaderClient) UpdateOne(oh *OrderHeader) *OrderHeaderUpdateOne {
	mutation := newOrderHeaderMutation(c.config, OpUpdateOne, withOrderHeader(oh))
	return &OrderHeaderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrderHeaderClient) UpdateOneID(id int) *OrderHeaderUpdateOne {
	mutation := newOrderHeaderMutation(c.config, OpUpdateOne, withOrderHeaderID(id))
	return &OrderHeaderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OrderHeader.
func (c *OrderHeaderClient) Delete() *OrderHeaderDelete {
	mutation := newOrderHeaderMutation(c.config, OpDelete)
	return &OrderHeaderDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *OrderHeaderClient) DeleteOne(oh *OrderHeader) *OrderHeaderDeleteOne {
	return c.DeleteOneID(oh.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *OrderHeaderClient) DeleteOneID(id int) *OrderHeaderDeleteOne {
	builder := c.Delete().Where(orderheader.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrderHeaderDeleteOne{builder}
}

// Query returns a query builder for OrderHeader.
func (c *OrderHeaderClient) Query() *OrderHeaderQuery {
	return &OrderHeaderQuery{
		config: c.config,
	}
}

// Get returns a OrderHeader entity by its id.
func (c *OrderHeaderClient) Get(ctx context.Context, id int) (*OrderHeader, error) {
	return c.Query().Where(orderheader.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrderHeaderClient) GetX(ctx context.Context, id int) *OrderHeader {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySalesChannelEnumeration queries the sales_channel_enumeration edge of a OrderHeader.
func (c *OrderHeaderClient) QuerySalesChannelEnumeration(oh *OrderHeader) *EnumerationQuery {
	query := &EnumerationQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := oh.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderheader.Table, orderheader.FieldID, id),
			sqlgraph.To(enumeration.Table, enumeration.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, orderheader.SalesChannelEnumerationTable, orderheader.SalesChannelEnumerationColumn),
		)
		fromV = sqlgraph.Neighbors(oh.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProductStore queries the product_store edge of a OrderHeader.
func (c *OrderHeaderClient) QueryProductStore(oh *OrderHeader) *ProductStoreQuery {
	query := &ProductStoreQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := oh.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderheader.Table, orderheader.FieldID, id),
			sqlgraph.To(productstore.Table, productstore.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, orderheader.ProductStoreTable, orderheader.ProductStoreColumn),
		)
		fromV = sqlgraph.Neighbors(oh.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStatusItem queries the status_item edge of a OrderHeader.
func (c *OrderHeaderClient) QueryStatusItem(oh *OrderHeader) *StatusItemQuery {
	query := &StatusItemQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := oh.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderheader.Table, orderheader.FieldID, id),
			sqlgraph.To(statusitem.Table, statusitem.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, orderheader.StatusItemTable, orderheader.StatusItemColumn),
		)
		fromV = sqlgraph.Neighbors(oh.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySyncStatusItem queries the sync_status_item edge of a OrderHeader.
func (c *OrderHeaderClient) QuerySyncStatusItem(oh *OrderHeader) *StatusItemQuery {
	query := &StatusItemQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := oh.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderheader.Table, orderheader.FieldID, id),
			sqlgraph.To(statusitem.Table, statusitem.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, orderheader.SyncStatusItemTable, orderheader.SyncStatusItemColumn),
		)
		fromV = sqlgraph.Neighbors(oh.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrderAdjustments queries the order_adjustments edge of a OrderHeader.
func (c *OrderHeaderClient) QueryOrderAdjustments(oh *OrderHeader) *OrderAdjustmentQuery {
	query := &OrderAdjustmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := oh.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderheader.Table, orderheader.FieldID, id),
			sqlgraph.To(orderadjustment.Table, orderadjustment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, orderheader.OrderAdjustmentsTable, orderheader.OrderAdjustmentsColumn),
		)
		fromV = sqlgraph.Neighbors(oh.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrderContactMeches queries the order_contact_meches edge of a OrderHeader.
func (c *OrderHeaderClient) QueryOrderContactMeches(oh *OrderHeader) *OrderContactMechQuery {
	query := &OrderContactMechQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := oh.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderheader.Table, orderheader.FieldID, id),
			sqlgraph.To(ordercontactmech.Table, ordercontactmech.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, orderheader.OrderContactMechesTable, orderheader.OrderContactMechesColumn),
		)
		fromV = sqlgraph.Neighbors(oh.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrderItems queries the order_items edge of a OrderHeader.
func (c *OrderHeaderClient) QueryOrderItems(oh *OrderHeader) *OrderItemQuery {
	query := &OrderItemQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := oh.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderheader.Table, orderheader.FieldID, id),
			sqlgraph.To(orderitem.Table, orderitem.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, orderheader.OrderItemsTable, orderheader.OrderItemsColumn),
		)
		fromV = sqlgraph.Neighbors(oh.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrderItemShipGroups queries the order_item_ship_groups edge of a OrderHeader.
func (c *OrderHeaderClient) QueryOrderItemShipGroups(oh *OrderHeader) *OrderItemShipGroupQuery {
	query := &OrderItemShipGroupQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := oh.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderheader.Table, orderheader.FieldID, id),
			sqlgraph.To(orderitemshipgroup.Table, orderitemshipgroup.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, orderheader.OrderItemShipGroupsTable, orderheader.OrderItemShipGroupsColumn),
		)
		fromV = sqlgraph.Neighbors(oh.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrderItemShipGroupAssocs queries the order_item_ship_group_assocs edge of a OrderHeader.
func (c *OrderHeaderClient) QueryOrderItemShipGroupAssocs(oh *OrderHeader) *OrderItemShipGroupAssocQuery {
	query := &OrderItemShipGroupAssocQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := oh.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderheader.Table, orderheader.FieldID, id),
			sqlgraph.To(orderitemshipgroupassoc.Table, orderitemshipgroupassoc.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, orderheader.OrderItemShipGroupAssocsTable, orderheader.OrderItemShipGroupAssocsColumn),
		)
		fromV = sqlgraph.Neighbors(oh.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrderItemShipGrpInvRes queries the order_item_ship_grp_inv_res edge of a OrderHeader.
func (c *OrderHeaderClient) QueryOrderItemShipGrpInvRes(oh *OrderHeader) *OrderItemShipGrpInvResQuery {
	query := &OrderItemShipGrpInvResQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := oh.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderheader.Table, orderheader.FieldID, id),
			sqlgraph.To(orderitemshipgrpinvres.Table, orderitemshipgrpinvres.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, orderheader.OrderItemShipGrpInvResTable, orderheader.OrderItemShipGrpInvResColumn),
		)
		fromV = sqlgraph.Neighbors(oh.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrderPaymentPreferences queries the order_payment_preferences edge of a OrderHeader.
func (c *OrderHeaderClient) QueryOrderPaymentPreferences(oh *OrderHeader) *OrderPaymentPreferenceQuery {
	query := &OrderPaymentPreferenceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := oh.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderheader.Table, orderheader.FieldID, id),
			sqlgraph.To(orderpaymentpreference.Table, orderpaymentpreference.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, orderheader.OrderPaymentPreferencesTable, orderheader.OrderPaymentPreferencesColumn),
		)
		fromV = sqlgraph.Neighbors(oh.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrderRoles queries the order_roles edge of a OrderHeader.
func (c *OrderHeaderClient) QueryOrderRoles(oh *OrderHeader) *OrderRoleQuery {
	query := &OrderRoleQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := oh.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderheader.Table, orderheader.FieldID, id),
			sqlgraph.To(orderrole.Table, orderrole.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, orderheader.OrderRolesTable, orderheader.OrderRolesColumn),
		)
		fromV = sqlgraph.Neighbors(oh.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrderStatuses queries the order_statuses edge of a OrderHeader.
func (c *OrderHeaderClient) QueryOrderStatuses(oh *OrderHeader) *OrderStatusQuery {
	query := &OrderStatusQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := oh.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderheader.Table, orderheader.FieldID, id),
			sqlgraph.To(orderstatus.Table, orderstatus.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, orderheader.OrderStatusesTable, orderheader.OrderStatusesColumn),
		)
		fromV = sqlgraph.Neighbors(oh.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OrderHeaderClient) Hooks() []Hook {
	return c.hooks.OrderHeader
}

// OrderItemClient is a client for the OrderItem schema.
type OrderItemClient struct {
	config
}

// NewOrderItemClient returns a client for the OrderItem from the given config.
func NewOrderItemClient(c config) *OrderItemClient {
	return &OrderItemClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `orderitem.Hooks(f(g(h())))`.
func (c *OrderItemClient) Use(hooks ...Hook) {
	c.hooks.OrderItem = append(c.hooks.OrderItem, hooks...)
}

// Create returns a create builder for OrderItem.
func (c *OrderItemClient) Create() *OrderItemCreate {
	mutation := newOrderItemMutation(c.config, OpCreate)
	return &OrderItemCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OrderItem entities.
func (c *OrderItemClient) CreateBulk(builders ...*OrderItemCreate) *OrderItemCreateBulk {
	return &OrderItemCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OrderItem.
func (c *OrderItemClient) Update() *OrderItemUpdate {
	mutation := newOrderItemMutation(c.config, OpUpdate)
	return &OrderItemUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrderItemClient) UpdateOne(oi *OrderItem) *OrderItemUpdateOne {
	mutation := newOrderItemMutation(c.config, OpUpdateOne, withOrderItem(oi))
	return &OrderItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrderItemClient) UpdateOneID(id int) *OrderItemUpdateOne {
	mutation := newOrderItemMutation(c.config, OpUpdateOne, withOrderItemID(id))
	return &OrderItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OrderItem.
func (c *OrderItemClient) Delete() *OrderItemDelete {
	mutation := newOrderItemMutation(c.config, OpDelete)
	return &OrderItemDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *OrderItemClient) DeleteOne(oi *OrderItem) *OrderItemDeleteOne {
	return c.DeleteOneID(oi.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *OrderItemClient) DeleteOneID(id int) *OrderItemDeleteOne {
	builder := c.Delete().Where(orderitem.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrderItemDeleteOne{builder}
}

// Query returns a query builder for OrderItem.
func (c *OrderItemClient) Query() *OrderItemQuery {
	return &OrderItemQuery{
		config: c.config,
	}
}

// Get returns a OrderItem entity by its id.
func (c *OrderItemClient) Get(ctx context.Context, id int) (*OrderItem, error) {
	return c.Query().Where(orderitem.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrderItemClient) GetX(ctx context.Context, id int) *OrderItem {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOrderHeader queries the order_header edge of a OrderItem.
func (c *OrderItemClient) QueryOrderHeader(oi *OrderItem) *OrderHeaderQuery {
	query := &OrderHeaderQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := oi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderitem.Table, orderitem.FieldID, id),
			sqlgraph.To(orderheader.Table, orderheader.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, orderitem.OrderHeaderTable, orderitem.OrderHeaderColumn),
		)
		fromV = sqlgraph.Neighbors(oi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProduct queries the product edge of a OrderItem.
func (c *OrderItemClient) QueryProduct(oi *OrderItem) *ProductQuery {
	query := &ProductQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := oi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderitem.Table, orderitem.FieldID, id),
			sqlgraph.To(product.Table, product.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, orderitem.ProductTable, orderitem.ProductColumn),
		)
		fromV = sqlgraph.Neighbors(oi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStatusItem queries the status_item edge of a OrderItem.
func (c *OrderItemClient) QueryStatusItem(oi *OrderItem) *StatusItemQuery {
	query := &StatusItemQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := oi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderitem.Table, orderitem.FieldID, id),
			sqlgraph.To(statusitem.Table, statusitem.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, orderitem.StatusItemTable, orderitem.StatusItemColumn),
		)
		fromV = sqlgraph.Neighbors(oi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStatusValidChanges queries the status_valid_changes edge of a OrderItem.
func (c *OrderItemClient) QueryStatusValidChanges(oi *OrderItem) *StatusValidChangeQuery {
	query := &StatusValidChangeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := oi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderitem.Table, orderitem.FieldID, id),
			sqlgraph.To(statusvalidchange.Table, statusvalidchange.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, orderitem.StatusValidChangesTable, orderitem.StatusValidChangesColumn),
		)
		fromV = sqlgraph.Neighbors(oi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySyncStatusItem queries the sync_status_item edge of a OrderItem.
func (c *OrderItemClient) QuerySyncStatusItem(oi *OrderItem) *StatusItemQuery {
	query := &StatusItemQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := oi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderitem.Table, orderitem.FieldID, id),
			sqlgraph.To(statusitem.Table, statusitem.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, orderitem.SyncStatusItemTable, orderitem.SyncStatusItemColumn),
		)
		fromV = sqlgraph.Neighbors(oi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrderAdjustments queries the order_adjustments edge of a OrderItem.
func (c *OrderItemClient) QueryOrderAdjustments(oi *OrderItem) *OrderAdjustmentQuery {
	query := &OrderAdjustmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := oi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderitem.Table, orderitem.FieldID, id),
			sqlgraph.To(orderadjustment.Table, orderadjustment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, orderitem.OrderAdjustmentsTable, orderitem.OrderAdjustmentsColumn),
		)
		fromV = sqlgraph.Neighbors(oi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrderItemShipGroupAssocs queries the order_item_ship_group_assocs edge of a OrderItem.
func (c *OrderItemClient) QueryOrderItemShipGroupAssocs(oi *OrderItem) *OrderItemShipGroupAssocQuery {
	query := &OrderItemShipGroupAssocQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := oi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderitem.Table, orderitem.FieldID, id),
			sqlgraph.To(orderitemshipgroupassoc.Table, orderitemshipgroupassoc.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, orderitem.OrderItemShipGroupAssocsTable, orderitem.OrderItemShipGroupAssocsColumn),
		)
		fromV = sqlgraph.Neighbors(oi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrderItemShipGrpInvRes queries the order_item_ship_grp_inv_res edge of a OrderItem.
func (c *OrderItemClient) QueryOrderItemShipGrpInvRes(oi *OrderItem) *OrderItemShipGrpInvResQuery {
	query := &OrderItemShipGrpInvResQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := oi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderitem.Table, orderitem.FieldID, id),
			sqlgraph.To(orderitemshipgrpinvres.Table, orderitemshipgrpinvres.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, orderitem.OrderItemShipGrpInvResTable, orderitem.OrderItemShipGrpInvResColumn),
		)
		fromV = sqlgraph.Neighbors(oi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrderPaymentPreferences queries the order_payment_preferences edge of a OrderItem.
func (c *OrderItemClient) QueryOrderPaymentPreferences(oi *OrderItem) *OrderPaymentPreferenceQuery {
	query := &OrderPaymentPreferenceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := oi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderitem.Table, orderitem.FieldID, id),
			sqlgraph.To(orderpaymentpreference.Table, orderpaymentpreference.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, orderitem.OrderPaymentPreferencesTable, orderitem.OrderPaymentPreferencesColumn),
		)
		fromV = sqlgraph.Neighbors(oi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrderStatuses queries the order_statuses edge of a OrderItem.
func (c *OrderItemClient) QueryOrderStatuses(oi *OrderItem) *OrderStatusQuery {
	query := &OrderStatusQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := oi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderitem.Table, orderitem.FieldID, id),
			sqlgraph.To(orderstatus.Table, orderstatus.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, orderitem.OrderStatusesTable, orderitem.OrderStatusesColumn),
		)
		fromV = sqlgraph.Neighbors(oi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OrderItemClient) Hooks() []Hook {
	return c.hooks.OrderItem
}

// OrderItemShipGroupClient is a client for the OrderItemShipGroup schema.
type OrderItemShipGroupClient struct {
	config
}

// NewOrderItemShipGroupClient returns a client for the OrderItemShipGroup from the given config.
func NewOrderItemShipGroupClient(c config) *OrderItemShipGroupClient {
	return &OrderItemShipGroupClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `orderitemshipgroup.Hooks(f(g(h())))`.
func (c *OrderItemShipGroupClient) Use(hooks ...Hook) {
	c.hooks.OrderItemShipGroup = append(c.hooks.OrderItemShipGroup, hooks...)
}

// Create returns a create builder for OrderItemShipGroup.
func (c *OrderItemShipGroupClient) Create() *OrderItemShipGroupCreate {
	mutation := newOrderItemShipGroupMutation(c.config, OpCreate)
	return &OrderItemShipGroupCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OrderItemShipGroup entities.
func (c *OrderItemShipGroupClient) CreateBulk(builders ...*OrderItemShipGroupCreate) *OrderItemShipGroupCreateBulk {
	return &OrderItemShipGroupCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OrderItemShipGroup.
func (c *OrderItemShipGroupClient) Update() *OrderItemShipGroupUpdate {
	mutation := newOrderItemShipGroupMutation(c.config, OpUpdate)
	return &OrderItemShipGroupUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrderItemShipGroupClient) UpdateOne(oisg *OrderItemShipGroup) *OrderItemShipGroupUpdateOne {
	mutation := newOrderItemShipGroupMutation(c.config, OpUpdateOne, withOrderItemShipGroup(oisg))
	return &OrderItemShipGroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrderItemShipGroupClient) UpdateOneID(id int) *OrderItemShipGroupUpdateOne {
	mutation := newOrderItemShipGroupMutation(c.config, OpUpdateOne, withOrderItemShipGroupID(id))
	return &OrderItemShipGroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OrderItemShipGroup.
func (c *OrderItemShipGroupClient) Delete() *OrderItemShipGroupDelete {
	mutation := newOrderItemShipGroupMutation(c.config, OpDelete)
	return &OrderItemShipGroupDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *OrderItemShipGroupClient) DeleteOne(oisg *OrderItemShipGroup) *OrderItemShipGroupDeleteOne {
	return c.DeleteOneID(oisg.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *OrderItemShipGroupClient) DeleteOneID(id int) *OrderItemShipGroupDeleteOne {
	builder := c.Delete().Where(orderitemshipgroup.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrderItemShipGroupDeleteOne{builder}
}

// Query returns a query builder for OrderItemShipGroup.
func (c *OrderItemShipGroupClient) Query() *OrderItemShipGroupQuery {
	return &OrderItemShipGroupQuery{
		config: c.config,
	}
}

// Get returns a OrderItemShipGroup entity by its id.
func (c *OrderItemShipGroupClient) Get(ctx context.Context, id int) (*OrderItemShipGroup, error) {
	return c.Query().Where(orderitemshipgroup.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrderItemShipGroupClient) GetX(ctx context.Context, id int) *OrderItemShipGroup {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOrderHeader queries the order_header edge of a OrderItemShipGroup.
func (c *OrderItemShipGroupClient) QueryOrderHeader(oisg *OrderItemShipGroup) *OrderHeaderQuery {
	query := &OrderHeaderQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := oisg.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderitemshipgroup.Table, orderitemshipgroup.FieldID, id),
			sqlgraph.To(orderheader.Table, orderheader.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, orderitemshipgroup.OrderHeaderTable, orderitemshipgroup.OrderHeaderColumn),
		)
		fromV = sqlgraph.Neighbors(oisg.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrderAdjustments queries the order_adjustments edge of a OrderItemShipGroup.
func (c *OrderItemShipGroupClient) QueryOrderAdjustments(oisg *OrderItemShipGroup) *OrderAdjustmentQuery {
	query := &OrderAdjustmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := oisg.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderitemshipgroup.Table, orderitemshipgroup.FieldID, id),
			sqlgraph.To(orderadjustment.Table, orderadjustment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, orderitemshipgroup.OrderAdjustmentsTable, orderitemshipgroup.OrderAdjustmentsColumn),
		)
		fromV = sqlgraph.Neighbors(oisg.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrderItemShipGroupAssocs queries the order_item_ship_group_assocs edge of a OrderItemShipGroup.
func (c *OrderItemShipGroupClient) QueryOrderItemShipGroupAssocs(oisg *OrderItemShipGroup) *OrderItemShipGroupAssocQuery {
	query := &OrderItemShipGroupAssocQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := oisg.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderitemshipgroup.Table, orderitemshipgroup.FieldID, id),
			sqlgraph.To(orderitemshipgroupassoc.Table, orderitemshipgroupassoc.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, orderitemshipgroup.OrderItemShipGroupAssocsTable, orderitemshipgroup.OrderItemShipGroupAssocsColumn),
		)
		fromV = sqlgraph.Neighbors(oisg.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrderItemShipGrpInvRes queries the order_item_ship_grp_inv_res edge of a OrderItemShipGroup.
func (c *OrderItemShipGroupClient) QueryOrderItemShipGrpInvRes(oisg *OrderItemShipGroup) *OrderItemShipGrpInvResQuery {
	query := &OrderItemShipGrpInvResQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := oisg.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderitemshipgroup.Table, orderitemshipgroup.FieldID, id),
			sqlgraph.To(orderitemshipgrpinvres.Table, orderitemshipgrpinvres.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, orderitemshipgroup.OrderItemShipGrpInvResTable, orderitemshipgroup.OrderItemShipGrpInvResColumn),
		)
		fromV = sqlgraph.Neighbors(oisg.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrderPaymentPreferences queries the order_payment_preferences edge of a OrderItemShipGroup.
func (c *OrderItemShipGroupClient) QueryOrderPaymentPreferences(oisg *OrderItemShipGroup) *OrderPaymentPreferenceQuery {
	query := &OrderPaymentPreferenceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := oisg.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderitemshipgroup.Table, orderitemshipgroup.FieldID, id),
			sqlgraph.To(orderpaymentpreference.Table, orderpaymentpreference.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, orderitemshipgroup.OrderPaymentPreferencesTable, orderitemshipgroup.OrderPaymentPreferencesColumn),
		)
		fromV = sqlgraph.Neighbors(oisg.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OrderItemShipGroupClient) Hooks() []Hook {
	return c.hooks.OrderItemShipGroup
}

// OrderItemShipGroupAssocClient is a client for the OrderItemShipGroupAssoc schema.
type OrderItemShipGroupAssocClient struct {
	config
}

// NewOrderItemShipGroupAssocClient returns a client for the OrderItemShipGroupAssoc from the given config.
func NewOrderItemShipGroupAssocClient(c config) *OrderItemShipGroupAssocClient {
	return &OrderItemShipGroupAssocClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `orderitemshipgroupassoc.Hooks(f(g(h())))`.
func (c *OrderItemShipGroupAssocClient) Use(hooks ...Hook) {
	c.hooks.OrderItemShipGroupAssoc = append(c.hooks.OrderItemShipGroupAssoc, hooks...)
}

// Create returns a create builder for OrderItemShipGroupAssoc.
func (c *OrderItemShipGroupAssocClient) Create() *OrderItemShipGroupAssocCreate {
	mutation := newOrderItemShipGroupAssocMutation(c.config, OpCreate)
	return &OrderItemShipGroupAssocCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OrderItemShipGroupAssoc entities.
func (c *OrderItemShipGroupAssocClient) CreateBulk(builders ...*OrderItemShipGroupAssocCreate) *OrderItemShipGroupAssocCreateBulk {
	return &OrderItemShipGroupAssocCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OrderItemShipGroupAssoc.
func (c *OrderItemShipGroupAssocClient) Update() *OrderItemShipGroupAssocUpdate {
	mutation := newOrderItemShipGroupAssocMutation(c.config, OpUpdate)
	return &OrderItemShipGroupAssocUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrderItemShipGroupAssocClient) UpdateOne(oisga *OrderItemShipGroupAssoc) *OrderItemShipGroupAssocUpdateOne {
	mutation := newOrderItemShipGroupAssocMutation(c.config, OpUpdateOne, withOrderItemShipGroupAssoc(oisga))
	return &OrderItemShipGroupAssocUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrderItemShipGroupAssocClient) UpdateOneID(id int) *OrderItemShipGroupAssocUpdateOne {
	mutation := newOrderItemShipGroupAssocMutation(c.config, OpUpdateOne, withOrderItemShipGroupAssocID(id))
	return &OrderItemShipGroupAssocUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OrderItemShipGroupAssoc.
func (c *OrderItemShipGroupAssocClient) Delete() *OrderItemShipGroupAssocDelete {
	mutation := newOrderItemShipGroupAssocMutation(c.config, OpDelete)
	return &OrderItemShipGroupAssocDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *OrderItemShipGroupAssocClient) DeleteOne(oisga *OrderItemShipGroupAssoc) *OrderItemShipGroupAssocDeleteOne {
	return c.DeleteOneID(oisga.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *OrderItemShipGroupAssocClient) DeleteOneID(id int) *OrderItemShipGroupAssocDeleteOne {
	builder := c.Delete().Where(orderitemshipgroupassoc.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrderItemShipGroupAssocDeleteOne{builder}
}

// Query returns a query builder for OrderItemShipGroupAssoc.
func (c *OrderItemShipGroupAssocClient) Query() *OrderItemShipGroupAssocQuery {
	return &OrderItemShipGroupAssocQuery{
		config: c.config,
	}
}

// Get returns a OrderItemShipGroupAssoc entity by its id.
func (c *OrderItemShipGroupAssocClient) Get(ctx context.Context, id int) (*OrderItemShipGroupAssoc, error) {
	return c.Query().Where(orderitemshipgroupassoc.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrderItemShipGroupAssocClient) GetX(ctx context.Context, id int) *OrderItemShipGroupAssoc {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOrderHeader queries the order_header edge of a OrderItemShipGroupAssoc.
func (c *OrderItemShipGroupAssocClient) QueryOrderHeader(oisga *OrderItemShipGroupAssoc) *OrderHeaderQuery {
	query := &OrderHeaderQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := oisga.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderitemshipgroupassoc.Table, orderitemshipgroupassoc.FieldID, id),
			sqlgraph.To(orderheader.Table, orderheader.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, orderitemshipgroupassoc.OrderHeaderTable, orderitemshipgroupassoc.OrderHeaderColumn),
		)
		fromV = sqlgraph.Neighbors(oisga.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrderItem queries the order_item edge of a OrderItemShipGroupAssoc.
func (c *OrderItemShipGroupAssocClient) QueryOrderItem(oisga *OrderItemShipGroupAssoc) *OrderItemQuery {
	query := &OrderItemQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := oisga.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderitemshipgroupassoc.Table, orderitemshipgroupassoc.FieldID, id),
			sqlgraph.To(orderitem.Table, orderitem.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, orderitemshipgroupassoc.OrderItemTable, orderitemshipgroupassoc.OrderItemColumn),
		)
		fromV = sqlgraph.Neighbors(oisga.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrderItemShipGroup queries the order_item_ship_group edge of a OrderItemShipGroupAssoc.
func (c *OrderItemShipGroupAssocClient) QueryOrderItemShipGroup(oisga *OrderItemShipGroupAssoc) *OrderItemShipGroupQuery {
	query := &OrderItemShipGroupQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := oisga.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderitemshipgroupassoc.Table, orderitemshipgroupassoc.FieldID, id),
			sqlgraph.To(orderitemshipgroup.Table, orderitemshipgroup.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, orderitemshipgroupassoc.OrderItemShipGroupTable, orderitemshipgroupassoc.OrderItemShipGroupColumn),
		)
		fromV = sqlgraph.Neighbors(oisga.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrderAdjustments queries the order_adjustments edge of a OrderItemShipGroupAssoc.
func (c *OrderItemShipGroupAssocClient) QueryOrderAdjustments(oisga *OrderItemShipGroupAssoc) *OrderAdjustmentQuery {
	query := &OrderAdjustmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := oisga.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderitemshipgroupassoc.Table, orderitemshipgroupassoc.FieldID, id),
			sqlgraph.To(orderadjustment.Table, orderadjustment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, orderitemshipgroupassoc.OrderAdjustmentsTable, orderitemshipgroupassoc.OrderAdjustmentsColumn),
		)
		fromV = sqlgraph.Neighbors(oisga.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrderItemShipGrpInvRes queries the order_item_ship_grp_inv_res edge of a OrderItemShipGroupAssoc.
func (c *OrderItemShipGroupAssocClient) QueryOrderItemShipGrpInvRes(oisga *OrderItemShipGroupAssoc) *OrderItemShipGrpInvResQuery {
	query := &OrderItemShipGrpInvResQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := oisga.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderitemshipgroupassoc.Table, orderitemshipgroupassoc.FieldID, id),
			sqlgraph.To(orderitemshipgrpinvres.Table, orderitemshipgrpinvres.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, orderitemshipgroupassoc.OrderItemShipGrpInvResTable, orderitemshipgroupassoc.OrderItemShipGrpInvResColumn),
		)
		fromV = sqlgraph.Neighbors(oisga.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OrderItemShipGroupAssocClient) Hooks() []Hook {
	return c.hooks.OrderItemShipGroupAssoc
}

// OrderItemShipGrpInvResClient is a client for the OrderItemShipGrpInvRes schema.
type OrderItemShipGrpInvResClient struct {
	config
}

// NewOrderItemShipGrpInvResClient returns a client for the OrderItemShipGrpInvRes from the given config.
func NewOrderItemShipGrpInvResClient(c config) *OrderItemShipGrpInvResClient {
	return &OrderItemShipGrpInvResClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `orderitemshipgrpinvres.Hooks(f(g(h())))`.
func (c *OrderItemShipGrpInvResClient) Use(hooks ...Hook) {
	c.hooks.OrderItemShipGrpInvRes = append(c.hooks.OrderItemShipGrpInvRes, hooks...)
}

// Create returns a create builder for OrderItemShipGrpInvRes.
func (c *OrderItemShipGrpInvResClient) Create() *OrderItemShipGrpInvResCreate {
	mutation := newOrderItemShipGrpInvResMutation(c.config, OpCreate)
	return &OrderItemShipGrpInvResCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OrderItemShipGrpInvRes entities.
func (c *OrderItemShipGrpInvResClient) CreateBulk(builders ...*OrderItemShipGrpInvResCreate) *OrderItemShipGrpInvResCreateBulk {
	return &OrderItemShipGrpInvResCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OrderItemShipGrpInvRes.
func (c *OrderItemShipGrpInvResClient) Update() *OrderItemShipGrpInvResUpdate {
	mutation := newOrderItemShipGrpInvResMutation(c.config, OpUpdate)
	return &OrderItemShipGrpInvResUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrderItemShipGrpInvResClient) UpdateOne(oisgir *OrderItemShipGrpInvRes) *OrderItemShipGrpInvResUpdateOne {
	mutation := newOrderItemShipGrpInvResMutation(c.config, OpUpdateOne, withOrderItemShipGrpInvRes(oisgir))
	return &OrderItemShipGrpInvResUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrderItemShipGrpInvResClient) UpdateOneID(id int) *OrderItemShipGrpInvResUpdateOne {
	mutation := newOrderItemShipGrpInvResMutation(c.config, OpUpdateOne, withOrderItemShipGrpInvResID(id))
	return &OrderItemShipGrpInvResUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OrderItemShipGrpInvRes.
func (c *OrderItemShipGrpInvResClient) Delete() *OrderItemShipGrpInvResDelete {
	mutation := newOrderItemShipGrpInvResMutation(c.config, OpDelete)
	return &OrderItemShipGrpInvResDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *OrderItemShipGrpInvResClient) DeleteOne(oisgir *OrderItemShipGrpInvRes) *OrderItemShipGrpInvResDeleteOne {
	return c.DeleteOneID(oisgir.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *OrderItemShipGrpInvResClient) DeleteOneID(id int) *OrderItemShipGrpInvResDeleteOne {
	builder := c.Delete().Where(orderitemshipgrpinvres.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrderItemShipGrpInvResDeleteOne{builder}
}

// Query returns a query builder for OrderItemShipGrpInvRes.
func (c *OrderItemShipGrpInvResClient) Query() *OrderItemShipGrpInvResQuery {
	return &OrderItemShipGrpInvResQuery{
		config: c.config,
	}
}

// Get returns a OrderItemShipGrpInvRes entity by its id.
func (c *OrderItemShipGrpInvResClient) Get(ctx context.Context, id int) (*OrderItemShipGrpInvRes, error) {
	return c.Query().Where(orderitemshipgrpinvres.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrderItemShipGrpInvResClient) GetX(ctx context.Context, id int) *OrderItemShipGrpInvRes {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOrderHeader queries the order_header edge of a OrderItemShipGrpInvRes.
func (c *OrderItemShipGrpInvResClient) QueryOrderHeader(oisgir *OrderItemShipGrpInvRes) *OrderHeaderQuery {
	query := &OrderHeaderQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := oisgir.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderitemshipgrpinvres.Table, orderitemshipgrpinvres.FieldID, id),
			sqlgraph.To(orderheader.Table, orderheader.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, orderitemshipgrpinvres.OrderHeaderTable, orderitemshipgrpinvres.OrderHeaderColumn),
		)
		fromV = sqlgraph.Neighbors(oisgir.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrderItem queries the order_item edge of a OrderItemShipGrpInvRes.
func (c *OrderItemShipGrpInvResClient) QueryOrderItem(oisgir *OrderItemShipGrpInvRes) *OrderItemQuery {
	query := &OrderItemQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := oisgir.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderitemshipgrpinvres.Table, orderitemshipgrpinvres.FieldID, id),
			sqlgraph.To(orderitem.Table, orderitem.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, orderitemshipgrpinvres.OrderItemTable, orderitemshipgrpinvres.OrderItemColumn),
		)
		fromV = sqlgraph.Neighbors(oisgir.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrderItemShipGroup queries the order_item_ship_group edge of a OrderItemShipGrpInvRes.
func (c *OrderItemShipGrpInvResClient) QueryOrderItemShipGroup(oisgir *OrderItemShipGrpInvRes) *OrderItemShipGroupQuery {
	query := &OrderItemShipGroupQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := oisgir.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderitemshipgrpinvres.Table, orderitemshipgrpinvres.FieldID, id),
			sqlgraph.To(orderitemshipgroup.Table, orderitemshipgroup.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, orderitemshipgrpinvres.OrderItemShipGroupTable, orderitemshipgrpinvres.OrderItemShipGroupColumn),
		)
		fromV = sqlgraph.Neighbors(oisgir.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrderItemShipGroupAssoc queries the order_item_ship_group_assoc edge of a OrderItemShipGrpInvRes.
func (c *OrderItemShipGrpInvResClient) QueryOrderItemShipGroupAssoc(oisgir *OrderItemShipGrpInvRes) *OrderItemShipGroupAssocQuery {
	query := &OrderItemShipGroupAssocQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := oisgir.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderitemshipgrpinvres.Table, orderitemshipgrpinvres.FieldID, id),
			sqlgraph.To(orderitemshipgroupassoc.Table, orderitemshipgroupassoc.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, orderitemshipgrpinvres.OrderItemShipGroupAssocTable, orderitemshipgrpinvres.OrderItemShipGroupAssocColumn),
		)
		fromV = sqlgraph.Neighbors(oisgir.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryInventoryItemDetails queries the inventory_item_details edge of a OrderItemShipGrpInvRes.
func (c *OrderItemShipGrpInvResClient) QueryInventoryItemDetails(oisgir *OrderItemShipGrpInvRes) *InventoryItemDetailQuery {
	query := &InventoryItemDetailQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := oisgir.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderitemshipgrpinvres.Table, orderitemshipgrpinvres.FieldID, id),
			sqlgraph.To(inventoryitemdetail.Table, inventoryitemdetail.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, orderitemshipgrpinvres.InventoryItemDetailsTable, orderitemshipgrpinvres.InventoryItemDetailsColumn),
		)
		fromV = sqlgraph.Neighbors(oisgir.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OrderItemShipGrpInvResClient) Hooks() []Hook {
	return c.hooks.OrderItemShipGrpInvRes
}

// OrderPaymentPreferenceClient is a client for the OrderPaymentPreference schema.
type OrderPaymentPreferenceClient struct {
	config
}

// NewOrderPaymentPreferenceClient returns a client for the OrderPaymentPreference from the given config.
func NewOrderPaymentPreferenceClient(c config) *OrderPaymentPreferenceClient {
	return &OrderPaymentPreferenceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `orderpaymentpreference.Hooks(f(g(h())))`.
func (c *OrderPaymentPreferenceClient) Use(hooks ...Hook) {
	c.hooks.OrderPaymentPreference = append(c.hooks.OrderPaymentPreference, hooks...)
}

// Create returns a create builder for OrderPaymentPreference.
func (c *OrderPaymentPreferenceClient) Create() *OrderPaymentPreferenceCreate {
	mutation := newOrderPaymentPreferenceMutation(c.config, OpCreate)
	return &OrderPaymentPreferenceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OrderPaymentPreference entities.
func (c *OrderPaymentPreferenceClient) CreateBulk(builders ...*OrderPaymentPreferenceCreate) *OrderPaymentPreferenceCreateBulk {
	return &OrderPaymentPreferenceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OrderPaymentPreference.
func (c *OrderPaymentPreferenceClient) Update() *OrderPaymentPreferenceUpdate {
	mutation := newOrderPaymentPreferenceMutation(c.config, OpUpdate)
	return &OrderPaymentPreferenceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrderPaymentPreferenceClient) UpdateOne(opp *OrderPaymentPreference) *OrderPaymentPreferenceUpdateOne {
	mutation := newOrderPaymentPreferenceMutation(c.config, OpUpdateOne, withOrderPaymentPreference(opp))
	return &OrderPaymentPreferenceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrderPaymentPreferenceClient) UpdateOneID(id int) *OrderPaymentPreferenceUpdateOne {
	mutation := newOrderPaymentPreferenceMutation(c.config, OpUpdateOne, withOrderPaymentPreferenceID(id))
	return &OrderPaymentPreferenceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OrderPaymentPreference.
func (c *OrderPaymentPreferenceClient) Delete() *OrderPaymentPreferenceDelete {
	mutation := newOrderPaymentPreferenceMutation(c.config, OpDelete)
	return &OrderPaymentPreferenceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *OrderPaymentPreferenceClient) DeleteOne(opp *OrderPaymentPreference) *OrderPaymentPreferenceDeleteOne {
	return c.DeleteOneID(opp.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *OrderPaymentPreferenceClient) DeleteOneID(id int) *OrderPaymentPreferenceDeleteOne {
	builder := c.Delete().Where(orderpaymentpreference.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrderPaymentPreferenceDeleteOne{builder}
}

// Query returns a query builder for OrderPaymentPreference.
func (c *OrderPaymentPreferenceClient) Query() *OrderPaymentPreferenceQuery {
	return &OrderPaymentPreferenceQuery{
		config: c.config,
	}
}

// Get returns a OrderPaymentPreference entity by its id.
func (c *OrderPaymentPreferenceClient) Get(ctx context.Context, id int) (*OrderPaymentPreference, error) {
	return c.Query().Where(orderpaymentpreference.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrderPaymentPreferenceClient) GetX(ctx context.Context, id int) *OrderPaymentPreference {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOrderHeader queries the order_header edge of a OrderPaymentPreference.
func (c *OrderPaymentPreferenceClient) QueryOrderHeader(opp *OrderPaymentPreference) *OrderHeaderQuery {
	query := &OrderHeaderQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := opp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderpaymentpreference.Table, orderpaymentpreference.FieldID, id),
			sqlgraph.To(orderheader.Table, orderheader.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, orderpaymentpreference.OrderHeaderTable, orderpaymentpreference.OrderHeaderColumn),
		)
		fromV = sqlgraph.Neighbors(opp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrderItem queries the order_item edge of a OrderPaymentPreference.
func (c *OrderPaymentPreferenceClient) QueryOrderItem(opp *OrderPaymentPreference) *OrderItemQuery {
	query := &OrderItemQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := opp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderpaymentpreference.Table, orderpaymentpreference.FieldID, id),
			sqlgraph.To(orderitem.Table, orderitem.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, orderpaymentpreference.OrderItemTable, orderpaymentpreference.OrderItemColumn),
		)
		fromV = sqlgraph.Neighbors(opp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrderItemShipGroup queries the order_item_ship_group edge of a OrderPaymentPreference.
func (c *OrderPaymentPreferenceClient) QueryOrderItemShipGroup(opp *OrderPaymentPreference) *OrderItemShipGroupQuery {
	query := &OrderItemShipGroupQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := opp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderpaymentpreference.Table, orderpaymentpreference.FieldID, id),
			sqlgraph.To(orderitemshipgroup.Table, orderitemshipgroup.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, orderpaymentpreference.OrderItemShipGroupTable, orderpaymentpreference.OrderItemShipGroupColumn),
		)
		fromV = sqlgraph.Neighbors(opp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProductPricePurpose queries the product_price_purpose edge of a OrderPaymentPreference.
func (c *OrderPaymentPreferenceClient) QueryProductPricePurpose(opp *OrderPaymentPreference) *ProductPricePurposeQuery {
	query := &ProductPricePurposeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := opp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderpaymentpreference.Table, orderpaymentpreference.FieldID, id),
			sqlgraph.To(productpricepurpose.Table, productpricepurpose.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, orderpaymentpreference.ProductPricePurposeTable, orderpaymentpreference.ProductPricePurposeColumn),
		)
		fromV = sqlgraph.Neighbors(opp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStatusItem queries the status_item edge of a OrderPaymentPreference.
func (c *OrderPaymentPreferenceClient) QueryStatusItem(opp *OrderPaymentPreference) *StatusItemQuery {
	query := &StatusItemQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := opp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderpaymentpreference.Table, orderpaymentpreference.FieldID, id),
			sqlgraph.To(statusitem.Table, statusitem.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, orderpaymentpreference.StatusItemTable, orderpaymentpreference.StatusItemColumn),
		)
		fromV = sqlgraph.Neighbors(opp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrderStatuses queries the order_statuses edge of a OrderPaymentPreference.
func (c *OrderPaymentPreferenceClient) QueryOrderStatuses(opp *OrderPaymentPreference) *OrderStatusQuery {
	query := &OrderStatusQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := opp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderpaymentpreference.Table, orderpaymentpreference.FieldID, id),
			sqlgraph.To(orderstatus.Table, orderstatus.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, orderpaymentpreference.OrderStatusesTable, orderpaymentpreference.OrderStatusesColumn),
		)
		fromV = sqlgraph.Neighbors(opp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OrderPaymentPreferenceClient) Hooks() []Hook {
	return c.hooks.OrderPaymentPreference
}

// OrderRoleClient is a client for the OrderRole schema.
type OrderRoleClient struct {
	config
}

// NewOrderRoleClient returns a client for the OrderRole from the given config.
func NewOrderRoleClient(c config) *OrderRoleClient {
	return &OrderRoleClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `orderrole.Hooks(f(g(h())))`.
func (c *OrderRoleClient) Use(hooks ...Hook) {
	c.hooks.OrderRole = append(c.hooks.OrderRole, hooks...)
}

// Create returns a create builder for OrderRole.
func (c *OrderRoleClient) Create() *OrderRoleCreate {
	mutation := newOrderRoleMutation(c.config, OpCreate)
	return &OrderRoleCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OrderRole entities.
func (c *OrderRoleClient) CreateBulk(builders ...*OrderRoleCreate) *OrderRoleCreateBulk {
	return &OrderRoleCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OrderRole.
func (c *OrderRoleClient) Update() *OrderRoleUpdate {
	mutation := newOrderRoleMutation(c.config, OpUpdate)
	return &OrderRoleUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrderRoleClient) UpdateOne(or *OrderRole) *OrderRoleUpdateOne {
	mutation := newOrderRoleMutation(c.config, OpUpdateOne, withOrderRole(or))
	return &OrderRoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrderRoleClient) UpdateOneID(id int) *OrderRoleUpdateOne {
	mutation := newOrderRoleMutation(c.config, OpUpdateOne, withOrderRoleID(id))
	return &OrderRoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OrderRole.
func (c *OrderRoleClient) Delete() *OrderRoleDelete {
	mutation := newOrderRoleMutation(c.config, OpDelete)
	return &OrderRoleDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *OrderRoleClient) DeleteOne(or *OrderRole) *OrderRoleDeleteOne {
	return c.DeleteOneID(or.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *OrderRoleClient) DeleteOneID(id int) *OrderRoleDeleteOne {
	builder := c.Delete().Where(orderrole.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrderRoleDeleteOne{builder}
}

// Query returns a query builder for OrderRole.
func (c *OrderRoleClient) Query() *OrderRoleQuery {
	return &OrderRoleQuery{
		config: c.config,
	}
}

// Get returns a OrderRole entity by its id.
func (c *OrderRoleClient) Get(ctx context.Context, id int) (*OrderRole, error) {
	return c.Query().Where(orderrole.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrderRoleClient) GetX(ctx context.Context, id int) *OrderRole {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOrderHeader queries the order_header edge of a OrderRole.
func (c *OrderRoleClient) QueryOrderHeader(or *OrderRole) *OrderHeaderQuery {
	query := &OrderHeaderQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := or.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderrole.Table, orderrole.FieldID, id),
			sqlgraph.To(orderheader.Table, orderheader.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, orderrole.OrderHeaderTable, orderrole.OrderHeaderColumn),
		)
		fromV = sqlgraph.Neighbors(or.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRoleType queries the role_type edge of a OrderRole.
func (c *OrderRoleClient) QueryRoleType(or *OrderRole) *RoleTypeQuery {
	query := &RoleTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := or.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderrole.Table, orderrole.FieldID, id),
			sqlgraph.To(roletype.Table, roletype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, orderrole.RoleTypeTable, orderrole.RoleTypeColumn),
		)
		fromV = sqlgraph.Neighbors(or.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrderItems queries the order_items edge of a OrderRole.
func (c *OrderRoleClient) QueryOrderItems(or *OrderRole) *OrderItemQuery {
	query := &OrderItemQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := or.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderrole.Table, orderrole.FieldID, id),
			sqlgraph.To(orderitem.Table, orderitem.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, orderrole.OrderItemsTable, orderrole.OrderItemsColumn),
		)
		fromV = sqlgraph.Neighbors(or.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OrderRoleClient) Hooks() []Hook {
	return c.hooks.OrderRole
}

// OrderStatusClient is a client for the OrderStatus schema.
type OrderStatusClient struct {
	config
}

// NewOrderStatusClient returns a client for the OrderStatus from the given config.
func NewOrderStatusClient(c config) *OrderStatusClient {
	return &OrderStatusClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `orderstatus.Hooks(f(g(h())))`.
func (c *OrderStatusClient) Use(hooks ...Hook) {
	c.hooks.OrderStatus = append(c.hooks.OrderStatus, hooks...)
}

// Create returns a create builder for OrderStatus.
func (c *OrderStatusClient) Create() *OrderStatusCreate {
	mutation := newOrderStatusMutation(c.config, OpCreate)
	return &OrderStatusCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OrderStatus entities.
func (c *OrderStatusClient) CreateBulk(builders ...*OrderStatusCreate) *OrderStatusCreateBulk {
	return &OrderStatusCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OrderStatus.
func (c *OrderStatusClient) Update() *OrderStatusUpdate {
	mutation := newOrderStatusMutation(c.config, OpUpdate)
	return &OrderStatusUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrderStatusClient) UpdateOne(os *OrderStatus) *OrderStatusUpdateOne {
	mutation := newOrderStatusMutation(c.config, OpUpdateOne, withOrderStatus(os))
	return &OrderStatusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrderStatusClient) UpdateOneID(id int) *OrderStatusUpdateOne {
	mutation := newOrderStatusMutation(c.config, OpUpdateOne, withOrderStatusID(id))
	return &OrderStatusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OrderStatus.
func (c *OrderStatusClient) Delete() *OrderStatusDelete {
	mutation := newOrderStatusMutation(c.config, OpDelete)
	return &OrderStatusDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *OrderStatusClient) DeleteOne(os *OrderStatus) *OrderStatusDeleteOne {
	return c.DeleteOneID(os.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *OrderStatusClient) DeleteOneID(id int) *OrderStatusDeleteOne {
	builder := c.Delete().Where(orderstatus.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrderStatusDeleteOne{builder}
}

// Query returns a query builder for OrderStatus.
func (c *OrderStatusClient) Query() *OrderStatusQuery {
	return &OrderStatusQuery{
		config: c.config,
	}
}

// Get returns a OrderStatus entity by its id.
func (c *OrderStatusClient) Get(ctx context.Context, id int) (*OrderStatus, error) {
	return c.Query().Where(orderstatus.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrderStatusClient) GetX(ctx context.Context, id int) *OrderStatus {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryStatusItem queries the status_item edge of a OrderStatus.
func (c *OrderStatusClient) QueryStatusItem(os *OrderStatus) *StatusItemQuery {
	query := &StatusItemQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := os.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderstatus.Table, orderstatus.FieldID, id),
			sqlgraph.To(statusitem.Table, statusitem.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, orderstatus.StatusItemTable, orderstatus.StatusItemColumn),
		)
		fromV = sqlgraph.Neighbors(os.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrderHeader queries the order_header edge of a OrderStatus.
func (c *OrderStatusClient) QueryOrderHeader(os *OrderStatus) *OrderHeaderQuery {
	query := &OrderHeaderQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := os.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderstatus.Table, orderstatus.FieldID, id),
			sqlgraph.To(orderheader.Table, orderheader.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, orderstatus.OrderHeaderTable, orderstatus.OrderHeaderColumn),
		)
		fromV = sqlgraph.Neighbors(os.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrderItem queries the order_item edge of a OrderStatus.
func (c *OrderStatusClient) QueryOrderItem(os *OrderStatus) *OrderItemQuery {
	query := &OrderItemQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := os.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderstatus.Table, orderstatus.FieldID, id),
			sqlgraph.To(orderitem.Table, orderitem.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, orderstatus.OrderItemTable, orderstatus.OrderItemColumn),
		)
		fromV = sqlgraph.Neighbors(os.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrderPaymentPreference queries the order_payment_preference edge of a OrderStatus.
func (c *OrderStatusClient) QueryOrderPaymentPreference(os *OrderStatus) *OrderPaymentPreferenceQuery {
	query := &OrderPaymentPreferenceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := os.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderstatus.Table, orderstatus.FieldID, id),
			sqlgraph.To(orderpaymentpreference.Table, orderpaymentpreference.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, orderstatus.OrderPaymentPreferenceTable, orderstatus.OrderPaymentPreferenceColumn),
		)
		fromV = sqlgraph.Neighbors(os.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OrderStatusClient) Hooks() []Hook {
	return c.hooks.OrderStatus
}

// ProdCatalogCategoryTypeClient is a client for the ProdCatalogCategoryType schema.
type ProdCatalogCategoryTypeClient struct {
	config
}

// NewProdCatalogCategoryTypeClient returns a client for the ProdCatalogCategoryType from the given config.
func NewProdCatalogCategoryTypeClient(c config) *ProdCatalogCategoryTypeClient {
	return &ProdCatalogCategoryTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `prodcatalogcategorytype.Hooks(f(g(h())))`.
func (c *ProdCatalogCategoryTypeClient) Use(hooks ...Hook) {
	c.hooks.ProdCatalogCategoryType = append(c.hooks.ProdCatalogCategoryType, hooks...)
}

// Create returns a create builder for ProdCatalogCategoryType.
func (c *ProdCatalogCategoryTypeClient) Create() *ProdCatalogCategoryTypeCreate {
	mutation := newProdCatalogCategoryTypeMutation(c.config, OpCreate)
	return &ProdCatalogCategoryTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProdCatalogCategoryType entities.
func (c *ProdCatalogCategoryTypeClient) CreateBulk(builders ...*ProdCatalogCategoryTypeCreate) *ProdCatalogCategoryTypeCreateBulk {
	return &ProdCatalogCategoryTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProdCatalogCategoryType.
func (c *ProdCatalogCategoryTypeClient) Update() *ProdCatalogCategoryTypeUpdate {
	mutation := newProdCatalogCategoryTypeMutation(c.config, OpUpdate)
	return &ProdCatalogCategoryTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProdCatalogCategoryTypeClient) UpdateOne(pcct *ProdCatalogCategoryType) *ProdCatalogCategoryTypeUpdateOne {
	mutation := newProdCatalogCategoryTypeMutation(c.config, OpUpdateOne, withProdCatalogCategoryType(pcct))
	return &ProdCatalogCategoryTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProdCatalogCategoryTypeClient) UpdateOneID(id int) *ProdCatalogCategoryTypeUpdateOne {
	mutation := newProdCatalogCategoryTypeMutation(c.config, OpUpdateOne, withProdCatalogCategoryTypeID(id))
	return &ProdCatalogCategoryTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProdCatalogCategoryType.
func (c *ProdCatalogCategoryTypeClient) Delete() *ProdCatalogCategoryTypeDelete {
	mutation := newProdCatalogCategoryTypeMutation(c.config, OpDelete)
	return &ProdCatalogCategoryTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ProdCatalogCategoryTypeClient) DeleteOne(pcct *ProdCatalogCategoryType) *ProdCatalogCategoryTypeDeleteOne {
	return c.DeleteOneID(pcct.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ProdCatalogCategoryTypeClient) DeleteOneID(id int) *ProdCatalogCategoryTypeDeleteOne {
	builder := c.Delete().Where(prodcatalogcategorytype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProdCatalogCategoryTypeDeleteOne{builder}
}

// Query returns a query builder for ProdCatalogCategoryType.
func (c *ProdCatalogCategoryTypeClient) Query() *ProdCatalogCategoryTypeQuery {
	return &ProdCatalogCategoryTypeQuery{
		config: c.config,
	}
}

// Get returns a ProdCatalogCategoryType entity by its id.
func (c *ProdCatalogCategoryTypeClient) Get(ctx context.Context, id int) (*ProdCatalogCategoryType, error) {
	return c.Query().Where(prodcatalogcategorytype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProdCatalogCategoryTypeClient) GetX(ctx context.Context, id int) *ProdCatalogCategoryType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryParent queries the parent edge of a ProdCatalogCategoryType.
func (c *ProdCatalogCategoryTypeClient) QueryParent(pcct *ProdCatalogCategoryType) *ProdCatalogCategoryTypeQuery {
	query := &ProdCatalogCategoryTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pcct.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(prodcatalogcategorytype.Table, prodcatalogcategorytype.FieldID, id),
			sqlgraph.To(prodcatalogcategorytype.Table, prodcatalogcategorytype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, prodcatalogcategorytype.ParentTable, prodcatalogcategorytype.ParentColumn),
		)
		fromV = sqlgraph.Neighbors(pcct.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildren queries the children edge of a ProdCatalogCategoryType.
func (c *ProdCatalogCategoryTypeClient) QueryChildren(pcct *ProdCatalogCategoryType) *ProdCatalogCategoryTypeQuery {
	query := &ProdCatalogCategoryTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pcct.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(prodcatalogcategorytype.Table, prodcatalogcategorytype.FieldID, id),
			sqlgraph.To(prodcatalogcategorytype.Table, prodcatalogcategorytype.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, prodcatalogcategorytype.ChildrenTable, prodcatalogcategorytype.ChildrenColumn),
		)
		fromV = sqlgraph.Neighbors(pcct.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildProdCatalogCategoryTypes queries the child_prod_catalog_category_types edge of a ProdCatalogCategoryType.
func (c *ProdCatalogCategoryTypeClient) QueryChildProdCatalogCategoryTypes(pcct *ProdCatalogCategoryType) *ProdCatalogCategoryTypeQuery {
	query := &ProdCatalogCategoryTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pcct.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(prodcatalogcategorytype.Table, prodcatalogcategorytype.FieldID, id),
			sqlgraph.To(prodcatalogcategorytype.Table, prodcatalogcategorytype.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, prodcatalogcategorytype.ChildProdCatalogCategoryTypesTable, prodcatalogcategorytype.ChildProdCatalogCategoryTypesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pcct.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProdCatalogCategoryTypeClient) Hooks() []Hook {
	return c.hooks.ProdCatalogCategoryType
}

// ProdConfItemContentTypeClient is a client for the ProdConfItemContentType schema.
type ProdConfItemContentTypeClient struct {
	config
}

// NewProdConfItemContentTypeClient returns a client for the ProdConfItemContentType from the given config.
func NewProdConfItemContentTypeClient(c config) *ProdConfItemContentTypeClient {
	return &ProdConfItemContentTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `prodconfitemcontenttype.Hooks(f(g(h())))`.
func (c *ProdConfItemContentTypeClient) Use(hooks ...Hook) {
	c.hooks.ProdConfItemContentType = append(c.hooks.ProdConfItemContentType, hooks...)
}

// Create returns a create builder for ProdConfItemContentType.
func (c *ProdConfItemContentTypeClient) Create() *ProdConfItemContentTypeCreate {
	mutation := newProdConfItemContentTypeMutation(c.config, OpCreate)
	return &ProdConfItemContentTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProdConfItemContentType entities.
func (c *ProdConfItemContentTypeClient) CreateBulk(builders ...*ProdConfItemContentTypeCreate) *ProdConfItemContentTypeCreateBulk {
	return &ProdConfItemContentTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProdConfItemContentType.
func (c *ProdConfItemContentTypeClient) Update() *ProdConfItemContentTypeUpdate {
	mutation := newProdConfItemContentTypeMutation(c.config, OpUpdate)
	return &ProdConfItemContentTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProdConfItemContentTypeClient) UpdateOne(pcict *ProdConfItemContentType) *ProdConfItemContentTypeUpdateOne {
	mutation := newProdConfItemContentTypeMutation(c.config, OpUpdateOne, withProdConfItemContentType(pcict))
	return &ProdConfItemContentTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProdConfItemContentTypeClient) UpdateOneID(id int) *ProdConfItemContentTypeUpdateOne {
	mutation := newProdConfItemContentTypeMutation(c.config, OpUpdateOne, withProdConfItemContentTypeID(id))
	return &ProdConfItemContentTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProdConfItemContentType.
func (c *ProdConfItemContentTypeClient) Delete() *ProdConfItemContentTypeDelete {
	mutation := newProdConfItemContentTypeMutation(c.config, OpDelete)
	return &ProdConfItemContentTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ProdConfItemContentTypeClient) DeleteOne(pcict *ProdConfItemContentType) *ProdConfItemContentTypeDeleteOne {
	return c.DeleteOneID(pcict.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ProdConfItemContentTypeClient) DeleteOneID(id int) *ProdConfItemContentTypeDeleteOne {
	builder := c.Delete().Where(prodconfitemcontenttype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProdConfItemContentTypeDeleteOne{builder}
}

// Query returns a query builder for ProdConfItemContentType.
func (c *ProdConfItemContentTypeClient) Query() *ProdConfItemContentTypeQuery {
	return &ProdConfItemContentTypeQuery{
		config: c.config,
	}
}

// Get returns a ProdConfItemContentType entity by its id.
func (c *ProdConfItemContentTypeClient) Get(ctx context.Context, id int) (*ProdConfItemContentType, error) {
	return c.Query().Where(prodconfitemcontenttype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProdConfItemContentTypeClient) GetX(ctx context.Context, id int) *ProdConfItemContentType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryParent queries the parent edge of a ProdConfItemContentType.
func (c *ProdConfItemContentTypeClient) QueryParent(pcict *ProdConfItemContentType) *ProdConfItemContentTypeQuery {
	query := &ProdConfItemContentTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pcict.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(prodconfitemcontenttype.Table, prodconfitemcontenttype.FieldID, id),
			sqlgraph.To(prodconfitemcontenttype.Table, prodconfitemcontenttype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, prodconfitemcontenttype.ParentTable, prodconfitemcontenttype.ParentColumn),
		)
		fromV = sqlgraph.Neighbors(pcict.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildren queries the children edge of a ProdConfItemContentType.
func (c *ProdConfItemContentTypeClient) QueryChildren(pcict *ProdConfItemContentType) *ProdConfItemContentTypeQuery {
	query := &ProdConfItemContentTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pcict.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(prodconfitemcontenttype.Table, prodconfitemcontenttype.FieldID, id),
			sqlgraph.To(prodconfitemcontenttype.Table, prodconfitemcontenttype.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, prodconfitemcontenttype.ChildrenTable, prodconfitemcontenttype.ChildrenColumn),
		)
		fromV = sqlgraph.Neighbors(pcict.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildProdConfItemContentTypes queries the child_prod_conf_item_content_types edge of a ProdConfItemContentType.
func (c *ProdConfItemContentTypeClient) QueryChildProdConfItemContentTypes(pcict *ProdConfItemContentType) *ProdConfItemContentTypeQuery {
	query := &ProdConfItemContentTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pcict.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(prodconfitemcontenttype.Table, prodconfitemcontenttype.FieldID, id),
			sqlgraph.To(prodconfitemcontenttype.Table, prodconfitemcontenttype.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, prodconfitemcontenttype.ChildProdConfItemContentTypesTable, prodconfitemcontenttype.ChildProdConfItemContentTypesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pcict.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProdConfItemContentTypeClient) Hooks() []Hook {
	return c.hooks.ProdConfItemContentType
}

// ProductClient is a client for the Product schema.
type ProductClient struct {
	config
}

// NewProductClient returns a client for the Product from the given config.
func NewProductClient(c config) *ProductClient {
	return &ProductClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `product.Hooks(f(g(h())))`.
func (c *ProductClient) Use(hooks ...Hook) {
	c.hooks.Product = append(c.hooks.Product, hooks...)
}

// Create returns a create builder for Product.
func (c *ProductClient) Create() *ProductCreate {
	mutation := newProductMutation(c.config, OpCreate)
	return &ProductCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Product entities.
func (c *ProductClient) CreateBulk(builders ...*ProductCreate) *ProductCreateBulk {
	return &ProductCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Product.
func (c *ProductClient) Update() *ProductUpdate {
	mutation := newProductMutation(c.config, OpUpdate)
	return &ProductUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProductClient) UpdateOne(pr *Product) *ProductUpdateOne {
	mutation := newProductMutation(c.config, OpUpdateOne, withProduct(pr))
	return &ProductUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProductClient) UpdateOneID(id int) *ProductUpdateOne {
	mutation := newProductMutation(c.config, OpUpdateOne, withProductID(id))
	return &ProductUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Product.
func (c *ProductClient) Delete() *ProductDelete {
	mutation := newProductMutation(c.config, OpDelete)
	return &ProductDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ProductClient) DeleteOne(pr *Product) *ProductDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ProductClient) DeleteOneID(id int) *ProductDeleteOne {
	builder := c.Delete().Where(product.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProductDeleteOne{builder}
}

// Query returns a query builder for Product.
func (c *ProductClient) Query() *ProductQuery {
	return &ProductQuery{
		config: c.config,
	}
}

// Get returns a Product entity by its id.
func (c *ProductClient) Get(ctx context.Context, id int) (*Product, error) {
	return c.Query().Where(product.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProductClient) GetX(ctx context.Context, id int) *Product {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProductType queries the product_type edge of a Product.
func (c *ProductClient) QueryProductType(pr *Product) *ProductTypeQuery {
	query := &ProductTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(product.Table, product.FieldID, id),
			sqlgraph.To(producttype.Table, producttype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, product.ProductTypeTable, product.ProductTypeColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPrimaryProductCategory queries the primary_product_category edge of a Product.
func (c *ProductClient) QueryPrimaryProductCategory(pr *Product) *ProductCategoryQuery {
	query := &ProductCategoryQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(product.Table, product.FieldID, id),
			sqlgraph.To(productcategory.Table, productcategory.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, product.PrimaryProductCategoryTable, product.PrimaryProductCategoryColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryVirtualVariantMethodEnumeration queries the virtual_variant_method_enumeration edge of a Product.
func (c *ProductClient) QueryVirtualVariantMethodEnumeration(pr *Product) *EnumerationQuery {
	query := &EnumerationQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(product.Table, product.FieldID, id),
			sqlgraph.To(enumeration.Table, enumeration.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, product.VirtualVariantMethodEnumerationTable, product.VirtualVariantMethodEnumerationColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRatingEnumeration queries the rating_enumeration edge of a Product.
func (c *ProductClient) QueryRatingEnumeration(pr *Product) *EnumerationQuery {
	query := &EnumerationQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(product.Table, product.FieldID, id),
			sqlgraph.To(enumeration.Table, enumeration.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, product.RatingEnumerationTable, product.RatingEnumerationColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRequirementMethodEnumeration queries the requirement_method_enumeration edge of a Product.
func (c *ProductClient) QueryRequirementMethodEnumeration(pr *Product) *EnumerationQuery {
	query := &EnumerationQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(product.Table, product.FieldID, id),
			sqlgraph.To(enumeration.Table, enumeration.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, product.RequirementMethodEnumerationTable, product.RequirementMethodEnumerationColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryInventoryItemType queries the inventory_item_type edge of a Product.
func (c *ProductClient) QueryInventoryItemType(pr *Product) *InventoryItemTypeQuery {
	query := &InventoryItemTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(product.Table, product.FieldID, id),
			sqlgraph.To(inventoryitemtype.Table, inventoryitemtype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, product.InventoryItemTypeTable, product.InventoryItemTypeColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrderItems queries the order_items edge of a Product.
func (c *ProductClient) QueryOrderItems(pr *Product) *OrderItemQuery {
	query := &OrderItemQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(product.Table, product.FieldID, id),
			sqlgraph.To(orderitem.Table, orderitem.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, product.OrderItemsTable, product.OrderItemsColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMainProductAssocs queries the main_product_assocs edge of a Product.
func (c *ProductClient) QueryMainProductAssocs(pr *Product) *ProductAssocQuery {
	query := &ProductAssocQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(product.Table, product.FieldID, id),
			sqlgraph.To(productassoc.Table, productassoc.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, product.MainProductAssocsTable, product.MainProductAssocsColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAssocProductAssocs queries the assoc_product_assocs edge of a Product.
func (c *ProductClient) QueryAssocProductAssocs(pr *Product) *ProductAssocQuery {
	query := &ProductAssocQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(product.Table, product.FieldID, id),
			sqlgraph.To(productassoc.Table, productassoc.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, product.AssocProductAssocsTable, product.AssocProductAssocsColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProductPrices queries the product_prices edge of a Product.
func (c *ProductClient) QueryProductPrices(pr *Product) *ProductPriceQuery {
	query := &ProductPriceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(product.Table, product.FieldID, id),
			sqlgraph.To(productprice.Table, productprice.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, product.ProductPricesTable, product.ProductPricesColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProductReviews queries the product_reviews edge of a Product.
func (c *ProductClient) QueryProductReviews(pr *Product) *ProductReviewQuery {
	query := &ProductReviewQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(product.Table, product.FieldID, id),
			sqlgraph.To(productreview.Table, productreview.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, product.ProductReviewsTable, product.ProductReviewsColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProductClient) Hooks() []Hook {
	return c.hooks.Product
}

// ProductAssocClient is a client for the ProductAssoc schema.
type ProductAssocClient struct {
	config
}

// NewProductAssocClient returns a client for the ProductAssoc from the given config.
func NewProductAssocClient(c config) *ProductAssocClient {
	return &ProductAssocClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `productassoc.Hooks(f(g(h())))`.
func (c *ProductAssocClient) Use(hooks ...Hook) {
	c.hooks.ProductAssoc = append(c.hooks.ProductAssoc, hooks...)
}

// Create returns a create builder for ProductAssoc.
func (c *ProductAssocClient) Create() *ProductAssocCreate {
	mutation := newProductAssocMutation(c.config, OpCreate)
	return &ProductAssocCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProductAssoc entities.
func (c *ProductAssocClient) CreateBulk(builders ...*ProductAssocCreate) *ProductAssocCreateBulk {
	return &ProductAssocCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProductAssoc.
func (c *ProductAssocClient) Update() *ProductAssocUpdate {
	mutation := newProductAssocMutation(c.config, OpUpdate)
	return &ProductAssocUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProductAssocClient) UpdateOne(pa *ProductAssoc) *ProductAssocUpdateOne {
	mutation := newProductAssocMutation(c.config, OpUpdateOne, withProductAssoc(pa))
	return &ProductAssocUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProductAssocClient) UpdateOneID(id int) *ProductAssocUpdateOne {
	mutation := newProductAssocMutation(c.config, OpUpdateOne, withProductAssocID(id))
	return &ProductAssocUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProductAssoc.
func (c *ProductAssocClient) Delete() *ProductAssocDelete {
	mutation := newProductAssocMutation(c.config, OpDelete)
	return &ProductAssocDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ProductAssocClient) DeleteOne(pa *ProductAssoc) *ProductAssocDeleteOne {
	return c.DeleteOneID(pa.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ProductAssocClient) DeleteOneID(id int) *ProductAssocDeleteOne {
	builder := c.Delete().Where(productassoc.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProductAssocDeleteOne{builder}
}

// Query returns a query builder for ProductAssoc.
func (c *ProductAssocClient) Query() *ProductAssocQuery {
	return &ProductAssocQuery{
		config: c.config,
	}
}

// Get returns a ProductAssoc entity by its id.
func (c *ProductAssocClient) Get(ctx context.Context, id int) (*ProductAssoc, error) {
	return c.Query().Where(productassoc.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProductAssocClient) GetX(ctx context.Context, id int) *ProductAssoc {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProductAssocType queries the product_assoc_type edge of a ProductAssoc.
func (c *ProductAssocClient) QueryProductAssocType(pa *ProductAssoc) *ProductAssocTypeQuery {
	query := &ProductAssocTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productassoc.Table, productassoc.FieldID, id),
			sqlgraph.To(productassoctype.Table, productassoctype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, productassoc.ProductAssocTypeTable, productassoc.ProductAssocTypeColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMainProduct queries the main_product edge of a ProductAssoc.
func (c *ProductAssocClient) QueryMainProduct(pa *ProductAssoc) *ProductQuery {
	query := &ProductQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productassoc.Table, productassoc.FieldID, id),
			sqlgraph.To(product.Table, product.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, productassoc.MainProductTable, productassoc.MainProductColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAssocProduct queries the assoc_product edge of a ProductAssoc.
func (c *ProductAssocClient) QueryAssocProduct(pa *ProductAssoc) *ProductQuery {
	query := &ProductQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productassoc.Table, productassoc.FieldID, id),
			sqlgraph.To(product.Table, product.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, productassoc.AssocProductTable, productassoc.AssocProductColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCustomMethod queries the custom_method edge of a ProductAssoc.
func (c *ProductAssocClient) QueryCustomMethod(pa *ProductAssoc) *CustomMethodQuery {
	query := &CustomMethodQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productassoc.Table, productassoc.FieldID, id),
			sqlgraph.To(custommethod.Table, custommethod.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, productassoc.CustomMethodTable, productassoc.CustomMethodColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProductAssocClient) Hooks() []Hook {
	return c.hooks.ProductAssoc
}

// ProductAssocTypeClient is a client for the ProductAssocType schema.
type ProductAssocTypeClient struct {
	config
}

// NewProductAssocTypeClient returns a client for the ProductAssocType from the given config.
func NewProductAssocTypeClient(c config) *ProductAssocTypeClient {
	return &ProductAssocTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `productassoctype.Hooks(f(g(h())))`.
func (c *ProductAssocTypeClient) Use(hooks ...Hook) {
	c.hooks.ProductAssocType = append(c.hooks.ProductAssocType, hooks...)
}

// Create returns a create builder for ProductAssocType.
func (c *ProductAssocTypeClient) Create() *ProductAssocTypeCreate {
	mutation := newProductAssocTypeMutation(c.config, OpCreate)
	return &ProductAssocTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProductAssocType entities.
func (c *ProductAssocTypeClient) CreateBulk(builders ...*ProductAssocTypeCreate) *ProductAssocTypeCreateBulk {
	return &ProductAssocTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProductAssocType.
func (c *ProductAssocTypeClient) Update() *ProductAssocTypeUpdate {
	mutation := newProductAssocTypeMutation(c.config, OpUpdate)
	return &ProductAssocTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProductAssocTypeClient) UpdateOne(pat *ProductAssocType) *ProductAssocTypeUpdateOne {
	mutation := newProductAssocTypeMutation(c.config, OpUpdateOne, withProductAssocType(pat))
	return &ProductAssocTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProductAssocTypeClient) UpdateOneID(id int) *ProductAssocTypeUpdateOne {
	mutation := newProductAssocTypeMutation(c.config, OpUpdateOne, withProductAssocTypeID(id))
	return &ProductAssocTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProductAssocType.
func (c *ProductAssocTypeClient) Delete() *ProductAssocTypeDelete {
	mutation := newProductAssocTypeMutation(c.config, OpDelete)
	return &ProductAssocTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ProductAssocTypeClient) DeleteOne(pat *ProductAssocType) *ProductAssocTypeDeleteOne {
	return c.DeleteOneID(pat.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ProductAssocTypeClient) DeleteOneID(id int) *ProductAssocTypeDeleteOne {
	builder := c.Delete().Where(productassoctype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProductAssocTypeDeleteOne{builder}
}

// Query returns a query builder for ProductAssocType.
func (c *ProductAssocTypeClient) Query() *ProductAssocTypeQuery {
	return &ProductAssocTypeQuery{
		config: c.config,
	}
}

// Get returns a ProductAssocType entity by its id.
func (c *ProductAssocTypeClient) Get(ctx context.Context, id int) (*ProductAssocType, error) {
	return c.Query().Where(productassoctype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProductAssocTypeClient) GetX(ctx context.Context, id int) *ProductAssocType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryParent queries the parent edge of a ProductAssocType.
func (c *ProductAssocTypeClient) QueryParent(pat *ProductAssocType) *ProductAssocTypeQuery {
	query := &ProductAssocTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pat.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productassoctype.Table, productassoctype.FieldID, id),
			sqlgraph.To(productassoctype.Table, productassoctype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, productassoctype.ParentTable, productassoctype.ParentColumn),
		)
		fromV = sqlgraph.Neighbors(pat.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildren queries the children edge of a ProductAssocType.
func (c *ProductAssocTypeClient) QueryChildren(pat *ProductAssocType) *ProductAssocTypeQuery {
	query := &ProductAssocTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pat.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productassoctype.Table, productassoctype.FieldID, id),
			sqlgraph.To(productassoctype.Table, productassoctype.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, productassoctype.ChildrenTable, productassoctype.ChildrenColumn),
		)
		fromV = sqlgraph.Neighbors(pat.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProductAssocs queries the product_assocs edge of a ProductAssocType.
func (c *ProductAssocTypeClient) QueryProductAssocs(pat *ProductAssocType) *ProductAssocQuery {
	query := &ProductAssocQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pat.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productassoctype.Table, productassoctype.FieldID, id),
			sqlgraph.To(productassoc.Table, productassoc.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, productassoctype.ProductAssocsTable, productassoctype.ProductAssocsColumn),
		)
		fromV = sqlgraph.Neighbors(pat.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildProductAssocTypes queries the child_product_assoc_types edge of a ProductAssocType.
func (c *ProductAssocTypeClient) QueryChildProductAssocTypes(pat *ProductAssocType) *ProductAssocTypeQuery {
	query := &ProductAssocTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pat.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productassoctype.Table, productassoctype.FieldID, id),
			sqlgraph.To(productassoctype.Table, productassoctype.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, productassoctype.ChildProductAssocTypesTable, productassoctype.ChildProductAssocTypesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pat.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProductAssocTypeClient) Hooks() []Hook {
	return c.hooks.ProductAssocType
}

// ProductCategoryClient is a client for the ProductCategory schema.
type ProductCategoryClient struct {
	config
}

// NewProductCategoryClient returns a client for the ProductCategory from the given config.
func NewProductCategoryClient(c config) *ProductCategoryClient {
	return &ProductCategoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `productcategory.Hooks(f(g(h())))`.
func (c *ProductCategoryClient) Use(hooks ...Hook) {
	c.hooks.ProductCategory = append(c.hooks.ProductCategory, hooks...)
}

// Create returns a create builder for ProductCategory.
func (c *ProductCategoryClient) Create() *ProductCategoryCreate {
	mutation := newProductCategoryMutation(c.config, OpCreate)
	return &ProductCategoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProductCategory entities.
func (c *ProductCategoryClient) CreateBulk(builders ...*ProductCategoryCreate) *ProductCategoryCreateBulk {
	return &ProductCategoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProductCategory.
func (c *ProductCategoryClient) Update() *ProductCategoryUpdate {
	mutation := newProductCategoryMutation(c.config, OpUpdate)
	return &ProductCategoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProductCategoryClient) UpdateOne(pc *ProductCategory) *ProductCategoryUpdateOne {
	mutation := newProductCategoryMutation(c.config, OpUpdateOne, withProductCategory(pc))
	return &ProductCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProductCategoryClient) UpdateOneID(id int) *ProductCategoryUpdateOne {
	mutation := newProductCategoryMutation(c.config, OpUpdateOne, withProductCategoryID(id))
	return &ProductCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProductCategory.
func (c *ProductCategoryClient) Delete() *ProductCategoryDelete {
	mutation := newProductCategoryMutation(c.config, OpDelete)
	return &ProductCategoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ProductCategoryClient) DeleteOne(pc *ProductCategory) *ProductCategoryDeleteOne {
	return c.DeleteOneID(pc.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ProductCategoryClient) DeleteOneID(id int) *ProductCategoryDeleteOne {
	builder := c.Delete().Where(productcategory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProductCategoryDeleteOne{builder}
}

// Query returns a query builder for ProductCategory.
func (c *ProductCategoryClient) Query() *ProductCategoryQuery {
	return &ProductCategoryQuery{
		config: c.config,
	}
}

// Get returns a ProductCategory entity by its id.
func (c *ProductCategoryClient) Get(ctx context.Context, id int) (*ProductCategory, error) {
	return c.Query().Where(productcategory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProductCategoryClient) GetX(ctx context.Context, id int) *ProductCategory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProductCategoryType queries the product_category_type edge of a ProductCategory.
func (c *ProductCategoryClient) QueryProductCategoryType(pc *ProductCategory) *ProductCategoryTypeQuery {
	query := &ProductCategoryTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productcategory.Table, productcategory.FieldID, id),
			sqlgraph.To(productcategorytype.Table, productcategorytype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, productcategory.ProductCategoryTypeTable, productcategory.ProductCategoryTypeColumn),
		)
		fromV = sqlgraph.Neighbors(pc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryParent queries the parent edge of a ProductCategory.
func (c *ProductCategoryClient) QueryParent(pc *ProductCategory) *ProductCategoryQuery {
	query := &ProductCategoryQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productcategory.Table, productcategory.FieldID, id),
			sqlgraph.To(productcategory.Table, productcategory.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, productcategory.ParentTable, productcategory.ParentColumn),
		)
		fromV = sqlgraph.Neighbors(pc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildren queries the children edge of a ProductCategory.
func (c *ProductCategoryClient) QueryChildren(pc *ProductCategory) *ProductCategoryQuery {
	query := &ProductCategoryQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productcategory.Table, productcategory.FieldID, id),
			sqlgraph.To(productcategory.Table, productcategory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, productcategory.ChildrenTable, productcategory.ChildrenColumn),
		)
		fromV = sqlgraph.Neighbors(pc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPrimaryChildProductCategories queries the primary_child_product_categories edge of a ProductCategory.
func (c *ProductCategoryClient) QueryPrimaryChildProductCategories(pc *ProductCategory) *ProductCategoryQuery {
	query := &ProductCategoryQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productcategory.Table, productcategory.FieldID, id),
			sqlgraph.To(productcategory.Table, productcategory.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, productcategory.PrimaryChildProductCategoriesTable, productcategory.PrimaryChildProductCategoriesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPrimaryProducts queries the primary_products edge of a ProductCategory.
func (c *ProductCategoryClient) QueryPrimaryProducts(pc *ProductCategory) *ProductQuery {
	query := &ProductQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productcategory.Table, productcategory.FieldID, id),
			sqlgraph.To(product.Table, product.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, productcategory.PrimaryProductsTable, productcategory.PrimaryProductsColumn),
		)
		fromV = sqlgraph.Neighbors(pc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProductCategoryClient) Hooks() []Hook {
	return c.hooks.ProductCategory
}

// ProductCategoryContentTypeClient is a client for the ProductCategoryContentType schema.
type ProductCategoryContentTypeClient struct {
	config
}

// NewProductCategoryContentTypeClient returns a client for the ProductCategoryContentType from the given config.
func NewProductCategoryContentTypeClient(c config) *ProductCategoryContentTypeClient {
	return &ProductCategoryContentTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `productcategorycontenttype.Hooks(f(g(h())))`.
func (c *ProductCategoryContentTypeClient) Use(hooks ...Hook) {
	c.hooks.ProductCategoryContentType = append(c.hooks.ProductCategoryContentType, hooks...)
}

// Create returns a create builder for ProductCategoryContentType.
func (c *ProductCategoryContentTypeClient) Create() *ProductCategoryContentTypeCreate {
	mutation := newProductCategoryContentTypeMutation(c.config, OpCreate)
	return &ProductCategoryContentTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProductCategoryContentType entities.
func (c *ProductCategoryContentTypeClient) CreateBulk(builders ...*ProductCategoryContentTypeCreate) *ProductCategoryContentTypeCreateBulk {
	return &ProductCategoryContentTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProductCategoryContentType.
func (c *ProductCategoryContentTypeClient) Update() *ProductCategoryContentTypeUpdate {
	mutation := newProductCategoryContentTypeMutation(c.config, OpUpdate)
	return &ProductCategoryContentTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProductCategoryContentTypeClient) UpdateOne(pcct *ProductCategoryContentType) *ProductCategoryContentTypeUpdateOne {
	mutation := newProductCategoryContentTypeMutation(c.config, OpUpdateOne, withProductCategoryContentType(pcct))
	return &ProductCategoryContentTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProductCategoryContentTypeClient) UpdateOneID(id int) *ProductCategoryContentTypeUpdateOne {
	mutation := newProductCategoryContentTypeMutation(c.config, OpUpdateOne, withProductCategoryContentTypeID(id))
	return &ProductCategoryContentTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProductCategoryContentType.
func (c *ProductCategoryContentTypeClient) Delete() *ProductCategoryContentTypeDelete {
	mutation := newProductCategoryContentTypeMutation(c.config, OpDelete)
	return &ProductCategoryContentTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ProductCategoryContentTypeClient) DeleteOne(pcct *ProductCategoryContentType) *ProductCategoryContentTypeDeleteOne {
	return c.DeleteOneID(pcct.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ProductCategoryContentTypeClient) DeleteOneID(id int) *ProductCategoryContentTypeDeleteOne {
	builder := c.Delete().Where(productcategorycontenttype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProductCategoryContentTypeDeleteOne{builder}
}

// Query returns a query builder for ProductCategoryContentType.
func (c *ProductCategoryContentTypeClient) Query() *ProductCategoryContentTypeQuery {
	return &ProductCategoryContentTypeQuery{
		config: c.config,
	}
}

// Get returns a ProductCategoryContentType entity by its id.
func (c *ProductCategoryContentTypeClient) Get(ctx context.Context, id int) (*ProductCategoryContentType, error) {
	return c.Query().Where(productcategorycontenttype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProductCategoryContentTypeClient) GetX(ctx context.Context, id int) *ProductCategoryContentType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryParent queries the parent edge of a ProductCategoryContentType.
func (c *ProductCategoryContentTypeClient) QueryParent(pcct *ProductCategoryContentType) *ProductCategoryContentTypeQuery {
	query := &ProductCategoryContentTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pcct.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productcategorycontenttype.Table, productcategorycontenttype.FieldID, id),
			sqlgraph.To(productcategorycontenttype.Table, productcategorycontenttype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, productcategorycontenttype.ParentTable, productcategorycontenttype.ParentColumn),
		)
		fromV = sqlgraph.Neighbors(pcct.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildren queries the children edge of a ProductCategoryContentType.
func (c *ProductCategoryContentTypeClient) QueryChildren(pcct *ProductCategoryContentType) *ProductCategoryContentTypeQuery {
	query := &ProductCategoryContentTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pcct.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productcategorycontenttype.Table, productcategorycontenttype.FieldID, id),
			sqlgraph.To(productcategorycontenttype.Table, productcategorycontenttype.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, productcategorycontenttype.ChildrenTable, productcategorycontenttype.ChildrenColumn),
		)
		fromV = sqlgraph.Neighbors(pcct.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildProductCategoryContentTypes queries the child_product_category_content_types edge of a ProductCategoryContentType.
func (c *ProductCategoryContentTypeClient) QueryChildProductCategoryContentTypes(pcct *ProductCategoryContentType) *ProductCategoryContentTypeQuery {
	query := &ProductCategoryContentTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pcct.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productcategorycontenttype.Table, productcategorycontenttype.FieldID, id),
			sqlgraph.To(productcategorycontenttype.Table, productcategorycontenttype.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, productcategorycontenttype.ChildProductCategoryContentTypesTable, productcategorycontenttype.ChildProductCategoryContentTypesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pcct.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProductCategoryContentTypeClient) Hooks() []Hook {
	return c.hooks.ProductCategoryContentType
}

// ProductCategoryTypeClient is a client for the ProductCategoryType schema.
type ProductCategoryTypeClient struct {
	config
}

// NewProductCategoryTypeClient returns a client for the ProductCategoryType from the given config.
func NewProductCategoryTypeClient(c config) *ProductCategoryTypeClient {
	return &ProductCategoryTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `productcategorytype.Hooks(f(g(h())))`.
func (c *ProductCategoryTypeClient) Use(hooks ...Hook) {
	c.hooks.ProductCategoryType = append(c.hooks.ProductCategoryType, hooks...)
}

// Create returns a create builder for ProductCategoryType.
func (c *ProductCategoryTypeClient) Create() *ProductCategoryTypeCreate {
	mutation := newProductCategoryTypeMutation(c.config, OpCreate)
	return &ProductCategoryTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProductCategoryType entities.
func (c *ProductCategoryTypeClient) CreateBulk(builders ...*ProductCategoryTypeCreate) *ProductCategoryTypeCreateBulk {
	return &ProductCategoryTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProductCategoryType.
func (c *ProductCategoryTypeClient) Update() *ProductCategoryTypeUpdate {
	mutation := newProductCategoryTypeMutation(c.config, OpUpdate)
	return &ProductCategoryTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProductCategoryTypeClient) UpdateOne(pct *ProductCategoryType) *ProductCategoryTypeUpdateOne {
	mutation := newProductCategoryTypeMutation(c.config, OpUpdateOne, withProductCategoryType(pct))
	return &ProductCategoryTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProductCategoryTypeClient) UpdateOneID(id int) *ProductCategoryTypeUpdateOne {
	mutation := newProductCategoryTypeMutation(c.config, OpUpdateOne, withProductCategoryTypeID(id))
	return &ProductCategoryTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProductCategoryType.
func (c *ProductCategoryTypeClient) Delete() *ProductCategoryTypeDelete {
	mutation := newProductCategoryTypeMutation(c.config, OpDelete)
	return &ProductCategoryTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ProductCategoryTypeClient) DeleteOne(pct *ProductCategoryType) *ProductCategoryTypeDeleteOne {
	return c.DeleteOneID(pct.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ProductCategoryTypeClient) DeleteOneID(id int) *ProductCategoryTypeDeleteOne {
	builder := c.Delete().Where(productcategorytype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProductCategoryTypeDeleteOne{builder}
}

// Query returns a query builder for ProductCategoryType.
func (c *ProductCategoryTypeClient) Query() *ProductCategoryTypeQuery {
	return &ProductCategoryTypeQuery{
		config: c.config,
	}
}

// Get returns a ProductCategoryType entity by its id.
func (c *ProductCategoryTypeClient) Get(ctx context.Context, id int) (*ProductCategoryType, error) {
	return c.Query().Where(productcategorytype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProductCategoryTypeClient) GetX(ctx context.Context, id int) *ProductCategoryType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryParent queries the parent edge of a ProductCategoryType.
func (c *ProductCategoryTypeClient) QueryParent(pct *ProductCategoryType) *ProductCategoryTypeQuery {
	query := &ProductCategoryTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pct.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productcategorytype.Table, productcategorytype.FieldID, id),
			sqlgraph.To(productcategorytype.Table, productcategorytype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, productcategorytype.ParentTable, productcategorytype.ParentColumn),
		)
		fromV = sqlgraph.Neighbors(pct.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildren queries the children edge of a ProductCategoryType.
func (c *ProductCategoryTypeClient) QueryChildren(pct *ProductCategoryType) *ProductCategoryTypeQuery {
	query := &ProductCategoryTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pct.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productcategorytype.Table, productcategorytype.FieldID, id),
			sqlgraph.To(productcategorytype.Table, productcategorytype.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, productcategorytype.ChildrenTable, productcategorytype.ChildrenColumn),
		)
		fromV = sqlgraph.Neighbors(pct.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProductCategories queries the product_categories edge of a ProductCategoryType.
func (c *ProductCategoryTypeClient) QueryProductCategories(pct *ProductCategoryType) *ProductCategoryQuery {
	query := &ProductCategoryQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pct.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productcategorytype.Table, productcategorytype.FieldID, id),
			sqlgraph.To(productcategory.Table, productcategory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, productcategorytype.ProductCategoriesTable, productcategorytype.ProductCategoriesColumn),
		)
		fromV = sqlgraph.Neighbors(pct.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildProductCategoryTypes queries the child_product_category_types edge of a ProductCategoryType.
func (c *ProductCategoryTypeClient) QueryChildProductCategoryTypes(pct *ProductCategoryType) *ProductCategoryTypeQuery {
	query := &ProductCategoryTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pct.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productcategorytype.Table, productcategorytype.FieldID, id),
			sqlgraph.To(productcategorytype.Table, productcategorytype.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, productcategorytype.ChildProductCategoryTypesTable, productcategorytype.ChildProductCategoryTypesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pct.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProductCategoryTypeClient) Hooks() []Hook {
	return c.hooks.ProductCategoryType
}

// ProductConfigItemClient is a client for the ProductConfigItem schema.
type ProductConfigItemClient struct {
	config
}

// NewProductConfigItemClient returns a client for the ProductConfigItem from the given config.
func NewProductConfigItemClient(c config) *ProductConfigItemClient {
	return &ProductConfigItemClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `productconfigitem.Hooks(f(g(h())))`.
func (c *ProductConfigItemClient) Use(hooks ...Hook) {
	c.hooks.ProductConfigItem = append(c.hooks.ProductConfigItem, hooks...)
}

// Create returns a create builder for ProductConfigItem.
func (c *ProductConfigItemClient) Create() *ProductConfigItemCreate {
	mutation := newProductConfigItemMutation(c.config, OpCreate)
	return &ProductConfigItemCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProductConfigItem entities.
func (c *ProductConfigItemClient) CreateBulk(builders ...*ProductConfigItemCreate) *ProductConfigItemCreateBulk {
	return &ProductConfigItemCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProductConfigItem.
func (c *ProductConfigItemClient) Update() *ProductConfigItemUpdate {
	mutation := newProductConfigItemMutation(c.config, OpUpdate)
	return &ProductConfigItemUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProductConfigItemClient) UpdateOne(pci *ProductConfigItem) *ProductConfigItemUpdateOne {
	mutation := newProductConfigItemMutation(c.config, OpUpdateOne, withProductConfigItem(pci))
	return &ProductConfigItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProductConfigItemClient) UpdateOneID(id int) *ProductConfigItemUpdateOne {
	mutation := newProductConfigItemMutation(c.config, OpUpdateOne, withProductConfigItemID(id))
	return &ProductConfigItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProductConfigItem.
func (c *ProductConfigItemClient) Delete() *ProductConfigItemDelete {
	mutation := newProductConfigItemMutation(c.config, OpDelete)
	return &ProductConfigItemDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ProductConfigItemClient) DeleteOne(pci *ProductConfigItem) *ProductConfigItemDeleteOne {
	return c.DeleteOneID(pci.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ProductConfigItemClient) DeleteOneID(id int) *ProductConfigItemDeleteOne {
	builder := c.Delete().Where(productconfigitem.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProductConfigItemDeleteOne{builder}
}

// Query returns a query builder for ProductConfigItem.
func (c *ProductConfigItemClient) Query() *ProductConfigItemQuery {
	return &ProductConfigItemQuery{
		config: c.config,
	}
}

// Get returns a ProductConfigItem entity by its id.
func (c *ProductConfigItemClient) Get(ctx context.Context, id int) (*ProductConfigItem, error) {
	return c.Query().Where(productconfigitem.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProductConfigItemClient) GetX(ctx context.Context, id int) *ProductConfigItem {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ProductConfigItemClient) Hooks() []Hook {
	return c.hooks.ProductConfigItem
}

// ProductContentTypeClient is a client for the ProductContentType schema.
type ProductContentTypeClient struct {
	config
}

// NewProductContentTypeClient returns a client for the ProductContentType from the given config.
func NewProductContentTypeClient(c config) *ProductContentTypeClient {
	return &ProductContentTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `productcontenttype.Hooks(f(g(h())))`.
func (c *ProductContentTypeClient) Use(hooks ...Hook) {
	c.hooks.ProductContentType = append(c.hooks.ProductContentType, hooks...)
}

// Create returns a create builder for ProductContentType.
func (c *ProductContentTypeClient) Create() *ProductContentTypeCreate {
	mutation := newProductContentTypeMutation(c.config, OpCreate)
	return &ProductContentTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProductContentType entities.
func (c *ProductContentTypeClient) CreateBulk(builders ...*ProductContentTypeCreate) *ProductContentTypeCreateBulk {
	return &ProductContentTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProductContentType.
func (c *ProductContentTypeClient) Update() *ProductContentTypeUpdate {
	mutation := newProductContentTypeMutation(c.config, OpUpdate)
	return &ProductContentTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProductContentTypeClient) UpdateOne(pct *ProductContentType) *ProductContentTypeUpdateOne {
	mutation := newProductContentTypeMutation(c.config, OpUpdateOne, withProductContentType(pct))
	return &ProductContentTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProductContentTypeClient) UpdateOneID(id int) *ProductContentTypeUpdateOne {
	mutation := newProductContentTypeMutation(c.config, OpUpdateOne, withProductContentTypeID(id))
	return &ProductContentTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProductContentType.
func (c *ProductContentTypeClient) Delete() *ProductContentTypeDelete {
	mutation := newProductContentTypeMutation(c.config, OpDelete)
	return &ProductContentTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ProductContentTypeClient) DeleteOne(pct *ProductContentType) *ProductContentTypeDeleteOne {
	return c.DeleteOneID(pct.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ProductContentTypeClient) DeleteOneID(id int) *ProductContentTypeDeleteOne {
	builder := c.Delete().Where(productcontenttype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProductContentTypeDeleteOne{builder}
}

// Query returns a query builder for ProductContentType.
func (c *ProductContentTypeClient) Query() *ProductContentTypeQuery {
	return &ProductContentTypeQuery{
		config: c.config,
	}
}

// Get returns a ProductContentType entity by its id.
func (c *ProductContentTypeClient) Get(ctx context.Context, id int) (*ProductContentType, error) {
	return c.Query().Where(productcontenttype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProductContentTypeClient) GetX(ctx context.Context, id int) *ProductContentType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryParent queries the parent edge of a ProductContentType.
func (c *ProductContentTypeClient) QueryParent(pct *ProductContentType) *ProductContentTypeQuery {
	query := &ProductContentTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pct.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productcontenttype.Table, productcontenttype.FieldID, id),
			sqlgraph.To(productcontenttype.Table, productcontenttype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, productcontenttype.ParentTable, productcontenttype.ParentColumn),
		)
		fromV = sqlgraph.Neighbors(pct.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildren queries the children edge of a ProductContentType.
func (c *ProductContentTypeClient) QueryChildren(pct *ProductContentType) *ProductContentTypeQuery {
	query := &ProductContentTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pct.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productcontenttype.Table, productcontenttype.FieldID, id),
			sqlgraph.To(productcontenttype.Table, productcontenttype.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, productcontenttype.ChildrenTable, productcontenttype.ChildrenColumn),
		)
		fromV = sqlgraph.Neighbors(pct.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildProductContentTypes queries the child_product_content_types edge of a ProductContentType.
func (c *ProductContentTypeClient) QueryChildProductContentTypes(pct *ProductContentType) *ProductContentTypeQuery {
	query := &ProductContentTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pct.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productcontenttype.Table, productcontenttype.FieldID, id),
			sqlgraph.To(productcontenttype.Table, productcontenttype.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, productcontenttype.ChildProductContentTypesTable, productcontenttype.ChildProductContentTypesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pct.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProductContentTypeClient) Hooks() []Hook {
	return c.hooks.ProductContentType
}

// ProductFeatureClient is a client for the ProductFeature schema.
type ProductFeatureClient struct {
	config
}

// NewProductFeatureClient returns a client for the ProductFeature from the given config.
func NewProductFeatureClient(c config) *ProductFeatureClient {
	return &ProductFeatureClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `productfeature.Hooks(f(g(h())))`.
func (c *ProductFeatureClient) Use(hooks ...Hook) {
	c.hooks.ProductFeature = append(c.hooks.ProductFeature, hooks...)
}

// Create returns a create builder for ProductFeature.
func (c *ProductFeatureClient) Create() *ProductFeatureCreate {
	mutation := newProductFeatureMutation(c.config, OpCreate)
	return &ProductFeatureCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProductFeature entities.
func (c *ProductFeatureClient) CreateBulk(builders ...*ProductFeatureCreate) *ProductFeatureCreateBulk {
	return &ProductFeatureCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProductFeature.
func (c *ProductFeatureClient) Update() *ProductFeatureUpdate {
	mutation := newProductFeatureMutation(c.config, OpUpdate)
	return &ProductFeatureUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProductFeatureClient) UpdateOne(pf *ProductFeature) *ProductFeatureUpdateOne {
	mutation := newProductFeatureMutation(c.config, OpUpdateOne, withProductFeature(pf))
	return &ProductFeatureUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProductFeatureClient) UpdateOneID(id int) *ProductFeatureUpdateOne {
	mutation := newProductFeatureMutation(c.config, OpUpdateOne, withProductFeatureID(id))
	return &ProductFeatureUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProductFeature.
func (c *ProductFeatureClient) Delete() *ProductFeatureDelete {
	mutation := newProductFeatureMutation(c.config, OpDelete)
	return &ProductFeatureDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ProductFeatureClient) DeleteOne(pf *ProductFeature) *ProductFeatureDeleteOne {
	return c.DeleteOneID(pf.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ProductFeatureClient) DeleteOneID(id int) *ProductFeatureDeleteOne {
	builder := c.Delete().Where(productfeature.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProductFeatureDeleteOne{builder}
}

// Query returns a query builder for ProductFeature.
func (c *ProductFeatureClient) Query() *ProductFeatureQuery {
	return &ProductFeatureQuery{
		config: c.config,
	}
}

// Get returns a ProductFeature entity by its id.
func (c *ProductFeatureClient) Get(ctx context.Context, id int) (*ProductFeature, error) {
	return c.Query().Where(productfeature.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProductFeatureClient) GetX(ctx context.Context, id int) *ProductFeature {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProductFeatureCategory queries the product_feature_category edge of a ProductFeature.
func (c *ProductFeatureClient) QueryProductFeatureCategory(pf *ProductFeature) *ProductFeatureCategoryQuery {
	query := &ProductFeatureCategoryQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pf.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productfeature.Table, productfeature.FieldID, id),
			sqlgraph.To(productfeaturecategory.Table, productfeaturecategory.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, productfeature.ProductFeatureCategoryTable, productfeature.ProductFeatureCategoryColumn),
		)
		fromV = sqlgraph.Neighbors(pf.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProductFeatureType queries the product_feature_type edge of a ProductFeature.
func (c *ProductFeatureClient) QueryProductFeatureType(pf *ProductFeature) *ProductFeatureTypeQuery {
	query := &ProductFeatureTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pf.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productfeature.Table, productfeature.FieldID, id),
			sqlgraph.To(productfeaturetype.Table, productfeaturetype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, productfeature.ProductFeatureTypeTable, productfeature.ProductFeatureTypeColumn),
		)
		fromV = sqlgraph.Neighbors(pf.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProductFeatureClient) Hooks() []Hook {
	return c.hooks.ProductFeature
}

// ProductFeatureApplTypeClient is a client for the ProductFeatureApplType schema.
type ProductFeatureApplTypeClient struct {
	config
}

// NewProductFeatureApplTypeClient returns a client for the ProductFeatureApplType from the given config.
func NewProductFeatureApplTypeClient(c config) *ProductFeatureApplTypeClient {
	return &ProductFeatureApplTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `productfeatureappltype.Hooks(f(g(h())))`.
func (c *ProductFeatureApplTypeClient) Use(hooks ...Hook) {
	c.hooks.ProductFeatureApplType = append(c.hooks.ProductFeatureApplType, hooks...)
}

// Create returns a create builder for ProductFeatureApplType.
func (c *ProductFeatureApplTypeClient) Create() *ProductFeatureApplTypeCreate {
	mutation := newProductFeatureApplTypeMutation(c.config, OpCreate)
	return &ProductFeatureApplTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProductFeatureApplType entities.
func (c *ProductFeatureApplTypeClient) CreateBulk(builders ...*ProductFeatureApplTypeCreate) *ProductFeatureApplTypeCreateBulk {
	return &ProductFeatureApplTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProductFeatureApplType.
func (c *ProductFeatureApplTypeClient) Update() *ProductFeatureApplTypeUpdate {
	mutation := newProductFeatureApplTypeMutation(c.config, OpUpdate)
	return &ProductFeatureApplTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProductFeatureApplTypeClient) UpdateOne(pfat *ProductFeatureApplType) *ProductFeatureApplTypeUpdateOne {
	mutation := newProductFeatureApplTypeMutation(c.config, OpUpdateOne, withProductFeatureApplType(pfat))
	return &ProductFeatureApplTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProductFeatureApplTypeClient) UpdateOneID(id int) *ProductFeatureApplTypeUpdateOne {
	mutation := newProductFeatureApplTypeMutation(c.config, OpUpdateOne, withProductFeatureApplTypeID(id))
	return &ProductFeatureApplTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProductFeatureApplType.
func (c *ProductFeatureApplTypeClient) Delete() *ProductFeatureApplTypeDelete {
	mutation := newProductFeatureApplTypeMutation(c.config, OpDelete)
	return &ProductFeatureApplTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ProductFeatureApplTypeClient) DeleteOne(pfat *ProductFeatureApplType) *ProductFeatureApplTypeDeleteOne {
	return c.DeleteOneID(pfat.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ProductFeatureApplTypeClient) DeleteOneID(id int) *ProductFeatureApplTypeDeleteOne {
	builder := c.Delete().Where(productfeatureappltype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProductFeatureApplTypeDeleteOne{builder}
}

// Query returns a query builder for ProductFeatureApplType.
func (c *ProductFeatureApplTypeClient) Query() *ProductFeatureApplTypeQuery {
	return &ProductFeatureApplTypeQuery{
		config: c.config,
	}
}

// Get returns a ProductFeatureApplType entity by its id.
func (c *ProductFeatureApplTypeClient) Get(ctx context.Context, id int) (*ProductFeatureApplType, error) {
	return c.Query().Where(productfeatureappltype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProductFeatureApplTypeClient) GetX(ctx context.Context, id int) *ProductFeatureApplType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryParent queries the parent edge of a ProductFeatureApplType.
func (c *ProductFeatureApplTypeClient) QueryParent(pfat *ProductFeatureApplType) *ProductFeatureApplTypeQuery {
	query := &ProductFeatureApplTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pfat.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productfeatureappltype.Table, productfeatureappltype.FieldID, id),
			sqlgraph.To(productfeatureappltype.Table, productfeatureappltype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, productfeatureappltype.ParentTable, productfeatureappltype.ParentColumn),
		)
		fromV = sqlgraph.Neighbors(pfat.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildren queries the children edge of a ProductFeatureApplType.
func (c *ProductFeatureApplTypeClient) QueryChildren(pfat *ProductFeatureApplType) *ProductFeatureApplTypeQuery {
	query := &ProductFeatureApplTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pfat.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productfeatureappltype.Table, productfeatureappltype.FieldID, id),
			sqlgraph.To(productfeatureappltype.Table, productfeatureappltype.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, productfeatureappltype.ChildrenTable, productfeatureappltype.ChildrenColumn),
		)
		fromV = sqlgraph.Neighbors(pfat.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildProductFeatureApplTypes queries the child_product_feature_appl_types edge of a ProductFeatureApplType.
func (c *ProductFeatureApplTypeClient) QueryChildProductFeatureApplTypes(pfat *ProductFeatureApplType) *ProductFeatureApplTypeQuery {
	query := &ProductFeatureApplTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pfat.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productfeatureappltype.Table, productfeatureappltype.FieldID, id),
			sqlgraph.To(productfeatureappltype.Table, productfeatureappltype.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, productfeatureappltype.ChildProductFeatureApplTypesTable, productfeatureappltype.ChildProductFeatureApplTypesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pfat.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProductFeatureApplTypeClient) Hooks() []Hook {
	return c.hooks.ProductFeatureApplType
}

// ProductFeatureCategoryClient is a client for the ProductFeatureCategory schema.
type ProductFeatureCategoryClient struct {
	config
}

// NewProductFeatureCategoryClient returns a client for the ProductFeatureCategory from the given config.
func NewProductFeatureCategoryClient(c config) *ProductFeatureCategoryClient {
	return &ProductFeatureCategoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `productfeaturecategory.Hooks(f(g(h())))`.
func (c *ProductFeatureCategoryClient) Use(hooks ...Hook) {
	c.hooks.ProductFeatureCategory = append(c.hooks.ProductFeatureCategory, hooks...)
}

// Create returns a create builder for ProductFeatureCategory.
func (c *ProductFeatureCategoryClient) Create() *ProductFeatureCategoryCreate {
	mutation := newProductFeatureCategoryMutation(c.config, OpCreate)
	return &ProductFeatureCategoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProductFeatureCategory entities.
func (c *ProductFeatureCategoryClient) CreateBulk(builders ...*ProductFeatureCategoryCreate) *ProductFeatureCategoryCreateBulk {
	return &ProductFeatureCategoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProductFeatureCategory.
func (c *ProductFeatureCategoryClient) Update() *ProductFeatureCategoryUpdate {
	mutation := newProductFeatureCategoryMutation(c.config, OpUpdate)
	return &ProductFeatureCategoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProductFeatureCategoryClient) UpdateOne(pfc *ProductFeatureCategory) *ProductFeatureCategoryUpdateOne {
	mutation := newProductFeatureCategoryMutation(c.config, OpUpdateOne, withProductFeatureCategory(pfc))
	return &ProductFeatureCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProductFeatureCategoryClient) UpdateOneID(id int) *ProductFeatureCategoryUpdateOne {
	mutation := newProductFeatureCategoryMutation(c.config, OpUpdateOne, withProductFeatureCategoryID(id))
	return &ProductFeatureCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProductFeatureCategory.
func (c *ProductFeatureCategoryClient) Delete() *ProductFeatureCategoryDelete {
	mutation := newProductFeatureCategoryMutation(c.config, OpDelete)
	return &ProductFeatureCategoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ProductFeatureCategoryClient) DeleteOne(pfc *ProductFeatureCategory) *ProductFeatureCategoryDeleteOne {
	return c.DeleteOneID(pfc.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ProductFeatureCategoryClient) DeleteOneID(id int) *ProductFeatureCategoryDeleteOne {
	builder := c.Delete().Where(productfeaturecategory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProductFeatureCategoryDeleteOne{builder}
}

// Query returns a query builder for ProductFeatureCategory.
func (c *ProductFeatureCategoryClient) Query() *ProductFeatureCategoryQuery {
	return &ProductFeatureCategoryQuery{
		config: c.config,
	}
}

// Get returns a ProductFeatureCategory entity by its id.
func (c *ProductFeatureCategoryClient) Get(ctx context.Context, id int) (*ProductFeatureCategory, error) {
	return c.Query().Where(productfeaturecategory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProductFeatureCategoryClient) GetX(ctx context.Context, id int) *ProductFeatureCategory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryParent queries the parent edge of a ProductFeatureCategory.
func (c *ProductFeatureCategoryClient) QueryParent(pfc *ProductFeatureCategory) *ProductFeatureCategoryQuery {
	query := &ProductFeatureCategoryQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pfc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productfeaturecategory.Table, productfeaturecategory.FieldID, id),
			sqlgraph.To(productfeaturecategory.Table, productfeaturecategory.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, productfeaturecategory.ParentTable, productfeaturecategory.ParentColumn),
		)
		fromV = sqlgraph.Neighbors(pfc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildren queries the children edge of a ProductFeatureCategory.
func (c *ProductFeatureCategoryClient) QueryChildren(pfc *ProductFeatureCategory) *ProductFeatureCategoryQuery {
	query := &ProductFeatureCategoryQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pfc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productfeaturecategory.Table, productfeaturecategory.FieldID, id),
			sqlgraph.To(productfeaturecategory.Table, productfeaturecategory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, productfeaturecategory.ChildrenTable, productfeaturecategory.ChildrenColumn),
		)
		fromV = sqlgraph.Neighbors(pfc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProductFeatures queries the product_features edge of a ProductFeatureCategory.
func (c *ProductFeatureCategoryClient) QueryProductFeatures(pfc *ProductFeatureCategory) *ProductFeatureQuery {
	query := &ProductFeatureQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pfc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productfeaturecategory.Table, productfeaturecategory.FieldID, id),
			sqlgraph.To(productfeature.Table, productfeature.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, productfeaturecategory.ProductFeaturesTable, productfeaturecategory.ProductFeaturesColumn),
		)
		fromV = sqlgraph.Neighbors(pfc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildProductFeatureCategories queries the child_product_feature_categories edge of a ProductFeatureCategory.
func (c *ProductFeatureCategoryClient) QueryChildProductFeatureCategories(pfc *ProductFeatureCategory) *ProductFeatureCategoryQuery {
	query := &ProductFeatureCategoryQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pfc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productfeaturecategory.Table, productfeaturecategory.FieldID, id),
			sqlgraph.To(productfeaturecategory.Table, productfeaturecategory.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, productfeaturecategory.ChildProductFeatureCategoriesTable, productfeaturecategory.ChildProductFeatureCategoriesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pfc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProductFeatureCategoryClient) Hooks() []Hook {
	return c.hooks.ProductFeatureCategory
}

// ProductFeatureIactnTypeClient is a client for the ProductFeatureIactnType schema.
type ProductFeatureIactnTypeClient struct {
	config
}

// NewProductFeatureIactnTypeClient returns a client for the ProductFeatureIactnType from the given config.
func NewProductFeatureIactnTypeClient(c config) *ProductFeatureIactnTypeClient {
	return &ProductFeatureIactnTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `productfeatureiactntype.Hooks(f(g(h())))`.
func (c *ProductFeatureIactnTypeClient) Use(hooks ...Hook) {
	c.hooks.ProductFeatureIactnType = append(c.hooks.ProductFeatureIactnType, hooks...)
}

// Create returns a create builder for ProductFeatureIactnType.
func (c *ProductFeatureIactnTypeClient) Create() *ProductFeatureIactnTypeCreate {
	mutation := newProductFeatureIactnTypeMutation(c.config, OpCreate)
	return &ProductFeatureIactnTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProductFeatureIactnType entities.
func (c *ProductFeatureIactnTypeClient) CreateBulk(builders ...*ProductFeatureIactnTypeCreate) *ProductFeatureIactnTypeCreateBulk {
	return &ProductFeatureIactnTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProductFeatureIactnType.
func (c *ProductFeatureIactnTypeClient) Update() *ProductFeatureIactnTypeUpdate {
	mutation := newProductFeatureIactnTypeMutation(c.config, OpUpdate)
	return &ProductFeatureIactnTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProductFeatureIactnTypeClient) UpdateOne(pfit *ProductFeatureIactnType) *ProductFeatureIactnTypeUpdateOne {
	mutation := newProductFeatureIactnTypeMutation(c.config, OpUpdateOne, withProductFeatureIactnType(pfit))
	return &ProductFeatureIactnTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProductFeatureIactnTypeClient) UpdateOneID(id int) *ProductFeatureIactnTypeUpdateOne {
	mutation := newProductFeatureIactnTypeMutation(c.config, OpUpdateOne, withProductFeatureIactnTypeID(id))
	return &ProductFeatureIactnTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProductFeatureIactnType.
func (c *ProductFeatureIactnTypeClient) Delete() *ProductFeatureIactnTypeDelete {
	mutation := newProductFeatureIactnTypeMutation(c.config, OpDelete)
	return &ProductFeatureIactnTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ProductFeatureIactnTypeClient) DeleteOne(pfit *ProductFeatureIactnType) *ProductFeatureIactnTypeDeleteOne {
	return c.DeleteOneID(pfit.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ProductFeatureIactnTypeClient) DeleteOneID(id int) *ProductFeatureIactnTypeDeleteOne {
	builder := c.Delete().Where(productfeatureiactntype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProductFeatureIactnTypeDeleteOne{builder}
}

// Query returns a query builder for ProductFeatureIactnType.
func (c *ProductFeatureIactnTypeClient) Query() *ProductFeatureIactnTypeQuery {
	return &ProductFeatureIactnTypeQuery{
		config: c.config,
	}
}

// Get returns a ProductFeatureIactnType entity by its id.
func (c *ProductFeatureIactnTypeClient) Get(ctx context.Context, id int) (*ProductFeatureIactnType, error) {
	return c.Query().Where(productfeatureiactntype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProductFeatureIactnTypeClient) GetX(ctx context.Context, id int) *ProductFeatureIactnType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryParent queries the parent edge of a ProductFeatureIactnType.
func (c *ProductFeatureIactnTypeClient) QueryParent(pfit *ProductFeatureIactnType) *ProductFeatureIactnTypeQuery {
	query := &ProductFeatureIactnTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pfit.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productfeatureiactntype.Table, productfeatureiactntype.FieldID, id),
			sqlgraph.To(productfeatureiactntype.Table, productfeatureiactntype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, productfeatureiactntype.ParentTable, productfeatureiactntype.ParentColumn),
		)
		fromV = sqlgraph.Neighbors(pfit.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildren queries the children edge of a ProductFeatureIactnType.
func (c *ProductFeatureIactnTypeClient) QueryChildren(pfit *ProductFeatureIactnType) *ProductFeatureIactnTypeQuery {
	query := &ProductFeatureIactnTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pfit.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productfeatureiactntype.Table, productfeatureiactntype.FieldID, id),
			sqlgraph.To(productfeatureiactntype.Table, productfeatureiactntype.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, productfeatureiactntype.ChildrenTable, productfeatureiactntype.ChildrenColumn),
		)
		fromV = sqlgraph.Neighbors(pfit.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildProductFeatureIactnTypes queries the child_product_feature_iactn_types edge of a ProductFeatureIactnType.
func (c *ProductFeatureIactnTypeClient) QueryChildProductFeatureIactnTypes(pfit *ProductFeatureIactnType) *ProductFeatureIactnTypeQuery {
	query := &ProductFeatureIactnTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pfit.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productfeatureiactntype.Table, productfeatureiactntype.FieldID, id),
			sqlgraph.To(productfeatureiactntype.Table, productfeatureiactntype.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, productfeatureiactntype.ChildProductFeatureIactnTypesTable, productfeatureiactntype.ChildProductFeatureIactnTypesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pfit.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProductFeatureIactnTypeClient) Hooks() []Hook {
	return c.hooks.ProductFeatureIactnType
}

// ProductFeatureTypeClient is a client for the ProductFeatureType schema.
type ProductFeatureTypeClient struct {
	config
}

// NewProductFeatureTypeClient returns a client for the ProductFeatureType from the given config.
func NewProductFeatureTypeClient(c config) *ProductFeatureTypeClient {
	return &ProductFeatureTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `productfeaturetype.Hooks(f(g(h())))`.
func (c *ProductFeatureTypeClient) Use(hooks ...Hook) {
	c.hooks.ProductFeatureType = append(c.hooks.ProductFeatureType, hooks...)
}

// Create returns a create builder for ProductFeatureType.
func (c *ProductFeatureTypeClient) Create() *ProductFeatureTypeCreate {
	mutation := newProductFeatureTypeMutation(c.config, OpCreate)
	return &ProductFeatureTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProductFeatureType entities.
func (c *ProductFeatureTypeClient) CreateBulk(builders ...*ProductFeatureTypeCreate) *ProductFeatureTypeCreateBulk {
	return &ProductFeatureTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProductFeatureType.
func (c *ProductFeatureTypeClient) Update() *ProductFeatureTypeUpdate {
	mutation := newProductFeatureTypeMutation(c.config, OpUpdate)
	return &ProductFeatureTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProductFeatureTypeClient) UpdateOne(pft *ProductFeatureType) *ProductFeatureTypeUpdateOne {
	mutation := newProductFeatureTypeMutation(c.config, OpUpdateOne, withProductFeatureType(pft))
	return &ProductFeatureTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProductFeatureTypeClient) UpdateOneID(id int) *ProductFeatureTypeUpdateOne {
	mutation := newProductFeatureTypeMutation(c.config, OpUpdateOne, withProductFeatureTypeID(id))
	return &ProductFeatureTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProductFeatureType.
func (c *ProductFeatureTypeClient) Delete() *ProductFeatureTypeDelete {
	mutation := newProductFeatureTypeMutation(c.config, OpDelete)
	return &ProductFeatureTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ProductFeatureTypeClient) DeleteOne(pft *ProductFeatureType) *ProductFeatureTypeDeleteOne {
	return c.DeleteOneID(pft.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ProductFeatureTypeClient) DeleteOneID(id int) *ProductFeatureTypeDeleteOne {
	builder := c.Delete().Where(productfeaturetype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProductFeatureTypeDeleteOne{builder}
}

// Query returns a query builder for ProductFeatureType.
func (c *ProductFeatureTypeClient) Query() *ProductFeatureTypeQuery {
	return &ProductFeatureTypeQuery{
		config: c.config,
	}
}

// Get returns a ProductFeatureType entity by its id.
func (c *ProductFeatureTypeClient) Get(ctx context.Context, id int) (*ProductFeatureType, error) {
	return c.Query().Where(productfeaturetype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProductFeatureTypeClient) GetX(ctx context.Context, id int) *ProductFeatureType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryParent queries the parent edge of a ProductFeatureType.
func (c *ProductFeatureTypeClient) QueryParent(pft *ProductFeatureType) *ProductFeatureTypeQuery {
	query := &ProductFeatureTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pft.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productfeaturetype.Table, productfeaturetype.FieldID, id),
			sqlgraph.To(productfeaturetype.Table, productfeaturetype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, productfeaturetype.ParentTable, productfeaturetype.ParentColumn),
		)
		fromV = sqlgraph.Neighbors(pft.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildren queries the children edge of a ProductFeatureType.
func (c *ProductFeatureTypeClient) QueryChildren(pft *ProductFeatureType) *ProductFeatureTypeQuery {
	query := &ProductFeatureTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pft.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productfeaturetype.Table, productfeaturetype.FieldID, id),
			sqlgraph.To(productfeaturetype.Table, productfeaturetype.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, productfeaturetype.ChildrenTable, productfeaturetype.ChildrenColumn),
		)
		fromV = sqlgraph.Neighbors(pft.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProductFeatures queries the product_features edge of a ProductFeatureType.
func (c *ProductFeatureTypeClient) QueryProductFeatures(pft *ProductFeatureType) *ProductFeatureQuery {
	query := &ProductFeatureQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pft.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productfeaturetype.Table, productfeaturetype.FieldID, id),
			sqlgraph.To(productfeature.Table, productfeature.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, productfeaturetype.ProductFeaturesTable, productfeaturetype.ProductFeaturesColumn),
		)
		fromV = sqlgraph.Neighbors(pft.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildProductFeatureTypes queries the child_product_feature_types edge of a ProductFeatureType.
func (c *ProductFeatureTypeClient) QueryChildProductFeatureTypes(pft *ProductFeatureType) *ProductFeatureTypeQuery {
	query := &ProductFeatureTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pft.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productfeaturetype.Table, productfeaturetype.FieldID, id),
			sqlgraph.To(productfeaturetype.Table, productfeaturetype.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, productfeaturetype.ChildProductFeatureTypesTable, productfeaturetype.ChildProductFeatureTypesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pft.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProductFeatureTypeClient) Hooks() []Hook {
	return c.hooks.ProductFeatureType
}

// ProductMaintTypeClient is a client for the ProductMaintType schema.
type ProductMaintTypeClient struct {
	config
}

// NewProductMaintTypeClient returns a client for the ProductMaintType from the given config.
func NewProductMaintTypeClient(c config) *ProductMaintTypeClient {
	return &ProductMaintTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `productmainttype.Hooks(f(g(h())))`.
func (c *ProductMaintTypeClient) Use(hooks ...Hook) {
	c.hooks.ProductMaintType = append(c.hooks.ProductMaintType, hooks...)
}

// Create returns a create builder for ProductMaintType.
func (c *ProductMaintTypeClient) Create() *ProductMaintTypeCreate {
	mutation := newProductMaintTypeMutation(c.config, OpCreate)
	return &ProductMaintTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProductMaintType entities.
func (c *ProductMaintTypeClient) CreateBulk(builders ...*ProductMaintTypeCreate) *ProductMaintTypeCreateBulk {
	return &ProductMaintTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProductMaintType.
func (c *ProductMaintTypeClient) Update() *ProductMaintTypeUpdate {
	mutation := newProductMaintTypeMutation(c.config, OpUpdate)
	return &ProductMaintTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProductMaintTypeClient) UpdateOne(pmt *ProductMaintType) *ProductMaintTypeUpdateOne {
	mutation := newProductMaintTypeMutation(c.config, OpUpdateOne, withProductMaintType(pmt))
	return &ProductMaintTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProductMaintTypeClient) UpdateOneID(id int) *ProductMaintTypeUpdateOne {
	mutation := newProductMaintTypeMutation(c.config, OpUpdateOne, withProductMaintTypeID(id))
	return &ProductMaintTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProductMaintType.
func (c *ProductMaintTypeClient) Delete() *ProductMaintTypeDelete {
	mutation := newProductMaintTypeMutation(c.config, OpDelete)
	return &ProductMaintTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ProductMaintTypeClient) DeleteOne(pmt *ProductMaintType) *ProductMaintTypeDeleteOne {
	return c.DeleteOneID(pmt.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ProductMaintTypeClient) DeleteOneID(id int) *ProductMaintTypeDeleteOne {
	builder := c.Delete().Where(productmainttype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProductMaintTypeDeleteOne{builder}
}

// Query returns a query builder for ProductMaintType.
func (c *ProductMaintTypeClient) Query() *ProductMaintTypeQuery {
	return &ProductMaintTypeQuery{
		config: c.config,
	}
}

// Get returns a ProductMaintType entity by its id.
func (c *ProductMaintTypeClient) Get(ctx context.Context, id int) (*ProductMaintType, error) {
	return c.Query().Where(productmainttype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProductMaintTypeClient) GetX(ctx context.Context, id int) *ProductMaintType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryParent queries the parent edge of a ProductMaintType.
func (c *ProductMaintTypeClient) QueryParent(pmt *ProductMaintType) *ProductMaintTypeQuery {
	query := &ProductMaintTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pmt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productmainttype.Table, productmainttype.FieldID, id),
			sqlgraph.To(productmainttype.Table, productmainttype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, productmainttype.ParentTable, productmainttype.ParentColumn),
		)
		fromV = sqlgraph.Neighbors(pmt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildren queries the children edge of a ProductMaintType.
func (c *ProductMaintTypeClient) QueryChildren(pmt *ProductMaintType) *ProductMaintTypeQuery {
	query := &ProductMaintTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pmt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productmainttype.Table, productmainttype.FieldID, id),
			sqlgraph.To(productmainttype.Table, productmainttype.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, productmainttype.ChildrenTable, productmainttype.ChildrenColumn),
		)
		fromV = sqlgraph.Neighbors(pmt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildProductMaintTypes queries the child_product_maint_types edge of a ProductMaintType.
func (c *ProductMaintTypeClient) QueryChildProductMaintTypes(pmt *ProductMaintType) *ProductMaintTypeQuery {
	query := &ProductMaintTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pmt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productmainttype.Table, productmainttype.FieldID, id),
			sqlgraph.To(productmainttype.Table, productmainttype.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, productmainttype.ChildProductMaintTypesTable, productmainttype.ChildProductMaintTypesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pmt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProductMaintTypeClient) Hooks() []Hook {
	return c.hooks.ProductMaintType
}

// ProductMeterTypeClient is a client for the ProductMeterType schema.
type ProductMeterTypeClient struct {
	config
}

// NewProductMeterTypeClient returns a client for the ProductMeterType from the given config.
func NewProductMeterTypeClient(c config) *ProductMeterTypeClient {
	return &ProductMeterTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `productmetertype.Hooks(f(g(h())))`.
func (c *ProductMeterTypeClient) Use(hooks ...Hook) {
	c.hooks.ProductMeterType = append(c.hooks.ProductMeterType, hooks...)
}

// Create returns a create builder for ProductMeterType.
func (c *ProductMeterTypeClient) Create() *ProductMeterTypeCreate {
	mutation := newProductMeterTypeMutation(c.config, OpCreate)
	return &ProductMeterTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProductMeterType entities.
func (c *ProductMeterTypeClient) CreateBulk(builders ...*ProductMeterTypeCreate) *ProductMeterTypeCreateBulk {
	return &ProductMeterTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProductMeterType.
func (c *ProductMeterTypeClient) Update() *ProductMeterTypeUpdate {
	mutation := newProductMeterTypeMutation(c.config, OpUpdate)
	return &ProductMeterTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProductMeterTypeClient) UpdateOne(pmt *ProductMeterType) *ProductMeterTypeUpdateOne {
	mutation := newProductMeterTypeMutation(c.config, OpUpdateOne, withProductMeterType(pmt))
	return &ProductMeterTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProductMeterTypeClient) UpdateOneID(id int) *ProductMeterTypeUpdateOne {
	mutation := newProductMeterTypeMutation(c.config, OpUpdateOne, withProductMeterTypeID(id))
	return &ProductMeterTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProductMeterType.
func (c *ProductMeterTypeClient) Delete() *ProductMeterTypeDelete {
	mutation := newProductMeterTypeMutation(c.config, OpDelete)
	return &ProductMeterTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ProductMeterTypeClient) DeleteOne(pmt *ProductMeterType) *ProductMeterTypeDeleteOne {
	return c.DeleteOneID(pmt.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ProductMeterTypeClient) DeleteOneID(id int) *ProductMeterTypeDeleteOne {
	builder := c.Delete().Where(productmetertype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProductMeterTypeDeleteOne{builder}
}

// Query returns a query builder for ProductMeterType.
func (c *ProductMeterTypeClient) Query() *ProductMeterTypeQuery {
	return &ProductMeterTypeQuery{
		config: c.config,
	}
}

// Get returns a ProductMeterType entity by its id.
func (c *ProductMeterTypeClient) Get(ctx context.Context, id int) (*ProductMeterType, error) {
	return c.Query().Where(productmetertype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProductMeterTypeClient) GetX(ctx context.Context, id int) *ProductMeterType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ProductMeterTypeClient) Hooks() []Hook {
	return c.hooks.ProductMeterType
}

// ProductPriceClient is a client for the ProductPrice schema.
type ProductPriceClient struct {
	config
}

// NewProductPriceClient returns a client for the ProductPrice from the given config.
func NewProductPriceClient(c config) *ProductPriceClient {
	return &ProductPriceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `productprice.Hooks(f(g(h())))`.
func (c *ProductPriceClient) Use(hooks ...Hook) {
	c.hooks.ProductPrice = append(c.hooks.ProductPrice, hooks...)
}

// Create returns a create builder for ProductPrice.
func (c *ProductPriceClient) Create() *ProductPriceCreate {
	mutation := newProductPriceMutation(c.config, OpCreate)
	return &ProductPriceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProductPrice entities.
func (c *ProductPriceClient) CreateBulk(builders ...*ProductPriceCreate) *ProductPriceCreateBulk {
	return &ProductPriceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProductPrice.
func (c *ProductPriceClient) Update() *ProductPriceUpdate {
	mutation := newProductPriceMutation(c.config, OpUpdate)
	return &ProductPriceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProductPriceClient) UpdateOne(pp *ProductPrice) *ProductPriceUpdateOne {
	mutation := newProductPriceMutation(c.config, OpUpdateOne, withProductPrice(pp))
	return &ProductPriceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProductPriceClient) UpdateOneID(id int) *ProductPriceUpdateOne {
	mutation := newProductPriceMutation(c.config, OpUpdateOne, withProductPriceID(id))
	return &ProductPriceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProductPrice.
func (c *ProductPriceClient) Delete() *ProductPriceDelete {
	mutation := newProductPriceMutation(c.config, OpDelete)
	return &ProductPriceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ProductPriceClient) DeleteOne(pp *ProductPrice) *ProductPriceDeleteOne {
	return c.DeleteOneID(pp.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ProductPriceClient) DeleteOneID(id int) *ProductPriceDeleteOne {
	builder := c.Delete().Where(productprice.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProductPriceDeleteOne{builder}
}

// Query returns a query builder for ProductPrice.
func (c *ProductPriceClient) Query() *ProductPriceQuery {
	return &ProductPriceQuery{
		config: c.config,
	}
}

// Get returns a ProductPrice entity by its id.
func (c *ProductPriceClient) Get(ctx context.Context, id int) (*ProductPrice, error) {
	return c.Query().Where(productprice.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProductPriceClient) GetX(ctx context.Context, id int) *ProductPrice {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProduct queries the product edge of a ProductPrice.
func (c *ProductPriceClient) QueryProduct(pp *ProductPrice) *ProductQuery {
	query := &ProductQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productprice.Table, productprice.FieldID, id),
			sqlgraph.To(product.Table, product.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, productprice.ProductTable, productprice.ProductColumn),
		)
		fromV = sqlgraph.Neighbors(pp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProductPriceType queries the product_price_type edge of a ProductPrice.
func (c *ProductPriceClient) QueryProductPriceType(pp *ProductPrice) *ProductPriceTypeQuery {
	query := &ProductPriceTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productprice.Table, productprice.FieldID, id),
			sqlgraph.To(productpricetype.Table, productpricetype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, productprice.ProductPriceTypeTable, productprice.ProductPriceTypeColumn),
		)
		fromV = sqlgraph.Neighbors(pp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProductPricePurpose queries the product_price_purpose edge of a ProductPrice.
func (c *ProductPriceClient) QueryProductPricePurpose(pp *ProductPrice) *ProductPricePurposeQuery {
	query := &ProductPricePurposeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productprice.Table, productprice.FieldID, id),
			sqlgraph.To(productpricepurpose.Table, productpricepurpose.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, productprice.ProductPricePurposeTable, productprice.ProductPricePurposeColumn),
		)
		fromV = sqlgraph.Neighbors(pp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProductStoreGroup queries the product_store_group edge of a ProductPrice.
func (c *ProductPriceClient) QueryProductStoreGroup(pp *ProductPrice) *ProductStoreGroupQuery {
	query := &ProductStoreGroupQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productprice.Table, productprice.FieldID, id),
			sqlgraph.To(productstoregroup.Table, productstoregroup.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, productprice.ProductStoreGroupTable, productprice.ProductStoreGroupColumn),
		)
		fromV = sqlgraph.Neighbors(pp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCustomMethod queries the custom_method edge of a ProductPrice.
func (c *ProductPriceClient) QueryCustomMethod(pp *ProductPrice) *CustomMethodQuery {
	query := &CustomMethodQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productprice.Table, productprice.FieldID, id),
			sqlgraph.To(custommethod.Table, custommethod.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, productprice.CustomMethodTable, productprice.CustomMethodColumn),
		)
		fromV = sqlgraph.Neighbors(pp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProductPriceClient) Hooks() []Hook {
	return c.hooks.ProductPrice
}

// ProductPriceActionTypeClient is a client for the ProductPriceActionType schema.
type ProductPriceActionTypeClient struct {
	config
}

// NewProductPriceActionTypeClient returns a client for the ProductPriceActionType from the given config.
func NewProductPriceActionTypeClient(c config) *ProductPriceActionTypeClient {
	return &ProductPriceActionTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `productpriceactiontype.Hooks(f(g(h())))`.
func (c *ProductPriceActionTypeClient) Use(hooks ...Hook) {
	c.hooks.ProductPriceActionType = append(c.hooks.ProductPriceActionType, hooks...)
}

// Create returns a create builder for ProductPriceActionType.
func (c *ProductPriceActionTypeClient) Create() *ProductPriceActionTypeCreate {
	mutation := newProductPriceActionTypeMutation(c.config, OpCreate)
	return &ProductPriceActionTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProductPriceActionType entities.
func (c *ProductPriceActionTypeClient) CreateBulk(builders ...*ProductPriceActionTypeCreate) *ProductPriceActionTypeCreateBulk {
	return &ProductPriceActionTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProductPriceActionType.
func (c *ProductPriceActionTypeClient) Update() *ProductPriceActionTypeUpdate {
	mutation := newProductPriceActionTypeMutation(c.config, OpUpdate)
	return &ProductPriceActionTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProductPriceActionTypeClient) UpdateOne(ppat *ProductPriceActionType) *ProductPriceActionTypeUpdateOne {
	mutation := newProductPriceActionTypeMutation(c.config, OpUpdateOne, withProductPriceActionType(ppat))
	return &ProductPriceActionTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProductPriceActionTypeClient) UpdateOneID(id int) *ProductPriceActionTypeUpdateOne {
	mutation := newProductPriceActionTypeMutation(c.config, OpUpdateOne, withProductPriceActionTypeID(id))
	return &ProductPriceActionTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProductPriceActionType.
func (c *ProductPriceActionTypeClient) Delete() *ProductPriceActionTypeDelete {
	mutation := newProductPriceActionTypeMutation(c.config, OpDelete)
	return &ProductPriceActionTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ProductPriceActionTypeClient) DeleteOne(ppat *ProductPriceActionType) *ProductPriceActionTypeDeleteOne {
	return c.DeleteOneID(ppat.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ProductPriceActionTypeClient) DeleteOneID(id int) *ProductPriceActionTypeDeleteOne {
	builder := c.Delete().Where(productpriceactiontype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProductPriceActionTypeDeleteOne{builder}
}

// Query returns a query builder for ProductPriceActionType.
func (c *ProductPriceActionTypeClient) Query() *ProductPriceActionTypeQuery {
	return &ProductPriceActionTypeQuery{
		config: c.config,
	}
}

// Get returns a ProductPriceActionType entity by its id.
func (c *ProductPriceActionTypeClient) Get(ctx context.Context, id int) (*ProductPriceActionType, error) {
	return c.Query().Where(productpriceactiontype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProductPriceActionTypeClient) GetX(ctx context.Context, id int) *ProductPriceActionType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ProductPriceActionTypeClient) Hooks() []Hook {
	return c.hooks.ProductPriceActionType
}

// ProductPricePurposeClient is a client for the ProductPricePurpose schema.
type ProductPricePurposeClient struct {
	config
}

// NewProductPricePurposeClient returns a client for the ProductPricePurpose from the given config.
func NewProductPricePurposeClient(c config) *ProductPricePurposeClient {
	return &ProductPricePurposeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `productpricepurpose.Hooks(f(g(h())))`.
func (c *ProductPricePurposeClient) Use(hooks ...Hook) {
	c.hooks.ProductPricePurpose = append(c.hooks.ProductPricePurpose, hooks...)
}

// Create returns a create builder for ProductPricePurpose.
func (c *ProductPricePurposeClient) Create() *ProductPricePurposeCreate {
	mutation := newProductPricePurposeMutation(c.config, OpCreate)
	return &ProductPricePurposeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProductPricePurpose entities.
func (c *ProductPricePurposeClient) CreateBulk(builders ...*ProductPricePurposeCreate) *ProductPricePurposeCreateBulk {
	return &ProductPricePurposeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProductPricePurpose.
func (c *ProductPricePurposeClient) Update() *ProductPricePurposeUpdate {
	mutation := newProductPricePurposeMutation(c.config, OpUpdate)
	return &ProductPricePurposeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProductPricePurposeClient) UpdateOne(ppp *ProductPricePurpose) *ProductPricePurposeUpdateOne {
	mutation := newProductPricePurposeMutation(c.config, OpUpdateOne, withProductPricePurpose(ppp))
	return &ProductPricePurposeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProductPricePurposeClient) UpdateOneID(id int) *ProductPricePurposeUpdateOne {
	mutation := newProductPricePurposeMutation(c.config, OpUpdateOne, withProductPricePurposeID(id))
	return &ProductPricePurposeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProductPricePurpose.
func (c *ProductPricePurposeClient) Delete() *ProductPricePurposeDelete {
	mutation := newProductPricePurposeMutation(c.config, OpDelete)
	return &ProductPricePurposeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ProductPricePurposeClient) DeleteOne(ppp *ProductPricePurpose) *ProductPricePurposeDeleteOne {
	return c.DeleteOneID(ppp.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ProductPricePurposeClient) DeleteOneID(id int) *ProductPricePurposeDeleteOne {
	builder := c.Delete().Where(productpricepurpose.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProductPricePurposeDeleteOne{builder}
}

// Query returns a query builder for ProductPricePurpose.
func (c *ProductPricePurposeClient) Query() *ProductPricePurposeQuery {
	return &ProductPricePurposeQuery{
		config: c.config,
	}
}

// Get returns a ProductPricePurpose entity by its id.
func (c *ProductPricePurposeClient) Get(ctx context.Context, id int) (*ProductPricePurpose, error) {
	return c.Query().Where(productpricepurpose.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProductPricePurposeClient) GetX(ctx context.Context, id int) *ProductPricePurpose {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOrderPaymentPreferences queries the order_payment_preferences edge of a ProductPricePurpose.
func (c *ProductPricePurposeClient) QueryOrderPaymentPreferences(ppp *ProductPricePurpose) *OrderPaymentPreferenceQuery {
	query := &OrderPaymentPreferenceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ppp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productpricepurpose.Table, productpricepurpose.FieldID, id),
			sqlgraph.To(orderpaymentpreference.Table, orderpaymentpreference.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, productpricepurpose.OrderPaymentPreferencesTable, productpricepurpose.OrderPaymentPreferencesColumn),
		)
		fromV = sqlgraph.Neighbors(ppp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProductPrices queries the product_prices edge of a ProductPricePurpose.
func (c *ProductPricePurposeClient) QueryProductPrices(ppp *ProductPricePurpose) *ProductPriceQuery {
	query := &ProductPriceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ppp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productpricepurpose.Table, productpricepurpose.FieldID, id),
			sqlgraph.To(productprice.Table, productprice.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, productpricepurpose.ProductPricesTable, productpricepurpose.ProductPricesColumn),
		)
		fromV = sqlgraph.Neighbors(ppp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProductPricePurposeClient) Hooks() []Hook {
	return c.hooks.ProductPricePurpose
}

// ProductPriceTypeClient is a client for the ProductPriceType schema.
type ProductPriceTypeClient struct {
	config
}

// NewProductPriceTypeClient returns a client for the ProductPriceType from the given config.
func NewProductPriceTypeClient(c config) *ProductPriceTypeClient {
	return &ProductPriceTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `productpricetype.Hooks(f(g(h())))`.
func (c *ProductPriceTypeClient) Use(hooks ...Hook) {
	c.hooks.ProductPriceType = append(c.hooks.ProductPriceType, hooks...)
}

// Create returns a create builder for ProductPriceType.
func (c *ProductPriceTypeClient) Create() *ProductPriceTypeCreate {
	mutation := newProductPriceTypeMutation(c.config, OpCreate)
	return &ProductPriceTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProductPriceType entities.
func (c *ProductPriceTypeClient) CreateBulk(builders ...*ProductPriceTypeCreate) *ProductPriceTypeCreateBulk {
	return &ProductPriceTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProductPriceType.
func (c *ProductPriceTypeClient) Update() *ProductPriceTypeUpdate {
	mutation := newProductPriceTypeMutation(c.config, OpUpdate)
	return &ProductPriceTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProductPriceTypeClient) UpdateOne(ppt *ProductPriceType) *ProductPriceTypeUpdateOne {
	mutation := newProductPriceTypeMutation(c.config, OpUpdateOne, withProductPriceType(ppt))
	return &ProductPriceTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProductPriceTypeClient) UpdateOneID(id int) *ProductPriceTypeUpdateOne {
	mutation := newProductPriceTypeMutation(c.config, OpUpdateOne, withProductPriceTypeID(id))
	return &ProductPriceTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProductPriceType.
func (c *ProductPriceTypeClient) Delete() *ProductPriceTypeDelete {
	mutation := newProductPriceTypeMutation(c.config, OpDelete)
	return &ProductPriceTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ProductPriceTypeClient) DeleteOne(ppt *ProductPriceType) *ProductPriceTypeDeleteOne {
	return c.DeleteOneID(ppt.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ProductPriceTypeClient) DeleteOneID(id int) *ProductPriceTypeDeleteOne {
	builder := c.Delete().Where(productpricetype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProductPriceTypeDeleteOne{builder}
}

// Query returns a query builder for ProductPriceType.
func (c *ProductPriceTypeClient) Query() *ProductPriceTypeQuery {
	return &ProductPriceTypeQuery{
		config: c.config,
	}
}

// Get returns a ProductPriceType entity by its id.
func (c *ProductPriceTypeClient) Get(ctx context.Context, id int) (*ProductPriceType, error) {
	return c.Query().Where(productpricetype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProductPriceTypeClient) GetX(ctx context.Context, id int) *ProductPriceType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProductPrices queries the product_prices edge of a ProductPriceType.
func (c *ProductPriceTypeClient) QueryProductPrices(ppt *ProductPriceType) *ProductPriceQuery {
	query := &ProductPriceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ppt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productpricetype.Table, productpricetype.FieldID, id),
			sqlgraph.To(productprice.Table, productprice.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, productpricetype.ProductPricesTable, productpricetype.ProductPricesColumn),
		)
		fromV = sqlgraph.Neighbors(ppt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProductPriceTypeClient) Hooks() []Hook {
	return c.hooks.ProductPriceType
}

// ProductReviewClient is a client for the ProductReview schema.
type ProductReviewClient struct {
	config
}

// NewProductReviewClient returns a client for the ProductReview from the given config.
func NewProductReviewClient(c config) *ProductReviewClient {
	return &ProductReviewClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `productreview.Hooks(f(g(h())))`.
func (c *ProductReviewClient) Use(hooks ...Hook) {
	c.hooks.ProductReview = append(c.hooks.ProductReview, hooks...)
}

// Create returns a create builder for ProductReview.
func (c *ProductReviewClient) Create() *ProductReviewCreate {
	mutation := newProductReviewMutation(c.config, OpCreate)
	return &ProductReviewCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProductReview entities.
func (c *ProductReviewClient) CreateBulk(builders ...*ProductReviewCreate) *ProductReviewCreateBulk {
	return &ProductReviewCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProductReview.
func (c *ProductReviewClient) Update() *ProductReviewUpdate {
	mutation := newProductReviewMutation(c.config, OpUpdate)
	return &ProductReviewUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProductReviewClient) UpdateOne(pr *ProductReview) *ProductReviewUpdateOne {
	mutation := newProductReviewMutation(c.config, OpUpdateOne, withProductReview(pr))
	return &ProductReviewUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProductReviewClient) UpdateOneID(id int) *ProductReviewUpdateOne {
	mutation := newProductReviewMutation(c.config, OpUpdateOne, withProductReviewID(id))
	return &ProductReviewUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProductReview.
func (c *ProductReviewClient) Delete() *ProductReviewDelete {
	mutation := newProductReviewMutation(c.config, OpDelete)
	return &ProductReviewDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ProductReviewClient) DeleteOne(pr *ProductReview) *ProductReviewDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ProductReviewClient) DeleteOneID(id int) *ProductReviewDeleteOne {
	builder := c.Delete().Where(productreview.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProductReviewDeleteOne{builder}
}

// Query returns a query builder for ProductReview.
func (c *ProductReviewClient) Query() *ProductReviewQuery {
	return &ProductReviewQuery{
		config: c.config,
	}
}

// Get returns a ProductReview entity by its id.
func (c *ProductReviewClient) Get(ctx context.Context, id int) (*ProductReview, error) {
	return c.Query().Where(productreview.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProductReviewClient) GetX(ctx context.Context, id int) *ProductReview {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProductStore queries the product_store edge of a ProductReview.
func (c *ProductReviewClient) QueryProductStore(pr *ProductReview) *ProductStoreQuery {
	query := &ProductStoreQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productreview.Table, productreview.FieldID, id),
			sqlgraph.To(productstore.Table, productstore.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, productreview.ProductStoreTable, productreview.ProductStoreColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProduct queries the product edge of a ProductReview.
func (c *ProductReviewClient) QueryProduct(pr *ProductReview) *ProductQuery {
	query := &ProductQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productreview.Table, productreview.FieldID, id),
			sqlgraph.To(product.Table, product.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, productreview.ProductTable, productreview.ProductColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStatusItem queries the status_item edge of a ProductReview.
func (c *ProductReviewClient) QueryStatusItem(pr *ProductReview) *StatusItemQuery {
	query := &StatusItemQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productreview.Table, productreview.FieldID, id),
			sqlgraph.To(statusitem.Table, statusitem.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, productreview.StatusItemTable, productreview.StatusItemColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProductReviewClient) Hooks() []Hook {
	return c.hooks.ProductReview
}

// ProductStoreClient is a client for the ProductStore schema.
type ProductStoreClient struct {
	config
}

// NewProductStoreClient returns a client for the ProductStore from the given config.
func NewProductStoreClient(c config) *ProductStoreClient {
	return &ProductStoreClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `productstore.Hooks(f(g(h())))`.
func (c *ProductStoreClient) Use(hooks ...Hook) {
	c.hooks.ProductStore = append(c.hooks.ProductStore, hooks...)
}

// Create returns a create builder for ProductStore.
func (c *ProductStoreClient) Create() *ProductStoreCreate {
	mutation := newProductStoreMutation(c.config, OpCreate)
	return &ProductStoreCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProductStore entities.
func (c *ProductStoreClient) CreateBulk(builders ...*ProductStoreCreate) *ProductStoreCreateBulk {
	return &ProductStoreCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProductStore.
func (c *ProductStoreClient) Update() *ProductStoreUpdate {
	mutation := newProductStoreMutation(c.config, OpUpdate)
	return &ProductStoreUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProductStoreClient) UpdateOne(ps *ProductStore) *ProductStoreUpdateOne {
	mutation := newProductStoreMutation(c.config, OpUpdateOne, withProductStore(ps))
	return &ProductStoreUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProductStoreClient) UpdateOneID(id int) *ProductStoreUpdateOne {
	mutation := newProductStoreMutation(c.config, OpUpdateOne, withProductStoreID(id))
	return &ProductStoreUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProductStore.
func (c *ProductStoreClient) Delete() *ProductStoreDelete {
	mutation := newProductStoreMutation(c.config, OpDelete)
	return &ProductStoreDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ProductStoreClient) DeleteOne(ps *ProductStore) *ProductStoreDeleteOne {
	return c.DeleteOneID(ps.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ProductStoreClient) DeleteOneID(id int) *ProductStoreDeleteOne {
	builder := c.Delete().Where(productstore.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProductStoreDeleteOne{builder}
}

// Query returns a query builder for ProductStore.
func (c *ProductStoreClient) Query() *ProductStoreQuery {
	return &ProductStoreQuery{
		config: c.config,
	}
}

// Get returns a ProductStore entity by its id.
func (c *ProductStoreClient) Get(ctx context.Context, id int) (*ProductStore, error) {
	return c.Query().Where(productstore.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProductStoreClient) GetX(ctx context.Context, id int) *ProductStore {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPrimaryProductStoreGroup queries the primary_product_store_group edge of a ProductStore.
func (c *ProductStoreClient) QueryPrimaryProductStoreGroup(ps *ProductStore) *ProductStoreGroupQuery {
	query := &ProductStoreGroupQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ps.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productstore.Table, productstore.FieldID, id),
			sqlgraph.To(productstoregroup.Table, productstoregroup.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, productstore.PrimaryProductStoreGroupTable, productstore.PrimaryProductStoreGroupColumn),
		)
		fromV = sqlgraph.Neighbors(ps.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryReserveOrderEnumeration queries the reserve_order_enumeration edge of a ProductStore.
func (c *ProductStoreClient) QueryReserveOrderEnumeration(ps *ProductStore) *EnumerationQuery {
	query := &EnumerationQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ps.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productstore.Table, productstore.FieldID, id),
			sqlgraph.To(enumeration.Table, enumeration.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, productstore.ReserveOrderEnumerationTable, productstore.ReserveOrderEnumerationColumn),
		)
		fromV = sqlgraph.Neighbors(ps.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRequirementMethodEnumeration queries the requirement_method_enumeration edge of a ProductStore.
func (c *ProductStoreClient) QueryRequirementMethodEnumeration(ps *ProductStore) *EnumerationQuery {
	query := &EnumerationQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ps.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productstore.Table, productstore.FieldID, id),
			sqlgraph.To(enumeration.Table, enumeration.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, productstore.RequirementMethodEnumerationTable, productstore.RequirementMethodEnumerationColumn),
		)
		fromV = sqlgraph.Neighbors(ps.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDefaultSalesChannelEnumeration queries the default_sales_channel_enumeration edge of a ProductStore.
func (c *ProductStoreClient) QueryDefaultSalesChannelEnumeration(ps *ProductStore) *EnumerationQuery {
	query := &EnumerationQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ps.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productstore.Table, productstore.FieldID, id),
			sqlgraph.To(enumeration.Table, enumeration.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, productstore.DefaultSalesChannelEnumerationTable, productstore.DefaultSalesChannelEnumerationColumn),
		)
		fromV = sqlgraph.Neighbors(ps.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHeaderApprovedStatusItem queries the header_approved_status_item edge of a ProductStore.
func (c *ProductStoreClient) QueryHeaderApprovedStatusItem(ps *ProductStore) *StatusItemQuery {
	query := &StatusItemQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ps.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productstore.Table, productstore.FieldID, id),
			sqlgraph.To(statusitem.Table, statusitem.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, productstore.HeaderApprovedStatusItemTable, productstore.HeaderApprovedStatusItemColumn),
		)
		fromV = sqlgraph.Neighbors(ps.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryItemApprovedStatusItem queries the item_approved_status_item edge of a ProductStore.
func (c *ProductStoreClient) QueryItemApprovedStatusItem(ps *ProductStore) *StatusItemQuery {
	query := &StatusItemQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ps.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productstore.Table, productstore.FieldID, id),
			sqlgraph.To(statusitem.Table, statusitem.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, productstore.ItemApprovedStatusItemTable, productstore.ItemApprovedStatusItemColumn),
		)
		fromV = sqlgraph.Neighbors(ps.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDigitalItemApprovedStatusItem queries the digital_item_approved_status_item edge of a ProductStore.
func (c *ProductStoreClient) QueryDigitalItemApprovedStatusItem(ps *ProductStore) *StatusItemQuery {
	query := &StatusItemQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ps.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productstore.Table, productstore.FieldID, id),
			sqlgraph.To(statusitem.Table, statusitem.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, productstore.DigitalItemApprovedStatusItemTable, productstore.DigitalItemApprovedStatusItemColumn),
		)
		fromV = sqlgraph.Neighbors(ps.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHeaderDeclinedStatusItem queries the header_declined_status_item edge of a ProductStore.
func (c *ProductStoreClient) QueryHeaderDeclinedStatusItem(ps *ProductStore) *StatusItemQuery {
	query := &StatusItemQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ps.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productstore.Table, productstore.FieldID, id),
			sqlgraph.To(statusitem.Table, statusitem.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, productstore.HeaderDeclinedStatusItemTable, productstore.HeaderDeclinedStatusItemColumn),
		)
		fromV = sqlgraph.Neighbors(ps.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryItemDeclinedStatusItem queries the item_declined_status_item edge of a ProductStore.
func (c *ProductStoreClient) QueryItemDeclinedStatusItem(ps *ProductStore) *StatusItemQuery {
	query := &StatusItemQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ps.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productstore.Table, productstore.FieldID, id),
			sqlgraph.To(statusitem.Table, statusitem.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, productstore.ItemDeclinedStatusItemTable, productstore.ItemDeclinedStatusItemColumn),
		)
		fromV = sqlgraph.Neighbors(ps.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHeaderCancelStatusItem queries the header_cancel_status_item edge of a ProductStore.
func (c *ProductStoreClient) QueryHeaderCancelStatusItem(ps *ProductStore) *StatusItemQuery {
	query := &StatusItemQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ps.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productstore.Table, productstore.FieldID, id),
			sqlgraph.To(statusitem.Table, statusitem.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, productstore.HeaderCancelStatusItemTable, productstore.HeaderCancelStatusItemColumn),
		)
		fromV = sqlgraph.Neighbors(ps.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryItemCancelStatusItem queries the item_cancel_status_item edge of a ProductStore.
func (c *ProductStoreClient) QueryItemCancelStatusItem(ps *ProductStore) *StatusItemQuery {
	query := &StatusItemQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ps.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productstore.Table, productstore.FieldID, id),
			sqlgraph.To(statusitem.Table, statusitem.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, productstore.ItemCancelStatusItemTable, productstore.ItemCancelStatusItemColumn),
		)
		fromV = sqlgraph.Neighbors(ps.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStoreCreditAccountEnumeration queries the store_credit_account_enumeration edge of a ProductStore.
func (c *ProductStoreClient) QueryStoreCreditAccountEnumeration(ps *ProductStore) *EnumerationQuery {
	query := &EnumerationQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ps.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productstore.Table, productstore.FieldID, id),
			sqlgraph.To(enumeration.Table, enumeration.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, productstore.StoreCreditAccountEnumerationTable, productstore.StoreCreditAccountEnumerationColumn),
		)
		fromV = sqlgraph.Neighbors(ps.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrderHeaders queries the order_headers edge of a ProductStore.
func (c *ProductStoreClient) QueryOrderHeaders(ps *ProductStore) *OrderHeaderQuery {
	query := &OrderHeaderQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ps.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productstore.Table, productstore.FieldID, id),
			sqlgraph.To(orderheader.Table, orderheader.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, productstore.OrderHeadersTable, productstore.OrderHeadersColumn),
		)
		fromV = sqlgraph.Neighbors(ps.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProductReviews queries the product_reviews edge of a ProductStore.
func (c *ProductStoreClient) QueryProductReviews(ps *ProductStore) *ProductReviewQuery {
	query := &ProductReviewQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ps.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productstore.Table, productstore.FieldID, id),
			sqlgraph.To(productreview.Table, productreview.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, productstore.ProductReviewsTable, productstore.ProductReviewsColumn),
		)
		fromV = sqlgraph.Neighbors(ps.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProductStoreClient) Hooks() []Hook {
	return c.hooks.ProductStore
}

// ProductStoreGroupClient is a client for the ProductStoreGroup schema.
type ProductStoreGroupClient struct {
	config
}

// NewProductStoreGroupClient returns a client for the ProductStoreGroup from the given config.
func NewProductStoreGroupClient(c config) *ProductStoreGroupClient {
	return &ProductStoreGroupClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `productstoregroup.Hooks(f(g(h())))`.
func (c *ProductStoreGroupClient) Use(hooks ...Hook) {
	c.hooks.ProductStoreGroup = append(c.hooks.ProductStoreGroup, hooks...)
}

// Create returns a create builder for ProductStoreGroup.
func (c *ProductStoreGroupClient) Create() *ProductStoreGroupCreate {
	mutation := newProductStoreGroupMutation(c.config, OpCreate)
	return &ProductStoreGroupCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProductStoreGroup entities.
func (c *ProductStoreGroupClient) CreateBulk(builders ...*ProductStoreGroupCreate) *ProductStoreGroupCreateBulk {
	return &ProductStoreGroupCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProductStoreGroup.
func (c *ProductStoreGroupClient) Update() *ProductStoreGroupUpdate {
	mutation := newProductStoreGroupMutation(c.config, OpUpdate)
	return &ProductStoreGroupUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProductStoreGroupClient) UpdateOne(psg *ProductStoreGroup) *ProductStoreGroupUpdateOne {
	mutation := newProductStoreGroupMutation(c.config, OpUpdateOne, withProductStoreGroup(psg))
	return &ProductStoreGroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProductStoreGroupClient) UpdateOneID(id int) *ProductStoreGroupUpdateOne {
	mutation := newProductStoreGroupMutation(c.config, OpUpdateOne, withProductStoreGroupID(id))
	return &ProductStoreGroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProductStoreGroup.
func (c *ProductStoreGroupClient) Delete() *ProductStoreGroupDelete {
	mutation := newProductStoreGroupMutation(c.config, OpDelete)
	return &ProductStoreGroupDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ProductStoreGroupClient) DeleteOne(psg *ProductStoreGroup) *ProductStoreGroupDeleteOne {
	return c.DeleteOneID(psg.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ProductStoreGroupClient) DeleteOneID(id int) *ProductStoreGroupDeleteOne {
	builder := c.Delete().Where(productstoregroup.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProductStoreGroupDeleteOne{builder}
}

// Query returns a query builder for ProductStoreGroup.
func (c *ProductStoreGroupClient) Query() *ProductStoreGroupQuery {
	return &ProductStoreGroupQuery{
		config: c.config,
	}
}

// Get returns a ProductStoreGroup entity by its id.
func (c *ProductStoreGroupClient) Get(ctx context.Context, id int) (*ProductStoreGroup, error) {
	return c.Query().Where(productstoregroup.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProductStoreGroupClient) GetX(ctx context.Context, id int) *ProductStoreGroup {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryParent queries the parent edge of a ProductStoreGroup.
func (c *ProductStoreGroupClient) QueryParent(psg *ProductStoreGroup) *ProductStoreGroupQuery {
	query := &ProductStoreGroupQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := psg.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productstoregroup.Table, productstoregroup.FieldID, id),
			sqlgraph.To(productstoregroup.Table, productstoregroup.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, productstoregroup.ParentTable, productstoregroup.ParentColumn),
		)
		fromV = sqlgraph.Neighbors(psg.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildren queries the children edge of a ProductStoreGroup.
func (c *ProductStoreGroupClient) QueryChildren(psg *ProductStoreGroup) *ProductStoreGroupQuery {
	query := &ProductStoreGroupQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := psg.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productstoregroup.Table, productstoregroup.FieldID, id),
			sqlgraph.To(productstoregroup.Table, productstoregroup.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, productstoregroup.ChildrenTable, productstoregroup.ChildrenColumn),
		)
		fromV = sqlgraph.Neighbors(psg.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProductPrices queries the product_prices edge of a ProductStoreGroup.
func (c *ProductStoreGroupClient) QueryProductPrices(psg *ProductStoreGroup) *ProductPriceQuery {
	query := &ProductPriceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := psg.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productstoregroup.Table, productstoregroup.FieldID, id),
			sqlgraph.To(productprice.Table, productprice.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, productstoregroup.ProductPricesTable, productstoregroup.ProductPricesColumn),
		)
		fromV = sqlgraph.Neighbors(psg.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPrimaryProductStores queries the primary_product_stores edge of a ProductStoreGroup.
func (c *ProductStoreGroupClient) QueryPrimaryProductStores(psg *ProductStoreGroup) *ProductStoreQuery {
	query := &ProductStoreQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := psg.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productstoregroup.Table, productstoregroup.FieldID, id),
			sqlgraph.To(productstore.Table, productstore.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, productstoregroup.PrimaryProductStoresTable, productstoregroup.PrimaryProductStoresColumn),
		)
		fromV = sqlgraph.Neighbors(psg.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProductStoreGroupClient) Hooks() []Hook {
	return c.hooks.ProductStoreGroup
}

// ProductTypeClient is a client for the ProductType schema.
type ProductTypeClient struct {
	config
}

// NewProductTypeClient returns a client for the ProductType from the given config.
func NewProductTypeClient(c config) *ProductTypeClient {
	return &ProductTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `producttype.Hooks(f(g(h())))`.
func (c *ProductTypeClient) Use(hooks ...Hook) {
	c.hooks.ProductType = append(c.hooks.ProductType, hooks...)
}

// Create returns a create builder for ProductType.
func (c *ProductTypeClient) Create() *ProductTypeCreate {
	mutation := newProductTypeMutation(c.config, OpCreate)
	return &ProductTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProductType entities.
func (c *ProductTypeClient) CreateBulk(builders ...*ProductTypeCreate) *ProductTypeCreateBulk {
	return &ProductTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProductType.
func (c *ProductTypeClient) Update() *ProductTypeUpdate {
	mutation := newProductTypeMutation(c.config, OpUpdate)
	return &ProductTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProductTypeClient) UpdateOne(pt *ProductType) *ProductTypeUpdateOne {
	mutation := newProductTypeMutation(c.config, OpUpdateOne, withProductType(pt))
	return &ProductTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProductTypeClient) UpdateOneID(id int) *ProductTypeUpdateOne {
	mutation := newProductTypeMutation(c.config, OpUpdateOne, withProductTypeID(id))
	return &ProductTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProductType.
func (c *ProductTypeClient) Delete() *ProductTypeDelete {
	mutation := newProductTypeMutation(c.config, OpDelete)
	return &ProductTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ProductTypeClient) DeleteOne(pt *ProductType) *ProductTypeDeleteOne {
	return c.DeleteOneID(pt.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ProductTypeClient) DeleteOneID(id int) *ProductTypeDeleteOne {
	builder := c.Delete().Where(producttype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProductTypeDeleteOne{builder}
}

// Query returns a query builder for ProductType.
func (c *ProductTypeClient) Query() *ProductTypeQuery {
	return &ProductTypeQuery{
		config: c.config,
	}
}

// Get returns a ProductType entity by its id.
func (c *ProductTypeClient) Get(ctx context.Context, id int) (*ProductType, error) {
	return c.Query().Where(producttype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProductTypeClient) GetX(ctx context.Context, id int) *ProductType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryParent queries the parent edge of a ProductType.
func (c *ProductTypeClient) QueryParent(pt *ProductType) *ProductTypeQuery {
	query := &ProductTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(producttype.Table, producttype.FieldID, id),
			sqlgraph.To(producttype.Table, producttype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, producttype.ParentTable, producttype.ParentColumn),
		)
		fromV = sqlgraph.Neighbors(pt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildren queries the children edge of a ProductType.
func (c *ProductTypeClient) QueryChildren(pt *ProductType) *ProductTypeQuery {
	query := &ProductTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(producttype.Table, producttype.FieldID, id),
			sqlgraph.To(producttype.Table, producttype.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, producttype.ChildrenTable, producttype.ChildrenColumn),
		)
		fromV = sqlgraph.Neighbors(pt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProducts queries the products edge of a ProductType.
func (c *ProductTypeClient) QueryProducts(pt *ProductType) *ProductQuery {
	query := &ProductQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(producttype.Table, producttype.FieldID, id),
			sqlgraph.To(product.Table, product.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, producttype.ProductsTable, producttype.ProductsColumn),
		)
		fromV = sqlgraph.Neighbors(pt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildProductTypes queries the child_product_types edge of a ProductType.
func (c *ProductTypeClient) QueryChildProductTypes(pt *ProductType) *ProductTypeQuery {
	query := &ProductTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(producttype.Table, producttype.FieldID, id),
			sqlgraph.To(producttype.Table, producttype.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, producttype.ChildProductTypesTable, producttype.ChildProductTypesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProductTypeClient) Hooks() []Hook {
	return c.hooks.ProductType
}

// QuantityBreakTypeClient is a client for the QuantityBreakType schema.
type QuantityBreakTypeClient struct {
	config
}

// NewQuantityBreakTypeClient returns a client for the QuantityBreakType from the given config.
func NewQuantityBreakTypeClient(c config) *QuantityBreakTypeClient {
	return &QuantityBreakTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `quantitybreaktype.Hooks(f(g(h())))`.
func (c *QuantityBreakTypeClient) Use(hooks ...Hook) {
	c.hooks.QuantityBreakType = append(c.hooks.QuantityBreakType, hooks...)
}

// Create returns a create builder for QuantityBreakType.
func (c *QuantityBreakTypeClient) Create() *QuantityBreakTypeCreate {
	mutation := newQuantityBreakTypeMutation(c.config, OpCreate)
	return &QuantityBreakTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of QuantityBreakType entities.
func (c *QuantityBreakTypeClient) CreateBulk(builders ...*QuantityBreakTypeCreate) *QuantityBreakTypeCreateBulk {
	return &QuantityBreakTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for QuantityBreakType.
func (c *QuantityBreakTypeClient) Update() *QuantityBreakTypeUpdate {
	mutation := newQuantityBreakTypeMutation(c.config, OpUpdate)
	return &QuantityBreakTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *QuantityBreakTypeClient) UpdateOne(qbt *QuantityBreakType) *QuantityBreakTypeUpdateOne {
	mutation := newQuantityBreakTypeMutation(c.config, OpUpdateOne, withQuantityBreakType(qbt))
	return &QuantityBreakTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *QuantityBreakTypeClient) UpdateOneID(id int) *QuantityBreakTypeUpdateOne {
	mutation := newQuantityBreakTypeMutation(c.config, OpUpdateOne, withQuantityBreakTypeID(id))
	return &QuantityBreakTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for QuantityBreakType.
func (c *QuantityBreakTypeClient) Delete() *QuantityBreakTypeDelete {
	mutation := newQuantityBreakTypeMutation(c.config, OpDelete)
	return &QuantityBreakTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *QuantityBreakTypeClient) DeleteOne(qbt *QuantityBreakType) *QuantityBreakTypeDeleteOne {
	return c.DeleteOneID(qbt.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *QuantityBreakTypeClient) DeleteOneID(id int) *QuantityBreakTypeDeleteOne {
	builder := c.Delete().Where(quantitybreaktype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &QuantityBreakTypeDeleteOne{builder}
}

// Query returns a query builder for QuantityBreakType.
func (c *QuantityBreakTypeClient) Query() *QuantityBreakTypeQuery {
	return &QuantityBreakTypeQuery{
		config: c.config,
	}
}

// Get returns a QuantityBreakType entity by its id.
func (c *QuantityBreakTypeClient) Get(ctx context.Context, id int) (*QuantityBreakType, error) {
	return c.Query().Where(quantitybreaktype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *QuantityBreakTypeClient) GetX(ctx context.Context, id int) *QuantityBreakType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *QuantityBreakTypeClient) Hooks() []Hook {
	return c.hooks.QuantityBreakType
}

// RejectionReasonClient is a client for the RejectionReason schema.
type RejectionReasonClient struct {
	config
}

// NewRejectionReasonClient returns a client for the RejectionReason from the given config.
func NewRejectionReasonClient(c config) *RejectionReasonClient {
	return &RejectionReasonClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `rejectionreason.Hooks(f(g(h())))`.
func (c *RejectionReasonClient) Use(hooks ...Hook) {
	c.hooks.RejectionReason = append(c.hooks.RejectionReason, hooks...)
}

// Create returns a create builder for RejectionReason.
func (c *RejectionReasonClient) Create() *RejectionReasonCreate {
	mutation := newRejectionReasonMutation(c.config, OpCreate)
	return &RejectionReasonCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of RejectionReason entities.
func (c *RejectionReasonClient) CreateBulk(builders ...*RejectionReasonCreate) *RejectionReasonCreateBulk {
	return &RejectionReasonCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for RejectionReason.
func (c *RejectionReasonClient) Update() *RejectionReasonUpdate {
	mutation := newRejectionReasonMutation(c.config, OpUpdate)
	return &RejectionReasonUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RejectionReasonClient) UpdateOne(rr *RejectionReason) *RejectionReasonUpdateOne {
	mutation := newRejectionReasonMutation(c.config, OpUpdateOne, withRejectionReason(rr))
	return &RejectionReasonUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RejectionReasonClient) UpdateOneID(id int) *RejectionReasonUpdateOne {
	mutation := newRejectionReasonMutation(c.config, OpUpdateOne, withRejectionReasonID(id))
	return &RejectionReasonUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RejectionReason.
func (c *RejectionReasonClient) Delete() *RejectionReasonDelete {
	mutation := newRejectionReasonMutation(c.config, OpDelete)
	return &RejectionReasonDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *RejectionReasonClient) DeleteOne(rr *RejectionReason) *RejectionReasonDeleteOne {
	return c.DeleteOneID(rr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *RejectionReasonClient) DeleteOneID(id int) *RejectionReasonDeleteOne {
	builder := c.Delete().Where(rejectionreason.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RejectionReasonDeleteOne{builder}
}

// Query returns a query builder for RejectionReason.
func (c *RejectionReasonClient) Query() *RejectionReasonQuery {
	return &RejectionReasonQuery{
		config: c.config,
	}
}

// Get returns a RejectionReason entity by its id.
func (c *RejectionReasonClient) Get(ctx context.Context, id int) (*RejectionReason, error) {
	return c.Query().Where(rejectionreason.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RejectionReasonClient) GetX(ctx context.Context, id int) *RejectionReason {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *RejectionReasonClient) Hooks() []Hook {
	return c.hooks.RejectionReason
}

// RoleTypeClient is a client for the RoleType schema.
type RoleTypeClient struct {
	config
}

// NewRoleTypeClient returns a client for the RoleType from the given config.
func NewRoleTypeClient(c config) *RoleTypeClient {
	return &RoleTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `roletype.Hooks(f(g(h())))`.
func (c *RoleTypeClient) Use(hooks ...Hook) {
	c.hooks.RoleType = append(c.hooks.RoleType, hooks...)
}

// Create returns a create builder for RoleType.
func (c *RoleTypeClient) Create() *RoleTypeCreate {
	mutation := newRoleTypeMutation(c.config, OpCreate)
	return &RoleTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of RoleType entities.
func (c *RoleTypeClient) CreateBulk(builders ...*RoleTypeCreate) *RoleTypeCreateBulk {
	return &RoleTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for RoleType.
func (c *RoleTypeClient) Update() *RoleTypeUpdate {
	mutation := newRoleTypeMutation(c.config, OpUpdate)
	return &RoleTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RoleTypeClient) UpdateOne(rt *RoleType) *RoleTypeUpdateOne {
	mutation := newRoleTypeMutation(c.config, OpUpdateOne, withRoleType(rt))
	return &RoleTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RoleTypeClient) UpdateOneID(id int) *RoleTypeUpdateOne {
	mutation := newRoleTypeMutation(c.config, OpUpdateOne, withRoleTypeID(id))
	return &RoleTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RoleType.
func (c *RoleTypeClient) Delete() *RoleTypeDelete {
	mutation := newRoleTypeMutation(c.config, OpDelete)
	return &RoleTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *RoleTypeClient) DeleteOne(rt *RoleType) *RoleTypeDeleteOne {
	return c.DeleteOneID(rt.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *RoleTypeClient) DeleteOneID(id int) *RoleTypeDeleteOne {
	builder := c.Delete().Where(roletype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RoleTypeDeleteOne{builder}
}

// Query returns a query builder for RoleType.
func (c *RoleTypeClient) Query() *RoleTypeQuery {
	return &RoleTypeQuery{
		config: c.config,
	}
}

// Get returns a RoleType entity by its id.
func (c *RoleTypeClient) Get(ctx context.Context, id int) (*RoleType, error) {
	return c.Query().Where(roletype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RoleTypeClient) GetX(ctx context.Context, id int) *RoleType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryParent queries the parent edge of a RoleType.
func (c *RoleTypeClient) QueryParent(rt *RoleType) *RoleTypeQuery {
	query := &RoleTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := rt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(roletype.Table, roletype.FieldID, id),
			sqlgraph.To(roletype.Table, roletype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, roletype.ParentTable, roletype.ParentColumn),
		)
		fromV = sqlgraph.Neighbors(rt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildren queries the children edge of a RoleType.
func (c *RoleTypeClient) QueryChildren(rt *RoleType) *RoleTypeQuery {
	query := &RoleTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := rt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(roletype.Table, roletype.FieldID, id),
			sqlgraph.To(roletype.Table, roletype.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, roletype.ChildrenTable, roletype.ChildrenColumn),
		)
		fromV = sqlgraph.Neighbors(rt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrderRoles queries the order_roles edge of a RoleType.
func (c *RoleTypeClient) QueryOrderRoles(rt *RoleType) *OrderRoleQuery {
	query := &OrderRoleQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := rt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(roletype.Table, roletype.FieldID, id),
			sqlgraph.To(orderrole.Table, orderrole.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, roletype.OrderRolesTable, roletype.OrderRolesColumn),
		)
		fromV = sqlgraph.Neighbors(rt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildRoleTypes queries the child_role_types edge of a RoleType.
func (c *RoleTypeClient) QueryChildRoleTypes(rt *RoleType) *RoleTypeQuery {
	query := &RoleTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := rt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(roletype.Table, roletype.FieldID, id),
			sqlgraph.To(roletype.Table, roletype.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, roletype.ChildRoleTypesTable, roletype.ChildRoleTypesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(rt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RoleTypeClient) Hooks() []Hook {
	return c.hooks.RoleType
}

// ShipmentContactMechTypeClient is a client for the ShipmentContactMechType schema.
type ShipmentContactMechTypeClient struct {
	config
}

// NewShipmentContactMechTypeClient returns a client for the ShipmentContactMechType from the given config.
func NewShipmentContactMechTypeClient(c config) *ShipmentContactMechTypeClient {
	return &ShipmentContactMechTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `shipmentcontactmechtype.Hooks(f(g(h())))`.
func (c *ShipmentContactMechTypeClient) Use(hooks ...Hook) {
	c.hooks.ShipmentContactMechType = append(c.hooks.ShipmentContactMechType, hooks...)
}

// Create returns a create builder for ShipmentContactMechType.
func (c *ShipmentContactMechTypeClient) Create() *ShipmentContactMechTypeCreate {
	mutation := newShipmentContactMechTypeMutation(c.config, OpCreate)
	return &ShipmentContactMechTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ShipmentContactMechType entities.
func (c *ShipmentContactMechTypeClient) CreateBulk(builders ...*ShipmentContactMechTypeCreate) *ShipmentContactMechTypeCreateBulk {
	return &ShipmentContactMechTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ShipmentContactMechType.
func (c *ShipmentContactMechTypeClient) Update() *ShipmentContactMechTypeUpdate {
	mutation := newShipmentContactMechTypeMutation(c.config, OpUpdate)
	return &ShipmentContactMechTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ShipmentContactMechTypeClient) UpdateOne(scmt *ShipmentContactMechType) *ShipmentContactMechTypeUpdateOne {
	mutation := newShipmentContactMechTypeMutation(c.config, OpUpdateOne, withShipmentContactMechType(scmt))
	return &ShipmentContactMechTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ShipmentContactMechTypeClient) UpdateOneID(id int) *ShipmentContactMechTypeUpdateOne {
	mutation := newShipmentContactMechTypeMutation(c.config, OpUpdateOne, withShipmentContactMechTypeID(id))
	return &ShipmentContactMechTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ShipmentContactMechType.
func (c *ShipmentContactMechTypeClient) Delete() *ShipmentContactMechTypeDelete {
	mutation := newShipmentContactMechTypeMutation(c.config, OpDelete)
	return &ShipmentContactMechTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ShipmentContactMechTypeClient) DeleteOne(scmt *ShipmentContactMechType) *ShipmentContactMechTypeDeleteOne {
	return c.DeleteOneID(scmt.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ShipmentContactMechTypeClient) DeleteOneID(id int) *ShipmentContactMechTypeDeleteOne {
	builder := c.Delete().Where(shipmentcontactmechtype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ShipmentContactMechTypeDeleteOne{builder}
}

// Query returns a query builder for ShipmentContactMechType.
func (c *ShipmentContactMechTypeClient) Query() *ShipmentContactMechTypeQuery {
	return &ShipmentContactMechTypeQuery{
		config: c.config,
	}
}

// Get returns a ShipmentContactMechType entity by its id.
func (c *ShipmentContactMechTypeClient) Get(ctx context.Context, id int) (*ShipmentContactMechType, error) {
	return c.Query().Where(shipmentcontactmechtype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ShipmentContactMechTypeClient) GetX(ctx context.Context, id int) *ShipmentContactMechType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ShipmentContactMechTypeClient) Hooks() []Hook {
	return c.hooks.ShipmentContactMechType
}

// ShipmentGatewayConfigClient is a client for the ShipmentGatewayConfig schema.
type ShipmentGatewayConfigClient struct {
	config
}

// NewShipmentGatewayConfigClient returns a client for the ShipmentGatewayConfig from the given config.
func NewShipmentGatewayConfigClient(c config) *ShipmentGatewayConfigClient {
	return &ShipmentGatewayConfigClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `shipmentgatewayconfig.Hooks(f(g(h())))`.
func (c *ShipmentGatewayConfigClient) Use(hooks ...Hook) {
	c.hooks.ShipmentGatewayConfig = append(c.hooks.ShipmentGatewayConfig, hooks...)
}

// Create returns a create builder for ShipmentGatewayConfig.
func (c *ShipmentGatewayConfigClient) Create() *ShipmentGatewayConfigCreate {
	mutation := newShipmentGatewayConfigMutation(c.config, OpCreate)
	return &ShipmentGatewayConfigCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ShipmentGatewayConfig entities.
func (c *ShipmentGatewayConfigClient) CreateBulk(builders ...*ShipmentGatewayConfigCreate) *ShipmentGatewayConfigCreateBulk {
	return &ShipmentGatewayConfigCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ShipmentGatewayConfig.
func (c *ShipmentGatewayConfigClient) Update() *ShipmentGatewayConfigUpdate {
	mutation := newShipmentGatewayConfigMutation(c.config, OpUpdate)
	return &ShipmentGatewayConfigUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ShipmentGatewayConfigClient) UpdateOne(sgc *ShipmentGatewayConfig) *ShipmentGatewayConfigUpdateOne {
	mutation := newShipmentGatewayConfigMutation(c.config, OpUpdateOne, withShipmentGatewayConfig(sgc))
	return &ShipmentGatewayConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ShipmentGatewayConfigClient) UpdateOneID(id int) *ShipmentGatewayConfigUpdateOne {
	mutation := newShipmentGatewayConfigMutation(c.config, OpUpdateOne, withShipmentGatewayConfigID(id))
	return &ShipmentGatewayConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ShipmentGatewayConfig.
func (c *ShipmentGatewayConfigClient) Delete() *ShipmentGatewayConfigDelete {
	mutation := newShipmentGatewayConfigMutation(c.config, OpDelete)
	return &ShipmentGatewayConfigDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ShipmentGatewayConfigClient) DeleteOne(sgc *ShipmentGatewayConfig) *ShipmentGatewayConfigDeleteOne {
	return c.DeleteOneID(sgc.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ShipmentGatewayConfigClient) DeleteOneID(id int) *ShipmentGatewayConfigDeleteOne {
	builder := c.Delete().Where(shipmentgatewayconfig.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ShipmentGatewayConfigDeleteOne{builder}
}

// Query returns a query builder for ShipmentGatewayConfig.
func (c *ShipmentGatewayConfigClient) Query() *ShipmentGatewayConfigQuery {
	return &ShipmentGatewayConfigQuery{
		config: c.config,
	}
}

// Get returns a ShipmentGatewayConfig entity by its id.
func (c *ShipmentGatewayConfigClient) Get(ctx context.Context, id int) (*ShipmentGatewayConfig, error) {
	return c.Query().Where(shipmentgatewayconfig.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ShipmentGatewayConfigClient) GetX(ctx context.Context, id int) *ShipmentGatewayConfig {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryShipmentGatewayConfigType queries the shipment_gateway_config_type edge of a ShipmentGatewayConfig.
func (c *ShipmentGatewayConfigClient) QueryShipmentGatewayConfigType(sgc *ShipmentGatewayConfig) *ShipmentGatewayConfigTypeQuery {
	query := &ShipmentGatewayConfigTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sgc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(shipmentgatewayconfig.Table, shipmentgatewayconfig.FieldID, id),
			sqlgraph.To(shipmentgatewayconfigtype.Table, shipmentgatewayconfigtype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, shipmentgatewayconfig.ShipmentGatewayConfigTypeTable, shipmentgatewayconfig.ShipmentGatewayConfigTypeColumn),
		)
		fromV = sqlgraph.Neighbors(sgc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryShipmentGatewayDhl queries the shipment_gateway_dhl edge of a ShipmentGatewayConfig.
func (c *ShipmentGatewayConfigClient) QueryShipmentGatewayDhl(sgc *ShipmentGatewayConfig) *ShipmentGatewayDhlQuery {
	query := &ShipmentGatewayDhlQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sgc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(shipmentgatewayconfig.Table, shipmentgatewayconfig.FieldID, id),
			sqlgraph.To(shipmentgatewaydhl.Table, shipmentgatewaydhl.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, shipmentgatewayconfig.ShipmentGatewayDhlTable, shipmentgatewayconfig.ShipmentGatewayDhlColumn),
		)
		fromV = sqlgraph.Neighbors(sgc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryShipmentGatewayFedex queries the shipment_gateway_fedex edge of a ShipmentGatewayConfig.
func (c *ShipmentGatewayConfigClient) QueryShipmentGatewayFedex(sgc *ShipmentGatewayConfig) *ShipmentGatewayFedexQuery {
	query := &ShipmentGatewayFedexQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sgc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(shipmentgatewayconfig.Table, shipmentgatewayconfig.FieldID, id),
			sqlgraph.To(shipmentgatewayfedex.Table, shipmentgatewayfedex.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, shipmentgatewayconfig.ShipmentGatewayFedexTable, shipmentgatewayconfig.ShipmentGatewayFedexColumn),
		)
		fromV = sqlgraph.Neighbors(sgc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryShipmentGatewayUps queries the shipment_gateway_ups edge of a ShipmentGatewayConfig.
func (c *ShipmentGatewayConfigClient) QueryShipmentGatewayUps(sgc *ShipmentGatewayConfig) *ShipmentGatewayUpsQuery {
	query := &ShipmentGatewayUpsQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sgc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(shipmentgatewayconfig.Table, shipmentgatewayconfig.FieldID, id),
			sqlgraph.To(shipmentgatewayups.Table, shipmentgatewayups.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, shipmentgatewayconfig.ShipmentGatewayUpsTable, shipmentgatewayconfig.ShipmentGatewayUpsColumn),
		)
		fromV = sqlgraph.Neighbors(sgc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryShipmentGatewayUsps queries the shipment_gateway_usps edge of a ShipmentGatewayConfig.
func (c *ShipmentGatewayConfigClient) QueryShipmentGatewayUsps(sgc *ShipmentGatewayConfig) *ShipmentGatewayUspsQuery {
	query := &ShipmentGatewayUspsQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sgc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(shipmentgatewayconfig.Table, shipmentgatewayconfig.FieldID, id),
			sqlgraph.To(shipmentgatewayusps.Table, shipmentgatewayusps.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, shipmentgatewayconfig.ShipmentGatewayUspsTable, shipmentgatewayconfig.ShipmentGatewayUspsColumn),
		)
		fromV = sqlgraph.Neighbors(sgc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ShipmentGatewayConfigClient) Hooks() []Hook {
	return c.hooks.ShipmentGatewayConfig
}

// ShipmentGatewayConfigTypeClient is a client for the ShipmentGatewayConfigType schema.
type ShipmentGatewayConfigTypeClient struct {
	config
}

// NewShipmentGatewayConfigTypeClient returns a client for the ShipmentGatewayConfigType from the given config.
func NewShipmentGatewayConfigTypeClient(c config) *ShipmentGatewayConfigTypeClient {
	return &ShipmentGatewayConfigTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `shipmentgatewayconfigtype.Hooks(f(g(h())))`.
func (c *ShipmentGatewayConfigTypeClient) Use(hooks ...Hook) {
	c.hooks.ShipmentGatewayConfigType = append(c.hooks.ShipmentGatewayConfigType, hooks...)
}

// Create returns a create builder for ShipmentGatewayConfigType.
func (c *ShipmentGatewayConfigTypeClient) Create() *ShipmentGatewayConfigTypeCreate {
	mutation := newShipmentGatewayConfigTypeMutation(c.config, OpCreate)
	return &ShipmentGatewayConfigTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ShipmentGatewayConfigType entities.
func (c *ShipmentGatewayConfigTypeClient) CreateBulk(builders ...*ShipmentGatewayConfigTypeCreate) *ShipmentGatewayConfigTypeCreateBulk {
	return &ShipmentGatewayConfigTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ShipmentGatewayConfigType.
func (c *ShipmentGatewayConfigTypeClient) Update() *ShipmentGatewayConfigTypeUpdate {
	mutation := newShipmentGatewayConfigTypeMutation(c.config, OpUpdate)
	return &ShipmentGatewayConfigTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ShipmentGatewayConfigTypeClient) UpdateOne(sgct *ShipmentGatewayConfigType) *ShipmentGatewayConfigTypeUpdateOne {
	mutation := newShipmentGatewayConfigTypeMutation(c.config, OpUpdateOne, withShipmentGatewayConfigType(sgct))
	return &ShipmentGatewayConfigTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ShipmentGatewayConfigTypeClient) UpdateOneID(id int) *ShipmentGatewayConfigTypeUpdateOne {
	mutation := newShipmentGatewayConfigTypeMutation(c.config, OpUpdateOne, withShipmentGatewayConfigTypeID(id))
	return &ShipmentGatewayConfigTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ShipmentGatewayConfigType.
func (c *ShipmentGatewayConfigTypeClient) Delete() *ShipmentGatewayConfigTypeDelete {
	mutation := newShipmentGatewayConfigTypeMutation(c.config, OpDelete)
	return &ShipmentGatewayConfigTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ShipmentGatewayConfigTypeClient) DeleteOne(sgct *ShipmentGatewayConfigType) *ShipmentGatewayConfigTypeDeleteOne {
	return c.DeleteOneID(sgct.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ShipmentGatewayConfigTypeClient) DeleteOneID(id int) *ShipmentGatewayConfigTypeDeleteOne {
	builder := c.Delete().Where(shipmentgatewayconfigtype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ShipmentGatewayConfigTypeDeleteOne{builder}
}

// Query returns a query builder for ShipmentGatewayConfigType.
func (c *ShipmentGatewayConfigTypeClient) Query() *ShipmentGatewayConfigTypeQuery {
	return &ShipmentGatewayConfigTypeQuery{
		config: c.config,
	}
}

// Get returns a ShipmentGatewayConfigType entity by its id.
func (c *ShipmentGatewayConfigTypeClient) Get(ctx context.Context, id int) (*ShipmentGatewayConfigType, error) {
	return c.Query().Where(shipmentgatewayconfigtype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ShipmentGatewayConfigTypeClient) GetX(ctx context.Context, id int) *ShipmentGatewayConfigType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryParent queries the parent edge of a ShipmentGatewayConfigType.
func (c *ShipmentGatewayConfigTypeClient) QueryParent(sgct *ShipmentGatewayConfigType) *ShipmentGatewayConfigTypeQuery {
	query := &ShipmentGatewayConfigTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sgct.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(shipmentgatewayconfigtype.Table, shipmentgatewayconfigtype.FieldID, id),
			sqlgraph.To(shipmentgatewayconfigtype.Table, shipmentgatewayconfigtype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, shipmentgatewayconfigtype.ParentTable, shipmentgatewayconfigtype.ParentColumn),
		)
		fromV = sqlgraph.Neighbors(sgct.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildren queries the children edge of a ShipmentGatewayConfigType.
func (c *ShipmentGatewayConfigTypeClient) QueryChildren(sgct *ShipmentGatewayConfigType) *ShipmentGatewayConfigTypeQuery {
	query := &ShipmentGatewayConfigTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sgct.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(shipmentgatewayconfigtype.Table, shipmentgatewayconfigtype.FieldID, id),
			sqlgraph.To(shipmentgatewayconfigtype.Table, shipmentgatewayconfigtype.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, shipmentgatewayconfigtype.ChildrenTable, shipmentgatewayconfigtype.ChildrenColumn),
		)
		fromV = sqlgraph.Neighbors(sgct.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySiblingShipmentGatewayConfigTypes queries the sibling_shipment_gateway_config_types edge of a ShipmentGatewayConfigType.
func (c *ShipmentGatewayConfigTypeClient) QuerySiblingShipmentGatewayConfigTypes(sgct *ShipmentGatewayConfigType) *ShipmentGatewayConfigTypeQuery {
	query := &ShipmentGatewayConfigTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sgct.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(shipmentgatewayconfigtype.Table, shipmentgatewayconfigtype.FieldID, id),
			sqlgraph.To(shipmentgatewayconfigtype.Table, shipmentgatewayconfigtype.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, shipmentgatewayconfigtype.SiblingShipmentGatewayConfigTypesTable, shipmentgatewayconfigtype.SiblingShipmentGatewayConfigTypesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(sgct.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryShipmentGatewayConfigs queries the shipment_gateway_configs edge of a ShipmentGatewayConfigType.
func (c *ShipmentGatewayConfigTypeClient) QueryShipmentGatewayConfigs(sgct *ShipmentGatewayConfigType) *ShipmentGatewayConfigQuery {
	query := &ShipmentGatewayConfigQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sgct.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(shipmentgatewayconfigtype.Table, shipmentgatewayconfigtype.FieldID, id),
			sqlgraph.To(shipmentgatewayconfig.Table, shipmentgatewayconfig.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, shipmentgatewayconfigtype.ShipmentGatewayConfigsTable, shipmentgatewayconfigtype.ShipmentGatewayConfigsColumn),
		)
		fromV = sqlgraph.Neighbors(sgct.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildShipmentGatewayConfigTypes queries the child_shipment_gateway_config_types edge of a ShipmentGatewayConfigType.
func (c *ShipmentGatewayConfigTypeClient) QueryChildShipmentGatewayConfigTypes(sgct *ShipmentGatewayConfigType) *ShipmentGatewayConfigTypeQuery {
	query := &ShipmentGatewayConfigTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sgct.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(shipmentgatewayconfigtype.Table, shipmentgatewayconfigtype.FieldID, id),
			sqlgraph.To(shipmentgatewayconfigtype.Table, shipmentgatewayconfigtype.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, shipmentgatewayconfigtype.ChildShipmentGatewayConfigTypesTable, shipmentgatewayconfigtype.ChildShipmentGatewayConfigTypesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(sgct.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ShipmentGatewayConfigTypeClient) Hooks() []Hook {
	return c.hooks.ShipmentGatewayConfigType
}

// ShipmentGatewayDhlClient is a client for the ShipmentGatewayDhl schema.
type ShipmentGatewayDhlClient struct {
	config
}

// NewShipmentGatewayDhlClient returns a client for the ShipmentGatewayDhl from the given config.
func NewShipmentGatewayDhlClient(c config) *ShipmentGatewayDhlClient {
	return &ShipmentGatewayDhlClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `shipmentgatewaydhl.Hooks(f(g(h())))`.
func (c *ShipmentGatewayDhlClient) Use(hooks ...Hook) {
	c.hooks.ShipmentGatewayDhl = append(c.hooks.ShipmentGatewayDhl, hooks...)
}

// Create returns a create builder for ShipmentGatewayDhl.
func (c *ShipmentGatewayDhlClient) Create() *ShipmentGatewayDhlCreate {
	mutation := newShipmentGatewayDhlMutation(c.config, OpCreate)
	return &ShipmentGatewayDhlCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ShipmentGatewayDhl entities.
func (c *ShipmentGatewayDhlClient) CreateBulk(builders ...*ShipmentGatewayDhlCreate) *ShipmentGatewayDhlCreateBulk {
	return &ShipmentGatewayDhlCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ShipmentGatewayDhl.
func (c *ShipmentGatewayDhlClient) Update() *ShipmentGatewayDhlUpdate {
	mutation := newShipmentGatewayDhlMutation(c.config, OpUpdate)
	return &ShipmentGatewayDhlUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ShipmentGatewayDhlClient) UpdateOne(sgd *ShipmentGatewayDhl) *ShipmentGatewayDhlUpdateOne {
	mutation := newShipmentGatewayDhlMutation(c.config, OpUpdateOne, withShipmentGatewayDhl(sgd))
	return &ShipmentGatewayDhlUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ShipmentGatewayDhlClient) UpdateOneID(id int) *ShipmentGatewayDhlUpdateOne {
	mutation := newShipmentGatewayDhlMutation(c.config, OpUpdateOne, withShipmentGatewayDhlID(id))
	return &ShipmentGatewayDhlUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ShipmentGatewayDhl.
func (c *ShipmentGatewayDhlClient) Delete() *ShipmentGatewayDhlDelete {
	mutation := newShipmentGatewayDhlMutation(c.config, OpDelete)
	return &ShipmentGatewayDhlDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ShipmentGatewayDhlClient) DeleteOne(sgd *ShipmentGatewayDhl) *ShipmentGatewayDhlDeleteOne {
	return c.DeleteOneID(sgd.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ShipmentGatewayDhlClient) DeleteOneID(id int) *ShipmentGatewayDhlDeleteOne {
	builder := c.Delete().Where(shipmentgatewaydhl.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ShipmentGatewayDhlDeleteOne{builder}
}

// Query returns a query builder for ShipmentGatewayDhl.
func (c *ShipmentGatewayDhlClient) Query() *ShipmentGatewayDhlQuery {
	return &ShipmentGatewayDhlQuery{
		config: c.config,
	}
}

// Get returns a ShipmentGatewayDhl entity by its id.
func (c *ShipmentGatewayDhlClient) Get(ctx context.Context, id int) (*ShipmentGatewayDhl, error) {
	return c.Query().Where(shipmentgatewaydhl.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ShipmentGatewayDhlClient) GetX(ctx context.Context, id int) *ShipmentGatewayDhl {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryShipmentGatewayConfig queries the shipment_gateway_config edge of a ShipmentGatewayDhl.
func (c *ShipmentGatewayDhlClient) QueryShipmentGatewayConfig(sgd *ShipmentGatewayDhl) *ShipmentGatewayConfigQuery {
	query := &ShipmentGatewayConfigQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sgd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(shipmentgatewaydhl.Table, shipmentgatewaydhl.FieldID, id),
			sqlgraph.To(shipmentgatewayconfig.Table, shipmentgatewayconfig.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, shipmentgatewaydhl.ShipmentGatewayConfigTable, shipmentgatewaydhl.ShipmentGatewayConfigColumn),
		)
		fromV = sqlgraph.Neighbors(sgd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ShipmentGatewayDhlClient) Hooks() []Hook {
	return c.hooks.ShipmentGatewayDhl
}

// ShipmentGatewayFedexClient is a client for the ShipmentGatewayFedex schema.
type ShipmentGatewayFedexClient struct {
	config
}

// NewShipmentGatewayFedexClient returns a client for the ShipmentGatewayFedex from the given config.
func NewShipmentGatewayFedexClient(c config) *ShipmentGatewayFedexClient {
	return &ShipmentGatewayFedexClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `shipmentgatewayfedex.Hooks(f(g(h())))`.
func (c *ShipmentGatewayFedexClient) Use(hooks ...Hook) {
	c.hooks.ShipmentGatewayFedex = append(c.hooks.ShipmentGatewayFedex, hooks...)
}

// Create returns a create builder for ShipmentGatewayFedex.
func (c *ShipmentGatewayFedexClient) Create() *ShipmentGatewayFedexCreate {
	mutation := newShipmentGatewayFedexMutation(c.config, OpCreate)
	return &ShipmentGatewayFedexCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ShipmentGatewayFedex entities.
func (c *ShipmentGatewayFedexClient) CreateBulk(builders ...*ShipmentGatewayFedexCreate) *ShipmentGatewayFedexCreateBulk {
	return &ShipmentGatewayFedexCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ShipmentGatewayFedex.
func (c *ShipmentGatewayFedexClient) Update() *ShipmentGatewayFedexUpdate {
	mutation := newShipmentGatewayFedexMutation(c.config, OpUpdate)
	return &ShipmentGatewayFedexUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ShipmentGatewayFedexClient) UpdateOne(sgf *ShipmentGatewayFedex) *ShipmentGatewayFedexUpdateOne {
	mutation := newShipmentGatewayFedexMutation(c.config, OpUpdateOne, withShipmentGatewayFedex(sgf))
	return &ShipmentGatewayFedexUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ShipmentGatewayFedexClient) UpdateOneID(id int) *ShipmentGatewayFedexUpdateOne {
	mutation := newShipmentGatewayFedexMutation(c.config, OpUpdateOne, withShipmentGatewayFedexID(id))
	return &ShipmentGatewayFedexUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ShipmentGatewayFedex.
func (c *ShipmentGatewayFedexClient) Delete() *ShipmentGatewayFedexDelete {
	mutation := newShipmentGatewayFedexMutation(c.config, OpDelete)
	return &ShipmentGatewayFedexDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ShipmentGatewayFedexClient) DeleteOne(sgf *ShipmentGatewayFedex) *ShipmentGatewayFedexDeleteOne {
	return c.DeleteOneID(sgf.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ShipmentGatewayFedexClient) DeleteOneID(id int) *ShipmentGatewayFedexDeleteOne {
	builder := c.Delete().Where(shipmentgatewayfedex.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ShipmentGatewayFedexDeleteOne{builder}
}

// Query returns a query builder for ShipmentGatewayFedex.
func (c *ShipmentGatewayFedexClient) Query() *ShipmentGatewayFedexQuery {
	return &ShipmentGatewayFedexQuery{
		config: c.config,
	}
}

// Get returns a ShipmentGatewayFedex entity by its id.
func (c *ShipmentGatewayFedexClient) Get(ctx context.Context, id int) (*ShipmentGatewayFedex, error) {
	return c.Query().Where(shipmentgatewayfedex.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ShipmentGatewayFedexClient) GetX(ctx context.Context, id int) *ShipmentGatewayFedex {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryShipmentGatewayConfig queries the shipment_gateway_config edge of a ShipmentGatewayFedex.
func (c *ShipmentGatewayFedexClient) QueryShipmentGatewayConfig(sgf *ShipmentGatewayFedex) *ShipmentGatewayConfigQuery {
	query := &ShipmentGatewayConfigQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sgf.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(shipmentgatewayfedex.Table, shipmentgatewayfedex.FieldID, id),
			sqlgraph.To(shipmentgatewayconfig.Table, shipmentgatewayconfig.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, shipmentgatewayfedex.ShipmentGatewayConfigTable, shipmentgatewayfedex.ShipmentGatewayConfigColumn),
		)
		fromV = sqlgraph.Neighbors(sgf.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ShipmentGatewayFedexClient) Hooks() []Hook {
	return c.hooks.ShipmentGatewayFedex
}

// ShipmentGatewayUpsClient is a client for the ShipmentGatewayUps schema.
type ShipmentGatewayUpsClient struct {
	config
}

// NewShipmentGatewayUpsClient returns a client for the ShipmentGatewayUps from the given config.
func NewShipmentGatewayUpsClient(c config) *ShipmentGatewayUpsClient {
	return &ShipmentGatewayUpsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `shipmentgatewayups.Hooks(f(g(h())))`.
func (c *ShipmentGatewayUpsClient) Use(hooks ...Hook) {
	c.hooks.ShipmentGatewayUps = append(c.hooks.ShipmentGatewayUps, hooks...)
}

// Create returns a create builder for ShipmentGatewayUps.
func (c *ShipmentGatewayUpsClient) Create() *ShipmentGatewayUpsCreate {
	mutation := newShipmentGatewayUpsMutation(c.config, OpCreate)
	return &ShipmentGatewayUpsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ShipmentGatewayUps entities.
func (c *ShipmentGatewayUpsClient) CreateBulk(builders ...*ShipmentGatewayUpsCreate) *ShipmentGatewayUpsCreateBulk {
	return &ShipmentGatewayUpsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ShipmentGatewayUps.
func (c *ShipmentGatewayUpsClient) Update() *ShipmentGatewayUpsUpdate {
	mutation := newShipmentGatewayUpsMutation(c.config, OpUpdate)
	return &ShipmentGatewayUpsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ShipmentGatewayUpsClient) UpdateOne(sgu *ShipmentGatewayUps) *ShipmentGatewayUpsUpdateOne {
	mutation := newShipmentGatewayUpsMutation(c.config, OpUpdateOne, withShipmentGatewayUps(sgu))
	return &ShipmentGatewayUpsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ShipmentGatewayUpsClient) UpdateOneID(id int) *ShipmentGatewayUpsUpdateOne {
	mutation := newShipmentGatewayUpsMutation(c.config, OpUpdateOne, withShipmentGatewayUpsID(id))
	return &ShipmentGatewayUpsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ShipmentGatewayUps.
func (c *ShipmentGatewayUpsClient) Delete() *ShipmentGatewayUpsDelete {
	mutation := newShipmentGatewayUpsMutation(c.config, OpDelete)
	return &ShipmentGatewayUpsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ShipmentGatewayUpsClient) DeleteOne(sgu *ShipmentGatewayUps) *ShipmentGatewayUpsDeleteOne {
	return c.DeleteOneID(sgu.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ShipmentGatewayUpsClient) DeleteOneID(id int) *ShipmentGatewayUpsDeleteOne {
	builder := c.Delete().Where(shipmentgatewayups.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ShipmentGatewayUpsDeleteOne{builder}
}

// Query returns a query builder for ShipmentGatewayUps.
func (c *ShipmentGatewayUpsClient) Query() *ShipmentGatewayUpsQuery {
	return &ShipmentGatewayUpsQuery{
		config: c.config,
	}
}

// Get returns a ShipmentGatewayUps entity by its id.
func (c *ShipmentGatewayUpsClient) Get(ctx context.Context, id int) (*ShipmentGatewayUps, error) {
	return c.Query().Where(shipmentgatewayups.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ShipmentGatewayUpsClient) GetX(ctx context.Context, id int) *ShipmentGatewayUps {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryShipmentGatewayConfig queries the shipment_gateway_config edge of a ShipmentGatewayUps.
func (c *ShipmentGatewayUpsClient) QueryShipmentGatewayConfig(sgu *ShipmentGatewayUps) *ShipmentGatewayConfigQuery {
	query := &ShipmentGatewayConfigQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sgu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(shipmentgatewayups.Table, shipmentgatewayups.FieldID, id),
			sqlgraph.To(shipmentgatewayconfig.Table, shipmentgatewayconfig.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, shipmentgatewayups.ShipmentGatewayConfigTable, shipmentgatewayups.ShipmentGatewayConfigColumn),
		)
		fromV = sqlgraph.Neighbors(sgu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ShipmentGatewayUpsClient) Hooks() []Hook {
	return c.hooks.ShipmentGatewayUps
}

// ShipmentGatewayUspsClient is a client for the ShipmentGatewayUsps schema.
type ShipmentGatewayUspsClient struct {
	config
}

// NewShipmentGatewayUspsClient returns a client for the ShipmentGatewayUsps from the given config.
func NewShipmentGatewayUspsClient(c config) *ShipmentGatewayUspsClient {
	return &ShipmentGatewayUspsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `shipmentgatewayusps.Hooks(f(g(h())))`.
func (c *ShipmentGatewayUspsClient) Use(hooks ...Hook) {
	c.hooks.ShipmentGatewayUsps = append(c.hooks.ShipmentGatewayUsps, hooks...)
}

// Create returns a create builder for ShipmentGatewayUsps.
func (c *ShipmentGatewayUspsClient) Create() *ShipmentGatewayUspsCreate {
	mutation := newShipmentGatewayUspsMutation(c.config, OpCreate)
	return &ShipmentGatewayUspsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ShipmentGatewayUsps entities.
func (c *ShipmentGatewayUspsClient) CreateBulk(builders ...*ShipmentGatewayUspsCreate) *ShipmentGatewayUspsCreateBulk {
	return &ShipmentGatewayUspsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ShipmentGatewayUsps.
func (c *ShipmentGatewayUspsClient) Update() *ShipmentGatewayUspsUpdate {
	mutation := newShipmentGatewayUspsMutation(c.config, OpUpdate)
	return &ShipmentGatewayUspsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ShipmentGatewayUspsClient) UpdateOne(sgu *ShipmentGatewayUsps) *ShipmentGatewayUspsUpdateOne {
	mutation := newShipmentGatewayUspsMutation(c.config, OpUpdateOne, withShipmentGatewayUsps(sgu))
	return &ShipmentGatewayUspsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ShipmentGatewayUspsClient) UpdateOneID(id int) *ShipmentGatewayUspsUpdateOne {
	mutation := newShipmentGatewayUspsMutation(c.config, OpUpdateOne, withShipmentGatewayUspsID(id))
	return &ShipmentGatewayUspsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ShipmentGatewayUsps.
func (c *ShipmentGatewayUspsClient) Delete() *ShipmentGatewayUspsDelete {
	mutation := newShipmentGatewayUspsMutation(c.config, OpDelete)
	return &ShipmentGatewayUspsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ShipmentGatewayUspsClient) DeleteOne(sgu *ShipmentGatewayUsps) *ShipmentGatewayUspsDeleteOne {
	return c.DeleteOneID(sgu.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ShipmentGatewayUspsClient) DeleteOneID(id int) *ShipmentGatewayUspsDeleteOne {
	builder := c.Delete().Where(shipmentgatewayusps.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ShipmentGatewayUspsDeleteOne{builder}
}

// Query returns a query builder for ShipmentGatewayUsps.
func (c *ShipmentGatewayUspsClient) Query() *ShipmentGatewayUspsQuery {
	return &ShipmentGatewayUspsQuery{
		config: c.config,
	}
}

// Get returns a ShipmentGatewayUsps entity by its id.
func (c *ShipmentGatewayUspsClient) Get(ctx context.Context, id int) (*ShipmentGatewayUsps, error) {
	return c.Query().Where(shipmentgatewayusps.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ShipmentGatewayUspsClient) GetX(ctx context.Context, id int) *ShipmentGatewayUsps {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryShipmentGatewayConfig queries the shipment_gateway_config edge of a ShipmentGatewayUsps.
func (c *ShipmentGatewayUspsClient) QueryShipmentGatewayConfig(sgu *ShipmentGatewayUsps) *ShipmentGatewayConfigQuery {
	query := &ShipmentGatewayConfigQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sgu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(shipmentgatewayusps.Table, shipmentgatewayusps.FieldID, id),
			sqlgraph.To(shipmentgatewayconfig.Table, shipmentgatewayconfig.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, shipmentgatewayusps.ShipmentGatewayConfigTable, shipmentgatewayusps.ShipmentGatewayConfigColumn),
		)
		fromV = sqlgraph.Neighbors(sgu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ShipmentGatewayUspsClient) Hooks() []Hook {
	return c.hooks.ShipmentGatewayUsps
}

// ShipmentTypeClient is a client for the ShipmentType schema.
type ShipmentTypeClient struct {
	config
}

// NewShipmentTypeClient returns a client for the ShipmentType from the given config.
func NewShipmentTypeClient(c config) *ShipmentTypeClient {
	return &ShipmentTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `shipmenttype.Hooks(f(g(h())))`.
func (c *ShipmentTypeClient) Use(hooks ...Hook) {
	c.hooks.ShipmentType = append(c.hooks.ShipmentType, hooks...)
}

// Create returns a create builder for ShipmentType.
func (c *ShipmentTypeClient) Create() *ShipmentTypeCreate {
	mutation := newShipmentTypeMutation(c.config, OpCreate)
	return &ShipmentTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ShipmentType entities.
func (c *ShipmentTypeClient) CreateBulk(builders ...*ShipmentTypeCreate) *ShipmentTypeCreateBulk {
	return &ShipmentTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ShipmentType.
func (c *ShipmentTypeClient) Update() *ShipmentTypeUpdate {
	mutation := newShipmentTypeMutation(c.config, OpUpdate)
	return &ShipmentTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ShipmentTypeClient) UpdateOne(st *ShipmentType) *ShipmentTypeUpdateOne {
	mutation := newShipmentTypeMutation(c.config, OpUpdateOne, withShipmentType(st))
	return &ShipmentTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ShipmentTypeClient) UpdateOneID(id int) *ShipmentTypeUpdateOne {
	mutation := newShipmentTypeMutation(c.config, OpUpdateOne, withShipmentTypeID(id))
	return &ShipmentTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ShipmentType.
func (c *ShipmentTypeClient) Delete() *ShipmentTypeDelete {
	mutation := newShipmentTypeMutation(c.config, OpDelete)
	return &ShipmentTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ShipmentTypeClient) DeleteOne(st *ShipmentType) *ShipmentTypeDeleteOne {
	return c.DeleteOneID(st.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ShipmentTypeClient) DeleteOneID(id int) *ShipmentTypeDeleteOne {
	builder := c.Delete().Where(shipmenttype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ShipmentTypeDeleteOne{builder}
}

// Query returns a query builder for ShipmentType.
func (c *ShipmentTypeClient) Query() *ShipmentTypeQuery {
	return &ShipmentTypeQuery{
		config: c.config,
	}
}

// Get returns a ShipmentType entity by its id.
func (c *ShipmentTypeClient) Get(ctx context.Context, id int) (*ShipmentType, error) {
	return c.Query().Where(shipmenttype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ShipmentTypeClient) GetX(ctx context.Context, id int) *ShipmentType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryParent queries the parent edge of a ShipmentType.
func (c *ShipmentTypeClient) QueryParent(st *ShipmentType) *ShipmentTypeQuery {
	query := &ShipmentTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := st.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(shipmenttype.Table, shipmenttype.FieldID, id),
			sqlgraph.To(shipmenttype.Table, shipmenttype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, shipmenttype.ParentTable, shipmenttype.ParentColumn),
		)
		fromV = sqlgraph.Neighbors(st.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildren queries the children edge of a ShipmentType.
func (c *ShipmentTypeClient) QueryChildren(st *ShipmentType) *ShipmentTypeQuery {
	query := &ShipmentTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := st.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(shipmenttype.Table, shipmenttype.FieldID, id),
			sqlgraph.To(shipmenttype.Table, shipmenttype.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, shipmenttype.ChildrenTable, shipmenttype.ChildrenColumn),
		)
		fromV = sqlgraph.Neighbors(st.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildShipmentTypes queries the child_shipment_types edge of a ShipmentType.
func (c *ShipmentTypeClient) QueryChildShipmentTypes(st *ShipmentType) *ShipmentTypeQuery {
	query := &ShipmentTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := st.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(shipmenttype.Table, shipmenttype.FieldID, id),
			sqlgraph.To(shipmenttype.Table, shipmenttype.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, shipmenttype.ChildShipmentTypesTable, shipmenttype.ChildShipmentTypesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(st.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ShipmentTypeClient) Hooks() []Hook {
	return c.hooks.ShipmentType
}

// StatusItemClient is a client for the StatusItem schema.
type StatusItemClient struct {
	config
}

// NewStatusItemClient returns a client for the StatusItem from the given config.
func NewStatusItemClient(c config) *StatusItemClient {
	return &StatusItemClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `statusitem.Hooks(f(g(h())))`.
func (c *StatusItemClient) Use(hooks ...Hook) {
	c.hooks.StatusItem = append(c.hooks.StatusItem, hooks...)
}

// Create returns a create builder for StatusItem.
func (c *StatusItemClient) Create() *StatusItemCreate {
	mutation := newStatusItemMutation(c.config, OpCreate)
	return &StatusItemCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of StatusItem entities.
func (c *StatusItemClient) CreateBulk(builders ...*StatusItemCreate) *StatusItemCreateBulk {
	return &StatusItemCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for StatusItem.
func (c *StatusItemClient) Update() *StatusItemUpdate {
	mutation := newStatusItemMutation(c.config, OpUpdate)
	return &StatusItemUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StatusItemClient) UpdateOne(si *StatusItem) *StatusItemUpdateOne {
	mutation := newStatusItemMutation(c.config, OpUpdateOne, withStatusItem(si))
	return &StatusItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StatusItemClient) UpdateOneID(id int) *StatusItemUpdateOne {
	mutation := newStatusItemMutation(c.config, OpUpdateOne, withStatusItemID(id))
	return &StatusItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for StatusItem.
func (c *StatusItemClient) Delete() *StatusItemDelete {
	mutation := newStatusItemMutation(c.config, OpDelete)
	return &StatusItemDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *StatusItemClient) DeleteOne(si *StatusItem) *StatusItemDeleteOne {
	return c.DeleteOneID(si.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *StatusItemClient) DeleteOneID(id int) *StatusItemDeleteOne {
	builder := c.Delete().Where(statusitem.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StatusItemDeleteOne{builder}
}

// Query returns a query builder for StatusItem.
func (c *StatusItemClient) Query() *StatusItemQuery {
	return &StatusItemQuery{
		config: c.config,
	}
}

// Get returns a StatusItem entity by its id.
func (c *StatusItemClient) Get(ctx context.Context, id int) (*StatusItem, error) {
	return c.Query().Where(statusitem.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StatusItemClient) GetX(ctx context.Context, id int) *StatusItem {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryStatusType queries the status_type edge of a StatusItem.
func (c *StatusItemClient) QueryStatusType(si *StatusItem) *StatusTypeQuery {
	query := &StatusTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := si.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(statusitem.Table, statusitem.FieldID, id),
			sqlgraph.To(statustype.Table, statustype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, statusitem.StatusTypeTable, statusitem.StatusTypeColumn),
		)
		fromV = sqlgraph.Neighbors(si.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrderHeaders queries the order_headers edge of a StatusItem.
func (c *StatusItemClient) QueryOrderHeaders(si *StatusItem) *OrderHeaderQuery {
	query := &OrderHeaderQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := si.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(statusitem.Table, statusitem.FieldID, id),
			sqlgraph.To(orderheader.Table, orderheader.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, statusitem.OrderHeadersTable, statusitem.OrderHeadersColumn),
		)
		fromV = sqlgraph.Neighbors(si.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySyncOrderHeaders queries the sync_order_headers edge of a StatusItem.
func (c *StatusItemClient) QuerySyncOrderHeaders(si *StatusItem) *OrderHeaderQuery {
	query := &OrderHeaderQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := si.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(statusitem.Table, statusitem.FieldID, id),
			sqlgraph.To(orderheader.Table, orderheader.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, statusitem.SyncOrderHeadersTable, statusitem.SyncOrderHeadersColumn),
		)
		fromV = sqlgraph.Neighbors(si.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrderItems queries the order_items edge of a StatusItem.
func (c *StatusItemClient) QueryOrderItems(si *StatusItem) *OrderItemQuery {
	query := &OrderItemQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := si.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(statusitem.Table, statusitem.FieldID, id),
			sqlgraph.To(orderitem.Table, orderitem.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, statusitem.OrderItemsTable, statusitem.OrderItemsColumn),
		)
		fromV = sqlgraph.Neighbors(si.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySyncOrderItems queries the sync_order_items edge of a StatusItem.
func (c *StatusItemClient) QuerySyncOrderItems(si *StatusItem) *OrderItemQuery {
	query := &OrderItemQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := si.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(statusitem.Table, statusitem.FieldID, id),
			sqlgraph.To(orderitem.Table, orderitem.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, statusitem.SyncOrderItemsTable, statusitem.SyncOrderItemsColumn),
		)
		fromV = sqlgraph.Neighbors(si.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrderPaymentPreferences queries the order_payment_preferences edge of a StatusItem.
func (c *StatusItemClient) QueryOrderPaymentPreferences(si *StatusItem) *OrderPaymentPreferenceQuery {
	query := &OrderPaymentPreferenceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := si.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(statusitem.Table, statusitem.FieldID, id),
			sqlgraph.To(orderpaymentpreference.Table, orderpaymentpreference.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, statusitem.OrderPaymentPreferencesTable, statusitem.OrderPaymentPreferencesColumn),
		)
		fromV = sqlgraph.Neighbors(si.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrderStatuses queries the order_statuses edge of a StatusItem.
func (c *StatusItemClient) QueryOrderStatuses(si *StatusItem) *OrderStatusQuery {
	query := &OrderStatusQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := si.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(statusitem.Table, statusitem.FieldID, id),
			sqlgraph.To(orderstatus.Table, orderstatus.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, statusitem.OrderStatusesTable, statusitem.OrderStatusesColumn),
		)
		fromV = sqlgraph.Neighbors(si.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProductReviews queries the product_reviews edge of a StatusItem.
func (c *StatusItemClient) QueryProductReviews(si *StatusItem) *ProductReviewQuery {
	query := &ProductReviewQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := si.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(statusitem.Table, statusitem.FieldID, id),
			sqlgraph.To(productreview.Table, productreview.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, statusitem.ProductReviewsTable, statusitem.ProductReviewsColumn),
		)
		fromV = sqlgraph.Neighbors(si.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHeaderApprovedProductStores queries the header_approved_product_stores edge of a StatusItem.
func (c *StatusItemClient) QueryHeaderApprovedProductStores(si *StatusItem) *ProductStoreQuery {
	query := &ProductStoreQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := si.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(statusitem.Table, statusitem.FieldID, id),
			sqlgraph.To(productstore.Table, productstore.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, statusitem.HeaderApprovedProductStoresTable, statusitem.HeaderApprovedProductStoresColumn),
		)
		fromV = sqlgraph.Neighbors(si.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryItemApprovedProductStores queries the item_approved_product_stores edge of a StatusItem.
func (c *StatusItemClient) QueryItemApprovedProductStores(si *StatusItem) *ProductStoreQuery {
	query := &ProductStoreQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := si.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(statusitem.Table, statusitem.FieldID, id),
			sqlgraph.To(productstore.Table, productstore.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, statusitem.ItemApprovedProductStoresTable, statusitem.ItemApprovedProductStoresColumn),
		)
		fromV = sqlgraph.Neighbors(si.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDigitalItemApprovedProductStores queries the digital_item_approved_product_stores edge of a StatusItem.
func (c *StatusItemClient) QueryDigitalItemApprovedProductStores(si *StatusItem) *ProductStoreQuery {
	query := &ProductStoreQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := si.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(statusitem.Table, statusitem.FieldID, id),
			sqlgraph.To(productstore.Table, productstore.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, statusitem.DigitalItemApprovedProductStoresTable, statusitem.DigitalItemApprovedProductStoresColumn),
		)
		fromV = sqlgraph.Neighbors(si.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHeaderDeclinedProductStores queries the header_declined_product_stores edge of a StatusItem.
func (c *StatusItemClient) QueryHeaderDeclinedProductStores(si *StatusItem) *ProductStoreQuery {
	query := &ProductStoreQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := si.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(statusitem.Table, statusitem.FieldID, id),
			sqlgraph.To(productstore.Table, productstore.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, statusitem.HeaderDeclinedProductStoresTable, statusitem.HeaderDeclinedProductStoresColumn),
		)
		fromV = sqlgraph.Neighbors(si.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryItemDeclinedProductStores queries the item_declined_product_stores edge of a StatusItem.
func (c *StatusItemClient) QueryItemDeclinedProductStores(si *StatusItem) *ProductStoreQuery {
	query := &ProductStoreQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := si.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(statusitem.Table, statusitem.FieldID, id),
			sqlgraph.To(productstore.Table, productstore.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, statusitem.ItemDeclinedProductStoresTable, statusitem.ItemDeclinedProductStoresColumn),
		)
		fromV = sqlgraph.Neighbors(si.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHeaderCancelProductStores queries the header_cancel_product_stores edge of a StatusItem.
func (c *StatusItemClient) QueryHeaderCancelProductStores(si *StatusItem) *ProductStoreQuery {
	query := &ProductStoreQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := si.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(statusitem.Table, statusitem.FieldID, id),
			sqlgraph.To(productstore.Table, productstore.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, statusitem.HeaderCancelProductStoresTable, statusitem.HeaderCancelProductStoresColumn),
		)
		fromV = sqlgraph.Neighbors(si.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryItemCancelProductStores queries the item_cancel_product_stores edge of a StatusItem.
func (c *StatusItemClient) QueryItemCancelProductStores(si *StatusItem) *ProductStoreQuery {
	query := &ProductStoreQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := si.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(statusitem.Table, statusitem.FieldID, id),
			sqlgraph.To(productstore.Table, productstore.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, statusitem.ItemCancelProductStoresTable, statusitem.ItemCancelProductStoresColumn),
		)
		fromV = sqlgraph.Neighbors(si.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMainStatusValidChanges queries the main_status_valid_changes edge of a StatusItem.
func (c *StatusItemClient) QueryMainStatusValidChanges(si *StatusItem) *StatusValidChangeQuery {
	query := &StatusValidChangeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := si.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(statusitem.Table, statusitem.FieldID, id),
			sqlgraph.To(statusvalidchange.Table, statusvalidchange.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, statusitem.MainStatusValidChangesTable, statusitem.MainStatusValidChangesColumn),
		)
		fromV = sqlgraph.Neighbors(si.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryToStatusValidChanges queries the to_status_valid_changes edge of a StatusItem.
func (c *StatusItemClient) QueryToStatusValidChanges(si *StatusItem) *StatusValidChangeQuery {
	query := &StatusValidChangeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := si.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(statusitem.Table, statusitem.FieldID, id),
			sqlgraph.To(statusvalidchange.Table, statusvalidchange.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, statusitem.ToStatusValidChangesTable, statusitem.ToStatusValidChangesColumn),
		)
		fromV = sqlgraph.Neighbors(si.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *StatusItemClient) Hooks() []Hook {
	return c.hooks.StatusItem
}

// StatusTypeClient is a client for the StatusType schema.
type StatusTypeClient struct {
	config
}

// NewStatusTypeClient returns a client for the StatusType from the given config.
func NewStatusTypeClient(c config) *StatusTypeClient {
	return &StatusTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `statustype.Hooks(f(g(h())))`.
func (c *StatusTypeClient) Use(hooks ...Hook) {
	c.hooks.StatusType = append(c.hooks.StatusType, hooks...)
}

// Create returns a create builder for StatusType.
func (c *StatusTypeClient) Create() *StatusTypeCreate {
	mutation := newStatusTypeMutation(c.config, OpCreate)
	return &StatusTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of StatusType entities.
func (c *StatusTypeClient) CreateBulk(builders ...*StatusTypeCreate) *StatusTypeCreateBulk {
	return &StatusTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for StatusType.
func (c *StatusTypeClient) Update() *StatusTypeUpdate {
	mutation := newStatusTypeMutation(c.config, OpUpdate)
	return &StatusTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StatusTypeClient) UpdateOne(st *StatusType) *StatusTypeUpdateOne {
	mutation := newStatusTypeMutation(c.config, OpUpdateOne, withStatusType(st))
	return &StatusTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StatusTypeClient) UpdateOneID(id int) *StatusTypeUpdateOne {
	mutation := newStatusTypeMutation(c.config, OpUpdateOne, withStatusTypeID(id))
	return &StatusTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for StatusType.
func (c *StatusTypeClient) Delete() *StatusTypeDelete {
	mutation := newStatusTypeMutation(c.config, OpDelete)
	return &StatusTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *StatusTypeClient) DeleteOne(st *StatusType) *StatusTypeDeleteOne {
	return c.DeleteOneID(st.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *StatusTypeClient) DeleteOneID(id int) *StatusTypeDeleteOne {
	builder := c.Delete().Where(statustype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StatusTypeDeleteOne{builder}
}

// Query returns a query builder for StatusType.
func (c *StatusTypeClient) Query() *StatusTypeQuery {
	return &StatusTypeQuery{
		config: c.config,
	}
}

// Get returns a StatusType entity by its id.
func (c *StatusTypeClient) Get(ctx context.Context, id int) (*StatusType, error) {
	return c.Query().Where(statustype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StatusTypeClient) GetX(ctx context.Context, id int) *StatusType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryParent queries the parent edge of a StatusType.
func (c *StatusTypeClient) QueryParent(st *StatusType) *StatusTypeQuery {
	query := &StatusTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := st.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(statustype.Table, statustype.FieldID, id),
			sqlgraph.To(statustype.Table, statustype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, statustype.ParentTable, statustype.ParentColumn),
		)
		fromV = sqlgraph.Neighbors(st.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildren queries the children edge of a StatusType.
func (c *StatusTypeClient) QueryChildren(st *StatusType) *StatusTypeQuery {
	query := &StatusTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := st.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(statustype.Table, statustype.FieldID, id),
			sqlgraph.To(statustype.Table, statustype.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, statustype.ChildrenTable, statustype.ChildrenColumn),
		)
		fromV = sqlgraph.Neighbors(st.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStatusItems queries the status_items edge of a StatusType.
func (c *StatusTypeClient) QueryStatusItems(st *StatusType) *StatusItemQuery {
	query := &StatusItemQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := st.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(statustype.Table, statustype.FieldID, id),
			sqlgraph.To(statusitem.Table, statusitem.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, statustype.StatusItemsTable, statustype.StatusItemsColumn),
		)
		fromV = sqlgraph.Neighbors(st.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildStatusTypes queries the child_status_types edge of a StatusType.
func (c *StatusTypeClient) QueryChildStatusTypes(st *StatusType) *StatusTypeQuery {
	query := &StatusTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := st.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(statustype.Table, statustype.FieldID, id),
			sqlgraph.To(statustype.Table, statustype.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, statustype.ChildStatusTypesTable, statustype.ChildStatusTypesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(st.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *StatusTypeClient) Hooks() []Hook {
	return c.hooks.StatusType
}

// StatusValidChangeClient is a client for the StatusValidChange schema.
type StatusValidChangeClient struct {
	config
}

// NewStatusValidChangeClient returns a client for the StatusValidChange from the given config.
func NewStatusValidChangeClient(c config) *StatusValidChangeClient {
	return &StatusValidChangeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `statusvalidchange.Hooks(f(g(h())))`.
func (c *StatusValidChangeClient) Use(hooks ...Hook) {
	c.hooks.StatusValidChange = append(c.hooks.StatusValidChange, hooks...)
}

// Create returns a create builder for StatusValidChange.
func (c *StatusValidChangeClient) Create() *StatusValidChangeCreate {
	mutation := newStatusValidChangeMutation(c.config, OpCreate)
	return &StatusValidChangeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of StatusValidChange entities.
func (c *StatusValidChangeClient) CreateBulk(builders ...*StatusValidChangeCreate) *StatusValidChangeCreateBulk {
	return &StatusValidChangeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for StatusValidChange.
func (c *StatusValidChangeClient) Update() *StatusValidChangeUpdate {
	mutation := newStatusValidChangeMutation(c.config, OpUpdate)
	return &StatusValidChangeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StatusValidChangeClient) UpdateOne(svc *StatusValidChange) *StatusValidChangeUpdateOne {
	mutation := newStatusValidChangeMutation(c.config, OpUpdateOne, withStatusValidChange(svc))
	return &StatusValidChangeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StatusValidChangeClient) UpdateOneID(id int) *StatusValidChangeUpdateOne {
	mutation := newStatusValidChangeMutation(c.config, OpUpdateOne, withStatusValidChangeID(id))
	return &StatusValidChangeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for StatusValidChange.
func (c *StatusValidChangeClient) Delete() *StatusValidChangeDelete {
	mutation := newStatusValidChangeMutation(c.config, OpDelete)
	return &StatusValidChangeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *StatusValidChangeClient) DeleteOne(svc *StatusValidChange) *StatusValidChangeDeleteOne {
	return c.DeleteOneID(svc.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *StatusValidChangeClient) DeleteOneID(id int) *StatusValidChangeDeleteOne {
	builder := c.Delete().Where(statusvalidchange.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StatusValidChangeDeleteOne{builder}
}

// Query returns a query builder for StatusValidChange.
func (c *StatusValidChangeClient) Query() *StatusValidChangeQuery {
	return &StatusValidChangeQuery{
		config: c.config,
	}
}

// Get returns a StatusValidChange entity by its id.
func (c *StatusValidChangeClient) Get(ctx context.Context, id int) (*StatusValidChange, error) {
	return c.Query().Where(statusvalidchange.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StatusValidChangeClient) GetX(ctx context.Context, id int) *StatusValidChange {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMainStatusItem queries the main_status_item edge of a StatusValidChange.
func (c *StatusValidChangeClient) QueryMainStatusItem(svc *StatusValidChange) *StatusItemQuery {
	query := &StatusItemQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := svc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(statusvalidchange.Table, statusvalidchange.FieldID, id),
			sqlgraph.To(statusitem.Table, statusitem.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, statusvalidchange.MainStatusItemTable, statusvalidchange.MainStatusItemColumn),
		)
		fromV = sqlgraph.Neighbors(svc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryToStatusItem queries the to_status_item edge of a StatusValidChange.
func (c *StatusValidChangeClient) QueryToStatusItem(svc *StatusValidChange) *StatusItemQuery {
	query := &StatusItemQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := svc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(statusvalidchange.Table, statusvalidchange.FieldID, id),
			sqlgraph.To(statusitem.Table, statusitem.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, statusvalidchange.ToStatusItemTable, statusvalidchange.ToStatusItemColumn),
		)
		fromV = sqlgraph.Neighbors(svc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *StatusValidChangeClient) Hooks() []Hook {
	return c.hooks.StatusValidChange
}

// SubscriptionTypeClient is a client for the SubscriptionType schema.
type SubscriptionTypeClient struct {
	config
}

// NewSubscriptionTypeClient returns a client for the SubscriptionType from the given config.
func NewSubscriptionTypeClient(c config) *SubscriptionTypeClient {
	return &SubscriptionTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `subscriptiontype.Hooks(f(g(h())))`.
func (c *SubscriptionTypeClient) Use(hooks ...Hook) {
	c.hooks.SubscriptionType = append(c.hooks.SubscriptionType, hooks...)
}

// Create returns a create builder for SubscriptionType.
func (c *SubscriptionTypeClient) Create() *SubscriptionTypeCreate {
	mutation := newSubscriptionTypeMutation(c.config, OpCreate)
	return &SubscriptionTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SubscriptionType entities.
func (c *SubscriptionTypeClient) CreateBulk(builders ...*SubscriptionTypeCreate) *SubscriptionTypeCreateBulk {
	return &SubscriptionTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SubscriptionType.
func (c *SubscriptionTypeClient) Update() *SubscriptionTypeUpdate {
	mutation := newSubscriptionTypeMutation(c.config, OpUpdate)
	return &SubscriptionTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SubscriptionTypeClient) UpdateOne(st *SubscriptionType) *SubscriptionTypeUpdateOne {
	mutation := newSubscriptionTypeMutation(c.config, OpUpdateOne, withSubscriptionType(st))
	return &SubscriptionTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SubscriptionTypeClient) UpdateOneID(id int) *SubscriptionTypeUpdateOne {
	mutation := newSubscriptionTypeMutation(c.config, OpUpdateOne, withSubscriptionTypeID(id))
	return &SubscriptionTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SubscriptionType.
func (c *SubscriptionTypeClient) Delete() *SubscriptionTypeDelete {
	mutation := newSubscriptionTypeMutation(c.config, OpDelete)
	return &SubscriptionTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SubscriptionTypeClient) DeleteOne(st *SubscriptionType) *SubscriptionTypeDeleteOne {
	return c.DeleteOneID(st.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SubscriptionTypeClient) DeleteOneID(id int) *SubscriptionTypeDeleteOne {
	builder := c.Delete().Where(subscriptiontype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SubscriptionTypeDeleteOne{builder}
}

// Query returns a query builder for SubscriptionType.
func (c *SubscriptionTypeClient) Query() *SubscriptionTypeQuery {
	return &SubscriptionTypeQuery{
		config: c.config,
	}
}

// Get returns a SubscriptionType entity by its id.
func (c *SubscriptionTypeClient) Get(ctx context.Context, id int) (*SubscriptionType, error) {
	return c.Query().Where(subscriptiontype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SubscriptionTypeClient) GetX(ctx context.Context, id int) *SubscriptionType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryParent queries the parent edge of a SubscriptionType.
func (c *SubscriptionTypeClient) QueryParent(st *SubscriptionType) *SubscriptionTypeQuery {
	query := &SubscriptionTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := st.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscriptiontype.Table, subscriptiontype.FieldID, id),
			sqlgraph.To(subscriptiontype.Table, subscriptiontype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, subscriptiontype.ParentTable, subscriptiontype.ParentColumn),
		)
		fromV = sqlgraph.Neighbors(st.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildren queries the children edge of a SubscriptionType.
func (c *SubscriptionTypeClient) QueryChildren(st *SubscriptionType) *SubscriptionTypeQuery {
	query := &SubscriptionTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := st.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscriptiontype.Table, subscriptiontype.FieldID, id),
			sqlgraph.To(subscriptiontype.Table, subscriptiontype.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, subscriptiontype.ChildrenTable, subscriptiontype.ChildrenColumn),
		)
		fromV = sqlgraph.Neighbors(st.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildSubscriptionTypes queries the child_subscription_types edge of a SubscriptionType.
func (c *SubscriptionTypeClient) QueryChildSubscriptionTypes(st *SubscriptionType) *SubscriptionTypeQuery {
	query := &SubscriptionTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := st.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscriptiontype.Table, subscriptiontype.FieldID, id),
			sqlgraph.To(subscriptiontype.Table, subscriptiontype.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, subscriptiontype.ChildSubscriptionTypesTable, subscriptiontype.ChildSubscriptionTypesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(st.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SubscriptionTypeClient) Hooks() []Hook {
	return c.hooks.SubscriptionType
}

// SupplierPrefOrderClient is a client for the SupplierPrefOrder schema.
type SupplierPrefOrderClient struct {
	config
}

// NewSupplierPrefOrderClient returns a client for the SupplierPrefOrder from the given config.
func NewSupplierPrefOrderClient(c config) *SupplierPrefOrderClient {
	return &SupplierPrefOrderClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `supplierpreforder.Hooks(f(g(h())))`.
func (c *SupplierPrefOrderClient) Use(hooks ...Hook) {
	c.hooks.SupplierPrefOrder = append(c.hooks.SupplierPrefOrder, hooks...)
}

// Create returns a create builder for SupplierPrefOrder.
func (c *SupplierPrefOrderClient) Create() *SupplierPrefOrderCreate {
	mutation := newSupplierPrefOrderMutation(c.config, OpCreate)
	return &SupplierPrefOrderCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SupplierPrefOrder entities.
func (c *SupplierPrefOrderClient) CreateBulk(builders ...*SupplierPrefOrderCreate) *SupplierPrefOrderCreateBulk {
	return &SupplierPrefOrderCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SupplierPrefOrder.
func (c *SupplierPrefOrderClient) Update() *SupplierPrefOrderUpdate {
	mutation := newSupplierPrefOrderMutation(c.config, OpUpdate)
	return &SupplierPrefOrderUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SupplierPrefOrderClient) UpdateOne(spo *SupplierPrefOrder) *SupplierPrefOrderUpdateOne {
	mutation := newSupplierPrefOrderMutation(c.config, OpUpdateOne, withSupplierPrefOrder(spo))
	return &SupplierPrefOrderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SupplierPrefOrderClient) UpdateOneID(id int) *SupplierPrefOrderUpdateOne {
	mutation := newSupplierPrefOrderMutation(c.config, OpUpdateOne, withSupplierPrefOrderID(id))
	return &SupplierPrefOrderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SupplierPrefOrder.
func (c *SupplierPrefOrderClient) Delete() *SupplierPrefOrderDelete {
	mutation := newSupplierPrefOrderMutation(c.config, OpDelete)
	return &SupplierPrefOrderDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SupplierPrefOrderClient) DeleteOne(spo *SupplierPrefOrder) *SupplierPrefOrderDeleteOne {
	return c.DeleteOneID(spo.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SupplierPrefOrderClient) DeleteOneID(id int) *SupplierPrefOrderDeleteOne {
	builder := c.Delete().Where(supplierpreforder.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SupplierPrefOrderDeleteOne{builder}
}

// Query returns a query builder for SupplierPrefOrder.
func (c *SupplierPrefOrderClient) Query() *SupplierPrefOrderQuery {
	return &SupplierPrefOrderQuery{
		config: c.config,
	}
}

// Get returns a SupplierPrefOrder entity by its id.
func (c *SupplierPrefOrderClient) Get(ctx context.Context, id int) (*SupplierPrefOrder, error) {
	return c.Query().Where(supplierpreforder.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SupplierPrefOrderClient) GetX(ctx context.Context, id int) *SupplierPrefOrder {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SupplierPrefOrderClient) Hooks() []Hook {
	return c.hooks.SupplierPrefOrder
}

// VarianceReasonClient is a client for the VarianceReason schema.
type VarianceReasonClient struct {
	config
}

// NewVarianceReasonClient returns a client for the VarianceReason from the given config.
func NewVarianceReasonClient(c config) *VarianceReasonClient {
	return &VarianceReasonClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `variancereason.Hooks(f(g(h())))`.
func (c *VarianceReasonClient) Use(hooks ...Hook) {
	c.hooks.VarianceReason = append(c.hooks.VarianceReason, hooks...)
}

// Create returns a create builder for VarianceReason.
func (c *VarianceReasonClient) Create() *VarianceReasonCreate {
	mutation := newVarianceReasonMutation(c.config, OpCreate)
	return &VarianceReasonCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of VarianceReason entities.
func (c *VarianceReasonClient) CreateBulk(builders ...*VarianceReasonCreate) *VarianceReasonCreateBulk {
	return &VarianceReasonCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for VarianceReason.
func (c *VarianceReasonClient) Update() *VarianceReasonUpdate {
	mutation := newVarianceReasonMutation(c.config, OpUpdate)
	return &VarianceReasonUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *VarianceReasonClient) UpdateOne(vr *VarianceReason) *VarianceReasonUpdateOne {
	mutation := newVarianceReasonMutation(c.config, OpUpdateOne, withVarianceReason(vr))
	return &VarianceReasonUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *VarianceReasonClient) UpdateOneID(id int) *VarianceReasonUpdateOne {
	mutation := newVarianceReasonMutation(c.config, OpUpdateOne, withVarianceReasonID(id))
	return &VarianceReasonUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for VarianceReason.
func (c *VarianceReasonClient) Delete() *VarianceReasonDelete {
	mutation := newVarianceReasonMutation(c.config, OpDelete)
	return &VarianceReasonDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *VarianceReasonClient) DeleteOne(vr *VarianceReason) *VarianceReasonDeleteOne {
	return c.DeleteOneID(vr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *VarianceReasonClient) DeleteOneID(id int) *VarianceReasonDeleteOne {
	builder := c.Delete().Where(variancereason.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &VarianceReasonDeleteOne{builder}
}

// Query returns a query builder for VarianceReason.
func (c *VarianceReasonClient) Query() *VarianceReasonQuery {
	return &VarianceReasonQuery{
		config: c.config,
	}
}

// Get returns a VarianceReason entity by its id.
func (c *VarianceReasonClient) Get(ctx context.Context, id int) (*VarianceReason, error) {
	return c.Query().Where(variancereason.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *VarianceReasonClient) GetX(ctx context.Context, id int) *VarianceReason {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *VarianceReasonClient) Hooks() []Hook {
	return c.hooks.VarianceReason
}
