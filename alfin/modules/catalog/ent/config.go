// Code generated by entc, DO NOT EDIT.

package ent

import (
	"entgo.io/ent"
	"entgo.io/ent/dialect"
)

// Option function to configure the client.
type Option func(*config)

// Config is the configuration for the client and its builder.
type config struct {
	// driver used for executing database requests.
	driver dialect.Driver
	// debug enable a debug logging.
	debug bool
	// log used for logging on debug mode.
	log func(...interface{})
	// hooks to execute on mutations.
	hooks *hooks
}

// hooks per client, for fast access.
type hooks struct {
	ContentAssocType           []ent.Hook
	ContentType                []ent.Hook
	CostComponentType          []ent.Hook
	CustomMethod               []ent.Hook
	CustomMethodType           []ent.Hook
	Enumeration                []ent.Hook
	EnumerationType            []ent.Hook
	FacilityAssocType          []ent.Hook
	FacilityGroup              []ent.Hook
	FacilityGroupType          []ent.Hook
	FacilityType               []ent.Hook
	GoodIdentificationType     []ent.Hook
	InventoryItemDetail        []ent.Hook
	InventoryItemType          []ent.Hook
	OrderAdjustment            []ent.Hook
	OrderContactMech           []ent.Hook
	OrderHeader                []ent.Hook
	OrderItem                  []ent.Hook
	OrderItemShipGroup         []ent.Hook
	OrderItemShipGroupAssoc    []ent.Hook
	OrderItemShipGrpInvRes     []ent.Hook
	OrderPaymentPreference     []ent.Hook
	OrderRole                  []ent.Hook
	OrderStatus                []ent.Hook
	ProdCatalogCategoryType    []ent.Hook
	ProdConfItemContentType    []ent.Hook
	Product                    []ent.Hook
	ProductAssoc               []ent.Hook
	ProductAssocType           []ent.Hook
	ProductCategory            []ent.Hook
	ProductCategoryContentType []ent.Hook
	ProductCategoryType        []ent.Hook
	ProductConfigItem          []ent.Hook
	ProductContentType         []ent.Hook
	ProductFeature             []ent.Hook
	ProductFeatureApplType     []ent.Hook
	ProductFeatureCategory     []ent.Hook
	ProductFeatureIactnType    []ent.Hook
	ProductFeatureType         []ent.Hook
	ProductMaintType           []ent.Hook
	ProductMeterType           []ent.Hook
	ProductPrice               []ent.Hook
	ProductPriceActionType     []ent.Hook
	ProductPricePurpose        []ent.Hook
	ProductPriceType           []ent.Hook
	ProductReview              []ent.Hook
	ProductStore               []ent.Hook
	ProductStoreGroup          []ent.Hook
	ProductType                []ent.Hook
	QuantityBreakType          []ent.Hook
	RejectionReason            []ent.Hook
	RoleType                   []ent.Hook
	ShipmentContactMechType    []ent.Hook
	ShipmentGatewayConfig      []ent.Hook
	ShipmentGatewayConfigType  []ent.Hook
	ShipmentGatewayDhl         []ent.Hook
	ShipmentGatewayFedex       []ent.Hook
	ShipmentGatewayUps         []ent.Hook
	ShipmentGatewayUsps        []ent.Hook
	ShipmentType               []ent.Hook
	StatusItem                 []ent.Hook
	StatusType                 []ent.Hook
	StatusValidChange          []ent.Hook
	SubscriptionType           []ent.Hook
	SupplierPrefOrder          []ent.Hook
	VarianceReason             []ent.Hook
}

// Options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...interface{})) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}
