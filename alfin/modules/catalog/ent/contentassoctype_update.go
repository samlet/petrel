// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/contentassoctype"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/predicate"
)

// ContentAssocTypeUpdate is the builder for updating ContentAssocType entities.
type ContentAssocTypeUpdate struct {
	config
	hooks    []Hook
	mutation *ContentAssocTypeMutation
}

// Where adds a new predicate for the ContentAssocTypeUpdate builder.
func (catu *ContentAssocTypeUpdate) Where(ps ...predicate.ContentAssocType) *ContentAssocTypeUpdate {
	catu.mutation.predicates = append(catu.mutation.predicates, ps...)
	return catu
}

// SetStringRef sets the "string_ref" field.
func (catu *ContentAssocTypeUpdate) SetStringRef(s string) *ContentAssocTypeUpdate {
	catu.mutation.SetStringRef(s)
	return catu
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (catu *ContentAssocTypeUpdate) SetNillableStringRef(s *string) *ContentAssocTypeUpdate {
	if s != nil {
		catu.SetStringRef(*s)
	}
	return catu
}

// ClearStringRef clears the value of the "string_ref" field.
func (catu *ContentAssocTypeUpdate) ClearStringRef() *ContentAssocTypeUpdate {
	catu.mutation.ClearStringRef()
	return catu
}

// SetDescription sets the "description" field.
func (catu *ContentAssocTypeUpdate) SetDescription(s string) *ContentAssocTypeUpdate {
	catu.mutation.SetDescription(s)
	return catu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (catu *ContentAssocTypeUpdate) SetNillableDescription(s *string) *ContentAssocTypeUpdate {
	if s != nil {
		catu.SetDescription(*s)
	}
	return catu
}

// ClearDescription clears the value of the "description" field.
func (catu *ContentAssocTypeUpdate) ClearDescription() *ContentAssocTypeUpdate {
	catu.mutation.ClearDescription()
	return catu
}

// Mutation returns the ContentAssocTypeMutation object of the builder.
func (catu *ContentAssocTypeUpdate) Mutation() *ContentAssocTypeMutation {
	return catu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (catu *ContentAssocTypeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	catu.defaults()
	if len(catu.hooks) == 0 {
		affected, err = catu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ContentAssocTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			catu.mutation = mutation
			affected, err = catu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(catu.hooks) - 1; i >= 0; i-- {
			mut = catu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, catu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (catu *ContentAssocTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := catu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (catu *ContentAssocTypeUpdate) Exec(ctx context.Context) error {
	_, err := catu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (catu *ContentAssocTypeUpdate) ExecX(ctx context.Context) {
	if err := catu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (catu *ContentAssocTypeUpdate) defaults() {
	if _, ok := catu.mutation.UpdateTime(); !ok {
		v := contentassoctype.UpdateDefaultUpdateTime()
		catu.mutation.SetUpdateTime(v)
	}
}

func (catu *ContentAssocTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   contentassoctype.Table,
			Columns: contentassoctype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: contentassoctype.FieldID,
			},
		},
	}
	if ps := catu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := catu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: contentassoctype.FieldUpdateTime,
		})
	}
	if value, ok := catu.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: contentassoctype.FieldStringRef,
		})
	}
	if catu.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: contentassoctype.FieldStringRef,
		})
	}
	if value, ok := catu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: contentassoctype.FieldDescription,
		})
	}
	if catu.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: contentassoctype.FieldDescription,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, catu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{contentassoctype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ContentAssocTypeUpdateOne is the builder for updating a single ContentAssocType entity.
type ContentAssocTypeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ContentAssocTypeMutation
}

// SetStringRef sets the "string_ref" field.
func (catuo *ContentAssocTypeUpdateOne) SetStringRef(s string) *ContentAssocTypeUpdateOne {
	catuo.mutation.SetStringRef(s)
	return catuo
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (catuo *ContentAssocTypeUpdateOne) SetNillableStringRef(s *string) *ContentAssocTypeUpdateOne {
	if s != nil {
		catuo.SetStringRef(*s)
	}
	return catuo
}

// ClearStringRef clears the value of the "string_ref" field.
func (catuo *ContentAssocTypeUpdateOne) ClearStringRef() *ContentAssocTypeUpdateOne {
	catuo.mutation.ClearStringRef()
	return catuo
}

// SetDescription sets the "description" field.
func (catuo *ContentAssocTypeUpdateOne) SetDescription(s string) *ContentAssocTypeUpdateOne {
	catuo.mutation.SetDescription(s)
	return catuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (catuo *ContentAssocTypeUpdateOne) SetNillableDescription(s *string) *ContentAssocTypeUpdateOne {
	if s != nil {
		catuo.SetDescription(*s)
	}
	return catuo
}

// ClearDescription clears the value of the "description" field.
func (catuo *ContentAssocTypeUpdateOne) ClearDescription() *ContentAssocTypeUpdateOne {
	catuo.mutation.ClearDescription()
	return catuo
}

// Mutation returns the ContentAssocTypeMutation object of the builder.
func (catuo *ContentAssocTypeUpdateOne) Mutation() *ContentAssocTypeMutation {
	return catuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (catuo *ContentAssocTypeUpdateOne) Select(field string, fields ...string) *ContentAssocTypeUpdateOne {
	catuo.fields = append([]string{field}, fields...)
	return catuo
}

// Save executes the query and returns the updated ContentAssocType entity.
func (catuo *ContentAssocTypeUpdateOne) Save(ctx context.Context) (*ContentAssocType, error) {
	var (
		err  error
		node *ContentAssocType
	)
	catuo.defaults()
	if len(catuo.hooks) == 0 {
		node, err = catuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ContentAssocTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			catuo.mutation = mutation
			node, err = catuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(catuo.hooks) - 1; i >= 0; i-- {
			mut = catuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, catuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (catuo *ContentAssocTypeUpdateOne) SaveX(ctx context.Context) *ContentAssocType {
	node, err := catuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (catuo *ContentAssocTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := catuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (catuo *ContentAssocTypeUpdateOne) ExecX(ctx context.Context) {
	if err := catuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (catuo *ContentAssocTypeUpdateOne) defaults() {
	if _, ok := catuo.mutation.UpdateTime(); !ok {
		v := contentassoctype.UpdateDefaultUpdateTime()
		catuo.mutation.SetUpdateTime(v)
	}
}

func (catuo *ContentAssocTypeUpdateOne) sqlSave(ctx context.Context) (_node *ContentAssocType, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   contentassoctype.Table,
			Columns: contentassoctype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: contentassoctype.FieldID,
			},
		},
	}
	id, ok := catuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ContentAssocType.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := catuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, contentassoctype.FieldID)
		for _, f := range fields {
			if !contentassoctype.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != contentassoctype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := catuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := catuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: contentassoctype.FieldUpdateTime,
		})
	}
	if value, ok := catuo.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: contentassoctype.FieldStringRef,
		})
	}
	if catuo.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: contentassoctype.FieldStringRef,
		})
	}
	if value, ok := catuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: contentassoctype.FieldDescription,
		})
	}
	if catuo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: contentassoctype.FieldDescription,
		})
	}
	_node = &ContentAssocType{config: catuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, catuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{contentassoctype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
