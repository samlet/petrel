// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/contenttype"
)

// ContentTypeCreate is the builder for creating a ContentType entity.
type ContentTypeCreate struct {
	config
	mutation *ContentTypeMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (ctc *ContentTypeCreate) SetCreateTime(t time.Time) *ContentTypeCreate {
	ctc.mutation.SetCreateTime(t)
	return ctc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (ctc *ContentTypeCreate) SetNillableCreateTime(t *time.Time) *ContentTypeCreate {
	if t != nil {
		ctc.SetCreateTime(*t)
	}
	return ctc
}

// SetUpdateTime sets the "update_time" field.
func (ctc *ContentTypeCreate) SetUpdateTime(t time.Time) *ContentTypeCreate {
	ctc.mutation.SetUpdateTime(t)
	return ctc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (ctc *ContentTypeCreate) SetNillableUpdateTime(t *time.Time) *ContentTypeCreate {
	if t != nil {
		ctc.SetUpdateTime(*t)
	}
	return ctc
}

// SetStringRef sets the "string_ref" field.
func (ctc *ContentTypeCreate) SetStringRef(s string) *ContentTypeCreate {
	ctc.mutation.SetStringRef(s)
	return ctc
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (ctc *ContentTypeCreate) SetNillableStringRef(s *string) *ContentTypeCreate {
	if s != nil {
		ctc.SetStringRef(*s)
	}
	return ctc
}

// SetHasTable sets the "has_table" field.
func (ctc *ContentTypeCreate) SetHasTable(ct contenttype.HasTable) *ContentTypeCreate {
	ctc.mutation.SetHasTable(ct)
	return ctc
}

// SetNillableHasTable sets the "has_table" field if the given value is not nil.
func (ctc *ContentTypeCreate) SetNillableHasTable(ct *contenttype.HasTable) *ContentTypeCreate {
	if ct != nil {
		ctc.SetHasTable(*ct)
	}
	return ctc
}

// SetDescription sets the "description" field.
func (ctc *ContentTypeCreate) SetDescription(s string) *ContentTypeCreate {
	ctc.mutation.SetDescription(s)
	return ctc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ctc *ContentTypeCreate) SetNillableDescription(s *string) *ContentTypeCreate {
	if s != nil {
		ctc.SetDescription(*s)
	}
	return ctc
}

// SetParentID sets the "parent" edge to the ContentType entity by ID.
func (ctc *ContentTypeCreate) SetParentID(id int) *ContentTypeCreate {
	ctc.mutation.SetParentID(id)
	return ctc
}

// SetNillableParentID sets the "parent" edge to the ContentType entity by ID if the given value is not nil.
func (ctc *ContentTypeCreate) SetNillableParentID(id *int) *ContentTypeCreate {
	if id != nil {
		ctc = ctc.SetParentID(*id)
	}
	return ctc
}

// SetParent sets the "parent" edge to the ContentType entity.
func (ctc *ContentTypeCreate) SetParent(c *ContentType) *ContentTypeCreate {
	return ctc.SetParentID(c.ID)
}

// AddChildIDs adds the "children" edge to the ContentType entity by IDs.
func (ctc *ContentTypeCreate) AddChildIDs(ids ...int) *ContentTypeCreate {
	ctc.mutation.AddChildIDs(ids...)
	return ctc
}

// AddChildren adds the "children" edges to the ContentType entity.
func (ctc *ContentTypeCreate) AddChildren(c ...*ContentType) *ContentTypeCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ctc.AddChildIDs(ids...)
}

// AddChildContentTypeIDs adds the "child_content_types" edge to the ContentType entity by IDs.
func (ctc *ContentTypeCreate) AddChildContentTypeIDs(ids ...int) *ContentTypeCreate {
	ctc.mutation.AddChildContentTypeIDs(ids...)
	return ctc
}

// AddChildContentTypes adds the "child_content_types" edges to the ContentType entity.
func (ctc *ContentTypeCreate) AddChildContentTypes(c ...*ContentType) *ContentTypeCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ctc.AddChildContentTypeIDs(ids...)
}

// Mutation returns the ContentTypeMutation object of the builder.
func (ctc *ContentTypeCreate) Mutation() *ContentTypeMutation {
	return ctc.mutation
}

// Save creates the ContentType in the database.
func (ctc *ContentTypeCreate) Save(ctx context.Context) (*ContentType, error) {
	var (
		err  error
		node *ContentType
	)
	ctc.defaults()
	if len(ctc.hooks) == 0 {
		if err = ctc.check(); err != nil {
			return nil, err
		}
		node, err = ctc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ContentTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ctc.check(); err != nil {
				return nil, err
			}
			ctc.mutation = mutation
			if node, err = ctc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ctc.hooks) - 1; i >= 0; i-- {
			mut = ctc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ctc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ctc *ContentTypeCreate) SaveX(ctx context.Context) *ContentType {
	v, err := ctc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (ctc *ContentTypeCreate) defaults() {
	if _, ok := ctc.mutation.CreateTime(); !ok {
		v := contenttype.DefaultCreateTime()
		ctc.mutation.SetCreateTime(v)
	}
	if _, ok := ctc.mutation.UpdateTime(); !ok {
		v := contenttype.DefaultUpdateTime()
		ctc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ctc *ContentTypeCreate) check() error {
	if _, ok := ctc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New("ent: missing required field \"create_time\"")}
	}
	if _, ok := ctc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New("ent: missing required field \"update_time\"")}
	}
	if v, ok := ctc.mutation.HasTable(); ok {
		if err := contenttype.HasTableValidator(v); err != nil {
			return &ValidationError{Name: "has_table", err: fmt.Errorf("ent: validator failed for field \"has_table\": %w", err)}
		}
	}
	return nil
}

func (ctc *ContentTypeCreate) sqlSave(ctx context.Context) (*ContentType, error) {
	_node, _spec := ctc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ctc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (ctc *ContentTypeCreate) createSpec() (*ContentType, *sqlgraph.CreateSpec) {
	var (
		_node = &ContentType{config: ctc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: contenttype.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: contenttype.FieldID,
			},
		}
	)
	if value, ok := ctc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: contenttype.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := ctc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: contenttype.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := ctc.mutation.StringRef(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: contenttype.FieldStringRef,
		})
		_node.StringRef = value
	}
	if value, ok := ctc.mutation.HasTable(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: contenttype.FieldHasTable,
		})
		_node.HasTable = value
	}
	if value, ok := ctc.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: contenttype.FieldDescription,
		})
		_node.Description = value
	}
	if nodes := ctc.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contenttype.ParentTable,
			Columns: []string{contenttype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: contenttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.content_type_children = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ctc.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   contenttype.ChildrenTable,
			Columns: []string{contenttype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: contenttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ctc.mutation.ChildContentTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   contenttype.ChildContentTypesTable,
			Columns: contenttype.ChildContentTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: contenttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ContentTypeCreateBulk is the builder for creating many ContentType entities in bulk.
type ContentTypeCreateBulk struct {
	config
	builders []*ContentTypeCreate
}

// Save creates the ContentType entities in the database.
func (ctcb *ContentTypeCreateBulk) Save(ctx context.Context) ([]*ContentType, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ctcb.builders))
	nodes := make([]*ContentType, len(ctcb.builders))
	mutators := make([]Mutator, len(ctcb.builders))
	for i := range ctcb.builders {
		func(i int, root context.Context) {
			builder := ctcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ContentTypeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ctcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ctcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ctcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ctcb *ContentTypeCreateBulk) SaveX(ctx context.Context) []*ContentType {
	v, err := ctcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
