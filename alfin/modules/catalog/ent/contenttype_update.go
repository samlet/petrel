// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/contenttype"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/predicate"
)

// ContentTypeUpdate is the builder for updating ContentType entities.
type ContentTypeUpdate struct {
	config
	hooks    []Hook
	mutation *ContentTypeMutation
}

// Where adds a new predicate for the ContentTypeUpdate builder.
func (ctu *ContentTypeUpdate) Where(ps ...predicate.ContentType) *ContentTypeUpdate {
	ctu.mutation.predicates = append(ctu.mutation.predicates, ps...)
	return ctu
}

// SetStringRef sets the "string_ref" field.
func (ctu *ContentTypeUpdate) SetStringRef(s string) *ContentTypeUpdate {
	ctu.mutation.SetStringRef(s)
	return ctu
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (ctu *ContentTypeUpdate) SetNillableStringRef(s *string) *ContentTypeUpdate {
	if s != nil {
		ctu.SetStringRef(*s)
	}
	return ctu
}

// ClearStringRef clears the value of the "string_ref" field.
func (ctu *ContentTypeUpdate) ClearStringRef() *ContentTypeUpdate {
	ctu.mutation.ClearStringRef()
	return ctu
}

// SetHasTable sets the "has_table" field.
func (ctu *ContentTypeUpdate) SetHasTable(ct contenttype.HasTable) *ContentTypeUpdate {
	ctu.mutation.SetHasTable(ct)
	return ctu
}

// SetNillableHasTable sets the "has_table" field if the given value is not nil.
func (ctu *ContentTypeUpdate) SetNillableHasTable(ct *contenttype.HasTable) *ContentTypeUpdate {
	if ct != nil {
		ctu.SetHasTable(*ct)
	}
	return ctu
}

// ClearHasTable clears the value of the "has_table" field.
func (ctu *ContentTypeUpdate) ClearHasTable() *ContentTypeUpdate {
	ctu.mutation.ClearHasTable()
	return ctu
}

// SetDescription sets the "description" field.
func (ctu *ContentTypeUpdate) SetDescription(s string) *ContentTypeUpdate {
	ctu.mutation.SetDescription(s)
	return ctu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ctu *ContentTypeUpdate) SetNillableDescription(s *string) *ContentTypeUpdate {
	if s != nil {
		ctu.SetDescription(*s)
	}
	return ctu
}

// ClearDescription clears the value of the "description" field.
func (ctu *ContentTypeUpdate) ClearDescription() *ContentTypeUpdate {
	ctu.mutation.ClearDescription()
	return ctu
}

// SetParentID sets the "parent" edge to the ContentType entity by ID.
func (ctu *ContentTypeUpdate) SetParentID(id int) *ContentTypeUpdate {
	ctu.mutation.SetParentID(id)
	return ctu
}

// SetNillableParentID sets the "parent" edge to the ContentType entity by ID if the given value is not nil.
func (ctu *ContentTypeUpdate) SetNillableParentID(id *int) *ContentTypeUpdate {
	if id != nil {
		ctu = ctu.SetParentID(*id)
	}
	return ctu
}

// SetParent sets the "parent" edge to the ContentType entity.
func (ctu *ContentTypeUpdate) SetParent(c *ContentType) *ContentTypeUpdate {
	return ctu.SetParentID(c.ID)
}

// AddChildIDs adds the "children" edge to the ContentType entity by IDs.
func (ctu *ContentTypeUpdate) AddChildIDs(ids ...int) *ContentTypeUpdate {
	ctu.mutation.AddChildIDs(ids...)
	return ctu
}

// AddChildren adds the "children" edges to the ContentType entity.
func (ctu *ContentTypeUpdate) AddChildren(c ...*ContentType) *ContentTypeUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ctu.AddChildIDs(ids...)
}

// AddChildContentTypeIDs adds the "child_content_types" edge to the ContentType entity by IDs.
func (ctu *ContentTypeUpdate) AddChildContentTypeIDs(ids ...int) *ContentTypeUpdate {
	ctu.mutation.AddChildContentTypeIDs(ids...)
	return ctu
}

// AddChildContentTypes adds the "child_content_types" edges to the ContentType entity.
func (ctu *ContentTypeUpdate) AddChildContentTypes(c ...*ContentType) *ContentTypeUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ctu.AddChildContentTypeIDs(ids...)
}

// Mutation returns the ContentTypeMutation object of the builder.
func (ctu *ContentTypeUpdate) Mutation() *ContentTypeMutation {
	return ctu.mutation
}

// ClearParent clears the "parent" edge to the ContentType entity.
func (ctu *ContentTypeUpdate) ClearParent() *ContentTypeUpdate {
	ctu.mutation.ClearParent()
	return ctu
}

// ClearChildren clears all "children" edges to the ContentType entity.
func (ctu *ContentTypeUpdate) ClearChildren() *ContentTypeUpdate {
	ctu.mutation.ClearChildren()
	return ctu
}

// RemoveChildIDs removes the "children" edge to ContentType entities by IDs.
func (ctu *ContentTypeUpdate) RemoveChildIDs(ids ...int) *ContentTypeUpdate {
	ctu.mutation.RemoveChildIDs(ids...)
	return ctu
}

// RemoveChildren removes "children" edges to ContentType entities.
func (ctu *ContentTypeUpdate) RemoveChildren(c ...*ContentType) *ContentTypeUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ctu.RemoveChildIDs(ids...)
}

// ClearChildContentTypes clears all "child_content_types" edges to the ContentType entity.
func (ctu *ContentTypeUpdate) ClearChildContentTypes() *ContentTypeUpdate {
	ctu.mutation.ClearChildContentTypes()
	return ctu
}

// RemoveChildContentTypeIDs removes the "child_content_types" edge to ContentType entities by IDs.
func (ctu *ContentTypeUpdate) RemoveChildContentTypeIDs(ids ...int) *ContentTypeUpdate {
	ctu.mutation.RemoveChildContentTypeIDs(ids...)
	return ctu
}

// RemoveChildContentTypes removes "child_content_types" edges to ContentType entities.
func (ctu *ContentTypeUpdate) RemoveChildContentTypes(c ...*ContentType) *ContentTypeUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ctu.RemoveChildContentTypeIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ctu *ContentTypeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	ctu.defaults()
	if len(ctu.hooks) == 0 {
		if err = ctu.check(); err != nil {
			return 0, err
		}
		affected, err = ctu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ContentTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ctu.check(); err != nil {
				return 0, err
			}
			ctu.mutation = mutation
			affected, err = ctu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ctu.hooks) - 1; i >= 0; i-- {
			mut = ctu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ctu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ctu *ContentTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := ctu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ctu *ContentTypeUpdate) Exec(ctx context.Context) error {
	_, err := ctu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ctu *ContentTypeUpdate) ExecX(ctx context.Context) {
	if err := ctu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ctu *ContentTypeUpdate) defaults() {
	if _, ok := ctu.mutation.UpdateTime(); !ok {
		v := contenttype.UpdateDefaultUpdateTime()
		ctu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ctu *ContentTypeUpdate) check() error {
	if v, ok := ctu.mutation.HasTable(); ok {
		if err := contenttype.HasTableValidator(v); err != nil {
			return &ValidationError{Name: "has_table", err: fmt.Errorf("ent: validator failed for field \"has_table\": %w", err)}
		}
	}
	return nil
}

func (ctu *ContentTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   contenttype.Table,
			Columns: contenttype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: contenttype.FieldID,
			},
		},
	}
	if ps := ctu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ctu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: contenttype.FieldUpdateTime,
		})
	}
	if value, ok := ctu.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: contenttype.FieldStringRef,
		})
	}
	if ctu.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: contenttype.FieldStringRef,
		})
	}
	if value, ok := ctu.mutation.HasTable(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: contenttype.FieldHasTable,
		})
	}
	if ctu.mutation.HasTableCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: contenttype.FieldHasTable,
		})
	}
	if value, ok := ctu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: contenttype.FieldDescription,
		})
	}
	if ctu.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: contenttype.FieldDescription,
		})
	}
	if ctu.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contenttype.ParentTable,
			Columns: []string{contenttype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: contenttype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ctu.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contenttype.ParentTable,
			Columns: []string{contenttype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: contenttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ctu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   contenttype.ChildrenTable,
			Columns: []string{contenttype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: contenttype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ctu.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !ctu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   contenttype.ChildrenTable,
			Columns: []string{contenttype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: contenttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ctu.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   contenttype.ChildrenTable,
			Columns: []string{contenttype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: contenttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ctu.mutation.ChildContentTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   contenttype.ChildContentTypesTable,
			Columns: contenttype.ChildContentTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: contenttype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ctu.mutation.RemovedChildContentTypesIDs(); len(nodes) > 0 && !ctu.mutation.ChildContentTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   contenttype.ChildContentTypesTable,
			Columns: contenttype.ChildContentTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: contenttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ctu.mutation.ChildContentTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   contenttype.ChildContentTypesTable,
			Columns: contenttype.ChildContentTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: contenttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ctu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{contenttype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ContentTypeUpdateOne is the builder for updating a single ContentType entity.
type ContentTypeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ContentTypeMutation
}

// SetStringRef sets the "string_ref" field.
func (ctuo *ContentTypeUpdateOne) SetStringRef(s string) *ContentTypeUpdateOne {
	ctuo.mutation.SetStringRef(s)
	return ctuo
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (ctuo *ContentTypeUpdateOne) SetNillableStringRef(s *string) *ContentTypeUpdateOne {
	if s != nil {
		ctuo.SetStringRef(*s)
	}
	return ctuo
}

// ClearStringRef clears the value of the "string_ref" field.
func (ctuo *ContentTypeUpdateOne) ClearStringRef() *ContentTypeUpdateOne {
	ctuo.mutation.ClearStringRef()
	return ctuo
}

// SetHasTable sets the "has_table" field.
func (ctuo *ContentTypeUpdateOne) SetHasTable(ct contenttype.HasTable) *ContentTypeUpdateOne {
	ctuo.mutation.SetHasTable(ct)
	return ctuo
}

// SetNillableHasTable sets the "has_table" field if the given value is not nil.
func (ctuo *ContentTypeUpdateOne) SetNillableHasTable(ct *contenttype.HasTable) *ContentTypeUpdateOne {
	if ct != nil {
		ctuo.SetHasTable(*ct)
	}
	return ctuo
}

// ClearHasTable clears the value of the "has_table" field.
func (ctuo *ContentTypeUpdateOne) ClearHasTable() *ContentTypeUpdateOne {
	ctuo.mutation.ClearHasTable()
	return ctuo
}

// SetDescription sets the "description" field.
func (ctuo *ContentTypeUpdateOne) SetDescription(s string) *ContentTypeUpdateOne {
	ctuo.mutation.SetDescription(s)
	return ctuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ctuo *ContentTypeUpdateOne) SetNillableDescription(s *string) *ContentTypeUpdateOne {
	if s != nil {
		ctuo.SetDescription(*s)
	}
	return ctuo
}

// ClearDescription clears the value of the "description" field.
func (ctuo *ContentTypeUpdateOne) ClearDescription() *ContentTypeUpdateOne {
	ctuo.mutation.ClearDescription()
	return ctuo
}

// SetParentID sets the "parent" edge to the ContentType entity by ID.
func (ctuo *ContentTypeUpdateOne) SetParentID(id int) *ContentTypeUpdateOne {
	ctuo.mutation.SetParentID(id)
	return ctuo
}

// SetNillableParentID sets the "parent" edge to the ContentType entity by ID if the given value is not nil.
func (ctuo *ContentTypeUpdateOne) SetNillableParentID(id *int) *ContentTypeUpdateOne {
	if id != nil {
		ctuo = ctuo.SetParentID(*id)
	}
	return ctuo
}

// SetParent sets the "parent" edge to the ContentType entity.
func (ctuo *ContentTypeUpdateOne) SetParent(c *ContentType) *ContentTypeUpdateOne {
	return ctuo.SetParentID(c.ID)
}

// AddChildIDs adds the "children" edge to the ContentType entity by IDs.
func (ctuo *ContentTypeUpdateOne) AddChildIDs(ids ...int) *ContentTypeUpdateOne {
	ctuo.mutation.AddChildIDs(ids...)
	return ctuo
}

// AddChildren adds the "children" edges to the ContentType entity.
func (ctuo *ContentTypeUpdateOne) AddChildren(c ...*ContentType) *ContentTypeUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ctuo.AddChildIDs(ids...)
}

// AddChildContentTypeIDs adds the "child_content_types" edge to the ContentType entity by IDs.
func (ctuo *ContentTypeUpdateOne) AddChildContentTypeIDs(ids ...int) *ContentTypeUpdateOne {
	ctuo.mutation.AddChildContentTypeIDs(ids...)
	return ctuo
}

// AddChildContentTypes adds the "child_content_types" edges to the ContentType entity.
func (ctuo *ContentTypeUpdateOne) AddChildContentTypes(c ...*ContentType) *ContentTypeUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ctuo.AddChildContentTypeIDs(ids...)
}

// Mutation returns the ContentTypeMutation object of the builder.
func (ctuo *ContentTypeUpdateOne) Mutation() *ContentTypeMutation {
	return ctuo.mutation
}

// ClearParent clears the "parent" edge to the ContentType entity.
func (ctuo *ContentTypeUpdateOne) ClearParent() *ContentTypeUpdateOne {
	ctuo.mutation.ClearParent()
	return ctuo
}

// ClearChildren clears all "children" edges to the ContentType entity.
func (ctuo *ContentTypeUpdateOne) ClearChildren() *ContentTypeUpdateOne {
	ctuo.mutation.ClearChildren()
	return ctuo
}

// RemoveChildIDs removes the "children" edge to ContentType entities by IDs.
func (ctuo *ContentTypeUpdateOne) RemoveChildIDs(ids ...int) *ContentTypeUpdateOne {
	ctuo.mutation.RemoveChildIDs(ids...)
	return ctuo
}

// RemoveChildren removes "children" edges to ContentType entities.
func (ctuo *ContentTypeUpdateOne) RemoveChildren(c ...*ContentType) *ContentTypeUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ctuo.RemoveChildIDs(ids...)
}

// ClearChildContentTypes clears all "child_content_types" edges to the ContentType entity.
func (ctuo *ContentTypeUpdateOne) ClearChildContentTypes() *ContentTypeUpdateOne {
	ctuo.mutation.ClearChildContentTypes()
	return ctuo
}

// RemoveChildContentTypeIDs removes the "child_content_types" edge to ContentType entities by IDs.
func (ctuo *ContentTypeUpdateOne) RemoveChildContentTypeIDs(ids ...int) *ContentTypeUpdateOne {
	ctuo.mutation.RemoveChildContentTypeIDs(ids...)
	return ctuo
}

// RemoveChildContentTypes removes "child_content_types" edges to ContentType entities.
func (ctuo *ContentTypeUpdateOne) RemoveChildContentTypes(c ...*ContentType) *ContentTypeUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ctuo.RemoveChildContentTypeIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ctuo *ContentTypeUpdateOne) Select(field string, fields ...string) *ContentTypeUpdateOne {
	ctuo.fields = append([]string{field}, fields...)
	return ctuo
}

// Save executes the query and returns the updated ContentType entity.
func (ctuo *ContentTypeUpdateOne) Save(ctx context.Context) (*ContentType, error) {
	var (
		err  error
		node *ContentType
	)
	ctuo.defaults()
	if len(ctuo.hooks) == 0 {
		if err = ctuo.check(); err != nil {
			return nil, err
		}
		node, err = ctuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ContentTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ctuo.check(); err != nil {
				return nil, err
			}
			ctuo.mutation = mutation
			node, err = ctuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ctuo.hooks) - 1; i >= 0; i-- {
			mut = ctuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ctuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ctuo *ContentTypeUpdateOne) SaveX(ctx context.Context) *ContentType {
	node, err := ctuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ctuo *ContentTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := ctuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ctuo *ContentTypeUpdateOne) ExecX(ctx context.Context) {
	if err := ctuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ctuo *ContentTypeUpdateOne) defaults() {
	if _, ok := ctuo.mutation.UpdateTime(); !ok {
		v := contenttype.UpdateDefaultUpdateTime()
		ctuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ctuo *ContentTypeUpdateOne) check() error {
	if v, ok := ctuo.mutation.HasTable(); ok {
		if err := contenttype.HasTableValidator(v); err != nil {
			return &ValidationError{Name: "has_table", err: fmt.Errorf("ent: validator failed for field \"has_table\": %w", err)}
		}
	}
	return nil
}

func (ctuo *ContentTypeUpdateOne) sqlSave(ctx context.Context) (_node *ContentType, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   contenttype.Table,
			Columns: contenttype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: contenttype.FieldID,
			},
		},
	}
	id, ok := ctuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ContentType.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := ctuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, contenttype.FieldID)
		for _, f := range fields {
			if !contenttype.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != contenttype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ctuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ctuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: contenttype.FieldUpdateTime,
		})
	}
	if value, ok := ctuo.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: contenttype.FieldStringRef,
		})
	}
	if ctuo.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: contenttype.FieldStringRef,
		})
	}
	if value, ok := ctuo.mutation.HasTable(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: contenttype.FieldHasTable,
		})
	}
	if ctuo.mutation.HasTableCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: contenttype.FieldHasTable,
		})
	}
	if value, ok := ctuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: contenttype.FieldDescription,
		})
	}
	if ctuo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: contenttype.FieldDescription,
		})
	}
	if ctuo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contenttype.ParentTable,
			Columns: []string{contenttype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: contenttype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ctuo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contenttype.ParentTable,
			Columns: []string{contenttype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: contenttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ctuo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   contenttype.ChildrenTable,
			Columns: []string{contenttype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: contenttype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ctuo.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !ctuo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   contenttype.ChildrenTable,
			Columns: []string{contenttype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: contenttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ctuo.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   contenttype.ChildrenTable,
			Columns: []string{contenttype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: contenttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ctuo.mutation.ChildContentTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   contenttype.ChildContentTypesTable,
			Columns: contenttype.ChildContentTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: contenttype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ctuo.mutation.RemovedChildContentTypesIDs(); len(nodes) > 0 && !ctuo.mutation.ChildContentTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   contenttype.ChildContentTypesTable,
			Columns: contenttype.ChildContentTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: contenttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ctuo.mutation.ChildContentTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   contenttype.ChildContentTypesTable,
			Columns: contenttype.ChildContentTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: contenttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ContentType{config: ctuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ctuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{contenttype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
