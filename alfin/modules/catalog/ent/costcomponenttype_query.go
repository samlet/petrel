// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/costcomponenttype"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/predicate"
)

// CostComponentTypeQuery is the builder for querying CostComponentType entities.
type CostComponentTypeQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.CostComponentType
	// eager-loading edges.
	withParent                  *CostComponentTypeQuery
	withChildren                *CostComponentTypeQuery
	withChildCostComponentTypes *CostComponentTypeQuery
	withFKs                     bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the CostComponentTypeQuery builder.
func (cctq *CostComponentTypeQuery) Where(ps ...predicate.CostComponentType) *CostComponentTypeQuery {
	cctq.predicates = append(cctq.predicates, ps...)
	return cctq
}

// Limit adds a limit step to the query.
func (cctq *CostComponentTypeQuery) Limit(limit int) *CostComponentTypeQuery {
	cctq.limit = &limit
	return cctq
}

// Offset adds an offset step to the query.
func (cctq *CostComponentTypeQuery) Offset(offset int) *CostComponentTypeQuery {
	cctq.offset = &offset
	return cctq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (cctq *CostComponentTypeQuery) Unique(unique bool) *CostComponentTypeQuery {
	cctq.unique = &unique
	return cctq
}

// Order adds an order step to the query.
func (cctq *CostComponentTypeQuery) Order(o ...OrderFunc) *CostComponentTypeQuery {
	cctq.order = append(cctq.order, o...)
	return cctq
}

// QueryParent chains the current query on the "parent" edge.
func (cctq *CostComponentTypeQuery) QueryParent() *CostComponentTypeQuery {
	query := &CostComponentTypeQuery{config: cctq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cctq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cctq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(costcomponenttype.Table, costcomponenttype.FieldID, selector),
			sqlgraph.To(costcomponenttype.Table, costcomponenttype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, costcomponenttype.ParentTable, costcomponenttype.ParentColumn),
		)
		fromU = sqlgraph.SetNeighbors(cctq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryChildren chains the current query on the "children" edge.
func (cctq *CostComponentTypeQuery) QueryChildren() *CostComponentTypeQuery {
	query := &CostComponentTypeQuery{config: cctq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cctq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cctq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(costcomponenttype.Table, costcomponenttype.FieldID, selector),
			sqlgraph.To(costcomponenttype.Table, costcomponenttype.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, costcomponenttype.ChildrenTable, costcomponenttype.ChildrenColumn),
		)
		fromU = sqlgraph.SetNeighbors(cctq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryChildCostComponentTypes chains the current query on the "child_cost_component_types" edge.
func (cctq *CostComponentTypeQuery) QueryChildCostComponentTypes() *CostComponentTypeQuery {
	query := &CostComponentTypeQuery{config: cctq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cctq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cctq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(costcomponenttype.Table, costcomponenttype.FieldID, selector),
			sqlgraph.To(costcomponenttype.Table, costcomponenttype.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, costcomponenttype.ChildCostComponentTypesTable, costcomponenttype.ChildCostComponentTypesPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(cctq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first CostComponentType entity from the query.
// Returns a *NotFoundError when no CostComponentType was found.
func (cctq *CostComponentTypeQuery) First(ctx context.Context) (*CostComponentType, error) {
	nodes, err := cctq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{costcomponenttype.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (cctq *CostComponentTypeQuery) FirstX(ctx context.Context) *CostComponentType {
	node, err := cctq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first CostComponentType ID from the query.
// Returns a *NotFoundError when no CostComponentType ID was found.
func (cctq *CostComponentTypeQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = cctq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{costcomponenttype.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (cctq *CostComponentTypeQuery) FirstIDX(ctx context.Context) int {
	id, err := cctq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single CostComponentType entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one CostComponentType entity is not found.
// Returns a *NotFoundError when no CostComponentType entities are found.
func (cctq *CostComponentTypeQuery) Only(ctx context.Context) (*CostComponentType, error) {
	nodes, err := cctq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{costcomponenttype.Label}
	default:
		return nil, &NotSingularError{costcomponenttype.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (cctq *CostComponentTypeQuery) OnlyX(ctx context.Context) *CostComponentType {
	node, err := cctq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only CostComponentType ID in the query.
// Returns a *NotSingularError when exactly one CostComponentType ID is not found.
// Returns a *NotFoundError when no entities are found.
func (cctq *CostComponentTypeQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = cctq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{costcomponenttype.Label}
	default:
		err = &NotSingularError{costcomponenttype.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (cctq *CostComponentTypeQuery) OnlyIDX(ctx context.Context) int {
	id, err := cctq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of CostComponentTypes.
func (cctq *CostComponentTypeQuery) All(ctx context.Context) ([]*CostComponentType, error) {
	if err := cctq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return cctq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (cctq *CostComponentTypeQuery) AllX(ctx context.Context) []*CostComponentType {
	nodes, err := cctq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of CostComponentType IDs.
func (cctq *CostComponentTypeQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := cctq.Select(costcomponenttype.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (cctq *CostComponentTypeQuery) IDsX(ctx context.Context) []int {
	ids, err := cctq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (cctq *CostComponentTypeQuery) Count(ctx context.Context) (int, error) {
	if err := cctq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return cctq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (cctq *CostComponentTypeQuery) CountX(ctx context.Context) int {
	count, err := cctq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (cctq *CostComponentTypeQuery) Exist(ctx context.Context) (bool, error) {
	if err := cctq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return cctq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (cctq *CostComponentTypeQuery) ExistX(ctx context.Context) bool {
	exist, err := cctq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the CostComponentTypeQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (cctq *CostComponentTypeQuery) Clone() *CostComponentTypeQuery {
	if cctq == nil {
		return nil
	}
	return &CostComponentTypeQuery{
		config:                      cctq.config,
		limit:                       cctq.limit,
		offset:                      cctq.offset,
		order:                       append([]OrderFunc{}, cctq.order...),
		predicates:                  append([]predicate.CostComponentType{}, cctq.predicates...),
		withParent:                  cctq.withParent.Clone(),
		withChildren:                cctq.withChildren.Clone(),
		withChildCostComponentTypes: cctq.withChildCostComponentTypes.Clone(),
		// clone intermediate query.
		sql:  cctq.sql.Clone(),
		path: cctq.path,
	}
}

// WithParent tells the query-builder to eager-load the nodes that are connected to
// the "parent" edge. The optional arguments are used to configure the query builder of the edge.
func (cctq *CostComponentTypeQuery) WithParent(opts ...func(*CostComponentTypeQuery)) *CostComponentTypeQuery {
	query := &CostComponentTypeQuery{config: cctq.config}
	for _, opt := range opts {
		opt(query)
	}
	cctq.withParent = query
	return cctq
}

// WithChildren tells the query-builder to eager-load the nodes that are connected to
// the "children" edge. The optional arguments are used to configure the query builder of the edge.
func (cctq *CostComponentTypeQuery) WithChildren(opts ...func(*CostComponentTypeQuery)) *CostComponentTypeQuery {
	query := &CostComponentTypeQuery{config: cctq.config}
	for _, opt := range opts {
		opt(query)
	}
	cctq.withChildren = query
	return cctq
}

// WithChildCostComponentTypes tells the query-builder to eager-load the nodes that are connected to
// the "child_cost_component_types" edge. The optional arguments are used to configure the query builder of the edge.
func (cctq *CostComponentTypeQuery) WithChildCostComponentTypes(opts ...func(*CostComponentTypeQuery)) *CostComponentTypeQuery {
	query := &CostComponentTypeQuery{config: cctq.config}
	for _, opt := range opts {
		opt(query)
	}
	cctq.withChildCostComponentTypes = query
	return cctq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.CostComponentType.Query().
//		GroupBy(costcomponenttype.FieldCreateTime).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (cctq *CostComponentTypeQuery) GroupBy(field string, fields ...string) *CostComponentTypeGroupBy {
	group := &CostComponentTypeGroupBy{config: cctq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := cctq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return cctq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//	}
//
//	client.CostComponentType.Query().
//		Select(costcomponenttype.FieldCreateTime).
//		Scan(ctx, &v)
//
func (cctq *CostComponentTypeQuery) Select(field string, fields ...string) *CostComponentTypeSelect {
	cctq.fields = append([]string{field}, fields...)
	return &CostComponentTypeSelect{CostComponentTypeQuery: cctq}
}

func (cctq *CostComponentTypeQuery) prepareQuery(ctx context.Context) error {
	for _, f := range cctq.fields {
		if !costcomponenttype.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if cctq.path != nil {
		prev, err := cctq.path(ctx)
		if err != nil {
			return err
		}
		cctq.sql = prev
	}
	return nil
}

func (cctq *CostComponentTypeQuery) sqlAll(ctx context.Context) ([]*CostComponentType, error) {
	var (
		nodes       = []*CostComponentType{}
		withFKs     = cctq.withFKs
		_spec       = cctq.querySpec()
		loadedTypes = [3]bool{
			cctq.withParent != nil,
			cctq.withChildren != nil,
			cctq.withChildCostComponentTypes != nil,
		}
	)
	if cctq.withParent != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, costcomponenttype.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &CostComponentType{config: cctq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, cctq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := cctq.withParent; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*CostComponentType)
		for i := range nodes {
			if nodes[i].cost_component_type_children == nil {
				continue
			}
			fk := *nodes[i].cost_component_type_children
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(costcomponenttype.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "cost_component_type_children" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Parent = n
			}
		}
	}

	if query := cctq.withChildren; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*CostComponentType)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.Children = []*CostComponentType{}
		}
		query.withFKs = true
		query.Where(predicate.CostComponentType(func(s *sql.Selector) {
			s.Where(sql.InValues(costcomponenttype.ChildrenColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.cost_component_type_children
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "cost_component_type_children" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "cost_component_type_children" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.Children = append(node.Edges.Children, n)
		}
	}

	if query := cctq.withChildCostComponentTypes; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		ids := make(map[int]*CostComponentType, len(nodes))
		for _, node := range nodes {
			ids[node.ID] = node
			fks = append(fks, node.ID)
			node.Edges.ChildCostComponentTypes = []*CostComponentType{}
		}
		var (
			edgeids []int
			edges   = make(map[int][]*CostComponentType)
		)
		_spec := &sqlgraph.EdgeQuerySpec{
			Edge: &sqlgraph.EdgeSpec{
				Inverse: false,
				Table:   costcomponenttype.ChildCostComponentTypesTable,
				Columns: costcomponenttype.ChildCostComponentTypesPrimaryKey,
			},
			Predicate: func(s *sql.Selector) {
				s.Where(sql.InValues(costcomponenttype.ChildCostComponentTypesPrimaryKey[0], fks...))
			},
			ScanValues: func() [2]interface{} {
				return [2]interface{}{new(sql.NullInt64), new(sql.NullInt64)}
			},
			Assign: func(out, in interface{}) error {
				eout, ok := out.(*sql.NullInt64)
				if !ok || eout == nil {
					return fmt.Errorf("unexpected id value for edge-out")
				}
				ein, ok := in.(*sql.NullInt64)
				if !ok || ein == nil {
					return fmt.Errorf("unexpected id value for edge-in")
				}
				outValue := int(eout.Int64)
				inValue := int(ein.Int64)
				node, ok := ids[outValue]
				if !ok {
					return fmt.Errorf("unexpected node id in edges: %v", outValue)
				}
				if _, ok := edges[inValue]; !ok {
					edgeids = append(edgeids, inValue)
				}
				edges[inValue] = append(edges[inValue], node)
				return nil
			},
		}
		if err := sqlgraph.QueryEdges(ctx, cctq.driver, _spec); err != nil {
			return nil, fmt.Errorf(`query edges "child_cost_component_types": %w`, err)
		}
		query.Where(costcomponenttype.IDIn(edgeids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := edges[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected "child_cost_component_types" node returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.ChildCostComponentTypes = append(nodes[i].Edges.ChildCostComponentTypes, n)
			}
		}
	}

	return nodes, nil
}

func (cctq *CostComponentTypeQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := cctq.querySpec()
	return sqlgraph.CountNodes(ctx, cctq.driver, _spec)
}

func (cctq *CostComponentTypeQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := cctq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (cctq *CostComponentTypeQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   costcomponenttype.Table,
			Columns: costcomponenttype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: costcomponenttype.FieldID,
			},
		},
		From:   cctq.sql,
		Unique: true,
	}
	if unique := cctq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := cctq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, costcomponenttype.FieldID)
		for i := range fields {
			if fields[i] != costcomponenttype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := cctq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := cctq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := cctq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := cctq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (cctq *CostComponentTypeQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(cctq.driver.Dialect())
	t1 := builder.Table(costcomponenttype.Table)
	columns := cctq.fields
	if len(columns) == 0 {
		columns = costcomponenttype.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if cctq.sql != nil {
		selector = cctq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	for _, p := range cctq.predicates {
		p(selector)
	}
	for _, p := range cctq.order {
		p(selector)
	}
	if offset := cctq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := cctq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// CostComponentTypeGroupBy is the group-by builder for CostComponentType entities.
type CostComponentTypeGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (cctgb *CostComponentTypeGroupBy) Aggregate(fns ...AggregateFunc) *CostComponentTypeGroupBy {
	cctgb.fns = append(cctgb.fns, fns...)
	return cctgb
}

// Scan applies the group-by query and scans the result into the given value.
func (cctgb *CostComponentTypeGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := cctgb.path(ctx)
	if err != nil {
		return err
	}
	cctgb.sql = query
	return cctgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (cctgb *CostComponentTypeGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := cctgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (cctgb *CostComponentTypeGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(cctgb.fields) > 1 {
		return nil, errors.New("ent: CostComponentTypeGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := cctgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (cctgb *CostComponentTypeGroupBy) StringsX(ctx context.Context) []string {
	v, err := cctgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (cctgb *CostComponentTypeGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = cctgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{costcomponenttype.Label}
	default:
		err = fmt.Errorf("ent: CostComponentTypeGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (cctgb *CostComponentTypeGroupBy) StringX(ctx context.Context) string {
	v, err := cctgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (cctgb *CostComponentTypeGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(cctgb.fields) > 1 {
		return nil, errors.New("ent: CostComponentTypeGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := cctgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (cctgb *CostComponentTypeGroupBy) IntsX(ctx context.Context) []int {
	v, err := cctgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (cctgb *CostComponentTypeGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = cctgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{costcomponenttype.Label}
	default:
		err = fmt.Errorf("ent: CostComponentTypeGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (cctgb *CostComponentTypeGroupBy) IntX(ctx context.Context) int {
	v, err := cctgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (cctgb *CostComponentTypeGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(cctgb.fields) > 1 {
		return nil, errors.New("ent: CostComponentTypeGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := cctgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (cctgb *CostComponentTypeGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := cctgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (cctgb *CostComponentTypeGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = cctgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{costcomponenttype.Label}
	default:
		err = fmt.Errorf("ent: CostComponentTypeGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (cctgb *CostComponentTypeGroupBy) Float64X(ctx context.Context) float64 {
	v, err := cctgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (cctgb *CostComponentTypeGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(cctgb.fields) > 1 {
		return nil, errors.New("ent: CostComponentTypeGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := cctgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (cctgb *CostComponentTypeGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := cctgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (cctgb *CostComponentTypeGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = cctgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{costcomponenttype.Label}
	default:
		err = fmt.Errorf("ent: CostComponentTypeGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (cctgb *CostComponentTypeGroupBy) BoolX(ctx context.Context) bool {
	v, err := cctgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (cctgb *CostComponentTypeGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range cctgb.fields {
		if !costcomponenttype.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := cctgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cctgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (cctgb *CostComponentTypeGroupBy) sqlQuery() *sql.Selector {
	selector := cctgb.sql.Select()
	aggregation := make([]string, 0, len(cctgb.fns))
	for _, fn := range cctgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(cctgb.fields)+len(cctgb.fns))
		for _, f := range cctgb.fields {
			columns = append(columns, selector.C(f))
		}
		for _, c := range aggregation {
			columns = append(columns, c)
		}
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(cctgb.fields...)...)
}

// CostComponentTypeSelect is the builder for selecting fields of CostComponentType entities.
type CostComponentTypeSelect struct {
	*CostComponentTypeQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (ccts *CostComponentTypeSelect) Scan(ctx context.Context, v interface{}) error {
	if err := ccts.prepareQuery(ctx); err != nil {
		return err
	}
	ccts.sql = ccts.CostComponentTypeQuery.sqlQuery(ctx)
	return ccts.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (ccts *CostComponentTypeSelect) ScanX(ctx context.Context, v interface{}) {
	if err := ccts.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (ccts *CostComponentTypeSelect) Strings(ctx context.Context) ([]string, error) {
	if len(ccts.fields) > 1 {
		return nil, errors.New("ent: CostComponentTypeSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := ccts.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (ccts *CostComponentTypeSelect) StringsX(ctx context.Context) []string {
	v, err := ccts.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (ccts *CostComponentTypeSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = ccts.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{costcomponenttype.Label}
	default:
		err = fmt.Errorf("ent: CostComponentTypeSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (ccts *CostComponentTypeSelect) StringX(ctx context.Context) string {
	v, err := ccts.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (ccts *CostComponentTypeSelect) Ints(ctx context.Context) ([]int, error) {
	if len(ccts.fields) > 1 {
		return nil, errors.New("ent: CostComponentTypeSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := ccts.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (ccts *CostComponentTypeSelect) IntsX(ctx context.Context) []int {
	v, err := ccts.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (ccts *CostComponentTypeSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = ccts.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{costcomponenttype.Label}
	default:
		err = fmt.Errorf("ent: CostComponentTypeSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (ccts *CostComponentTypeSelect) IntX(ctx context.Context) int {
	v, err := ccts.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (ccts *CostComponentTypeSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(ccts.fields) > 1 {
		return nil, errors.New("ent: CostComponentTypeSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := ccts.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (ccts *CostComponentTypeSelect) Float64sX(ctx context.Context) []float64 {
	v, err := ccts.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (ccts *CostComponentTypeSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = ccts.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{costcomponenttype.Label}
	default:
		err = fmt.Errorf("ent: CostComponentTypeSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (ccts *CostComponentTypeSelect) Float64X(ctx context.Context) float64 {
	v, err := ccts.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (ccts *CostComponentTypeSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(ccts.fields) > 1 {
		return nil, errors.New("ent: CostComponentTypeSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := ccts.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (ccts *CostComponentTypeSelect) BoolsX(ctx context.Context) []bool {
	v, err := ccts.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (ccts *CostComponentTypeSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = ccts.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{costcomponenttype.Label}
	default:
		err = fmt.Errorf("ent: CostComponentTypeSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (ccts *CostComponentTypeSelect) BoolX(ctx context.Context) bool {
	v, err := ccts.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ccts *CostComponentTypeSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := ccts.sql.Query()
	if err := ccts.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
