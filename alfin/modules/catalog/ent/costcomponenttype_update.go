// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/costcomponenttype"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/predicate"
)

// CostComponentTypeUpdate is the builder for updating CostComponentType entities.
type CostComponentTypeUpdate struct {
	config
	hooks    []Hook
	mutation *CostComponentTypeMutation
}

// Where adds a new predicate for the CostComponentTypeUpdate builder.
func (cctu *CostComponentTypeUpdate) Where(ps ...predicate.CostComponentType) *CostComponentTypeUpdate {
	cctu.mutation.predicates = append(cctu.mutation.predicates, ps...)
	return cctu
}

// SetStringRef sets the "string_ref" field.
func (cctu *CostComponentTypeUpdate) SetStringRef(s string) *CostComponentTypeUpdate {
	cctu.mutation.SetStringRef(s)
	return cctu
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (cctu *CostComponentTypeUpdate) SetNillableStringRef(s *string) *CostComponentTypeUpdate {
	if s != nil {
		cctu.SetStringRef(*s)
	}
	return cctu
}

// ClearStringRef clears the value of the "string_ref" field.
func (cctu *CostComponentTypeUpdate) ClearStringRef() *CostComponentTypeUpdate {
	cctu.mutation.ClearStringRef()
	return cctu
}

// SetHasTable sets the "has_table" field.
func (cctu *CostComponentTypeUpdate) SetHasTable(ct costcomponenttype.HasTable) *CostComponentTypeUpdate {
	cctu.mutation.SetHasTable(ct)
	return cctu
}

// SetNillableHasTable sets the "has_table" field if the given value is not nil.
func (cctu *CostComponentTypeUpdate) SetNillableHasTable(ct *costcomponenttype.HasTable) *CostComponentTypeUpdate {
	if ct != nil {
		cctu.SetHasTable(*ct)
	}
	return cctu
}

// ClearHasTable clears the value of the "has_table" field.
func (cctu *CostComponentTypeUpdate) ClearHasTable() *CostComponentTypeUpdate {
	cctu.mutation.ClearHasTable()
	return cctu
}

// SetDescription sets the "description" field.
func (cctu *CostComponentTypeUpdate) SetDescription(s string) *CostComponentTypeUpdate {
	cctu.mutation.SetDescription(s)
	return cctu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cctu *CostComponentTypeUpdate) SetNillableDescription(s *string) *CostComponentTypeUpdate {
	if s != nil {
		cctu.SetDescription(*s)
	}
	return cctu
}

// ClearDescription clears the value of the "description" field.
func (cctu *CostComponentTypeUpdate) ClearDescription() *CostComponentTypeUpdate {
	cctu.mutation.ClearDescription()
	return cctu
}

// SetParentID sets the "parent" edge to the CostComponentType entity by ID.
func (cctu *CostComponentTypeUpdate) SetParentID(id int) *CostComponentTypeUpdate {
	cctu.mutation.SetParentID(id)
	return cctu
}

// SetNillableParentID sets the "parent" edge to the CostComponentType entity by ID if the given value is not nil.
func (cctu *CostComponentTypeUpdate) SetNillableParentID(id *int) *CostComponentTypeUpdate {
	if id != nil {
		cctu = cctu.SetParentID(*id)
	}
	return cctu
}

// SetParent sets the "parent" edge to the CostComponentType entity.
func (cctu *CostComponentTypeUpdate) SetParent(c *CostComponentType) *CostComponentTypeUpdate {
	return cctu.SetParentID(c.ID)
}

// AddChildIDs adds the "children" edge to the CostComponentType entity by IDs.
func (cctu *CostComponentTypeUpdate) AddChildIDs(ids ...int) *CostComponentTypeUpdate {
	cctu.mutation.AddChildIDs(ids...)
	return cctu
}

// AddChildren adds the "children" edges to the CostComponentType entity.
func (cctu *CostComponentTypeUpdate) AddChildren(c ...*CostComponentType) *CostComponentTypeUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cctu.AddChildIDs(ids...)
}

// AddChildCostComponentTypeIDs adds the "child_cost_component_types" edge to the CostComponentType entity by IDs.
func (cctu *CostComponentTypeUpdate) AddChildCostComponentTypeIDs(ids ...int) *CostComponentTypeUpdate {
	cctu.mutation.AddChildCostComponentTypeIDs(ids...)
	return cctu
}

// AddChildCostComponentTypes adds the "child_cost_component_types" edges to the CostComponentType entity.
func (cctu *CostComponentTypeUpdate) AddChildCostComponentTypes(c ...*CostComponentType) *CostComponentTypeUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cctu.AddChildCostComponentTypeIDs(ids...)
}

// Mutation returns the CostComponentTypeMutation object of the builder.
func (cctu *CostComponentTypeUpdate) Mutation() *CostComponentTypeMutation {
	return cctu.mutation
}

// ClearParent clears the "parent" edge to the CostComponentType entity.
func (cctu *CostComponentTypeUpdate) ClearParent() *CostComponentTypeUpdate {
	cctu.mutation.ClearParent()
	return cctu
}

// ClearChildren clears all "children" edges to the CostComponentType entity.
func (cctu *CostComponentTypeUpdate) ClearChildren() *CostComponentTypeUpdate {
	cctu.mutation.ClearChildren()
	return cctu
}

// RemoveChildIDs removes the "children" edge to CostComponentType entities by IDs.
func (cctu *CostComponentTypeUpdate) RemoveChildIDs(ids ...int) *CostComponentTypeUpdate {
	cctu.mutation.RemoveChildIDs(ids...)
	return cctu
}

// RemoveChildren removes "children" edges to CostComponentType entities.
func (cctu *CostComponentTypeUpdate) RemoveChildren(c ...*CostComponentType) *CostComponentTypeUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cctu.RemoveChildIDs(ids...)
}

// ClearChildCostComponentTypes clears all "child_cost_component_types" edges to the CostComponentType entity.
func (cctu *CostComponentTypeUpdate) ClearChildCostComponentTypes() *CostComponentTypeUpdate {
	cctu.mutation.ClearChildCostComponentTypes()
	return cctu
}

// RemoveChildCostComponentTypeIDs removes the "child_cost_component_types" edge to CostComponentType entities by IDs.
func (cctu *CostComponentTypeUpdate) RemoveChildCostComponentTypeIDs(ids ...int) *CostComponentTypeUpdate {
	cctu.mutation.RemoveChildCostComponentTypeIDs(ids...)
	return cctu
}

// RemoveChildCostComponentTypes removes "child_cost_component_types" edges to CostComponentType entities.
func (cctu *CostComponentTypeUpdate) RemoveChildCostComponentTypes(c ...*CostComponentType) *CostComponentTypeUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cctu.RemoveChildCostComponentTypeIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cctu *CostComponentTypeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	cctu.defaults()
	if len(cctu.hooks) == 0 {
		if err = cctu.check(); err != nil {
			return 0, err
		}
		affected, err = cctu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CostComponentTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cctu.check(); err != nil {
				return 0, err
			}
			cctu.mutation = mutation
			affected, err = cctu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cctu.hooks) - 1; i >= 0; i-- {
			mut = cctu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cctu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cctu *CostComponentTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := cctu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cctu *CostComponentTypeUpdate) Exec(ctx context.Context) error {
	_, err := cctu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cctu *CostComponentTypeUpdate) ExecX(ctx context.Context) {
	if err := cctu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cctu *CostComponentTypeUpdate) defaults() {
	if _, ok := cctu.mutation.UpdateTime(); !ok {
		v := costcomponenttype.UpdateDefaultUpdateTime()
		cctu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cctu *CostComponentTypeUpdate) check() error {
	if v, ok := cctu.mutation.HasTable(); ok {
		if err := costcomponenttype.HasTableValidator(v); err != nil {
			return &ValidationError{Name: "has_table", err: fmt.Errorf("ent: validator failed for field \"has_table\": %w", err)}
		}
	}
	return nil
}

func (cctu *CostComponentTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   costcomponenttype.Table,
			Columns: costcomponenttype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: costcomponenttype.FieldID,
			},
		},
	}
	if ps := cctu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cctu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: costcomponenttype.FieldUpdateTime,
		})
	}
	if value, ok := cctu.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: costcomponenttype.FieldStringRef,
		})
	}
	if cctu.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: costcomponenttype.FieldStringRef,
		})
	}
	if value, ok := cctu.mutation.HasTable(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: costcomponenttype.FieldHasTable,
		})
	}
	if cctu.mutation.HasTableCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: costcomponenttype.FieldHasTable,
		})
	}
	if value, ok := cctu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: costcomponenttype.FieldDescription,
		})
	}
	if cctu.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: costcomponenttype.FieldDescription,
		})
	}
	if cctu.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   costcomponenttype.ParentTable,
			Columns: []string{costcomponenttype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: costcomponenttype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cctu.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   costcomponenttype.ParentTable,
			Columns: []string{costcomponenttype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: costcomponenttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cctu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   costcomponenttype.ChildrenTable,
			Columns: []string{costcomponenttype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: costcomponenttype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cctu.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !cctu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   costcomponenttype.ChildrenTable,
			Columns: []string{costcomponenttype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: costcomponenttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cctu.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   costcomponenttype.ChildrenTable,
			Columns: []string{costcomponenttype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: costcomponenttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cctu.mutation.ChildCostComponentTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   costcomponenttype.ChildCostComponentTypesTable,
			Columns: costcomponenttype.ChildCostComponentTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: costcomponenttype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cctu.mutation.RemovedChildCostComponentTypesIDs(); len(nodes) > 0 && !cctu.mutation.ChildCostComponentTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   costcomponenttype.ChildCostComponentTypesTable,
			Columns: costcomponenttype.ChildCostComponentTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: costcomponenttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cctu.mutation.ChildCostComponentTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   costcomponenttype.ChildCostComponentTypesTable,
			Columns: costcomponenttype.ChildCostComponentTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: costcomponenttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cctu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{costcomponenttype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// CostComponentTypeUpdateOne is the builder for updating a single CostComponentType entity.
type CostComponentTypeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CostComponentTypeMutation
}

// SetStringRef sets the "string_ref" field.
func (cctuo *CostComponentTypeUpdateOne) SetStringRef(s string) *CostComponentTypeUpdateOne {
	cctuo.mutation.SetStringRef(s)
	return cctuo
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (cctuo *CostComponentTypeUpdateOne) SetNillableStringRef(s *string) *CostComponentTypeUpdateOne {
	if s != nil {
		cctuo.SetStringRef(*s)
	}
	return cctuo
}

// ClearStringRef clears the value of the "string_ref" field.
func (cctuo *CostComponentTypeUpdateOne) ClearStringRef() *CostComponentTypeUpdateOne {
	cctuo.mutation.ClearStringRef()
	return cctuo
}

// SetHasTable sets the "has_table" field.
func (cctuo *CostComponentTypeUpdateOne) SetHasTable(ct costcomponenttype.HasTable) *CostComponentTypeUpdateOne {
	cctuo.mutation.SetHasTable(ct)
	return cctuo
}

// SetNillableHasTable sets the "has_table" field if the given value is not nil.
func (cctuo *CostComponentTypeUpdateOne) SetNillableHasTable(ct *costcomponenttype.HasTable) *CostComponentTypeUpdateOne {
	if ct != nil {
		cctuo.SetHasTable(*ct)
	}
	return cctuo
}

// ClearHasTable clears the value of the "has_table" field.
func (cctuo *CostComponentTypeUpdateOne) ClearHasTable() *CostComponentTypeUpdateOne {
	cctuo.mutation.ClearHasTable()
	return cctuo
}

// SetDescription sets the "description" field.
func (cctuo *CostComponentTypeUpdateOne) SetDescription(s string) *CostComponentTypeUpdateOne {
	cctuo.mutation.SetDescription(s)
	return cctuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cctuo *CostComponentTypeUpdateOne) SetNillableDescription(s *string) *CostComponentTypeUpdateOne {
	if s != nil {
		cctuo.SetDescription(*s)
	}
	return cctuo
}

// ClearDescription clears the value of the "description" field.
func (cctuo *CostComponentTypeUpdateOne) ClearDescription() *CostComponentTypeUpdateOne {
	cctuo.mutation.ClearDescription()
	return cctuo
}

// SetParentID sets the "parent" edge to the CostComponentType entity by ID.
func (cctuo *CostComponentTypeUpdateOne) SetParentID(id int) *CostComponentTypeUpdateOne {
	cctuo.mutation.SetParentID(id)
	return cctuo
}

// SetNillableParentID sets the "parent" edge to the CostComponentType entity by ID if the given value is not nil.
func (cctuo *CostComponentTypeUpdateOne) SetNillableParentID(id *int) *CostComponentTypeUpdateOne {
	if id != nil {
		cctuo = cctuo.SetParentID(*id)
	}
	return cctuo
}

// SetParent sets the "parent" edge to the CostComponentType entity.
func (cctuo *CostComponentTypeUpdateOne) SetParent(c *CostComponentType) *CostComponentTypeUpdateOne {
	return cctuo.SetParentID(c.ID)
}

// AddChildIDs adds the "children" edge to the CostComponentType entity by IDs.
func (cctuo *CostComponentTypeUpdateOne) AddChildIDs(ids ...int) *CostComponentTypeUpdateOne {
	cctuo.mutation.AddChildIDs(ids...)
	return cctuo
}

// AddChildren adds the "children" edges to the CostComponentType entity.
func (cctuo *CostComponentTypeUpdateOne) AddChildren(c ...*CostComponentType) *CostComponentTypeUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cctuo.AddChildIDs(ids...)
}

// AddChildCostComponentTypeIDs adds the "child_cost_component_types" edge to the CostComponentType entity by IDs.
func (cctuo *CostComponentTypeUpdateOne) AddChildCostComponentTypeIDs(ids ...int) *CostComponentTypeUpdateOne {
	cctuo.mutation.AddChildCostComponentTypeIDs(ids...)
	return cctuo
}

// AddChildCostComponentTypes adds the "child_cost_component_types" edges to the CostComponentType entity.
func (cctuo *CostComponentTypeUpdateOne) AddChildCostComponentTypes(c ...*CostComponentType) *CostComponentTypeUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cctuo.AddChildCostComponentTypeIDs(ids...)
}

// Mutation returns the CostComponentTypeMutation object of the builder.
func (cctuo *CostComponentTypeUpdateOne) Mutation() *CostComponentTypeMutation {
	return cctuo.mutation
}

// ClearParent clears the "parent" edge to the CostComponentType entity.
func (cctuo *CostComponentTypeUpdateOne) ClearParent() *CostComponentTypeUpdateOne {
	cctuo.mutation.ClearParent()
	return cctuo
}

// ClearChildren clears all "children" edges to the CostComponentType entity.
func (cctuo *CostComponentTypeUpdateOne) ClearChildren() *CostComponentTypeUpdateOne {
	cctuo.mutation.ClearChildren()
	return cctuo
}

// RemoveChildIDs removes the "children" edge to CostComponentType entities by IDs.
func (cctuo *CostComponentTypeUpdateOne) RemoveChildIDs(ids ...int) *CostComponentTypeUpdateOne {
	cctuo.mutation.RemoveChildIDs(ids...)
	return cctuo
}

// RemoveChildren removes "children" edges to CostComponentType entities.
func (cctuo *CostComponentTypeUpdateOne) RemoveChildren(c ...*CostComponentType) *CostComponentTypeUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cctuo.RemoveChildIDs(ids...)
}

// ClearChildCostComponentTypes clears all "child_cost_component_types" edges to the CostComponentType entity.
func (cctuo *CostComponentTypeUpdateOne) ClearChildCostComponentTypes() *CostComponentTypeUpdateOne {
	cctuo.mutation.ClearChildCostComponentTypes()
	return cctuo
}

// RemoveChildCostComponentTypeIDs removes the "child_cost_component_types" edge to CostComponentType entities by IDs.
func (cctuo *CostComponentTypeUpdateOne) RemoveChildCostComponentTypeIDs(ids ...int) *CostComponentTypeUpdateOne {
	cctuo.mutation.RemoveChildCostComponentTypeIDs(ids...)
	return cctuo
}

// RemoveChildCostComponentTypes removes "child_cost_component_types" edges to CostComponentType entities.
func (cctuo *CostComponentTypeUpdateOne) RemoveChildCostComponentTypes(c ...*CostComponentType) *CostComponentTypeUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cctuo.RemoveChildCostComponentTypeIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cctuo *CostComponentTypeUpdateOne) Select(field string, fields ...string) *CostComponentTypeUpdateOne {
	cctuo.fields = append([]string{field}, fields...)
	return cctuo
}

// Save executes the query and returns the updated CostComponentType entity.
func (cctuo *CostComponentTypeUpdateOne) Save(ctx context.Context) (*CostComponentType, error) {
	var (
		err  error
		node *CostComponentType
	)
	cctuo.defaults()
	if len(cctuo.hooks) == 0 {
		if err = cctuo.check(); err != nil {
			return nil, err
		}
		node, err = cctuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CostComponentTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cctuo.check(); err != nil {
				return nil, err
			}
			cctuo.mutation = mutation
			node, err = cctuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cctuo.hooks) - 1; i >= 0; i-- {
			mut = cctuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cctuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cctuo *CostComponentTypeUpdateOne) SaveX(ctx context.Context) *CostComponentType {
	node, err := cctuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cctuo *CostComponentTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := cctuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cctuo *CostComponentTypeUpdateOne) ExecX(ctx context.Context) {
	if err := cctuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cctuo *CostComponentTypeUpdateOne) defaults() {
	if _, ok := cctuo.mutation.UpdateTime(); !ok {
		v := costcomponenttype.UpdateDefaultUpdateTime()
		cctuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cctuo *CostComponentTypeUpdateOne) check() error {
	if v, ok := cctuo.mutation.HasTable(); ok {
		if err := costcomponenttype.HasTableValidator(v); err != nil {
			return &ValidationError{Name: "has_table", err: fmt.Errorf("ent: validator failed for field \"has_table\": %w", err)}
		}
	}
	return nil
}

func (cctuo *CostComponentTypeUpdateOne) sqlSave(ctx context.Context) (_node *CostComponentType, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   costcomponenttype.Table,
			Columns: costcomponenttype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: costcomponenttype.FieldID,
			},
		},
	}
	id, ok := cctuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing CostComponentType.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := cctuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, costcomponenttype.FieldID)
		for _, f := range fields {
			if !costcomponenttype.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != costcomponenttype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cctuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cctuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: costcomponenttype.FieldUpdateTime,
		})
	}
	if value, ok := cctuo.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: costcomponenttype.FieldStringRef,
		})
	}
	if cctuo.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: costcomponenttype.FieldStringRef,
		})
	}
	if value, ok := cctuo.mutation.HasTable(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: costcomponenttype.FieldHasTable,
		})
	}
	if cctuo.mutation.HasTableCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: costcomponenttype.FieldHasTable,
		})
	}
	if value, ok := cctuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: costcomponenttype.FieldDescription,
		})
	}
	if cctuo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: costcomponenttype.FieldDescription,
		})
	}
	if cctuo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   costcomponenttype.ParentTable,
			Columns: []string{costcomponenttype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: costcomponenttype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cctuo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   costcomponenttype.ParentTable,
			Columns: []string{costcomponenttype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: costcomponenttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cctuo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   costcomponenttype.ChildrenTable,
			Columns: []string{costcomponenttype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: costcomponenttype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cctuo.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !cctuo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   costcomponenttype.ChildrenTable,
			Columns: []string{costcomponenttype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: costcomponenttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cctuo.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   costcomponenttype.ChildrenTable,
			Columns: []string{costcomponenttype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: costcomponenttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cctuo.mutation.ChildCostComponentTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   costcomponenttype.ChildCostComponentTypesTable,
			Columns: costcomponenttype.ChildCostComponentTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: costcomponenttype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cctuo.mutation.RemovedChildCostComponentTypesIDs(); len(nodes) > 0 && !cctuo.mutation.ChildCostComponentTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   costcomponenttype.ChildCostComponentTypesTable,
			Columns: costcomponenttype.ChildCostComponentTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: costcomponenttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cctuo.mutation.ChildCostComponentTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   costcomponenttype.ChildCostComponentTypesTable,
			Columns: costcomponenttype.ChildCostComponentTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: costcomponenttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CostComponentType{config: cctuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cctuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{costcomponenttype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
