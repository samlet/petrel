// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/custommethod"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/custommethodtype"
)

// CustomMethod is the model entity for the CustomMethod schema.
type CustomMethod struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// StringRef holds the value of the "string_ref" field.
	StringRef string `json:"string_ref,omitempty"`
	// CustomMethodName holds the value of the "custom_method_name" field.
	CustomMethodName string `json:"custom_method_name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CustomMethodQuery when eager-loading is set.
	Edges                             CustomMethodEdges `json:"edges"`
	custom_method_type_custom_methods *int
}

// CustomMethodEdges holds the relations/edges for other nodes in the graph.
type CustomMethodEdges struct {
	// CustomMethodType holds the value of the custom_method_type edge.
	CustomMethodType *CustomMethodType `json:"custom_method_type,omitempty"`
	// ProductAssocs holds the value of the product_assocs edge.
	ProductAssocs []*ProductAssoc `json:"product_assocs,omitempty"`
	// ProductPrices holds the value of the product_prices edge.
	ProductPrices []*ProductPrice `json:"product_prices,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// CustomMethodTypeOrErr returns the CustomMethodType value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CustomMethodEdges) CustomMethodTypeOrErr() (*CustomMethodType, error) {
	if e.loadedTypes[0] {
		if e.CustomMethodType == nil {
			// The edge custom_method_type was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: custommethodtype.Label}
		}
		return e.CustomMethodType, nil
	}
	return nil, &NotLoadedError{edge: "custom_method_type"}
}

// ProductAssocsOrErr returns the ProductAssocs value or an error if the edge
// was not loaded in eager-loading.
func (e CustomMethodEdges) ProductAssocsOrErr() ([]*ProductAssoc, error) {
	if e.loadedTypes[1] {
		return e.ProductAssocs, nil
	}
	return nil, &NotLoadedError{edge: "product_assocs"}
}

// ProductPricesOrErr returns the ProductPrices value or an error if the edge
// was not loaded in eager-loading.
func (e CustomMethodEdges) ProductPricesOrErr() ([]*ProductPrice, error) {
	if e.loadedTypes[2] {
		return e.ProductPrices, nil
	}
	return nil, &NotLoadedError{edge: "product_prices"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CustomMethod) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case custommethod.FieldID:
			values[i] = new(sql.NullInt64)
		case custommethod.FieldStringRef, custommethod.FieldCustomMethodName, custommethod.FieldDescription:
			values[i] = new(sql.NullString)
		case custommethod.FieldCreateTime, custommethod.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case custommethod.ForeignKeys[0]: // custom_method_type_custom_methods
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type CustomMethod", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CustomMethod fields.
func (cm *CustomMethod) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case custommethod.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cm.ID = int(value.Int64)
		case custommethod.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				cm.CreateTime = value.Time
			}
		case custommethod.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				cm.UpdateTime = value.Time
			}
		case custommethod.FieldStringRef:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field string_ref", values[i])
			} else if value.Valid {
				cm.StringRef = value.String
			}
		case custommethod.FieldCustomMethodName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field custom_method_name", values[i])
			} else if value.Valid {
				cm.CustomMethodName = value.String
			}
		case custommethod.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				cm.Description = value.String
			}
		case custommethod.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field custom_method_type_custom_methods", value)
			} else if value.Valid {
				cm.custom_method_type_custom_methods = new(int)
				*cm.custom_method_type_custom_methods = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryCustomMethodType queries the "custom_method_type" edge of the CustomMethod entity.
func (cm *CustomMethod) QueryCustomMethodType() *CustomMethodTypeQuery {
	return (&CustomMethodClient{config: cm.config}).QueryCustomMethodType(cm)
}

// QueryProductAssocs queries the "product_assocs" edge of the CustomMethod entity.
func (cm *CustomMethod) QueryProductAssocs() *ProductAssocQuery {
	return (&CustomMethodClient{config: cm.config}).QueryProductAssocs(cm)
}

// QueryProductPrices queries the "product_prices" edge of the CustomMethod entity.
func (cm *CustomMethod) QueryProductPrices() *ProductPriceQuery {
	return (&CustomMethodClient{config: cm.config}).QueryProductPrices(cm)
}

// Update returns a builder for updating this CustomMethod.
// Note that you need to call CustomMethod.Unwrap() before calling this method if this CustomMethod
// was returned from a transaction, and the transaction was committed or rolled back.
func (cm *CustomMethod) Update() *CustomMethodUpdateOne {
	return (&CustomMethodClient{config: cm.config}).UpdateOne(cm)
}

// Unwrap unwraps the CustomMethod entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cm *CustomMethod) Unwrap() *CustomMethod {
	tx, ok := cm.config.driver.(*txDriver)
	if !ok {
		panic("ent: CustomMethod is not a transactional entity")
	}
	cm.config.driver = tx.drv
	return cm
}

// String implements the fmt.Stringer.
func (cm *CustomMethod) String() string {
	var builder strings.Builder
	builder.WriteString("CustomMethod(")
	builder.WriteString(fmt.Sprintf("id=%v", cm.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(cm.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(cm.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", string_ref=")
	builder.WriteString(cm.StringRef)
	builder.WriteString(", custom_method_name=")
	builder.WriteString(cm.CustomMethodName)
	builder.WriteString(", description=")
	builder.WriteString(cm.Description)
	builder.WriteByte(')')
	return builder.String()
}

// CustomMethods is a parsable slice of CustomMethod.
type CustomMethods []*CustomMethod

func (cm CustomMethods) config(cfg config) {
	for _i := range cm {
		cm[_i].config = cfg
	}
}
