// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/custommethod"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/custommethodtype"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productassoc"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productprice"
)

// CustomMethodCreate is the builder for creating a CustomMethod entity.
type CustomMethodCreate struct {
	config
	mutation *CustomMethodMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (cmc *CustomMethodCreate) SetCreateTime(t time.Time) *CustomMethodCreate {
	cmc.mutation.SetCreateTime(t)
	return cmc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (cmc *CustomMethodCreate) SetNillableCreateTime(t *time.Time) *CustomMethodCreate {
	if t != nil {
		cmc.SetCreateTime(*t)
	}
	return cmc
}

// SetUpdateTime sets the "update_time" field.
func (cmc *CustomMethodCreate) SetUpdateTime(t time.Time) *CustomMethodCreate {
	cmc.mutation.SetUpdateTime(t)
	return cmc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (cmc *CustomMethodCreate) SetNillableUpdateTime(t *time.Time) *CustomMethodCreate {
	if t != nil {
		cmc.SetUpdateTime(*t)
	}
	return cmc
}

// SetStringRef sets the "string_ref" field.
func (cmc *CustomMethodCreate) SetStringRef(s string) *CustomMethodCreate {
	cmc.mutation.SetStringRef(s)
	return cmc
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (cmc *CustomMethodCreate) SetNillableStringRef(s *string) *CustomMethodCreate {
	if s != nil {
		cmc.SetStringRef(*s)
	}
	return cmc
}

// SetCustomMethodName sets the "custom_method_name" field.
func (cmc *CustomMethodCreate) SetCustomMethodName(s string) *CustomMethodCreate {
	cmc.mutation.SetCustomMethodName(s)
	return cmc
}

// SetNillableCustomMethodName sets the "custom_method_name" field if the given value is not nil.
func (cmc *CustomMethodCreate) SetNillableCustomMethodName(s *string) *CustomMethodCreate {
	if s != nil {
		cmc.SetCustomMethodName(*s)
	}
	return cmc
}

// SetDescription sets the "description" field.
func (cmc *CustomMethodCreate) SetDescription(s string) *CustomMethodCreate {
	cmc.mutation.SetDescription(s)
	return cmc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cmc *CustomMethodCreate) SetNillableDescription(s *string) *CustomMethodCreate {
	if s != nil {
		cmc.SetDescription(*s)
	}
	return cmc
}

// SetCustomMethodTypeID sets the "custom_method_type" edge to the CustomMethodType entity by ID.
func (cmc *CustomMethodCreate) SetCustomMethodTypeID(id int) *CustomMethodCreate {
	cmc.mutation.SetCustomMethodTypeID(id)
	return cmc
}

// SetNillableCustomMethodTypeID sets the "custom_method_type" edge to the CustomMethodType entity by ID if the given value is not nil.
func (cmc *CustomMethodCreate) SetNillableCustomMethodTypeID(id *int) *CustomMethodCreate {
	if id != nil {
		cmc = cmc.SetCustomMethodTypeID(*id)
	}
	return cmc
}

// SetCustomMethodType sets the "custom_method_type" edge to the CustomMethodType entity.
func (cmc *CustomMethodCreate) SetCustomMethodType(c *CustomMethodType) *CustomMethodCreate {
	return cmc.SetCustomMethodTypeID(c.ID)
}

// AddProductAssocIDs adds the "product_assocs" edge to the ProductAssoc entity by IDs.
func (cmc *CustomMethodCreate) AddProductAssocIDs(ids ...int) *CustomMethodCreate {
	cmc.mutation.AddProductAssocIDs(ids...)
	return cmc
}

// AddProductAssocs adds the "product_assocs" edges to the ProductAssoc entity.
func (cmc *CustomMethodCreate) AddProductAssocs(p ...*ProductAssoc) *CustomMethodCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cmc.AddProductAssocIDs(ids...)
}

// AddProductPriceIDs adds the "product_prices" edge to the ProductPrice entity by IDs.
func (cmc *CustomMethodCreate) AddProductPriceIDs(ids ...int) *CustomMethodCreate {
	cmc.mutation.AddProductPriceIDs(ids...)
	return cmc
}

// AddProductPrices adds the "product_prices" edges to the ProductPrice entity.
func (cmc *CustomMethodCreate) AddProductPrices(p ...*ProductPrice) *CustomMethodCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cmc.AddProductPriceIDs(ids...)
}

// Mutation returns the CustomMethodMutation object of the builder.
func (cmc *CustomMethodCreate) Mutation() *CustomMethodMutation {
	return cmc.mutation
}

// Save creates the CustomMethod in the database.
func (cmc *CustomMethodCreate) Save(ctx context.Context) (*CustomMethod, error) {
	var (
		err  error
		node *CustomMethod
	)
	cmc.defaults()
	if len(cmc.hooks) == 0 {
		if err = cmc.check(); err != nil {
			return nil, err
		}
		node, err = cmc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CustomMethodMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cmc.check(); err != nil {
				return nil, err
			}
			cmc.mutation = mutation
			if node, err = cmc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(cmc.hooks) - 1; i >= 0; i-- {
			mut = cmc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cmc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cmc *CustomMethodCreate) SaveX(ctx context.Context) *CustomMethod {
	v, err := cmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (cmc *CustomMethodCreate) defaults() {
	if _, ok := cmc.mutation.CreateTime(); !ok {
		v := custommethod.DefaultCreateTime()
		cmc.mutation.SetCreateTime(v)
	}
	if _, ok := cmc.mutation.UpdateTime(); !ok {
		v := custommethod.DefaultUpdateTime()
		cmc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cmc *CustomMethodCreate) check() error {
	if _, ok := cmc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New("ent: missing required field \"create_time\"")}
	}
	if _, ok := cmc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New("ent: missing required field \"update_time\"")}
	}
	return nil
}

func (cmc *CustomMethodCreate) sqlSave(ctx context.Context) (*CustomMethod, error) {
	_node, _spec := cmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cmc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (cmc *CustomMethodCreate) createSpec() (*CustomMethod, *sqlgraph.CreateSpec) {
	var (
		_node = &CustomMethod{config: cmc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: custommethod.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: custommethod.FieldID,
			},
		}
	)
	if value, ok := cmc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: custommethod.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := cmc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: custommethod.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := cmc.mutation.StringRef(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: custommethod.FieldStringRef,
		})
		_node.StringRef = value
	}
	if value, ok := cmc.mutation.CustomMethodName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: custommethod.FieldCustomMethodName,
		})
		_node.CustomMethodName = value
	}
	if value, ok := cmc.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: custommethod.FieldDescription,
		})
		_node.Description = value
	}
	if nodes := cmc.mutation.CustomMethodTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   custommethod.CustomMethodTypeTable,
			Columns: []string{custommethod.CustomMethodTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: custommethodtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.custom_method_type_custom_methods = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cmc.mutation.ProductAssocsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   custommethod.ProductAssocsTable,
			Columns: []string{custommethod.ProductAssocsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productassoc.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cmc.mutation.ProductPricesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   custommethod.ProductPricesTable,
			Columns: []string{custommethod.ProductPricesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productprice.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CustomMethodCreateBulk is the builder for creating many CustomMethod entities in bulk.
type CustomMethodCreateBulk struct {
	config
	builders []*CustomMethodCreate
}

// Save creates the CustomMethod entities in the database.
func (cmcb *CustomMethodCreateBulk) Save(ctx context.Context) ([]*CustomMethod, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cmcb.builders))
	nodes := make([]*CustomMethod, len(cmcb.builders))
	mutators := make([]Mutator, len(cmcb.builders))
	for i := range cmcb.builders {
		func(i int, root context.Context) {
			builder := cmcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CustomMethodMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cmcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cmcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cmcb *CustomMethodCreateBulk) SaveX(ctx context.Context) []*CustomMethod {
	v, err := cmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
