// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/custommethod"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/custommethodtype"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/predicate"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productassoc"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productprice"
)

// CustomMethodUpdate is the builder for updating CustomMethod entities.
type CustomMethodUpdate struct {
	config
	hooks    []Hook
	mutation *CustomMethodMutation
}

// Where adds a new predicate for the CustomMethodUpdate builder.
func (cmu *CustomMethodUpdate) Where(ps ...predicate.CustomMethod) *CustomMethodUpdate {
	cmu.mutation.predicates = append(cmu.mutation.predicates, ps...)
	return cmu
}

// SetStringRef sets the "string_ref" field.
func (cmu *CustomMethodUpdate) SetStringRef(s string) *CustomMethodUpdate {
	cmu.mutation.SetStringRef(s)
	return cmu
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (cmu *CustomMethodUpdate) SetNillableStringRef(s *string) *CustomMethodUpdate {
	if s != nil {
		cmu.SetStringRef(*s)
	}
	return cmu
}

// ClearStringRef clears the value of the "string_ref" field.
func (cmu *CustomMethodUpdate) ClearStringRef() *CustomMethodUpdate {
	cmu.mutation.ClearStringRef()
	return cmu
}

// SetCustomMethodName sets the "custom_method_name" field.
func (cmu *CustomMethodUpdate) SetCustomMethodName(s string) *CustomMethodUpdate {
	cmu.mutation.SetCustomMethodName(s)
	return cmu
}

// SetNillableCustomMethodName sets the "custom_method_name" field if the given value is not nil.
func (cmu *CustomMethodUpdate) SetNillableCustomMethodName(s *string) *CustomMethodUpdate {
	if s != nil {
		cmu.SetCustomMethodName(*s)
	}
	return cmu
}

// ClearCustomMethodName clears the value of the "custom_method_name" field.
func (cmu *CustomMethodUpdate) ClearCustomMethodName() *CustomMethodUpdate {
	cmu.mutation.ClearCustomMethodName()
	return cmu
}

// SetDescription sets the "description" field.
func (cmu *CustomMethodUpdate) SetDescription(s string) *CustomMethodUpdate {
	cmu.mutation.SetDescription(s)
	return cmu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cmu *CustomMethodUpdate) SetNillableDescription(s *string) *CustomMethodUpdate {
	if s != nil {
		cmu.SetDescription(*s)
	}
	return cmu
}

// ClearDescription clears the value of the "description" field.
func (cmu *CustomMethodUpdate) ClearDescription() *CustomMethodUpdate {
	cmu.mutation.ClearDescription()
	return cmu
}

// SetCustomMethodTypeID sets the "custom_method_type" edge to the CustomMethodType entity by ID.
func (cmu *CustomMethodUpdate) SetCustomMethodTypeID(id int) *CustomMethodUpdate {
	cmu.mutation.SetCustomMethodTypeID(id)
	return cmu
}

// SetNillableCustomMethodTypeID sets the "custom_method_type" edge to the CustomMethodType entity by ID if the given value is not nil.
func (cmu *CustomMethodUpdate) SetNillableCustomMethodTypeID(id *int) *CustomMethodUpdate {
	if id != nil {
		cmu = cmu.SetCustomMethodTypeID(*id)
	}
	return cmu
}

// SetCustomMethodType sets the "custom_method_type" edge to the CustomMethodType entity.
func (cmu *CustomMethodUpdate) SetCustomMethodType(c *CustomMethodType) *CustomMethodUpdate {
	return cmu.SetCustomMethodTypeID(c.ID)
}

// AddProductAssocIDs adds the "product_assocs" edge to the ProductAssoc entity by IDs.
func (cmu *CustomMethodUpdate) AddProductAssocIDs(ids ...int) *CustomMethodUpdate {
	cmu.mutation.AddProductAssocIDs(ids...)
	return cmu
}

// AddProductAssocs adds the "product_assocs" edges to the ProductAssoc entity.
func (cmu *CustomMethodUpdate) AddProductAssocs(p ...*ProductAssoc) *CustomMethodUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cmu.AddProductAssocIDs(ids...)
}

// AddProductPriceIDs adds the "product_prices" edge to the ProductPrice entity by IDs.
func (cmu *CustomMethodUpdate) AddProductPriceIDs(ids ...int) *CustomMethodUpdate {
	cmu.mutation.AddProductPriceIDs(ids...)
	return cmu
}

// AddProductPrices adds the "product_prices" edges to the ProductPrice entity.
func (cmu *CustomMethodUpdate) AddProductPrices(p ...*ProductPrice) *CustomMethodUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cmu.AddProductPriceIDs(ids...)
}

// Mutation returns the CustomMethodMutation object of the builder.
func (cmu *CustomMethodUpdate) Mutation() *CustomMethodMutation {
	return cmu.mutation
}

// ClearCustomMethodType clears the "custom_method_type" edge to the CustomMethodType entity.
func (cmu *CustomMethodUpdate) ClearCustomMethodType() *CustomMethodUpdate {
	cmu.mutation.ClearCustomMethodType()
	return cmu
}

// ClearProductAssocs clears all "product_assocs" edges to the ProductAssoc entity.
func (cmu *CustomMethodUpdate) ClearProductAssocs() *CustomMethodUpdate {
	cmu.mutation.ClearProductAssocs()
	return cmu
}

// RemoveProductAssocIDs removes the "product_assocs" edge to ProductAssoc entities by IDs.
func (cmu *CustomMethodUpdate) RemoveProductAssocIDs(ids ...int) *CustomMethodUpdate {
	cmu.mutation.RemoveProductAssocIDs(ids...)
	return cmu
}

// RemoveProductAssocs removes "product_assocs" edges to ProductAssoc entities.
func (cmu *CustomMethodUpdate) RemoveProductAssocs(p ...*ProductAssoc) *CustomMethodUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cmu.RemoveProductAssocIDs(ids...)
}

// ClearProductPrices clears all "product_prices" edges to the ProductPrice entity.
func (cmu *CustomMethodUpdate) ClearProductPrices() *CustomMethodUpdate {
	cmu.mutation.ClearProductPrices()
	return cmu
}

// RemoveProductPriceIDs removes the "product_prices" edge to ProductPrice entities by IDs.
func (cmu *CustomMethodUpdate) RemoveProductPriceIDs(ids ...int) *CustomMethodUpdate {
	cmu.mutation.RemoveProductPriceIDs(ids...)
	return cmu
}

// RemoveProductPrices removes "product_prices" edges to ProductPrice entities.
func (cmu *CustomMethodUpdate) RemoveProductPrices(p ...*ProductPrice) *CustomMethodUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cmu.RemoveProductPriceIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cmu *CustomMethodUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	cmu.defaults()
	if len(cmu.hooks) == 0 {
		affected, err = cmu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CustomMethodMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cmu.mutation = mutation
			affected, err = cmu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cmu.hooks) - 1; i >= 0; i-- {
			mut = cmu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cmu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cmu *CustomMethodUpdate) SaveX(ctx context.Context) int {
	affected, err := cmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cmu *CustomMethodUpdate) Exec(ctx context.Context) error {
	_, err := cmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmu *CustomMethodUpdate) ExecX(ctx context.Context) {
	if err := cmu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cmu *CustomMethodUpdate) defaults() {
	if _, ok := cmu.mutation.UpdateTime(); !ok {
		v := custommethod.UpdateDefaultUpdateTime()
		cmu.mutation.SetUpdateTime(v)
	}
}

func (cmu *CustomMethodUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   custommethod.Table,
			Columns: custommethod.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: custommethod.FieldID,
			},
		},
	}
	if ps := cmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cmu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: custommethod.FieldUpdateTime,
		})
	}
	if value, ok := cmu.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: custommethod.FieldStringRef,
		})
	}
	if cmu.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: custommethod.FieldStringRef,
		})
	}
	if value, ok := cmu.mutation.CustomMethodName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: custommethod.FieldCustomMethodName,
		})
	}
	if cmu.mutation.CustomMethodNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: custommethod.FieldCustomMethodName,
		})
	}
	if value, ok := cmu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: custommethod.FieldDescription,
		})
	}
	if cmu.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: custommethod.FieldDescription,
		})
	}
	if cmu.mutation.CustomMethodTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   custommethod.CustomMethodTypeTable,
			Columns: []string{custommethod.CustomMethodTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: custommethodtype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmu.mutation.CustomMethodTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   custommethod.CustomMethodTypeTable,
			Columns: []string{custommethod.CustomMethodTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: custommethodtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cmu.mutation.ProductAssocsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   custommethod.ProductAssocsTable,
			Columns: []string{custommethod.ProductAssocsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productassoc.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmu.mutation.RemovedProductAssocsIDs(); len(nodes) > 0 && !cmu.mutation.ProductAssocsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   custommethod.ProductAssocsTable,
			Columns: []string{custommethod.ProductAssocsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productassoc.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmu.mutation.ProductAssocsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   custommethod.ProductAssocsTable,
			Columns: []string{custommethod.ProductAssocsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productassoc.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cmu.mutation.ProductPricesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   custommethod.ProductPricesTable,
			Columns: []string{custommethod.ProductPricesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productprice.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmu.mutation.RemovedProductPricesIDs(); len(nodes) > 0 && !cmu.mutation.ProductPricesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   custommethod.ProductPricesTable,
			Columns: []string{custommethod.ProductPricesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productprice.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmu.mutation.ProductPricesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   custommethod.ProductPricesTable,
			Columns: []string{custommethod.ProductPricesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productprice.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{custommethod.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// CustomMethodUpdateOne is the builder for updating a single CustomMethod entity.
type CustomMethodUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CustomMethodMutation
}

// SetStringRef sets the "string_ref" field.
func (cmuo *CustomMethodUpdateOne) SetStringRef(s string) *CustomMethodUpdateOne {
	cmuo.mutation.SetStringRef(s)
	return cmuo
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (cmuo *CustomMethodUpdateOne) SetNillableStringRef(s *string) *CustomMethodUpdateOne {
	if s != nil {
		cmuo.SetStringRef(*s)
	}
	return cmuo
}

// ClearStringRef clears the value of the "string_ref" field.
func (cmuo *CustomMethodUpdateOne) ClearStringRef() *CustomMethodUpdateOne {
	cmuo.mutation.ClearStringRef()
	return cmuo
}

// SetCustomMethodName sets the "custom_method_name" field.
func (cmuo *CustomMethodUpdateOne) SetCustomMethodName(s string) *CustomMethodUpdateOne {
	cmuo.mutation.SetCustomMethodName(s)
	return cmuo
}

// SetNillableCustomMethodName sets the "custom_method_name" field if the given value is not nil.
func (cmuo *CustomMethodUpdateOne) SetNillableCustomMethodName(s *string) *CustomMethodUpdateOne {
	if s != nil {
		cmuo.SetCustomMethodName(*s)
	}
	return cmuo
}

// ClearCustomMethodName clears the value of the "custom_method_name" field.
func (cmuo *CustomMethodUpdateOne) ClearCustomMethodName() *CustomMethodUpdateOne {
	cmuo.mutation.ClearCustomMethodName()
	return cmuo
}

// SetDescription sets the "description" field.
func (cmuo *CustomMethodUpdateOne) SetDescription(s string) *CustomMethodUpdateOne {
	cmuo.mutation.SetDescription(s)
	return cmuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cmuo *CustomMethodUpdateOne) SetNillableDescription(s *string) *CustomMethodUpdateOne {
	if s != nil {
		cmuo.SetDescription(*s)
	}
	return cmuo
}

// ClearDescription clears the value of the "description" field.
func (cmuo *CustomMethodUpdateOne) ClearDescription() *CustomMethodUpdateOne {
	cmuo.mutation.ClearDescription()
	return cmuo
}

// SetCustomMethodTypeID sets the "custom_method_type" edge to the CustomMethodType entity by ID.
func (cmuo *CustomMethodUpdateOne) SetCustomMethodTypeID(id int) *CustomMethodUpdateOne {
	cmuo.mutation.SetCustomMethodTypeID(id)
	return cmuo
}

// SetNillableCustomMethodTypeID sets the "custom_method_type" edge to the CustomMethodType entity by ID if the given value is not nil.
func (cmuo *CustomMethodUpdateOne) SetNillableCustomMethodTypeID(id *int) *CustomMethodUpdateOne {
	if id != nil {
		cmuo = cmuo.SetCustomMethodTypeID(*id)
	}
	return cmuo
}

// SetCustomMethodType sets the "custom_method_type" edge to the CustomMethodType entity.
func (cmuo *CustomMethodUpdateOne) SetCustomMethodType(c *CustomMethodType) *CustomMethodUpdateOne {
	return cmuo.SetCustomMethodTypeID(c.ID)
}

// AddProductAssocIDs adds the "product_assocs" edge to the ProductAssoc entity by IDs.
func (cmuo *CustomMethodUpdateOne) AddProductAssocIDs(ids ...int) *CustomMethodUpdateOne {
	cmuo.mutation.AddProductAssocIDs(ids...)
	return cmuo
}

// AddProductAssocs adds the "product_assocs" edges to the ProductAssoc entity.
func (cmuo *CustomMethodUpdateOne) AddProductAssocs(p ...*ProductAssoc) *CustomMethodUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cmuo.AddProductAssocIDs(ids...)
}

// AddProductPriceIDs adds the "product_prices" edge to the ProductPrice entity by IDs.
func (cmuo *CustomMethodUpdateOne) AddProductPriceIDs(ids ...int) *CustomMethodUpdateOne {
	cmuo.mutation.AddProductPriceIDs(ids...)
	return cmuo
}

// AddProductPrices adds the "product_prices" edges to the ProductPrice entity.
func (cmuo *CustomMethodUpdateOne) AddProductPrices(p ...*ProductPrice) *CustomMethodUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cmuo.AddProductPriceIDs(ids...)
}

// Mutation returns the CustomMethodMutation object of the builder.
func (cmuo *CustomMethodUpdateOne) Mutation() *CustomMethodMutation {
	return cmuo.mutation
}

// ClearCustomMethodType clears the "custom_method_type" edge to the CustomMethodType entity.
func (cmuo *CustomMethodUpdateOne) ClearCustomMethodType() *CustomMethodUpdateOne {
	cmuo.mutation.ClearCustomMethodType()
	return cmuo
}

// ClearProductAssocs clears all "product_assocs" edges to the ProductAssoc entity.
func (cmuo *CustomMethodUpdateOne) ClearProductAssocs() *CustomMethodUpdateOne {
	cmuo.mutation.ClearProductAssocs()
	return cmuo
}

// RemoveProductAssocIDs removes the "product_assocs" edge to ProductAssoc entities by IDs.
func (cmuo *CustomMethodUpdateOne) RemoveProductAssocIDs(ids ...int) *CustomMethodUpdateOne {
	cmuo.mutation.RemoveProductAssocIDs(ids...)
	return cmuo
}

// RemoveProductAssocs removes "product_assocs" edges to ProductAssoc entities.
func (cmuo *CustomMethodUpdateOne) RemoveProductAssocs(p ...*ProductAssoc) *CustomMethodUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cmuo.RemoveProductAssocIDs(ids...)
}

// ClearProductPrices clears all "product_prices" edges to the ProductPrice entity.
func (cmuo *CustomMethodUpdateOne) ClearProductPrices() *CustomMethodUpdateOne {
	cmuo.mutation.ClearProductPrices()
	return cmuo
}

// RemoveProductPriceIDs removes the "product_prices" edge to ProductPrice entities by IDs.
func (cmuo *CustomMethodUpdateOne) RemoveProductPriceIDs(ids ...int) *CustomMethodUpdateOne {
	cmuo.mutation.RemoveProductPriceIDs(ids...)
	return cmuo
}

// RemoveProductPrices removes "product_prices" edges to ProductPrice entities.
func (cmuo *CustomMethodUpdateOne) RemoveProductPrices(p ...*ProductPrice) *CustomMethodUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cmuo.RemoveProductPriceIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cmuo *CustomMethodUpdateOne) Select(field string, fields ...string) *CustomMethodUpdateOne {
	cmuo.fields = append([]string{field}, fields...)
	return cmuo
}

// Save executes the query and returns the updated CustomMethod entity.
func (cmuo *CustomMethodUpdateOne) Save(ctx context.Context) (*CustomMethod, error) {
	var (
		err  error
		node *CustomMethod
	)
	cmuo.defaults()
	if len(cmuo.hooks) == 0 {
		node, err = cmuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CustomMethodMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cmuo.mutation = mutation
			node, err = cmuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cmuo.hooks) - 1; i >= 0; i-- {
			mut = cmuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cmuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cmuo *CustomMethodUpdateOne) SaveX(ctx context.Context) *CustomMethod {
	node, err := cmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cmuo *CustomMethodUpdateOne) Exec(ctx context.Context) error {
	_, err := cmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmuo *CustomMethodUpdateOne) ExecX(ctx context.Context) {
	if err := cmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cmuo *CustomMethodUpdateOne) defaults() {
	if _, ok := cmuo.mutation.UpdateTime(); !ok {
		v := custommethod.UpdateDefaultUpdateTime()
		cmuo.mutation.SetUpdateTime(v)
	}
}

func (cmuo *CustomMethodUpdateOne) sqlSave(ctx context.Context) (_node *CustomMethod, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   custommethod.Table,
			Columns: custommethod.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: custommethod.FieldID,
			},
		},
	}
	id, ok := cmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing CustomMethod.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := cmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, custommethod.FieldID)
		for _, f := range fields {
			if !custommethod.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != custommethod.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cmuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: custommethod.FieldUpdateTime,
		})
	}
	if value, ok := cmuo.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: custommethod.FieldStringRef,
		})
	}
	if cmuo.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: custommethod.FieldStringRef,
		})
	}
	if value, ok := cmuo.mutation.CustomMethodName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: custommethod.FieldCustomMethodName,
		})
	}
	if cmuo.mutation.CustomMethodNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: custommethod.FieldCustomMethodName,
		})
	}
	if value, ok := cmuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: custommethod.FieldDescription,
		})
	}
	if cmuo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: custommethod.FieldDescription,
		})
	}
	if cmuo.mutation.CustomMethodTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   custommethod.CustomMethodTypeTable,
			Columns: []string{custommethod.CustomMethodTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: custommethodtype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmuo.mutation.CustomMethodTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   custommethod.CustomMethodTypeTable,
			Columns: []string{custommethod.CustomMethodTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: custommethodtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cmuo.mutation.ProductAssocsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   custommethod.ProductAssocsTable,
			Columns: []string{custommethod.ProductAssocsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productassoc.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmuo.mutation.RemovedProductAssocsIDs(); len(nodes) > 0 && !cmuo.mutation.ProductAssocsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   custommethod.ProductAssocsTable,
			Columns: []string{custommethod.ProductAssocsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productassoc.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmuo.mutation.ProductAssocsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   custommethod.ProductAssocsTable,
			Columns: []string{custommethod.ProductAssocsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productassoc.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cmuo.mutation.ProductPricesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   custommethod.ProductPricesTable,
			Columns: []string{custommethod.ProductPricesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productprice.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmuo.mutation.RemovedProductPricesIDs(); len(nodes) > 0 && !cmuo.mutation.ProductPricesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   custommethod.ProductPricesTable,
			Columns: []string{custommethod.ProductPricesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productprice.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmuo.mutation.ProductPricesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   custommethod.ProductPricesTable,
			Columns: []string{custommethod.ProductPricesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productprice.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CustomMethod{config: cmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{custommethod.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
