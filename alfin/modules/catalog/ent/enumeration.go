// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/enumeration"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/enumerationtype"
)

// Enumeration is the model entity for the Enumeration schema.
type Enumeration struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// StringRef holds the value of the "string_ref" field.
	StringRef string `json:"string_ref,omitempty"`
	// EnumCode holds the value of the "enum_code" field.
	EnumCode string `json:"enum_code,omitempty"`
	// SequenceID holds the value of the "sequence_id" field.
	SequenceID int `json:"sequence_id,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EnumerationQuery when eager-loading is set.
	Edges                         EnumerationEdges `json:"edges"`
	enumeration_type_enumerations *int
}

// EnumerationEdges holds the relations/edges for other nodes in the graph.
type EnumerationEdges struct {
	// EnumerationType holds the value of the enumeration_type edge.
	EnumerationType *EnumerationType `json:"enumeration_type,omitempty"`
	// ReasonInventoryItemDetails holds the value of the reason_inventory_item_details edge.
	ReasonInventoryItemDetails []*InventoryItemDetail `json:"reason_inventory_item_details,omitempty"`
	// SalesChannelOrderHeaders holds the value of the sales_channel_order_headers edge.
	SalesChannelOrderHeaders []*OrderHeader `json:"sales_channel_order_headers,omitempty"`
	// VirtualVariantMethodProducts holds the value of the virtual_variant_method_products edge.
	VirtualVariantMethodProducts []*Product `json:"virtual_variant_method_products,omitempty"`
	// RatingProducts holds the value of the rating_products edge.
	RatingProducts []*Product `json:"rating_products,omitempty"`
	// RequirementMethodProducts holds the value of the requirement_method_products edge.
	RequirementMethodProducts []*Product `json:"requirement_method_products,omitempty"`
	// ReserveOrderProductStores holds the value of the reserve_order_product_stores edge.
	ReserveOrderProductStores []*ProductStore `json:"reserve_order_product_stores,omitempty"`
	// RequirementMethodProductStores holds the value of the requirement_method_product_stores edge.
	RequirementMethodProductStores []*ProductStore `json:"requirement_method_product_stores,omitempty"`
	// DefaultSalesChannelProductStores holds the value of the default_sales_channel_product_stores edge.
	DefaultSalesChannelProductStores []*ProductStore `json:"default_sales_channel_product_stores,omitempty"`
	// StoreCreditAccountProductStores holds the value of the store_credit_account_product_stores edge.
	StoreCreditAccountProductStores []*ProductStore `json:"store_credit_account_product_stores,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [10]bool
}

// EnumerationTypeOrErr returns the EnumerationType value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EnumerationEdges) EnumerationTypeOrErr() (*EnumerationType, error) {
	if e.loadedTypes[0] {
		if e.EnumerationType == nil {
			// The edge enumeration_type was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: enumerationtype.Label}
		}
		return e.EnumerationType, nil
	}
	return nil, &NotLoadedError{edge: "enumeration_type"}
}

// ReasonInventoryItemDetailsOrErr returns the ReasonInventoryItemDetails value or an error if the edge
// was not loaded in eager-loading.
func (e EnumerationEdges) ReasonInventoryItemDetailsOrErr() ([]*InventoryItemDetail, error) {
	if e.loadedTypes[1] {
		return e.ReasonInventoryItemDetails, nil
	}
	return nil, &NotLoadedError{edge: "reason_inventory_item_details"}
}

// SalesChannelOrderHeadersOrErr returns the SalesChannelOrderHeaders value or an error if the edge
// was not loaded in eager-loading.
func (e EnumerationEdges) SalesChannelOrderHeadersOrErr() ([]*OrderHeader, error) {
	if e.loadedTypes[2] {
		return e.SalesChannelOrderHeaders, nil
	}
	return nil, &NotLoadedError{edge: "sales_channel_order_headers"}
}

// VirtualVariantMethodProductsOrErr returns the VirtualVariantMethodProducts value or an error if the edge
// was not loaded in eager-loading.
func (e EnumerationEdges) VirtualVariantMethodProductsOrErr() ([]*Product, error) {
	if e.loadedTypes[3] {
		return e.VirtualVariantMethodProducts, nil
	}
	return nil, &NotLoadedError{edge: "virtual_variant_method_products"}
}

// RatingProductsOrErr returns the RatingProducts value or an error if the edge
// was not loaded in eager-loading.
func (e EnumerationEdges) RatingProductsOrErr() ([]*Product, error) {
	if e.loadedTypes[4] {
		return e.RatingProducts, nil
	}
	return nil, &NotLoadedError{edge: "rating_products"}
}

// RequirementMethodProductsOrErr returns the RequirementMethodProducts value or an error if the edge
// was not loaded in eager-loading.
func (e EnumerationEdges) RequirementMethodProductsOrErr() ([]*Product, error) {
	if e.loadedTypes[5] {
		return e.RequirementMethodProducts, nil
	}
	return nil, &NotLoadedError{edge: "requirement_method_products"}
}

// ReserveOrderProductStoresOrErr returns the ReserveOrderProductStores value or an error if the edge
// was not loaded in eager-loading.
func (e EnumerationEdges) ReserveOrderProductStoresOrErr() ([]*ProductStore, error) {
	if e.loadedTypes[6] {
		return e.ReserveOrderProductStores, nil
	}
	return nil, &NotLoadedError{edge: "reserve_order_product_stores"}
}

// RequirementMethodProductStoresOrErr returns the RequirementMethodProductStores value or an error if the edge
// was not loaded in eager-loading.
func (e EnumerationEdges) RequirementMethodProductStoresOrErr() ([]*ProductStore, error) {
	if e.loadedTypes[7] {
		return e.RequirementMethodProductStores, nil
	}
	return nil, &NotLoadedError{edge: "requirement_method_product_stores"}
}

// DefaultSalesChannelProductStoresOrErr returns the DefaultSalesChannelProductStores value or an error if the edge
// was not loaded in eager-loading.
func (e EnumerationEdges) DefaultSalesChannelProductStoresOrErr() ([]*ProductStore, error) {
	if e.loadedTypes[8] {
		return e.DefaultSalesChannelProductStores, nil
	}
	return nil, &NotLoadedError{edge: "default_sales_channel_product_stores"}
}

// StoreCreditAccountProductStoresOrErr returns the StoreCreditAccountProductStores value or an error if the edge
// was not loaded in eager-loading.
func (e EnumerationEdges) StoreCreditAccountProductStoresOrErr() ([]*ProductStore, error) {
	if e.loadedTypes[9] {
		return e.StoreCreditAccountProductStores, nil
	}
	return nil, &NotLoadedError{edge: "store_credit_account_product_stores"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Enumeration) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case enumeration.FieldID, enumeration.FieldSequenceID:
			values[i] = new(sql.NullInt64)
		case enumeration.FieldStringRef, enumeration.FieldEnumCode, enumeration.FieldDescription:
			values[i] = new(sql.NullString)
		case enumeration.FieldCreateTime, enumeration.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case enumeration.ForeignKeys[0]: // enumeration_type_enumerations
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Enumeration", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Enumeration fields.
func (e *Enumeration) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case enumeration.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			e.ID = int(value.Int64)
		case enumeration.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				e.CreateTime = value.Time
			}
		case enumeration.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				e.UpdateTime = value.Time
			}
		case enumeration.FieldStringRef:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field string_ref", values[i])
			} else if value.Valid {
				e.StringRef = value.String
			}
		case enumeration.FieldEnumCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field enum_code", values[i])
			} else if value.Valid {
				e.EnumCode = value.String
			}
		case enumeration.FieldSequenceID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sequence_id", values[i])
			} else if value.Valid {
				e.SequenceID = int(value.Int64)
			}
		case enumeration.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				e.Description = value.String
			}
		case enumeration.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field enumeration_type_enumerations", value)
			} else if value.Valid {
				e.enumeration_type_enumerations = new(int)
				*e.enumeration_type_enumerations = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryEnumerationType queries the "enumeration_type" edge of the Enumeration entity.
func (e *Enumeration) QueryEnumerationType() *EnumerationTypeQuery {
	return (&EnumerationClient{config: e.config}).QueryEnumerationType(e)
}

// QueryReasonInventoryItemDetails queries the "reason_inventory_item_details" edge of the Enumeration entity.
func (e *Enumeration) QueryReasonInventoryItemDetails() *InventoryItemDetailQuery {
	return (&EnumerationClient{config: e.config}).QueryReasonInventoryItemDetails(e)
}

// QuerySalesChannelOrderHeaders queries the "sales_channel_order_headers" edge of the Enumeration entity.
func (e *Enumeration) QuerySalesChannelOrderHeaders() *OrderHeaderQuery {
	return (&EnumerationClient{config: e.config}).QuerySalesChannelOrderHeaders(e)
}

// QueryVirtualVariantMethodProducts queries the "virtual_variant_method_products" edge of the Enumeration entity.
func (e *Enumeration) QueryVirtualVariantMethodProducts() *ProductQuery {
	return (&EnumerationClient{config: e.config}).QueryVirtualVariantMethodProducts(e)
}

// QueryRatingProducts queries the "rating_products" edge of the Enumeration entity.
func (e *Enumeration) QueryRatingProducts() *ProductQuery {
	return (&EnumerationClient{config: e.config}).QueryRatingProducts(e)
}

// QueryRequirementMethodProducts queries the "requirement_method_products" edge of the Enumeration entity.
func (e *Enumeration) QueryRequirementMethodProducts() *ProductQuery {
	return (&EnumerationClient{config: e.config}).QueryRequirementMethodProducts(e)
}

// QueryReserveOrderProductStores queries the "reserve_order_product_stores" edge of the Enumeration entity.
func (e *Enumeration) QueryReserveOrderProductStores() *ProductStoreQuery {
	return (&EnumerationClient{config: e.config}).QueryReserveOrderProductStores(e)
}

// QueryRequirementMethodProductStores queries the "requirement_method_product_stores" edge of the Enumeration entity.
func (e *Enumeration) QueryRequirementMethodProductStores() *ProductStoreQuery {
	return (&EnumerationClient{config: e.config}).QueryRequirementMethodProductStores(e)
}

// QueryDefaultSalesChannelProductStores queries the "default_sales_channel_product_stores" edge of the Enumeration entity.
func (e *Enumeration) QueryDefaultSalesChannelProductStores() *ProductStoreQuery {
	return (&EnumerationClient{config: e.config}).QueryDefaultSalesChannelProductStores(e)
}

// QueryStoreCreditAccountProductStores queries the "store_credit_account_product_stores" edge of the Enumeration entity.
func (e *Enumeration) QueryStoreCreditAccountProductStores() *ProductStoreQuery {
	return (&EnumerationClient{config: e.config}).QueryStoreCreditAccountProductStores(e)
}

// Update returns a builder for updating this Enumeration.
// Note that you need to call Enumeration.Unwrap() before calling this method if this Enumeration
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Enumeration) Update() *EnumerationUpdateOne {
	return (&EnumerationClient{config: e.config}).UpdateOne(e)
}

// Unwrap unwraps the Enumeration entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *Enumeration) Unwrap() *Enumeration {
	tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Enumeration is not a transactional entity")
	}
	e.config.driver = tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Enumeration) String() string {
	var builder strings.Builder
	builder.WriteString("Enumeration(")
	builder.WriteString(fmt.Sprintf("id=%v", e.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(e.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(e.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", string_ref=")
	builder.WriteString(e.StringRef)
	builder.WriteString(", enum_code=")
	builder.WriteString(e.EnumCode)
	builder.WriteString(", sequence_id=")
	builder.WriteString(fmt.Sprintf("%v", e.SequenceID))
	builder.WriteString(", description=")
	builder.WriteString(e.Description)
	builder.WriteByte(')')
	return builder.String()
}

// Enumerations is a parsable slice of Enumeration.
type Enumerations []*Enumeration

func (e Enumerations) config(cfg config) {
	for _i := range e {
		e[_i].config = cfg
	}
}
