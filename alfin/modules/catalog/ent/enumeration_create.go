// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/enumeration"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/enumerationtype"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/inventoryitemdetail"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/orderheader"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/product"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productstore"
)

// EnumerationCreate is the builder for creating a Enumeration entity.
type EnumerationCreate struct {
	config
	mutation *EnumerationMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (ec *EnumerationCreate) SetCreateTime(t time.Time) *EnumerationCreate {
	ec.mutation.SetCreateTime(t)
	return ec
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (ec *EnumerationCreate) SetNillableCreateTime(t *time.Time) *EnumerationCreate {
	if t != nil {
		ec.SetCreateTime(*t)
	}
	return ec
}

// SetUpdateTime sets the "update_time" field.
func (ec *EnumerationCreate) SetUpdateTime(t time.Time) *EnumerationCreate {
	ec.mutation.SetUpdateTime(t)
	return ec
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (ec *EnumerationCreate) SetNillableUpdateTime(t *time.Time) *EnumerationCreate {
	if t != nil {
		ec.SetUpdateTime(*t)
	}
	return ec
}

// SetStringRef sets the "string_ref" field.
func (ec *EnumerationCreate) SetStringRef(s string) *EnumerationCreate {
	ec.mutation.SetStringRef(s)
	return ec
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (ec *EnumerationCreate) SetNillableStringRef(s *string) *EnumerationCreate {
	if s != nil {
		ec.SetStringRef(*s)
	}
	return ec
}

// SetEnumCode sets the "enum_code" field.
func (ec *EnumerationCreate) SetEnumCode(s string) *EnumerationCreate {
	ec.mutation.SetEnumCode(s)
	return ec
}

// SetNillableEnumCode sets the "enum_code" field if the given value is not nil.
func (ec *EnumerationCreate) SetNillableEnumCode(s *string) *EnumerationCreate {
	if s != nil {
		ec.SetEnumCode(*s)
	}
	return ec
}

// SetSequenceID sets the "sequence_id" field.
func (ec *EnumerationCreate) SetSequenceID(i int) *EnumerationCreate {
	ec.mutation.SetSequenceID(i)
	return ec
}

// SetNillableSequenceID sets the "sequence_id" field if the given value is not nil.
func (ec *EnumerationCreate) SetNillableSequenceID(i *int) *EnumerationCreate {
	if i != nil {
		ec.SetSequenceID(*i)
	}
	return ec
}

// SetDescription sets the "description" field.
func (ec *EnumerationCreate) SetDescription(s string) *EnumerationCreate {
	ec.mutation.SetDescription(s)
	return ec
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ec *EnumerationCreate) SetNillableDescription(s *string) *EnumerationCreate {
	if s != nil {
		ec.SetDescription(*s)
	}
	return ec
}

// SetEnumerationTypeID sets the "enumeration_type" edge to the EnumerationType entity by ID.
func (ec *EnumerationCreate) SetEnumerationTypeID(id int) *EnumerationCreate {
	ec.mutation.SetEnumerationTypeID(id)
	return ec
}

// SetNillableEnumerationTypeID sets the "enumeration_type" edge to the EnumerationType entity by ID if the given value is not nil.
func (ec *EnumerationCreate) SetNillableEnumerationTypeID(id *int) *EnumerationCreate {
	if id != nil {
		ec = ec.SetEnumerationTypeID(*id)
	}
	return ec
}

// SetEnumerationType sets the "enumeration_type" edge to the EnumerationType entity.
func (ec *EnumerationCreate) SetEnumerationType(e *EnumerationType) *EnumerationCreate {
	return ec.SetEnumerationTypeID(e.ID)
}

// AddReasonInventoryItemDetailIDs adds the "reason_inventory_item_details" edge to the InventoryItemDetail entity by IDs.
func (ec *EnumerationCreate) AddReasonInventoryItemDetailIDs(ids ...int) *EnumerationCreate {
	ec.mutation.AddReasonInventoryItemDetailIDs(ids...)
	return ec
}

// AddReasonInventoryItemDetails adds the "reason_inventory_item_details" edges to the InventoryItemDetail entity.
func (ec *EnumerationCreate) AddReasonInventoryItemDetails(i ...*InventoryItemDetail) *EnumerationCreate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ec.AddReasonInventoryItemDetailIDs(ids...)
}

// AddSalesChannelOrderHeaderIDs adds the "sales_channel_order_headers" edge to the OrderHeader entity by IDs.
func (ec *EnumerationCreate) AddSalesChannelOrderHeaderIDs(ids ...int) *EnumerationCreate {
	ec.mutation.AddSalesChannelOrderHeaderIDs(ids...)
	return ec
}

// AddSalesChannelOrderHeaders adds the "sales_channel_order_headers" edges to the OrderHeader entity.
func (ec *EnumerationCreate) AddSalesChannelOrderHeaders(o ...*OrderHeader) *EnumerationCreate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ec.AddSalesChannelOrderHeaderIDs(ids...)
}

// AddVirtualVariantMethodProductIDs adds the "virtual_variant_method_products" edge to the Product entity by IDs.
func (ec *EnumerationCreate) AddVirtualVariantMethodProductIDs(ids ...int) *EnumerationCreate {
	ec.mutation.AddVirtualVariantMethodProductIDs(ids...)
	return ec
}

// AddVirtualVariantMethodProducts adds the "virtual_variant_method_products" edges to the Product entity.
func (ec *EnumerationCreate) AddVirtualVariantMethodProducts(p ...*Product) *EnumerationCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ec.AddVirtualVariantMethodProductIDs(ids...)
}

// AddRatingProductIDs adds the "rating_products" edge to the Product entity by IDs.
func (ec *EnumerationCreate) AddRatingProductIDs(ids ...int) *EnumerationCreate {
	ec.mutation.AddRatingProductIDs(ids...)
	return ec
}

// AddRatingProducts adds the "rating_products" edges to the Product entity.
func (ec *EnumerationCreate) AddRatingProducts(p ...*Product) *EnumerationCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ec.AddRatingProductIDs(ids...)
}

// AddRequirementMethodProductIDs adds the "requirement_method_products" edge to the Product entity by IDs.
func (ec *EnumerationCreate) AddRequirementMethodProductIDs(ids ...int) *EnumerationCreate {
	ec.mutation.AddRequirementMethodProductIDs(ids...)
	return ec
}

// AddRequirementMethodProducts adds the "requirement_method_products" edges to the Product entity.
func (ec *EnumerationCreate) AddRequirementMethodProducts(p ...*Product) *EnumerationCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ec.AddRequirementMethodProductIDs(ids...)
}

// AddReserveOrderProductStoreIDs adds the "reserve_order_product_stores" edge to the ProductStore entity by IDs.
func (ec *EnumerationCreate) AddReserveOrderProductStoreIDs(ids ...int) *EnumerationCreate {
	ec.mutation.AddReserveOrderProductStoreIDs(ids...)
	return ec
}

// AddReserveOrderProductStores adds the "reserve_order_product_stores" edges to the ProductStore entity.
func (ec *EnumerationCreate) AddReserveOrderProductStores(p ...*ProductStore) *EnumerationCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ec.AddReserveOrderProductStoreIDs(ids...)
}

// AddRequirementMethodProductStoreIDs adds the "requirement_method_product_stores" edge to the ProductStore entity by IDs.
func (ec *EnumerationCreate) AddRequirementMethodProductStoreIDs(ids ...int) *EnumerationCreate {
	ec.mutation.AddRequirementMethodProductStoreIDs(ids...)
	return ec
}

// AddRequirementMethodProductStores adds the "requirement_method_product_stores" edges to the ProductStore entity.
func (ec *EnumerationCreate) AddRequirementMethodProductStores(p ...*ProductStore) *EnumerationCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ec.AddRequirementMethodProductStoreIDs(ids...)
}

// AddDefaultSalesChannelProductStoreIDs adds the "default_sales_channel_product_stores" edge to the ProductStore entity by IDs.
func (ec *EnumerationCreate) AddDefaultSalesChannelProductStoreIDs(ids ...int) *EnumerationCreate {
	ec.mutation.AddDefaultSalesChannelProductStoreIDs(ids...)
	return ec
}

// AddDefaultSalesChannelProductStores adds the "default_sales_channel_product_stores" edges to the ProductStore entity.
func (ec *EnumerationCreate) AddDefaultSalesChannelProductStores(p ...*ProductStore) *EnumerationCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ec.AddDefaultSalesChannelProductStoreIDs(ids...)
}

// AddStoreCreditAccountProductStoreIDs adds the "store_credit_account_product_stores" edge to the ProductStore entity by IDs.
func (ec *EnumerationCreate) AddStoreCreditAccountProductStoreIDs(ids ...int) *EnumerationCreate {
	ec.mutation.AddStoreCreditAccountProductStoreIDs(ids...)
	return ec
}

// AddStoreCreditAccountProductStores adds the "store_credit_account_product_stores" edges to the ProductStore entity.
func (ec *EnumerationCreate) AddStoreCreditAccountProductStores(p ...*ProductStore) *EnumerationCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ec.AddStoreCreditAccountProductStoreIDs(ids...)
}

// Mutation returns the EnumerationMutation object of the builder.
func (ec *EnumerationCreate) Mutation() *EnumerationMutation {
	return ec.mutation
}

// Save creates the Enumeration in the database.
func (ec *EnumerationCreate) Save(ctx context.Context) (*Enumeration, error) {
	var (
		err  error
		node *Enumeration
	)
	ec.defaults()
	if len(ec.hooks) == 0 {
		if err = ec.check(); err != nil {
			return nil, err
		}
		node, err = ec.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EnumerationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ec.check(); err != nil {
				return nil, err
			}
			ec.mutation = mutation
			if node, err = ec.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ec.hooks) - 1; i >= 0; i-- {
			mut = ec.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ec.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ec *EnumerationCreate) SaveX(ctx context.Context) *Enumeration {
	v, err := ec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (ec *EnumerationCreate) defaults() {
	if _, ok := ec.mutation.CreateTime(); !ok {
		v := enumeration.DefaultCreateTime()
		ec.mutation.SetCreateTime(v)
	}
	if _, ok := ec.mutation.UpdateTime(); !ok {
		v := enumeration.DefaultUpdateTime()
		ec.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ec *EnumerationCreate) check() error {
	if _, ok := ec.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New("ent: missing required field \"create_time\"")}
	}
	if _, ok := ec.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New("ent: missing required field \"update_time\"")}
	}
	return nil
}

func (ec *EnumerationCreate) sqlSave(ctx context.Context) (*Enumeration, error) {
	_node, _spec := ec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ec.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (ec *EnumerationCreate) createSpec() (*Enumeration, *sqlgraph.CreateSpec) {
	var (
		_node = &Enumeration{config: ec.config}
		_spec = &sqlgraph.CreateSpec{
			Table: enumeration.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: enumeration.FieldID,
			},
		}
	)
	if value, ok := ec.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: enumeration.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := ec.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: enumeration.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := ec.mutation.StringRef(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: enumeration.FieldStringRef,
		})
		_node.StringRef = value
	}
	if value, ok := ec.mutation.EnumCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: enumeration.FieldEnumCode,
		})
		_node.EnumCode = value
	}
	if value, ok := ec.mutation.SequenceID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: enumeration.FieldSequenceID,
		})
		_node.SequenceID = value
	}
	if value, ok := ec.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: enumeration.FieldDescription,
		})
		_node.Description = value
	}
	if nodes := ec.mutation.EnumerationTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enumeration.EnumerationTypeTable,
			Columns: []string{enumeration.EnumerationTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: enumerationtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.enumeration_type_enumerations = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.ReasonInventoryItemDetailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.ReasonInventoryItemDetailsTable,
			Columns: []string{enumeration.ReasonInventoryItemDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: inventoryitemdetail.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.SalesChannelOrderHeadersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.SalesChannelOrderHeadersTable,
			Columns: []string{enumeration.SalesChannelOrderHeadersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderheader.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.VirtualVariantMethodProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.VirtualVariantMethodProductsTable,
			Columns: []string{enumeration.VirtualVariantMethodProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.RatingProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.RatingProductsTable,
			Columns: []string{enumeration.RatingProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.RequirementMethodProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.RequirementMethodProductsTable,
			Columns: []string{enumeration.RequirementMethodProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.ReserveOrderProductStoresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.ReserveOrderProductStoresTable,
			Columns: []string{enumeration.ReserveOrderProductStoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productstore.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.RequirementMethodProductStoresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.RequirementMethodProductStoresTable,
			Columns: []string{enumeration.RequirementMethodProductStoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productstore.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.DefaultSalesChannelProductStoresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.DefaultSalesChannelProductStoresTable,
			Columns: []string{enumeration.DefaultSalesChannelProductStoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productstore.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.StoreCreditAccountProductStoresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.StoreCreditAccountProductStoresTable,
			Columns: []string{enumeration.StoreCreditAccountProductStoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productstore.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// EnumerationCreateBulk is the builder for creating many Enumeration entities in bulk.
type EnumerationCreateBulk struct {
	config
	builders []*EnumerationCreate
}

// Save creates the Enumeration entities in the database.
func (ecb *EnumerationCreateBulk) Save(ctx context.Context) ([]*Enumeration, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ecb.builders))
	nodes := make([]*Enumeration, len(ecb.builders))
	mutators := make([]Mutator, len(ecb.builders))
	for i := range ecb.builders {
		func(i int, root context.Context) {
			builder := ecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EnumerationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ecb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ecb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ecb *EnumerationCreateBulk) SaveX(ctx context.Context) []*Enumeration {
	v, err := ecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
