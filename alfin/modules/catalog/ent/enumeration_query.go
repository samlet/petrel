// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/enumeration"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/enumerationtype"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/inventoryitemdetail"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/orderheader"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/predicate"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/product"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productstore"
)

// EnumerationQuery is the builder for querying Enumeration entities.
type EnumerationQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.Enumeration
	// eager-loading edges.
	withEnumerationType                  *EnumerationTypeQuery
	withReasonInventoryItemDetails       *InventoryItemDetailQuery
	withSalesChannelOrderHeaders         *OrderHeaderQuery
	withVirtualVariantMethodProducts     *ProductQuery
	withRatingProducts                   *ProductQuery
	withRequirementMethodProducts        *ProductQuery
	withReserveOrderProductStores        *ProductStoreQuery
	withRequirementMethodProductStores   *ProductStoreQuery
	withDefaultSalesChannelProductStores *ProductStoreQuery
	withStoreCreditAccountProductStores  *ProductStoreQuery
	withFKs                              bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the EnumerationQuery builder.
func (eq *EnumerationQuery) Where(ps ...predicate.Enumeration) *EnumerationQuery {
	eq.predicates = append(eq.predicates, ps...)
	return eq
}

// Limit adds a limit step to the query.
func (eq *EnumerationQuery) Limit(limit int) *EnumerationQuery {
	eq.limit = &limit
	return eq
}

// Offset adds an offset step to the query.
func (eq *EnumerationQuery) Offset(offset int) *EnumerationQuery {
	eq.offset = &offset
	return eq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (eq *EnumerationQuery) Unique(unique bool) *EnumerationQuery {
	eq.unique = &unique
	return eq
}

// Order adds an order step to the query.
func (eq *EnumerationQuery) Order(o ...OrderFunc) *EnumerationQuery {
	eq.order = append(eq.order, o...)
	return eq
}

// QueryEnumerationType chains the current query on the "enumeration_type" edge.
func (eq *EnumerationQuery) QueryEnumerationType() *EnumerationTypeQuery {
	query := &EnumerationTypeQuery{config: eq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(enumeration.Table, enumeration.FieldID, selector),
			sqlgraph.To(enumerationtype.Table, enumerationtype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, enumeration.EnumerationTypeTable, enumeration.EnumerationTypeColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryReasonInventoryItemDetails chains the current query on the "reason_inventory_item_details" edge.
func (eq *EnumerationQuery) QueryReasonInventoryItemDetails() *InventoryItemDetailQuery {
	query := &InventoryItemDetailQuery{config: eq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(enumeration.Table, enumeration.FieldID, selector),
			sqlgraph.To(inventoryitemdetail.Table, inventoryitemdetail.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, enumeration.ReasonInventoryItemDetailsTable, enumeration.ReasonInventoryItemDetailsColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySalesChannelOrderHeaders chains the current query on the "sales_channel_order_headers" edge.
func (eq *EnumerationQuery) QuerySalesChannelOrderHeaders() *OrderHeaderQuery {
	query := &OrderHeaderQuery{config: eq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(enumeration.Table, enumeration.FieldID, selector),
			sqlgraph.To(orderheader.Table, orderheader.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, enumeration.SalesChannelOrderHeadersTable, enumeration.SalesChannelOrderHeadersColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryVirtualVariantMethodProducts chains the current query on the "virtual_variant_method_products" edge.
func (eq *EnumerationQuery) QueryVirtualVariantMethodProducts() *ProductQuery {
	query := &ProductQuery{config: eq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(enumeration.Table, enumeration.FieldID, selector),
			sqlgraph.To(product.Table, product.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, enumeration.VirtualVariantMethodProductsTable, enumeration.VirtualVariantMethodProductsColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRatingProducts chains the current query on the "rating_products" edge.
func (eq *EnumerationQuery) QueryRatingProducts() *ProductQuery {
	query := &ProductQuery{config: eq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(enumeration.Table, enumeration.FieldID, selector),
			sqlgraph.To(product.Table, product.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, enumeration.RatingProductsTable, enumeration.RatingProductsColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRequirementMethodProducts chains the current query on the "requirement_method_products" edge.
func (eq *EnumerationQuery) QueryRequirementMethodProducts() *ProductQuery {
	query := &ProductQuery{config: eq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(enumeration.Table, enumeration.FieldID, selector),
			sqlgraph.To(product.Table, product.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, enumeration.RequirementMethodProductsTable, enumeration.RequirementMethodProductsColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryReserveOrderProductStores chains the current query on the "reserve_order_product_stores" edge.
func (eq *EnumerationQuery) QueryReserveOrderProductStores() *ProductStoreQuery {
	query := &ProductStoreQuery{config: eq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(enumeration.Table, enumeration.FieldID, selector),
			sqlgraph.To(productstore.Table, productstore.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, enumeration.ReserveOrderProductStoresTable, enumeration.ReserveOrderProductStoresColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRequirementMethodProductStores chains the current query on the "requirement_method_product_stores" edge.
func (eq *EnumerationQuery) QueryRequirementMethodProductStores() *ProductStoreQuery {
	query := &ProductStoreQuery{config: eq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(enumeration.Table, enumeration.FieldID, selector),
			sqlgraph.To(productstore.Table, productstore.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, enumeration.RequirementMethodProductStoresTable, enumeration.RequirementMethodProductStoresColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDefaultSalesChannelProductStores chains the current query on the "default_sales_channel_product_stores" edge.
func (eq *EnumerationQuery) QueryDefaultSalesChannelProductStores() *ProductStoreQuery {
	query := &ProductStoreQuery{config: eq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(enumeration.Table, enumeration.FieldID, selector),
			sqlgraph.To(productstore.Table, productstore.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, enumeration.DefaultSalesChannelProductStoresTable, enumeration.DefaultSalesChannelProductStoresColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryStoreCreditAccountProductStores chains the current query on the "store_credit_account_product_stores" edge.
func (eq *EnumerationQuery) QueryStoreCreditAccountProductStores() *ProductStoreQuery {
	query := &ProductStoreQuery{config: eq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(enumeration.Table, enumeration.FieldID, selector),
			sqlgraph.To(productstore.Table, productstore.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, enumeration.StoreCreditAccountProductStoresTable, enumeration.StoreCreditAccountProductStoresColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Enumeration entity from the query.
// Returns a *NotFoundError when no Enumeration was found.
func (eq *EnumerationQuery) First(ctx context.Context) (*Enumeration, error) {
	nodes, err := eq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{enumeration.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (eq *EnumerationQuery) FirstX(ctx context.Context) *Enumeration {
	node, err := eq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Enumeration ID from the query.
// Returns a *NotFoundError when no Enumeration ID was found.
func (eq *EnumerationQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = eq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{enumeration.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (eq *EnumerationQuery) FirstIDX(ctx context.Context) int {
	id, err := eq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Enumeration entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one Enumeration entity is not found.
// Returns a *NotFoundError when no Enumeration entities are found.
func (eq *EnumerationQuery) Only(ctx context.Context) (*Enumeration, error) {
	nodes, err := eq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{enumeration.Label}
	default:
		return nil, &NotSingularError{enumeration.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (eq *EnumerationQuery) OnlyX(ctx context.Context) *Enumeration {
	node, err := eq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Enumeration ID in the query.
// Returns a *NotSingularError when exactly one Enumeration ID is not found.
// Returns a *NotFoundError when no entities are found.
func (eq *EnumerationQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = eq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{enumeration.Label}
	default:
		err = &NotSingularError{enumeration.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (eq *EnumerationQuery) OnlyIDX(ctx context.Context) int {
	id, err := eq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Enumerations.
func (eq *EnumerationQuery) All(ctx context.Context) ([]*Enumeration, error) {
	if err := eq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return eq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (eq *EnumerationQuery) AllX(ctx context.Context) []*Enumeration {
	nodes, err := eq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Enumeration IDs.
func (eq *EnumerationQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := eq.Select(enumeration.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (eq *EnumerationQuery) IDsX(ctx context.Context) []int {
	ids, err := eq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (eq *EnumerationQuery) Count(ctx context.Context) (int, error) {
	if err := eq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return eq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (eq *EnumerationQuery) CountX(ctx context.Context) int {
	count, err := eq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (eq *EnumerationQuery) Exist(ctx context.Context) (bool, error) {
	if err := eq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return eq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (eq *EnumerationQuery) ExistX(ctx context.Context) bool {
	exist, err := eq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the EnumerationQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (eq *EnumerationQuery) Clone() *EnumerationQuery {
	if eq == nil {
		return nil
	}
	return &EnumerationQuery{
		config:                               eq.config,
		limit:                                eq.limit,
		offset:                               eq.offset,
		order:                                append([]OrderFunc{}, eq.order...),
		predicates:                           append([]predicate.Enumeration{}, eq.predicates...),
		withEnumerationType:                  eq.withEnumerationType.Clone(),
		withReasonInventoryItemDetails:       eq.withReasonInventoryItemDetails.Clone(),
		withSalesChannelOrderHeaders:         eq.withSalesChannelOrderHeaders.Clone(),
		withVirtualVariantMethodProducts:     eq.withVirtualVariantMethodProducts.Clone(),
		withRatingProducts:                   eq.withRatingProducts.Clone(),
		withRequirementMethodProducts:        eq.withRequirementMethodProducts.Clone(),
		withReserveOrderProductStores:        eq.withReserveOrderProductStores.Clone(),
		withRequirementMethodProductStores:   eq.withRequirementMethodProductStores.Clone(),
		withDefaultSalesChannelProductStores: eq.withDefaultSalesChannelProductStores.Clone(),
		withStoreCreditAccountProductStores:  eq.withStoreCreditAccountProductStores.Clone(),
		// clone intermediate query.
		sql:  eq.sql.Clone(),
		path: eq.path,
	}
}

// WithEnumerationType tells the query-builder to eager-load the nodes that are connected to
// the "enumeration_type" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EnumerationQuery) WithEnumerationType(opts ...func(*EnumerationTypeQuery)) *EnumerationQuery {
	query := &EnumerationTypeQuery{config: eq.config}
	for _, opt := range opts {
		opt(query)
	}
	eq.withEnumerationType = query
	return eq
}

// WithReasonInventoryItemDetails tells the query-builder to eager-load the nodes that are connected to
// the "reason_inventory_item_details" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EnumerationQuery) WithReasonInventoryItemDetails(opts ...func(*InventoryItemDetailQuery)) *EnumerationQuery {
	query := &InventoryItemDetailQuery{config: eq.config}
	for _, opt := range opts {
		opt(query)
	}
	eq.withReasonInventoryItemDetails = query
	return eq
}

// WithSalesChannelOrderHeaders tells the query-builder to eager-load the nodes that are connected to
// the "sales_channel_order_headers" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EnumerationQuery) WithSalesChannelOrderHeaders(opts ...func(*OrderHeaderQuery)) *EnumerationQuery {
	query := &OrderHeaderQuery{config: eq.config}
	for _, opt := range opts {
		opt(query)
	}
	eq.withSalesChannelOrderHeaders = query
	return eq
}

// WithVirtualVariantMethodProducts tells the query-builder to eager-load the nodes that are connected to
// the "virtual_variant_method_products" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EnumerationQuery) WithVirtualVariantMethodProducts(opts ...func(*ProductQuery)) *EnumerationQuery {
	query := &ProductQuery{config: eq.config}
	for _, opt := range opts {
		opt(query)
	}
	eq.withVirtualVariantMethodProducts = query
	return eq
}

// WithRatingProducts tells the query-builder to eager-load the nodes that are connected to
// the "rating_products" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EnumerationQuery) WithRatingProducts(opts ...func(*ProductQuery)) *EnumerationQuery {
	query := &ProductQuery{config: eq.config}
	for _, opt := range opts {
		opt(query)
	}
	eq.withRatingProducts = query
	return eq
}

// WithRequirementMethodProducts tells the query-builder to eager-load the nodes that are connected to
// the "requirement_method_products" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EnumerationQuery) WithRequirementMethodProducts(opts ...func(*ProductQuery)) *EnumerationQuery {
	query := &ProductQuery{config: eq.config}
	for _, opt := range opts {
		opt(query)
	}
	eq.withRequirementMethodProducts = query
	return eq
}

// WithReserveOrderProductStores tells the query-builder to eager-load the nodes that are connected to
// the "reserve_order_product_stores" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EnumerationQuery) WithReserveOrderProductStores(opts ...func(*ProductStoreQuery)) *EnumerationQuery {
	query := &ProductStoreQuery{config: eq.config}
	for _, opt := range opts {
		opt(query)
	}
	eq.withReserveOrderProductStores = query
	return eq
}

// WithRequirementMethodProductStores tells the query-builder to eager-load the nodes that are connected to
// the "requirement_method_product_stores" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EnumerationQuery) WithRequirementMethodProductStores(opts ...func(*ProductStoreQuery)) *EnumerationQuery {
	query := &ProductStoreQuery{config: eq.config}
	for _, opt := range opts {
		opt(query)
	}
	eq.withRequirementMethodProductStores = query
	return eq
}

// WithDefaultSalesChannelProductStores tells the query-builder to eager-load the nodes that are connected to
// the "default_sales_channel_product_stores" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EnumerationQuery) WithDefaultSalesChannelProductStores(opts ...func(*ProductStoreQuery)) *EnumerationQuery {
	query := &ProductStoreQuery{config: eq.config}
	for _, opt := range opts {
		opt(query)
	}
	eq.withDefaultSalesChannelProductStores = query
	return eq
}

// WithStoreCreditAccountProductStores tells the query-builder to eager-load the nodes that are connected to
// the "store_credit_account_product_stores" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EnumerationQuery) WithStoreCreditAccountProductStores(opts ...func(*ProductStoreQuery)) *EnumerationQuery {
	query := &ProductStoreQuery{config: eq.config}
	for _, opt := range opts {
		opt(query)
	}
	eq.withStoreCreditAccountProductStores = query
	return eq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Enumeration.Query().
//		GroupBy(enumeration.FieldCreateTime).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (eq *EnumerationQuery) GroupBy(field string, fields ...string) *EnumerationGroupBy {
	group := &EnumerationGroupBy{config: eq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return eq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//	}
//
//	client.Enumeration.Query().
//		Select(enumeration.FieldCreateTime).
//		Scan(ctx, &v)
//
func (eq *EnumerationQuery) Select(field string, fields ...string) *EnumerationSelect {
	eq.fields = append([]string{field}, fields...)
	return &EnumerationSelect{EnumerationQuery: eq}
}

func (eq *EnumerationQuery) prepareQuery(ctx context.Context) error {
	for _, f := range eq.fields {
		if !enumeration.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if eq.path != nil {
		prev, err := eq.path(ctx)
		if err != nil {
			return err
		}
		eq.sql = prev
	}
	return nil
}

func (eq *EnumerationQuery) sqlAll(ctx context.Context) ([]*Enumeration, error) {
	var (
		nodes       = []*Enumeration{}
		withFKs     = eq.withFKs
		_spec       = eq.querySpec()
		loadedTypes = [10]bool{
			eq.withEnumerationType != nil,
			eq.withReasonInventoryItemDetails != nil,
			eq.withSalesChannelOrderHeaders != nil,
			eq.withVirtualVariantMethodProducts != nil,
			eq.withRatingProducts != nil,
			eq.withRequirementMethodProducts != nil,
			eq.withReserveOrderProductStores != nil,
			eq.withRequirementMethodProductStores != nil,
			eq.withDefaultSalesChannelProductStores != nil,
			eq.withStoreCreditAccountProductStores != nil,
		}
	)
	if eq.withEnumerationType != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, enumeration.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &Enumeration{config: eq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, eq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := eq.withEnumerationType; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*Enumeration)
		for i := range nodes {
			if nodes[i].enumeration_type_enumerations == nil {
				continue
			}
			fk := *nodes[i].enumeration_type_enumerations
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(enumerationtype.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "enumeration_type_enumerations" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.EnumerationType = n
			}
		}
	}

	if query := eq.withReasonInventoryItemDetails; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*Enumeration)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.ReasonInventoryItemDetails = []*InventoryItemDetail{}
		}
		query.withFKs = true
		query.Where(predicate.InventoryItemDetail(func(s *sql.Selector) {
			s.Where(sql.InValues(enumeration.ReasonInventoryItemDetailsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.enumeration_reason_inventory_item_details
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "enumeration_reason_inventory_item_details" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "enumeration_reason_inventory_item_details" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.ReasonInventoryItemDetails = append(node.Edges.ReasonInventoryItemDetails, n)
		}
	}

	if query := eq.withSalesChannelOrderHeaders; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*Enumeration)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.SalesChannelOrderHeaders = []*OrderHeader{}
		}
		query.withFKs = true
		query.Where(predicate.OrderHeader(func(s *sql.Selector) {
			s.Where(sql.InValues(enumeration.SalesChannelOrderHeadersColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.enumeration_sales_channel_order_headers
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "enumeration_sales_channel_order_headers" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "enumeration_sales_channel_order_headers" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.SalesChannelOrderHeaders = append(node.Edges.SalesChannelOrderHeaders, n)
		}
	}

	if query := eq.withVirtualVariantMethodProducts; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*Enumeration)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.VirtualVariantMethodProducts = []*Product{}
		}
		query.withFKs = true
		query.Where(predicate.Product(func(s *sql.Selector) {
			s.Where(sql.InValues(enumeration.VirtualVariantMethodProductsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.enumeration_virtual_variant_method_products
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "enumeration_virtual_variant_method_products" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "enumeration_virtual_variant_method_products" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.VirtualVariantMethodProducts = append(node.Edges.VirtualVariantMethodProducts, n)
		}
	}

	if query := eq.withRatingProducts; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*Enumeration)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.RatingProducts = []*Product{}
		}
		query.withFKs = true
		query.Where(predicate.Product(func(s *sql.Selector) {
			s.Where(sql.InValues(enumeration.RatingProductsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.enumeration_rating_products
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "enumeration_rating_products" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "enumeration_rating_products" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.RatingProducts = append(node.Edges.RatingProducts, n)
		}
	}

	if query := eq.withRequirementMethodProducts; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*Enumeration)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.RequirementMethodProducts = []*Product{}
		}
		query.withFKs = true
		query.Where(predicate.Product(func(s *sql.Selector) {
			s.Where(sql.InValues(enumeration.RequirementMethodProductsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.enumeration_requirement_method_products
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "enumeration_requirement_method_products" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "enumeration_requirement_method_products" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.RequirementMethodProducts = append(node.Edges.RequirementMethodProducts, n)
		}
	}

	if query := eq.withReserveOrderProductStores; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*Enumeration)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.ReserveOrderProductStores = []*ProductStore{}
		}
		query.withFKs = true
		query.Where(predicate.ProductStore(func(s *sql.Selector) {
			s.Where(sql.InValues(enumeration.ReserveOrderProductStoresColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.enumeration_reserve_order_product_stores
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "enumeration_reserve_order_product_stores" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "enumeration_reserve_order_product_stores" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.ReserveOrderProductStores = append(node.Edges.ReserveOrderProductStores, n)
		}
	}

	if query := eq.withRequirementMethodProductStores; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*Enumeration)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.RequirementMethodProductStores = []*ProductStore{}
		}
		query.withFKs = true
		query.Where(predicate.ProductStore(func(s *sql.Selector) {
			s.Where(sql.InValues(enumeration.RequirementMethodProductStoresColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.enumeration_requirement_method_product_stores
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "enumeration_requirement_method_product_stores" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "enumeration_requirement_method_product_stores" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.RequirementMethodProductStores = append(node.Edges.RequirementMethodProductStores, n)
		}
	}

	if query := eq.withDefaultSalesChannelProductStores; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*Enumeration)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.DefaultSalesChannelProductStores = []*ProductStore{}
		}
		query.withFKs = true
		query.Where(predicate.ProductStore(func(s *sql.Selector) {
			s.Where(sql.InValues(enumeration.DefaultSalesChannelProductStoresColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.enumeration_default_sales_channel_product_stores
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "enumeration_default_sales_channel_product_stores" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "enumeration_default_sales_channel_product_stores" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.DefaultSalesChannelProductStores = append(node.Edges.DefaultSalesChannelProductStores, n)
		}
	}

	if query := eq.withStoreCreditAccountProductStores; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*Enumeration)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.StoreCreditAccountProductStores = []*ProductStore{}
		}
		query.withFKs = true
		query.Where(predicate.ProductStore(func(s *sql.Selector) {
			s.Where(sql.InValues(enumeration.StoreCreditAccountProductStoresColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.enumeration_store_credit_account_product_stores
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "enumeration_store_credit_account_product_stores" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "enumeration_store_credit_account_product_stores" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.StoreCreditAccountProductStores = append(node.Edges.StoreCreditAccountProductStores, n)
		}
	}

	return nodes, nil
}

func (eq *EnumerationQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := eq.querySpec()
	return sqlgraph.CountNodes(ctx, eq.driver, _spec)
}

func (eq *EnumerationQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := eq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (eq *EnumerationQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   enumeration.Table,
			Columns: enumeration.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: enumeration.FieldID,
			},
		},
		From:   eq.sql,
		Unique: true,
	}
	if unique := eq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := eq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, enumeration.FieldID)
		for i := range fields {
			if fields[i] != enumeration.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := eq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := eq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := eq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := eq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (eq *EnumerationQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(eq.driver.Dialect())
	t1 := builder.Table(enumeration.Table)
	columns := eq.fields
	if len(columns) == 0 {
		columns = enumeration.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if eq.sql != nil {
		selector = eq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	for _, p := range eq.predicates {
		p(selector)
	}
	for _, p := range eq.order {
		p(selector)
	}
	if offset := eq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := eq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// EnumerationGroupBy is the group-by builder for Enumeration entities.
type EnumerationGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (egb *EnumerationGroupBy) Aggregate(fns ...AggregateFunc) *EnumerationGroupBy {
	egb.fns = append(egb.fns, fns...)
	return egb
}

// Scan applies the group-by query and scans the result into the given value.
func (egb *EnumerationGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := egb.path(ctx)
	if err != nil {
		return err
	}
	egb.sql = query
	return egb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (egb *EnumerationGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := egb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (egb *EnumerationGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(egb.fields) > 1 {
		return nil, errors.New("ent: EnumerationGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := egb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (egb *EnumerationGroupBy) StringsX(ctx context.Context) []string {
	v, err := egb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (egb *EnumerationGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = egb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{enumeration.Label}
	default:
		err = fmt.Errorf("ent: EnumerationGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (egb *EnumerationGroupBy) StringX(ctx context.Context) string {
	v, err := egb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (egb *EnumerationGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(egb.fields) > 1 {
		return nil, errors.New("ent: EnumerationGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := egb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (egb *EnumerationGroupBy) IntsX(ctx context.Context) []int {
	v, err := egb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (egb *EnumerationGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = egb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{enumeration.Label}
	default:
		err = fmt.Errorf("ent: EnumerationGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (egb *EnumerationGroupBy) IntX(ctx context.Context) int {
	v, err := egb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (egb *EnumerationGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(egb.fields) > 1 {
		return nil, errors.New("ent: EnumerationGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := egb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (egb *EnumerationGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := egb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (egb *EnumerationGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = egb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{enumeration.Label}
	default:
		err = fmt.Errorf("ent: EnumerationGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (egb *EnumerationGroupBy) Float64X(ctx context.Context) float64 {
	v, err := egb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (egb *EnumerationGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(egb.fields) > 1 {
		return nil, errors.New("ent: EnumerationGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := egb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (egb *EnumerationGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := egb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (egb *EnumerationGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = egb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{enumeration.Label}
	default:
		err = fmt.Errorf("ent: EnumerationGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (egb *EnumerationGroupBy) BoolX(ctx context.Context) bool {
	v, err := egb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (egb *EnumerationGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range egb.fields {
		if !enumeration.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := egb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := egb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (egb *EnumerationGroupBy) sqlQuery() *sql.Selector {
	selector := egb.sql.Select()
	aggregation := make([]string, 0, len(egb.fns))
	for _, fn := range egb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(egb.fields)+len(egb.fns))
		for _, f := range egb.fields {
			columns = append(columns, selector.C(f))
		}
		for _, c := range aggregation {
			columns = append(columns, c)
		}
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(egb.fields...)...)
}

// EnumerationSelect is the builder for selecting fields of Enumeration entities.
type EnumerationSelect struct {
	*EnumerationQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (es *EnumerationSelect) Scan(ctx context.Context, v interface{}) error {
	if err := es.prepareQuery(ctx); err != nil {
		return err
	}
	es.sql = es.EnumerationQuery.sqlQuery(ctx)
	return es.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (es *EnumerationSelect) ScanX(ctx context.Context, v interface{}) {
	if err := es.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (es *EnumerationSelect) Strings(ctx context.Context) ([]string, error) {
	if len(es.fields) > 1 {
		return nil, errors.New("ent: EnumerationSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := es.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (es *EnumerationSelect) StringsX(ctx context.Context) []string {
	v, err := es.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (es *EnumerationSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = es.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{enumeration.Label}
	default:
		err = fmt.Errorf("ent: EnumerationSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (es *EnumerationSelect) StringX(ctx context.Context) string {
	v, err := es.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (es *EnumerationSelect) Ints(ctx context.Context) ([]int, error) {
	if len(es.fields) > 1 {
		return nil, errors.New("ent: EnumerationSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := es.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (es *EnumerationSelect) IntsX(ctx context.Context) []int {
	v, err := es.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (es *EnumerationSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = es.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{enumeration.Label}
	default:
		err = fmt.Errorf("ent: EnumerationSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (es *EnumerationSelect) IntX(ctx context.Context) int {
	v, err := es.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (es *EnumerationSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(es.fields) > 1 {
		return nil, errors.New("ent: EnumerationSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := es.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (es *EnumerationSelect) Float64sX(ctx context.Context) []float64 {
	v, err := es.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (es *EnumerationSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = es.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{enumeration.Label}
	default:
		err = fmt.Errorf("ent: EnumerationSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (es *EnumerationSelect) Float64X(ctx context.Context) float64 {
	v, err := es.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (es *EnumerationSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(es.fields) > 1 {
		return nil, errors.New("ent: EnumerationSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := es.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (es *EnumerationSelect) BoolsX(ctx context.Context) []bool {
	v, err := es.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (es *EnumerationSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = es.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{enumeration.Label}
	default:
		err = fmt.Errorf("ent: EnumerationSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (es *EnumerationSelect) BoolX(ctx context.Context) bool {
	v, err := es.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (es *EnumerationSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := es.sql.Query()
	if err := es.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
