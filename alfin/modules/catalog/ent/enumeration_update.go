// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/enumeration"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/enumerationtype"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/inventoryitemdetail"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/orderheader"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/predicate"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/product"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productstore"
)

// EnumerationUpdate is the builder for updating Enumeration entities.
type EnumerationUpdate struct {
	config
	hooks    []Hook
	mutation *EnumerationMutation
}

// Where adds a new predicate for the EnumerationUpdate builder.
func (eu *EnumerationUpdate) Where(ps ...predicate.Enumeration) *EnumerationUpdate {
	eu.mutation.predicates = append(eu.mutation.predicates, ps...)
	return eu
}

// SetStringRef sets the "string_ref" field.
func (eu *EnumerationUpdate) SetStringRef(s string) *EnumerationUpdate {
	eu.mutation.SetStringRef(s)
	return eu
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (eu *EnumerationUpdate) SetNillableStringRef(s *string) *EnumerationUpdate {
	if s != nil {
		eu.SetStringRef(*s)
	}
	return eu
}

// ClearStringRef clears the value of the "string_ref" field.
func (eu *EnumerationUpdate) ClearStringRef() *EnumerationUpdate {
	eu.mutation.ClearStringRef()
	return eu
}

// SetEnumCode sets the "enum_code" field.
func (eu *EnumerationUpdate) SetEnumCode(s string) *EnumerationUpdate {
	eu.mutation.SetEnumCode(s)
	return eu
}

// SetNillableEnumCode sets the "enum_code" field if the given value is not nil.
func (eu *EnumerationUpdate) SetNillableEnumCode(s *string) *EnumerationUpdate {
	if s != nil {
		eu.SetEnumCode(*s)
	}
	return eu
}

// ClearEnumCode clears the value of the "enum_code" field.
func (eu *EnumerationUpdate) ClearEnumCode() *EnumerationUpdate {
	eu.mutation.ClearEnumCode()
	return eu
}

// SetSequenceID sets the "sequence_id" field.
func (eu *EnumerationUpdate) SetSequenceID(i int) *EnumerationUpdate {
	eu.mutation.ResetSequenceID()
	eu.mutation.SetSequenceID(i)
	return eu
}

// SetNillableSequenceID sets the "sequence_id" field if the given value is not nil.
func (eu *EnumerationUpdate) SetNillableSequenceID(i *int) *EnumerationUpdate {
	if i != nil {
		eu.SetSequenceID(*i)
	}
	return eu
}

// AddSequenceID adds i to the "sequence_id" field.
func (eu *EnumerationUpdate) AddSequenceID(i int) *EnumerationUpdate {
	eu.mutation.AddSequenceID(i)
	return eu
}

// ClearSequenceID clears the value of the "sequence_id" field.
func (eu *EnumerationUpdate) ClearSequenceID() *EnumerationUpdate {
	eu.mutation.ClearSequenceID()
	return eu
}

// SetDescription sets the "description" field.
func (eu *EnumerationUpdate) SetDescription(s string) *EnumerationUpdate {
	eu.mutation.SetDescription(s)
	return eu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (eu *EnumerationUpdate) SetNillableDescription(s *string) *EnumerationUpdate {
	if s != nil {
		eu.SetDescription(*s)
	}
	return eu
}

// ClearDescription clears the value of the "description" field.
func (eu *EnumerationUpdate) ClearDescription() *EnumerationUpdate {
	eu.mutation.ClearDescription()
	return eu
}

// SetEnumerationTypeID sets the "enumeration_type" edge to the EnumerationType entity by ID.
func (eu *EnumerationUpdate) SetEnumerationTypeID(id int) *EnumerationUpdate {
	eu.mutation.SetEnumerationTypeID(id)
	return eu
}

// SetNillableEnumerationTypeID sets the "enumeration_type" edge to the EnumerationType entity by ID if the given value is not nil.
func (eu *EnumerationUpdate) SetNillableEnumerationTypeID(id *int) *EnumerationUpdate {
	if id != nil {
		eu = eu.SetEnumerationTypeID(*id)
	}
	return eu
}

// SetEnumerationType sets the "enumeration_type" edge to the EnumerationType entity.
func (eu *EnumerationUpdate) SetEnumerationType(e *EnumerationType) *EnumerationUpdate {
	return eu.SetEnumerationTypeID(e.ID)
}

// AddReasonInventoryItemDetailIDs adds the "reason_inventory_item_details" edge to the InventoryItemDetail entity by IDs.
func (eu *EnumerationUpdate) AddReasonInventoryItemDetailIDs(ids ...int) *EnumerationUpdate {
	eu.mutation.AddReasonInventoryItemDetailIDs(ids...)
	return eu
}

// AddReasonInventoryItemDetails adds the "reason_inventory_item_details" edges to the InventoryItemDetail entity.
func (eu *EnumerationUpdate) AddReasonInventoryItemDetails(i ...*InventoryItemDetail) *EnumerationUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return eu.AddReasonInventoryItemDetailIDs(ids...)
}

// AddSalesChannelOrderHeaderIDs adds the "sales_channel_order_headers" edge to the OrderHeader entity by IDs.
func (eu *EnumerationUpdate) AddSalesChannelOrderHeaderIDs(ids ...int) *EnumerationUpdate {
	eu.mutation.AddSalesChannelOrderHeaderIDs(ids...)
	return eu
}

// AddSalesChannelOrderHeaders adds the "sales_channel_order_headers" edges to the OrderHeader entity.
func (eu *EnumerationUpdate) AddSalesChannelOrderHeaders(o ...*OrderHeader) *EnumerationUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return eu.AddSalesChannelOrderHeaderIDs(ids...)
}

// AddVirtualVariantMethodProductIDs adds the "virtual_variant_method_products" edge to the Product entity by IDs.
func (eu *EnumerationUpdate) AddVirtualVariantMethodProductIDs(ids ...int) *EnumerationUpdate {
	eu.mutation.AddVirtualVariantMethodProductIDs(ids...)
	return eu
}

// AddVirtualVariantMethodProducts adds the "virtual_variant_method_products" edges to the Product entity.
func (eu *EnumerationUpdate) AddVirtualVariantMethodProducts(p ...*Product) *EnumerationUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return eu.AddVirtualVariantMethodProductIDs(ids...)
}

// AddRatingProductIDs adds the "rating_products" edge to the Product entity by IDs.
func (eu *EnumerationUpdate) AddRatingProductIDs(ids ...int) *EnumerationUpdate {
	eu.mutation.AddRatingProductIDs(ids...)
	return eu
}

// AddRatingProducts adds the "rating_products" edges to the Product entity.
func (eu *EnumerationUpdate) AddRatingProducts(p ...*Product) *EnumerationUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return eu.AddRatingProductIDs(ids...)
}

// AddRequirementMethodProductIDs adds the "requirement_method_products" edge to the Product entity by IDs.
func (eu *EnumerationUpdate) AddRequirementMethodProductIDs(ids ...int) *EnumerationUpdate {
	eu.mutation.AddRequirementMethodProductIDs(ids...)
	return eu
}

// AddRequirementMethodProducts adds the "requirement_method_products" edges to the Product entity.
func (eu *EnumerationUpdate) AddRequirementMethodProducts(p ...*Product) *EnumerationUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return eu.AddRequirementMethodProductIDs(ids...)
}

// AddReserveOrderProductStoreIDs adds the "reserve_order_product_stores" edge to the ProductStore entity by IDs.
func (eu *EnumerationUpdate) AddReserveOrderProductStoreIDs(ids ...int) *EnumerationUpdate {
	eu.mutation.AddReserveOrderProductStoreIDs(ids...)
	return eu
}

// AddReserveOrderProductStores adds the "reserve_order_product_stores" edges to the ProductStore entity.
func (eu *EnumerationUpdate) AddReserveOrderProductStores(p ...*ProductStore) *EnumerationUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return eu.AddReserveOrderProductStoreIDs(ids...)
}

// AddRequirementMethodProductStoreIDs adds the "requirement_method_product_stores" edge to the ProductStore entity by IDs.
func (eu *EnumerationUpdate) AddRequirementMethodProductStoreIDs(ids ...int) *EnumerationUpdate {
	eu.mutation.AddRequirementMethodProductStoreIDs(ids...)
	return eu
}

// AddRequirementMethodProductStores adds the "requirement_method_product_stores" edges to the ProductStore entity.
func (eu *EnumerationUpdate) AddRequirementMethodProductStores(p ...*ProductStore) *EnumerationUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return eu.AddRequirementMethodProductStoreIDs(ids...)
}

// AddDefaultSalesChannelProductStoreIDs adds the "default_sales_channel_product_stores" edge to the ProductStore entity by IDs.
func (eu *EnumerationUpdate) AddDefaultSalesChannelProductStoreIDs(ids ...int) *EnumerationUpdate {
	eu.mutation.AddDefaultSalesChannelProductStoreIDs(ids...)
	return eu
}

// AddDefaultSalesChannelProductStores adds the "default_sales_channel_product_stores" edges to the ProductStore entity.
func (eu *EnumerationUpdate) AddDefaultSalesChannelProductStores(p ...*ProductStore) *EnumerationUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return eu.AddDefaultSalesChannelProductStoreIDs(ids...)
}

// AddStoreCreditAccountProductStoreIDs adds the "store_credit_account_product_stores" edge to the ProductStore entity by IDs.
func (eu *EnumerationUpdate) AddStoreCreditAccountProductStoreIDs(ids ...int) *EnumerationUpdate {
	eu.mutation.AddStoreCreditAccountProductStoreIDs(ids...)
	return eu
}

// AddStoreCreditAccountProductStores adds the "store_credit_account_product_stores" edges to the ProductStore entity.
func (eu *EnumerationUpdate) AddStoreCreditAccountProductStores(p ...*ProductStore) *EnumerationUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return eu.AddStoreCreditAccountProductStoreIDs(ids...)
}

// Mutation returns the EnumerationMutation object of the builder.
func (eu *EnumerationUpdate) Mutation() *EnumerationMutation {
	return eu.mutation
}

// ClearEnumerationType clears the "enumeration_type" edge to the EnumerationType entity.
func (eu *EnumerationUpdate) ClearEnumerationType() *EnumerationUpdate {
	eu.mutation.ClearEnumerationType()
	return eu
}

// ClearReasonInventoryItemDetails clears all "reason_inventory_item_details" edges to the InventoryItemDetail entity.
func (eu *EnumerationUpdate) ClearReasonInventoryItemDetails() *EnumerationUpdate {
	eu.mutation.ClearReasonInventoryItemDetails()
	return eu
}

// RemoveReasonInventoryItemDetailIDs removes the "reason_inventory_item_details" edge to InventoryItemDetail entities by IDs.
func (eu *EnumerationUpdate) RemoveReasonInventoryItemDetailIDs(ids ...int) *EnumerationUpdate {
	eu.mutation.RemoveReasonInventoryItemDetailIDs(ids...)
	return eu
}

// RemoveReasonInventoryItemDetails removes "reason_inventory_item_details" edges to InventoryItemDetail entities.
func (eu *EnumerationUpdate) RemoveReasonInventoryItemDetails(i ...*InventoryItemDetail) *EnumerationUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return eu.RemoveReasonInventoryItemDetailIDs(ids...)
}

// ClearSalesChannelOrderHeaders clears all "sales_channel_order_headers" edges to the OrderHeader entity.
func (eu *EnumerationUpdate) ClearSalesChannelOrderHeaders() *EnumerationUpdate {
	eu.mutation.ClearSalesChannelOrderHeaders()
	return eu
}

// RemoveSalesChannelOrderHeaderIDs removes the "sales_channel_order_headers" edge to OrderHeader entities by IDs.
func (eu *EnumerationUpdate) RemoveSalesChannelOrderHeaderIDs(ids ...int) *EnumerationUpdate {
	eu.mutation.RemoveSalesChannelOrderHeaderIDs(ids...)
	return eu
}

// RemoveSalesChannelOrderHeaders removes "sales_channel_order_headers" edges to OrderHeader entities.
func (eu *EnumerationUpdate) RemoveSalesChannelOrderHeaders(o ...*OrderHeader) *EnumerationUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return eu.RemoveSalesChannelOrderHeaderIDs(ids...)
}

// ClearVirtualVariantMethodProducts clears all "virtual_variant_method_products" edges to the Product entity.
func (eu *EnumerationUpdate) ClearVirtualVariantMethodProducts() *EnumerationUpdate {
	eu.mutation.ClearVirtualVariantMethodProducts()
	return eu
}

// RemoveVirtualVariantMethodProductIDs removes the "virtual_variant_method_products" edge to Product entities by IDs.
func (eu *EnumerationUpdate) RemoveVirtualVariantMethodProductIDs(ids ...int) *EnumerationUpdate {
	eu.mutation.RemoveVirtualVariantMethodProductIDs(ids...)
	return eu
}

// RemoveVirtualVariantMethodProducts removes "virtual_variant_method_products" edges to Product entities.
func (eu *EnumerationUpdate) RemoveVirtualVariantMethodProducts(p ...*Product) *EnumerationUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return eu.RemoveVirtualVariantMethodProductIDs(ids...)
}

// ClearRatingProducts clears all "rating_products" edges to the Product entity.
func (eu *EnumerationUpdate) ClearRatingProducts() *EnumerationUpdate {
	eu.mutation.ClearRatingProducts()
	return eu
}

// RemoveRatingProductIDs removes the "rating_products" edge to Product entities by IDs.
func (eu *EnumerationUpdate) RemoveRatingProductIDs(ids ...int) *EnumerationUpdate {
	eu.mutation.RemoveRatingProductIDs(ids...)
	return eu
}

// RemoveRatingProducts removes "rating_products" edges to Product entities.
func (eu *EnumerationUpdate) RemoveRatingProducts(p ...*Product) *EnumerationUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return eu.RemoveRatingProductIDs(ids...)
}

// ClearRequirementMethodProducts clears all "requirement_method_products" edges to the Product entity.
func (eu *EnumerationUpdate) ClearRequirementMethodProducts() *EnumerationUpdate {
	eu.mutation.ClearRequirementMethodProducts()
	return eu
}

// RemoveRequirementMethodProductIDs removes the "requirement_method_products" edge to Product entities by IDs.
func (eu *EnumerationUpdate) RemoveRequirementMethodProductIDs(ids ...int) *EnumerationUpdate {
	eu.mutation.RemoveRequirementMethodProductIDs(ids...)
	return eu
}

// RemoveRequirementMethodProducts removes "requirement_method_products" edges to Product entities.
func (eu *EnumerationUpdate) RemoveRequirementMethodProducts(p ...*Product) *EnumerationUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return eu.RemoveRequirementMethodProductIDs(ids...)
}

// ClearReserveOrderProductStores clears all "reserve_order_product_stores" edges to the ProductStore entity.
func (eu *EnumerationUpdate) ClearReserveOrderProductStores() *EnumerationUpdate {
	eu.mutation.ClearReserveOrderProductStores()
	return eu
}

// RemoveReserveOrderProductStoreIDs removes the "reserve_order_product_stores" edge to ProductStore entities by IDs.
func (eu *EnumerationUpdate) RemoveReserveOrderProductStoreIDs(ids ...int) *EnumerationUpdate {
	eu.mutation.RemoveReserveOrderProductStoreIDs(ids...)
	return eu
}

// RemoveReserveOrderProductStores removes "reserve_order_product_stores" edges to ProductStore entities.
func (eu *EnumerationUpdate) RemoveReserveOrderProductStores(p ...*ProductStore) *EnumerationUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return eu.RemoveReserveOrderProductStoreIDs(ids...)
}

// ClearRequirementMethodProductStores clears all "requirement_method_product_stores" edges to the ProductStore entity.
func (eu *EnumerationUpdate) ClearRequirementMethodProductStores() *EnumerationUpdate {
	eu.mutation.ClearRequirementMethodProductStores()
	return eu
}

// RemoveRequirementMethodProductStoreIDs removes the "requirement_method_product_stores" edge to ProductStore entities by IDs.
func (eu *EnumerationUpdate) RemoveRequirementMethodProductStoreIDs(ids ...int) *EnumerationUpdate {
	eu.mutation.RemoveRequirementMethodProductStoreIDs(ids...)
	return eu
}

// RemoveRequirementMethodProductStores removes "requirement_method_product_stores" edges to ProductStore entities.
func (eu *EnumerationUpdate) RemoveRequirementMethodProductStores(p ...*ProductStore) *EnumerationUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return eu.RemoveRequirementMethodProductStoreIDs(ids...)
}

// ClearDefaultSalesChannelProductStores clears all "default_sales_channel_product_stores" edges to the ProductStore entity.
func (eu *EnumerationUpdate) ClearDefaultSalesChannelProductStores() *EnumerationUpdate {
	eu.mutation.ClearDefaultSalesChannelProductStores()
	return eu
}

// RemoveDefaultSalesChannelProductStoreIDs removes the "default_sales_channel_product_stores" edge to ProductStore entities by IDs.
func (eu *EnumerationUpdate) RemoveDefaultSalesChannelProductStoreIDs(ids ...int) *EnumerationUpdate {
	eu.mutation.RemoveDefaultSalesChannelProductStoreIDs(ids...)
	return eu
}

// RemoveDefaultSalesChannelProductStores removes "default_sales_channel_product_stores" edges to ProductStore entities.
func (eu *EnumerationUpdate) RemoveDefaultSalesChannelProductStores(p ...*ProductStore) *EnumerationUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return eu.RemoveDefaultSalesChannelProductStoreIDs(ids...)
}

// ClearStoreCreditAccountProductStores clears all "store_credit_account_product_stores" edges to the ProductStore entity.
func (eu *EnumerationUpdate) ClearStoreCreditAccountProductStores() *EnumerationUpdate {
	eu.mutation.ClearStoreCreditAccountProductStores()
	return eu
}

// RemoveStoreCreditAccountProductStoreIDs removes the "store_credit_account_product_stores" edge to ProductStore entities by IDs.
func (eu *EnumerationUpdate) RemoveStoreCreditAccountProductStoreIDs(ids ...int) *EnumerationUpdate {
	eu.mutation.RemoveStoreCreditAccountProductStoreIDs(ids...)
	return eu
}

// RemoveStoreCreditAccountProductStores removes "store_credit_account_product_stores" edges to ProductStore entities.
func (eu *EnumerationUpdate) RemoveStoreCreditAccountProductStores(p ...*ProductStore) *EnumerationUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return eu.RemoveStoreCreditAccountProductStoreIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *EnumerationUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	eu.defaults()
	if len(eu.hooks) == 0 {
		affected, err = eu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EnumerationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			eu.mutation = mutation
			affected, err = eu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(eu.hooks) - 1; i >= 0; i-- {
			mut = eu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, eu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EnumerationUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EnumerationUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EnumerationUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (eu *EnumerationUpdate) defaults() {
	if _, ok := eu.mutation.UpdateTime(); !ok {
		v := enumeration.UpdateDefaultUpdateTime()
		eu.mutation.SetUpdateTime(v)
	}
}

func (eu *EnumerationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   enumeration.Table,
			Columns: enumeration.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: enumeration.FieldID,
			},
		},
	}
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: enumeration.FieldUpdateTime,
		})
	}
	if value, ok := eu.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: enumeration.FieldStringRef,
		})
	}
	if eu.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: enumeration.FieldStringRef,
		})
	}
	if value, ok := eu.mutation.EnumCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: enumeration.FieldEnumCode,
		})
	}
	if eu.mutation.EnumCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: enumeration.FieldEnumCode,
		})
	}
	if value, ok := eu.mutation.SequenceID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: enumeration.FieldSequenceID,
		})
	}
	if value, ok := eu.mutation.AddedSequenceID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: enumeration.FieldSequenceID,
		})
	}
	if eu.mutation.SequenceIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: enumeration.FieldSequenceID,
		})
	}
	if value, ok := eu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: enumeration.FieldDescription,
		})
	}
	if eu.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: enumeration.FieldDescription,
		})
	}
	if eu.mutation.EnumerationTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enumeration.EnumerationTypeTable,
			Columns: []string{enumeration.EnumerationTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: enumerationtype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.EnumerationTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enumeration.EnumerationTypeTable,
			Columns: []string{enumeration.EnumerationTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: enumerationtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.ReasonInventoryItemDetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.ReasonInventoryItemDetailsTable,
			Columns: []string{enumeration.ReasonInventoryItemDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: inventoryitemdetail.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedReasonInventoryItemDetailsIDs(); len(nodes) > 0 && !eu.mutation.ReasonInventoryItemDetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.ReasonInventoryItemDetailsTable,
			Columns: []string{enumeration.ReasonInventoryItemDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: inventoryitemdetail.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.ReasonInventoryItemDetailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.ReasonInventoryItemDetailsTable,
			Columns: []string{enumeration.ReasonInventoryItemDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: inventoryitemdetail.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.SalesChannelOrderHeadersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.SalesChannelOrderHeadersTable,
			Columns: []string{enumeration.SalesChannelOrderHeadersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderheader.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedSalesChannelOrderHeadersIDs(); len(nodes) > 0 && !eu.mutation.SalesChannelOrderHeadersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.SalesChannelOrderHeadersTable,
			Columns: []string{enumeration.SalesChannelOrderHeadersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderheader.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.SalesChannelOrderHeadersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.SalesChannelOrderHeadersTable,
			Columns: []string{enumeration.SalesChannelOrderHeadersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderheader.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.VirtualVariantMethodProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.VirtualVariantMethodProductsTable,
			Columns: []string{enumeration.VirtualVariantMethodProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedVirtualVariantMethodProductsIDs(); len(nodes) > 0 && !eu.mutation.VirtualVariantMethodProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.VirtualVariantMethodProductsTable,
			Columns: []string{enumeration.VirtualVariantMethodProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.VirtualVariantMethodProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.VirtualVariantMethodProductsTable,
			Columns: []string{enumeration.VirtualVariantMethodProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.RatingProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.RatingProductsTable,
			Columns: []string{enumeration.RatingProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedRatingProductsIDs(); len(nodes) > 0 && !eu.mutation.RatingProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.RatingProductsTable,
			Columns: []string{enumeration.RatingProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RatingProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.RatingProductsTable,
			Columns: []string{enumeration.RatingProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.RequirementMethodProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.RequirementMethodProductsTable,
			Columns: []string{enumeration.RequirementMethodProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedRequirementMethodProductsIDs(); len(nodes) > 0 && !eu.mutation.RequirementMethodProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.RequirementMethodProductsTable,
			Columns: []string{enumeration.RequirementMethodProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RequirementMethodProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.RequirementMethodProductsTable,
			Columns: []string{enumeration.RequirementMethodProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.ReserveOrderProductStoresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.ReserveOrderProductStoresTable,
			Columns: []string{enumeration.ReserveOrderProductStoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productstore.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedReserveOrderProductStoresIDs(); len(nodes) > 0 && !eu.mutation.ReserveOrderProductStoresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.ReserveOrderProductStoresTable,
			Columns: []string{enumeration.ReserveOrderProductStoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productstore.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.ReserveOrderProductStoresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.ReserveOrderProductStoresTable,
			Columns: []string{enumeration.ReserveOrderProductStoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productstore.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.RequirementMethodProductStoresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.RequirementMethodProductStoresTable,
			Columns: []string{enumeration.RequirementMethodProductStoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productstore.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedRequirementMethodProductStoresIDs(); len(nodes) > 0 && !eu.mutation.RequirementMethodProductStoresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.RequirementMethodProductStoresTable,
			Columns: []string{enumeration.RequirementMethodProductStoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productstore.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RequirementMethodProductStoresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.RequirementMethodProductStoresTable,
			Columns: []string{enumeration.RequirementMethodProductStoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productstore.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.DefaultSalesChannelProductStoresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.DefaultSalesChannelProductStoresTable,
			Columns: []string{enumeration.DefaultSalesChannelProductStoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productstore.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedDefaultSalesChannelProductStoresIDs(); len(nodes) > 0 && !eu.mutation.DefaultSalesChannelProductStoresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.DefaultSalesChannelProductStoresTable,
			Columns: []string{enumeration.DefaultSalesChannelProductStoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productstore.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.DefaultSalesChannelProductStoresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.DefaultSalesChannelProductStoresTable,
			Columns: []string{enumeration.DefaultSalesChannelProductStoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productstore.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.StoreCreditAccountProductStoresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.StoreCreditAccountProductStoresTable,
			Columns: []string{enumeration.StoreCreditAccountProductStoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productstore.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedStoreCreditAccountProductStoresIDs(); len(nodes) > 0 && !eu.mutation.StoreCreditAccountProductStoresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.StoreCreditAccountProductStoresTable,
			Columns: []string{enumeration.StoreCreditAccountProductStoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productstore.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.StoreCreditAccountProductStoresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.StoreCreditAccountProductStoresTable,
			Columns: []string{enumeration.StoreCreditAccountProductStoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productstore.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{enumeration.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// EnumerationUpdateOne is the builder for updating a single Enumeration entity.
type EnumerationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EnumerationMutation
}

// SetStringRef sets the "string_ref" field.
func (euo *EnumerationUpdateOne) SetStringRef(s string) *EnumerationUpdateOne {
	euo.mutation.SetStringRef(s)
	return euo
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (euo *EnumerationUpdateOne) SetNillableStringRef(s *string) *EnumerationUpdateOne {
	if s != nil {
		euo.SetStringRef(*s)
	}
	return euo
}

// ClearStringRef clears the value of the "string_ref" field.
func (euo *EnumerationUpdateOne) ClearStringRef() *EnumerationUpdateOne {
	euo.mutation.ClearStringRef()
	return euo
}

// SetEnumCode sets the "enum_code" field.
func (euo *EnumerationUpdateOne) SetEnumCode(s string) *EnumerationUpdateOne {
	euo.mutation.SetEnumCode(s)
	return euo
}

// SetNillableEnumCode sets the "enum_code" field if the given value is not nil.
func (euo *EnumerationUpdateOne) SetNillableEnumCode(s *string) *EnumerationUpdateOne {
	if s != nil {
		euo.SetEnumCode(*s)
	}
	return euo
}

// ClearEnumCode clears the value of the "enum_code" field.
func (euo *EnumerationUpdateOne) ClearEnumCode() *EnumerationUpdateOne {
	euo.mutation.ClearEnumCode()
	return euo
}

// SetSequenceID sets the "sequence_id" field.
func (euo *EnumerationUpdateOne) SetSequenceID(i int) *EnumerationUpdateOne {
	euo.mutation.ResetSequenceID()
	euo.mutation.SetSequenceID(i)
	return euo
}

// SetNillableSequenceID sets the "sequence_id" field if the given value is not nil.
func (euo *EnumerationUpdateOne) SetNillableSequenceID(i *int) *EnumerationUpdateOne {
	if i != nil {
		euo.SetSequenceID(*i)
	}
	return euo
}

// AddSequenceID adds i to the "sequence_id" field.
func (euo *EnumerationUpdateOne) AddSequenceID(i int) *EnumerationUpdateOne {
	euo.mutation.AddSequenceID(i)
	return euo
}

// ClearSequenceID clears the value of the "sequence_id" field.
func (euo *EnumerationUpdateOne) ClearSequenceID() *EnumerationUpdateOne {
	euo.mutation.ClearSequenceID()
	return euo
}

// SetDescription sets the "description" field.
func (euo *EnumerationUpdateOne) SetDescription(s string) *EnumerationUpdateOne {
	euo.mutation.SetDescription(s)
	return euo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (euo *EnumerationUpdateOne) SetNillableDescription(s *string) *EnumerationUpdateOne {
	if s != nil {
		euo.SetDescription(*s)
	}
	return euo
}

// ClearDescription clears the value of the "description" field.
func (euo *EnumerationUpdateOne) ClearDescription() *EnumerationUpdateOne {
	euo.mutation.ClearDescription()
	return euo
}

// SetEnumerationTypeID sets the "enumeration_type" edge to the EnumerationType entity by ID.
func (euo *EnumerationUpdateOne) SetEnumerationTypeID(id int) *EnumerationUpdateOne {
	euo.mutation.SetEnumerationTypeID(id)
	return euo
}

// SetNillableEnumerationTypeID sets the "enumeration_type" edge to the EnumerationType entity by ID if the given value is not nil.
func (euo *EnumerationUpdateOne) SetNillableEnumerationTypeID(id *int) *EnumerationUpdateOne {
	if id != nil {
		euo = euo.SetEnumerationTypeID(*id)
	}
	return euo
}

// SetEnumerationType sets the "enumeration_type" edge to the EnumerationType entity.
func (euo *EnumerationUpdateOne) SetEnumerationType(e *EnumerationType) *EnumerationUpdateOne {
	return euo.SetEnumerationTypeID(e.ID)
}

// AddReasonInventoryItemDetailIDs adds the "reason_inventory_item_details" edge to the InventoryItemDetail entity by IDs.
func (euo *EnumerationUpdateOne) AddReasonInventoryItemDetailIDs(ids ...int) *EnumerationUpdateOne {
	euo.mutation.AddReasonInventoryItemDetailIDs(ids...)
	return euo
}

// AddReasonInventoryItemDetails adds the "reason_inventory_item_details" edges to the InventoryItemDetail entity.
func (euo *EnumerationUpdateOne) AddReasonInventoryItemDetails(i ...*InventoryItemDetail) *EnumerationUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return euo.AddReasonInventoryItemDetailIDs(ids...)
}

// AddSalesChannelOrderHeaderIDs adds the "sales_channel_order_headers" edge to the OrderHeader entity by IDs.
func (euo *EnumerationUpdateOne) AddSalesChannelOrderHeaderIDs(ids ...int) *EnumerationUpdateOne {
	euo.mutation.AddSalesChannelOrderHeaderIDs(ids...)
	return euo
}

// AddSalesChannelOrderHeaders adds the "sales_channel_order_headers" edges to the OrderHeader entity.
func (euo *EnumerationUpdateOne) AddSalesChannelOrderHeaders(o ...*OrderHeader) *EnumerationUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return euo.AddSalesChannelOrderHeaderIDs(ids...)
}

// AddVirtualVariantMethodProductIDs adds the "virtual_variant_method_products" edge to the Product entity by IDs.
func (euo *EnumerationUpdateOne) AddVirtualVariantMethodProductIDs(ids ...int) *EnumerationUpdateOne {
	euo.mutation.AddVirtualVariantMethodProductIDs(ids...)
	return euo
}

// AddVirtualVariantMethodProducts adds the "virtual_variant_method_products" edges to the Product entity.
func (euo *EnumerationUpdateOne) AddVirtualVariantMethodProducts(p ...*Product) *EnumerationUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return euo.AddVirtualVariantMethodProductIDs(ids...)
}

// AddRatingProductIDs adds the "rating_products" edge to the Product entity by IDs.
func (euo *EnumerationUpdateOne) AddRatingProductIDs(ids ...int) *EnumerationUpdateOne {
	euo.mutation.AddRatingProductIDs(ids...)
	return euo
}

// AddRatingProducts adds the "rating_products" edges to the Product entity.
func (euo *EnumerationUpdateOne) AddRatingProducts(p ...*Product) *EnumerationUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return euo.AddRatingProductIDs(ids...)
}

// AddRequirementMethodProductIDs adds the "requirement_method_products" edge to the Product entity by IDs.
func (euo *EnumerationUpdateOne) AddRequirementMethodProductIDs(ids ...int) *EnumerationUpdateOne {
	euo.mutation.AddRequirementMethodProductIDs(ids...)
	return euo
}

// AddRequirementMethodProducts adds the "requirement_method_products" edges to the Product entity.
func (euo *EnumerationUpdateOne) AddRequirementMethodProducts(p ...*Product) *EnumerationUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return euo.AddRequirementMethodProductIDs(ids...)
}

// AddReserveOrderProductStoreIDs adds the "reserve_order_product_stores" edge to the ProductStore entity by IDs.
func (euo *EnumerationUpdateOne) AddReserveOrderProductStoreIDs(ids ...int) *EnumerationUpdateOne {
	euo.mutation.AddReserveOrderProductStoreIDs(ids...)
	return euo
}

// AddReserveOrderProductStores adds the "reserve_order_product_stores" edges to the ProductStore entity.
func (euo *EnumerationUpdateOne) AddReserveOrderProductStores(p ...*ProductStore) *EnumerationUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return euo.AddReserveOrderProductStoreIDs(ids...)
}

// AddRequirementMethodProductStoreIDs adds the "requirement_method_product_stores" edge to the ProductStore entity by IDs.
func (euo *EnumerationUpdateOne) AddRequirementMethodProductStoreIDs(ids ...int) *EnumerationUpdateOne {
	euo.mutation.AddRequirementMethodProductStoreIDs(ids...)
	return euo
}

// AddRequirementMethodProductStores adds the "requirement_method_product_stores" edges to the ProductStore entity.
func (euo *EnumerationUpdateOne) AddRequirementMethodProductStores(p ...*ProductStore) *EnumerationUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return euo.AddRequirementMethodProductStoreIDs(ids...)
}

// AddDefaultSalesChannelProductStoreIDs adds the "default_sales_channel_product_stores" edge to the ProductStore entity by IDs.
func (euo *EnumerationUpdateOne) AddDefaultSalesChannelProductStoreIDs(ids ...int) *EnumerationUpdateOne {
	euo.mutation.AddDefaultSalesChannelProductStoreIDs(ids...)
	return euo
}

// AddDefaultSalesChannelProductStores adds the "default_sales_channel_product_stores" edges to the ProductStore entity.
func (euo *EnumerationUpdateOne) AddDefaultSalesChannelProductStores(p ...*ProductStore) *EnumerationUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return euo.AddDefaultSalesChannelProductStoreIDs(ids...)
}

// AddStoreCreditAccountProductStoreIDs adds the "store_credit_account_product_stores" edge to the ProductStore entity by IDs.
func (euo *EnumerationUpdateOne) AddStoreCreditAccountProductStoreIDs(ids ...int) *EnumerationUpdateOne {
	euo.mutation.AddStoreCreditAccountProductStoreIDs(ids...)
	return euo
}

// AddStoreCreditAccountProductStores adds the "store_credit_account_product_stores" edges to the ProductStore entity.
func (euo *EnumerationUpdateOne) AddStoreCreditAccountProductStores(p ...*ProductStore) *EnumerationUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return euo.AddStoreCreditAccountProductStoreIDs(ids...)
}

// Mutation returns the EnumerationMutation object of the builder.
func (euo *EnumerationUpdateOne) Mutation() *EnumerationMutation {
	return euo.mutation
}

// ClearEnumerationType clears the "enumeration_type" edge to the EnumerationType entity.
func (euo *EnumerationUpdateOne) ClearEnumerationType() *EnumerationUpdateOne {
	euo.mutation.ClearEnumerationType()
	return euo
}

// ClearReasonInventoryItemDetails clears all "reason_inventory_item_details" edges to the InventoryItemDetail entity.
func (euo *EnumerationUpdateOne) ClearReasonInventoryItemDetails() *EnumerationUpdateOne {
	euo.mutation.ClearReasonInventoryItemDetails()
	return euo
}

// RemoveReasonInventoryItemDetailIDs removes the "reason_inventory_item_details" edge to InventoryItemDetail entities by IDs.
func (euo *EnumerationUpdateOne) RemoveReasonInventoryItemDetailIDs(ids ...int) *EnumerationUpdateOne {
	euo.mutation.RemoveReasonInventoryItemDetailIDs(ids...)
	return euo
}

// RemoveReasonInventoryItemDetails removes "reason_inventory_item_details" edges to InventoryItemDetail entities.
func (euo *EnumerationUpdateOne) RemoveReasonInventoryItemDetails(i ...*InventoryItemDetail) *EnumerationUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return euo.RemoveReasonInventoryItemDetailIDs(ids...)
}

// ClearSalesChannelOrderHeaders clears all "sales_channel_order_headers" edges to the OrderHeader entity.
func (euo *EnumerationUpdateOne) ClearSalesChannelOrderHeaders() *EnumerationUpdateOne {
	euo.mutation.ClearSalesChannelOrderHeaders()
	return euo
}

// RemoveSalesChannelOrderHeaderIDs removes the "sales_channel_order_headers" edge to OrderHeader entities by IDs.
func (euo *EnumerationUpdateOne) RemoveSalesChannelOrderHeaderIDs(ids ...int) *EnumerationUpdateOne {
	euo.mutation.RemoveSalesChannelOrderHeaderIDs(ids...)
	return euo
}

// RemoveSalesChannelOrderHeaders removes "sales_channel_order_headers" edges to OrderHeader entities.
func (euo *EnumerationUpdateOne) RemoveSalesChannelOrderHeaders(o ...*OrderHeader) *EnumerationUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return euo.RemoveSalesChannelOrderHeaderIDs(ids...)
}

// ClearVirtualVariantMethodProducts clears all "virtual_variant_method_products" edges to the Product entity.
func (euo *EnumerationUpdateOne) ClearVirtualVariantMethodProducts() *EnumerationUpdateOne {
	euo.mutation.ClearVirtualVariantMethodProducts()
	return euo
}

// RemoveVirtualVariantMethodProductIDs removes the "virtual_variant_method_products" edge to Product entities by IDs.
func (euo *EnumerationUpdateOne) RemoveVirtualVariantMethodProductIDs(ids ...int) *EnumerationUpdateOne {
	euo.mutation.RemoveVirtualVariantMethodProductIDs(ids...)
	return euo
}

// RemoveVirtualVariantMethodProducts removes "virtual_variant_method_products" edges to Product entities.
func (euo *EnumerationUpdateOne) RemoveVirtualVariantMethodProducts(p ...*Product) *EnumerationUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return euo.RemoveVirtualVariantMethodProductIDs(ids...)
}

// ClearRatingProducts clears all "rating_products" edges to the Product entity.
func (euo *EnumerationUpdateOne) ClearRatingProducts() *EnumerationUpdateOne {
	euo.mutation.ClearRatingProducts()
	return euo
}

// RemoveRatingProductIDs removes the "rating_products" edge to Product entities by IDs.
func (euo *EnumerationUpdateOne) RemoveRatingProductIDs(ids ...int) *EnumerationUpdateOne {
	euo.mutation.RemoveRatingProductIDs(ids...)
	return euo
}

// RemoveRatingProducts removes "rating_products" edges to Product entities.
func (euo *EnumerationUpdateOne) RemoveRatingProducts(p ...*Product) *EnumerationUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return euo.RemoveRatingProductIDs(ids...)
}

// ClearRequirementMethodProducts clears all "requirement_method_products" edges to the Product entity.
func (euo *EnumerationUpdateOne) ClearRequirementMethodProducts() *EnumerationUpdateOne {
	euo.mutation.ClearRequirementMethodProducts()
	return euo
}

// RemoveRequirementMethodProductIDs removes the "requirement_method_products" edge to Product entities by IDs.
func (euo *EnumerationUpdateOne) RemoveRequirementMethodProductIDs(ids ...int) *EnumerationUpdateOne {
	euo.mutation.RemoveRequirementMethodProductIDs(ids...)
	return euo
}

// RemoveRequirementMethodProducts removes "requirement_method_products" edges to Product entities.
func (euo *EnumerationUpdateOne) RemoveRequirementMethodProducts(p ...*Product) *EnumerationUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return euo.RemoveRequirementMethodProductIDs(ids...)
}

// ClearReserveOrderProductStores clears all "reserve_order_product_stores" edges to the ProductStore entity.
func (euo *EnumerationUpdateOne) ClearReserveOrderProductStores() *EnumerationUpdateOne {
	euo.mutation.ClearReserveOrderProductStores()
	return euo
}

// RemoveReserveOrderProductStoreIDs removes the "reserve_order_product_stores" edge to ProductStore entities by IDs.
func (euo *EnumerationUpdateOne) RemoveReserveOrderProductStoreIDs(ids ...int) *EnumerationUpdateOne {
	euo.mutation.RemoveReserveOrderProductStoreIDs(ids...)
	return euo
}

// RemoveReserveOrderProductStores removes "reserve_order_product_stores" edges to ProductStore entities.
func (euo *EnumerationUpdateOne) RemoveReserveOrderProductStores(p ...*ProductStore) *EnumerationUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return euo.RemoveReserveOrderProductStoreIDs(ids...)
}

// ClearRequirementMethodProductStores clears all "requirement_method_product_stores" edges to the ProductStore entity.
func (euo *EnumerationUpdateOne) ClearRequirementMethodProductStores() *EnumerationUpdateOne {
	euo.mutation.ClearRequirementMethodProductStores()
	return euo
}

// RemoveRequirementMethodProductStoreIDs removes the "requirement_method_product_stores" edge to ProductStore entities by IDs.
func (euo *EnumerationUpdateOne) RemoveRequirementMethodProductStoreIDs(ids ...int) *EnumerationUpdateOne {
	euo.mutation.RemoveRequirementMethodProductStoreIDs(ids...)
	return euo
}

// RemoveRequirementMethodProductStores removes "requirement_method_product_stores" edges to ProductStore entities.
func (euo *EnumerationUpdateOne) RemoveRequirementMethodProductStores(p ...*ProductStore) *EnumerationUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return euo.RemoveRequirementMethodProductStoreIDs(ids...)
}

// ClearDefaultSalesChannelProductStores clears all "default_sales_channel_product_stores" edges to the ProductStore entity.
func (euo *EnumerationUpdateOne) ClearDefaultSalesChannelProductStores() *EnumerationUpdateOne {
	euo.mutation.ClearDefaultSalesChannelProductStores()
	return euo
}

// RemoveDefaultSalesChannelProductStoreIDs removes the "default_sales_channel_product_stores" edge to ProductStore entities by IDs.
func (euo *EnumerationUpdateOne) RemoveDefaultSalesChannelProductStoreIDs(ids ...int) *EnumerationUpdateOne {
	euo.mutation.RemoveDefaultSalesChannelProductStoreIDs(ids...)
	return euo
}

// RemoveDefaultSalesChannelProductStores removes "default_sales_channel_product_stores" edges to ProductStore entities.
func (euo *EnumerationUpdateOne) RemoveDefaultSalesChannelProductStores(p ...*ProductStore) *EnumerationUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return euo.RemoveDefaultSalesChannelProductStoreIDs(ids...)
}

// ClearStoreCreditAccountProductStores clears all "store_credit_account_product_stores" edges to the ProductStore entity.
func (euo *EnumerationUpdateOne) ClearStoreCreditAccountProductStores() *EnumerationUpdateOne {
	euo.mutation.ClearStoreCreditAccountProductStores()
	return euo
}

// RemoveStoreCreditAccountProductStoreIDs removes the "store_credit_account_product_stores" edge to ProductStore entities by IDs.
func (euo *EnumerationUpdateOne) RemoveStoreCreditAccountProductStoreIDs(ids ...int) *EnumerationUpdateOne {
	euo.mutation.RemoveStoreCreditAccountProductStoreIDs(ids...)
	return euo
}

// RemoveStoreCreditAccountProductStores removes "store_credit_account_product_stores" edges to ProductStore entities.
func (euo *EnumerationUpdateOne) RemoveStoreCreditAccountProductStores(p ...*ProductStore) *EnumerationUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return euo.RemoveStoreCreditAccountProductStoreIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *EnumerationUpdateOne) Select(field string, fields ...string) *EnumerationUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Enumeration entity.
func (euo *EnumerationUpdateOne) Save(ctx context.Context) (*Enumeration, error) {
	var (
		err  error
		node *Enumeration
	)
	euo.defaults()
	if len(euo.hooks) == 0 {
		node, err = euo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EnumerationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			euo.mutation = mutation
			node, err = euo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(euo.hooks) - 1; i >= 0; i-- {
			mut = euo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, euo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EnumerationUpdateOne) SaveX(ctx context.Context) *Enumeration {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *EnumerationUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EnumerationUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (euo *EnumerationUpdateOne) defaults() {
	if _, ok := euo.mutation.UpdateTime(); !ok {
		v := enumeration.UpdateDefaultUpdateTime()
		euo.mutation.SetUpdateTime(v)
	}
}

func (euo *EnumerationUpdateOne) sqlSave(ctx context.Context) (_node *Enumeration, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   enumeration.Table,
			Columns: enumeration.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: enumeration.FieldID,
			},
		},
	}
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Enumeration.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, enumeration.FieldID)
		for _, f := range fields {
			if !enumeration.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != enumeration.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: enumeration.FieldUpdateTime,
		})
	}
	if value, ok := euo.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: enumeration.FieldStringRef,
		})
	}
	if euo.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: enumeration.FieldStringRef,
		})
	}
	if value, ok := euo.mutation.EnumCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: enumeration.FieldEnumCode,
		})
	}
	if euo.mutation.EnumCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: enumeration.FieldEnumCode,
		})
	}
	if value, ok := euo.mutation.SequenceID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: enumeration.FieldSequenceID,
		})
	}
	if value, ok := euo.mutation.AddedSequenceID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: enumeration.FieldSequenceID,
		})
	}
	if euo.mutation.SequenceIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: enumeration.FieldSequenceID,
		})
	}
	if value, ok := euo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: enumeration.FieldDescription,
		})
	}
	if euo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: enumeration.FieldDescription,
		})
	}
	if euo.mutation.EnumerationTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enumeration.EnumerationTypeTable,
			Columns: []string{enumeration.EnumerationTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: enumerationtype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.EnumerationTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enumeration.EnumerationTypeTable,
			Columns: []string{enumeration.EnumerationTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: enumerationtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.ReasonInventoryItemDetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.ReasonInventoryItemDetailsTable,
			Columns: []string{enumeration.ReasonInventoryItemDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: inventoryitemdetail.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedReasonInventoryItemDetailsIDs(); len(nodes) > 0 && !euo.mutation.ReasonInventoryItemDetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.ReasonInventoryItemDetailsTable,
			Columns: []string{enumeration.ReasonInventoryItemDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: inventoryitemdetail.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.ReasonInventoryItemDetailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.ReasonInventoryItemDetailsTable,
			Columns: []string{enumeration.ReasonInventoryItemDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: inventoryitemdetail.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.SalesChannelOrderHeadersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.SalesChannelOrderHeadersTable,
			Columns: []string{enumeration.SalesChannelOrderHeadersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderheader.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedSalesChannelOrderHeadersIDs(); len(nodes) > 0 && !euo.mutation.SalesChannelOrderHeadersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.SalesChannelOrderHeadersTable,
			Columns: []string{enumeration.SalesChannelOrderHeadersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderheader.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.SalesChannelOrderHeadersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.SalesChannelOrderHeadersTable,
			Columns: []string{enumeration.SalesChannelOrderHeadersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderheader.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.VirtualVariantMethodProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.VirtualVariantMethodProductsTable,
			Columns: []string{enumeration.VirtualVariantMethodProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedVirtualVariantMethodProductsIDs(); len(nodes) > 0 && !euo.mutation.VirtualVariantMethodProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.VirtualVariantMethodProductsTable,
			Columns: []string{enumeration.VirtualVariantMethodProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.VirtualVariantMethodProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.VirtualVariantMethodProductsTable,
			Columns: []string{enumeration.VirtualVariantMethodProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.RatingProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.RatingProductsTable,
			Columns: []string{enumeration.RatingProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedRatingProductsIDs(); len(nodes) > 0 && !euo.mutation.RatingProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.RatingProductsTable,
			Columns: []string{enumeration.RatingProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RatingProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.RatingProductsTable,
			Columns: []string{enumeration.RatingProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.RequirementMethodProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.RequirementMethodProductsTable,
			Columns: []string{enumeration.RequirementMethodProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedRequirementMethodProductsIDs(); len(nodes) > 0 && !euo.mutation.RequirementMethodProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.RequirementMethodProductsTable,
			Columns: []string{enumeration.RequirementMethodProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RequirementMethodProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.RequirementMethodProductsTable,
			Columns: []string{enumeration.RequirementMethodProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.ReserveOrderProductStoresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.ReserveOrderProductStoresTable,
			Columns: []string{enumeration.ReserveOrderProductStoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productstore.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedReserveOrderProductStoresIDs(); len(nodes) > 0 && !euo.mutation.ReserveOrderProductStoresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.ReserveOrderProductStoresTable,
			Columns: []string{enumeration.ReserveOrderProductStoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productstore.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.ReserveOrderProductStoresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.ReserveOrderProductStoresTable,
			Columns: []string{enumeration.ReserveOrderProductStoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productstore.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.RequirementMethodProductStoresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.RequirementMethodProductStoresTable,
			Columns: []string{enumeration.RequirementMethodProductStoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productstore.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedRequirementMethodProductStoresIDs(); len(nodes) > 0 && !euo.mutation.RequirementMethodProductStoresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.RequirementMethodProductStoresTable,
			Columns: []string{enumeration.RequirementMethodProductStoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productstore.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RequirementMethodProductStoresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.RequirementMethodProductStoresTable,
			Columns: []string{enumeration.RequirementMethodProductStoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productstore.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.DefaultSalesChannelProductStoresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.DefaultSalesChannelProductStoresTable,
			Columns: []string{enumeration.DefaultSalesChannelProductStoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productstore.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedDefaultSalesChannelProductStoresIDs(); len(nodes) > 0 && !euo.mutation.DefaultSalesChannelProductStoresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.DefaultSalesChannelProductStoresTable,
			Columns: []string{enumeration.DefaultSalesChannelProductStoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productstore.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.DefaultSalesChannelProductStoresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.DefaultSalesChannelProductStoresTable,
			Columns: []string{enumeration.DefaultSalesChannelProductStoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productstore.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.StoreCreditAccountProductStoresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.StoreCreditAccountProductStoresTable,
			Columns: []string{enumeration.StoreCreditAccountProductStoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productstore.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedStoreCreditAccountProductStoresIDs(); len(nodes) > 0 && !euo.mutation.StoreCreditAccountProductStoresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.StoreCreditAccountProductStoresTable,
			Columns: []string{enumeration.StoreCreditAccountProductStoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productstore.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.StoreCreditAccountProductStoresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.StoreCreditAccountProductStoresTable,
			Columns: []string{enumeration.StoreCreditAccountProductStoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productstore.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Enumeration{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{enumeration.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
