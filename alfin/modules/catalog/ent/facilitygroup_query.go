// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/facilitygroup"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/facilitygrouptype"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/predicate"
)

// FacilityGroupQuery is the builder for querying FacilityGroup entities.
type FacilityGroupQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.FacilityGroup
	// eager-loading edges.
	withFacilityGroupType *FacilityGroupTypeQuery
	withParent            *FacilityGroupQuery
	withChildren          *FacilityGroupQuery
	withFKs               bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the FacilityGroupQuery builder.
func (fgq *FacilityGroupQuery) Where(ps ...predicate.FacilityGroup) *FacilityGroupQuery {
	fgq.predicates = append(fgq.predicates, ps...)
	return fgq
}

// Limit adds a limit step to the query.
func (fgq *FacilityGroupQuery) Limit(limit int) *FacilityGroupQuery {
	fgq.limit = &limit
	return fgq
}

// Offset adds an offset step to the query.
func (fgq *FacilityGroupQuery) Offset(offset int) *FacilityGroupQuery {
	fgq.offset = &offset
	return fgq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (fgq *FacilityGroupQuery) Unique(unique bool) *FacilityGroupQuery {
	fgq.unique = &unique
	return fgq
}

// Order adds an order step to the query.
func (fgq *FacilityGroupQuery) Order(o ...OrderFunc) *FacilityGroupQuery {
	fgq.order = append(fgq.order, o...)
	return fgq
}

// QueryFacilityGroupType chains the current query on the "facility_group_type" edge.
func (fgq *FacilityGroupQuery) QueryFacilityGroupType() *FacilityGroupTypeQuery {
	query := &FacilityGroupTypeQuery{config: fgq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := fgq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := fgq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(facilitygroup.Table, facilitygroup.FieldID, selector),
			sqlgraph.To(facilitygrouptype.Table, facilitygrouptype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, facilitygroup.FacilityGroupTypeTable, facilitygroup.FacilityGroupTypeColumn),
		)
		fromU = sqlgraph.SetNeighbors(fgq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryParent chains the current query on the "parent" edge.
func (fgq *FacilityGroupQuery) QueryParent() *FacilityGroupQuery {
	query := &FacilityGroupQuery{config: fgq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := fgq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := fgq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(facilitygroup.Table, facilitygroup.FieldID, selector),
			sqlgraph.To(facilitygroup.Table, facilitygroup.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, facilitygroup.ParentTable, facilitygroup.ParentColumn),
		)
		fromU = sqlgraph.SetNeighbors(fgq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryChildren chains the current query on the "children" edge.
func (fgq *FacilityGroupQuery) QueryChildren() *FacilityGroupQuery {
	query := &FacilityGroupQuery{config: fgq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := fgq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := fgq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(facilitygroup.Table, facilitygroup.FieldID, selector),
			sqlgraph.To(facilitygroup.Table, facilitygroup.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, facilitygroup.ChildrenTable, facilitygroup.ChildrenColumn),
		)
		fromU = sqlgraph.SetNeighbors(fgq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first FacilityGroup entity from the query.
// Returns a *NotFoundError when no FacilityGroup was found.
func (fgq *FacilityGroupQuery) First(ctx context.Context) (*FacilityGroup, error) {
	nodes, err := fgq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{facilitygroup.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (fgq *FacilityGroupQuery) FirstX(ctx context.Context) *FacilityGroup {
	node, err := fgq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first FacilityGroup ID from the query.
// Returns a *NotFoundError when no FacilityGroup ID was found.
func (fgq *FacilityGroupQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = fgq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{facilitygroup.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (fgq *FacilityGroupQuery) FirstIDX(ctx context.Context) int {
	id, err := fgq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single FacilityGroup entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one FacilityGroup entity is not found.
// Returns a *NotFoundError when no FacilityGroup entities are found.
func (fgq *FacilityGroupQuery) Only(ctx context.Context) (*FacilityGroup, error) {
	nodes, err := fgq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{facilitygroup.Label}
	default:
		return nil, &NotSingularError{facilitygroup.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (fgq *FacilityGroupQuery) OnlyX(ctx context.Context) *FacilityGroup {
	node, err := fgq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only FacilityGroup ID in the query.
// Returns a *NotSingularError when exactly one FacilityGroup ID is not found.
// Returns a *NotFoundError when no entities are found.
func (fgq *FacilityGroupQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = fgq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{facilitygroup.Label}
	default:
		err = &NotSingularError{facilitygroup.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (fgq *FacilityGroupQuery) OnlyIDX(ctx context.Context) int {
	id, err := fgq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of FacilityGroups.
func (fgq *FacilityGroupQuery) All(ctx context.Context) ([]*FacilityGroup, error) {
	if err := fgq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return fgq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (fgq *FacilityGroupQuery) AllX(ctx context.Context) []*FacilityGroup {
	nodes, err := fgq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of FacilityGroup IDs.
func (fgq *FacilityGroupQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := fgq.Select(facilitygroup.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (fgq *FacilityGroupQuery) IDsX(ctx context.Context) []int {
	ids, err := fgq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (fgq *FacilityGroupQuery) Count(ctx context.Context) (int, error) {
	if err := fgq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return fgq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (fgq *FacilityGroupQuery) CountX(ctx context.Context) int {
	count, err := fgq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (fgq *FacilityGroupQuery) Exist(ctx context.Context) (bool, error) {
	if err := fgq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return fgq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (fgq *FacilityGroupQuery) ExistX(ctx context.Context) bool {
	exist, err := fgq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the FacilityGroupQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (fgq *FacilityGroupQuery) Clone() *FacilityGroupQuery {
	if fgq == nil {
		return nil
	}
	return &FacilityGroupQuery{
		config:                fgq.config,
		limit:                 fgq.limit,
		offset:                fgq.offset,
		order:                 append([]OrderFunc{}, fgq.order...),
		predicates:            append([]predicate.FacilityGroup{}, fgq.predicates...),
		withFacilityGroupType: fgq.withFacilityGroupType.Clone(),
		withParent:            fgq.withParent.Clone(),
		withChildren:          fgq.withChildren.Clone(),
		// clone intermediate query.
		sql:  fgq.sql.Clone(),
		path: fgq.path,
	}
}

// WithFacilityGroupType tells the query-builder to eager-load the nodes that are connected to
// the "facility_group_type" edge. The optional arguments are used to configure the query builder of the edge.
func (fgq *FacilityGroupQuery) WithFacilityGroupType(opts ...func(*FacilityGroupTypeQuery)) *FacilityGroupQuery {
	query := &FacilityGroupTypeQuery{config: fgq.config}
	for _, opt := range opts {
		opt(query)
	}
	fgq.withFacilityGroupType = query
	return fgq
}

// WithParent tells the query-builder to eager-load the nodes that are connected to
// the "parent" edge. The optional arguments are used to configure the query builder of the edge.
func (fgq *FacilityGroupQuery) WithParent(opts ...func(*FacilityGroupQuery)) *FacilityGroupQuery {
	query := &FacilityGroupQuery{config: fgq.config}
	for _, opt := range opts {
		opt(query)
	}
	fgq.withParent = query
	return fgq
}

// WithChildren tells the query-builder to eager-load the nodes that are connected to
// the "children" edge. The optional arguments are used to configure the query builder of the edge.
func (fgq *FacilityGroupQuery) WithChildren(opts ...func(*FacilityGroupQuery)) *FacilityGroupQuery {
	query := &FacilityGroupQuery{config: fgq.config}
	for _, opt := range opts {
		opt(query)
	}
	fgq.withChildren = query
	return fgq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.FacilityGroup.Query().
//		GroupBy(facilitygroup.FieldCreateTime).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (fgq *FacilityGroupQuery) GroupBy(field string, fields ...string) *FacilityGroupGroupBy {
	group := &FacilityGroupGroupBy{config: fgq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := fgq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return fgq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//	}
//
//	client.FacilityGroup.Query().
//		Select(facilitygroup.FieldCreateTime).
//		Scan(ctx, &v)
//
func (fgq *FacilityGroupQuery) Select(field string, fields ...string) *FacilityGroupSelect {
	fgq.fields = append([]string{field}, fields...)
	return &FacilityGroupSelect{FacilityGroupQuery: fgq}
}

func (fgq *FacilityGroupQuery) prepareQuery(ctx context.Context) error {
	for _, f := range fgq.fields {
		if !facilitygroup.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if fgq.path != nil {
		prev, err := fgq.path(ctx)
		if err != nil {
			return err
		}
		fgq.sql = prev
	}
	return nil
}

func (fgq *FacilityGroupQuery) sqlAll(ctx context.Context) ([]*FacilityGroup, error) {
	var (
		nodes       = []*FacilityGroup{}
		withFKs     = fgq.withFKs
		_spec       = fgq.querySpec()
		loadedTypes = [3]bool{
			fgq.withFacilityGroupType != nil,
			fgq.withParent != nil,
			fgq.withChildren != nil,
		}
	)
	if fgq.withFacilityGroupType != nil || fgq.withParent != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, facilitygroup.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &FacilityGroup{config: fgq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, fgq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := fgq.withFacilityGroupType; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*FacilityGroup)
		for i := range nodes {
			if nodes[i].facility_group_type_facility_groups == nil {
				continue
			}
			fk := *nodes[i].facility_group_type_facility_groups
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(facilitygrouptype.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "facility_group_type_facility_groups" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.FacilityGroupType = n
			}
		}
	}

	if query := fgq.withParent; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*FacilityGroup)
		for i := range nodes {
			if nodes[i].facility_group_children == nil {
				continue
			}
			fk := *nodes[i].facility_group_children
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(facilitygroup.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "facility_group_children" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Parent = n
			}
		}
	}

	if query := fgq.withChildren; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*FacilityGroup)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.Children = []*FacilityGroup{}
		}
		query.withFKs = true
		query.Where(predicate.FacilityGroup(func(s *sql.Selector) {
			s.Where(sql.InValues(facilitygroup.ChildrenColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.facility_group_children
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "facility_group_children" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "facility_group_children" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.Children = append(node.Edges.Children, n)
		}
	}

	return nodes, nil
}

func (fgq *FacilityGroupQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := fgq.querySpec()
	return sqlgraph.CountNodes(ctx, fgq.driver, _spec)
}

func (fgq *FacilityGroupQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := fgq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (fgq *FacilityGroupQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   facilitygroup.Table,
			Columns: facilitygroup.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: facilitygroup.FieldID,
			},
		},
		From:   fgq.sql,
		Unique: true,
	}
	if unique := fgq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := fgq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, facilitygroup.FieldID)
		for i := range fields {
			if fields[i] != facilitygroup.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := fgq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := fgq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := fgq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := fgq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (fgq *FacilityGroupQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(fgq.driver.Dialect())
	t1 := builder.Table(facilitygroup.Table)
	columns := fgq.fields
	if len(columns) == 0 {
		columns = facilitygroup.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if fgq.sql != nil {
		selector = fgq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	for _, p := range fgq.predicates {
		p(selector)
	}
	for _, p := range fgq.order {
		p(selector)
	}
	if offset := fgq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := fgq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// FacilityGroupGroupBy is the group-by builder for FacilityGroup entities.
type FacilityGroupGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (fggb *FacilityGroupGroupBy) Aggregate(fns ...AggregateFunc) *FacilityGroupGroupBy {
	fggb.fns = append(fggb.fns, fns...)
	return fggb
}

// Scan applies the group-by query and scans the result into the given value.
func (fggb *FacilityGroupGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := fggb.path(ctx)
	if err != nil {
		return err
	}
	fggb.sql = query
	return fggb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (fggb *FacilityGroupGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := fggb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (fggb *FacilityGroupGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(fggb.fields) > 1 {
		return nil, errors.New("ent: FacilityGroupGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := fggb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (fggb *FacilityGroupGroupBy) StringsX(ctx context.Context) []string {
	v, err := fggb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (fggb *FacilityGroupGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = fggb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{facilitygroup.Label}
	default:
		err = fmt.Errorf("ent: FacilityGroupGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (fggb *FacilityGroupGroupBy) StringX(ctx context.Context) string {
	v, err := fggb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (fggb *FacilityGroupGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(fggb.fields) > 1 {
		return nil, errors.New("ent: FacilityGroupGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := fggb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (fggb *FacilityGroupGroupBy) IntsX(ctx context.Context) []int {
	v, err := fggb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (fggb *FacilityGroupGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = fggb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{facilitygroup.Label}
	default:
		err = fmt.Errorf("ent: FacilityGroupGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (fggb *FacilityGroupGroupBy) IntX(ctx context.Context) int {
	v, err := fggb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (fggb *FacilityGroupGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(fggb.fields) > 1 {
		return nil, errors.New("ent: FacilityGroupGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := fggb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (fggb *FacilityGroupGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := fggb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (fggb *FacilityGroupGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = fggb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{facilitygroup.Label}
	default:
		err = fmt.Errorf("ent: FacilityGroupGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (fggb *FacilityGroupGroupBy) Float64X(ctx context.Context) float64 {
	v, err := fggb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (fggb *FacilityGroupGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(fggb.fields) > 1 {
		return nil, errors.New("ent: FacilityGroupGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := fggb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (fggb *FacilityGroupGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := fggb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (fggb *FacilityGroupGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = fggb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{facilitygroup.Label}
	default:
		err = fmt.Errorf("ent: FacilityGroupGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (fggb *FacilityGroupGroupBy) BoolX(ctx context.Context) bool {
	v, err := fggb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (fggb *FacilityGroupGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range fggb.fields {
		if !facilitygroup.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := fggb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := fggb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (fggb *FacilityGroupGroupBy) sqlQuery() *sql.Selector {
	selector := fggb.sql.Select()
	aggregation := make([]string, 0, len(fggb.fns))
	for _, fn := range fggb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(fggb.fields)+len(fggb.fns))
		for _, f := range fggb.fields {
			columns = append(columns, selector.C(f))
		}
		for _, c := range aggregation {
			columns = append(columns, c)
		}
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(fggb.fields...)...)
}

// FacilityGroupSelect is the builder for selecting fields of FacilityGroup entities.
type FacilityGroupSelect struct {
	*FacilityGroupQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (fgs *FacilityGroupSelect) Scan(ctx context.Context, v interface{}) error {
	if err := fgs.prepareQuery(ctx); err != nil {
		return err
	}
	fgs.sql = fgs.FacilityGroupQuery.sqlQuery(ctx)
	return fgs.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (fgs *FacilityGroupSelect) ScanX(ctx context.Context, v interface{}) {
	if err := fgs.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (fgs *FacilityGroupSelect) Strings(ctx context.Context) ([]string, error) {
	if len(fgs.fields) > 1 {
		return nil, errors.New("ent: FacilityGroupSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := fgs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (fgs *FacilityGroupSelect) StringsX(ctx context.Context) []string {
	v, err := fgs.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (fgs *FacilityGroupSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = fgs.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{facilitygroup.Label}
	default:
		err = fmt.Errorf("ent: FacilityGroupSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (fgs *FacilityGroupSelect) StringX(ctx context.Context) string {
	v, err := fgs.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (fgs *FacilityGroupSelect) Ints(ctx context.Context) ([]int, error) {
	if len(fgs.fields) > 1 {
		return nil, errors.New("ent: FacilityGroupSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := fgs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (fgs *FacilityGroupSelect) IntsX(ctx context.Context) []int {
	v, err := fgs.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (fgs *FacilityGroupSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = fgs.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{facilitygroup.Label}
	default:
		err = fmt.Errorf("ent: FacilityGroupSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (fgs *FacilityGroupSelect) IntX(ctx context.Context) int {
	v, err := fgs.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (fgs *FacilityGroupSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(fgs.fields) > 1 {
		return nil, errors.New("ent: FacilityGroupSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := fgs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (fgs *FacilityGroupSelect) Float64sX(ctx context.Context) []float64 {
	v, err := fgs.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (fgs *FacilityGroupSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = fgs.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{facilitygroup.Label}
	default:
		err = fmt.Errorf("ent: FacilityGroupSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (fgs *FacilityGroupSelect) Float64X(ctx context.Context) float64 {
	v, err := fgs.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (fgs *FacilityGroupSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(fgs.fields) > 1 {
		return nil, errors.New("ent: FacilityGroupSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := fgs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (fgs *FacilityGroupSelect) BoolsX(ctx context.Context) []bool {
	v, err := fgs.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (fgs *FacilityGroupSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = fgs.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{facilitygroup.Label}
	default:
		err = fmt.Errorf("ent: FacilityGroupSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (fgs *FacilityGroupSelect) BoolX(ctx context.Context) bool {
	v, err := fgs.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (fgs *FacilityGroupSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := fgs.sql.Query()
	if err := fgs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
