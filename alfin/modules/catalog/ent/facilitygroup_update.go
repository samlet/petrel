// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/facilitygroup"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/facilitygrouptype"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/predicate"
)

// FacilityGroupUpdate is the builder for updating FacilityGroup entities.
type FacilityGroupUpdate struct {
	config
	hooks    []Hook
	mutation *FacilityGroupMutation
}

// Where adds a new predicate for the FacilityGroupUpdate builder.
func (fgu *FacilityGroupUpdate) Where(ps ...predicate.FacilityGroup) *FacilityGroupUpdate {
	fgu.mutation.predicates = append(fgu.mutation.predicates, ps...)
	return fgu
}

// SetStringRef sets the "string_ref" field.
func (fgu *FacilityGroupUpdate) SetStringRef(s string) *FacilityGroupUpdate {
	fgu.mutation.SetStringRef(s)
	return fgu
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (fgu *FacilityGroupUpdate) SetNillableStringRef(s *string) *FacilityGroupUpdate {
	if s != nil {
		fgu.SetStringRef(*s)
	}
	return fgu
}

// ClearStringRef clears the value of the "string_ref" field.
func (fgu *FacilityGroupUpdate) ClearStringRef() *FacilityGroupUpdate {
	fgu.mutation.ClearStringRef()
	return fgu
}

// SetFacilityGroupName sets the "facility_group_name" field.
func (fgu *FacilityGroupUpdate) SetFacilityGroupName(s string) *FacilityGroupUpdate {
	fgu.mutation.SetFacilityGroupName(s)
	return fgu
}

// SetNillableFacilityGroupName sets the "facility_group_name" field if the given value is not nil.
func (fgu *FacilityGroupUpdate) SetNillableFacilityGroupName(s *string) *FacilityGroupUpdate {
	if s != nil {
		fgu.SetFacilityGroupName(*s)
	}
	return fgu
}

// ClearFacilityGroupName clears the value of the "facility_group_name" field.
func (fgu *FacilityGroupUpdate) ClearFacilityGroupName() *FacilityGroupUpdate {
	fgu.mutation.ClearFacilityGroupName()
	return fgu
}

// SetDescription sets the "description" field.
func (fgu *FacilityGroupUpdate) SetDescription(s string) *FacilityGroupUpdate {
	fgu.mutation.SetDescription(s)
	return fgu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (fgu *FacilityGroupUpdate) SetNillableDescription(s *string) *FacilityGroupUpdate {
	if s != nil {
		fgu.SetDescription(*s)
	}
	return fgu
}

// ClearDescription clears the value of the "description" field.
func (fgu *FacilityGroupUpdate) ClearDescription() *FacilityGroupUpdate {
	fgu.mutation.ClearDescription()
	return fgu
}

// SetFacilityGroupTypeID sets the "facility_group_type" edge to the FacilityGroupType entity by ID.
func (fgu *FacilityGroupUpdate) SetFacilityGroupTypeID(id int) *FacilityGroupUpdate {
	fgu.mutation.SetFacilityGroupTypeID(id)
	return fgu
}

// SetNillableFacilityGroupTypeID sets the "facility_group_type" edge to the FacilityGroupType entity by ID if the given value is not nil.
func (fgu *FacilityGroupUpdate) SetNillableFacilityGroupTypeID(id *int) *FacilityGroupUpdate {
	if id != nil {
		fgu = fgu.SetFacilityGroupTypeID(*id)
	}
	return fgu
}

// SetFacilityGroupType sets the "facility_group_type" edge to the FacilityGroupType entity.
func (fgu *FacilityGroupUpdate) SetFacilityGroupType(f *FacilityGroupType) *FacilityGroupUpdate {
	return fgu.SetFacilityGroupTypeID(f.ID)
}

// SetParentID sets the "parent" edge to the FacilityGroup entity by ID.
func (fgu *FacilityGroupUpdate) SetParentID(id int) *FacilityGroupUpdate {
	fgu.mutation.SetParentID(id)
	return fgu
}

// SetNillableParentID sets the "parent" edge to the FacilityGroup entity by ID if the given value is not nil.
func (fgu *FacilityGroupUpdate) SetNillableParentID(id *int) *FacilityGroupUpdate {
	if id != nil {
		fgu = fgu.SetParentID(*id)
	}
	return fgu
}

// SetParent sets the "parent" edge to the FacilityGroup entity.
func (fgu *FacilityGroupUpdate) SetParent(f *FacilityGroup) *FacilityGroupUpdate {
	return fgu.SetParentID(f.ID)
}

// AddChildIDs adds the "children" edge to the FacilityGroup entity by IDs.
func (fgu *FacilityGroupUpdate) AddChildIDs(ids ...int) *FacilityGroupUpdate {
	fgu.mutation.AddChildIDs(ids...)
	return fgu
}

// AddChildren adds the "children" edges to the FacilityGroup entity.
func (fgu *FacilityGroupUpdate) AddChildren(f ...*FacilityGroup) *FacilityGroupUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fgu.AddChildIDs(ids...)
}

// Mutation returns the FacilityGroupMutation object of the builder.
func (fgu *FacilityGroupUpdate) Mutation() *FacilityGroupMutation {
	return fgu.mutation
}

// ClearFacilityGroupType clears the "facility_group_type" edge to the FacilityGroupType entity.
func (fgu *FacilityGroupUpdate) ClearFacilityGroupType() *FacilityGroupUpdate {
	fgu.mutation.ClearFacilityGroupType()
	return fgu
}

// ClearParent clears the "parent" edge to the FacilityGroup entity.
func (fgu *FacilityGroupUpdate) ClearParent() *FacilityGroupUpdate {
	fgu.mutation.ClearParent()
	return fgu
}

// ClearChildren clears all "children" edges to the FacilityGroup entity.
func (fgu *FacilityGroupUpdate) ClearChildren() *FacilityGroupUpdate {
	fgu.mutation.ClearChildren()
	return fgu
}

// RemoveChildIDs removes the "children" edge to FacilityGroup entities by IDs.
func (fgu *FacilityGroupUpdate) RemoveChildIDs(ids ...int) *FacilityGroupUpdate {
	fgu.mutation.RemoveChildIDs(ids...)
	return fgu
}

// RemoveChildren removes "children" edges to FacilityGroup entities.
func (fgu *FacilityGroupUpdate) RemoveChildren(f ...*FacilityGroup) *FacilityGroupUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fgu.RemoveChildIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fgu *FacilityGroupUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	fgu.defaults()
	if len(fgu.hooks) == 0 {
		affected, err = fgu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FacilityGroupMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			fgu.mutation = mutation
			affected, err = fgu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(fgu.hooks) - 1; i >= 0; i-- {
			mut = fgu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fgu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (fgu *FacilityGroupUpdate) SaveX(ctx context.Context) int {
	affected, err := fgu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fgu *FacilityGroupUpdate) Exec(ctx context.Context) error {
	_, err := fgu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fgu *FacilityGroupUpdate) ExecX(ctx context.Context) {
	if err := fgu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fgu *FacilityGroupUpdate) defaults() {
	if _, ok := fgu.mutation.UpdateTime(); !ok {
		v := facilitygroup.UpdateDefaultUpdateTime()
		fgu.mutation.SetUpdateTime(v)
	}
}

func (fgu *FacilityGroupUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   facilitygroup.Table,
			Columns: facilitygroup.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: facilitygroup.FieldID,
			},
		},
	}
	if ps := fgu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fgu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: facilitygroup.FieldUpdateTime,
		})
	}
	if value, ok := fgu.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: facilitygroup.FieldStringRef,
		})
	}
	if fgu.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: facilitygroup.FieldStringRef,
		})
	}
	if value, ok := fgu.mutation.FacilityGroupName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: facilitygroup.FieldFacilityGroupName,
		})
	}
	if fgu.mutation.FacilityGroupNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: facilitygroup.FieldFacilityGroupName,
		})
	}
	if value, ok := fgu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: facilitygroup.FieldDescription,
		})
	}
	if fgu.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: facilitygroup.FieldDescription,
		})
	}
	if fgu.mutation.FacilityGroupTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   facilitygroup.FacilityGroupTypeTable,
			Columns: []string{facilitygroup.FacilityGroupTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: facilitygrouptype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fgu.mutation.FacilityGroupTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   facilitygroup.FacilityGroupTypeTable,
			Columns: []string{facilitygroup.FacilityGroupTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: facilitygrouptype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fgu.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   facilitygroup.ParentTable,
			Columns: []string{facilitygroup.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: facilitygroup.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fgu.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   facilitygroup.ParentTable,
			Columns: []string{facilitygroup.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: facilitygroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fgu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   facilitygroup.ChildrenTable,
			Columns: []string{facilitygroup.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: facilitygroup.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fgu.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !fgu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   facilitygroup.ChildrenTable,
			Columns: []string{facilitygroup.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: facilitygroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fgu.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   facilitygroup.ChildrenTable,
			Columns: []string{facilitygroup.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: facilitygroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fgu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{facilitygroup.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// FacilityGroupUpdateOne is the builder for updating a single FacilityGroup entity.
type FacilityGroupUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FacilityGroupMutation
}

// SetStringRef sets the "string_ref" field.
func (fguo *FacilityGroupUpdateOne) SetStringRef(s string) *FacilityGroupUpdateOne {
	fguo.mutation.SetStringRef(s)
	return fguo
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (fguo *FacilityGroupUpdateOne) SetNillableStringRef(s *string) *FacilityGroupUpdateOne {
	if s != nil {
		fguo.SetStringRef(*s)
	}
	return fguo
}

// ClearStringRef clears the value of the "string_ref" field.
func (fguo *FacilityGroupUpdateOne) ClearStringRef() *FacilityGroupUpdateOne {
	fguo.mutation.ClearStringRef()
	return fguo
}

// SetFacilityGroupName sets the "facility_group_name" field.
func (fguo *FacilityGroupUpdateOne) SetFacilityGroupName(s string) *FacilityGroupUpdateOne {
	fguo.mutation.SetFacilityGroupName(s)
	return fguo
}

// SetNillableFacilityGroupName sets the "facility_group_name" field if the given value is not nil.
func (fguo *FacilityGroupUpdateOne) SetNillableFacilityGroupName(s *string) *FacilityGroupUpdateOne {
	if s != nil {
		fguo.SetFacilityGroupName(*s)
	}
	return fguo
}

// ClearFacilityGroupName clears the value of the "facility_group_name" field.
func (fguo *FacilityGroupUpdateOne) ClearFacilityGroupName() *FacilityGroupUpdateOne {
	fguo.mutation.ClearFacilityGroupName()
	return fguo
}

// SetDescription sets the "description" field.
func (fguo *FacilityGroupUpdateOne) SetDescription(s string) *FacilityGroupUpdateOne {
	fguo.mutation.SetDescription(s)
	return fguo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (fguo *FacilityGroupUpdateOne) SetNillableDescription(s *string) *FacilityGroupUpdateOne {
	if s != nil {
		fguo.SetDescription(*s)
	}
	return fguo
}

// ClearDescription clears the value of the "description" field.
func (fguo *FacilityGroupUpdateOne) ClearDescription() *FacilityGroupUpdateOne {
	fguo.mutation.ClearDescription()
	return fguo
}

// SetFacilityGroupTypeID sets the "facility_group_type" edge to the FacilityGroupType entity by ID.
func (fguo *FacilityGroupUpdateOne) SetFacilityGroupTypeID(id int) *FacilityGroupUpdateOne {
	fguo.mutation.SetFacilityGroupTypeID(id)
	return fguo
}

// SetNillableFacilityGroupTypeID sets the "facility_group_type" edge to the FacilityGroupType entity by ID if the given value is not nil.
func (fguo *FacilityGroupUpdateOne) SetNillableFacilityGroupTypeID(id *int) *FacilityGroupUpdateOne {
	if id != nil {
		fguo = fguo.SetFacilityGroupTypeID(*id)
	}
	return fguo
}

// SetFacilityGroupType sets the "facility_group_type" edge to the FacilityGroupType entity.
func (fguo *FacilityGroupUpdateOne) SetFacilityGroupType(f *FacilityGroupType) *FacilityGroupUpdateOne {
	return fguo.SetFacilityGroupTypeID(f.ID)
}

// SetParentID sets the "parent" edge to the FacilityGroup entity by ID.
func (fguo *FacilityGroupUpdateOne) SetParentID(id int) *FacilityGroupUpdateOne {
	fguo.mutation.SetParentID(id)
	return fguo
}

// SetNillableParentID sets the "parent" edge to the FacilityGroup entity by ID if the given value is not nil.
func (fguo *FacilityGroupUpdateOne) SetNillableParentID(id *int) *FacilityGroupUpdateOne {
	if id != nil {
		fguo = fguo.SetParentID(*id)
	}
	return fguo
}

// SetParent sets the "parent" edge to the FacilityGroup entity.
func (fguo *FacilityGroupUpdateOne) SetParent(f *FacilityGroup) *FacilityGroupUpdateOne {
	return fguo.SetParentID(f.ID)
}

// AddChildIDs adds the "children" edge to the FacilityGroup entity by IDs.
func (fguo *FacilityGroupUpdateOne) AddChildIDs(ids ...int) *FacilityGroupUpdateOne {
	fguo.mutation.AddChildIDs(ids...)
	return fguo
}

// AddChildren adds the "children" edges to the FacilityGroup entity.
func (fguo *FacilityGroupUpdateOne) AddChildren(f ...*FacilityGroup) *FacilityGroupUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fguo.AddChildIDs(ids...)
}

// Mutation returns the FacilityGroupMutation object of the builder.
func (fguo *FacilityGroupUpdateOne) Mutation() *FacilityGroupMutation {
	return fguo.mutation
}

// ClearFacilityGroupType clears the "facility_group_type" edge to the FacilityGroupType entity.
func (fguo *FacilityGroupUpdateOne) ClearFacilityGroupType() *FacilityGroupUpdateOne {
	fguo.mutation.ClearFacilityGroupType()
	return fguo
}

// ClearParent clears the "parent" edge to the FacilityGroup entity.
func (fguo *FacilityGroupUpdateOne) ClearParent() *FacilityGroupUpdateOne {
	fguo.mutation.ClearParent()
	return fguo
}

// ClearChildren clears all "children" edges to the FacilityGroup entity.
func (fguo *FacilityGroupUpdateOne) ClearChildren() *FacilityGroupUpdateOne {
	fguo.mutation.ClearChildren()
	return fguo
}

// RemoveChildIDs removes the "children" edge to FacilityGroup entities by IDs.
func (fguo *FacilityGroupUpdateOne) RemoveChildIDs(ids ...int) *FacilityGroupUpdateOne {
	fguo.mutation.RemoveChildIDs(ids...)
	return fguo
}

// RemoveChildren removes "children" edges to FacilityGroup entities.
func (fguo *FacilityGroupUpdateOne) RemoveChildren(f ...*FacilityGroup) *FacilityGroupUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fguo.RemoveChildIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fguo *FacilityGroupUpdateOne) Select(field string, fields ...string) *FacilityGroupUpdateOne {
	fguo.fields = append([]string{field}, fields...)
	return fguo
}

// Save executes the query and returns the updated FacilityGroup entity.
func (fguo *FacilityGroupUpdateOne) Save(ctx context.Context) (*FacilityGroup, error) {
	var (
		err  error
		node *FacilityGroup
	)
	fguo.defaults()
	if len(fguo.hooks) == 0 {
		node, err = fguo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FacilityGroupMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			fguo.mutation = mutation
			node, err = fguo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(fguo.hooks) - 1; i >= 0; i-- {
			mut = fguo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fguo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (fguo *FacilityGroupUpdateOne) SaveX(ctx context.Context) *FacilityGroup {
	node, err := fguo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fguo *FacilityGroupUpdateOne) Exec(ctx context.Context) error {
	_, err := fguo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fguo *FacilityGroupUpdateOne) ExecX(ctx context.Context) {
	if err := fguo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fguo *FacilityGroupUpdateOne) defaults() {
	if _, ok := fguo.mutation.UpdateTime(); !ok {
		v := facilitygroup.UpdateDefaultUpdateTime()
		fguo.mutation.SetUpdateTime(v)
	}
}

func (fguo *FacilityGroupUpdateOne) sqlSave(ctx context.Context) (_node *FacilityGroup, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   facilitygroup.Table,
			Columns: facilitygroup.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: facilitygroup.FieldID,
			},
		},
	}
	id, ok := fguo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing FacilityGroup.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := fguo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, facilitygroup.FieldID)
		for _, f := range fields {
			if !facilitygroup.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != facilitygroup.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fguo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fguo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: facilitygroup.FieldUpdateTime,
		})
	}
	if value, ok := fguo.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: facilitygroup.FieldStringRef,
		})
	}
	if fguo.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: facilitygroup.FieldStringRef,
		})
	}
	if value, ok := fguo.mutation.FacilityGroupName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: facilitygroup.FieldFacilityGroupName,
		})
	}
	if fguo.mutation.FacilityGroupNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: facilitygroup.FieldFacilityGroupName,
		})
	}
	if value, ok := fguo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: facilitygroup.FieldDescription,
		})
	}
	if fguo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: facilitygroup.FieldDescription,
		})
	}
	if fguo.mutation.FacilityGroupTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   facilitygroup.FacilityGroupTypeTable,
			Columns: []string{facilitygroup.FacilityGroupTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: facilitygrouptype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fguo.mutation.FacilityGroupTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   facilitygroup.FacilityGroupTypeTable,
			Columns: []string{facilitygroup.FacilityGroupTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: facilitygrouptype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fguo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   facilitygroup.ParentTable,
			Columns: []string{facilitygroup.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: facilitygroup.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fguo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   facilitygroup.ParentTable,
			Columns: []string{facilitygroup.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: facilitygroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fguo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   facilitygroup.ChildrenTable,
			Columns: []string{facilitygroup.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: facilitygroup.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fguo.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !fguo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   facilitygroup.ChildrenTable,
			Columns: []string{facilitygroup.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: facilitygroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fguo.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   facilitygroup.ChildrenTable,
			Columns: []string{facilitygroup.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: facilitygroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &FacilityGroup{config: fguo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fguo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{facilitygroup.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
