// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/facilitygroup"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/facilitygrouptype"
)

// FacilityGroupTypeCreate is the builder for creating a FacilityGroupType entity.
type FacilityGroupTypeCreate struct {
	config
	mutation *FacilityGroupTypeMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (fgtc *FacilityGroupTypeCreate) SetCreateTime(t time.Time) *FacilityGroupTypeCreate {
	fgtc.mutation.SetCreateTime(t)
	return fgtc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (fgtc *FacilityGroupTypeCreate) SetNillableCreateTime(t *time.Time) *FacilityGroupTypeCreate {
	if t != nil {
		fgtc.SetCreateTime(*t)
	}
	return fgtc
}

// SetUpdateTime sets the "update_time" field.
func (fgtc *FacilityGroupTypeCreate) SetUpdateTime(t time.Time) *FacilityGroupTypeCreate {
	fgtc.mutation.SetUpdateTime(t)
	return fgtc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (fgtc *FacilityGroupTypeCreate) SetNillableUpdateTime(t *time.Time) *FacilityGroupTypeCreate {
	if t != nil {
		fgtc.SetUpdateTime(*t)
	}
	return fgtc
}

// SetStringRef sets the "string_ref" field.
func (fgtc *FacilityGroupTypeCreate) SetStringRef(s string) *FacilityGroupTypeCreate {
	fgtc.mutation.SetStringRef(s)
	return fgtc
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (fgtc *FacilityGroupTypeCreate) SetNillableStringRef(s *string) *FacilityGroupTypeCreate {
	if s != nil {
		fgtc.SetStringRef(*s)
	}
	return fgtc
}

// SetDescription sets the "description" field.
func (fgtc *FacilityGroupTypeCreate) SetDescription(s string) *FacilityGroupTypeCreate {
	fgtc.mutation.SetDescription(s)
	return fgtc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (fgtc *FacilityGroupTypeCreate) SetNillableDescription(s *string) *FacilityGroupTypeCreate {
	if s != nil {
		fgtc.SetDescription(*s)
	}
	return fgtc
}

// AddFacilityGroupIDs adds the "facility_groups" edge to the FacilityGroup entity by IDs.
func (fgtc *FacilityGroupTypeCreate) AddFacilityGroupIDs(ids ...int) *FacilityGroupTypeCreate {
	fgtc.mutation.AddFacilityGroupIDs(ids...)
	return fgtc
}

// AddFacilityGroups adds the "facility_groups" edges to the FacilityGroup entity.
func (fgtc *FacilityGroupTypeCreate) AddFacilityGroups(f ...*FacilityGroup) *FacilityGroupTypeCreate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fgtc.AddFacilityGroupIDs(ids...)
}

// Mutation returns the FacilityGroupTypeMutation object of the builder.
func (fgtc *FacilityGroupTypeCreate) Mutation() *FacilityGroupTypeMutation {
	return fgtc.mutation
}

// Save creates the FacilityGroupType in the database.
func (fgtc *FacilityGroupTypeCreate) Save(ctx context.Context) (*FacilityGroupType, error) {
	var (
		err  error
		node *FacilityGroupType
	)
	fgtc.defaults()
	if len(fgtc.hooks) == 0 {
		if err = fgtc.check(); err != nil {
			return nil, err
		}
		node, err = fgtc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FacilityGroupTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = fgtc.check(); err != nil {
				return nil, err
			}
			fgtc.mutation = mutation
			if node, err = fgtc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(fgtc.hooks) - 1; i >= 0; i-- {
			mut = fgtc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fgtc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (fgtc *FacilityGroupTypeCreate) SaveX(ctx context.Context) *FacilityGroupType {
	v, err := fgtc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (fgtc *FacilityGroupTypeCreate) defaults() {
	if _, ok := fgtc.mutation.CreateTime(); !ok {
		v := facilitygrouptype.DefaultCreateTime()
		fgtc.mutation.SetCreateTime(v)
	}
	if _, ok := fgtc.mutation.UpdateTime(); !ok {
		v := facilitygrouptype.DefaultUpdateTime()
		fgtc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fgtc *FacilityGroupTypeCreate) check() error {
	if _, ok := fgtc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New("ent: missing required field \"create_time\"")}
	}
	if _, ok := fgtc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New("ent: missing required field \"update_time\"")}
	}
	return nil
}

func (fgtc *FacilityGroupTypeCreate) sqlSave(ctx context.Context) (*FacilityGroupType, error) {
	_node, _spec := fgtc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fgtc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (fgtc *FacilityGroupTypeCreate) createSpec() (*FacilityGroupType, *sqlgraph.CreateSpec) {
	var (
		_node = &FacilityGroupType{config: fgtc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: facilitygrouptype.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: facilitygrouptype.FieldID,
			},
		}
	)
	if value, ok := fgtc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: facilitygrouptype.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := fgtc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: facilitygrouptype.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := fgtc.mutation.StringRef(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: facilitygrouptype.FieldStringRef,
		})
		_node.StringRef = value
	}
	if value, ok := fgtc.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: facilitygrouptype.FieldDescription,
		})
		_node.Description = value
	}
	if nodes := fgtc.mutation.FacilityGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   facilitygrouptype.FacilityGroupsTable,
			Columns: []string{facilitygrouptype.FacilityGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: facilitygroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// FacilityGroupTypeCreateBulk is the builder for creating many FacilityGroupType entities in bulk.
type FacilityGroupTypeCreateBulk struct {
	config
	builders []*FacilityGroupTypeCreate
}

// Save creates the FacilityGroupType entities in the database.
func (fgtcb *FacilityGroupTypeCreateBulk) Save(ctx context.Context) ([]*FacilityGroupType, error) {
	specs := make([]*sqlgraph.CreateSpec, len(fgtcb.builders))
	nodes := make([]*FacilityGroupType, len(fgtcb.builders))
	mutators := make([]Mutator, len(fgtcb.builders))
	for i := range fgtcb.builders {
		func(i int, root context.Context) {
			builder := fgtcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FacilityGroupTypeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fgtcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fgtcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fgtcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fgtcb *FacilityGroupTypeCreateBulk) SaveX(ctx context.Context) []*FacilityGroupType {
	v, err := fgtcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
