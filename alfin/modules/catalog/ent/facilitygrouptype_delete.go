// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/facilitygrouptype"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/predicate"
)

// FacilityGroupTypeDelete is the builder for deleting a FacilityGroupType entity.
type FacilityGroupTypeDelete struct {
	config
	hooks    []Hook
	mutation *FacilityGroupTypeMutation
}

// Where adds a new predicate to the FacilityGroupTypeDelete builder.
func (fgtd *FacilityGroupTypeDelete) Where(ps ...predicate.FacilityGroupType) *FacilityGroupTypeDelete {
	fgtd.mutation.predicates = append(fgtd.mutation.predicates, ps...)
	return fgtd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (fgtd *FacilityGroupTypeDelete) Exec(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(fgtd.hooks) == 0 {
		affected, err = fgtd.sqlExec(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FacilityGroupTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			fgtd.mutation = mutation
			affected, err = fgtd.sqlExec(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(fgtd.hooks) - 1; i >= 0; i-- {
			mut = fgtd.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fgtd.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// ExecX is like Exec, but panics if an error occurs.
func (fgtd *FacilityGroupTypeDelete) ExecX(ctx context.Context) int {
	n, err := fgtd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (fgtd *FacilityGroupTypeDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := &sqlgraph.DeleteSpec{
		Node: &sqlgraph.NodeSpec{
			Table: facilitygrouptype.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: facilitygrouptype.FieldID,
			},
		},
	}
	if ps := fgtd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return sqlgraph.DeleteNodes(ctx, fgtd.driver, _spec)
}

// FacilityGroupTypeDeleteOne is the builder for deleting a single FacilityGroupType entity.
type FacilityGroupTypeDeleteOne struct {
	fgtd *FacilityGroupTypeDelete
}

// Exec executes the deletion query.
func (fgtdo *FacilityGroupTypeDeleteOne) Exec(ctx context.Context) error {
	n, err := fgtdo.fgtd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{facilitygrouptype.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (fgtdo *FacilityGroupTypeDeleteOne) ExecX(ctx context.Context) {
	fgtdo.fgtd.ExecX(ctx)
}
