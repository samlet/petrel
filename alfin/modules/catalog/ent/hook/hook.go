// Code generated by entc, DO NOT EDIT.

package hook

import (
	"context"
	"fmt"

	"github.com/samlet/petrel/alfin/modules/catalog/ent"
)

// The ContentAssocTypeFunc type is an adapter to allow the use of ordinary
// function as ContentAssocType mutator.
type ContentAssocTypeFunc func(context.Context, *ent.ContentAssocTypeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ContentAssocTypeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ContentAssocTypeMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ContentAssocTypeMutation", m)
	}
	return f(ctx, mv)
}

// The ContentTypeFunc type is an adapter to allow the use of ordinary
// function as ContentType mutator.
type ContentTypeFunc func(context.Context, *ent.ContentTypeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ContentTypeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ContentTypeMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ContentTypeMutation", m)
	}
	return f(ctx, mv)
}

// The CostComponentTypeFunc type is an adapter to allow the use of ordinary
// function as CostComponentType mutator.
type CostComponentTypeFunc func(context.Context, *ent.CostComponentTypeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CostComponentTypeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.CostComponentTypeMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CostComponentTypeMutation", m)
	}
	return f(ctx, mv)
}

// The CustomMethodFunc type is an adapter to allow the use of ordinary
// function as CustomMethod mutator.
type CustomMethodFunc func(context.Context, *ent.CustomMethodMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CustomMethodFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.CustomMethodMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CustomMethodMutation", m)
	}
	return f(ctx, mv)
}

// The CustomMethodTypeFunc type is an adapter to allow the use of ordinary
// function as CustomMethodType mutator.
type CustomMethodTypeFunc func(context.Context, *ent.CustomMethodTypeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CustomMethodTypeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.CustomMethodTypeMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CustomMethodTypeMutation", m)
	}
	return f(ctx, mv)
}

// The EnumerationFunc type is an adapter to allow the use of ordinary
// function as Enumeration mutator.
type EnumerationFunc func(context.Context, *ent.EnumerationMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f EnumerationFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.EnumerationMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.EnumerationMutation", m)
	}
	return f(ctx, mv)
}

// The EnumerationTypeFunc type is an adapter to allow the use of ordinary
// function as EnumerationType mutator.
type EnumerationTypeFunc func(context.Context, *ent.EnumerationTypeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f EnumerationTypeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.EnumerationTypeMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.EnumerationTypeMutation", m)
	}
	return f(ctx, mv)
}

// The FacilityAssocTypeFunc type is an adapter to allow the use of ordinary
// function as FacilityAssocType mutator.
type FacilityAssocTypeFunc func(context.Context, *ent.FacilityAssocTypeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f FacilityAssocTypeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.FacilityAssocTypeMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.FacilityAssocTypeMutation", m)
	}
	return f(ctx, mv)
}

// The FacilityGroupFunc type is an adapter to allow the use of ordinary
// function as FacilityGroup mutator.
type FacilityGroupFunc func(context.Context, *ent.FacilityGroupMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f FacilityGroupFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.FacilityGroupMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.FacilityGroupMutation", m)
	}
	return f(ctx, mv)
}

// The FacilityGroupTypeFunc type is an adapter to allow the use of ordinary
// function as FacilityGroupType mutator.
type FacilityGroupTypeFunc func(context.Context, *ent.FacilityGroupTypeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f FacilityGroupTypeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.FacilityGroupTypeMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.FacilityGroupTypeMutation", m)
	}
	return f(ctx, mv)
}

// The FacilityTypeFunc type is an adapter to allow the use of ordinary
// function as FacilityType mutator.
type FacilityTypeFunc func(context.Context, *ent.FacilityTypeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f FacilityTypeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.FacilityTypeMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.FacilityTypeMutation", m)
	}
	return f(ctx, mv)
}

// The GoodIdentificationTypeFunc type is an adapter to allow the use of ordinary
// function as GoodIdentificationType mutator.
type GoodIdentificationTypeFunc func(context.Context, *ent.GoodIdentificationTypeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f GoodIdentificationTypeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.GoodIdentificationTypeMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.GoodIdentificationTypeMutation", m)
	}
	return f(ctx, mv)
}

// The InventoryItemDetailFunc type is an adapter to allow the use of ordinary
// function as InventoryItemDetail mutator.
type InventoryItemDetailFunc func(context.Context, *ent.InventoryItemDetailMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f InventoryItemDetailFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.InventoryItemDetailMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.InventoryItemDetailMutation", m)
	}
	return f(ctx, mv)
}

// The InventoryItemTypeFunc type is an adapter to allow the use of ordinary
// function as InventoryItemType mutator.
type InventoryItemTypeFunc func(context.Context, *ent.InventoryItemTypeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f InventoryItemTypeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.InventoryItemTypeMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.InventoryItemTypeMutation", m)
	}
	return f(ctx, mv)
}

// The OrderAdjustmentFunc type is an adapter to allow the use of ordinary
// function as OrderAdjustment mutator.
type OrderAdjustmentFunc func(context.Context, *ent.OrderAdjustmentMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f OrderAdjustmentFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.OrderAdjustmentMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.OrderAdjustmentMutation", m)
	}
	return f(ctx, mv)
}

// The OrderContactMechFunc type is an adapter to allow the use of ordinary
// function as OrderContactMech mutator.
type OrderContactMechFunc func(context.Context, *ent.OrderContactMechMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f OrderContactMechFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.OrderContactMechMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.OrderContactMechMutation", m)
	}
	return f(ctx, mv)
}

// The OrderHeaderFunc type is an adapter to allow the use of ordinary
// function as OrderHeader mutator.
type OrderHeaderFunc func(context.Context, *ent.OrderHeaderMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f OrderHeaderFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.OrderHeaderMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.OrderHeaderMutation", m)
	}
	return f(ctx, mv)
}

// The OrderItemFunc type is an adapter to allow the use of ordinary
// function as OrderItem mutator.
type OrderItemFunc func(context.Context, *ent.OrderItemMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f OrderItemFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.OrderItemMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.OrderItemMutation", m)
	}
	return f(ctx, mv)
}

// The OrderItemShipGroupFunc type is an adapter to allow the use of ordinary
// function as OrderItemShipGroup mutator.
type OrderItemShipGroupFunc func(context.Context, *ent.OrderItemShipGroupMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f OrderItemShipGroupFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.OrderItemShipGroupMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.OrderItemShipGroupMutation", m)
	}
	return f(ctx, mv)
}

// The OrderItemShipGroupAssocFunc type is an adapter to allow the use of ordinary
// function as OrderItemShipGroupAssoc mutator.
type OrderItemShipGroupAssocFunc func(context.Context, *ent.OrderItemShipGroupAssocMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f OrderItemShipGroupAssocFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.OrderItemShipGroupAssocMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.OrderItemShipGroupAssocMutation", m)
	}
	return f(ctx, mv)
}

// The OrderItemShipGrpInvResFunc type is an adapter to allow the use of ordinary
// function as OrderItemShipGrpInvRes mutator.
type OrderItemShipGrpInvResFunc func(context.Context, *ent.OrderItemShipGrpInvResMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f OrderItemShipGrpInvResFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.OrderItemShipGrpInvResMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.OrderItemShipGrpInvResMutation", m)
	}
	return f(ctx, mv)
}

// The OrderPaymentPreferenceFunc type is an adapter to allow the use of ordinary
// function as OrderPaymentPreference mutator.
type OrderPaymentPreferenceFunc func(context.Context, *ent.OrderPaymentPreferenceMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f OrderPaymentPreferenceFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.OrderPaymentPreferenceMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.OrderPaymentPreferenceMutation", m)
	}
	return f(ctx, mv)
}

// The OrderRoleFunc type is an adapter to allow the use of ordinary
// function as OrderRole mutator.
type OrderRoleFunc func(context.Context, *ent.OrderRoleMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f OrderRoleFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.OrderRoleMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.OrderRoleMutation", m)
	}
	return f(ctx, mv)
}

// The OrderStatusFunc type is an adapter to allow the use of ordinary
// function as OrderStatus mutator.
type OrderStatusFunc func(context.Context, *ent.OrderStatusMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f OrderStatusFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.OrderStatusMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.OrderStatusMutation", m)
	}
	return f(ctx, mv)
}

// The ProdCatalogCategoryTypeFunc type is an adapter to allow the use of ordinary
// function as ProdCatalogCategoryType mutator.
type ProdCatalogCategoryTypeFunc func(context.Context, *ent.ProdCatalogCategoryTypeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ProdCatalogCategoryTypeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ProdCatalogCategoryTypeMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ProdCatalogCategoryTypeMutation", m)
	}
	return f(ctx, mv)
}

// The ProdConfItemContentTypeFunc type is an adapter to allow the use of ordinary
// function as ProdConfItemContentType mutator.
type ProdConfItemContentTypeFunc func(context.Context, *ent.ProdConfItemContentTypeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ProdConfItemContentTypeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ProdConfItemContentTypeMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ProdConfItemContentTypeMutation", m)
	}
	return f(ctx, mv)
}

// The ProductFunc type is an adapter to allow the use of ordinary
// function as Product mutator.
type ProductFunc func(context.Context, *ent.ProductMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ProductFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ProductMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ProductMutation", m)
	}
	return f(ctx, mv)
}

// The ProductAssocFunc type is an adapter to allow the use of ordinary
// function as ProductAssoc mutator.
type ProductAssocFunc func(context.Context, *ent.ProductAssocMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ProductAssocFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ProductAssocMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ProductAssocMutation", m)
	}
	return f(ctx, mv)
}

// The ProductAssocTypeFunc type is an adapter to allow the use of ordinary
// function as ProductAssocType mutator.
type ProductAssocTypeFunc func(context.Context, *ent.ProductAssocTypeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ProductAssocTypeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ProductAssocTypeMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ProductAssocTypeMutation", m)
	}
	return f(ctx, mv)
}

// The ProductCategoryFunc type is an adapter to allow the use of ordinary
// function as ProductCategory mutator.
type ProductCategoryFunc func(context.Context, *ent.ProductCategoryMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ProductCategoryFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ProductCategoryMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ProductCategoryMutation", m)
	}
	return f(ctx, mv)
}

// The ProductCategoryContentTypeFunc type is an adapter to allow the use of ordinary
// function as ProductCategoryContentType mutator.
type ProductCategoryContentTypeFunc func(context.Context, *ent.ProductCategoryContentTypeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ProductCategoryContentTypeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ProductCategoryContentTypeMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ProductCategoryContentTypeMutation", m)
	}
	return f(ctx, mv)
}

// The ProductCategoryTypeFunc type is an adapter to allow the use of ordinary
// function as ProductCategoryType mutator.
type ProductCategoryTypeFunc func(context.Context, *ent.ProductCategoryTypeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ProductCategoryTypeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ProductCategoryTypeMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ProductCategoryTypeMutation", m)
	}
	return f(ctx, mv)
}

// The ProductConfigItemFunc type is an adapter to allow the use of ordinary
// function as ProductConfigItem mutator.
type ProductConfigItemFunc func(context.Context, *ent.ProductConfigItemMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ProductConfigItemFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ProductConfigItemMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ProductConfigItemMutation", m)
	}
	return f(ctx, mv)
}

// The ProductContentTypeFunc type is an adapter to allow the use of ordinary
// function as ProductContentType mutator.
type ProductContentTypeFunc func(context.Context, *ent.ProductContentTypeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ProductContentTypeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ProductContentTypeMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ProductContentTypeMutation", m)
	}
	return f(ctx, mv)
}

// The ProductFeatureFunc type is an adapter to allow the use of ordinary
// function as ProductFeature mutator.
type ProductFeatureFunc func(context.Context, *ent.ProductFeatureMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ProductFeatureFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ProductFeatureMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ProductFeatureMutation", m)
	}
	return f(ctx, mv)
}

// The ProductFeatureApplTypeFunc type is an adapter to allow the use of ordinary
// function as ProductFeatureApplType mutator.
type ProductFeatureApplTypeFunc func(context.Context, *ent.ProductFeatureApplTypeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ProductFeatureApplTypeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ProductFeatureApplTypeMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ProductFeatureApplTypeMutation", m)
	}
	return f(ctx, mv)
}

// The ProductFeatureCategoryFunc type is an adapter to allow the use of ordinary
// function as ProductFeatureCategory mutator.
type ProductFeatureCategoryFunc func(context.Context, *ent.ProductFeatureCategoryMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ProductFeatureCategoryFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ProductFeatureCategoryMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ProductFeatureCategoryMutation", m)
	}
	return f(ctx, mv)
}

// The ProductFeatureIactnTypeFunc type is an adapter to allow the use of ordinary
// function as ProductFeatureIactnType mutator.
type ProductFeatureIactnTypeFunc func(context.Context, *ent.ProductFeatureIactnTypeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ProductFeatureIactnTypeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ProductFeatureIactnTypeMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ProductFeatureIactnTypeMutation", m)
	}
	return f(ctx, mv)
}

// The ProductFeatureTypeFunc type is an adapter to allow the use of ordinary
// function as ProductFeatureType mutator.
type ProductFeatureTypeFunc func(context.Context, *ent.ProductFeatureTypeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ProductFeatureTypeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ProductFeatureTypeMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ProductFeatureTypeMutation", m)
	}
	return f(ctx, mv)
}

// The ProductMaintTypeFunc type is an adapter to allow the use of ordinary
// function as ProductMaintType mutator.
type ProductMaintTypeFunc func(context.Context, *ent.ProductMaintTypeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ProductMaintTypeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ProductMaintTypeMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ProductMaintTypeMutation", m)
	}
	return f(ctx, mv)
}

// The ProductMeterTypeFunc type is an adapter to allow the use of ordinary
// function as ProductMeterType mutator.
type ProductMeterTypeFunc func(context.Context, *ent.ProductMeterTypeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ProductMeterTypeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ProductMeterTypeMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ProductMeterTypeMutation", m)
	}
	return f(ctx, mv)
}

// The ProductPriceFunc type is an adapter to allow the use of ordinary
// function as ProductPrice mutator.
type ProductPriceFunc func(context.Context, *ent.ProductPriceMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ProductPriceFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ProductPriceMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ProductPriceMutation", m)
	}
	return f(ctx, mv)
}

// The ProductPriceActionTypeFunc type is an adapter to allow the use of ordinary
// function as ProductPriceActionType mutator.
type ProductPriceActionTypeFunc func(context.Context, *ent.ProductPriceActionTypeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ProductPriceActionTypeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ProductPriceActionTypeMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ProductPriceActionTypeMutation", m)
	}
	return f(ctx, mv)
}

// The ProductPricePurposeFunc type is an adapter to allow the use of ordinary
// function as ProductPricePurpose mutator.
type ProductPricePurposeFunc func(context.Context, *ent.ProductPricePurposeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ProductPricePurposeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ProductPricePurposeMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ProductPricePurposeMutation", m)
	}
	return f(ctx, mv)
}

// The ProductPriceTypeFunc type is an adapter to allow the use of ordinary
// function as ProductPriceType mutator.
type ProductPriceTypeFunc func(context.Context, *ent.ProductPriceTypeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ProductPriceTypeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ProductPriceTypeMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ProductPriceTypeMutation", m)
	}
	return f(ctx, mv)
}

// The ProductReviewFunc type is an adapter to allow the use of ordinary
// function as ProductReview mutator.
type ProductReviewFunc func(context.Context, *ent.ProductReviewMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ProductReviewFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ProductReviewMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ProductReviewMutation", m)
	}
	return f(ctx, mv)
}

// The ProductStoreFunc type is an adapter to allow the use of ordinary
// function as ProductStore mutator.
type ProductStoreFunc func(context.Context, *ent.ProductStoreMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ProductStoreFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ProductStoreMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ProductStoreMutation", m)
	}
	return f(ctx, mv)
}

// The ProductStoreGroupFunc type is an adapter to allow the use of ordinary
// function as ProductStoreGroup mutator.
type ProductStoreGroupFunc func(context.Context, *ent.ProductStoreGroupMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ProductStoreGroupFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ProductStoreGroupMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ProductStoreGroupMutation", m)
	}
	return f(ctx, mv)
}

// The ProductTypeFunc type is an adapter to allow the use of ordinary
// function as ProductType mutator.
type ProductTypeFunc func(context.Context, *ent.ProductTypeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ProductTypeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ProductTypeMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ProductTypeMutation", m)
	}
	return f(ctx, mv)
}

// The QuantityBreakTypeFunc type is an adapter to allow the use of ordinary
// function as QuantityBreakType mutator.
type QuantityBreakTypeFunc func(context.Context, *ent.QuantityBreakTypeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f QuantityBreakTypeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.QuantityBreakTypeMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.QuantityBreakTypeMutation", m)
	}
	return f(ctx, mv)
}

// The RejectionReasonFunc type is an adapter to allow the use of ordinary
// function as RejectionReason mutator.
type RejectionReasonFunc func(context.Context, *ent.RejectionReasonMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f RejectionReasonFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.RejectionReasonMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.RejectionReasonMutation", m)
	}
	return f(ctx, mv)
}

// The RoleTypeFunc type is an adapter to allow the use of ordinary
// function as RoleType mutator.
type RoleTypeFunc func(context.Context, *ent.RoleTypeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f RoleTypeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.RoleTypeMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.RoleTypeMutation", m)
	}
	return f(ctx, mv)
}

// The ShipmentContactMechTypeFunc type is an adapter to allow the use of ordinary
// function as ShipmentContactMechType mutator.
type ShipmentContactMechTypeFunc func(context.Context, *ent.ShipmentContactMechTypeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ShipmentContactMechTypeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ShipmentContactMechTypeMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ShipmentContactMechTypeMutation", m)
	}
	return f(ctx, mv)
}

// The ShipmentGatewayConfigFunc type is an adapter to allow the use of ordinary
// function as ShipmentGatewayConfig mutator.
type ShipmentGatewayConfigFunc func(context.Context, *ent.ShipmentGatewayConfigMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ShipmentGatewayConfigFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ShipmentGatewayConfigMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ShipmentGatewayConfigMutation", m)
	}
	return f(ctx, mv)
}

// The ShipmentGatewayConfigTypeFunc type is an adapter to allow the use of ordinary
// function as ShipmentGatewayConfigType mutator.
type ShipmentGatewayConfigTypeFunc func(context.Context, *ent.ShipmentGatewayConfigTypeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ShipmentGatewayConfigTypeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ShipmentGatewayConfigTypeMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ShipmentGatewayConfigTypeMutation", m)
	}
	return f(ctx, mv)
}

// The ShipmentGatewayDhlFunc type is an adapter to allow the use of ordinary
// function as ShipmentGatewayDhl mutator.
type ShipmentGatewayDhlFunc func(context.Context, *ent.ShipmentGatewayDhlMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ShipmentGatewayDhlFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ShipmentGatewayDhlMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ShipmentGatewayDhlMutation", m)
	}
	return f(ctx, mv)
}

// The ShipmentGatewayFedexFunc type is an adapter to allow the use of ordinary
// function as ShipmentGatewayFedex mutator.
type ShipmentGatewayFedexFunc func(context.Context, *ent.ShipmentGatewayFedexMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ShipmentGatewayFedexFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ShipmentGatewayFedexMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ShipmentGatewayFedexMutation", m)
	}
	return f(ctx, mv)
}

// The ShipmentGatewayUpsFunc type is an adapter to allow the use of ordinary
// function as ShipmentGatewayUps mutator.
type ShipmentGatewayUpsFunc func(context.Context, *ent.ShipmentGatewayUpsMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ShipmentGatewayUpsFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ShipmentGatewayUpsMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ShipmentGatewayUpsMutation", m)
	}
	return f(ctx, mv)
}

// The ShipmentGatewayUspsFunc type is an adapter to allow the use of ordinary
// function as ShipmentGatewayUsps mutator.
type ShipmentGatewayUspsFunc func(context.Context, *ent.ShipmentGatewayUspsMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ShipmentGatewayUspsFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ShipmentGatewayUspsMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ShipmentGatewayUspsMutation", m)
	}
	return f(ctx, mv)
}

// The ShipmentTypeFunc type is an adapter to allow the use of ordinary
// function as ShipmentType mutator.
type ShipmentTypeFunc func(context.Context, *ent.ShipmentTypeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ShipmentTypeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ShipmentTypeMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ShipmentTypeMutation", m)
	}
	return f(ctx, mv)
}

// The StatusItemFunc type is an adapter to allow the use of ordinary
// function as StatusItem mutator.
type StatusItemFunc func(context.Context, *ent.StatusItemMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f StatusItemFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.StatusItemMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.StatusItemMutation", m)
	}
	return f(ctx, mv)
}

// The StatusTypeFunc type is an adapter to allow the use of ordinary
// function as StatusType mutator.
type StatusTypeFunc func(context.Context, *ent.StatusTypeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f StatusTypeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.StatusTypeMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.StatusTypeMutation", m)
	}
	return f(ctx, mv)
}

// The StatusValidChangeFunc type is an adapter to allow the use of ordinary
// function as StatusValidChange mutator.
type StatusValidChangeFunc func(context.Context, *ent.StatusValidChangeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f StatusValidChangeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.StatusValidChangeMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.StatusValidChangeMutation", m)
	}
	return f(ctx, mv)
}

// The SubscriptionTypeFunc type is an adapter to allow the use of ordinary
// function as SubscriptionType mutator.
type SubscriptionTypeFunc func(context.Context, *ent.SubscriptionTypeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f SubscriptionTypeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.SubscriptionTypeMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.SubscriptionTypeMutation", m)
	}
	return f(ctx, mv)
}

// The SupplierPrefOrderFunc type is an adapter to allow the use of ordinary
// function as SupplierPrefOrder mutator.
type SupplierPrefOrderFunc func(context.Context, *ent.SupplierPrefOrderMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f SupplierPrefOrderFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.SupplierPrefOrderMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.SupplierPrefOrderMutation", m)
	}
	return f(ctx, mv)
}

// The VarianceReasonFunc type is an adapter to allow the use of ordinary
// function as VarianceReason mutator.
type VarianceReasonFunc func(context.Context, *ent.VarianceReasonMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f VarianceReasonFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.VarianceReasonMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.VarianceReasonMutation", m)
	}
	return f(ctx, mv)
}

// Condition is a hook condition function.
type Condition func(context.Context, ent.Mutation) bool

// And groups conditions with the AND operator.
func And(first, second Condition, rest ...Condition) Condition {
	return func(ctx context.Context, m ent.Mutation) bool {
		if !first(ctx, m) || !second(ctx, m) {
			return false
		}
		for _, cond := range rest {
			if !cond(ctx, m) {
				return false
			}
		}
		return true
	}
}

// Or groups conditions with the OR operator.
func Or(first, second Condition, rest ...Condition) Condition {
	return func(ctx context.Context, m ent.Mutation) bool {
		if first(ctx, m) || second(ctx, m) {
			return true
		}
		for _, cond := range rest {
			if cond(ctx, m) {
				return true
			}
		}
		return false
	}
}

// Not negates a given condition.
func Not(cond Condition) Condition {
	return func(ctx context.Context, m ent.Mutation) bool {
		return !cond(ctx, m)
	}
}

// HasOp is a condition testing mutation operation.
func HasOp(op ent.Op) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		return m.Op().Is(op)
	}
}

// HasAddedFields is a condition validating `.AddedField` on fields.
func HasAddedFields(field string, fields ...string) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		if _, exists := m.AddedField(field); !exists {
			return false
		}
		for _, field := range fields {
			if _, exists := m.AddedField(field); !exists {
				return false
			}
		}
		return true
	}
}

// HasClearedFields is a condition validating `.FieldCleared` on fields.
func HasClearedFields(field string, fields ...string) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		if exists := m.FieldCleared(field); !exists {
			return false
		}
		for _, field := range fields {
			if exists := m.FieldCleared(field); !exists {
				return false
			}
		}
		return true
	}
}

// HasFields is a condition validating `.Field` on fields.
func HasFields(field string, fields ...string) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		if _, exists := m.Field(field); !exists {
			return false
		}
		for _, field := range fields {
			if _, exists := m.Field(field); !exists {
				return false
			}
		}
		return true
	}
}

// If executes the given hook under condition.
//
//	hook.If(ComputeAverage, And(HasFields(...), HasAddedFields(...)))
//
func If(hk ent.Hook, cond Condition) ent.Hook {
	return func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if cond(ctx, m) {
				return hk(next).Mutate(ctx, m)
			}
			return next.Mutate(ctx, m)
		})
	}
}

// On executes the given hook only for the given operation.
//
//	hook.On(Log, ent.Delete|ent.Create)
//
func On(hk ent.Hook, op ent.Op) ent.Hook {
	return If(hk, HasOp(op))
}

// Unless skips the given hook only for the given operation.
//
//	hook.Unless(Log, ent.Update|ent.UpdateOne)
//
func Unless(hk ent.Hook, op ent.Op) ent.Hook {
	return If(hk, Not(HasOp(op)))
}

// FixedError is a hook returning a fixed error.
func FixedError(err error) ent.Hook {
	return func(ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(context.Context, ent.Mutation) (ent.Value, error) {
			return nil, err
		})
	}
}

// Reject returns a hook that rejects all operations that match op.
//
//	func (T) Hooks() []ent.Hook {
//		return []ent.Hook{
//			Reject(ent.Delete|ent.Update),
//		}
//	}
//
func Reject(op ent.Op) ent.Hook {
	hk := FixedError(fmt.Errorf("%s operation is not allowed", op))
	return On(hk, op)
}

// Chain acts as a list of hooks and is effectively immutable.
// Once created, it will always hold the same set of hooks in the same order.
type Chain struct {
	hooks []ent.Hook
}

// NewChain creates a new chain of hooks.
func NewChain(hooks ...ent.Hook) Chain {
	return Chain{append([]ent.Hook(nil), hooks...)}
}

// Hook chains the list of hooks and returns the final hook.
func (c Chain) Hook() ent.Hook {
	return func(mutator ent.Mutator) ent.Mutator {
		for i := len(c.hooks) - 1; i >= 0; i-- {
			mutator = c.hooks[i](mutator)
		}
		return mutator
	}
}

// Append extends a chain, adding the specified hook
// as the last ones in the mutation flow.
func (c Chain) Append(hooks ...ent.Hook) Chain {
	newHooks := make([]ent.Hook, 0, len(c.hooks)+len(hooks))
	newHooks = append(newHooks, c.hooks...)
	newHooks = append(newHooks, hooks...)
	return Chain{newHooks}
}

// Extend extends a chain, adding the specified chain
// as the last ones in the mutation flow.
func (c Chain) Extend(chain Chain) Chain {
	return c.Append(chain.hooks...)
}
