// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/enumeration"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/inventoryitemdetail"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/orderitemshipgrpinvres"
)

// InventoryItemDetail is the model entity for the InventoryItemDetail schema.
type InventoryItemDetail struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// StringRef holds the value of the "string_ref" field.
	StringRef string `json:"string_ref,omitempty"`
	// InventoryItemDetailSeqID holds the value of the "inventory_item_detail_seq_id" field.
	InventoryItemDetailSeqID int `json:"inventory_item_detail_seq_id,omitempty"`
	// EffectiveDate holds the value of the "effective_date" field.
	EffectiveDate time.Time `json:"effective_date,omitempty"`
	// QuantityOnHandDiff holds the value of the "quantity_on_hand_diff" field.
	QuantityOnHandDiff float64 `json:"quantity_on_hand_diff,omitempty"`
	// AvailableToPromiseDiff holds the value of the "available_to_promise_diff" field.
	AvailableToPromiseDiff float64 `json:"available_to_promise_diff,omitempty"`
	// AccountingQuantityDiff holds the value of the "accounting_quantity_diff" field.
	AccountingQuantityDiff float64 `json:"accounting_quantity_diff,omitempty"`
	// UnitCost holds the value of the "unit_cost" field.
	UnitCost float64 `json:"unit_cost,omitempty"`
	// OrderItemSeqID holds the value of the "order_item_seq_id" field.
	OrderItemSeqID int `json:"order_item_seq_id,omitempty"`
	// ShipGroupSeqID holds the value of the "ship_group_seq_id" field.
	ShipGroupSeqID int `json:"ship_group_seq_id,omitempty"`
	// ShipmentID holds the value of the "shipment_id" field.
	ShipmentID int `json:"shipment_id,omitempty"`
	// ShipmentItemSeqID holds the value of the "shipment_item_seq_id" field.
	ShipmentItemSeqID int `json:"shipment_item_seq_id,omitempty"`
	// ReturnID holds the value of the "return_id" field.
	ReturnID int `json:"return_id,omitempty"`
	// ReturnItemSeqID holds the value of the "return_item_seq_id" field.
	ReturnItemSeqID int `json:"return_item_seq_id,omitempty"`
	// WorkEffortID holds the value of the "work_effort_id" field.
	WorkEffortID int `json:"work_effort_id,omitempty"`
	// FixedAssetID holds the value of the "fixed_asset_id" field.
	FixedAssetID int `json:"fixed_asset_id,omitempty"`
	// MaintHistSeqID holds the value of the "maint_hist_seq_id" field.
	MaintHistSeqID int `json:"maint_hist_seq_id,omitempty"`
	// ItemIssuanceID holds the value of the "item_issuance_id" field.
	ItemIssuanceID int `json:"item_issuance_id,omitempty"`
	// ReceiptID holds the value of the "receipt_id" field.
	ReceiptID int `json:"receipt_id,omitempty"`
	// PhysicalInventoryID holds the value of the "physical_inventory_id" field.
	PhysicalInventoryID int `json:"physical_inventory_id,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the InventoryItemDetailQuery when eager-loading is set.
	Edges                                              InventoryItemDetailEdges `json:"edges"`
	enumeration_reason_inventory_item_details          *int
	order_item_ship_grp_inv_res_inventory_item_details *int
}

// InventoryItemDetailEdges holds the relations/edges for other nodes in the graph.
type InventoryItemDetailEdges struct {
	// OrderItemShipGrpInvRes holds the value of the order_item_ship_grp_inv_res edge.
	OrderItemShipGrpInvRes *OrderItemShipGrpInvRes `json:"order_item_ship_grp_inv_res,omitempty"`
	// ReasonEnumeration holds the value of the reason_enumeration edge.
	ReasonEnumeration *Enumeration `json:"reason_enumeration,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// OrderItemShipGrpInvResOrErr returns the OrderItemShipGrpInvRes value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e InventoryItemDetailEdges) OrderItemShipGrpInvResOrErr() (*OrderItemShipGrpInvRes, error) {
	if e.loadedTypes[0] {
		if e.OrderItemShipGrpInvRes == nil {
			// The edge order_item_ship_grp_inv_res was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: orderitemshipgrpinvres.Label}
		}
		return e.OrderItemShipGrpInvRes, nil
	}
	return nil, &NotLoadedError{edge: "order_item_ship_grp_inv_res"}
}

// ReasonEnumerationOrErr returns the ReasonEnumeration value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e InventoryItemDetailEdges) ReasonEnumerationOrErr() (*Enumeration, error) {
	if e.loadedTypes[1] {
		if e.ReasonEnumeration == nil {
			// The edge reason_enumeration was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: enumeration.Label}
		}
		return e.ReasonEnumeration, nil
	}
	return nil, &NotLoadedError{edge: "reason_enumeration"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*InventoryItemDetail) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case inventoryitemdetail.FieldQuantityOnHandDiff, inventoryitemdetail.FieldAvailableToPromiseDiff, inventoryitemdetail.FieldAccountingQuantityDiff, inventoryitemdetail.FieldUnitCost:
			values[i] = new(sql.NullFloat64)
		case inventoryitemdetail.FieldID, inventoryitemdetail.FieldInventoryItemDetailSeqID, inventoryitemdetail.FieldOrderItemSeqID, inventoryitemdetail.FieldShipGroupSeqID, inventoryitemdetail.FieldShipmentID, inventoryitemdetail.FieldShipmentItemSeqID, inventoryitemdetail.FieldReturnID, inventoryitemdetail.FieldReturnItemSeqID, inventoryitemdetail.FieldWorkEffortID, inventoryitemdetail.FieldFixedAssetID, inventoryitemdetail.FieldMaintHistSeqID, inventoryitemdetail.FieldItemIssuanceID, inventoryitemdetail.FieldReceiptID, inventoryitemdetail.FieldPhysicalInventoryID:
			values[i] = new(sql.NullInt64)
		case inventoryitemdetail.FieldStringRef, inventoryitemdetail.FieldDescription:
			values[i] = new(sql.NullString)
		case inventoryitemdetail.FieldCreateTime, inventoryitemdetail.FieldUpdateTime, inventoryitemdetail.FieldEffectiveDate:
			values[i] = new(sql.NullTime)
		case inventoryitemdetail.ForeignKeys[0]: // enumeration_reason_inventory_item_details
			values[i] = new(sql.NullInt64)
		case inventoryitemdetail.ForeignKeys[1]: // order_item_ship_grp_inv_res_inventory_item_details
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type InventoryItemDetail", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the InventoryItemDetail fields.
func (iid *InventoryItemDetail) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case inventoryitemdetail.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			iid.ID = int(value.Int64)
		case inventoryitemdetail.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				iid.CreateTime = value.Time
			}
		case inventoryitemdetail.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				iid.UpdateTime = value.Time
			}
		case inventoryitemdetail.FieldStringRef:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field string_ref", values[i])
			} else if value.Valid {
				iid.StringRef = value.String
			}
		case inventoryitemdetail.FieldInventoryItemDetailSeqID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field inventory_item_detail_seq_id", values[i])
			} else if value.Valid {
				iid.InventoryItemDetailSeqID = int(value.Int64)
			}
		case inventoryitemdetail.FieldEffectiveDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field effective_date", values[i])
			} else if value.Valid {
				iid.EffectiveDate = value.Time
			}
		case inventoryitemdetail.FieldQuantityOnHandDiff:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field quantity_on_hand_diff", values[i])
			} else if value.Valid {
				iid.QuantityOnHandDiff = value.Float64
			}
		case inventoryitemdetail.FieldAvailableToPromiseDiff:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field available_to_promise_diff", values[i])
			} else if value.Valid {
				iid.AvailableToPromiseDiff = value.Float64
			}
		case inventoryitemdetail.FieldAccountingQuantityDiff:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field accounting_quantity_diff", values[i])
			} else if value.Valid {
				iid.AccountingQuantityDiff = value.Float64
			}
		case inventoryitemdetail.FieldUnitCost:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field unit_cost", values[i])
			} else if value.Valid {
				iid.UnitCost = value.Float64
			}
		case inventoryitemdetail.FieldOrderItemSeqID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order_item_seq_id", values[i])
			} else if value.Valid {
				iid.OrderItemSeqID = int(value.Int64)
			}
		case inventoryitemdetail.FieldShipGroupSeqID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ship_group_seq_id", values[i])
			} else if value.Valid {
				iid.ShipGroupSeqID = int(value.Int64)
			}
		case inventoryitemdetail.FieldShipmentID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field shipment_id", values[i])
			} else if value.Valid {
				iid.ShipmentID = int(value.Int64)
			}
		case inventoryitemdetail.FieldShipmentItemSeqID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field shipment_item_seq_id", values[i])
			} else if value.Valid {
				iid.ShipmentItemSeqID = int(value.Int64)
			}
		case inventoryitemdetail.FieldReturnID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field return_id", values[i])
			} else if value.Valid {
				iid.ReturnID = int(value.Int64)
			}
		case inventoryitemdetail.FieldReturnItemSeqID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field return_item_seq_id", values[i])
			} else if value.Valid {
				iid.ReturnItemSeqID = int(value.Int64)
			}
		case inventoryitemdetail.FieldWorkEffortID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field work_effort_id", values[i])
			} else if value.Valid {
				iid.WorkEffortID = int(value.Int64)
			}
		case inventoryitemdetail.FieldFixedAssetID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field fixed_asset_id", values[i])
			} else if value.Valid {
				iid.FixedAssetID = int(value.Int64)
			}
		case inventoryitemdetail.FieldMaintHistSeqID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field maint_hist_seq_id", values[i])
			} else if value.Valid {
				iid.MaintHistSeqID = int(value.Int64)
			}
		case inventoryitemdetail.FieldItemIssuanceID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field item_issuance_id", values[i])
			} else if value.Valid {
				iid.ItemIssuanceID = int(value.Int64)
			}
		case inventoryitemdetail.FieldReceiptID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field receipt_id", values[i])
			} else if value.Valid {
				iid.ReceiptID = int(value.Int64)
			}
		case inventoryitemdetail.FieldPhysicalInventoryID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field physical_inventory_id", values[i])
			} else if value.Valid {
				iid.PhysicalInventoryID = int(value.Int64)
			}
		case inventoryitemdetail.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				iid.Description = value.String
			}
		case inventoryitemdetail.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field enumeration_reason_inventory_item_details", value)
			} else if value.Valid {
				iid.enumeration_reason_inventory_item_details = new(int)
				*iid.enumeration_reason_inventory_item_details = int(value.Int64)
			}
		case inventoryitemdetail.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field order_item_ship_grp_inv_res_inventory_item_details", value)
			} else if value.Valid {
				iid.order_item_ship_grp_inv_res_inventory_item_details = new(int)
				*iid.order_item_ship_grp_inv_res_inventory_item_details = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryOrderItemShipGrpInvRes queries the "order_item_ship_grp_inv_res" edge of the InventoryItemDetail entity.
func (iid *InventoryItemDetail) QueryOrderItemShipGrpInvRes() *OrderItemShipGrpInvResQuery {
	return (&InventoryItemDetailClient{config: iid.config}).QueryOrderItemShipGrpInvRes(iid)
}

// QueryReasonEnumeration queries the "reason_enumeration" edge of the InventoryItemDetail entity.
func (iid *InventoryItemDetail) QueryReasonEnumeration() *EnumerationQuery {
	return (&InventoryItemDetailClient{config: iid.config}).QueryReasonEnumeration(iid)
}

// Update returns a builder for updating this InventoryItemDetail.
// Note that you need to call InventoryItemDetail.Unwrap() before calling this method if this InventoryItemDetail
// was returned from a transaction, and the transaction was committed or rolled back.
func (iid *InventoryItemDetail) Update() *InventoryItemDetailUpdateOne {
	return (&InventoryItemDetailClient{config: iid.config}).UpdateOne(iid)
}

// Unwrap unwraps the InventoryItemDetail entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (iid *InventoryItemDetail) Unwrap() *InventoryItemDetail {
	tx, ok := iid.config.driver.(*txDriver)
	if !ok {
		panic("ent: InventoryItemDetail is not a transactional entity")
	}
	iid.config.driver = tx.drv
	return iid
}

// String implements the fmt.Stringer.
func (iid *InventoryItemDetail) String() string {
	var builder strings.Builder
	builder.WriteString("InventoryItemDetail(")
	builder.WriteString(fmt.Sprintf("id=%v", iid.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(iid.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(iid.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", string_ref=")
	builder.WriteString(iid.StringRef)
	builder.WriteString(", inventory_item_detail_seq_id=")
	builder.WriteString(fmt.Sprintf("%v", iid.InventoryItemDetailSeqID))
	builder.WriteString(", effective_date=")
	builder.WriteString(iid.EffectiveDate.Format(time.ANSIC))
	builder.WriteString(", quantity_on_hand_diff=")
	builder.WriteString(fmt.Sprintf("%v", iid.QuantityOnHandDiff))
	builder.WriteString(", available_to_promise_diff=")
	builder.WriteString(fmt.Sprintf("%v", iid.AvailableToPromiseDiff))
	builder.WriteString(", accounting_quantity_diff=")
	builder.WriteString(fmt.Sprintf("%v", iid.AccountingQuantityDiff))
	builder.WriteString(", unit_cost=")
	builder.WriteString(fmt.Sprintf("%v", iid.UnitCost))
	builder.WriteString(", order_item_seq_id=")
	builder.WriteString(fmt.Sprintf("%v", iid.OrderItemSeqID))
	builder.WriteString(", ship_group_seq_id=")
	builder.WriteString(fmt.Sprintf("%v", iid.ShipGroupSeqID))
	builder.WriteString(", shipment_id=")
	builder.WriteString(fmt.Sprintf("%v", iid.ShipmentID))
	builder.WriteString(", shipment_item_seq_id=")
	builder.WriteString(fmt.Sprintf("%v", iid.ShipmentItemSeqID))
	builder.WriteString(", return_id=")
	builder.WriteString(fmt.Sprintf("%v", iid.ReturnID))
	builder.WriteString(", return_item_seq_id=")
	builder.WriteString(fmt.Sprintf("%v", iid.ReturnItemSeqID))
	builder.WriteString(", work_effort_id=")
	builder.WriteString(fmt.Sprintf("%v", iid.WorkEffortID))
	builder.WriteString(", fixed_asset_id=")
	builder.WriteString(fmt.Sprintf("%v", iid.FixedAssetID))
	builder.WriteString(", maint_hist_seq_id=")
	builder.WriteString(fmt.Sprintf("%v", iid.MaintHistSeqID))
	builder.WriteString(", item_issuance_id=")
	builder.WriteString(fmt.Sprintf("%v", iid.ItemIssuanceID))
	builder.WriteString(", receipt_id=")
	builder.WriteString(fmt.Sprintf("%v", iid.ReceiptID))
	builder.WriteString(", physical_inventory_id=")
	builder.WriteString(fmt.Sprintf("%v", iid.PhysicalInventoryID))
	builder.WriteString(", description=")
	builder.WriteString(iid.Description)
	builder.WriteByte(')')
	return builder.String()
}

// InventoryItemDetails is a parsable slice of InventoryItemDetail.
type InventoryItemDetails []*InventoryItemDetail

func (iid InventoryItemDetails) config(cfg config) {
	for _i := range iid {
		iid[_i].config = cfg
	}
}
