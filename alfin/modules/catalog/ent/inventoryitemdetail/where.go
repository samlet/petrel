// Code generated by entc, DO NOT EDIT.

package inventoryitemdetail

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// StringRef applies equality check predicate on the "string_ref" field. It's identical to StringRefEQ.
func StringRef(v string) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStringRef), v))
	})
}

// InventoryItemID applies equality check predicate on the "inventory_item_id" field. It's identical to InventoryItemIDEQ.
func InventoryItemID(v int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInventoryItemID), v))
	})
}

// InventoryItemDetailSeqID applies equality check predicate on the "inventory_item_detail_seq_id" field. It's identical to InventoryItemDetailSeqIDEQ.
func InventoryItemDetailSeqID(v int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInventoryItemDetailSeqID), v))
	})
}

// EffectiveDate applies equality check predicate on the "effective_date" field. It's identical to EffectiveDateEQ.
func EffectiveDate(v time.Time) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEffectiveDate), v))
	})
}

// QuantityOnHandDiff applies equality check predicate on the "quantity_on_hand_diff" field. It's identical to QuantityOnHandDiffEQ.
func QuantityOnHandDiff(v float64) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQuantityOnHandDiff), v))
	})
}

// AvailableToPromiseDiff applies equality check predicate on the "available_to_promise_diff" field. It's identical to AvailableToPromiseDiffEQ.
func AvailableToPromiseDiff(v float64) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAvailableToPromiseDiff), v))
	})
}

// AccountingQuantityDiff applies equality check predicate on the "accounting_quantity_diff" field. It's identical to AccountingQuantityDiffEQ.
func AccountingQuantityDiff(v float64) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccountingQuantityDiff), v))
	})
}

// UnitCost applies equality check predicate on the "unit_cost" field. It's identical to UnitCostEQ.
func UnitCost(v float64) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUnitCost), v))
	})
}

// OrderItemSeqID applies equality check predicate on the "order_item_seq_id" field. It's identical to OrderItemSeqIDEQ.
func OrderItemSeqID(v int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderItemSeqID), v))
	})
}

// ShipGroupSeqID applies equality check predicate on the "ship_group_seq_id" field. It's identical to ShipGroupSeqIDEQ.
func ShipGroupSeqID(v int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShipGroupSeqID), v))
	})
}

// ShipmentID applies equality check predicate on the "shipment_id" field. It's identical to ShipmentIDEQ.
func ShipmentID(v int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShipmentID), v))
	})
}

// ShipmentItemSeqID applies equality check predicate on the "shipment_item_seq_id" field. It's identical to ShipmentItemSeqIDEQ.
func ShipmentItemSeqID(v int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShipmentItemSeqID), v))
	})
}

// ReturnID applies equality check predicate on the "return_id" field. It's identical to ReturnIDEQ.
func ReturnID(v int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReturnID), v))
	})
}

// ReturnItemSeqID applies equality check predicate on the "return_item_seq_id" field. It's identical to ReturnItemSeqIDEQ.
func ReturnItemSeqID(v int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReturnItemSeqID), v))
	})
}

// WorkEffortID applies equality check predicate on the "work_effort_id" field. It's identical to WorkEffortIDEQ.
func WorkEffortID(v int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWorkEffortID), v))
	})
}

// FixedAssetID applies equality check predicate on the "fixed_asset_id" field. It's identical to FixedAssetIDEQ.
func FixedAssetID(v int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFixedAssetID), v))
	})
}

// MaintHistSeqID applies equality check predicate on the "maint_hist_seq_id" field. It's identical to MaintHistSeqIDEQ.
func MaintHistSeqID(v int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMaintHistSeqID), v))
	})
}

// ItemIssuanceID applies equality check predicate on the "item_issuance_id" field. It's identical to ItemIssuanceIDEQ.
func ItemIssuanceID(v int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldItemIssuanceID), v))
	})
}

// ReceiptID applies equality check predicate on the "receipt_id" field. It's identical to ReceiptIDEQ.
func ReceiptID(v int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReceiptID), v))
	})
}

// PhysicalInventoryID applies equality check predicate on the "physical_inventory_id" field. It's identical to PhysicalInventoryIDEQ.
func PhysicalInventoryID(v int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPhysicalInventoryID), v))
	})
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.InventoryItemDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.InventoryItemDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), v))
	})
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.InventoryItemDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.InventoryItemDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateTime), v))
	})
}

// StringRefEQ applies the EQ predicate on the "string_ref" field.
func StringRefEQ(v string) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStringRef), v))
	})
}

// StringRefNEQ applies the NEQ predicate on the "string_ref" field.
func StringRefNEQ(v string) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStringRef), v))
	})
}

// StringRefIn applies the In predicate on the "string_ref" field.
func StringRefIn(vs ...string) predicate.InventoryItemDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStringRef), v...))
	})
}

// StringRefNotIn applies the NotIn predicate on the "string_ref" field.
func StringRefNotIn(vs ...string) predicate.InventoryItemDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStringRef), v...))
	})
}

// StringRefGT applies the GT predicate on the "string_ref" field.
func StringRefGT(v string) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStringRef), v))
	})
}

// StringRefGTE applies the GTE predicate on the "string_ref" field.
func StringRefGTE(v string) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStringRef), v))
	})
}

// StringRefLT applies the LT predicate on the "string_ref" field.
func StringRefLT(v string) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStringRef), v))
	})
}

// StringRefLTE applies the LTE predicate on the "string_ref" field.
func StringRefLTE(v string) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStringRef), v))
	})
}

// StringRefContains applies the Contains predicate on the "string_ref" field.
func StringRefContains(v string) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStringRef), v))
	})
}

// StringRefHasPrefix applies the HasPrefix predicate on the "string_ref" field.
func StringRefHasPrefix(v string) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStringRef), v))
	})
}

// StringRefHasSuffix applies the HasSuffix predicate on the "string_ref" field.
func StringRefHasSuffix(v string) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStringRef), v))
	})
}

// StringRefIsNil applies the IsNil predicate on the "string_ref" field.
func StringRefIsNil() predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStringRef)))
	})
}

// StringRefNotNil applies the NotNil predicate on the "string_ref" field.
func StringRefNotNil() predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStringRef)))
	})
}

// StringRefEqualFold applies the EqualFold predicate on the "string_ref" field.
func StringRefEqualFold(v string) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStringRef), v))
	})
}

// StringRefContainsFold applies the ContainsFold predicate on the "string_ref" field.
func StringRefContainsFold(v string) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStringRef), v))
	})
}

// InventoryItemIDEQ applies the EQ predicate on the "inventory_item_id" field.
func InventoryItemIDEQ(v int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInventoryItemID), v))
	})
}

// InventoryItemIDNEQ applies the NEQ predicate on the "inventory_item_id" field.
func InventoryItemIDNEQ(v int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldInventoryItemID), v))
	})
}

// InventoryItemIDIn applies the In predicate on the "inventory_item_id" field.
func InventoryItemIDIn(vs ...int) predicate.InventoryItemDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldInventoryItemID), v...))
	})
}

// InventoryItemIDNotIn applies the NotIn predicate on the "inventory_item_id" field.
func InventoryItemIDNotIn(vs ...int) predicate.InventoryItemDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldInventoryItemID), v...))
	})
}

// InventoryItemIDGT applies the GT predicate on the "inventory_item_id" field.
func InventoryItemIDGT(v int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldInventoryItemID), v))
	})
}

// InventoryItemIDGTE applies the GTE predicate on the "inventory_item_id" field.
func InventoryItemIDGTE(v int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldInventoryItemID), v))
	})
}

// InventoryItemIDLT applies the LT predicate on the "inventory_item_id" field.
func InventoryItemIDLT(v int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldInventoryItemID), v))
	})
}

// InventoryItemIDLTE applies the LTE predicate on the "inventory_item_id" field.
func InventoryItemIDLTE(v int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldInventoryItemID), v))
	})
}

// InventoryItemDetailSeqIDEQ applies the EQ predicate on the "inventory_item_detail_seq_id" field.
func InventoryItemDetailSeqIDEQ(v int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInventoryItemDetailSeqID), v))
	})
}

// InventoryItemDetailSeqIDNEQ applies the NEQ predicate on the "inventory_item_detail_seq_id" field.
func InventoryItemDetailSeqIDNEQ(v int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldInventoryItemDetailSeqID), v))
	})
}

// InventoryItemDetailSeqIDIn applies the In predicate on the "inventory_item_detail_seq_id" field.
func InventoryItemDetailSeqIDIn(vs ...int) predicate.InventoryItemDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldInventoryItemDetailSeqID), v...))
	})
}

// InventoryItemDetailSeqIDNotIn applies the NotIn predicate on the "inventory_item_detail_seq_id" field.
func InventoryItemDetailSeqIDNotIn(vs ...int) predicate.InventoryItemDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldInventoryItemDetailSeqID), v...))
	})
}

// InventoryItemDetailSeqIDGT applies the GT predicate on the "inventory_item_detail_seq_id" field.
func InventoryItemDetailSeqIDGT(v int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldInventoryItemDetailSeqID), v))
	})
}

// InventoryItemDetailSeqIDGTE applies the GTE predicate on the "inventory_item_detail_seq_id" field.
func InventoryItemDetailSeqIDGTE(v int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldInventoryItemDetailSeqID), v))
	})
}

// InventoryItemDetailSeqIDLT applies the LT predicate on the "inventory_item_detail_seq_id" field.
func InventoryItemDetailSeqIDLT(v int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldInventoryItemDetailSeqID), v))
	})
}

// InventoryItemDetailSeqIDLTE applies the LTE predicate on the "inventory_item_detail_seq_id" field.
func InventoryItemDetailSeqIDLTE(v int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldInventoryItemDetailSeqID), v))
	})
}

// EffectiveDateEQ applies the EQ predicate on the "effective_date" field.
func EffectiveDateEQ(v time.Time) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEffectiveDate), v))
	})
}

// EffectiveDateNEQ applies the NEQ predicate on the "effective_date" field.
func EffectiveDateNEQ(v time.Time) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEffectiveDate), v))
	})
}

// EffectiveDateIn applies the In predicate on the "effective_date" field.
func EffectiveDateIn(vs ...time.Time) predicate.InventoryItemDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEffectiveDate), v...))
	})
}

// EffectiveDateNotIn applies the NotIn predicate on the "effective_date" field.
func EffectiveDateNotIn(vs ...time.Time) predicate.InventoryItemDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEffectiveDate), v...))
	})
}

// EffectiveDateGT applies the GT predicate on the "effective_date" field.
func EffectiveDateGT(v time.Time) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEffectiveDate), v))
	})
}

// EffectiveDateGTE applies the GTE predicate on the "effective_date" field.
func EffectiveDateGTE(v time.Time) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEffectiveDate), v))
	})
}

// EffectiveDateLT applies the LT predicate on the "effective_date" field.
func EffectiveDateLT(v time.Time) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEffectiveDate), v))
	})
}

// EffectiveDateLTE applies the LTE predicate on the "effective_date" field.
func EffectiveDateLTE(v time.Time) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEffectiveDate), v))
	})
}

// EffectiveDateIsNil applies the IsNil predicate on the "effective_date" field.
func EffectiveDateIsNil() predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldEffectiveDate)))
	})
}

// EffectiveDateNotNil applies the NotNil predicate on the "effective_date" field.
func EffectiveDateNotNil() predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldEffectiveDate)))
	})
}

// QuantityOnHandDiffEQ applies the EQ predicate on the "quantity_on_hand_diff" field.
func QuantityOnHandDiffEQ(v float64) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQuantityOnHandDiff), v))
	})
}

// QuantityOnHandDiffNEQ applies the NEQ predicate on the "quantity_on_hand_diff" field.
func QuantityOnHandDiffNEQ(v float64) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldQuantityOnHandDiff), v))
	})
}

// QuantityOnHandDiffIn applies the In predicate on the "quantity_on_hand_diff" field.
func QuantityOnHandDiffIn(vs ...float64) predicate.InventoryItemDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldQuantityOnHandDiff), v...))
	})
}

// QuantityOnHandDiffNotIn applies the NotIn predicate on the "quantity_on_hand_diff" field.
func QuantityOnHandDiffNotIn(vs ...float64) predicate.InventoryItemDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldQuantityOnHandDiff), v...))
	})
}

// QuantityOnHandDiffGT applies the GT predicate on the "quantity_on_hand_diff" field.
func QuantityOnHandDiffGT(v float64) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldQuantityOnHandDiff), v))
	})
}

// QuantityOnHandDiffGTE applies the GTE predicate on the "quantity_on_hand_diff" field.
func QuantityOnHandDiffGTE(v float64) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldQuantityOnHandDiff), v))
	})
}

// QuantityOnHandDiffLT applies the LT predicate on the "quantity_on_hand_diff" field.
func QuantityOnHandDiffLT(v float64) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldQuantityOnHandDiff), v))
	})
}

// QuantityOnHandDiffLTE applies the LTE predicate on the "quantity_on_hand_diff" field.
func QuantityOnHandDiffLTE(v float64) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldQuantityOnHandDiff), v))
	})
}

// QuantityOnHandDiffIsNil applies the IsNil predicate on the "quantity_on_hand_diff" field.
func QuantityOnHandDiffIsNil() predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldQuantityOnHandDiff)))
	})
}

// QuantityOnHandDiffNotNil applies the NotNil predicate on the "quantity_on_hand_diff" field.
func QuantityOnHandDiffNotNil() predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldQuantityOnHandDiff)))
	})
}

// AvailableToPromiseDiffEQ applies the EQ predicate on the "available_to_promise_diff" field.
func AvailableToPromiseDiffEQ(v float64) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAvailableToPromiseDiff), v))
	})
}

// AvailableToPromiseDiffNEQ applies the NEQ predicate on the "available_to_promise_diff" field.
func AvailableToPromiseDiffNEQ(v float64) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAvailableToPromiseDiff), v))
	})
}

// AvailableToPromiseDiffIn applies the In predicate on the "available_to_promise_diff" field.
func AvailableToPromiseDiffIn(vs ...float64) predicate.InventoryItemDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAvailableToPromiseDiff), v...))
	})
}

// AvailableToPromiseDiffNotIn applies the NotIn predicate on the "available_to_promise_diff" field.
func AvailableToPromiseDiffNotIn(vs ...float64) predicate.InventoryItemDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAvailableToPromiseDiff), v...))
	})
}

// AvailableToPromiseDiffGT applies the GT predicate on the "available_to_promise_diff" field.
func AvailableToPromiseDiffGT(v float64) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAvailableToPromiseDiff), v))
	})
}

// AvailableToPromiseDiffGTE applies the GTE predicate on the "available_to_promise_diff" field.
func AvailableToPromiseDiffGTE(v float64) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAvailableToPromiseDiff), v))
	})
}

// AvailableToPromiseDiffLT applies the LT predicate on the "available_to_promise_diff" field.
func AvailableToPromiseDiffLT(v float64) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAvailableToPromiseDiff), v))
	})
}

// AvailableToPromiseDiffLTE applies the LTE predicate on the "available_to_promise_diff" field.
func AvailableToPromiseDiffLTE(v float64) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAvailableToPromiseDiff), v))
	})
}

// AvailableToPromiseDiffIsNil applies the IsNil predicate on the "available_to_promise_diff" field.
func AvailableToPromiseDiffIsNil() predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAvailableToPromiseDiff)))
	})
}

// AvailableToPromiseDiffNotNil applies the NotNil predicate on the "available_to_promise_diff" field.
func AvailableToPromiseDiffNotNil() predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAvailableToPromiseDiff)))
	})
}

// AccountingQuantityDiffEQ applies the EQ predicate on the "accounting_quantity_diff" field.
func AccountingQuantityDiffEQ(v float64) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccountingQuantityDiff), v))
	})
}

// AccountingQuantityDiffNEQ applies the NEQ predicate on the "accounting_quantity_diff" field.
func AccountingQuantityDiffNEQ(v float64) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAccountingQuantityDiff), v))
	})
}

// AccountingQuantityDiffIn applies the In predicate on the "accounting_quantity_diff" field.
func AccountingQuantityDiffIn(vs ...float64) predicate.InventoryItemDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAccountingQuantityDiff), v...))
	})
}

// AccountingQuantityDiffNotIn applies the NotIn predicate on the "accounting_quantity_diff" field.
func AccountingQuantityDiffNotIn(vs ...float64) predicate.InventoryItemDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAccountingQuantityDiff), v...))
	})
}

// AccountingQuantityDiffGT applies the GT predicate on the "accounting_quantity_diff" field.
func AccountingQuantityDiffGT(v float64) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAccountingQuantityDiff), v))
	})
}

// AccountingQuantityDiffGTE applies the GTE predicate on the "accounting_quantity_diff" field.
func AccountingQuantityDiffGTE(v float64) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAccountingQuantityDiff), v))
	})
}

// AccountingQuantityDiffLT applies the LT predicate on the "accounting_quantity_diff" field.
func AccountingQuantityDiffLT(v float64) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAccountingQuantityDiff), v))
	})
}

// AccountingQuantityDiffLTE applies the LTE predicate on the "accounting_quantity_diff" field.
func AccountingQuantityDiffLTE(v float64) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAccountingQuantityDiff), v))
	})
}

// AccountingQuantityDiffIsNil applies the IsNil predicate on the "accounting_quantity_diff" field.
func AccountingQuantityDiffIsNil() predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAccountingQuantityDiff)))
	})
}

// AccountingQuantityDiffNotNil applies the NotNil predicate on the "accounting_quantity_diff" field.
func AccountingQuantityDiffNotNil() predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAccountingQuantityDiff)))
	})
}

// UnitCostEQ applies the EQ predicate on the "unit_cost" field.
func UnitCostEQ(v float64) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUnitCost), v))
	})
}

// UnitCostNEQ applies the NEQ predicate on the "unit_cost" field.
func UnitCostNEQ(v float64) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUnitCost), v))
	})
}

// UnitCostIn applies the In predicate on the "unit_cost" field.
func UnitCostIn(vs ...float64) predicate.InventoryItemDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUnitCost), v...))
	})
}

// UnitCostNotIn applies the NotIn predicate on the "unit_cost" field.
func UnitCostNotIn(vs ...float64) predicate.InventoryItemDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUnitCost), v...))
	})
}

// UnitCostGT applies the GT predicate on the "unit_cost" field.
func UnitCostGT(v float64) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUnitCost), v))
	})
}

// UnitCostGTE applies the GTE predicate on the "unit_cost" field.
func UnitCostGTE(v float64) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUnitCost), v))
	})
}

// UnitCostLT applies the LT predicate on the "unit_cost" field.
func UnitCostLT(v float64) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUnitCost), v))
	})
}

// UnitCostLTE applies the LTE predicate on the "unit_cost" field.
func UnitCostLTE(v float64) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUnitCost), v))
	})
}

// UnitCostIsNil applies the IsNil predicate on the "unit_cost" field.
func UnitCostIsNil() predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUnitCost)))
	})
}

// UnitCostNotNil applies the NotNil predicate on the "unit_cost" field.
func UnitCostNotNil() predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUnitCost)))
	})
}

// OrderItemSeqIDEQ applies the EQ predicate on the "order_item_seq_id" field.
func OrderItemSeqIDEQ(v int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderItemSeqID), v))
	})
}

// OrderItemSeqIDNEQ applies the NEQ predicate on the "order_item_seq_id" field.
func OrderItemSeqIDNEQ(v int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOrderItemSeqID), v))
	})
}

// OrderItemSeqIDIn applies the In predicate on the "order_item_seq_id" field.
func OrderItemSeqIDIn(vs ...int) predicate.InventoryItemDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOrderItemSeqID), v...))
	})
}

// OrderItemSeqIDNotIn applies the NotIn predicate on the "order_item_seq_id" field.
func OrderItemSeqIDNotIn(vs ...int) predicate.InventoryItemDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOrderItemSeqID), v...))
	})
}

// OrderItemSeqIDGT applies the GT predicate on the "order_item_seq_id" field.
func OrderItemSeqIDGT(v int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOrderItemSeqID), v))
	})
}

// OrderItemSeqIDGTE applies the GTE predicate on the "order_item_seq_id" field.
func OrderItemSeqIDGTE(v int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOrderItemSeqID), v))
	})
}

// OrderItemSeqIDLT applies the LT predicate on the "order_item_seq_id" field.
func OrderItemSeqIDLT(v int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOrderItemSeqID), v))
	})
}

// OrderItemSeqIDLTE applies the LTE predicate on the "order_item_seq_id" field.
func OrderItemSeqIDLTE(v int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOrderItemSeqID), v))
	})
}

// OrderItemSeqIDIsNil applies the IsNil predicate on the "order_item_seq_id" field.
func OrderItemSeqIDIsNil() predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOrderItemSeqID)))
	})
}

// OrderItemSeqIDNotNil applies the NotNil predicate on the "order_item_seq_id" field.
func OrderItemSeqIDNotNil() predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOrderItemSeqID)))
	})
}

// ShipGroupSeqIDEQ applies the EQ predicate on the "ship_group_seq_id" field.
func ShipGroupSeqIDEQ(v int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShipGroupSeqID), v))
	})
}

// ShipGroupSeqIDNEQ applies the NEQ predicate on the "ship_group_seq_id" field.
func ShipGroupSeqIDNEQ(v int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShipGroupSeqID), v))
	})
}

// ShipGroupSeqIDIn applies the In predicate on the "ship_group_seq_id" field.
func ShipGroupSeqIDIn(vs ...int) predicate.InventoryItemDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldShipGroupSeqID), v...))
	})
}

// ShipGroupSeqIDNotIn applies the NotIn predicate on the "ship_group_seq_id" field.
func ShipGroupSeqIDNotIn(vs ...int) predicate.InventoryItemDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldShipGroupSeqID), v...))
	})
}

// ShipGroupSeqIDGT applies the GT predicate on the "ship_group_seq_id" field.
func ShipGroupSeqIDGT(v int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShipGroupSeqID), v))
	})
}

// ShipGroupSeqIDGTE applies the GTE predicate on the "ship_group_seq_id" field.
func ShipGroupSeqIDGTE(v int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShipGroupSeqID), v))
	})
}

// ShipGroupSeqIDLT applies the LT predicate on the "ship_group_seq_id" field.
func ShipGroupSeqIDLT(v int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShipGroupSeqID), v))
	})
}

// ShipGroupSeqIDLTE applies the LTE predicate on the "ship_group_seq_id" field.
func ShipGroupSeqIDLTE(v int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShipGroupSeqID), v))
	})
}

// ShipGroupSeqIDIsNil applies the IsNil predicate on the "ship_group_seq_id" field.
func ShipGroupSeqIDIsNil() predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldShipGroupSeqID)))
	})
}

// ShipGroupSeqIDNotNil applies the NotNil predicate on the "ship_group_seq_id" field.
func ShipGroupSeqIDNotNil() predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldShipGroupSeqID)))
	})
}

// ShipmentIDEQ applies the EQ predicate on the "shipment_id" field.
func ShipmentIDEQ(v int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShipmentID), v))
	})
}

// ShipmentIDNEQ applies the NEQ predicate on the "shipment_id" field.
func ShipmentIDNEQ(v int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShipmentID), v))
	})
}

// ShipmentIDIn applies the In predicate on the "shipment_id" field.
func ShipmentIDIn(vs ...int) predicate.InventoryItemDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldShipmentID), v...))
	})
}

// ShipmentIDNotIn applies the NotIn predicate on the "shipment_id" field.
func ShipmentIDNotIn(vs ...int) predicate.InventoryItemDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldShipmentID), v...))
	})
}

// ShipmentIDGT applies the GT predicate on the "shipment_id" field.
func ShipmentIDGT(v int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShipmentID), v))
	})
}

// ShipmentIDGTE applies the GTE predicate on the "shipment_id" field.
func ShipmentIDGTE(v int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShipmentID), v))
	})
}

// ShipmentIDLT applies the LT predicate on the "shipment_id" field.
func ShipmentIDLT(v int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShipmentID), v))
	})
}

// ShipmentIDLTE applies the LTE predicate on the "shipment_id" field.
func ShipmentIDLTE(v int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShipmentID), v))
	})
}

// ShipmentIDIsNil applies the IsNil predicate on the "shipment_id" field.
func ShipmentIDIsNil() predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldShipmentID)))
	})
}

// ShipmentIDNotNil applies the NotNil predicate on the "shipment_id" field.
func ShipmentIDNotNil() predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldShipmentID)))
	})
}

// ShipmentItemSeqIDEQ applies the EQ predicate on the "shipment_item_seq_id" field.
func ShipmentItemSeqIDEQ(v int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShipmentItemSeqID), v))
	})
}

// ShipmentItemSeqIDNEQ applies the NEQ predicate on the "shipment_item_seq_id" field.
func ShipmentItemSeqIDNEQ(v int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShipmentItemSeqID), v))
	})
}

// ShipmentItemSeqIDIn applies the In predicate on the "shipment_item_seq_id" field.
func ShipmentItemSeqIDIn(vs ...int) predicate.InventoryItemDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldShipmentItemSeqID), v...))
	})
}

// ShipmentItemSeqIDNotIn applies the NotIn predicate on the "shipment_item_seq_id" field.
func ShipmentItemSeqIDNotIn(vs ...int) predicate.InventoryItemDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldShipmentItemSeqID), v...))
	})
}

// ShipmentItemSeqIDGT applies the GT predicate on the "shipment_item_seq_id" field.
func ShipmentItemSeqIDGT(v int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShipmentItemSeqID), v))
	})
}

// ShipmentItemSeqIDGTE applies the GTE predicate on the "shipment_item_seq_id" field.
func ShipmentItemSeqIDGTE(v int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShipmentItemSeqID), v))
	})
}

// ShipmentItemSeqIDLT applies the LT predicate on the "shipment_item_seq_id" field.
func ShipmentItemSeqIDLT(v int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShipmentItemSeqID), v))
	})
}

// ShipmentItemSeqIDLTE applies the LTE predicate on the "shipment_item_seq_id" field.
func ShipmentItemSeqIDLTE(v int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShipmentItemSeqID), v))
	})
}

// ShipmentItemSeqIDIsNil applies the IsNil predicate on the "shipment_item_seq_id" field.
func ShipmentItemSeqIDIsNil() predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldShipmentItemSeqID)))
	})
}

// ShipmentItemSeqIDNotNil applies the NotNil predicate on the "shipment_item_seq_id" field.
func ShipmentItemSeqIDNotNil() predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldShipmentItemSeqID)))
	})
}

// ReturnIDEQ applies the EQ predicate on the "return_id" field.
func ReturnIDEQ(v int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReturnID), v))
	})
}

// ReturnIDNEQ applies the NEQ predicate on the "return_id" field.
func ReturnIDNEQ(v int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReturnID), v))
	})
}

// ReturnIDIn applies the In predicate on the "return_id" field.
func ReturnIDIn(vs ...int) predicate.InventoryItemDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldReturnID), v...))
	})
}

// ReturnIDNotIn applies the NotIn predicate on the "return_id" field.
func ReturnIDNotIn(vs ...int) predicate.InventoryItemDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldReturnID), v...))
	})
}

// ReturnIDGT applies the GT predicate on the "return_id" field.
func ReturnIDGT(v int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldReturnID), v))
	})
}

// ReturnIDGTE applies the GTE predicate on the "return_id" field.
func ReturnIDGTE(v int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldReturnID), v))
	})
}

// ReturnIDLT applies the LT predicate on the "return_id" field.
func ReturnIDLT(v int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldReturnID), v))
	})
}

// ReturnIDLTE applies the LTE predicate on the "return_id" field.
func ReturnIDLTE(v int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldReturnID), v))
	})
}

// ReturnIDIsNil applies the IsNil predicate on the "return_id" field.
func ReturnIDIsNil() predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldReturnID)))
	})
}

// ReturnIDNotNil applies the NotNil predicate on the "return_id" field.
func ReturnIDNotNil() predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldReturnID)))
	})
}

// ReturnItemSeqIDEQ applies the EQ predicate on the "return_item_seq_id" field.
func ReturnItemSeqIDEQ(v int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReturnItemSeqID), v))
	})
}

// ReturnItemSeqIDNEQ applies the NEQ predicate on the "return_item_seq_id" field.
func ReturnItemSeqIDNEQ(v int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReturnItemSeqID), v))
	})
}

// ReturnItemSeqIDIn applies the In predicate on the "return_item_seq_id" field.
func ReturnItemSeqIDIn(vs ...int) predicate.InventoryItemDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldReturnItemSeqID), v...))
	})
}

// ReturnItemSeqIDNotIn applies the NotIn predicate on the "return_item_seq_id" field.
func ReturnItemSeqIDNotIn(vs ...int) predicate.InventoryItemDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldReturnItemSeqID), v...))
	})
}

// ReturnItemSeqIDGT applies the GT predicate on the "return_item_seq_id" field.
func ReturnItemSeqIDGT(v int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldReturnItemSeqID), v))
	})
}

// ReturnItemSeqIDGTE applies the GTE predicate on the "return_item_seq_id" field.
func ReturnItemSeqIDGTE(v int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldReturnItemSeqID), v))
	})
}

// ReturnItemSeqIDLT applies the LT predicate on the "return_item_seq_id" field.
func ReturnItemSeqIDLT(v int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldReturnItemSeqID), v))
	})
}

// ReturnItemSeqIDLTE applies the LTE predicate on the "return_item_seq_id" field.
func ReturnItemSeqIDLTE(v int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldReturnItemSeqID), v))
	})
}

// ReturnItemSeqIDIsNil applies the IsNil predicate on the "return_item_seq_id" field.
func ReturnItemSeqIDIsNil() predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldReturnItemSeqID)))
	})
}

// ReturnItemSeqIDNotNil applies the NotNil predicate on the "return_item_seq_id" field.
func ReturnItemSeqIDNotNil() predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldReturnItemSeqID)))
	})
}

// WorkEffortIDEQ applies the EQ predicate on the "work_effort_id" field.
func WorkEffortIDEQ(v int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWorkEffortID), v))
	})
}

// WorkEffortIDNEQ applies the NEQ predicate on the "work_effort_id" field.
func WorkEffortIDNEQ(v int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWorkEffortID), v))
	})
}

// WorkEffortIDIn applies the In predicate on the "work_effort_id" field.
func WorkEffortIDIn(vs ...int) predicate.InventoryItemDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldWorkEffortID), v...))
	})
}

// WorkEffortIDNotIn applies the NotIn predicate on the "work_effort_id" field.
func WorkEffortIDNotIn(vs ...int) predicate.InventoryItemDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldWorkEffortID), v...))
	})
}

// WorkEffortIDGT applies the GT predicate on the "work_effort_id" field.
func WorkEffortIDGT(v int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWorkEffortID), v))
	})
}

// WorkEffortIDGTE applies the GTE predicate on the "work_effort_id" field.
func WorkEffortIDGTE(v int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWorkEffortID), v))
	})
}

// WorkEffortIDLT applies the LT predicate on the "work_effort_id" field.
func WorkEffortIDLT(v int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWorkEffortID), v))
	})
}

// WorkEffortIDLTE applies the LTE predicate on the "work_effort_id" field.
func WorkEffortIDLTE(v int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWorkEffortID), v))
	})
}

// WorkEffortIDIsNil applies the IsNil predicate on the "work_effort_id" field.
func WorkEffortIDIsNil() predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldWorkEffortID)))
	})
}

// WorkEffortIDNotNil applies the NotNil predicate on the "work_effort_id" field.
func WorkEffortIDNotNil() predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldWorkEffortID)))
	})
}

// FixedAssetIDEQ applies the EQ predicate on the "fixed_asset_id" field.
func FixedAssetIDEQ(v int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFixedAssetID), v))
	})
}

// FixedAssetIDNEQ applies the NEQ predicate on the "fixed_asset_id" field.
func FixedAssetIDNEQ(v int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFixedAssetID), v))
	})
}

// FixedAssetIDIn applies the In predicate on the "fixed_asset_id" field.
func FixedAssetIDIn(vs ...int) predicate.InventoryItemDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFixedAssetID), v...))
	})
}

// FixedAssetIDNotIn applies the NotIn predicate on the "fixed_asset_id" field.
func FixedAssetIDNotIn(vs ...int) predicate.InventoryItemDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFixedAssetID), v...))
	})
}

// FixedAssetIDGT applies the GT predicate on the "fixed_asset_id" field.
func FixedAssetIDGT(v int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFixedAssetID), v))
	})
}

// FixedAssetIDGTE applies the GTE predicate on the "fixed_asset_id" field.
func FixedAssetIDGTE(v int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFixedAssetID), v))
	})
}

// FixedAssetIDLT applies the LT predicate on the "fixed_asset_id" field.
func FixedAssetIDLT(v int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFixedAssetID), v))
	})
}

// FixedAssetIDLTE applies the LTE predicate on the "fixed_asset_id" field.
func FixedAssetIDLTE(v int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFixedAssetID), v))
	})
}

// FixedAssetIDIsNil applies the IsNil predicate on the "fixed_asset_id" field.
func FixedAssetIDIsNil() predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFixedAssetID)))
	})
}

// FixedAssetIDNotNil applies the NotNil predicate on the "fixed_asset_id" field.
func FixedAssetIDNotNil() predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFixedAssetID)))
	})
}

// MaintHistSeqIDEQ applies the EQ predicate on the "maint_hist_seq_id" field.
func MaintHistSeqIDEQ(v int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMaintHistSeqID), v))
	})
}

// MaintHistSeqIDNEQ applies the NEQ predicate on the "maint_hist_seq_id" field.
func MaintHistSeqIDNEQ(v int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMaintHistSeqID), v))
	})
}

// MaintHistSeqIDIn applies the In predicate on the "maint_hist_seq_id" field.
func MaintHistSeqIDIn(vs ...int) predicate.InventoryItemDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMaintHistSeqID), v...))
	})
}

// MaintHistSeqIDNotIn applies the NotIn predicate on the "maint_hist_seq_id" field.
func MaintHistSeqIDNotIn(vs ...int) predicate.InventoryItemDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMaintHistSeqID), v...))
	})
}

// MaintHistSeqIDGT applies the GT predicate on the "maint_hist_seq_id" field.
func MaintHistSeqIDGT(v int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMaintHistSeqID), v))
	})
}

// MaintHistSeqIDGTE applies the GTE predicate on the "maint_hist_seq_id" field.
func MaintHistSeqIDGTE(v int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMaintHistSeqID), v))
	})
}

// MaintHistSeqIDLT applies the LT predicate on the "maint_hist_seq_id" field.
func MaintHistSeqIDLT(v int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMaintHistSeqID), v))
	})
}

// MaintHistSeqIDLTE applies the LTE predicate on the "maint_hist_seq_id" field.
func MaintHistSeqIDLTE(v int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMaintHistSeqID), v))
	})
}

// MaintHistSeqIDIsNil applies the IsNil predicate on the "maint_hist_seq_id" field.
func MaintHistSeqIDIsNil() predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMaintHistSeqID)))
	})
}

// MaintHistSeqIDNotNil applies the NotNil predicate on the "maint_hist_seq_id" field.
func MaintHistSeqIDNotNil() predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMaintHistSeqID)))
	})
}

// ItemIssuanceIDEQ applies the EQ predicate on the "item_issuance_id" field.
func ItemIssuanceIDEQ(v int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldItemIssuanceID), v))
	})
}

// ItemIssuanceIDNEQ applies the NEQ predicate on the "item_issuance_id" field.
func ItemIssuanceIDNEQ(v int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldItemIssuanceID), v))
	})
}

// ItemIssuanceIDIn applies the In predicate on the "item_issuance_id" field.
func ItemIssuanceIDIn(vs ...int) predicate.InventoryItemDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldItemIssuanceID), v...))
	})
}

// ItemIssuanceIDNotIn applies the NotIn predicate on the "item_issuance_id" field.
func ItemIssuanceIDNotIn(vs ...int) predicate.InventoryItemDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldItemIssuanceID), v...))
	})
}

// ItemIssuanceIDGT applies the GT predicate on the "item_issuance_id" field.
func ItemIssuanceIDGT(v int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldItemIssuanceID), v))
	})
}

// ItemIssuanceIDGTE applies the GTE predicate on the "item_issuance_id" field.
func ItemIssuanceIDGTE(v int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldItemIssuanceID), v))
	})
}

// ItemIssuanceIDLT applies the LT predicate on the "item_issuance_id" field.
func ItemIssuanceIDLT(v int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldItemIssuanceID), v))
	})
}

// ItemIssuanceIDLTE applies the LTE predicate on the "item_issuance_id" field.
func ItemIssuanceIDLTE(v int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldItemIssuanceID), v))
	})
}

// ItemIssuanceIDIsNil applies the IsNil predicate on the "item_issuance_id" field.
func ItemIssuanceIDIsNil() predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldItemIssuanceID)))
	})
}

// ItemIssuanceIDNotNil applies the NotNil predicate on the "item_issuance_id" field.
func ItemIssuanceIDNotNil() predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldItemIssuanceID)))
	})
}

// ReceiptIDEQ applies the EQ predicate on the "receipt_id" field.
func ReceiptIDEQ(v int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReceiptID), v))
	})
}

// ReceiptIDNEQ applies the NEQ predicate on the "receipt_id" field.
func ReceiptIDNEQ(v int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReceiptID), v))
	})
}

// ReceiptIDIn applies the In predicate on the "receipt_id" field.
func ReceiptIDIn(vs ...int) predicate.InventoryItemDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldReceiptID), v...))
	})
}

// ReceiptIDNotIn applies the NotIn predicate on the "receipt_id" field.
func ReceiptIDNotIn(vs ...int) predicate.InventoryItemDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldReceiptID), v...))
	})
}

// ReceiptIDGT applies the GT predicate on the "receipt_id" field.
func ReceiptIDGT(v int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldReceiptID), v))
	})
}

// ReceiptIDGTE applies the GTE predicate on the "receipt_id" field.
func ReceiptIDGTE(v int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldReceiptID), v))
	})
}

// ReceiptIDLT applies the LT predicate on the "receipt_id" field.
func ReceiptIDLT(v int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldReceiptID), v))
	})
}

// ReceiptIDLTE applies the LTE predicate on the "receipt_id" field.
func ReceiptIDLTE(v int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldReceiptID), v))
	})
}

// ReceiptIDIsNil applies the IsNil predicate on the "receipt_id" field.
func ReceiptIDIsNil() predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldReceiptID)))
	})
}

// ReceiptIDNotNil applies the NotNil predicate on the "receipt_id" field.
func ReceiptIDNotNil() predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldReceiptID)))
	})
}

// PhysicalInventoryIDEQ applies the EQ predicate on the "physical_inventory_id" field.
func PhysicalInventoryIDEQ(v int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPhysicalInventoryID), v))
	})
}

// PhysicalInventoryIDNEQ applies the NEQ predicate on the "physical_inventory_id" field.
func PhysicalInventoryIDNEQ(v int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPhysicalInventoryID), v))
	})
}

// PhysicalInventoryIDIn applies the In predicate on the "physical_inventory_id" field.
func PhysicalInventoryIDIn(vs ...int) predicate.InventoryItemDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPhysicalInventoryID), v...))
	})
}

// PhysicalInventoryIDNotIn applies the NotIn predicate on the "physical_inventory_id" field.
func PhysicalInventoryIDNotIn(vs ...int) predicate.InventoryItemDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPhysicalInventoryID), v...))
	})
}

// PhysicalInventoryIDGT applies the GT predicate on the "physical_inventory_id" field.
func PhysicalInventoryIDGT(v int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPhysicalInventoryID), v))
	})
}

// PhysicalInventoryIDGTE applies the GTE predicate on the "physical_inventory_id" field.
func PhysicalInventoryIDGTE(v int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPhysicalInventoryID), v))
	})
}

// PhysicalInventoryIDLT applies the LT predicate on the "physical_inventory_id" field.
func PhysicalInventoryIDLT(v int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPhysicalInventoryID), v))
	})
}

// PhysicalInventoryIDLTE applies the LTE predicate on the "physical_inventory_id" field.
func PhysicalInventoryIDLTE(v int) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPhysicalInventoryID), v))
	})
}

// PhysicalInventoryIDIsNil applies the IsNil predicate on the "physical_inventory_id" field.
func PhysicalInventoryIDIsNil() predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPhysicalInventoryID)))
	})
}

// PhysicalInventoryIDNotNil applies the NotNil predicate on the "physical_inventory_id" field.
func PhysicalInventoryIDNotNil() predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPhysicalInventoryID)))
	})
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDescription), v))
	})
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.InventoryItemDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDescription), v...))
	})
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.InventoryItemDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDescription), v...))
	})
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDescription), v))
	})
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDescription), v))
	})
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDescription), v))
	})
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDescription), v))
	})
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDescription), v))
	})
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDescription), v))
	})
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDescription), v))
	})
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDescription)))
	})
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDescription)))
	})
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDescription), v))
	})
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDescription), v))
	})
}

// HasOrderItemShipGrpInvRes applies the HasEdge predicate on the "order_item_ship_grp_inv_res" edge.
func HasOrderItemShipGrpInvRes() predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderItemShipGrpInvResTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OrderItemShipGrpInvResTable, OrderItemShipGrpInvResColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderItemShipGrpInvResWith applies the HasEdge predicate on the "order_item_ship_grp_inv_res" edge with a given conditions (other predicates).
func HasOrderItemShipGrpInvResWith(preds ...predicate.OrderItemShipGrpInvRes) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderItemShipGrpInvResInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OrderItemShipGrpInvResTable, OrderItemShipGrpInvResColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasReasonEnumeration applies the HasEdge predicate on the "reason_enumeration" edge.
func HasReasonEnumeration() predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ReasonEnumerationTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ReasonEnumerationTable, ReasonEnumerationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReasonEnumerationWith applies the HasEdge predicate on the "reason_enumeration" edge with a given conditions (other predicates).
func HasReasonEnumerationWith(preds ...predicate.Enumeration) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ReasonEnumerationInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ReasonEnumerationTable, ReasonEnumerationColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.InventoryItemDetail) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.InventoryItemDetail) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.InventoryItemDetail) predicate.InventoryItemDetail {
	return predicate.InventoryItemDetail(func(s *sql.Selector) {
		p(s.Not())
	})
}
