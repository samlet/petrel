// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/enumeration"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/inventoryitemdetail"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/orderitemshipgrpinvres"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/predicate"
)

// InventoryItemDetailUpdate is the builder for updating InventoryItemDetail entities.
type InventoryItemDetailUpdate struct {
	config
	hooks    []Hook
	mutation *InventoryItemDetailMutation
}

// Where adds a new predicate for the InventoryItemDetailUpdate builder.
func (iidu *InventoryItemDetailUpdate) Where(ps ...predicate.InventoryItemDetail) *InventoryItemDetailUpdate {
	iidu.mutation.predicates = append(iidu.mutation.predicates, ps...)
	return iidu
}

// SetStringRef sets the "string_ref" field.
func (iidu *InventoryItemDetailUpdate) SetStringRef(s string) *InventoryItemDetailUpdate {
	iidu.mutation.SetStringRef(s)
	return iidu
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (iidu *InventoryItemDetailUpdate) SetNillableStringRef(s *string) *InventoryItemDetailUpdate {
	if s != nil {
		iidu.SetStringRef(*s)
	}
	return iidu
}

// ClearStringRef clears the value of the "string_ref" field.
func (iidu *InventoryItemDetailUpdate) ClearStringRef() *InventoryItemDetailUpdate {
	iidu.mutation.ClearStringRef()
	return iidu
}

// SetInventoryItemDetailSeqID sets the "inventory_item_detail_seq_id" field.
func (iidu *InventoryItemDetailUpdate) SetInventoryItemDetailSeqID(i int) *InventoryItemDetailUpdate {
	iidu.mutation.ResetInventoryItemDetailSeqID()
	iidu.mutation.SetInventoryItemDetailSeqID(i)
	return iidu
}

// AddInventoryItemDetailSeqID adds i to the "inventory_item_detail_seq_id" field.
func (iidu *InventoryItemDetailUpdate) AddInventoryItemDetailSeqID(i int) *InventoryItemDetailUpdate {
	iidu.mutation.AddInventoryItemDetailSeqID(i)
	return iidu
}

// SetEffectiveDate sets the "effective_date" field.
func (iidu *InventoryItemDetailUpdate) SetEffectiveDate(t time.Time) *InventoryItemDetailUpdate {
	iidu.mutation.SetEffectiveDate(t)
	return iidu
}

// SetNillableEffectiveDate sets the "effective_date" field if the given value is not nil.
func (iidu *InventoryItemDetailUpdate) SetNillableEffectiveDate(t *time.Time) *InventoryItemDetailUpdate {
	if t != nil {
		iidu.SetEffectiveDate(*t)
	}
	return iidu
}

// ClearEffectiveDate clears the value of the "effective_date" field.
func (iidu *InventoryItemDetailUpdate) ClearEffectiveDate() *InventoryItemDetailUpdate {
	iidu.mutation.ClearEffectiveDate()
	return iidu
}

// SetQuantityOnHandDiff sets the "quantity_on_hand_diff" field.
func (iidu *InventoryItemDetailUpdate) SetQuantityOnHandDiff(f float64) *InventoryItemDetailUpdate {
	iidu.mutation.ResetQuantityOnHandDiff()
	iidu.mutation.SetQuantityOnHandDiff(f)
	return iidu
}

// SetNillableQuantityOnHandDiff sets the "quantity_on_hand_diff" field if the given value is not nil.
func (iidu *InventoryItemDetailUpdate) SetNillableQuantityOnHandDiff(f *float64) *InventoryItemDetailUpdate {
	if f != nil {
		iidu.SetQuantityOnHandDiff(*f)
	}
	return iidu
}

// AddQuantityOnHandDiff adds f to the "quantity_on_hand_diff" field.
func (iidu *InventoryItemDetailUpdate) AddQuantityOnHandDiff(f float64) *InventoryItemDetailUpdate {
	iidu.mutation.AddQuantityOnHandDiff(f)
	return iidu
}

// ClearQuantityOnHandDiff clears the value of the "quantity_on_hand_diff" field.
func (iidu *InventoryItemDetailUpdate) ClearQuantityOnHandDiff() *InventoryItemDetailUpdate {
	iidu.mutation.ClearQuantityOnHandDiff()
	return iidu
}

// SetAvailableToPromiseDiff sets the "available_to_promise_diff" field.
func (iidu *InventoryItemDetailUpdate) SetAvailableToPromiseDiff(f float64) *InventoryItemDetailUpdate {
	iidu.mutation.ResetAvailableToPromiseDiff()
	iidu.mutation.SetAvailableToPromiseDiff(f)
	return iidu
}

// SetNillableAvailableToPromiseDiff sets the "available_to_promise_diff" field if the given value is not nil.
func (iidu *InventoryItemDetailUpdate) SetNillableAvailableToPromiseDiff(f *float64) *InventoryItemDetailUpdate {
	if f != nil {
		iidu.SetAvailableToPromiseDiff(*f)
	}
	return iidu
}

// AddAvailableToPromiseDiff adds f to the "available_to_promise_diff" field.
func (iidu *InventoryItemDetailUpdate) AddAvailableToPromiseDiff(f float64) *InventoryItemDetailUpdate {
	iidu.mutation.AddAvailableToPromiseDiff(f)
	return iidu
}

// ClearAvailableToPromiseDiff clears the value of the "available_to_promise_diff" field.
func (iidu *InventoryItemDetailUpdate) ClearAvailableToPromiseDiff() *InventoryItemDetailUpdate {
	iidu.mutation.ClearAvailableToPromiseDiff()
	return iidu
}

// SetAccountingQuantityDiff sets the "accounting_quantity_diff" field.
func (iidu *InventoryItemDetailUpdate) SetAccountingQuantityDiff(f float64) *InventoryItemDetailUpdate {
	iidu.mutation.ResetAccountingQuantityDiff()
	iidu.mutation.SetAccountingQuantityDiff(f)
	return iidu
}

// SetNillableAccountingQuantityDiff sets the "accounting_quantity_diff" field if the given value is not nil.
func (iidu *InventoryItemDetailUpdate) SetNillableAccountingQuantityDiff(f *float64) *InventoryItemDetailUpdate {
	if f != nil {
		iidu.SetAccountingQuantityDiff(*f)
	}
	return iidu
}

// AddAccountingQuantityDiff adds f to the "accounting_quantity_diff" field.
func (iidu *InventoryItemDetailUpdate) AddAccountingQuantityDiff(f float64) *InventoryItemDetailUpdate {
	iidu.mutation.AddAccountingQuantityDiff(f)
	return iidu
}

// ClearAccountingQuantityDiff clears the value of the "accounting_quantity_diff" field.
func (iidu *InventoryItemDetailUpdate) ClearAccountingQuantityDiff() *InventoryItemDetailUpdate {
	iidu.mutation.ClearAccountingQuantityDiff()
	return iidu
}

// SetUnitCost sets the "unit_cost" field.
func (iidu *InventoryItemDetailUpdate) SetUnitCost(f float64) *InventoryItemDetailUpdate {
	iidu.mutation.ResetUnitCost()
	iidu.mutation.SetUnitCost(f)
	return iidu
}

// SetNillableUnitCost sets the "unit_cost" field if the given value is not nil.
func (iidu *InventoryItemDetailUpdate) SetNillableUnitCost(f *float64) *InventoryItemDetailUpdate {
	if f != nil {
		iidu.SetUnitCost(*f)
	}
	return iidu
}

// AddUnitCost adds f to the "unit_cost" field.
func (iidu *InventoryItemDetailUpdate) AddUnitCost(f float64) *InventoryItemDetailUpdate {
	iidu.mutation.AddUnitCost(f)
	return iidu
}

// ClearUnitCost clears the value of the "unit_cost" field.
func (iidu *InventoryItemDetailUpdate) ClearUnitCost() *InventoryItemDetailUpdate {
	iidu.mutation.ClearUnitCost()
	return iidu
}

// SetOrderItemSeqID sets the "order_item_seq_id" field.
func (iidu *InventoryItemDetailUpdate) SetOrderItemSeqID(i int) *InventoryItemDetailUpdate {
	iidu.mutation.ResetOrderItemSeqID()
	iidu.mutation.SetOrderItemSeqID(i)
	return iidu
}

// SetNillableOrderItemSeqID sets the "order_item_seq_id" field if the given value is not nil.
func (iidu *InventoryItemDetailUpdate) SetNillableOrderItemSeqID(i *int) *InventoryItemDetailUpdate {
	if i != nil {
		iidu.SetOrderItemSeqID(*i)
	}
	return iidu
}

// AddOrderItemSeqID adds i to the "order_item_seq_id" field.
func (iidu *InventoryItemDetailUpdate) AddOrderItemSeqID(i int) *InventoryItemDetailUpdate {
	iidu.mutation.AddOrderItemSeqID(i)
	return iidu
}

// ClearOrderItemSeqID clears the value of the "order_item_seq_id" field.
func (iidu *InventoryItemDetailUpdate) ClearOrderItemSeqID() *InventoryItemDetailUpdate {
	iidu.mutation.ClearOrderItemSeqID()
	return iidu
}

// SetShipGroupSeqID sets the "ship_group_seq_id" field.
func (iidu *InventoryItemDetailUpdate) SetShipGroupSeqID(i int) *InventoryItemDetailUpdate {
	iidu.mutation.ResetShipGroupSeqID()
	iidu.mutation.SetShipGroupSeqID(i)
	return iidu
}

// SetNillableShipGroupSeqID sets the "ship_group_seq_id" field if the given value is not nil.
func (iidu *InventoryItemDetailUpdate) SetNillableShipGroupSeqID(i *int) *InventoryItemDetailUpdate {
	if i != nil {
		iidu.SetShipGroupSeqID(*i)
	}
	return iidu
}

// AddShipGroupSeqID adds i to the "ship_group_seq_id" field.
func (iidu *InventoryItemDetailUpdate) AddShipGroupSeqID(i int) *InventoryItemDetailUpdate {
	iidu.mutation.AddShipGroupSeqID(i)
	return iidu
}

// ClearShipGroupSeqID clears the value of the "ship_group_seq_id" field.
func (iidu *InventoryItemDetailUpdate) ClearShipGroupSeqID() *InventoryItemDetailUpdate {
	iidu.mutation.ClearShipGroupSeqID()
	return iidu
}

// SetShipmentID sets the "shipment_id" field.
func (iidu *InventoryItemDetailUpdate) SetShipmentID(i int) *InventoryItemDetailUpdate {
	iidu.mutation.ResetShipmentID()
	iidu.mutation.SetShipmentID(i)
	return iidu
}

// SetNillableShipmentID sets the "shipment_id" field if the given value is not nil.
func (iidu *InventoryItemDetailUpdate) SetNillableShipmentID(i *int) *InventoryItemDetailUpdate {
	if i != nil {
		iidu.SetShipmentID(*i)
	}
	return iidu
}

// AddShipmentID adds i to the "shipment_id" field.
func (iidu *InventoryItemDetailUpdate) AddShipmentID(i int) *InventoryItemDetailUpdate {
	iidu.mutation.AddShipmentID(i)
	return iidu
}

// ClearShipmentID clears the value of the "shipment_id" field.
func (iidu *InventoryItemDetailUpdate) ClearShipmentID() *InventoryItemDetailUpdate {
	iidu.mutation.ClearShipmentID()
	return iidu
}

// SetShipmentItemSeqID sets the "shipment_item_seq_id" field.
func (iidu *InventoryItemDetailUpdate) SetShipmentItemSeqID(i int) *InventoryItemDetailUpdate {
	iidu.mutation.ResetShipmentItemSeqID()
	iidu.mutation.SetShipmentItemSeqID(i)
	return iidu
}

// SetNillableShipmentItemSeqID sets the "shipment_item_seq_id" field if the given value is not nil.
func (iidu *InventoryItemDetailUpdate) SetNillableShipmentItemSeqID(i *int) *InventoryItemDetailUpdate {
	if i != nil {
		iidu.SetShipmentItemSeqID(*i)
	}
	return iidu
}

// AddShipmentItemSeqID adds i to the "shipment_item_seq_id" field.
func (iidu *InventoryItemDetailUpdate) AddShipmentItemSeqID(i int) *InventoryItemDetailUpdate {
	iidu.mutation.AddShipmentItemSeqID(i)
	return iidu
}

// ClearShipmentItemSeqID clears the value of the "shipment_item_seq_id" field.
func (iidu *InventoryItemDetailUpdate) ClearShipmentItemSeqID() *InventoryItemDetailUpdate {
	iidu.mutation.ClearShipmentItemSeqID()
	return iidu
}

// SetReturnID sets the "return_id" field.
func (iidu *InventoryItemDetailUpdate) SetReturnID(i int) *InventoryItemDetailUpdate {
	iidu.mutation.ResetReturnID()
	iidu.mutation.SetReturnID(i)
	return iidu
}

// SetNillableReturnID sets the "return_id" field if the given value is not nil.
func (iidu *InventoryItemDetailUpdate) SetNillableReturnID(i *int) *InventoryItemDetailUpdate {
	if i != nil {
		iidu.SetReturnID(*i)
	}
	return iidu
}

// AddReturnID adds i to the "return_id" field.
func (iidu *InventoryItemDetailUpdate) AddReturnID(i int) *InventoryItemDetailUpdate {
	iidu.mutation.AddReturnID(i)
	return iidu
}

// ClearReturnID clears the value of the "return_id" field.
func (iidu *InventoryItemDetailUpdate) ClearReturnID() *InventoryItemDetailUpdate {
	iidu.mutation.ClearReturnID()
	return iidu
}

// SetReturnItemSeqID sets the "return_item_seq_id" field.
func (iidu *InventoryItemDetailUpdate) SetReturnItemSeqID(i int) *InventoryItemDetailUpdate {
	iidu.mutation.ResetReturnItemSeqID()
	iidu.mutation.SetReturnItemSeqID(i)
	return iidu
}

// SetNillableReturnItemSeqID sets the "return_item_seq_id" field if the given value is not nil.
func (iidu *InventoryItemDetailUpdate) SetNillableReturnItemSeqID(i *int) *InventoryItemDetailUpdate {
	if i != nil {
		iidu.SetReturnItemSeqID(*i)
	}
	return iidu
}

// AddReturnItemSeqID adds i to the "return_item_seq_id" field.
func (iidu *InventoryItemDetailUpdate) AddReturnItemSeqID(i int) *InventoryItemDetailUpdate {
	iidu.mutation.AddReturnItemSeqID(i)
	return iidu
}

// ClearReturnItemSeqID clears the value of the "return_item_seq_id" field.
func (iidu *InventoryItemDetailUpdate) ClearReturnItemSeqID() *InventoryItemDetailUpdate {
	iidu.mutation.ClearReturnItemSeqID()
	return iidu
}

// SetWorkEffortID sets the "work_effort_id" field.
func (iidu *InventoryItemDetailUpdate) SetWorkEffortID(i int) *InventoryItemDetailUpdate {
	iidu.mutation.ResetWorkEffortID()
	iidu.mutation.SetWorkEffortID(i)
	return iidu
}

// SetNillableWorkEffortID sets the "work_effort_id" field if the given value is not nil.
func (iidu *InventoryItemDetailUpdate) SetNillableWorkEffortID(i *int) *InventoryItemDetailUpdate {
	if i != nil {
		iidu.SetWorkEffortID(*i)
	}
	return iidu
}

// AddWorkEffortID adds i to the "work_effort_id" field.
func (iidu *InventoryItemDetailUpdate) AddWorkEffortID(i int) *InventoryItemDetailUpdate {
	iidu.mutation.AddWorkEffortID(i)
	return iidu
}

// ClearWorkEffortID clears the value of the "work_effort_id" field.
func (iidu *InventoryItemDetailUpdate) ClearWorkEffortID() *InventoryItemDetailUpdate {
	iidu.mutation.ClearWorkEffortID()
	return iidu
}

// SetFixedAssetID sets the "fixed_asset_id" field.
func (iidu *InventoryItemDetailUpdate) SetFixedAssetID(i int) *InventoryItemDetailUpdate {
	iidu.mutation.ResetFixedAssetID()
	iidu.mutation.SetFixedAssetID(i)
	return iidu
}

// SetNillableFixedAssetID sets the "fixed_asset_id" field if the given value is not nil.
func (iidu *InventoryItemDetailUpdate) SetNillableFixedAssetID(i *int) *InventoryItemDetailUpdate {
	if i != nil {
		iidu.SetFixedAssetID(*i)
	}
	return iidu
}

// AddFixedAssetID adds i to the "fixed_asset_id" field.
func (iidu *InventoryItemDetailUpdate) AddFixedAssetID(i int) *InventoryItemDetailUpdate {
	iidu.mutation.AddFixedAssetID(i)
	return iidu
}

// ClearFixedAssetID clears the value of the "fixed_asset_id" field.
func (iidu *InventoryItemDetailUpdate) ClearFixedAssetID() *InventoryItemDetailUpdate {
	iidu.mutation.ClearFixedAssetID()
	return iidu
}

// SetMaintHistSeqID sets the "maint_hist_seq_id" field.
func (iidu *InventoryItemDetailUpdate) SetMaintHistSeqID(i int) *InventoryItemDetailUpdate {
	iidu.mutation.ResetMaintHistSeqID()
	iidu.mutation.SetMaintHistSeqID(i)
	return iidu
}

// SetNillableMaintHistSeqID sets the "maint_hist_seq_id" field if the given value is not nil.
func (iidu *InventoryItemDetailUpdate) SetNillableMaintHistSeqID(i *int) *InventoryItemDetailUpdate {
	if i != nil {
		iidu.SetMaintHistSeqID(*i)
	}
	return iidu
}

// AddMaintHistSeqID adds i to the "maint_hist_seq_id" field.
func (iidu *InventoryItemDetailUpdate) AddMaintHistSeqID(i int) *InventoryItemDetailUpdate {
	iidu.mutation.AddMaintHistSeqID(i)
	return iidu
}

// ClearMaintHistSeqID clears the value of the "maint_hist_seq_id" field.
func (iidu *InventoryItemDetailUpdate) ClearMaintHistSeqID() *InventoryItemDetailUpdate {
	iidu.mutation.ClearMaintHistSeqID()
	return iidu
}

// SetItemIssuanceID sets the "item_issuance_id" field.
func (iidu *InventoryItemDetailUpdate) SetItemIssuanceID(i int) *InventoryItemDetailUpdate {
	iidu.mutation.ResetItemIssuanceID()
	iidu.mutation.SetItemIssuanceID(i)
	return iidu
}

// SetNillableItemIssuanceID sets the "item_issuance_id" field if the given value is not nil.
func (iidu *InventoryItemDetailUpdate) SetNillableItemIssuanceID(i *int) *InventoryItemDetailUpdate {
	if i != nil {
		iidu.SetItemIssuanceID(*i)
	}
	return iidu
}

// AddItemIssuanceID adds i to the "item_issuance_id" field.
func (iidu *InventoryItemDetailUpdate) AddItemIssuanceID(i int) *InventoryItemDetailUpdate {
	iidu.mutation.AddItemIssuanceID(i)
	return iidu
}

// ClearItemIssuanceID clears the value of the "item_issuance_id" field.
func (iidu *InventoryItemDetailUpdate) ClearItemIssuanceID() *InventoryItemDetailUpdate {
	iidu.mutation.ClearItemIssuanceID()
	return iidu
}

// SetReceiptID sets the "receipt_id" field.
func (iidu *InventoryItemDetailUpdate) SetReceiptID(i int) *InventoryItemDetailUpdate {
	iidu.mutation.ResetReceiptID()
	iidu.mutation.SetReceiptID(i)
	return iidu
}

// SetNillableReceiptID sets the "receipt_id" field if the given value is not nil.
func (iidu *InventoryItemDetailUpdate) SetNillableReceiptID(i *int) *InventoryItemDetailUpdate {
	if i != nil {
		iidu.SetReceiptID(*i)
	}
	return iidu
}

// AddReceiptID adds i to the "receipt_id" field.
func (iidu *InventoryItemDetailUpdate) AddReceiptID(i int) *InventoryItemDetailUpdate {
	iidu.mutation.AddReceiptID(i)
	return iidu
}

// ClearReceiptID clears the value of the "receipt_id" field.
func (iidu *InventoryItemDetailUpdate) ClearReceiptID() *InventoryItemDetailUpdate {
	iidu.mutation.ClearReceiptID()
	return iidu
}

// SetPhysicalInventoryID sets the "physical_inventory_id" field.
func (iidu *InventoryItemDetailUpdate) SetPhysicalInventoryID(i int) *InventoryItemDetailUpdate {
	iidu.mutation.ResetPhysicalInventoryID()
	iidu.mutation.SetPhysicalInventoryID(i)
	return iidu
}

// SetNillablePhysicalInventoryID sets the "physical_inventory_id" field if the given value is not nil.
func (iidu *InventoryItemDetailUpdate) SetNillablePhysicalInventoryID(i *int) *InventoryItemDetailUpdate {
	if i != nil {
		iidu.SetPhysicalInventoryID(*i)
	}
	return iidu
}

// AddPhysicalInventoryID adds i to the "physical_inventory_id" field.
func (iidu *InventoryItemDetailUpdate) AddPhysicalInventoryID(i int) *InventoryItemDetailUpdate {
	iidu.mutation.AddPhysicalInventoryID(i)
	return iidu
}

// ClearPhysicalInventoryID clears the value of the "physical_inventory_id" field.
func (iidu *InventoryItemDetailUpdate) ClearPhysicalInventoryID() *InventoryItemDetailUpdate {
	iidu.mutation.ClearPhysicalInventoryID()
	return iidu
}

// SetDescription sets the "description" field.
func (iidu *InventoryItemDetailUpdate) SetDescription(s string) *InventoryItemDetailUpdate {
	iidu.mutation.SetDescription(s)
	return iidu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (iidu *InventoryItemDetailUpdate) SetNillableDescription(s *string) *InventoryItemDetailUpdate {
	if s != nil {
		iidu.SetDescription(*s)
	}
	return iidu
}

// ClearDescription clears the value of the "description" field.
func (iidu *InventoryItemDetailUpdate) ClearDescription() *InventoryItemDetailUpdate {
	iidu.mutation.ClearDescription()
	return iidu
}

// SetOrderItemShipGrpInvResID sets the "order_item_ship_grp_inv_res" edge to the OrderItemShipGrpInvRes entity by ID.
func (iidu *InventoryItemDetailUpdate) SetOrderItemShipGrpInvResID(id int) *InventoryItemDetailUpdate {
	iidu.mutation.SetOrderItemShipGrpInvResID(id)
	return iidu
}

// SetNillableOrderItemShipGrpInvResID sets the "order_item_ship_grp_inv_res" edge to the OrderItemShipGrpInvRes entity by ID if the given value is not nil.
func (iidu *InventoryItemDetailUpdate) SetNillableOrderItemShipGrpInvResID(id *int) *InventoryItemDetailUpdate {
	if id != nil {
		iidu = iidu.SetOrderItemShipGrpInvResID(*id)
	}
	return iidu
}

// SetOrderItemShipGrpInvRes sets the "order_item_ship_grp_inv_res" edge to the OrderItemShipGrpInvRes entity.
func (iidu *InventoryItemDetailUpdate) SetOrderItemShipGrpInvRes(o *OrderItemShipGrpInvRes) *InventoryItemDetailUpdate {
	return iidu.SetOrderItemShipGrpInvResID(o.ID)
}

// SetReasonEnumerationID sets the "reason_enumeration" edge to the Enumeration entity by ID.
func (iidu *InventoryItemDetailUpdate) SetReasonEnumerationID(id int) *InventoryItemDetailUpdate {
	iidu.mutation.SetReasonEnumerationID(id)
	return iidu
}

// SetNillableReasonEnumerationID sets the "reason_enumeration" edge to the Enumeration entity by ID if the given value is not nil.
func (iidu *InventoryItemDetailUpdate) SetNillableReasonEnumerationID(id *int) *InventoryItemDetailUpdate {
	if id != nil {
		iidu = iidu.SetReasonEnumerationID(*id)
	}
	return iidu
}

// SetReasonEnumeration sets the "reason_enumeration" edge to the Enumeration entity.
func (iidu *InventoryItemDetailUpdate) SetReasonEnumeration(e *Enumeration) *InventoryItemDetailUpdate {
	return iidu.SetReasonEnumerationID(e.ID)
}

// Mutation returns the InventoryItemDetailMutation object of the builder.
func (iidu *InventoryItemDetailUpdate) Mutation() *InventoryItemDetailMutation {
	return iidu.mutation
}

// ClearOrderItemShipGrpInvRes clears the "order_item_ship_grp_inv_res" edge to the OrderItemShipGrpInvRes entity.
func (iidu *InventoryItemDetailUpdate) ClearOrderItemShipGrpInvRes() *InventoryItemDetailUpdate {
	iidu.mutation.ClearOrderItemShipGrpInvRes()
	return iidu
}

// ClearReasonEnumeration clears the "reason_enumeration" edge to the Enumeration entity.
func (iidu *InventoryItemDetailUpdate) ClearReasonEnumeration() *InventoryItemDetailUpdate {
	iidu.mutation.ClearReasonEnumeration()
	return iidu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iidu *InventoryItemDetailUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	iidu.defaults()
	if len(iidu.hooks) == 0 {
		affected, err = iidu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*InventoryItemDetailMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			iidu.mutation = mutation
			affected, err = iidu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(iidu.hooks) - 1; i >= 0; i-- {
			mut = iidu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, iidu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (iidu *InventoryItemDetailUpdate) SaveX(ctx context.Context) int {
	affected, err := iidu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iidu *InventoryItemDetailUpdate) Exec(ctx context.Context) error {
	_, err := iidu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iidu *InventoryItemDetailUpdate) ExecX(ctx context.Context) {
	if err := iidu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iidu *InventoryItemDetailUpdate) defaults() {
	if _, ok := iidu.mutation.UpdateTime(); !ok {
		v := inventoryitemdetail.UpdateDefaultUpdateTime()
		iidu.mutation.SetUpdateTime(v)
	}
}

func (iidu *InventoryItemDetailUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   inventoryitemdetail.Table,
			Columns: inventoryitemdetail.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: inventoryitemdetail.FieldID,
			},
		},
	}
	if ps := iidu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iidu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: inventoryitemdetail.FieldUpdateTime,
		})
	}
	if value, ok := iidu.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: inventoryitemdetail.FieldStringRef,
		})
	}
	if iidu.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: inventoryitemdetail.FieldStringRef,
		})
	}
	if value, ok := iidu.mutation.InventoryItemDetailSeqID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: inventoryitemdetail.FieldInventoryItemDetailSeqID,
		})
	}
	if value, ok := iidu.mutation.AddedInventoryItemDetailSeqID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: inventoryitemdetail.FieldInventoryItemDetailSeqID,
		})
	}
	if value, ok := iidu.mutation.EffectiveDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: inventoryitemdetail.FieldEffectiveDate,
		})
	}
	if iidu.mutation.EffectiveDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: inventoryitemdetail.FieldEffectiveDate,
		})
	}
	if value, ok := iidu.mutation.QuantityOnHandDiff(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: inventoryitemdetail.FieldQuantityOnHandDiff,
		})
	}
	if value, ok := iidu.mutation.AddedQuantityOnHandDiff(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: inventoryitemdetail.FieldQuantityOnHandDiff,
		})
	}
	if iidu.mutation.QuantityOnHandDiffCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: inventoryitemdetail.FieldQuantityOnHandDiff,
		})
	}
	if value, ok := iidu.mutation.AvailableToPromiseDiff(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: inventoryitemdetail.FieldAvailableToPromiseDiff,
		})
	}
	if value, ok := iidu.mutation.AddedAvailableToPromiseDiff(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: inventoryitemdetail.FieldAvailableToPromiseDiff,
		})
	}
	if iidu.mutation.AvailableToPromiseDiffCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: inventoryitemdetail.FieldAvailableToPromiseDiff,
		})
	}
	if value, ok := iidu.mutation.AccountingQuantityDiff(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: inventoryitemdetail.FieldAccountingQuantityDiff,
		})
	}
	if value, ok := iidu.mutation.AddedAccountingQuantityDiff(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: inventoryitemdetail.FieldAccountingQuantityDiff,
		})
	}
	if iidu.mutation.AccountingQuantityDiffCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: inventoryitemdetail.FieldAccountingQuantityDiff,
		})
	}
	if value, ok := iidu.mutation.UnitCost(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: inventoryitemdetail.FieldUnitCost,
		})
	}
	if value, ok := iidu.mutation.AddedUnitCost(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: inventoryitemdetail.FieldUnitCost,
		})
	}
	if iidu.mutation.UnitCostCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: inventoryitemdetail.FieldUnitCost,
		})
	}
	if value, ok := iidu.mutation.OrderItemSeqID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: inventoryitemdetail.FieldOrderItemSeqID,
		})
	}
	if value, ok := iidu.mutation.AddedOrderItemSeqID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: inventoryitemdetail.FieldOrderItemSeqID,
		})
	}
	if iidu.mutation.OrderItemSeqIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: inventoryitemdetail.FieldOrderItemSeqID,
		})
	}
	if value, ok := iidu.mutation.ShipGroupSeqID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: inventoryitemdetail.FieldShipGroupSeqID,
		})
	}
	if value, ok := iidu.mutation.AddedShipGroupSeqID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: inventoryitemdetail.FieldShipGroupSeqID,
		})
	}
	if iidu.mutation.ShipGroupSeqIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: inventoryitemdetail.FieldShipGroupSeqID,
		})
	}
	if value, ok := iidu.mutation.ShipmentID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: inventoryitemdetail.FieldShipmentID,
		})
	}
	if value, ok := iidu.mutation.AddedShipmentID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: inventoryitemdetail.FieldShipmentID,
		})
	}
	if iidu.mutation.ShipmentIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: inventoryitemdetail.FieldShipmentID,
		})
	}
	if value, ok := iidu.mutation.ShipmentItemSeqID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: inventoryitemdetail.FieldShipmentItemSeqID,
		})
	}
	if value, ok := iidu.mutation.AddedShipmentItemSeqID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: inventoryitemdetail.FieldShipmentItemSeqID,
		})
	}
	if iidu.mutation.ShipmentItemSeqIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: inventoryitemdetail.FieldShipmentItemSeqID,
		})
	}
	if value, ok := iidu.mutation.ReturnID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: inventoryitemdetail.FieldReturnID,
		})
	}
	if value, ok := iidu.mutation.AddedReturnID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: inventoryitemdetail.FieldReturnID,
		})
	}
	if iidu.mutation.ReturnIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: inventoryitemdetail.FieldReturnID,
		})
	}
	if value, ok := iidu.mutation.ReturnItemSeqID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: inventoryitemdetail.FieldReturnItemSeqID,
		})
	}
	if value, ok := iidu.mutation.AddedReturnItemSeqID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: inventoryitemdetail.FieldReturnItemSeqID,
		})
	}
	if iidu.mutation.ReturnItemSeqIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: inventoryitemdetail.FieldReturnItemSeqID,
		})
	}
	if value, ok := iidu.mutation.WorkEffortID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: inventoryitemdetail.FieldWorkEffortID,
		})
	}
	if value, ok := iidu.mutation.AddedWorkEffortID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: inventoryitemdetail.FieldWorkEffortID,
		})
	}
	if iidu.mutation.WorkEffortIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: inventoryitemdetail.FieldWorkEffortID,
		})
	}
	if value, ok := iidu.mutation.FixedAssetID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: inventoryitemdetail.FieldFixedAssetID,
		})
	}
	if value, ok := iidu.mutation.AddedFixedAssetID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: inventoryitemdetail.FieldFixedAssetID,
		})
	}
	if iidu.mutation.FixedAssetIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: inventoryitemdetail.FieldFixedAssetID,
		})
	}
	if value, ok := iidu.mutation.MaintHistSeqID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: inventoryitemdetail.FieldMaintHistSeqID,
		})
	}
	if value, ok := iidu.mutation.AddedMaintHistSeqID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: inventoryitemdetail.FieldMaintHistSeqID,
		})
	}
	if iidu.mutation.MaintHistSeqIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: inventoryitemdetail.FieldMaintHistSeqID,
		})
	}
	if value, ok := iidu.mutation.ItemIssuanceID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: inventoryitemdetail.FieldItemIssuanceID,
		})
	}
	if value, ok := iidu.mutation.AddedItemIssuanceID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: inventoryitemdetail.FieldItemIssuanceID,
		})
	}
	if iidu.mutation.ItemIssuanceIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: inventoryitemdetail.FieldItemIssuanceID,
		})
	}
	if value, ok := iidu.mutation.ReceiptID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: inventoryitemdetail.FieldReceiptID,
		})
	}
	if value, ok := iidu.mutation.AddedReceiptID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: inventoryitemdetail.FieldReceiptID,
		})
	}
	if iidu.mutation.ReceiptIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: inventoryitemdetail.FieldReceiptID,
		})
	}
	if value, ok := iidu.mutation.PhysicalInventoryID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: inventoryitemdetail.FieldPhysicalInventoryID,
		})
	}
	if value, ok := iidu.mutation.AddedPhysicalInventoryID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: inventoryitemdetail.FieldPhysicalInventoryID,
		})
	}
	if iidu.mutation.PhysicalInventoryIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: inventoryitemdetail.FieldPhysicalInventoryID,
		})
	}
	if value, ok := iidu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: inventoryitemdetail.FieldDescription,
		})
	}
	if iidu.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: inventoryitemdetail.FieldDescription,
		})
	}
	if iidu.mutation.OrderItemShipGrpInvResCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   inventoryitemdetail.OrderItemShipGrpInvResTable,
			Columns: []string{inventoryitemdetail.OrderItemShipGrpInvResColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitemshipgrpinvres.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iidu.mutation.OrderItemShipGrpInvResIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   inventoryitemdetail.OrderItemShipGrpInvResTable,
			Columns: []string{inventoryitemdetail.OrderItemShipGrpInvResColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitemshipgrpinvres.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iidu.mutation.ReasonEnumerationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   inventoryitemdetail.ReasonEnumerationTable,
			Columns: []string{inventoryitemdetail.ReasonEnumerationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: enumeration.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iidu.mutation.ReasonEnumerationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   inventoryitemdetail.ReasonEnumerationTable,
			Columns: []string{inventoryitemdetail.ReasonEnumerationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: enumeration.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iidu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{inventoryitemdetail.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// InventoryItemDetailUpdateOne is the builder for updating a single InventoryItemDetail entity.
type InventoryItemDetailUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *InventoryItemDetailMutation
}

// SetStringRef sets the "string_ref" field.
func (iiduo *InventoryItemDetailUpdateOne) SetStringRef(s string) *InventoryItemDetailUpdateOne {
	iiduo.mutation.SetStringRef(s)
	return iiduo
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (iiduo *InventoryItemDetailUpdateOne) SetNillableStringRef(s *string) *InventoryItemDetailUpdateOne {
	if s != nil {
		iiduo.SetStringRef(*s)
	}
	return iiduo
}

// ClearStringRef clears the value of the "string_ref" field.
func (iiduo *InventoryItemDetailUpdateOne) ClearStringRef() *InventoryItemDetailUpdateOne {
	iiduo.mutation.ClearStringRef()
	return iiduo
}

// SetInventoryItemDetailSeqID sets the "inventory_item_detail_seq_id" field.
func (iiduo *InventoryItemDetailUpdateOne) SetInventoryItemDetailSeqID(i int) *InventoryItemDetailUpdateOne {
	iiduo.mutation.ResetInventoryItemDetailSeqID()
	iiduo.mutation.SetInventoryItemDetailSeqID(i)
	return iiduo
}

// AddInventoryItemDetailSeqID adds i to the "inventory_item_detail_seq_id" field.
func (iiduo *InventoryItemDetailUpdateOne) AddInventoryItemDetailSeqID(i int) *InventoryItemDetailUpdateOne {
	iiduo.mutation.AddInventoryItemDetailSeqID(i)
	return iiduo
}

// SetEffectiveDate sets the "effective_date" field.
func (iiduo *InventoryItemDetailUpdateOne) SetEffectiveDate(t time.Time) *InventoryItemDetailUpdateOne {
	iiduo.mutation.SetEffectiveDate(t)
	return iiduo
}

// SetNillableEffectiveDate sets the "effective_date" field if the given value is not nil.
func (iiduo *InventoryItemDetailUpdateOne) SetNillableEffectiveDate(t *time.Time) *InventoryItemDetailUpdateOne {
	if t != nil {
		iiduo.SetEffectiveDate(*t)
	}
	return iiduo
}

// ClearEffectiveDate clears the value of the "effective_date" field.
func (iiduo *InventoryItemDetailUpdateOne) ClearEffectiveDate() *InventoryItemDetailUpdateOne {
	iiduo.mutation.ClearEffectiveDate()
	return iiduo
}

// SetQuantityOnHandDiff sets the "quantity_on_hand_diff" field.
func (iiduo *InventoryItemDetailUpdateOne) SetQuantityOnHandDiff(f float64) *InventoryItemDetailUpdateOne {
	iiduo.mutation.ResetQuantityOnHandDiff()
	iiduo.mutation.SetQuantityOnHandDiff(f)
	return iiduo
}

// SetNillableQuantityOnHandDiff sets the "quantity_on_hand_diff" field if the given value is not nil.
func (iiduo *InventoryItemDetailUpdateOne) SetNillableQuantityOnHandDiff(f *float64) *InventoryItemDetailUpdateOne {
	if f != nil {
		iiduo.SetQuantityOnHandDiff(*f)
	}
	return iiduo
}

// AddQuantityOnHandDiff adds f to the "quantity_on_hand_diff" field.
func (iiduo *InventoryItemDetailUpdateOne) AddQuantityOnHandDiff(f float64) *InventoryItemDetailUpdateOne {
	iiduo.mutation.AddQuantityOnHandDiff(f)
	return iiduo
}

// ClearQuantityOnHandDiff clears the value of the "quantity_on_hand_diff" field.
func (iiduo *InventoryItemDetailUpdateOne) ClearQuantityOnHandDiff() *InventoryItemDetailUpdateOne {
	iiduo.mutation.ClearQuantityOnHandDiff()
	return iiduo
}

// SetAvailableToPromiseDiff sets the "available_to_promise_diff" field.
func (iiduo *InventoryItemDetailUpdateOne) SetAvailableToPromiseDiff(f float64) *InventoryItemDetailUpdateOne {
	iiduo.mutation.ResetAvailableToPromiseDiff()
	iiduo.mutation.SetAvailableToPromiseDiff(f)
	return iiduo
}

// SetNillableAvailableToPromiseDiff sets the "available_to_promise_diff" field if the given value is not nil.
func (iiduo *InventoryItemDetailUpdateOne) SetNillableAvailableToPromiseDiff(f *float64) *InventoryItemDetailUpdateOne {
	if f != nil {
		iiduo.SetAvailableToPromiseDiff(*f)
	}
	return iiduo
}

// AddAvailableToPromiseDiff adds f to the "available_to_promise_diff" field.
func (iiduo *InventoryItemDetailUpdateOne) AddAvailableToPromiseDiff(f float64) *InventoryItemDetailUpdateOne {
	iiduo.mutation.AddAvailableToPromiseDiff(f)
	return iiduo
}

// ClearAvailableToPromiseDiff clears the value of the "available_to_promise_diff" field.
func (iiduo *InventoryItemDetailUpdateOne) ClearAvailableToPromiseDiff() *InventoryItemDetailUpdateOne {
	iiduo.mutation.ClearAvailableToPromiseDiff()
	return iiduo
}

// SetAccountingQuantityDiff sets the "accounting_quantity_diff" field.
func (iiduo *InventoryItemDetailUpdateOne) SetAccountingQuantityDiff(f float64) *InventoryItemDetailUpdateOne {
	iiduo.mutation.ResetAccountingQuantityDiff()
	iiduo.mutation.SetAccountingQuantityDiff(f)
	return iiduo
}

// SetNillableAccountingQuantityDiff sets the "accounting_quantity_diff" field if the given value is not nil.
func (iiduo *InventoryItemDetailUpdateOne) SetNillableAccountingQuantityDiff(f *float64) *InventoryItemDetailUpdateOne {
	if f != nil {
		iiduo.SetAccountingQuantityDiff(*f)
	}
	return iiduo
}

// AddAccountingQuantityDiff adds f to the "accounting_quantity_diff" field.
func (iiduo *InventoryItemDetailUpdateOne) AddAccountingQuantityDiff(f float64) *InventoryItemDetailUpdateOne {
	iiduo.mutation.AddAccountingQuantityDiff(f)
	return iiduo
}

// ClearAccountingQuantityDiff clears the value of the "accounting_quantity_diff" field.
func (iiduo *InventoryItemDetailUpdateOne) ClearAccountingQuantityDiff() *InventoryItemDetailUpdateOne {
	iiduo.mutation.ClearAccountingQuantityDiff()
	return iiduo
}

// SetUnitCost sets the "unit_cost" field.
func (iiduo *InventoryItemDetailUpdateOne) SetUnitCost(f float64) *InventoryItemDetailUpdateOne {
	iiduo.mutation.ResetUnitCost()
	iiduo.mutation.SetUnitCost(f)
	return iiduo
}

// SetNillableUnitCost sets the "unit_cost" field if the given value is not nil.
func (iiduo *InventoryItemDetailUpdateOne) SetNillableUnitCost(f *float64) *InventoryItemDetailUpdateOne {
	if f != nil {
		iiduo.SetUnitCost(*f)
	}
	return iiduo
}

// AddUnitCost adds f to the "unit_cost" field.
func (iiduo *InventoryItemDetailUpdateOne) AddUnitCost(f float64) *InventoryItemDetailUpdateOne {
	iiduo.mutation.AddUnitCost(f)
	return iiduo
}

// ClearUnitCost clears the value of the "unit_cost" field.
func (iiduo *InventoryItemDetailUpdateOne) ClearUnitCost() *InventoryItemDetailUpdateOne {
	iiduo.mutation.ClearUnitCost()
	return iiduo
}

// SetOrderItemSeqID sets the "order_item_seq_id" field.
func (iiduo *InventoryItemDetailUpdateOne) SetOrderItemSeqID(i int) *InventoryItemDetailUpdateOne {
	iiduo.mutation.ResetOrderItemSeqID()
	iiduo.mutation.SetOrderItemSeqID(i)
	return iiduo
}

// SetNillableOrderItemSeqID sets the "order_item_seq_id" field if the given value is not nil.
func (iiduo *InventoryItemDetailUpdateOne) SetNillableOrderItemSeqID(i *int) *InventoryItemDetailUpdateOne {
	if i != nil {
		iiduo.SetOrderItemSeqID(*i)
	}
	return iiduo
}

// AddOrderItemSeqID adds i to the "order_item_seq_id" field.
func (iiduo *InventoryItemDetailUpdateOne) AddOrderItemSeqID(i int) *InventoryItemDetailUpdateOne {
	iiduo.mutation.AddOrderItemSeqID(i)
	return iiduo
}

// ClearOrderItemSeqID clears the value of the "order_item_seq_id" field.
func (iiduo *InventoryItemDetailUpdateOne) ClearOrderItemSeqID() *InventoryItemDetailUpdateOne {
	iiduo.mutation.ClearOrderItemSeqID()
	return iiduo
}

// SetShipGroupSeqID sets the "ship_group_seq_id" field.
func (iiduo *InventoryItemDetailUpdateOne) SetShipGroupSeqID(i int) *InventoryItemDetailUpdateOne {
	iiduo.mutation.ResetShipGroupSeqID()
	iiduo.mutation.SetShipGroupSeqID(i)
	return iiduo
}

// SetNillableShipGroupSeqID sets the "ship_group_seq_id" field if the given value is not nil.
func (iiduo *InventoryItemDetailUpdateOne) SetNillableShipGroupSeqID(i *int) *InventoryItemDetailUpdateOne {
	if i != nil {
		iiduo.SetShipGroupSeqID(*i)
	}
	return iiduo
}

// AddShipGroupSeqID adds i to the "ship_group_seq_id" field.
func (iiduo *InventoryItemDetailUpdateOne) AddShipGroupSeqID(i int) *InventoryItemDetailUpdateOne {
	iiduo.mutation.AddShipGroupSeqID(i)
	return iiduo
}

// ClearShipGroupSeqID clears the value of the "ship_group_seq_id" field.
func (iiduo *InventoryItemDetailUpdateOne) ClearShipGroupSeqID() *InventoryItemDetailUpdateOne {
	iiduo.mutation.ClearShipGroupSeqID()
	return iiduo
}

// SetShipmentID sets the "shipment_id" field.
func (iiduo *InventoryItemDetailUpdateOne) SetShipmentID(i int) *InventoryItemDetailUpdateOne {
	iiduo.mutation.ResetShipmentID()
	iiduo.mutation.SetShipmentID(i)
	return iiduo
}

// SetNillableShipmentID sets the "shipment_id" field if the given value is not nil.
func (iiduo *InventoryItemDetailUpdateOne) SetNillableShipmentID(i *int) *InventoryItemDetailUpdateOne {
	if i != nil {
		iiduo.SetShipmentID(*i)
	}
	return iiduo
}

// AddShipmentID adds i to the "shipment_id" field.
func (iiduo *InventoryItemDetailUpdateOne) AddShipmentID(i int) *InventoryItemDetailUpdateOne {
	iiduo.mutation.AddShipmentID(i)
	return iiduo
}

// ClearShipmentID clears the value of the "shipment_id" field.
func (iiduo *InventoryItemDetailUpdateOne) ClearShipmentID() *InventoryItemDetailUpdateOne {
	iiduo.mutation.ClearShipmentID()
	return iiduo
}

// SetShipmentItemSeqID sets the "shipment_item_seq_id" field.
func (iiduo *InventoryItemDetailUpdateOne) SetShipmentItemSeqID(i int) *InventoryItemDetailUpdateOne {
	iiduo.mutation.ResetShipmentItemSeqID()
	iiduo.mutation.SetShipmentItemSeqID(i)
	return iiduo
}

// SetNillableShipmentItemSeqID sets the "shipment_item_seq_id" field if the given value is not nil.
func (iiduo *InventoryItemDetailUpdateOne) SetNillableShipmentItemSeqID(i *int) *InventoryItemDetailUpdateOne {
	if i != nil {
		iiduo.SetShipmentItemSeqID(*i)
	}
	return iiduo
}

// AddShipmentItemSeqID adds i to the "shipment_item_seq_id" field.
func (iiduo *InventoryItemDetailUpdateOne) AddShipmentItemSeqID(i int) *InventoryItemDetailUpdateOne {
	iiduo.mutation.AddShipmentItemSeqID(i)
	return iiduo
}

// ClearShipmentItemSeqID clears the value of the "shipment_item_seq_id" field.
func (iiduo *InventoryItemDetailUpdateOne) ClearShipmentItemSeqID() *InventoryItemDetailUpdateOne {
	iiduo.mutation.ClearShipmentItemSeqID()
	return iiduo
}

// SetReturnID sets the "return_id" field.
func (iiduo *InventoryItemDetailUpdateOne) SetReturnID(i int) *InventoryItemDetailUpdateOne {
	iiduo.mutation.ResetReturnID()
	iiduo.mutation.SetReturnID(i)
	return iiduo
}

// SetNillableReturnID sets the "return_id" field if the given value is not nil.
func (iiduo *InventoryItemDetailUpdateOne) SetNillableReturnID(i *int) *InventoryItemDetailUpdateOne {
	if i != nil {
		iiduo.SetReturnID(*i)
	}
	return iiduo
}

// AddReturnID adds i to the "return_id" field.
func (iiduo *InventoryItemDetailUpdateOne) AddReturnID(i int) *InventoryItemDetailUpdateOne {
	iiduo.mutation.AddReturnID(i)
	return iiduo
}

// ClearReturnID clears the value of the "return_id" field.
func (iiduo *InventoryItemDetailUpdateOne) ClearReturnID() *InventoryItemDetailUpdateOne {
	iiduo.mutation.ClearReturnID()
	return iiduo
}

// SetReturnItemSeqID sets the "return_item_seq_id" field.
func (iiduo *InventoryItemDetailUpdateOne) SetReturnItemSeqID(i int) *InventoryItemDetailUpdateOne {
	iiduo.mutation.ResetReturnItemSeqID()
	iiduo.mutation.SetReturnItemSeqID(i)
	return iiduo
}

// SetNillableReturnItemSeqID sets the "return_item_seq_id" field if the given value is not nil.
func (iiduo *InventoryItemDetailUpdateOne) SetNillableReturnItemSeqID(i *int) *InventoryItemDetailUpdateOne {
	if i != nil {
		iiduo.SetReturnItemSeqID(*i)
	}
	return iiduo
}

// AddReturnItemSeqID adds i to the "return_item_seq_id" field.
func (iiduo *InventoryItemDetailUpdateOne) AddReturnItemSeqID(i int) *InventoryItemDetailUpdateOne {
	iiduo.mutation.AddReturnItemSeqID(i)
	return iiduo
}

// ClearReturnItemSeqID clears the value of the "return_item_seq_id" field.
func (iiduo *InventoryItemDetailUpdateOne) ClearReturnItemSeqID() *InventoryItemDetailUpdateOne {
	iiduo.mutation.ClearReturnItemSeqID()
	return iiduo
}

// SetWorkEffortID sets the "work_effort_id" field.
func (iiduo *InventoryItemDetailUpdateOne) SetWorkEffortID(i int) *InventoryItemDetailUpdateOne {
	iiduo.mutation.ResetWorkEffortID()
	iiduo.mutation.SetWorkEffortID(i)
	return iiduo
}

// SetNillableWorkEffortID sets the "work_effort_id" field if the given value is not nil.
func (iiduo *InventoryItemDetailUpdateOne) SetNillableWorkEffortID(i *int) *InventoryItemDetailUpdateOne {
	if i != nil {
		iiduo.SetWorkEffortID(*i)
	}
	return iiduo
}

// AddWorkEffortID adds i to the "work_effort_id" field.
func (iiduo *InventoryItemDetailUpdateOne) AddWorkEffortID(i int) *InventoryItemDetailUpdateOne {
	iiduo.mutation.AddWorkEffortID(i)
	return iiduo
}

// ClearWorkEffortID clears the value of the "work_effort_id" field.
func (iiduo *InventoryItemDetailUpdateOne) ClearWorkEffortID() *InventoryItemDetailUpdateOne {
	iiduo.mutation.ClearWorkEffortID()
	return iiduo
}

// SetFixedAssetID sets the "fixed_asset_id" field.
func (iiduo *InventoryItemDetailUpdateOne) SetFixedAssetID(i int) *InventoryItemDetailUpdateOne {
	iiduo.mutation.ResetFixedAssetID()
	iiduo.mutation.SetFixedAssetID(i)
	return iiduo
}

// SetNillableFixedAssetID sets the "fixed_asset_id" field if the given value is not nil.
func (iiduo *InventoryItemDetailUpdateOne) SetNillableFixedAssetID(i *int) *InventoryItemDetailUpdateOne {
	if i != nil {
		iiduo.SetFixedAssetID(*i)
	}
	return iiduo
}

// AddFixedAssetID adds i to the "fixed_asset_id" field.
func (iiduo *InventoryItemDetailUpdateOne) AddFixedAssetID(i int) *InventoryItemDetailUpdateOne {
	iiduo.mutation.AddFixedAssetID(i)
	return iiduo
}

// ClearFixedAssetID clears the value of the "fixed_asset_id" field.
func (iiduo *InventoryItemDetailUpdateOne) ClearFixedAssetID() *InventoryItemDetailUpdateOne {
	iiduo.mutation.ClearFixedAssetID()
	return iiduo
}

// SetMaintHistSeqID sets the "maint_hist_seq_id" field.
func (iiduo *InventoryItemDetailUpdateOne) SetMaintHistSeqID(i int) *InventoryItemDetailUpdateOne {
	iiduo.mutation.ResetMaintHistSeqID()
	iiduo.mutation.SetMaintHistSeqID(i)
	return iiduo
}

// SetNillableMaintHistSeqID sets the "maint_hist_seq_id" field if the given value is not nil.
func (iiduo *InventoryItemDetailUpdateOne) SetNillableMaintHistSeqID(i *int) *InventoryItemDetailUpdateOne {
	if i != nil {
		iiduo.SetMaintHistSeqID(*i)
	}
	return iiduo
}

// AddMaintHistSeqID adds i to the "maint_hist_seq_id" field.
func (iiduo *InventoryItemDetailUpdateOne) AddMaintHistSeqID(i int) *InventoryItemDetailUpdateOne {
	iiduo.mutation.AddMaintHistSeqID(i)
	return iiduo
}

// ClearMaintHistSeqID clears the value of the "maint_hist_seq_id" field.
func (iiduo *InventoryItemDetailUpdateOne) ClearMaintHistSeqID() *InventoryItemDetailUpdateOne {
	iiduo.mutation.ClearMaintHistSeqID()
	return iiduo
}

// SetItemIssuanceID sets the "item_issuance_id" field.
func (iiduo *InventoryItemDetailUpdateOne) SetItemIssuanceID(i int) *InventoryItemDetailUpdateOne {
	iiduo.mutation.ResetItemIssuanceID()
	iiduo.mutation.SetItemIssuanceID(i)
	return iiduo
}

// SetNillableItemIssuanceID sets the "item_issuance_id" field if the given value is not nil.
func (iiduo *InventoryItemDetailUpdateOne) SetNillableItemIssuanceID(i *int) *InventoryItemDetailUpdateOne {
	if i != nil {
		iiduo.SetItemIssuanceID(*i)
	}
	return iiduo
}

// AddItemIssuanceID adds i to the "item_issuance_id" field.
func (iiduo *InventoryItemDetailUpdateOne) AddItemIssuanceID(i int) *InventoryItemDetailUpdateOne {
	iiduo.mutation.AddItemIssuanceID(i)
	return iiduo
}

// ClearItemIssuanceID clears the value of the "item_issuance_id" field.
func (iiduo *InventoryItemDetailUpdateOne) ClearItemIssuanceID() *InventoryItemDetailUpdateOne {
	iiduo.mutation.ClearItemIssuanceID()
	return iiduo
}

// SetReceiptID sets the "receipt_id" field.
func (iiduo *InventoryItemDetailUpdateOne) SetReceiptID(i int) *InventoryItemDetailUpdateOne {
	iiduo.mutation.ResetReceiptID()
	iiduo.mutation.SetReceiptID(i)
	return iiduo
}

// SetNillableReceiptID sets the "receipt_id" field if the given value is not nil.
func (iiduo *InventoryItemDetailUpdateOne) SetNillableReceiptID(i *int) *InventoryItemDetailUpdateOne {
	if i != nil {
		iiduo.SetReceiptID(*i)
	}
	return iiduo
}

// AddReceiptID adds i to the "receipt_id" field.
func (iiduo *InventoryItemDetailUpdateOne) AddReceiptID(i int) *InventoryItemDetailUpdateOne {
	iiduo.mutation.AddReceiptID(i)
	return iiduo
}

// ClearReceiptID clears the value of the "receipt_id" field.
func (iiduo *InventoryItemDetailUpdateOne) ClearReceiptID() *InventoryItemDetailUpdateOne {
	iiduo.mutation.ClearReceiptID()
	return iiduo
}

// SetPhysicalInventoryID sets the "physical_inventory_id" field.
func (iiduo *InventoryItemDetailUpdateOne) SetPhysicalInventoryID(i int) *InventoryItemDetailUpdateOne {
	iiduo.mutation.ResetPhysicalInventoryID()
	iiduo.mutation.SetPhysicalInventoryID(i)
	return iiduo
}

// SetNillablePhysicalInventoryID sets the "physical_inventory_id" field if the given value is not nil.
func (iiduo *InventoryItemDetailUpdateOne) SetNillablePhysicalInventoryID(i *int) *InventoryItemDetailUpdateOne {
	if i != nil {
		iiduo.SetPhysicalInventoryID(*i)
	}
	return iiduo
}

// AddPhysicalInventoryID adds i to the "physical_inventory_id" field.
func (iiduo *InventoryItemDetailUpdateOne) AddPhysicalInventoryID(i int) *InventoryItemDetailUpdateOne {
	iiduo.mutation.AddPhysicalInventoryID(i)
	return iiduo
}

// ClearPhysicalInventoryID clears the value of the "physical_inventory_id" field.
func (iiduo *InventoryItemDetailUpdateOne) ClearPhysicalInventoryID() *InventoryItemDetailUpdateOne {
	iiduo.mutation.ClearPhysicalInventoryID()
	return iiduo
}

// SetDescription sets the "description" field.
func (iiduo *InventoryItemDetailUpdateOne) SetDescription(s string) *InventoryItemDetailUpdateOne {
	iiduo.mutation.SetDescription(s)
	return iiduo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (iiduo *InventoryItemDetailUpdateOne) SetNillableDescription(s *string) *InventoryItemDetailUpdateOne {
	if s != nil {
		iiduo.SetDescription(*s)
	}
	return iiduo
}

// ClearDescription clears the value of the "description" field.
func (iiduo *InventoryItemDetailUpdateOne) ClearDescription() *InventoryItemDetailUpdateOne {
	iiduo.mutation.ClearDescription()
	return iiduo
}

// SetOrderItemShipGrpInvResID sets the "order_item_ship_grp_inv_res" edge to the OrderItemShipGrpInvRes entity by ID.
func (iiduo *InventoryItemDetailUpdateOne) SetOrderItemShipGrpInvResID(id int) *InventoryItemDetailUpdateOne {
	iiduo.mutation.SetOrderItemShipGrpInvResID(id)
	return iiduo
}

// SetNillableOrderItemShipGrpInvResID sets the "order_item_ship_grp_inv_res" edge to the OrderItemShipGrpInvRes entity by ID if the given value is not nil.
func (iiduo *InventoryItemDetailUpdateOne) SetNillableOrderItemShipGrpInvResID(id *int) *InventoryItemDetailUpdateOne {
	if id != nil {
		iiduo = iiduo.SetOrderItemShipGrpInvResID(*id)
	}
	return iiduo
}

// SetOrderItemShipGrpInvRes sets the "order_item_ship_grp_inv_res" edge to the OrderItemShipGrpInvRes entity.
func (iiduo *InventoryItemDetailUpdateOne) SetOrderItemShipGrpInvRes(o *OrderItemShipGrpInvRes) *InventoryItemDetailUpdateOne {
	return iiduo.SetOrderItemShipGrpInvResID(o.ID)
}

// SetReasonEnumerationID sets the "reason_enumeration" edge to the Enumeration entity by ID.
func (iiduo *InventoryItemDetailUpdateOne) SetReasonEnumerationID(id int) *InventoryItemDetailUpdateOne {
	iiduo.mutation.SetReasonEnumerationID(id)
	return iiduo
}

// SetNillableReasonEnumerationID sets the "reason_enumeration" edge to the Enumeration entity by ID if the given value is not nil.
func (iiduo *InventoryItemDetailUpdateOne) SetNillableReasonEnumerationID(id *int) *InventoryItemDetailUpdateOne {
	if id != nil {
		iiduo = iiduo.SetReasonEnumerationID(*id)
	}
	return iiduo
}

// SetReasonEnumeration sets the "reason_enumeration" edge to the Enumeration entity.
func (iiduo *InventoryItemDetailUpdateOne) SetReasonEnumeration(e *Enumeration) *InventoryItemDetailUpdateOne {
	return iiduo.SetReasonEnumerationID(e.ID)
}

// Mutation returns the InventoryItemDetailMutation object of the builder.
func (iiduo *InventoryItemDetailUpdateOne) Mutation() *InventoryItemDetailMutation {
	return iiduo.mutation
}

// ClearOrderItemShipGrpInvRes clears the "order_item_ship_grp_inv_res" edge to the OrderItemShipGrpInvRes entity.
func (iiduo *InventoryItemDetailUpdateOne) ClearOrderItemShipGrpInvRes() *InventoryItemDetailUpdateOne {
	iiduo.mutation.ClearOrderItemShipGrpInvRes()
	return iiduo
}

// ClearReasonEnumeration clears the "reason_enumeration" edge to the Enumeration entity.
func (iiduo *InventoryItemDetailUpdateOne) ClearReasonEnumeration() *InventoryItemDetailUpdateOne {
	iiduo.mutation.ClearReasonEnumeration()
	return iiduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iiduo *InventoryItemDetailUpdateOne) Select(field string, fields ...string) *InventoryItemDetailUpdateOne {
	iiduo.fields = append([]string{field}, fields...)
	return iiduo
}

// Save executes the query and returns the updated InventoryItemDetail entity.
func (iiduo *InventoryItemDetailUpdateOne) Save(ctx context.Context) (*InventoryItemDetail, error) {
	var (
		err  error
		node *InventoryItemDetail
	)
	iiduo.defaults()
	if len(iiduo.hooks) == 0 {
		node, err = iiduo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*InventoryItemDetailMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			iiduo.mutation = mutation
			node, err = iiduo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(iiduo.hooks) - 1; i >= 0; i-- {
			mut = iiduo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, iiduo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (iiduo *InventoryItemDetailUpdateOne) SaveX(ctx context.Context) *InventoryItemDetail {
	node, err := iiduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iiduo *InventoryItemDetailUpdateOne) Exec(ctx context.Context) error {
	_, err := iiduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iiduo *InventoryItemDetailUpdateOne) ExecX(ctx context.Context) {
	if err := iiduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iiduo *InventoryItemDetailUpdateOne) defaults() {
	if _, ok := iiduo.mutation.UpdateTime(); !ok {
		v := inventoryitemdetail.UpdateDefaultUpdateTime()
		iiduo.mutation.SetUpdateTime(v)
	}
}

func (iiduo *InventoryItemDetailUpdateOne) sqlSave(ctx context.Context) (_node *InventoryItemDetail, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   inventoryitemdetail.Table,
			Columns: inventoryitemdetail.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: inventoryitemdetail.FieldID,
			},
		},
	}
	id, ok := iiduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing InventoryItemDetail.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := iiduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, inventoryitemdetail.FieldID)
		for _, f := range fields {
			if !inventoryitemdetail.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != inventoryitemdetail.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iiduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iiduo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: inventoryitemdetail.FieldUpdateTime,
		})
	}
	if value, ok := iiduo.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: inventoryitemdetail.FieldStringRef,
		})
	}
	if iiduo.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: inventoryitemdetail.FieldStringRef,
		})
	}
	if value, ok := iiduo.mutation.InventoryItemDetailSeqID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: inventoryitemdetail.FieldInventoryItemDetailSeqID,
		})
	}
	if value, ok := iiduo.mutation.AddedInventoryItemDetailSeqID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: inventoryitemdetail.FieldInventoryItemDetailSeqID,
		})
	}
	if value, ok := iiduo.mutation.EffectiveDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: inventoryitemdetail.FieldEffectiveDate,
		})
	}
	if iiduo.mutation.EffectiveDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: inventoryitemdetail.FieldEffectiveDate,
		})
	}
	if value, ok := iiduo.mutation.QuantityOnHandDiff(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: inventoryitemdetail.FieldQuantityOnHandDiff,
		})
	}
	if value, ok := iiduo.mutation.AddedQuantityOnHandDiff(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: inventoryitemdetail.FieldQuantityOnHandDiff,
		})
	}
	if iiduo.mutation.QuantityOnHandDiffCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: inventoryitemdetail.FieldQuantityOnHandDiff,
		})
	}
	if value, ok := iiduo.mutation.AvailableToPromiseDiff(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: inventoryitemdetail.FieldAvailableToPromiseDiff,
		})
	}
	if value, ok := iiduo.mutation.AddedAvailableToPromiseDiff(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: inventoryitemdetail.FieldAvailableToPromiseDiff,
		})
	}
	if iiduo.mutation.AvailableToPromiseDiffCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: inventoryitemdetail.FieldAvailableToPromiseDiff,
		})
	}
	if value, ok := iiduo.mutation.AccountingQuantityDiff(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: inventoryitemdetail.FieldAccountingQuantityDiff,
		})
	}
	if value, ok := iiduo.mutation.AddedAccountingQuantityDiff(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: inventoryitemdetail.FieldAccountingQuantityDiff,
		})
	}
	if iiduo.mutation.AccountingQuantityDiffCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: inventoryitemdetail.FieldAccountingQuantityDiff,
		})
	}
	if value, ok := iiduo.mutation.UnitCost(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: inventoryitemdetail.FieldUnitCost,
		})
	}
	if value, ok := iiduo.mutation.AddedUnitCost(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: inventoryitemdetail.FieldUnitCost,
		})
	}
	if iiduo.mutation.UnitCostCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: inventoryitemdetail.FieldUnitCost,
		})
	}
	if value, ok := iiduo.mutation.OrderItemSeqID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: inventoryitemdetail.FieldOrderItemSeqID,
		})
	}
	if value, ok := iiduo.mutation.AddedOrderItemSeqID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: inventoryitemdetail.FieldOrderItemSeqID,
		})
	}
	if iiduo.mutation.OrderItemSeqIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: inventoryitemdetail.FieldOrderItemSeqID,
		})
	}
	if value, ok := iiduo.mutation.ShipGroupSeqID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: inventoryitemdetail.FieldShipGroupSeqID,
		})
	}
	if value, ok := iiduo.mutation.AddedShipGroupSeqID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: inventoryitemdetail.FieldShipGroupSeqID,
		})
	}
	if iiduo.mutation.ShipGroupSeqIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: inventoryitemdetail.FieldShipGroupSeqID,
		})
	}
	if value, ok := iiduo.mutation.ShipmentID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: inventoryitemdetail.FieldShipmentID,
		})
	}
	if value, ok := iiduo.mutation.AddedShipmentID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: inventoryitemdetail.FieldShipmentID,
		})
	}
	if iiduo.mutation.ShipmentIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: inventoryitemdetail.FieldShipmentID,
		})
	}
	if value, ok := iiduo.mutation.ShipmentItemSeqID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: inventoryitemdetail.FieldShipmentItemSeqID,
		})
	}
	if value, ok := iiduo.mutation.AddedShipmentItemSeqID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: inventoryitemdetail.FieldShipmentItemSeqID,
		})
	}
	if iiduo.mutation.ShipmentItemSeqIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: inventoryitemdetail.FieldShipmentItemSeqID,
		})
	}
	if value, ok := iiduo.mutation.ReturnID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: inventoryitemdetail.FieldReturnID,
		})
	}
	if value, ok := iiduo.mutation.AddedReturnID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: inventoryitemdetail.FieldReturnID,
		})
	}
	if iiduo.mutation.ReturnIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: inventoryitemdetail.FieldReturnID,
		})
	}
	if value, ok := iiduo.mutation.ReturnItemSeqID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: inventoryitemdetail.FieldReturnItemSeqID,
		})
	}
	if value, ok := iiduo.mutation.AddedReturnItemSeqID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: inventoryitemdetail.FieldReturnItemSeqID,
		})
	}
	if iiduo.mutation.ReturnItemSeqIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: inventoryitemdetail.FieldReturnItemSeqID,
		})
	}
	if value, ok := iiduo.mutation.WorkEffortID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: inventoryitemdetail.FieldWorkEffortID,
		})
	}
	if value, ok := iiduo.mutation.AddedWorkEffortID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: inventoryitemdetail.FieldWorkEffortID,
		})
	}
	if iiduo.mutation.WorkEffortIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: inventoryitemdetail.FieldWorkEffortID,
		})
	}
	if value, ok := iiduo.mutation.FixedAssetID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: inventoryitemdetail.FieldFixedAssetID,
		})
	}
	if value, ok := iiduo.mutation.AddedFixedAssetID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: inventoryitemdetail.FieldFixedAssetID,
		})
	}
	if iiduo.mutation.FixedAssetIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: inventoryitemdetail.FieldFixedAssetID,
		})
	}
	if value, ok := iiduo.mutation.MaintHistSeqID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: inventoryitemdetail.FieldMaintHistSeqID,
		})
	}
	if value, ok := iiduo.mutation.AddedMaintHistSeqID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: inventoryitemdetail.FieldMaintHistSeqID,
		})
	}
	if iiduo.mutation.MaintHistSeqIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: inventoryitemdetail.FieldMaintHistSeqID,
		})
	}
	if value, ok := iiduo.mutation.ItemIssuanceID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: inventoryitemdetail.FieldItemIssuanceID,
		})
	}
	if value, ok := iiduo.mutation.AddedItemIssuanceID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: inventoryitemdetail.FieldItemIssuanceID,
		})
	}
	if iiduo.mutation.ItemIssuanceIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: inventoryitemdetail.FieldItemIssuanceID,
		})
	}
	if value, ok := iiduo.mutation.ReceiptID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: inventoryitemdetail.FieldReceiptID,
		})
	}
	if value, ok := iiduo.mutation.AddedReceiptID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: inventoryitemdetail.FieldReceiptID,
		})
	}
	if iiduo.mutation.ReceiptIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: inventoryitemdetail.FieldReceiptID,
		})
	}
	if value, ok := iiduo.mutation.PhysicalInventoryID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: inventoryitemdetail.FieldPhysicalInventoryID,
		})
	}
	if value, ok := iiduo.mutation.AddedPhysicalInventoryID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: inventoryitemdetail.FieldPhysicalInventoryID,
		})
	}
	if iiduo.mutation.PhysicalInventoryIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: inventoryitemdetail.FieldPhysicalInventoryID,
		})
	}
	if value, ok := iiduo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: inventoryitemdetail.FieldDescription,
		})
	}
	if iiduo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: inventoryitemdetail.FieldDescription,
		})
	}
	if iiduo.mutation.OrderItemShipGrpInvResCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   inventoryitemdetail.OrderItemShipGrpInvResTable,
			Columns: []string{inventoryitemdetail.OrderItemShipGrpInvResColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitemshipgrpinvres.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iiduo.mutation.OrderItemShipGrpInvResIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   inventoryitemdetail.OrderItemShipGrpInvResTable,
			Columns: []string{inventoryitemdetail.OrderItemShipGrpInvResColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitemshipgrpinvres.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iiduo.mutation.ReasonEnumerationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   inventoryitemdetail.ReasonEnumerationTable,
			Columns: []string{inventoryitemdetail.ReasonEnumerationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: enumeration.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iiduo.mutation.ReasonEnumerationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   inventoryitemdetail.ReasonEnumerationTable,
			Columns: []string{inventoryitemdetail.ReasonEnumerationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: enumeration.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &InventoryItemDetail{config: iiduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iiduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{inventoryitemdetail.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
