// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/inventoryitemtype"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/predicate"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/product"
)

// InventoryItemTypeUpdate is the builder for updating InventoryItemType entities.
type InventoryItemTypeUpdate struct {
	config
	hooks    []Hook
	mutation *InventoryItemTypeMutation
}

// Where adds a new predicate for the InventoryItemTypeUpdate builder.
func (iitu *InventoryItemTypeUpdate) Where(ps ...predicate.InventoryItemType) *InventoryItemTypeUpdate {
	iitu.mutation.predicates = append(iitu.mutation.predicates, ps...)
	return iitu
}

// SetStringRef sets the "string_ref" field.
func (iitu *InventoryItemTypeUpdate) SetStringRef(s string) *InventoryItemTypeUpdate {
	iitu.mutation.SetStringRef(s)
	return iitu
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (iitu *InventoryItemTypeUpdate) SetNillableStringRef(s *string) *InventoryItemTypeUpdate {
	if s != nil {
		iitu.SetStringRef(*s)
	}
	return iitu
}

// ClearStringRef clears the value of the "string_ref" field.
func (iitu *InventoryItemTypeUpdate) ClearStringRef() *InventoryItemTypeUpdate {
	iitu.mutation.ClearStringRef()
	return iitu
}

// SetHasTable sets the "has_table" field.
func (iitu *InventoryItemTypeUpdate) SetHasTable(it inventoryitemtype.HasTable) *InventoryItemTypeUpdate {
	iitu.mutation.SetHasTable(it)
	return iitu
}

// SetNillableHasTable sets the "has_table" field if the given value is not nil.
func (iitu *InventoryItemTypeUpdate) SetNillableHasTable(it *inventoryitemtype.HasTable) *InventoryItemTypeUpdate {
	if it != nil {
		iitu.SetHasTable(*it)
	}
	return iitu
}

// ClearHasTable clears the value of the "has_table" field.
func (iitu *InventoryItemTypeUpdate) ClearHasTable() *InventoryItemTypeUpdate {
	iitu.mutation.ClearHasTable()
	return iitu
}

// SetDescription sets the "description" field.
func (iitu *InventoryItemTypeUpdate) SetDescription(s string) *InventoryItemTypeUpdate {
	iitu.mutation.SetDescription(s)
	return iitu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (iitu *InventoryItemTypeUpdate) SetNillableDescription(s *string) *InventoryItemTypeUpdate {
	if s != nil {
		iitu.SetDescription(*s)
	}
	return iitu
}

// ClearDescription clears the value of the "description" field.
func (iitu *InventoryItemTypeUpdate) ClearDescription() *InventoryItemTypeUpdate {
	iitu.mutation.ClearDescription()
	return iitu
}

// SetParentID sets the "parent" edge to the InventoryItemType entity by ID.
func (iitu *InventoryItemTypeUpdate) SetParentID(id int) *InventoryItemTypeUpdate {
	iitu.mutation.SetParentID(id)
	return iitu
}

// SetNillableParentID sets the "parent" edge to the InventoryItemType entity by ID if the given value is not nil.
func (iitu *InventoryItemTypeUpdate) SetNillableParentID(id *int) *InventoryItemTypeUpdate {
	if id != nil {
		iitu = iitu.SetParentID(*id)
	}
	return iitu
}

// SetParent sets the "parent" edge to the InventoryItemType entity.
func (iitu *InventoryItemTypeUpdate) SetParent(i *InventoryItemType) *InventoryItemTypeUpdate {
	return iitu.SetParentID(i.ID)
}

// AddChildIDs adds the "children" edge to the InventoryItemType entity by IDs.
func (iitu *InventoryItemTypeUpdate) AddChildIDs(ids ...int) *InventoryItemTypeUpdate {
	iitu.mutation.AddChildIDs(ids...)
	return iitu
}

// AddChildren adds the "children" edges to the InventoryItemType entity.
func (iitu *InventoryItemTypeUpdate) AddChildren(i ...*InventoryItemType) *InventoryItemTypeUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iitu.AddChildIDs(ids...)
}

// AddChildInventoryItemTypeIDs adds the "child_inventory_item_types" edge to the InventoryItemType entity by IDs.
func (iitu *InventoryItemTypeUpdate) AddChildInventoryItemTypeIDs(ids ...int) *InventoryItemTypeUpdate {
	iitu.mutation.AddChildInventoryItemTypeIDs(ids...)
	return iitu
}

// AddChildInventoryItemTypes adds the "child_inventory_item_types" edges to the InventoryItemType entity.
func (iitu *InventoryItemTypeUpdate) AddChildInventoryItemTypes(i ...*InventoryItemType) *InventoryItemTypeUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iitu.AddChildInventoryItemTypeIDs(ids...)
}

// AddProductIDs adds the "products" edge to the Product entity by IDs.
func (iitu *InventoryItemTypeUpdate) AddProductIDs(ids ...int) *InventoryItemTypeUpdate {
	iitu.mutation.AddProductIDs(ids...)
	return iitu
}

// AddProducts adds the "products" edges to the Product entity.
func (iitu *InventoryItemTypeUpdate) AddProducts(p ...*Product) *InventoryItemTypeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return iitu.AddProductIDs(ids...)
}

// Mutation returns the InventoryItemTypeMutation object of the builder.
func (iitu *InventoryItemTypeUpdate) Mutation() *InventoryItemTypeMutation {
	return iitu.mutation
}

// ClearParent clears the "parent" edge to the InventoryItemType entity.
func (iitu *InventoryItemTypeUpdate) ClearParent() *InventoryItemTypeUpdate {
	iitu.mutation.ClearParent()
	return iitu
}

// ClearChildren clears all "children" edges to the InventoryItemType entity.
func (iitu *InventoryItemTypeUpdate) ClearChildren() *InventoryItemTypeUpdate {
	iitu.mutation.ClearChildren()
	return iitu
}

// RemoveChildIDs removes the "children" edge to InventoryItemType entities by IDs.
func (iitu *InventoryItemTypeUpdate) RemoveChildIDs(ids ...int) *InventoryItemTypeUpdate {
	iitu.mutation.RemoveChildIDs(ids...)
	return iitu
}

// RemoveChildren removes "children" edges to InventoryItemType entities.
func (iitu *InventoryItemTypeUpdate) RemoveChildren(i ...*InventoryItemType) *InventoryItemTypeUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iitu.RemoveChildIDs(ids...)
}

// ClearChildInventoryItemTypes clears all "child_inventory_item_types" edges to the InventoryItemType entity.
func (iitu *InventoryItemTypeUpdate) ClearChildInventoryItemTypes() *InventoryItemTypeUpdate {
	iitu.mutation.ClearChildInventoryItemTypes()
	return iitu
}

// RemoveChildInventoryItemTypeIDs removes the "child_inventory_item_types" edge to InventoryItemType entities by IDs.
func (iitu *InventoryItemTypeUpdate) RemoveChildInventoryItemTypeIDs(ids ...int) *InventoryItemTypeUpdate {
	iitu.mutation.RemoveChildInventoryItemTypeIDs(ids...)
	return iitu
}

// RemoveChildInventoryItemTypes removes "child_inventory_item_types" edges to InventoryItemType entities.
func (iitu *InventoryItemTypeUpdate) RemoveChildInventoryItemTypes(i ...*InventoryItemType) *InventoryItemTypeUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iitu.RemoveChildInventoryItemTypeIDs(ids...)
}

// ClearProducts clears all "products" edges to the Product entity.
func (iitu *InventoryItemTypeUpdate) ClearProducts() *InventoryItemTypeUpdate {
	iitu.mutation.ClearProducts()
	return iitu
}

// RemoveProductIDs removes the "products" edge to Product entities by IDs.
func (iitu *InventoryItemTypeUpdate) RemoveProductIDs(ids ...int) *InventoryItemTypeUpdate {
	iitu.mutation.RemoveProductIDs(ids...)
	return iitu
}

// RemoveProducts removes "products" edges to Product entities.
func (iitu *InventoryItemTypeUpdate) RemoveProducts(p ...*Product) *InventoryItemTypeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return iitu.RemoveProductIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iitu *InventoryItemTypeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	iitu.defaults()
	if len(iitu.hooks) == 0 {
		if err = iitu.check(); err != nil {
			return 0, err
		}
		affected, err = iitu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*InventoryItemTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = iitu.check(); err != nil {
				return 0, err
			}
			iitu.mutation = mutation
			affected, err = iitu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(iitu.hooks) - 1; i >= 0; i-- {
			mut = iitu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, iitu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (iitu *InventoryItemTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := iitu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iitu *InventoryItemTypeUpdate) Exec(ctx context.Context) error {
	_, err := iitu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iitu *InventoryItemTypeUpdate) ExecX(ctx context.Context) {
	if err := iitu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iitu *InventoryItemTypeUpdate) defaults() {
	if _, ok := iitu.mutation.UpdateTime(); !ok {
		v := inventoryitemtype.UpdateDefaultUpdateTime()
		iitu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iitu *InventoryItemTypeUpdate) check() error {
	if v, ok := iitu.mutation.HasTable(); ok {
		if err := inventoryitemtype.HasTableValidator(v); err != nil {
			return &ValidationError{Name: "has_table", err: fmt.Errorf("ent: validator failed for field \"has_table\": %w", err)}
		}
	}
	return nil
}

func (iitu *InventoryItemTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   inventoryitemtype.Table,
			Columns: inventoryitemtype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: inventoryitemtype.FieldID,
			},
		},
	}
	if ps := iitu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iitu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: inventoryitemtype.FieldUpdateTime,
		})
	}
	if value, ok := iitu.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: inventoryitemtype.FieldStringRef,
		})
	}
	if iitu.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: inventoryitemtype.FieldStringRef,
		})
	}
	if value, ok := iitu.mutation.HasTable(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: inventoryitemtype.FieldHasTable,
		})
	}
	if iitu.mutation.HasTableCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: inventoryitemtype.FieldHasTable,
		})
	}
	if value, ok := iitu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: inventoryitemtype.FieldDescription,
		})
	}
	if iitu.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: inventoryitemtype.FieldDescription,
		})
	}
	if iitu.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   inventoryitemtype.ParentTable,
			Columns: []string{inventoryitemtype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: inventoryitemtype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iitu.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   inventoryitemtype.ParentTable,
			Columns: []string{inventoryitemtype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: inventoryitemtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iitu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   inventoryitemtype.ChildrenTable,
			Columns: []string{inventoryitemtype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: inventoryitemtype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iitu.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !iitu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   inventoryitemtype.ChildrenTable,
			Columns: []string{inventoryitemtype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: inventoryitemtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iitu.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   inventoryitemtype.ChildrenTable,
			Columns: []string{inventoryitemtype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: inventoryitemtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iitu.mutation.ChildInventoryItemTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   inventoryitemtype.ChildInventoryItemTypesTable,
			Columns: inventoryitemtype.ChildInventoryItemTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: inventoryitemtype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iitu.mutation.RemovedChildInventoryItemTypesIDs(); len(nodes) > 0 && !iitu.mutation.ChildInventoryItemTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   inventoryitemtype.ChildInventoryItemTypesTable,
			Columns: inventoryitemtype.ChildInventoryItemTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: inventoryitemtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iitu.mutation.ChildInventoryItemTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   inventoryitemtype.ChildInventoryItemTypesTable,
			Columns: inventoryitemtype.ChildInventoryItemTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: inventoryitemtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iitu.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   inventoryitemtype.ProductsTable,
			Columns: []string{inventoryitemtype.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iitu.mutation.RemovedProductsIDs(); len(nodes) > 0 && !iitu.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   inventoryitemtype.ProductsTable,
			Columns: []string{inventoryitemtype.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iitu.mutation.ProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   inventoryitemtype.ProductsTable,
			Columns: []string{inventoryitemtype.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iitu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{inventoryitemtype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// InventoryItemTypeUpdateOne is the builder for updating a single InventoryItemType entity.
type InventoryItemTypeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *InventoryItemTypeMutation
}

// SetStringRef sets the "string_ref" field.
func (iituo *InventoryItemTypeUpdateOne) SetStringRef(s string) *InventoryItemTypeUpdateOne {
	iituo.mutation.SetStringRef(s)
	return iituo
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (iituo *InventoryItemTypeUpdateOne) SetNillableStringRef(s *string) *InventoryItemTypeUpdateOne {
	if s != nil {
		iituo.SetStringRef(*s)
	}
	return iituo
}

// ClearStringRef clears the value of the "string_ref" field.
func (iituo *InventoryItemTypeUpdateOne) ClearStringRef() *InventoryItemTypeUpdateOne {
	iituo.mutation.ClearStringRef()
	return iituo
}

// SetHasTable sets the "has_table" field.
func (iituo *InventoryItemTypeUpdateOne) SetHasTable(it inventoryitemtype.HasTable) *InventoryItemTypeUpdateOne {
	iituo.mutation.SetHasTable(it)
	return iituo
}

// SetNillableHasTable sets the "has_table" field if the given value is not nil.
func (iituo *InventoryItemTypeUpdateOne) SetNillableHasTable(it *inventoryitemtype.HasTable) *InventoryItemTypeUpdateOne {
	if it != nil {
		iituo.SetHasTable(*it)
	}
	return iituo
}

// ClearHasTable clears the value of the "has_table" field.
func (iituo *InventoryItemTypeUpdateOne) ClearHasTable() *InventoryItemTypeUpdateOne {
	iituo.mutation.ClearHasTable()
	return iituo
}

// SetDescription sets the "description" field.
func (iituo *InventoryItemTypeUpdateOne) SetDescription(s string) *InventoryItemTypeUpdateOne {
	iituo.mutation.SetDescription(s)
	return iituo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (iituo *InventoryItemTypeUpdateOne) SetNillableDescription(s *string) *InventoryItemTypeUpdateOne {
	if s != nil {
		iituo.SetDescription(*s)
	}
	return iituo
}

// ClearDescription clears the value of the "description" field.
func (iituo *InventoryItemTypeUpdateOne) ClearDescription() *InventoryItemTypeUpdateOne {
	iituo.mutation.ClearDescription()
	return iituo
}

// SetParentID sets the "parent" edge to the InventoryItemType entity by ID.
func (iituo *InventoryItemTypeUpdateOne) SetParentID(id int) *InventoryItemTypeUpdateOne {
	iituo.mutation.SetParentID(id)
	return iituo
}

// SetNillableParentID sets the "parent" edge to the InventoryItemType entity by ID if the given value is not nil.
func (iituo *InventoryItemTypeUpdateOne) SetNillableParentID(id *int) *InventoryItemTypeUpdateOne {
	if id != nil {
		iituo = iituo.SetParentID(*id)
	}
	return iituo
}

// SetParent sets the "parent" edge to the InventoryItemType entity.
func (iituo *InventoryItemTypeUpdateOne) SetParent(i *InventoryItemType) *InventoryItemTypeUpdateOne {
	return iituo.SetParentID(i.ID)
}

// AddChildIDs adds the "children" edge to the InventoryItemType entity by IDs.
func (iituo *InventoryItemTypeUpdateOne) AddChildIDs(ids ...int) *InventoryItemTypeUpdateOne {
	iituo.mutation.AddChildIDs(ids...)
	return iituo
}

// AddChildren adds the "children" edges to the InventoryItemType entity.
func (iituo *InventoryItemTypeUpdateOne) AddChildren(i ...*InventoryItemType) *InventoryItemTypeUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iituo.AddChildIDs(ids...)
}

// AddChildInventoryItemTypeIDs adds the "child_inventory_item_types" edge to the InventoryItemType entity by IDs.
func (iituo *InventoryItemTypeUpdateOne) AddChildInventoryItemTypeIDs(ids ...int) *InventoryItemTypeUpdateOne {
	iituo.mutation.AddChildInventoryItemTypeIDs(ids...)
	return iituo
}

// AddChildInventoryItemTypes adds the "child_inventory_item_types" edges to the InventoryItemType entity.
func (iituo *InventoryItemTypeUpdateOne) AddChildInventoryItemTypes(i ...*InventoryItemType) *InventoryItemTypeUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iituo.AddChildInventoryItemTypeIDs(ids...)
}

// AddProductIDs adds the "products" edge to the Product entity by IDs.
func (iituo *InventoryItemTypeUpdateOne) AddProductIDs(ids ...int) *InventoryItemTypeUpdateOne {
	iituo.mutation.AddProductIDs(ids...)
	return iituo
}

// AddProducts adds the "products" edges to the Product entity.
func (iituo *InventoryItemTypeUpdateOne) AddProducts(p ...*Product) *InventoryItemTypeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return iituo.AddProductIDs(ids...)
}

// Mutation returns the InventoryItemTypeMutation object of the builder.
func (iituo *InventoryItemTypeUpdateOne) Mutation() *InventoryItemTypeMutation {
	return iituo.mutation
}

// ClearParent clears the "parent" edge to the InventoryItemType entity.
func (iituo *InventoryItemTypeUpdateOne) ClearParent() *InventoryItemTypeUpdateOne {
	iituo.mutation.ClearParent()
	return iituo
}

// ClearChildren clears all "children" edges to the InventoryItemType entity.
func (iituo *InventoryItemTypeUpdateOne) ClearChildren() *InventoryItemTypeUpdateOne {
	iituo.mutation.ClearChildren()
	return iituo
}

// RemoveChildIDs removes the "children" edge to InventoryItemType entities by IDs.
func (iituo *InventoryItemTypeUpdateOne) RemoveChildIDs(ids ...int) *InventoryItemTypeUpdateOne {
	iituo.mutation.RemoveChildIDs(ids...)
	return iituo
}

// RemoveChildren removes "children" edges to InventoryItemType entities.
func (iituo *InventoryItemTypeUpdateOne) RemoveChildren(i ...*InventoryItemType) *InventoryItemTypeUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iituo.RemoveChildIDs(ids...)
}

// ClearChildInventoryItemTypes clears all "child_inventory_item_types" edges to the InventoryItemType entity.
func (iituo *InventoryItemTypeUpdateOne) ClearChildInventoryItemTypes() *InventoryItemTypeUpdateOne {
	iituo.mutation.ClearChildInventoryItemTypes()
	return iituo
}

// RemoveChildInventoryItemTypeIDs removes the "child_inventory_item_types" edge to InventoryItemType entities by IDs.
func (iituo *InventoryItemTypeUpdateOne) RemoveChildInventoryItemTypeIDs(ids ...int) *InventoryItemTypeUpdateOne {
	iituo.mutation.RemoveChildInventoryItemTypeIDs(ids...)
	return iituo
}

// RemoveChildInventoryItemTypes removes "child_inventory_item_types" edges to InventoryItemType entities.
func (iituo *InventoryItemTypeUpdateOne) RemoveChildInventoryItemTypes(i ...*InventoryItemType) *InventoryItemTypeUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iituo.RemoveChildInventoryItemTypeIDs(ids...)
}

// ClearProducts clears all "products" edges to the Product entity.
func (iituo *InventoryItemTypeUpdateOne) ClearProducts() *InventoryItemTypeUpdateOne {
	iituo.mutation.ClearProducts()
	return iituo
}

// RemoveProductIDs removes the "products" edge to Product entities by IDs.
func (iituo *InventoryItemTypeUpdateOne) RemoveProductIDs(ids ...int) *InventoryItemTypeUpdateOne {
	iituo.mutation.RemoveProductIDs(ids...)
	return iituo
}

// RemoveProducts removes "products" edges to Product entities.
func (iituo *InventoryItemTypeUpdateOne) RemoveProducts(p ...*Product) *InventoryItemTypeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return iituo.RemoveProductIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iituo *InventoryItemTypeUpdateOne) Select(field string, fields ...string) *InventoryItemTypeUpdateOne {
	iituo.fields = append([]string{field}, fields...)
	return iituo
}

// Save executes the query and returns the updated InventoryItemType entity.
func (iituo *InventoryItemTypeUpdateOne) Save(ctx context.Context) (*InventoryItemType, error) {
	var (
		err  error
		node *InventoryItemType
	)
	iituo.defaults()
	if len(iituo.hooks) == 0 {
		if err = iituo.check(); err != nil {
			return nil, err
		}
		node, err = iituo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*InventoryItemTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = iituo.check(); err != nil {
				return nil, err
			}
			iituo.mutation = mutation
			node, err = iituo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(iituo.hooks) - 1; i >= 0; i-- {
			mut = iituo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, iituo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (iituo *InventoryItemTypeUpdateOne) SaveX(ctx context.Context) *InventoryItemType {
	node, err := iituo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iituo *InventoryItemTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := iituo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iituo *InventoryItemTypeUpdateOne) ExecX(ctx context.Context) {
	if err := iituo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iituo *InventoryItemTypeUpdateOne) defaults() {
	if _, ok := iituo.mutation.UpdateTime(); !ok {
		v := inventoryitemtype.UpdateDefaultUpdateTime()
		iituo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iituo *InventoryItemTypeUpdateOne) check() error {
	if v, ok := iituo.mutation.HasTable(); ok {
		if err := inventoryitemtype.HasTableValidator(v); err != nil {
			return &ValidationError{Name: "has_table", err: fmt.Errorf("ent: validator failed for field \"has_table\": %w", err)}
		}
	}
	return nil
}

func (iituo *InventoryItemTypeUpdateOne) sqlSave(ctx context.Context) (_node *InventoryItemType, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   inventoryitemtype.Table,
			Columns: inventoryitemtype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: inventoryitemtype.FieldID,
			},
		},
	}
	id, ok := iituo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing InventoryItemType.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := iituo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, inventoryitemtype.FieldID)
		for _, f := range fields {
			if !inventoryitemtype.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != inventoryitemtype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iituo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iituo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: inventoryitemtype.FieldUpdateTime,
		})
	}
	if value, ok := iituo.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: inventoryitemtype.FieldStringRef,
		})
	}
	if iituo.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: inventoryitemtype.FieldStringRef,
		})
	}
	if value, ok := iituo.mutation.HasTable(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: inventoryitemtype.FieldHasTable,
		})
	}
	if iituo.mutation.HasTableCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: inventoryitemtype.FieldHasTable,
		})
	}
	if value, ok := iituo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: inventoryitemtype.FieldDescription,
		})
	}
	if iituo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: inventoryitemtype.FieldDescription,
		})
	}
	if iituo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   inventoryitemtype.ParentTable,
			Columns: []string{inventoryitemtype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: inventoryitemtype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iituo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   inventoryitemtype.ParentTable,
			Columns: []string{inventoryitemtype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: inventoryitemtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iituo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   inventoryitemtype.ChildrenTable,
			Columns: []string{inventoryitemtype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: inventoryitemtype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iituo.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !iituo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   inventoryitemtype.ChildrenTable,
			Columns: []string{inventoryitemtype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: inventoryitemtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iituo.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   inventoryitemtype.ChildrenTable,
			Columns: []string{inventoryitemtype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: inventoryitemtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iituo.mutation.ChildInventoryItemTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   inventoryitemtype.ChildInventoryItemTypesTable,
			Columns: inventoryitemtype.ChildInventoryItemTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: inventoryitemtype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iituo.mutation.RemovedChildInventoryItemTypesIDs(); len(nodes) > 0 && !iituo.mutation.ChildInventoryItemTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   inventoryitemtype.ChildInventoryItemTypesTable,
			Columns: inventoryitemtype.ChildInventoryItemTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: inventoryitemtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iituo.mutation.ChildInventoryItemTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   inventoryitemtype.ChildInventoryItemTypesTable,
			Columns: inventoryitemtype.ChildInventoryItemTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: inventoryitemtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iituo.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   inventoryitemtype.ProductsTable,
			Columns: []string{inventoryitemtype.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iituo.mutation.RemovedProductsIDs(); len(nodes) > 0 && !iituo.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   inventoryitemtype.ProductsTable,
			Columns: []string{inventoryitemtype.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iituo.mutation.ProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   inventoryitemtype.ProductsTable,
			Columns: []string{inventoryitemtype.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &InventoryItemType{config: iituo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iituo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{inventoryitemtype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
