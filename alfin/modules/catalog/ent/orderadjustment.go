// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/orderadjustment"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/orderheader"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/orderitem"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/orderitemshipgroup"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/orderitemshipgroupassoc"
)

// OrderAdjustment is the model entity for the OrderAdjustment schema.
type OrderAdjustment struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// StringRef holds the value of the "string_ref" field.
	StringRef string `json:"string_ref,omitempty"`
	// OrderAdjustmentTypeID holds the value of the "order_adjustment_type_id" field.
	OrderAdjustmentTypeID int `json:"order_adjustment_type_id,omitempty"`
	// OrderItemSeqID holds the value of the "order_item_seq_id" field.
	OrderItemSeqID int `json:"order_item_seq_id,omitempty"`
	// ShipGroupSeqID holds the value of the "ship_group_seq_id" field.
	ShipGroupSeqID int `json:"ship_group_seq_id,omitempty"`
	// Comments holds the value of the "comments" field.
	Comments string `json:"comments,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount float64 `json:"amount,omitempty"`
	// RecurringAmount holds the value of the "recurring_amount" field.
	RecurringAmount float64 `json:"recurring_amount,omitempty"`
	// AmountAlreadyIncluded holds the value of the "amount_already_included" field.
	AmountAlreadyIncluded float64 `json:"amount_already_included,omitempty"`
	// ProductPromoID holds the value of the "product_promo_id" field.
	ProductPromoID int `json:"product_promo_id,omitempty"`
	// ProductPromoRuleID holds the value of the "product_promo_rule_id" field.
	ProductPromoRuleID int `json:"product_promo_rule_id,omitempty"`
	// ProductPromoActionSeqID holds the value of the "product_promo_action_seq_id" field.
	ProductPromoActionSeqID int `json:"product_promo_action_seq_id,omitempty"`
	// ProductFeatureID holds the value of the "product_feature_id" field.
	ProductFeatureID int `json:"product_feature_id,omitempty"`
	// CorrespondingProductID holds the value of the "corresponding_product_id" field.
	CorrespondingProductID int `json:"corresponding_product_id,omitempty"`
	// TaxAuthorityRateSeqID holds the value of the "tax_authority_rate_seq_id" field.
	TaxAuthorityRateSeqID int `json:"tax_authority_rate_seq_id,omitempty"`
	// SourceReferenceID holds the value of the "source_reference_id" field.
	SourceReferenceID string `json:"source_reference_id,omitempty"`
	// SourcePercentage holds the value of the "source_percentage" field.
	SourcePercentage float64 `json:"source_percentage,omitempty"`
	// CustomerReferenceID holds the value of the "customer_reference_id" field.
	CustomerReferenceID string `json:"customer_reference_id,omitempty"`
	// PrimaryGeoID holds the value of the "primary_geo_id" field.
	PrimaryGeoID int `json:"primary_geo_id,omitempty"`
	// SecondaryGeoID holds the value of the "secondary_geo_id" field.
	SecondaryGeoID int `json:"secondary_geo_id,omitempty"`
	// ExemptAmount holds the value of the "exempt_amount" field.
	ExemptAmount float64 `json:"exempt_amount,omitempty"`
	// TaxAuthGeoID holds the value of the "tax_auth_geo_id" field.
	TaxAuthGeoID int `json:"tax_auth_geo_id,omitempty"`
	// TaxAuthPartyID holds the value of the "tax_auth_party_id" field.
	TaxAuthPartyID int `json:"tax_auth_party_id,omitempty"`
	// OverrideGlAccountID holds the value of the "override_gl_account_id" field.
	OverrideGlAccountID int `json:"override_gl_account_id,omitempty"`
	// IncludeInTax holds the value of the "include_in_tax" field.
	IncludeInTax orderadjustment.IncludeInTax `json:"include_in_tax,omitempty"`
	// IncludeInShipping holds the value of the "include_in_shipping" field.
	IncludeInShipping orderadjustment.IncludeInShipping `json:"include_in_shipping,omitempty"`
	// IsManual holds the value of the "is_manual" field.
	IsManual orderadjustment.IsManual `json:"is_manual,omitempty"`
	// CreatedDate holds the value of the "created_date" field.
	CreatedDate time.Time `json:"created_date,omitempty"`
	// CreatedByUserLogin holds the value of the "created_by_user_login" field.
	CreatedByUserLogin string `json:"created_by_user_login,omitempty"`
	// LastModifiedDate holds the value of the "last_modified_date" field.
	LastModifiedDate time.Time `json:"last_modified_date,omitempty"`
	// LastModifiedByUserLogin holds the value of the "last_modified_by_user_login" field.
	LastModifiedByUserLogin string `json:"last_modified_by_user_login,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OrderAdjustmentQuery when eager-loading is set.
	Edges                                         OrderAdjustmentEdges `json:"edges"`
	order_adjustment_children                     *int
	order_header_order_adjustments                *int
	order_item_order_adjustments                  *int
	order_item_ship_group_order_adjustments       *int
	order_item_ship_group_assoc_order_adjustments *int
}

// OrderAdjustmentEdges holds the relations/edges for other nodes in the graph.
type OrderAdjustmentEdges struct {
	// OrderHeader holds the value of the order_header edge.
	OrderHeader *OrderHeader `json:"order_header,omitempty"`
	// OrderItem holds the value of the order_item edge.
	OrderItem *OrderItem `json:"order_item,omitempty"`
	// OrderItemShipGroup holds the value of the order_item_ship_group edge.
	OrderItemShipGroup *OrderItemShipGroup `json:"order_item_ship_group,omitempty"`
	// OrderItemShipGroupAssoc holds the value of the order_item_ship_group_assoc edge.
	OrderItemShipGroupAssoc *OrderItemShipGroupAssoc `json:"order_item_ship_group_assoc,omitempty"`
	// Parent holds the value of the parent edge.
	Parent *OrderAdjustment `json:"parent,omitempty"`
	// Children holds the value of the children edge.
	Children []*OrderAdjustment `json:"children,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [6]bool
}

// OrderHeaderOrErr returns the OrderHeader value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderAdjustmentEdges) OrderHeaderOrErr() (*OrderHeader, error) {
	if e.loadedTypes[0] {
		if e.OrderHeader == nil {
			// The edge order_header was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: orderheader.Label}
		}
		return e.OrderHeader, nil
	}
	return nil, &NotLoadedError{edge: "order_header"}
}

// OrderItemOrErr returns the OrderItem value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderAdjustmentEdges) OrderItemOrErr() (*OrderItem, error) {
	if e.loadedTypes[1] {
		if e.OrderItem == nil {
			// The edge order_item was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: orderitem.Label}
		}
		return e.OrderItem, nil
	}
	return nil, &NotLoadedError{edge: "order_item"}
}

// OrderItemShipGroupOrErr returns the OrderItemShipGroup value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderAdjustmentEdges) OrderItemShipGroupOrErr() (*OrderItemShipGroup, error) {
	if e.loadedTypes[2] {
		if e.OrderItemShipGroup == nil {
			// The edge order_item_ship_group was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: orderitemshipgroup.Label}
		}
		return e.OrderItemShipGroup, nil
	}
	return nil, &NotLoadedError{edge: "order_item_ship_group"}
}

// OrderItemShipGroupAssocOrErr returns the OrderItemShipGroupAssoc value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderAdjustmentEdges) OrderItemShipGroupAssocOrErr() (*OrderItemShipGroupAssoc, error) {
	if e.loadedTypes[3] {
		if e.OrderItemShipGroupAssoc == nil {
			// The edge order_item_ship_group_assoc was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: orderitemshipgroupassoc.Label}
		}
		return e.OrderItemShipGroupAssoc, nil
	}
	return nil, &NotLoadedError{edge: "order_item_ship_group_assoc"}
}

// ParentOrErr returns the Parent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderAdjustmentEdges) ParentOrErr() (*OrderAdjustment, error) {
	if e.loadedTypes[4] {
		if e.Parent == nil {
			// The edge parent was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: orderadjustment.Label}
		}
		return e.Parent, nil
	}
	return nil, &NotLoadedError{edge: "parent"}
}

// ChildrenOrErr returns the Children value or an error if the edge
// was not loaded in eager-loading.
func (e OrderAdjustmentEdges) ChildrenOrErr() ([]*OrderAdjustment, error) {
	if e.loadedTypes[5] {
		return e.Children, nil
	}
	return nil, &NotLoadedError{edge: "children"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OrderAdjustment) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case orderadjustment.FieldAmount, orderadjustment.FieldRecurringAmount, orderadjustment.FieldAmountAlreadyIncluded, orderadjustment.FieldSourcePercentage, orderadjustment.FieldExemptAmount:
			values[i] = new(sql.NullFloat64)
		case orderadjustment.FieldID, orderadjustment.FieldOrderAdjustmentTypeID, orderadjustment.FieldOrderItemSeqID, orderadjustment.FieldShipGroupSeqID, orderadjustment.FieldProductPromoID, orderadjustment.FieldProductPromoRuleID, orderadjustment.FieldProductPromoActionSeqID, orderadjustment.FieldProductFeatureID, orderadjustment.FieldCorrespondingProductID, orderadjustment.FieldTaxAuthorityRateSeqID, orderadjustment.FieldPrimaryGeoID, orderadjustment.FieldSecondaryGeoID, orderadjustment.FieldTaxAuthGeoID, orderadjustment.FieldTaxAuthPartyID, orderadjustment.FieldOverrideGlAccountID:
			values[i] = new(sql.NullInt64)
		case orderadjustment.FieldStringRef, orderadjustment.FieldComments, orderadjustment.FieldDescription, orderadjustment.FieldSourceReferenceID, orderadjustment.FieldCustomerReferenceID, orderadjustment.FieldIncludeInTax, orderadjustment.FieldIncludeInShipping, orderadjustment.FieldIsManual, orderadjustment.FieldCreatedByUserLogin, orderadjustment.FieldLastModifiedByUserLogin:
			values[i] = new(sql.NullString)
		case orderadjustment.FieldCreateTime, orderadjustment.FieldUpdateTime, orderadjustment.FieldCreatedDate, orderadjustment.FieldLastModifiedDate:
			values[i] = new(sql.NullTime)
		case orderadjustment.ForeignKeys[0]: // order_adjustment_children
			values[i] = new(sql.NullInt64)
		case orderadjustment.ForeignKeys[1]: // order_header_order_adjustments
			values[i] = new(sql.NullInt64)
		case orderadjustment.ForeignKeys[2]: // order_item_order_adjustments
			values[i] = new(sql.NullInt64)
		case orderadjustment.ForeignKeys[3]: // order_item_ship_group_order_adjustments
			values[i] = new(sql.NullInt64)
		case orderadjustment.ForeignKeys[4]: // order_item_ship_group_assoc_order_adjustments
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type OrderAdjustment", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OrderAdjustment fields.
func (oa *OrderAdjustment) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case orderadjustment.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			oa.ID = int(value.Int64)
		case orderadjustment.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				oa.CreateTime = value.Time
			}
		case orderadjustment.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				oa.UpdateTime = value.Time
			}
		case orderadjustment.FieldStringRef:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field string_ref", values[i])
			} else if value.Valid {
				oa.StringRef = value.String
			}
		case orderadjustment.FieldOrderAdjustmentTypeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order_adjustment_type_id", values[i])
			} else if value.Valid {
				oa.OrderAdjustmentTypeID = int(value.Int64)
			}
		case orderadjustment.FieldOrderItemSeqID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order_item_seq_id", values[i])
			} else if value.Valid {
				oa.OrderItemSeqID = int(value.Int64)
			}
		case orderadjustment.FieldShipGroupSeqID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ship_group_seq_id", values[i])
			} else if value.Valid {
				oa.ShipGroupSeqID = int(value.Int64)
			}
		case orderadjustment.FieldComments:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field comments", values[i])
			} else if value.Valid {
				oa.Comments = value.String
			}
		case orderadjustment.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				oa.Description = value.String
			}
		case orderadjustment.FieldAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				oa.Amount = value.Float64
			}
		case orderadjustment.FieldRecurringAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field recurring_amount", values[i])
			} else if value.Valid {
				oa.RecurringAmount = value.Float64
			}
		case orderadjustment.FieldAmountAlreadyIncluded:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field amount_already_included", values[i])
			} else if value.Valid {
				oa.AmountAlreadyIncluded = value.Float64
			}
		case orderadjustment.FieldProductPromoID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field product_promo_id", values[i])
			} else if value.Valid {
				oa.ProductPromoID = int(value.Int64)
			}
		case orderadjustment.FieldProductPromoRuleID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field product_promo_rule_id", values[i])
			} else if value.Valid {
				oa.ProductPromoRuleID = int(value.Int64)
			}
		case orderadjustment.FieldProductPromoActionSeqID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field product_promo_action_seq_id", values[i])
			} else if value.Valid {
				oa.ProductPromoActionSeqID = int(value.Int64)
			}
		case orderadjustment.FieldProductFeatureID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field product_feature_id", values[i])
			} else if value.Valid {
				oa.ProductFeatureID = int(value.Int64)
			}
		case orderadjustment.FieldCorrespondingProductID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field corresponding_product_id", values[i])
			} else if value.Valid {
				oa.CorrespondingProductID = int(value.Int64)
			}
		case orderadjustment.FieldTaxAuthorityRateSeqID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tax_authority_rate_seq_id", values[i])
			} else if value.Valid {
				oa.TaxAuthorityRateSeqID = int(value.Int64)
			}
		case orderadjustment.FieldSourceReferenceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field source_reference_id", values[i])
			} else if value.Valid {
				oa.SourceReferenceID = value.String
			}
		case orderadjustment.FieldSourcePercentage:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field source_percentage", values[i])
			} else if value.Valid {
				oa.SourcePercentage = value.Float64
			}
		case orderadjustment.FieldCustomerReferenceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field customer_reference_id", values[i])
			} else if value.Valid {
				oa.CustomerReferenceID = value.String
			}
		case orderadjustment.FieldPrimaryGeoID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field primary_geo_id", values[i])
			} else if value.Valid {
				oa.PrimaryGeoID = int(value.Int64)
			}
		case orderadjustment.FieldSecondaryGeoID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field secondary_geo_id", values[i])
			} else if value.Valid {
				oa.SecondaryGeoID = int(value.Int64)
			}
		case orderadjustment.FieldExemptAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field exempt_amount", values[i])
			} else if value.Valid {
				oa.ExemptAmount = value.Float64
			}
		case orderadjustment.FieldTaxAuthGeoID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tax_auth_geo_id", values[i])
			} else if value.Valid {
				oa.TaxAuthGeoID = int(value.Int64)
			}
		case orderadjustment.FieldTaxAuthPartyID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tax_auth_party_id", values[i])
			} else if value.Valid {
				oa.TaxAuthPartyID = int(value.Int64)
			}
		case orderadjustment.FieldOverrideGlAccountID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field override_gl_account_id", values[i])
			} else if value.Valid {
				oa.OverrideGlAccountID = int(value.Int64)
			}
		case orderadjustment.FieldIncludeInTax:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field include_in_tax", values[i])
			} else if value.Valid {
				oa.IncludeInTax = orderadjustment.IncludeInTax(value.String)
			}
		case orderadjustment.FieldIncludeInShipping:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field include_in_shipping", values[i])
			} else if value.Valid {
				oa.IncludeInShipping = orderadjustment.IncludeInShipping(value.String)
			}
		case orderadjustment.FieldIsManual:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field is_manual", values[i])
			} else if value.Valid {
				oa.IsManual = orderadjustment.IsManual(value.String)
			}
		case orderadjustment.FieldCreatedDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_date", values[i])
			} else if value.Valid {
				oa.CreatedDate = value.Time
			}
		case orderadjustment.FieldCreatedByUserLogin:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by_user_login", values[i])
			} else if value.Valid {
				oa.CreatedByUserLogin = value.String
			}
		case orderadjustment.FieldLastModifiedDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_modified_date", values[i])
			} else if value.Valid {
				oa.LastModifiedDate = value.Time
			}
		case orderadjustment.FieldLastModifiedByUserLogin:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_modified_by_user_login", values[i])
			} else if value.Valid {
				oa.LastModifiedByUserLogin = value.String
			}
		case orderadjustment.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field order_adjustment_children", value)
			} else if value.Valid {
				oa.order_adjustment_children = new(int)
				*oa.order_adjustment_children = int(value.Int64)
			}
		case orderadjustment.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field order_header_order_adjustments", value)
			} else if value.Valid {
				oa.order_header_order_adjustments = new(int)
				*oa.order_header_order_adjustments = int(value.Int64)
			}
		case orderadjustment.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field order_item_order_adjustments", value)
			} else if value.Valid {
				oa.order_item_order_adjustments = new(int)
				*oa.order_item_order_adjustments = int(value.Int64)
			}
		case orderadjustment.ForeignKeys[3]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field order_item_ship_group_order_adjustments", value)
			} else if value.Valid {
				oa.order_item_ship_group_order_adjustments = new(int)
				*oa.order_item_ship_group_order_adjustments = int(value.Int64)
			}
		case orderadjustment.ForeignKeys[4]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field order_item_ship_group_assoc_order_adjustments", value)
			} else if value.Valid {
				oa.order_item_ship_group_assoc_order_adjustments = new(int)
				*oa.order_item_ship_group_assoc_order_adjustments = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryOrderHeader queries the "order_header" edge of the OrderAdjustment entity.
func (oa *OrderAdjustment) QueryOrderHeader() *OrderHeaderQuery {
	return (&OrderAdjustmentClient{config: oa.config}).QueryOrderHeader(oa)
}

// QueryOrderItem queries the "order_item" edge of the OrderAdjustment entity.
func (oa *OrderAdjustment) QueryOrderItem() *OrderItemQuery {
	return (&OrderAdjustmentClient{config: oa.config}).QueryOrderItem(oa)
}

// QueryOrderItemShipGroup queries the "order_item_ship_group" edge of the OrderAdjustment entity.
func (oa *OrderAdjustment) QueryOrderItemShipGroup() *OrderItemShipGroupQuery {
	return (&OrderAdjustmentClient{config: oa.config}).QueryOrderItemShipGroup(oa)
}

// QueryOrderItemShipGroupAssoc queries the "order_item_ship_group_assoc" edge of the OrderAdjustment entity.
func (oa *OrderAdjustment) QueryOrderItemShipGroupAssoc() *OrderItemShipGroupAssocQuery {
	return (&OrderAdjustmentClient{config: oa.config}).QueryOrderItemShipGroupAssoc(oa)
}

// QueryParent queries the "parent" edge of the OrderAdjustment entity.
func (oa *OrderAdjustment) QueryParent() *OrderAdjustmentQuery {
	return (&OrderAdjustmentClient{config: oa.config}).QueryParent(oa)
}

// QueryChildren queries the "children" edge of the OrderAdjustment entity.
func (oa *OrderAdjustment) QueryChildren() *OrderAdjustmentQuery {
	return (&OrderAdjustmentClient{config: oa.config}).QueryChildren(oa)
}

// Update returns a builder for updating this OrderAdjustment.
// Note that you need to call OrderAdjustment.Unwrap() before calling this method if this OrderAdjustment
// was returned from a transaction, and the transaction was committed or rolled back.
func (oa *OrderAdjustment) Update() *OrderAdjustmentUpdateOne {
	return (&OrderAdjustmentClient{config: oa.config}).UpdateOne(oa)
}

// Unwrap unwraps the OrderAdjustment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (oa *OrderAdjustment) Unwrap() *OrderAdjustment {
	tx, ok := oa.config.driver.(*txDriver)
	if !ok {
		panic("ent: OrderAdjustment is not a transactional entity")
	}
	oa.config.driver = tx.drv
	return oa
}

// String implements the fmt.Stringer.
func (oa *OrderAdjustment) String() string {
	var builder strings.Builder
	builder.WriteString("OrderAdjustment(")
	builder.WriteString(fmt.Sprintf("id=%v", oa.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(oa.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(oa.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", string_ref=")
	builder.WriteString(oa.StringRef)
	builder.WriteString(", order_adjustment_type_id=")
	builder.WriteString(fmt.Sprintf("%v", oa.OrderAdjustmentTypeID))
	builder.WriteString(", order_item_seq_id=")
	builder.WriteString(fmt.Sprintf("%v", oa.OrderItemSeqID))
	builder.WriteString(", ship_group_seq_id=")
	builder.WriteString(fmt.Sprintf("%v", oa.ShipGroupSeqID))
	builder.WriteString(", comments=")
	builder.WriteString(oa.Comments)
	builder.WriteString(", description=")
	builder.WriteString(oa.Description)
	builder.WriteString(", amount=")
	builder.WriteString(fmt.Sprintf("%v", oa.Amount))
	builder.WriteString(", recurring_amount=")
	builder.WriteString(fmt.Sprintf("%v", oa.RecurringAmount))
	builder.WriteString(", amount_already_included=")
	builder.WriteString(fmt.Sprintf("%v", oa.AmountAlreadyIncluded))
	builder.WriteString(", product_promo_id=")
	builder.WriteString(fmt.Sprintf("%v", oa.ProductPromoID))
	builder.WriteString(", product_promo_rule_id=")
	builder.WriteString(fmt.Sprintf("%v", oa.ProductPromoRuleID))
	builder.WriteString(", product_promo_action_seq_id=")
	builder.WriteString(fmt.Sprintf("%v", oa.ProductPromoActionSeqID))
	builder.WriteString(", product_feature_id=")
	builder.WriteString(fmt.Sprintf("%v", oa.ProductFeatureID))
	builder.WriteString(", corresponding_product_id=")
	builder.WriteString(fmt.Sprintf("%v", oa.CorrespondingProductID))
	builder.WriteString(", tax_authority_rate_seq_id=")
	builder.WriteString(fmt.Sprintf("%v", oa.TaxAuthorityRateSeqID))
	builder.WriteString(", source_reference_id=")
	builder.WriteString(oa.SourceReferenceID)
	builder.WriteString(", source_percentage=")
	builder.WriteString(fmt.Sprintf("%v", oa.SourcePercentage))
	builder.WriteString(", customer_reference_id=")
	builder.WriteString(oa.CustomerReferenceID)
	builder.WriteString(", primary_geo_id=")
	builder.WriteString(fmt.Sprintf("%v", oa.PrimaryGeoID))
	builder.WriteString(", secondary_geo_id=")
	builder.WriteString(fmt.Sprintf("%v", oa.SecondaryGeoID))
	builder.WriteString(", exempt_amount=")
	builder.WriteString(fmt.Sprintf("%v", oa.ExemptAmount))
	builder.WriteString(", tax_auth_geo_id=")
	builder.WriteString(fmt.Sprintf("%v", oa.TaxAuthGeoID))
	builder.WriteString(", tax_auth_party_id=")
	builder.WriteString(fmt.Sprintf("%v", oa.TaxAuthPartyID))
	builder.WriteString(", override_gl_account_id=")
	builder.WriteString(fmt.Sprintf("%v", oa.OverrideGlAccountID))
	builder.WriteString(", include_in_tax=")
	builder.WriteString(fmt.Sprintf("%v", oa.IncludeInTax))
	builder.WriteString(", include_in_shipping=")
	builder.WriteString(fmt.Sprintf("%v", oa.IncludeInShipping))
	builder.WriteString(", is_manual=")
	builder.WriteString(fmt.Sprintf("%v", oa.IsManual))
	builder.WriteString(", created_date=")
	builder.WriteString(oa.CreatedDate.Format(time.ANSIC))
	builder.WriteString(", created_by_user_login=")
	builder.WriteString(oa.CreatedByUserLogin)
	builder.WriteString(", last_modified_date=")
	builder.WriteString(oa.LastModifiedDate.Format(time.ANSIC))
	builder.WriteString(", last_modified_by_user_login=")
	builder.WriteString(oa.LastModifiedByUserLogin)
	builder.WriteByte(')')
	return builder.String()
}

// OrderAdjustments is a parsable slice of OrderAdjustment.
type OrderAdjustments []*OrderAdjustment

func (oa OrderAdjustments) config(cfg config) {
	for _i := range oa {
		oa[_i].config = cfg
	}
}
