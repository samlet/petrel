// Code generated by entc, DO NOT EDIT.

package orderadjustment

import (
	"fmt"
	"time"
)

const (
	// Label holds the string label denoting the orderadjustment type in the database.
	Label = "order_adjustment"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldStringRef holds the string denoting the string_ref field in the database.
	FieldStringRef = "string_ref"
	// FieldOrderAdjustmentTypeID holds the string denoting the order_adjustment_type_id field in the database.
	FieldOrderAdjustmentTypeID = "order_adjustment_type_id"
	// FieldOrderItemSeqID holds the string denoting the order_item_seq_id field in the database.
	FieldOrderItemSeqID = "order_item_seq_id"
	// FieldShipGroupSeqID holds the string denoting the ship_group_seq_id field in the database.
	FieldShipGroupSeqID = "ship_group_seq_id"
	// FieldComments holds the string denoting the comments field in the database.
	FieldComments = "comments"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldAmount holds the string denoting the amount field in the database.
	FieldAmount = "amount"
	// FieldRecurringAmount holds the string denoting the recurring_amount field in the database.
	FieldRecurringAmount = "recurring_amount"
	// FieldAmountAlreadyIncluded holds the string denoting the amount_already_included field in the database.
	FieldAmountAlreadyIncluded = "amount_already_included"
	// FieldProductPromoID holds the string denoting the product_promo_id field in the database.
	FieldProductPromoID = "product_promo_id"
	// FieldProductPromoRuleID holds the string denoting the product_promo_rule_id field in the database.
	FieldProductPromoRuleID = "product_promo_rule_id"
	// FieldProductPromoActionSeqID holds the string denoting the product_promo_action_seq_id field in the database.
	FieldProductPromoActionSeqID = "product_promo_action_seq_id"
	// FieldProductFeatureID holds the string denoting the product_feature_id field in the database.
	FieldProductFeatureID = "product_feature_id"
	// FieldCorrespondingProductID holds the string denoting the corresponding_product_id field in the database.
	FieldCorrespondingProductID = "corresponding_product_id"
	// FieldTaxAuthorityRateSeqID holds the string denoting the tax_authority_rate_seq_id field in the database.
	FieldTaxAuthorityRateSeqID = "tax_authority_rate_seq_id"
	// FieldSourceReferenceID holds the string denoting the source_reference_id field in the database.
	FieldSourceReferenceID = "source_reference_id"
	// FieldSourcePercentage holds the string denoting the source_percentage field in the database.
	FieldSourcePercentage = "source_percentage"
	// FieldCustomerReferenceID holds the string denoting the customer_reference_id field in the database.
	FieldCustomerReferenceID = "customer_reference_id"
	// FieldPrimaryGeoID holds the string denoting the primary_geo_id field in the database.
	FieldPrimaryGeoID = "primary_geo_id"
	// FieldSecondaryGeoID holds the string denoting the secondary_geo_id field in the database.
	FieldSecondaryGeoID = "secondary_geo_id"
	// FieldExemptAmount holds the string denoting the exempt_amount field in the database.
	FieldExemptAmount = "exempt_amount"
	// FieldTaxAuthGeoID holds the string denoting the tax_auth_geo_id field in the database.
	FieldTaxAuthGeoID = "tax_auth_geo_id"
	// FieldTaxAuthPartyID holds the string denoting the tax_auth_party_id field in the database.
	FieldTaxAuthPartyID = "tax_auth_party_id"
	// FieldOverrideGlAccountID holds the string denoting the override_gl_account_id field in the database.
	FieldOverrideGlAccountID = "override_gl_account_id"
	// FieldIncludeInTax holds the string denoting the include_in_tax field in the database.
	FieldIncludeInTax = "include_in_tax"
	// FieldIncludeInShipping holds the string denoting the include_in_shipping field in the database.
	FieldIncludeInShipping = "include_in_shipping"
	// FieldIsManual holds the string denoting the is_manual field in the database.
	FieldIsManual = "is_manual"
	// FieldCreatedDate holds the string denoting the created_date field in the database.
	FieldCreatedDate = "created_date"
	// FieldCreatedByUserLogin holds the string denoting the created_by_user_login field in the database.
	FieldCreatedByUserLogin = "created_by_user_login"
	// FieldLastModifiedDate holds the string denoting the last_modified_date field in the database.
	FieldLastModifiedDate = "last_modified_date"
	// FieldLastModifiedByUserLogin holds the string denoting the last_modified_by_user_login field in the database.
	FieldLastModifiedByUserLogin = "last_modified_by_user_login"
	// EdgeOrderHeader holds the string denoting the order_header edge name in mutations.
	EdgeOrderHeader = "order_header"
	// EdgeOrderItem holds the string denoting the order_item edge name in mutations.
	EdgeOrderItem = "order_item"
	// EdgeOrderItemShipGroup holds the string denoting the order_item_ship_group edge name in mutations.
	EdgeOrderItemShipGroup = "order_item_ship_group"
	// EdgeOrderItemShipGroupAssoc holds the string denoting the order_item_ship_group_assoc edge name in mutations.
	EdgeOrderItemShipGroupAssoc = "order_item_ship_group_assoc"
	// EdgeParent holds the string denoting the parent edge name in mutations.
	EdgeParent = "parent"
	// EdgeChildren holds the string denoting the children edge name in mutations.
	EdgeChildren = "children"
	// Table holds the table name of the orderadjustment in the database.
	Table = "order_adjustments"
	// OrderHeaderTable is the table the holds the order_header relation/edge.
	OrderHeaderTable = "order_adjustments"
	// OrderHeaderInverseTable is the table name for the OrderHeader entity.
	// It exists in this package in order to avoid circular dependency with the "orderheader" package.
	OrderHeaderInverseTable = "order_headers"
	// OrderHeaderColumn is the table column denoting the order_header relation/edge.
	OrderHeaderColumn = "order_header_order_adjustments"
	// OrderItemTable is the table the holds the order_item relation/edge.
	OrderItemTable = "order_adjustments"
	// OrderItemInverseTable is the table name for the OrderItem entity.
	// It exists in this package in order to avoid circular dependency with the "orderitem" package.
	OrderItemInverseTable = "order_items"
	// OrderItemColumn is the table column denoting the order_item relation/edge.
	OrderItemColumn = "order_item_order_adjustments"
	// OrderItemShipGroupTable is the table the holds the order_item_ship_group relation/edge.
	OrderItemShipGroupTable = "order_adjustments"
	// OrderItemShipGroupInverseTable is the table name for the OrderItemShipGroup entity.
	// It exists in this package in order to avoid circular dependency with the "orderitemshipgroup" package.
	OrderItemShipGroupInverseTable = "order_item_ship_groups"
	// OrderItemShipGroupColumn is the table column denoting the order_item_ship_group relation/edge.
	OrderItemShipGroupColumn = "order_item_ship_group_order_adjustments"
	// OrderItemShipGroupAssocTable is the table the holds the order_item_ship_group_assoc relation/edge.
	OrderItemShipGroupAssocTable = "order_adjustments"
	// OrderItemShipGroupAssocInverseTable is the table name for the OrderItemShipGroupAssoc entity.
	// It exists in this package in order to avoid circular dependency with the "orderitemshipgroupassoc" package.
	OrderItemShipGroupAssocInverseTable = "order_item_ship_group_assocs"
	// OrderItemShipGroupAssocColumn is the table column denoting the order_item_ship_group_assoc relation/edge.
	OrderItemShipGroupAssocColumn = "order_item_ship_group_assoc_order_adjustments"
	// ParentTable is the table the holds the parent relation/edge.
	ParentTable = "order_adjustments"
	// ParentColumn is the table column denoting the parent relation/edge.
	ParentColumn = "order_adjustment_children"
	// ChildrenTable is the table the holds the children relation/edge.
	ChildrenTable = "order_adjustments"
	// ChildrenColumn is the table column denoting the children relation/edge.
	ChildrenColumn = "order_adjustment_children"
)

// Columns holds all SQL columns for orderadjustment fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldStringRef,
	FieldOrderAdjustmentTypeID,
	FieldOrderItemSeqID,
	FieldShipGroupSeqID,
	FieldComments,
	FieldDescription,
	FieldAmount,
	FieldRecurringAmount,
	FieldAmountAlreadyIncluded,
	FieldProductPromoID,
	FieldProductPromoRuleID,
	FieldProductPromoActionSeqID,
	FieldProductFeatureID,
	FieldCorrespondingProductID,
	FieldTaxAuthorityRateSeqID,
	FieldSourceReferenceID,
	FieldSourcePercentage,
	FieldCustomerReferenceID,
	FieldPrimaryGeoID,
	FieldSecondaryGeoID,
	FieldExemptAmount,
	FieldTaxAuthGeoID,
	FieldTaxAuthPartyID,
	FieldOverrideGlAccountID,
	FieldIncludeInTax,
	FieldIncludeInShipping,
	FieldIsManual,
	FieldCreatedDate,
	FieldCreatedByUserLogin,
	FieldLastModifiedDate,
	FieldLastModifiedByUserLogin,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "order_adjustments"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"order_adjustment_children",
	"order_header_order_adjustments",
	"order_item_order_adjustments",
	"order_item_ship_group_order_adjustments",
	"order_item_ship_group_assoc_order_adjustments",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// SourceReferenceIDValidator is a validator for the "source_reference_id" field. It is called by the builders before save.
	SourceReferenceIDValidator func(string) error
	// CustomerReferenceIDValidator is a validator for the "customer_reference_id" field. It is called by the builders before save.
	CustomerReferenceIDValidator func(string) error
	// DefaultCreatedDate holds the default value on creation for the "created_date" field.
	DefaultCreatedDate func() time.Time
	// DefaultLastModifiedDate holds the default value on creation for the "last_modified_date" field.
	DefaultLastModifiedDate func() time.Time
)

// IncludeInTax defines the type for the "include_in_tax" enum field.
type IncludeInTax string

// IncludeInTax values.
const (
	IncludeInTaxYes     IncludeInTax = "Yes"
	IncludeInTaxNo      IncludeInTax = "No"
	IncludeInTaxUnknown IncludeInTax = "Unknown"
)

func (iit IncludeInTax) String() string {
	return string(iit)
}

// IncludeInTaxValidator is a validator for the "include_in_tax" field enum values. It is called by the builders before save.
func IncludeInTaxValidator(iit IncludeInTax) error {
	switch iit {
	case IncludeInTaxYes, IncludeInTaxNo, IncludeInTaxUnknown:
		return nil
	default:
		return fmt.Errorf("orderadjustment: invalid enum value for include_in_tax field: %q", iit)
	}
}

// IncludeInShipping defines the type for the "include_in_shipping" enum field.
type IncludeInShipping string

// IncludeInShipping values.
const (
	IncludeInShippingYes     IncludeInShipping = "Yes"
	IncludeInShippingNo      IncludeInShipping = "No"
	IncludeInShippingUnknown IncludeInShipping = "Unknown"
)

func (iis IncludeInShipping) String() string {
	return string(iis)
}

// IncludeInShippingValidator is a validator for the "include_in_shipping" field enum values. It is called by the builders before save.
func IncludeInShippingValidator(iis IncludeInShipping) error {
	switch iis {
	case IncludeInShippingYes, IncludeInShippingNo, IncludeInShippingUnknown:
		return nil
	default:
		return fmt.Errorf("orderadjustment: invalid enum value for include_in_shipping field: %q", iis)
	}
}

// IsManual defines the type for the "is_manual" enum field.
type IsManual string

// IsManual values.
const (
	IsManualYes     IsManual = "Yes"
	IsManualNo      IsManual = "No"
	IsManualUnknown IsManual = "Unknown"
)

func (im IsManual) String() string {
	return string(im)
}

// IsManualValidator is a validator for the "is_manual" field enum values. It is called by the builders before save.
func IsManualValidator(im IsManual) error {
	switch im {
	case IsManualYes, IsManualNo, IsManualUnknown:
		return nil
	default:
		return fmt.Errorf("orderadjustment: invalid enum value for is_manual field: %q", im)
	}
}
