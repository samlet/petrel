// Code generated by entc, DO NOT EDIT.

package orderadjustment

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// StringRef applies equality check predicate on the "string_ref" field. It's identical to StringRefEQ.
func StringRef(v string) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStringRef), v))
	})
}

// OrderAdjustmentTypeID applies equality check predicate on the "order_adjustment_type_id" field. It's identical to OrderAdjustmentTypeIDEQ.
func OrderAdjustmentTypeID(v int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderAdjustmentTypeID), v))
	})
}

// OrderItemSeqID applies equality check predicate on the "order_item_seq_id" field. It's identical to OrderItemSeqIDEQ.
func OrderItemSeqID(v int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderItemSeqID), v))
	})
}

// ShipGroupSeqID applies equality check predicate on the "ship_group_seq_id" field. It's identical to ShipGroupSeqIDEQ.
func ShipGroupSeqID(v int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShipGroupSeqID), v))
	})
}

// Comments applies equality check predicate on the "comments" field. It's identical to CommentsEQ.
func Comments(v string) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldComments), v))
	})
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// Amount applies equality check predicate on the "amount" field. It's identical to AmountEQ.
func Amount(v float64) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAmount), v))
	})
}

// RecurringAmount applies equality check predicate on the "recurring_amount" field. It's identical to RecurringAmountEQ.
func RecurringAmount(v float64) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRecurringAmount), v))
	})
}

// AmountAlreadyIncluded applies equality check predicate on the "amount_already_included" field. It's identical to AmountAlreadyIncludedEQ.
func AmountAlreadyIncluded(v float64) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAmountAlreadyIncluded), v))
	})
}

// ProductPromoID applies equality check predicate on the "product_promo_id" field. It's identical to ProductPromoIDEQ.
func ProductPromoID(v int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProductPromoID), v))
	})
}

// ProductPromoRuleID applies equality check predicate on the "product_promo_rule_id" field. It's identical to ProductPromoRuleIDEQ.
func ProductPromoRuleID(v int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProductPromoRuleID), v))
	})
}

// ProductPromoActionSeqID applies equality check predicate on the "product_promo_action_seq_id" field. It's identical to ProductPromoActionSeqIDEQ.
func ProductPromoActionSeqID(v int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProductPromoActionSeqID), v))
	})
}

// ProductFeatureID applies equality check predicate on the "product_feature_id" field. It's identical to ProductFeatureIDEQ.
func ProductFeatureID(v int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProductFeatureID), v))
	})
}

// CorrespondingProductID applies equality check predicate on the "corresponding_product_id" field. It's identical to CorrespondingProductIDEQ.
func CorrespondingProductID(v int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCorrespondingProductID), v))
	})
}

// TaxAuthorityRateSeqID applies equality check predicate on the "tax_authority_rate_seq_id" field. It's identical to TaxAuthorityRateSeqIDEQ.
func TaxAuthorityRateSeqID(v int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTaxAuthorityRateSeqID), v))
	})
}

// SourceReferenceID applies equality check predicate on the "source_reference_id" field. It's identical to SourceReferenceIDEQ.
func SourceReferenceID(v string) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSourceReferenceID), v))
	})
}

// SourcePercentage applies equality check predicate on the "source_percentage" field. It's identical to SourcePercentageEQ.
func SourcePercentage(v float64) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSourcePercentage), v))
	})
}

// CustomerReferenceID applies equality check predicate on the "customer_reference_id" field. It's identical to CustomerReferenceIDEQ.
func CustomerReferenceID(v string) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCustomerReferenceID), v))
	})
}

// PrimaryGeoID applies equality check predicate on the "primary_geo_id" field. It's identical to PrimaryGeoIDEQ.
func PrimaryGeoID(v int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrimaryGeoID), v))
	})
}

// SecondaryGeoID applies equality check predicate on the "secondary_geo_id" field. It's identical to SecondaryGeoIDEQ.
func SecondaryGeoID(v int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSecondaryGeoID), v))
	})
}

// ExemptAmount applies equality check predicate on the "exempt_amount" field. It's identical to ExemptAmountEQ.
func ExemptAmount(v float64) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExemptAmount), v))
	})
}

// TaxAuthGeoID applies equality check predicate on the "tax_auth_geo_id" field. It's identical to TaxAuthGeoIDEQ.
func TaxAuthGeoID(v int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTaxAuthGeoID), v))
	})
}

// TaxAuthPartyID applies equality check predicate on the "tax_auth_party_id" field. It's identical to TaxAuthPartyIDEQ.
func TaxAuthPartyID(v int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTaxAuthPartyID), v))
	})
}

// OverrideGlAccountID applies equality check predicate on the "override_gl_account_id" field. It's identical to OverrideGlAccountIDEQ.
func OverrideGlAccountID(v int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOverrideGlAccountID), v))
	})
}

// CreatedDate applies equality check predicate on the "created_date" field. It's identical to CreatedDateEQ.
func CreatedDate(v time.Time) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedDate), v))
	})
}

// CreatedByUserLogin applies equality check predicate on the "created_by_user_login" field. It's identical to CreatedByUserLoginEQ.
func CreatedByUserLogin(v string) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedByUserLogin), v))
	})
}

// LastModifiedDate applies equality check predicate on the "last_modified_date" field. It's identical to LastModifiedDateEQ.
func LastModifiedDate(v time.Time) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastModifiedDate), v))
	})
}

// LastModifiedByUserLogin applies equality check predicate on the "last_modified_by_user_login" field. It's identical to LastModifiedByUserLoginEQ.
func LastModifiedByUserLogin(v string) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastModifiedByUserLogin), v))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.OrderAdjustment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.OrderAdjustment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), v))
	})
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.OrderAdjustment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.OrderAdjustment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateTime), v))
	})
}

// StringRefEQ applies the EQ predicate on the "string_ref" field.
func StringRefEQ(v string) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStringRef), v))
	})
}

// StringRefNEQ applies the NEQ predicate on the "string_ref" field.
func StringRefNEQ(v string) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStringRef), v))
	})
}

// StringRefIn applies the In predicate on the "string_ref" field.
func StringRefIn(vs ...string) predicate.OrderAdjustment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStringRef), v...))
	})
}

// StringRefNotIn applies the NotIn predicate on the "string_ref" field.
func StringRefNotIn(vs ...string) predicate.OrderAdjustment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStringRef), v...))
	})
}

// StringRefGT applies the GT predicate on the "string_ref" field.
func StringRefGT(v string) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStringRef), v))
	})
}

// StringRefGTE applies the GTE predicate on the "string_ref" field.
func StringRefGTE(v string) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStringRef), v))
	})
}

// StringRefLT applies the LT predicate on the "string_ref" field.
func StringRefLT(v string) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStringRef), v))
	})
}

// StringRefLTE applies the LTE predicate on the "string_ref" field.
func StringRefLTE(v string) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStringRef), v))
	})
}

// StringRefContains applies the Contains predicate on the "string_ref" field.
func StringRefContains(v string) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStringRef), v))
	})
}

// StringRefHasPrefix applies the HasPrefix predicate on the "string_ref" field.
func StringRefHasPrefix(v string) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStringRef), v))
	})
}

// StringRefHasSuffix applies the HasSuffix predicate on the "string_ref" field.
func StringRefHasSuffix(v string) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStringRef), v))
	})
}

// StringRefIsNil applies the IsNil predicate on the "string_ref" field.
func StringRefIsNil() predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStringRef)))
	})
}

// StringRefNotNil applies the NotNil predicate on the "string_ref" field.
func StringRefNotNil() predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStringRef)))
	})
}

// StringRefEqualFold applies the EqualFold predicate on the "string_ref" field.
func StringRefEqualFold(v string) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStringRef), v))
	})
}

// StringRefContainsFold applies the ContainsFold predicate on the "string_ref" field.
func StringRefContainsFold(v string) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStringRef), v))
	})
}

// OrderAdjustmentTypeIDEQ applies the EQ predicate on the "order_adjustment_type_id" field.
func OrderAdjustmentTypeIDEQ(v int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderAdjustmentTypeID), v))
	})
}

// OrderAdjustmentTypeIDNEQ applies the NEQ predicate on the "order_adjustment_type_id" field.
func OrderAdjustmentTypeIDNEQ(v int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOrderAdjustmentTypeID), v))
	})
}

// OrderAdjustmentTypeIDIn applies the In predicate on the "order_adjustment_type_id" field.
func OrderAdjustmentTypeIDIn(vs ...int) predicate.OrderAdjustment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOrderAdjustmentTypeID), v...))
	})
}

// OrderAdjustmentTypeIDNotIn applies the NotIn predicate on the "order_adjustment_type_id" field.
func OrderAdjustmentTypeIDNotIn(vs ...int) predicate.OrderAdjustment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOrderAdjustmentTypeID), v...))
	})
}

// OrderAdjustmentTypeIDGT applies the GT predicate on the "order_adjustment_type_id" field.
func OrderAdjustmentTypeIDGT(v int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOrderAdjustmentTypeID), v))
	})
}

// OrderAdjustmentTypeIDGTE applies the GTE predicate on the "order_adjustment_type_id" field.
func OrderAdjustmentTypeIDGTE(v int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOrderAdjustmentTypeID), v))
	})
}

// OrderAdjustmentTypeIDLT applies the LT predicate on the "order_adjustment_type_id" field.
func OrderAdjustmentTypeIDLT(v int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOrderAdjustmentTypeID), v))
	})
}

// OrderAdjustmentTypeIDLTE applies the LTE predicate on the "order_adjustment_type_id" field.
func OrderAdjustmentTypeIDLTE(v int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOrderAdjustmentTypeID), v))
	})
}

// OrderAdjustmentTypeIDIsNil applies the IsNil predicate on the "order_adjustment_type_id" field.
func OrderAdjustmentTypeIDIsNil() predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOrderAdjustmentTypeID)))
	})
}

// OrderAdjustmentTypeIDNotNil applies the NotNil predicate on the "order_adjustment_type_id" field.
func OrderAdjustmentTypeIDNotNil() predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOrderAdjustmentTypeID)))
	})
}

// OrderItemSeqIDEQ applies the EQ predicate on the "order_item_seq_id" field.
func OrderItemSeqIDEQ(v int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderItemSeqID), v))
	})
}

// OrderItemSeqIDNEQ applies the NEQ predicate on the "order_item_seq_id" field.
func OrderItemSeqIDNEQ(v int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOrderItemSeqID), v))
	})
}

// OrderItemSeqIDIn applies the In predicate on the "order_item_seq_id" field.
func OrderItemSeqIDIn(vs ...int) predicate.OrderAdjustment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOrderItemSeqID), v...))
	})
}

// OrderItemSeqIDNotIn applies the NotIn predicate on the "order_item_seq_id" field.
func OrderItemSeqIDNotIn(vs ...int) predicate.OrderAdjustment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOrderItemSeqID), v...))
	})
}

// OrderItemSeqIDGT applies the GT predicate on the "order_item_seq_id" field.
func OrderItemSeqIDGT(v int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOrderItemSeqID), v))
	})
}

// OrderItemSeqIDGTE applies the GTE predicate on the "order_item_seq_id" field.
func OrderItemSeqIDGTE(v int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOrderItemSeqID), v))
	})
}

// OrderItemSeqIDLT applies the LT predicate on the "order_item_seq_id" field.
func OrderItemSeqIDLT(v int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOrderItemSeqID), v))
	})
}

// OrderItemSeqIDLTE applies the LTE predicate on the "order_item_seq_id" field.
func OrderItemSeqIDLTE(v int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOrderItemSeqID), v))
	})
}

// OrderItemSeqIDIsNil applies the IsNil predicate on the "order_item_seq_id" field.
func OrderItemSeqIDIsNil() predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOrderItemSeqID)))
	})
}

// OrderItemSeqIDNotNil applies the NotNil predicate on the "order_item_seq_id" field.
func OrderItemSeqIDNotNil() predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOrderItemSeqID)))
	})
}

// ShipGroupSeqIDEQ applies the EQ predicate on the "ship_group_seq_id" field.
func ShipGroupSeqIDEQ(v int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShipGroupSeqID), v))
	})
}

// ShipGroupSeqIDNEQ applies the NEQ predicate on the "ship_group_seq_id" field.
func ShipGroupSeqIDNEQ(v int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShipGroupSeqID), v))
	})
}

// ShipGroupSeqIDIn applies the In predicate on the "ship_group_seq_id" field.
func ShipGroupSeqIDIn(vs ...int) predicate.OrderAdjustment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldShipGroupSeqID), v...))
	})
}

// ShipGroupSeqIDNotIn applies the NotIn predicate on the "ship_group_seq_id" field.
func ShipGroupSeqIDNotIn(vs ...int) predicate.OrderAdjustment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldShipGroupSeqID), v...))
	})
}

// ShipGroupSeqIDGT applies the GT predicate on the "ship_group_seq_id" field.
func ShipGroupSeqIDGT(v int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShipGroupSeqID), v))
	})
}

// ShipGroupSeqIDGTE applies the GTE predicate on the "ship_group_seq_id" field.
func ShipGroupSeqIDGTE(v int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShipGroupSeqID), v))
	})
}

// ShipGroupSeqIDLT applies the LT predicate on the "ship_group_seq_id" field.
func ShipGroupSeqIDLT(v int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShipGroupSeqID), v))
	})
}

// ShipGroupSeqIDLTE applies the LTE predicate on the "ship_group_seq_id" field.
func ShipGroupSeqIDLTE(v int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShipGroupSeqID), v))
	})
}

// ShipGroupSeqIDIsNil applies the IsNil predicate on the "ship_group_seq_id" field.
func ShipGroupSeqIDIsNil() predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldShipGroupSeqID)))
	})
}

// ShipGroupSeqIDNotNil applies the NotNil predicate on the "ship_group_seq_id" field.
func ShipGroupSeqIDNotNil() predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldShipGroupSeqID)))
	})
}

// CommentsEQ applies the EQ predicate on the "comments" field.
func CommentsEQ(v string) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldComments), v))
	})
}

// CommentsNEQ applies the NEQ predicate on the "comments" field.
func CommentsNEQ(v string) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldComments), v))
	})
}

// CommentsIn applies the In predicate on the "comments" field.
func CommentsIn(vs ...string) predicate.OrderAdjustment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldComments), v...))
	})
}

// CommentsNotIn applies the NotIn predicate on the "comments" field.
func CommentsNotIn(vs ...string) predicate.OrderAdjustment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldComments), v...))
	})
}

// CommentsGT applies the GT predicate on the "comments" field.
func CommentsGT(v string) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldComments), v))
	})
}

// CommentsGTE applies the GTE predicate on the "comments" field.
func CommentsGTE(v string) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldComments), v))
	})
}

// CommentsLT applies the LT predicate on the "comments" field.
func CommentsLT(v string) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldComments), v))
	})
}

// CommentsLTE applies the LTE predicate on the "comments" field.
func CommentsLTE(v string) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldComments), v))
	})
}

// CommentsContains applies the Contains predicate on the "comments" field.
func CommentsContains(v string) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldComments), v))
	})
}

// CommentsHasPrefix applies the HasPrefix predicate on the "comments" field.
func CommentsHasPrefix(v string) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldComments), v))
	})
}

// CommentsHasSuffix applies the HasSuffix predicate on the "comments" field.
func CommentsHasSuffix(v string) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldComments), v))
	})
}

// CommentsIsNil applies the IsNil predicate on the "comments" field.
func CommentsIsNil() predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldComments)))
	})
}

// CommentsNotNil applies the NotNil predicate on the "comments" field.
func CommentsNotNil() predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldComments)))
	})
}

// CommentsEqualFold applies the EqualFold predicate on the "comments" field.
func CommentsEqualFold(v string) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldComments), v))
	})
}

// CommentsContainsFold applies the ContainsFold predicate on the "comments" field.
func CommentsContainsFold(v string) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldComments), v))
	})
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDescription), v))
	})
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.OrderAdjustment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDescription), v...))
	})
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.OrderAdjustment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDescription), v...))
	})
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDescription), v))
	})
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDescription), v))
	})
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDescription), v))
	})
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDescription), v))
	})
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDescription), v))
	})
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDescription), v))
	})
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDescription), v))
	})
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDescription)))
	})
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDescription)))
	})
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDescription), v))
	})
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDescription), v))
	})
}

// AmountEQ applies the EQ predicate on the "amount" field.
func AmountEQ(v float64) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAmount), v))
	})
}

// AmountNEQ applies the NEQ predicate on the "amount" field.
func AmountNEQ(v float64) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAmount), v))
	})
}

// AmountIn applies the In predicate on the "amount" field.
func AmountIn(vs ...float64) predicate.OrderAdjustment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAmount), v...))
	})
}

// AmountNotIn applies the NotIn predicate on the "amount" field.
func AmountNotIn(vs ...float64) predicate.OrderAdjustment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAmount), v...))
	})
}

// AmountGT applies the GT predicate on the "amount" field.
func AmountGT(v float64) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAmount), v))
	})
}

// AmountGTE applies the GTE predicate on the "amount" field.
func AmountGTE(v float64) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAmount), v))
	})
}

// AmountLT applies the LT predicate on the "amount" field.
func AmountLT(v float64) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAmount), v))
	})
}

// AmountLTE applies the LTE predicate on the "amount" field.
func AmountLTE(v float64) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAmount), v))
	})
}

// AmountIsNil applies the IsNil predicate on the "amount" field.
func AmountIsNil() predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAmount)))
	})
}

// AmountNotNil applies the NotNil predicate on the "amount" field.
func AmountNotNil() predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAmount)))
	})
}

// RecurringAmountEQ applies the EQ predicate on the "recurring_amount" field.
func RecurringAmountEQ(v float64) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRecurringAmount), v))
	})
}

// RecurringAmountNEQ applies the NEQ predicate on the "recurring_amount" field.
func RecurringAmountNEQ(v float64) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRecurringAmount), v))
	})
}

// RecurringAmountIn applies the In predicate on the "recurring_amount" field.
func RecurringAmountIn(vs ...float64) predicate.OrderAdjustment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRecurringAmount), v...))
	})
}

// RecurringAmountNotIn applies the NotIn predicate on the "recurring_amount" field.
func RecurringAmountNotIn(vs ...float64) predicate.OrderAdjustment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRecurringAmount), v...))
	})
}

// RecurringAmountGT applies the GT predicate on the "recurring_amount" field.
func RecurringAmountGT(v float64) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRecurringAmount), v))
	})
}

// RecurringAmountGTE applies the GTE predicate on the "recurring_amount" field.
func RecurringAmountGTE(v float64) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRecurringAmount), v))
	})
}

// RecurringAmountLT applies the LT predicate on the "recurring_amount" field.
func RecurringAmountLT(v float64) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRecurringAmount), v))
	})
}

// RecurringAmountLTE applies the LTE predicate on the "recurring_amount" field.
func RecurringAmountLTE(v float64) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRecurringAmount), v))
	})
}

// RecurringAmountIsNil applies the IsNil predicate on the "recurring_amount" field.
func RecurringAmountIsNil() predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRecurringAmount)))
	})
}

// RecurringAmountNotNil applies the NotNil predicate on the "recurring_amount" field.
func RecurringAmountNotNil() predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRecurringAmount)))
	})
}

// AmountAlreadyIncludedEQ applies the EQ predicate on the "amount_already_included" field.
func AmountAlreadyIncludedEQ(v float64) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAmountAlreadyIncluded), v))
	})
}

// AmountAlreadyIncludedNEQ applies the NEQ predicate on the "amount_already_included" field.
func AmountAlreadyIncludedNEQ(v float64) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAmountAlreadyIncluded), v))
	})
}

// AmountAlreadyIncludedIn applies the In predicate on the "amount_already_included" field.
func AmountAlreadyIncludedIn(vs ...float64) predicate.OrderAdjustment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAmountAlreadyIncluded), v...))
	})
}

// AmountAlreadyIncludedNotIn applies the NotIn predicate on the "amount_already_included" field.
func AmountAlreadyIncludedNotIn(vs ...float64) predicate.OrderAdjustment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAmountAlreadyIncluded), v...))
	})
}

// AmountAlreadyIncludedGT applies the GT predicate on the "amount_already_included" field.
func AmountAlreadyIncludedGT(v float64) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAmountAlreadyIncluded), v))
	})
}

// AmountAlreadyIncludedGTE applies the GTE predicate on the "amount_already_included" field.
func AmountAlreadyIncludedGTE(v float64) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAmountAlreadyIncluded), v))
	})
}

// AmountAlreadyIncludedLT applies the LT predicate on the "amount_already_included" field.
func AmountAlreadyIncludedLT(v float64) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAmountAlreadyIncluded), v))
	})
}

// AmountAlreadyIncludedLTE applies the LTE predicate on the "amount_already_included" field.
func AmountAlreadyIncludedLTE(v float64) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAmountAlreadyIncluded), v))
	})
}

// AmountAlreadyIncludedIsNil applies the IsNil predicate on the "amount_already_included" field.
func AmountAlreadyIncludedIsNil() predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAmountAlreadyIncluded)))
	})
}

// AmountAlreadyIncludedNotNil applies the NotNil predicate on the "amount_already_included" field.
func AmountAlreadyIncludedNotNil() predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAmountAlreadyIncluded)))
	})
}

// ProductPromoIDEQ applies the EQ predicate on the "product_promo_id" field.
func ProductPromoIDEQ(v int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProductPromoID), v))
	})
}

// ProductPromoIDNEQ applies the NEQ predicate on the "product_promo_id" field.
func ProductPromoIDNEQ(v int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProductPromoID), v))
	})
}

// ProductPromoIDIn applies the In predicate on the "product_promo_id" field.
func ProductPromoIDIn(vs ...int) predicate.OrderAdjustment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldProductPromoID), v...))
	})
}

// ProductPromoIDNotIn applies the NotIn predicate on the "product_promo_id" field.
func ProductPromoIDNotIn(vs ...int) predicate.OrderAdjustment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldProductPromoID), v...))
	})
}

// ProductPromoIDGT applies the GT predicate on the "product_promo_id" field.
func ProductPromoIDGT(v int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProductPromoID), v))
	})
}

// ProductPromoIDGTE applies the GTE predicate on the "product_promo_id" field.
func ProductPromoIDGTE(v int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProductPromoID), v))
	})
}

// ProductPromoIDLT applies the LT predicate on the "product_promo_id" field.
func ProductPromoIDLT(v int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProductPromoID), v))
	})
}

// ProductPromoIDLTE applies the LTE predicate on the "product_promo_id" field.
func ProductPromoIDLTE(v int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProductPromoID), v))
	})
}

// ProductPromoIDIsNil applies the IsNil predicate on the "product_promo_id" field.
func ProductPromoIDIsNil() predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldProductPromoID)))
	})
}

// ProductPromoIDNotNil applies the NotNil predicate on the "product_promo_id" field.
func ProductPromoIDNotNil() predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldProductPromoID)))
	})
}

// ProductPromoRuleIDEQ applies the EQ predicate on the "product_promo_rule_id" field.
func ProductPromoRuleIDEQ(v int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProductPromoRuleID), v))
	})
}

// ProductPromoRuleIDNEQ applies the NEQ predicate on the "product_promo_rule_id" field.
func ProductPromoRuleIDNEQ(v int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProductPromoRuleID), v))
	})
}

// ProductPromoRuleIDIn applies the In predicate on the "product_promo_rule_id" field.
func ProductPromoRuleIDIn(vs ...int) predicate.OrderAdjustment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldProductPromoRuleID), v...))
	})
}

// ProductPromoRuleIDNotIn applies the NotIn predicate on the "product_promo_rule_id" field.
func ProductPromoRuleIDNotIn(vs ...int) predicate.OrderAdjustment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldProductPromoRuleID), v...))
	})
}

// ProductPromoRuleIDGT applies the GT predicate on the "product_promo_rule_id" field.
func ProductPromoRuleIDGT(v int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProductPromoRuleID), v))
	})
}

// ProductPromoRuleIDGTE applies the GTE predicate on the "product_promo_rule_id" field.
func ProductPromoRuleIDGTE(v int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProductPromoRuleID), v))
	})
}

// ProductPromoRuleIDLT applies the LT predicate on the "product_promo_rule_id" field.
func ProductPromoRuleIDLT(v int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProductPromoRuleID), v))
	})
}

// ProductPromoRuleIDLTE applies the LTE predicate on the "product_promo_rule_id" field.
func ProductPromoRuleIDLTE(v int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProductPromoRuleID), v))
	})
}

// ProductPromoRuleIDIsNil applies the IsNil predicate on the "product_promo_rule_id" field.
func ProductPromoRuleIDIsNil() predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldProductPromoRuleID)))
	})
}

// ProductPromoRuleIDNotNil applies the NotNil predicate on the "product_promo_rule_id" field.
func ProductPromoRuleIDNotNil() predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldProductPromoRuleID)))
	})
}

// ProductPromoActionSeqIDEQ applies the EQ predicate on the "product_promo_action_seq_id" field.
func ProductPromoActionSeqIDEQ(v int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProductPromoActionSeqID), v))
	})
}

// ProductPromoActionSeqIDNEQ applies the NEQ predicate on the "product_promo_action_seq_id" field.
func ProductPromoActionSeqIDNEQ(v int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProductPromoActionSeqID), v))
	})
}

// ProductPromoActionSeqIDIn applies the In predicate on the "product_promo_action_seq_id" field.
func ProductPromoActionSeqIDIn(vs ...int) predicate.OrderAdjustment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldProductPromoActionSeqID), v...))
	})
}

// ProductPromoActionSeqIDNotIn applies the NotIn predicate on the "product_promo_action_seq_id" field.
func ProductPromoActionSeqIDNotIn(vs ...int) predicate.OrderAdjustment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldProductPromoActionSeqID), v...))
	})
}

// ProductPromoActionSeqIDGT applies the GT predicate on the "product_promo_action_seq_id" field.
func ProductPromoActionSeqIDGT(v int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProductPromoActionSeqID), v))
	})
}

// ProductPromoActionSeqIDGTE applies the GTE predicate on the "product_promo_action_seq_id" field.
func ProductPromoActionSeqIDGTE(v int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProductPromoActionSeqID), v))
	})
}

// ProductPromoActionSeqIDLT applies the LT predicate on the "product_promo_action_seq_id" field.
func ProductPromoActionSeqIDLT(v int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProductPromoActionSeqID), v))
	})
}

// ProductPromoActionSeqIDLTE applies the LTE predicate on the "product_promo_action_seq_id" field.
func ProductPromoActionSeqIDLTE(v int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProductPromoActionSeqID), v))
	})
}

// ProductPromoActionSeqIDIsNil applies the IsNil predicate on the "product_promo_action_seq_id" field.
func ProductPromoActionSeqIDIsNil() predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldProductPromoActionSeqID)))
	})
}

// ProductPromoActionSeqIDNotNil applies the NotNil predicate on the "product_promo_action_seq_id" field.
func ProductPromoActionSeqIDNotNil() predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldProductPromoActionSeqID)))
	})
}

// ProductFeatureIDEQ applies the EQ predicate on the "product_feature_id" field.
func ProductFeatureIDEQ(v int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProductFeatureID), v))
	})
}

// ProductFeatureIDNEQ applies the NEQ predicate on the "product_feature_id" field.
func ProductFeatureIDNEQ(v int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProductFeatureID), v))
	})
}

// ProductFeatureIDIn applies the In predicate on the "product_feature_id" field.
func ProductFeatureIDIn(vs ...int) predicate.OrderAdjustment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldProductFeatureID), v...))
	})
}

// ProductFeatureIDNotIn applies the NotIn predicate on the "product_feature_id" field.
func ProductFeatureIDNotIn(vs ...int) predicate.OrderAdjustment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldProductFeatureID), v...))
	})
}

// ProductFeatureIDGT applies the GT predicate on the "product_feature_id" field.
func ProductFeatureIDGT(v int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProductFeatureID), v))
	})
}

// ProductFeatureIDGTE applies the GTE predicate on the "product_feature_id" field.
func ProductFeatureIDGTE(v int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProductFeatureID), v))
	})
}

// ProductFeatureIDLT applies the LT predicate on the "product_feature_id" field.
func ProductFeatureIDLT(v int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProductFeatureID), v))
	})
}

// ProductFeatureIDLTE applies the LTE predicate on the "product_feature_id" field.
func ProductFeatureIDLTE(v int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProductFeatureID), v))
	})
}

// ProductFeatureIDIsNil applies the IsNil predicate on the "product_feature_id" field.
func ProductFeatureIDIsNil() predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldProductFeatureID)))
	})
}

// ProductFeatureIDNotNil applies the NotNil predicate on the "product_feature_id" field.
func ProductFeatureIDNotNil() predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldProductFeatureID)))
	})
}

// CorrespondingProductIDEQ applies the EQ predicate on the "corresponding_product_id" field.
func CorrespondingProductIDEQ(v int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCorrespondingProductID), v))
	})
}

// CorrespondingProductIDNEQ applies the NEQ predicate on the "corresponding_product_id" field.
func CorrespondingProductIDNEQ(v int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCorrespondingProductID), v))
	})
}

// CorrespondingProductIDIn applies the In predicate on the "corresponding_product_id" field.
func CorrespondingProductIDIn(vs ...int) predicate.OrderAdjustment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCorrespondingProductID), v...))
	})
}

// CorrespondingProductIDNotIn applies the NotIn predicate on the "corresponding_product_id" field.
func CorrespondingProductIDNotIn(vs ...int) predicate.OrderAdjustment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCorrespondingProductID), v...))
	})
}

// CorrespondingProductIDGT applies the GT predicate on the "corresponding_product_id" field.
func CorrespondingProductIDGT(v int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCorrespondingProductID), v))
	})
}

// CorrespondingProductIDGTE applies the GTE predicate on the "corresponding_product_id" field.
func CorrespondingProductIDGTE(v int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCorrespondingProductID), v))
	})
}

// CorrespondingProductIDLT applies the LT predicate on the "corresponding_product_id" field.
func CorrespondingProductIDLT(v int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCorrespondingProductID), v))
	})
}

// CorrespondingProductIDLTE applies the LTE predicate on the "corresponding_product_id" field.
func CorrespondingProductIDLTE(v int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCorrespondingProductID), v))
	})
}

// CorrespondingProductIDIsNil applies the IsNil predicate on the "corresponding_product_id" field.
func CorrespondingProductIDIsNil() predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCorrespondingProductID)))
	})
}

// CorrespondingProductIDNotNil applies the NotNil predicate on the "corresponding_product_id" field.
func CorrespondingProductIDNotNil() predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCorrespondingProductID)))
	})
}

// TaxAuthorityRateSeqIDEQ applies the EQ predicate on the "tax_authority_rate_seq_id" field.
func TaxAuthorityRateSeqIDEQ(v int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTaxAuthorityRateSeqID), v))
	})
}

// TaxAuthorityRateSeqIDNEQ applies the NEQ predicate on the "tax_authority_rate_seq_id" field.
func TaxAuthorityRateSeqIDNEQ(v int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTaxAuthorityRateSeqID), v))
	})
}

// TaxAuthorityRateSeqIDIn applies the In predicate on the "tax_authority_rate_seq_id" field.
func TaxAuthorityRateSeqIDIn(vs ...int) predicate.OrderAdjustment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTaxAuthorityRateSeqID), v...))
	})
}

// TaxAuthorityRateSeqIDNotIn applies the NotIn predicate on the "tax_authority_rate_seq_id" field.
func TaxAuthorityRateSeqIDNotIn(vs ...int) predicate.OrderAdjustment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTaxAuthorityRateSeqID), v...))
	})
}

// TaxAuthorityRateSeqIDGT applies the GT predicate on the "tax_authority_rate_seq_id" field.
func TaxAuthorityRateSeqIDGT(v int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTaxAuthorityRateSeqID), v))
	})
}

// TaxAuthorityRateSeqIDGTE applies the GTE predicate on the "tax_authority_rate_seq_id" field.
func TaxAuthorityRateSeqIDGTE(v int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTaxAuthorityRateSeqID), v))
	})
}

// TaxAuthorityRateSeqIDLT applies the LT predicate on the "tax_authority_rate_seq_id" field.
func TaxAuthorityRateSeqIDLT(v int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTaxAuthorityRateSeqID), v))
	})
}

// TaxAuthorityRateSeqIDLTE applies the LTE predicate on the "tax_authority_rate_seq_id" field.
func TaxAuthorityRateSeqIDLTE(v int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTaxAuthorityRateSeqID), v))
	})
}

// TaxAuthorityRateSeqIDIsNil applies the IsNil predicate on the "tax_authority_rate_seq_id" field.
func TaxAuthorityRateSeqIDIsNil() predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTaxAuthorityRateSeqID)))
	})
}

// TaxAuthorityRateSeqIDNotNil applies the NotNil predicate on the "tax_authority_rate_seq_id" field.
func TaxAuthorityRateSeqIDNotNil() predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTaxAuthorityRateSeqID)))
	})
}

// SourceReferenceIDEQ applies the EQ predicate on the "source_reference_id" field.
func SourceReferenceIDEQ(v string) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSourceReferenceID), v))
	})
}

// SourceReferenceIDNEQ applies the NEQ predicate on the "source_reference_id" field.
func SourceReferenceIDNEQ(v string) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSourceReferenceID), v))
	})
}

// SourceReferenceIDIn applies the In predicate on the "source_reference_id" field.
func SourceReferenceIDIn(vs ...string) predicate.OrderAdjustment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSourceReferenceID), v...))
	})
}

// SourceReferenceIDNotIn applies the NotIn predicate on the "source_reference_id" field.
func SourceReferenceIDNotIn(vs ...string) predicate.OrderAdjustment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSourceReferenceID), v...))
	})
}

// SourceReferenceIDGT applies the GT predicate on the "source_reference_id" field.
func SourceReferenceIDGT(v string) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSourceReferenceID), v))
	})
}

// SourceReferenceIDGTE applies the GTE predicate on the "source_reference_id" field.
func SourceReferenceIDGTE(v string) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSourceReferenceID), v))
	})
}

// SourceReferenceIDLT applies the LT predicate on the "source_reference_id" field.
func SourceReferenceIDLT(v string) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSourceReferenceID), v))
	})
}

// SourceReferenceIDLTE applies the LTE predicate on the "source_reference_id" field.
func SourceReferenceIDLTE(v string) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSourceReferenceID), v))
	})
}

// SourceReferenceIDContains applies the Contains predicate on the "source_reference_id" field.
func SourceReferenceIDContains(v string) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSourceReferenceID), v))
	})
}

// SourceReferenceIDHasPrefix applies the HasPrefix predicate on the "source_reference_id" field.
func SourceReferenceIDHasPrefix(v string) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSourceReferenceID), v))
	})
}

// SourceReferenceIDHasSuffix applies the HasSuffix predicate on the "source_reference_id" field.
func SourceReferenceIDHasSuffix(v string) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSourceReferenceID), v))
	})
}

// SourceReferenceIDIsNil applies the IsNil predicate on the "source_reference_id" field.
func SourceReferenceIDIsNil() predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSourceReferenceID)))
	})
}

// SourceReferenceIDNotNil applies the NotNil predicate on the "source_reference_id" field.
func SourceReferenceIDNotNil() predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSourceReferenceID)))
	})
}

// SourceReferenceIDEqualFold applies the EqualFold predicate on the "source_reference_id" field.
func SourceReferenceIDEqualFold(v string) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSourceReferenceID), v))
	})
}

// SourceReferenceIDContainsFold applies the ContainsFold predicate on the "source_reference_id" field.
func SourceReferenceIDContainsFold(v string) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSourceReferenceID), v))
	})
}

// SourcePercentageEQ applies the EQ predicate on the "source_percentage" field.
func SourcePercentageEQ(v float64) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSourcePercentage), v))
	})
}

// SourcePercentageNEQ applies the NEQ predicate on the "source_percentage" field.
func SourcePercentageNEQ(v float64) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSourcePercentage), v))
	})
}

// SourcePercentageIn applies the In predicate on the "source_percentage" field.
func SourcePercentageIn(vs ...float64) predicate.OrderAdjustment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSourcePercentage), v...))
	})
}

// SourcePercentageNotIn applies the NotIn predicate on the "source_percentage" field.
func SourcePercentageNotIn(vs ...float64) predicate.OrderAdjustment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSourcePercentage), v...))
	})
}

// SourcePercentageGT applies the GT predicate on the "source_percentage" field.
func SourcePercentageGT(v float64) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSourcePercentage), v))
	})
}

// SourcePercentageGTE applies the GTE predicate on the "source_percentage" field.
func SourcePercentageGTE(v float64) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSourcePercentage), v))
	})
}

// SourcePercentageLT applies the LT predicate on the "source_percentage" field.
func SourcePercentageLT(v float64) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSourcePercentage), v))
	})
}

// SourcePercentageLTE applies the LTE predicate on the "source_percentage" field.
func SourcePercentageLTE(v float64) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSourcePercentage), v))
	})
}

// SourcePercentageIsNil applies the IsNil predicate on the "source_percentage" field.
func SourcePercentageIsNil() predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSourcePercentage)))
	})
}

// SourcePercentageNotNil applies the NotNil predicate on the "source_percentage" field.
func SourcePercentageNotNil() predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSourcePercentage)))
	})
}

// CustomerReferenceIDEQ applies the EQ predicate on the "customer_reference_id" field.
func CustomerReferenceIDEQ(v string) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCustomerReferenceID), v))
	})
}

// CustomerReferenceIDNEQ applies the NEQ predicate on the "customer_reference_id" field.
func CustomerReferenceIDNEQ(v string) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCustomerReferenceID), v))
	})
}

// CustomerReferenceIDIn applies the In predicate on the "customer_reference_id" field.
func CustomerReferenceIDIn(vs ...string) predicate.OrderAdjustment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCustomerReferenceID), v...))
	})
}

// CustomerReferenceIDNotIn applies the NotIn predicate on the "customer_reference_id" field.
func CustomerReferenceIDNotIn(vs ...string) predicate.OrderAdjustment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCustomerReferenceID), v...))
	})
}

// CustomerReferenceIDGT applies the GT predicate on the "customer_reference_id" field.
func CustomerReferenceIDGT(v string) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCustomerReferenceID), v))
	})
}

// CustomerReferenceIDGTE applies the GTE predicate on the "customer_reference_id" field.
func CustomerReferenceIDGTE(v string) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCustomerReferenceID), v))
	})
}

// CustomerReferenceIDLT applies the LT predicate on the "customer_reference_id" field.
func CustomerReferenceIDLT(v string) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCustomerReferenceID), v))
	})
}

// CustomerReferenceIDLTE applies the LTE predicate on the "customer_reference_id" field.
func CustomerReferenceIDLTE(v string) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCustomerReferenceID), v))
	})
}

// CustomerReferenceIDContains applies the Contains predicate on the "customer_reference_id" field.
func CustomerReferenceIDContains(v string) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCustomerReferenceID), v))
	})
}

// CustomerReferenceIDHasPrefix applies the HasPrefix predicate on the "customer_reference_id" field.
func CustomerReferenceIDHasPrefix(v string) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCustomerReferenceID), v))
	})
}

// CustomerReferenceIDHasSuffix applies the HasSuffix predicate on the "customer_reference_id" field.
func CustomerReferenceIDHasSuffix(v string) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCustomerReferenceID), v))
	})
}

// CustomerReferenceIDIsNil applies the IsNil predicate on the "customer_reference_id" field.
func CustomerReferenceIDIsNil() predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCustomerReferenceID)))
	})
}

// CustomerReferenceIDNotNil applies the NotNil predicate on the "customer_reference_id" field.
func CustomerReferenceIDNotNil() predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCustomerReferenceID)))
	})
}

// CustomerReferenceIDEqualFold applies the EqualFold predicate on the "customer_reference_id" field.
func CustomerReferenceIDEqualFold(v string) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCustomerReferenceID), v))
	})
}

// CustomerReferenceIDContainsFold applies the ContainsFold predicate on the "customer_reference_id" field.
func CustomerReferenceIDContainsFold(v string) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCustomerReferenceID), v))
	})
}

// PrimaryGeoIDEQ applies the EQ predicate on the "primary_geo_id" field.
func PrimaryGeoIDEQ(v int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrimaryGeoID), v))
	})
}

// PrimaryGeoIDNEQ applies the NEQ predicate on the "primary_geo_id" field.
func PrimaryGeoIDNEQ(v int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPrimaryGeoID), v))
	})
}

// PrimaryGeoIDIn applies the In predicate on the "primary_geo_id" field.
func PrimaryGeoIDIn(vs ...int) predicate.OrderAdjustment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPrimaryGeoID), v...))
	})
}

// PrimaryGeoIDNotIn applies the NotIn predicate on the "primary_geo_id" field.
func PrimaryGeoIDNotIn(vs ...int) predicate.OrderAdjustment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPrimaryGeoID), v...))
	})
}

// PrimaryGeoIDGT applies the GT predicate on the "primary_geo_id" field.
func PrimaryGeoIDGT(v int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPrimaryGeoID), v))
	})
}

// PrimaryGeoIDGTE applies the GTE predicate on the "primary_geo_id" field.
func PrimaryGeoIDGTE(v int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPrimaryGeoID), v))
	})
}

// PrimaryGeoIDLT applies the LT predicate on the "primary_geo_id" field.
func PrimaryGeoIDLT(v int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPrimaryGeoID), v))
	})
}

// PrimaryGeoIDLTE applies the LTE predicate on the "primary_geo_id" field.
func PrimaryGeoIDLTE(v int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPrimaryGeoID), v))
	})
}

// PrimaryGeoIDIsNil applies the IsNil predicate on the "primary_geo_id" field.
func PrimaryGeoIDIsNil() predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPrimaryGeoID)))
	})
}

// PrimaryGeoIDNotNil applies the NotNil predicate on the "primary_geo_id" field.
func PrimaryGeoIDNotNil() predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPrimaryGeoID)))
	})
}

// SecondaryGeoIDEQ applies the EQ predicate on the "secondary_geo_id" field.
func SecondaryGeoIDEQ(v int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSecondaryGeoID), v))
	})
}

// SecondaryGeoIDNEQ applies the NEQ predicate on the "secondary_geo_id" field.
func SecondaryGeoIDNEQ(v int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSecondaryGeoID), v))
	})
}

// SecondaryGeoIDIn applies the In predicate on the "secondary_geo_id" field.
func SecondaryGeoIDIn(vs ...int) predicate.OrderAdjustment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSecondaryGeoID), v...))
	})
}

// SecondaryGeoIDNotIn applies the NotIn predicate on the "secondary_geo_id" field.
func SecondaryGeoIDNotIn(vs ...int) predicate.OrderAdjustment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSecondaryGeoID), v...))
	})
}

// SecondaryGeoIDGT applies the GT predicate on the "secondary_geo_id" field.
func SecondaryGeoIDGT(v int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSecondaryGeoID), v))
	})
}

// SecondaryGeoIDGTE applies the GTE predicate on the "secondary_geo_id" field.
func SecondaryGeoIDGTE(v int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSecondaryGeoID), v))
	})
}

// SecondaryGeoIDLT applies the LT predicate on the "secondary_geo_id" field.
func SecondaryGeoIDLT(v int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSecondaryGeoID), v))
	})
}

// SecondaryGeoIDLTE applies the LTE predicate on the "secondary_geo_id" field.
func SecondaryGeoIDLTE(v int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSecondaryGeoID), v))
	})
}

// SecondaryGeoIDIsNil applies the IsNil predicate on the "secondary_geo_id" field.
func SecondaryGeoIDIsNil() predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSecondaryGeoID)))
	})
}

// SecondaryGeoIDNotNil applies the NotNil predicate on the "secondary_geo_id" field.
func SecondaryGeoIDNotNil() predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSecondaryGeoID)))
	})
}

// ExemptAmountEQ applies the EQ predicate on the "exempt_amount" field.
func ExemptAmountEQ(v float64) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExemptAmount), v))
	})
}

// ExemptAmountNEQ applies the NEQ predicate on the "exempt_amount" field.
func ExemptAmountNEQ(v float64) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldExemptAmount), v))
	})
}

// ExemptAmountIn applies the In predicate on the "exempt_amount" field.
func ExemptAmountIn(vs ...float64) predicate.OrderAdjustment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldExemptAmount), v...))
	})
}

// ExemptAmountNotIn applies the NotIn predicate on the "exempt_amount" field.
func ExemptAmountNotIn(vs ...float64) predicate.OrderAdjustment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldExemptAmount), v...))
	})
}

// ExemptAmountGT applies the GT predicate on the "exempt_amount" field.
func ExemptAmountGT(v float64) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldExemptAmount), v))
	})
}

// ExemptAmountGTE applies the GTE predicate on the "exempt_amount" field.
func ExemptAmountGTE(v float64) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldExemptAmount), v))
	})
}

// ExemptAmountLT applies the LT predicate on the "exempt_amount" field.
func ExemptAmountLT(v float64) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldExemptAmount), v))
	})
}

// ExemptAmountLTE applies the LTE predicate on the "exempt_amount" field.
func ExemptAmountLTE(v float64) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldExemptAmount), v))
	})
}

// ExemptAmountIsNil applies the IsNil predicate on the "exempt_amount" field.
func ExemptAmountIsNil() predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldExemptAmount)))
	})
}

// ExemptAmountNotNil applies the NotNil predicate on the "exempt_amount" field.
func ExemptAmountNotNil() predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldExemptAmount)))
	})
}

// TaxAuthGeoIDEQ applies the EQ predicate on the "tax_auth_geo_id" field.
func TaxAuthGeoIDEQ(v int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTaxAuthGeoID), v))
	})
}

// TaxAuthGeoIDNEQ applies the NEQ predicate on the "tax_auth_geo_id" field.
func TaxAuthGeoIDNEQ(v int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTaxAuthGeoID), v))
	})
}

// TaxAuthGeoIDIn applies the In predicate on the "tax_auth_geo_id" field.
func TaxAuthGeoIDIn(vs ...int) predicate.OrderAdjustment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTaxAuthGeoID), v...))
	})
}

// TaxAuthGeoIDNotIn applies the NotIn predicate on the "tax_auth_geo_id" field.
func TaxAuthGeoIDNotIn(vs ...int) predicate.OrderAdjustment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTaxAuthGeoID), v...))
	})
}

// TaxAuthGeoIDGT applies the GT predicate on the "tax_auth_geo_id" field.
func TaxAuthGeoIDGT(v int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTaxAuthGeoID), v))
	})
}

// TaxAuthGeoIDGTE applies the GTE predicate on the "tax_auth_geo_id" field.
func TaxAuthGeoIDGTE(v int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTaxAuthGeoID), v))
	})
}

// TaxAuthGeoIDLT applies the LT predicate on the "tax_auth_geo_id" field.
func TaxAuthGeoIDLT(v int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTaxAuthGeoID), v))
	})
}

// TaxAuthGeoIDLTE applies the LTE predicate on the "tax_auth_geo_id" field.
func TaxAuthGeoIDLTE(v int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTaxAuthGeoID), v))
	})
}

// TaxAuthGeoIDIsNil applies the IsNil predicate on the "tax_auth_geo_id" field.
func TaxAuthGeoIDIsNil() predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTaxAuthGeoID)))
	})
}

// TaxAuthGeoIDNotNil applies the NotNil predicate on the "tax_auth_geo_id" field.
func TaxAuthGeoIDNotNil() predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTaxAuthGeoID)))
	})
}

// TaxAuthPartyIDEQ applies the EQ predicate on the "tax_auth_party_id" field.
func TaxAuthPartyIDEQ(v int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTaxAuthPartyID), v))
	})
}

// TaxAuthPartyIDNEQ applies the NEQ predicate on the "tax_auth_party_id" field.
func TaxAuthPartyIDNEQ(v int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTaxAuthPartyID), v))
	})
}

// TaxAuthPartyIDIn applies the In predicate on the "tax_auth_party_id" field.
func TaxAuthPartyIDIn(vs ...int) predicate.OrderAdjustment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTaxAuthPartyID), v...))
	})
}

// TaxAuthPartyIDNotIn applies the NotIn predicate on the "tax_auth_party_id" field.
func TaxAuthPartyIDNotIn(vs ...int) predicate.OrderAdjustment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTaxAuthPartyID), v...))
	})
}

// TaxAuthPartyIDGT applies the GT predicate on the "tax_auth_party_id" field.
func TaxAuthPartyIDGT(v int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTaxAuthPartyID), v))
	})
}

// TaxAuthPartyIDGTE applies the GTE predicate on the "tax_auth_party_id" field.
func TaxAuthPartyIDGTE(v int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTaxAuthPartyID), v))
	})
}

// TaxAuthPartyIDLT applies the LT predicate on the "tax_auth_party_id" field.
func TaxAuthPartyIDLT(v int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTaxAuthPartyID), v))
	})
}

// TaxAuthPartyIDLTE applies the LTE predicate on the "tax_auth_party_id" field.
func TaxAuthPartyIDLTE(v int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTaxAuthPartyID), v))
	})
}

// TaxAuthPartyIDIsNil applies the IsNil predicate on the "tax_auth_party_id" field.
func TaxAuthPartyIDIsNil() predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTaxAuthPartyID)))
	})
}

// TaxAuthPartyIDNotNil applies the NotNil predicate on the "tax_auth_party_id" field.
func TaxAuthPartyIDNotNil() predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTaxAuthPartyID)))
	})
}

// OverrideGlAccountIDEQ applies the EQ predicate on the "override_gl_account_id" field.
func OverrideGlAccountIDEQ(v int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOverrideGlAccountID), v))
	})
}

// OverrideGlAccountIDNEQ applies the NEQ predicate on the "override_gl_account_id" field.
func OverrideGlAccountIDNEQ(v int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOverrideGlAccountID), v))
	})
}

// OverrideGlAccountIDIn applies the In predicate on the "override_gl_account_id" field.
func OverrideGlAccountIDIn(vs ...int) predicate.OrderAdjustment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOverrideGlAccountID), v...))
	})
}

// OverrideGlAccountIDNotIn applies the NotIn predicate on the "override_gl_account_id" field.
func OverrideGlAccountIDNotIn(vs ...int) predicate.OrderAdjustment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOverrideGlAccountID), v...))
	})
}

// OverrideGlAccountIDGT applies the GT predicate on the "override_gl_account_id" field.
func OverrideGlAccountIDGT(v int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOverrideGlAccountID), v))
	})
}

// OverrideGlAccountIDGTE applies the GTE predicate on the "override_gl_account_id" field.
func OverrideGlAccountIDGTE(v int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOverrideGlAccountID), v))
	})
}

// OverrideGlAccountIDLT applies the LT predicate on the "override_gl_account_id" field.
func OverrideGlAccountIDLT(v int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOverrideGlAccountID), v))
	})
}

// OverrideGlAccountIDLTE applies the LTE predicate on the "override_gl_account_id" field.
func OverrideGlAccountIDLTE(v int) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOverrideGlAccountID), v))
	})
}

// OverrideGlAccountIDIsNil applies the IsNil predicate on the "override_gl_account_id" field.
func OverrideGlAccountIDIsNil() predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOverrideGlAccountID)))
	})
}

// OverrideGlAccountIDNotNil applies the NotNil predicate on the "override_gl_account_id" field.
func OverrideGlAccountIDNotNil() predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOverrideGlAccountID)))
	})
}

// IncludeInTaxEQ applies the EQ predicate on the "include_in_tax" field.
func IncludeInTaxEQ(v IncludeInTax) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIncludeInTax), v))
	})
}

// IncludeInTaxNEQ applies the NEQ predicate on the "include_in_tax" field.
func IncludeInTaxNEQ(v IncludeInTax) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIncludeInTax), v))
	})
}

// IncludeInTaxIn applies the In predicate on the "include_in_tax" field.
func IncludeInTaxIn(vs ...IncludeInTax) predicate.OrderAdjustment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIncludeInTax), v...))
	})
}

// IncludeInTaxNotIn applies the NotIn predicate on the "include_in_tax" field.
func IncludeInTaxNotIn(vs ...IncludeInTax) predicate.OrderAdjustment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIncludeInTax), v...))
	})
}

// IncludeInTaxIsNil applies the IsNil predicate on the "include_in_tax" field.
func IncludeInTaxIsNil() predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldIncludeInTax)))
	})
}

// IncludeInTaxNotNil applies the NotNil predicate on the "include_in_tax" field.
func IncludeInTaxNotNil() predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldIncludeInTax)))
	})
}

// IncludeInShippingEQ applies the EQ predicate on the "include_in_shipping" field.
func IncludeInShippingEQ(v IncludeInShipping) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIncludeInShipping), v))
	})
}

// IncludeInShippingNEQ applies the NEQ predicate on the "include_in_shipping" field.
func IncludeInShippingNEQ(v IncludeInShipping) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIncludeInShipping), v))
	})
}

// IncludeInShippingIn applies the In predicate on the "include_in_shipping" field.
func IncludeInShippingIn(vs ...IncludeInShipping) predicate.OrderAdjustment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIncludeInShipping), v...))
	})
}

// IncludeInShippingNotIn applies the NotIn predicate on the "include_in_shipping" field.
func IncludeInShippingNotIn(vs ...IncludeInShipping) predicate.OrderAdjustment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIncludeInShipping), v...))
	})
}

// IncludeInShippingIsNil applies the IsNil predicate on the "include_in_shipping" field.
func IncludeInShippingIsNil() predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldIncludeInShipping)))
	})
}

// IncludeInShippingNotNil applies the NotNil predicate on the "include_in_shipping" field.
func IncludeInShippingNotNil() predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldIncludeInShipping)))
	})
}

// IsManualEQ applies the EQ predicate on the "is_manual" field.
func IsManualEQ(v IsManual) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsManual), v))
	})
}

// IsManualNEQ applies the NEQ predicate on the "is_manual" field.
func IsManualNEQ(v IsManual) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsManual), v))
	})
}

// IsManualIn applies the In predicate on the "is_manual" field.
func IsManualIn(vs ...IsManual) predicate.OrderAdjustment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIsManual), v...))
	})
}

// IsManualNotIn applies the NotIn predicate on the "is_manual" field.
func IsManualNotIn(vs ...IsManual) predicate.OrderAdjustment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIsManual), v...))
	})
}

// IsManualIsNil applies the IsNil predicate on the "is_manual" field.
func IsManualIsNil() predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldIsManual)))
	})
}

// IsManualNotNil applies the NotNil predicate on the "is_manual" field.
func IsManualNotNil() predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldIsManual)))
	})
}

// CreatedDateEQ applies the EQ predicate on the "created_date" field.
func CreatedDateEQ(v time.Time) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedDate), v))
	})
}

// CreatedDateNEQ applies the NEQ predicate on the "created_date" field.
func CreatedDateNEQ(v time.Time) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedDate), v))
	})
}

// CreatedDateIn applies the In predicate on the "created_date" field.
func CreatedDateIn(vs ...time.Time) predicate.OrderAdjustment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedDate), v...))
	})
}

// CreatedDateNotIn applies the NotIn predicate on the "created_date" field.
func CreatedDateNotIn(vs ...time.Time) predicate.OrderAdjustment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedDate), v...))
	})
}

// CreatedDateGT applies the GT predicate on the "created_date" field.
func CreatedDateGT(v time.Time) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedDate), v))
	})
}

// CreatedDateGTE applies the GTE predicate on the "created_date" field.
func CreatedDateGTE(v time.Time) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedDate), v))
	})
}

// CreatedDateLT applies the LT predicate on the "created_date" field.
func CreatedDateLT(v time.Time) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedDate), v))
	})
}

// CreatedDateLTE applies the LTE predicate on the "created_date" field.
func CreatedDateLTE(v time.Time) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedDate), v))
	})
}

// CreatedDateIsNil applies the IsNil predicate on the "created_date" field.
func CreatedDateIsNil() predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreatedDate)))
	})
}

// CreatedDateNotNil applies the NotNil predicate on the "created_date" field.
func CreatedDateNotNil() predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreatedDate)))
	})
}

// CreatedByUserLoginEQ applies the EQ predicate on the "created_by_user_login" field.
func CreatedByUserLoginEQ(v string) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedByUserLogin), v))
	})
}

// CreatedByUserLoginNEQ applies the NEQ predicate on the "created_by_user_login" field.
func CreatedByUserLoginNEQ(v string) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedByUserLogin), v))
	})
}

// CreatedByUserLoginIn applies the In predicate on the "created_by_user_login" field.
func CreatedByUserLoginIn(vs ...string) predicate.OrderAdjustment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedByUserLogin), v...))
	})
}

// CreatedByUserLoginNotIn applies the NotIn predicate on the "created_by_user_login" field.
func CreatedByUserLoginNotIn(vs ...string) predicate.OrderAdjustment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedByUserLogin), v...))
	})
}

// CreatedByUserLoginGT applies the GT predicate on the "created_by_user_login" field.
func CreatedByUserLoginGT(v string) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedByUserLogin), v))
	})
}

// CreatedByUserLoginGTE applies the GTE predicate on the "created_by_user_login" field.
func CreatedByUserLoginGTE(v string) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedByUserLogin), v))
	})
}

// CreatedByUserLoginLT applies the LT predicate on the "created_by_user_login" field.
func CreatedByUserLoginLT(v string) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedByUserLogin), v))
	})
}

// CreatedByUserLoginLTE applies the LTE predicate on the "created_by_user_login" field.
func CreatedByUserLoginLTE(v string) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedByUserLogin), v))
	})
}

// CreatedByUserLoginContains applies the Contains predicate on the "created_by_user_login" field.
func CreatedByUserLoginContains(v string) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCreatedByUserLogin), v))
	})
}

// CreatedByUserLoginHasPrefix applies the HasPrefix predicate on the "created_by_user_login" field.
func CreatedByUserLoginHasPrefix(v string) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCreatedByUserLogin), v))
	})
}

// CreatedByUserLoginHasSuffix applies the HasSuffix predicate on the "created_by_user_login" field.
func CreatedByUserLoginHasSuffix(v string) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCreatedByUserLogin), v))
	})
}

// CreatedByUserLoginIsNil applies the IsNil predicate on the "created_by_user_login" field.
func CreatedByUserLoginIsNil() predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreatedByUserLogin)))
	})
}

// CreatedByUserLoginNotNil applies the NotNil predicate on the "created_by_user_login" field.
func CreatedByUserLoginNotNil() predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreatedByUserLogin)))
	})
}

// CreatedByUserLoginEqualFold applies the EqualFold predicate on the "created_by_user_login" field.
func CreatedByUserLoginEqualFold(v string) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCreatedByUserLogin), v))
	})
}

// CreatedByUserLoginContainsFold applies the ContainsFold predicate on the "created_by_user_login" field.
func CreatedByUserLoginContainsFold(v string) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCreatedByUserLogin), v))
	})
}

// LastModifiedDateEQ applies the EQ predicate on the "last_modified_date" field.
func LastModifiedDateEQ(v time.Time) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastModifiedDate), v))
	})
}

// LastModifiedDateNEQ applies the NEQ predicate on the "last_modified_date" field.
func LastModifiedDateNEQ(v time.Time) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLastModifiedDate), v))
	})
}

// LastModifiedDateIn applies the In predicate on the "last_modified_date" field.
func LastModifiedDateIn(vs ...time.Time) predicate.OrderAdjustment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLastModifiedDate), v...))
	})
}

// LastModifiedDateNotIn applies the NotIn predicate on the "last_modified_date" field.
func LastModifiedDateNotIn(vs ...time.Time) predicate.OrderAdjustment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLastModifiedDate), v...))
	})
}

// LastModifiedDateGT applies the GT predicate on the "last_modified_date" field.
func LastModifiedDateGT(v time.Time) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLastModifiedDate), v))
	})
}

// LastModifiedDateGTE applies the GTE predicate on the "last_modified_date" field.
func LastModifiedDateGTE(v time.Time) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLastModifiedDate), v))
	})
}

// LastModifiedDateLT applies the LT predicate on the "last_modified_date" field.
func LastModifiedDateLT(v time.Time) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLastModifiedDate), v))
	})
}

// LastModifiedDateLTE applies the LTE predicate on the "last_modified_date" field.
func LastModifiedDateLTE(v time.Time) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLastModifiedDate), v))
	})
}

// LastModifiedDateIsNil applies the IsNil predicate on the "last_modified_date" field.
func LastModifiedDateIsNil() predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLastModifiedDate)))
	})
}

// LastModifiedDateNotNil applies the NotNil predicate on the "last_modified_date" field.
func LastModifiedDateNotNil() predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLastModifiedDate)))
	})
}

// LastModifiedByUserLoginEQ applies the EQ predicate on the "last_modified_by_user_login" field.
func LastModifiedByUserLoginEQ(v string) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastModifiedByUserLogin), v))
	})
}

// LastModifiedByUserLoginNEQ applies the NEQ predicate on the "last_modified_by_user_login" field.
func LastModifiedByUserLoginNEQ(v string) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLastModifiedByUserLogin), v))
	})
}

// LastModifiedByUserLoginIn applies the In predicate on the "last_modified_by_user_login" field.
func LastModifiedByUserLoginIn(vs ...string) predicate.OrderAdjustment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLastModifiedByUserLogin), v...))
	})
}

// LastModifiedByUserLoginNotIn applies the NotIn predicate on the "last_modified_by_user_login" field.
func LastModifiedByUserLoginNotIn(vs ...string) predicate.OrderAdjustment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLastModifiedByUserLogin), v...))
	})
}

// LastModifiedByUserLoginGT applies the GT predicate on the "last_modified_by_user_login" field.
func LastModifiedByUserLoginGT(v string) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLastModifiedByUserLogin), v))
	})
}

// LastModifiedByUserLoginGTE applies the GTE predicate on the "last_modified_by_user_login" field.
func LastModifiedByUserLoginGTE(v string) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLastModifiedByUserLogin), v))
	})
}

// LastModifiedByUserLoginLT applies the LT predicate on the "last_modified_by_user_login" field.
func LastModifiedByUserLoginLT(v string) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLastModifiedByUserLogin), v))
	})
}

// LastModifiedByUserLoginLTE applies the LTE predicate on the "last_modified_by_user_login" field.
func LastModifiedByUserLoginLTE(v string) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLastModifiedByUserLogin), v))
	})
}

// LastModifiedByUserLoginContains applies the Contains predicate on the "last_modified_by_user_login" field.
func LastModifiedByUserLoginContains(v string) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLastModifiedByUserLogin), v))
	})
}

// LastModifiedByUserLoginHasPrefix applies the HasPrefix predicate on the "last_modified_by_user_login" field.
func LastModifiedByUserLoginHasPrefix(v string) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLastModifiedByUserLogin), v))
	})
}

// LastModifiedByUserLoginHasSuffix applies the HasSuffix predicate on the "last_modified_by_user_login" field.
func LastModifiedByUserLoginHasSuffix(v string) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLastModifiedByUserLogin), v))
	})
}

// LastModifiedByUserLoginIsNil applies the IsNil predicate on the "last_modified_by_user_login" field.
func LastModifiedByUserLoginIsNil() predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLastModifiedByUserLogin)))
	})
}

// LastModifiedByUserLoginNotNil applies the NotNil predicate on the "last_modified_by_user_login" field.
func LastModifiedByUserLoginNotNil() predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLastModifiedByUserLogin)))
	})
}

// LastModifiedByUserLoginEqualFold applies the EqualFold predicate on the "last_modified_by_user_login" field.
func LastModifiedByUserLoginEqualFold(v string) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLastModifiedByUserLogin), v))
	})
}

// LastModifiedByUserLoginContainsFold applies the ContainsFold predicate on the "last_modified_by_user_login" field.
func LastModifiedByUserLoginContainsFold(v string) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLastModifiedByUserLogin), v))
	})
}

// HasOrderHeader applies the HasEdge predicate on the "order_header" edge.
func HasOrderHeader() predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderHeaderTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OrderHeaderTable, OrderHeaderColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderHeaderWith applies the HasEdge predicate on the "order_header" edge with a given conditions (other predicates).
func HasOrderHeaderWith(preds ...predicate.OrderHeader) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderHeaderInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OrderHeaderTable, OrderHeaderColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrderItem applies the HasEdge predicate on the "order_item" edge.
func HasOrderItem() predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderItemTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OrderItemTable, OrderItemColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderItemWith applies the HasEdge predicate on the "order_item" edge with a given conditions (other predicates).
func HasOrderItemWith(preds ...predicate.OrderItem) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderItemInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OrderItemTable, OrderItemColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrderItemShipGroup applies the HasEdge predicate on the "order_item_ship_group" edge.
func HasOrderItemShipGroup() predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderItemShipGroupTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OrderItemShipGroupTable, OrderItemShipGroupColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderItemShipGroupWith applies the HasEdge predicate on the "order_item_ship_group" edge with a given conditions (other predicates).
func HasOrderItemShipGroupWith(preds ...predicate.OrderItemShipGroup) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderItemShipGroupInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OrderItemShipGroupTable, OrderItemShipGroupColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrderItemShipGroupAssoc applies the HasEdge predicate on the "order_item_ship_group_assoc" edge.
func HasOrderItemShipGroupAssoc() predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderItemShipGroupAssocTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OrderItemShipGroupAssocTable, OrderItemShipGroupAssocColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderItemShipGroupAssocWith applies the HasEdge predicate on the "order_item_ship_group_assoc" edge with a given conditions (other predicates).
func HasOrderItemShipGroupAssocWith(preds ...predicate.OrderItemShipGroupAssoc) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderItemShipGroupAssocInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OrderItemShipGroupAssocTable, OrderItemShipGroupAssocColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasParent applies the HasEdge predicate on the "parent" edge.
func HasParent() predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ParentTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ParentTable, ParentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasParentWith applies the HasEdge predicate on the "parent" edge with a given conditions (other predicates).
func HasParentWith(preds ...predicate.OrderAdjustment) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ParentTable, ParentColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasChildren applies the HasEdge predicate on the "children" edge.
func HasChildren() predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ChildrenTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ChildrenTable, ChildrenColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChildrenWith applies the HasEdge predicate on the "children" edge with a given conditions (other predicates).
func HasChildrenWith(preds ...predicate.OrderAdjustment) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ChildrenTable, ChildrenColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.OrderAdjustment) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.OrderAdjustment) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.OrderAdjustment) predicate.OrderAdjustment {
	return predicate.OrderAdjustment(func(s *sql.Selector) {
		p(s.Not())
	})
}
