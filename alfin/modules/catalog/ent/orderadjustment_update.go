// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/orderadjustment"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/orderheader"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/orderitem"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/orderitemshipgroup"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/orderitemshipgroupassoc"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/predicate"
)

// OrderAdjustmentUpdate is the builder for updating OrderAdjustment entities.
type OrderAdjustmentUpdate struct {
	config
	hooks    []Hook
	mutation *OrderAdjustmentMutation
}

// Where adds a new predicate for the OrderAdjustmentUpdate builder.
func (oau *OrderAdjustmentUpdate) Where(ps ...predicate.OrderAdjustment) *OrderAdjustmentUpdate {
	oau.mutation.predicates = append(oau.mutation.predicates, ps...)
	return oau
}

// SetStringRef sets the "string_ref" field.
func (oau *OrderAdjustmentUpdate) SetStringRef(s string) *OrderAdjustmentUpdate {
	oau.mutation.SetStringRef(s)
	return oau
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (oau *OrderAdjustmentUpdate) SetNillableStringRef(s *string) *OrderAdjustmentUpdate {
	if s != nil {
		oau.SetStringRef(*s)
	}
	return oau
}

// ClearStringRef clears the value of the "string_ref" field.
func (oau *OrderAdjustmentUpdate) ClearStringRef() *OrderAdjustmentUpdate {
	oau.mutation.ClearStringRef()
	return oau
}

// SetOrderAdjustmentTypeID sets the "order_adjustment_type_id" field.
func (oau *OrderAdjustmentUpdate) SetOrderAdjustmentTypeID(i int) *OrderAdjustmentUpdate {
	oau.mutation.ResetOrderAdjustmentTypeID()
	oau.mutation.SetOrderAdjustmentTypeID(i)
	return oau
}

// SetNillableOrderAdjustmentTypeID sets the "order_adjustment_type_id" field if the given value is not nil.
func (oau *OrderAdjustmentUpdate) SetNillableOrderAdjustmentTypeID(i *int) *OrderAdjustmentUpdate {
	if i != nil {
		oau.SetOrderAdjustmentTypeID(*i)
	}
	return oau
}

// AddOrderAdjustmentTypeID adds i to the "order_adjustment_type_id" field.
func (oau *OrderAdjustmentUpdate) AddOrderAdjustmentTypeID(i int) *OrderAdjustmentUpdate {
	oau.mutation.AddOrderAdjustmentTypeID(i)
	return oau
}

// ClearOrderAdjustmentTypeID clears the value of the "order_adjustment_type_id" field.
func (oau *OrderAdjustmentUpdate) ClearOrderAdjustmentTypeID() *OrderAdjustmentUpdate {
	oau.mutation.ClearOrderAdjustmentTypeID()
	return oau
}

// SetOrderItemSeqID sets the "order_item_seq_id" field.
func (oau *OrderAdjustmentUpdate) SetOrderItemSeqID(i int) *OrderAdjustmentUpdate {
	oau.mutation.ResetOrderItemSeqID()
	oau.mutation.SetOrderItemSeqID(i)
	return oau
}

// SetNillableOrderItemSeqID sets the "order_item_seq_id" field if the given value is not nil.
func (oau *OrderAdjustmentUpdate) SetNillableOrderItemSeqID(i *int) *OrderAdjustmentUpdate {
	if i != nil {
		oau.SetOrderItemSeqID(*i)
	}
	return oau
}

// AddOrderItemSeqID adds i to the "order_item_seq_id" field.
func (oau *OrderAdjustmentUpdate) AddOrderItemSeqID(i int) *OrderAdjustmentUpdate {
	oau.mutation.AddOrderItemSeqID(i)
	return oau
}

// ClearOrderItemSeqID clears the value of the "order_item_seq_id" field.
func (oau *OrderAdjustmentUpdate) ClearOrderItemSeqID() *OrderAdjustmentUpdate {
	oau.mutation.ClearOrderItemSeqID()
	return oau
}

// SetShipGroupSeqID sets the "ship_group_seq_id" field.
func (oau *OrderAdjustmentUpdate) SetShipGroupSeqID(i int) *OrderAdjustmentUpdate {
	oau.mutation.ResetShipGroupSeqID()
	oau.mutation.SetShipGroupSeqID(i)
	return oau
}

// SetNillableShipGroupSeqID sets the "ship_group_seq_id" field if the given value is not nil.
func (oau *OrderAdjustmentUpdate) SetNillableShipGroupSeqID(i *int) *OrderAdjustmentUpdate {
	if i != nil {
		oau.SetShipGroupSeqID(*i)
	}
	return oau
}

// AddShipGroupSeqID adds i to the "ship_group_seq_id" field.
func (oau *OrderAdjustmentUpdate) AddShipGroupSeqID(i int) *OrderAdjustmentUpdate {
	oau.mutation.AddShipGroupSeqID(i)
	return oau
}

// ClearShipGroupSeqID clears the value of the "ship_group_seq_id" field.
func (oau *OrderAdjustmentUpdate) ClearShipGroupSeqID() *OrderAdjustmentUpdate {
	oau.mutation.ClearShipGroupSeqID()
	return oau
}

// SetComments sets the "comments" field.
func (oau *OrderAdjustmentUpdate) SetComments(s string) *OrderAdjustmentUpdate {
	oau.mutation.SetComments(s)
	return oau
}

// SetNillableComments sets the "comments" field if the given value is not nil.
func (oau *OrderAdjustmentUpdate) SetNillableComments(s *string) *OrderAdjustmentUpdate {
	if s != nil {
		oau.SetComments(*s)
	}
	return oau
}

// ClearComments clears the value of the "comments" field.
func (oau *OrderAdjustmentUpdate) ClearComments() *OrderAdjustmentUpdate {
	oau.mutation.ClearComments()
	return oau
}

// SetDescription sets the "description" field.
func (oau *OrderAdjustmentUpdate) SetDescription(s string) *OrderAdjustmentUpdate {
	oau.mutation.SetDescription(s)
	return oau
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (oau *OrderAdjustmentUpdate) SetNillableDescription(s *string) *OrderAdjustmentUpdate {
	if s != nil {
		oau.SetDescription(*s)
	}
	return oau
}

// ClearDescription clears the value of the "description" field.
func (oau *OrderAdjustmentUpdate) ClearDescription() *OrderAdjustmentUpdate {
	oau.mutation.ClearDescription()
	return oau
}

// SetAmount sets the "amount" field.
func (oau *OrderAdjustmentUpdate) SetAmount(f float64) *OrderAdjustmentUpdate {
	oau.mutation.ResetAmount()
	oau.mutation.SetAmount(f)
	return oau
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (oau *OrderAdjustmentUpdate) SetNillableAmount(f *float64) *OrderAdjustmentUpdate {
	if f != nil {
		oau.SetAmount(*f)
	}
	return oau
}

// AddAmount adds f to the "amount" field.
func (oau *OrderAdjustmentUpdate) AddAmount(f float64) *OrderAdjustmentUpdate {
	oau.mutation.AddAmount(f)
	return oau
}

// ClearAmount clears the value of the "amount" field.
func (oau *OrderAdjustmentUpdate) ClearAmount() *OrderAdjustmentUpdate {
	oau.mutation.ClearAmount()
	return oau
}

// SetRecurringAmount sets the "recurring_amount" field.
func (oau *OrderAdjustmentUpdate) SetRecurringAmount(f float64) *OrderAdjustmentUpdate {
	oau.mutation.ResetRecurringAmount()
	oau.mutation.SetRecurringAmount(f)
	return oau
}

// SetNillableRecurringAmount sets the "recurring_amount" field if the given value is not nil.
func (oau *OrderAdjustmentUpdate) SetNillableRecurringAmount(f *float64) *OrderAdjustmentUpdate {
	if f != nil {
		oau.SetRecurringAmount(*f)
	}
	return oau
}

// AddRecurringAmount adds f to the "recurring_amount" field.
func (oau *OrderAdjustmentUpdate) AddRecurringAmount(f float64) *OrderAdjustmentUpdate {
	oau.mutation.AddRecurringAmount(f)
	return oau
}

// ClearRecurringAmount clears the value of the "recurring_amount" field.
func (oau *OrderAdjustmentUpdate) ClearRecurringAmount() *OrderAdjustmentUpdate {
	oau.mutation.ClearRecurringAmount()
	return oau
}

// SetAmountAlreadyIncluded sets the "amount_already_included" field.
func (oau *OrderAdjustmentUpdate) SetAmountAlreadyIncluded(f float64) *OrderAdjustmentUpdate {
	oau.mutation.ResetAmountAlreadyIncluded()
	oau.mutation.SetAmountAlreadyIncluded(f)
	return oau
}

// SetNillableAmountAlreadyIncluded sets the "amount_already_included" field if the given value is not nil.
func (oau *OrderAdjustmentUpdate) SetNillableAmountAlreadyIncluded(f *float64) *OrderAdjustmentUpdate {
	if f != nil {
		oau.SetAmountAlreadyIncluded(*f)
	}
	return oau
}

// AddAmountAlreadyIncluded adds f to the "amount_already_included" field.
func (oau *OrderAdjustmentUpdate) AddAmountAlreadyIncluded(f float64) *OrderAdjustmentUpdate {
	oau.mutation.AddAmountAlreadyIncluded(f)
	return oau
}

// ClearAmountAlreadyIncluded clears the value of the "amount_already_included" field.
func (oau *OrderAdjustmentUpdate) ClearAmountAlreadyIncluded() *OrderAdjustmentUpdate {
	oau.mutation.ClearAmountAlreadyIncluded()
	return oau
}

// SetProductPromoID sets the "product_promo_id" field.
func (oau *OrderAdjustmentUpdate) SetProductPromoID(i int) *OrderAdjustmentUpdate {
	oau.mutation.ResetProductPromoID()
	oau.mutation.SetProductPromoID(i)
	return oau
}

// SetNillableProductPromoID sets the "product_promo_id" field if the given value is not nil.
func (oau *OrderAdjustmentUpdate) SetNillableProductPromoID(i *int) *OrderAdjustmentUpdate {
	if i != nil {
		oau.SetProductPromoID(*i)
	}
	return oau
}

// AddProductPromoID adds i to the "product_promo_id" field.
func (oau *OrderAdjustmentUpdate) AddProductPromoID(i int) *OrderAdjustmentUpdate {
	oau.mutation.AddProductPromoID(i)
	return oau
}

// ClearProductPromoID clears the value of the "product_promo_id" field.
func (oau *OrderAdjustmentUpdate) ClearProductPromoID() *OrderAdjustmentUpdate {
	oau.mutation.ClearProductPromoID()
	return oau
}

// SetProductPromoRuleID sets the "product_promo_rule_id" field.
func (oau *OrderAdjustmentUpdate) SetProductPromoRuleID(i int) *OrderAdjustmentUpdate {
	oau.mutation.ResetProductPromoRuleID()
	oau.mutation.SetProductPromoRuleID(i)
	return oau
}

// SetNillableProductPromoRuleID sets the "product_promo_rule_id" field if the given value is not nil.
func (oau *OrderAdjustmentUpdate) SetNillableProductPromoRuleID(i *int) *OrderAdjustmentUpdate {
	if i != nil {
		oau.SetProductPromoRuleID(*i)
	}
	return oau
}

// AddProductPromoRuleID adds i to the "product_promo_rule_id" field.
func (oau *OrderAdjustmentUpdate) AddProductPromoRuleID(i int) *OrderAdjustmentUpdate {
	oau.mutation.AddProductPromoRuleID(i)
	return oau
}

// ClearProductPromoRuleID clears the value of the "product_promo_rule_id" field.
func (oau *OrderAdjustmentUpdate) ClearProductPromoRuleID() *OrderAdjustmentUpdate {
	oau.mutation.ClearProductPromoRuleID()
	return oau
}

// SetProductPromoActionSeqID sets the "product_promo_action_seq_id" field.
func (oau *OrderAdjustmentUpdate) SetProductPromoActionSeqID(i int) *OrderAdjustmentUpdate {
	oau.mutation.ResetProductPromoActionSeqID()
	oau.mutation.SetProductPromoActionSeqID(i)
	return oau
}

// SetNillableProductPromoActionSeqID sets the "product_promo_action_seq_id" field if the given value is not nil.
func (oau *OrderAdjustmentUpdate) SetNillableProductPromoActionSeqID(i *int) *OrderAdjustmentUpdate {
	if i != nil {
		oau.SetProductPromoActionSeqID(*i)
	}
	return oau
}

// AddProductPromoActionSeqID adds i to the "product_promo_action_seq_id" field.
func (oau *OrderAdjustmentUpdate) AddProductPromoActionSeqID(i int) *OrderAdjustmentUpdate {
	oau.mutation.AddProductPromoActionSeqID(i)
	return oau
}

// ClearProductPromoActionSeqID clears the value of the "product_promo_action_seq_id" field.
func (oau *OrderAdjustmentUpdate) ClearProductPromoActionSeqID() *OrderAdjustmentUpdate {
	oau.mutation.ClearProductPromoActionSeqID()
	return oau
}

// SetProductFeatureID sets the "product_feature_id" field.
func (oau *OrderAdjustmentUpdate) SetProductFeatureID(i int) *OrderAdjustmentUpdate {
	oau.mutation.ResetProductFeatureID()
	oau.mutation.SetProductFeatureID(i)
	return oau
}

// SetNillableProductFeatureID sets the "product_feature_id" field if the given value is not nil.
func (oau *OrderAdjustmentUpdate) SetNillableProductFeatureID(i *int) *OrderAdjustmentUpdate {
	if i != nil {
		oau.SetProductFeatureID(*i)
	}
	return oau
}

// AddProductFeatureID adds i to the "product_feature_id" field.
func (oau *OrderAdjustmentUpdate) AddProductFeatureID(i int) *OrderAdjustmentUpdate {
	oau.mutation.AddProductFeatureID(i)
	return oau
}

// ClearProductFeatureID clears the value of the "product_feature_id" field.
func (oau *OrderAdjustmentUpdate) ClearProductFeatureID() *OrderAdjustmentUpdate {
	oau.mutation.ClearProductFeatureID()
	return oau
}

// SetCorrespondingProductID sets the "corresponding_product_id" field.
func (oau *OrderAdjustmentUpdate) SetCorrespondingProductID(i int) *OrderAdjustmentUpdate {
	oau.mutation.ResetCorrespondingProductID()
	oau.mutation.SetCorrespondingProductID(i)
	return oau
}

// SetNillableCorrespondingProductID sets the "corresponding_product_id" field if the given value is not nil.
func (oau *OrderAdjustmentUpdate) SetNillableCorrespondingProductID(i *int) *OrderAdjustmentUpdate {
	if i != nil {
		oau.SetCorrespondingProductID(*i)
	}
	return oau
}

// AddCorrespondingProductID adds i to the "corresponding_product_id" field.
func (oau *OrderAdjustmentUpdate) AddCorrespondingProductID(i int) *OrderAdjustmentUpdate {
	oau.mutation.AddCorrespondingProductID(i)
	return oau
}

// ClearCorrespondingProductID clears the value of the "corresponding_product_id" field.
func (oau *OrderAdjustmentUpdate) ClearCorrespondingProductID() *OrderAdjustmentUpdate {
	oau.mutation.ClearCorrespondingProductID()
	return oau
}

// SetTaxAuthorityRateSeqID sets the "tax_authority_rate_seq_id" field.
func (oau *OrderAdjustmentUpdate) SetTaxAuthorityRateSeqID(i int) *OrderAdjustmentUpdate {
	oau.mutation.ResetTaxAuthorityRateSeqID()
	oau.mutation.SetTaxAuthorityRateSeqID(i)
	return oau
}

// SetNillableTaxAuthorityRateSeqID sets the "tax_authority_rate_seq_id" field if the given value is not nil.
func (oau *OrderAdjustmentUpdate) SetNillableTaxAuthorityRateSeqID(i *int) *OrderAdjustmentUpdate {
	if i != nil {
		oau.SetTaxAuthorityRateSeqID(*i)
	}
	return oau
}

// AddTaxAuthorityRateSeqID adds i to the "tax_authority_rate_seq_id" field.
func (oau *OrderAdjustmentUpdate) AddTaxAuthorityRateSeqID(i int) *OrderAdjustmentUpdate {
	oau.mutation.AddTaxAuthorityRateSeqID(i)
	return oau
}

// ClearTaxAuthorityRateSeqID clears the value of the "tax_authority_rate_seq_id" field.
func (oau *OrderAdjustmentUpdate) ClearTaxAuthorityRateSeqID() *OrderAdjustmentUpdate {
	oau.mutation.ClearTaxAuthorityRateSeqID()
	return oau
}

// SetSourceReferenceID sets the "source_reference_id" field.
func (oau *OrderAdjustmentUpdate) SetSourceReferenceID(s string) *OrderAdjustmentUpdate {
	oau.mutation.SetSourceReferenceID(s)
	return oau
}

// SetNillableSourceReferenceID sets the "source_reference_id" field if the given value is not nil.
func (oau *OrderAdjustmentUpdate) SetNillableSourceReferenceID(s *string) *OrderAdjustmentUpdate {
	if s != nil {
		oau.SetSourceReferenceID(*s)
	}
	return oau
}

// ClearSourceReferenceID clears the value of the "source_reference_id" field.
func (oau *OrderAdjustmentUpdate) ClearSourceReferenceID() *OrderAdjustmentUpdate {
	oau.mutation.ClearSourceReferenceID()
	return oau
}

// SetSourcePercentage sets the "source_percentage" field.
func (oau *OrderAdjustmentUpdate) SetSourcePercentage(f float64) *OrderAdjustmentUpdate {
	oau.mutation.ResetSourcePercentage()
	oau.mutation.SetSourcePercentage(f)
	return oau
}

// SetNillableSourcePercentage sets the "source_percentage" field if the given value is not nil.
func (oau *OrderAdjustmentUpdate) SetNillableSourcePercentage(f *float64) *OrderAdjustmentUpdate {
	if f != nil {
		oau.SetSourcePercentage(*f)
	}
	return oau
}

// AddSourcePercentage adds f to the "source_percentage" field.
func (oau *OrderAdjustmentUpdate) AddSourcePercentage(f float64) *OrderAdjustmentUpdate {
	oau.mutation.AddSourcePercentage(f)
	return oau
}

// ClearSourcePercentage clears the value of the "source_percentage" field.
func (oau *OrderAdjustmentUpdate) ClearSourcePercentage() *OrderAdjustmentUpdate {
	oau.mutation.ClearSourcePercentage()
	return oau
}

// SetCustomerReferenceID sets the "customer_reference_id" field.
func (oau *OrderAdjustmentUpdate) SetCustomerReferenceID(s string) *OrderAdjustmentUpdate {
	oau.mutation.SetCustomerReferenceID(s)
	return oau
}

// SetNillableCustomerReferenceID sets the "customer_reference_id" field if the given value is not nil.
func (oau *OrderAdjustmentUpdate) SetNillableCustomerReferenceID(s *string) *OrderAdjustmentUpdate {
	if s != nil {
		oau.SetCustomerReferenceID(*s)
	}
	return oau
}

// ClearCustomerReferenceID clears the value of the "customer_reference_id" field.
func (oau *OrderAdjustmentUpdate) ClearCustomerReferenceID() *OrderAdjustmentUpdate {
	oau.mutation.ClearCustomerReferenceID()
	return oau
}

// SetPrimaryGeoID sets the "primary_geo_id" field.
func (oau *OrderAdjustmentUpdate) SetPrimaryGeoID(i int) *OrderAdjustmentUpdate {
	oau.mutation.ResetPrimaryGeoID()
	oau.mutation.SetPrimaryGeoID(i)
	return oau
}

// SetNillablePrimaryGeoID sets the "primary_geo_id" field if the given value is not nil.
func (oau *OrderAdjustmentUpdate) SetNillablePrimaryGeoID(i *int) *OrderAdjustmentUpdate {
	if i != nil {
		oau.SetPrimaryGeoID(*i)
	}
	return oau
}

// AddPrimaryGeoID adds i to the "primary_geo_id" field.
func (oau *OrderAdjustmentUpdate) AddPrimaryGeoID(i int) *OrderAdjustmentUpdate {
	oau.mutation.AddPrimaryGeoID(i)
	return oau
}

// ClearPrimaryGeoID clears the value of the "primary_geo_id" field.
func (oau *OrderAdjustmentUpdate) ClearPrimaryGeoID() *OrderAdjustmentUpdate {
	oau.mutation.ClearPrimaryGeoID()
	return oau
}

// SetSecondaryGeoID sets the "secondary_geo_id" field.
func (oau *OrderAdjustmentUpdate) SetSecondaryGeoID(i int) *OrderAdjustmentUpdate {
	oau.mutation.ResetSecondaryGeoID()
	oau.mutation.SetSecondaryGeoID(i)
	return oau
}

// SetNillableSecondaryGeoID sets the "secondary_geo_id" field if the given value is not nil.
func (oau *OrderAdjustmentUpdate) SetNillableSecondaryGeoID(i *int) *OrderAdjustmentUpdate {
	if i != nil {
		oau.SetSecondaryGeoID(*i)
	}
	return oau
}

// AddSecondaryGeoID adds i to the "secondary_geo_id" field.
func (oau *OrderAdjustmentUpdate) AddSecondaryGeoID(i int) *OrderAdjustmentUpdate {
	oau.mutation.AddSecondaryGeoID(i)
	return oau
}

// ClearSecondaryGeoID clears the value of the "secondary_geo_id" field.
func (oau *OrderAdjustmentUpdate) ClearSecondaryGeoID() *OrderAdjustmentUpdate {
	oau.mutation.ClearSecondaryGeoID()
	return oau
}

// SetExemptAmount sets the "exempt_amount" field.
func (oau *OrderAdjustmentUpdate) SetExemptAmount(f float64) *OrderAdjustmentUpdate {
	oau.mutation.ResetExemptAmount()
	oau.mutation.SetExemptAmount(f)
	return oau
}

// SetNillableExemptAmount sets the "exempt_amount" field if the given value is not nil.
func (oau *OrderAdjustmentUpdate) SetNillableExemptAmount(f *float64) *OrderAdjustmentUpdate {
	if f != nil {
		oau.SetExemptAmount(*f)
	}
	return oau
}

// AddExemptAmount adds f to the "exempt_amount" field.
func (oau *OrderAdjustmentUpdate) AddExemptAmount(f float64) *OrderAdjustmentUpdate {
	oau.mutation.AddExemptAmount(f)
	return oau
}

// ClearExemptAmount clears the value of the "exempt_amount" field.
func (oau *OrderAdjustmentUpdate) ClearExemptAmount() *OrderAdjustmentUpdate {
	oau.mutation.ClearExemptAmount()
	return oau
}

// SetTaxAuthGeoID sets the "tax_auth_geo_id" field.
func (oau *OrderAdjustmentUpdate) SetTaxAuthGeoID(i int) *OrderAdjustmentUpdate {
	oau.mutation.ResetTaxAuthGeoID()
	oau.mutation.SetTaxAuthGeoID(i)
	return oau
}

// SetNillableTaxAuthGeoID sets the "tax_auth_geo_id" field if the given value is not nil.
func (oau *OrderAdjustmentUpdate) SetNillableTaxAuthGeoID(i *int) *OrderAdjustmentUpdate {
	if i != nil {
		oau.SetTaxAuthGeoID(*i)
	}
	return oau
}

// AddTaxAuthGeoID adds i to the "tax_auth_geo_id" field.
func (oau *OrderAdjustmentUpdate) AddTaxAuthGeoID(i int) *OrderAdjustmentUpdate {
	oau.mutation.AddTaxAuthGeoID(i)
	return oau
}

// ClearTaxAuthGeoID clears the value of the "tax_auth_geo_id" field.
func (oau *OrderAdjustmentUpdate) ClearTaxAuthGeoID() *OrderAdjustmentUpdate {
	oau.mutation.ClearTaxAuthGeoID()
	return oau
}

// SetTaxAuthPartyID sets the "tax_auth_party_id" field.
func (oau *OrderAdjustmentUpdate) SetTaxAuthPartyID(i int) *OrderAdjustmentUpdate {
	oau.mutation.ResetTaxAuthPartyID()
	oau.mutation.SetTaxAuthPartyID(i)
	return oau
}

// SetNillableTaxAuthPartyID sets the "tax_auth_party_id" field if the given value is not nil.
func (oau *OrderAdjustmentUpdate) SetNillableTaxAuthPartyID(i *int) *OrderAdjustmentUpdate {
	if i != nil {
		oau.SetTaxAuthPartyID(*i)
	}
	return oau
}

// AddTaxAuthPartyID adds i to the "tax_auth_party_id" field.
func (oau *OrderAdjustmentUpdate) AddTaxAuthPartyID(i int) *OrderAdjustmentUpdate {
	oau.mutation.AddTaxAuthPartyID(i)
	return oau
}

// ClearTaxAuthPartyID clears the value of the "tax_auth_party_id" field.
func (oau *OrderAdjustmentUpdate) ClearTaxAuthPartyID() *OrderAdjustmentUpdate {
	oau.mutation.ClearTaxAuthPartyID()
	return oau
}

// SetOverrideGlAccountID sets the "override_gl_account_id" field.
func (oau *OrderAdjustmentUpdate) SetOverrideGlAccountID(i int) *OrderAdjustmentUpdate {
	oau.mutation.ResetOverrideGlAccountID()
	oau.mutation.SetOverrideGlAccountID(i)
	return oau
}

// SetNillableOverrideGlAccountID sets the "override_gl_account_id" field if the given value is not nil.
func (oau *OrderAdjustmentUpdate) SetNillableOverrideGlAccountID(i *int) *OrderAdjustmentUpdate {
	if i != nil {
		oau.SetOverrideGlAccountID(*i)
	}
	return oau
}

// AddOverrideGlAccountID adds i to the "override_gl_account_id" field.
func (oau *OrderAdjustmentUpdate) AddOverrideGlAccountID(i int) *OrderAdjustmentUpdate {
	oau.mutation.AddOverrideGlAccountID(i)
	return oau
}

// ClearOverrideGlAccountID clears the value of the "override_gl_account_id" field.
func (oau *OrderAdjustmentUpdate) ClearOverrideGlAccountID() *OrderAdjustmentUpdate {
	oau.mutation.ClearOverrideGlAccountID()
	return oau
}

// SetIncludeInTax sets the "include_in_tax" field.
func (oau *OrderAdjustmentUpdate) SetIncludeInTax(oit orderadjustment.IncludeInTax) *OrderAdjustmentUpdate {
	oau.mutation.SetIncludeInTax(oit)
	return oau
}

// SetNillableIncludeInTax sets the "include_in_tax" field if the given value is not nil.
func (oau *OrderAdjustmentUpdate) SetNillableIncludeInTax(oit *orderadjustment.IncludeInTax) *OrderAdjustmentUpdate {
	if oit != nil {
		oau.SetIncludeInTax(*oit)
	}
	return oau
}

// ClearIncludeInTax clears the value of the "include_in_tax" field.
func (oau *OrderAdjustmentUpdate) ClearIncludeInTax() *OrderAdjustmentUpdate {
	oau.mutation.ClearIncludeInTax()
	return oau
}

// SetIncludeInShipping sets the "include_in_shipping" field.
func (oau *OrderAdjustmentUpdate) SetIncludeInShipping(ois orderadjustment.IncludeInShipping) *OrderAdjustmentUpdate {
	oau.mutation.SetIncludeInShipping(ois)
	return oau
}

// SetNillableIncludeInShipping sets the "include_in_shipping" field if the given value is not nil.
func (oau *OrderAdjustmentUpdate) SetNillableIncludeInShipping(ois *orderadjustment.IncludeInShipping) *OrderAdjustmentUpdate {
	if ois != nil {
		oau.SetIncludeInShipping(*ois)
	}
	return oau
}

// ClearIncludeInShipping clears the value of the "include_in_shipping" field.
func (oau *OrderAdjustmentUpdate) ClearIncludeInShipping() *OrderAdjustmentUpdate {
	oau.mutation.ClearIncludeInShipping()
	return oau
}

// SetIsManual sets the "is_manual" field.
func (oau *OrderAdjustmentUpdate) SetIsManual(om orderadjustment.IsManual) *OrderAdjustmentUpdate {
	oau.mutation.SetIsManual(om)
	return oau
}

// SetNillableIsManual sets the "is_manual" field if the given value is not nil.
func (oau *OrderAdjustmentUpdate) SetNillableIsManual(om *orderadjustment.IsManual) *OrderAdjustmentUpdate {
	if om != nil {
		oau.SetIsManual(*om)
	}
	return oau
}

// ClearIsManual clears the value of the "is_manual" field.
func (oau *OrderAdjustmentUpdate) ClearIsManual() *OrderAdjustmentUpdate {
	oau.mutation.ClearIsManual()
	return oau
}

// SetCreatedDate sets the "created_date" field.
func (oau *OrderAdjustmentUpdate) SetCreatedDate(t time.Time) *OrderAdjustmentUpdate {
	oau.mutation.SetCreatedDate(t)
	return oau
}

// SetNillableCreatedDate sets the "created_date" field if the given value is not nil.
func (oau *OrderAdjustmentUpdate) SetNillableCreatedDate(t *time.Time) *OrderAdjustmentUpdate {
	if t != nil {
		oau.SetCreatedDate(*t)
	}
	return oau
}

// ClearCreatedDate clears the value of the "created_date" field.
func (oau *OrderAdjustmentUpdate) ClearCreatedDate() *OrderAdjustmentUpdate {
	oau.mutation.ClearCreatedDate()
	return oau
}

// SetCreatedByUserLogin sets the "created_by_user_login" field.
func (oau *OrderAdjustmentUpdate) SetCreatedByUserLogin(s string) *OrderAdjustmentUpdate {
	oau.mutation.SetCreatedByUserLogin(s)
	return oau
}

// SetNillableCreatedByUserLogin sets the "created_by_user_login" field if the given value is not nil.
func (oau *OrderAdjustmentUpdate) SetNillableCreatedByUserLogin(s *string) *OrderAdjustmentUpdate {
	if s != nil {
		oau.SetCreatedByUserLogin(*s)
	}
	return oau
}

// ClearCreatedByUserLogin clears the value of the "created_by_user_login" field.
func (oau *OrderAdjustmentUpdate) ClearCreatedByUserLogin() *OrderAdjustmentUpdate {
	oau.mutation.ClearCreatedByUserLogin()
	return oau
}

// SetLastModifiedDate sets the "last_modified_date" field.
func (oau *OrderAdjustmentUpdate) SetLastModifiedDate(t time.Time) *OrderAdjustmentUpdate {
	oau.mutation.SetLastModifiedDate(t)
	return oau
}

// SetNillableLastModifiedDate sets the "last_modified_date" field if the given value is not nil.
func (oau *OrderAdjustmentUpdate) SetNillableLastModifiedDate(t *time.Time) *OrderAdjustmentUpdate {
	if t != nil {
		oau.SetLastModifiedDate(*t)
	}
	return oau
}

// ClearLastModifiedDate clears the value of the "last_modified_date" field.
func (oau *OrderAdjustmentUpdate) ClearLastModifiedDate() *OrderAdjustmentUpdate {
	oau.mutation.ClearLastModifiedDate()
	return oau
}

// SetLastModifiedByUserLogin sets the "last_modified_by_user_login" field.
func (oau *OrderAdjustmentUpdate) SetLastModifiedByUserLogin(s string) *OrderAdjustmentUpdate {
	oau.mutation.SetLastModifiedByUserLogin(s)
	return oau
}

// SetNillableLastModifiedByUserLogin sets the "last_modified_by_user_login" field if the given value is not nil.
func (oau *OrderAdjustmentUpdate) SetNillableLastModifiedByUserLogin(s *string) *OrderAdjustmentUpdate {
	if s != nil {
		oau.SetLastModifiedByUserLogin(*s)
	}
	return oau
}

// ClearLastModifiedByUserLogin clears the value of the "last_modified_by_user_login" field.
func (oau *OrderAdjustmentUpdate) ClearLastModifiedByUserLogin() *OrderAdjustmentUpdate {
	oau.mutation.ClearLastModifiedByUserLogin()
	return oau
}

// SetOrderHeaderID sets the "order_header" edge to the OrderHeader entity by ID.
func (oau *OrderAdjustmentUpdate) SetOrderHeaderID(id int) *OrderAdjustmentUpdate {
	oau.mutation.SetOrderHeaderID(id)
	return oau
}

// SetNillableOrderHeaderID sets the "order_header" edge to the OrderHeader entity by ID if the given value is not nil.
func (oau *OrderAdjustmentUpdate) SetNillableOrderHeaderID(id *int) *OrderAdjustmentUpdate {
	if id != nil {
		oau = oau.SetOrderHeaderID(*id)
	}
	return oau
}

// SetOrderHeader sets the "order_header" edge to the OrderHeader entity.
func (oau *OrderAdjustmentUpdate) SetOrderHeader(o *OrderHeader) *OrderAdjustmentUpdate {
	return oau.SetOrderHeaderID(o.ID)
}

// SetOrderItemID sets the "order_item" edge to the OrderItem entity by ID.
func (oau *OrderAdjustmentUpdate) SetOrderItemID(id int) *OrderAdjustmentUpdate {
	oau.mutation.SetOrderItemID(id)
	return oau
}

// SetNillableOrderItemID sets the "order_item" edge to the OrderItem entity by ID if the given value is not nil.
func (oau *OrderAdjustmentUpdate) SetNillableOrderItemID(id *int) *OrderAdjustmentUpdate {
	if id != nil {
		oau = oau.SetOrderItemID(*id)
	}
	return oau
}

// SetOrderItem sets the "order_item" edge to the OrderItem entity.
func (oau *OrderAdjustmentUpdate) SetOrderItem(o *OrderItem) *OrderAdjustmentUpdate {
	return oau.SetOrderItemID(o.ID)
}

// SetOrderItemShipGroupID sets the "order_item_ship_group" edge to the OrderItemShipGroup entity by ID.
func (oau *OrderAdjustmentUpdate) SetOrderItemShipGroupID(id int) *OrderAdjustmentUpdate {
	oau.mutation.SetOrderItemShipGroupID(id)
	return oau
}

// SetNillableOrderItemShipGroupID sets the "order_item_ship_group" edge to the OrderItemShipGroup entity by ID if the given value is not nil.
func (oau *OrderAdjustmentUpdate) SetNillableOrderItemShipGroupID(id *int) *OrderAdjustmentUpdate {
	if id != nil {
		oau = oau.SetOrderItemShipGroupID(*id)
	}
	return oau
}

// SetOrderItemShipGroup sets the "order_item_ship_group" edge to the OrderItemShipGroup entity.
func (oau *OrderAdjustmentUpdate) SetOrderItemShipGroup(o *OrderItemShipGroup) *OrderAdjustmentUpdate {
	return oau.SetOrderItemShipGroupID(o.ID)
}

// SetOrderItemShipGroupAssocID sets the "order_item_ship_group_assoc" edge to the OrderItemShipGroupAssoc entity by ID.
func (oau *OrderAdjustmentUpdate) SetOrderItemShipGroupAssocID(id int) *OrderAdjustmentUpdate {
	oau.mutation.SetOrderItemShipGroupAssocID(id)
	return oau
}

// SetNillableOrderItemShipGroupAssocID sets the "order_item_ship_group_assoc" edge to the OrderItemShipGroupAssoc entity by ID if the given value is not nil.
func (oau *OrderAdjustmentUpdate) SetNillableOrderItemShipGroupAssocID(id *int) *OrderAdjustmentUpdate {
	if id != nil {
		oau = oau.SetOrderItemShipGroupAssocID(*id)
	}
	return oau
}

// SetOrderItemShipGroupAssoc sets the "order_item_ship_group_assoc" edge to the OrderItemShipGroupAssoc entity.
func (oau *OrderAdjustmentUpdate) SetOrderItemShipGroupAssoc(o *OrderItemShipGroupAssoc) *OrderAdjustmentUpdate {
	return oau.SetOrderItemShipGroupAssocID(o.ID)
}

// SetParentID sets the "parent" edge to the OrderAdjustment entity by ID.
func (oau *OrderAdjustmentUpdate) SetParentID(id int) *OrderAdjustmentUpdate {
	oau.mutation.SetParentID(id)
	return oau
}

// SetNillableParentID sets the "parent" edge to the OrderAdjustment entity by ID if the given value is not nil.
func (oau *OrderAdjustmentUpdate) SetNillableParentID(id *int) *OrderAdjustmentUpdate {
	if id != nil {
		oau = oau.SetParentID(*id)
	}
	return oau
}

// SetParent sets the "parent" edge to the OrderAdjustment entity.
func (oau *OrderAdjustmentUpdate) SetParent(o *OrderAdjustment) *OrderAdjustmentUpdate {
	return oau.SetParentID(o.ID)
}

// AddChildIDs adds the "children" edge to the OrderAdjustment entity by IDs.
func (oau *OrderAdjustmentUpdate) AddChildIDs(ids ...int) *OrderAdjustmentUpdate {
	oau.mutation.AddChildIDs(ids...)
	return oau
}

// AddChildren adds the "children" edges to the OrderAdjustment entity.
func (oau *OrderAdjustmentUpdate) AddChildren(o ...*OrderAdjustment) *OrderAdjustmentUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oau.AddChildIDs(ids...)
}

// Mutation returns the OrderAdjustmentMutation object of the builder.
func (oau *OrderAdjustmentUpdate) Mutation() *OrderAdjustmentMutation {
	return oau.mutation
}

// ClearOrderHeader clears the "order_header" edge to the OrderHeader entity.
func (oau *OrderAdjustmentUpdate) ClearOrderHeader() *OrderAdjustmentUpdate {
	oau.mutation.ClearOrderHeader()
	return oau
}

// ClearOrderItem clears the "order_item" edge to the OrderItem entity.
func (oau *OrderAdjustmentUpdate) ClearOrderItem() *OrderAdjustmentUpdate {
	oau.mutation.ClearOrderItem()
	return oau
}

// ClearOrderItemShipGroup clears the "order_item_ship_group" edge to the OrderItemShipGroup entity.
func (oau *OrderAdjustmentUpdate) ClearOrderItemShipGroup() *OrderAdjustmentUpdate {
	oau.mutation.ClearOrderItemShipGroup()
	return oau
}

// ClearOrderItemShipGroupAssoc clears the "order_item_ship_group_assoc" edge to the OrderItemShipGroupAssoc entity.
func (oau *OrderAdjustmentUpdate) ClearOrderItemShipGroupAssoc() *OrderAdjustmentUpdate {
	oau.mutation.ClearOrderItemShipGroupAssoc()
	return oau
}

// ClearParent clears the "parent" edge to the OrderAdjustment entity.
func (oau *OrderAdjustmentUpdate) ClearParent() *OrderAdjustmentUpdate {
	oau.mutation.ClearParent()
	return oau
}

// ClearChildren clears all "children" edges to the OrderAdjustment entity.
func (oau *OrderAdjustmentUpdate) ClearChildren() *OrderAdjustmentUpdate {
	oau.mutation.ClearChildren()
	return oau
}

// RemoveChildIDs removes the "children" edge to OrderAdjustment entities by IDs.
func (oau *OrderAdjustmentUpdate) RemoveChildIDs(ids ...int) *OrderAdjustmentUpdate {
	oau.mutation.RemoveChildIDs(ids...)
	return oau
}

// RemoveChildren removes "children" edges to OrderAdjustment entities.
func (oau *OrderAdjustmentUpdate) RemoveChildren(o ...*OrderAdjustment) *OrderAdjustmentUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oau.RemoveChildIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (oau *OrderAdjustmentUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	oau.defaults()
	if len(oau.hooks) == 0 {
		if err = oau.check(); err != nil {
			return 0, err
		}
		affected, err = oau.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderAdjustmentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = oau.check(); err != nil {
				return 0, err
			}
			oau.mutation = mutation
			affected, err = oau.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(oau.hooks) - 1; i >= 0; i-- {
			mut = oau.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, oau.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (oau *OrderAdjustmentUpdate) SaveX(ctx context.Context) int {
	affected, err := oau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (oau *OrderAdjustmentUpdate) Exec(ctx context.Context) error {
	_, err := oau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oau *OrderAdjustmentUpdate) ExecX(ctx context.Context) {
	if err := oau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oau *OrderAdjustmentUpdate) defaults() {
	if _, ok := oau.mutation.UpdateTime(); !ok {
		v := orderadjustment.UpdateDefaultUpdateTime()
		oau.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oau *OrderAdjustmentUpdate) check() error {
	if v, ok := oau.mutation.SourceReferenceID(); ok {
		if err := orderadjustment.SourceReferenceIDValidator(v); err != nil {
			return &ValidationError{Name: "source_reference_id", err: fmt.Errorf("ent: validator failed for field \"source_reference_id\": %w", err)}
		}
	}
	if v, ok := oau.mutation.CustomerReferenceID(); ok {
		if err := orderadjustment.CustomerReferenceIDValidator(v); err != nil {
			return &ValidationError{Name: "customer_reference_id", err: fmt.Errorf("ent: validator failed for field \"customer_reference_id\": %w", err)}
		}
	}
	if v, ok := oau.mutation.IncludeInTax(); ok {
		if err := orderadjustment.IncludeInTaxValidator(v); err != nil {
			return &ValidationError{Name: "include_in_tax", err: fmt.Errorf("ent: validator failed for field \"include_in_tax\": %w", err)}
		}
	}
	if v, ok := oau.mutation.IncludeInShipping(); ok {
		if err := orderadjustment.IncludeInShippingValidator(v); err != nil {
			return &ValidationError{Name: "include_in_shipping", err: fmt.Errorf("ent: validator failed for field \"include_in_shipping\": %w", err)}
		}
	}
	if v, ok := oau.mutation.IsManual(); ok {
		if err := orderadjustment.IsManualValidator(v); err != nil {
			return &ValidationError{Name: "is_manual", err: fmt.Errorf("ent: validator failed for field \"is_manual\": %w", err)}
		}
	}
	return nil
}

func (oau *OrderAdjustmentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   orderadjustment.Table,
			Columns: orderadjustment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: orderadjustment.FieldID,
			},
		},
	}
	if ps := oau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oau.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderadjustment.FieldUpdateTime,
		})
	}
	if value, ok := oau.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderadjustment.FieldStringRef,
		})
	}
	if oau.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: orderadjustment.FieldStringRef,
		})
	}
	if value, ok := oau.mutation.OrderAdjustmentTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderadjustment.FieldOrderAdjustmentTypeID,
		})
	}
	if value, ok := oau.mutation.AddedOrderAdjustmentTypeID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderadjustment.FieldOrderAdjustmentTypeID,
		})
	}
	if oau.mutation.OrderAdjustmentTypeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderadjustment.FieldOrderAdjustmentTypeID,
		})
	}
	if value, ok := oau.mutation.OrderItemSeqID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderadjustment.FieldOrderItemSeqID,
		})
	}
	if value, ok := oau.mutation.AddedOrderItemSeqID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderadjustment.FieldOrderItemSeqID,
		})
	}
	if oau.mutation.OrderItemSeqIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderadjustment.FieldOrderItemSeqID,
		})
	}
	if value, ok := oau.mutation.ShipGroupSeqID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderadjustment.FieldShipGroupSeqID,
		})
	}
	if value, ok := oau.mutation.AddedShipGroupSeqID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderadjustment.FieldShipGroupSeqID,
		})
	}
	if oau.mutation.ShipGroupSeqIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderadjustment.FieldShipGroupSeqID,
		})
	}
	if value, ok := oau.mutation.Comments(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderadjustment.FieldComments,
		})
	}
	if oau.mutation.CommentsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: orderadjustment.FieldComments,
		})
	}
	if value, ok := oau.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderadjustment.FieldDescription,
		})
	}
	if oau.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: orderadjustment.FieldDescription,
		})
	}
	if value, ok := oau.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderadjustment.FieldAmount,
		})
	}
	if value, ok := oau.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderadjustment.FieldAmount,
		})
	}
	if oau.mutation.AmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: orderadjustment.FieldAmount,
		})
	}
	if value, ok := oau.mutation.RecurringAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderadjustment.FieldRecurringAmount,
		})
	}
	if value, ok := oau.mutation.AddedRecurringAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderadjustment.FieldRecurringAmount,
		})
	}
	if oau.mutation.RecurringAmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: orderadjustment.FieldRecurringAmount,
		})
	}
	if value, ok := oau.mutation.AmountAlreadyIncluded(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderadjustment.FieldAmountAlreadyIncluded,
		})
	}
	if value, ok := oau.mutation.AddedAmountAlreadyIncluded(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderadjustment.FieldAmountAlreadyIncluded,
		})
	}
	if oau.mutation.AmountAlreadyIncludedCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: orderadjustment.FieldAmountAlreadyIncluded,
		})
	}
	if value, ok := oau.mutation.ProductPromoID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderadjustment.FieldProductPromoID,
		})
	}
	if value, ok := oau.mutation.AddedProductPromoID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderadjustment.FieldProductPromoID,
		})
	}
	if oau.mutation.ProductPromoIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderadjustment.FieldProductPromoID,
		})
	}
	if value, ok := oau.mutation.ProductPromoRuleID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderadjustment.FieldProductPromoRuleID,
		})
	}
	if value, ok := oau.mutation.AddedProductPromoRuleID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderadjustment.FieldProductPromoRuleID,
		})
	}
	if oau.mutation.ProductPromoRuleIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderadjustment.FieldProductPromoRuleID,
		})
	}
	if value, ok := oau.mutation.ProductPromoActionSeqID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderadjustment.FieldProductPromoActionSeqID,
		})
	}
	if value, ok := oau.mutation.AddedProductPromoActionSeqID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderadjustment.FieldProductPromoActionSeqID,
		})
	}
	if oau.mutation.ProductPromoActionSeqIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderadjustment.FieldProductPromoActionSeqID,
		})
	}
	if value, ok := oau.mutation.ProductFeatureID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderadjustment.FieldProductFeatureID,
		})
	}
	if value, ok := oau.mutation.AddedProductFeatureID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderadjustment.FieldProductFeatureID,
		})
	}
	if oau.mutation.ProductFeatureIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderadjustment.FieldProductFeatureID,
		})
	}
	if value, ok := oau.mutation.CorrespondingProductID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderadjustment.FieldCorrespondingProductID,
		})
	}
	if value, ok := oau.mutation.AddedCorrespondingProductID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderadjustment.FieldCorrespondingProductID,
		})
	}
	if oau.mutation.CorrespondingProductIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderadjustment.FieldCorrespondingProductID,
		})
	}
	if value, ok := oau.mutation.TaxAuthorityRateSeqID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderadjustment.FieldTaxAuthorityRateSeqID,
		})
	}
	if value, ok := oau.mutation.AddedTaxAuthorityRateSeqID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderadjustment.FieldTaxAuthorityRateSeqID,
		})
	}
	if oau.mutation.TaxAuthorityRateSeqIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderadjustment.FieldTaxAuthorityRateSeqID,
		})
	}
	if value, ok := oau.mutation.SourceReferenceID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderadjustment.FieldSourceReferenceID,
		})
	}
	if oau.mutation.SourceReferenceIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: orderadjustment.FieldSourceReferenceID,
		})
	}
	if value, ok := oau.mutation.SourcePercentage(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderadjustment.FieldSourcePercentage,
		})
	}
	if value, ok := oau.mutation.AddedSourcePercentage(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderadjustment.FieldSourcePercentage,
		})
	}
	if oau.mutation.SourcePercentageCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: orderadjustment.FieldSourcePercentage,
		})
	}
	if value, ok := oau.mutation.CustomerReferenceID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderadjustment.FieldCustomerReferenceID,
		})
	}
	if oau.mutation.CustomerReferenceIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: orderadjustment.FieldCustomerReferenceID,
		})
	}
	if value, ok := oau.mutation.PrimaryGeoID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderadjustment.FieldPrimaryGeoID,
		})
	}
	if value, ok := oau.mutation.AddedPrimaryGeoID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderadjustment.FieldPrimaryGeoID,
		})
	}
	if oau.mutation.PrimaryGeoIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderadjustment.FieldPrimaryGeoID,
		})
	}
	if value, ok := oau.mutation.SecondaryGeoID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderadjustment.FieldSecondaryGeoID,
		})
	}
	if value, ok := oau.mutation.AddedSecondaryGeoID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderadjustment.FieldSecondaryGeoID,
		})
	}
	if oau.mutation.SecondaryGeoIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderadjustment.FieldSecondaryGeoID,
		})
	}
	if value, ok := oau.mutation.ExemptAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderadjustment.FieldExemptAmount,
		})
	}
	if value, ok := oau.mutation.AddedExemptAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderadjustment.FieldExemptAmount,
		})
	}
	if oau.mutation.ExemptAmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: orderadjustment.FieldExemptAmount,
		})
	}
	if value, ok := oau.mutation.TaxAuthGeoID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderadjustment.FieldTaxAuthGeoID,
		})
	}
	if value, ok := oau.mutation.AddedTaxAuthGeoID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderadjustment.FieldTaxAuthGeoID,
		})
	}
	if oau.mutation.TaxAuthGeoIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderadjustment.FieldTaxAuthGeoID,
		})
	}
	if value, ok := oau.mutation.TaxAuthPartyID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderadjustment.FieldTaxAuthPartyID,
		})
	}
	if value, ok := oau.mutation.AddedTaxAuthPartyID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderadjustment.FieldTaxAuthPartyID,
		})
	}
	if oau.mutation.TaxAuthPartyIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderadjustment.FieldTaxAuthPartyID,
		})
	}
	if value, ok := oau.mutation.OverrideGlAccountID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderadjustment.FieldOverrideGlAccountID,
		})
	}
	if value, ok := oau.mutation.AddedOverrideGlAccountID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderadjustment.FieldOverrideGlAccountID,
		})
	}
	if oau.mutation.OverrideGlAccountIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderadjustment.FieldOverrideGlAccountID,
		})
	}
	if value, ok := oau.mutation.IncludeInTax(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: orderadjustment.FieldIncludeInTax,
		})
	}
	if oau.mutation.IncludeInTaxCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: orderadjustment.FieldIncludeInTax,
		})
	}
	if value, ok := oau.mutation.IncludeInShipping(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: orderadjustment.FieldIncludeInShipping,
		})
	}
	if oau.mutation.IncludeInShippingCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: orderadjustment.FieldIncludeInShipping,
		})
	}
	if value, ok := oau.mutation.IsManual(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: orderadjustment.FieldIsManual,
		})
	}
	if oau.mutation.IsManualCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: orderadjustment.FieldIsManual,
		})
	}
	if value, ok := oau.mutation.CreatedDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderadjustment.FieldCreatedDate,
		})
	}
	if oau.mutation.CreatedDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: orderadjustment.FieldCreatedDate,
		})
	}
	if value, ok := oau.mutation.CreatedByUserLogin(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderadjustment.FieldCreatedByUserLogin,
		})
	}
	if oau.mutation.CreatedByUserLoginCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: orderadjustment.FieldCreatedByUserLogin,
		})
	}
	if value, ok := oau.mutation.LastModifiedDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderadjustment.FieldLastModifiedDate,
		})
	}
	if oau.mutation.LastModifiedDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: orderadjustment.FieldLastModifiedDate,
		})
	}
	if value, ok := oau.mutation.LastModifiedByUserLogin(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderadjustment.FieldLastModifiedByUserLogin,
		})
	}
	if oau.mutation.LastModifiedByUserLoginCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: orderadjustment.FieldLastModifiedByUserLogin,
		})
	}
	if oau.mutation.OrderHeaderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderadjustment.OrderHeaderTable,
			Columns: []string{orderadjustment.OrderHeaderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderheader.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oau.mutation.OrderHeaderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderadjustment.OrderHeaderTable,
			Columns: []string{orderadjustment.OrderHeaderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderheader.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oau.mutation.OrderItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderadjustment.OrderItemTable,
			Columns: []string{orderadjustment.OrderItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitem.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oau.mutation.OrderItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderadjustment.OrderItemTable,
			Columns: []string{orderadjustment.OrderItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oau.mutation.OrderItemShipGroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderadjustment.OrderItemShipGroupTable,
			Columns: []string{orderadjustment.OrderItemShipGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitemshipgroup.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oau.mutation.OrderItemShipGroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderadjustment.OrderItemShipGroupTable,
			Columns: []string{orderadjustment.OrderItemShipGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitemshipgroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oau.mutation.OrderItemShipGroupAssocCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderadjustment.OrderItemShipGroupAssocTable,
			Columns: []string{orderadjustment.OrderItemShipGroupAssocColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitemshipgroupassoc.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oau.mutation.OrderItemShipGroupAssocIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderadjustment.OrderItemShipGroupAssocTable,
			Columns: []string{orderadjustment.OrderItemShipGroupAssocColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitemshipgroupassoc.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oau.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderadjustment.ParentTable,
			Columns: []string{orderadjustment.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderadjustment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oau.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderadjustment.ParentTable,
			Columns: []string{orderadjustment.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderadjustment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oau.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderadjustment.ChildrenTable,
			Columns: []string{orderadjustment.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderadjustment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oau.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !oau.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderadjustment.ChildrenTable,
			Columns: []string{orderadjustment.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderadjustment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oau.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderadjustment.ChildrenTable,
			Columns: []string{orderadjustment.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderadjustment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, oau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderadjustment.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// OrderAdjustmentUpdateOne is the builder for updating a single OrderAdjustment entity.
type OrderAdjustmentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrderAdjustmentMutation
}

// SetStringRef sets the "string_ref" field.
func (oauo *OrderAdjustmentUpdateOne) SetStringRef(s string) *OrderAdjustmentUpdateOne {
	oauo.mutation.SetStringRef(s)
	return oauo
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (oauo *OrderAdjustmentUpdateOne) SetNillableStringRef(s *string) *OrderAdjustmentUpdateOne {
	if s != nil {
		oauo.SetStringRef(*s)
	}
	return oauo
}

// ClearStringRef clears the value of the "string_ref" field.
func (oauo *OrderAdjustmentUpdateOne) ClearStringRef() *OrderAdjustmentUpdateOne {
	oauo.mutation.ClearStringRef()
	return oauo
}

// SetOrderAdjustmentTypeID sets the "order_adjustment_type_id" field.
func (oauo *OrderAdjustmentUpdateOne) SetOrderAdjustmentTypeID(i int) *OrderAdjustmentUpdateOne {
	oauo.mutation.ResetOrderAdjustmentTypeID()
	oauo.mutation.SetOrderAdjustmentTypeID(i)
	return oauo
}

// SetNillableOrderAdjustmentTypeID sets the "order_adjustment_type_id" field if the given value is not nil.
func (oauo *OrderAdjustmentUpdateOne) SetNillableOrderAdjustmentTypeID(i *int) *OrderAdjustmentUpdateOne {
	if i != nil {
		oauo.SetOrderAdjustmentTypeID(*i)
	}
	return oauo
}

// AddOrderAdjustmentTypeID adds i to the "order_adjustment_type_id" field.
func (oauo *OrderAdjustmentUpdateOne) AddOrderAdjustmentTypeID(i int) *OrderAdjustmentUpdateOne {
	oauo.mutation.AddOrderAdjustmentTypeID(i)
	return oauo
}

// ClearOrderAdjustmentTypeID clears the value of the "order_adjustment_type_id" field.
func (oauo *OrderAdjustmentUpdateOne) ClearOrderAdjustmentTypeID() *OrderAdjustmentUpdateOne {
	oauo.mutation.ClearOrderAdjustmentTypeID()
	return oauo
}

// SetOrderItemSeqID sets the "order_item_seq_id" field.
func (oauo *OrderAdjustmentUpdateOne) SetOrderItemSeqID(i int) *OrderAdjustmentUpdateOne {
	oauo.mutation.ResetOrderItemSeqID()
	oauo.mutation.SetOrderItemSeqID(i)
	return oauo
}

// SetNillableOrderItemSeqID sets the "order_item_seq_id" field if the given value is not nil.
func (oauo *OrderAdjustmentUpdateOne) SetNillableOrderItemSeqID(i *int) *OrderAdjustmentUpdateOne {
	if i != nil {
		oauo.SetOrderItemSeqID(*i)
	}
	return oauo
}

// AddOrderItemSeqID adds i to the "order_item_seq_id" field.
func (oauo *OrderAdjustmentUpdateOne) AddOrderItemSeqID(i int) *OrderAdjustmentUpdateOne {
	oauo.mutation.AddOrderItemSeqID(i)
	return oauo
}

// ClearOrderItemSeqID clears the value of the "order_item_seq_id" field.
func (oauo *OrderAdjustmentUpdateOne) ClearOrderItemSeqID() *OrderAdjustmentUpdateOne {
	oauo.mutation.ClearOrderItemSeqID()
	return oauo
}

// SetShipGroupSeqID sets the "ship_group_seq_id" field.
func (oauo *OrderAdjustmentUpdateOne) SetShipGroupSeqID(i int) *OrderAdjustmentUpdateOne {
	oauo.mutation.ResetShipGroupSeqID()
	oauo.mutation.SetShipGroupSeqID(i)
	return oauo
}

// SetNillableShipGroupSeqID sets the "ship_group_seq_id" field if the given value is not nil.
func (oauo *OrderAdjustmentUpdateOne) SetNillableShipGroupSeqID(i *int) *OrderAdjustmentUpdateOne {
	if i != nil {
		oauo.SetShipGroupSeqID(*i)
	}
	return oauo
}

// AddShipGroupSeqID adds i to the "ship_group_seq_id" field.
func (oauo *OrderAdjustmentUpdateOne) AddShipGroupSeqID(i int) *OrderAdjustmentUpdateOne {
	oauo.mutation.AddShipGroupSeqID(i)
	return oauo
}

// ClearShipGroupSeqID clears the value of the "ship_group_seq_id" field.
func (oauo *OrderAdjustmentUpdateOne) ClearShipGroupSeqID() *OrderAdjustmentUpdateOne {
	oauo.mutation.ClearShipGroupSeqID()
	return oauo
}

// SetComments sets the "comments" field.
func (oauo *OrderAdjustmentUpdateOne) SetComments(s string) *OrderAdjustmentUpdateOne {
	oauo.mutation.SetComments(s)
	return oauo
}

// SetNillableComments sets the "comments" field if the given value is not nil.
func (oauo *OrderAdjustmentUpdateOne) SetNillableComments(s *string) *OrderAdjustmentUpdateOne {
	if s != nil {
		oauo.SetComments(*s)
	}
	return oauo
}

// ClearComments clears the value of the "comments" field.
func (oauo *OrderAdjustmentUpdateOne) ClearComments() *OrderAdjustmentUpdateOne {
	oauo.mutation.ClearComments()
	return oauo
}

// SetDescription sets the "description" field.
func (oauo *OrderAdjustmentUpdateOne) SetDescription(s string) *OrderAdjustmentUpdateOne {
	oauo.mutation.SetDescription(s)
	return oauo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (oauo *OrderAdjustmentUpdateOne) SetNillableDescription(s *string) *OrderAdjustmentUpdateOne {
	if s != nil {
		oauo.SetDescription(*s)
	}
	return oauo
}

// ClearDescription clears the value of the "description" field.
func (oauo *OrderAdjustmentUpdateOne) ClearDescription() *OrderAdjustmentUpdateOne {
	oauo.mutation.ClearDescription()
	return oauo
}

// SetAmount sets the "amount" field.
func (oauo *OrderAdjustmentUpdateOne) SetAmount(f float64) *OrderAdjustmentUpdateOne {
	oauo.mutation.ResetAmount()
	oauo.mutation.SetAmount(f)
	return oauo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (oauo *OrderAdjustmentUpdateOne) SetNillableAmount(f *float64) *OrderAdjustmentUpdateOne {
	if f != nil {
		oauo.SetAmount(*f)
	}
	return oauo
}

// AddAmount adds f to the "amount" field.
func (oauo *OrderAdjustmentUpdateOne) AddAmount(f float64) *OrderAdjustmentUpdateOne {
	oauo.mutation.AddAmount(f)
	return oauo
}

// ClearAmount clears the value of the "amount" field.
func (oauo *OrderAdjustmentUpdateOne) ClearAmount() *OrderAdjustmentUpdateOne {
	oauo.mutation.ClearAmount()
	return oauo
}

// SetRecurringAmount sets the "recurring_amount" field.
func (oauo *OrderAdjustmentUpdateOne) SetRecurringAmount(f float64) *OrderAdjustmentUpdateOne {
	oauo.mutation.ResetRecurringAmount()
	oauo.mutation.SetRecurringAmount(f)
	return oauo
}

// SetNillableRecurringAmount sets the "recurring_amount" field if the given value is not nil.
func (oauo *OrderAdjustmentUpdateOne) SetNillableRecurringAmount(f *float64) *OrderAdjustmentUpdateOne {
	if f != nil {
		oauo.SetRecurringAmount(*f)
	}
	return oauo
}

// AddRecurringAmount adds f to the "recurring_amount" field.
func (oauo *OrderAdjustmentUpdateOne) AddRecurringAmount(f float64) *OrderAdjustmentUpdateOne {
	oauo.mutation.AddRecurringAmount(f)
	return oauo
}

// ClearRecurringAmount clears the value of the "recurring_amount" field.
func (oauo *OrderAdjustmentUpdateOne) ClearRecurringAmount() *OrderAdjustmentUpdateOne {
	oauo.mutation.ClearRecurringAmount()
	return oauo
}

// SetAmountAlreadyIncluded sets the "amount_already_included" field.
func (oauo *OrderAdjustmentUpdateOne) SetAmountAlreadyIncluded(f float64) *OrderAdjustmentUpdateOne {
	oauo.mutation.ResetAmountAlreadyIncluded()
	oauo.mutation.SetAmountAlreadyIncluded(f)
	return oauo
}

// SetNillableAmountAlreadyIncluded sets the "amount_already_included" field if the given value is not nil.
func (oauo *OrderAdjustmentUpdateOne) SetNillableAmountAlreadyIncluded(f *float64) *OrderAdjustmentUpdateOne {
	if f != nil {
		oauo.SetAmountAlreadyIncluded(*f)
	}
	return oauo
}

// AddAmountAlreadyIncluded adds f to the "amount_already_included" field.
func (oauo *OrderAdjustmentUpdateOne) AddAmountAlreadyIncluded(f float64) *OrderAdjustmentUpdateOne {
	oauo.mutation.AddAmountAlreadyIncluded(f)
	return oauo
}

// ClearAmountAlreadyIncluded clears the value of the "amount_already_included" field.
func (oauo *OrderAdjustmentUpdateOne) ClearAmountAlreadyIncluded() *OrderAdjustmentUpdateOne {
	oauo.mutation.ClearAmountAlreadyIncluded()
	return oauo
}

// SetProductPromoID sets the "product_promo_id" field.
func (oauo *OrderAdjustmentUpdateOne) SetProductPromoID(i int) *OrderAdjustmentUpdateOne {
	oauo.mutation.ResetProductPromoID()
	oauo.mutation.SetProductPromoID(i)
	return oauo
}

// SetNillableProductPromoID sets the "product_promo_id" field if the given value is not nil.
func (oauo *OrderAdjustmentUpdateOne) SetNillableProductPromoID(i *int) *OrderAdjustmentUpdateOne {
	if i != nil {
		oauo.SetProductPromoID(*i)
	}
	return oauo
}

// AddProductPromoID adds i to the "product_promo_id" field.
func (oauo *OrderAdjustmentUpdateOne) AddProductPromoID(i int) *OrderAdjustmentUpdateOne {
	oauo.mutation.AddProductPromoID(i)
	return oauo
}

// ClearProductPromoID clears the value of the "product_promo_id" field.
func (oauo *OrderAdjustmentUpdateOne) ClearProductPromoID() *OrderAdjustmentUpdateOne {
	oauo.mutation.ClearProductPromoID()
	return oauo
}

// SetProductPromoRuleID sets the "product_promo_rule_id" field.
func (oauo *OrderAdjustmentUpdateOne) SetProductPromoRuleID(i int) *OrderAdjustmentUpdateOne {
	oauo.mutation.ResetProductPromoRuleID()
	oauo.mutation.SetProductPromoRuleID(i)
	return oauo
}

// SetNillableProductPromoRuleID sets the "product_promo_rule_id" field if the given value is not nil.
func (oauo *OrderAdjustmentUpdateOne) SetNillableProductPromoRuleID(i *int) *OrderAdjustmentUpdateOne {
	if i != nil {
		oauo.SetProductPromoRuleID(*i)
	}
	return oauo
}

// AddProductPromoRuleID adds i to the "product_promo_rule_id" field.
func (oauo *OrderAdjustmentUpdateOne) AddProductPromoRuleID(i int) *OrderAdjustmentUpdateOne {
	oauo.mutation.AddProductPromoRuleID(i)
	return oauo
}

// ClearProductPromoRuleID clears the value of the "product_promo_rule_id" field.
func (oauo *OrderAdjustmentUpdateOne) ClearProductPromoRuleID() *OrderAdjustmentUpdateOne {
	oauo.mutation.ClearProductPromoRuleID()
	return oauo
}

// SetProductPromoActionSeqID sets the "product_promo_action_seq_id" field.
func (oauo *OrderAdjustmentUpdateOne) SetProductPromoActionSeqID(i int) *OrderAdjustmentUpdateOne {
	oauo.mutation.ResetProductPromoActionSeqID()
	oauo.mutation.SetProductPromoActionSeqID(i)
	return oauo
}

// SetNillableProductPromoActionSeqID sets the "product_promo_action_seq_id" field if the given value is not nil.
func (oauo *OrderAdjustmentUpdateOne) SetNillableProductPromoActionSeqID(i *int) *OrderAdjustmentUpdateOne {
	if i != nil {
		oauo.SetProductPromoActionSeqID(*i)
	}
	return oauo
}

// AddProductPromoActionSeqID adds i to the "product_promo_action_seq_id" field.
func (oauo *OrderAdjustmentUpdateOne) AddProductPromoActionSeqID(i int) *OrderAdjustmentUpdateOne {
	oauo.mutation.AddProductPromoActionSeqID(i)
	return oauo
}

// ClearProductPromoActionSeqID clears the value of the "product_promo_action_seq_id" field.
func (oauo *OrderAdjustmentUpdateOne) ClearProductPromoActionSeqID() *OrderAdjustmentUpdateOne {
	oauo.mutation.ClearProductPromoActionSeqID()
	return oauo
}

// SetProductFeatureID sets the "product_feature_id" field.
func (oauo *OrderAdjustmentUpdateOne) SetProductFeatureID(i int) *OrderAdjustmentUpdateOne {
	oauo.mutation.ResetProductFeatureID()
	oauo.mutation.SetProductFeatureID(i)
	return oauo
}

// SetNillableProductFeatureID sets the "product_feature_id" field if the given value is not nil.
func (oauo *OrderAdjustmentUpdateOne) SetNillableProductFeatureID(i *int) *OrderAdjustmentUpdateOne {
	if i != nil {
		oauo.SetProductFeatureID(*i)
	}
	return oauo
}

// AddProductFeatureID adds i to the "product_feature_id" field.
func (oauo *OrderAdjustmentUpdateOne) AddProductFeatureID(i int) *OrderAdjustmentUpdateOne {
	oauo.mutation.AddProductFeatureID(i)
	return oauo
}

// ClearProductFeatureID clears the value of the "product_feature_id" field.
func (oauo *OrderAdjustmentUpdateOne) ClearProductFeatureID() *OrderAdjustmentUpdateOne {
	oauo.mutation.ClearProductFeatureID()
	return oauo
}

// SetCorrespondingProductID sets the "corresponding_product_id" field.
func (oauo *OrderAdjustmentUpdateOne) SetCorrespondingProductID(i int) *OrderAdjustmentUpdateOne {
	oauo.mutation.ResetCorrespondingProductID()
	oauo.mutation.SetCorrespondingProductID(i)
	return oauo
}

// SetNillableCorrespondingProductID sets the "corresponding_product_id" field if the given value is not nil.
func (oauo *OrderAdjustmentUpdateOne) SetNillableCorrespondingProductID(i *int) *OrderAdjustmentUpdateOne {
	if i != nil {
		oauo.SetCorrespondingProductID(*i)
	}
	return oauo
}

// AddCorrespondingProductID adds i to the "corresponding_product_id" field.
func (oauo *OrderAdjustmentUpdateOne) AddCorrespondingProductID(i int) *OrderAdjustmentUpdateOne {
	oauo.mutation.AddCorrespondingProductID(i)
	return oauo
}

// ClearCorrespondingProductID clears the value of the "corresponding_product_id" field.
func (oauo *OrderAdjustmentUpdateOne) ClearCorrespondingProductID() *OrderAdjustmentUpdateOne {
	oauo.mutation.ClearCorrespondingProductID()
	return oauo
}

// SetTaxAuthorityRateSeqID sets the "tax_authority_rate_seq_id" field.
func (oauo *OrderAdjustmentUpdateOne) SetTaxAuthorityRateSeqID(i int) *OrderAdjustmentUpdateOne {
	oauo.mutation.ResetTaxAuthorityRateSeqID()
	oauo.mutation.SetTaxAuthorityRateSeqID(i)
	return oauo
}

// SetNillableTaxAuthorityRateSeqID sets the "tax_authority_rate_seq_id" field if the given value is not nil.
func (oauo *OrderAdjustmentUpdateOne) SetNillableTaxAuthorityRateSeqID(i *int) *OrderAdjustmentUpdateOne {
	if i != nil {
		oauo.SetTaxAuthorityRateSeqID(*i)
	}
	return oauo
}

// AddTaxAuthorityRateSeqID adds i to the "tax_authority_rate_seq_id" field.
func (oauo *OrderAdjustmentUpdateOne) AddTaxAuthorityRateSeqID(i int) *OrderAdjustmentUpdateOne {
	oauo.mutation.AddTaxAuthorityRateSeqID(i)
	return oauo
}

// ClearTaxAuthorityRateSeqID clears the value of the "tax_authority_rate_seq_id" field.
func (oauo *OrderAdjustmentUpdateOne) ClearTaxAuthorityRateSeqID() *OrderAdjustmentUpdateOne {
	oauo.mutation.ClearTaxAuthorityRateSeqID()
	return oauo
}

// SetSourceReferenceID sets the "source_reference_id" field.
func (oauo *OrderAdjustmentUpdateOne) SetSourceReferenceID(s string) *OrderAdjustmentUpdateOne {
	oauo.mutation.SetSourceReferenceID(s)
	return oauo
}

// SetNillableSourceReferenceID sets the "source_reference_id" field if the given value is not nil.
func (oauo *OrderAdjustmentUpdateOne) SetNillableSourceReferenceID(s *string) *OrderAdjustmentUpdateOne {
	if s != nil {
		oauo.SetSourceReferenceID(*s)
	}
	return oauo
}

// ClearSourceReferenceID clears the value of the "source_reference_id" field.
func (oauo *OrderAdjustmentUpdateOne) ClearSourceReferenceID() *OrderAdjustmentUpdateOne {
	oauo.mutation.ClearSourceReferenceID()
	return oauo
}

// SetSourcePercentage sets the "source_percentage" field.
func (oauo *OrderAdjustmentUpdateOne) SetSourcePercentage(f float64) *OrderAdjustmentUpdateOne {
	oauo.mutation.ResetSourcePercentage()
	oauo.mutation.SetSourcePercentage(f)
	return oauo
}

// SetNillableSourcePercentage sets the "source_percentage" field if the given value is not nil.
func (oauo *OrderAdjustmentUpdateOne) SetNillableSourcePercentage(f *float64) *OrderAdjustmentUpdateOne {
	if f != nil {
		oauo.SetSourcePercentage(*f)
	}
	return oauo
}

// AddSourcePercentage adds f to the "source_percentage" field.
func (oauo *OrderAdjustmentUpdateOne) AddSourcePercentage(f float64) *OrderAdjustmentUpdateOne {
	oauo.mutation.AddSourcePercentage(f)
	return oauo
}

// ClearSourcePercentage clears the value of the "source_percentage" field.
func (oauo *OrderAdjustmentUpdateOne) ClearSourcePercentage() *OrderAdjustmentUpdateOne {
	oauo.mutation.ClearSourcePercentage()
	return oauo
}

// SetCustomerReferenceID sets the "customer_reference_id" field.
func (oauo *OrderAdjustmentUpdateOne) SetCustomerReferenceID(s string) *OrderAdjustmentUpdateOne {
	oauo.mutation.SetCustomerReferenceID(s)
	return oauo
}

// SetNillableCustomerReferenceID sets the "customer_reference_id" field if the given value is not nil.
func (oauo *OrderAdjustmentUpdateOne) SetNillableCustomerReferenceID(s *string) *OrderAdjustmentUpdateOne {
	if s != nil {
		oauo.SetCustomerReferenceID(*s)
	}
	return oauo
}

// ClearCustomerReferenceID clears the value of the "customer_reference_id" field.
func (oauo *OrderAdjustmentUpdateOne) ClearCustomerReferenceID() *OrderAdjustmentUpdateOne {
	oauo.mutation.ClearCustomerReferenceID()
	return oauo
}

// SetPrimaryGeoID sets the "primary_geo_id" field.
func (oauo *OrderAdjustmentUpdateOne) SetPrimaryGeoID(i int) *OrderAdjustmentUpdateOne {
	oauo.mutation.ResetPrimaryGeoID()
	oauo.mutation.SetPrimaryGeoID(i)
	return oauo
}

// SetNillablePrimaryGeoID sets the "primary_geo_id" field if the given value is not nil.
func (oauo *OrderAdjustmentUpdateOne) SetNillablePrimaryGeoID(i *int) *OrderAdjustmentUpdateOne {
	if i != nil {
		oauo.SetPrimaryGeoID(*i)
	}
	return oauo
}

// AddPrimaryGeoID adds i to the "primary_geo_id" field.
func (oauo *OrderAdjustmentUpdateOne) AddPrimaryGeoID(i int) *OrderAdjustmentUpdateOne {
	oauo.mutation.AddPrimaryGeoID(i)
	return oauo
}

// ClearPrimaryGeoID clears the value of the "primary_geo_id" field.
func (oauo *OrderAdjustmentUpdateOne) ClearPrimaryGeoID() *OrderAdjustmentUpdateOne {
	oauo.mutation.ClearPrimaryGeoID()
	return oauo
}

// SetSecondaryGeoID sets the "secondary_geo_id" field.
func (oauo *OrderAdjustmentUpdateOne) SetSecondaryGeoID(i int) *OrderAdjustmentUpdateOne {
	oauo.mutation.ResetSecondaryGeoID()
	oauo.mutation.SetSecondaryGeoID(i)
	return oauo
}

// SetNillableSecondaryGeoID sets the "secondary_geo_id" field if the given value is not nil.
func (oauo *OrderAdjustmentUpdateOne) SetNillableSecondaryGeoID(i *int) *OrderAdjustmentUpdateOne {
	if i != nil {
		oauo.SetSecondaryGeoID(*i)
	}
	return oauo
}

// AddSecondaryGeoID adds i to the "secondary_geo_id" field.
func (oauo *OrderAdjustmentUpdateOne) AddSecondaryGeoID(i int) *OrderAdjustmentUpdateOne {
	oauo.mutation.AddSecondaryGeoID(i)
	return oauo
}

// ClearSecondaryGeoID clears the value of the "secondary_geo_id" field.
func (oauo *OrderAdjustmentUpdateOne) ClearSecondaryGeoID() *OrderAdjustmentUpdateOne {
	oauo.mutation.ClearSecondaryGeoID()
	return oauo
}

// SetExemptAmount sets the "exempt_amount" field.
func (oauo *OrderAdjustmentUpdateOne) SetExemptAmount(f float64) *OrderAdjustmentUpdateOne {
	oauo.mutation.ResetExemptAmount()
	oauo.mutation.SetExemptAmount(f)
	return oauo
}

// SetNillableExemptAmount sets the "exempt_amount" field if the given value is not nil.
func (oauo *OrderAdjustmentUpdateOne) SetNillableExemptAmount(f *float64) *OrderAdjustmentUpdateOne {
	if f != nil {
		oauo.SetExemptAmount(*f)
	}
	return oauo
}

// AddExemptAmount adds f to the "exempt_amount" field.
func (oauo *OrderAdjustmentUpdateOne) AddExemptAmount(f float64) *OrderAdjustmentUpdateOne {
	oauo.mutation.AddExemptAmount(f)
	return oauo
}

// ClearExemptAmount clears the value of the "exempt_amount" field.
func (oauo *OrderAdjustmentUpdateOne) ClearExemptAmount() *OrderAdjustmentUpdateOne {
	oauo.mutation.ClearExemptAmount()
	return oauo
}

// SetTaxAuthGeoID sets the "tax_auth_geo_id" field.
func (oauo *OrderAdjustmentUpdateOne) SetTaxAuthGeoID(i int) *OrderAdjustmentUpdateOne {
	oauo.mutation.ResetTaxAuthGeoID()
	oauo.mutation.SetTaxAuthGeoID(i)
	return oauo
}

// SetNillableTaxAuthGeoID sets the "tax_auth_geo_id" field if the given value is not nil.
func (oauo *OrderAdjustmentUpdateOne) SetNillableTaxAuthGeoID(i *int) *OrderAdjustmentUpdateOne {
	if i != nil {
		oauo.SetTaxAuthGeoID(*i)
	}
	return oauo
}

// AddTaxAuthGeoID adds i to the "tax_auth_geo_id" field.
func (oauo *OrderAdjustmentUpdateOne) AddTaxAuthGeoID(i int) *OrderAdjustmentUpdateOne {
	oauo.mutation.AddTaxAuthGeoID(i)
	return oauo
}

// ClearTaxAuthGeoID clears the value of the "tax_auth_geo_id" field.
func (oauo *OrderAdjustmentUpdateOne) ClearTaxAuthGeoID() *OrderAdjustmentUpdateOne {
	oauo.mutation.ClearTaxAuthGeoID()
	return oauo
}

// SetTaxAuthPartyID sets the "tax_auth_party_id" field.
func (oauo *OrderAdjustmentUpdateOne) SetTaxAuthPartyID(i int) *OrderAdjustmentUpdateOne {
	oauo.mutation.ResetTaxAuthPartyID()
	oauo.mutation.SetTaxAuthPartyID(i)
	return oauo
}

// SetNillableTaxAuthPartyID sets the "tax_auth_party_id" field if the given value is not nil.
func (oauo *OrderAdjustmentUpdateOne) SetNillableTaxAuthPartyID(i *int) *OrderAdjustmentUpdateOne {
	if i != nil {
		oauo.SetTaxAuthPartyID(*i)
	}
	return oauo
}

// AddTaxAuthPartyID adds i to the "tax_auth_party_id" field.
func (oauo *OrderAdjustmentUpdateOne) AddTaxAuthPartyID(i int) *OrderAdjustmentUpdateOne {
	oauo.mutation.AddTaxAuthPartyID(i)
	return oauo
}

// ClearTaxAuthPartyID clears the value of the "tax_auth_party_id" field.
func (oauo *OrderAdjustmentUpdateOne) ClearTaxAuthPartyID() *OrderAdjustmentUpdateOne {
	oauo.mutation.ClearTaxAuthPartyID()
	return oauo
}

// SetOverrideGlAccountID sets the "override_gl_account_id" field.
func (oauo *OrderAdjustmentUpdateOne) SetOverrideGlAccountID(i int) *OrderAdjustmentUpdateOne {
	oauo.mutation.ResetOverrideGlAccountID()
	oauo.mutation.SetOverrideGlAccountID(i)
	return oauo
}

// SetNillableOverrideGlAccountID sets the "override_gl_account_id" field if the given value is not nil.
func (oauo *OrderAdjustmentUpdateOne) SetNillableOverrideGlAccountID(i *int) *OrderAdjustmentUpdateOne {
	if i != nil {
		oauo.SetOverrideGlAccountID(*i)
	}
	return oauo
}

// AddOverrideGlAccountID adds i to the "override_gl_account_id" field.
func (oauo *OrderAdjustmentUpdateOne) AddOverrideGlAccountID(i int) *OrderAdjustmentUpdateOne {
	oauo.mutation.AddOverrideGlAccountID(i)
	return oauo
}

// ClearOverrideGlAccountID clears the value of the "override_gl_account_id" field.
func (oauo *OrderAdjustmentUpdateOne) ClearOverrideGlAccountID() *OrderAdjustmentUpdateOne {
	oauo.mutation.ClearOverrideGlAccountID()
	return oauo
}

// SetIncludeInTax sets the "include_in_tax" field.
func (oauo *OrderAdjustmentUpdateOne) SetIncludeInTax(oit orderadjustment.IncludeInTax) *OrderAdjustmentUpdateOne {
	oauo.mutation.SetIncludeInTax(oit)
	return oauo
}

// SetNillableIncludeInTax sets the "include_in_tax" field if the given value is not nil.
func (oauo *OrderAdjustmentUpdateOne) SetNillableIncludeInTax(oit *orderadjustment.IncludeInTax) *OrderAdjustmentUpdateOne {
	if oit != nil {
		oauo.SetIncludeInTax(*oit)
	}
	return oauo
}

// ClearIncludeInTax clears the value of the "include_in_tax" field.
func (oauo *OrderAdjustmentUpdateOne) ClearIncludeInTax() *OrderAdjustmentUpdateOne {
	oauo.mutation.ClearIncludeInTax()
	return oauo
}

// SetIncludeInShipping sets the "include_in_shipping" field.
func (oauo *OrderAdjustmentUpdateOne) SetIncludeInShipping(ois orderadjustment.IncludeInShipping) *OrderAdjustmentUpdateOne {
	oauo.mutation.SetIncludeInShipping(ois)
	return oauo
}

// SetNillableIncludeInShipping sets the "include_in_shipping" field if the given value is not nil.
func (oauo *OrderAdjustmentUpdateOne) SetNillableIncludeInShipping(ois *orderadjustment.IncludeInShipping) *OrderAdjustmentUpdateOne {
	if ois != nil {
		oauo.SetIncludeInShipping(*ois)
	}
	return oauo
}

// ClearIncludeInShipping clears the value of the "include_in_shipping" field.
func (oauo *OrderAdjustmentUpdateOne) ClearIncludeInShipping() *OrderAdjustmentUpdateOne {
	oauo.mutation.ClearIncludeInShipping()
	return oauo
}

// SetIsManual sets the "is_manual" field.
func (oauo *OrderAdjustmentUpdateOne) SetIsManual(om orderadjustment.IsManual) *OrderAdjustmentUpdateOne {
	oauo.mutation.SetIsManual(om)
	return oauo
}

// SetNillableIsManual sets the "is_manual" field if the given value is not nil.
func (oauo *OrderAdjustmentUpdateOne) SetNillableIsManual(om *orderadjustment.IsManual) *OrderAdjustmentUpdateOne {
	if om != nil {
		oauo.SetIsManual(*om)
	}
	return oauo
}

// ClearIsManual clears the value of the "is_manual" field.
func (oauo *OrderAdjustmentUpdateOne) ClearIsManual() *OrderAdjustmentUpdateOne {
	oauo.mutation.ClearIsManual()
	return oauo
}

// SetCreatedDate sets the "created_date" field.
func (oauo *OrderAdjustmentUpdateOne) SetCreatedDate(t time.Time) *OrderAdjustmentUpdateOne {
	oauo.mutation.SetCreatedDate(t)
	return oauo
}

// SetNillableCreatedDate sets the "created_date" field if the given value is not nil.
func (oauo *OrderAdjustmentUpdateOne) SetNillableCreatedDate(t *time.Time) *OrderAdjustmentUpdateOne {
	if t != nil {
		oauo.SetCreatedDate(*t)
	}
	return oauo
}

// ClearCreatedDate clears the value of the "created_date" field.
func (oauo *OrderAdjustmentUpdateOne) ClearCreatedDate() *OrderAdjustmentUpdateOne {
	oauo.mutation.ClearCreatedDate()
	return oauo
}

// SetCreatedByUserLogin sets the "created_by_user_login" field.
func (oauo *OrderAdjustmentUpdateOne) SetCreatedByUserLogin(s string) *OrderAdjustmentUpdateOne {
	oauo.mutation.SetCreatedByUserLogin(s)
	return oauo
}

// SetNillableCreatedByUserLogin sets the "created_by_user_login" field if the given value is not nil.
func (oauo *OrderAdjustmentUpdateOne) SetNillableCreatedByUserLogin(s *string) *OrderAdjustmentUpdateOne {
	if s != nil {
		oauo.SetCreatedByUserLogin(*s)
	}
	return oauo
}

// ClearCreatedByUserLogin clears the value of the "created_by_user_login" field.
func (oauo *OrderAdjustmentUpdateOne) ClearCreatedByUserLogin() *OrderAdjustmentUpdateOne {
	oauo.mutation.ClearCreatedByUserLogin()
	return oauo
}

// SetLastModifiedDate sets the "last_modified_date" field.
func (oauo *OrderAdjustmentUpdateOne) SetLastModifiedDate(t time.Time) *OrderAdjustmentUpdateOne {
	oauo.mutation.SetLastModifiedDate(t)
	return oauo
}

// SetNillableLastModifiedDate sets the "last_modified_date" field if the given value is not nil.
func (oauo *OrderAdjustmentUpdateOne) SetNillableLastModifiedDate(t *time.Time) *OrderAdjustmentUpdateOne {
	if t != nil {
		oauo.SetLastModifiedDate(*t)
	}
	return oauo
}

// ClearLastModifiedDate clears the value of the "last_modified_date" field.
func (oauo *OrderAdjustmentUpdateOne) ClearLastModifiedDate() *OrderAdjustmentUpdateOne {
	oauo.mutation.ClearLastModifiedDate()
	return oauo
}

// SetLastModifiedByUserLogin sets the "last_modified_by_user_login" field.
func (oauo *OrderAdjustmentUpdateOne) SetLastModifiedByUserLogin(s string) *OrderAdjustmentUpdateOne {
	oauo.mutation.SetLastModifiedByUserLogin(s)
	return oauo
}

// SetNillableLastModifiedByUserLogin sets the "last_modified_by_user_login" field if the given value is not nil.
func (oauo *OrderAdjustmentUpdateOne) SetNillableLastModifiedByUserLogin(s *string) *OrderAdjustmentUpdateOne {
	if s != nil {
		oauo.SetLastModifiedByUserLogin(*s)
	}
	return oauo
}

// ClearLastModifiedByUserLogin clears the value of the "last_modified_by_user_login" field.
func (oauo *OrderAdjustmentUpdateOne) ClearLastModifiedByUserLogin() *OrderAdjustmentUpdateOne {
	oauo.mutation.ClearLastModifiedByUserLogin()
	return oauo
}

// SetOrderHeaderID sets the "order_header" edge to the OrderHeader entity by ID.
func (oauo *OrderAdjustmentUpdateOne) SetOrderHeaderID(id int) *OrderAdjustmentUpdateOne {
	oauo.mutation.SetOrderHeaderID(id)
	return oauo
}

// SetNillableOrderHeaderID sets the "order_header" edge to the OrderHeader entity by ID if the given value is not nil.
func (oauo *OrderAdjustmentUpdateOne) SetNillableOrderHeaderID(id *int) *OrderAdjustmentUpdateOne {
	if id != nil {
		oauo = oauo.SetOrderHeaderID(*id)
	}
	return oauo
}

// SetOrderHeader sets the "order_header" edge to the OrderHeader entity.
func (oauo *OrderAdjustmentUpdateOne) SetOrderHeader(o *OrderHeader) *OrderAdjustmentUpdateOne {
	return oauo.SetOrderHeaderID(o.ID)
}

// SetOrderItemID sets the "order_item" edge to the OrderItem entity by ID.
func (oauo *OrderAdjustmentUpdateOne) SetOrderItemID(id int) *OrderAdjustmentUpdateOne {
	oauo.mutation.SetOrderItemID(id)
	return oauo
}

// SetNillableOrderItemID sets the "order_item" edge to the OrderItem entity by ID if the given value is not nil.
func (oauo *OrderAdjustmentUpdateOne) SetNillableOrderItemID(id *int) *OrderAdjustmentUpdateOne {
	if id != nil {
		oauo = oauo.SetOrderItemID(*id)
	}
	return oauo
}

// SetOrderItem sets the "order_item" edge to the OrderItem entity.
func (oauo *OrderAdjustmentUpdateOne) SetOrderItem(o *OrderItem) *OrderAdjustmentUpdateOne {
	return oauo.SetOrderItemID(o.ID)
}

// SetOrderItemShipGroupID sets the "order_item_ship_group" edge to the OrderItemShipGroup entity by ID.
func (oauo *OrderAdjustmentUpdateOne) SetOrderItemShipGroupID(id int) *OrderAdjustmentUpdateOne {
	oauo.mutation.SetOrderItemShipGroupID(id)
	return oauo
}

// SetNillableOrderItemShipGroupID sets the "order_item_ship_group" edge to the OrderItemShipGroup entity by ID if the given value is not nil.
func (oauo *OrderAdjustmentUpdateOne) SetNillableOrderItemShipGroupID(id *int) *OrderAdjustmentUpdateOne {
	if id != nil {
		oauo = oauo.SetOrderItemShipGroupID(*id)
	}
	return oauo
}

// SetOrderItemShipGroup sets the "order_item_ship_group" edge to the OrderItemShipGroup entity.
func (oauo *OrderAdjustmentUpdateOne) SetOrderItemShipGroup(o *OrderItemShipGroup) *OrderAdjustmentUpdateOne {
	return oauo.SetOrderItemShipGroupID(o.ID)
}

// SetOrderItemShipGroupAssocID sets the "order_item_ship_group_assoc" edge to the OrderItemShipGroupAssoc entity by ID.
func (oauo *OrderAdjustmentUpdateOne) SetOrderItemShipGroupAssocID(id int) *OrderAdjustmentUpdateOne {
	oauo.mutation.SetOrderItemShipGroupAssocID(id)
	return oauo
}

// SetNillableOrderItemShipGroupAssocID sets the "order_item_ship_group_assoc" edge to the OrderItemShipGroupAssoc entity by ID if the given value is not nil.
func (oauo *OrderAdjustmentUpdateOne) SetNillableOrderItemShipGroupAssocID(id *int) *OrderAdjustmentUpdateOne {
	if id != nil {
		oauo = oauo.SetOrderItemShipGroupAssocID(*id)
	}
	return oauo
}

// SetOrderItemShipGroupAssoc sets the "order_item_ship_group_assoc" edge to the OrderItemShipGroupAssoc entity.
func (oauo *OrderAdjustmentUpdateOne) SetOrderItemShipGroupAssoc(o *OrderItemShipGroupAssoc) *OrderAdjustmentUpdateOne {
	return oauo.SetOrderItemShipGroupAssocID(o.ID)
}

// SetParentID sets the "parent" edge to the OrderAdjustment entity by ID.
func (oauo *OrderAdjustmentUpdateOne) SetParentID(id int) *OrderAdjustmentUpdateOne {
	oauo.mutation.SetParentID(id)
	return oauo
}

// SetNillableParentID sets the "parent" edge to the OrderAdjustment entity by ID if the given value is not nil.
func (oauo *OrderAdjustmentUpdateOne) SetNillableParentID(id *int) *OrderAdjustmentUpdateOne {
	if id != nil {
		oauo = oauo.SetParentID(*id)
	}
	return oauo
}

// SetParent sets the "parent" edge to the OrderAdjustment entity.
func (oauo *OrderAdjustmentUpdateOne) SetParent(o *OrderAdjustment) *OrderAdjustmentUpdateOne {
	return oauo.SetParentID(o.ID)
}

// AddChildIDs adds the "children" edge to the OrderAdjustment entity by IDs.
func (oauo *OrderAdjustmentUpdateOne) AddChildIDs(ids ...int) *OrderAdjustmentUpdateOne {
	oauo.mutation.AddChildIDs(ids...)
	return oauo
}

// AddChildren adds the "children" edges to the OrderAdjustment entity.
func (oauo *OrderAdjustmentUpdateOne) AddChildren(o ...*OrderAdjustment) *OrderAdjustmentUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oauo.AddChildIDs(ids...)
}

// Mutation returns the OrderAdjustmentMutation object of the builder.
func (oauo *OrderAdjustmentUpdateOne) Mutation() *OrderAdjustmentMutation {
	return oauo.mutation
}

// ClearOrderHeader clears the "order_header" edge to the OrderHeader entity.
func (oauo *OrderAdjustmentUpdateOne) ClearOrderHeader() *OrderAdjustmentUpdateOne {
	oauo.mutation.ClearOrderHeader()
	return oauo
}

// ClearOrderItem clears the "order_item" edge to the OrderItem entity.
func (oauo *OrderAdjustmentUpdateOne) ClearOrderItem() *OrderAdjustmentUpdateOne {
	oauo.mutation.ClearOrderItem()
	return oauo
}

// ClearOrderItemShipGroup clears the "order_item_ship_group" edge to the OrderItemShipGroup entity.
func (oauo *OrderAdjustmentUpdateOne) ClearOrderItemShipGroup() *OrderAdjustmentUpdateOne {
	oauo.mutation.ClearOrderItemShipGroup()
	return oauo
}

// ClearOrderItemShipGroupAssoc clears the "order_item_ship_group_assoc" edge to the OrderItemShipGroupAssoc entity.
func (oauo *OrderAdjustmentUpdateOne) ClearOrderItemShipGroupAssoc() *OrderAdjustmentUpdateOne {
	oauo.mutation.ClearOrderItemShipGroupAssoc()
	return oauo
}

// ClearParent clears the "parent" edge to the OrderAdjustment entity.
func (oauo *OrderAdjustmentUpdateOne) ClearParent() *OrderAdjustmentUpdateOne {
	oauo.mutation.ClearParent()
	return oauo
}

// ClearChildren clears all "children" edges to the OrderAdjustment entity.
func (oauo *OrderAdjustmentUpdateOne) ClearChildren() *OrderAdjustmentUpdateOne {
	oauo.mutation.ClearChildren()
	return oauo
}

// RemoveChildIDs removes the "children" edge to OrderAdjustment entities by IDs.
func (oauo *OrderAdjustmentUpdateOne) RemoveChildIDs(ids ...int) *OrderAdjustmentUpdateOne {
	oauo.mutation.RemoveChildIDs(ids...)
	return oauo
}

// RemoveChildren removes "children" edges to OrderAdjustment entities.
func (oauo *OrderAdjustmentUpdateOne) RemoveChildren(o ...*OrderAdjustment) *OrderAdjustmentUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oauo.RemoveChildIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (oauo *OrderAdjustmentUpdateOne) Select(field string, fields ...string) *OrderAdjustmentUpdateOne {
	oauo.fields = append([]string{field}, fields...)
	return oauo
}

// Save executes the query and returns the updated OrderAdjustment entity.
func (oauo *OrderAdjustmentUpdateOne) Save(ctx context.Context) (*OrderAdjustment, error) {
	var (
		err  error
		node *OrderAdjustment
	)
	oauo.defaults()
	if len(oauo.hooks) == 0 {
		if err = oauo.check(); err != nil {
			return nil, err
		}
		node, err = oauo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderAdjustmentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = oauo.check(); err != nil {
				return nil, err
			}
			oauo.mutation = mutation
			node, err = oauo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(oauo.hooks) - 1; i >= 0; i-- {
			mut = oauo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, oauo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (oauo *OrderAdjustmentUpdateOne) SaveX(ctx context.Context) *OrderAdjustment {
	node, err := oauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (oauo *OrderAdjustmentUpdateOne) Exec(ctx context.Context) error {
	_, err := oauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oauo *OrderAdjustmentUpdateOne) ExecX(ctx context.Context) {
	if err := oauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oauo *OrderAdjustmentUpdateOne) defaults() {
	if _, ok := oauo.mutation.UpdateTime(); !ok {
		v := orderadjustment.UpdateDefaultUpdateTime()
		oauo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oauo *OrderAdjustmentUpdateOne) check() error {
	if v, ok := oauo.mutation.SourceReferenceID(); ok {
		if err := orderadjustment.SourceReferenceIDValidator(v); err != nil {
			return &ValidationError{Name: "source_reference_id", err: fmt.Errorf("ent: validator failed for field \"source_reference_id\": %w", err)}
		}
	}
	if v, ok := oauo.mutation.CustomerReferenceID(); ok {
		if err := orderadjustment.CustomerReferenceIDValidator(v); err != nil {
			return &ValidationError{Name: "customer_reference_id", err: fmt.Errorf("ent: validator failed for field \"customer_reference_id\": %w", err)}
		}
	}
	if v, ok := oauo.mutation.IncludeInTax(); ok {
		if err := orderadjustment.IncludeInTaxValidator(v); err != nil {
			return &ValidationError{Name: "include_in_tax", err: fmt.Errorf("ent: validator failed for field \"include_in_tax\": %w", err)}
		}
	}
	if v, ok := oauo.mutation.IncludeInShipping(); ok {
		if err := orderadjustment.IncludeInShippingValidator(v); err != nil {
			return &ValidationError{Name: "include_in_shipping", err: fmt.Errorf("ent: validator failed for field \"include_in_shipping\": %w", err)}
		}
	}
	if v, ok := oauo.mutation.IsManual(); ok {
		if err := orderadjustment.IsManualValidator(v); err != nil {
			return &ValidationError{Name: "is_manual", err: fmt.Errorf("ent: validator failed for field \"is_manual\": %w", err)}
		}
	}
	return nil
}

func (oauo *OrderAdjustmentUpdateOne) sqlSave(ctx context.Context) (_node *OrderAdjustment, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   orderadjustment.Table,
			Columns: orderadjustment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: orderadjustment.FieldID,
			},
		},
	}
	id, ok := oauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing OrderAdjustment.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := oauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, orderadjustment.FieldID)
		for _, f := range fields {
			if !orderadjustment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != orderadjustment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := oauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oauo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderadjustment.FieldUpdateTime,
		})
	}
	if value, ok := oauo.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderadjustment.FieldStringRef,
		})
	}
	if oauo.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: orderadjustment.FieldStringRef,
		})
	}
	if value, ok := oauo.mutation.OrderAdjustmentTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderadjustment.FieldOrderAdjustmentTypeID,
		})
	}
	if value, ok := oauo.mutation.AddedOrderAdjustmentTypeID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderadjustment.FieldOrderAdjustmentTypeID,
		})
	}
	if oauo.mutation.OrderAdjustmentTypeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderadjustment.FieldOrderAdjustmentTypeID,
		})
	}
	if value, ok := oauo.mutation.OrderItemSeqID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderadjustment.FieldOrderItemSeqID,
		})
	}
	if value, ok := oauo.mutation.AddedOrderItemSeqID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderadjustment.FieldOrderItemSeqID,
		})
	}
	if oauo.mutation.OrderItemSeqIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderadjustment.FieldOrderItemSeqID,
		})
	}
	if value, ok := oauo.mutation.ShipGroupSeqID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderadjustment.FieldShipGroupSeqID,
		})
	}
	if value, ok := oauo.mutation.AddedShipGroupSeqID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderadjustment.FieldShipGroupSeqID,
		})
	}
	if oauo.mutation.ShipGroupSeqIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderadjustment.FieldShipGroupSeqID,
		})
	}
	if value, ok := oauo.mutation.Comments(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderadjustment.FieldComments,
		})
	}
	if oauo.mutation.CommentsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: orderadjustment.FieldComments,
		})
	}
	if value, ok := oauo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderadjustment.FieldDescription,
		})
	}
	if oauo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: orderadjustment.FieldDescription,
		})
	}
	if value, ok := oauo.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderadjustment.FieldAmount,
		})
	}
	if value, ok := oauo.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderadjustment.FieldAmount,
		})
	}
	if oauo.mutation.AmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: orderadjustment.FieldAmount,
		})
	}
	if value, ok := oauo.mutation.RecurringAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderadjustment.FieldRecurringAmount,
		})
	}
	if value, ok := oauo.mutation.AddedRecurringAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderadjustment.FieldRecurringAmount,
		})
	}
	if oauo.mutation.RecurringAmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: orderadjustment.FieldRecurringAmount,
		})
	}
	if value, ok := oauo.mutation.AmountAlreadyIncluded(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderadjustment.FieldAmountAlreadyIncluded,
		})
	}
	if value, ok := oauo.mutation.AddedAmountAlreadyIncluded(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderadjustment.FieldAmountAlreadyIncluded,
		})
	}
	if oauo.mutation.AmountAlreadyIncludedCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: orderadjustment.FieldAmountAlreadyIncluded,
		})
	}
	if value, ok := oauo.mutation.ProductPromoID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderadjustment.FieldProductPromoID,
		})
	}
	if value, ok := oauo.mutation.AddedProductPromoID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderadjustment.FieldProductPromoID,
		})
	}
	if oauo.mutation.ProductPromoIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderadjustment.FieldProductPromoID,
		})
	}
	if value, ok := oauo.mutation.ProductPromoRuleID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderadjustment.FieldProductPromoRuleID,
		})
	}
	if value, ok := oauo.mutation.AddedProductPromoRuleID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderadjustment.FieldProductPromoRuleID,
		})
	}
	if oauo.mutation.ProductPromoRuleIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderadjustment.FieldProductPromoRuleID,
		})
	}
	if value, ok := oauo.mutation.ProductPromoActionSeqID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderadjustment.FieldProductPromoActionSeqID,
		})
	}
	if value, ok := oauo.mutation.AddedProductPromoActionSeqID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderadjustment.FieldProductPromoActionSeqID,
		})
	}
	if oauo.mutation.ProductPromoActionSeqIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderadjustment.FieldProductPromoActionSeqID,
		})
	}
	if value, ok := oauo.mutation.ProductFeatureID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderadjustment.FieldProductFeatureID,
		})
	}
	if value, ok := oauo.mutation.AddedProductFeatureID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderadjustment.FieldProductFeatureID,
		})
	}
	if oauo.mutation.ProductFeatureIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderadjustment.FieldProductFeatureID,
		})
	}
	if value, ok := oauo.mutation.CorrespondingProductID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderadjustment.FieldCorrespondingProductID,
		})
	}
	if value, ok := oauo.mutation.AddedCorrespondingProductID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderadjustment.FieldCorrespondingProductID,
		})
	}
	if oauo.mutation.CorrespondingProductIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderadjustment.FieldCorrespondingProductID,
		})
	}
	if value, ok := oauo.mutation.TaxAuthorityRateSeqID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderadjustment.FieldTaxAuthorityRateSeqID,
		})
	}
	if value, ok := oauo.mutation.AddedTaxAuthorityRateSeqID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderadjustment.FieldTaxAuthorityRateSeqID,
		})
	}
	if oauo.mutation.TaxAuthorityRateSeqIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderadjustment.FieldTaxAuthorityRateSeqID,
		})
	}
	if value, ok := oauo.mutation.SourceReferenceID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderadjustment.FieldSourceReferenceID,
		})
	}
	if oauo.mutation.SourceReferenceIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: orderadjustment.FieldSourceReferenceID,
		})
	}
	if value, ok := oauo.mutation.SourcePercentage(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderadjustment.FieldSourcePercentage,
		})
	}
	if value, ok := oauo.mutation.AddedSourcePercentage(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderadjustment.FieldSourcePercentage,
		})
	}
	if oauo.mutation.SourcePercentageCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: orderadjustment.FieldSourcePercentage,
		})
	}
	if value, ok := oauo.mutation.CustomerReferenceID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderadjustment.FieldCustomerReferenceID,
		})
	}
	if oauo.mutation.CustomerReferenceIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: orderadjustment.FieldCustomerReferenceID,
		})
	}
	if value, ok := oauo.mutation.PrimaryGeoID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderadjustment.FieldPrimaryGeoID,
		})
	}
	if value, ok := oauo.mutation.AddedPrimaryGeoID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderadjustment.FieldPrimaryGeoID,
		})
	}
	if oauo.mutation.PrimaryGeoIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderadjustment.FieldPrimaryGeoID,
		})
	}
	if value, ok := oauo.mutation.SecondaryGeoID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderadjustment.FieldSecondaryGeoID,
		})
	}
	if value, ok := oauo.mutation.AddedSecondaryGeoID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderadjustment.FieldSecondaryGeoID,
		})
	}
	if oauo.mutation.SecondaryGeoIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderadjustment.FieldSecondaryGeoID,
		})
	}
	if value, ok := oauo.mutation.ExemptAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderadjustment.FieldExemptAmount,
		})
	}
	if value, ok := oauo.mutation.AddedExemptAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderadjustment.FieldExemptAmount,
		})
	}
	if oauo.mutation.ExemptAmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: orderadjustment.FieldExemptAmount,
		})
	}
	if value, ok := oauo.mutation.TaxAuthGeoID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderadjustment.FieldTaxAuthGeoID,
		})
	}
	if value, ok := oauo.mutation.AddedTaxAuthGeoID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderadjustment.FieldTaxAuthGeoID,
		})
	}
	if oauo.mutation.TaxAuthGeoIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderadjustment.FieldTaxAuthGeoID,
		})
	}
	if value, ok := oauo.mutation.TaxAuthPartyID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderadjustment.FieldTaxAuthPartyID,
		})
	}
	if value, ok := oauo.mutation.AddedTaxAuthPartyID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderadjustment.FieldTaxAuthPartyID,
		})
	}
	if oauo.mutation.TaxAuthPartyIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderadjustment.FieldTaxAuthPartyID,
		})
	}
	if value, ok := oauo.mutation.OverrideGlAccountID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderadjustment.FieldOverrideGlAccountID,
		})
	}
	if value, ok := oauo.mutation.AddedOverrideGlAccountID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderadjustment.FieldOverrideGlAccountID,
		})
	}
	if oauo.mutation.OverrideGlAccountIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderadjustment.FieldOverrideGlAccountID,
		})
	}
	if value, ok := oauo.mutation.IncludeInTax(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: orderadjustment.FieldIncludeInTax,
		})
	}
	if oauo.mutation.IncludeInTaxCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: orderadjustment.FieldIncludeInTax,
		})
	}
	if value, ok := oauo.mutation.IncludeInShipping(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: orderadjustment.FieldIncludeInShipping,
		})
	}
	if oauo.mutation.IncludeInShippingCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: orderadjustment.FieldIncludeInShipping,
		})
	}
	if value, ok := oauo.mutation.IsManual(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: orderadjustment.FieldIsManual,
		})
	}
	if oauo.mutation.IsManualCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: orderadjustment.FieldIsManual,
		})
	}
	if value, ok := oauo.mutation.CreatedDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderadjustment.FieldCreatedDate,
		})
	}
	if oauo.mutation.CreatedDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: orderadjustment.FieldCreatedDate,
		})
	}
	if value, ok := oauo.mutation.CreatedByUserLogin(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderadjustment.FieldCreatedByUserLogin,
		})
	}
	if oauo.mutation.CreatedByUserLoginCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: orderadjustment.FieldCreatedByUserLogin,
		})
	}
	if value, ok := oauo.mutation.LastModifiedDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderadjustment.FieldLastModifiedDate,
		})
	}
	if oauo.mutation.LastModifiedDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: orderadjustment.FieldLastModifiedDate,
		})
	}
	if value, ok := oauo.mutation.LastModifiedByUserLogin(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderadjustment.FieldLastModifiedByUserLogin,
		})
	}
	if oauo.mutation.LastModifiedByUserLoginCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: orderadjustment.FieldLastModifiedByUserLogin,
		})
	}
	if oauo.mutation.OrderHeaderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderadjustment.OrderHeaderTable,
			Columns: []string{orderadjustment.OrderHeaderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderheader.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oauo.mutation.OrderHeaderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderadjustment.OrderHeaderTable,
			Columns: []string{orderadjustment.OrderHeaderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderheader.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oauo.mutation.OrderItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderadjustment.OrderItemTable,
			Columns: []string{orderadjustment.OrderItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitem.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oauo.mutation.OrderItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderadjustment.OrderItemTable,
			Columns: []string{orderadjustment.OrderItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oauo.mutation.OrderItemShipGroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderadjustment.OrderItemShipGroupTable,
			Columns: []string{orderadjustment.OrderItemShipGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitemshipgroup.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oauo.mutation.OrderItemShipGroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderadjustment.OrderItemShipGroupTable,
			Columns: []string{orderadjustment.OrderItemShipGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitemshipgroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oauo.mutation.OrderItemShipGroupAssocCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderadjustment.OrderItemShipGroupAssocTable,
			Columns: []string{orderadjustment.OrderItemShipGroupAssocColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitemshipgroupassoc.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oauo.mutation.OrderItemShipGroupAssocIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderadjustment.OrderItemShipGroupAssocTable,
			Columns: []string{orderadjustment.OrderItemShipGroupAssocColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitemshipgroupassoc.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oauo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderadjustment.ParentTable,
			Columns: []string{orderadjustment.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderadjustment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oauo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderadjustment.ParentTable,
			Columns: []string{orderadjustment.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderadjustment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oauo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderadjustment.ChildrenTable,
			Columns: []string{orderadjustment.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderadjustment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oauo.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !oauo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderadjustment.ChildrenTable,
			Columns: []string{orderadjustment.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderadjustment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oauo.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderadjustment.ChildrenTable,
			Columns: []string{orderadjustment.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderadjustment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &OrderAdjustment{config: oauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, oauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderadjustment.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
