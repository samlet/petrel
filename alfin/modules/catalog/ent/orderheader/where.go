// Code generated by entc, DO NOT EDIT.

package orderheader

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// StringRef applies equality check predicate on the "string_ref" field. It's identical to StringRefEQ.
func StringRef(v string) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStringRef), v))
	})
}

// OrderTypeID applies equality check predicate on the "order_type_id" field. It's identical to OrderTypeIDEQ.
func OrderTypeID(v int) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderTypeID), v))
	})
}

// OrderName applies equality check predicate on the "order_name" field. It's identical to OrderNameEQ.
func OrderName(v string) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderName), v))
	})
}

// ExternalID applies equality check predicate on the "external_id" field. It's identical to ExternalIDEQ.
func ExternalID(v int) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExternalID), v))
	})
}

// OrderDate applies equality check predicate on the "order_date" field. It's identical to OrderDateEQ.
func OrderDate(v time.Time) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderDate), v))
	})
}

// EntryDate applies equality check predicate on the "entry_date" field. It's identical to EntryDateEQ.
func EntryDate(v time.Time) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEntryDate), v))
	})
}

// PickSheetPrintedDate applies equality check predicate on the "pick_sheet_printed_date" field. It's identical to PickSheetPrintedDateEQ.
func PickSheetPrintedDate(v time.Time) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPickSheetPrintedDate), v))
	})
}

// VisitID applies equality check predicate on the "visit_id" field. It's identical to VisitIDEQ.
func VisitID(v int) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVisitID), v))
	})
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v string) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedBy), v))
	})
}

// FirstAttemptOrderID applies equality check predicate on the "first_attempt_order_id" field. It's identical to FirstAttemptOrderIDEQ.
func FirstAttemptOrderID(v int) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFirstAttemptOrderID), v))
	})
}

// CurrencyUom applies equality check predicate on the "currency_uom" field. It's identical to CurrencyUomEQ.
func CurrencyUom(v int) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCurrencyUom), v))
	})
}

// BillingAccountID applies equality check predicate on the "billing_account_id" field. It's identical to BillingAccountIDEQ.
func BillingAccountID(v int) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBillingAccountID), v))
	})
}

// OriginFacilityID applies equality check predicate on the "origin_facility_id" field. It's identical to OriginFacilityIDEQ.
func OriginFacilityID(v int) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOriginFacilityID), v))
	})
}

// WebSiteID applies equality check predicate on the "web_site_id" field. It's identical to WebSiteIDEQ.
func WebSiteID(v int) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWebSiteID), v))
	})
}

// AgreementID applies equality check predicate on the "agreement_id" field. It's identical to AgreementIDEQ.
func AgreementID(v int) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAgreementID), v))
	})
}

// TerminalID applies equality check predicate on the "terminal_id" field. It's identical to TerminalIDEQ.
func TerminalID(v string) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTerminalID), v))
	})
}

// TransactionID applies equality check predicate on the "transaction_id" field. It's identical to TransactionIDEQ.
func TransactionID(v string) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTransactionID), v))
	})
}

// AutoOrderShoppingListID applies equality check predicate on the "auto_order_shopping_list_id" field. It's identical to AutoOrderShoppingListIDEQ.
func AutoOrderShoppingListID(v int) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAutoOrderShoppingListID), v))
	})
}

// InternalCode applies equality check predicate on the "internal_code" field. It's identical to InternalCodeEQ.
func InternalCode(v string) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInternalCode), v))
	})
}

// RemainingSubTotal applies equality check predicate on the "remaining_sub_total" field. It's identical to RemainingSubTotalEQ.
func RemainingSubTotal(v float64) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemainingSubTotal), v))
	})
}

// GrandTotal applies equality check predicate on the "grand_total" field. It's identical to GrandTotalEQ.
func GrandTotal(v float64) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGrandTotal), v))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.OrderHeader {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderHeader(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.OrderHeader {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderHeader(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), v))
	})
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.OrderHeader {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderHeader(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.OrderHeader {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderHeader(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateTime), v))
	})
}

// StringRefEQ applies the EQ predicate on the "string_ref" field.
func StringRefEQ(v string) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStringRef), v))
	})
}

// StringRefNEQ applies the NEQ predicate on the "string_ref" field.
func StringRefNEQ(v string) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStringRef), v))
	})
}

// StringRefIn applies the In predicate on the "string_ref" field.
func StringRefIn(vs ...string) predicate.OrderHeader {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderHeader(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStringRef), v...))
	})
}

// StringRefNotIn applies the NotIn predicate on the "string_ref" field.
func StringRefNotIn(vs ...string) predicate.OrderHeader {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderHeader(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStringRef), v...))
	})
}

// StringRefGT applies the GT predicate on the "string_ref" field.
func StringRefGT(v string) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStringRef), v))
	})
}

// StringRefGTE applies the GTE predicate on the "string_ref" field.
func StringRefGTE(v string) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStringRef), v))
	})
}

// StringRefLT applies the LT predicate on the "string_ref" field.
func StringRefLT(v string) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStringRef), v))
	})
}

// StringRefLTE applies the LTE predicate on the "string_ref" field.
func StringRefLTE(v string) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStringRef), v))
	})
}

// StringRefContains applies the Contains predicate on the "string_ref" field.
func StringRefContains(v string) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStringRef), v))
	})
}

// StringRefHasPrefix applies the HasPrefix predicate on the "string_ref" field.
func StringRefHasPrefix(v string) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStringRef), v))
	})
}

// StringRefHasSuffix applies the HasSuffix predicate on the "string_ref" field.
func StringRefHasSuffix(v string) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStringRef), v))
	})
}

// StringRefIsNil applies the IsNil predicate on the "string_ref" field.
func StringRefIsNil() predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStringRef)))
	})
}

// StringRefNotNil applies the NotNil predicate on the "string_ref" field.
func StringRefNotNil() predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStringRef)))
	})
}

// StringRefEqualFold applies the EqualFold predicate on the "string_ref" field.
func StringRefEqualFold(v string) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStringRef), v))
	})
}

// StringRefContainsFold applies the ContainsFold predicate on the "string_ref" field.
func StringRefContainsFold(v string) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStringRef), v))
	})
}

// OrderTypeIDEQ applies the EQ predicate on the "order_type_id" field.
func OrderTypeIDEQ(v int) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderTypeID), v))
	})
}

// OrderTypeIDNEQ applies the NEQ predicate on the "order_type_id" field.
func OrderTypeIDNEQ(v int) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOrderTypeID), v))
	})
}

// OrderTypeIDIn applies the In predicate on the "order_type_id" field.
func OrderTypeIDIn(vs ...int) predicate.OrderHeader {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderHeader(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOrderTypeID), v...))
	})
}

// OrderTypeIDNotIn applies the NotIn predicate on the "order_type_id" field.
func OrderTypeIDNotIn(vs ...int) predicate.OrderHeader {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderHeader(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOrderTypeID), v...))
	})
}

// OrderTypeIDGT applies the GT predicate on the "order_type_id" field.
func OrderTypeIDGT(v int) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOrderTypeID), v))
	})
}

// OrderTypeIDGTE applies the GTE predicate on the "order_type_id" field.
func OrderTypeIDGTE(v int) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOrderTypeID), v))
	})
}

// OrderTypeIDLT applies the LT predicate on the "order_type_id" field.
func OrderTypeIDLT(v int) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOrderTypeID), v))
	})
}

// OrderTypeIDLTE applies the LTE predicate on the "order_type_id" field.
func OrderTypeIDLTE(v int) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOrderTypeID), v))
	})
}

// OrderTypeIDIsNil applies the IsNil predicate on the "order_type_id" field.
func OrderTypeIDIsNil() predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOrderTypeID)))
	})
}

// OrderTypeIDNotNil applies the NotNil predicate on the "order_type_id" field.
func OrderTypeIDNotNil() predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOrderTypeID)))
	})
}

// OrderNameEQ applies the EQ predicate on the "order_name" field.
func OrderNameEQ(v string) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderName), v))
	})
}

// OrderNameNEQ applies the NEQ predicate on the "order_name" field.
func OrderNameNEQ(v string) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOrderName), v))
	})
}

// OrderNameIn applies the In predicate on the "order_name" field.
func OrderNameIn(vs ...string) predicate.OrderHeader {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderHeader(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOrderName), v...))
	})
}

// OrderNameNotIn applies the NotIn predicate on the "order_name" field.
func OrderNameNotIn(vs ...string) predicate.OrderHeader {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderHeader(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOrderName), v...))
	})
}

// OrderNameGT applies the GT predicate on the "order_name" field.
func OrderNameGT(v string) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOrderName), v))
	})
}

// OrderNameGTE applies the GTE predicate on the "order_name" field.
func OrderNameGTE(v string) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOrderName), v))
	})
}

// OrderNameLT applies the LT predicate on the "order_name" field.
func OrderNameLT(v string) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOrderName), v))
	})
}

// OrderNameLTE applies the LTE predicate on the "order_name" field.
func OrderNameLTE(v string) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOrderName), v))
	})
}

// OrderNameContains applies the Contains predicate on the "order_name" field.
func OrderNameContains(v string) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOrderName), v))
	})
}

// OrderNameHasPrefix applies the HasPrefix predicate on the "order_name" field.
func OrderNameHasPrefix(v string) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOrderName), v))
	})
}

// OrderNameHasSuffix applies the HasSuffix predicate on the "order_name" field.
func OrderNameHasSuffix(v string) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOrderName), v))
	})
}

// OrderNameIsNil applies the IsNil predicate on the "order_name" field.
func OrderNameIsNil() predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOrderName)))
	})
}

// OrderNameNotNil applies the NotNil predicate on the "order_name" field.
func OrderNameNotNil() predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOrderName)))
	})
}

// OrderNameEqualFold applies the EqualFold predicate on the "order_name" field.
func OrderNameEqualFold(v string) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOrderName), v))
	})
}

// OrderNameContainsFold applies the ContainsFold predicate on the "order_name" field.
func OrderNameContainsFold(v string) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOrderName), v))
	})
}

// ExternalIDEQ applies the EQ predicate on the "external_id" field.
func ExternalIDEQ(v int) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExternalID), v))
	})
}

// ExternalIDNEQ applies the NEQ predicate on the "external_id" field.
func ExternalIDNEQ(v int) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldExternalID), v))
	})
}

// ExternalIDIn applies the In predicate on the "external_id" field.
func ExternalIDIn(vs ...int) predicate.OrderHeader {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderHeader(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldExternalID), v...))
	})
}

// ExternalIDNotIn applies the NotIn predicate on the "external_id" field.
func ExternalIDNotIn(vs ...int) predicate.OrderHeader {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderHeader(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldExternalID), v...))
	})
}

// ExternalIDGT applies the GT predicate on the "external_id" field.
func ExternalIDGT(v int) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldExternalID), v))
	})
}

// ExternalIDGTE applies the GTE predicate on the "external_id" field.
func ExternalIDGTE(v int) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldExternalID), v))
	})
}

// ExternalIDLT applies the LT predicate on the "external_id" field.
func ExternalIDLT(v int) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldExternalID), v))
	})
}

// ExternalIDLTE applies the LTE predicate on the "external_id" field.
func ExternalIDLTE(v int) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldExternalID), v))
	})
}

// ExternalIDIsNil applies the IsNil predicate on the "external_id" field.
func ExternalIDIsNil() predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldExternalID)))
	})
}

// ExternalIDNotNil applies the NotNil predicate on the "external_id" field.
func ExternalIDNotNil() predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldExternalID)))
	})
}

// OrderDateEQ applies the EQ predicate on the "order_date" field.
func OrderDateEQ(v time.Time) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderDate), v))
	})
}

// OrderDateNEQ applies the NEQ predicate on the "order_date" field.
func OrderDateNEQ(v time.Time) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOrderDate), v))
	})
}

// OrderDateIn applies the In predicate on the "order_date" field.
func OrderDateIn(vs ...time.Time) predicate.OrderHeader {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderHeader(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOrderDate), v...))
	})
}

// OrderDateNotIn applies the NotIn predicate on the "order_date" field.
func OrderDateNotIn(vs ...time.Time) predicate.OrderHeader {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderHeader(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOrderDate), v...))
	})
}

// OrderDateGT applies the GT predicate on the "order_date" field.
func OrderDateGT(v time.Time) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOrderDate), v))
	})
}

// OrderDateGTE applies the GTE predicate on the "order_date" field.
func OrderDateGTE(v time.Time) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOrderDate), v))
	})
}

// OrderDateLT applies the LT predicate on the "order_date" field.
func OrderDateLT(v time.Time) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOrderDate), v))
	})
}

// OrderDateLTE applies the LTE predicate on the "order_date" field.
func OrderDateLTE(v time.Time) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOrderDate), v))
	})
}

// OrderDateIsNil applies the IsNil predicate on the "order_date" field.
func OrderDateIsNil() predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOrderDate)))
	})
}

// OrderDateNotNil applies the NotNil predicate on the "order_date" field.
func OrderDateNotNil() predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOrderDate)))
	})
}

// PriorityEQ applies the EQ predicate on the "priority" field.
func PriorityEQ(v Priority) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPriority), v))
	})
}

// PriorityNEQ applies the NEQ predicate on the "priority" field.
func PriorityNEQ(v Priority) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPriority), v))
	})
}

// PriorityIn applies the In predicate on the "priority" field.
func PriorityIn(vs ...Priority) predicate.OrderHeader {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderHeader(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPriority), v...))
	})
}

// PriorityNotIn applies the NotIn predicate on the "priority" field.
func PriorityNotIn(vs ...Priority) predicate.OrderHeader {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderHeader(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPriority), v...))
	})
}

// PriorityIsNil applies the IsNil predicate on the "priority" field.
func PriorityIsNil() predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPriority)))
	})
}

// PriorityNotNil applies the NotNil predicate on the "priority" field.
func PriorityNotNil() predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPriority)))
	})
}

// EntryDateEQ applies the EQ predicate on the "entry_date" field.
func EntryDateEQ(v time.Time) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEntryDate), v))
	})
}

// EntryDateNEQ applies the NEQ predicate on the "entry_date" field.
func EntryDateNEQ(v time.Time) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEntryDate), v))
	})
}

// EntryDateIn applies the In predicate on the "entry_date" field.
func EntryDateIn(vs ...time.Time) predicate.OrderHeader {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderHeader(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEntryDate), v...))
	})
}

// EntryDateNotIn applies the NotIn predicate on the "entry_date" field.
func EntryDateNotIn(vs ...time.Time) predicate.OrderHeader {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderHeader(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEntryDate), v...))
	})
}

// EntryDateGT applies the GT predicate on the "entry_date" field.
func EntryDateGT(v time.Time) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEntryDate), v))
	})
}

// EntryDateGTE applies the GTE predicate on the "entry_date" field.
func EntryDateGTE(v time.Time) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEntryDate), v))
	})
}

// EntryDateLT applies the LT predicate on the "entry_date" field.
func EntryDateLT(v time.Time) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEntryDate), v))
	})
}

// EntryDateLTE applies the LTE predicate on the "entry_date" field.
func EntryDateLTE(v time.Time) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEntryDate), v))
	})
}

// EntryDateIsNil applies the IsNil predicate on the "entry_date" field.
func EntryDateIsNil() predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldEntryDate)))
	})
}

// EntryDateNotNil applies the NotNil predicate on the "entry_date" field.
func EntryDateNotNil() predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldEntryDate)))
	})
}

// PickSheetPrintedDateEQ applies the EQ predicate on the "pick_sheet_printed_date" field.
func PickSheetPrintedDateEQ(v time.Time) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPickSheetPrintedDate), v))
	})
}

// PickSheetPrintedDateNEQ applies the NEQ predicate on the "pick_sheet_printed_date" field.
func PickSheetPrintedDateNEQ(v time.Time) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPickSheetPrintedDate), v))
	})
}

// PickSheetPrintedDateIn applies the In predicate on the "pick_sheet_printed_date" field.
func PickSheetPrintedDateIn(vs ...time.Time) predicate.OrderHeader {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderHeader(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPickSheetPrintedDate), v...))
	})
}

// PickSheetPrintedDateNotIn applies the NotIn predicate on the "pick_sheet_printed_date" field.
func PickSheetPrintedDateNotIn(vs ...time.Time) predicate.OrderHeader {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderHeader(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPickSheetPrintedDate), v...))
	})
}

// PickSheetPrintedDateGT applies the GT predicate on the "pick_sheet_printed_date" field.
func PickSheetPrintedDateGT(v time.Time) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPickSheetPrintedDate), v))
	})
}

// PickSheetPrintedDateGTE applies the GTE predicate on the "pick_sheet_printed_date" field.
func PickSheetPrintedDateGTE(v time.Time) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPickSheetPrintedDate), v))
	})
}

// PickSheetPrintedDateLT applies the LT predicate on the "pick_sheet_printed_date" field.
func PickSheetPrintedDateLT(v time.Time) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPickSheetPrintedDate), v))
	})
}

// PickSheetPrintedDateLTE applies the LTE predicate on the "pick_sheet_printed_date" field.
func PickSheetPrintedDateLTE(v time.Time) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPickSheetPrintedDate), v))
	})
}

// PickSheetPrintedDateIsNil applies the IsNil predicate on the "pick_sheet_printed_date" field.
func PickSheetPrintedDateIsNil() predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPickSheetPrintedDate)))
	})
}

// PickSheetPrintedDateNotNil applies the NotNil predicate on the "pick_sheet_printed_date" field.
func PickSheetPrintedDateNotNil() predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPickSheetPrintedDate)))
	})
}

// VisitIDEQ applies the EQ predicate on the "visit_id" field.
func VisitIDEQ(v int) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVisitID), v))
	})
}

// VisitIDNEQ applies the NEQ predicate on the "visit_id" field.
func VisitIDNEQ(v int) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldVisitID), v))
	})
}

// VisitIDIn applies the In predicate on the "visit_id" field.
func VisitIDIn(vs ...int) predicate.OrderHeader {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderHeader(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldVisitID), v...))
	})
}

// VisitIDNotIn applies the NotIn predicate on the "visit_id" field.
func VisitIDNotIn(vs ...int) predicate.OrderHeader {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderHeader(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldVisitID), v...))
	})
}

// VisitIDGT applies the GT predicate on the "visit_id" field.
func VisitIDGT(v int) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldVisitID), v))
	})
}

// VisitIDGTE applies the GTE predicate on the "visit_id" field.
func VisitIDGTE(v int) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldVisitID), v))
	})
}

// VisitIDLT applies the LT predicate on the "visit_id" field.
func VisitIDLT(v int) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldVisitID), v))
	})
}

// VisitIDLTE applies the LTE predicate on the "visit_id" field.
func VisitIDLTE(v int) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldVisitID), v))
	})
}

// VisitIDIsNil applies the IsNil predicate on the "visit_id" field.
func VisitIDIsNil() predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldVisitID)))
	})
}

// VisitIDNotNil applies the NotNil predicate on the "visit_id" field.
func VisitIDNotNil() predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldVisitID)))
	})
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v string) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedBy), v))
	})
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v string) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedBy), v))
	})
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...string) predicate.OrderHeader {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderHeader(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedBy), v...))
	})
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...string) predicate.OrderHeader {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderHeader(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedBy), v...))
	})
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v string) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedBy), v))
	})
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v string) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedBy), v))
	})
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v string) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedBy), v))
	})
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v string) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedBy), v))
	})
}

// CreatedByContains applies the Contains predicate on the "created_by" field.
func CreatedByContains(v string) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCreatedBy), v))
	})
}

// CreatedByHasPrefix applies the HasPrefix predicate on the "created_by" field.
func CreatedByHasPrefix(v string) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCreatedBy), v))
	})
}

// CreatedByHasSuffix applies the HasSuffix predicate on the "created_by" field.
func CreatedByHasSuffix(v string) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCreatedBy), v))
	})
}

// CreatedByIsNil applies the IsNil predicate on the "created_by" field.
func CreatedByIsNil() predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreatedBy)))
	})
}

// CreatedByNotNil applies the NotNil predicate on the "created_by" field.
func CreatedByNotNil() predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreatedBy)))
	})
}

// CreatedByEqualFold applies the EqualFold predicate on the "created_by" field.
func CreatedByEqualFold(v string) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCreatedBy), v))
	})
}

// CreatedByContainsFold applies the ContainsFold predicate on the "created_by" field.
func CreatedByContainsFold(v string) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCreatedBy), v))
	})
}

// FirstAttemptOrderIDEQ applies the EQ predicate on the "first_attempt_order_id" field.
func FirstAttemptOrderIDEQ(v int) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFirstAttemptOrderID), v))
	})
}

// FirstAttemptOrderIDNEQ applies the NEQ predicate on the "first_attempt_order_id" field.
func FirstAttemptOrderIDNEQ(v int) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFirstAttemptOrderID), v))
	})
}

// FirstAttemptOrderIDIn applies the In predicate on the "first_attempt_order_id" field.
func FirstAttemptOrderIDIn(vs ...int) predicate.OrderHeader {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderHeader(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFirstAttemptOrderID), v...))
	})
}

// FirstAttemptOrderIDNotIn applies the NotIn predicate on the "first_attempt_order_id" field.
func FirstAttemptOrderIDNotIn(vs ...int) predicate.OrderHeader {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderHeader(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFirstAttemptOrderID), v...))
	})
}

// FirstAttemptOrderIDGT applies the GT predicate on the "first_attempt_order_id" field.
func FirstAttemptOrderIDGT(v int) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFirstAttemptOrderID), v))
	})
}

// FirstAttemptOrderIDGTE applies the GTE predicate on the "first_attempt_order_id" field.
func FirstAttemptOrderIDGTE(v int) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFirstAttemptOrderID), v))
	})
}

// FirstAttemptOrderIDLT applies the LT predicate on the "first_attempt_order_id" field.
func FirstAttemptOrderIDLT(v int) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFirstAttemptOrderID), v))
	})
}

// FirstAttemptOrderIDLTE applies the LTE predicate on the "first_attempt_order_id" field.
func FirstAttemptOrderIDLTE(v int) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFirstAttemptOrderID), v))
	})
}

// FirstAttemptOrderIDIsNil applies the IsNil predicate on the "first_attempt_order_id" field.
func FirstAttemptOrderIDIsNil() predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFirstAttemptOrderID)))
	})
}

// FirstAttemptOrderIDNotNil applies the NotNil predicate on the "first_attempt_order_id" field.
func FirstAttemptOrderIDNotNil() predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFirstAttemptOrderID)))
	})
}

// CurrencyUomEQ applies the EQ predicate on the "currency_uom" field.
func CurrencyUomEQ(v int) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCurrencyUom), v))
	})
}

// CurrencyUomNEQ applies the NEQ predicate on the "currency_uom" field.
func CurrencyUomNEQ(v int) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCurrencyUom), v))
	})
}

// CurrencyUomIn applies the In predicate on the "currency_uom" field.
func CurrencyUomIn(vs ...int) predicate.OrderHeader {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderHeader(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCurrencyUom), v...))
	})
}

// CurrencyUomNotIn applies the NotIn predicate on the "currency_uom" field.
func CurrencyUomNotIn(vs ...int) predicate.OrderHeader {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderHeader(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCurrencyUom), v...))
	})
}

// CurrencyUomGT applies the GT predicate on the "currency_uom" field.
func CurrencyUomGT(v int) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCurrencyUom), v))
	})
}

// CurrencyUomGTE applies the GTE predicate on the "currency_uom" field.
func CurrencyUomGTE(v int) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCurrencyUom), v))
	})
}

// CurrencyUomLT applies the LT predicate on the "currency_uom" field.
func CurrencyUomLT(v int) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCurrencyUom), v))
	})
}

// CurrencyUomLTE applies the LTE predicate on the "currency_uom" field.
func CurrencyUomLTE(v int) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCurrencyUom), v))
	})
}

// CurrencyUomIsNil applies the IsNil predicate on the "currency_uom" field.
func CurrencyUomIsNil() predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCurrencyUom)))
	})
}

// CurrencyUomNotNil applies the NotNil predicate on the "currency_uom" field.
func CurrencyUomNotNil() predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCurrencyUom)))
	})
}

// BillingAccountIDEQ applies the EQ predicate on the "billing_account_id" field.
func BillingAccountIDEQ(v int) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBillingAccountID), v))
	})
}

// BillingAccountIDNEQ applies the NEQ predicate on the "billing_account_id" field.
func BillingAccountIDNEQ(v int) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBillingAccountID), v))
	})
}

// BillingAccountIDIn applies the In predicate on the "billing_account_id" field.
func BillingAccountIDIn(vs ...int) predicate.OrderHeader {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderHeader(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBillingAccountID), v...))
	})
}

// BillingAccountIDNotIn applies the NotIn predicate on the "billing_account_id" field.
func BillingAccountIDNotIn(vs ...int) predicate.OrderHeader {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderHeader(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBillingAccountID), v...))
	})
}

// BillingAccountIDGT applies the GT predicate on the "billing_account_id" field.
func BillingAccountIDGT(v int) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBillingAccountID), v))
	})
}

// BillingAccountIDGTE applies the GTE predicate on the "billing_account_id" field.
func BillingAccountIDGTE(v int) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBillingAccountID), v))
	})
}

// BillingAccountIDLT applies the LT predicate on the "billing_account_id" field.
func BillingAccountIDLT(v int) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBillingAccountID), v))
	})
}

// BillingAccountIDLTE applies the LTE predicate on the "billing_account_id" field.
func BillingAccountIDLTE(v int) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBillingAccountID), v))
	})
}

// BillingAccountIDIsNil applies the IsNil predicate on the "billing_account_id" field.
func BillingAccountIDIsNil() predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldBillingAccountID)))
	})
}

// BillingAccountIDNotNil applies the NotNil predicate on the "billing_account_id" field.
func BillingAccountIDNotNil() predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldBillingAccountID)))
	})
}

// OriginFacilityIDEQ applies the EQ predicate on the "origin_facility_id" field.
func OriginFacilityIDEQ(v int) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOriginFacilityID), v))
	})
}

// OriginFacilityIDNEQ applies the NEQ predicate on the "origin_facility_id" field.
func OriginFacilityIDNEQ(v int) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOriginFacilityID), v))
	})
}

// OriginFacilityIDIn applies the In predicate on the "origin_facility_id" field.
func OriginFacilityIDIn(vs ...int) predicate.OrderHeader {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderHeader(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOriginFacilityID), v...))
	})
}

// OriginFacilityIDNotIn applies the NotIn predicate on the "origin_facility_id" field.
func OriginFacilityIDNotIn(vs ...int) predicate.OrderHeader {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderHeader(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOriginFacilityID), v...))
	})
}

// OriginFacilityIDGT applies the GT predicate on the "origin_facility_id" field.
func OriginFacilityIDGT(v int) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOriginFacilityID), v))
	})
}

// OriginFacilityIDGTE applies the GTE predicate on the "origin_facility_id" field.
func OriginFacilityIDGTE(v int) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOriginFacilityID), v))
	})
}

// OriginFacilityIDLT applies the LT predicate on the "origin_facility_id" field.
func OriginFacilityIDLT(v int) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOriginFacilityID), v))
	})
}

// OriginFacilityIDLTE applies the LTE predicate on the "origin_facility_id" field.
func OriginFacilityIDLTE(v int) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOriginFacilityID), v))
	})
}

// OriginFacilityIDIsNil applies the IsNil predicate on the "origin_facility_id" field.
func OriginFacilityIDIsNil() predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOriginFacilityID)))
	})
}

// OriginFacilityIDNotNil applies the NotNil predicate on the "origin_facility_id" field.
func OriginFacilityIDNotNil() predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOriginFacilityID)))
	})
}

// WebSiteIDEQ applies the EQ predicate on the "web_site_id" field.
func WebSiteIDEQ(v int) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWebSiteID), v))
	})
}

// WebSiteIDNEQ applies the NEQ predicate on the "web_site_id" field.
func WebSiteIDNEQ(v int) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWebSiteID), v))
	})
}

// WebSiteIDIn applies the In predicate on the "web_site_id" field.
func WebSiteIDIn(vs ...int) predicate.OrderHeader {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderHeader(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldWebSiteID), v...))
	})
}

// WebSiteIDNotIn applies the NotIn predicate on the "web_site_id" field.
func WebSiteIDNotIn(vs ...int) predicate.OrderHeader {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderHeader(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldWebSiteID), v...))
	})
}

// WebSiteIDGT applies the GT predicate on the "web_site_id" field.
func WebSiteIDGT(v int) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWebSiteID), v))
	})
}

// WebSiteIDGTE applies the GTE predicate on the "web_site_id" field.
func WebSiteIDGTE(v int) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWebSiteID), v))
	})
}

// WebSiteIDLT applies the LT predicate on the "web_site_id" field.
func WebSiteIDLT(v int) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWebSiteID), v))
	})
}

// WebSiteIDLTE applies the LTE predicate on the "web_site_id" field.
func WebSiteIDLTE(v int) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWebSiteID), v))
	})
}

// WebSiteIDIsNil applies the IsNil predicate on the "web_site_id" field.
func WebSiteIDIsNil() predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldWebSiteID)))
	})
}

// WebSiteIDNotNil applies the NotNil predicate on the "web_site_id" field.
func WebSiteIDNotNil() predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldWebSiteID)))
	})
}

// AgreementIDEQ applies the EQ predicate on the "agreement_id" field.
func AgreementIDEQ(v int) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAgreementID), v))
	})
}

// AgreementIDNEQ applies the NEQ predicate on the "agreement_id" field.
func AgreementIDNEQ(v int) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAgreementID), v))
	})
}

// AgreementIDIn applies the In predicate on the "agreement_id" field.
func AgreementIDIn(vs ...int) predicate.OrderHeader {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderHeader(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAgreementID), v...))
	})
}

// AgreementIDNotIn applies the NotIn predicate on the "agreement_id" field.
func AgreementIDNotIn(vs ...int) predicate.OrderHeader {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderHeader(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAgreementID), v...))
	})
}

// AgreementIDGT applies the GT predicate on the "agreement_id" field.
func AgreementIDGT(v int) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAgreementID), v))
	})
}

// AgreementIDGTE applies the GTE predicate on the "agreement_id" field.
func AgreementIDGTE(v int) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAgreementID), v))
	})
}

// AgreementIDLT applies the LT predicate on the "agreement_id" field.
func AgreementIDLT(v int) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAgreementID), v))
	})
}

// AgreementIDLTE applies the LTE predicate on the "agreement_id" field.
func AgreementIDLTE(v int) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAgreementID), v))
	})
}

// AgreementIDIsNil applies the IsNil predicate on the "agreement_id" field.
func AgreementIDIsNil() predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAgreementID)))
	})
}

// AgreementIDNotNil applies the NotNil predicate on the "agreement_id" field.
func AgreementIDNotNil() predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAgreementID)))
	})
}

// TerminalIDEQ applies the EQ predicate on the "terminal_id" field.
func TerminalIDEQ(v string) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTerminalID), v))
	})
}

// TerminalIDNEQ applies the NEQ predicate on the "terminal_id" field.
func TerminalIDNEQ(v string) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTerminalID), v))
	})
}

// TerminalIDIn applies the In predicate on the "terminal_id" field.
func TerminalIDIn(vs ...string) predicate.OrderHeader {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderHeader(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTerminalID), v...))
	})
}

// TerminalIDNotIn applies the NotIn predicate on the "terminal_id" field.
func TerminalIDNotIn(vs ...string) predicate.OrderHeader {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderHeader(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTerminalID), v...))
	})
}

// TerminalIDGT applies the GT predicate on the "terminal_id" field.
func TerminalIDGT(v string) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTerminalID), v))
	})
}

// TerminalIDGTE applies the GTE predicate on the "terminal_id" field.
func TerminalIDGTE(v string) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTerminalID), v))
	})
}

// TerminalIDLT applies the LT predicate on the "terminal_id" field.
func TerminalIDLT(v string) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTerminalID), v))
	})
}

// TerminalIDLTE applies the LTE predicate on the "terminal_id" field.
func TerminalIDLTE(v string) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTerminalID), v))
	})
}

// TerminalIDContains applies the Contains predicate on the "terminal_id" field.
func TerminalIDContains(v string) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTerminalID), v))
	})
}

// TerminalIDHasPrefix applies the HasPrefix predicate on the "terminal_id" field.
func TerminalIDHasPrefix(v string) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTerminalID), v))
	})
}

// TerminalIDHasSuffix applies the HasSuffix predicate on the "terminal_id" field.
func TerminalIDHasSuffix(v string) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTerminalID), v))
	})
}

// TerminalIDIsNil applies the IsNil predicate on the "terminal_id" field.
func TerminalIDIsNil() predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTerminalID)))
	})
}

// TerminalIDNotNil applies the NotNil predicate on the "terminal_id" field.
func TerminalIDNotNil() predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTerminalID)))
	})
}

// TerminalIDEqualFold applies the EqualFold predicate on the "terminal_id" field.
func TerminalIDEqualFold(v string) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTerminalID), v))
	})
}

// TerminalIDContainsFold applies the ContainsFold predicate on the "terminal_id" field.
func TerminalIDContainsFold(v string) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTerminalID), v))
	})
}

// TransactionIDEQ applies the EQ predicate on the "transaction_id" field.
func TransactionIDEQ(v string) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTransactionID), v))
	})
}

// TransactionIDNEQ applies the NEQ predicate on the "transaction_id" field.
func TransactionIDNEQ(v string) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTransactionID), v))
	})
}

// TransactionIDIn applies the In predicate on the "transaction_id" field.
func TransactionIDIn(vs ...string) predicate.OrderHeader {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderHeader(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTransactionID), v...))
	})
}

// TransactionIDNotIn applies the NotIn predicate on the "transaction_id" field.
func TransactionIDNotIn(vs ...string) predicate.OrderHeader {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderHeader(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTransactionID), v...))
	})
}

// TransactionIDGT applies the GT predicate on the "transaction_id" field.
func TransactionIDGT(v string) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTransactionID), v))
	})
}

// TransactionIDGTE applies the GTE predicate on the "transaction_id" field.
func TransactionIDGTE(v string) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTransactionID), v))
	})
}

// TransactionIDLT applies the LT predicate on the "transaction_id" field.
func TransactionIDLT(v string) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTransactionID), v))
	})
}

// TransactionIDLTE applies the LTE predicate on the "transaction_id" field.
func TransactionIDLTE(v string) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTransactionID), v))
	})
}

// TransactionIDContains applies the Contains predicate on the "transaction_id" field.
func TransactionIDContains(v string) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTransactionID), v))
	})
}

// TransactionIDHasPrefix applies the HasPrefix predicate on the "transaction_id" field.
func TransactionIDHasPrefix(v string) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTransactionID), v))
	})
}

// TransactionIDHasSuffix applies the HasSuffix predicate on the "transaction_id" field.
func TransactionIDHasSuffix(v string) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTransactionID), v))
	})
}

// TransactionIDIsNil applies the IsNil predicate on the "transaction_id" field.
func TransactionIDIsNil() predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTransactionID)))
	})
}

// TransactionIDNotNil applies the NotNil predicate on the "transaction_id" field.
func TransactionIDNotNil() predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTransactionID)))
	})
}

// TransactionIDEqualFold applies the EqualFold predicate on the "transaction_id" field.
func TransactionIDEqualFold(v string) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTransactionID), v))
	})
}

// TransactionIDContainsFold applies the ContainsFold predicate on the "transaction_id" field.
func TransactionIDContainsFold(v string) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTransactionID), v))
	})
}

// AutoOrderShoppingListIDEQ applies the EQ predicate on the "auto_order_shopping_list_id" field.
func AutoOrderShoppingListIDEQ(v int) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAutoOrderShoppingListID), v))
	})
}

// AutoOrderShoppingListIDNEQ applies the NEQ predicate on the "auto_order_shopping_list_id" field.
func AutoOrderShoppingListIDNEQ(v int) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAutoOrderShoppingListID), v))
	})
}

// AutoOrderShoppingListIDIn applies the In predicate on the "auto_order_shopping_list_id" field.
func AutoOrderShoppingListIDIn(vs ...int) predicate.OrderHeader {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderHeader(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAutoOrderShoppingListID), v...))
	})
}

// AutoOrderShoppingListIDNotIn applies the NotIn predicate on the "auto_order_shopping_list_id" field.
func AutoOrderShoppingListIDNotIn(vs ...int) predicate.OrderHeader {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderHeader(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAutoOrderShoppingListID), v...))
	})
}

// AutoOrderShoppingListIDGT applies the GT predicate on the "auto_order_shopping_list_id" field.
func AutoOrderShoppingListIDGT(v int) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAutoOrderShoppingListID), v))
	})
}

// AutoOrderShoppingListIDGTE applies the GTE predicate on the "auto_order_shopping_list_id" field.
func AutoOrderShoppingListIDGTE(v int) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAutoOrderShoppingListID), v))
	})
}

// AutoOrderShoppingListIDLT applies the LT predicate on the "auto_order_shopping_list_id" field.
func AutoOrderShoppingListIDLT(v int) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAutoOrderShoppingListID), v))
	})
}

// AutoOrderShoppingListIDLTE applies the LTE predicate on the "auto_order_shopping_list_id" field.
func AutoOrderShoppingListIDLTE(v int) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAutoOrderShoppingListID), v))
	})
}

// AutoOrderShoppingListIDIsNil applies the IsNil predicate on the "auto_order_shopping_list_id" field.
func AutoOrderShoppingListIDIsNil() predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAutoOrderShoppingListID)))
	})
}

// AutoOrderShoppingListIDNotNil applies the NotNil predicate on the "auto_order_shopping_list_id" field.
func AutoOrderShoppingListIDNotNil() predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAutoOrderShoppingListID)))
	})
}

// NeedsInventoryIssuanceEQ applies the EQ predicate on the "needs_inventory_issuance" field.
func NeedsInventoryIssuanceEQ(v NeedsInventoryIssuance) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNeedsInventoryIssuance), v))
	})
}

// NeedsInventoryIssuanceNEQ applies the NEQ predicate on the "needs_inventory_issuance" field.
func NeedsInventoryIssuanceNEQ(v NeedsInventoryIssuance) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNeedsInventoryIssuance), v))
	})
}

// NeedsInventoryIssuanceIn applies the In predicate on the "needs_inventory_issuance" field.
func NeedsInventoryIssuanceIn(vs ...NeedsInventoryIssuance) predicate.OrderHeader {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderHeader(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldNeedsInventoryIssuance), v...))
	})
}

// NeedsInventoryIssuanceNotIn applies the NotIn predicate on the "needs_inventory_issuance" field.
func NeedsInventoryIssuanceNotIn(vs ...NeedsInventoryIssuance) predicate.OrderHeader {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderHeader(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldNeedsInventoryIssuance), v...))
	})
}

// NeedsInventoryIssuanceIsNil applies the IsNil predicate on the "needs_inventory_issuance" field.
func NeedsInventoryIssuanceIsNil() predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldNeedsInventoryIssuance)))
	})
}

// NeedsInventoryIssuanceNotNil applies the NotNil predicate on the "needs_inventory_issuance" field.
func NeedsInventoryIssuanceNotNil() predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldNeedsInventoryIssuance)))
	})
}

// IsRushOrderEQ applies the EQ predicate on the "is_rush_order" field.
func IsRushOrderEQ(v IsRushOrder) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsRushOrder), v))
	})
}

// IsRushOrderNEQ applies the NEQ predicate on the "is_rush_order" field.
func IsRushOrderNEQ(v IsRushOrder) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsRushOrder), v))
	})
}

// IsRushOrderIn applies the In predicate on the "is_rush_order" field.
func IsRushOrderIn(vs ...IsRushOrder) predicate.OrderHeader {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderHeader(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIsRushOrder), v...))
	})
}

// IsRushOrderNotIn applies the NotIn predicate on the "is_rush_order" field.
func IsRushOrderNotIn(vs ...IsRushOrder) predicate.OrderHeader {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderHeader(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIsRushOrder), v...))
	})
}

// IsRushOrderIsNil applies the IsNil predicate on the "is_rush_order" field.
func IsRushOrderIsNil() predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldIsRushOrder)))
	})
}

// IsRushOrderNotNil applies the NotNil predicate on the "is_rush_order" field.
func IsRushOrderNotNil() predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldIsRushOrder)))
	})
}

// InternalCodeEQ applies the EQ predicate on the "internal_code" field.
func InternalCodeEQ(v string) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInternalCode), v))
	})
}

// InternalCodeNEQ applies the NEQ predicate on the "internal_code" field.
func InternalCodeNEQ(v string) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldInternalCode), v))
	})
}

// InternalCodeIn applies the In predicate on the "internal_code" field.
func InternalCodeIn(vs ...string) predicate.OrderHeader {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderHeader(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldInternalCode), v...))
	})
}

// InternalCodeNotIn applies the NotIn predicate on the "internal_code" field.
func InternalCodeNotIn(vs ...string) predicate.OrderHeader {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderHeader(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldInternalCode), v...))
	})
}

// InternalCodeGT applies the GT predicate on the "internal_code" field.
func InternalCodeGT(v string) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldInternalCode), v))
	})
}

// InternalCodeGTE applies the GTE predicate on the "internal_code" field.
func InternalCodeGTE(v string) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldInternalCode), v))
	})
}

// InternalCodeLT applies the LT predicate on the "internal_code" field.
func InternalCodeLT(v string) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldInternalCode), v))
	})
}

// InternalCodeLTE applies the LTE predicate on the "internal_code" field.
func InternalCodeLTE(v string) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldInternalCode), v))
	})
}

// InternalCodeContains applies the Contains predicate on the "internal_code" field.
func InternalCodeContains(v string) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldInternalCode), v))
	})
}

// InternalCodeHasPrefix applies the HasPrefix predicate on the "internal_code" field.
func InternalCodeHasPrefix(v string) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldInternalCode), v))
	})
}

// InternalCodeHasSuffix applies the HasSuffix predicate on the "internal_code" field.
func InternalCodeHasSuffix(v string) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldInternalCode), v))
	})
}

// InternalCodeIsNil applies the IsNil predicate on the "internal_code" field.
func InternalCodeIsNil() predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldInternalCode)))
	})
}

// InternalCodeNotNil applies the NotNil predicate on the "internal_code" field.
func InternalCodeNotNil() predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldInternalCode)))
	})
}

// InternalCodeEqualFold applies the EqualFold predicate on the "internal_code" field.
func InternalCodeEqualFold(v string) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldInternalCode), v))
	})
}

// InternalCodeContainsFold applies the ContainsFold predicate on the "internal_code" field.
func InternalCodeContainsFold(v string) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldInternalCode), v))
	})
}

// RemainingSubTotalEQ applies the EQ predicate on the "remaining_sub_total" field.
func RemainingSubTotalEQ(v float64) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemainingSubTotal), v))
	})
}

// RemainingSubTotalNEQ applies the NEQ predicate on the "remaining_sub_total" field.
func RemainingSubTotalNEQ(v float64) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRemainingSubTotal), v))
	})
}

// RemainingSubTotalIn applies the In predicate on the "remaining_sub_total" field.
func RemainingSubTotalIn(vs ...float64) predicate.OrderHeader {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderHeader(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRemainingSubTotal), v...))
	})
}

// RemainingSubTotalNotIn applies the NotIn predicate on the "remaining_sub_total" field.
func RemainingSubTotalNotIn(vs ...float64) predicate.OrderHeader {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderHeader(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRemainingSubTotal), v...))
	})
}

// RemainingSubTotalGT applies the GT predicate on the "remaining_sub_total" field.
func RemainingSubTotalGT(v float64) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRemainingSubTotal), v))
	})
}

// RemainingSubTotalGTE applies the GTE predicate on the "remaining_sub_total" field.
func RemainingSubTotalGTE(v float64) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRemainingSubTotal), v))
	})
}

// RemainingSubTotalLT applies the LT predicate on the "remaining_sub_total" field.
func RemainingSubTotalLT(v float64) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRemainingSubTotal), v))
	})
}

// RemainingSubTotalLTE applies the LTE predicate on the "remaining_sub_total" field.
func RemainingSubTotalLTE(v float64) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRemainingSubTotal), v))
	})
}

// RemainingSubTotalIsNil applies the IsNil predicate on the "remaining_sub_total" field.
func RemainingSubTotalIsNil() predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRemainingSubTotal)))
	})
}

// RemainingSubTotalNotNil applies the NotNil predicate on the "remaining_sub_total" field.
func RemainingSubTotalNotNil() predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRemainingSubTotal)))
	})
}

// GrandTotalEQ applies the EQ predicate on the "grand_total" field.
func GrandTotalEQ(v float64) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGrandTotal), v))
	})
}

// GrandTotalNEQ applies the NEQ predicate on the "grand_total" field.
func GrandTotalNEQ(v float64) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGrandTotal), v))
	})
}

// GrandTotalIn applies the In predicate on the "grand_total" field.
func GrandTotalIn(vs ...float64) predicate.OrderHeader {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderHeader(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldGrandTotal), v...))
	})
}

// GrandTotalNotIn applies the NotIn predicate on the "grand_total" field.
func GrandTotalNotIn(vs ...float64) predicate.OrderHeader {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderHeader(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldGrandTotal), v...))
	})
}

// GrandTotalGT applies the GT predicate on the "grand_total" field.
func GrandTotalGT(v float64) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGrandTotal), v))
	})
}

// GrandTotalGTE applies the GTE predicate on the "grand_total" field.
func GrandTotalGTE(v float64) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGrandTotal), v))
	})
}

// GrandTotalLT applies the LT predicate on the "grand_total" field.
func GrandTotalLT(v float64) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGrandTotal), v))
	})
}

// GrandTotalLTE applies the LTE predicate on the "grand_total" field.
func GrandTotalLTE(v float64) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGrandTotal), v))
	})
}

// GrandTotalIsNil applies the IsNil predicate on the "grand_total" field.
func GrandTotalIsNil() predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldGrandTotal)))
	})
}

// GrandTotalNotNil applies the NotNil predicate on the "grand_total" field.
func GrandTotalNotNil() predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldGrandTotal)))
	})
}

// IsViewedEQ applies the EQ predicate on the "is_viewed" field.
func IsViewedEQ(v IsViewed) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsViewed), v))
	})
}

// IsViewedNEQ applies the NEQ predicate on the "is_viewed" field.
func IsViewedNEQ(v IsViewed) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsViewed), v))
	})
}

// IsViewedIn applies the In predicate on the "is_viewed" field.
func IsViewedIn(vs ...IsViewed) predicate.OrderHeader {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderHeader(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIsViewed), v...))
	})
}

// IsViewedNotIn applies the NotIn predicate on the "is_viewed" field.
func IsViewedNotIn(vs ...IsViewed) predicate.OrderHeader {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderHeader(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIsViewed), v...))
	})
}

// IsViewedIsNil applies the IsNil predicate on the "is_viewed" field.
func IsViewedIsNil() predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldIsViewed)))
	})
}

// IsViewedNotNil applies the NotNil predicate on the "is_viewed" field.
func IsViewedNotNil() predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldIsViewed)))
	})
}

// InvoicePerShipmentEQ applies the EQ predicate on the "invoice_per_shipment" field.
func InvoicePerShipmentEQ(v InvoicePerShipment) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInvoicePerShipment), v))
	})
}

// InvoicePerShipmentNEQ applies the NEQ predicate on the "invoice_per_shipment" field.
func InvoicePerShipmentNEQ(v InvoicePerShipment) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldInvoicePerShipment), v))
	})
}

// InvoicePerShipmentIn applies the In predicate on the "invoice_per_shipment" field.
func InvoicePerShipmentIn(vs ...InvoicePerShipment) predicate.OrderHeader {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderHeader(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldInvoicePerShipment), v...))
	})
}

// InvoicePerShipmentNotIn applies the NotIn predicate on the "invoice_per_shipment" field.
func InvoicePerShipmentNotIn(vs ...InvoicePerShipment) predicate.OrderHeader {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderHeader(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldInvoicePerShipment), v...))
	})
}

// InvoicePerShipmentIsNil applies the IsNil predicate on the "invoice_per_shipment" field.
func InvoicePerShipmentIsNil() predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldInvoicePerShipment)))
	})
}

// InvoicePerShipmentNotNil applies the NotNil predicate on the "invoice_per_shipment" field.
func InvoicePerShipmentNotNil() predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldInvoicePerShipment)))
	})
}

// HasSalesChannelEnumeration applies the HasEdge predicate on the "sales_channel_enumeration" edge.
func HasSalesChannelEnumeration() predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SalesChannelEnumerationTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SalesChannelEnumerationTable, SalesChannelEnumerationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSalesChannelEnumerationWith applies the HasEdge predicate on the "sales_channel_enumeration" edge with a given conditions (other predicates).
func HasSalesChannelEnumerationWith(preds ...predicate.Enumeration) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SalesChannelEnumerationInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SalesChannelEnumerationTable, SalesChannelEnumerationColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProductStore applies the HasEdge predicate on the "product_store" edge.
func HasProductStore() predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProductStoreTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProductStoreTable, ProductStoreColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProductStoreWith applies the HasEdge predicate on the "product_store" edge with a given conditions (other predicates).
func HasProductStoreWith(preds ...predicate.ProductStore) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProductStoreInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProductStoreTable, ProductStoreColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasStatusItem applies the HasEdge predicate on the "status_item" edge.
func HasStatusItem() predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StatusItemTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, StatusItemTable, StatusItemColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStatusItemWith applies the HasEdge predicate on the "status_item" edge with a given conditions (other predicates).
func HasStatusItemWith(preds ...predicate.StatusItem) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StatusItemInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, StatusItemTable, StatusItemColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSyncStatusItem applies the HasEdge predicate on the "sync_status_item" edge.
func HasSyncStatusItem() predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SyncStatusItemTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SyncStatusItemTable, SyncStatusItemColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSyncStatusItemWith applies the HasEdge predicate on the "sync_status_item" edge with a given conditions (other predicates).
func HasSyncStatusItemWith(preds ...predicate.StatusItem) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SyncStatusItemInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SyncStatusItemTable, SyncStatusItemColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrderAdjustments applies the HasEdge predicate on the "order_adjustments" edge.
func HasOrderAdjustments() predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderAdjustmentsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrderAdjustmentsTable, OrderAdjustmentsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderAdjustmentsWith applies the HasEdge predicate on the "order_adjustments" edge with a given conditions (other predicates).
func HasOrderAdjustmentsWith(preds ...predicate.OrderAdjustment) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderAdjustmentsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrderAdjustmentsTable, OrderAdjustmentsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrderContactMeches applies the HasEdge predicate on the "order_contact_meches" edge.
func HasOrderContactMeches() predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderContactMechesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrderContactMechesTable, OrderContactMechesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderContactMechesWith applies the HasEdge predicate on the "order_contact_meches" edge with a given conditions (other predicates).
func HasOrderContactMechesWith(preds ...predicate.OrderContactMech) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderContactMechesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrderContactMechesTable, OrderContactMechesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrderItems applies the HasEdge predicate on the "order_items" edge.
func HasOrderItems() predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderItemsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrderItemsTable, OrderItemsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderItemsWith applies the HasEdge predicate on the "order_items" edge with a given conditions (other predicates).
func HasOrderItemsWith(preds ...predicate.OrderItem) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderItemsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrderItemsTable, OrderItemsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrderItemShipGroups applies the HasEdge predicate on the "order_item_ship_groups" edge.
func HasOrderItemShipGroups() predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderItemShipGroupsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrderItemShipGroupsTable, OrderItemShipGroupsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderItemShipGroupsWith applies the HasEdge predicate on the "order_item_ship_groups" edge with a given conditions (other predicates).
func HasOrderItemShipGroupsWith(preds ...predicate.OrderItemShipGroup) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderItemShipGroupsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrderItemShipGroupsTable, OrderItemShipGroupsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrderItemShipGroupAssocs applies the HasEdge predicate on the "order_item_ship_group_assocs" edge.
func HasOrderItemShipGroupAssocs() predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderItemShipGroupAssocsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrderItemShipGroupAssocsTable, OrderItemShipGroupAssocsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderItemShipGroupAssocsWith applies the HasEdge predicate on the "order_item_ship_group_assocs" edge with a given conditions (other predicates).
func HasOrderItemShipGroupAssocsWith(preds ...predicate.OrderItemShipGroupAssoc) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderItemShipGroupAssocsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrderItemShipGroupAssocsTable, OrderItemShipGroupAssocsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrderItemShipGrpInvRes applies the HasEdge predicate on the "order_item_ship_grp_inv_res" edge.
func HasOrderItemShipGrpInvRes() predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderItemShipGrpInvResTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrderItemShipGrpInvResTable, OrderItemShipGrpInvResColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderItemShipGrpInvResWith applies the HasEdge predicate on the "order_item_ship_grp_inv_res" edge with a given conditions (other predicates).
func HasOrderItemShipGrpInvResWith(preds ...predicate.OrderItemShipGrpInvRes) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderItemShipGrpInvResInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrderItemShipGrpInvResTable, OrderItemShipGrpInvResColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrderPaymentPreferences applies the HasEdge predicate on the "order_payment_preferences" edge.
func HasOrderPaymentPreferences() predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderPaymentPreferencesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrderPaymentPreferencesTable, OrderPaymentPreferencesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderPaymentPreferencesWith applies the HasEdge predicate on the "order_payment_preferences" edge with a given conditions (other predicates).
func HasOrderPaymentPreferencesWith(preds ...predicate.OrderPaymentPreference) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderPaymentPreferencesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrderPaymentPreferencesTable, OrderPaymentPreferencesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrderRoles applies the HasEdge predicate on the "order_roles" edge.
func HasOrderRoles() predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderRolesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrderRolesTable, OrderRolesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderRolesWith applies the HasEdge predicate on the "order_roles" edge with a given conditions (other predicates).
func HasOrderRolesWith(preds ...predicate.OrderRole) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderRolesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrderRolesTable, OrderRolesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrderStatuses applies the HasEdge predicate on the "order_statuses" edge.
func HasOrderStatuses() predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderStatusesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrderStatusesTable, OrderStatusesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderStatusesWith applies the HasEdge predicate on the "order_statuses" edge with a given conditions (other predicates).
func HasOrderStatusesWith(preds ...predicate.OrderStatus) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderStatusesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrderStatusesTable, OrderStatusesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.OrderHeader) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.OrderHeader) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.OrderHeader) predicate.OrderHeader {
	return predicate.OrderHeader(func(s *sql.Selector) {
		p(s.Not())
	})
}
