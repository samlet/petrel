// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/orderadjustment"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/orderheader"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/orderitem"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/orderitemshipgroupassoc"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/orderitemshipgrpinvres"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/orderpaymentpreference"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/orderstatus"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/product"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/statusitem"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/statusvalidchange"
)

// OrderItemCreate is the builder for creating a OrderItem entity.
type OrderItemCreate struct {
	config
	mutation *OrderItemMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (oic *OrderItemCreate) SetCreateTime(t time.Time) *OrderItemCreate {
	oic.mutation.SetCreateTime(t)
	return oic
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (oic *OrderItemCreate) SetNillableCreateTime(t *time.Time) *OrderItemCreate {
	if t != nil {
		oic.SetCreateTime(*t)
	}
	return oic
}

// SetUpdateTime sets the "update_time" field.
func (oic *OrderItemCreate) SetUpdateTime(t time.Time) *OrderItemCreate {
	oic.mutation.SetUpdateTime(t)
	return oic
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (oic *OrderItemCreate) SetNillableUpdateTime(t *time.Time) *OrderItemCreate {
	if t != nil {
		oic.SetUpdateTime(*t)
	}
	return oic
}

// SetStringRef sets the "string_ref" field.
func (oic *OrderItemCreate) SetStringRef(s string) *OrderItemCreate {
	oic.mutation.SetStringRef(s)
	return oic
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (oic *OrderItemCreate) SetNillableStringRef(s *string) *OrderItemCreate {
	if s != nil {
		oic.SetStringRef(*s)
	}
	return oic
}

// SetOrderItemSeqID sets the "order_item_seq_id" field.
func (oic *OrderItemCreate) SetOrderItemSeqID(i int) *OrderItemCreate {
	oic.mutation.SetOrderItemSeqID(i)
	return oic
}

// SetExternalID sets the "external_id" field.
func (oic *OrderItemCreate) SetExternalID(i int) *OrderItemCreate {
	oic.mutation.SetExternalID(i)
	return oic
}

// SetNillableExternalID sets the "external_id" field if the given value is not nil.
func (oic *OrderItemCreate) SetNillableExternalID(i *int) *OrderItemCreate {
	if i != nil {
		oic.SetExternalID(*i)
	}
	return oic
}

// SetOrderItemTypeID sets the "order_item_type_id" field.
func (oic *OrderItemCreate) SetOrderItemTypeID(i int) *OrderItemCreate {
	oic.mutation.SetOrderItemTypeID(i)
	return oic
}

// SetNillableOrderItemTypeID sets the "order_item_type_id" field if the given value is not nil.
func (oic *OrderItemCreate) SetNillableOrderItemTypeID(i *int) *OrderItemCreate {
	if i != nil {
		oic.SetOrderItemTypeID(*i)
	}
	return oic
}

// SetOrderItemGroupSeqID sets the "order_item_group_seq_id" field.
func (oic *OrderItemCreate) SetOrderItemGroupSeqID(i int) *OrderItemCreate {
	oic.mutation.SetOrderItemGroupSeqID(i)
	return oic
}

// SetNillableOrderItemGroupSeqID sets the "order_item_group_seq_id" field if the given value is not nil.
func (oic *OrderItemCreate) SetNillableOrderItemGroupSeqID(i *int) *OrderItemCreate {
	if i != nil {
		oic.SetOrderItemGroupSeqID(*i)
	}
	return oic
}

// SetIsItemGroupPrimary sets the "is_item_group_primary" field.
func (oic *OrderItemCreate) SetIsItemGroupPrimary(oigp orderitem.IsItemGroupPrimary) *OrderItemCreate {
	oic.mutation.SetIsItemGroupPrimary(oigp)
	return oic
}

// SetNillableIsItemGroupPrimary sets the "is_item_group_primary" field if the given value is not nil.
func (oic *OrderItemCreate) SetNillableIsItemGroupPrimary(oigp *orderitem.IsItemGroupPrimary) *OrderItemCreate {
	if oigp != nil {
		oic.SetIsItemGroupPrimary(*oigp)
	}
	return oic
}

// SetFromInventoryItemID sets the "from_inventory_item_id" field.
func (oic *OrderItemCreate) SetFromInventoryItemID(i int) *OrderItemCreate {
	oic.mutation.SetFromInventoryItemID(i)
	return oic
}

// SetNillableFromInventoryItemID sets the "from_inventory_item_id" field if the given value is not nil.
func (oic *OrderItemCreate) SetNillableFromInventoryItemID(i *int) *OrderItemCreate {
	if i != nil {
		oic.SetFromInventoryItemID(*i)
	}
	return oic
}

// SetBudgetID sets the "budget_id" field.
func (oic *OrderItemCreate) SetBudgetID(i int) *OrderItemCreate {
	oic.mutation.SetBudgetID(i)
	return oic
}

// SetNillableBudgetID sets the "budget_id" field if the given value is not nil.
func (oic *OrderItemCreate) SetNillableBudgetID(i *int) *OrderItemCreate {
	if i != nil {
		oic.SetBudgetID(*i)
	}
	return oic
}

// SetBudgetItemSeqID sets the "budget_item_seq_id" field.
func (oic *OrderItemCreate) SetBudgetItemSeqID(i int) *OrderItemCreate {
	oic.mutation.SetBudgetItemSeqID(i)
	return oic
}

// SetNillableBudgetItemSeqID sets the "budget_item_seq_id" field if the given value is not nil.
func (oic *OrderItemCreate) SetNillableBudgetItemSeqID(i *int) *OrderItemCreate {
	if i != nil {
		oic.SetBudgetItemSeqID(*i)
	}
	return oic
}

// SetSupplierProductID sets the "supplier_product_id" field.
func (oic *OrderItemCreate) SetSupplierProductID(s string) *OrderItemCreate {
	oic.mutation.SetSupplierProductID(s)
	return oic
}

// SetNillableSupplierProductID sets the "supplier_product_id" field if the given value is not nil.
func (oic *OrderItemCreate) SetNillableSupplierProductID(s *string) *OrderItemCreate {
	if s != nil {
		oic.SetSupplierProductID(*s)
	}
	return oic
}

// SetProductFeatureID sets the "product_feature_id" field.
func (oic *OrderItemCreate) SetProductFeatureID(i int) *OrderItemCreate {
	oic.mutation.SetProductFeatureID(i)
	return oic
}

// SetNillableProductFeatureID sets the "product_feature_id" field if the given value is not nil.
func (oic *OrderItemCreate) SetNillableProductFeatureID(i *int) *OrderItemCreate {
	if i != nil {
		oic.SetProductFeatureID(*i)
	}
	return oic
}

// SetProdCatalogID sets the "prod_catalog_id" field.
func (oic *OrderItemCreate) SetProdCatalogID(i int) *OrderItemCreate {
	oic.mutation.SetProdCatalogID(i)
	return oic
}

// SetNillableProdCatalogID sets the "prod_catalog_id" field if the given value is not nil.
func (oic *OrderItemCreate) SetNillableProdCatalogID(i *int) *OrderItemCreate {
	if i != nil {
		oic.SetProdCatalogID(*i)
	}
	return oic
}

// SetProductCategoryID sets the "product_category_id" field.
func (oic *OrderItemCreate) SetProductCategoryID(i int) *OrderItemCreate {
	oic.mutation.SetProductCategoryID(i)
	return oic
}

// SetNillableProductCategoryID sets the "product_category_id" field if the given value is not nil.
func (oic *OrderItemCreate) SetNillableProductCategoryID(i *int) *OrderItemCreate {
	if i != nil {
		oic.SetProductCategoryID(*i)
	}
	return oic
}

// SetIsPromo sets the "is_promo" field.
func (oic *OrderItemCreate) SetIsPromo(op orderitem.IsPromo) *OrderItemCreate {
	oic.mutation.SetIsPromo(op)
	return oic
}

// SetNillableIsPromo sets the "is_promo" field if the given value is not nil.
func (oic *OrderItemCreate) SetNillableIsPromo(op *orderitem.IsPromo) *OrderItemCreate {
	if op != nil {
		oic.SetIsPromo(*op)
	}
	return oic
}

// SetQuoteID sets the "quote_id" field.
func (oic *OrderItemCreate) SetQuoteID(i int) *OrderItemCreate {
	oic.mutation.SetQuoteID(i)
	return oic
}

// SetNillableQuoteID sets the "quote_id" field if the given value is not nil.
func (oic *OrderItemCreate) SetNillableQuoteID(i *int) *OrderItemCreate {
	if i != nil {
		oic.SetQuoteID(*i)
	}
	return oic
}

// SetQuoteItemSeqID sets the "quote_item_seq_id" field.
func (oic *OrderItemCreate) SetQuoteItemSeqID(i int) *OrderItemCreate {
	oic.mutation.SetQuoteItemSeqID(i)
	return oic
}

// SetNillableQuoteItemSeqID sets the "quote_item_seq_id" field if the given value is not nil.
func (oic *OrderItemCreate) SetNillableQuoteItemSeqID(i *int) *OrderItemCreate {
	if i != nil {
		oic.SetQuoteItemSeqID(*i)
	}
	return oic
}

// SetShoppingListID sets the "shopping_list_id" field.
func (oic *OrderItemCreate) SetShoppingListID(i int) *OrderItemCreate {
	oic.mutation.SetShoppingListID(i)
	return oic
}

// SetNillableShoppingListID sets the "shopping_list_id" field if the given value is not nil.
func (oic *OrderItemCreate) SetNillableShoppingListID(i *int) *OrderItemCreate {
	if i != nil {
		oic.SetShoppingListID(*i)
	}
	return oic
}

// SetShoppingListItemSeqID sets the "shopping_list_item_seq_id" field.
func (oic *OrderItemCreate) SetShoppingListItemSeqID(i int) *OrderItemCreate {
	oic.mutation.SetShoppingListItemSeqID(i)
	return oic
}

// SetNillableShoppingListItemSeqID sets the "shopping_list_item_seq_id" field if the given value is not nil.
func (oic *OrderItemCreate) SetNillableShoppingListItemSeqID(i *int) *OrderItemCreate {
	if i != nil {
		oic.SetShoppingListItemSeqID(*i)
	}
	return oic
}

// SetSubscriptionID sets the "subscription_id" field.
func (oic *OrderItemCreate) SetSubscriptionID(i int) *OrderItemCreate {
	oic.mutation.SetSubscriptionID(i)
	return oic
}

// SetNillableSubscriptionID sets the "subscription_id" field if the given value is not nil.
func (oic *OrderItemCreate) SetNillableSubscriptionID(i *int) *OrderItemCreate {
	if i != nil {
		oic.SetSubscriptionID(*i)
	}
	return oic
}

// SetDeploymentID sets the "deployment_id" field.
func (oic *OrderItemCreate) SetDeploymentID(i int) *OrderItemCreate {
	oic.mutation.SetDeploymentID(i)
	return oic
}

// SetNillableDeploymentID sets the "deployment_id" field if the given value is not nil.
func (oic *OrderItemCreate) SetNillableDeploymentID(i *int) *OrderItemCreate {
	if i != nil {
		oic.SetDeploymentID(*i)
	}
	return oic
}

// SetQuantity sets the "quantity" field.
func (oic *OrderItemCreate) SetQuantity(f float64) *OrderItemCreate {
	oic.mutation.SetQuantity(f)
	return oic
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (oic *OrderItemCreate) SetNillableQuantity(f *float64) *OrderItemCreate {
	if f != nil {
		oic.SetQuantity(*f)
	}
	return oic
}

// SetCancelQuantity sets the "cancel_quantity" field.
func (oic *OrderItemCreate) SetCancelQuantity(f float64) *OrderItemCreate {
	oic.mutation.SetCancelQuantity(f)
	return oic
}

// SetNillableCancelQuantity sets the "cancel_quantity" field if the given value is not nil.
func (oic *OrderItemCreate) SetNillableCancelQuantity(f *float64) *OrderItemCreate {
	if f != nil {
		oic.SetCancelQuantity(*f)
	}
	return oic
}

// SetSelectedAmount sets the "selected_amount" field.
func (oic *OrderItemCreate) SetSelectedAmount(f float64) *OrderItemCreate {
	oic.mutation.SetSelectedAmount(f)
	return oic
}

// SetNillableSelectedAmount sets the "selected_amount" field if the given value is not nil.
func (oic *OrderItemCreate) SetNillableSelectedAmount(f *float64) *OrderItemCreate {
	if f != nil {
		oic.SetSelectedAmount(*f)
	}
	return oic
}

// SetUnitPrice sets the "unit_price" field.
func (oic *OrderItemCreate) SetUnitPrice(f float64) *OrderItemCreate {
	oic.mutation.SetUnitPrice(f)
	return oic
}

// SetNillableUnitPrice sets the "unit_price" field if the given value is not nil.
func (oic *OrderItemCreate) SetNillableUnitPrice(f *float64) *OrderItemCreate {
	if f != nil {
		oic.SetUnitPrice(*f)
	}
	return oic
}

// SetUnitListPrice sets the "unit_list_price" field.
func (oic *OrderItemCreate) SetUnitListPrice(f float64) *OrderItemCreate {
	oic.mutation.SetUnitListPrice(f)
	return oic
}

// SetNillableUnitListPrice sets the "unit_list_price" field if the given value is not nil.
func (oic *OrderItemCreate) SetNillableUnitListPrice(f *float64) *OrderItemCreate {
	if f != nil {
		oic.SetUnitListPrice(*f)
	}
	return oic
}

// SetUnitAverageCost sets the "unit_average_cost" field.
func (oic *OrderItemCreate) SetUnitAverageCost(f float64) *OrderItemCreate {
	oic.mutation.SetUnitAverageCost(f)
	return oic
}

// SetNillableUnitAverageCost sets the "unit_average_cost" field if the given value is not nil.
func (oic *OrderItemCreate) SetNillableUnitAverageCost(f *float64) *OrderItemCreate {
	if f != nil {
		oic.SetUnitAverageCost(*f)
	}
	return oic
}

// SetUnitRecurringPrice sets the "unit_recurring_price" field.
func (oic *OrderItemCreate) SetUnitRecurringPrice(f float64) *OrderItemCreate {
	oic.mutation.SetUnitRecurringPrice(f)
	return oic
}

// SetNillableUnitRecurringPrice sets the "unit_recurring_price" field if the given value is not nil.
func (oic *OrderItemCreate) SetNillableUnitRecurringPrice(f *float64) *OrderItemCreate {
	if f != nil {
		oic.SetUnitRecurringPrice(*f)
	}
	return oic
}

// SetIsModifiedPrice sets the "is_modified_price" field.
func (oic *OrderItemCreate) SetIsModifiedPrice(omp orderitem.IsModifiedPrice) *OrderItemCreate {
	oic.mutation.SetIsModifiedPrice(omp)
	return oic
}

// SetNillableIsModifiedPrice sets the "is_modified_price" field if the given value is not nil.
func (oic *OrderItemCreate) SetNillableIsModifiedPrice(omp *orderitem.IsModifiedPrice) *OrderItemCreate {
	if omp != nil {
		oic.SetIsModifiedPrice(*omp)
	}
	return oic
}

// SetRecurringFreqUomID sets the "recurring_freq_uom_id" field.
func (oic *OrderItemCreate) SetRecurringFreqUomID(i int) *OrderItemCreate {
	oic.mutation.SetRecurringFreqUomID(i)
	return oic
}

// SetNillableRecurringFreqUomID sets the "recurring_freq_uom_id" field if the given value is not nil.
func (oic *OrderItemCreate) SetNillableRecurringFreqUomID(i *int) *OrderItemCreate {
	if i != nil {
		oic.SetRecurringFreqUomID(*i)
	}
	return oic
}

// SetItemDescription sets the "item_description" field.
func (oic *OrderItemCreate) SetItemDescription(s string) *OrderItemCreate {
	oic.mutation.SetItemDescription(s)
	return oic
}

// SetNillableItemDescription sets the "item_description" field if the given value is not nil.
func (oic *OrderItemCreate) SetNillableItemDescription(s *string) *OrderItemCreate {
	if s != nil {
		oic.SetItemDescription(*s)
	}
	return oic
}

// SetComments sets the "comments" field.
func (oic *OrderItemCreate) SetComments(s string) *OrderItemCreate {
	oic.mutation.SetComments(s)
	return oic
}

// SetNillableComments sets the "comments" field if the given value is not nil.
func (oic *OrderItemCreate) SetNillableComments(s *string) *OrderItemCreate {
	if s != nil {
		oic.SetComments(*s)
	}
	return oic
}

// SetCorrespondingPoID sets the "corresponding_po_id" field.
func (oic *OrderItemCreate) SetCorrespondingPoID(i int) *OrderItemCreate {
	oic.mutation.SetCorrespondingPoID(i)
	return oic
}

// SetNillableCorrespondingPoID sets the "corresponding_po_id" field if the given value is not nil.
func (oic *OrderItemCreate) SetNillableCorrespondingPoID(i *int) *OrderItemCreate {
	if i != nil {
		oic.SetCorrespondingPoID(*i)
	}
	return oic
}

// SetEstimatedShipDate sets the "estimated_ship_date" field.
func (oic *OrderItemCreate) SetEstimatedShipDate(t time.Time) *OrderItemCreate {
	oic.mutation.SetEstimatedShipDate(t)
	return oic
}

// SetNillableEstimatedShipDate sets the "estimated_ship_date" field if the given value is not nil.
func (oic *OrderItemCreate) SetNillableEstimatedShipDate(t *time.Time) *OrderItemCreate {
	if t != nil {
		oic.SetEstimatedShipDate(*t)
	}
	return oic
}

// SetEstimatedDeliveryDate sets the "estimated_delivery_date" field.
func (oic *OrderItemCreate) SetEstimatedDeliveryDate(t time.Time) *OrderItemCreate {
	oic.mutation.SetEstimatedDeliveryDate(t)
	return oic
}

// SetNillableEstimatedDeliveryDate sets the "estimated_delivery_date" field if the given value is not nil.
func (oic *OrderItemCreate) SetNillableEstimatedDeliveryDate(t *time.Time) *OrderItemCreate {
	if t != nil {
		oic.SetEstimatedDeliveryDate(*t)
	}
	return oic
}

// SetAutoCancelDate sets the "auto_cancel_date" field.
func (oic *OrderItemCreate) SetAutoCancelDate(t time.Time) *OrderItemCreate {
	oic.mutation.SetAutoCancelDate(t)
	return oic
}

// SetNillableAutoCancelDate sets the "auto_cancel_date" field if the given value is not nil.
func (oic *OrderItemCreate) SetNillableAutoCancelDate(t *time.Time) *OrderItemCreate {
	if t != nil {
		oic.SetAutoCancelDate(*t)
	}
	return oic
}

// SetDontCancelSetDate sets the "dont_cancel_set_date" field.
func (oic *OrderItemCreate) SetDontCancelSetDate(t time.Time) *OrderItemCreate {
	oic.mutation.SetDontCancelSetDate(t)
	return oic
}

// SetNillableDontCancelSetDate sets the "dont_cancel_set_date" field if the given value is not nil.
func (oic *OrderItemCreate) SetNillableDontCancelSetDate(t *time.Time) *OrderItemCreate {
	if t != nil {
		oic.SetDontCancelSetDate(*t)
	}
	return oic
}

// SetDontCancelSetUserLogin sets the "dont_cancel_set_user_login" field.
func (oic *OrderItemCreate) SetDontCancelSetUserLogin(s string) *OrderItemCreate {
	oic.mutation.SetDontCancelSetUserLogin(s)
	return oic
}

// SetNillableDontCancelSetUserLogin sets the "dont_cancel_set_user_login" field if the given value is not nil.
func (oic *OrderItemCreate) SetNillableDontCancelSetUserLogin(s *string) *OrderItemCreate {
	if s != nil {
		oic.SetDontCancelSetUserLogin(*s)
	}
	return oic
}

// SetShipBeforeDate sets the "ship_before_date" field.
func (oic *OrderItemCreate) SetShipBeforeDate(t time.Time) *OrderItemCreate {
	oic.mutation.SetShipBeforeDate(t)
	return oic
}

// SetNillableShipBeforeDate sets the "ship_before_date" field if the given value is not nil.
func (oic *OrderItemCreate) SetNillableShipBeforeDate(t *time.Time) *OrderItemCreate {
	if t != nil {
		oic.SetShipBeforeDate(*t)
	}
	return oic
}

// SetShipAfterDate sets the "ship_after_date" field.
func (oic *OrderItemCreate) SetShipAfterDate(t time.Time) *OrderItemCreate {
	oic.mutation.SetShipAfterDate(t)
	return oic
}

// SetNillableShipAfterDate sets the "ship_after_date" field if the given value is not nil.
func (oic *OrderItemCreate) SetNillableShipAfterDate(t *time.Time) *OrderItemCreate {
	if t != nil {
		oic.SetShipAfterDate(*t)
	}
	return oic
}

// SetReserveAfterDate sets the "reserve_after_date" field.
func (oic *OrderItemCreate) SetReserveAfterDate(t time.Time) *OrderItemCreate {
	oic.mutation.SetReserveAfterDate(t)
	return oic
}

// SetNillableReserveAfterDate sets the "reserve_after_date" field if the given value is not nil.
func (oic *OrderItemCreate) SetNillableReserveAfterDate(t *time.Time) *OrderItemCreate {
	if t != nil {
		oic.SetReserveAfterDate(*t)
	}
	return oic
}

// SetCancelBackOrderDate sets the "cancel_back_order_date" field.
func (oic *OrderItemCreate) SetCancelBackOrderDate(t time.Time) *OrderItemCreate {
	oic.mutation.SetCancelBackOrderDate(t)
	return oic
}

// SetNillableCancelBackOrderDate sets the "cancel_back_order_date" field if the given value is not nil.
func (oic *OrderItemCreate) SetNillableCancelBackOrderDate(t *time.Time) *OrderItemCreate {
	if t != nil {
		oic.SetCancelBackOrderDate(*t)
	}
	return oic
}

// SetOverrideGlAccountID sets the "override_gl_account_id" field.
func (oic *OrderItemCreate) SetOverrideGlAccountID(i int) *OrderItemCreate {
	oic.mutation.SetOverrideGlAccountID(i)
	return oic
}

// SetNillableOverrideGlAccountID sets the "override_gl_account_id" field if the given value is not nil.
func (oic *OrderItemCreate) SetNillableOverrideGlAccountID(i *int) *OrderItemCreate {
	if i != nil {
		oic.SetOverrideGlAccountID(*i)
	}
	return oic
}

// SetSalesOpportunityID sets the "sales_opportunity_id" field.
func (oic *OrderItemCreate) SetSalesOpportunityID(i int) *OrderItemCreate {
	oic.mutation.SetSalesOpportunityID(i)
	return oic
}

// SetNillableSalesOpportunityID sets the "sales_opportunity_id" field if the given value is not nil.
func (oic *OrderItemCreate) SetNillableSalesOpportunityID(i *int) *OrderItemCreate {
	if i != nil {
		oic.SetSalesOpportunityID(*i)
	}
	return oic
}

// SetChangeByUserLoginID sets the "change_by_user_login_id" field.
func (oic *OrderItemCreate) SetChangeByUserLoginID(s string) *OrderItemCreate {
	oic.mutation.SetChangeByUserLoginID(s)
	return oic
}

// SetNillableChangeByUserLoginID sets the "change_by_user_login_id" field if the given value is not nil.
func (oic *OrderItemCreate) SetNillableChangeByUserLoginID(s *string) *OrderItemCreate {
	if s != nil {
		oic.SetChangeByUserLoginID(*s)
	}
	return oic
}

// SetOrderHeaderID sets the "order_header" edge to the OrderHeader entity by ID.
func (oic *OrderItemCreate) SetOrderHeaderID(id int) *OrderItemCreate {
	oic.mutation.SetOrderHeaderID(id)
	return oic
}

// SetNillableOrderHeaderID sets the "order_header" edge to the OrderHeader entity by ID if the given value is not nil.
func (oic *OrderItemCreate) SetNillableOrderHeaderID(id *int) *OrderItemCreate {
	if id != nil {
		oic = oic.SetOrderHeaderID(*id)
	}
	return oic
}

// SetOrderHeader sets the "order_header" edge to the OrderHeader entity.
func (oic *OrderItemCreate) SetOrderHeader(o *OrderHeader) *OrderItemCreate {
	return oic.SetOrderHeaderID(o.ID)
}

// SetProductID sets the "product" edge to the Product entity by ID.
func (oic *OrderItemCreate) SetProductID(id int) *OrderItemCreate {
	oic.mutation.SetProductID(id)
	return oic
}

// SetNillableProductID sets the "product" edge to the Product entity by ID if the given value is not nil.
func (oic *OrderItemCreate) SetNillableProductID(id *int) *OrderItemCreate {
	if id != nil {
		oic = oic.SetProductID(*id)
	}
	return oic
}

// SetProduct sets the "product" edge to the Product entity.
func (oic *OrderItemCreate) SetProduct(p *Product) *OrderItemCreate {
	return oic.SetProductID(p.ID)
}

// SetStatusItemID sets the "status_item" edge to the StatusItem entity by ID.
func (oic *OrderItemCreate) SetStatusItemID(id int) *OrderItemCreate {
	oic.mutation.SetStatusItemID(id)
	return oic
}

// SetNillableStatusItemID sets the "status_item" edge to the StatusItem entity by ID if the given value is not nil.
func (oic *OrderItemCreate) SetNillableStatusItemID(id *int) *OrderItemCreate {
	if id != nil {
		oic = oic.SetStatusItemID(*id)
	}
	return oic
}

// SetStatusItem sets the "status_item" edge to the StatusItem entity.
func (oic *OrderItemCreate) SetStatusItem(s *StatusItem) *OrderItemCreate {
	return oic.SetStatusItemID(s.ID)
}

// AddStatusValidChangeIDs adds the "status_valid_changes" edge to the StatusValidChange entity by IDs.
func (oic *OrderItemCreate) AddStatusValidChangeIDs(ids ...int) *OrderItemCreate {
	oic.mutation.AddStatusValidChangeIDs(ids...)
	return oic
}

// AddStatusValidChanges adds the "status_valid_changes" edges to the StatusValidChange entity.
func (oic *OrderItemCreate) AddStatusValidChanges(s ...*StatusValidChange) *OrderItemCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return oic.AddStatusValidChangeIDs(ids...)
}

// SetSyncStatusItemID sets the "sync_status_item" edge to the StatusItem entity by ID.
func (oic *OrderItemCreate) SetSyncStatusItemID(id int) *OrderItemCreate {
	oic.mutation.SetSyncStatusItemID(id)
	return oic
}

// SetNillableSyncStatusItemID sets the "sync_status_item" edge to the StatusItem entity by ID if the given value is not nil.
func (oic *OrderItemCreate) SetNillableSyncStatusItemID(id *int) *OrderItemCreate {
	if id != nil {
		oic = oic.SetSyncStatusItemID(*id)
	}
	return oic
}

// SetSyncStatusItem sets the "sync_status_item" edge to the StatusItem entity.
func (oic *OrderItemCreate) SetSyncStatusItem(s *StatusItem) *OrderItemCreate {
	return oic.SetSyncStatusItemID(s.ID)
}

// AddOrderAdjustmentIDs adds the "order_adjustments" edge to the OrderAdjustment entity by IDs.
func (oic *OrderItemCreate) AddOrderAdjustmentIDs(ids ...int) *OrderItemCreate {
	oic.mutation.AddOrderAdjustmentIDs(ids...)
	return oic
}

// AddOrderAdjustments adds the "order_adjustments" edges to the OrderAdjustment entity.
func (oic *OrderItemCreate) AddOrderAdjustments(o ...*OrderAdjustment) *OrderItemCreate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oic.AddOrderAdjustmentIDs(ids...)
}

// AddOrderItemShipGroupAssocIDs adds the "order_item_ship_group_assocs" edge to the OrderItemShipGroupAssoc entity by IDs.
func (oic *OrderItemCreate) AddOrderItemShipGroupAssocIDs(ids ...int) *OrderItemCreate {
	oic.mutation.AddOrderItemShipGroupAssocIDs(ids...)
	return oic
}

// AddOrderItemShipGroupAssocs adds the "order_item_ship_group_assocs" edges to the OrderItemShipGroupAssoc entity.
func (oic *OrderItemCreate) AddOrderItemShipGroupAssocs(o ...*OrderItemShipGroupAssoc) *OrderItemCreate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oic.AddOrderItemShipGroupAssocIDs(ids...)
}

// AddOrderItemShipGrpInvReIDs adds the "order_item_ship_grp_inv_res" edge to the OrderItemShipGrpInvRes entity by IDs.
func (oic *OrderItemCreate) AddOrderItemShipGrpInvReIDs(ids ...int) *OrderItemCreate {
	oic.mutation.AddOrderItemShipGrpInvReIDs(ids...)
	return oic
}

// AddOrderItemShipGrpInvRes adds the "order_item_ship_grp_inv_res" edges to the OrderItemShipGrpInvRes entity.
func (oic *OrderItemCreate) AddOrderItemShipGrpInvRes(o ...*OrderItemShipGrpInvRes) *OrderItemCreate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oic.AddOrderItemShipGrpInvReIDs(ids...)
}

// AddOrderPaymentPreferenceIDs adds the "order_payment_preferences" edge to the OrderPaymentPreference entity by IDs.
func (oic *OrderItemCreate) AddOrderPaymentPreferenceIDs(ids ...int) *OrderItemCreate {
	oic.mutation.AddOrderPaymentPreferenceIDs(ids...)
	return oic
}

// AddOrderPaymentPreferences adds the "order_payment_preferences" edges to the OrderPaymentPreference entity.
func (oic *OrderItemCreate) AddOrderPaymentPreferences(o ...*OrderPaymentPreference) *OrderItemCreate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oic.AddOrderPaymentPreferenceIDs(ids...)
}

// AddOrderStatusIDs adds the "order_statuses" edge to the OrderStatus entity by IDs.
func (oic *OrderItemCreate) AddOrderStatusIDs(ids ...int) *OrderItemCreate {
	oic.mutation.AddOrderStatusIDs(ids...)
	return oic
}

// AddOrderStatuses adds the "order_statuses" edges to the OrderStatus entity.
func (oic *OrderItemCreate) AddOrderStatuses(o ...*OrderStatus) *OrderItemCreate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oic.AddOrderStatusIDs(ids...)
}

// Mutation returns the OrderItemMutation object of the builder.
func (oic *OrderItemCreate) Mutation() *OrderItemMutation {
	return oic.mutation
}

// Save creates the OrderItem in the database.
func (oic *OrderItemCreate) Save(ctx context.Context) (*OrderItem, error) {
	var (
		err  error
		node *OrderItem
	)
	oic.defaults()
	if len(oic.hooks) == 0 {
		if err = oic.check(); err != nil {
			return nil, err
		}
		node, err = oic.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderItemMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = oic.check(); err != nil {
				return nil, err
			}
			oic.mutation = mutation
			if node, err = oic.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(oic.hooks) - 1; i >= 0; i-- {
			mut = oic.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, oic.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (oic *OrderItemCreate) SaveX(ctx context.Context) *OrderItem {
	v, err := oic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (oic *OrderItemCreate) defaults() {
	if _, ok := oic.mutation.CreateTime(); !ok {
		v := orderitem.DefaultCreateTime()
		oic.mutation.SetCreateTime(v)
	}
	if _, ok := oic.mutation.UpdateTime(); !ok {
		v := orderitem.DefaultUpdateTime()
		oic.mutation.SetUpdateTime(v)
	}
	if _, ok := oic.mutation.EstimatedShipDate(); !ok {
		v := orderitem.DefaultEstimatedShipDate()
		oic.mutation.SetEstimatedShipDate(v)
	}
	if _, ok := oic.mutation.EstimatedDeliveryDate(); !ok {
		v := orderitem.DefaultEstimatedDeliveryDate()
		oic.mutation.SetEstimatedDeliveryDate(v)
	}
	if _, ok := oic.mutation.AutoCancelDate(); !ok {
		v := orderitem.DefaultAutoCancelDate()
		oic.mutation.SetAutoCancelDate(v)
	}
	if _, ok := oic.mutation.DontCancelSetDate(); !ok {
		v := orderitem.DefaultDontCancelSetDate()
		oic.mutation.SetDontCancelSetDate(v)
	}
	if _, ok := oic.mutation.ShipBeforeDate(); !ok {
		v := orderitem.DefaultShipBeforeDate()
		oic.mutation.SetShipBeforeDate(v)
	}
	if _, ok := oic.mutation.ShipAfterDate(); !ok {
		v := orderitem.DefaultShipAfterDate()
		oic.mutation.SetShipAfterDate(v)
	}
	if _, ok := oic.mutation.ReserveAfterDate(); !ok {
		v := orderitem.DefaultReserveAfterDate()
		oic.mutation.SetReserveAfterDate(v)
	}
	if _, ok := oic.mutation.CancelBackOrderDate(); !ok {
		v := orderitem.DefaultCancelBackOrderDate()
		oic.mutation.SetCancelBackOrderDate(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oic *OrderItemCreate) check() error {
	if _, ok := oic.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New("ent: missing required field \"create_time\"")}
	}
	if _, ok := oic.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New("ent: missing required field \"update_time\"")}
	}
	if _, ok := oic.mutation.OrderItemSeqID(); !ok {
		return &ValidationError{Name: "order_item_seq_id", err: errors.New("ent: missing required field \"order_item_seq_id\"")}
	}
	if v, ok := oic.mutation.IsItemGroupPrimary(); ok {
		if err := orderitem.IsItemGroupPrimaryValidator(v); err != nil {
			return &ValidationError{Name: "is_item_group_primary", err: fmt.Errorf("ent: validator failed for field \"is_item_group_primary\": %w", err)}
		}
	}
	if v, ok := oic.mutation.SupplierProductID(); ok {
		if err := orderitem.SupplierProductIDValidator(v); err != nil {
			return &ValidationError{Name: "supplier_product_id", err: fmt.Errorf("ent: validator failed for field \"supplier_product_id\": %w", err)}
		}
	}
	if v, ok := oic.mutation.IsPromo(); ok {
		if err := orderitem.IsPromoValidator(v); err != nil {
			return &ValidationError{Name: "is_promo", err: fmt.Errorf("ent: validator failed for field \"is_promo\": %w", err)}
		}
	}
	if v, ok := oic.mutation.IsModifiedPrice(); ok {
		if err := orderitem.IsModifiedPriceValidator(v); err != nil {
			return &ValidationError{Name: "is_modified_price", err: fmt.Errorf("ent: validator failed for field \"is_modified_price\": %w", err)}
		}
	}
	return nil
}

func (oic *OrderItemCreate) sqlSave(ctx context.Context) (*OrderItem, error) {
	_node, _spec := oic.createSpec()
	if err := sqlgraph.CreateNode(ctx, oic.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (oic *OrderItemCreate) createSpec() (*OrderItem, *sqlgraph.CreateSpec) {
	var (
		_node = &OrderItem{config: oic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: orderitem.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: orderitem.FieldID,
			},
		}
	)
	if value, ok := oic.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderitem.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := oic.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderitem.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := oic.mutation.StringRef(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderitem.FieldStringRef,
		})
		_node.StringRef = value
	}
	if value, ok := oic.mutation.OrderItemSeqID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldOrderItemSeqID,
		})
		_node.OrderItemSeqID = value
	}
	if value, ok := oic.mutation.ExternalID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldExternalID,
		})
		_node.ExternalID = value
	}
	if value, ok := oic.mutation.OrderItemTypeID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldOrderItemTypeID,
		})
		_node.OrderItemTypeID = value
	}
	if value, ok := oic.mutation.OrderItemGroupSeqID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldOrderItemGroupSeqID,
		})
		_node.OrderItemGroupSeqID = value
	}
	if value, ok := oic.mutation.IsItemGroupPrimary(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: orderitem.FieldIsItemGroupPrimary,
		})
		_node.IsItemGroupPrimary = value
	}
	if value, ok := oic.mutation.FromInventoryItemID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldFromInventoryItemID,
		})
		_node.FromInventoryItemID = value
	}
	if value, ok := oic.mutation.BudgetID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldBudgetID,
		})
		_node.BudgetID = value
	}
	if value, ok := oic.mutation.BudgetItemSeqID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldBudgetItemSeqID,
		})
		_node.BudgetItemSeqID = value
	}
	if value, ok := oic.mutation.SupplierProductID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderitem.FieldSupplierProductID,
		})
		_node.SupplierProductID = value
	}
	if value, ok := oic.mutation.ProductFeatureID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldProductFeatureID,
		})
		_node.ProductFeatureID = value
	}
	if value, ok := oic.mutation.ProdCatalogID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldProdCatalogID,
		})
		_node.ProdCatalogID = value
	}
	if value, ok := oic.mutation.ProductCategoryID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldProductCategoryID,
		})
		_node.ProductCategoryID = value
	}
	if value, ok := oic.mutation.IsPromo(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: orderitem.FieldIsPromo,
		})
		_node.IsPromo = value
	}
	if value, ok := oic.mutation.QuoteID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldQuoteID,
		})
		_node.QuoteID = value
	}
	if value, ok := oic.mutation.QuoteItemSeqID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldQuoteItemSeqID,
		})
		_node.QuoteItemSeqID = value
	}
	if value, ok := oic.mutation.ShoppingListID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldShoppingListID,
		})
		_node.ShoppingListID = value
	}
	if value, ok := oic.mutation.ShoppingListItemSeqID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldShoppingListItemSeqID,
		})
		_node.ShoppingListItemSeqID = value
	}
	if value, ok := oic.mutation.SubscriptionID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldSubscriptionID,
		})
		_node.SubscriptionID = value
	}
	if value, ok := oic.mutation.DeploymentID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldDeploymentID,
		})
		_node.DeploymentID = value
	}
	if value, ok := oic.mutation.Quantity(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderitem.FieldQuantity,
		})
		_node.Quantity = value
	}
	if value, ok := oic.mutation.CancelQuantity(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderitem.FieldCancelQuantity,
		})
		_node.CancelQuantity = value
	}
	if value, ok := oic.mutation.SelectedAmount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderitem.FieldSelectedAmount,
		})
		_node.SelectedAmount = value
	}
	if value, ok := oic.mutation.UnitPrice(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderitem.FieldUnitPrice,
		})
		_node.UnitPrice = value
	}
	if value, ok := oic.mutation.UnitListPrice(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderitem.FieldUnitListPrice,
		})
		_node.UnitListPrice = value
	}
	if value, ok := oic.mutation.UnitAverageCost(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderitem.FieldUnitAverageCost,
		})
		_node.UnitAverageCost = value
	}
	if value, ok := oic.mutation.UnitRecurringPrice(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderitem.FieldUnitRecurringPrice,
		})
		_node.UnitRecurringPrice = value
	}
	if value, ok := oic.mutation.IsModifiedPrice(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: orderitem.FieldIsModifiedPrice,
		})
		_node.IsModifiedPrice = value
	}
	if value, ok := oic.mutation.RecurringFreqUomID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldRecurringFreqUomID,
		})
		_node.RecurringFreqUomID = value
	}
	if value, ok := oic.mutation.ItemDescription(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderitem.FieldItemDescription,
		})
		_node.ItemDescription = value
	}
	if value, ok := oic.mutation.Comments(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderitem.FieldComments,
		})
		_node.Comments = value
	}
	if value, ok := oic.mutation.CorrespondingPoID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldCorrespondingPoID,
		})
		_node.CorrespondingPoID = value
	}
	if value, ok := oic.mutation.EstimatedShipDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderitem.FieldEstimatedShipDate,
		})
		_node.EstimatedShipDate = value
	}
	if value, ok := oic.mutation.EstimatedDeliveryDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderitem.FieldEstimatedDeliveryDate,
		})
		_node.EstimatedDeliveryDate = value
	}
	if value, ok := oic.mutation.AutoCancelDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderitem.FieldAutoCancelDate,
		})
		_node.AutoCancelDate = value
	}
	if value, ok := oic.mutation.DontCancelSetDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderitem.FieldDontCancelSetDate,
		})
		_node.DontCancelSetDate = value
	}
	if value, ok := oic.mutation.DontCancelSetUserLogin(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderitem.FieldDontCancelSetUserLogin,
		})
		_node.DontCancelSetUserLogin = value
	}
	if value, ok := oic.mutation.ShipBeforeDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderitem.FieldShipBeforeDate,
		})
		_node.ShipBeforeDate = value
	}
	if value, ok := oic.mutation.ShipAfterDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderitem.FieldShipAfterDate,
		})
		_node.ShipAfterDate = value
	}
	if value, ok := oic.mutation.ReserveAfterDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderitem.FieldReserveAfterDate,
		})
		_node.ReserveAfterDate = value
	}
	if value, ok := oic.mutation.CancelBackOrderDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderitem.FieldCancelBackOrderDate,
		})
		_node.CancelBackOrderDate = value
	}
	if value, ok := oic.mutation.OverrideGlAccountID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldOverrideGlAccountID,
		})
		_node.OverrideGlAccountID = value
	}
	if value, ok := oic.mutation.SalesOpportunityID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldSalesOpportunityID,
		})
		_node.SalesOpportunityID = value
	}
	if value, ok := oic.mutation.ChangeByUserLoginID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderitem.FieldChangeByUserLoginID,
		})
		_node.ChangeByUserLoginID = value
	}
	if nodes := oic.mutation.OrderHeaderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderitem.OrderHeaderTable,
			Columns: []string{orderitem.OrderHeaderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderheader.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.order_header_order_items = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oic.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderitem.ProductTable,
			Columns: []string{orderitem.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.product_order_items = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oic.mutation.StatusItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderitem.StatusItemTable,
			Columns: []string{orderitem.StatusItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.status_item_order_items = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oic.mutation.StatusValidChangesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderitem.StatusValidChangesTable,
			Columns: []string{orderitem.StatusValidChangesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusvalidchange.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oic.mutation.SyncStatusItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderitem.SyncStatusItemTable,
			Columns: []string{orderitem.SyncStatusItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.status_item_sync_order_items = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oic.mutation.OrderAdjustmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderitem.OrderAdjustmentsTable,
			Columns: []string{orderitem.OrderAdjustmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderadjustment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oic.mutation.OrderItemShipGroupAssocsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderitem.OrderItemShipGroupAssocsTable,
			Columns: []string{orderitem.OrderItemShipGroupAssocsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitemshipgroupassoc.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oic.mutation.OrderItemShipGrpInvResIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderitem.OrderItemShipGrpInvResTable,
			Columns: []string{orderitem.OrderItemShipGrpInvResColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitemshipgrpinvres.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oic.mutation.OrderPaymentPreferencesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderitem.OrderPaymentPreferencesTable,
			Columns: []string{orderitem.OrderPaymentPreferencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderpaymentpreference.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oic.mutation.OrderStatusesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderitem.OrderStatusesTable,
			Columns: []string{orderitem.OrderStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderstatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OrderItemCreateBulk is the builder for creating many OrderItem entities in bulk.
type OrderItemCreateBulk struct {
	config
	builders []*OrderItemCreate
}

// Save creates the OrderItem entities in the database.
func (oicb *OrderItemCreateBulk) Save(ctx context.Context) ([]*OrderItem, error) {
	specs := make([]*sqlgraph.CreateSpec, len(oicb.builders))
	nodes := make([]*OrderItem, len(oicb.builders))
	mutators := make([]Mutator, len(oicb.builders))
	for i := range oicb.builders {
		func(i int, root context.Context) {
			builder := oicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrderItemMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, oicb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, oicb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, oicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (oicb *OrderItemCreateBulk) SaveX(ctx context.Context) []*OrderItem {
	v, err := oicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
