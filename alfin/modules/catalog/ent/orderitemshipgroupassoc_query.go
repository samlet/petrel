// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/orderadjustment"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/orderheader"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/orderitem"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/orderitemshipgroup"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/orderitemshipgroupassoc"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/orderitemshipgrpinvres"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/predicate"
)

// OrderItemShipGroupAssocQuery is the builder for querying OrderItemShipGroupAssoc entities.
type OrderItemShipGroupAssocQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.OrderItemShipGroupAssoc
	// eager-loading edges.
	withOrderHeader            *OrderHeaderQuery
	withOrderItem              *OrderItemQuery
	withOrderItemShipGroup     *OrderItemShipGroupQuery
	withOrderAdjustments       *OrderAdjustmentQuery
	withOrderItemShipGrpInvRes *OrderItemShipGrpInvResQuery
	withFKs                    bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the OrderItemShipGroupAssocQuery builder.
func (oisgaq *OrderItemShipGroupAssocQuery) Where(ps ...predicate.OrderItemShipGroupAssoc) *OrderItemShipGroupAssocQuery {
	oisgaq.predicates = append(oisgaq.predicates, ps...)
	return oisgaq
}

// Limit adds a limit step to the query.
func (oisgaq *OrderItemShipGroupAssocQuery) Limit(limit int) *OrderItemShipGroupAssocQuery {
	oisgaq.limit = &limit
	return oisgaq
}

// Offset adds an offset step to the query.
func (oisgaq *OrderItemShipGroupAssocQuery) Offset(offset int) *OrderItemShipGroupAssocQuery {
	oisgaq.offset = &offset
	return oisgaq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (oisgaq *OrderItemShipGroupAssocQuery) Unique(unique bool) *OrderItemShipGroupAssocQuery {
	oisgaq.unique = &unique
	return oisgaq
}

// Order adds an order step to the query.
func (oisgaq *OrderItemShipGroupAssocQuery) Order(o ...OrderFunc) *OrderItemShipGroupAssocQuery {
	oisgaq.order = append(oisgaq.order, o...)
	return oisgaq
}

// QueryOrderHeader chains the current query on the "order_header" edge.
func (oisgaq *OrderItemShipGroupAssocQuery) QueryOrderHeader() *OrderHeaderQuery {
	query := &OrderHeaderQuery{config: oisgaq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := oisgaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := oisgaq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(orderitemshipgroupassoc.Table, orderitemshipgroupassoc.FieldID, selector),
			sqlgraph.To(orderheader.Table, orderheader.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, orderitemshipgroupassoc.OrderHeaderTable, orderitemshipgroupassoc.OrderHeaderColumn),
		)
		fromU = sqlgraph.SetNeighbors(oisgaq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOrderItem chains the current query on the "order_item" edge.
func (oisgaq *OrderItemShipGroupAssocQuery) QueryOrderItem() *OrderItemQuery {
	query := &OrderItemQuery{config: oisgaq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := oisgaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := oisgaq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(orderitemshipgroupassoc.Table, orderitemshipgroupassoc.FieldID, selector),
			sqlgraph.To(orderitem.Table, orderitem.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, orderitemshipgroupassoc.OrderItemTable, orderitemshipgroupassoc.OrderItemColumn),
		)
		fromU = sqlgraph.SetNeighbors(oisgaq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOrderItemShipGroup chains the current query on the "order_item_ship_group" edge.
func (oisgaq *OrderItemShipGroupAssocQuery) QueryOrderItemShipGroup() *OrderItemShipGroupQuery {
	query := &OrderItemShipGroupQuery{config: oisgaq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := oisgaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := oisgaq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(orderitemshipgroupassoc.Table, orderitemshipgroupassoc.FieldID, selector),
			sqlgraph.To(orderitemshipgroup.Table, orderitemshipgroup.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, orderitemshipgroupassoc.OrderItemShipGroupTable, orderitemshipgroupassoc.OrderItemShipGroupColumn),
		)
		fromU = sqlgraph.SetNeighbors(oisgaq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOrderAdjustments chains the current query on the "order_adjustments" edge.
func (oisgaq *OrderItemShipGroupAssocQuery) QueryOrderAdjustments() *OrderAdjustmentQuery {
	query := &OrderAdjustmentQuery{config: oisgaq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := oisgaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := oisgaq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(orderitemshipgroupassoc.Table, orderitemshipgroupassoc.FieldID, selector),
			sqlgraph.To(orderadjustment.Table, orderadjustment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, orderitemshipgroupassoc.OrderAdjustmentsTable, orderitemshipgroupassoc.OrderAdjustmentsColumn),
		)
		fromU = sqlgraph.SetNeighbors(oisgaq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOrderItemShipGrpInvRes chains the current query on the "order_item_ship_grp_inv_res" edge.
func (oisgaq *OrderItemShipGroupAssocQuery) QueryOrderItemShipGrpInvRes() *OrderItemShipGrpInvResQuery {
	query := &OrderItemShipGrpInvResQuery{config: oisgaq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := oisgaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := oisgaq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(orderitemshipgroupassoc.Table, orderitemshipgroupassoc.FieldID, selector),
			sqlgraph.To(orderitemshipgrpinvres.Table, orderitemshipgrpinvres.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, orderitemshipgroupassoc.OrderItemShipGrpInvResTable, orderitemshipgroupassoc.OrderItemShipGrpInvResColumn),
		)
		fromU = sqlgraph.SetNeighbors(oisgaq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first OrderItemShipGroupAssoc entity from the query.
// Returns a *NotFoundError when no OrderItemShipGroupAssoc was found.
func (oisgaq *OrderItemShipGroupAssocQuery) First(ctx context.Context) (*OrderItemShipGroupAssoc, error) {
	nodes, err := oisgaq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{orderitemshipgroupassoc.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (oisgaq *OrderItemShipGroupAssocQuery) FirstX(ctx context.Context) *OrderItemShipGroupAssoc {
	node, err := oisgaq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first OrderItemShipGroupAssoc ID from the query.
// Returns a *NotFoundError when no OrderItemShipGroupAssoc ID was found.
func (oisgaq *OrderItemShipGroupAssocQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = oisgaq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{orderitemshipgroupassoc.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (oisgaq *OrderItemShipGroupAssocQuery) FirstIDX(ctx context.Context) int {
	id, err := oisgaq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single OrderItemShipGroupAssoc entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one OrderItemShipGroupAssoc entity is not found.
// Returns a *NotFoundError when no OrderItemShipGroupAssoc entities are found.
func (oisgaq *OrderItemShipGroupAssocQuery) Only(ctx context.Context) (*OrderItemShipGroupAssoc, error) {
	nodes, err := oisgaq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{orderitemshipgroupassoc.Label}
	default:
		return nil, &NotSingularError{orderitemshipgroupassoc.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (oisgaq *OrderItemShipGroupAssocQuery) OnlyX(ctx context.Context) *OrderItemShipGroupAssoc {
	node, err := oisgaq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only OrderItemShipGroupAssoc ID in the query.
// Returns a *NotSingularError when exactly one OrderItemShipGroupAssoc ID is not found.
// Returns a *NotFoundError when no entities are found.
func (oisgaq *OrderItemShipGroupAssocQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = oisgaq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{orderitemshipgroupassoc.Label}
	default:
		err = &NotSingularError{orderitemshipgroupassoc.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (oisgaq *OrderItemShipGroupAssocQuery) OnlyIDX(ctx context.Context) int {
	id, err := oisgaq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of OrderItemShipGroupAssocs.
func (oisgaq *OrderItemShipGroupAssocQuery) All(ctx context.Context) ([]*OrderItemShipGroupAssoc, error) {
	if err := oisgaq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return oisgaq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (oisgaq *OrderItemShipGroupAssocQuery) AllX(ctx context.Context) []*OrderItemShipGroupAssoc {
	nodes, err := oisgaq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of OrderItemShipGroupAssoc IDs.
func (oisgaq *OrderItemShipGroupAssocQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := oisgaq.Select(orderitemshipgroupassoc.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (oisgaq *OrderItemShipGroupAssocQuery) IDsX(ctx context.Context) []int {
	ids, err := oisgaq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (oisgaq *OrderItemShipGroupAssocQuery) Count(ctx context.Context) (int, error) {
	if err := oisgaq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return oisgaq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (oisgaq *OrderItemShipGroupAssocQuery) CountX(ctx context.Context) int {
	count, err := oisgaq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (oisgaq *OrderItemShipGroupAssocQuery) Exist(ctx context.Context) (bool, error) {
	if err := oisgaq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return oisgaq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (oisgaq *OrderItemShipGroupAssocQuery) ExistX(ctx context.Context) bool {
	exist, err := oisgaq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the OrderItemShipGroupAssocQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (oisgaq *OrderItemShipGroupAssocQuery) Clone() *OrderItemShipGroupAssocQuery {
	if oisgaq == nil {
		return nil
	}
	return &OrderItemShipGroupAssocQuery{
		config:                     oisgaq.config,
		limit:                      oisgaq.limit,
		offset:                     oisgaq.offset,
		order:                      append([]OrderFunc{}, oisgaq.order...),
		predicates:                 append([]predicate.OrderItemShipGroupAssoc{}, oisgaq.predicates...),
		withOrderHeader:            oisgaq.withOrderHeader.Clone(),
		withOrderItem:              oisgaq.withOrderItem.Clone(),
		withOrderItemShipGroup:     oisgaq.withOrderItemShipGroup.Clone(),
		withOrderAdjustments:       oisgaq.withOrderAdjustments.Clone(),
		withOrderItemShipGrpInvRes: oisgaq.withOrderItemShipGrpInvRes.Clone(),
		// clone intermediate query.
		sql:  oisgaq.sql.Clone(),
		path: oisgaq.path,
	}
}

// WithOrderHeader tells the query-builder to eager-load the nodes that are connected to
// the "order_header" edge. The optional arguments are used to configure the query builder of the edge.
func (oisgaq *OrderItemShipGroupAssocQuery) WithOrderHeader(opts ...func(*OrderHeaderQuery)) *OrderItemShipGroupAssocQuery {
	query := &OrderHeaderQuery{config: oisgaq.config}
	for _, opt := range opts {
		opt(query)
	}
	oisgaq.withOrderHeader = query
	return oisgaq
}

// WithOrderItem tells the query-builder to eager-load the nodes that are connected to
// the "order_item" edge. The optional arguments are used to configure the query builder of the edge.
func (oisgaq *OrderItemShipGroupAssocQuery) WithOrderItem(opts ...func(*OrderItemQuery)) *OrderItemShipGroupAssocQuery {
	query := &OrderItemQuery{config: oisgaq.config}
	for _, opt := range opts {
		opt(query)
	}
	oisgaq.withOrderItem = query
	return oisgaq
}

// WithOrderItemShipGroup tells the query-builder to eager-load the nodes that are connected to
// the "order_item_ship_group" edge. The optional arguments are used to configure the query builder of the edge.
func (oisgaq *OrderItemShipGroupAssocQuery) WithOrderItemShipGroup(opts ...func(*OrderItemShipGroupQuery)) *OrderItemShipGroupAssocQuery {
	query := &OrderItemShipGroupQuery{config: oisgaq.config}
	for _, opt := range opts {
		opt(query)
	}
	oisgaq.withOrderItemShipGroup = query
	return oisgaq
}

// WithOrderAdjustments tells the query-builder to eager-load the nodes that are connected to
// the "order_adjustments" edge. The optional arguments are used to configure the query builder of the edge.
func (oisgaq *OrderItemShipGroupAssocQuery) WithOrderAdjustments(opts ...func(*OrderAdjustmentQuery)) *OrderItemShipGroupAssocQuery {
	query := &OrderAdjustmentQuery{config: oisgaq.config}
	for _, opt := range opts {
		opt(query)
	}
	oisgaq.withOrderAdjustments = query
	return oisgaq
}

// WithOrderItemShipGrpInvRes tells the query-builder to eager-load the nodes that are connected to
// the "order_item_ship_grp_inv_res" edge. The optional arguments are used to configure the query builder of the edge.
func (oisgaq *OrderItemShipGroupAssocQuery) WithOrderItemShipGrpInvRes(opts ...func(*OrderItemShipGrpInvResQuery)) *OrderItemShipGroupAssocQuery {
	query := &OrderItemShipGrpInvResQuery{config: oisgaq.config}
	for _, opt := range opts {
		opt(query)
	}
	oisgaq.withOrderItemShipGrpInvRes = query
	return oisgaq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.OrderItemShipGroupAssoc.Query().
//		GroupBy(orderitemshipgroupassoc.FieldCreateTime).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (oisgaq *OrderItemShipGroupAssocQuery) GroupBy(field string, fields ...string) *OrderItemShipGroupAssocGroupBy {
	group := &OrderItemShipGroupAssocGroupBy{config: oisgaq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := oisgaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return oisgaq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//	}
//
//	client.OrderItemShipGroupAssoc.Query().
//		Select(orderitemshipgroupassoc.FieldCreateTime).
//		Scan(ctx, &v)
//
func (oisgaq *OrderItemShipGroupAssocQuery) Select(field string, fields ...string) *OrderItemShipGroupAssocSelect {
	oisgaq.fields = append([]string{field}, fields...)
	return &OrderItemShipGroupAssocSelect{OrderItemShipGroupAssocQuery: oisgaq}
}

func (oisgaq *OrderItemShipGroupAssocQuery) prepareQuery(ctx context.Context) error {
	for _, f := range oisgaq.fields {
		if !orderitemshipgroupassoc.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if oisgaq.path != nil {
		prev, err := oisgaq.path(ctx)
		if err != nil {
			return err
		}
		oisgaq.sql = prev
	}
	return nil
}

func (oisgaq *OrderItemShipGroupAssocQuery) sqlAll(ctx context.Context) ([]*OrderItemShipGroupAssoc, error) {
	var (
		nodes       = []*OrderItemShipGroupAssoc{}
		withFKs     = oisgaq.withFKs
		_spec       = oisgaq.querySpec()
		loadedTypes = [5]bool{
			oisgaq.withOrderHeader != nil,
			oisgaq.withOrderItem != nil,
			oisgaq.withOrderItemShipGroup != nil,
			oisgaq.withOrderAdjustments != nil,
			oisgaq.withOrderItemShipGrpInvRes != nil,
		}
	)
	if oisgaq.withOrderHeader != nil || oisgaq.withOrderItem != nil || oisgaq.withOrderItemShipGroup != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, orderitemshipgroupassoc.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &OrderItemShipGroupAssoc{config: oisgaq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, oisgaq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := oisgaq.withOrderHeader; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*OrderItemShipGroupAssoc)
		for i := range nodes {
			if nodes[i].order_header_order_item_ship_group_assocs == nil {
				continue
			}
			fk := *nodes[i].order_header_order_item_ship_group_assocs
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(orderheader.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "order_header_order_item_ship_group_assocs" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.OrderHeader = n
			}
		}
	}

	if query := oisgaq.withOrderItem; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*OrderItemShipGroupAssoc)
		for i := range nodes {
			if nodes[i].order_item_order_item_ship_group_assocs == nil {
				continue
			}
			fk := *nodes[i].order_item_order_item_ship_group_assocs
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(orderitem.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "order_item_order_item_ship_group_assocs" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.OrderItem = n
			}
		}
	}

	if query := oisgaq.withOrderItemShipGroup; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*OrderItemShipGroupAssoc)
		for i := range nodes {
			if nodes[i].order_item_ship_group_order_item_ship_group_assocs == nil {
				continue
			}
			fk := *nodes[i].order_item_ship_group_order_item_ship_group_assocs
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(orderitemshipgroup.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "order_item_ship_group_order_item_ship_group_assocs" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.OrderItemShipGroup = n
			}
		}
	}

	if query := oisgaq.withOrderAdjustments; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*OrderItemShipGroupAssoc)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.OrderAdjustments = []*OrderAdjustment{}
		}
		query.withFKs = true
		query.Where(predicate.OrderAdjustment(func(s *sql.Selector) {
			s.Where(sql.InValues(orderitemshipgroupassoc.OrderAdjustmentsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.order_item_ship_group_assoc_order_adjustments
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "order_item_ship_group_assoc_order_adjustments" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "order_item_ship_group_assoc_order_adjustments" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.OrderAdjustments = append(node.Edges.OrderAdjustments, n)
		}
	}

	if query := oisgaq.withOrderItemShipGrpInvRes; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*OrderItemShipGroupAssoc)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.OrderItemShipGrpInvRes = []*OrderItemShipGrpInvRes{}
		}
		query.withFKs = true
		query.Where(predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
			s.Where(sql.InValues(orderitemshipgroupassoc.OrderItemShipGrpInvResColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.order_item_ship_group_assoc_order_item_ship_grp_inv_res
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "order_item_ship_group_assoc_order_item_ship_grp_inv_res" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "order_item_ship_group_assoc_order_item_ship_grp_inv_res" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.OrderItemShipGrpInvRes = append(node.Edges.OrderItemShipGrpInvRes, n)
		}
	}

	return nodes, nil
}

func (oisgaq *OrderItemShipGroupAssocQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := oisgaq.querySpec()
	return sqlgraph.CountNodes(ctx, oisgaq.driver, _spec)
}

func (oisgaq *OrderItemShipGroupAssocQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := oisgaq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (oisgaq *OrderItemShipGroupAssocQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   orderitemshipgroupassoc.Table,
			Columns: orderitemshipgroupassoc.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: orderitemshipgroupassoc.FieldID,
			},
		},
		From:   oisgaq.sql,
		Unique: true,
	}
	if unique := oisgaq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := oisgaq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, orderitemshipgroupassoc.FieldID)
		for i := range fields {
			if fields[i] != orderitemshipgroupassoc.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := oisgaq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := oisgaq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := oisgaq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := oisgaq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (oisgaq *OrderItemShipGroupAssocQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(oisgaq.driver.Dialect())
	t1 := builder.Table(orderitemshipgroupassoc.Table)
	columns := oisgaq.fields
	if len(columns) == 0 {
		columns = orderitemshipgroupassoc.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if oisgaq.sql != nil {
		selector = oisgaq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	for _, p := range oisgaq.predicates {
		p(selector)
	}
	for _, p := range oisgaq.order {
		p(selector)
	}
	if offset := oisgaq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := oisgaq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// OrderItemShipGroupAssocGroupBy is the group-by builder for OrderItemShipGroupAssoc entities.
type OrderItemShipGroupAssocGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (oisgagb *OrderItemShipGroupAssocGroupBy) Aggregate(fns ...AggregateFunc) *OrderItemShipGroupAssocGroupBy {
	oisgagb.fns = append(oisgagb.fns, fns...)
	return oisgagb
}

// Scan applies the group-by query and scans the result into the given value.
func (oisgagb *OrderItemShipGroupAssocGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := oisgagb.path(ctx)
	if err != nil {
		return err
	}
	oisgagb.sql = query
	return oisgagb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (oisgagb *OrderItemShipGroupAssocGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := oisgagb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (oisgagb *OrderItemShipGroupAssocGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(oisgagb.fields) > 1 {
		return nil, errors.New("ent: OrderItemShipGroupAssocGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := oisgagb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (oisgagb *OrderItemShipGroupAssocGroupBy) StringsX(ctx context.Context) []string {
	v, err := oisgagb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (oisgagb *OrderItemShipGroupAssocGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = oisgagb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{orderitemshipgroupassoc.Label}
	default:
		err = fmt.Errorf("ent: OrderItemShipGroupAssocGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (oisgagb *OrderItemShipGroupAssocGroupBy) StringX(ctx context.Context) string {
	v, err := oisgagb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (oisgagb *OrderItemShipGroupAssocGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(oisgagb.fields) > 1 {
		return nil, errors.New("ent: OrderItemShipGroupAssocGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := oisgagb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (oisgagb *OrderItemShipGroupAssocGroupBy) IntsX(ctx context.Context) []int {
	v, err := oisgagb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (oisgagb *OrderItemShipGroupAssocGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = oisgagb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{orderitemshipgroupassoc.Label}
	default:
		err = fmt.Errorf("ent: OrderItemShipGroupAssocGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (oisgagb *OrderItemShipGroupAssocGroupBy) IntX(ctx context.Context) int {
	v, err := oisgagb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (oisgagb *OrderItemShipGroupAssocGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(oisgagb.fields) > 1 {
		return nil, errors.New("ent: OrderItemShipGroupAssocGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := oisgagb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (oisgagb *OrderItemShipGroupAssocGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := oisgagb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (oisgagb *OrderItemShipGroupAssocGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = oisgagb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{orderitemshipgroupassoc.Label}
	default:
		err = fmt.Errorf("ent: OrderItemShipGroupAssocGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (oisgagb *OrderItemShipGroupAssocGroupBy) Float64X(ctx context.Context) float64 {
	v, err := oisgagb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (oisgagb *OrderItemShipGroupAssocGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(oisgagb.fields) > 1 {
		return nil, errors.New("ent: OrderItemShipGroupAssocGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := oisgagb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (oisgagb *OrderItemShipGroupAssocGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := oisgagb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (oisgagb *OrderItemShipGroupAssocGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = oisgagb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{orderitemshipgroupassoc.Label}
	default:
		err = fmt.Errorf("ent: OrderItemShipGroupAssocGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (oisgagb *OrderItemShipGroupAssocGroupBy) BoolX(ctx context.Context) bool {
	v, err := oisgagb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (oisgagb *OrderItemShipGroupAssocGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range oisgagb.fields {
		if !orderitemshipgroupassoc.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := oisgagb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := oisgagb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (oisgagb *OrderItemShipGroupAssocGroupBy) sqlQuery() *sql.Selector {
	selector := oisgagb.sql.Select()
	aggregation := make([]string, 0, len(oisgagb.fns))
	for _, fn := range oisgagb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(oisgagb.fields)+len(oisgagb.fns))
		for _, f := range oisgagb.fields {
			columns = append(columns, selector.C(f))
		}
		for _, c := range aggregation {
			columns = append(columns, c)
		}
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(oisgagb.fields...)...)
}

// OrderItemShipGroupAssocSelect is the builder for selecting fields of OrderItemShipGroupAssoc entities.
type OrderItemShipGroupAssocSelect struct {
	*OrderItemShipGroupAssocQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (oisgas *OrderItemShipGroupAssocSelect) Scan(ctx context.Context, v interface{}) error {
	if err := oisgas.prepareQuery(ctx); err != nil {
		return err
	}
	oisgas.sql = oisgas.OrderItemShipGroupAssocQuery.sqlQuery(ctx)
	return oisgas.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (oisgas *OrderItemShipGroupAssocSelect) ScanX(ctx context.Context, v interface{}) {
	if err := oisgas.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (oisgas *OrderItemShipGroupAssocSelect) Strings(ctx context.Context) ([]string, error) {
	if len(oisgas.fields) > 1 {
		return nil, errors.New("ent: OrderItemShipGroupAssocSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := oisgas.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (oisgas *OrderItemShipGroupAssocSelect) StringsX(ctx context.Context) []string {
	v, err := oisgas.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (oisgas *OrderItemShipGroupAssocSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = oisgas.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{orderitemshipgroupassoc.Label}
	default:
		err = fmt.Errorf("ent: OrderItemShipGroupAssocSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (oisgas *OrderItemShipGroupAssocSelect) StringX(ctx context.Context) string {
	v, err := oisgas.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (oisgas *OrderItemShipGroupAssocSelect) Ints(ctx context.Context) ([]int, error) {
	if len(oisgas.fields) > 1 {
		return nil, errors.New("ent: OrderItemShipGroupAssocSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := oisgas.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (oisgas *OrderItemShipGroupAssocSelect) IntsX(ctx context.Context) []int {
	v, err := oisgas.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (oisgas *OrderItemShipGroupAssocSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = oisgas.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{orderitemshipgroupassoc.Label}
	default:
		err = fmt.Errorf("ent: OrderItemShipGroupAssocSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (oisgas *OrderItemShipGroupAssocSelect) IntX(ctx context.Context) int {
	v, err := oisgas.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (oisgas *OrderItemShipGroupAssocSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(oisgas.fields) > 1 {
		return nil, errors.New("ent: OrderItemShipGroupAssocSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := oisgas.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (oisgas *OrderItemShipGroupAssocSelect) Float64sX(ctx context.Context) []float64 {
	v, err := oisgas.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (oisgas *OrderItemShipGroupAssocSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = oisgas.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{orderitemshipgroupassoc.Label}
	default:
		err = fmt.Errorf("ent: OrderItemShipGroupAssocSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (oisgas *OrderItemShipGroupAssocSelect) Float64X(ctx context.Context) float64 {
	v, err := oisgas.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (oisgas *OrderItemShipGroupAssocSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(oisgas.fields) > 1 {
		return nil, errors.New("ent: OrderItemShipGroupAssocSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := oisgas.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (oisgas *OrderItemShipGroupAssocSelect) BoolsX(ctx context.Context) []bool {
	v, err := oisgas.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (oisgas *OrderItemShipGroupAssocSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = oisgas.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{orderitemshipgroupassoc.Label}
	default:
		err = fmt.Errorf("ent: OrderItemShipGroupAssocSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (oisgas *OrderItemShipGroupAssocSelect) BoolX(ctx context.Context) bool {
	v, err := oisgas.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (oisgas *OrderItemShipGroupAssocSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := oisgas.sql.Query()
	if err := oisgas.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
