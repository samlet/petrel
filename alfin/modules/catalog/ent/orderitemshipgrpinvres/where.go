// Code generated by entc, DO NOT EDIT.

package orderitemshipgrpinvres

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// StringRef applies equality check predicate on the "string_ref" field. It's identical to StringRefEQ.
func StringRef(v string) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStringRef), v))
	})
}

// ShipGroupSeqID applies equality check predicate on the "ship_group_seq_id" field. It's identical to ShipGroupSeqIDEQ.
func ShipGroupSeqID(v int) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShipGroupSeqID), v))
	})
}

// OrderItemSeqID applies equality check predicate on the "order_item_seq_id" field. It's identical to OrderItemSeqIDEQ.
func OrderItemSeqID(v int) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderItemSeqID), v))
	})
}

// InventoryItemID applies equality check predicate on the "inventory_item_id" field. It's identical to InventoryItemIDEQ.
func InventoryItemID(v int) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInventoryItemID), v))
	})
}

// ReserveOrderEnumID applies equality check predicate on the "reserve_order_enum_id" field. It's identical to ReserveOrderEnumIDEQ.
func ReserveOrderEnumID(v int) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReserveOrderEnumID), v))
	})
}

// Quantity applies equality check predicate on the "quantity" field. It's identical to QuantityEQ.
func Quantity(v float64) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQuantity), v))
	})
}

// QuantityNotAvailable applies equality check predicate on the "quantity_not_available" field. It's identical to QuantityNotAvailableEQ.
func QuantityNotAvailable(v float64) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQuantityNotAvailable), v))
	})
}

// ReservedDatetime applies equality check predicate on the "reserved_datetime" field. It's identical to ReservedDatetimeEQ.
func ReservedDatetime(v time.Time) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReservedDatetime), v))
	})
}

// CreatedDatetime applies equality check predicate on the "created_datetime" field. It's identical to CreatedDatetimeEQ.
func CreatedDatetime(v time.Time) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedDatetime), v))
	})
}

// PromisedDatetime applies equality check predicate on the "promised_datetime" field. It's identical to PromisedDatetimeEQ.
func PromisedDatetime(v time.Time) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPromisedDatetime), v))
	})
}

// CurrentPromisedDate applies equality check predicate on the "current_promised_date" field. It's identical to CurrentPromisedDateEQ.
func CurrentPromisedDate(v time.Time) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCurrentPromisedDate), v))
	})
}

// SequenceID applies equality check predicate on the "sequence_id" field. It's identical to SequenceIDEQ.
func SequenceID(v int) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSequenceID), v))
	})
}

// OldPickStartDate applies equality check predicate on the "old_pick_start_date" field. It's identical to OldPickStartDateEQ.
func OldPickStartDate(v time.Time) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOldPickStartDate), v))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.OrderItemShipGrpInvRes {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.OrderItemShipGrpInvRes {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), v))
	})
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.OrderItemShipGrpInvRes {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.OrderItemShipGrpInvRes {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateTime), v))
	})
}

// StringRefEQ applies the EQ predicate on the "string_ref" field.
func StringRefEQ(v string) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStringRef), v))
	})
}

// StringRefNEQ applies the NEQ predicate on the "string_ref" field.
func StringRefNEQ(v string) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStringRef), v))
	})
}

// StringRefIn applies the In predicate on the "string_ref" field.
func StringRefIn(vs ...string) predicate.OrderItemShipGrpInvRes {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStringRef), v...))
	})
}

// StringRefNotIn applies the NotIn predicate on the "string_ref" field.
func StringRefNotIn(vs ...string) predicate.OrderItemShipGrpInvRes {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStringRef), v...))
	})
}

// StringRefGT applies the GT predicate on the "string_ref" field.
func StringRefGT(v string) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStringRef), v))
	})
}

// StringRefGTE applies the GTE predicate on the "string_ref" field.
func StringRefGTE(v string) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStringRef), v))
	})
}

// StringRefLT applies the LT predicate on the "string_ref" field.
func StringRefLT(v string) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStringRef), v))
	})
}

// StringRefLTE applies the LTE predicate on the "string_ref" field.
func StringRefLTE(v string) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStringRef), v))
	})
}

// StringRefContains applies the Contains predicate on the "string_ref" field.
func StringRefContains(v string) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStringRef), v))
	})
}

// StringRefHasPrefix applies the HasPrefix predicate on the "string_ref" field.
func StringRefHasPrefix(v string) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStringRef), v))
	})
}

// StringRefHasSuffix applies the HasSuffix predicate on the "string_ref" field.
func StringRefHasSuffix(v string) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStringRef), v))
	})
}

// StringRefIsNil applies the IsNil predicate on the "string_ref" field.
func StringRefIsNil() predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStringRef)))
	})
}

// StringRefNotNil applies the NotNil predicate on the "string_ref" field.
func StringRefNotNil() predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStringRef)))
	})
}

// StringRefEqualFold applies the EqualFold predicate on the "string_ref" field.
func StringRefEqualFold(v string) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStringRef), v))
	})
}

// StringRefContainsFold applies the ContainsFold predicate on the "string_ref" field.
func StringRefContainsFold(v string) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStringRef), v))
	})
}

// ShipGroupSeqIDEQ applies the EQ predicate on the "ship_group_seq_id" field.
func ShipGroupSeqIDEQ(v int) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShipGroupSeqID), v))
	})
}

// ShipGroupSeqIDNEQ applies the NEQ predicate on the "ship_group_seq_id" field.
func ShipGroupSeqIDNEQ(v int) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShipGroupSeqID), v))
	})
}

// ShipGroupSeqIDIn applies the In predicate on the "ship_group_seq_id" field.
func ShipGroupSeqIDIn(vs ...int) predicate.OrderItemShipGrpInvRes {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldShipGroupSeqID), v...))
	})
}

// ShipGroupSeqIDNotIn applies the NotIn predicate on the "ship_group_seq_id" field.
func ShipGroupSeqIDNotIn(vs ...int) predicate.OrderItemShipGrpInvRes {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldShipGroupSeqID), v...))
	})
}

// ShipGroupSeqIDGT applies the GT predicate on the "ship_group_seq_id" field.
func ShipGroupSeqIDGT(v int) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShipGroupSeqID), v))
	})
}

// ShipGroupSeqIDGTE applies the GTE predicate on the "ship_group_seq_id" field.
func ShipGroupSeqIDGTE(v int) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShipGroupSeqID), v))
	})
}

// ShipGroupSeqIDLT applies the LT predicate on the "ship_group_seq_id" field.
func ShipGroupSeqIDLT(v int) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShipGroupSeqID), v))
	})
}

// ShipGroupSeqIDLTE applies the LTE predicate on the "ship_group_seq_id" field.
func ShipGroupSeqIDLTE(v int) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShipGroupSeqID), v))
	})
}

// OrderItemSeqIDEQ applies the EQ predicate on the "order_item_seq_id" field.
func OrderItemSeqIDEQ(v int) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderItemSeqID), v))
	})
}

// OrderItemSeqIDNEQ applies the NEQ predicate on the "order_item_seq_id" field.
func OrderItemSeqIDNEQ(v int) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOrderItemSeqID), v))
	})
}

// OrderItemSeqIDIn applies the In predicate on the "order_item_seq_id" field.
func OrderItemSeqIDIn(vs ...int) predicate.OrderItemShipGrpInvRes {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOrderItemSeqID), v...))
	})
}

// OrderItemSeqIDNotIn applies the NotIn predicate on the "order_item_seq_id" field.
func OrderItemSeqIDNotIn(vs ...int) predicate.OrderItemShipGrpInvRes {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOrderItemSeqID), v...))
	})
}

// OrderItemSeqIDGT applies the GT predicate on the "order_item_seq_id" field.
func OrderItemSeqIDGT(v int) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOrderItemSeqID), v))
	})
}

// OrderItemSeqIDGTE applies the GTE predicate on the "order_item_seq_id" field.
func OrderItemSeqIDGTE(v int) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOrderItemSeqID), v))
	})
}

// OrderItemSeqIDLT applies the LT predicate on the "order_item_seq_id" field.
func OrderItemSeqIDLT(v int) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOrderItemSeqID), v))
	})
}

// OrderItemSeqIDLTE applies the LTE predicate on the "order_item_seq_id" field.
func OrderItemSeqIDLTE(v int) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOrderItemSeqID), v))
	})
}

// InventoryItemIDEQ applies the EQ predicate on the "inventory_item_id" field.
func InventoryItemIDEQ(v int) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInventoryItemID), v))
	})
}

// InventoryItemIDNEQ applies the NEQ predicate on the "inventory_item_id" field.
func InventoryItemIDNEQ(v int) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldInventoryItemID), v))
	})
}

// InventoryItemIDIn applies the In predicate on the "inventory_item_id" field.
func InventoryItemIDIn(vs ...int) predicate.OrderItemShipGrpInvRes {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldInventoryItemID), v...))
	})
}

// InventoryItemIDNotIn applies the NotIn predicate on the "inventory_item_id" field.
func InventoryItemIDNotIn(vs ...int) predicate.OrderItemShipGrpInvRes {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldInventoryItemID), v...))
	})
}

// InventoryItemIDGT applies the GT predicate on the "inventory_item_id" field.
func InventoryItemIDGT(v int) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldInventoryItemID), v))
	})
}

// InventoryItemIDGTE applies the GTE predicate on the "inventory_item_id" field.
func InventoryItemIDGTE(v int) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldInventoryItemID), v))
	})
}

// InventoryItemIDLT applies the LT predicate on the "inventory_item_id" field.
func InventoryItemIDLT(v int) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldInventoryItemID), v))
	})
}

// InventoryItemIDLTE applies the LTE predicate on the "inventory_item_id" field.
func InventoryItemIDLTE(v int) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldInventoryItemID), v))
	})
}

// ReserveOrderEnumIDEQ applies the EQ predicate on the "reserve_order_enum_id" field.
func ReserveOrderEnumIDEQ(v int) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReserveOrderEnumID), v))
	})
}

// ReserveOrderEnumIDNEQ applies the NEQ predicate on the "reserve_order_enum_id" field.
func ReserveOrderEnumIDNEQ(v int) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReserveOrderEnumID), v))
	})
}

// ReserveOrderEnumIDIn applies the In predicate on the "reserve_order_enum_id" field.
func ReserveOrderEnumIDIn(vs ...int) predicate.OrderItemShipGrpInvRes {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldReserveOrderEnumID), v...))
	})
}

// ReserveOrderEnumIDNotIn applies the NotIn predicate on the "reserve_order_enum_id" field.
func ReserveOrderEnumIDNotIn(vs ...int) predicate.OrderItemShipGrpInvRes {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldReserveOrderEnumID), v...))
	})
}

// ReserveOrderEnumIDGT applies the GT predicate on the "reserve_order_enum_id" field.
func ReserveOrderEnumIDGT(v int) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldReserveOrderEnumID), v))
	})
}

// ReserveOrderEnumIDGTE applies the GTE predicate on the "reserve_order_enum_id" field.
func ReserveOrderEnumIDGTE(v int) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldReserveOrderEnumID), v))
	})
}

// ReserveOrderEnumIDLT applies the LT predicate on the "reserve_order_enum_id" field.
func ReserveOrderEnumIDLT(v int) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldReserveOrderEnumID), v))
	})
}

// ReserveOrderEnumIDLTE applies the LTE predicate on the "reserve_order_enum_id" field.
func ReserveOrderEnumIDLTE(v int) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldReserveOrderEnumID), v))
	})
}

// ReserveOrderEnumIDIsNil applies the IsNil predicate on the "reserve_order_enum_id" field.
func ReserveOrderEnumIDIsNil() predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldReserveOrderEnumID)))
	})
}

// ReserveOrderEnumIDNotNil applies the NotNil predicate on the "reserve_order_enum_id" field.
func ReserveOrderEnumIDNotNil() predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldReserveOrderEnumID)))
	})
}

// QuantityEQ applies the EQ predicate on the "quantity" field.
func QuantityEQ(v float64) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQuantity), v))
	})
}

// QuantityNEQ applies the NEQ predicate on the "quantity" field.
func QuantityNEQ(v float64) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldQuantity), v))
	})
}

// QuantityIn applies the In predicate on the "quantity" field.
func QuantityIn(vs ...float64) predicate.OrderItemShipGrpInvRes {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldQuantity), v...))
	})
}

// QuantityNotIn applies the NotIn predicate on the "quantity" field.
func QuantityNotIn(vs ...float64) predicate.OrderItemShipGrpInvRes {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldQuantity), v...))
	})
}

// QuantityGT applies the GT predicate on the "quantity" field.
func QuantityGT(v float64) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldQuantity), v))
	})
}

// QuantityGTE applies the GTE predicate on the "quantity" field.
func QuantityGTE(v float64) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldQuantity), v))
	})
}

// QuantityLT applies the LT predicate on the "quantity" field.
func QuantityLT(v float64) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldQuantity), v))
	})
}

// QuantityLTE applies the LTE predicate on the "quantity" field.
func QuantityLTE(v float64) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldQuantity), v))
	})
}

// QuantityIsNil applies the IsNil predicate on the "quantity" field.
func QuantityIsNil() predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldQuantity)))
	})
}

// QuantityNotNil applies the NotNil predicate on the "quantity" field.
func QuantityNotNil() predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldQuantity)))
	})
}

// QuantityNotAvailableEQ applies the EQ predicate on the "quantity_not_available" field.
func QuantityNotAvailableEQ(v float64) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQuantityNotAvailable), v))
	})
}

// QuantityNotAvailableNEQ applies the NEQ predicate on the "quantity_not_available" field.
func QuantityNotAvailableNEQ(v float64) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldQuantityNotAvailable), v))
	})
}

// QuantityNotAvailableIn applies the In predicate on the "quantity_not_available" field.
func QuantityNotAvailableIn(vs ...float64) predicate.OrderItemShipGrpInvRes {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldQuantityNotAvailable), v...))
	})
}

// QuantityNotAvailableNotIn applies the NotIn predicate on the "quantity_not_available" field.
func QuantityNotAvailableNotIn(vs ...float64) predicate.OrderItemShipGrpInvRes {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldQuantityNotAvailable), v...))
	})
}

// QuantityNotAvailableGT applies the GT predicate on the "quantity_not_available" field.
func QuantityNotAvailableGT(v float64) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldQuantityNotAvailable), v))
	})
}

// QuantityNotAvailableGTE applies the GTE predicate on the "quantity_not_available" field.
func QuantityNotAvailableGTE(v float64) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldQuantityNotAvailable), v))
	})
}

// QuantityNotAvailableLT applies the LT predicate on the "quantity_not_available" field.
func QuantityNotAvailableLT(v float64) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldQuantityNotAvailable), v))
	})
}

// QuantityNotAvailableLTE applies the LTE predicate on the "quantity_not_available" field.
func QuantityNotAvailableLTE(v float64) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldQuantityNotAvailable), v))
	})
}

// QuantityNotAvailableIsNil applies the IsNil predicate on the "quantity_not_available" field.
func QuantityNotAvailableIsNil() predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldQuantityNotAvailable)))
	})
}

// QuantityNotAvailableNotNil applies the NotNil predicate on the "quantity_not_available" field.
func QuantityNotAvailableNotNil() predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldQuantityNotAvailable)))
	})
}

// ReservedDatetimeEQ applies the EQ predicate on the "reserved_datetime" field.
func ReservedDatetimeEQ(v time.Time) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReservedDatetime), v))
	})
}

// ReservedDatetimeNEQ applies the NEQ predicate on the "reserved_datetime" field.
func ReservedDatetimeNEQ(v time.Time) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReservedDatetime), v))
	})
}

// ReservedDatetimeIn applies the In predicate on the "reserved_datetime" field.
func ReservedDatetimeIn(vs ...time.Time) predicate.OrderItemShipGrpInvRes {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldReservedDatetime), v...))
	})
}

// ReservedDatetimeNotIn applies the NotIn predicate on the "reserved_datetime" field.
func ReservedDatetimeNotIn(vs ...time.Time) predicate.OrderItemShipGrpInvRes {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldReservedDatetime), v...))
	})
}

// ReservedDatetimeGT applies the GT predicate on the "reserved_datetime" field.
func ReservedDatetimeGT(v time.Time) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldReservedDatetime), v))
	})
}

// ReservedDatetimeGTE applies the GTE predicate on the "reserved_datetime" field.
func ReservedDatetimeGTE(v time.Time) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldReservedDatetime), v))
	})
}

// ReservedDatetimeLT applies the LT predicate on the "reserved_datetime" field.
func ReservedDatetimeLT(v time.Time) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldReservedDatetime), v))
	})
}

// ReservedDatetimeLTE applies the LTE predicate on the "reserved_datetime" field.
func ReservedDatetimeLTE(v time.Time) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldReservedDatetime), v))
	})
}

// ReservedDatetimeIsNil applies the IsNil predicate on the "reserved_datetime" field.
func ReservedDatetimeIsNil() predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldReservedDatetime)))
	})
}

// ReservedDatetimeNotNil applies the NotNil predicate on the "reserved_datetime" field.
func ReservedDatetimeNotNil() predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldReservedDatetime)))
	})
}

// CreatedDatetimeEQ applies the EQ predicate on the "created_datetime" field.
func CreatedDatetimeEQ(v time.Time) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedDatetime), v))
	})
}

// CreatedDatetimeNEQ applies the NEQ predicate on the "created_datetime" field.
func CreatedDatetimeNEQ(v time.Time) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedDatetime), v))
	})
}

// CreatedDatetimeIn applies the In predicate on the "created_datetime" field.
func CreatedDatetimeIn(vs ...time.Time) predicate.OrderItemShipGrpInvRes {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedDatetime), v...))
	})
}

// CreatedDatetimeNotIn applies the NotIn predicate on the "created_datetime" field.
func CreatedDatetimeNotIn(vs ...time.Time) predicate.OrderItemShipGrpInvRes {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedDatetime), v...))
	})
}

// CreatedDatetimeGT applies the GT predicate on the "created_datetime" field.
func CreatedDatetimeGT(v time.Time) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedDatetime), v))
	})
}

// CreatedDatetimeGTE applies the GTE predicate on the "created_datetime" field.
func CreatedDatetimeGTE(v time.Time) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedDatetime), v))
	})
}

// CreatedDatetimeLT applies the LT predicate on the "created_datetime" field.
func CreatedDatetimeLT(v time.Time) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedDatetime), v))
	})
}

// CreatedDatetimeLTE applies the LTE predicate on the "created_datetime" field.
func CreatedDatetimeLTE(v time.Time) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedDatetime), v))
	})
}

// CreatedDatetimeIsNil applies the IsNil predicate on the "created_datetime" field.
func CreatedDatetimeIsNil() predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreatedDatetime)))
	})
}

// CreatedDatetimeNotNil applies the NotNil predicate on the "created_datetime" field.
func CreatedDatetimeNotNil() predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreatedDatetime)))
	})
}

// PromisedDatetimeEQ applies the EQ predicate on the "promised_datetime" field.
func PromisedDatetimeEQ(v time.Time) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPromisedDatetime), v))
	})
}

// PromisedDatetimeNEQ applies the NEQ predicate on the "promised_datetime" field.
func PromisedDatetimeNEQ(v time.Time) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPromisedDatetime), v))
	})
}

// PromisedDatetimeIn applies the In predicate on the "promised_datetime" field.
func PromisedDatetimeIn(vs ...time.Time) predicate.OrderItemShipGrpInvRes {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPromisedDatetime), v...))
	})
}

// PromisedDatetimeNotIn applies the NotIn predicate on the "promised_datetime" field.
func PromisedDatetimeNotIn(vs ...time.Time) predicate.OrderItemShipGrpInvRes {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPromisedDatetime), v...))
	})
}

// PromisedDatetimeGT applies the GT predicate on the "promised_datetime" field.
func PromisedDatetimeGT(v time.Time) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPromisedDatetime), v))
	})
}

// PromisedDatetimeGTE applies the GTE predicate on the "promised_datetime" field.
func PromisedDatetimeGTE(v time.Time) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPromisedDatetime), v))
	})
}

// PromisedDatetimeLT applies the LT predicate on the "promised_datetime" field.
func PromisedDatetimeLT(v time.Time) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPromisedDatetime), v))
	})
}

// PromisedDatetimeLTE applies the LTE predicate on the "promised_datetime" field.
func PromisedDatetimeLTE(v time.Time) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPromisedDatetime), v))
	})
}

// PromisedDatetimeIsNil applies the IsNil predicate on the "promised_datetime" field.
func PromisedDatetimeIsNil() predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPromisedDatetime)))
	})
}

// PromisedDatetimeNotNil applies the NotNil predicate on the "promised_datetime" field.
func PromisedDatetimeNotNil() predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPromisedDatetime)))
	})
}

// CurrentPromisedDateEQ applies the EQ predicate on the "current_promised_date" field.
func CurrentPromisedDateEQ(v time.Time) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCurrentPromisedDate), v))
	})
}

// CurrentPromisedDateNEQ applies the NEQ predicate on the "current_promised_date" field.
func CurrentPromisedDateNEQ(v time.Time) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCurrentPromisedDate), v))
	})
}

// CurrentPromisedDateIn applies the In predicate on the "current_promised_date" field.
func CurrentPromisedDateIn(vs ...time.Time) predicate.OrderItemShipGrpInvRes {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCurrentPromisedDate), v...))
	})
}

// CurrentPromisedDateNotIn applies the NotIn predicate on the "current_promised_date" field.
func CurrentPromisedDateNotIn(vs ...time.Time) predicate.OrderItemShipGrpInvRes {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCurrentPromisedDate), v...))
	})
}

// CurrentPromisedDateGT applies the GT predicate on the "current_promised_date" field.
func CurrentPromisedDateGT(v time.Time) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCurrentPromisedDate), v))
	})
}

// CurrentPromisedDateGTE applies the GTE predicate on the "current_promised_date" field.
func CurrentPromisedDateGTE(v time.Time) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCurrentPromisedDate), v))
	})
}

// CurrentPromisedDateLT applies the LT predicate on the "current_promised_date" field.
func CurrentPromisedDateLT(v time.Time) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCurrentPromisedDate), v))
	})
}

// CurrentPromisedDateLTE applies the LTE predicate on the "current_promised_date" field.
func CurrentPromisedDateLTE(v time.Time) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCurrentPromisedDate), v))
	})
}

// CurrentPromisedDateIsNil applies the IsNil predicate on the "current_promised_date" field.
func CurrentPromisedDateIsNil() predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCurrentPromisedDate)))
	})
}

// CurrentPromisedDateNotNil applies the NotNil predicate on the "current_promised_date" field.
func CurrentPromisedDateNotNil() predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCurrentPromisedDate)))
	})
}

// PriorityEQ applies the EQ predicate on the "priority" field.
func PriorityEQ(v Priority) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPriority), v))
	})
}

// PriorityNEQ applies the NEQ predicate on the "priority" field.
func PriorityNEQ(v Priority) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPriority), v))
	})
}

// PriorityIn applies the In predicate on the "priority" field.
func PriorityIn(vs ...Priority) predicate.OrderItemShipGrpInvRes {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPriority), v...))
	})
}

// PriorityNotIn applies the NotIn predicate on the "priority" field.
func PriorityNotIn(vs ...Priority) predicate.OrderItemShipGrpInvRes {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPriority), v...))
	})
}

// PriorityIsNil applies the IsNil predicate on the "priority" field.
func PriorityIsNil() predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPriority)))
	})
}

// PriorityNotNil applies the NotNil predicate on the "priority" field.
func PriorityNotNil() predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPriority)))
	})
}

// SequenceIDEQ applies the EQ predicate on the "sequence_id" field.
func SequenceIDEQ(v int) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSequenceID), v))
	})
}

// SequenceIDNEQ applies the NEQ predicate on the "sequence_id" field.
func SequenceIDNEQ(v int) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSequenceID), v))
	})
}

// SequenceIDIn applies the In predicate on the "sequence_id" field.
func SequenceIDIn(vs ...int) predicate.OrderItemShipGrpInvRes {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSequenceID), v...))
	})
}

// SequenceIDNotIn applies the NotIn predicate on the "sequence_id" field.
func SequenceIDNotIn(vs ...int) predicate.OrderItemShipGrpInvRes {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSequenceID), v...))
	})
}

// SequenceIDGT applies the GT predicate on the "sequence_id" field.
func SequenceIDGT(v int) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSequenceID), v))
	})
}

// SequenceIDGTE applies the GTE predicate on the "sequence_id" field.
func SequenceIDGTE(v int) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSequenceID), v))
	})
}

// SequenceIDLT applies the LT predicate on the "sequence_id" field.
func SequenceIDLT(v int) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSequenceID), v))
	})
}

// SequenceIDLTE applies the LTE predicate on the "sequence_id" field.
func SequenceIDLTE(v int) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSequenceID), v))
	})
}

// SequenceIDIsNil applies the IsNil predicate on the "sequence_id" field.
func SequenceIDIsNil() predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSequenceID)))
	})
}

// SequenceIDNotNil applies the NotNil predicate on the "sequence_id" field.
func SequenceIDNotNil() predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSequenceID)))
	})
}

// OldPickStartDateEQ applies the EQ predicate on the "old_pick_start_date" field.
func OldPickStartDateEQ(v time.Time) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOldPickStartDate), v))
	})
}

// OldPickStartDateNEQ applies the NEQ predicate on the "old_pick_start_date" field.
func OldPickStartDateNEQ(v time.Time) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOldPickStartDate), v))
	})
}

// OldPickStartDateIn applies the In predicate on the "old_pick_start_date" field.
func OldPickStartDateIn(vs ...time.Time) predicate.OrderItemShipGrpInvRes {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOldPickStartDate), v...))
	})
}

// OldPickStartDateNotIn applies the NotIn predicate on the "old_pick_start_date" field.
func OldPickStartDateNotIn(vs ...time.Time) predicate.OrderItemShipGrpInvRes {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOldPickStartDate), v...))
	})
}

// OldPickStartDateGT applies the GT predicate on the "old_pick_start_date" field.
func OldPickStartDateGT(v time.Time) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOldPickStartDate), v))
	})
}

// OldPickStartDateGTE applies the GTE predicate on the "old_pick_start_date" field.
func OldPickStartDateGTE(v time.Time) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOldPickStartDate), v))
	})
}

// OldPickStartDateLT applies the LT predicate on the "old_pick_start_date" field.
func OldPickStartDateLT(v time.Time) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOldPickStartDate), v))
	})
}

// OldPickStartDateLTE applies the LTE predicate on the "old_pick_start_date" field.
func OldPickStartDateLTE(v time.Time) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOldPickStartDate), v))
	})
}

// OldPickStartDateIsNil applies the IsNil predicate on the "old_pick_start_date" field.
func OldPickStartDateIsNil() predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOldPickStartDate)))
	})
}

// OldPickStartDateNotNil applies the NotNil predicate on the "old_pick_start_date" field.
func OldPickStartDateNotNil() predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOldPickStartDate)))
	})
}

// HasOrderHeader applies the HasEdge predicate on the "order_header" edge.
func HasOrderHeader() predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderHeaderTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OrderHeaderTable, OrderHeaderColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderHeaderWith applies the HasEdge predicate on the "order_header" edge with a given conditions (other predicates).
func HasOrderHeaderWith(preds ...predicate.OrderHeader) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderHeaderInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OrderHeaderTable, OrderHeaderColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrderItem applies the HasEdge predicate on the "order_item" edge.
func HasOrderItem() predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderItemTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OrderItemTable, OrderItemColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderItemWith applies the HasEdge predicate on the "order_item" edge with a given conditions (other predicates).
func HasOrderItemWith(preds ...predicate.OrderItem) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderItemInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OrderItemTable, OrderItemColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrderItemShipGroup applies the HasEdge predicate on the "order_item_ship_group" edge.
func HasOrderItemShipGroup() predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderItemShipGroupTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OrderItemShipGroupTable, OrderItemShipGroupColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderItemShipGroupWith applies the HasEdge predicate on the "order_item_ship_group" edge with a given conditions (other predicates).
func HasOrderItemShipGroupWith(preds ...predicate.OrderItemShipGroup) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderItemShipGroupInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OrderItemShipGroupTable, OrderItemShipGroupColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrderItemShipGroupAssoc applies the HasEdge predicate on the "order_item_ship_group_assoc" edge.
func HasOrderItemShipGroupAssoc() predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderItemShipGroupAssocTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OrderItemShipGroupAssocTable, OrderItemShipGroupAssocColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderItemShipGroupAssocWith applies the HasEdge predicate on the "order_item_ship_group_assoc" edge with a given conditions (other predicates).
func HasOrderItemShipGroupAssocWith(preds ...predicate.OrderItemShipGroupAssoc) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderItemShipGroupAssocInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OrderItemShipGroupAssocTable, OrderItemShipGroupAssocColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasInventoryItemDetails applies the HasEdge predicate on the "inventory_item_details" edge.
func HasInventoryItemDetails() predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(InventoryItemDetailsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, InventoryItemDetailsTable, InventoryItemDetailsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasInventoryItemDetailsWith applies the HasEdge predicate on the "inventory_item_details" edge with a given conditions (other predicates).
func HasInventoryItemDetailsWith(preds ...predicate.InventoryItemDetail) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(InventoryItemDetailsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, InventoryItemDetailsTable, InventoryItemDetailsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.OrderItemShipGrpInvRes) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.OrderItemShipGrpInvRes) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.OrderItemShipGrpInvRes) predicate.OrderItemShipGrpInvRes {
	return predicate.OrderItemShipGrpInvRes(func(s *sql.Selector) {
		p(s.Not())
	})
}
