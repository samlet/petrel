// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/inventoryitemdetail"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/orderheader"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/orderitem"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/orderitemshipgroup"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/orderitemshipgroupassoc"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/orderitemshipgrpinvres"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/predicate"
)

// OrderItemShipGrpInvResUpdate is the builder for updating OrderItemShipGrpInvRes entities.
type OrderItemShipGrpInvResUpdate struct {
	config
	hooks    []Hook
	mutation *OrderItemShipGrpInvResMutation
}

// Where adds a new predicate for the OrderItemShipGrpInvResUpdate builder.
func (oisgiru *OrderItemShipGrpInvResUpdate) Where(ps ...predicate.OrderItemShipGrpInvRes) *OrderItemShipGrpInvResUpdate {
	oisgiru.mutation.predicates = append(oisgiru.mutation.predicates, ps...)
	return oisgiru
}

// SetStringRef sets the "string_ref" field.
func (oisgiru *OrderItemShipGrpInvResUpdate) SetStringRef(s string) *OrderItemShipGrpInvResUpdate {
	oisgiru.mutation.SetStringRef(s)
	return oisgiru
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (oisgiru *OrderItemShipGrpInvResUpdate) SetNillableStringRef(s *string) *OrderItemShipGrpInvResUpdate {
	if s != nil {
		oisgiru.SetStringRef(*s)
	}
	return oisgiru
}

// ClearStringRef clears the value of the "string_ref" field.
func (oisgiru *OrderItemShipGrpInvResUpdate) ClearStringRef() *OrderItemShipGrpInvResUpdate {
	oisgiru.mutation.ClearStringRef()
	return oisgiru
}

// SetShipGroupSeqID sets the "ship_group_seq_id" field.
func (oisgiru *OrderItemShipGrpInvResUpdate) SetShipGroupSeqID(i int) *OrderItemShipGrpInvResUpdate {
	oisgiru.mutation.ResetShipGroupSeqID()
	oisgiru.mutation.SetShipGroupSeqID(i)
	return oisgiru
}

// AddShipGroupSeqID adds i to the "ship_group_seq_id" field.
func (oisgiru *OrderItemShipGrpInvResUpdate) AddShipGroupSeqID(i int) *OrderItemShipGrpInvResUpdate {
	oisgiru.mutation.AddShipGroupSeqID(i)
	return oisgiru
}

// SetOrderItemSeqID sets the "order_item_seq_id" field.
func (oisgiru *OrderItemShipGrpInvResUpdate) SetOrderItemSeqID(i int) *OrderItemShipGrpInvResUpdate {
	oisgiru.mutation.ResetOrderItemSeqID()
	oisgiru.mutation.SetOrderItemSeqID(i)
	return oisgiru
}

// AddOrderItemSeqID adds i to the "order_item_seq_id" field.
func (oisgiru *OrderItemShipGrpInvResUpdate) AddOrderItemSeqID(i int) *OrderItemShipGrpInvResUpdate {
	oisgiru.mutation.AddOrderItemSeqID(i)
	return oisgiru
}

// SetInventoryItemID sets the "inventory_item_id" field.
func (oisgiru *OrderItemShipGrpInvResUpdate) SetInventoryItemID(i int) *OrderItemShipGrpInvResUpdate {
	oisgiru.mutation.ResetInventoryItemID()
	oisgiru.mutation.SetInventoryItemID(i)
	return oisgiru
}

// AddInventoryItemID adds i to the "inventory_item_id" field.
func (oisgiru *OrderItemShipGrpInvResUpdate) AddInventoryItemID(i int) *OrderItemShipGrpInvResUpdate {
	oisgiru.mutation.AddInventoryItemID(i)
	return oisgiru
}

// SetReserveOrderEnumID sets the "reserve_order_enum_id" field.
func (oisgiru *OrderItemShipGrpInvResUpdate) SetReserveOrderEnumID(i int) *OrderItemShipGrpInvResUpdate {
	oisgiru.mutation.ResetReserveOrderEnumID()
	oisgiru.mutation.SetReserveOrderEnumID(i)
	return oisgiru
}

// SetNillableReserveOrderEnumID sets the "reserve_order_enum_id" field if the given value is not nil.
func (oisgiru *OrderItemShipGrpInvResUpdate) SetNillableReserveOrderEnumID(i *int) *OrderItemShipGrpInvResUpdate {
	if i != nil {
		oisgiru.SetReserveOrderEnumID(*i)
	}
	return oisgiru
}

// AddReserveOrderEnumID adds i to the "reserve_order_enum_id" field.
func (oisgiru *OrderItemShipGrpInvResUpdate) AddReserveOrderEnumID(i int) *OrderItemShipGrpInvResUpdate {
	oisgiru.mutation.AddReserveOrderEnumID(i)
	return oisgiru
}

// ClearReserveOrderEnumID clears the value of the "reserve_order_enum_id" field.
func (oisgiru *OrderItemShipGrpInvResUpdate) ClearReserveOrderEnumID() *OrderItemShipGrpInvResUpdate {
	oisgiru.mutation.ClearReserveOrderEnumID()
	return oisgiru
}

// SetQuantity sets the "quantity" field.
func (oisgiru *OrderItemShipGrpInvResUpdate) SetQuantity(f float64) *OrderItemShipGrpInvResUpdate {
	oisgiru.mutation.ResetQuantity()
	oisgiru.mutation.SetQuantity(f)
	return oisgiru
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (oisgiru *OrderItemShipGrpInvResUpdate) SetNillableQuantity(f *float64) *OrderItemShipGrpInvResUpdate {
	if f != nil {
		oisgiru.SetQuantity(*f)
	}
	return oisgiru
}

// AddQuantity adds f to the "quantity" field.
func (oisgiru *OrderItemShipGrpInvResUpdate) AddQuantity(f float64) *OrderItemShipGrpInvResUpdate {
	oisgiru.mutation.AddQuantity(f)
	return oisgiru
}

// ClearQuantity clears the value of the "quantity" field.
func (oisgiru *OrderItemShipGrpInvResUpdate) ClearQuantity() *OrderItemShipGrpInvResUpdate {
	oisgiru.mutation.ClearQuantity()
	return oisgiru
}

// SetQuantityNotAvailable sets the "quantity_not_available" field.
func (oisgiru *OrderItemShipGrpInvResUpdate) SetQuantityNotAvailable(f float64) *OrderItemShipGrpInvResUpdate {
	oisgiru.mutation.ResetQuantityNotAvailable()
	oisgiru.mutation.SetQuantityNotAvailable(f)
	return oisgiru
}

// SetNillableQuantityNotAvailable sets the "quantity_not_available" field if the given value is not nil.
func (oisgiru *OrderItemShipGrpInvResUpdate) SetNillableQuantityNotAvailable(f *float64) *OrderItemShipGrpInvResUpdate {
	if f != nil {
		oisgiru.SetQuantityNotAvailable(*f)
	}
	return oisgiru
}

// AddQuantityNotAvailable adds f to the "quantity_not_available" field.
func (oisgiru *OrderItemShipGrpInvResUpdate) AddQuantityNotAvailable(f float64) *OrderItemShipGrpInvResUpdate {
	oisgiru.mutation.AddQuantityNotAvailable(f)
	return oisgiru
}

// ClearQuantityNotAvailable clears the value of the "quantity_not_available" field.
func (oisgiru *OrderItemShipGrpInvResUpdate) ClearQuantityNotAvailable() *OrderItemShipGrpInvResUpdate {
	oisgiru.mutation.ClearQuantityNotAvailable()
	return oisgiru
}

// SetReservedDatetime sets the "reserved_datetime" field.
func (oisgiru *OrderItemShipGrpInvResUpdate) SetReservedDatetime(t time.Time) *OrderItemShipGrpInvResUpdate {
	oisgiru.mutation.SetReservedDatetime(t)
	return oisgiru
}

// SetNillableReservedDatetime sets the "reserved_datetime" field if the given value is not nil.
func (oisgiru *OrderItemShipGrpInvResUpdate) SetNillableReservedDatetime(t *time.Time) *OrderItemShipGrpInvResUpdate {
	if t != nil {
		oisgiru.SetReservedDatetime(*t)
	}
	return oisgiru
}

// ClearReservedDatetime clears the value of the "reserved_datetime" field.
func (oisgiru *OrderItemShipGrpInvResUpdate) ClearReservedDatetime() *OrderItemShipGrpInvResUpdate {
	oisgiru.mutation.ClearReservedDatetime()
	return oisgiru
}

// SetCreatedDatetime sets the "created_datetime" field.
func (oisgiru *OrderItemShipGrpInvResUpdate) SetCreatedDatetime(t time.Time) *OrderItemShipGrpInvResUpdate {
	oisgiru.mutation.SetCreatedDatetime(t)
	return oisgiru
}

// SetNillableCreatedDatetime sets the "created_datetime" field if the given value is not nil.
func (oisgiru *OrderItemShipGrpInvResUpdate) SetNillableCreatedDatetime(t *time.Time) *OrderItemShipGrpInvResUpdate {
	if t != nil {
		oisgiru.SetCreatedDatetime(*t)
	}
	return oisgiru
}

// ClearCreatedDatetime clears the value of the "created_datetime" field.
func (oisgiru *OrderItemShipGrpInvResUpdate) ClearCreatedDatetime() *OrderItemShipGrpInvResUpdate {
	oisgiru.mutation.ClearCreatedDatetime()
	return oisgiru
}

// SetPromisedDatetime sets the "promised_datetime" field.
func (oisgiru *OrderItemShipGrpInvResUpdate) SetPromisedDatetime(t time.Time) *OrderItemShipGrpInvResUpdate {
	oisgiru.mutation.SetPromisedDatetime(t)
	return oisgiru
}

// SetNillablePromisedDatetime sets the "promised_datetime" field if the given value is not nil.
func (oisgiru *OrderItemShipGrpInvResUpdate) SetNillablePromisedDatetime(t *time.Time) *OrderItemShipGrpInvResUpdate {
	if t != nil {
		oisgiru.SetPromisedDatetime(*t)
	}
	return oisgiru
}

// ClearPromisedDatetime clears the value of the "promised_datetime" field.
func (oisgiru *OrderItemShipGrpInvResUpdate) ClearPromisedDatetime() *OrderItemShipGrpInvResUpdate {
	oisgiru.mutation.ClearPromisedDatetime()
	return oisgiru
}

// SetCurrentPromisedDate sets the "current_promised_date" field.
func (oisgiru *OrderItemShipGrpInvResUpdate) SetCurrentPromisedDate(t time.Time) *OrderItemShipGrpInvResUpdate {
	oisgiru.mutation.SetCurrentPromisedDate(t)
	return oisgiru
}

// SetNillableCurrentPromisedDate sets the "current_promised_date" field if the given value is not nil.
func (oisgiru *OrderItemShipGrpInvResUpdate) SetNillableCurrentPromisedDate(t *time.Time) *OrderItemShipGrpInvResUpdate {
	if t != nil {
		oisgiru.SetCurrentPromisedDate(*t)
	}
	return oisgiru
}

// ClearCurrentPromisedDate clears the value of the "current_promised_date" field.
func (oisgiru *OrderItemShipGrpInvResUpdate) ClearCurrentPromisedDate() *OrderItemShipGrpInvResUpdate {
	oisgiru.mutation.ClearCurrentPromisedDate()
	return oisgiru
}

// SetPriority sets the "priority" field.
func (oisgiru *OrderItemShipGrpInvResUpdate) SetPriority(o orderitemshipgrpinvres.Priority) *OrderItemShipGrpInvResUpdate {
	oisgiru.mutation.SetPriority(o)
	return oisgiru
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (oisgiru *OrderItemShipGrpInvResUpdate) SetNillablePriority(o *orderitemshipgrpinvres.Priority) *OrderItemShipGrpInvResUpdate {
	if o != nil {
		oisgiru.SetPriority(*o)
	}
	return oisgiru
}

// ClearPriority clears the value of the "priority" field.
func (oisgiru *OrderItemShipGrpInvResUpdate) ClearPriority() *OrderItemShipGrpInvResUpdate {
	oisgiru.mutation.ClearPriority()
	return oisgiru
}

// SetSequenceID sets the "sequence_id" field.
func (oisgiru *OrderItemShipGrpInvResUpdate) SetSequenceID(i int) *OrderItemShipGrpInvResUpdate {
	oisgiru.mutation.ResetSequenceID()
	oisgiru.mutation.SetSequenceID(i)
	return oisgiru
}

// SetNillableSequenceID sets the "sequence_id" field if the given value is not nil.
func (oisgiru *OrderItemShipGrpInvResUpdate) SetNillableSequenceID(i *int) *OrderItemShipGrpInvResUpdate {
	if i != nil {
		oisgiru.SetSequenceID(*i)
	}
	return oisgiru
}

// AddSequenceID adds i to the "sequence_id" field.
func (oisgiru *OrderItemShipGrpInvResUpdate) AddSequenceID(i int) *OrderItemShipGrpInvResUpdate {
	oisgiru.mutation.AddSequenceID(i)
	return oisgiru
}

// ClearSequenceID clears the value of the "sequence_id" field.
func (oisgiru *OrderItemShipGrpInvResUpdate) ClearSequenceID() *OrderItemShipGrpInvResUpdate {
	oisgiru.mutation.ClearSequenceID()
	return oisgiru
}

// SetOldPickStartDate sets the "old_pick_start_date" field.
func (oisgiru *OrderItemShipGrpInvResUpdate) SetOldPickStartDate(t time.Time) *OrderItemShipGrpInvResUpdate {
	oisgiru.mutation.SetOldPickStartDate(t)
	return oisgiru
}

// SetNillableOldPickStartDate sets the "old_pick_start_date" field if the given value is not nil.
func (oisgiru *OrderItemShipGrpInvResUpdate) SetNillableOldPickStartDate(t *time.Time) *OrderItemShipGrpInvResUpdate {
	if t != nil {
		oisgiru.SetOldPickStartDate(*t)
	}
	return oisgiru
}

// ClearOldPickStartDate clears the value of the "old_pick_start_date" field.
func (oisgiru *OrderItemShipGrpInvResUpdate) ClearOldPickStartDate() *OrderItemShipGrpInvResUpdate {
	oisgiru.mutation.ClearOldPickStartDate()
	return oisgiru
}

// SetOrderHeaderID sets the "order_header" edge to the OrderHeader entity by ID.
func (oisgiru *OrderItemShipGrpInvResUpdate) SetOrderHeaderID(id int) *OrderItemShipGrpInvResUpdate {
	oisgiru.mutation.SetOrderHeaderID(id)
	return oisgiru
}

// SetNillableOrderHeaderID sets the "order_header" edge to the OrderHeader entity by ID if the given value is not nil.
func (oisgiru *OrderItemShipGrpInvResUpdate) SetNillableOrderHeaderID(id *int) *OrderItemShipGrpInvResUpdate {
	if id != nil {
		oisgiru = oisgiru.SetOrderHeaderID(*id)
	}
	return oisgiru
}

// SetOrderHeader sets the "order_header" edge to the OrderHeader entity.
func (oisgiru *OrderItemShipGrpInvResUpdate) SetOrderHeader(o *OrderHeader) *OrderItemShipGrpInvResUpdate {
	return oisgiru.SetOrderHeaderID(o.ID)
}

// SetOrderItemID sets the "order_item" edge to the OrderItem entity by ID.
func (oisgiru *OrderItemShipGrpInvResUpdate) SetOrderItemID(id int) *OrderItemShipGrpInvResUpdate {
	oisgiru.mutation.SetOrderItemID(id)
	return oisgiru
}

// SetNillableOrderItemID sets the "order_item" edge to the OrderItem entity by ID if the given value is not nil.
func (oisgiru *OrderItemShipGrpInvResUpdate) SetNillableOrderItemID(id *int) *OrderItemShipGrpInvResUpdate {
	if id != nil {
		oisgiru = oisgiru.SetOrderItemID(*id)
	}
	return oisgiru
}

// SetOrderItem sets the "order_item" edge to the OrderItem entity.
func (oisgiru *OrderItemShipGrpInvResUpdate) SetOrderItem(o *OrderItem) *OrderItemShipGrpInvResUpdate {
	return oisgiru.SetOrderItemID(o.ID)
}

// SetOrderItemShipGroupID sets the "order_item_ship_group" edge to the OrderItemShipGroup entity by ID.
func (oisgiru *OrderItemShipGrpInvResUpdate) SetOrderItemShipGroupID(id int) *OrderItemShipGrpInvResUpdate {
	oisgiru.mutation.SetOrderItemShipGroupID(id)
	return oisgiru
}

// SetNillableOrderItemShipGroupID sets the "order_item_ship_group" edge to the OrderItemShipGroup entity by ID if the given value is not nil.
func (oisgiru *OrderItemShipGrpInvResUpdate) SetNillableOrderItemShipGroupID(id *int) *OrderItemShipGrpInvResUpdate {
	if id != nil {
		oisgiru = oisgiru.SetOrderItemShipGroupID(*id)
	}
	return oisgiru
}

// SetOrderItemShipGroup sets the "order_item_ship_group" edge to the OrderItemShipGroup entity.
func (oisgiru *OrderItemShipGrpInvResUpdate) SetOrderItemShipGroup(o *OrderItemShipGroup) *OrderItemShipGrpInvResUpdate {
	return oisgiru.SetOrderItemShipGroupID(o.ID)
}

// SetOrderItemShipGroupAssocID sets the "order_item_ship_group_assoc" edge to the OrderItemShipGroupAssoc entity by ID.
func (oisgiru *OrderItemShipGrpInvResUpdate) SetOrderItemShipGroupAssocID(id int) *OrderItemShipGrpInvResUpdate {
	oisgiru.mutation.SetOrderItemShipGroupAssocID(id)
	return oisgiru
}

// SetNillableOrderItemShipGroupAssocID sets the "order_item_ship_group_assoc" edge to the OrderItemShipGroupAssoc entity by ID if the given value is not nil.
func (oisgiru *OrderItemShipGrpInvResUpdate) SetNillableOrderItemShipGroupAssocID(id *int) *OrderItemShipGrpInvResUpdate {
	if id != nil {
		oisgiru = oisgiru.SetOrderItemShipGroupAssocID(*id)
	}
	return oisgiru
}

// SetOrderItemShipGroupAssoc sets the "order_item_ship_group_assoc" edge to the OrderItemShipGroupAssoc entity.
func (oisgiru *OrderItemShipGrpInvResUpdate) SetOrderItemShipGroupAssoc(o *OrderItemShipGroupAssoc) *OrderItemShipGrpInvResUpdate {
	return oisgiru.SetOrderItemShipGroupAssocID(o.ID)
}

// AddInventoryItemDetailIDs adds the "inventory_item_details" edge to the InventoryItemDetail entity by IDs.
func (oisgiru *OrderItemShipGrpInvResUpdate) AddInventoryItemDetailIDs(ids ...int) *OrderItemShipGrpInvResUpdate {
	oisgiru.mutation.AddInventoryItemDetailIDs(ids...)
	return oisgiru
}

// AddInventoryItemDetails adds the "inventory_item_details" edges to the InventoryItemDetail entity.
func (oisgiru *OrderItemShipGrpInvResUpdate) AddInventoryItemDetails(i ...*InventoryItemDetail) *OrderItemShipGrpInvResUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return oisgiru.AddInventoryItemDetailIDs(ids...)
}

// Mutation returns the OrderItemShipGrpInvResMutation object of the builder.
func (oisgiru *OrderItemShipGrpInvResUpdate) Mutation() *OrderItemShipGrpInvResMutation {
	return oisgiru.mutation
}

// ClearOrderHeader clears the "order_header" edge to the OrderHeader entity.
func (oisgiru *OrderItemShipGrpInvResUpdate) ClearOrderHeader() *OrderItemShipGrpInvResUpdate {
	oisgiru.mutation.ClearOrderHeader()
	return oisgiru
}

// ClearOrderItem clears the "order_item" edge to the OrderItem entity.
func (oisgiru *OrderItemShipGrpInvResUpdate) ClearOrderItem() *OrderItemShipGrpInvResUpdate {
	oisgiru.mutation.ClearOrderItem()
	return oisgiru
}

// ClearOrderItemShipGroup clears the "order_item_ship_group" edge to the OrderItemShipGroup entity.
func (oisgiru *OrderItemShipGrpInvResUpdate) ClearOrderItemShipGroup() *OrderItemShipGrpInvResUpdate {
	oisgiru.mutation.ClearOrderItemShipGroup()
	return oisgiru
}

// ClearOrderItemShipGroupAssoc clears the "order_item_ship_group_assoc" edge to the OrderItemShipGroupAssoc entity.
func (oisgiru *OrderItemShipGrpInvResUpdate) ClearOrderItemShipGroupAssoc() *OrderItemShipGrpInvResUpdate {
	oisgiru.mutation.ClearOrderItemShipGroupAssoc()
	return oisgiru
}

// ClearInventoryItemDetails clears all "inventory_item_details" edges to the InventoryItemDetail entity.
func (oisgiru *OrderItemShipGrpInvResUpdate) ClearInventoryItemDetails() *OrderItemShipGrpInvResUpdate {
	oisgiru.mutation.ClearInventoryItemDetails()
	return oisgiru
}

// RemoveInventoryItemDetailIDs removes the "inventory_item_details" edge to InventoryItemDetail entities by IDs.
func (oisgiru *OrderItemShipGrpInvResUpdate) RemoveInventoryItemDetailIDs(ids ...int) *OrderItemShipGrpInvResUpdate {
	oisgiru.mutation.RemoveInventoryItemDetailIDs(ids...)
	return oisgiru
}

// RemoveInventoryItemDetails removes "inventory_item_details" edges to InventoryItemDetail entities.
func (oisgiru *OrderItemShipGrpInvResUpdate) RemoveInventoryItemDetails(i ...*InventoryItemDetail) *OrderItemShipGrpInvResUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return oisgiru.RemoveInventoryItemDetailIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (oisgiru *OrderItemShipGrpInvResUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	oisgiru.defaults()
	if len(oisgiru.hooks) == 0 {
		if err = oisgiru.check(); err != nil {
			return 0, err
		}
		affected, err = oisgiru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderItemShipGrpInvResMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = oisgiru.check(); err != nil {
				return 0, err
			}
			oisgiru.mutation = mutation
			affected, err = oisgiru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(oisgiru.hooks) - 1; i >= 0; i-- {
			mut = oisgiru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, oisgiru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (oisgiru *OrderItemShipGrpInvResUpdate) SaveX(ctx context.Context) int {
	affected, err := oisgiru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (oisgiru *OrderItemShipGrpInvResUpdate) Exec(ctx context.Context) error {
	_, err := oisgiru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oisgiru *OrderItemShipGrpInvResUpdate) ExecX(ctx context.Context) {
	if err := oisgiru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oisgiru *OrderItemShipGrpInvResUpdate) defaults() {
	if _, ok := oisgiru.mutation.UpdateTime(); !ok {
		v := orderitemshipgrpinvres.UpdateDefaultUpdateTime()
		oisgiru.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oisgiru *OrderItemShipGrpInvResUpdate) check() error {
	if v, ok := oisgiru.mutation.Priority(); ok {
		if err := orderitemshipgrpinvres.PriorityValidator(v); err != nil {
			return &ValidationError{Name: "priority", err: fmt.Errorf("ent: validator failed for field \"priority\": %w", err)}
		}
	}
	return nil
}

func (oisgiru *OrderItemShipGrpInvResUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   orderitemshipgrpinvres.Table,
			Columns: orderitemshipgrpinvres.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: orderitemshipgrpinvres.FieldID,
			},
		},
	}
	if ps := oisgiru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oisgiru.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderitemshipgrpinvres.FieldUpdateTime,
		})
	}
	if value, ok := oisgiru.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderitemshipgrpinvres.FieldStringRef,
		})
	}
	if oisgiru.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: orderitemshipgrpinvres.FieldStringRef,
		})
	}
	if value, ok := oisgiru.mutation.ShipGroupSeqID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitemshipgrpinvres.FieldShipGroupSeqID,
		})
	}
	if value, ok := oisgiru.mutation.AddedShipGroupSeqID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitemshipgrpinvres.FieldShipGroupSeqID,
		})
	}
	if value, ok := oisgiru.mutation.OrderItemSeqID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitemshipgrpinvres.FieldOrderItemSeqID,
		})
	}
	if value, ok := oisgiru.mutation.AddedOrderItemSeqID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitemshipgrpinvres.FieldOrderItemSeqID,
		})
	}
	if value, ok := oisgiru.mutation.InventoryItemID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitemshipgrpinvres.FieldInventoryItemID,
		})
	}
	if value, ok := oisgiru.mutation.AddedInventoryItemID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitemshipgrpinvres.FieldInventoryItemID,
		})
	}
	if value, ok := oisgiru.mutation.ReserveOrderEnumID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitemshipgrpinvres.FieldReserveOrderEnumID,
		})
	}
	if value, ok := oisgiru.mutation.AddedReserveOrderEnumID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitemshipgrpinvres.FieldReserveOrderEnumID,
		})
	}
	if oisgiru.mutation.ReserveOrderEnumIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderitemshipgrpinvres.FieldReserveOrderEnumID,
		})
	}
	if value, ok := oisgiru.mutation.Quantity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderitemshipgrpinvres.FieldQuantity,
		})
	}
	if value, ok := oisgiru.mutation.AddedQuantity(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderitemshipgrpinvres.FieldQuantity,
		})
	}
	if oisgiru.mutation.QuantityCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: orderitemshipgrpinvres.FieldQuantity,
		})
	}
	if value, ok := oisgiru.mutation.QuantityNotAvailable(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderitemshipgrpinvres.FieldQuantityNotAvailable,
		})
	}
	if value, ok := oisgiru.mutation.AddedQuantityNotAvailable(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderitemshipgrpinvres.FieldQuantityNotAvailable,
		})
	}
	if oisgiru.mutation.QuantityNotAvailableCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: orderitemshipgrpinvres.FieldQuantityNotAvailable,
		})
	}
	if value, ok := oisgiru.mutation.ReservedDatetime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderitemshipgrpinvres.FieldReservedDatetime,
		})
	}
	if oisgiru.mutation.ReservedDatetimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: orderitemshipgrpinvres.FieldReservedDatetime,
		})
	}
	if value, ok := oisgiru.mutation.CreatedDatetime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderitemshipgrpinvres.FieldCreatedDatetime,
		})
	}
	if oisgiru.mutation.CreatedDatetimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: orderitemshipgrpinvres.FieldCreatedDatetime,
		})
	}
	if value, ok := oisgiru.mutation.PromisedDatetime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderitemshipgrpinvres.FieldPromisedDatetime,
		})
	}
	if oisgiru.mutation.PromisedDatetimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: orderitemshipgrpinvres.FieldPromisedDatetime,
		})
	}
	if value, ok := oisgiru.mutation.CurrentPromisedDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderitemshipgrpinvres.FieldCurrentPromisedDate,
		})
	}
	if oisgiru.mutation.CurrentPromisedDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: orderitemshipgrpinvres.FieldCurrentPromisedDate,
		})
	}
	if value, ok := oisgiru.mutation.Priority(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: orderitemshipgrpinvres.FieldPriority,
		})
	}
	if oisgiru.mutation.PriorityCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: orderitemshipgrpinvres.FieldPriority,
		})
	}
	if value, ok := oisgiru.mutation.SequenceID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitemshipgrpinvres.FieldSequenceID,
		})
	}
	if value, ok := oisgiru.mutation.AddedSequenceID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitemshipgrpinvres.FieldSequenceID,
		})
	}
	if oisgiru.mutation.SequenceIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderitemshipgrpinvres.FieldSequenceID,
		})
	}
	if value, ok := oisgiru.mutation.OldPickStartDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderitemshipgrpinvres.FieldOldPickStartDate,
		})
	}
	if oisgiru.mutation.OldPickStartDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: orderitemshipgrpinvres.FieldOldPickStartDate,
		})
	}
	if oisgiru.mutation.OrderHeaderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderitemshipgrpinvres.OrderHeaderTable,
			Columns: []string{orderitemshipgrpinvres.OrderHeaderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderheader.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oisgiru.mutation.OrderHeaderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderitemshipgrpinvres.OrderHeaderTable,
			Columns: []string{orderitemshipgrpinvres.OrderHeaderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderheader.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oisgiru.mutation.OrderItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderitemshipgrpinvres.OrderItemTable,
			Columns: []string{orderitemshipgrpinvres.OrderItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitem.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oisgiru.mutation.OrderItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderitemshipgrpinvres.OrderItemTable,
			Columns: []string{orderitemshipgrpinvres.OrderItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oisgiru.mutation.OrderItemShipGroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderitemshipgrpinvres.OrderItemShipGroupTable,
			Columns: []string{orderitemshipgrpinvres.OrderItemShipGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitemshipgroup.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oisgiru.mutation.OrderItemShipGroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderitemshipgrpinvres.OrderItemShipGroupTable,
			Columns: []string{orderitemshipgrpinvres.OrderItemShipGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitemshipgroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oisgiru.mutation.OrderItemShipGroupAssocCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderitemshipgrpinvres.OrderItemShipGroupAssocTable,
			Columns: []string{orderitemshipgrpinvres.OrderItemShipGroupAssocColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitemshipgroupassoc.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oisgiru.mutation.OrderItemShipGroupAssocIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderitemshipgrpinvres.OrderItemShipGroupAssocTable,
			Columns: []string{orderitemshipgrpinvres.OrderItemShipGroupAssocColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitemshipgroupassoc.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oisgiru.mutation.InventoryItemDetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderitemshipgrpinvres.InventoryItemDetailsTable,
			Columns: []string{orderitemshipgrpinvres.InventoryItemDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: inventoryitemdetail.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oisgiru.mutation.RemovedInventoryItemDetailsIDs(); len(nodes) > 0 && !oisgiru.mutation.InventoryItemDetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderitemshipgrpinvres.InventoryItemDetailsTable,
			Columns: []string{orderitemshipgrpinvres.InventoryItemDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: inventoryitemdetail.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oisgiru.mutation.InventoryItemDetailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderitemshipgrpinvres.InventoryItemDetailsTable,
			Columns: []string{orderitemshipgrpinvres.InventoryItemDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: inventoryitemdetail.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, oisgiru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderitemshipgrpinvres.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// OrderItemShipGrpInvResUpdateOne is the builder for updating a single OrderItemShipGrpInvRes entity.
type OrderItemShipGrpInvResUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrderItemShipGrpInvResMutation
}

// SetStringRef sets the "string_ref" field.
func (oisgiruo *OrderItemShipGrpInvResUpdateOne) SetStringRef(s string) *OrderItemShipGrpInvResUpdateOne {
	oisgiruo.mutation.SetStringRef(s)
	return oisgiruo
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (oisgiruo *OrderItemShipGrpInvResUpdateOne) SetNillableStringRef(s *string) *OrderItemShipGrpInvResUpdateOne {
	if s != nil {
		oisgiruo.SetStringRef(*s)
	}
	return oisgiruo
}

// ClearStringRef clears the value of the "string_ref" field.
func (oisgiruo *OrderItemShipGrpInvResUpdateOne) ClearStringRef() *OrderItemShipGrpInvResUpdateOne {
	oisgiruo.mutation.ClearStringRef()
	return oisgiruo
}

// SetShipGroupSeqID sets the "ship_group_seq_id" field.
func (oisgiruo *OrderItemShipGrpInvResUpdateOne) SetShipGroupSeqID(i int) *OrderItemShipGrpInvResUpdateOne {
	oisgiruo.mutation.ResetShipGroupSeqID()
	oisgiruo.mutation.SetShipGroupSeqID(i)
	return oisgiruo
}

// AddShipGroupSeqID adds i to the "ship_group_seq_id" field.
func (oisgiruo *OrderItemShipGrpInvResUpdateOne) AddShipGroupSeqID(i int) *OrderItemShipGrpInvResUpdateOne {
	oisgiruo.mutation.AddShipGroupSeqID(i)
	return oisgiruo
}

// SetOrderItemSeqID sets the "order_item_seq_id" field.
func (oisgiruo *OrderItemShipGrpInvResUpdateOne) SetOrderItemSeqID(i int) *OrderItemShipGrpInvResUpdateOne {
	oisgiruo.mutation.ResetOrderItemSeqID()
	oisgiruo.mutation.SetOrderItemSeqID(i)
	return oisgiruo
}

// AddOrderItemSeqID adds i to the "order_item_seq_id" field.
func (oisgiruo *OrderItemShipGrpInvResUpdateOne) AddOrderItemSeqID(i int) *OrderItemShipGrpInvResUpdateOne {
	oisgiruo.mutation.AddOrderItemSeqID(i)
	return oisgiruo
}

// SetInventoryItemID sets the "inventory_item_id" field.
func (oisgiruo *OrderItemShipGrpInvResUpdateOne) SetInventoryItemID(i int) *OrderItemShipGrpInvResUpdateOne {
	oisgiruo.mutation.ResetInventoryItemID()
	oisgiruo.mutation.SetInventoryItemID(i)
	return oisgiruo
}

// AddInventoryItemID adds i to the "inventory_item_id" field.
func (oisgiruo *OrderItemShipGrpInvResUpdateOne) AddInventoryItemID(i int) *OrderItemShipGrpInvResUpdateOne {
	oisgiruo.mutation.AddInventoryItemID(i)
	return oisgiruo
}

// SetReserveOrderEnumID sets the "reserve_order_enum_id" field.
func (oisgiruo *OrderItemShipGrpInvResUpdateOne) SetReserveOrderEnumID(i int) *OrderItemShipGrpInvResUpdateOne {
	oisgiruo.mutation.ResetReserveOrderEnumID()
	oisgiruo.mutation.SetReserveOrderEnumID(i)
	return oisgiruo
}

// SetNillableReserveOrderEnumID sets the "reserve_order_enum_id" field if the given value is not nil.
func (oisgiruo *OrderItemShipGrpInvResUpdateOne) SetNillableReserveOrderEnumID(i *int) *OrderItemShipGrpInvResUpdateOne {
	if i != nil {
		oisgiruo.SetReserveOrderEnumID(*i)
	}
	return oisgiruo
}

// AddReserveOrderEnumID adds i to the "reserve_order_enum_id" field.
func (oisgiruo *OrderItemShipGrpInvResUpdateOne) AddReserveOrderEnumID(i int) *OrderItemShipGrpInvResUpdateOne {
	oisgiruo.mutation.AddReserveOrderEnumID(i)
	return oisgiruo
}

// ClearReserveOrderEnumID clears the value of the "reserve_order_enum_id" field.
func (oisgiruo *OrderItemShipGrpInvResUpdateOne) ClearReserveOrderEnumID() *OrderItemShipGrpInvResUpdateOne {
	oisgiruo.mutation.ClearReserveOrderEnumID()
	return oisgiruo
}

// SetQuantity sets the "quantity" field.
func (oisgiruo *OrderItemShipGrpInvResUpdateOne) SetQuantity(f float64) *OrderItemShipGrpInvResUpdateOne {
	oisgiruo.mutation.ResetQuantity()
	oisgiruo.mutation.SetQuantity(f)
	return oisgiruo
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (oisgiruo *OrderItemShipGrpInvResUpdateOne) SetNillableQuantity(f *float64) *OrderItemShipGrpInvResUpdateOne {
	if f != nil {
		oisgiruo.SetQuantity(*f)
	}
	return oisgiruo
}

// AddQuantity adds f to the "quantity" field.
func (oisgiruo *OrderItemShipGrpInvResUpdateOne) AddQuantity(f float64) *OrderItemShipGrpInvResUpdateOne {
	oisgiruo.mutation.AddQuantity(f)
	return oisgiruo
}

// ClearQuantity clears the value of the "quantity" field.
func (oisgiruo *OrderItemShipGrpInvResUpdateOne) ClearQuantity() *OrderItemShipGrpInvResUpdateOne {
	oisgiruo.mutation.ClearQuantity()
	return oisgiruo
}

// SetQuantityNotAvailable sets the "quantity_not_available" field.
func (oisgiruo *OrderItemShipGrpInvResUpdateOne) SetQuantityNotAvailable(f float64) *OrderItemShipGrpInvResUpdateOne {
	oisgiruo.mutation.ResetQuantityNotAvailable()
	oisgiruo.mutation.SetQuantityNotAvailable(f)
	return oisgiruo
}

// SetNillableQuantityNotAvailable sets the "quantity_not_available" field if the given value is not nil.
func (oisgiruo *OrderItemShipGrpInvResUpdateOne) SetNillableQuantityNotAvailable(f *float64) *OrderItemShipGrpInvResUpdateOne {
	if f != nil {
		oisgiruo.SetQuantityNotAvailable(*f)
	}
	return oisgiruo
}

// AddQuantityNotAvailable adds f to the "quantity_not_available" field.
func (oisgiruo *OrderItemShipGrpInvResUpdateOne) AddQuantityNotAvailable(f float64) *OrderItemShipGrpInvResUpdateOne {
	oisgiruo.mutation.AddQuantityNotAvailable(f)
	return oisgiruo
}

// ClearQuantityNotAvailable clears the value of the "quantity_not_available" field.
func (oisgiruo *OrderItemShipGrpInvResUpdateOne) ClearQuantityNotAvailable() *OrderItemShipGrpInvResUpdateOne {
	oisgiruo.mutation.ClearQuantityNotAvailable()
	return oisgiruo
}

// SetReservedDatetime sets the "reserved_datetime" field.
func (oisgiruo *OrderItemShipGrpInvResUpdateOne) SetReservedDatetime(t time.Time) *OrderItemShipGrpInvResUpdateOne {
	oisgiruo.mutation.SetReservedDatetime(t)
	return oisgiruo
}

// SetNillableReservedDatetime sets the "reserved_datetime" field if the given value is not nil.
func (oisgiruo *OrderItemShipGrpInvResUpdateOne) SetNillableReservedDatetime(t *time.Time) *OrderItemShipGrpInvResUpdateOne {
	if t != nil {
		oisgiruo.SetReservedDatetime(*t)
	}
	return oisgiruo
}

// ClearReservedDatetime clears the value of the "reserved_datetime" field.
func (oisgiruo *OrderItemShipGrpInvResUpdateOne) ClearReservedDatetime() *OrderItemShipGrpInvResUpdateOne {
	oisgiruo.mutation.ClearReservedDatetime()
	return oisgiruo
}

// SetCreatedDatetime sets the "created_datetime" field.
func (oisgiruo *OrderItemShipGrpInvResUpdateOne) SetCreatedDatetime(t time.Time) *OrderItemShipGrpInvResUpdateOne {
	oisgiruo.mutation.SetCreatedDatetime(t)
	return oisgiruo
}

// SetNillableCreatedDatetime sets the "created_datetime" field if the given value is not nil.
func (oisgiruo *OrderItemShipGrpInvResUpdateOne) SetNillableCreatedDatetime(t *time.Time) *OrderItemShipGrpInvResUpdateOne {
	if t != nil {
		oisgiruo.SetCreatedDatetime(*t)
	}
	return oisgiruo
}

// ClearCreatedDatetime clears the value of the "created_datetime" field.
func (oisgiruo *OrderItemShipGrpInvResUpdateOne) ClearCreatedDatetime() *OrderItemShipGrpInvResUpdateOne {
	oisgiruo.mutation.ClearCreatedDatetime()
	return oisgiruo
}

// SetPromisedDatetime sets the "promised_datetime" field.
func (oisgiruo *OrderItemShipGrpInvResUpdateOne) SetPromisedDatetime(t time.Time) *OrderItemShipGrpInvResUpdateOne {
	oisgiruo.mutation.SetPromisedDatetime(t)
	return oisgiruo
}

// SetNillablePromisedDatetime sets the "promised_datetime" field if the given value is not nil.
func (oisgiruo *OrderItemShipGrpInvResUpdateOne) SetNillablePromisedDatetime(t *time.Time) *OrderItemShipGrpInvResUpdateOne {
	if t != nil {
		oisgiruo.SetPromisedDatetime(*t)
	}
	return oisgiruo
}

// ClearPromisedDatetime clears the value of the "promised_datetime" field.
func (oisgiruo *OrderItemShipGrpInvResUpdateOne) ClearPromisedDatetime() *OrderItemShipGrpInvResUpdateOne {
	oisgiruo.mutation.ClearPromisedDatetime()
	return oisgiruo
}

// SetCurrentPromisedDate sets the "current_promised_date" field.
func (oisgiruo *OrderItemShipGrpInvResUpdateOne) SetCurrentPromisedDate(t time.Time) *OrderItemShipGrpInvResUpdateOne {
	oisgiruo.mutation.SetCurrentPromisedDate(t)
	return oisgiruo
}

// SetNillableCurrentPromisedDate sets the "current_promised_date" field if the given value is not nil.
func (oisgiruo *OrderItemShipGrpInvResUpdateOne) SetNillableCurrentPromisedDate(t *time.Time) *OrderItemShipGrpInvResUpdateOne {
	if t != nil {
		oisgiruo.SetCurrentPromisedDate(*t)
	}
	return oisgiruo
}

// ClearCurrentPromisedDate clears the value of the "current_promised_date" field.
func (oisgiruo *OrderItemShipGrpInvResUpdateOne) ClearCurrentPromisedDate() *OrderItemShipGrpInvResUpdateOne {
	oisgiruo.mutation.ClearCurrentPromisedDate()
	return oisgiruo
}

// SetPriority sets the "priority" field.
func (oisgiruo *OrderItemShipGrpInvResUpdateOne) SetPriority(o orderitemshipgrpinvres.Priority) *OrderItemShipGrpInvResUpdateOne {
	oisgiruo.mutation.SetPriority(o)
	return oisgiruo
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (oisgiruo *OrderItemShipGrpInvResUpdateOne) SetNillablePriority(o *orderitemshipgrpinvres.Priority) *OrderItemShipGrpInvResUpdateOne {
	if o != nil {
		oisgiruo.SetPriority(*o)
	}
	return oisgiruo
}

// ClearPriority clears the value of the "priority" field.
func (oisgiruo *OrderItemShipGrpInvResUpdateOne) ClearPriority() *OrderItemShipGrpInvResUpdateOne {
	oisgiruo.mutation.ClearPriority()
	return oisgiruo
}

// SetSequenceID sets the "sequence_id" field.
func (oisgiruo *OrderItemShipGrpInvResUpdateOne) SetSequenceID(i int) *OrderItemShipGrpInvResUpdateOne {
	oisgiruo.mutation.ResetSequenceID()
	oisgiruo.mutation.SetSequenceID(i)
	return oisgiruo
}

// SetNillableSequenceID sets the "sequence_id" field if the given value is not nil.
func (oisgiruo *OrderItemShipGrpInvResUpdateOne) SetNillableSequenceID(i *int) *OrderItemShipGrpInvResUpdateOne {
	if i != nil {
		oisgiruo.SetSequenceID(*i)
	}
	return oisgiruo
}

// AddSequenceID adds i to the "sequence_id" field.
func (oisgiruo *OrderItemShipGrpInvResUpdateOne) AddSequenceID(i int) *OrderItemShipGrpInvResUpdateOne {
	oisgiruo.mutation.AddSequenceID(i)
	return oisgiruo
}

// ClearSequenceID clears the value of the "sequence_id" field.
func (oisgiruo *OrderItemShipGrpInvResUpdateOne) ClearSequenceID() *OrderItemShipGrpInvResUpdateOne {
	oisgiruo.mutation.ClearSequenceID()
	return oisgiruo
}

// SetOldPickStartDate sets the "old_pick_start_date" field.
func (oisgiruo *OrderItemShipGrpInvResUpdateOne) SetOldPickStartDate(t time.Time) *OrderItemShipGrpInvResUpdateOne {
	oisgiruo.mutation.SetOldPickStartDate(t)
	return oisgiruo
}

// SetNillableOldPickStartDate sets the "old_pick_start_date" field if the given value is not nil.
func (oisgiruo *OrderItemShipGrpInvResUpdateOne) SetNillableOldPickStartDate(t *time.Time) *OrderItemShipGrpInvResUpdateOne {
	if t != nil {
		oisgiruo.SetOldPickStartDate(*t)
	}
	return oisgiruo
}

// ClearOldPickStartDate clears the value of the "old_pick_start_date" field.
func (oisgiruo *OrderItemShipGrpInvResUpdateOne) ClearOldPickStartDate() *OrderItemShipGrpInvResUpdateOne {
	oisgiruo.mutation.ClearOldPickStartDate()
	return oisgiruo
}

// SetOrderHeaderID sets the "order_header" edge to the OrderHeader entity by ID.
func (oisgiruo *OrderItemShipGrpInvResUpdateOne) SetOrderHeaderID(id int) *OrderItemShipGrpInvResUpdateOne {
	oisgiruo.mutation.SetOrderHeaderID(id)
	return oisgiruo
}

// SetNillableOrderHeaderID sets the "order_header" edge to the OrderHeader entity by ID if the given value is not nil.
func (oisgiruo *OrderItemShipGrpInvResUpdateOne) SetNillableOrderHeaderID(id *int) *OrderItemShipGrpInvResUpdateOne {
	if id != nil {
		oisgiruo = oisgiruo.SetOrderHeaderID(*id)
	}
	return oisgiruo
}

// SetOrderHeader sets the "order_header" edge to the OrderHeader entity.
func (oisgiruo *OrderItemShipGrpInvResUpdateOne) SetOrderHeader(o *OrderHeader) *OrderItemShipGrpInvResUpdateOne {
	return oisgiruo.SetOrderHeaderID(o.ID)
}

// SetOrderItemID sets the "order_item" edge to the OrderItem entity by ID.
func (oisgiruo *OrderItemShipGrpInvResUpdateOne) SetOrderItemID(id int) *OrderItemShipGrpInvResUpdateOne {
	oisgiruo.mutation.SetOrderItemID(id)
	return oisgiruo
}

// SetNillableOrderItemID sets the "order_item" edge to the OrderItem entity by ID if the given value is not nil.
func (oisgiruo *OrderItemShipGrpInvResUpdateOne) SetNillableOrderItemID(id *int) *OrderItemShipGrpInvResUpdateOne {
	if id != nil {
		oisgiruo = oisgiruo.SetOrderItemID(*id)
	}
	return oisgiruo
}

// SetOrderItem sets the "order_item" edge to the OrderItem entity.
func (oisgiruo *OrderItemShipGrpInvResUpdateOne) SetOrderItem(o *OrderItem) *OrderItemShipGrpInvResUpdateOne {
	return oisgiruo.SetOrderItemID(o.ID)
}

// SetOrderItemShipGroupID sets the "order_item_ship_group" edge to the OrderItemShipGroup entity by ID.
func (oisgiruo *OrderItemShipGrpInvResUpdateOne) SetOrderItemShipGroupID(id int) *OrderItemShipGrpInvResUpdateOne {
	oisgiruo.mutation.SetOrderItemShipGroupID(id)
	return oisgiruo
}

// SetNillableOrderItemShipGroupID sets the "order_item_ship_group" edge to the OrderItemShipGroup entity by ID if the given value is not nil.
func (oisgiruo *OrderItemShipGrpInvResUpdateOne) SetNillableOrderItemShipGroupID(id *int) *OrderItemShipGrpInvResUpdateOne {
	if id != nil {
		oisgiruo = oisgiruo.SetOrderItemShipGroupID(*id)
	}
	return oisgiruo
}

// SetOrderItemShipGroup sets the "order_item_ship_group" edge to the OrderItemShipGroup entity.
func (oisgiruo *OrderItemShipGrpInvResUpdateOne) SetOrderItemShipGroup(o *OrderItemShipGroup) *OrderItemShipGrpInvResUpdateOne {
	return oisgiruo.SetOrderItemShipGroupID(o.ID)
}

// SetOrderItemShipGroupAssocID sets the "order_item_ship_group_assoc" edge to the OrderItemShipGroupAssoc entity by ID.
func (oisgiruo *OrderItemShipGrpInvResUpdateOne) SetOrderItemShipGroupAssocID(id int) *OrderItemShipGrpInvResUpdateOne {
	oisgiruo.mutation.SetOrderItemShipGroupAssocID(id)
	return oisgiruo
}

// SetNillableOrderItemShipGroupAssocID sets the "order_item_ship_group_assoc" edge to the OrderItemShipGroupAssoc entity by ID if the given value is not nil.
func (oisgiruo *OrderItemShipGrpInvResUpdateOne) SetNillableOrderItemShipGroupAssocID(id *int) *OrderItemShipGrpInvResUpdateOne {
	if id != nil {
		oisgiruo = oisgiruo.SetOrderItemShipGroupAssocID(*id)
	}
	return oisgiruo
}

// SetOrderItemShipGroupAssoc sets the "order_item_ship_group_assoc" edge to the OrderItemShipGroupAssoc entity.
func (oisgiruo *OrderItemShipGrpInvResUpdateOne) SetOrderItemShipGroupAssoc(o *OrderItemShipGroupAssoc) *OrderItemShipGrpInvResUpdateOne {
	return oisgiruo.SetOrderItemShipGroupAssocID(o.ID)
}

// AddInventoryItemDetailIDs adds the "inventory_item_details" edge to the InventoryItemDetail entity by IDs.
func (oisgiruo *OrderItemShipGrpInvResUpdateOne) AddInventoryItemDetailIDs(ids ...int) *OrderItemShipGrpInvResUpdateOne {
	oisgiruo.mutation.AddInventoryItemDetailIDs(ids...)
	return oisgiruo
}

// AddInventoryItemDetails adds the "inventory_item_details" edges to the InventoryItemDetail entity.
func (oisgiruo *OrderItemShipGrpInvResUpdateOne) AddInventoryItemDetails(i ...*InventoryItemDetail) *OrderItemShipGrpInvResUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return oisgiruo.AddInventoryItemDetailIDs(ids...)
}

// Mutation returns the OrderItemShipGrpInvResMutation object of the builder.
func (oisgiruo *OrderItemShipGrpInvResUpdateOne) Mutation() *OrderItemShipGrpInvResMutation {
	return oisgiruo.mutation
}

// ClearOrderHeader clears the "order_header" edge to the OrderHeader entity.
func (oisgiruo *OrderItemShipGrpInvResUpdateOne) ClearOrderHeader() *OrderItemShipGrpInvResUpdateOne {
	oisgiruo.mutation.ClearOrderHeader()
	return oisgiruo
}

// ClearOrderItem clears the "order_item" edge to the OrderItem entity.
func (oisgiruo *OrderItemShipGrpInvResUpdateOne) ClearOrderItem() *OrderItemShipGrpInvResUpdateOne {
	oisgiruo.mutation.ClearOrderItem()
	return oisgiruo
}

// ClearOrderItemShipGroup clears the "order_item_ship_group" edge to the OrderItemShipGroup entity.
func (oisgiruo *OrderItemShipGrpInvResUpdateOne) ClearOrderItemShipGroup() *OrderItemShipGrpInvResUpdateOne {
	oisgiruo.mutation.ClearOrderItemShipGroup()
	return oisgiruo
}

// ClearOrderItemShipGroupAssoc clears the "order_item_ship_group_assoc" edge to the OrderItemShipGroupAssoc entity.
func (oisgiruo *OrderItemShipGrpInvResUpdateOne) ClearOrderItemShipGroupAssoc() *OrderItemShipGrpInvResUpdateOne {
	oisgiruo.mutation.ClearOrderItemShipGroupAssoc()
	return oisgiruo
}

// ClearInventoryItemDetails clears all "inventory_item_details" edges to the InventoryItemDetail entity.
func (oisgiruo *OrderItemShipGrpInvResUpdateOne) ClearInventoryItemDetails() *OrderItemShipGrpInvResUpdateOne {
	oisgiruo.mutation.ClearInventoryItemDetails()
	return oisgiruo
}

// RemoveInventoryItemDetailIDs removes the "inventory_item_details" edge to InventoryItemDetail entities by IDs.
func (oisgiruo *OrderItemShipGrpInvResUpdateOne) RemoveInventoryItemDetailIDs(ids ...int) *OrderItemShipGrpInvResUpdateOne {
	oisgiruo.mutation.RemoveInventoryItemDetailIDs(ids...)
	return oisgiruo
}

// RemoveInventoryItemDetails removes "inventory_item_details" edges to InventoryItemDetail entities.
func (oisgiruo *OrderItemShipGrpInvResUpdateOne) RemoveInventoryItemDetails(i ...*InventoryItemDetail) *OrderItemShipGrpInvResUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return oisgiruo.RemoveInventoryItemDetailIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (oisgiruo *OrderItemShipGrpInvResUpdateOne) Select(field string, fields ...string) *OrderItemShipGrpInvResUpdateOne {
	oisgiruo.fields = append([]string{field}, fields...)
	return oisgiruo
}

// Save executes the query and returns the updated OrderItemShipGrpInvRes entity.
func (oisgiruo *OrderItemShipGrpInvResUpdateOne) Save(ctx context.Context) (*OrderItemShipGrpInvRes, error) {
	var (
		err  error
		node *OrderItemShipGrpInvRes
	)
	oisgiruo.defaults()
	if len(oisgiruo.hooks) == 0 {
		if err = oisgiruo.check(); err != nil {
			return nil, err
		}
		node, err = oisgiruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderItemShipGrpInvResMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = oisgiruo.check(); err != nil {
				return nil, err
			}
			oisgiruo.mutation = mutation
			node, err = oisgiruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(oisgiruo.hooks) - 1; i >= 0; i-- {
			mut = oisgiruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, oisgiruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (oisgiruo *OrderItemShipGrpInvResUpdateOne) SaveX(ctx context.Context) *OrderItemShipGrpInvRes {
	node, err := oisgiruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (oisgiruo *OrderItemShipGrpInvResUpdateOne) Exec(ctx context.Context) error {
	_, err := oisgiruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oisgiruo *OrderItemShipGrpInvResUpdateOne) ExecX(ctx context.Context) {
	if err := oisgiruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oisgiruo *OrderItemShipGrpInvResUpdateOne) defaults() {
	if _, ok := oisgiruo.mutation.UpdateTime(); !ok {
		v := orderitemshipgrpinvres.UpdateDefaultUpdateTime()
		oisgiruo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oisgiruo *OrderItemShipGrpInvResUpdateOne) check() error {
	if v, ok := oisgiruo.mutation.Priority(); ok {
		if err := orderitemshipgrpinvres.PriorityValidator(v); err != nil {
			return &ValidationError{Name: "priority", err: fmt.Errorf("ent: validator failed for field \"priority\": %w", err)}
		}
	}
	return nil
}

func (oisgiruo *OrderItemShipGrpInvResUpdateOne) sqlSave(ctx context.Context) (_node *OrderItemShipGrpInvRes, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   orderitemshipgrpinvres.Table,
			Columns: orderitemshipgrpinvres.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: orderitemshipgrpinvres.FieldID,
			},
		},
	}
	id, ok := oisgiruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing OrderItemShipGrpInvRes.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := oisgiruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, orderitemshipgrpinvres.FieldID)
		for _, f := range fields {
			if !orderitemshipgrpinvres.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != orderitemshipgrpinvres.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := oisgiruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oisgiruo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderitemshipgrpinvres.FieldUpdateTime,
		})
	}
	if value, ok := oisgiruo.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderitemshipgrpinvres.FieldStringRef,
		})
	}
	if oisgiruo.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: orderitemshipgrpinvres.FieldStringRef,
		})
	}
	if value, ok := oisgiruo.mutation.ShipGroupSeqID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitemshipgrpinvres.FieldShipGroupSeqID,
		})
	}
	if value, ok := oisgiruo.mutation.AddedShipGroupSeqID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitemshipgrpinvres.FieldShipGroupSeqID,
		})
	}
	if value, ok := oisgiruo.mutation.OrderItemSeqID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitemshipgrpinvres.FieldOrderItemSeqID,
		})
	}
	if value, ok := oisgiruo.mutation.AddedOrderItemSeqID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitemshipgrpinvres.FieldOrderItemSeqID,
		})
	}
	if value, ok := oisgiruo.mutation.InventoryItemID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitemshipgrpinvres.FieldInventoryItemID,
		})
	}
	if value, ok := oisgiruo.mutation.AddedInventoryItemID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitemshipgrpinvres.FieldInventoryItemID,
		})
	}
	if value, ok := oisgiruo.mutation.ReserveOrderEnumID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitemshipgrpinvres.FieldReserveOrderEnumID,
		})
	}
	if value, ok := oisgiruo.mutation.AddedReserveOrderEnumID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitemshipgrpinvres.FieldReserveOrderEnumID,
		})
	}
	if oisgiruo.mutation.ReserveOrderEnumIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderitemshipgrpinvres.FieldReserveOrderEnumID,
		})
	}
	if value, ok := oisgiruo.mutation.Quantity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderitemshipgrpinvres.FieldQuantity,
		})
	}
	if value, ok := oisgiruo.mutation.AddedQuantity(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderitemshipgrpinvres.FieldQuantity,
		})
	}
	if oisgiruo.mutation.QuantityCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: orderitemshipgrpinvres.FieldQuantity,
		})
	}
	if value, ok := oisgiruo.mutation.QuantityNotAvailable(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderitemshipgrpinvres.FieldQuantityNotAvailable,
		})
	}
	if value, ok := oisgiruo.mutation.AddedQuantityNotAvailable(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderitemshipgrpinvres.FieldQuantityNotAvailable,
		})
	}
	if oisgiruo.mutation.QuantityNotAvailableCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: orderitemshipgrpinvres.FieldQuantityNotAvailable,
		})
	}
	if value, ok := oisgiruo.mutation.ReservedDatetime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderitemshipgrpinvres.FieldReservedDatetime,
		})
	}
	if oisgiruo.mutation.ReservedDatetimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: orderitemshipgrpinvres.FieldReservedDatetime,
		})
	}
	if value, ok := oisgiruo.mutation.CreatedDatetime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderitemshipgrpinvres.FieldCreatedDatetime,
		})
	}
	if oisgiruo.mutation.CreatedDatetimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: orderitemshipgrpinvres.FieldCreatedDatetime,
		})
	}
	if value, ok := oisgiruo.mutation.PromisedDatetime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderitemshipgrpinvres.FieldPromisedDatetime,
		})
	}
	if oisgiruo.mutation.PromisedDatetimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: orderitemshipgrpinvres.FieldPromisedDatetime,
		})
	}
	if value, ok := oisgiruo.mutation.CurrentPromisedDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderitemshipgrpinvres.FieldCurrentPromisedDate,
		})
	}
	if oisgiruo.mutation.CurrentPromisedDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: orderitemshipgrpinvres.FieldCurrentPromisedDate,
		})
	}
	if value, ok := oisgiruo.mutation.Priority(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: orderitemshipgrpinvres.FieldPriority,
		})
	}
	if oisgiruo.mutation.PriorityCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: orderitemshipgrpinvres.FieldPriority,
		})
	}
	if value, ok := oisgiruo.mutation.SequenceID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitemshipgrpinvres.FieldSequenceID,
		})
	}
	if value, ok := oisgiruo.mutation.AddedSequenceID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitemshipgrpinvres.FieldSequenceID,
		})
	}
	if oisgiruo.mutation.SequenceIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderitemshipgrpinvres.FieldSequenceID,
		})
	}
	if value, ok := oisgiruo.mutation.OldPickStartDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderitemshipgrpinvres.FieldOldPickStartDate,
		})
	}
	if oisgiruo.mutation.OldPickStartDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: orderitemshipgrpinvres.FieldOldPickStartDate,
		})
	}
	if oisgiruo.mutation.OrderHeaderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderitemshipgrpinvres.OrderHeaderTable,
			Columns: []string{orderitemshipgrpinvres.OrderHeaderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderheader.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oisgiruo.mutation.OrderHeaderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderitemshipgrpinvres.OrderHeaderTable,
			Columns: []string{orderitemshipgrpinvres.OrderHeaderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderheader.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oisgiruo.mutation.OrderItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderitemshipgrpinvres.OrderItemTable,
			Columns: []string{orderitemshipgrpinvres.OrderItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitem.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oisgiruo.mutation.OrderItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderitemshipgrpinvres.OrderItemTable,
			Columns: []string{orderitemshipgrpinvres.OrderItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oisgiruo.mutation.OrderItemShipGroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderitemshipgrpinvres.OrderItemShipGroupTable,
			Columns: []string{orderitemshipgrpinvres.OrderItemShipGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitemshipgroup.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oisgiruo.mutation.OrderItemShipGroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderitemshipgrpinvres.OrderItemShipGroupTable,
			Columns: []string{orderitemshipgrpinvres.OrderItemShipGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitemshipgroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oisgiruo.mutation.OrderItemShipGroupAssocCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderitemshipgrpinvres.OrderItemShipGroupAssocTable,
			Columns: []string{orderitemshipgrpinvres.OrderItemShipGroupAssocColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitemshipgroupassoc.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oisgiruo.mutation.OrderItemShipGroupAssocIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderitemshipgrpinvres.OrderItemShipGroupAssocTable,
			Columns: []string{orderitemshipgrpinvres.OrderItemShipGroupAssocColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitemshipgroupassoc.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oisgiruo.mutation.InventoryItemDetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderitemshipgrpinvres.InventoryItemDetailsTable,
			Columns: []string{orderitemshipgrpinvres.InventoryItemDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: inventoryitemdetail.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oisgiruo.mutation.RemovedInventoryItemDetailsIDs(); len(nodes) > 0 && !oisgiruo.mutation.InventoryItemDetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderitemshipgrpinvres.InventoryItemDetailsTable,
			Columns: []string{orderitemshipgrpinvres.InventoryItemDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: inventoryitemdetail.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oisgiruo.mutation.InventoryItemDetailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderitemshipgrpinvres.InventoryItemDetailsTable,
			Columns: []string{orderitemshipgrpinvres.InventoryItemDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: inventoryitemdetail.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &OrderItemShipGrpInvRes{config: oisgiruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, oisgiruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderitemshipgrpinvres.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
