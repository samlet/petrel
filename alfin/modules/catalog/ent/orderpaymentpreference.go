// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/orderheader"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/orderitem"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/orderitemshipgroup"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/orderpaymentpreference"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productpricepurpose"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/statusitem"
)

// OrderPaymentPreference is the model entity for the OrderPaymentPreference schema.
type OrderPaymentPreference struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// StringRef holds the value of the "string_ref" field.
	StringRef string `json:"string_ref,omitempty"`
	// OrderItemSeqID holds the value of the "order_item_seq_id" field.
	OrderItemSeqID int `json:"order_item_seq_id,omitempty"`
	// ShipGroupSeqID holds the value of the "ship_group_seq_id" field.
	ShipGroupSeqID int `json:"ship_group_seq_id,omitempty"`
	// PaymentMethodTypeID holds the value of the "payment_method_type_id" field.
	PaymentMethodTypeID int `json:"payment_method_type_id,omitempty"`
	// PaymentMethodID holds the value of the "payment_method_id" field.
	PaymentMethodID int `json:"payment_method_id,omitempty"`
	// FinAccountID holds the value of the "fin_account_id" field.
	FinAccountID int `json:"fin_account_id,omitempty"`
	// SecurityCode holds the value of the "security_code" field.
	SecurityCode string `json:"security_code,omitempty"`
	// Track2 holds the value of the "track_2" field.
	Track2 string `json:"track_2,omitempty"`
	// PresentFlag holds the value of the "present_flag" field.
	PresentFlag orderpaymentpreference.PresentFlag `json:"present_flag,omitempty"`
	// SwipedFlag holds the value of the "swiped_flag" field.
	SwipedFlag orderpaymentpreference.SwipedFlag `json:"swiped_flag,omitempty"`
	// OverflowFlag holds the value of the "overflow_flag" field.
	OverflowFlag orderpaymentpreference.OverflowFlag `json:"overflow_flag,omitempty"`
	// MaxAmount holds the value of the "max_amount" field.
	MaxAmount float64 `json:"max_amount,omitempty"`
	// ProcessAttempt holds the value of the "process_attempt" field.
	ProcessAttempt int `json:"process_attempt,omitempty"`
	// BillingPostalCode holds the value of the "billing_postal_code" field.
	BillingPostalCode string `json:"billing_postal_code,omitempty"`
	// ManualAuthCode holds the value of the "manual_auth_code" field.
	ManualAuthCode string `json:"manual_auth_code,omitempty"`
	// ManualRefNum holds the value of the "manual_ref_num" field.
	ManualRefNum string `json:"manual_ref_num,omitempty"`
	// NeedsNsfRetry holds the value of the "needs_nsf_retry" field.
	NeedsNsfRetry orderpaymentpreference.NeedsNsfRetry `json:"needs_nsf_retry,omitempty"`
	// CreatedDate holds the value of the "created_date" field.
	CreatedDate time.Time `json:"created_date,omitempty"`
	// CreatedByUserLogin holds the value of the "created_by_user_login" field.
	CreatedByUserLogin string `json:"created_by_user_login,omitempty"`
	// LastModifiedDate holds the value of the "last_modified_date" field.
	LastModifiedDate time.Time `json:"last_modified_date,omitempty"`
	// LastModifiedByUserLogin holds the value of the "last_modified_by_user_login" field.
	LastModifiedByUserLogin string `json:"last_modified_by_user_login,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OrderPaymentPreferenceQuery when eager-loading is set.
	Edges                                           OrderPaymentPreferenceEdges `json:"edges"`
	order_header_order_payment_preferences          *int
	order_item_order_payment_preferences            *int
	order_item_ship_group_order_payment_preferences *int
	product_price_purpose_order_payment_preferences *int
	status_item_order_payment_preferences           *int
}

// OrderPaymentPreferenceEdges holds the relations/edges for other nodes in the graph.
type OrderPaymentPreferenceEdges struct {
	// OrderHeader holds the value of the order_header edge.
	OrderHeader *OrderHeader `json:"order_header,omitempty"`
	// OrderItem holds the value of the order_item edge.
	OrderItem *OrderItem `json:"order_item,omitempty"`
	// OrderItemShipGroup holds the value of the order_item_ship_group edge.
	OrderItemShipGroup *OrderItemShipGroup `json:"order_item_ship_group,omitempty"`
	// ProductPricePurpose holds the value of the product_price_purpose edge.
	ProductPricePurpose *ProductPricePurpose `json:"product_price_purpose,omitempty"`
	// StatusItem holds the value of the status_item edge.
	StatusItem *StatusItem `json:"status_item,omitempty"`
	// OrderStatuses holds the value of the order_statuses edge.
	OrderStatuses []*OrderStatus `json:"order_statuses,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [6]bool
}

// OrderHeaderOrErr returns the OrderHeader value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderPaymentPreferenceEdges) OrderHeaderOrErr() (*OrderHeader, error) {
	if e.loadedTypes[0] {
		if e.OrderHeader == nil {
			// The edge order_header was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: orderheader.Label}
		}
		return e.OrderHeader, nil
	}
	return nil, &NotLoadedError{edge: "order_header"}
}

// OrderItemOrErr returns the OrderItem value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderPaymentPreferenceEdges) OrderItemOrErr() (*OrderItem, error) {
	if e.loadedTypes[1] {
		if e.OrderItem == nil {
			// The edge order_item was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: orderitem.Label}
		}
		return e.OrderItem, nil
	}
	return nil, &NotLoadedError{edge: "order_item"}
}

// OrderItemShipGroupOrErr returns the OrderItemShipGroup value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderPaymentPreferenceEdges) OrderItemShipGroupOrErr() (*OrderItemShipGroup, error) {
	if e.loadedTypes[2] {
		if e.OrderItemShipGroup == nil {
			// The edge order_item_ship_group was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: orderitemshipgroup.Label}
		}
		return e.OrderItemShipGroup, nil
	}
	return nil, &NotLoadedError{edge: "order_item_ship_group"}
}

// ProductPricePurposeOrErr returns the ProductPricePurpose value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderPaymentPreferenceEdges) ProductPricePurposeOrErr() (*ProductPricePurpose, error) {
	if e.loadedTypes[3] {
		if e.ProductPricePurpose == nil {
			// The edge product_price_purpose was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: productpricepurpose.Label}
		}
		return e.ProductPricePurpose, nil
	}
	return nil, &NotLoadedError{edge: "product_price_purpose"}
}

// StatusItemOrErr returns the StatusItem value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderPaymentPreferenceEdges) StatusItemOrErr() (*StatusItem, error) {
	if e.loadedTypes[4] {
		if e.StatusItem == nil {
			// The edge status_item was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: statusitem.Label}
		}
		return e.StatusItem, nil
	}
	return nil, &NotLoadedError{edge: "status_item"}
}

// OrderStatusesOrErr returns the OrderStatuses value or an error if the edge
// was not loaded in eager-loading.
func (e OrderPaymentPreferenceEdges) OrderStatusesOrErr() ([]*OrderStatus, error) {
	if e.loadedTypes[5] {
		return e.OrderStatuses, nil
	}
	return nil, &NotLoadedError{edge: "order_statuses"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OrderPaymentPreference) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case orderpaymentpreference.FieldMaxAmount:
			values[i] = new(sql.NullFloat64)
		case orderpaymentpreference.FieldID, orderpaymentpreference.FieldOrderItemSeqID, orderpaymentpreference.FieldShipGroupSeqID, orderpaymentpreference.FieldPaymentMethodTypeID, orderpaymentpreference.FieldPaymentMethodID, orderpaymentpreference.FieldFinAccountID, orderpaymentpreference.FieldProcessAttempt:
			values[i] = new(sql.NullInt64)
		case orderpaymentpreference.FieldStringRef, orderpaymentpreference.FieldSecurityCode, orderpaymentpreference.FieldTrack2, orderpaymentpreference.FieldPresentFlag, orderpaymentpreference.FieldSwipedFlag, orderpaymentpreference.FieldOverflowFlag, orderpaymentpreference.FieldBillingPostalCode, orderpaymentpreference.FieldManualAuthCode, orderpaymentpreference.FieldManualRefNum, orderpaymentpreference.FieldNeedsNsfRetry, orderpaymentpreference.FieldCreatedByUserLogin, orderpaymentpreference.FieldLastModifiedByUserLogin:
			values[i] = new(sql.NullString)
		case orderpaymentpreference.FieldCreateTime, orderpaymentpreference.FieldUpdateTime, orderpaymentpreference.FieldCreatedDate, orderpaymentpreference.FieldLastModifiedDate:
			values[i] = new(sql.NullTime)
		case orderpaymentpreference.ForeignKeys[0]: // order_header_order_payment_preferences
			values[i] = new(sql.NullInt64)
		case orderpaymentpreference.ForeignKeys[1]: // order_item_order_payment_preferences
			values[i] = new(sql.NullInt64)
		case orderpaymentpreference.ForeignKeys[2]: // order_item_ship_group_order_payment_preferences
			values[i] = new(sql.NullInt64)
		case orderpaymentpreference.ForeignKeys[3]: // product_price_purpose_order_payment_preferences
			values[i] = new(sql.NullInt64)
		case orderpaymentpreference.ForeignKeys[4]: // status_item_order_payment_preferences
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type OrderPaymentPreference", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OrderPaymentPreference fields.
func (opp *OrderPaymentPreference) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case orderpaymentpreference.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			opp.ID = int(value.Int64)
		case orderpaymentpreference.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				opp.CreateTime = value.Time
			}
		case orderpaymentpreference.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				opp.UpdateTime = value.Time
			}
		case orderpaymentpreference.FieldStringRef:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field string_ref", values[i])
			} else if value.Valid {
				opp.StringRef = value.String
			}
		case orderpaymentpreference.FieldOrderItemSeqID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order_item_seq_id", values[i])
			} else if value.Valid {
				opp.OrderItemSeqID = int(value.Int64)
			}
		case orderpaymentpreference.FieldShipGroupSeqID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ship_group_seq_id", values[i])
			} else if value.Valid {
				opp.ShipGroupSeqID = int(value.Int64)
			}
		case orderpaymentpreference.FieldPaymentMethodTypeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field payment_method_type_id", values[i])
			} else if value.Valid {
				opp.PaymentMethodTypeID = int(value.Int64)
			}
		case orderpaymentpreference.FieldPaymentMethodID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field payment_method_id", values[i])
			} else if value.Valid {
				opp.PaymentMethodID = int(value.Int64)
			}
		case orderpaymentpreference.FieldFinAccountID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field fin_account_id", values[i])
			} else if value.Valid {
				opp.FinAccountID = int(value.Int64)
			}
		case orderpaymentpreference.FieldSecurityCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field security_code", values[i])
			} else if value.Valid {
				opp.SecurityCode = value.String
			}
		case orderpaymentpreference.FieldTrack2:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field track_2", values[i])
			} else if value.Valid {
				opp.Track2 = value.String
			}
		case orderpaymentpreference.FieldPresentFlag:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field present_flag", values[i])
			} else if value.Valid {
				opp.PresentFlag = orderpaymentpreference.PresentFlag(value.String)
			}
		case orderpaymentpreference.FieldSwipedFlag:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field swiped_flag", values[i])
			} else if value.Valid {
				opp.SwipedFlag = orderpaymentpreference.SwipedFlag(value.String)
			}
		case orderpaymentpreference.FieldOverflowFlag:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field overflow_flag", values[i])
			} else if value.Valid {
				opp.OverflowFlag = orderpaymentpreference.OverflowFlag(value.String)
			}
		case orderpaymentpreference.FieldMaxAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field max_amount", values[i])
			} else if value.Valid {
				opp.MaxAmount = value.Float64
			}
		case orderpaymentpreference.FieldProcessAttempt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field process_attempt", values[i])
			} else if value.Valid {
				opp.ProcessAttempt = int(value.Int64)
			}
		case orderpaymentpreference.FieldBillingPostalCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field billing_postal_code", values[i])
			} else if value.Valid {
				opp.BillingPostalCode = value.String
			}
		case orderpaymentpreference.FieldManualAuthCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field manual_auth_code", values[i])
			} else if value.Valid {
				opp.ManualAuthCode = value.String
			}
		case orderpaymentpreference.FieldManualRefNum:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field manual_ref_num", values[i])
			} else if value.Valid {
				opp.ManualRefNum = value.String
			}
		case orderpaymentpreference.FieldNeedsNsfRetry:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field needs_nsf_retry", values[i])
			} else if value.Valid {
				opp.NeedsNsfRetry = orderpaymentpreference.NeedsNsfRetry(value.String)
			}
		case orderpaymentpreference.FieldCreatedDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_date", values[i])
			} else if value.Valid {
				opp.CreatedDate = value.Time
			}
		case orderpaymentpreference.FieldCreatedByUserLogin:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by_user_login", values[i])
			} else if value.Valid {
				opp.CreatedByUserLogin = value.String
			}
		case orderpaymentpreference.FieldLastModifiedDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_modified_date", values[i])
			} else if value.Valid {
				opp.LastModifiedDate = value.Time
			}
		case orderpaymentpreference.FieldLastModifiedByUserLogin:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_modified_by_user_login", values[i])
			} else if value.Valid {
				opp.LastModifiedByUserLogin = value.String
			}
		case orderpaymentpreference.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field order_header_order_payment_preferences", value)
			} else if value.Valid {
				opp.order_header_order_payment_preferences = new(int)
				*opp.order_header_order_payment_preferences = int(value.Int64)
			}
		case orderpaymentpreference.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field order_item_order_payment_preferences", value)
			} else if value.Valid {
				opp.order_item_order_payment_preferences = new(int)
				*opp.order_item_order_payment_preferences = int(value.Int64)
			}
		case orderpaymentpreference.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field order_item_ship_group_order_payment_preferences", value)
			} else if value.Valid {
				opp.order_item_ship_group_order_payment_preferences = new(int)
				*opp.order_item_ship_group_order_payment_preferences = int(value.Int64)
			}
		case orderpaymentpreference.ForeignKeys[3]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field product_price_purpose_order_payment_preferences", value)
			} else if value.Valid {
				opp.product_price_purpose_order_payment_preferences = new(int)
				*opp.product_price_purpose_order_payment_preferences = int(value.Int64)
			}
		case orderpaymentpreference.ForeignKeys[4]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field status_item_order_payment_preferences", value)
			} else if value.Valid {
				opp.status_item_order_payment_preferences = new(int)
				*opp.status_item_order_payment_preferences = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryOrderHeader queries the "order_header" edge of the OrderPaymentPreference entity.
func (opp *OrderPaymentPreference) QueryOrderHeader() *OrderHeaderQuery {
	return (&OrderPaymentPreferenceClient{config: opp.config}).QueryOrderHeader(opp)
}

// QueryOrderItem queries the "order_item" edge of the OrderPaymentPreference entity.
func (opp *OrderPaymentPreference) QueryOrderItem() *OrderItemQuery {
	return (&OrderPaymentPreferenceClient{config: opp.config}).QueryOrderItem(opp)
}

// QueryOrderItemShipGroup queries the "order_item_ship_group" edge of the OrderPaymentPreference entity.
func (opp *OrderPaymentPreference) QueryOrderItemShipGroup() *OrderItemShipGroupQuery {
	return (&OrderPaymentPreferenceClient{config: opp.config}).QueryOrderItemShipGroup(opp)
}

// QueryProductPricePurpose queries the "product_price_purpose" edge of the OrderPaymentPreference entity.
func (opp *OrderPaymentPreference) QueryProductPricePurpose() *ProductPricePurposeQuery {
	return (&OrderPaymentPreferenceClient{config: opp.config}).QueryProductPricePurpose(opp)
}

// QueryStatusItem queries the "status_item" edge of the OrderPaymentPreference entity.
func (opp *OrderPaymentPreference) QueryStatusItem() *StatusItemQuery {
	return (&OrderPaymentPreferenceClient{config: opp.config}).QueryStatusItem(opp)
}

// QueryOrderStatuses queries the "order_statuses" edge of the OrderPaymentPreference entity.
func (opp *OrderPaymentPreference) QueryOrderStatuses() *OrderStatusQuery {
	return (&OrderPaymentPreferenceClient{config: opp.config}).QueryOrderStatuses(opp)
}

// Update returns a builder for updating this OrderPaymentPreference.
// Note that you need to call OrderPaymentPreference.Unwrap() before calling this method if this OrderPaymentPreference
// was returned from a transaction, and the transaction was committed or rolled back.
func (opp *OrderPaymentPreference) Update() *OrderPaymentPreferenceUpdateOne {
	return (&OrderPaymentPreferenceClient{config: opp.config}).UpdateOne(opp)
}

// Unwrap unwraps the OrderPaymentPreference entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (opp *OrderPaymentPreference) Unwrap() *OrderPaymentPreference {
	tx, ok := opp.config.driver.(*txDriver)
	if !ok {
		panic("ent: OrderPaymentPreference is not a transactional entity")
	}
	opp.config.driver = tx.drv
	return opp
}

// String implements the fmt.Stringer.
func (opp *OrderPaymentPreference) String() string {
	var builder strings.Builder
	builder.WriteString("OrderPaymentPreference(")
	builder.WriteString(fmt.Sprintf("id=%v", opp.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(opp.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(opp.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", string_ref=")
	builder.WriteString(opp.StringRef)
	builder.WriteString(", order_item_seq_id=")
	builder.WriteString(fmt.Sprintf("%v", opp.OrderItemSeqID))
	builder.WriteString(", ship_group_seq_id=")
	builder.WriteString(fmt.Sprintf("%v", opp.ShipGroupSeqID))
	builder.WriteString(", payment_method_type_id=")
	builder.WriteString(fmt.Sprintf("%v", opp.PaymentMethodTypeID))
	builder.WriteString(", payment_method_id=")
	builder.WriteString(fmt.Sprintf("%v", opp.PaymentMethodID))
	builder.WriteString(", fin_account_id=")
	builder.WriteString(fmt.Sprintf("%v", opp.FinAccountID))
	builder.WriteString(", security_code=")
	builder.WriteString(opp.SecurityCode)
	builder.WriteString(", track_2=")
	builder.WriteString(opp.Track2)
	builder.WriteString(", present_flag=")
	builder.WriteString(fmt.Sprintf("%v", opp.PresentFlag))
	builder.WriteString(", swiped_flag=")
	builder.WriteString(fmt.Sprintf("%v", opp.SwipedFlag))
	builder.WriteString(", overflow_flag=")
	builder.WriteString(fmt.Sprintf("%v", opp.OverflowFlag))
	builder.WriteString(", max_amount=")
	builder.WriteString(fmt.Sprintf("%v", opp.MaxAmount))
	builder.WriteString(", process_attempt=")
	builder.WriteString(fmt.Sprintf("%v", opp.ProcessAttempt))
	builder.WriteString(", billing_postal_code=")
	builder.WriteString(opp.BillingPostalCode)
	builder.WriteString(", manual_auth_code=")
	builder.WriteString(opp.ManualAuthCode)
	builder.WriteString(", manual_ref_num=")
	builder.WriteString(opp.ManualRefNum)
	builder.WriteString(", needs_nsf_retry=")
	builder.WriteString(fmt.Sprintf("%v", opp.NeedsNsfRetry))
	builder.WriteString(", created_date=")
	builder.WriteString(opp.CreatedDate.Format(time.ANSIC))
	builder.WriteString(", created_by_user_login=")
	builder.WriteString(opp.CreatedByUserLogin)
	builder.WriteString(", last_modified_date=")
	builder.WriteString(opp.LastModifiedDate.Format(time.ANSIC))
	builder.WriteString(", last_modified_by_user_login=")
	builder.WriteString(opp.LastModifiedByUserLogin)
	builder.WriteByte(')')
	return builder.String()
}

// OrderPaymentPreferences is a parsable slice of OrderPaymentPreference.
type OrderPaymentPreferences []*OrderPaymentPreference

func (opp OrderPaymentPreferences) config(cfg config) {
	for _i := range opp {
		opp[_i].config = cfg
	}
}
