// Code generated by entc, DO NOT EDIT.

package orderpaymentpreference

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// StringRef applies equality check predicate on the "string_ref" field. It's identical to StringRefEQ.
func StringRef(v string) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStringRef), v))
	})
}

// OrderItemSeqID applies equality check predicate on the "order_item_seq_id" field. It's identical to OrderItemSeqIDEQ.
func OrderItemSeqID(v int) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderItemSeqID), v))
	})
}

// ShipGroupSeqID applies equality check predicate on the "ship_group_seq_id" field. It's identical to ShipGroupSeqIDEQ.
func ShipGroupSeqID(v int) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShipGroupSeqID), v))
	})
}

// PaymentMethodTypeID applies equality check predicate on the "payment_method_type_id" field. It's identical to PaymentMethodTypeIDEQ.
func PaymentMethodTypeID(v int) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPaymentMethodTypeID), v))
	})
}

// PaymentMethodID applies equality check predicate on the "payment_method_id" field. It's identical to PaymentMethodIDEQ.
func PaymentMethodID(v int) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPaymentMethodID), v))
	})
}

// FinAccountID applies equality check predicate on the "fin_account_id" field. It's identical to FinAccountIDEQ.
func FinAccountID(v int) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFinAccountID), v))
	})
}

// SecurityCode applies equality check predicate on the "security_code" field. It's identical to SecurityCodeEQ.
func SecurityCode(v string) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSecurityCode), v))
	})
}

// Track2 applies equality check predicate on the "track_2" field. It's identical to Track2EQ.
func Track2(v string) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTrack2), v))
	})
}

// MaxAmount applies equality check predicate on the "max_amount" field. It's identical to MaxAmountEQ.
func MaxAmount(v float64) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMaxAmount), v))
	})
}

// ProcessAttempt applies equality check predicate on the "process_attempt" field. It's identical to ProcessAttemptEQ.
func ProcessAttempt(v int) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProcessAttempt), v))
	})
}

// BillingPostalCode applies equality check predicate on the "billing_postal_code" field. It's identical to BillingPostalCodeEQ.
func BillingPostalCode(v string) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBillingPostalCode), v))
	})
}

// ManualAuthCode applies equality check predicate on the "manual_auth_code" field. It's identical to ManualAuthCodeEQ.
func ManualAuthCode(v string) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldManualAuthCode), v))
	})
}

// ManualRefNum applies equality check predicate on the "manual_ref_num" field. It's identical to ManualRefNumEQ.
func ManualRefNum(v string) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldManualRefNum), v))
	})
}

// CreatedDate applies equality check predicate on the "created_date" field. It's identical to CreatedDateEQ.
func CreatedDate(v time.Time) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedDate), v))
	})
}

// CreatedByUserLogin applies equality check predicate on the "created_by_user_login" field. It's identical to CreatedByUserLoginEQ.
func CreatedByUserLogin(v string) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedByUserLogin), v))
	})
}

// LastModifiedDate applies equality check predicate on the "last_modified_date" field. It's identical to LastModifiedDateEQ.
func LastModifiedDate(v time.Time) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastModifiedDate), v))
	})
}

// LastModifiedByUserLogin applies equality check predicate on the "last_modified_by_user_login" field. It's identical to LastModifiedByUserLoginEQ.
func LastModifiedByUserLogin(v string) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastModifiedByUserLogin), v))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.OrderPaymentPreference {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.OrderPaymentPreference {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), v))
	})
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.OrderPaymentPreference {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.OrderPaymentPreference {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateTime), v))
	})
}

// StringRefEQ applies the EQ predicate on the "string_ref" field.
func StringRefEQ(v string) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStringRef), v))
	})
}

// StringRefNEQ applies the NEQ predicate on the "string_ref" field.
func StringRefNEQ(v string) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStringRef), v))
	})
}

// StringRefIn applies the In predicate on the "string_ref" field.
func StringRefIn(vs ...string) predicate.OrderPaymentPreference {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStringRef), v...))
	})
}

// StringRefNotIn applies the NotIn predicate on the "string_ref" field.
func StringRefNotIn(vs ...string) predicate.OrderPaymentPreference {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStringRef), v...))
	})
}

// StringRefGT applies the GT predicate on the "string_ref" field.
func StringRefGT(v string) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStringRef), v))
	})
}

// StringRefGTE applies the GTE predicate on the "string_ref" field.
func StringRefGTE(v string) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStringRef), v))
	})
}

// StringRefLT applies the LT predicate on the "string_ref" field.
func StringRefLT(v string) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStringRef), v))
	})
}

// StringRefLTE applies the LTE predicate on the "string_ref" field.
func StringRefLTE(v string) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStringRef), v))
	})
}

// StringRefContains applies the Contains predicate on the "string_ref" field.
func StringRefContains(v string) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStringRef), v))
	})
}

// StringRefHasPrefix applies the HasPrefix predicate on the "string_ref" field.
func StringRefHasPrefix(v string) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStringRef), v))
	})
}

// StringRefHasSuffix applies the HasSuffix predicate on the "string_ref" field.
func StringRefHasSuffix(v string) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStringRef), v))
	})
}

// StringRefIsNil applies the IsNil predicate on the "string_ref" field.
func StringRefIsNil() predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStringRef)))
	})
}

// StringRefNotNil applies the NotNil predicate on the "string_ref" field.
func StringRefNotNil() predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStringRef)))
	})
}

// StringRefEqualFold applies the EqualFold predicate on the "string_ref" field.
func StringRefEqualFold(v string) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStringRef), v))
	})
}

// StringRefContainsFold applies the ContainsFold predicate on the "string_ref" field.
func StringRefContainsFold(v string) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStringRef), v))
	})
}

// OrderItemSeqIDEQ applies the EQ predicate on the "order_item_seq_id" field.
func OrderItemSeqIDEQ(v int) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderItemSeqID), v))
	})
}

// OrderItemSeqIDNEQ applies the NEQ predicate on the "order_item_seq_id" field.
func OrderItemSeqIDNEQ(v int) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOrderItemSeqID), v))
	})
}

// OrderItemSeqIDIn applies the In predicate on the "order_item_seq_id" field.
func OrderItemSeqIDIn(vs ...int) predicate.OrderPaymentPreference {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOrderItemSeqID), v...))
	})
}

// OrderItemSeqIDNotIn applies the NotIn predicate on the "order_item_seq_id" field.
func OrderItemSeqIDNotIn(vs ...int) predicate.OrderPaymentPreference {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOrderItemSeqID), v...))
	})
}

// OrderItemSeqIDGT applies the GT predicate on the "order_item_seq_id" field.
func OrderItemSeqIDGT(v int) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOrderItemSeqID), v))
	})
}

// OrderItemSeqIDGTE applies the GTE predicate on the "order_item_seq_id" field.
func OrderItemSeqIDGTE(v int) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOrderItemSeqID), v))
	})
}

// OrderItemSeqIDLT applies the LT predicate on the "order_item_seq_id" field.
func OrderItemSeqIDLT(v int) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOrderItemSeqID), v))
	})
}

// OrderItemSeqIDLTE applies the LTE predicate on the "order_item_seq_id" field.
func OrderItemSeqIDLTE(v int) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOrderItemSeqID), v))
	})
}

// OrderItemSeqIDIsNil applies the IsNil predicate on the "order_item_seq_id" field.
func OrderItemSeqIDIsNil() predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOrderItemSeqID)))
	})
}

// OrderItemSeqIDNotNil applies the NotNil predicate on the "order_item_seq_id" field.
func OrderItemSeqIDNotNil() predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOrderItemSeqID)))
	})
}

// ShipGroupSeqIDEQ applies the EQ predicate on the "ship_group_seq_id" field.
func ShipGroupSeqIDEQ(v int) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShipGroupSeqID), v))
	})
}

// ShipGroupSeqIDNEQ applies the NEQ predicate on the "ship_group_seq_id" field.
func ShipGroupSeqIDNEQ(v int) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShipGroupSeqID), v))
	})
}

// ShipGroupSeqIDIn applies the In predicate on the "ship_group_seq_id" field.
func ShipGroupSeqIDIn(vs ...int) predicate.OrderPaymentPreference {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldShipGroupSeqID), v...))
	})
}

// ShipGroupSeqIDNotIn applies the NotIn predicate on the "ship_group_seq_id" field.
func ShipGroupSeqIDNotIn(vs ...int) predicate.OrderPaymentPreference {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldShipGroupSeqID), v...))
	})
}

// ShipGroupSeqIDGT applies the GT predicate on the "ship_group_seq_id" field.
func ShipGroupSeqIDGT(v int) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShipGroupSeqID), v))
	})
}

// ShipGroupSeqIDGTE applies the GTE predicate on the "ship_group_seq_id" field.
func ShipGroupSeqIDGTE(v int) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShipGroupSeqID), v))
	})
}

// ShipGroupSeqIDLT applies the LT predicate on the "ship_group_seq_id" field.
func ShipGroupSeqIDLT(v int) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShipGroupSeqID), v))
	})
}

// ShipGroupSeqIDLTE applies the LTE predicate on the "ship_group_seq_id" field.
func ShipGroupSeqIDLTE(v int) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShipGroupSeqID), v))
	})
}

// ShipGroupSeqIDIsNil applies the IsNil predicate on the "ship_group_seq_id" field.
func ShipGroupSeqIDIsNil() predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldShipGroupSeqID)))
	})
}

// ShipGroupSeqIDNotNil applies the NotNil predicate on the "ship_group_seq_id" field.
func ShipGroupSeqIDNotNil() predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldShipGroupSeqID)))
	})
}

// PaymentMethodTypeIDEQ applies the EQ predicate on the "payment_method_type_id" field.
func PaymentMethodTypeIDEQ(v int) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPaymentMethodTypeID), v))
	})
}

// PaymentMethodTypeIDNEQ applies the NEQ predicate on the "payment_method_type_id" field.
func PaymentMethodTypeIDNEQ(v int) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPaymentMethodTypeID), v))
	})
}

// PaymentMethodTypeIDIn applies the In predicate on the "payment_method_type_id" field.
func PaymentMethodTypeIDIn(vs ...int) predicate.OrderPaymentPreference {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPaymentMethodTypeID), v...))
	})
}

// PaymentMethodTypeIDNotIn applies the NotIn predicate on the "payment_method_type_id" field.
func PaymentMethodTypeIDNotIn(vs ...int) predicate.OrderPaymentPreference {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPaymentMethodTypeID), v...))
	})
}

// PaymentMethodTypeIDGT applies the GT predicate on the "payment_method_type_id" field.
func PaymentMethodTypeIDGT(v int) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPaymentMethodTypeID), v))
	})
}

// PaymentMethodTypeIDGTE applies the GTE predicate on the "payment_method_type_id" field.
func PaymentMethodTypeIDGTE(v int) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPaymentMethodTypeID), v))
	})
}

// PaymentMethodTypeIDLT applies the LT predicate on the "payment_method_type_id" field.
func PaymentMethodTypeIDLT(v int) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPaymentMethodTypeID), v))
	})
}

// PaymentMethodTypeIDLTE applies the LTE predicate on the "payment_method_type_id" field.
func PaymentMethodTypeIDLTE(v int) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPaymentMethodTypeID), v))
	})
}

// PaymentMethodTypeIDIsNil applies the IsNil predicate on the "payment_method_type_id" field.
func PaymentMethodTypeIDIsNil() predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPaymentMethodTypeID)))
	})
}

// PaymentMethodTypeIDNotNil applies the NotNil predicate on the "payment_method_type_id" field.
func PaymentMethodTypeIDNotNil() predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPaymentMethodTypeID)))
	})
}

// PaymentMethodIDEQ applies the EQ predicate on the "payment_method_id" field.
func PaymentMethodIDEQ(v int) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPaymentMethodID), v))
	})
}

// PaymentMethodIDNEQ applies the NEQ predicate on the "payment_method_id" field.
func PaymentMethodIDNEQ(v int) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPaymentMethodID), v))
	})
}

// PaymentMethodIDIn applies the In predicate on the "payment_method_id" field.
func PaymentMethodIDIn(vs ...int) predicate.OrderPaymentPreference {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPaymentMethodID), v...))
	})
}

// PaymentMethodIDNotIn applies the NotIn predicate on the "payment_method_id" field.
func PaymentMethodIDNotIn(vs ...int) predicate.OrderPaymentPreference {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPaymentMethodID), v...))
	})
}

// PaymentMethodIDGT applies the GT predicate on the "payment_method_id" field.
func PaymentMethodIDGT(v int) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPaymentMethodID), v))
	})
}

// PaymentMethodIDGTE applies the GTE predicate on the "payment_method_id" field.
func PaymentMethodIDGTE(v int) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPaymentMethodID), v))
	})
}

// PaymentMethodIDLT applies the LT predicate on the "payment_method_id" field.
func PaymentMethodIDLT(v int) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPaymentMethodID), v))
	})
}

// PaymentMethodIDLTE applies the LTE predicate on the "payment_method_id" field.
func PaymentMethodIDLTE(v int) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPaymentMethodID), v))
	})
}

// PaymentMethodIDIsNil applies the IsNil predicate on the "payment_method_id" field.
func PaymentMethodIDIsNil() predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPaymentMethodID)))
	})
}

// PaymentMethodIDNotNil applies the NotNil predicate on the "payment_method_id" field.
func PaymentMethodIDNotNil() predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPaymentMethodID)))
	})
}

// FinAccountIDEQ applies the EQ predicate on the "fin_account_id" field.
func FinAccountIDEQ(v int) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFinAccountID), v))
	})
}

// FinAccountIDNEQ applies the NEQ predicate on the "fin_account_id" field.
func FinAccountIDNEQ(v int) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFinAccountID), v))
	})
}

// FinAccountIDIn applies the In predicate on the "fin_account_id" field.
func FinAccountIDIn(vs ...int) predicate.OrderPaymentPreference {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFinAccountID), v...))
	})
}

// FinAccountIDNotIn applies the NotIn predicate on the "fin_account_id" field.
func FinAccountIDNotIn(vs ...int) predicate.OrderPaymentPreference {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFinAccountID), v...))
	})
}

// FinAccountIDGT applies the GT predicate on the "fin_account_id" field.
func FinAccountIDGT(v int) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFinAccountID), v))
	})
}

// FinAccountIDGTE applies the GTE predicate on the "fin_account_id" field.
func FinAccountIDGTE(v int) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFinAccountID), v))
	})
}

// FinAccountIDLT applies the LT predicate on the "fin_account_id" field.
func FinAccountIDLT(v int) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFinAccountID), v))
	})
}

// FinAccountIDLTE applies the LTE predicate on the "fin_account_id" field.
func FinAccountIDLTE(v int) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFinAccountID), v))
	})
}

// FinAccountIDIsNil applies the IsNil predicate on the "fin_account_id" field.
func FinAccountIDIsNil() predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFinAccountID)))
	})
}

// FinAccountIDNotNil applies the NotNil predicate on the "fin_account_id" field.
func FinAccountIDNotNil() predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFinAccountID)))
	})
}

// SecurityCodeEQ applies the EQ predicate on the "security_code" field.
func SecurityCodeEQ(v string) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSecurityCode), v))
	})
}

// SecurityCodeNEQ applies the NEQ predicate on the "security_code" field.
func SecurityCodeNEQ(v string) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSecurityCode), v))
	})
}

// SecurityCodeIn applies the In predicate on the "security_code" field.
func SecurityCodeIn(vs ...string) predicate.OrderPaymentPreference {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSecurityCode), v...))
	})
}

// SecurityCodeNotIn applies the NotIn predicate on the "security_code" field.
func SecurityCodeNotIn(vs ...string) predicate.OrderPaymentPreference {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSecurityCode), v...))
	})
}

// SecurityCodeGT applies the GT predicate on the "security_code" field.
func SecurityCodeGT(v string) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSecurityCode), v))
	})
}

// SecurityCodeGTE applies the GTE predicate on the "security_code" field.
func SecurityCodeGTE(v string) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSecurityCode), v))
	})
}

// SecurityCodeLT applies the LT predicate on the "security_code" field.
func SecurityCodeLT(v string) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSecurityCode), v))
	})
}

// SecurityCodeLTE applies the LTE predicate on the "security_code" field.
func SecurityCodeLTE(v string) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSecurityCode), v))
	})
}

// SecurityCodeContains applies the Contains predicate on the "security_code" field.
func SecurityCodeContains(v string) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSecurityCode), v))
	})
}

// SecurityCodeHasPrefix applies the HasPrefix predicate on the "security_code" field.
func SecurityCodeHasPrefix(v string) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSecurityCode), v))
	})
}

// SecurityCodeHasSuffix applies the HasSuffix predicate on the "security_code" field.
func SecurityCodeHasSuffix(v string) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSecurityCode), v))
	})
}

// SecurityCodeIsNil applies the IsNil predicate on the "security_code" field.
func SecurityCodeIsNil() predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSecurityCode)))
	})
}

// SecurityCodeNotNil applies the NotNil predicate on the "security_code" field.
func SecurityCodeNotNil() predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSecurityCode)))
	})
}

// SecurityCodeEqualFold applies the EqualFold predicate on the "security_code" field.
func SecurityCodeEqualFold(v string) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSecurityCode), v))
	})
}

// SecurityCodeContainsFold applies the ContainsFold predicate on the "security_code" field.
func SecurityCodeContainsFold(v string) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSecurityCode), v))
	})
}

// Track2EQ applies the EQ predicate on the "track_2" field.
func Track2EQ(v string) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTrack2), v))
	})
}

// Track2NEQ applies the NEQ predicate on the "track_2" field.
func Track2NEQ(v string) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTrack2), v))
	})
}

// Track2In applies the In predicate on the "track_2" field.
func Track2In(vs ...string) predicate.OrderPaymentPreference {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTrack2), v...))
	})
}

// Track2NotIn applies the NotIn predicate on the "track_2" field.
func Track2NotIn(vs ...string) predicate.OrderPaymentPreference {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTrack2), v...))
	})
}

// Track2GT applies the GT predicate on the "track_2" field.
func Track2GT(v string) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTrack2), v))
	})
}

// Track2GTE applies the GTE predicate on the "track_2" field.
func Track2GTE(v string) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTrack2), v))
	})
}

// Track2LT applies the LT predicate on the "track_2" field.
func Track2LT(v string) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTrack2), v))
	})
}

// Track2LTE applies the LTE predicate on the "track_2" field.
func Track2LTE(v string) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTrack2), v))
	})
}

// Track2Contains applies the Contains predicate on the "track_2" field.
func Track2Contains(v string) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTrack2), v))
	})
}

// Track2HasPrefix applies the HasPrefix predicate on the "track_2" field.
func Track2HasPrefix(v string) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTrack2), v))
	})
}

// Track2HasSuffix applies the HasSuffix predicate on the "track_2" field.
func Track2HasSuffix(v string) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTrack2), v))
	})
}

// Track2IsNil applies the IsNil predicate on the "track_2" field.
func Track2IsNil() predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTrack2)))
	})
}

// Track2NotNil applies the NotNil predicate on the "track_2" field.
func Track2NotNil() predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTrack2)))
	})
}

// Track2EqualFold applies the EqualFold predicate on the "track_2" field.
func Track2EqualFold(v string) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTrack2), v))
	})
}

// Track2ContainsFold applies the ContainsFold predicate on the "track_2" field.
func Track2ContainsFold(v string) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTrack2), v))
	})
}

// PresentFlagEQ applies the EQ predicate on the "present_flag" field.
func PresentFlagEQ(v PresentFlag) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPresentFlag), v))
	})
}

// PresentFlagNEQ applies the NEQ predicate on the "present_flag" field.
func PresentFlagNEQ(v PresentFlag) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPresentFlag), v))
	})
}

// PresentFlagIn applies the In predicate on the "present_flag" field.
func PresentFlagIn(vs ...PresentFlag) predicate.OrderPaymentPreference {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPresentFlag), v...))
	})
}

// PresentFlagNotIn applies the NotIn predicate on the "present_flag" field.
func PresentFlagNotIn(vs ...PresentFlag) predicate.OrderPaymentPreference {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPresentFlag), v...))
	})
}

// PresentFlagIsNil applies the IsNil predicate on the "present_flag" field.
func PresentFlagIsNil() predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPresentFlag)))
	})
}

// PresentFlagNotNil applies the NotNil predicate on the "present_flag" field.
func PresentFlagNotNil() predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPresentFlag)))
	})
}

// SwipedFlagEQ applies the EQ predicate on the "swiped_flag" field.
func SwipedFlagEQ(v SwipedFlag) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSwipedFlag), v))
	})
}

// SwipedFlagNEQ applies the NEQ predicate on the "swiped_flag" field.
func SwipedFlagNEQ(v SwipedFlag) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSwipedFlag), v))
	})
}

// SwipedFlagIn applies the In predicate on the "swiped_flag" field.
func SwipedFlagIn(vs ...SwipedFlag) predicate.OrderPaymentPreference {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSwipedFlag), v...))
	})
}

// SwipedFlagNotIn applies the NotIn predicate on the "swiped_flag" field.
func SwipedFlagNotIn(vs ...SwipedFlag) predicate.OrderPaymentPreference {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSwipedFlag), v...))
	})
}

// SwipedFlagIsNil applies the IsNil predicate on the "swiped_flag" field.
func SwipedFlagIsNil() predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSwipedFlag)))
	})
}

// SwipedFlagNotNil applies the NotNil predicate on the "swiped_flag" field.
func SwipedFlagNotNil() predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSwipedFlag)))
	})
}

// OverflowFlagEQ applies the EQ predicate on the "overflow_flag" field.
func OverflowFlagEQ(v OverflowFlag) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOverflowFlag), v))
	})
}

// OverflowFlagNEQ applies the NEQ predicate on the "overflow_flag" field.
func OverflowFlagNEQ(v OverflowFlag) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOverflowFlag), v))
	})
}

// OverflowFlagIn applies the In predicate on the "overflow_flag" field.
func OverflowFlagIn(vs ...OverflowFlag) predicate.OrderPaymentPreference {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOverflowFlag), v...))
	})
}

// OverflowFlagNotIn applies the NotIn predicate on the "overflow_flag" field.
func OverflowFlagNotIn(vs ...OverflowFlag) predicate.OrderPaymentPreference {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOverflowFlag), v...))
	})
}

// OverflowFlagIsNil applies the IsNil predicate on the "overflow_flag" field.
func OverflowFlagIsNil() predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOverflowFlag)))
	})
}

// OverflowFlagNotNil applies the NotNil predicate on the "overflow_flag" field.
func OverflowFlagNotNil() predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOverflowFlag)))
	})
}

// MaxAmountEQ applies the EQ predicate on the "max_amount" field.
func MaxAmountEQ(v float64) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMaxAmount), v))
	})
}

// MaxAmountNEQ applies the NEQ predicate on the "max_amount" field.
func MaxAmountNEQ(v float64) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMaxAmount), v))
	})
}

// MaxAmountIn applies the In predicate on the "max_amount" field.
func MaxAmountIn(vs ...float64) predicate.OrderPaymentPreference {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMaxAmount), v...))
	})
}

// MaxAmountNotIn applies the NotIn predicate on the "max_amount" field.
func MaxAmountNotIn(vs ...float64) predicate.OrderPaymentPreference {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMaxAmount), v...))
	})
}

// MaxAmountGT applies the GT predicate on the "max_amount" field.
func MaxAmountGT(v float64) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMaxAmount), v))
	})
}

// MaxAmountGTE applies the GTE predicate on the "max_amount" field.
func MaxAmountGTE(v float64) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMaxAmount), v))
	})
}

// MaxAmountLT applies the LT predicate on the "max_amount" field.
func MaxAmountLT(v float64) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMaxAmount), v))
	})
}

// MaxAmountLTE applies the LTE predicate on the "max_amount" field.
func MaxAmountLTE(v float64) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMaxAmount), v))
	})
}

// MaxAmountIsNil applies the IsNil predicate on the "max_amount" field.
func MaxAmountIsNil() predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMaxAmount)))
	})
}

// MaxAmountNotNil applies the NotNil predicate on the "max_amount" field.
func MaxAmountNotNil() predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMaxAmount)))
	})
}

// ProcessAttemptEQ applies the EQ predicate on the "process_attempt" field.
func ProcessAttemptEQ(v int) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProcessAttempt), v))
	})
}

// ProcessAttemptNEQ applies the NEQ predicate on the "process_attempt" field.
func ProcessAttemptNEQ(v int) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProcessAttempt), v))
	})
}

// ProcessAttemptIn applies the In predicate on the "process_attempt" field.
func ProcessAttemptIn(vs ...int) predicate.OrderPaymentPreference {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldProcessAttempt), v...))
	})
}

// ProcessAttemptNotIn applies the NotIn predicate on the "process_attempt" field.
func ProcessAttemptNotIn(vs ...int) predicate.OrderPaymentPreference {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldProcessAttempt), v...))
	})
}

// ProcessAttemptGT applies the GT predicate on the "process_attempt" field.
func ProcessAttemptGT(v int) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProcessAttempt), v))
	})
}

// ProcessAttemptGTE applies the GTE predicate on the "process_attempt" field.
func ProcessAttemptGTE(v int) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProcessAttempt), v))
	})
}

// ProcessAttemptLT applies the LT predicate on the "process_attempt" field.
func ProcessAttemptLT(v int) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProcessAttempt), v))
	})
}

// ProcessAttemptLTE applies the LTE predicate on the "process_attempt" field.
func ProcessAttemptLTE(v int) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProcessAttempt), v))
	})
}

// ProcessAttemptIsNil applies the IsNil predicate on the "process_attempt" field.
func ProcessAttemptIsNil() predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldProcessAttempt)))
	})
}

// ProcessAttemptNotNil applies the NotNil predicate on the "process_attempt" field.
func ProcessAttemptNotNil() predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldProcessAttempt)))
	})
}

// BillingPostalCodeEQ applies the EQ predicate on the "billing_postal_code" field.
func BillingPostalCodeEQ(v string) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBillingPostalCode), v))
	})
}

// BillingPostalCodeNEQ applies the NEQ predicate on the "billing_postal_code" field.
func BillingPostalCodeNEQ(v string) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBillingPostalCode), v))
	})
}

// BillingPostalCodeIn applies the In predicate on the "billing_postal_code" field.
func BillingPostalCodeIn(vs ...string) predicate.OrderPaymentPreference {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBillingPostalCode), v...))
	})
}

// BillingPostalCodeNotIn applies the NotIn predicate on the "billing_postal_code" field.
func BillingPostalCodeNotIn(vs ...string) predicate.OrderPaymentPreference {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBillingPostalCode), v...))
	})
}

// BillingPostalCodeGT applies the GT predicate on the "billing_postal_code" field.
func BillingPostalCodeGT(v string) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBillingPostalCode), v))
	})
}

// BillingPostalCodeGTE applies the GTE predicate on the "billing_postal_code" field.
func BillingPostalCodeGTE(v string) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBillingPostalCode), v))
	})
}

// BillingPostalCodeLT applies the LT predicate on the "billing_postal_code" field.
func BillingPostalCodeLT(v string) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBillingPostalCode), v))
	})
}

// BillingPostalCodeLTE applies the LTE predicate on the "billing_postal_code" field.
func BillingPostalCodeLTE(v string) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBillingPostalCode), v))
	})
}

// BillingPostalCodeContains applies the Contains predicate on the "billing_postal_code" field.
func BillingPostalCodeContains(v string) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBillingPostalCode), v))
	})
}

// BillingPostalCodeHasPrefix applies the HasPrefix predicate on the "billing_postal_code" field.
func BillingPostalCodeHasPrefix(v string) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBillingPostalCode), v))
	})
}

// BillingPostalCodeHasSuffix applies the HasSuffix predicate on the "billing_postal_code" field.
func BillingPostalCodeHasSuffix(v string) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBillingPostalCode), v))
	})
}

// BillingPostalCodeIsNil applies the IsNil predicate on the "billing_postal_code" field.
func BillingPostalCodeIsNil() predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldBillingPostalCode)))
	})
}

// BillingPostalCodeNotNil applies the NotNil predicate on the "billing_postal_code" field.
func BillingPostalCodeNotNil() predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldBillingPostalCode)))
	})
}

// BillingPostalCodeEqualFold applies the EqualFold predicate on the "billing_postal_code" field.
func BillingPostalCodeEqualFold(v string) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBillingPostalCode), v))
	})
}

// BillingPostalCodeContainsFold applies the ContainsFold predicate on the "billing_postal_code" field.
func BillingPostalCodeContainsFold(v string) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBillingPostalCode), v))
	})
}

// ManualAuthCodeEQ applies the EQ predicate on the "manual_auth_code" field.
func ManualAuthCodeEQ(v string) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldManualAuthCode), v))
	})
}

// ManualAuthCodeNEQ applies the NEQ predicate on the "manual_auth_code" field.
func ManualAuthCodeNEQ(v string) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldManualAuthCode), v))
	})
}

// ManualAuthCodeIn applies the In predicate on the "manual_auth_code" field.
func ManualAuthCodeIn(vs ...string) predicate.OrderPaymentPreference {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldManualAuthCode), v...))
	})
}

// ManualAuthCodeNotIn applies the NotIn predicate on the "manual_auth_code" field.
func ManualAuthCodeNotIn(vs ...string) predicate.OrderPaymentPreference {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldManualAuthCode), v...))
	})
}

// ManualAuthCodeGT applies the GT predicate on the "manual_auth_code" field.
func ManualAuthCodeGT(v string) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldManualAuthCode), v))
	})
}

// ManualAuthCodeGTE applies the GTE predicate on the "manual_auth_code" field.
func ManualAuthCodeGTE(v string) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldManualAuthCode), v))
	})
}

// ManualAuthCodeLT applies the LT predicate on the "manual_auth_code" field.
func ManualAuthCodeLT(v string) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldManualAuthCode), v))
	})
}

// ManualAuthCodeLTE applies the LTE predicate on the "manual_auth_code" field.
func ManualAuthCodeLTE(v string) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldManualAuthCode), v))
	})
}

// ManualAuthCodeContains applies the Contains predicate on the "manual_auth_code" field.
func ManualAuthCodeContains(v string) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldManualAuthCode), v))
	})
}

// ManualAuthCodeHasPrefix applies the HasPrefix predicate on the "manual_auth_code" field.
func ManualAuthCodeHasPrefix(v string) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldManualAuthCode), v))
	})
}

// ManualAuthCodeHasSuffix applies the HasSuffix predicate on the "manual_auth_code" field.
func ManualAuthCodeHasSuffix(v string) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldManualAuthCode), v))
	})
}

// ManualAuthCodeIsNil applies the IsNil predicate on the "manual_auth_code" field.
func ManualAuthCodeIsNil() predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldManualAuthCode)))
	})
}

// ManualAuthCodeNotNil applies the NotNil predicate on the "manual_auth_code" field.
func ManualAuthCodeNotNil() predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldManualAuthCode)))
	})
}

// ManualAuthCodeEqualFold applies the EqualFold predicate on the "manual_auth_code" field.
func ManualAuthCodeEqualFold(v string) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldManualAuthCode), v))
	})
}

// ManualAuthCodeContainsFold applies the ContainsFold predicate on the "manual_auth_code" field.
func ManualAuthCodeContainsFold(v string) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldManualAuthCode), v))
	})
}

// ManualRefNumEQ applies the EQ predicate on the "manual_ref_num" field.
func ManualRefNumEQ(v string) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldManualRefNum), v))
	})
}

// ManualRefNumNEQ applies the NEQ predicate on the "manual_ref_num" field.
func ManualRefNumNEQ(v string) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldManualRefNum), v))
	})
}

// ManualRefNumIn applies the In predicate on the "manual_ref_num" field.
func ManualRefNumIn(vs ...string) predicate.OrderPaymentPreference {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldManualRefNum), v...))
	})
}

// ManualRefNumNotIn applies the NotIn predicate on the "manual_ref_num" field.
func ManualRefNumNotIn(vs ...string) predicate.OrderPaymentPreference {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldManualRefNum), v...))
	})
}

// ManualRefNumGT applies the GT predicate on the "manual_ref_num" field.
func ManualRefNumGT(v string) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldManualRefNum), v))
	})
}

// ManualRefNumGTE applies the GTE predicate on the "manual_ref_num" field.
func ManualRefNumGTE(v string) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldManualRefNum), v))
	})
}

// ManualRefNumLT applies the LT predicate on the "manual_ref_num" field.
func ManualRefNumLT(v string) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldManualRefNum), v))
	})
}

// ManualRefNumLTE applies the LTE predicate on the "manual_ref_num" field.
func ManualRefNumLTE(v string) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldManualRefNum), v))
	})
}

// ManualRefNumContains applies the Contains predicate on the "manual_ref_num" field.
func ManualRefNumContains(v string) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldManualRefNum), v))
	})
}

// ManualRefNumHasPrefix applies the HasPrefix predicate on the "manual_ref_num" field.
func ManualRefNumHasPrefix(v string) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldManualRefNum), v))
	})
}

// ManualRefNumHasSuffix applies the HasSuffix predicate on the "manual_ref_num" field.
func ManualRefNumHasSuffix(v string) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldManualRefNum), v))
	})
}

// ManualRefNumIsNil applies the IsNil predicate on the "manual_ref_num" field.
func ManualRefNumIsNil() predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldManualRefNum)))
	})
}

// ManualRefNumNotNil applies the NotNil predicate on the "manual_ref_num" field.
func ManualRefNumNotNil() predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldManualRefNum)))
	})
}

// ManualRefNumEqualFold applies the EqualFold predicate on the "manual_ref_num" field.
func ManualRefNumEqualFold(v string) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldManualRefNum), v))
	})
}

// ManualRefNumContainsFold applies the ContainsFold predicate on the "manual_ref_num" field.
func ManualRefNumContainsFold(v string) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldManualRefNum), v))
	})
}

// NeedsNsfRetryEQ applies the EQ predicate on the "needs_nsf_retry" field.
func NeedsNsfRetryEQ(v NeedsNsfRetry) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNeedsNsfRetry), v))
	})
}

// NeedsNsfRetryNEQ applies the NEQ predicate on the "needs_nsf_retry" field.
func NeedsNsfRetryNEQ(v NeedsNsfRetry) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNeedsNsfRetry), v))
	})
}

// NeedsNsfRetryIn applies the In predicate on the "needs_nsf_retry" field.
func NeedsNsfRetryIn(vs ...NeedsNsfRetry) predicate.OrderPaymentPreference {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldNeedsNsfRetry), v...))
	})
}

// NeedsNsfRetryNotIn applies the NotIn predicate on the "needs_nsf_retry" field.
func NeedsNsfRetryNotIn(vs ...NeedsNsfRetry) predicate.OrderPaymentPreference {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldNeedsNsfRetry), v...))
	})
}

// NeedsNsfRetryIsNil applies the IsNil predicate on the "needs_nsf_retry" field.
func NeedsNsfRetryIsNil() predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldNeedsNsfRetry)))
	})
}

// NeedsNsfRetryNotNil applies the NotNil predicate on the "needs_nsf_retry" field.
func NeedsNsfRetryNotNil() predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldNeedsNsfRetry)))
	})
}

// CreatedDateEQ applies the EQ predicate on the "created_date" field.
func CreatedDateEQ(v time.Time) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedDate), v))
	})
}

// CreatedDateNEQ applies the NEQ predicate on the "created_date" field.
func CreatedDateNEQ(v time.Time) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedDate), v))
	})
}

// CreatedDateIn applies the In predicate on the "created_date" field.
func CreatedDateIn(vs ...time.Time) predicate.OrderPaymentPreference {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedDate), v...))
	})
}

// CreatedDateNotIn applies the NotIn predicate on the "created_date" field.
func CreatedDateNotIn(vs ...time.Time) predicate.OrderPaymentPreference {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedDate), v...))
	})
}

// CreatedDateGT applies the GT predicate on the "created_date" field.
func CreatedDateGT(v time.Time) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedDate), v))
	})
}

// CreatedDateGTE applies the GTE predicate on the "created_date" field.
func CreatedDateGTE(v time.Time) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedDate), v))
	})
}

// CreatedDateLT applies the LT predicate on the "created_date" field.
func CreatedDateLT(v time.Time) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedDate), v))
	})
}

// CreatedDateLTE applies the LTE predicate on the "created_date" field.
func CreatedDateLTE(v time.Time) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedDate), v))
	})
}

// CreatedDateIsNil applies the IsNil predicate on the "created_date" field.
func CreatedDateIsNil() predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreatedDate)))
	})
}

// CreatedDateNotNil applies the NotNil predicate on the "created_date" field.
func CreatedDateNotNil() predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreatedDate)))
	})
}

// CreatedByUserLoginEQ applies the EQ predicate on the "created_by_user_login" field.
func CreatedByUserLoginEQ(v string) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedByUserLogin), v))
	})
}

// CreatedByUserLoginNEQ applies the NEQ predicate on the "created_by_user_login" field.
func CreatedByUserLoginNEQ(v string) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedByUserLogin), v))
	})
}

// CreatedByUserLoginIn applies the In predicate on the "created_by_user_login" field.
func CreatedByUserLoginIn(vs ...string) predicate.OrderPaymentPreference {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedByUserLogin), v...))
	})
}

// CreatedByUserLoginNotIn applies the NotIn predicate on the "created_by_user_login" field.
func CreatedByUserLoginNotIn(vs ...string) predicate.OrderPaymentPreference {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedByUserLogin), v...))
	})
}

// CreatedByUserLoginGT applies the GT predicate on the "created_by_user_login" field.
func CreatedByUserLoginGT(v string) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedByUserLogin), v))
	})
}

// CreatedByUserLoginGTE applies the GTE predicate on the "created_by_user_login" field.
func CreatedByUserLoginGTE(v string) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedByUserLogin), v))
	})
}

// CreatedByUserLoginLT applies the LT predicate on the "created_by_user_login" field.
func CreatedByUserLoginLT(v string) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedByUserLogin), v))
	})
}

// CreatedByUserLoginLTE applies the LTE predicate on the "created_by_user_login" field.
func CreatedByUserLoginLTE(v string) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedByUserLogin), v))
	})
}

// CreatedByUserLoginContains applies the Contains predicate on the "created_by_user_login" field.
func CreatedByUserLoginContains(v string) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCreatedByUserLogin), v))
	})
}

// CreatedByUserLoginHasPrefix applies the HasPrefix predicate on the "created_by_user_login" field.
func CreatedByUserLoginHasPrefix(v string) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCreatedByUserLogin), v))
	})
}

// CreatedByUserLoginHasSuffix applies the HasSuffix predicate on the "created_by_user_login" field.
func CreatedByUserLoginHasSuffix(v string) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCreatedByUserLogin), v))
	})
}

// CreatedByUserLoginIsNil applies the IsNil predicate on the "created_by_user_login" field.
func CreatedByUserLoginIsNil() predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreatedByUserLogin)))
	})
}

// CreatedByUserLoginNotNil applies the NotNil predicate on the "created_by_user_login" field.
func CreatedByUserLoginNotNil() predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreatedByUserLogin)))
	})
}

// CreatedByUserLoginEqualFold applies the EqualFold predicate on the "created_by_user_login" field.
func CreatedByUserLoginEqualFold(v string) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCreatedByUserLogin), v))
	})
}

// CreatedByUserLoginContainsFold applies the ContainsFold predicate on the "created_by_user_login" field.
func CreatedByUserLoginContainsFold(v string) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCreatedByUserLogin), v))
	})
}

// LastModifiedDateEQ applies the EQ predicate on the "last_modified_date" field.
func LastModifiedDateEQ(v time.Time) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastModifiedDate), v))
	})
}

// LastModifiedDateNEQ applies the NEQ predicate on the "last_modified_date" field.
func LastModifiedDateNEQ(v time.Time) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLastModifiedDate), v))
	})
}

// LastModifiedDateIn applies the In predicate on the "last_modified_date" field.
func LastModifiedDateIn(vs ...time.Time) predicate.OrderPaymentPreference {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLastModifiedDate), v...))
	})
}

// LastModifiedDateNotIn applies the NotIn predicate on the "last_modified_date" field.
func LastModifiedDateNotIn(vs ...time.Time) predicate.OrderPaymentPreference {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLastModifiedDate), v...))
	})
}

// LastModifiedDateGT applies the GT predicate on the "last_modified_date" field.
func LastModifiedDateGT(v time.Time) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLastModifiedDate), v))
	})
}

// LastModifiedDateGTE applies the GTE predicate on the "last_modified_date" field.
func LastModifiedDateGTE(v time.Time) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLastModifiedDate), v))
	})
}

// LastModifiedDateLT applies the LT predicate on the "last_modified_date" field.
func LastModifiedDateLT(v time.Time) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLastModifiedDate), v))
	})
}

// LastModifiedDateLTE applies the LTE predicate on the "last_modified_date" field.
func LastModifiedDateLTE(v time.Time) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLastModifiedDate), v))
	})
}

// LastModifiedDateIsNil applies the IsNil predicate on the "last_modified_date" field.
func LastModifiedDateIsNil() predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLastModifiedDate)))
	})
}

// LastModifiedDateNotNil applies the NotNil predicate on the "last_modified_date" field.
func LastModifiedDateNotNil() predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLastModifiedDate)))
	})
}

// LastModifiedByUserLoginEQ applies the EQ predicate on the "last_modified_by_user_login" field.
func LastModifiedByUserLoginEQ(v string) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastModifiedByUserLogin), v))
	})
}

// LastModifiedByUserLoginNEQ applies the NEQ predicate on the "last_modified_by_user_login" field.
func LastModifiedByUserLoginNEQ(v string) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLastModifiedByUserLogin), v))
	})
}

// LastModifiedByUserLoginIn applies the In predicate on the "last_modified_by_user_login" field.
func LastModifiedByUserLoginIn(vs ...string) predicate.OrderPaymentPreference {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLastModifiedByUserLogin), v...))
	})
}

// LastModifiedByUserLoginNotIn applies the NotIn predicate on the "last_modified_by_user_login" field.
func LastModifiedByUserLoginNotIn(vs ...string) predicate.OrderPaymentPreference {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLastModifiedByUserLogin), v...))
	})
}

// LastModifiedByUserLoginGT applies the GT predicate on the "last_modified_by_user_login" field.
func LastModifiedByUserLoginGT(v string) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLastModifiedByUserLogin), v))
	})
}

// LastModifiedByUserLoginGTE applies the GTE predicate on the "last_modified_by_user_login" field.
func LastModifiedByUserLoginGTE(v string) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLastModifiedByUserLogin), v))
	})
}

// LastModifiedByUserLoginLT applies the LT predicate on the "last_modified_by_user_login" field.
func LastModifiedByUserLoginLT(v string) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLastModifiedByUserLogin), v))
	})
}

// LastModifiedByUserLoginLTE applies the LTE predicate on the "last_modified_by_user_login" field.
func LastModifiedByUserLoginLTE(v string) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLastModifiedByUserLogin), v))
	})
}

// LastModifiedByUserLoginContains applies the Contains predicate on the "last_modified_by_user_login" field.
func LastModifiedByUserLoginContains(v string) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLastModifiedByUserLogin), v))
	})
}

// LastModifiedByUserLoginHasPrefix applies the HasPrefix predicate on the "last_modified_by_user_login" field.
func LastModifiedByUserLoginHasPrefix(v string) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLastModifiedByUserLogin), v))
	})
}

// LastModifiedByUserLoginHasSuffix applies the HasSuffix predicate on the "last_modified_by_user_login" field.
func LastModifiedByUserLoginHasSuffix(v string) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLastModifiedByUserLogin), v))
	})
}

// LastModifiedByUserLoginIsNil applies the IsNil predicate on the "last_modified_by_user_login" field.
func LastModifiedByUserLoginIsNil() predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLastModifiedByUserLogin)))
	})
}

// LastModifiedByUserLoginNotNil applies the NotNil predicate on the "last_modified_by_user_login" field.
func LastModifiedByUserLoginNotNil() predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLastModifiedByUserLogin)))
	})
}

// LastModifiedByUserLoginEqualFold applies the EqualFold predicate on the "last_modified_by_user_login" field.
func LastModifiedByUserLoginEqualFold(v string) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLastModifiedByUserLogin), v))
	})
}

// LastModifiedByUserLoginContainsFold applies the ContainsFold predicate on the "last_modified_by_user_login" field.
func LastModifiedByUserLoginContainsFold(v string) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLastModifiedByUserLogin), v))
	})
}

// HasOrderHeader applies the HasEdge predicate on the "order_header" edge.
func HasOrderHeader() predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderHeaderTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OrderHeaderTable, OrderHeaderColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderHeaderWith applies the HasEdge predicate on the "order_header" edge with a given conditions (other predicates).
func HasOrderHeaderWith(preds ...predicate.OrderHeader) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderHeaderInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OrderHeaderTable, OrderHeaderColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrderItem applies the HasEdge predicate on the "order_item" edge.
func HasOrderItem() predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderItemTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OrderItemTable, OrderItemColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderItemWith applies the HasEdge predicate on the "order_item" edge with a given conditions (other predicates).
func HasOrderItemWith(preds ...predicate.OrderItem) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderItemInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OrderItemTable, OrderItemColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrderItemShipGroup applies the HasEdge predicate on the "order_item_ship_group" edge.
func HasOrderItemShipGroup() predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderItemShipGroupTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OrderItemShipGroupTable, OrderItemShipGroupColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderItemShipGroupWith applies the HasEdge predicate on the "order_item_ship_group" edge with a given conditions (other predicates).
func HasOrderItemShipGroupWith(preds ...predicate.OrderItemShipGroup) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderItemShipGroupInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OrderItemShipGroupTable, OrderItemShipGroupColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProductPricePurpose applies the HasEdge predicate on the "product_price_purpose" edge.
func HasProductPricePurpose() predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProductPricePurposeTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProductPricePurposeTable, ProductPricePurposeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProductPricePurposeWith applies the HasEdge predicate on the "product_price_purpose" edge with a given conditions (other predicates).
func HasProductPricePurposeWith(preds ...predicate.ProductPricePurpose) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProductPricePurposeInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProductPricePurposeTable, ProductPricePurposeColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasStatusItem applies the HasEdge predicate on the "status_item" edge.
func HasStatusItem() predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StatusItemTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, StatusItemTable, StatusItemColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStatusItemWith applies the HasEdge predicate on the "status_item" edge with a given conditions (other predicates).
func HasStatusItemWith(preds ...predicate.StatusItem) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StatusItemInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, StatusItemTable, StatusItemColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrderStatuses applies the HasEdge predicate on the "order_statuses" edge.
func HasOrderStatuses() predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderStatusesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrderStatusesTable, OrderStatusesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderStatusesWith applies the HasEdge predicate on the "order_statuses" edge with a given conditions (other predicates).
func HasOrderStatusesWith(preds ...predicate.OrderStatus) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderStatusesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrderStatusesTable, OrderStatusesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.OrderPaymentPreference) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.OrderPaymentPreference) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.OrderPaymentPreference) predicate.OrderPaymentPreference {
	return predicate.OrderPaymentPreference(func(s *sql.Selector) {
		p(s.Not())
	})
}
