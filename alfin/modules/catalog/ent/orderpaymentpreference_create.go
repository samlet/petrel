// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/orderheader"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/orderitem"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/orderitemshipgroup"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/orderpaymentpreference"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/orderstatus"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productpricepurpose"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/statusitem"
)

// OrderPaymentPreferenceCreate is the builder for creating a OrderPaymentPreference entity.
type OrderPaymentPreferenceCreate struct {
	config
	mutation *OrderPaymentPreferenceMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (oppc *OrderPaymentPreferenceCreate) SetCreateTime(t time.Time) *OrderPaymentPreferenceCreate {
	oppc.mutation.SetCreateTime(t)
	return oppc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (oppc *OrderPaymentPreferenceCreate) SetNillableCreateTime(t *time.Time) *OrderPaymentPreferenceCreate {
	if t != nil {
		oppc.SetCreateTime(*t)
	}
	return oppc
}

// SetUpdateTime sets the "update_time" field.
func (oppc *OrderPaymentPreferenceCreate) SetUpdateTime(t time.Time) *OrderPaymentPreferenceCreate {
	oppc.mutation.SetUpdateTime(t)
	return oppc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (oppc *OrderPaymentPreferenceCreate) SetNillableUpdateTime(t *time.Time) *OrderPaymentPreferenceCreate {
	if t != nil {
		oppc.SetUpdateTime(*t)
	}
	return oppc
}

// SetStringRef sets the "string_ref" field.
func (oppc *OrderPaymentPreferenceCreate) SetStringRef(s string) *OrderPaymentPreferenceCreate {
	oppc.mutation.SetStringRef(s)
	return oppc
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (oppc *OrderPaymentPreferenceCreate) SetNillableStringRef(s *string) *OrderPaymentPreferenceCreate {
	if s != nil {
		oppc.SetStringRef(*s)
	}
	return oppc
}

// SetOrderItemSeqID sets the "order_item_seq_id" field.
func (oppc *OrderPaymentPreferenceCreate) SetOrderItemSeqID(i int) *OrderPaymentPreferenceCreate {
	oppc.mutation.SetOrderItemSeqID(i)
	return oppc
}

// SetNillableOrderItemSeqID sets the "order_item_seq_id" field if the given value is not nil.
func (oppc *OrderPaymentPreferenceCreate) SetNillableOrderItemSeqID(i *int) *OrderPaymentPreferenceCreate {
	if i != nil {
		oppc.SetOrderItemSeqID(*i)
	}
	return oppc
}

// SetShipGroupSeqID sets the "ship_group_seq_id" field.
func (oppc *OrderPaymentPreferenceCreate) SetShipGroupSeqID(i int) *OrderPaymentPreferenceCreate {
	oppc.mutation.SetShipGroupSeqID(i)
	return oppc
}

// SetNillableShipGroupSeqID sets the "ship_group_seq_id" field if the given value is not nil.
func (oppc *OrderPaymentPreferenceCreate) SetNillableShipGroupSeqID(i *int) *OrderPaymentPreferenceCreate {
	if i != nil {
		oppc.SetShipGroupSeqID(*i)
	}
	return oppc
}

// SetPaymentMethodTypeID sets the "payment_method_type_id" field.
func (oppc *OrderPaymentPreferenceCreate) SetPaymentMethodTypeID(i int) *OrderPaymentPreferenceCreate {
	oppc.mutation.SetPaymentMethodTypeID(i)
	return oppc
}

// SetNillablePaymentMethodTypeID sets the "payment_method_type_id" field if the given value is not nil.
func (oppc *OrderPaymentPreferenceCreate) SetNillablePaymentMethodTypeID(i *int) *OrderPaymentPreferenceCreate {
	if i != nil {
		oppc.SetPaymentMethodTypeID(*i)
	}
	return oppc
}

// SetPaymentMethodID sets the "payment_method_id" field.
func (oppc *OrderPaymentPreferenceCreate) SetPaymentMethodID(i int) *OrderPaymentPreferenceCreate {
	oppc.mutation.SetPaymentMethodID(i)
	return oppc
}

// SetNillablePaymentMethodID sets the "payment_method_id" field if the given value is not nil.
func (oppc *OrderPaymentPreferenceCreate) SetNillablePaymentMethodID(i *int) *OrderPaymentPreferenceCreate {
	if i != nil {
		oppc.SetPaymentMethodID(*i)
	}
	return oppc
}

// SetFinAccountID sets the "fin_account_id" field.
func (oppc *OrderPaymentPreferenceCreate) SetFinAccountID(i int) *OrderPaymentPreferenceCreate {
	oppc.mutation.SetFinAccountID(i)
	return oppc
}

// SetNillableFinAccountID sets the "fin_account_id" field if the given value is not nil.
func (oppc *OrderPaymentPreferenceCreate) SetNillableFinAccountID(i *int) *OrderPaymentPreferenceCreate {
	if i != nil {
		oppc.SetFinAccountID(*i)
	}
	return oppc
}

// SetSecurityCode sets the "security_code" field.
func (oppc *OrderPaymentPreferenceCreate) SetSecurityCode(s string) *OrderPaymentPreferenceCreate {
	oppc.mutation.SetSecurityCode(s)
	return oppc
}

// SetNillableSecurityCode sets the "security_code" field if the given value is not nil.
func (oppc *OrderPaymentPreferenceCreate) SetNillableSecurityCode(s *string) *OrderPaymentPreferenceCreate {
	if s != nil {
		oppc.SetSecurityCode(*s)
	}
	return oppc
}

// SetTrack2 sets the "track_2" field.
func (oppc *OrderPaymentPreferenceCreate) SetTrack2(s string) *OrderPaymentPreferenceCreate {
	oppc.mutation.SetTrack2(s)
	return oppc
}

// SetNillableTrack2 sets the "track_2" field if the given value is not nil.
func (oppc *OrderPaymentPreferenceCreate) SetNillableTrack2(s *string) *OrderPaymentPreferenceCreate {
	if s != nil {
		oppc.SetTrack2(*s)
	}
	return oppc
}

// SetPresentFlag sets the "present_flag" field.
func (oppc *OrderPaymentPreferenceCreate) SetPresentFlag(of orderpaymentpreference.PresentFlag) *OrderPaymentPreferenceCreate {
	oppc.mutation.SetPresentFlag(of)
	return oppc
}

// SetNillablePresentFlag sets the "present_flag" field if the given value is not nil.
func (oppc *OrderPaymentPreferenceCreate) SetNillablePresentFlag(of *orderpaymentpreference.PresentFlag) *OrderPaymentPreferenceCreate {
	if of != nil {
		oppc.SetPresentFlag(*of)
	}
	return oppc
}

// SetSwipedFlag sets the "swiped_flag" field.
func (oppc *OrderPaymentPreferenceCreate) SetSwipedFlag(of orderpaymentpreference.SwipedFlag) *OrderPaymentPreferenceCreate {
	oppc.mutation.SetSwipedFlag(of)
	return oppc
}

// SetNillableSwipedFlag sets the "swiped_flag" field if the given value is not nil.
func (oppc *OrderPaymentPreferenceCreate) SetNillableSwipedFlag(of *orderpaymentpreference.SwipedFlag) *OrderPaymentPreferenceCreate {
	if of != nil {
		oppc.SetSwipedFlag(*of)
	}
	return oppc
}

// SetOverflowFlag sets the "overflow_flag" field.
func (oppc *OrderPaymentPreferenceCreate) SetOverflowFlag(of orderpaymentpreference.OverflowFlag) *OrderPaymentPreferenceCreate {
	oppc.mutation.SetOverflowFlag(of)
	return oppc
}

// SetNillableOverflowFlag sets the "overflow_flag" field if the given value is not nil.
func (oppc *OrderPaymentPreferenceCreate) SetNillableOverflowFlag(of *orderpaymentpreference.OverflowFlag) *OrderPaymentPreferenceCreate {
	if of != nil {
		oppc.SetOverflowFlag(*of)
	}
	return oppc
}

// SetMaxAmount sets the "max_amount" field.
func (oppc *OrderPaymentPreferenceCreate) SetMaxAmount(f float64) *OrderPaymentPreferenceCreate {
	oppc.mutation.SetMaxAmount(f)
	return oppc
}

// SetNillableMaxAmount sets the "max_amount" field if the given value is not nil.
func (oppc *OrderPaymentPreferenceCreate) SetNillableMaxAmount(f *float64) *OrderPaymentPreferenceCreate {
	if f != nil {
		oppc.SetMaxAmount(*f)
	}
	return oppc
}

// SetProcessAttempt sets the "process_attempt" field.
func (oppc *OrderPaymentPreferenceCreate) SetProcessAttempt(i int) *OrderPaymentPreferenceCreate {
	oppc.mutation.SetProcessAttempt(i)
	return oppc
}

// SetNillableProcessAttempt sets the "process_attempt" field if the given value is not nil.
func (oppc *OrderPaymentPreferenceCreate) SetNillableProcessAttempt(i *int) *OrderPaymentPreferenceCreate {
	if i != nil {
		oppc.SetProcessAttempt(*i)
	}
	return oppc
}

// SetBillingPostalCode sets the "billing_postal_code" field.
func (oppc *OrderPaymentPreferenceCreate) SetBillingPostalCode(s string) *OrderPaymentPreferenceCreate {
	oppc.mutation.SetBillingPostalCode(s)
	return oppc
}

// SetNillableBillingPostalCode sets the "billing_postal_code" field if the given value is not nil.
func (oppc *OrderPaymentPreferenceCreate) SetNillableBillingPostalCode(s *string) *OrderPaymentPreferenceCreate {
	if s != nil {
		oppc.SetBillingPostalCode(*s)
	}
	return oppc
}

// SetManualAuthCode sets the "manual_auth_code" field.
func (oppc *OrderPaymentPreferenceCreate) SetManualAuthCode(s string) *OrderPaymentPreferenceCreate {
	oppc.mutation.SetManualAuthCode(s)
	return oppc
}

// SetNillableManualAuthCode sets the "manual_auth_code" field if the given value is not nil.
func (oppc *OrderPaymentPreferenceCreate) SetNillableManualAuthCode(s *string) *OrderPaymentPreferenceCreate {
	if s != nil {
		oppc.SetManualAuthCode(*s)
	}
	return oppc
}

// SetManualRefNum sets the "manual_ref_num" field.
func (oppc *OrderPaymentPreferenceCreate) SetManualRefNum(s string) *OrderPaymentPreferenceCreate {
	oppc.mutation.SetManualRefNum(s)
	return oppc
}

// SetNillableManualRefNum sets the "manual_ref_num" field if the given value is not nil.
func (oppc *OrderPaymentPreferenceCreate) SetNillableManualRefNum(s *string) *OrderPaymentPreferenceCreate {
	if s != nil {
		oppc.SetManualRefNum(*s)
	}
	return oppc
}

// SetNeedsNsfRetry sets the "needs_nsf_retry" field.
func (oppc *OrderPaymentPreferenceCreate) SetNeedsNsfRetry(onr orderpaymentpreference.NeedsNsfRetry) *OrderPaymentPreferenceCreate {
	oppc.mutation.SetNeedsNsfRetry(onr)
	return oppc
}

// SetNillableNeedsNsfRetry sets the "needs_nsf_retry" field if the given value is not nil.
func (oppc *OrderPaymentPreferenceCreate) SetNillableNeedsNsfRetry(onr *orderpaymentpreference.NeedsNsfRetry) *OrderPaymentPreferenceCreate {
	if onr != nil {
		oppc.SetNeedsNsfRetry(*onr)
	}
	return oppc
}

// SetCreatedDate sets the "created_date" field.
func (oppc *OrderPaymentPreferenceCreate) SetCreatedDate(t time.Time) *OrderPaymentPreferenceCreate {
	oppc.mutation.SetCreatedDate(t)
	return oppc
}

// SetNillableCreatedDate sets the "created_date" field if the given value is not nil.
func (oppc *OrderPaymentPreferenceCreate) SetNillableCreatedDate(t *time.Time) *OrderPaymentPreferenceCreate {
	if t != nil {
		oppc.SetCreatedDate(*t)
	}
	return oppc
}

// SetCreatedByUserLogin sets the "created_by_user_login" field.
func (oppc *OrderPaymentPreferenceCreate) SetCreatedByUserLogin(s string) *OrderPaymentPreferenceCreate {
	oppc.mutation.SetCreatedByUserLogin(s)
	return oppc
}

// SetNillableCreatedByUserLogin sets the "created_by_user_login" field if the given value is not nil.
func (oppc *OrderPaymentPreferenceCreate) SetNillableCreatedByUserLogin(s *string) *OrderPaymentPreferenceCreate {
	if s != nil {
		oppc.SetCreatedByUserLogin(*s)
	}
	return oppc
}

// SetLastModifiedDate sets the "last_modified_date" field.
func (oppc *OrderPaymentPreferenceCreate) SetLastModifiedDate(t time.Time) *OrderPaymentPreferenceCreate {
	oppc.mutation.SetLastModifiedDate(t)
	return oppc
}

// SetNillableLastModifiedDate sets the "last_modified_date" field if the given value is not nil.
func (oppc *OrderPaymentPreferenceCreate) SetNillableLastModifiedDate(t *time.Time) *OrderPaymentPreferenceCreate {
	if t != nil {
		oppc.SetLastModifiedDate(*t)
	}
	return oppc
}

// SetLastModifiedByUserLogin sets the "last_modified_by_user_login" field.
func (oppc *OrderPaymentPreferenceCreate) SetLastModifiedByUserLogin(s string) *OrderPaymentPreferenceCreate {
	oppc.mutation.SetLastModifiedByUserLogin(s)
	return oppc
}

// SetNillableLastModifiedByUserLogin sets the "last_modified_by_user_login" field if the given value is not nil.
func (oppc *OrderPaymentPreferenceCreate) SetNillableLastModifiedByUserLogin(s *string) *OrderPaymentPreferenceCreate {
	if s != nil {
		oppc.SetLastModifiedByUserLogin(*s)
	}
	return oppc
}

// SetOrderHeaderID sets the "order_header" edge to the OrderHeader entity by ID.
func (oppc *OrderPaymentPreferenceCreate) SetOrderHeaderID(id int) *OrderPaymentPreferenceCreate {
	oppc.mutation.SetOrderHeaderID(id)
	return oppc
}

// SetNillableOrderHeaderID sets the "order_header" edge to the OrderHeader entity by ID if the given value is not nil.
func (oppc *OrderPaymentPreferenceCreate) SetNillableOrderHeaderID(id *int) *OrderPaymentPreferenceCreate {
	if id != nil {
		oppc = oppc.SetOrderHeaderID(*id)
	}
	return oppc
}

// SetOrderHeader sets the "order_header" edge to the OrderHeader entity.
func (oppc *OrderPaymentPreferenceCreate) SetOrderHeader(o *OrderHeader) *OrderPaymentPreferenceCreate {
	return oppc.SetOrderHeaderID(o.ID)
}

// SetOrderItemID sets the "order_item" edge to the OrderItem entity by ID.
func (oppc *OrderPaymentPreferenceCreate) SetOrderItemID(id int) *OrderPaymentPreferenceCreate {
	oppc.mutation.SetOrderItemID(id)
	return oppc
}

// SetNillableOrderItemID sets the "order_item" edge to the OrderItem entity by ID if the given value is not nil.
func (oppc *OrderPaymentPreferenceCreate) SetNillableOrderItemID(id *int) *OrderPaymentPreferenceCreate {
	if id != nil {
		oppc = oppc.SetOrderItemID(*id)
	}
	return oppc
}

// SetOrderItem sets the "order_item" edge to the OrderItem entity.
func (oppc *OrderPaymentPreferenceCreate) SetOrderItem(o *OrderItem) *OrderPaymentPreferenceCreate {
	return oppc.SetOrderItemID(o.ID)
}

// SetOrderItemShipGroupID sets the "order_item_ship_group" edge to the OrderItemShipGroup entity by ID.
func (oppc *OrderPaymentPreferenceCreate) SetOrderItemShipGroupID(id int) *OrderPaymentPreferenceCreate {
	oppc.mutation.SetOrderItemShipGroupID(id)
	return oppc
}

// SetNillableOrderItemShipGroupID sets the "order_item_ship_group" edge to the OrderItemShipGroup entity by ID if the given value is not nil.
func (oppc *OrderPaymentPreferenceCreate) SetNillableOrderItemShipGroupID(id *int) *OrderPaymentPreferenceCreate {
	if id != nil {
		oppc = oppc.SetOrderItemShipGroupID(*id)
	}
	return oppc
}

// SetOrderItemShipGroup sets the "order_item_ship_group" edge to the OrderItemShipGroup entity.
func (oppc *OrderPaymentPreferenceCreate) SetOrderItemShipGroup(o *OrderItemShipGroup) *OrderPaymentPreferenceCreate {
	return oppc.SetOrderItemShipGroupID(o.ID)
}

// SetProductPricePurposeID sets the "product_price_purpose" edge to the ProductPricePurpose entity by ID.
func (oppc *OrderPaymentPreferenceCreate) SetProductPricePurposeID(id int) *OrderPaymentPreferenceCreate {
	oppc.mutation.SetProductPricePurposeID(id)
	return oppc
}

// SetNillableProductPricePurposeID sets the "product_price_purpose" edge to the ProductPricePurpose entity by ID if the given value is not nil.
func (oppc *OrderPaymentPreferenceCreate) SetNillableProductPricePurposeID(id *int) *OrderPaymentPreferenceCreate {
	if id != nil {
		oppc = oppc.SetProductPricePurposeID(*id)
	}
	return oppc
}

// SetProductPricePurpose sets the "product_price_purpose" edge to the ProductPricePurpose entity.
func (oppc *OrderPaymentPreferenceCreate) SetProductPricePurpose(p *ProductPricePurpose) *OrderPaymentPreferenceCreate {
	return oppc.SetProductPricePurposeID(p.ID)
}

// SetStatusItemID sets the "status_item" edge to the StatusItem entity by ID.
func (oppc *OrderPaymentPreferenceCreate) SetStatusItemID(id int) *OrderPaymentPreferenceCreate {
	oppc.mutation.SetStatusItemID(id)
	return oppc
}

// SetNillableStatusItemID sets the "status_item" edge to the StatusItem entity by ID if the given value is not nil.
func (oppc *OrderPaymentPreferenceCreate) SetNillableStatusItemID(id *int) *OrderPaymentPreferenceCreate {
	if id != nil {
		oppc = oppc.SetStatusItemID(*id)
	}
	return oppc
}

// SetStatusItem sets the "status_item" edge to the StatusItem entity.
func (oppc *OrderPaymentPreferenceCreate) SetStatusItem(s *StatusItem) *OrderPaymentPreferenceCreate {
	return oppc.SetStatusItemID(s.ID)
}

// AddOrderStatusIDs adds the "order_statuses" edge to the OrderStatus entity by IDs.
func (oppc *OrderPaymentPreferenceCreate) AddOrderStatusIDs(ids ...int) *OrderPaymentPreferenceCreate {
	oppc.mutation.AddOrderStatusIDs(ids...)
	return oppc
}

// AddOrderStatuses adds the "order_statuses" edges to the OrderStatus entity.
func (oppc *OrderPaymentPreferenceCreate) AddOrderStatuses(o ...*OrderStatus) *OrderPaymentPreferenceCreate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oppc.AddOrderStatusIDs(ids...)
}

// Mutation returns the OrderPaymentPreferenceMutation object of the builder.
func (oppc *OrderPaymentPreferenceCreate) Mutation() *OrderPaymentPreferenceMutation {
	return oppc.mutation
}

// Save creates the OrderPaymentPreference in the database.
func (oppc *OrderPaymentPreferenceCreate) Save(ctx context.Context) (*OrderPaymentPreference, error) {
	var (
		err  error
		node *OrderPaymentPreference
	)
	oppc.defaults()
	if len(oppc.hooks) == 0 {
		if err = oppc.check(); err != nil {
			return nil, err
		}
		node, err = oppc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderPaymentPreferenceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = oppc.check(); err != nil {
				return nil, err
			}
			oppc.mutation = mutation
			if node, err = oppc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(oppc.hooks) - 1; i >= 0; i-- {
			mut = oppc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, oppc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (oppc *OrderPaymentPreferenceCreate) SaveX(ctx context.Context) *OrderPaymentPreference {
	v, err := oppc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (oppc *OrderPaymentPreferenceCreate) defaults() {
	if _, ok := oppc.mutation.CreateTime(); !ok {
		v := orderpaymentpreference.DefaultCreateTime()
		oppc.mutation.SetCreateTime(v)
	}
	if _, ok := oppc.mutation.UpdateTime(); !ok {
		v := orderpaymentpreference.DefaultUpdateTime()
		oppc.mutation.SetUpdateTime(v)
	}
	if _, ok := oppc.mutation.CreatedDate(); !ok {
		v := orderpaymentpreference.DefaultCreatedDate()
		oppc.mutation.SetCreatedDate(v)
	}
	if _, ok := oppc.mutation.LastModifiedDate(); !ok {
		v := orderpaymentpreference.DefaultLastModifiedDate()
		oppc.mutation.SetLastModifiedDate(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oppc *OrderPaymentPreferenceCreate) check() error {
	if _, ok := oppc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New("ent: missing required field \"create_time\"")}
	}
	if _, ok := oppc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New("ent: missing required field \"update_time\"")}
	}
	if v, ok := oppc.mutation.PresentFlag(); ok {
		if err := orderpaymentpreference.PresentFlagValidator(v); err != nil {
			return &ValidationError{Name: "present_flag", err: fmt.Errorf("ent: validator failed for field \"present_flag\": %w", err)}
		}
	}
	if v, ok := oppc.mutation.SwipedFlag(); ok {
		if err := orderpaymentpreference.SwipedFlagValidator(v); err != nil {
			return &ValidationError{Name: "swiped_flag", err: fmt.Errorf("ent: validator failed for field \"swiped_flag\": %w", err)}
		}
	}
	if v, ok := oppc.mutation.OverflowFlag(); ok {
		if err := orderpaymentpreference.OverflowFlagValidator(v); err != nil {
			return &ValidationError{Name: "overflow_flag", err: fmt.Errorf("ent: validator failed for field \"overflow_flag\": %w", err)}
		}
	}
	if v, ok := oppc.mutation.NeedsNsfRetry(); ok {
		if err := orderpaymentpreference.NeedsNsfRetryValidator(v); err != nil {
			return &ValidationError{Name: "needs_nsf_retry", err: fmt.Errorf("ent: validator failed for field \"needs_nsf_retry\": %w", err)}
		}
	}
	return nil
}

func (oppc *OrderPaymentPreferenceCreate) sqlSave(ctx context.Context) (*OrderPaymentPreference, error) {
	_node, _spec := oppc.createSpec()
	if err := sqlgraph.CreateNode(ctx, oppc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (oppc *OrderPaymentPreferenceCreate) createSpec() (*OrderPaymentPreference, *sqlgraph.CreateSpec) {
	var (
		_node = &OrderPaymentPreference{config: oppc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: orderpaymentpreference.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: orderpaymentpreference.FieldID,
			},
		}
	)
	if value, ok := oppc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderpaymentpreference.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := oppc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderpaymentpreference.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := oppc.mutation.StringRef(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderpaymentpreference.FieldStringRef,
		})
		_node.StringRef = value
	}
	if value, ok := oppc.mutation.OrderItemSeqID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderpaymentpreference.FieldOrderItemSeqID,
		})
		_node.OrderItemSeqID = value
	}
	if value, ok := oppc.mutation.ShipGroupSeqID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderpaymentpreference.FieldShipGroupSeqID,
		})
		_node.ShipGroupSeqID = value
	}
	if value, ok := oppc.mutation.PaymentMethodTypeID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderpaymentpreference.FieldPaymentMethodTypeID,
		})
		_node.PaymentMethodTypeID = value
	}
	if value, ok := oppc.mutation.PaymentMethodID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderpaymentpreference.FieldPaymentMethodID,
		})
		_node.PaymentMethodID = value
	}
	if value, ok := oppc.mutation.FinAccountID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderpaymentpreference.FieldFinAccountID,
		})
		_node.FinAccountID = value
	}
	if value, ok := oppc.mutation.SecurityCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderpaymentpreference.FieldSecurityCode,
		})
		_node.SecurityCode = value
	}
	if value, ok := oppc.mutation.Track2(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderpaymentpreference.FieldTrack2,
		})
		_node.Track2 = value
	}
	if value, ok := oppc.mutation.PresentFlag(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: orderpaymentpreference.FieldPresentFlag,
		})
		_node.PresentFlag = value
	}
	if value, ok := oppc.mutation.SwipedFlag(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: orderpaymentpreference.FieldSwipedFlag,
		})
		_node.SwipedFlag = value
	}
	if value, ok := oppc.mutation.OverflowFlag(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: orderpaymentpreference.FieldOverflowFlag,
		})
		_node.OverflowFlag = value
	}
	if value, ok := oppc.mutation.MaxAmount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderpaymentpreference.FieldMaxAmount,
		})
		_node.MaxAmount = value
	}
	if value, ok := oppc.mutation.ProcessAttempt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderpaymentpreference.FieldProcessAttempt,
		})
		_node.ProcessAttempt = value
	}
	if value, ok := oppc.mutation.BillingPostalCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderpaymentpreference.FieldBillingPostalCode,
		})
		_node.BillingPostalCode = value
	}
	if value, ok := oppc.mutation.ManualAuthCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderpaymentpreference.FieldManualAuthCode,
		})
		_node.ManualAuthCode = value
	}
	if value, ok := oppc.mutation.ManualRefNum(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderpaymentpreference.FieldManualRefNum,
		})
		_node.ManualRefNum = value
	}
	if value, ok := oppc.mutation.NeedsNsfRetry(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: orderpaymentpreference.FieldNeedsNsfRetry,
		})
		_node.NeedsNsfRetry = value
	}
	if value, ok := oppc.mutation.CreatedDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderpaymentpreference.FieldCreatedDate,
		})
		_node.CreatedDate = value
	}
	if value, ok := oppc.mutation.CreatedByUserLogin(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderpaymentpreference.FieldCreatedByUserLogin,
		})
		_node.CreatedByUserLogin = value
	}
	if value, ok := oppc.mutation.LastModifiedDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderpaymentpreference.FieldLastModifiedDate,
		})
		_node.LastModifiedDate = value
	}
	if value, ok := oppc.mutation.LastModifiedByUserLogin(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderpaymentpreference.FieldLastModifiedByUserLogin,
		})
		_node.LastModifiedByUserLogin = value
	}
	if nodes := oppc.mutation.OrderHeaderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderpaymentpreference.OrderHeaderTable,
			Columns: []string{orderpaymentpreference.OrderHeaderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderheader.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.order_header_order_payment_preferences = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oppc.mutation.OrderItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderpaymentpreference.OrderItemTable,
			Columns: []string{orderpaymentpreference.OrderItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.order_item_order_payment_preferences = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oppc.mutation.OrderItemShipGroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderpaymentpreference.OrderItemShipGroupTable,
			Columns: []string{orderpaymentpreference.OrderItemShipGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitemshipgroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.order_item_ship_group_order_payment_preferences = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oppc.mutation.ProductPricePurposeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderpaymentpreference.ProductPricePurposeTable,
			Columns: []string{orderpaymentpreference.ProductPricePurposeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productpricepurpose.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.product_price_purpose_order_payment_preferences = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oppc.mutation.StatusItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderpaymentpreference.StatusItemTable,
			Columns: []string{orderpaymentpreference.StatusItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.status_item_order_payment_preferences = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oppc.mutation.OrderStatusesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderpaymentpreference.OrderStatusesTable,
			Columns: []string{orderpaymentpreference.OrderStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderstatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OrderPaymentPreferenceCreateBulk is the builder for creating many OrderPaymentPreference entities in bulk.
type OrderPaymentPreferenceCreateBulk struct {
	config
	builders []*OrderPaymentPreferenceCreate
}

// Save creates the OrderPaymentPreference entities in the database.
func (oppcb *OrderPaymentPreferenceCreateBulk) Save(ctx context.Context) ([]*OrderPaymentPreference, error) {
	specs := make([]*sqlgraph.CreateSpec, len(oppcb.builders))
	nodes := make([]*OrderPaymentPreference, len(oppcb.builders))
	mutators := make([]Mutator, len(oppcb.builders))
	for i := range oppcb.builders {
		func(i int, root context.Context) {
			builder := oppcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrderPaymentPreferenceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, oppcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, oppcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, oppcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (oppcb *OrderPaymentPreferenceCreateBulk) SaveX(ctx context.Context) []*OrderPaymentPreference {
	v, err := oppcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
