// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/orderheader"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/orderitem"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/orderitemshipgroup"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/orderpaymentpreference"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/orderstatus"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/predicate"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productpricepurpose"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/statusitem"
)

// OrderPaymentPreferenceQuery is the builder for querying OrderPaymentPreference entities.
type OrderPaymentPreferenceQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.OrderPaymentPreference
	// eager-loading edges.
	withOrderHeader         *OrderHeaderQuery
	withOrderItem           *OrderItemQuery
	withOrderItemShipGroup  *OrderItemShipGroupQuery
	withProductPricePurpose *ProductPricePurposeQuery
	withStatusItem          *StatusItemQuery
	withOrderStatuses       *OrderStatusQuery
	withFKs                 bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the OrderPaymentPreferenceQuery builder.
func (oppq *OrderPaymentPreferenceQuery) Where(ps ...predicate.OrderPaymentPreference) *OrderPaymentPreferenceQuery {
	oppq.predicates = append(oppq.predicates, ps...)
	return oppq
}

// Limit adds a limit step to the query.
func (oppq *OrderPaymentPreferenceQuery) Limit(limit int) *OrderPaymentPreferenceQuery {
	oppq.limit = &limit
	return oppq
}

// Offset adds an offset step to the query.
func (oppq *OrderPaymentPreferenceQuery) Offset(offset int) *OrderPaymentPreferenceQuery {
	oppq.offset = &offset
	return oppq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (oppq *OrderPaymentPreferenceQuery) Unique(unique bool) *OrderPaymentPreferenceQuery {
	oppq.unique = &unique
	return oppq
}

// Order adds an order step to the query.
func (oppq *OrderPaymentPreferenceQuery) Order(o ...OrderFunc) *OrderPaymentPreferenceQuery {
	oppq.order = append(oppq.order, o...)
	return oppq
}

// QueryOrderHeader chains the current query on the "order_header" edge.
func (oppq *OrderPaymentPreferenceQuery) QueryOrderHeader() *OrderHeaderQuery {
	query := &OrderHeaderQuery{config: oppq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := oppq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := oppq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(orderpaymentpreference.Table, orderpaymentpreference.FieldID, selector),
			sqlgraph.To(orderheader.Table, orderheader.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, orderpaymentpreference.OrderHeaderTable, orderpaymentpreference.OrderHeaderColumn),
		)
		fromU = sqlgraph.SetNeighbors(oppq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOrderItem chains the current query on the "order_item" edge.
func (oppq *OrderPaymentPreferenceQuery) QueryOrderItem() *OrderItemQuery {
	query := &OrderItemQuery{config: oppq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := oppq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := oppq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(orderpaymentpreference.Table, orderpaymentpreference.FieldID, selector),
			sqlgraph.To(orderitem.Table, orderitem.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, orderpaymentpreference.OrderItemTable, orderpaymentpreference.OrderItemColumn),
		)
		fromU = sqlgraph.SetNeighbors(oppq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOrderItemShipGroup chains the current query on the "order_item_ship_group" edge.
func (oppq *OrderPaymentPreferenceQuery) QueryOrderItemShipGroup() *OrderItemShipGroupQuery {
	query := &OrderItemShipGroupQuery{config: oppq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := oppq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := oppq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(orderpaymentpreference.Table, orderpaymentpreference.FieldID, selector),
			sqlgraph.To(orderitemshipgroup.Table, orderitemshipgroup.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, orderpaymentpreference.OrderItemShipGroupTable, orderpaymentpreference.OrderItemShipGroupColumn),
		)
		fromU = sqlgraph.SetNeighbors(oppq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProductPricePurpose chains the current query on the "product_price_purpose" edge.
func (oppq *OrderPaymentPreferenceQuery) QueryProductPricePurpose() *ProductPricePurposeQuery {
	query := &ProductPricePurposeQuery{config: oppq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := oppq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := oppq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(orderpaymentpreference.Table, orderpaymentpreference.FieldID, selector),
			sqlgraph.To(productpricepurpose.Table, productpricepurpose.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, orderpaymentpreference.ProductPricePurposeTable, orderpaymentpreference.ProductPricePurposeColumn),
		)
		fromU = sqlgraph.SetNeighbors(oppq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryStatusItem chains the current query on the "status_item" edge.
func (oppq *OrderPaymentPreferenceQuery) QueryStatusItem() *StatusItemQuery {
	query := &StatusItemQuery{config: oppq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := oppq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := oppq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(orderpaymentpreference.Table, orderpaymentpreference.FieldID, selector),
			sqlgraph.To(statusitem.Table, statusitem.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, orderpaymentpreference.StatusItemTable, orderpaymentpreference.StatusItemColumn),
		)
		fromU = sqlgraph.SetNeighbors(oppq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOrderStatuses chains the current query on the "order_statuses" edge.
func (oppq *OrderPaymentPreferenceQuery) QueryOrderStatuses() *OrderStatusQuery {
	query := &OrderStatusQuery{config: oppq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := oppq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := oppq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(orderpaymentpreference.Table, orderpaymentpreference.FieldID, selector),
			sqlgraph.To(orderstatus.Table, orderstatus.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, orderpaymentpreference.OrderStatusesTable, orderpaymentpreference.OrderStatusesColumn),
		)
		fromU = sqlgraph.SetNeighbors(oppq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first OrderPaymentPreference entity from the query.
// Returns a *NotFoundError when no OrderPaymentPreference was found.
func (oppq *OrderPaymentPreferenceQuery) First(ctx context.Context) (*OrderPaymentPreference, error) {
	nodes, err := oppq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{orderpaymentpreference.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (oppq *OrderPaymentPreferenceQuery) FirstX(ctx context.Context) *OrderPaymentPreference {
	node, err := oppq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first OrderPaymentPreference ID from the query.
// Returns a *NotFoundError when no OrderPaymentPreference ID was found.
func (oppq *OrderPaymentPreferenceQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = oppq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{orderpaymentpreference.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (oppq *OrderPaymentPreferenceQuery) FirstIDX(ctx context.Context) int {
	id, err := oppq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single OrderPaymentPreference entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one OrderPaymentPreference entity is not found.
// Returns a *NotFoundError when no OrderPaymentPreference entities are found.
func (oppq *OrderPaymentPreferenceQuery) Only(ctx context.Context) (*OrderPaymentPreference, error) {
	nodes, err := oppq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{orderpaymentpreference.Label}
	default:
		return nil, &NotSingularError{orderpaymentpreference.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (oppq *OrderPaymentPreferenceQuery) OnlyX(ctx context.Context) *OrderPaymentPreference {
	node, err := oppq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only OrderPaymentPreference ID in the query.
// Returns a *NotSingularError when exactly one OrderPaymentPreference ID is not found.
// Returns a *NotFoundError when no entities are found.
func (oppq *OrderPaymentPreferenceQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = oppq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{orderpaymentpreference.Label}
	default:
		err = &NotSingularError{orderpaymentpreference.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (oppq *OrderPaymentPreferenceQuery) OnlyIDX(ctx context.Context) int {
	id, err := oppq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of OrderPaymentPreferences.
func (oppq *OrderPaymentPreferenceQuery) All(ctx context.Context) ([]*OrderPaymentPreference, error) {
	if err := oppq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return oppq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (oppq *OrderPaymentPreferenceQuery) AllX(ctx context.Context) []*OrderPaymentPreference {
	nodes, err := oppq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of OrderPaymentPreference IDs.
func (oppq *OrderPaymentPreferenceQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := oppq.Select(orderpaymentpreference.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (oppq *OrderPaymentPreferenceQuery) IDsX(ctx context.Context) []int {
	ids, err := oppq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (oppq *OrderPaymentPreferenceQuery) Count(ctx context.Context) (int, error) {
	if err := oppq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return oppq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (oppq *OrderPaymentPreferenceQuery) CountX(ctx context.Context) int {
	count, err := oppq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (oppq *OrderPaymentPreferenceQuery) Exist(ctx context.Context) (bool, error) {
	if err := oppq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return oppq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (oppq *OrderPaymentPreferenceQuery) ExistX(ctx context.Context) bool {
	exist, err := oppq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the OrderPaymentPreferenceQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (oppq *OrderPaymentPreferenceQuery) Clone() *OrderPaymentPreferenceQuery {
	if oppq == nil {
		return nil
	}
	return &OrderPaymentPreferenceQuery{
		config:                  oppq.config,
		limit:                   oppq.limit,
		offset:                  oppq.offset,
		order:                   append([]OrderFunc{}, oppq.order...),
		predicates:              append([]predicate.OrderPaymentPreference{}, oppq.predicates...),
		withOrderHeader:         oppq.withOrderHeader.Clone(),
		withOrderItem:           oppq.withOrderItem.Clone(),
		withOrderItemShipGroup:  oppq.withOrderItemShipGroup.Clone(),
		withProductPricePurpose: oppq.withProductPricePurpose.Clone(),
		withStatusItem:          oppq.withStatusItem.Clone(),
		withOrderStatuses:       oppq.withOrderStatuses.Clone(),
		// clone intermediate query.
		sql:  oppq.sql.Clone(),
		path: oppq.path,
	}
}

// WithOrderHeader tells the query-builder to eager-load the nodes that are connected to
// the "order_header" edge. The optional arguments are used to configure the query builder of the edge.
func (oppq *OrderPaymentPreferenceQuery) WithOrderHeader(opts ...func(*OrderHeaderQuery)) *OrderPaymentPreferenceQuery {
	query := &OrderHeaderQuery{config: oppq.config}
	for _, opt := range opts {
		opt(query)
	}
	oppq.withOrderHeader = query
	return oppq
}

// WithOrderItem tells the query-builder to eager-load the nodes that are connected to
// the "order_item" edge. The optional arguments are used to configure the query builder of the edge.
func (oppq *OrderPaymentPreferenceQuery) WithOrderItem(opts ...func(*OrderItemQuery)) *OrderPaymentPreferenceQuery {
	query := &OrderItemQuery{config: oppq.config}
	for _, opt := range opts {
		opt(query)
	}
	oppq.withOrderItem = query
	return oppq
}

// WithOrderItemShipGroup tells the query-builder to eager-load the nodes that are connected to
// the "order_item_ship_group" edge. The optional arguments are used to configure the query builder of the edge.
func (oppq *OrderPaymentPreferenceQuery) WithOrderItemShipGroup(opts ...func(*OrderItemShipGroupQuery)) *OrderPaymentPreferenceQuery {
	query := &OrderItemShipGroupQuery{config: oppq.config}
	for _, opt := range opts {
		opt(query)
	}
	oppq.withOrderItemShipGroup = query
	return oppq
}

// WithProductPricePurpose tells the query-builder to eager-load the nodes that are connected to
// the "product_price_purpose" edge. The optional arguments are used to configure the query builder of the edge.
func (oppq *OrderPaymentPreferenceQuery) WithProductPricePurpose(opts ...func(*ProductPricePurposeQuery)) *OrderPaymentPreferenceQuery {
	query := &ProductPricePurposeQuery{config: oppq.config}
	for _, opt := range opts {
		opt(query)
	}
	oppq.withProductPricePurpose = query
	return oppq
}

// WithStatusItem tells the query-builder to eager-load the nodes that are connected to
// the "status_item" edge. The optional arguments are used to configure the query builder of the edge.
func (oppq *OrderPaymentPreferenceQuery) WithStatusItem(opts ...func(*StatusItemQuery)) *OrderPaymentPreferenceQuery {
	query := &StatusItemQuery{config: oppq.config}
	for _, opt := range opts {
		opt(query)
	}
	oppq.withStatusItem = query
	return oppq
}

// WithOrderStatuses tells the query-builder to eager-load the nodes that are connected to
// the "order_statuses" edge. The optional arguments are used to configure the query builder of the edge.
func (oppq *OrderPaymentPreferenceQuery) WithOrderStatuses(opts ...func(*OrderStatusQuery)) *OrderPaymentPreferenceQuery {
	query := &OrderStatusQuery{config: oppq.config}
	for _, opt := range opts {
		opt(query)
	}
	oppq.withOrderStatuses = query
	return oppq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.OrderPaymentPreference.Query().
//		GroupBy(orderpaymentpreference.FieldCreateTime).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (oppq *OrderPaymentPreferenceQuery) GroupBy(field string, fields ...string) *OrderPaymentPreferenceGroupBy {
	group := &OrderPaymentPreferenceGroupBy{config: oppq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := oppq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return oppq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//	}
//
//	client.OrderPaymentPreference.Query().
//		Select(orderpaymentpreference.FieldCreateTime).
//		Scan(ctx, &v)
//
func (oppq *OrderPaymentPreferenceQuery) Select(field string, fields ...string) *OrderPaymentPreferenceSelect {
	oppq.fields = append([]string{field}, fields...)
	return &OrderPaymentPreferenceSelect{OrderPaymentPreferenceQuery: oppq}
}

func (oppq *OrderPaymentPreferenceQuery) prepareQuery(ctx context.Context) error {
	for _, f := range oppq.fields {
		if !orderpaymentpreference.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if oppq.path != nil {
		prev, err := oppq.path(ctx)
		if err != nil {
			return err
		}
		oppq.sql = prev
	}
	return nil
}

func (oppq *OrderPaymentPreferenceQuery) sqlAll(ctx context.Context) ([]*OrderPaymentPreference, error) {
	var (
		nodes       = []*OrderPaymentPreference{}
		withFKs     = oppq.withFKs
		_spec       = oppq.querySpec()
		loadedTypes = [6]bool{
			oppq.withOrderHeader != nil,
			oppq.withOrderItem != nil,
			oppq.withOrderItemShipGroup != nil,
			oppq.withProductPricePurpose != nil,
			oppq.withStatusItem != nil,
			oppq.withOrderStatuses != nil,
		}
	)
	if oppq.withOrderHeader != nil || oppq.withOrderItem != nil || oppq.withOrderItemShipGroup != nil || oppq.withProductPricePurpose != nil || oppq.withStatusItem != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, orderpaymentpreference.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &OrderPaymentPreference{config: oppq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, oppq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := oppq.withOrderHeader; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*OrderPaymentPreference)
		for i := range nodes {
			if nodes[i].order_header_order_payment_preferences == nil {
				continue
			}
			fk := *nodes[i].order_header_order_payment_preferences
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(orderheader.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "order_header_order_payment_preferences" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.OrderHeader = n
			}
		}
	}

	if query := oppq.withOrderItem; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*OrderPaymentPreference)
		for i := range nodes {
			if nodes[i].order_item_order_payment_preferences == nil {
				continue
			}
			fk := *nodes[i].order_item_order_payment_preferences
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(orderitem.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "order_item_order_payment_preferences" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.OrderItem = n
			}
		}
	}

	if query := oppq.withOrderItemShipGroup; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*OrderPaymentPreference)
		for i := range nodes {
			if nodes[i].order_item_ship_group_order_payment_preferences == nil {
				continue
			}
			fk := *nodes[i].order_item_ship_group_order_payment_preferences
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(orderitemshipgroup.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "order_item_ship_group_order_payment_preferences" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.OrderItemShipGroup = n
			}
		}
	}

	if query := oppq.withProductPricePurpose; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*OrderPaymentPreference)
		for i := range nodes {
			if nodes[i].product_price_purpose_order_payment_preferences == nil {
				continue
			}
			fk := *nodes[i].product_price_purpose_order_payment_preferences
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(productpricepurpose.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "product_price_purpose_order_payment_preferences" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.ProductPricePurpose = n
			}
		}
	}

	if query := oppq.withStatusItem; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*OrderPaymentPreference)
		for i := range nodes {
			if nodes[i].status_item_order_payment_preferences == nil {
				continue
			}
			fk := *nodes[i].status_item_order_payment_preferences
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(statusitem.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "status_item_order_payment_preferences" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.StatusItem = n
			}
		}
	}

	if query := oppq.withOrderStatuses; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*OrderPaymentPreference)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.OrderStatuses = []*OrderStatus{}
		}
		query.withFKs = true
		query.Where(predicate.OrderStatus(func(s *sql.Selector) {
			s.Where(sql.InValues(orderpaymentpreference.OrderStatusesColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.order_payment_preference_order_statuses
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "order_payment_preference_order_statuses" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "order_payment_preference_order_statuses" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.OrderStatuses = append(node.Edges.OrderStatuses, n)
		}
	}

	return nodes, nil
}

func (oppq *OrderPaymentPreferenceQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := oppq.querySpec()
	return sqlgraph.CountNodes(ctx, oppq.driver, _spec)
}

func (oppq *OrderPaymentPreferenceQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := oppq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (oppq *OrderPaymentPreferenceQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   orderpaymentpreference.Table,
			Columns: orderpaymentpreference.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: orderpaymentpreference.FieldID,
			},
		},
		From:   oppq.sql,
		Unique: true,
	}
	if unique := oppq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := oppq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, orderpaymentpreference.FieldID)
		for i := range fields {
			if fields[i] != orderpaymentpreference.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := oppq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := oppq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := oppq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := oppq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (oppq *OrderPaymentPreferenceQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(oppq.driver.Dialect())
	t1 := builder.Table(orderpaymentpreference.Table)
	columns := oppq.fields
	if len(columns) == 0 {
		columns = orderpaymentpreference.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if oppq.sql != nil {
		selector = oppq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	for _, p := range oppq.predicates {
		p(selector)
	}
	for _, p := range oppq.order {
		p(selector)
	}
	if offset := oppq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := oppq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// OrderPaymentPreferenceGroupBy is the group-by builder for OrderPaymentPreference entities.
type OrderPaymentPreferenceGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (oppgb *OrderPaymentPreferenceGroupBy) Aggregate(fns ...AggregateFunc) *OrderPaymentPreferenceGroupBy {
	oppgb.fns = append(oppgb.fns, fns...)
	return oppgb
}

// Scan applies the group-by query and scans the result into the given value.
func (oppgb *OrderPaymentPreferenceGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := oppgb.path(ctx)
	if err != nil {
		return err
	}
	oppgb.sql = query
	return oppgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (oppgb *OrderPaymentPreferenceGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := oppgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (oppgb *OrderPaymentPreferenceGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(oppgb.fields) > 1 {
		return nil, errors.New("ent: OrderPaymentPreferenceGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := oppgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (oppgb *OrderPaymentPreferenceGroupBy) StringsX(ctx context.Context) []string {
	v, err := oppgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (oppgb *OrderPaymentPreferenceGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = oppgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{orderpaymentpreference.Label}
	default:
		err = fmt.Errorf("ent: OrderPaymentPreferenceGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (oppgb *OrderPaymentPreferenceGroupBy) StringX(ctx context.Context) string {
	v, err := oppgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (oppgb *OrderPaymentPreferenceGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(oppgb.fields) > 1 {
		return nil, errors.New("ent: OrderPaymentPreferenceGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := oppgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (oppgb *OrderPaymentPreferenceGroupBy) IntsX(ctx context.Context) []int {
	v, err := oppgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (oppgb *OrderPaymentPreferenceGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = oppgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{orderpaymentpreference.Label}
	default:
		err = fmt.Errorf("ent: OrderPaymentPreferenceGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (oppgb *OrderPaymentPreferenceGroupBy) IntX(ctx context.Context) int {
	v, err := oppgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (oppgb *OrderPaymentPreferenceGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(oppgb.fields) > 1 {
		return nil, errors.New("ent: OrderPaymentPreferenceGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := oppgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (oppgb *OrderPaymentPreferenceGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := oppgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (oppgb *OrderPaymentPreferenceGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = oppgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{orderpaymentpreference.Label}
	default:
		err = fmt.Errorf("ent: OrderPaymentPreferenceGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (oppgb *OrderPaymentPreferenceGroupBy) Float64X(ctx context.Context) float64 {
	v, err := oppgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (oppgb *OrderPaymentPreferenceGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(oppgb.fields) > 1 {
		return nil, errors.New("ent: OrderPaymentPreferenceGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := oppgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (oppgb *OrderPaymentPreferenceGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := oppgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (oppgb *OrderPaymentPreferenceGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = oppgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{orderpaymentpreference.Label}
	default:
		err = fmt.Errorf("ent: OrderPaymentPreferenceGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (oppgb *OrderPaymentPreferenceGroupBy) BoolX(ctx context.Context) bool {
	v, err := oppgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (oppgb *OrderPaymentPreferenceGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range oppgb.fields {
		if !orderpaymentpreference.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := oppgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := oppgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (oppgb *OrderPaymentPreferenceGroupBy) sqlQuery() *sql.Selector {
	selector := oppgb.sql.Select()
	aggregation := make([]string, 0, len(oppgb.fns))
	for _, fn := range oppgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(oppgb.fields)+len(oppgb.fns))
		for _, f := range oppgb.fields {
			columns = append(columns, selector.C(f))
		}
		for _, c := range aggregation {
			columns = append(columns, c)
		}
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(oppgb.fields...)...)
}

// OrderPaymentPreferenceSelect is the builder for selecting fields of OrderPaymentPreference entities.
type OrderPaymentPreferenceSelect struct {
	*OrderPaymentPreferenceQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (opps *OrderPaymentPreferenceSelect) Scan(ctx context.Context, v interface{}) error {
	if err := opps.prepareQuery(ctx); err != nil {
		return err
	}
	opps.sql = opps.OrderPaymentPreferenceQuery.sqlQuery(ctx)
	return opps.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (opps *OrderPaymentPreferenceSelect) ScanX(ctx context.Context, v interface{}) {
	if err := opps.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (opps *OrderPaymentPreferenceSelect) Strings(ctx context.Context) ([]string, error) {
	if len(opps.fields) > 1 {
		return nil, errors.New("ent: OrderPaymentPreferenceSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := opps.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (opps *OrderPaymentPreferenceSelect) StringsX(ctx context.Context) []string {
	v, err := opps.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (opps *OrderPaymentPreferenceSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = opps.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{orderpaymentpreference.Label}
	default:
		err = fmt.Errorf("ent: OrderPaymentPreferenceSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (opps *OrderPaymentPreferenceSelect) StringX(ctx context.Context) string {
	v, err := opps.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (opps *OrderPaymentPreferenceSelect) Ints(ctx context.Context) ([]int, error) {
	if len(opps.fields) > 1 {
		return nil, errors.New("ent: OrderPaymentPreferenceSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := opps.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (opps *OrderPaymentPreferenceSelect) IntsX(ctx context.Context) []int {
	v, err := opps.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (opps *OrderPaymentPreferenceSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = opps.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{orderpaymentpreference.Label}
	default:
		err = fmt.Errorf("ent: OrderPaymentPreferenceSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (opps *OrderPaymentPreferenceSelect) IntX(ctx context.Context) int {
	v, err := opps.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (opps *OrderPaymentPreferenceSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(opps.fields) > 1 {
		return nil, errors.New("ent: OrderPaymentPreferenceSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := opps.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (opps *OrderPaymentPreferenceSelect) Float64sX(ctx context.Context) []float64 {
	v, err := opps.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (opps *OrderPaymentPreferenceSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = opps.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{orderpaymentpreference.Label}
	default:
		err = fmt.Errorf("ent: OrderPaymentPreferenceSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (opps *OrderPaymentPreferenceSelect) Float64X(ctx context.Context) float64 {
	v, err := opps.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (opps *OrderPaymentPreferenceSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(opps.fields) > 1 {
		return nil, errors.New("ent: OrderPaymentPreferenceSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := opps.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (opps *OrderPaymentPreferenceSelect) BoolsX(ctx context.Context) []bool {
	v, err := opps.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (opps *OrderPaymentPreferenceSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = opps.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{orderpaymentpreference.Label}
	default:
		err = fmt.Errorf("ent: OrderPaymentPreferenceSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (opps *OrderPaymentPreferenceSelect) BoolX(ctx context.Context) bool {
	v, err := opps.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (opps *OrderPaymentPreferenceSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := opps.sql.Query()
	if err := opps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
