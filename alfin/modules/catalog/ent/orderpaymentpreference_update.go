// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/orderheader"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/orderitem"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/orderitemshipgroup"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/orderpaymentpreference"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/orderstatus"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/predicate"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productpricepurpose"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/statusitem"
)

// OrderPaymentPreferenceUpdate is the builder for updating OrderPaymentPreference entities.
type OrderPaymentPreferenceUpdate struct {
	config
	hooks    []Hook
	mutation *OrderPaymentPreferenceMutation
}

// Where adds a new predicate for the OrderPaymentPreferenceUpdate builder.
func (oppu *OrderPaymentPreferenceUpdate) Where(ps ...predicate.OrderPaymentPreference) *OrderPaymentPreferenceUpdate {
	oppu.mutation.predicates = append(oppu.mutation.predicates, ps...)
	return oppu
}

// SetStringRef sets the "string_ref" field.
func (oppu *OrderPaymentPreferenceUpdate) SetStringRef(s string) *OrderPaymentPreferenceUpdate {
	oppu.mutation.SetStringRef(s)
	return oppu
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (oppu *OrderPaymentPreferenceUpdate) SetNillableStringRef(s *string) *OrderPaymentPreferenceUpdate {
	if s != nil {
		oppu.SetStringRef(*s)
	}
	return oppu
}

// ClearStringRef clears the value of the "string_ref" field.
func (oppu *OrderPaymentPreferenceUpdate) ClearStringRef() *OrderPaymentPreferenceUpdate {
	oppu.mutation.ClearStringRef()
	return oppu
}

// SetOrderItemSeqID sets the "order_item_seq_id" field.
func (oppu *OrderPaymentPreferenceUpdate) SetOrderItemSeqID(i int) *OrderPaymentPreferenceUpdate {
	oppu.mutation.ResetOrderItemSeqID()
	oppu.mutation.SetOrderItemSeqID(i)
	return oppu
}

// SetNillableOrderItemSeqID sets the "order_item_seq_id" field if the given value is not nil.
func (oppu *OrderPaymentPreferenceUpdate) SetNillableOrderItemSeqID(i *int) *OrderPaymentPreferenceUpdate {
	if i != nil {
		oppu.SetOrderItemSeqID(*i)
	}
	return oppu
}

// AddOrderItemSeqID adds i to the "order_item_seq_id" field.
func (oppu *OrderPaymentPreferenceUpdate) AddOrderItemSeqID(i int) *OrderPaymentPreferenceUpdate {
	oppu.mutation.AddOrderItemSeqID(i)
	return oppu
}

// ClearOrderItemSeqID clears the value of the "order_item_seq_id" field.
func (oppu *OrderPaymentPreferenceUpdate) ClearOrderItemSeqID() *OrderPaymentPreferenceUpdate {
	oppu.mutation.ClearOrderItemSeqID()
	return oppu
}

// SetShipGroupSeqID sets the "ship_group_seq_id" field.
func (oppu *OrderPaymentPreferenceUpdate) SetShipGroupSeqID(i int) *OrderPaymentPreferenceUpdate {
	oppu.mutation.ResetShipGroupSeqID()
	oppu.mutation.SetShipGroupSeqID(i)
	return oppu
}

// SetNillableShipGroupSeqID sets the "ship_group_seq_id" field if the given value is not nil.
func (oppu *OrderPaymentPreferenceUpdate) SetNillableShipGroupSeqID(i *int) *OrderPaymentPreferenceUpdate {
	if i != nil {
		oppu.SetShipGroupSeqID(*i)
	}
	return oppu
}

// AddShipGroupSeqID adds i to the "ship_group_seq_id" field.
func (oppu *OrderPaymentPreferenceUpdate) AddShipGroupSeqID(i int) *OrderPaymentPreferenceUpdate {
	oppu.mutation.AddShipGroupSeqID(i)
	return oppu
}

// ClearShipGroupSeqID clears the value of the "ship_group_seq_id" field.
func (oppu *OrderPaymentPreferenceUpdate) ClearShipGroupSeqID() *OrderPaymentPreferenceUpdate {
	oppu.mutation.ClearShipGroupSeqID()
	return oppu
}

// SetPaymentMethodTypeID sets the "payment_method_type_id" field.
func (oppu *OrderPaymentPreferenceUpdate) SetPaymentMethodTypeID(i int) *OrderPaymentPreferenceUpdate {
	oppu.mutation.ResetPaymentMethodTypeID()
	oppu.mutation.SetPaymentMethodTypeID(i)
	return oppu
}

// SetNillablePaymentMethodTypeID sets the "payment_method_type_id" field if the given value is not nil.
func (oppu *OrderPaymentPreferenceUpdate) SetNillablePaymentMethodTypeID(i *int) *OrderPaymentPreferenceUpdate {
	if i != nil {
		oppu.SetPaymentMethodTypeID(*i)
	}
	return oppu
}

// AddPaymentMethodTypeID adds i to the "payment_method_type_id" field.
func (oppu *OrderPaymentPreferenceUpdate) AddPaymentMethodTypeID(i int) *OrderPaymentPreferenceUpdate {
	oppu.mutation.AddPaymentMethodTypeID(i)
	return oppu
}

// ClearPaymentMethodTypeID clears the value of the "payment_method_type_id" field.
func (oppu *OrderPaymentPreferenceUpdate) ClearPaymentMethodTypeID() *OrderPaymentPreferenceUpdate {
	oppu.mutation.ClearPaymentMethodTypeID()
	return oppu
}

// SetPaymentMethodID sets the "payment_method_id" field.
func (oppu *OrderPaymentPreferenceUpdate) SetPaymentMethodID(i int) *OrderPaymentPreferenceUpdate {
	oppu.mutation.ResetPaymentMethodID()
	oppu.mutation.SetPaymentMethodID(i)
	return oppu
}

// SetNillablePaymentMethodID sets the "payment_method_id" field if the given value is not nil.
func (oppu *OrderPaymentPreferenceUpdate) SetNillablePaymentMethodID(i *int) *OrderPaymentPreferenceUpdate {
	if i != nil {
		oppu.SetPaymentMethodID(*i)
	}
	return oppu
}

// AddPaymentMethodID adds i to the "payment_method_id" field.
func (oppu *OrderPaymentPreferenceUpdate) AddPaymentMethodID(i int) *OrderPaymentPreferenceUpdate {
	oppu.mutation.AddPaymentMethodID(i)
	return oppu
}

// ClearPaymentMethodID clears the value of the "payment_method_id" field.
func (oppu *OrderPaymentPreferenceUpdate) ClearPaymentMethodID() *OrderPaymentPreferenceUpdate {
	oppu.mutation.ClearPaymentMethodID()
	return oppu
}

// SetFinAccountID sets the "fin_account_id" field.
func (oppu *OrderPaymentPreferenceUpdate) SetFinAccountID(i int) *OrderPaymentPreferenceUpdate {
	oppu.mutation.ResetFinAccountID()
	oppu.mutation.SetFinAccountID(i)
	return oppu
}

// SetNillableFinAccountID sets the "fin_account_id" field if the given value is not nil.
func (oppu *OrderPaymentPreferenceUpdate) SetNillableFinAccountID(i *int) *OrderPaymentPreferenceUpdate {
	if i != nil {
		oppu.SetFinAccountID(*i)
	}
	return oppu
}

// AddFinAccountID adds i to the "fin_account_id" field.
func (oppu *OrderPaymentPreferenceUpdate) AddFinAccountID(i int) *OrderPaymentPreferenceUpdate {
	oppu.mutation.AddFinAccountID(i)
	return oppu
}

// ClearFinAccountID clears the value of the "fin_account_id" field.
func (oppu *OrderPaymentPreferenceUpdate) ClearFinAccountID() *OrderPaymentPreferenceUpdate {
	oppu.mutation.ClearFinAccountID()
	return oppu
}

// SetSecurityCode sets the "security_code" field.
func (oppu *OrderPaymentPreferenceUpdate) SetSecurityCode(s string) *OrderPaymentPreferenceUpdate {
	oppu.mutation.SetSecurityCode(s)
	return oppu
}

// SetNillableSecurityCode sets the "security_code" field if the given value is not nil.
func (oppu *OrderPaymentPreferenceUpdate) SetNillableSecurityCode(s *string) *OrderPaymentPreferenceUpdate {
	if s != nil {
		oppu.SetSecurityCode(*s)
	}
	return oppu
}

// ClearSecurityCode clears the value of the "security_code" field.
func (oppu *OrderPaymentPreferenceUpdate) ClearSecurityCode() *OrderPaymentPreferenceUpdate {
	oppu.mutation.ClearSecurityCode()
	return oppu
}

// SetTrack2 sets the "track_2" field.
func (oppu *OrderPaymentPreferenceUpdate) SetTrack2(s string) *OrderPaymentPreferenceUpdate {
	oppu.mutation.SetTrack2(s)
	return oppu
}

// SetNillableTrack2 sets the "track_2" field if the given value is not nil.
func (oppu *OrderPaymentPreferenceUpdate) SetNillableTrack2(s *string) *OrderPaymentPreferenceUpdate {
	if s != nil {
		oppu.SetTrack2(*s)
	}
	return oppu
}

// ClearTrack2 clears the value of the "track_2" field.
func (oppu *OrderPaymentPreferenceUpdate) ClearTrack2() *OrderPaymentPreferenceUpdate {
	oppu.mutation.ClearTrack2()
	return oppu
}

// SetPresentFlag sets the "present_flag" field.
func (oppu *OrderPaymentPreferenceUpdate) SetPresentFlag(of orderpaymentpreference.PresentFlag) *OrderPaymentPreferenceUpdate {
	oppu.mutation.SetPresentFlag(of)
	return oppu
}

// SetNillablePresentFlag sets the "present_flag" field if the given value is not nil.
func (oppu *OrderPaymentPreferenceUpdate) SetNillablePresentFlag(of *orderpaymentpreference.PresentFlag) *OrderPaymentPreferenceUpdate {
	if of != nil {
		oppu.SetPresentFlag(*of)
	}
	return oppu
}

// ClearPresentFlag clears the value of the "present_flag" field.
func (oppu *OrderPaymentPreferenceUpdate) ClearPresentFlag() *OrderPaymentPreferenceUpdate {
	oppu.mutation.ClearPresentFlag()
	return oppu
}

// SetSwipedFlag sets the "swiped_flag" field.
func (oppu *OrderPaymentPreferenceUpdate) SetSwipedFlag(of orderpaymentpreference.SwipedFlag) *OrderPaymentPreferenceUpdate {
	oppu.mutation.SetSwipedFlag(of)
	return oppu
}

// SetNillableSwipedFlag sets the "swiped_flag" field if the given value is not nil.
func (oppu *OrderPaymentPreferenceUpdate) SetNillableSwipedFlag(of *orderpaymentpreference.SwipedFlag) *OrderPaymentPreferenceUpdate {
	if of != nil {
		oppu.SetSwipedFlag(*of)
	}
	return oppu
}

// ClearSwipedFlag clears the value of the "swiped_flag" field.
func (oppu *OrderPaymentPreferenceUpdate) ClearSwipedFlag() *OrderPaymentPreferenceUpdate {
	oppu.mutation.ClearSwipedFlag()
	return oppu
}

// SetOverflowFlag sets the "overflow_flag" field.
func (oppu *OrderPaymentPreferenceUpdate) SetOverflowFlag(of orderpaymentpreference.OverflowFlag) *OrderPaymentPreferenceUpdate {
	oppu.mutation.SetOverflowFlag(of)
	return oppu
}

// SetNillableOverflowFlag sets the "overflow_flag" field if the given value is not nil.
func (oppu *OrderPaymentPreferenceUpdate) SetNillableOverflowFlag(of *orderpaymentpreference.OverflowFlag) *OrderPaymentPreferenceUpdate {
	if of != nil {
		oppu.SetOverflowFlag(*of)
	}
	return oppu
}

// ClearOverflowFlag clears the value of the "overflow_flag" field.
func (oppu *OrderPaymentPreferenceUpdate) ClearOverflowFlag() *OrderPaymentPreferenceUpdate {
	oppu.mutation.ClearOverflowFlag()
	return oppu
}

// SetMaxAmount sets the "max_amount" field.
func (oppu *OrderPaymentPreferenceUpdate) SetMaxAmount(f float64) *OrderPaymentPreferenceUpdate {
	oppu.mutation.ResetMaxAmount()
	oppu.mutation.SetMaxAmount(f)
	return oppu
}

// SetNillableMaxAmount sets the "max_amount" field if the given value is not nil.
func (oppu *OrderPaymentPreferenceUpdate) SetNillableMaxAmount(f *float64) *OrderPaymentPreferenceUpdate {
	if f != nil {
		oppu.SetMaxAmount(*f)
	}
	return oppu
}

// AddMaxAmount adds f to the "max_amount" field.
func (oppu *OrderPaymentPreferenceUpdate) AddMaxAmount(f float64) *OrderPaymentPreferenceUpdate {
	oppu.mutation.AddMaxAmount(f)
	return oppu
}

// ClearMaxAmount clears the value of the "max_amount" field.
func (oppu *OrderPaymentPreferenceUpdate) ClearMaxAmount() *OrderPaymentPreferenceUpdate {
	oppu.mutation.ClearMaxAmount()
	return oppu
}

// SetProcessAttempt sets the "process_attempt" field.
func (oppu *OrderPaymentPreferenceUpdate) SetProcessAttempt(i int) *OrderPaymentPreferenceUpdate {
	oppu.mutation.ResetProcessAttempt()
	oppu.mutation.SetProcessAttempt(i)
	return oppu
}

// SetNillableProcessAttempt sets the "process_attempt" field if the given value is not nil.
func (oppu *OrderPaymentPreferenceUpdate) SetNillableProcessAttempt(i *int) *OrderPaymentPreferenceUpdate {
	if i != nil {
		oppu.SetProcessAttempt(*i)
	}
	return oppu
}

// AddProcessAttempt adds i to the "process_attempt" field.
func (oppu *OrderPaymentPreferenceUpdate) AddProcessAttempt(i int) *OrderPaymentPreferenceUpdate {
	oppu.mutation.AddProcessAttempt(i)
	return oppu
}

// ClearProcessAttempt clears the value of the "process_attempt" field.
func (oppu *OrderPaymentPreferenceUpdate) ClearProcessAttempt() *OrderPaymentPreferenceUpdate {
	oppu.mutation.ClearProcessAttempt()
	return oppu
}

// SetBillingPostalCode sets the "billing_postal_code" field.
func (oppu *OrderPaymentPreferenceUpdate) SetBillingPostalCode(s string) *OrderPaymentPreferenceUpdate {
	oppu.mutation.SetBillingPostalCode(s)
	return oppu
}

// SetNillableBillingPostalCode sets the "billing_postal_code" field if the given value is not nil.
func (oppu *OrderPaymentPreferenceUpdate) SetNillableBillingPostalCode(s *string) *OrderPaymentPreferenceUpdate {
	if s != nil {
		oppu.SetBillingPostalCode(*s)
	}
	return oppu
}

// ClearBillingPostalCode clears the value of the "billing_postal_code" field.
func (oppu *OrderPaymentPreferenceUpdate) ClearBillingPostalCode() *OrderPaymentPreferenceUpdate {
	oppu.mutation.ClearBillingPostalCode()
	return oppu
}

// SetManualAuthCode sets the "manual_auth_code" field.
func (oppu *OrderPaymentPreferenceUpdate) SetManualAuthCode(s string) *OrderPaymentPreferenceUpdate {
	oppu.mutation.SetManualAuthCode(s)
	return oppu
}

// SetNillableManualAuthCode sets the "manual_auth_code" field if the given value is not nil.
func (oppu *OrderPaymentPreferenceUpdate) SetNillableManualAuthCode(s *string) *OrderPaymentPreferenceUpdate {
	if s != nil {
		oppu.SetManualAuthCode(*s)
	}
	return oppu
}

// ClearManualAuthCode clears the value of the "manual_auth_code" field.
func (oppu *OrderPaymentPreferenceUpdate) ClearManualAuthCode() *OrderPaymentPreferenceUpdate {
	oppu.mutation.ClearManualAuthCode()
	return oppu
}

// SetManualRefNum sets the "manual_ref_num" field.
func (oppu *OrderPaymentPreferenceUpdate) SetManualRefNum(s string) *OrderPaymentPreferenceUpdate {
	oppu.mutation.SetManualRefNum(s)
	return oppu
}

// SetNillableManualRefNum sets the "manual_ref_num" field if the given value is not nil.
func (oppu *OrderPaymentPreferenceUpdate) SetNillableManualRefNum(s *string) *OrderPaymentPreferenceUpdate {
	if s != nil {
		oppu.SetManualRefNum(*s)
	}
	return oppu
}

// ClearManualRefNum clears the value of the "manual_ref_num" field.
func (oppu *OrderPaymentPreferenceUpdate) ClearManualRefNum() *OrderPaymentPreferenceUpdate {
	oppu.mutation.ClearManualRefNum()
	return oppu
}

// SetNeedsNsfRetry sets the "needs_nsf_retry" field.
func (oppu *OrderPaymentPreferenceUpdate) SetNeedsNsfRetry(onr orderpaymentpreference.NeedsNsfRetry) *OrderPaymentPreferenceUpdate {
	oppu.mutation.SetNeedsNsfRetry(onr)
	return oppu
}

// SetNillableNeedsNsfRetry sets the "needs_nsf_retry" field if the given value is not nil.
func (oppu *OrderPaymentPreferenceUpdate) SetNillableNeedsNsfRetry(onr *orderpaymentpreference.NeedsNsfRetry) *OrderPaymentPreferenceUpdate {
	if onr != nil {
		oppu.SetNeedsNsfRetry(*onr)
	}
	return oppu
}

// ClearNeedsNsfRetry clears the value of the "needs_nsf_retry" field.
func (oppu *OrderPaymentPreferenceUpdate) ClearNeedsNsfRetry() *OrderPaymentPreferenceUpdate {
	oppu.mutation.ClearNeedsNsfRetry()
	return oppu
}

// SetCreatedDate sets the "created_date" field.
func (oppu *OrderPaymentPreferenceUpdate) SetCreatedDate(t time.Time) *OrderPaymentPreferenceUpdate {
	oppu.mutation.SetCreatedDate(t)
	return oppu
}

// SetNillableCreatedDate sets the "created_date" field if the given value is not nil.
func (oppu *OrderPaymentPreferenceUpdate) SetNillableCreatedDate(t *time.Time) *OrderPaymentPreferenceUpdate {
	if t != nil {
		oppu.SetCreatedDate(*t)
	}
	return oppu
}

// ClearCreatedDate clears the value of the "created_date" field.
func (oppu *OrderPaymentPreferenceUpdate) ClearCreatedDate() *OrderPaymentPreferenceUpdate {
	oppu.mutation.ClearCreatedDate()
	return oppu
}

// SetCreatedByUserLogin sets the "created_by_user_login" field.
func (oppu *OrderPaymentPreferenceUpdate) SetCreatedByUserLogin(s string) *OrderPaymentPreferenceUpdate {
	oppu.mutation.SetCreatedByUserLogin(s)
	return oppu
}

// SetNillableCreatedByUserLogin sets the "created_by_user_login" field if the given value is not nil.
func (oppu *OrderPaymentPreferenceUpdate) SetNillableCreatedByUserLogin(s *string) *OrderPaymentPreferenceUpdate {
	if s != nil {
		oppu.SetCreatedByUserLogin(*s)
	}
	return oppu
}

// ClearCreatedByUserLogin clears the value of the "created_by_user_login" field.
func (oppu *OrderPaymentPreferenceUpdate) ClearCreatedByUserLogin() *OrderPaymentPreferenceUpdate {
	oppu.mutation.ClearCreatedByUserLogin()
	return oppu
}

// SetLastModifiedDate sets the "last_modified_date" field.
func (oppu *OrderPaymentPreferenceUpdate) SetLastModifiedDate(t time.Time) *OrderPaymentPreferenceUpdate {
	oppu.mutation.SetLastModifiedDate(t)
	return oppu
}

// SetNillableLastModifiedDate sets the "last_modified_date" field if the given value is not nil.
func (oppu *OrderPaymentPreferenceUpdate) SetNillableLastModifiedDate(t *time.Time) *OrderPaymentPreferenceUpdate {
	if t != nil {
		oppu.SetLastModifiedDate(*t)
	}
	return oppu
}

// ClearLastModifiedDate clears the value of the "last_modified_date" field.
func (oppu *OrderPaymentPreferenceUpdate) ClearLastModifiedDate() *OrderPaymentPreferenceUpdate {
	oppu.mutation.ClearLastModifiedDate()
	return oppu
}

// SetLastModifiedByUserLogin sets the "last_modified_by_user_login" field.
func (oppu *OrderPaymentPreferenceUpdate) SetLastModifiedByUserLogin(s string) *OrderPaymentPreferenceUpdate {
	oppu.mutation.SetLastModifiedByUserLogin(s)
	return oppu
}

// SetNillableLastModifiedByUserLogin sets the "last_modified_by_user_login" field if the given value is not nil.
func (oppu *OrderPaymentPreferenceUpdate) SetNillableLastModifiedByUserLogin(s *string) *OrderPaymentPreferenceUpdate {
	if s != nil {
		oppu.SetLastModifiedByUserLogin(*s)
	}
	return oppu
}

// ClearLastModifiedByUserLogin clears the value of the "last_modified_by_user_login" field.
func (oppu *OrderPaymentPreferenceUpdate) ClearLastModifiedByUserLogin() *OrderPaymentPreferenceUpdate {
	oppu.mutation.ClearLastModifiedByUserLogin()
	return oppu
}

// SetOrderHeaderID sets the "order_header" edge to the OrderHeader entity by ID.
func (oppu *OrderPaymentPreferenceUpdate) SetOrderHeaderID(id int) *OrderPaymentPreferenceUpdate {
	oppu.mutation.SetOrderHeaderID(id)
	return oppu
}

// SetNillableOrderHeaderID sets the "order_header" edge to the OrderHeader entity by ID if the given value is not nil.
func (oppu *OrderPaymentPreferenceUpdate) SetNillableOrderHeaderID(id *int) *OrderPaymentPreferenceUpdate {
	if id != nil {
		oppu = oppu.SetOrderHeaderID(*id)
	}
	return oppu
}

// SetOrderHeader sets the "order_header" edge to the OrderHeader entity.
func (oppu *OrderPaymentPreferenceUpdate) SetOrderHeader(o *OrderHeader) *OrderPaymentPreferenceUpdate {
	return oppu.SetOrderHeaderID(o.ID)
}

// SetOrderItemID sets the "order_item" edge to the OrderItem entity by ID.
func (oppu *OrderPaymentPreferenceUpdate) SetOrderItemID(id int) *OrderPaymentPreferenceUpdate {
	oppu.mutation.SetOrderItemID(id)
	return oppu
}

// SetNillableOrderItemID sets the "order_item" edge to the OrderItem entity by ID if the given value is not nil.
func (oppu *OrderPaymentPreferenceUpdate) SetNillableOrderItemID(id *int) *OrderPaymentPreferenceUpdate {
	if id != nil {
		oppu = oppu.SetOrderItemID(*id)
	}
	return oppu
}

// SetOrderItem sets the "order_item" edge to the OrderItem entity.
func (oppu *OrderPaymentPreferenceUpdate) SetOrderItem(o *OrderItem) *OrderPaymentPreferenceUpdate {
	return oppu.SetOrderItemID(o.ID)
}

// SetOrderItemShipGroupID sets the "order_item_ship_group" edge to the OrderItemShipGroup entity by ID.
func (oppu *OrderPaymentPreferenceUpdate) SetOrderItemShipGroupID(id int) *OrderPaymentPreferenceUpdate {
	oppu.mutation.SetOrderItemShipGroupID(id)
	return oppu
}

// SetNillableOrderItemShipGroupID sets the "order_item_ship_group" edge to the OrderItemShipGroup entity by ID if the given value is not nil.
func (oppu *OrderPaymentPreferenceUpdate) SetNillableOrderItemShipGroupID(id *int) *OrderPaymentPreferenceUpdate {
	if id != nil {
		oppu = oppu.SetOrderItemShipGroupID(*id)
	}
	return oppu
}

// SetOrderItemShipGroup sets the "order_item_ship_group" edge to the OrderItemShipGroup entity.
func (oppu *OrderPaymentPreferenceUpdate) SetOrderItemShipGroup(o *OrderItemShipGroup) *OrderPaymentPreferenceUpdate {
	return oppu.SetOrderItemShipGroupID(o.ID)
}

// SetProductPricePurposeID sets the "product_price_purpose" edge to the ProductPricePurpose entity by ID.
func (oppu *OrderPaymentPreferenceUpdate) SetProductPricePurposeID(id int) *OrderPaymentPreferenceUpdate {
	oppu.mutation.SetProductPricePurposeID(id)
	return oppu
}

// SetNillableProductPricePurposeID sets the "product_price_purpose" edge to the ProductPricePurpose entity by ID if the given value is not nil.
func (oppu *OrderPaymentPreferenceUpdate) SetNillableProductPricePurposeID(id *int) *OrderPaymentPreferenceUpdate {
	if id != nil {
		oppu = oppu.SetProductPricePurposeID(*id)
	}
	return oppu
}

// SetProductPricePurpose sets the "product_price_purpose" edge to the ProductPricePurpose entity.
func (oppu *OrderPaymentPreferenceUpdate) SetProductPricePurpose(p *ProductPricePurpose) *OrderPaymentPreferenceUpdate {
	return oppu.SetProductPricePurposeID(p.ID)
}

// SetStatusItemID sets the "status_item" edge to the StatusItem entity by ID.
func (oppu *OrderPaymentPreferenceUpdate) SetStatusItemID(id int) *OrderPaymentPreferenceUpdate {
	oppu.mutation.SetStatusItemID(id)
	return oppu
}

// SetNillableStatusItemID sets the "status_item" edge to the StatusItem entity by ID if the given value is not nil.
func (oppu *OrderPaymentPreferenceUpdate) SetNillableStatusItemID(id *int) *OrderPaymentPreferenceUpdate {
	if id != nil {
		oppu = oppu.SetStatusItemID(*id)
	}
	return oppu
}

// SetStatusItem sets the "status_item" edge to the StatusItem entity.
func (oppu *OrderPaymentPreferenceUpdate) SetStatusItem(s *StatusItem) *OrderPaymentPreferenceUpdate {
	return oppu.SetStatusItemID(s.ID)
}

// AddOrderStatusIDs adds the "order_statuses" edge to the OrderStatus entity by IDs.
func (oppu *OrderPaymentPreferenceUpdate) AddOrderStatusIDs(ids ...int) *OrderPaymentPreferenceUpdate {
	oppu.mutation.AddOrderStatusIDs(ids...)
	return oppu
}

// AddOrderStatuses adds the "order_statuses" edges to the OrderStatus entity.
func (oppu *OrderPaymentPreferenceUpdate) AddOrderStatuses(o ...*OrderStatus) *OrderPaymentPreferenceUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oppu.AddOrderStatusIDs(ids...)
}

// Mutation returns the OrderPaymentPreferenceMutation object of the builder.
func (oppu *OrderPaymentPreferenceUpdate) Mutation() *OrderPaymentPreferenceMutation {
	return oppu.mutation
}

// ClearOrderHeader clears the "order_header" edge to the OrderHeader entity.
func (oppu *OrderPaymentPreferenceUpdate) ClearOrderHeader() *OrderPaymentPreferenceUpdate {
	oppu.mutation.ClearOrderHeader()
	return oppu
}

// ClearOrderItem clears the "order_item" edge to the OrderItem entity.
func (oppu *OrderPaymentPreferenceUpdate) ClearOrderItem() *OrderPaymentPreferenceUpdate {
	oppu.mutation.ClearOrderItem()
	return oppu
}

// ClearOrderItemShipGroup clears the "order_item_ship_group" edge to the OrderItemShipGroup entity.
func (oppu *OrderPaymentPreferenceUpdate) ClearOrderItemShipGroup() *OrderPaymentPreferenceUpdate {
	oppu.mutation.ClearOrderItemShipGroup()
	return oppu
}

// ClearProductPricePurpose clears the "product_price_purpose" edge to the ProductPricePurpose entity.
func (oppu *OrderPaymentPreferenceUpdate) ClearProductPricePurpose() *OrderPaymentPreferenceUpdate {
	oppu.mutation.ClearProductPricePurpose()
	return oppu
}

// ClearStatusItem clears the "status_item" edge to the StatusItem entity.
func (oppu *OrderPaymentPreferenceUpdate) ClearStatusItem() *OrderPaymentPreferenceUpdate {
	oppu.mutation.ClearStatusItem()
	return oppu
}

// ClearOrderStatuses clears all "order_statuses" edges to the OrderStatus entity.
func (oppu *OrderPaymentPreferenceUpdate) ClearOrderStatuses() *OrderPaymentPreferenceUpdate {
	oppu.mutation.ClearOrderStatuses()
	return oppu
}

// RemoveOrderStatusIDs removes the "order_statuses" edge to OrderStatus entities by IDs.
func (oppu *OrderPaymentPreferenceUpdate) RemoveOrderStatusIDs(ids ...int) *OrderPaymentPreferenceUpdate {
	oppu.mutation.RemoveOrderStatusIDs(ids...)
	return oppu
}

// RemoveOrderStatuses removes "order_statuses" edges to OrderStatus entities.
func (oppu *OrderPaymentPreferenceUpdate) RemoveOrderStatuses(o ...*OrderStatus) *OrderPaymentPreferenceUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oppu.RemoveOrderStatusIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (oppu *OrderPaymentPreferenceUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	oppu.defaults()
	if len(oppu.hooks) == 0 {
		if err = oppu.check(); err != nil {
			return 0, err
		}
		affected, err = oppu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderPaymentPreferenceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = oppu.check(); err != nil {
				return 0, err
			}
			oppu.mutation = mutation
			affected, err = oppu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(oppu.hooks) - 1; i >= 0; i-- {
			mut = oppu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, oppu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (oppu *OrderPaymentPreferenceUpdate) SaveX(ctx context.Context) int {
	affected, err := oppu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (oppu *OrderPaymentPreferenceUpdate) Exec(ctx context.Context) error {
	_, err := oppu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oppu *OrderPaymentPreferenceUpdate) ExecX(ctx context.Context) {
	if err := oppu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oppu *OrderPaymentPreferenceUpdate) defaults() {
	if _, ok := oppu.mutation.UpdateTime(); !ok {
		v := orderpaymentpreference.UpdateDefaultUpdateTime()
		oppu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oppu *OrderPaymentPreferenceUpdate) check() error {
	if v, ok := oppu.mutation.PresentFlag(); ok {
		if err := orderpaymentpreference.PresentFlagValidator(v); err != nil {
			return &ValidationError{Name: "present_flag", err: fmt.Errorf("ent: validator failed for field \"present_flag\": %w", err)}
		}
	}
	if v, ok := oppu.mutation.SwipedFlag(); ok {
		if err := orderpaymentpreference.SwipedFlagValidator(v); err != nil {
			return &ValidationError{Name: "swiped_flag", err: fmt.Errorf("ent: validator failed for field \"swiped_flag\": %w", err)}
		}
	}
	if v, ok := oppu.mutation.OverflowFlag(); ok {
		if err := orderpaymentpreference.OverflowFlagValidator(v); err != nil {
			return &ValidationError{Name: "overflow_flag", err: fmt.Errorf("ent: validator failed for field \"overflow_flag\": %w", err)}
		}
	}
	if v, ok := oppu.mutation.NeedsNsfRetry(); ok {
		if err := orderpaymentpreference.NeedsNsfRetryValidator(v); err != nil {
			return &ValidationError{Name: "needs_nsf_retry", err: fmt.Errorf("ent: validator failed for field \"needs_nsf_retry\": %w", err)}
		}
	}
	return nil
}

func (oppu *OrderPaymentPreferenceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   orderpaymentpreference.Table,
			Columns: orderpaymentpreference.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: orderpaymentpreference.FieldID,
			},
		},
	}
	if ps := oppu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oppu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderpaymentpreference.FieldUpdateTime,
		})
	}
	if value, ok := oppu.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderpaymentpreference.FieldStringRef,
		})
	}
	if oppu.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: orderpaymentpreference.FieldStringRef,
		})
	}
	if value, ok := oppu.mutation.OrderItemSeqID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderpaymentpreference.FieldOrderItemSeqID,
		})
	}
	if value, ok := oppu.mutation.AddedOrderItemSeqID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderpaymentpreference.FieldOrderItemSeqID,
		})
	}
	if oppu.mutation.OrderItemSeqIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderpaymentpreference.FieldOrderItemSeqID,
		})
	}
	if value, ok := oppu.mutation.ShipGroupSeqID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderpaymentpreference.FieldShipGroupSeqID,
		})
	}
	if value, ok := oppu.mutation.AddedShipGroupSeqID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderpaymentpreference.FieldShipGroupSeqID,
		})
	}
	if oppu.mutation.ShipGroupSeqIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderpaymentpreference.FieldShipGroupSeqID,
		})
	}
	if value, ok := oppu.mutation.PaymentMethodTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderpaymentpreference.FieldPaymentMethodTypeID,
		})
	}
	if value, ok := oppu.mutation.AddedPaymentMethodTypeID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderpaymentpreference.FieldPaymentMethodTypeID,
		})
	}
	if oppu.mutation.PaymentMethodTypeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderpaymentpreference.FieldPaymentMethodTypeID,
		})
	}
	if value, ok := oppu.mutation.PaymentMethodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderpaymentpreference.FieldPaymentMethodID,
		})
	}
	if value, ok := oppu.mutation.AddedPaymentMethodID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderpaymentpreference.FieldPaymentMethodID,
		})
	}
	if oppu.mutation.PaymentMethodIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderpaymentpreference.FieldPaymentMethodID,
		})
	}
	if value, ok := oppu.mutation.FinAccountID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderpaymentpreference.FieldFinAccountID,
		})
	}
	if value, ok := oppu.mutation.AddedFinAccountID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderpaymentpreference.FieldFinAccountID,
		})
	}
	if oppu.mutation.FinAccountIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderpaymentpreference.FieldFinAccountID,
		})
	}
	if value, ok := oppu.mutation.SecurityCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderpaymentpreference.FieldSecurityCode,
		})
	}
	if oppu.mutation.SecurityCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: orderpaymentpreference.FieldSecurityCode,
		})
	}
	if value, ok := oppu.mutation.Track2(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderpaymentpreference.FieldTrack2,
		})
	}
	if oppu.mutation.Track2Cleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: orderpaymentpreference.FieldTrack2,
		})
	}
	if value, ok := oppu.mutation.PresentFlag(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: orderpaymentpreference.FieldPresentFlag,
		})
	}
	if oppu.mutation.PresentFlagCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: orderpaymentpreference.FieldPresentFlag,
		})
	}
	if value, ok := oppu.mutation.SwipedFlag(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: orderpaymentpreference.FieldSwipedFlag,
		})
	}
	if oppu.mutation.SwipedFlagCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: orderpaymentpreference.FieldSwipedFlag,
		})
	}
	if value, ok := oppu.mutation.OverflowFlag(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: orderpaymentpreference.FieldOverflowFlag,
		})
	}
	if oppu.mutation.OverflowFlagCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: orderpaymentpreference.FieldOverflowFlag,
		})
	}
	if value, ok := oppu.mutation.MaxAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderpaymentpreference.FieldMaxAmount,
		})
	}
	if value, ok := oppu.mutation.AddedMaxAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderpaymentpreference.FieldMaxAmount,
		})
	}
	if oppu.mutation.MaxAmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: orderpaymentpreference.FieldMaxAmount,
		})
	}
	if value, ok := oppu.mutation.ProcessAttempt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderpaymentpreference.FieldProcessAttempt,
		})
	}
	if value, ok := oppu.mutation.AddedProcessAttempt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderpaymentpreference.FieldProcessAttempt,
		})
	}
	if oppu.mutation.ProcessAttemptCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderpaymentpreference.FieldProcessAttempt,
		})
	}
	if value, ok := oppu.mutation.BillingPostalCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderpaymentpreference.FieldBillingPostalCode,
		})
	}
	if oppu.mutation.BillingPostalCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: orderpaymentpreference.FieldBillingPostalCode,
		})
	}
	if value, ok := oppu.mutation.ManualAuthCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderpaymentpreference.FieldManualAuthCode,
		})
	}
	if oppu.mutation.ManualAuthCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: orderpaymentpreference.FieldManualAuthCode,
		})
	}
	if value, ok := oppu.mutation.ManualRefNum(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderpaymentpreference.FieldManualRefNum,
		})
	}
	if oppu.mutation.ManualRefNumCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: orderpaymentpreference.FieldManualRefNum,
		})
	}
	if value, ok := oppu.mutation.NeedsNsfRetry(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: orderpaymentpreference.FieldNeedsNsfRetry,
		})
	}
	if oppu.mutation.NeedsNsfRetryCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: orderpaymentpreference.FieldNeedsNsfRetry,
		})
	}
	if value, ok := oppu.mutation.CreatedDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderpaymentpreference.FieldCreatedDate,
		})
	}
	if oppu.mutation.CreatedDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: orderpaymentpreference.FieldCreatedDate,
		})
	}
	if value, ok := oppu.mutation.CreatedByUserLogin(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderpaymentpreference.FieldCreatedByUserLogin,
		})
	}
	if oppu.mutation.CreatedByUserLoginCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: orderpaymentpreference.FieldCreatedByUserLogin,
		})
	}
	if value, ok := oppu.mutation.LastModifiedDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderpaymentpreference.FieldLastModifiedDate,
		})
	}
	if oppu.mutation.LastModifiedDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: orderpaymentpreference.FieldLastModifiedDate,
		})
	}
	if value, ok := oppu.mutation.LastModifiedByUserLogin(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderpaymentpreference.FieldLastModifiedByUserLogin,
		})
	}
	if oppu.mutation.LastModifiedByUserLoginCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: orderpaymentpreference.FieldLastModifiedByUserLogin,
		})
	}
	if oppu.mutation.OrderHeaderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderpaymentpreference.OrderHeaderTable,
			Columns: []string{orderpaymentpreference.OrderHeaderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderheader.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oppu.mutation.OrderHeaderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderpaymentpreference.OrderHeaderTable,
			Columns: []string{orderpaymentpreference.OrderHeaderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderheader.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oppu.mutation.OrderItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderpaymentpreference.OrderItemTable,
			Columns: []string{orderpaymentpreference.OrderItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitem.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oppu.mutation.OrderItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderpaymentpreference.OrderItemTable,
			Columns: []string{orderpaymentpreference.OrderItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oppu.mutation.OrderItemShipGroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderpaymentpreference.OrderItemShipGroupTable,
			Columns: []string{orderpaymentpreference.OrderItemShipGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitemshipgroup.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oppu.mutation.OrderItemShipGroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderpaymentpreference.OrderItemShipGroupTable,
			Columns: []string{orderpaymentpreference.OrderItemShipGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitemshipgroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oppu.mutation.ProductPricePurposeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderpaymentpreference.ProductPricePurposeTable,
			Columns: []string{orderpaymentpreference.ProductPricePurposeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productpricepurpose.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oppu.mutation.ProductPricePurposeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderpaymentpreference.ProductPricePurposeTable,
			Columns: []string{orderpaymentpreference.ProductPricePurposeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productpricepurpose.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oppu.mutation.StatusItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderpaymentpreference.StatusItemTable,
			Columns: []string{orderpaymentpreference.StatusItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusitem.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oppu.mutation.StatusItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderpaymentpreference.StatusItemTable,
			Columns: []string{orderpaymentpreference.StatusItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oppu.mutation.OrderStatusesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderpaymentpreference.OrderStatusesTable,
			Columns: []string{orderpaymentpreference.OrderStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderstatus.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oppu.mutation.RemovedOrderStatusesIDs(); len(nodes) > 0 && !oppu.mutation.OrderStatusesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderpaymentpreference.OrderStatusesTable,
			Columns: []string{orderpaymentpreference.OrderStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderstatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oppu.mutation.OrderStatusesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderpaymentpreference.OrderStatusesTable,
			Columns: []string{orderpaymentpreference.OrderStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderstatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, oppu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderpaymentpreference.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// OrderPaymentPreferenceUpdateOne is the builder for updating a single OrderPaymentPreference entity.
type OrderPaymentPreferenceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrderPaymentPreferenceMutation
}

// SetStringRef sets the "string_ref" field.
func (oppuo *OrderPaymentPreferenceUpdateOne) SetStringRef(s string) *OrderPaymentPreferenceUpdateOne {
	oppuo.mutation.SetStringRef(s)
	return oppuo
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (oppuo *OrderPaymentPreferenceUpdateOne) SetNillableStringRef(s *string) *OrderPaymentPreferenceUpdateOne {
	if s != nil {
		oppuo.SetStringRef(*s)
	}
	return oppuo
}

// ClearStringRef clears the value of the "string_ref" field.
func (oppuo *OrderPaymentPreferenceUpdateOne) ClearStringRef() *OrderPaymentPreferenceUpdateOne {
	oppuo.mutation.ClearStringRef()
	return oppuo
}

// SetOrderItemSeqID sets the "order_item_seq_id" field.
func (oppuo *OrderPaymentPreferenceUpdateOne) SetOrderItemSeqID(i int) *OrderPaymentPreferenceUpdateOne {
	oppuo.mutation.ResetOrderItemSeqID()
	oppuo.mutation.SetOrderItemSeqID(i)
	return oppuo
}

// SetNillableOrderItemSeqID sets the "order_item_seq_id" field if the given value is not nil.
func (oppuo *OrderPaymentPreferenceUpdateOne) SetNillableOrderItemSeqID(i *int) *OrderPaymentPreferenceUpdateOne {
	if i != nil {
		oppuo.SetOrderItemSeqID(*i)
	}
	return oppuo
}

// AddOrderItemSeqID adds i to the "order_item_seq_id" field.
func (oppuo *OrderPaymentPreferenceUpdateOne) AddOrderItemSeqID(i int) *OrderPaymentPreferenceUpdateOne {
	oppuo.mutation.AddOrderItemSeqID(i)
	return oppuo
}

// ClearOrderItemSeqID clears the value of the "order_item_seq_id" field.
func (oppuo *OrderPaymentPreferenceUpdateOne) ClearOrderItemSeqID() *OrderPaymentPreferenceUpdateOne {
	oppuo.mutation.ClearOrderItemSeqID()
	return oppuo
}

// SetShipGroupSeqID sets the "ship_group_seq_id" field.
func (oppuo *OrderPaymentPreferenceUpdateOne) SetShipGroupSeqID(i int) *OrderPaymentPreferenceUpdateOne {
	oppuo.mutation.ResetShipGroupSeqID()
	oppuo.mutation.SetShipGroupSeqID(i)
	return oppuo
}

// SetNillableShipGroupSeqID sets the "ship_group_seq_id" field if the given value is not nil.
func (oppuo *OrderPaymentPreferenceUpdateOne) SetNillableShipGroupSeqID(i *int) *OrderPaymentPreferenceUpdateOne {
	if i != nil {
		oppuo.SetShipGroupSeqID(*i)
	}
	return oppuo
}

// AddShipGroupSeqID adds i to the "ship_group_seq_id" field.
func (oppuo *OrderPaymentPreferenceUpdateOne) AddShipGroupSeqID(i int) *OrderPaymentPreferenceUpdateOne {
	oppuo.mutation.AddShipGroupSeqID(i)
	return oppuo
}

// ClearShipGroupSeqID clears the value of the "ship_group_seq_id" field.
func (oppuo *OrderPaymentPreferenceUpdateOne) ClearShipGroupSeqID() *OrderPaymentPreferenceUpdateOne {
	oppuo.mutation.ClearShipGroupSeqID()
	return oppuo
}

// SetPaymentMethodTypeID sets the "payment_method_type_id" field.
func (oppuo *OrderPaymentPreferenceUpdateOne) SetPaymentMethodTypeID(i int) *OrderPaymentPreferenceUpdateOne {
	oppuo.mutation.ResetPaymentMethodTypeID()
	oppuo.mutation.SetPaymentMethodTypeID(i)
	return oppuo
}

// SetNillablePaymentMethodTypeID sets the "payment_method_type_id" field if the given value is not nil.
func (oppuo *OrderPaymentPreferenceUpdateOne) SetNillablePaymentMethodTypeID(i *int) *OrderPaymentPreferenceUpdateOne {
	if i != nil {
		oppuo.SetPaymentMethodTypeID(*i)
	}
	return oppuo
}

// AddPaymentMethodTypeID adds i to the "payment_method_type_id" field.
func (oppuo *OrderPaymentPreferenceUpdateOne) AddPaymentMethodTypeID(i int) *OrderPaymentPreferenceUpdateOne {
	oppuo.mutation.AddPaymentMethodTypeID(i)
	return oppuo
}

// ClearPaymentMethodTypeID clears the value of the "payment_method_type_id" field.
func (oppuo *OrderPaymentPreferenceUpdateOne) ClearPaymentMethodTypeID() *OrderPaymentPreferenceUpdateOne {
	oppuo.mutation.ClearPaymentMethodTypeID()
	return oppuo
}

// SetPaymentMethodID sets the "payment_method_id" field.
func (oppuo *OrderPaymentPreferenceUpdateOne) SetPaymentMethodID(i int) *OrderPaymentPreferenceUpdateOne {
	oppuo.mutation.ResetPaymentMethodID()
	oppuo.mutation.SetPaymentMethodID(i)
	return oppuo
}

// SetNillablePaymentMethodID sets the "payment_method_id" field if the given value is not nil.
func (oppuo *OrderPaymentPreferenceUpdateOne) SetNillablePaymentMethodID(i *int) *OrderPaymentPreferenceUpdateOne {
	if i != nil {
		oppuo.SetPaymentMethodID(*i)
	}
	return oppuo
}

// AddPaymentMethodID adds i to the "payment_method_id" field.
func (oppuo *OrderPaymentPreferenceUpdateOne) AddPaymentMethodID(i int) *OrderPaymentPreferenceUpdateOne {
	oppuo.mutation.AddPaymentMethodID(i)
	return oppuo
}

// ClearPaymentMethodID clears the value of the "payment_method_id" field.
func (oppuo *OrderPaymentPreferenceUpdateOne) ClearPaymentMethodID() *OrderPaymentPreferenceUpdateOne {
	oppuo.mutation.ClearPaymentMethodID()
	return oppuo
}

// SetFinAccountID sets the "fin_account_id" field.
func (oppuo *OrderPaymentPreferenceUpdateOne) SetFinAccountID(i int) *OrderPaymentPreferenceUpdateOne {
	oppuo.mutation.ResetFinAccountID()
	oppuo.mutation.SetFinAccountID(i)
	return oppuo
}

// SetNillableFinAccountID sets the "fin_account_id" field if the given value is not nil.
func (oppuo *OrderPaymentPreferenceUpdateOne) SetNillableFinAccountID(i *int) *OrderPaymentPreferenceUpdateOne {
	if i != nil {
		oppuo.SetFinAccountID(*i)
	}
	return oppuo
}

// AddFinAccountID adds i to the "fin_account_id" field.
func (oppuo *OrderPaymentPreferenceUpdateOne) AddFinAccountID(i int) *OrderPaymentPreferenceUpdateOne {
	oppuo.mutation.AddFinAccountID(i)
	return oppuo
}

// ClearFinAccountID clears the value of the "fin_account_id" field.
func (oppuo *OrderPaymentPreferenceUpdateOne) ClearFinAccountID() *OrderPaymentPreferenceUpdateOne {
	oppuo.mutation.ClearFinAccountID()
	return oppuo
}

// SetSecurityCode sets the "security_code" field.
func (oppuo *OrderPaymentPreferenceUpdateOne) SetSecurityCode(s string) *OrderPaymentPreferenceUpdateOne {
	oppuo.mutation.SetSecurityCode(s)
	return oppuo
}

// SetNillableSecurityCode sets the "security_code" field if the given value is not nil.
func (oppuo *OrderPaymentPreferenceUpdateOne) SetNillableSecurityCode(s *string) *OrderPaymentPreferenceUpdateOne {
	if s != nil {
		oppuo.SetSecurityCode(*s)
	}
	return oppuo
}

// ClearSecurityCode clears the value of the "security_code" field.
func (oppuo *OrderPaymentPreferenceUpdateOne) ClearSecurityCode() *OrderPaymentPreferenceUpdateOne {
	oppuo.mutation.ClearSecurityCode()
	return oppuo
}

// SetTrack2 sets the "track_2" field.
func (oppuo *OrderPaymentPreferenceUpdateOne) SetTrack2(s string) *OrderPaymentPreferenceUpdateOne {
	oppuo.mutation.SetTrack2(s)
	return oppuo
}

// SetNillableTrack2 sets the "track_2" field if the given value is not nil.
func (oppuo *OrderPaymentPreferenceUpdateOne) SetNillableTrack2(s *string) *OrderPaymentPreferenceUpdateOne {
	if s != nil {
		oppuo.SetTrack2(*s)
	}
	return oppuo
}

// ClearTrack2 clears the value of the "track_2" field.
func (oppuo *OrderPaymentPreferenceUpdateOne) ClearTrack2() *OrderPaymentPreferenceUpdateOne {
	oppuo.mutation.ClearTrack2()
	return oppuo
}

// SetPresentFlag sets the "present_flag" field.
func (oppuo *OrderPaymentPreferenceUpdateOne) SetPresentFlag(of orderpaymentpreference.PresentFlag) *OrderPaymentPreferenceUpdateOne {
	oppuo.mutation.SetPresentFlag(of)
	return oppuo
}

// SetNillablePresentFlag sets the "present_flag" field if the given value is not nil.
func (oppuo *OrderPaymentPreferenceUpdateOne) SetNillablePresentFlag(of *orderpaymentpreference.PresentFlag) *OrderPaymentPreferenceUpdateOne {
	if of != nil {
		oppuo.SetPresentFlag(*of)
	}
	return oppuo
}

// ClearPresentFlag clears the value of the "present_flag" field.
func (oppuo *OrderPaymentPreferenceUpdateOne) ClearPresentFlag() *OrderPaymentPreferenceUpdateOne {
	oppuo.mutation.ClearPresentFlag()
	return oppuo
}

// SetSwipedFlag sets the "swiped_flag" field.
func (oppuo *OrderPaymentPreferenceUpdateOne) SetSwipedFlag(of orderpaymentpreference.SwipedFlag) *OrderPaymentPreferenceUpdateOne {
	oppuo.mutation.SetSwipedFlag(of)
	return oppuo
}

// SetNillableSwipedFlag sets the "swiped_flag" field if the given value is not nil.
func (oppuo *OrderPaymentPreferenceUpdateOne) SetNillableSwipedFlag(of *orderpaymentpreference.SwipedFlag) *OrderPaymentPreferenceUpdateOne {
	if of != nil {
		oppuo.SetSwipedFlag(*of)
	}
	return oppuo
}

// ClearSwipedFlag clears the value of the "swiped_flag" field.
func (oppuo *OrderPaymentPreferenceUpdateOne) ClearSwipedFlag() *OrderPaymentPreferenceUpdateOne {
	oppuo.mutation.ClearSwipedFlag()
	return oppuo
}

// SetOverflowFlag sets the "overflow_flag" field.
func (oppuo *OrderPaymentPreferenceUpdateOne) SetOverflowFlag(of orderpaymentpreference.OverflowFlag) *OrderPaymentPreferenceUpdateOne {
	oppuo.mutation.SetOverflowFlag(of)
	return oppuo
}

// SetNillableOverflowFlag sets the "overflow_flag" field if the given value is not nil.
func (oppuo *OrderPaymentPreferenceUpdateOne) SetNillableOverflowFlag(of *orderpaymentpreference.OverflowFlag) *OrderPaymentPreferenceUpdateOne {
	if of != nil {
		oppuo.SetOverflowFlag(*of)
	}
	return oppuo
}

// ClearOverflowFlag clears the value of the "overflow_flag" field.
func (oppuo *OrderPaymentPreferenceUpdateOne) ClearOverflowFlag() *OrderPaymentPreferenceUpdateOne {
	oppuo.mutation.ClearOverflowFlag()
	return oppuo
}

// SetMaxAmount sets the "max_amount" field.
func (oppuo *OrderPaymentPreferenceUpdateOne) SetMaxAmount(f float64) *OrderPaymentPreferenceUpdateOne {
	oppuo.mutation.ResetMaxAmount()
	oppuo.mutation.SetMaxAmount(f)
	return oppuo
}

// SetNillableMaxAmount sets the "max_amount" field if the given value is not nil.
func (oppuo *OrderPaymentPreferenceUpdateOne) SetNillableMaxAmount(f *float64) *OrderPaymentPreferenceUpdateOne {
	if f != nil {
		oppuo.SetMaxAmount(*f)
	}
	return oppuo
}

// AddMaxAmount adds f to the "max_amount" field.
func (oppuo *OrderPaymentPreferenceUpdateOne) AddMaxAmount(f float64) *OrderPaymentPreferenceUpdateOne {
	oppuo.mutation.AddMaxAmount(f)
	return oppuo
}

// ClearMaxAmount clears the value of the "max_amount" field.
func (oppuo *OrderPaymentPreferenceUpdateOne) ClearMaxAmount() *OrderPaymentPreferenceUpdateOne {
	oppuo.mutation.ClearMaxAmount()
	return oppuo
}

// SetProcessAttempt sets the "process_attempt" field.
func (oppuo *OrderPaymentPreferenceUpdateOne) SetProcessAttempt(i int) *OrderPaymentPreferenceUpdateOne {
	oppuo.mutation.ResetProcessAttempt()
	oppuo.mutation.SetProcessAttempt(i)
	return oppuo
}

// SetNillableProcessAttempt sets the "process_attempt" field if the given value is not nil.
func (oppuo *OrderPaymentPreferenceUpdateOne) SetNillableProcessAttempt(i *int) *OrderPaymentPreferenceUpdateOne {
	if i != nil {
		oppuo.SetProcessAttempt(*i)
	}
	return oppuo
}

// AddProcessAttempt adds i to the "process_attempt" field.
func (oppuo *OrderPaymentPreferenceUpdateOne) AddProcessAttempt(i int) *OrderPaymentPreferenceUpdateOne {
	oppuo.mutation.AddProcessAttempt(i)
	return oppuo
}

// ClearProcessAttempt clears the value of the "process_attempt" field.
func (oppuo *OrderPaymentPreferenceUpdateOne) ClearProcessAttempt() *OrderPaymentPreferenceUpdateOne {
	oppuo.mutation.ClearProcessAttempt()
	return oppuo
}

// SetBillingPostalCode sets the "billing_postal_code" field.
func (oppuo *OrderPaymentPreferenceUpdateOne) SetBillingPostalCode(s string) *OrderPaymentPreferenceUpdateOne {
	oppuo.mutation.SetBillingPostalCode(s)
	return oppuo
}

// SetNillableBillingPostalCode sets the "billing_postal_code" field if the given value is not nil.
func (oppuo *OrderPaymentPreferenceUpdateOne) SetNillableBillingPostalCode(s *string) *OrderPaymentPreferenceUpdateOne {
	if s != nil {
		oppuo.SetBillingPostalCode(*s)
	}
	return oppuo
}

// ClearBillingPostalCode clears the value of the "billing_postal_code" field.
func (oppuo *OrderPaymentPreferenceUpdateOne) ClearBillingPostalCode() *OrderPaymentPreferenceUpdateOne {
	oppuo.mutation.ClearBillingPostalCode()
	return oppuo
}

// SetManualAuthCode sets the "manual_auth_code" field.
func (oppuo *OrderPaymentPreferenceUpdateOne) SetManualAuthCode(s string) *OrderPaymentPreferenceUpdateOne {
	oppuo.mutation.SetManualAuthCode(s)
	return oppuo
}

// SetNillableManualAuthCode sets the "manual_auth_code" field if the given value is not nil.
func (oppuo *OrderPaymentPreferenceUpdateOne) SetNillableManualAuthCode(s *string) *OrderPaymentPreferenceUpdateOne {
	if s != nil {
		oppuo.SetManualAuthCode(*s)
	}
	return oppuo
}

// ClearManualAuthCode clears the value of the "manual_auth_code" field.
func (oppuo *OrderPaymentPreferenceUpdateOne) ClearManualAuthCode() *OrderPaymentPreferenceUpdateOne {
	oppuo.mutation.ClearManualAuthCode()
	return oppuo
}

// SetManualRefNum sets the "manual_ref_num" field.
func (oppuo *OrderPaymentPreferenceUpdateOne) SetManualRefNum(s string) *OrderPaymentPreferenceUpdateOne {
	oppuo.mutation.SetManualRefNum(s)
	return oppuo
}

// SetNillableManualRefNum sets the "manual_ref_num" field if the given value is not nil.
func (oppuo *OrderPaymentPreferenceUpdateOne) SetNillableManualRefNum(s *string) *OrderPaymentPreferenceUpdateOne {
	if s != nil {
		oppuo.SetManualRefNum(*s)
	}
	return oppuo
}

// ClearManualRefNum clears the value of the "manual_ref_num" field.
func (oppuo *OrderPaymentPreferenceUpdateOne) ClearManualRefNum() *OrderPaymentPreferenceUpdateOne {
	oppuo.mutation.ClearManualRefNum()
	return oppuo
}

// SetNeedsNsfRetry sets the "needs_nsf_retry" field.
func (oppuo *OrderPaymentPreferenceUpdateOne) SetNeedsNsfRetry(onr orderpaymentpreference.NeedsNsfRetry) *OrderPaymentPreferenceUpdateOne {
	oppuo.mutation.SetNeedsNsfRetry(onr)
	return oppuo
}

// SetNillableNeedsNsfRetry sets the "needs_nsf_retry" field if the given value is not nil.
func (oppuo *OrderPaymentPreferenceUpdateOne) SetNillableNeedsNsfRetry(onr *orderpaymentpreference.NeedsNsfRetry) *OrderPaymentPreferenceUpdateOne {
	if onr != nil {
		oppuo.SetNeedsNsfRetry(*onr)
	}
	return oppuo
}

// ClearNeedsNsfRetry clears the value of the "needs_nsf_retry" field.
func (oppuo *OrderPaymentPreferenceUpdateOne) ClearNeedsNsfRetry() *OrderPaymentPreferenceUpdateOne {
	oppuo.mutation.ClearNeedsNsfRetry()
	return oppuo
}

// SetCreatedDate sets the "created_date" field.
func (oppuo *OrderPaymentPreferenceUpdateOne) SetCreatedDate(t time.Time) *OrderPaymentPreferenceUpdateOne {
	oppuo.mutation.SetCreatedDate(t)
	return oppuo
}

// SetNillableCreatedDate sets the "created_date" field if the given value is not nil.
func (oppuo *OrderPaymentPreferenceUpdateOne) SetNillableCreatedDate(t *time.Time) *OrderPaymentPreferenceUpdateOne {
	if t != nil {
		oppuo.SetCreatedDate(*t)
	}
	return oppuo
}

// ClearCreatedDate clears the value of the "created_date" field.
func (oppuo *OrderPaymentPreferenceUpdateOne) ClearCreatedDate() *OrderPaymentPreferenceUpdateOne {
	oppuo.mutation.ClearCreatedDate()
	return oppuo
}

// SetCreatedByUserLogin sets the "created_by_user_login" field.
func (oppuo *OrderPaymentPreferenceUpdateOne) SetCreatedByUserLogin(s string) *OrderPaymentPreferenceUpdateOne {
	oppuo.mutation.SetCreatedByUserLogin(s)
	return oppuo
}

// SetNillableCreatedByUserLogin sets the "created_by_user_login" field if the given value is not nil.
func (oppuo *OrderPaymentPreferenceUpdateOne) SetNillableCreatedByUserLogin(s *string) *OrderPaymentPreferenceUpdateOne {
	if s != nil {
		oppuo.SetCreatedByUserLogin(*s)
	}
	return oppuo
}

// ClearCreatedByUserLogin clears the value of the "created_by_user_login" field.
func (oppuo *OrderPaymentPreferenceUpdateOne) ClearCreatedByUserLogin() *OrderPaymentPreferenceUpdateOne {
	oppuo.mutation.ClearCreatedByUserLogin()
	return oppuo
}

// SetLastModifiedDate sets the "last_modified_date" field.
func (oppuo *OrderPaymentPreferenceUpdateOne) SetLastModifiedDate(t time.Time) *OrderPaymentPreferenceUpdateOne {
	oppuo.mutation.SetLastModifiedDate(t)
	return oppuo
}

// SetNillableLastModifiedDate sets the "last_modified_date" field if the given value is not nil.
func (oppuo *OrderPaymentPreferenceUpdateOne) SetNillableLastModifiedDate(t *time.Time) *OrderPaymentPreferenceUpdateOne {
	if t != nil {
		oppuo.SetLastModifiedDate(*t)
	}
	return oppuo
}

// ClearLastModifiedDate clears the value of the "last_modified_date" field.
func (oppuo *OrderPaymentPreferenceUpdateOne) ClearLastModifiedDate() *OrderPaymentPreferenceUpdateOne {
	oppuo.mutation.ClearLastModifiedDate()
	return oppuo
}

// SetLastModifiedByUserLogin sets the "last_modified_by_user_login" field.
func (oppuo *OrderPaymentPreferenceUpdateOne) SetLastModifiedByUserLogin(s string) *OrderPaymentPreferenceUpdateOne {
	oppuo.mutation.SetLastModifiedByUserLogin(s)
	return oppuo
}

// SetNillableLastModifiedByUserLogin sets the "last_modified_by_user_login" field if the given value is not nil.
func (oppuo *OrderPaymentPreferenceUpdateOne) SetNillableLastModifiedByUserLogin(s *string) *OrderPaymentPreferenceUpdateOne {
	if s != nil {
		oppuo.SetLastModifiedByUserLogin(*s)
	}
	return oppuo
}

// ClearLastModifiedByUserLogin clears the value of the "last_modified_by_user_login" field.
func (oppuo *OrderPaymentPreferenceUpdateOne) ClearLastModifiedByUserLogin() *OrderPaymentPreferenceUpdateOne {
	oppuo.mutation.ClearLastModifiedByUserLogin()
	return oppuo
}

// SetOrderHeaderID sets the "order_header" edge to the OrderHeader entity by ID.
func (oppuo *OrderPaymentPreferenceUpdateOne) SetOrderHeaderID(id int) *OrderPaymentPreferenceUpdateOne {
	oppuo.mutation.SetOrderHeaderID(id)
	return oppuo
}

// SetNillableOrderHeaderID sets the "order_header" edge to the OrderHeader entity by ID if the given value is not nil.
func (oppuo *OrderPaymentPreferenceUpdateOne) SetNillableOrderHeaderID(id *int) *OrderPaymentPreferenceUpdateOne {
	if id != nil {
		oppuo = oppuo.SetOrderHeaderID(*id)
	}
	return oppuo
}

// SetOrderHeader sets the "order_header" edge to the OrderHeader entity.
func (oppuo *OrderPaymentPreferenceUpdateOne) SetOrderHeader(o *OrderHeader) *OrderPaymentPreferenceUpdateOne {
	return oppuo.SetOrderHeaderID(o.ID)
}

// SetOrderItemID sets the "order_item" edge to the OrderItem entity by ID.
func (oppuo *OrderPaymentPreferenceUpdateOne) SetOrderItemID(id int) *OrderPaymentPreferenceUpdateOne {
	oppuo.mutation.SetOrderItemID(id)
	return oppuo
}

// SetNillableOrderItemID sets the "order_item" edge to the OrderItem entity by ID if the given value is not nil.
func (oppuo *OrderPaymentPreferenceUpdateOne) SetNillableOrderItemID(id *int) *OrderPaymentPreferenceUpdateOne {
	if id != nil {
		oppuo = oppuo.SetOrderItemID(*id)
	}
	return oppuo
}

// SetOrderItem sets the "order_item" edge to the OrderItem entity.
func (oppuo *OrderPaymentPreferenceUpdateOne) SetOrderItem(o *OrderItem) *OrderPaymentPreferenceUpdateOne {
	return oppuo.SetOrderItemID(o.ID)
}

// SetOrderItemShipGroupID sets the "order_item_ship_group" edge to the OrderItemShipGroup entity by ID.
func (oppuo *OrderPaymentPreferenceUpdateOne) SetOrderItemShipGroupID(id int) *OrderPaymentPreferenceUpdateOne {
	oppuo.mutation.SetOrderItemShipGroupID(id)
	return oppuo
}

// SetNillableOrderItemShipGroupID sets the "order_item_ship_group" edge to the OrderItemShipGroup entity by ID if the given value is not nil.
func (oppuo *OrderPaymentPreferenceUpdateOne) SetNillableOrderItemShipGroupID(id *int) *OrderPaymentPreferenceUpdateOne {
	if id != nil {
		oppuo = oppuo.SetOrderItemShipGroupID(*id)
	}
	return oppuo
}

// SetOrderItemShipGroup sets the "order_item_ship_group" edge to the OrderItemShipGroup entity.
func (oppuo *OrderPaymentPreferenceUpdateOne) SetOrderItemShipGroup(o *OrderItemShipGroup) *OrderPaymentPreferenceUpdateOne {
	return oppuo.SetOrderItemShipGroupID(o.ID)
}

// SetProductPricePurposeID sets the "product_price_purpose" edge to the ProductPricePurpose entity by ID.
func (oppuo *OrderPaymentPreferenceUpdateOne) SetProductPricePurposeID(id int) *OrderPaymentPreferenceUpdateOne {
	oppuo.mutation.SetProductPricePurposeID(id)
	return oppuo
}

// SetNillableProductPricePurposeID sets the "product_price_purpose" edge to the ProductPricePurpose entity by ID if the given value is not nil.
func (oppuo *OrderPaymentPreferenceUpdateOne) SetNillableProductPricePurposeID(id *int) *OrderPaymentPreferenceUpdateOne {
	if id != nil {
		oppuo = oppuo.SetProductPricePurposeID(*id)
	}
	return oppuo
}

// SetProductPricePurpose sets the "product_price_purpose" edge to the ProductPricePurpose entity.
func (oppuo *OrderPaymentPreferenceUpdateOne) SetProductPricePurpose(p *ProductPricePurpose) *OrderPaymentPreferenceUpdateOne {
	return oppuo.SetProductPricePurposeID(p.ID)
}

// SetStatusItemID sets the "status_item" edge to the StatusItem entity by ID.
func (oppuo *OrderPaymentPreferenceUpdateOne) SetStatusItemID(id int) *OrderPaymentPreferenceUpdateOne {
	oppuo.mutation.SetStatusItemID(id)
	return oppuo
}

// SetNillableStatusItemID sets the "status_item" edge to the StatusItem entity by ID if the given value is not nil.
func (oppuo *OrderPaymentPreferenceUpdateOne) SetNillableStatusItemID(id *int) *OrderPaymentPreferenceUpdateOne {
	if id != nil {
		oppuo = oppuo.SetStatusItemID(*id)
	}
	return oppuo
}

// SetStatusItem sets the "status_item" edge to the StatusItem entity.
func (oppuo *OrderPaymentPreferenceUpdateOne) SetStatusItem(s *StatusItem) *OrderPaymentPreferenceUpdateOne {
	return oppuo.SetStatusItemID(s.ID)
}

// AddOrderStatusIDs adds the "order_statuses" edge to the OrderStatus entity by IDs.
func (oppuo *OrderPaymentPreferenceUpdateOne) AddOrderStatusIDs(ids ...int) *OrderPaymentPreferenceUpdateOne {
	oppuo.mutation.AddOrderStatusIDs(ids...)
	return oppuo
}

// AddOrderStatuses adds the "order_statuses" edges to the OrderStatus entity.
func (oppuo *OrderPaymentPreferenceUpdateOne) AddOrderStatuses(o ...*OrderStatus) *OrderPaymentPreferenceUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oppuo.AddOrderStatusIDs(ids...)
}

// Mutation returns the OrderPaymentPreferenceMutation object of the builder.
func (oppuo *OrderPaymentPreferenceUpdateOne) Mutation() *OrderPaymentPreferenceMutation {
	return oppuo.mutation
}

// ClearOrderHeader clears the "order_header" edge to the OrderHeader entity.
func (oppuo *OrderPaymentPreferenceUpdateOne) ClearOrderHeader() *OrderPaymentPreferenceUpdateOne {
	oppuo.mutation.ClearOrderHeader()
	return oppuo
}

// ClearOrderItem clears the "order_item" edge to the OrderItem entity.
func (oppuo *OrderPaymentPreferenceUpdateOne) ClearOrderItem() *OrderPaymentPreferenceUpdateOne {
	oppuo.mutation.ClearOrderItem()
	return oppuo
}

// ClearOrderItemShipGroup clears the "order_item_ship_group" edge to the OrderItemShipGroup entity.
func (oppuo *OrderPaymentPreferenceUpdateOne) ClearOrderItemShipGroup() *OrderPaymentPreferenceUpdateOne {
	oppuo.mutation.ClearOrderItemShipGroup()
	return oppuo
}

// ClearProductPricePurpose clears the "product_price_purpose" edge to the ProductPricePurpose entity.
func (oppuo *OrderPaymentPreferenceUpdateOne) ClearProductPricePurpose() *OrderPaymentPreferenceUpdateOne {
	oppuo.mutation.ClearProductPricePurpose()
	return oppuo
}

// ClearStatusItem clears the "status_item" edge to the StatusItem entity.
func (oppuo *OrderPaymentPreferenceUpdateOne) ClearStatusItem() *OrderPaymentPreferenceUpdateOne {
	oppuo.mutation.ClearStatusItem()
	return oppuo
}

// ClearOrderStatuses clears all "order_statuses" edges to the OrderStatus entity.
func (oppuo *OrderPaymentPreferenceUpdateOne) ClearOrderStatuses() *OrderPaymentPreferenceUpdateOne {
	oppuo.mutation.ClearOrderStatuses()
	return oppuo
}

// RemoveOrderStatusIDs removes the "order_statuses" edge to OrderStatus entities by IDs.
func (oppuo *OrderPaymentPreferenceUpdateOne) RemoveOrderStatusIDs(ids ...int) *OrderPaymentPreferenceUpdateOne {
	oppuo.mutation.RemoveOrderStatusIDs(ids...)
	return oppuo
}

// RemoveOrderStatuses removes "order_statuses" edges to OrderStatus entities.
func (oppuo *OrderPaymentPreferenceUpdateOne) RemoveOrderStatuses(o ...*OrderStatus) *OrderPaymentPreferenceUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oppuo.RemoveOrderStatusIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (oppuo *OrderPaymentPreferenceUpdateOne) Select(field string, fields ...string) *OrderPaymentPreferenceUpdateOne {
	oppuo.fields = append([]string{field}, fields...)
	return oppuo
}

// Save executes the query and returns the updated OrderPaymentPreference entity.
func (oppuo *OrderPaymentPreferenceUpdateOne) Save(ctx context.Context) (*OrderPaymentPreference, error) {
	var (
		err  error
		node *OrderPaymentPreference
	)
	oppuo.defaults()
	if len(oppuo.hooks) == 0 {
		if err = oppuo.check(); err != nil {
			return nil, err
		}
		node, err = oppuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderPaymentPreferenceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = oppuo.check(); err != nil {
				return nil, err
			}
			oppuo.mutation = mutation
			node, err = oppuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(oppuo.hooks) - 1; i >= 0; i-- {
			mut = oppuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, oppuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (oppuo *OrderPaymentPreferenceUpdateOne) SaveX(ctx context.Context) *OrderPaymentPreference {
	node, err := oppuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (oppuo *OrderPaymentPreferenceUpdateOne) Exec(ctx context.Context) error {
	_, err := oppuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oppuo *OrderPaymentPreferenceUpdateOne) ExecX(ctx context.Context) {
	if err := oppuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oppuo *OrderPaymentPreferenceUpdateOne) defaults() {
	if _, ok := oppuo.mutation.UpdateTime(); !ok {
		v := orderpaymentpreference.UpdateDefaultUpdateTime()
		oppuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oppuo *OrderPaymentPreferenceUpdateOne) check() error {
	if v, ok := oppuo.mutation.PresentFlag(); ok {
		if err := orderpaymentpreference.PresentFlagValidator(v); err != nil {
			return &ValidationError{Name: "present_flag", err: fmt.Errorf("ent: validator failed for field \"present_flag\": %w", err)}
		}
	}
	if v, ok := oppuo.mutation.SwipedFlag(); ok {
		if err := orderpaymentpreference.SwipedFlagValidator(v); err != nil {
			return &ValidationError{Name: "swiped_flag", err: fmt.Errorf("ent: validator failed for field \"swiped_flag\": %w", err)}
		}
	}
	if v, ok := oppuo.mutation.OverflowFlag(); ok {
		if err := orderpaymentpreference.OverflowFlagValidator(v); err != nil {
			return &ValidationError{Name: "overflow_flag", err: fmt.Errorf("ent: validator failed for field \"overflow_flag\": %w", err)}
		}
	}
	if v, ok := oppuo.mutation.NeedsNsfRetry(); ok {
		if err := orderpaymentpreference.NeedsNsfRetryValidator(v); err != nil {
			return &ValidationError{Name: "needs_nsf_retry", err: fmt.Errorf("ent: validator failed for field \"needs_nsf_retry\": %w", err)}
		}
	}
	return nil
}

func (oppuo *OrderPaymentPreferenceUpdateOne) sqlSave(ctx context.Context) (_node *OrderPaymentPreference, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   orderpaymentpreference.Table,
			Columns: orderpaymentpreference.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: orderpaymentpreference.FieldID,
			},
		},
	}
	id, ok := oppuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing OrderPaymentPreference.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := oppuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, orderpaymentpreference.FieldID)
		for _, f := range fields {
			if !orderpaymentpreference.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != orderpaymentpreference.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := oppuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oppuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderpaymentpreference.FieldUpdateTime,
		})
	}
	if value, ok := oppuo.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderpaymentpreference.FieldStringRef,
		})
	}
	if oppuo.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: orderpaymentpreference.FieldStringRef,
		})
	}
	if value, ok := oppuo.mutation.OrderItemSeqID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderpaymentpreference.FieldOrderItemSeqID,
		})
	}
	if value, ok := oppuo.mutation.AddedOrderItemSeqID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderpaymentpreference.FieldOrderItemSeqID,
		})
	}
	if oppuo.mutation.OrderItemSeqIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderpaymentpreference.FieldOrderItemSeqID,
		})
	}
	if value, ok := oppuo.mutation.ShipGroupSeqID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderpaymentpreference.FieldShipGroupSeqID,
		})
	}
	if value, ok := oppuo.mutation.AddedShipGroupSeqID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderpaymentpreference.FieldShipGroupSeqID,
		})
	}
	if oppuo.mutation.ShipGroupSeqIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderpaymentpreference.FieldShipGroupSeqID,
		})
	}
	if value, ok := oppuo.mutation.PaymentMethodTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderpaymentpreference.FieldPaymentMethodTypeID,
		})
	}
	if value, ok := oppuo.mutation.AddedPaymentMethodTypeID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderpaymentpreference.FieldPaymentMethodTypeID,
		})
	}
	if oppuo.mutation.PaymentMethodTypeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderpaymentpreference.FieldPaymentMethodTypeID,
		})
	}
	if value, ok := oppuo.mutation.PaymentMethodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderpaymentpreference.FieldPaymentMethodID,
		})
	}
	if value, ok := oppuo.mutation.AddedPaymentMethodID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderpaymentpreference.FieldPaymentMethodID,
		})
	}
	if oppuo.mutation.PaymentMethodIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderpaymentpreference.FieldPaymentMethodID,
		})
	}
	if value, ok := oppuo.mutation.FinAccountID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderpaymentpreference.FieldFinAccountID,
		})
	}
	if value, ok := oppuo.mutation.AddedFinAccountID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderpaymentpreference.FieldFinAccountID,
		})
	}
	if oppuo.mutation.FinAccountIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderpaymentpreference.FieldFinAccountID,
		})
	}
	if value, ok := oppuo.mutation.SecurityCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderpaymentpreference.FieldSecurityCode,
		})
	}
	if oppuo.mutation.SecurityCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: orderpaymentpreference.FieldSecurityCode,
		})
	}
	if value, ok := oppuo.mutation.Track2(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderpaymentpreference.FieldTrack2,
		})
	}
	if oppuo.mutation.Track2Cleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: orderpaymentpreference.FieldTrack2,
		})
	}
	if value, ok := oppuo.mutation.PresentFlag(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: orderpaymentpreference.FieldPresentFlag,
		})
	}
	if oppuo.mutation.PresentFlagCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: orderpaymentpreference.FieldPresentFlag,
		})
	}
	if value, ok := oppuo.mutation.SwipedFlag(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: orderpaymentpreference.FieldSwipedFlag,
		})
	}
	if oppuo.mutation.SwipedFlagCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: orderpaymentpreference.FieldSwipedFlag,
		})
	}
	if value, ok := oppuo.mutation.OverflowFlag(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: orderpaymentpreference.FieldOverflowFlag,
		})
	}
	if oppuo.mutation.OverflowFlagCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: orderpaymentpreference.FieldOverflowFlag,
		})
	}
	if value, ok := oppuo.mutation.MaxAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderpaymentpreference.FieldMaxAmount,
		})
	}
	if value, ok := oppuo.mutation.AddedMaxAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderpaymentpreference.FieldMaxAmount,
		})
	}
	if oppuo.mutation.MaxAmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: orderpaymentpreference.FieldMaxAmount,
		})
	}
	if value, ok := oppuo.mutation.ProcessAttempt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderpaymentpreference.FieldProcessAttempt,
		})
	}
	if value, ok := oppuo.mutation.AddedProcessAttempt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderpaymentpreference.FieldProcessAttempt,
		})
	}
	if oppuo.mutation.ProcessAttemptCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderpaymentpreference.FieldProcessAttempt,
		})
	}
	if value, ok := oppuo.mutation.BillingPostalCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderpaymentpreference.FieldBillingPostalCode,
		})
	}
	if oppuo.mutation.BillingPostalCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: orderpaymentpreference.FieldBillingPostalCode,
		})
	}
	if value, ok := oppuo.mutation.ManualAuthCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderpaymentpreference.FieldManualAuthCode,
		})
	}
	if oppuo.mutation.ManualAuthCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: orderpaymentpreference.FieldManualAuthCode,
		})
	}
	if value, ok := oppuo.mutation.ManualRefNum(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderpaymentpreference.FieldManualRefNum,
		})
	}
	if oppuo.mutation.ManualRefNumCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: orderpaymentpreference.FieldManualRefNum,
		})
	}
	if value, ok := oppuo.mutation.NeedsNsfRetry(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: orderpaymentpreference.FieldNeedsNsfRetry,
		})
	}
	if oppuo.mutation.NeedsNsfRetryCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: orderpaymentpreference.FieldNeedsNsfRetry,
		})
	}
	if value, ok := oppuo.mutation.CreatedDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderpaymentpreference.FieldCreatedDate,
		})
	}
	if oppuo.mutation.CreatedDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: orderpaymentpreference.FieldCreatedDate,
		})
	}
	if value, ok := oppuo.mutation.CreatedByUserLogin(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderpaymentpreference.FieldCreatedByUserLogin,
		})
	}
	if oppuo.mutation.CreatedByUserLoginCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: orderpaymentpreference.FieldCreatedByUserLogin,
		})
	}
	if value, ok := oppuo.mutation.LastModifiedDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderpaymentpreference.FieldLastModifiedDate,
		})
	}
	if oppuo.mutation.LastModifiedDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: orderpaymentpreference.FieldLastModifiedDate,
		})
	}
	if value, ok := oppuo.mutation.LastModifiedByUserLogin(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderpaymentpreference.FieldLastModifiedByUserLogin,
		})
	}
	if oppuo.mutation.LastModifiedByUserLoginCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: orderpaymentpreference.FieldLastModifiedByUserLogin,
		})
	}
	if oppuo.mutation.OrderHeaderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderpaymentpreference.OrderHeaderTable,
			Columns: []string{orderpaymentpreference.OrderHeaderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderheader.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oppuo.mutation.OrderHeaderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderpaymentpreference.OrderHeaderTable,
			Columns: []string{orderpaymentpreference.OrderHeaderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderheader.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oppuo.mutation.OrderItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderpaymentpreference.OrderItemTable,
			Columns: []string{orderpaymentpreference.OrderItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitem.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oppuo.mutation.OrderItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderpaymentpreference.OrderItemTable,
			Columns: []string{orderpaymentpreference.OrderItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oppuo.mutation.OrderItemShipGroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderpaymentpreference.OrderItemShipGroupTable,
			Columns: []string{orderpaymentpreference.OrderItemShipGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitemshipgroup.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oppuo.mutation.OrderItemShipGroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderpaymentpreference.OrderItemShipGroupTable,
			Columns: []string{orderpaymentpreference.OrderItemShipGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitemshipgroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oppuo.mutation.ProductPricePurposeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderpaymentpreference.ProductPricePurposeTable,
			Columns: []string{orderpaymentpreference.ProductPricePurposeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productpricepurpose.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oppuo.mutation.ProductPricePurposeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderpaymentpreference.ProductPricePurposeTable,
			Columns: []string{orderpaymentpreference.ProductPricePurposeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productpricepurpose.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oppuo.mutation.StatusItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderpaymentpreference.StatusItemTable,
			Columns: []string{orderpaymentpreference.StatusItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusitem.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oppuo.mutation.StatusItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderpaymentpreference.StatusItemTable,
			Columns: []string{orderpaymentpreference.StatusItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oppuo.mutation.OrderStatusesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderpaymentpreference.OrderStatusesTable,
			Columns: []string{orderpaymentpreference.OrderStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderstatus.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oppuo.mutation.RemovedOrderStatusesIDs(); len(nodes) > 0 && !oppuo.mutation.OrderStatusesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderpaymentpreference.OrderStatusesTable,
			Columns: []string{orderpaymentpreference.OrderStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderstatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oppuo.mutation.OrderStatusesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderpaymentpreference.OrderStatusesTable,
			Columns: []string{orderpaymentpreference.OrderStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderstatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &OrderPaymentPreference{config: oppuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, oppuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderpaymentpreference.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
