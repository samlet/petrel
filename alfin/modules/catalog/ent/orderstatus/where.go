// Code generated by entc, DO NOT EDIT.

package orderstatus

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.OrderStatus {
	return predicate.OrderStatus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.OrderStatus {
	return predicate.OrderStatus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.OrderStatus {
	return predicate.OrderStatus(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.OrderStatus {
	return predicate.OrderStatus(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.OrderStatus {
	return predicate.OrderStatus(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.OrderStatus {
	return predicate.OrderStatus(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.OrderStatus {
	return predicate.OrderStatus(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.OrderStatus {
	return predicate.OrderStatus(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.OrderStatus {
	return predicate.OrderStatus(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.OrderStatus {
	return predicate.OrderStatus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.OrderStatus {
	return predicate.OrderStatus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// StringRef applies equality check predicate on the "string_ref" field. It's identical to StringRefEQ.
func StringRef(v string) predicate.OrderStatus {
	return predicate.OrderStatus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStringRef), v))
	})
}

// OrderItemSeqID applies equality check predicate on the "order_item_seq_id" field. It's identical to OrderItemSeqIDEQ.
func OrderItemSeqID(v int) predicate.OrderStatus {
	return predicate.OrderStatus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderItemSeqID), v))
	})
}

// StatusDatetime applies equality check predicate on the "status_datetime" field. It's identical to StatusDatetimeEQ.
func StatusDatetime(v time.Time) predicate.OrderStatus {
	return predicate.OrderStatus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatusDatetime), v))
	})
}

// StatusUserLogin applies equality check predicate on the "status_user_login" field. It's identical to StatusUserLoginEQ.
func StatusUserLogin(v string) predicate.OrderStatus {
	return predicate.OrderStatus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatusUserLogin), v))
	})
}

// ChangeReason applies equality check predicate on the "change_reason" field. It's identical to ChangeReasonEQ.
func ChangeReason(v string) predicate.OrderStatus {
	return predicate.OrderStatus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChangeReason), v))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.OrderStatus {
	return predicate.OrderStatus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.OrderStatus {
	return predicate.OrderStatus(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.OrderStatus {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderStatus(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.OrderStatus {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderStatus(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.OrderStatus {
	return predicate.OrderStatus(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.OrderStatus {
	return predicate.OrderStatus(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.OrderStatus {
	return predicate.OrderStatus(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.OrderStatus {
	return predicate.OrderStatus(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), v))
	})
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.OrderStatus {
	return predicate.OrderStatus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.OrderStatus {
	return predicate.OrderStatus(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.OrderStatus {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderStatus(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.OrderStatus {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderStatus(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.OrderStatus {
	return predicate.OrderStatus(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.OrderStatus {
	return predicate.OrderStatus(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.OrderStatus {
	return predicate.OrderStatus(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.OrderStatus {
	return predicate.OrderStatus(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateTime), v))
	})
}

// StringRefEQ applies the EQ predicate on the "string_ref" field.
func StringRefEQ(v string) predicate.OrderStatus {
	return predicate.OrderStatus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStringRef), v))
	})
}

// StringRefNEQ applies the NEQ predicate on the "string_ref" field.
func StringRefNEQ(v string) predicate.OrderStatus {
	return predicate.OrderStatus(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStringRef), v))
	})
}

// StringRefIn applies the In predicate on the "string_ref" field.
func StringRefIn(vs ...string) predicate.OrderStatus {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderStatus(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStringRef), v...))
	})
}

// StringRefNotIn applies the NotIn predicate on the "string_ref" field.
func StringRefNotIn(vs ...string) predicate.OrderStatus {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderStatus(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStringRef), v...))
	})
}

// StringRefGT applies the GT predicate on the "string_ref" field.
func StringRefGT(v string) predicate.OrderStatus {
	return predicate.OrderStatus(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStringRef), v))
	})
}

// StringRefGTE applies the GTE predicate on the "string_ref" field.
func StringRefGTE(v string) predicate.OrderStatus {
	return predicate.OrderStatus(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStringRef), v))
	})
}

// StringRefLT applies the LT predicate on the "string_ref" field.
func StringRefLT(v string) predicate.OrderStatus {
	return predicate.OrderStatus(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStringRef), v))
	})
}

// StringRefLTE applies the LTE predicate on the "string_ref" field.
func StringRefLTE(v string) predicate.OrderStatus {
	return predicate.OrderStatus(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStringRef), v))
	})
}

// StringRefContains applies the Contains predicate on the "string_ref" field.
func StringRefContains(v string) predicate.OrderStatus {
	return predicate.OrderStatus(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStringRef), v))
	})
}

// StringRefHasPrefix applies the HasPrefix predicate on the "string_ref" field.
func StringRefHasPrefix(v string) predicate.OrderStatus {
	return predicate.OrderStatus(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStringRef), v))
	})
}

// StringRefHasSuffix applies the HasSuffix predicate on the "string_ref" field.
func StringRefHasSuffix(v string) predicate.OrderStatus {
	return predicate.OrderStatus(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStringRef), v))
	})
}

// StringRefIsNil applies the IsNil predicate on the "string_ref" field.
func StringRefIsNil() predicate.OrderStatus {
	return predicate.OrderStatus(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStringRef)))
	})
}

// StringRefNotNil applies the NotNil predicate on the "string_ref" field.
func StringRefNotNil() predicate.OrderStatus {
	return predicate.OrderStatus(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStringRef)))
	})
}

// StringRefEqualFold applies the EqualFold predicate on the "string_ref" field.
func StringRefEqualFold(v string) predicate.OrderStatus {
	return predicate.OrderStatus(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStringRef), v))
	})
}

// StringRefContainsFold applies the ContainsFold predicate on the "string_ref" field.
func StringRefContainsFold(v string) predicate.OrderStatus {
	return predicate.OrderStatus(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStringRef), v))
	})
}

// OrderItemSeqIDEQ applies the EQ predicate on the "order_item_seq_id" field.
func OrderItemSeqIDEQ(v int) predicate.OrderStatus {
	return predicate.OrderStatus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderItemSeqID), v))
	})
}

// OrderItemSeqIDNEQ applies the NEQ predicate on the "order_item_seq_id" field.
func OrderItemSeqIDNEQ(v int) predicate.OrderStatus {
	return predicate.OrderStatus(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOrderItemSeqID), v))
	})
}

// OrderItemSeqIDIn applies the In predicate on the "order_item_seq_id" field.
func OrderItemSeqIDIn(vs ...int) predicate.OrderStatus {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderStatus(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOrderItemSeqID), v...))
	})
}

// OrderItemSeqIDNotIn applies the NotIn predicate on the "order_item_seq_id" field.
func OrderItemSeqIDNotIn(vs ...int) predicate.OrderStatus {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderStatus(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOrderItemSeqID), v...))
	})
}

// OrderItemSeqIDGT applies the GT predicate on the "order_item_seq_id" field.
func OrderItemSeqIDGT(v int) predicate.OrderStatus {
	return predicate.OrderStatus(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOrderItemSeqID), v))
	})
}

// OrderItemSeqIDGTE applies the GTE predicate on the "order_item_seq_id" field.
func OrderItemSeqIDGTE(v int) predicate.OrderStatus {
	return predicate.OrderStatus(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOrderItemSeqID), v))
	})
}

// OrderItemSeqIDLT applies the LT predicate on the "order_item_seq_id" field.
func OrderItemSeqIDLT(v int) predicate.OrderStatus {
	return predicate.OrderStatus(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOrderItemSeqID), v))
	})
}

// OrderItemSeqIDLTE applies the LTE predicate on the "order_item_seq_id" field.
func OrderItemSeqIDLTE(v int) predicate.OrderStatus {
	return predicate.OrderStatus(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOrderItemSeqID), v))
	})
}

// OrderItemSeqIDIsNil applies the IsNil predicate on the "order_item_seq_id" field.
func OrderItemSeqIDIsNil() predicate.OrderStatus {
	return predicate.OrderStatus(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOrderItemSeqID)))
	})
}

// OrderItemSeqIDNotNil applies the NotNil predicate on the "order_item_seq_id" field.
func OrderItemSeqIDNotNil() predicate.OrderStatus {
	return predicate.OrderStatus(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOrderItemSeqID)))
	})
}

// StatusDatetimeEQ applies the EQ predicate on the "status_datetime" field.
func StatusDatetimeEQ(v time.Time) predicate.OrderStatus {
	return predicate.OrderStatus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatusDatetime), v))
	})
}

// StatusDatetimeNEQ applies the NEQ predicate on the "status_datetime" field.
func StatusDatetimeNEQ(v time.Time) predicate.OrderStatus {
	return predicate.OrderStatus(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatusDatetime), v))
	})
}

// StatusDatetimeIn applies the In predicate on the "status_datetime" field.
func StatusDatetimeIn(vs ...time.Time) predicate.OrderStatus {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderStatus(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStatusDatetime), v...))
	})
}

// StatusDatetimeNotIn applies the NotIn predicate on the "status_datetime" field.
func StatusDatetimeNotIn(vs ...time.Time) predicate.OrderStatus {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderStatus(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStatusDatetime), v...))
	})
}

// StatusDatetimeGT applies the GT predicate on the "status_datetime" field.
func StatusDatetimeGT(v time.Time) predicate.OrderStatus {
	return predicate.OrderStatus(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatusDatetime), v))
	})
}

// StatusDatetimeGTE applies the GTE predicate on the "status_datetime" field.
func StatusDatetimeGTE(v time.Time) predicate.OrderStatus {
	return predicate.OrderStatus(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatusDatetime), v))
	})
}

// StatusDatetimeLT applies the LT predicate on the "status_datetime" field.
func StatusDatetimeLT(v time.Time) predicate.OrderStatus {
	return predicate.OrderStatus(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatusDatetime), v))
	})
}

// StatusDatetimeLTE applies the LTE predicate on the "status_datetime" field.
func StatusDatetimeLTE(v time.Time) predicate.OrderStatus {
	return predicate.OrderStatus(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatusDatetime), v))
	})
}

// StatusDatetimeIsNil applies the IsNil predicate on the "status_datetime" field.
func StatusDatetimeIsNil() predicate.OrderStatus {
	return predicate.OrderStatus(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStatusDatetime)))
	})
}

// StatusDatetimeNotNil applies the NotNil predicate on the "status_datetime" field.
func StatusDatetimeNotNil() predicate.OrderStatus {
	return predicate.OrderStatus(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStatusDatetime)))
	})
}

// StatusUserLoginEQ applies the EQ predicate on the "status_user_login" field.
func StatusUserLoginEQ(v string) predicate.OrderStatus {
	return predicate.OrderStatus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatusUserLogin), v))
	})
}

// StatusUserLoginNEQ applies the NEQ predicate on the "status_user_login" field.
func StatusUserLoginNEQ(v string) predicate.OrderStatus {
	return predicate.OrderStatus(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatusUserLogin), v))
	})
}

// StatusUserLoginIn applies the In predicate on the "status_user_login" field.
func StatusUserLoginIn(vs ...string) predicate.OrderStatus {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderStatus(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStatusUserLogin), v...))
	})
}

// StatusUserLoginNotIn applies the NotIn predicate on the "status_user_login" field.
func StatusUserLoginNotIn(vs ...string) predicate.OrderStatus {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderStatus(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStatusUserLogin), v...))
	})
}

// StatusUserLoginGT applies the GT predicate on the "status_user_login" field.
func StatusUserLoginGT(v string) predicate.OrderStatus {
	return predicate.OrderStatus(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatusUserLogin), v))
	})
}

// StatusUserLoginGTE applies the GTE predicate on the "status_user_login" field.
func StatusUserLoginGTE(v string) predicate.OrderStatus {
	return predicate.OrderStatus(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatusUserLogin), v))
	})
}

// StatusUserLoginLT applies the LT predicate on the "status_user_login" field.
func StatusUserLoginLT(v string) predicate.OrderStatus {
	return predicate.OrderStatus(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatusUserLogin), v))
	})
}

// StatusUserLoginLTE applies the LTE predicate on the "status_user_login" field.
func StatusUserLoginLTE(v string) predicate.OrderStatus {
	return predicate.OrderStatus(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatusUserLogin), v))
	})
}

// StatusUserLoginContains applies the Contains predicate on the "status_user_login" field.
func StatusUserLoginContains(v string) predicate.OrderStatus {
	return predicate.OrderStatus(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStatusUserLogin), v))
	})
}

// StatusUserLoginHasPrefix applies the HasPrefix predicate on the "status_user_login" field.
func StatusUserLoginHasPrefix(v string) predicate.OrderStatus {
	return predicate.OrderStatus(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStatusUserLogin), v))
	})
}

// StatusUserLoginHasSuffix applies the HasSuffix predicate on the "status_user_login" field.
func StatusUserLoginHasSuffix(v string) predicate.OrderStatus {
	return predicate.OrderStatus(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStatusUserLogin), v))
	})
}

// StatusUserLoginIsNil applies the IsNil predicate on the "status_user_login" field.
func StatusUserLoginIsNil() predicate.OrderStatus {
	return predicate.OrderStatus(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStatusUserLogin)))
	})
}

// StatusUserLoginNotNil applies the NotNil predicate on the "status_user_login" field.
func StatusUserLoginNotNil() predicate.OrderStatus {
	return predicate.OrderStatus(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStatusUserLogin)))
	})
}

// StatusUserLoginEqualFold applies the EqualFold predicate on the "status_user_login" field.
func StatusUserLoginEqualFold(v string) predicate.OrderStatus {
	return predicate.OrderStatus(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStatusUserLogin), v))
	})
}

// StatusUserLoginContainsFold applies the ContainsFold predicate on the "status_user_login" field.
func StatusUserLoginContainsFold(v string) predicate.OrderStatus {
	return predicate.OrderStatus(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStatusUserLogin), v))
	})
}

// ChangeReasonEQ applies the EQ predicate on the "change_reason" field.
func ChangeReasonEQ(v string) predicate.OrderStatus {
	return predicate.OrderStatus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChangeReason), v))
	})
}

// ChangeReasonNEQ applies the NEQ predicate on the "change_reason" field.
func ChangeReasonNEQ(v string) predicate.OrderStatus {
	return predicate.OrderStatus(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldChangeReason), v))
	})
}

// ChangeReasonIn applies the In predicate on the "change_reason" field.
func ChangeReasonIn(vs ...string) predicate.OrderStatus {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderStatus(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldChangeReason), v...))
	})
}

// ChangeReasonNotIn applies the NotIn predicate on the "change_reason" field.
func ChangeReasonNotIn(vs ...string) predicate.OrderStatus {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderStatus(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldChangeReason), v...))
	})
}

// ChangeReasonGT applies the GT predicate on the "change_reason" field.
func ChangeReasonGT(v string) predicate.OrderStatus {
	return predicate.OrderStatus(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldChangeReason), v))
	})
}

// ChangeReasonGTE applies the GTE predicate on the "change_reason" field.
func ChangeReasonGTE(v string) predicate.OrderStatus {
	return predicate.OrderStatus(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldChangeReason), v))
	})
}

// ChangeReasonLT applies the LT predicate on the "change_reason" field.
func ChangeReasonLT(v string) predicate.OrderStatus {
	return predicate.OrderStatus(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldChangeReason), v))
	})
}

// ChangeReasonLTE applies the LTE predicate on the "change_reason" field.
func ChangeReasonLTE(v string) predicate.OrderStatus {
	return predicate.OrderStatus(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldChangeReason), v))
	})
}

// ChangeReasonContains applies the Contains predicate on the "change_reason" field.
func ChangeReasonContains(v string) predicate.OrderStatus {
	return predicate.OrderStatus(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldChangeReason), v))
	})
}

// ChangeReasonHasPrefix applies the HasPrefix predicate on the "change_reason" field.
func ChangeReasonHasPrefix(v string) predicate.OrderStatus {
	return predicate.OrderStatus(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldChangeReason), v))
	})
}

// ChangeReasonHasSuffix applies the HasSuffix predicate on the "change_reason" field.
func ChangeReasonHasSuffix(v string) predicate.OrderStatus {
	return predicate.OrderStatus(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldChangeReason), v))
	})
}

// ChangeReasonIsNil applies the IsNil predicate on the "change_reason" field.
func ChangeReasonIsNil() predicate.OrderStatus {
	return predicate.OrderStatus(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldChangeReason)))
	})
}

// ChangeReasonNotNil applies the NotNil predicate on the "change_reason" field.
func ChangeReasonNotNil() predicate.OrderStatus {
	return predicate.OrderStatus(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldChangeReason)))
	})
}

// ChangeReasonEqualFold applies the EqualFold predicate on the "change_reason" field.
func ChangeReasonEqualFold(v string) predicate.OrderStatus {
	return predicate.OrderStatus(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldChangeReason), v))
	})
}

// ChangeReasonContainsFold applies the ContainsFold predicate on the "change_reason" field.
func ChangeReasonContainsFold(v string) predicate.OrderStatus {
	return predicate.OrderStatus(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldChangeReason), v))
	})
}

// HasStatusItem applies the HasEdge predicate on the "status_item" edge.
func HasStatusItem() predicate.OrderStatus {
	return predicate.OrderStatus(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StatusItemTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, StatusItemTable, StatusItemColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStatusItemWith applies the HasEdge predicate on the "status_item" edge with a given conditions (other predicates).
func HasStatusItemWith(preds ...predicate.StatusItem) predicate.OrderStatus {
	return predicate.OrderStatus(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StatusItemInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, StatusItemTable, StatusItemColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrderHeader applies the HasEdge predicate on the "order_header" edge.
func HasOrderHeader() predicate.OrderStatus {
	return predicate.OrderStatus(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderHeaderTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OrderHeaderTable, OrderHeaderColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderHeaderWith applies the HasEdge predicate on the "order_header" edge with a given conditions (other predicates).
func HasOrderHeaderWith(preds ...predicate.OrderHeader) predicate.OrderStatus {
	return predicate.OrderStatus(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderHeaderInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OrderHeaderTable, OrderHeaderColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrderItem applies the HasEdge predicate on the "order_item" edge.
func HasOrderItem() predicate.OrderStatus {
	return predicate.OrderStatus(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderItemTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OrderItemTable, OrderItemColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderItemWith applies the HasEdge predicate on the "order_item" edge with a given conditions (other predicates).
func HasOrderItemWith(preds ...predicate.OrderItem) predicate.OrderStatus {
	return predicate.OrderStatus(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderItemInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OrderItemTable, OrderItemColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrderPaymentPreference applies the HasEdge predicate on the "order_payment_preference" edge.
func HasOrderPaymentPreference() predicate.OrderStatus {
	return predicate.OrderStatus(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderPaymentPreferenceTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OrderPaymentPreferenceTable, OrderPaymentPreferenceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderPaymentPreferenceWith applies the HasEdge predicate on the "order_payment_preference" edge with a given conditions (other predicates).
func HasOrderPaymentPreferenceWith(preds ...predicate.OrderPaymentPreference) predicate.OrderStatus {
	return predicate.OrderStatus(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderPaymentPreferenceInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OrderPaymentPreferenceTable, OrderPaymentPreferenceColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.OrderStatus) predicate.OrderStatus {
	return predicate.OrderStatus(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.OrderStatus) predicate.OrderStatus {
	return predicate.OrderStatus(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.OrderStatus) predicate.OrderStatus {
	return predicate.OrderStatus(func(s *sql.Selector) {
		p(s.Not())
	})
}
