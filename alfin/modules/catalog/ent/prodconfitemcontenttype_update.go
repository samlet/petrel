// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/predicate"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/prodconfitemcontenttype"
)

// ProdConfItemContentTypeUpdate is the builder for updating ProdConfItemContentType entities.
type ProdConfItemContentTypeUpdate struct {
	config
	hooks    []Hook
	mutation *ProdConfItemContentTypeMutation
}

// Where adds a new predicate for the ProdConfItemContentTypeUpdate builder.
func (pcictu *ProdConfItemContentTypeUpdate) Where(ps ...predicate.ProdConfItemContentType) *ProdConfItemContentTypeUpdate {
	pcictu.mutation.predicates = append(pcictu.mutation.predicates, ps...)
	return pcictu
}

// SetStringRef sets the "string_ref" field.
func (pcictu *ProdConfItemContentTypeUpdate) SetStringRef(s string) *ProdConfItemContentTypeUpdate {
	pcictu.mutation.SetStringRef(s)
	return pcictu
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (pcictu *ProdConfItemContentTypeUpdate) SetNillableStringRef(s *string) *ProdConfItemContentTypeUpdate {
	if s != nil {
		pcictu.SetStringRef(*s)
	}
	return pcictu
}

// ClearStringRef clears the value of the "string_ref" field.
func (pcictu *ProdConfItemContentTypeUpdate) ClearStringRef() *ProdConfItemContentTypeUpdate {
	pcictu.mutation.ClearStringRef()
	return pcictu
}

// SetHasTable sets the "has_table" field.
func (pcictu *ProdConfItemContentTypeUpdate) SetHasTable(pt prodconfitemcontenttype.HasTable) *ProdConfItemContentTypeUpdate {
	pcictu.mutation.SetHasTable(pt)
	return pcictu
}

// SetNillableHasTable sets the "has_table" field if the given value is not nil.
func (pcictu *ProdConfItemContentTypeUpdate) SetNillableHasTable(pt *prodconfitemcontenttype.HasTable) *ProdConfItemContentTypeUpdate {
	if pt != nil {
		pcictu.SetHasTable(*pt)
	}
	return pcictu
}

// ClearHasTable clears the value of the "has_table" field.
func (pcictu *ProdConfItemContentTypeUpdate) ClearHasTable() *ProdConfItemContentTypeUpdate {
	pcictu.mutation.ClearHasTable()
	return pcictu
}

// SetDescription sets the "description" field.
func (pcictu *ProdConfItemContentTypeUpdate) SetDescription(s string) *ProdConfItemContentTypeUpdate {
	pcictu.mutation.SetDescription(s)
	return pcictu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pcictu *ProdConfItemContentTypeUpdate) SetNillableDescription(s *string) *ProdConfItemContentTypeUpdate {
	if s != nil {
		pcictu.SetDescription(*s)
	}
	return pcictu
}

// ClearDescription clears the value of the "description" field.
func (pcictu *ProdConfItemContentTypeUpdate) ClearDescription() *ProdConfItemContentTypeUpdate {
	pcictu.mutation.ClearDescription()
	return pcictu
}

// SetParentID sets the "parent" edge to the ProdConfItemContentType entity by ID.
func (pcictu *ProdConfItemContentTypeUpdate) SetParentID(id int) *ProdConfItemContentTypeUpdate {
	pcictu.mutation.SetParentID(id)
	return pcictu
}

// SetNillableParentID sets the "parent" edge to the ProdConfItemContentType entity by ID if the given value is not nil.
func (pcictu *ProdConfItemContentTypeUpdate) SetNillableParentID(id *int) *ProdConfItemContentTypeUpdate {
	if id != nil {
		pcictu = pcictu.SetParentID(*id)
	}
	return pcictu
}

// SetParent sets the "parent" edge to the ProdConfItemContentType entity.
func (pcictu *ProdConfItemContentTypeUpdate) SetParent(p *ProdConfItemContentType) *ProdConfItemContentTypeUpdate {
	return pcictu.SetParentID(p.ID)
}

// AddChildIDs adds the "children" edge to the ProdConfItemContentType entity by IDs.
func (pcictu *ProdConfItemContentTypeUpdate) AddChildIDs(ids ...int) *ProdConfItemContentTypeUpdate {
	pcictu.mutation.AddChildIDs(ids...)
	return pcictu
}

// AddChildren adds the "children" edges to the ProdConfItemContentType entity.
func (pcictu *ProdConfItemContentTypeUpdate) AddChildren(p ...*ProdConfItemContentType) *ProdConfItemContentTypeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pcictu.AddChildIDs(ids...)
}

// AddChildProdConfItemContentTypeIDs adds the "child_prod_conf_item_content_types" edge to the ProdConfItemContentType entity by IDs.
func (pcictu *ProdConfItemContentTypeUpdate) AddChildProdConfItemContentTypeIDs(ids ...int) *ProdConfItemContentTypeUpdate {
	pcictu.mutation.AddChildProdConfItemContentTypeIDs(ids...)
	return pcictu
}

// AddChildProdConfItemContentTypes adds the "child_prod_conf_item_content_types" edges to the ProdConfItemContentType entity.
func (pcictu *ProdConfItemContentTypeUpdate) AddChildProdConfItemContentTypes(p ...*ProdConfItemContentType) *ProdConfItemContentTypeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pcictu.AddChildProdConfItemContentTypeIDs(ids...)
}

// Mutation returns the ProdConfItemContentTypeMutation object of the builder.
func (pcictu *ProdConfItemContentTypeUpdate) Mutation() *ProdConfItemContentTypeMutation {
	return pcictu.mutation
}

// ClearParent clears the "parent" edge to the ProdConfItemContentType entity.
func (pcictu *ProdConfItemContentTypeUpdate) ClearParent() *ProdConfItemContentTypeUpdate {
	pcictu.mutation.ClearParent()
	return pcictu
}

// ClearChildren clears all "children" edges to the ProdConfItemContentType entity.
func (pcictu *ProdConfItemContentTypeUpdate) ClearChildren() *ProdConfItemContentTypeUpdate {
	pcictu.mutation.ClearChildren()
	return pcictu
}

// RemoveChildIDs removes the "children" edge to ProdConfItemContentType entities by IDs.
func (pcictu *ProdConfItemContentTypeUpdate) RemoveChildIDs(ids ...int) *ProdConfItemContentTypeUpdate {
	pcictu.mutation.RemoveChildIDs(ids...)
	return pcictu
}

// RemoveChildren removes "children" edges to ProdConfItemContentType entities.
func (pcictu *ProdConfItemContentTypeUpdate) RemoveChildren(p ...*ProdConfItemContentType) *ProdConfItemContentTypeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pcictu.RemoveChildIDs(ids...)
}

// ClearChildProdConfItemContentTypes clears all "child_prod_conf_item_content_types" edges to the ProdConfItemContentType entity.
func (pcictu *ProdConfItemContentTypeUpdate) ClearChildProdConfItemContentTypes() *ProdConfItemContentTypeUpdate {
	pcictu.mutation.ClearChildProdConfItemContentTypes()
	return pcictu
}

// RemoveChildProdConfItemContentTypeIDs removes the "child_prod_conf_item_content_types" edge to ProdConfItemContentType entities by IDs.
func (pcictu *ProdConfItemContentTypeUpdate) RemoveChildProdConfItemContentTypeIDs(ids ...int) *ProdConfItemContentTypeUpdate {
	pcictu.mutation.RemoveChildProdConfItemContentTypeIDs(ids...)
	return pcictu
}

// RemoveChildProdConfItemContentTypes removes "child_prod_conf_item_content_types" edges to ProdConfItemContentType entities.
func (pcictu *ProdConfItemContentTypeUpdate) RemoveChildProdConfItemContentTypes(p ...*ProdConfItemContentType) *ProdConfItemContentTypeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pcictu.RemoveChildProdConfItemContentTypeIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pcictu *ProdConfItemContentTypeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	pcictu.defaults()
	if len(pcictu.hooks) == 0 {
		if err = pcictu.check(); err != nil {
			return 0, err
		}
		affected, err = pcictu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProdConfItemContentTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pcictu.check(); err != nil {
				return 0, err
			}
			pcictu.mutation = mutation
			affected, err = pcictu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pcictu.hooks) - 1; i >= 0; i-- {
			mut = pcictu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pcictu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pcictu *ProdConfItemContentTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := pcictu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pcictu *ProdConfItemContentTypeUpdate) Exec(ctx context.Context) error {
	_, err := pcictu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcictu *ProdConfItemContentTypeUpdate) ExecX(ctx context.Context) {
	if err := pcictu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pcictu *ProdConfItemContentTypeUpdate) defaults() {
	if _, ok := pcictu.mutation.UpdateTime(); !ok {
		v := prodconfitemcontenttype.UpdateDefaultUpdateTime()
		pcictu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pcictu *ProdConfItemContentTypeUpdate) check() error {
	if v, ok := pcictu.mutation.HasTable(); ok {
		if err := prodconfitemcontenttype.HasTableValidator(v); err != nil {
			return &ValidationError{Name: "has_table", err: fmt.Errorf("ent: validator failed for field \"has_table\": %w", err)}
		}
	}
	return nil
}

func (pcictu *ProdConfItemContentTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   prodconfitemcontenttype.Table,
			Columns: prodconfitemcontenttype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: prodconfitemcontenttype.FieldID,
			},
		},
	}
	if ps := pcictu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pcictu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: prodconfitemcontenttype.FieldUpdateTime,
		})
	}
	if value, ok := pcictu.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: prodconfitemcontenttype.FieldStringRef,
		})
	}
	if pcictu.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: prodconfitemcontenttype.FieldStringRef,
		})
	}
	if value, ok := pcictu.mutation.HasTable(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: prodconfitemcontenttype.FieldHasTable,
		})
	}
	if pcictu.mutation.HasTableCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: prodconfitemcontenttype.FieldHasTable,
		})
	}
	if value, ok := pcictu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: prodconfitemcontenttype.FieldDescription,
		})
	}
	if pcictu.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: prodconfitemcontenttype.FieldDescription,
		})
	}
	if pcictu.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   prodconfitemcontenttype.ParentTable,
			Columns: []string{prodconfitemcontenttype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: prodconfitemcontenttype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcictu.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   prodconfitemcontenttype.ParentTable,
			Columns: []string{prodconfitemcontenttype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: prodconfitemcontenttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pcictu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   prodconfitemcontenttype.ChildrenTable,
			Columns: []string{prodconfitemcontenttype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: prodconfitemcontenttype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcictu.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !pcictu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   prodconfitemcontenttype.ChildrenTable,
			Columns: []string{prodconfitemcontenttype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: prodconfitemcontenttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcictu.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   prodconfitemcontenttype.ChildrenTable,
			Columns: []string{prodconfitemcontenttype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: prodconfitemcontenttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pcictu.mutation.ChildProdConfItemContentTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   prodconfitemcontenttype.ChildProdConfItemContentTypesTable,
			Columns: prodconfitemcontenttype.ChildProdConfItemContentTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: prodconfitemcontenttype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcictu.mutation.RemovedChildProdConfItemContentTypesIDs(); len(nodes) > 0 && !pcictu.mutation.ChildProdConfItemContentTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   prodconfitemcontenttype.ChildProdConfItemContentTypesTable,
			Columns: prodconfitemcontenttype.ChildProdConfItemContentTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: prodconfitemcontenttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcictu.mutation.ChildProdConfItemContentTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   prodconfitemcontenttype.ChildProdConfItemContentTypesTable,
			Columns: prodconfitemcontenttype.ChildProdConfItemContentTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: prodconfitemcontenttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pcictu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{prodconfitemcontenttype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ProdConfItemContentTypeUpdateOne is the builder for updating a single ProdConfItemContentType entity.
type ProdConfItemContentTypeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProdConfItemContentTypeMutation
}

// SetStringRef sets the "string_ref" field.
func (pcictuo *ProdConfItemContentTypeUpdateOne) SetStringRef(s string) *ProdConfItemContentTypeUpdateOne {
	pcictuo.mutation.SetStringRef(s)
	return pcictuo
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (pcictuo *ProdConfItemContentTypeUpdateOne) SetNillableStringRef(s *string) *ProdConfItemContentTypeUpdateOne {
	if s != nil {
		pcictuo.SetStringRef(*s)
	}
	return pcictuo
}

// ClearStringRef clears the value of the "string_ref" field.
func (pcictuo *ProdConfItemContentTypeUpdateOne) ClearStringRef() *ProdConfItemContentTypeUpdateOne {
	pcictuo.mutation.ClearStringRef()
	return pcictuo
}

// SetHasTable sets the "has_table" field.
func (pcictuo *ProdConfItemContentTypeUpdateOne) SetHasTable(pt prodconfitemcontenttype.HasTable) *ProdConfItemContentTypeUpdateOne {
	pcictuo.mutation.SetHasTable(pt)
	return pcictuo
}

// SetNillableHasTable sets the "has_table" field if the given value is not nil.
func (pcictuo *ProdConfItemContentTypeUpdateOne) SetNillableHasTable(pt *prodconfitemcontenttype.HasTable) *ProdConfItemContentTypeUpdateOne {
	if pt != nil {
		pcictuo.SetHasTable(*pt)
	}
	return pcictuo
}

// ClearHasTable clears the value of the "has_table" field.
func (pcictuo *ProdConfItemContentTypeUpdateOne) ClearHasTable() *ProdConfItemContentTypeUpdateOne {
	pcictuo.mutation.ClearHasTable()
	return pcictuo
}

// SetDescription sets the "description" field.
func (pcictuo *ProdConfItemContentTypeUpdateOne) SetDescription(s string) *ProdConfItemContentTypeUpdateOne {
	pcictuo.mutation.SetDescription(s)
	return pcictuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pcictuo *ProdConfItemContentTypeUpdateOne) SetNillableDescription(s *string) *ProdConfItemContentTypeUpdateOne {
	if s != nil {
		pcictuo.SetDescription(*s)
	}
	return pcictuo
}

// ClearDescription clears the value of the "description" field.
func (pcictuo *ProdConfItemContentTypeUpdateOne) ClearDescription() *ProdConfItemContentTypeUpdateOne {
	pcictuo.mutation.ClearDescription()
	return pcictuo
}

// SetParentID sets the "parent" edge to the ProdConfItemContentType entity by ID.
func (pcictuo *ProdConfItemContentTypeUpdateOne) SetParentID(id int) *ProdConfItemContentTypeUpdateOne {
	pcictuo.mutation.SetParentID(id)
	return pcictuo
}

// SetNillableParentID sets the "parent" edge to the ProdConfItemContentType entity by ID if the given value is not nil.
func (pcictuo *ProdConfItemContentTypeUpdateOne) SetNillableParentID(id *int) *ProdConfItemContentTypeUpdateOne {
	if id != nil {
		pcictuo = pcictuo.SetParentID(*id)
	}
	return pcictuo
}

// SetParent sets the "parent" edge to the ProdConfItemContentType entity.
func (pcictuo *ProdConfItemContentTypeUpdateOne) SetParent(p *ProdConfItemContentType) *ProdConfItemContentTypeUpdateOne {
	return pcictuo.SetParentID(p.ID)
}

// AddChildIDs adds the "children" edge to the ProdConfItemContentType entity by IDs.
func (pcictuo *ProdConfItemContentTypeUpdateOne) AddChildIDs(ids ...int) *ProdConfItemContentTypeUpdateOne {
	pcictuo.mutation.AddChildIDs(ids...)
	return pcictuo
}

// AddChildren adds the "children" edges to the ProdConfItemContentType entity.
func (pcictuo *ProdConfItemContentTypeUpdateOne) AddChildren(p ...*ProdConfItemContentType) *ProdConfItemContentTypeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pcictuo.AddChildIDs(ids...)
}

// AddChildProdConfItemContentTypeIDs adds the "child_prod_conf_item_content_types" edge to the ProdConfItemContentType entity by IDs.
func (pcictuo *ProdConfItemContentTypeUpdateOne) AddChildProdConfItemContentTypeIDs(ids ...int) *ProdConfItemContentTypeUpdateOne {
	pcictuo.mutation.AddChildProdConfItemContentTypeIDs(ids...)
	return pcictuo
}

// AddChildProdConfItemContentTypes adds the "child_prod_conf_item_content_types" edges to the ProdConfItemContentType entity.
func (pcictuo *ProdConfItemContentTypeUpdateOne) AddChildProdConfItemContentTypes(p ...*ProdConfItemContentType) *ProdConfItemContentTypeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pcictuo.AddChildProdConfItemContentTypeIDs(ids...)
}

// Mutation returns the ProdConfItemContentTypeMutation object of the builder.
func (pcictuo *ProdConfItemContentTypeUpdateOne) Mutation() *ProdConfItemContentTypeMutation {
	return pcictuo.mutation
}

// ClearParent clears the "parent" edge to the ProdConfItemContentType entity.
func (pcictuo *ProdConfItemContentTypeUpdateOne) ClearParent() *ProdConfItemContentTypeUpdateOne {
	pcictuo.mutation.ClearParent()
	return pcictuo
}

// ClearChildren clears all "children" edges to the ProdConfItemContentType entity.
func (pcictuo *ProdConfItemContentTypeUpdateOne) ClearChildren() *ProdConfItemContentTypeUpdateOne {
	pcictuo.mutation.ClearChildren()
	return pcictuo
}

// RemoveChildIDs removes the "children" edge to ProdConfItemContentType entities by IDs.
func (pcictuo *ProdConfItemContentTypeUpdateOne) RemoveChildIDs(ids ...int) *ProdConfItemContentTypeUpdateOne {
	pcictuo.mutation.RemoveChildIDs(ids...)
	return pcictuo
}

// RemoveChildren removes "children" edges to ProdConfItemContentType entities.
func (pcictuo *ProdConfItemContentTypeUpdateOne) RemoveChildren(p ...*ProdConfItemContentType) *ProdConfItemContentTypeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pcictuo.RemoveChildIDs(ids...)
}

// ClearChildProdConfItemContentTypes clears all "child_prod_conf_item_content_types" edges to the ProdConfItemContentType entity.
func (pcictuo *ProdConfItemContentTypeUpdateOne) ClearChildProdConfItemContentTypes() *ProdConfItemContentTypeUpdateOne {
	pcictuo.mutation.ClearChildProdConfItemContentTypes()
	return pcictuo
}

// RemoveChildProdConfItemContentTypeIDs removes the "child_prod_conf_item_content_types" edge to ProdConfItemContentType entities by IDs.
func (pcictuo *ProdConfItemContentTypeUpdateOne) RemoveChildProdConfItemContentTypeIDs(ids ...int) *ProdConfItemContentTypeUpdateOne {
	pcictuo.mutation.RemoveChildProdConfItemContentTypeIDs(ids...)
	return pcictuo
}

// RemoveChildProdConfItemContentTypes removes "child_prod_conf_item_content_types" edges to ProdConfItemContentType entities.
func (pcictuo *ProdConfItemContentTypeUpdateOne) RemoveChildProdConfItemContentTypes(p ...*ProdConfItemContentType) *ProdConfItemContentTypeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pcictuo.RemoveChildProdConfItemContentTypeIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pcictuo *ProdConfItemContentTypeUpdateOne) Select(field string, fields ...string) *ProdConfItemContentTypeUpdateOne {
	pcictuo.fields = append([]string{field}, fields...)
	return pcictuo
}

// Save executes the query and returns the updated ProdConfItemContentType entity.
func (pcictuo *ProdConfItemContentTypeUpdateOne) Save(ctx context.Context) (*ProdConfItemContentType, error) {
	var (
		err  error
		node *ProdConfItemContentType
	)
	pcictuo.defaults()
	if len(pcictuo.hooks) == 0 {
		if err = pcictuo.check(); err != nil {
			return nil, err
		}
		node, err = pcictuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProdConfItemContentTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pcictuo.check(); err != nil {
				return nil, err
			}
			pcictuo.mutation = mutation
			node, err = pcictuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pcictuo.hooks) - 1; i >= 0; i-- {
			mut = pcictuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pcictuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (pcictuo *ProdConfItemContentTypeUpdateOne) SaveX(ctx context.Context) *ProdConfItemContentType {
	node, err := pcictuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pcictuo *ProdConfItemContentTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := pcictuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcictuo *ProdConfItemContentTypeUpdateOne) ExecX(ctx context.Context) {
	if err := pcictuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pcictuo *ProdConfItemContentTypeUpdateOne) defaults() {
	if _, ok := pcictuo.mutation.UpdateTime(); !ok {
		v := prodconfitemcontenttype.UpdateDefaultUpdateTime()
		pcictuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pcictuo *ProdConfItemContentTypeUpdateOne) check() error {
	if v, ok := pcictuo.mutation.HasTable(); ok {
		if err := prodconfitemcontenttype.HasTableValidator(v); err != nil {
			return &ValidationError{Name: "has_table", err: fmt.Errorf("ent: validator failed for field \"has_table\": %w", err)}
		}
	}
	return nil
}

func (pcictuo *ProdConfItemContentTypeUpdateOne) sqlSave(ctx context.Context) (_node *ProdConfItemContentType, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   prodconfitemcontenttype.Table,
			Columns: prodconfitemcontenttype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: prodconfitemcontenttype.FieldID,
			},
		},
	}
	id, ok := pcictuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ProdConfItemContentType.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := pcictuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, prodconfitemcontenttype.FieldID)
		for _, f := range fields {
			if !prodconfitemcontenttype.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != prodconfitemcontenttype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pcictuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pcictuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: prodconfitemcontenttype.FieldUpdateTime,
		})
	}
	if value, ok := pcictuo.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: prodconfitemcontenttype.FieldStringRef,
		})
	}
	if pcictuo.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: prodconfitemcontenttype.FieldStringRef,
		})
	}
	if value, ok := pcictuo.mutation.HasTable(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: prodconfitemcontenttype.FieldHasTable,
		})
	}
	if pcictuo.mutation.HasTableCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: prodconfitemcontenttype.FieldHasTable,
		})
	}
	if value, ok := pcictuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: prodconfitemcontenttype.FieldDescription,
		})
	}
	if pcictuo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: prodconfitemcontenttype.FieldDescription,
		})
	}
	if pcictuo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   prodconfitemcontenttype.ParentTable,
			Columns: []string{prodconfitemcontenttype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: prodconfitemcontenttype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcictuo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   prodconfitemcontenttype.ParentTable,
			Columns: []string{prodconfitemcontenttype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: prodconfitemcontenttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pcictuo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   prodconfitemcontenttype.ChildrenTable,
			Columns: []string{prodconfitemcontenttype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: prodconfitemcontenttype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcictuo.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !pcictuo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   prodconfitemcontenttype.ChildrenTable,
			Columns: []string{prodconfitemcontenttype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: prodconfitemcontenttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcictuo.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   prodconfitemcontenttype.ChildrenTable,
			Columns: []string{prodconfitemcontenttype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: prodconfitemcontenttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pcictuo.mutation.ChildProdConfItemContentTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   prodconfitemcontenttype.ChildProdConfItemContentTypesTable,
			Columns: prodconfitemcontenttype.ChildProdConfItemContentTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: prodconfitemcontenttype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcictuo.mutation.RemovedChildProdConfItemContentTypesIDs(); len(nodes) > 0 && !pcictuo.mutation.ChildProdConfItemContentTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   prodconfitemcontenttype.ChildProdConfItemContentTypesTable,
			Columns: prodconfitemcontenttype.ChildProdConfItemContentTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: prodconfitemcontenttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcictuo.mutation.ChildProdConfItemContentTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   prodconfitemcontenttype.ChildProdConfItemContentTypesTable,
			Columns: prodconfitemcontenttype.ChildProdConfItemContentTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: prodconfitemcontenttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProdConfItemContentType{config: pcictuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pcictuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{prodconfitemcontenttype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
