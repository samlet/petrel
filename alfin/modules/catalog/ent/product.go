// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/enumeration"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/inventoryitemtype"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/product"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productcategory"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/producttype"
)

// Product is the model entity for the Product schema.
type Product struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// StringRef holds the value of the "string_ref" field.
	StringRef string `json:"string_ref,omitempty"`
	// FacilityID holds the value of the "facility_id" field.
	FacilityID int `json:"facility_id,omitempty"`
	// IntroductionDate holds the value of the "introduction_date" field.
	IntroductionDate time.Time `json:"introduction_date,omitempty"`
	// ReleaseDate holds the value of the "release_date" field.
	ReleaseDate time.Time `json:"release_date,omitempty"`
	// SupportDiscontinuationDate holds the value of the "support_discontinuation_date" field.
	SupportDiscontinuationDate time.Time `json:"support_discontinuation_date,omitempty"`
	// SalesDiscontinuationDate holds the value of the "sales_discontinuation_date" field.
	SalesDiscontinuationDate time.Time `json:"sales_discontinuation_date,omitempty"`
	// SalesDiscWhenNotAvail holds the value of the "sales_disc_when_not_avail" field.
	SalesDiscWhenNotAvail product.SalesDiscWhenNotAvail `json:"sales_disc_when_not_avail,omitempty"`
	// InternalName holds the value of the "internal_name" field.
	InternalName string `json:"internal_name,omitempty"`
	// BrandName holds the value of the "brand_name" field.
	BrandName string `json:"brand_name,omitempty"`
	// Comments holds the value of the "comments" field.
	Comments string `json:"comments,omitempty"`
	// ProductName holds the value of the "product_name" field.
	ProductName string `json:"product_name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// LongDescription holds the value of the "long_description" field.
	LongDescription string `json:"long_description,omitempty"`
	// PriceDetailText holds the value of the "price_detail_text" field.
	PriceDetailText string `json:"price_detail_text,omitempty"`
	// SmallImageURL holds the value of the "small_image_url" field.
	SmallImageURL string `json:"small_image_url,omitempty"`
	// MediumImageURL holds the value of the "medium_image_url" field.
	MediumImageURL string `json:"medium_image_url,omitempty"`
	// LargeImageURL holds the value of the "large_image_url" field.
	LargeImageURL string `json:"large_image_url,omitempty"`
	// DetailImageURL holds the value of the "detail_image_url" field.
	DetailImageURL string `json:"detail_image_url,omitempty"`
	// OriginalImageURL holds the value of the "original_image_url" field.
	OriginalImageURL string `json:"original_image_url,omitempty"`
	// DetailScreen holds the value of the "detail_screen" field.
	DetailScreen string `json:"detail_screen,omitempty"`
	// InventoryMessage holds the value of the "inventory_message" field.
	InventoryMessage string `json:"inventory_message,omitempty"`
	// RequireInventory holds the value of the "require_inventory" field.
	RequireInventory product.RequireInventory `json:"require_inventory,omitempty"`
	// QuantityUomID holds the value of the "quantity_uom_id" field.
	QuantityUomID int `json:"quantity_uom_id,omitempty"`
	// QuantityIncluded holds the value of the "quantity_included" field.
	QuantityIncluded float64 `json:"quantity_included,omitempty"`
	// PiecesIncluded holds the value of the "pieces_included" field.
	PiecesIncluded int `json:"pieces_included,omitempty"`
	// RequireAmount holds the value of the "require_amount" field.
	RequireAmount product.RequireAmount `json:"require_amount,omitempty"`
	// FixedAmount holds the value of the "fixed_amount" field.
	FixedAmount float64 `json:"fixed_amount,omitempty"`
	// AmountUomTypeID holds the value of the "amount_uom_type_id" field.
	AmountUomTypeID int `json:"amount_uom_type_id,omitempty"`
	// WeightUomID holds the value of the "weight_uom_id" field.
	WeightUomID int `json:"weight_uom_id,omitempty"`
	// ShippingWeight holds the value of the "shipping_weight" field.
	ShippingWeight float64 `json:"shipping_weight,omitempty"`
	// ProductWeight holds the value of the "product_weight" field.
	ProductWeight float64 `json:"product_weight,omitempty"`
	// HeightUomID holds the value of the "height_uom_id" field.
	HeightUomID int `json:"height_uom_id,omitempty"`
	// ProductHeight holds the value of the "product_height" field.
	ProductHeight float64 `json:"product_height,omitempty"`
	// ShippingHeight holds the value of the "shipping_height" field.
	ShippingHeight float64 `json:"shipping_height,omitempty"`
	// WidthUomID holds the value of the "width_uom_id" field.
	WidthUomID int `json:"width_uom_id,omitempty"`
	// ProductWidth holds the value of the "product_width" field.
	ProductWidth float64 `json:"product_width,omitempty"`
	// ShippingWidth holds the value of the "shipping_width" field.
	ShippingWidth float64 `json:"shipping_width,omitempty"`
	// DepthUomID holds the value of the "depth_uom_id" field.
	DepthUomID int `json:"depth_uom_id,omitempty"`
	// ProductDepth holds the value of the "product_depth" field.
	ProductDepth float64 `json:"product_depth,omitempty"`
	// ShippingDepth holds the value of the "shipping_depth" field.
	ShippingDepth float64 `json:"shipping_depth,omitempty"`
	// DiameterUomID holds the value of the "diameter_uom_id" field.
	DiameterUomID int `json:"diameter_uom_id,omitempty"`
	// ProductDiameter holds the value of the "product_diameter" field.
	ProductDiameter float64 `json:"product_diameter,omitempty"`
	// ProductRating holds the value of the "product_rating" field.
	ProductRating float64 `json:"product_rating,omitempty"`
	// Returnable holds the value of the "returnable" field.
	Returnable product.Returnable `json:"returnable,omitempty"`
	// Taxable holds the value of the "taxable" field.
	Taxable product.Taxable `json:"taxable,omitempty"`
	// ChargeShipping holds the value of the "charge_shipping" field.
	ChargeShipping product.ChargeShipping `json:"charge_shipping,omitempty"`
	// AutoCreateKeywords holds the value of the "auto_create_keywords" field.
	AutoCreateKeywords product.AutoCreateKeywords `json:"auto_create_keywords,omitempty"`
	// IncludeInPromotions holds the value of the "include_in_promotions" field.
	IncludeInPromotions product.IncludeInPromotions `json:"include_in_promotions,omitempty"`
	// IsVirtual holds the value of the "is_virtual" field.
	IsVirtual product.IsVirtual `json:"is_virtual,omitempty"`
	// IsVariant holds the value of the "is_variant" field.
	IsVariant product.IsVariant `json:"is_variant,omitempty"`
	// OriginGeoID holds the value of the "origin_geo_id" field.
	OriginGeoID int `json:"origin_geo_id,omitempty"`
	// BillOfMaterialLevel holds the value of the "bill_of_material_level" field.
	BillOfMaterialLevel int `json:"bill_of_material_level,omitempty"`
	// ReservMaxPersons holds the value of the "reserv_max_persons" field.
	ReservMaxPersons float64 `json:"reserv_max_persons,omitempty"`
	// Reserv2NdPpPerc holds the value of the "reserv_2_nd_pp_perc" field.
	Reserv2NdPpPerc float64 `json:"reserv_2_nd_pp_perc,omitempty"`
	// ReservNthPpPerc holds the value of the "reserv_nth_pp_perc" field.
	ReservNthPpPerc float64 `json:"reserv_nth_pp_perc,omitempty"`
	// ConfigID holds the value of the "config_id" field.
	ConfigID int `json:"config_id,omitempty"`
	// CreatedDate holds the value of the "created_date" field.
	CreatedDate time.Time `json:"created_date,omitempty"`
	// CreatedByUserLogin holds the value of the "created_by_user_login" field.
	CreatedByUserLogin string `json:"created_by_user_login,omitempty"`
	// LastModifiedDate holds the value of the "last_modified_date" field.
	LastModifiedDate time.Time `json:"last_modified_date,omitempty"`
	// LastModifiedByUserLogin holds the value of the "last_modified_by_user_login" field.
	LastModifiedByUserLogin string `json:"last_modified_by_user_login,omitempty"`
	// InShippingBox holds the value of the "in_shipping_box" field.
	InShippingBox product.InShippingBox `json:"in_shipping_box,omitempty"`
	// DefaultShipmentBoxTypeID holds the value of the "default_shipment_box_type_id" field.
	DefaultShipmentBoxTypeID int `json:"default_shipment_box_type_id,omitempty"`
	// LotIDFilledIn holds the value of the "lot_id_filled_in" field.
	LotIDFilledIn string `json:"lot_id_filled_in,omitempty"`
	// OrderDecimalQuantity holds the value of the "order_decimal_quantity" field.
	OrderDecimalQuantity product.OrderDecimalQuantity `json:"order_decimal_quantity,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProductQuery when eager-loading is set.
	Edges                                       ProductEdges `json:"edges"`
	enumeration_virtual_variant_method_products *int
	enumeration_rating_products                 *int
	enumeration_requirement_method_products     *int
	inventory_item_type_products                *int
	product_category_primary_products           *int
	product_type_products                       *int
}

// ProductEdges holds the relations/edges for other nodes in the graph.
type ProductEdges struct {
	// ProductType holds the value of the product_type edge.
	ProductType *ProductType `json:"product_type,omitempty"`
	// PrimaryProductCategory holds the value of the primary_product_category edge.
	PrimaryProductCategory *ProductCategory `json:"primary_product_category,omitempty"`
	// VirtualVariantMethodEnumeration holds the value of the virtual_variant_method_enumeration edge.
	VirtualVariantMethodEnumeration *Enumeration `json:"virtual_variant_method_enumeration,omitempty"`
	// RatingEnumeration holds the value of the rating_enumeration edge.
	RatingEnumeration *Enumeration `json:"rating_enumeration,omitempty"`
	// RequirementMethodEnumeration holds the value of the requirement_method_enumeration edge.
	RequirementMethodEnumeration *Enumeration `json:"requirement_method_enumeration,omitempty"`
	// InventoryItemType holds the value of the inventory_item_type edge.
	InventoryItemType *InventoryItemType `json:"inventory_item_type,omitempty"`
	// OrderItems holds the value of the order_items edge.
	OrderItems []*OrderItem `json:"order_items,omitempty"`
	// MainProductAssocs holds the value of the main_product_assocs edge.
	MainProductAssocs []*ProductAssoc `json:"main_product_assocs,omitempty"`
	// AssocProductAssocs holds the value of the assoc_product_assocs edge.
	AssocProductAssocs []*ProductAssoc `json:"assoc_product_assocs,omitempty"`
	// ProductPrices holds the value of the product_prices edge.
	ProductPrices []*ProductPrice `json:"product_prices,omitempty"`
	// ProductReviews holds the value of the product_reviews edge.
	ProductReviews []*ProductReview `json:"product_reviews,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [11]bool
}

// ProductTypeOrErr returns the ProductType value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProductEdges) ProductTypeOrErr() (*ProductType, error) {
	if e.loadedTypes[0] {
		if e.ProductType == nil {
			// The edge product_type was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: producttype.Label}
		}
		return e.ProductType, nil
	}
	return nil, &NotLoadedError{edge: "product_type"}
}

// PrimaryProductCategoryOrErr returns the PrimaryProductCategory value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProductEdges) PrimaryProductCategoryOrErr() (*ProductCategory, error) {
	if e.loadedTypes[1] {
		if e.PrimaryProductCategory == nil {
			// The edge primary_product_category was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: productcategory.Label}
		}
		return e.PrimaryProductCategory, nil
	}
	return nil, &NotLoadedError{edge: "primary_product_category"}
}

// VirtualVariantMethodEnumerationOrErr returns the VirtualVariantMethodEnumeration value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProductEdges) VirtualVariantMethodEnumerationOrErr() (*Enumeration, error) {
	if e.loadedTypes[2] {
		if e.VirtualVariantMethodEnumeration == nil {
			// The edge virtual_variant_method_enumeration was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: enumeration.Label}
		}
		return e.VirtualVariantMethodEnumeration, nil
	}
	return nil, &NotLoadedError{edge: "virtual_variant_method_enumeration"}
}

// RatingEnumerationOrErr returns the RatingEnumeration value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProductEdges) RatingEnumerationOrErr() (*Enumeration, error) {
	if e.loadedTypes[3] {
		if e.RatingEnumeration == nil {
			// The edge rating_enumeration was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: enumeration.Label}
		}
		return e.RatingEnumeration, nil
	}
	return nil, &NotLoadedError{edge: "rating_enumeration"}
}

// RequirementMethodEnumerationOrErr returns the RequirementMethodEnumeration value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProductEdges) RequirementMethodEnumerationOrErr() (*Enumeration, error) {
	if e.loadedTypes[4] {
		if e.RequirementMethodEnumeration == nil {
			// The edge requirement_method_enumeration was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: enumeration.Label}
		}
		return e.RequirementMethodEnumeration, nil
	}
	return nil, &NotLoadedError{edge: "requirement_method_enumeration"}
}

// InventoryItemTypeOrErr returns the InventoryItemType value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProductEdges) InventoryItemTypeOrErr() (*InventoryItemType, error) {
	if e.loadedTypes[5] {
		if e.InventoryItemType == nil {
			// The edge inventory_item_type was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: inventoryitemtype.Label}
		}
		return e.InventoryItemType, nil
	}
	return nil, &NotLoadedError{edge: "inventory_item_type"}
}

// OrderItemsOrErr returns the OrderItems value or an error if the edge
// was not loaded in eager-loading.
func (e ProductEdges) OrderItemsOrErr() ([]*OrderItem, error) {
	if e.loadedTypes[6] {
		return e.OrderItems, nil
	}
	return nil, &NotLoadedError{edge: "order_items"}
}

// MainProductAssocsOrErr returns the MainProductAssocs value or an error if the edge
// was not loaded in eager-loading.
func (e ProductEdges) MainProductAssocsOrErr() ([]*ProductAssoc, error) {
	if e.loadedTypes[7] {
		return e.MainProductAssocs, nil
	}
	return nil, &NotLoadedError{edge: "main_product_assocs"}
}

// AssocProductAssocsOrErr returns the AssocProductAssocs value or an error if the edge
// was not loaded in eager-loading.
func (e ProductEdges) AssocProductAssocsOrErr() ([]*ProductAssoc, error) {
	if e.loadedTypes[8] {
		return e.AssocProductAssocs, nil
	}
	return nil, &NotLoadedError{edge: "assoc_product_assocs"}
}

// ProductPricesOrErr returns the ProductPrices value or an error if the edge
// was not loaded in eager-loading.
func (e ProductEdges) ProductPricesOrErr() ([]*ProductPrice, error) {
	if e.loadedTypes[9] {
		return e.ProductPrices, nil
	}
	return nil, &NotLoadedError{edge: "product_prices"}
}

// ProductReviewsOrErr returns the ProductReviews value or an error if the edge
// was not loaded in eager-loading.
func (e ProductEdges) ProductReviewsOrErr() ([]*ProductReview, error) {
	if e.loadedTypes[10] {
		return e.ProductReviews, nil
	}
	return nil, &NotLoadedError{edge: "product_reviews"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Product) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case product.FieldQuantityIncluded, product.FieldFixedAmount, product.FieldShippingWeight, product.FieldProductWeight, product.FieldProductHeight, product.FieldShippingHeight, product.FieldProductWidth, product.FieldShippingWidth, product.FieldProductDepth, product.FieldShippingDepth, product.FieldProductDiameter, product.FieldProductRating, product.FieldReservMaxPersons, product.FieldReserv2NdPpPerc, product.FieldReservNthPpPerc:
			values[i] = new(sql.NullFloat64)
		case product.FieldID, product.FieldFacilityID, product.FieldQuantityUomID, product.FieldPiecesIncluded, product.FieldAmountUomTypeID, product.FieldWeightUomID, product.FieldHeightUomID, product.FieldWidthUomID, product.FieldDepthUomID, product.FieldDiameterUomID, product.FieldOriginGeoID, product.FieldBillOfMaterialLevel, product.FieldConfigID, product.FieldDefaultShipmentBoxTypeID:
			values[i] = new(sql.NullInt64)
		case product.FieldStringRef, product.FieldSalesDiscWhenNotAvail, product.FieldInternalName, product.FieldBrandName, product.FieldComments, product.FieldProductName, product.FieldDescription, product.FieldLongDescription, product.FieldPriceDetailText, product.FieldSmallImageURL, product.FieldMediumImageURL, product.FieldLargeImageURL, product.FieldDetailImageURL, product.FieldOriginalImageURL, product.FieldDetailScreen, product.FieldInventoryMessage, product.FieldRequireInventory, product.FieldRequireAmount, product.FieldReturnable, product.FieldTaxable, product.FieldChargeShipping, product.FieldAutoCreateKeywords, product.FieldIncludeInPromotions, product.FieldIsVirtual, product.FieldIsVariant, product.FieldCreatedByUserLogin, product.FieldLastModifiedByUserLogin, product.FieldInShippingBox, product.FieldLotIDFilledIn, product.FieldOrderDecimalQuantity:
			values[i] = new(sql.NullString)
		case product.FieldCreateTime, product.FieldUpdateTime, product.FieldIntroductionDate, product.FieldReleaseDate, product.FieldSupportDiscontinuationDate, product.FieldSalesDiscontinuationDate, product.FieldCreatedDate, product.FieldLastModifiedDate:
			values[i] = new(sql.NullTime)
		case product.ForeignKeys[0]: // enumeration_virtual_variant_method_products
			values[i] = new(sql.NullInt64)
		case product.ForeignKeys[1]: // enumeration_rating_products
			values[i] = new(sql.NullInt64)
		case product.ForeignKeys[2]: // enumeration_requirement_method_products
			values[i] = new(sql.NullInt64)
		case product.ForeignKeys[3]: // inventory_item_type_products
			values[i] = new(sql.NullInt64)
		case product.ForeignKeys[4]: // product_category_primary_products
			values[i] = new(sql.NullInt64)
		case product.ForeignKeys[5]: // product_type_products
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Product", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Product fields.
func (pr *Product) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case product.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pr.ID = int(value.Int64)
		case product.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				pr.CreateTime = value.Time
			}
		case product.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				pr.UpdateTime = value.Time
			}
		case product.FieldStringRef:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field string_ref", values[i])
			} else if value.Valid {
				pr.StringRef = value.String
			}
		case product.FieldFacilityID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field facility_id", values[i])
			} else if value.Valid {
				pr.FacilityID = int(value.Int64)
			}
		case product.FieldIntroductionDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field introduction_date", values[i])
			} else if value.Valid {
				pr.IntroductionDate = value.Time
			}
		case product.FieldReleaseDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field release_date", values[i])
			} else if value.Valid {
				pr.ReleaseDate = value.Time
			}
		case product.FieldSupportDiscontinuationDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field support_discontinuation_date", values[i])
			} else if value.Valid {
				pr.SupportDiscontinuationDate = value.Time
			}
		case product.FieldSalesDiscontinuationDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field sales_discontinuation_date", values[i])
			} else if value.Valid {
				pr.SalesDiscontinuationDate = value.Time
			}
		case product.FieldSalesDiscWhenNotAvail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sales_disc_when_not_avail", values[i])
			} else if value.Valid {
				pr.SalesDiscWhenNotAvail = product.SalesDiscWhenNotAvail(value.String)
			}
		case product.FieldInternalName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field internal_name", values[i])
			} else if value.Valid {
				pr.InternalName = value.String
			}
		case product.FieldBrandName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field brand_name", values[i])
			} else if value.Valid {
				pr.BrandName = value.String
			}
		case product.FieldComments:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field comments", values[i])
			} else if value.Valid {
				pr.Comments = value.String
			}
		case product.FieldProductName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field product_name", values[i])
			} else if value.Valid {
				pr.ProductName = value.String
			}
		case product.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				pr.Description = value.String
			}
		case product.FieldLongDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field long_description", values[i])
			} else if value.Valid {
				pr.LongDescription = value.String
			}
		case product.FieldPriceDetailText:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field price_detail_text", values[i])
			} else if value.Valid {
				pr.PriceDetailText = value.String
			}
		case product.FieldSmallImageURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field small_image_url", values[i])
			} else if value.Valid {
				pr.SmallImageURL = value.String
			}
		case product.FieldMediumImageURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field medium_image_url", values[i])
			} else if value.Valid {
				pr.MediumImageURL = value.String
			}
		case product.FieldLargeImageURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field large_image_url", values[i])
			} else if value.Valid {
				pr.LargeImageURL = value.String
			}
		case product.FieldDetailImageURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field detail_image_url", values[i])
			} else if value.Valid {
				pr.DetailImageURL = value.String
			}
		case product.FieldOriginalImageURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field original_image_url", values[i])
			} else if value.Valid {
				pr.OriginalImageURL = value.String
			}
		case product.FieldDetailScreen:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field detail_screen", values[i])
			} else if value.Valid {
				pr.DetailScreen = value.String
			}
		case product.FieldInventoryMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field inventory_message", values[i])
			} else if value.Valid {
				pr.InventoryMessage = value.String
			}
		case product.FieldRequireInventory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field require_inventory", values[i])
			} else if value.Valid {
				pr.RequireInventory = product.RequireInventory(value.String)
			}
		case product.FieldQuantityUomID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field quantity_uom_id", values[i])
			} else if value.Valid {
				pr.QuantityUomID = int(value.Int64)
			}
		case product.FieldQuantityIncluded:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field quantity_included", values[i])
			} else if value.Valid {
				pr.QuantityIncluded = value.Float64
			}
		case product.FieldPiecesIncluded:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field pieces_included", values[i])
			} else if value.Valid {
				pr.PiecesIncluded = int(value.Int64)
			}
		case product.FieldRequireAmount:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field require_amount", values[i])
			} else if value.Valid {
				pr.RequireAmount = product.RequireAmount(value.String)
			}
		case product.FieldFixedAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field fixed_amount", values[i])
			} else if value.Valid {
				pr.FixedAmount = value.Float64
			}
		case product.FieldAmountUomTypeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field amount_uom_type_id", values[i])
			} else if value.Valid {
				pr.AmountUomTypeID = int(value.Int64)
			}
		case product.FieldWeightUomID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field weight_uom_id", values[i])
			} else if value.Valid {
				pr.WeightUomID = int(value.Int64)
			}
		case product.FieldShippingWeight:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field shipping_weight", values[i])
			} else if value.Valid {
				pr.ShippingWeight = value.Float64
			}
		case product.FieldProductWeight:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field product_weight", values[i])
			} else if value.Valid {
				pr.ProductWeight = value.Float64
			}
		case product.FieldHeightUomID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field height_uom_id", values[i])
			} else if value.Valid {
				pr.HeightUomID = int(value.Int64)
			}
		case product.FieldProductHeight:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field product_height", values[i])
			} else if value.Valid {
				pr.ProductHeight = value.Float64
			}
		case product.FieldShippingHeight:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field shipping_height", values[i])
			} else if value.Valid {
				pr.ShippingHeight = value.Float64
			}
		case product.FieldWidthUomID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field width_uom_id", values[i])
			} else if value.Valid {
				pr.WidthUomID = int(value.Int64)
			}
		case product.FieldProductWidth:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field product_width", values[i])
			} else if value.Valid {
				pr.ProductWidth = value.Float64
			}
		case product.FieldShippingWidth:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field shipping_width", values[i])
			} else if value.Valid {
				pr.ShippingWidth = value.Float64
			}
		case product.FieldDepthUomID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field depth_uom_id", values[i])
			} else if value.Valid {
				pr.DepthUomID = int(value.Int64)
			}
		case product.FieldProductDepth:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field product_depth", values[i])
			} else if value.Valid {
				pr.ProductDepth = value.Float64
			}
		case product.FieldShippingDepth:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field shipping_depth", values[i])
			} else if value.Valid {
				pr.ShippingDepth = value.Float64
			}
		case product.FieldDiameterUomID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field diameter_uom_id", values[i])
			} else if value.Valid {
				pr.DiameterUomID = int(value.Int64)
			}
		case product.FieldProductDiameter:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field product_diameter", values[i])
			} else if value.Valid {
				pr.ProductDiameter = value.Float64
			}
		case product.FieldProductRating:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field product_rating", values[i])
			} else if value.Valid {
				pr.ProductRating = value.Float64
			}
		case product.FieldReturnable:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field returnable", values[i])
			} else if value.Valid {
				pr.Returnable = product.Returnable(value.String)
			}
		case product.FieldTaxable:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field taxable", values[i])
			} else if value.Valid {
				pr.Taxable = product.Taxable(value.String)
			}
		case product.FieldChargeShipping:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field charge_shipping", values[i])
			} else if value.Valid {
				pr.ChargeShipping = product.ChargeShipping(value.String)
			}
		case product.FieldAutoCreateKeywords:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field auto_create_keywords", values[i])
			} else if value.Valid {
				pr.AutoCreateKeywords = product.AutoCreateKeywords(value.String)
			}
		case product.FieldIncludeInPromotions:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field include_in_promotions", values[i])
			} else if value.Valid {
				pr.IncludeInPromotions = product.IncludeInPromotions(value.String)
			}
		case product.FieldIsVirtual:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field is_virtual", values[i])
			} else if value.Valid {
				pr.IsVirtual = product.IsVirtual(value.String)
			}
		case product.FieldIsVariant:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field is_variant", values[i])
			} else if value.Valid {
				pr.IsVariant = product.IsVariant(value.String)
			}
		case product.FieldOriginGeoID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field origin_geo_id", values[i])
			} else if value.Valid {
				pr.OriginGeoID = int(value.Int64)
			}
		case product.FieldBillOfMaterialLevel:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field bill_of_material_level", values[i])
			} else if value.Valid {
				pr.BillOfMaterialLevel = int(value.Int64)
			}
		case product.FieldReservMaxPersons:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field reserv_max_persons", values[i])
			} else if value.Valid {
				pr.ReservMaxPersons = value.Float64
			}
		case product.FieldReserv2NdPpPerc:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field reserv_2_nd_pp_perc", values[i])
			} else if value.Valid {
				pr.Reserv2NdPpPerc = value.Float64
			}
		case product.FieldReservNthPpPerc:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field reserv_nth_pp_perc", values[i])
			} else if value.Valid {
				pr.ReservNthPpPerc = value.Float64
			}
		case product.FieldConfigID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field config_id", values[i])
			} else if value.Valid {
				pr.ConfigID = int(value.Int64)
			}
		case product.FieldCreatedDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_date", values[i])
			} else if value.Valid {
				pr.CreatedDate = value.Time
			}
		case product.FieldCreatedByUserLogin:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by_user_login", values[i])
			} else if value.Valid {
				pr.CreatedByUserLogin = value.String
			}
		case product.FieldLastModifiedDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_modified_date", values[i])
			} else if value.Valid {
				pr.LastModifiedDate = value.Time
			}
		case product.FieldLastModifiedByUserLogin:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_modified_by_user_login", values[i])
			} else if value.Valid {
				pr.LastModifiedByUserLogin = value.String
			}
		case product.FieldInShippingBox:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field in_shipping_box", values[i])
			} else if value.Valid {
				pr.InShippingBox = product.InShippingBox(value.String)
			}
		case product.FieldDefaultShipmentBoxTypeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field default_shipment_box_type_id", values[i])
			} else if value.Valid {
				pr.DefaultShipmentBoxTypeID = int(value.Int64)
			}
		case product.FieldLotIDFilledIn:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field lot_id_filled_in", values[i])
			} else if value.Valid {
				pr.LotIDFilledIn = value.String
			}
		case product.FieldOrderDecimalQuantity:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field order_decimal_quantity", values[i])
			} else if value.Valid {
				pr.OrderDecimalQuantity = product.OrderDecimalQuantity(value.String)
			}
		case product.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field enumeration_virtual_variant_method_products", value)
			} else if value.Valid {
				pr.enumeration_virtual_variant_method_products = new(int)
				*pr.enumeration_virtual_variant_method_products = int(value.Int64)
			}
		case product.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field enumeration_rating_products", value)
			} else if value.Valid {
				pr.enumeration_rating_products = new(int)
				*pr.enumeration_rating_products = int(value.Int64)
			}
		case product.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field enumeration_requirement_method_products", value)
			} else if value.Valid {
				pr.enumeration_requirement_method_products = new(int)
				*pr.enumeration_requirement_method_products = int(value.Int64)
			}
		case product.ForeignKeys[3]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field inventory_item_type_products", value)
			} else if value.Valid {
				pr.inventory_item_type_products = new(int)
				*pr.inventory_item_type_products = int(value.Int64)
			}
		case product.ForeignKeys[4]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field product_category_primary_products", value)
			} else if value.Valid {
				pr.product_category_primary_products = new(int)
				*pr.product_category_primary_products = int(value.Int64)
			}
		case product.ForeignKeys[5]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field product_type_products", value)
			} else if value.Valid {
				pr.product_type_products = new(int)
				*pr.product_type_products = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryProductType queries the "product_type" edge of the Product entity.
func (pr *Product) QueryProductType() *ProductTypeQuery {
	return (&ProductClient{config: pr.config}).QueryProductType(pr)
}

// QueryPrimaryProductCategory queries the "primary_product_category" edge of the Product entity.
func (pr *Product) QueryPrimaryProductCategory() *ProductCategoryQuery {
	return (&ProductClient{config: pr.config}).QueryPrimaryProductCategory(pr)
}

// QueryVirtualVariantMethodEnumeration queries the "virtual_variant_method_enumeration" edge of the Product entity.
func (pr *Product) QueryVirtualVariantMethodEnumeration() *EnumerationQuery {
	return (&ProductClient{config: pr.config}).QueryVirtualVariantMethodEnumeration(pr)
}

// QueryRatingEnumeration queries the "rating_enumeration" edge of the Product entity.
func (pr *Product) QueryRatingEnumeration() *EnumerationQuery {
	return (&ProductClient{config: pr.config}).QueryRatingEnumeration(pr)
}

// QueryRequirementMethodEnumeration queries the "requirement_method_enumeration" edge of the Product entity.
func (pr *Product) QueryRequirementMethodEnumeration() *EnumerationQuery {
	return (&ProductClient{config: pr.config}).QueryRequirementMethodEnumeration(pr)
}

// QueryInventoryItemType queries the "inventory_item_type" edge of the Product entity.
func (pr *Product) QueryInventoryItemType() *InventoryItemTypeQuery {
	return (&ProductClient{config: pr.config}).QueryInventoryItemType(pr)
}

// QueryOrderItems queries the "order_items" edge of the Product entity.
func (pr *Product) QueryOrderItems() *OrderItemQuery {
	return (&ProductClient{config: pr.config}).QueryOrderItems(pr)
}

// QueryMainProductAssocs queries the "main_product_assocs" edge of the Product entity.
func (pr *Product) QueryMainProductAssocs() *ProductAssocQuery {
	return (&ProductClient{config: pr.config}).QueryMainProductAssocs(pr)
}

// QueryAssocProductAssocs queries the "assoc_product_assocs" edge of the Product entity.
func (pr *Product) QueryAssocProductAssocs() *ProductAssocQuery {
	return (&ProductClient{config: pr.config}).QueryAssocProductAssocs(pr)
}

// QueryProductPrices queries the "product_prices" edge of the Product entity.
func (pr *Product) QueryProductPrices() *ProductPriceQuery {
	return (&ProductClient{config: pr.config}).QueryProductPrices(pr)
}

// QueryProductReviews queries the "product_reviews" edge of the Product entity.
func (pr *Product) QueryProductReviews() *ProductReviewQuery {
	return (&ProductClient{config: pr.config}).QueryProductReviews(pr)
}

// Update returns a builder for updating this Product.
// Note that you need to call Product.Unwrap() before calling this method if this Product
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Product) Update() *ProductUpdateOne {
	return (&ProductClient{config: pr.config}).UpdateOne(pr)
}

// Unwrap unwraps the Product entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *Product) Unwrap() *Product {
	tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Product is not a transactional entity")
	}
	pr.config.driver = tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Product) String() string {
	var builder strings.Builder
	builder.WriteString("Product(")
	builder.WriteString(fmt.Sprintf("id=%v", pr.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(pr.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(pr.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", string_ref=")
	builder.WriteString(pr.StringRef)
	builder.WriteString(", facility_id=")
	builder.WriteString(fmt.Sprintf("%v", pr.FacilityID))
	builder.WriteString(", introduction_date=")
	builder.WriteString(pr.IntroductionDate.Format(time.ANSIC))
	builder.WriteString(", release_date=")
	builder.WriteString(pr.ReleaseDate.Format(time.ANSIC))
	builder.WriteString(", support_discontinuation_date=")
	builder.WriteString(pr.SupportDiscontinuationDate.Format(time.ANSIC))
	builder.WriteString(", sales_discontinuation_date=")
	builder.WriteString(pr.SalesDiscontinuationDate.Format(time.ANSIC))
	builder.WriteString(", sales_disc_when_not_avail=")
	builder.WriteString(fmt.Sprintf("%v", pr.SalesDiscWhenNotAvail))
	builder.WriteString(", internal_name=")
	builder.WriteString(pr.InternalName)
	builder.WriteString(", brand_name=")
	builder.WriteString(pr.BrandName)
	builder.WriteString(", comments=")
	builder.WriteString(pr.Comments)
	builder.WriteString(", product_name=")
	builder.WriteString(pr.ProductName)
	builder.WriteString(", description=")
	builder.WriteString(pr.Description)
	builder.WriteString(", long_description=")
	builder.WriteString(pr.LongDescription)
	builder.WriteString(", price_detail_text=")
	builder.WriteString(pr.PriceDetailText)
	builder.WriteString(", small_image_url=")
	builder.WriteString(pr.SmallImageURL)
	builder.WriteString(", medium_image_url=")
	builder.WriteString(pr.MediumImageURL)
	builder.WriteString(", large_image_url=")
	builder.WriteString(pr.LargeImageURL)
	builder.WriteString(", detail_image_url=")
	builder.WriteString(pr.DetailImageURL)
	builder.WriteString(", original_image_url=")
	builder.WriteString(pr.OriginalImageURL)
	builder.WriteString(", detail_screen=")
	builder.WriteString(pr.DetailScreen)
	builder.WriteString(", inventory_message=")
	builder.WriteString(pr.InventoryMessage)
	builder.WriteString(", require_inventory=")
	builder.WriteString(fmt.Sprintf("%v", pr.RequireInventory))
	builder.WriteString(", quantity_uom_id=")
	builder.WriteString(fmt.Sprintf("%v", pr.QuantityUomID))
	builder.WriteString(", quantity_included=")
	builder.WriteString(fmt.Sprintf("%v", pr.QuantityIncluded))
	builder.WriteString(", pieces_included=")
	builder.WriteString(fmt.Sprintf("%v", pr.PiecesIncluded))
	builder.WriteString(", require_amount=")
	builder.WriteString(fmt.Sprintf("%v", pr.RequireAmount))
	builder.WriteString(", fixed_amount=")
	builder.WriteString(fmt.Sprintf("%v", pr.FixedAmount))
	builder.WriteString(", amount_uom_type_id=")
	builder.WriteString(fmt.Sprintf("%v", pr.AmountUomTypeID))
	builder.WriteString(", weight_uom_id=")
	builder.WriteString(fmt.Sprintf("%v", pr.WeightUomID))
	builder.WriteString(", shipping_weight=")
	builder.WriteString(fmt.Sprintf("%v", pr.ShippingWeight))
	builder.WriteString(", product_weight=")
	builder.WriteString(fmt.Sprintf("%v", pr.ProductWeight))
	builder.WriteString(", height_uom_id=")
	builder.WriteString(fmt.Sprintf("%v", pr.HeightUomID))
	builder.WriteString(", product_height=")
	builder.WriteString(fmt.Sprintf("%v", pr.ProductHeight))
	builder.WriteString(", shipping_height=")
	builder.WriteString(fmt.Sprintf("%v", pr.ShippingHeight))
	builder.WriteString(", width_uom_id=")
	builder.WriteString(fmt.Sprintf("%v", pr.WidthUomID))
	builder.WriteString(", product_width=")
	builder.WriteString(fmt.Sprintf("%v", pr.ProductWidth))
	builder.WriteString(", shipping_width=")
	builder.WriteString(fmt.Sprintf("%v", pr.ShippingWidth))
	builder.WriteString(", depth_uom_id=")
	builder.WriteString(fmt.Sprintf("%v", pr.DepthUomID))
	builder.WriteString(", product_depth=")
	builder.WriteString(fmt.Sprintf("%v", pr.ProductDepth))
	builder.WriteString(", shipping_depth=")
	builder.WriteString(fmt.Sprintf("%v", pr.ShippingDepth))
	builder.WriteString(", diameter_uom_id=")
	builder.WriteString(fmt.Sprintf("%v", pr.DiameterUomID))
	builder.WriteString(", product_diameter=")
	builder.WriteString(fmt.Sprintf("%v", pr.ProductDiameter))
	builder.WriteString(", product_rating=")
	builder.WriteString(fmt.Sprintf("%v", pr.ProductRating))
	builder.WriteString(", returnable=")
	builder.WriteString(fmt.Sprintf("%v", pr.Returnable))
	builder.WriteString(", taxable=")
	builder.WriteString(fmt.Sprintf("%v", pr.Taxable))
	builder.WriteString(", charge_shipping=")
	builder.WriteString(fmt.Sprintf("%v", pr.ChargeShipping))
	builder.WriteString(", auto_create_keywords=")
	builder.WriteString(fmt.Sprintf("%v", pr.AutoCreateKeywords))
	builder.WriteString(", include_in_promotions=")
	builder.WriteString(fmt.Sprintf("%v", pr.IncludeInPromotions))
	builder.WriteString(", is_virtual=")
	builder.WriteString(fmt.Sprintf("%v", pr.IsVirtual))
	builder.WriteString(", is_variant=")
	builder.WriteString(fmt.Sprintf("%v", pr.IsVariant))
	builder.WriteString(", origin_geo_id=")
	builder.WriteString(fmt.Sprintf("%v", pr.OriginGeoID))
	builder.WriteString(", bill_of_material_level=")
	builder.WriteString(fmt.Sprintf("%v", pr.BillOfMaterialLevel))
	builder.WriteString(", reserv_max_persons=")
	builder.WriteString(fmt.Sprintf("%v", pr.ReservMaxPersons))
	builder.WriteString(", reserv_2_nd_pp_perc=")
	builder.WriteString(fmt.Sprintf("%v", pr.Reserv2NdPpPerc))
	builder.WriteString(", reserv_nth_pp_perc=")
	builder.WriteString(fmt.Sprintf("%v", pr.ReservNthPpPerc))
	builder.WriteString(", config_id=")
	builder.WriteString(fmt.Sprintf("%v", pr.ConfigID))
	builder.WriteString(", created_date=")
	builder.WriteString(pr.CreatedDate.Format(time.ANSIC))
	builder.WriteString(", created_by_user_login=")
	builder.WriteString(pr.CreatedByUserLogin)
	builder.WriteString(", last_modified_date=")
	builder.WriteString(pr.LastModifiedDate.Format(time.ANSIC))
	builder.WriteString(", last_modified_by_user_login=")
	builder.WriteString(pr.LastModifiedByUserLogin)
	builder.WriteString(", in_shipping_box=")
	builder.WriteString(fmt.Sprintf("%v", pr.InShippingBox))
	builder.WriteString(", default_shipment_box_type_id=")
	builder.WriteString(fmt.Sprintf("%v", pr.DefaultShipmentBoxTypeID))
	builder.WriteString(", lot_id_filled_in=")
	builder.WriteString(pr.LotIDFilledIn)
	builder.WriteString(", order_decimal_quantity=")
	builder.WriteString(fmt.Sprintf("%v", pr.OrderDecimalQuantity))
	builder.WriteByte(')')
	return builder.String()
}

// Products is a parsable slice of Product.
type Products []*Product

func (pr Products) config(cfg config) {
	for _i := range pr {
		pr[_i].config = cfg
	}
}
