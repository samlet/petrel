// Code generated by entc, DO NOT EDIT.

package product

import (
	"fmt"
	"time"
)

const (
	// Label holds the string label denoting the product type in the database.
	Label = "product"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldStringRef holds the string denoting the string_ref field in the database.
	FieldStringRef = "string_ref"
	// FieldFacilityID holds the string denoting the facility_id field in the database.
	FieldFacilityID = "facility_id"
	// FieldIntroductionDate holds the string denoting the introduction_date field in the database.
	FieldIntroductionDate = "introduction_date"
	// FieldReleaseDate holds the string denoting the release_date field in the database.
	FieldReleaseDate = "release_date"
	// FieldSupportDiscontinuationDate holds the string denoting the support_discontinuation_date field in the database.
	FieldSupportDiscontinuationDate = "support_discontinuation_date"
	// FieldSalesDiscontinuationDate holds the string denoting the sales_discontinuation_date field in the database.
	FieldSalesDiscontinuationDate = "sales_discontinuation_date"
	// FieldSalesDiscWhenNotAvail holds the string denoting the sales_disc_when_not_avail field in the database.
	FieldSalesDiscWhenNotAvail = "sales_disc_when_not_avail"
	// FieldInternalName holds the string denoting the internal_name field in the database.
	FieldInternalName = "internal_name"
	// FieldBrandName holds the string denoting the brand_name field in the database.
	FieldBrandName = "brand_name"
	// FieldComments holds the string denoting the comments field in the database.
	FieldComments = "comments"
	// FieldProductName holds the string denoting the product_name field in the database.
	FieldProductName = "product_name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldLongDescription holds the string denoting the long_description field in the database.
	FieldLongDescription = "long_description"
	// FieldPriceDetailText holds the string denoting the price_detail_text field in the database.
	FieldPriceDetailText = "price_detail_text"
	// FieldSmallImageURL holds the string denoting the small_image_url field in the database.
	FieldSmallImageURL = "small_image_url"
	// FieldMediumImageURL holds the string denoting the medium_image_url field in the database.
	FieldMediumImageURL = "medium_image_url"
	// FieldLargeImageURL holds the string denoting the large_image_url field in the database.
	FieldLargeImageURL = "large_image_url"
	// FieldDetailImageURL holds the string denoting the detail_image_url field in the database.
	FieldDetailImageURL = "detail_image_url"
	// FieldOriginalImageURL holds the string denoting the original_image_url field in the database.
	FieldOriginalImageURL = "original_image_url"
	// FieldDetailScreen holds the string denoting the detail_screen field in the database.
	FieldDetailScreen = "detail_screen"
	// FieldInventoryMessage holds the string denoting the inventory_message field in the database.
	FieldInventoryMessage = "inventory_message"
	// FieldRequireInventory holds the string denoting the require_inventory field in the database.
	FieldRequireInventory = "require_inventory"
	// FieldQuantityUomID holds the string denoting the quantity_uom_id field in the database.
	FieldQuantityUomID = "quantity_uom_id"
	// FieldQuantityIncluded holds the string denoting the quantity_included field in the database.
	FieldQuantityIncluded = "quantity_included"
	// FieldPiecesIncluded holds the string denoting the pieces_included field in the database.
	FieldPiecesIncluded = "pieces_included"
	// FieldRequireAmount holds the string denoting the require_amount field in the database.
	FieldRequireAmount = "require_amount"
	// FieldFixedAmount holds the string denoting the fixed_amount field in the database.
	FieldFixedAmount = "fixed_amount"
	// FieldAmountUomTypeID holds the string denoting the amount_uom_type_id field in the database.
	FieldAmountUomTypeID = "amount_uom_type_id"
	// FieldWeightUomID holds the string denoting the weight_uom_id field in the database.
	FieldWeightUomID = "weight_uom_id"
	// FieldShippingWeight holds the string denoting the shipping_weight field in the database.
	FieldShippingWeight = "shipping_weight"
	// FieldProductWeight holds the string denoting the product_weight field in the database.
	FieldProductWeight = "product_weight"
	// FieldHeightUomID holds the string denoting the height_uom_id field in the database.
	FieldHeightUomID = "height_uom_id"
	// FieldProductHeight holds the string denoting the product_height field in the database.
	FieldProductHeight = "product_height"
	// FieldShippingHeight holds the string denoting the shipping_height field in the database.
	FieldShippingHeight = "shipping_height"
	// FieldWidthUomID holds the string denoting the width_uom_id field in the database.
	FieldWidthUomID = "width_uom_id"
	// FieldProductWidth holds the string denoting the product_width field in the database.
	FieldProductWidth = "product_width"
	// FieldShippingWidth holds the string denoting the shipping_width field in the database.
	FieldShippingWidth = "shipping_width"
	// FieldDepthUomID holds the string denoting the depth_uom_id field in the database.
	FieldDepthUomID = "depth_uom_id"
	// FieldProductDepth holds the string denoting the product_depth field in the database.
	FieldProductDepth = "product_depth"
	// FieldShippingDepth holds the string denoting the shipping_depth field in the database.
	FieldShippingDepth = "shipping_depth"
	// FieldDiameterUomID holds the string denoting the diameter_uom_id field in the database.
	FieldDiameterUomID = "diameter_uom_id"
	// FieldProductDiameter holds the string denoting the product_diameter field in the database.
	FieldProductDiameter = "product_diameter"
	// FieldProductRating holds the string denoting the product_rating field in the database.
	FieldProductRating = "product_rating"
	// FieldReturnable holds the string denoting the returnable field in the database.
	FieldReturnable = "returnable"
	// FieldTaxable holds the string denoting the taxable field in the database.
	FieldTaxable = "taxable"
	// FieldChargeShipping holds the string denoting the charge_shipping field in the database.
	FieldChargeShipping = "charge_shipping"
	// FieldAutoCreateKeywords holds the string denoting the auto_create_keywords field in the database.
	FieldAutoCreateKeywords = "auto_create_keywords"
	// FieldIncludeInPromotions holds the string denoting the include_in_promotions field in the database.
	FieldIncludeInPromotions = "include_in_promotions"
	// FieldIsVirtual holds the string denoting the is_virtual field in the database.
	FieldIsVirtual = "is_virtual"
	// FieldIsVariant holds the string denoting the is_variant field in the database.
	FieldIsVariant = "is_variant"
	// FieldOriginGeoID holds the string denoting the origin_geo_id field in the database.
	FieldOriginGeoID = "origin_geo_id"
	// FieldBillOfMaterialLevel holds the string denoting the bill_of_material_level field in the database.
	FieldBillOfMaterialLevel = "bill_of_material_level"
	// FieldReservMaxPersons holds the string denoting the reserv_max_persons field in the database.
	FieldReservMaxPersons = "reserv_max_persons"
	// FieldReserv2NdPpPerc holds the string denoting the reserv_2_nd_pp_perc field in the database.
	FieldReserv2NdPpPerc = "reserv_2_nd_pp_perc"
	// FieldReservNthPpPerc holds the string denoting the reserv_nth_pp_perc field in the database.
	FieldReservNthPpPerc = "reserv_nth_pp_perc"
	// FieldConfigID holds the string denoting the config_id field in the database.
	FieldConfigID = "config_id"
	// FieldCreatedDate holds the string denoting the created_date field in the database.
	FieldCreatedDate = "created_date"
	// FieldCreatedByUserLogin holds the string denoting the created_by_user_login field in the database.
	FieldCreatedByUserLogin = "created_by_user_login"
	// FieldLastModifiedDate holds the string denoting the last_modified_date field in the database.
	FieldLastModifiedDate = "last_modified_date"
	// FieldLastModifiedByUserLogin holds the string denoting the last_modified_by_user_login field in the database.
	FieldLastModifiedByUserLogin = "last_modified_by_user_login"
	// FieldInShippingBox holds the string denoting the in_shipping_box field in the database.
	FieldInShippingBox = "in_shipping_box"
	// FieldDefaultShipmentBoxTypeID holds the string denoting the default_shipment_box_type_id field in the database.
	FieldDefaultShipmentBoxTypeID = "default_shipment_box_type_id"
	// FieldLotIDFilledIn holds the string denoting the lot_id_filled_in field in the database.
	FieldLotIDFilledIn = "lot_id_filled_in"
	// FieldOrderDecimalQuantity holds the string denoting the order_decimal_quantity field in the database.
	FieldOrderDecimalQuantity = "order_decimal_quantity"
	// EdgeProductType holds the string denoting the product_type edge name in mutations.
	EdgeProductType = "product_type"
	// EdgePrimaryProductCategory holds the string denoting the primary_product_category edge name in mutations.
	EdgePrimaryProductCategory = "primary_product_category"
	// EdgeVirtualVariantMethodEnumeration holds the string denoting the virtual_variant_method_enumeration edge name in mutations.
	EdgeVirtualVariantMethodEnumeration = "virtual_variant_method_enumeration"
	// EdgeRatingEnumeration holds the string denoting the rating_enumeration edge name in mutations.
	EdgeRatingEnumeration = "rating_enumeration"
	// EdgeRequirementMethodEnumeration holds the string denoting the requirement_method_enumeration edge name in mutations.
	EdgeRequirementMethodEnumeration = "requirement_method_enumeration"
	// EdgeInventoryItemType holds the string denoting the inventory_item_type edge name in mutations.
	EdgeInventoryItemType = "inventory_item_type"
	// EdgeOrderItems holds the string denoting the order_items edge name in mutations.
	EdgeOrderItems = "order_items"
	// EdgeMainProductAssocs holds the string denoting the main_product_assocs edge name in mutations.
	EdgeMainProductAssocs = "main_product_assocs"
	// EdgeAssocProductAssocs holds the string denoting the assoc_product_assocs edge name in mutations.
	EdgeAssocProductAssocs = "assoc_product_assocs"
	// EdgeProductPrices holds the string denoting the product_prices edge name in mutations.
	EdgeProductPrices = "product_prices"
	// EdgeProductReviews holds the string denoting the product_reviews edge name in mutations.
	EdgeProductReviews = "product_reviews"
	// Table holds the table name of the product in the database.
	Table = "products"
	// ProductTypeTable is the table the holds the product_type relation/edge.
	ProductTypeTable = "products"
	// ProductTypeInverseTable is the table name for the ProductType entity.
	// It exists in this package in order to avoid circular dependency with the "producttype" package.
	ProductTypeInverseTable = "product_types"
	// ProductTypeColumn is the table column denoting the product_type relation/edge.
	ProductTypeColumn = "product_type_products"
	// PrimaryProductCategoryTable is the table the holds the primary_product_category relation/edge.
	PrimaryProductCategoryTable = "products"
	// PrimaryProductCategoryInverseTable is the table name for the ProductCategory entity.
	// It exists in this package in order to avoid circular dependency with the "productcategory" package.
	PrimaryProductCategoryInverseTable = "product_categories"
	// PrimaryProductCategoryColumn is the table column denoting the primary_product_category relation/edge.
	PrimaryProductCategoryColumn = "product_category_primary_products"
	// VirtualVariantMethodEnumerationTable is the table the holds the virtual_variant_method_enumeration relation/edge.
	VirtualVariantMethodEnumerationTable = "products"
	// VirtualVariantMethodEnumerationInverseTable is the table name for the Enumeration entity.
	// It exists in this package in order to avoid circular dependency with the "enumeration" package.
	VirtualVariantMethodEnumerationInverseTable = "enumerations"
	// VirtualVariantMethodEnumerationColumn is the table column denoting the virtual_variant_method_enumeration relation/edge.
	VirtualVariantMethodEnumerationColumn = "enumeration_virtual_variant_method_products"
	// RatingEnumerationTable is the table the holds the rating_enumeration relation/edge.
	RatingEnumerationTable = "products"
	// RatingEnumerationInverseTable is the table name for the Enumeration entity.
	// It exists in this package in order to avoid circular dependency with the "enumeration" package.
	RatingEnumerationInverseTable = "enumerations"
	// RatingEnumerationColumn is the table column denoting the rating_enumeration relation/edge.
	RatingEnumerationColumn = "enumeration_rating_products"
	// RequirementMethodEnumerationTable is the table the holds the requirement_method_enumeration relation/edge.
	RequirementMethodEnumerationTable = "products"
	// RequirementMethodEnumerationInverseTable is the table name for the Enumeration entity.
	// It exists in this package in order to avoid circular dependency with the "enumeration" package.
	RequirementMethodEnumerationInverseTable = "enumerations"
	// RequirementMethodEnumerationColumn is the table column denoting the requirement_method_enumeration relation/edge.
	RequirementMethodEnumerationColumn = "enumeration_requirement_method_products"
	// InventoryItemTypeTable is the table the holds the inventory_item_type relation/edge.
	InventoryItemTypeTable = "products"
	// InventoryItemTypeInverseTable is the table name for the InventoryItemType entity.
	// It exists in this package in order to avoid circular dependency with the "inventoryitemtype" package.
	InventoryItemTypeInverseTable = "inventory_item_types"
	// InventoryItemTypeColumn is the table column denoting the inventory_item_type relation/edge.
	InventoryItemTypeColumn = "inventory_item_type_products"
	// OrderItemsTable is the table the holds the order_items relation/edge.
	OrderItemsTable = "order_items"
	// OrderItemsInverseTable is the table name for the OrderItem entity.
	// It exists in this package in order to avoid circular dependency with the "orderitem" package.
	OrderItemsInverseTable = "order_items"
	// OrderItemsColumn is the table column denoting the order_items relation/edge.
	OrderItemsColumn = "product_order_items"
	// MainProductAssocsTable is the table the holds the main_product_assocs relation/edge.
	MainProductAssocsTable = "product_assocs"
	// MainProductAssocsInverseTable is the table name for the ProductAssoc entity.
	// It exists in this package in order to avoid circular dependency with the "productassoc" package.
	MainProductAssocsInverseTable = "product_assocs"
	// MainProductAssocsColumn is the table column denoting the main_product_assocs relation/edge.
	MainProductAssocsColumn = "product_main_product_assocs"
	// AssocProductAssocsTable is the table the holds the assoc_product_assocs relation/edge.
	AssocProductAssocsTable = "product_assocs"
	// AssocProductAssocsInverseTable is the table name for the ProductAssoc entity.
	// It exists in this package in order to avoid circular dependency with the "productassoc" package.
	AssocProductAssocsInverseTable = "product_assocs"
	// AssocProductAssocsColumn is the table column denoting the assoc_product_assocs relation/edge.
	AssocProductAssocsColumn = "product_assoc_product_assocs"
	// ProductPricesTable is the table the holds the product_prices relation/edge.
	ProductPricesTable = "product_prices"
	// ProductPricesInverseTable is the table name for the ProductPrice entity.
	// It exists in this package in order to avoid circular dependency with the "productprice" package.
	ProductPricesInverseTable = "product_prices"
	// ProductPricesColumn is the table column denoting the product_prices relation/edge.
	ProductPricesColumn = "product_product_prices"
	// ProductReviewsTable is the table the holds the product_reviews relation/edge.
	ProductReviewsTable = "product_reviews"
	// ProductReviewsInverseTable is the table name for the ProductReview entity.
	// It exists in this package in order to avoid circular dependency with the "productreview" package.
	ProductReviewsInverseTable = "product_reviews"
	// ProductReviewsColumn is the table column denoting the product_reviews relation/edge.
	ProductReviewsColumn = "product_product_reviews"
)

// Columns holds all SQL columns for product fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldStringRef,
	FieldFacilityID,
	FieldIntroductionDate,
	FieldReleaseDate,
	FieldSupportDiscontinuationDate,
	FieldSalesDiscontinuationDate,
	FieldSalesDiscWhenNotAvail,
	FieldInternalName,
	FieldBrandName,
	FieldComments,
	FieldProductName,
	FieldDescription,
	FieldLongDescription,
	FieldPriceDetailText,
	FieldSmallImageURL,
	FieldMediumImageURL,
	FieldLargeImageURL,
	FieldDetailImageURL,
	FieldOriginalImageURL,
	FieldDetailScreen,
	FieldInventoryMessage,
	FieldRequireInventory,
	FieldQuantityUomID,
	FieldQuantityIncluded,
	FieldPiecesIncluded,
	FieldRequireAmount,
	FieldFixedAmount,
	FieldAmountUomTypeID,
	FieldWeightUomID,
	FieldShippingWeight,
	FieldProductWeight,
	FieldHeightUomID,
	FieldProductHeight,
	FieldShippingHeight,
	FieldWidthUomID,
	FieldProductWidth,
	FieldShippingWidth,
	FieldDepthUomID,
	FieldProductDepth,
	FieldShippingDepth,
	FieldDiameterUomID,
	FieldProductDiameter,
	FieldProductRating,
	FieldReturnable,
	FieldTaxable,
	FieldChargeShipping,
	FieldAutoCreateKeywords,
	FieldIncludeInPromotions,
	FieldIsVirtual,
	FieldIsVariant,
	FieldOriginGeoID,
	FieldBillOfMaterialLevel,
	FieldReservMaxPersons,
	FieldReserv2NdPpPerc,
	FieldReservNthPpPerc,
	FieldConfigID,
	FieldCreatedDate,
	FieldCreatedByUserLogin,
	FieldLastModifiedDate,
	FieldLastModifiedByUserLogin,
	FieldInShippingBox,
	FieldDefaultShipmentBoxTypeID,
	FieldLotIDFilledIn,
	FieldOrderDecimalQuantity,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "products"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"enumeration_virtual_variant_method_products",
	"enumeration_rating_products",
	"enumeration_requirement_method_products",
	"inventory_item_type_products",
	"product_category_primary_products",
	"product_type_products",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// DefaultIntroductionDate holds the default value on creation for the "introduction_date" field.
	DefaultIntroductionDate func() time.Time
	// DefaultReleaseDate holds the default value on creation for the "release_date" field.
	DefaultReleaseDate func() time.Time
	// DefaultSupportDiscontinuationDate holds the default value on creation for the "support_discontinuation_date" field.
	DefaultSupportDiscontinuationDate func() time.Time
	// DefaultSalesDiscontinuationDate holds the default value on creation for the "sales_discontinuation_date" field.
	DefaultSalesDiscontinuationDate func() time.Time
	// DefaultCreatedDate holds the default value on creation for the "created_date" field.
	DefaultCreatedDate func() time.Time
	// DefaultLastModifiedDate holds the default value on creation for the "last_modified_date" field.
	DefaultLastModifiedDate func() time.Time
)

// SalesDiscWhenNotAvail defines the type for the "sales_disc_when_not_avail" enum field.
type SalesDiscWhenNotAvail string

// SalesDiscWhenNotAvail values.
const (
	SalesDiscWhenNotAvailYes     SalesDiscWhenNotAvail = "Yes"
	SalesDiscWhenNotAvailNo      SalesDiscWhenNotAvail = "No"
	SalesDiscWhenNotAvailUnknown SalesDiscWhenNotAvail = "Unknown"
)

func (sdwna SalesDiscWhenNotAvail) String() string {
	return string(sdwna)
}

// SalesDiscWhenNotAvailValidator is a validator for the "sales_disc_when_not_avail" field enum values. It is called by the builders before save.
func SalesDiscWhenNotAvailValidator(sdwna SalesDiscWhenNotAvail) error {
	switch sdwna {
	case SalesDiscWhenNotAvailYes, SalesDiscWhenNotAvailNo, SalesDiscWhenNotAvailUnknown:
		return nil
	default:
		return fmt.Errorf("product: invalid enum value for sales_disc_when_not_avail field: %q", sdwna)
	}
}

// RequireInventory defines the type for the "require_inventory" enum field.
type RequireInventory string

// RequireInventory values.
const (
	RequireInventoryYes     RequireInventory = "Yes"
	RequireInventoryNo      RequireInventory = "No"
	RequireInventoryUnknown RequireInventory = "Unknown"
)

func (ri RequireInventory) String() string {
	return string(ri)
}

// RequireInventoryValidator is a validator for the "require_inventory" field enum values. It is called by the builders before save.
func RequireInventoryValidator(ri RequireInventory) error {
	switch ri {
	case RequireInventoryYes, RequireInventoryNo, RequireInventoryUnknown:
		return nil
	default:
		return fmt.Errorf("product: invalid enum value for require_inventory field: %q", ri)
	}
}

// RequireAmount defines the type for the "require_amount" enum field.
type RequireAmount string

// RequireAmount values.
const (
	RequireAmountYes     RequireAmount = "Yes"
	RequireAmountNo      RequireAmount = "No"
	RequireAmountUnknown RequireAmount = "Unknown"
)

func (ra RequireAmount) String() string {
	return string(ra)
}

// RequireAmountValidator is a validator for the "require_amount" field enum values. It is called by the builders before save.
func RequireAmountValidator(ra RequireAmount) error {
	switch ra {
	case RequireAmountYes, RequireAmountNo, RequireAmountUnknown:
		return nil
	default:
		return fmt.Errorf("product: invalid enum value for require_amount field: %q", ra)
	}
}

// Returnable defines the type for the "returnable" enum field.
type Returnable string

// Returnable values.
const (
	ReturnableYes     Returnable = "Yes"
	ReturnableNo      Returnable = "No"
	ReturnableUnknown Returnable = "Unknown"
)

func (r Returnable) String() string {
	return string(r)
}

// ReturnableValidator is a validator for the "returnable" field enum values. It is called by the builders before save.
func ReturnableValidator(r Returnable) error {
	switch r {
	case ReturnableYes, ReturnableNo, ReturnableUnknown:
		return nil
	default:
		return fmt.Errorf("product: invalid enum value for returnable field: %q", r)
	}
}

// Taxable defines the type for the "taxable" enum field.
type Taxable string

// Taxable values.
const (
	TaxableYes     Taxable = "Yes"
	TaxableNo      Taxable = "No"
	TaxableUnknown Taxable = "Unknown"
)

func (t Taxable) String() string {
	return string(t)
}

// TaxableValidator is a validator for the "taxable" field enum values. It is called by the builders before save.
func TaxableValidator(t Taxable) error {
	switch t {
	case TaxableYes, TaxableNo, TaxableUnknown:
		return nil
	default:
		return fmt.Errorf("product: invalid enum value for taxable field: %q", t)
	}
}

// ChargeShipping defines the type for the "charge_shipping" enum field.
type ChargeShipping string

// ChargeShipping values.
const (
	ChargeShippingYes     ChargeShipping = "Yes"
	ChargeShippingNo      ChargeShipping = "No"
	ChargeShippingUnknown ChargeShipping = "Unknown"
)

func (cs ChargeShipping) String() string {
	return string(cs)
}

// ChargeShippingValidator is a validator for the "charge_shipping" field enum values. It is called by the builders before save.
func ChargeShippingValidator(cs ChargeShipping) error {
	switch cs {
	case ChargeShippingYes, ChargeShippingNo, ChargeShippingUnknown:
		return nil
	default:
		return fmt.Errorf("product: invalid enum value for charge_shipping field: %q", cs)
	}
}

// AutoCreateKeywords defines the type for the "auto_create_keywords" enum field.
type AutoCreateKeywords string

// AutoCreateKeywords values.
const (
	AutoCreateKeywordsYes     AutoCreateKeywords = "Yes"
	AutoCreateKeywordsNo      AutoCreateKeywords = "No"
	AutoCreateKeywordsUnknown AutoCreateKeywords = "Unknown"
)

func (ack AutoCreateKeywords) String() string {
	return string(ack)
}

// AutoCreateKeywordsValidator is a validator for the "auto_create_keywords" field enum values. It is called by the builders before save.
func AutoCreateKeywordsValidator(ack AutoCreateKeywords) error {
	switch ack {
	case AutoCreateKeywordsYes, AutoCreateKeywordsNo, AutoCreateKeywordsUnknown:
		return nil
	default:
		return fmt.Errorf("product: invalid enum value for auto_create_keywords field: %q", ack)
	}
}

// IncludeInPromotions defines the type for the "include_in_promotions" enum field.
type IncludeInPromotions string

// IncludeInPromotions values.
const (
	IncludeInPromotionsYes     IncludeInPromotions = "Yes"
	IncludeInPromotionsNo      IncludeInPromotions = "No"
	IncludeInPromotionsUnknown IncludeInPromotions = "Unknown"
)

func (iip IncludeInPromotions) String() string {
	return string(iip)
}

// IncludeInPromotionsValidator is a validator for the "include_in_promotions" field enum values. It is called by the builders before save.
func IncludeInPromotionsValidator(iip IncludeInPromotions) error {
	switch iip {
	case IncludeInPromotionsYes, IncludeInPromotionsNo, IncludeInPromotionsUnknown:
		return nil
	default:
		return fmt.Errorf("product: invalid enum value for include_in_promotions field: %q", iip)
	}
}

// IsVirtual defines the type for the "is_virtual" enum field.
type IsVirtual string

// IsVirtual values.
const (
	IsVirtualYes     IsVirtual = "Yes"
	IsVirtualNo      IsVirtual = "No"
	IsVirtualUnknown IsVirtual = "Unknown"
)

func (iv IsVirtual) String() string {
	return string(iv)
}

// IsVirtualValidator is a validator for the "is_virtual" field enum values. It is called by the builders before save.
func IsVirtualValidator(iv IsVirtual) error {
	switch iv {
	case IsVirtualYes, IsVirtualNo, IsVirtualUnknown:
		return nil
	default:
		return fmt.Errorf("product: invalid enum value for is_virtual field: %q", iv)
	}
}

// IsVariant defines the type for the "is_variant" enum field.
type IsVariant string

// IsVariant values.
const (
	IsVariantYes     IsVariant = "Yes"
	IsVariantNo      IsVariant = "No"
	IsVariantUnknown IsVariant = "Unknown"
)

func (iv IsVariant) String() string {
	return string(iv)
}

// IsVariantValidator is a validator for the "is_variant" field enum values. It is called by the builders before save.
func IsVariantValidator(iv IsVariant) error {
	switch iv {
	case IsVariantYes, IsVariantNo, IsVariantUnknown:
		return nil
	default:
		return fmt.Errorf("product: invalid enum value for is_variant field: %q", iv)
	}
}

// InShippingBox defines the type for the "in_shipping_box" enum field.
type InShippingBox string

// InShippingBox values.
const (
	InShippingBoxYes     InShippingBox = "Yes"
	InShippingBoxNo      InShippingBox = "No"
	InShippingBoxUnknown InShippingBox = "Unknown"
)

func (isb InShippingBox) String() string {
	return string(isb)
}

// InShippingBoxValidator is a validator for the "in_shipping_box" field enum values. It is called by the builders before save.
func InShippingBoxValidator(isb InShippingBox) error {
	switch isb {
	case InShippingBoxYes, InShippingBoxNo, InShippingBoxUnknown:
		return nil
	default:
		return fmt.Errorf("product: invalid enum value for in_shipping_box field: %q", isb)
	}
}

// OrderDecimalQuantity defines the type for the "order_decimal_quantity" enum field.
type OrderDecimalQuantity string

// OrderDecimalQuantity values.
const (
	OrderDecimalQuantityYes     OrderDecimalQuantity = "Yes"
	OrderDecimalQuantityNo      OrderDecimalQuantity = "No"
	OrderDecimalQuantityUnknown OrderDecimalQuantity = "Unknown"
)

func (odq OrderDecimalQuantity) String() string {
	return string(odq)
}

// OrderDecimalQuantityValidator is a validator for the "order_decimal_quantity" field enum values. It is called by the builders before save.
func OrderDecimalQuantityValidator(odq OrderDecimalQuantity) error {
	switch odq {
	case OrderDecimalQuantityYes, OrderDecimalQuantityNo, OrderDecimalQuantityUnknown:
		return nil
	default:
		return fmt.Errorf("product: invalid enum value for order_decimal_quantity field: %q", odq)
	}
}
