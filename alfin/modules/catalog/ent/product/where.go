// Code generated by entc, DO NOT EDIT.

package product

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// StringRef applies equality check predicate on the "string_ref" field. It's identical to StringRefEQ.
func StringRef(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStringRef), v))
	})
}

// FacilityID applies equality check predicate on the "facility_id" field. It's identical to FacilityIDEQ.
func FacilityID(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFacilityID), v))
	})
}

// IntroductionDate applies equality check predicate on the "introduction_date" field. It's identical to IntroductionDateEQ.
func IntroductionDate(v time.Time) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIntroductionDate), v))
	})
}

// ReleaseDate applies equality check predicate on the "release_date" field. It's identical to ReleaseDateEQ.
func ReleaseDate(v time.Time) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReleaseDate), v))
	})
}

// SupportDiscontinuationDate applies equality check predicate on the "support_discontinuation_date" field. It's identical to SupportDiscontinuationDateEQ.
func SupportDiscontinuationDate(v time.Time) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSupportDiscontinuationDate), v))
	})
}

// SalesDiscontinuationDate applies equality check predicate on the "sales_discontinuation_date" field. It's identical to SalesDiscontinuationDateEQ.
func SalesDiscontinuationDate(v time.Time) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSalesDiscontinuationDate), v))
	})
}

// InternalName applies equality check predicate on the "internal_name" field. It's identical to InternalNameEQ.
func InternalName(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInternalName), v))
	})
}

// BrandName applies equality check predicate on the "brand_name" field. It's identical to BrandNameEQ.
func BrandName(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBrandName), v))
	})
}

// Comments applies equality check predicate on the "comments" field. It's identical to CommentsEQ.
func Comments(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldComments), v))
	})
}

// ProductName applies equality check predicate on the "product_name" field. It's identical to ProductNameEQ.
func ProductName(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProductName), v))
	})
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// LongDescription applies equality check predicate on the "long_description" field. It's identical to LongDescriptionEQ.
func LongDescription(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLongDescription), v))
	})
}

// PriceDetailText applies equality check predicate on the "price_detail_text" field. It's identical to PriceDetailTextEQ.
func PriceDetailText(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPriceDetailText), v))
	})
}

// SmallImageURL applies equality check predicate on the "small_image_url" field. It's identical to SmallImageURLEQ.
func SmallImageURL(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSmallImageURL), v))
	})
}

// MediumImageURL applies equality check predicate on the "medium_image_url" field. It's identical to MediumImageURLEQ.
func MediumImageURL(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMediumImageURL), v))
	})
}

// LargeImageURL applies equality check predicate on the "large_image_url" field. It's identical to LargeImageURLEQ.
func LargeImageURL(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLargeImageURL), v))
	})
}

// DetailImageURL applies equality check predicate on the "detail_image_url" field. It's identical to DetailImageURLEQ.
func DetailImageURL(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDetailImageURL), v))
	})
}

// OriginalImageURL applies equality check predicate on the "original_image_url" field. It's identical to OriginalImageURLEQ.
func OriginalImageURL(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOriginalImageURL), v))
	})
}

// DetailScreen applies equality check predicate on the "detail_screen" field. It's identical to DetailScreenEQ.
func DetailScreen(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDetailScreen), v))
	})
}

// InventoryMessage applies equality check predicate on the "inventory_message" field. It's identical to InventoryMessageEQ.
func InventoryMessage(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInventoryMessage), v))
	})
}

// QuantityUomID applies equality check predicate on the "quantity_uom_id" field. It's identical to QuantityUomIDEQ.
func QuantityUomID(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQuantityUomID), v))
	})
}

// QuantityIncluded applies equality check predicate on the "quantity_included" field. It's identical to QuantityIncludedEQ.
func QuantityIncluded(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQuantityIncluded), v))
	})
}

// PiecesIncluded applies equality check predicate on the "pieces_included" field. It's identical to PiecesIncludedEQ.
func PiecesIncluded(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPiecesIncluded), v))
	})
}

// FixedAmount applies equality check predicate on the "fixed_amount" field. It's identical to FixedAmountEQ.
func FixedAmount(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFixedAmount), v))
	})
}

// AmountUomTypeID applies equality check predicate on the "amount_uom_type_id" field. It's identical to AmountUomTypeIDEQ.
func AmountUomTypeID(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAmountUomTypeID), v))
	})
}

// WeightUomID applies equality check predicate on the "weight_uom_id" field. It's identical to WeightUomIDEQ.
func WeightUomID(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWeightUomID), v))
	})
}

// ShippingWeight applies equality check predicate on the "shipping_weight" field. It's identical to ShippingWeightEQ.
func ShippingWeight(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShippingWeight), v))
	})
}

// ProductWeight applies equality check predicate on the "product_weight" field. It's identical to ProductWeightEQ.
func ProductWeight(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProductWeight), v))
	})
}

// HeightUomID applies equality check predicate on the "height_uom_id" field. It's identical to HeightUomIDEQ.
func HeightUomID(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHeightUomID), v))
	})
}

// ProductHeight applies equality check predicate on the "product_height" field. It's identical to ProductHeightEQ.
func ProductHeight(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProductHeight), v))
	})
}

// ShippingHeight applies equality check predicate on the "shipping_height" field. It's identical to ShippingHeightEQ.
func ShippingHeight(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShippingHeight), v))
	})
}

// WidthUomID applies equality check predicate on the "width_uom_id" field. It's identical to WidthUomIDEQ.
func WidthUomID(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWidthUomID), v))
	})
}

// ProductWidth applies equality check predicate on the "product_width" field. It's identical to ProductWidthEQ.
func ProductWidth(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProductWidth), v))
	})
}

// ShippingWidth applies equality check predicate on the "shipping_width" field. It's identical to ShippingWidthEQ.
func ShippingWidth(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShippingWidth), v))
	})
}

// DepthUomID applies equality check predicate on the "depth_uom_id" field. It's identical to DepthUomIDEQ.
func DepthUomID(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDepthUomID), v))
	})
}

// ProductDepth applies equality check predicate on the "product_depth" field. It's identical to ProductDepthEQ.
func ProductDepth(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProductDepth), v))
	})
}

// ShippingDepth applies equality check predicate on the "shipping_depth" field. It's identical to ShippingDepthEQ.
func ShippingDepth(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShippingDepth), v))
	})
}

// DiameterUomID applies equality check predicate on the "diameter_uom_id" field. It's identical to DiameterUomIDEQ.
func DiameterUomID(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDiameterUomID), v))
	})
}

// ProductDiameter applies equality check predicate on the "product_diameter" field. It's identical to ProductDiameterEQ.
func ProductDiameter(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProductDiameter), v))
	})
}

// ProductRating applies equality check predicate on the "product_rating" field. It's identical to ProductRatingEQ.
func ProductRating(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProductRating), v))
	})
}

// OriginGeoID applies equality check predicate on the "origin_geo_id" field. It's identical to OriginGeoIDEQ.
func OriginGeoID(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOriginGeoID), v))
	})
}

// BillOfMaterialLevel applies equality check predicate on the "bill_of_material_level" field. It's identical to BillOfMaterialLevelEQ.
func BillOfMaterialLevel(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBillOfMaterialLevel), v))
	})
}

// ReservMaxPersons applies equality check predicate on the "reserv_max_persons" field. It's identical to ReservMaxPersonsEQ.
func ReservMaxPersons(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReservMaxPersons), v))
	})
}

// Reserv2NdPpPerc applies equality check predicate on the "reserv_2_nd_pp_perc" field. It's identical to Reserv2NdPpPercEQ.
func Reserv2NdPpPerc(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReserv2NdPpPerc), v))
	})
}

// ReservNthPpPerc applies equality check predicate on the "reserv_nth_pp_perc" field. It's identical to ReservNthPpPercEQ.
func ReservNthPpPerc(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReservNthPpPerc), v))
	})
}

// ConfigID applies equality check predicate on the "config_id" field. It's identical to ConfigIDEQ.
func ConfigID(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldConfigID), v))
	})
}

// CreatedDate applies equality check predicate on the "created_date" field. It's identical to CreatedDateEQ.
func CreatedDate(v time.Time) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedDate), v))
	})
}

// CreatedByUserLogin applies equality check predicate on the "created_by_user_login" field. It's identical to CreatedByUserLoginEQ.
func CreatedByUserLogin(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedByUserLogin), v))
	})
}

// LastModifiedDate applies equality check predicate on the "last_modified_date" field. It's identical to LastModifiedDateEQ.
func LastModifiedDate(v time.Time) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastModifiedDate), v))
	})
}

// LastModifiedByUserLogin applies equality check predicate on the "last_modified_by_user_login" field. It's identical to LastModifiedByUserLoginEQ.
func LastModifiedByUserLogin(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastModifiedByUserLogin), v))
	})
}

// DefaultShipmentBoxTypeID applies equality check predicate on the "default_shipment_box_type_id" field. It's identical to DefaultShipmentBoxTypeIDEQ.
func DefaultShipmentBoxTypeID(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDefaultShipmentBoxTypeID), v))
	})
}

// LotIDFilledIn applies equality check predicate on the "lot_id_filled_in" field. It's identical to LotIDFilledInEQ.
func LotIDFilledIn(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLotIDFilledIn), v))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), v))
	})
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateTime), v))
	})
}

// StringRefEQ applies the EQ predicate on the "string_ref" field.
func StringRefEQ(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStringRef), v))
	})
}

// StringRefNEQ applies the NEQ predicate on the "string_ref" field.
func StringRefNEQ(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStringRef), v))
	})
}

// StringRefIn applies the In predicate on the "string_ref" field.
func StringRefIn(vs ...string) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStringRef), v...))
	})
}

// StringRefNotIn applies the NotIn predicate on the "string_ref" field.
func StringRefNotIn(vs ...string) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStringRef), v...))
	})
}

// StringRefGT applies the GT predicate on the "string_ref" field.
func StringRefGT(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStringRef), v))
	})
}

// StringRefGTE applies the GTE predicate on the "string_ref" field.
func StringRefGTE(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStringRef), v))
	})
}

// StringRefLT applies the LT predicate on the "string_ref" field.
func StringRefLT(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStringRef), v))
	})
}

// StringRefLTE applies the LTE predicate on the "string_ref" field.
func StringRefLTE(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStringRef), v))
	})
}

// StringRefContains applies the Contains predicate on the "string_ref" field.
func StringRefContains(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStringRef), v))
	})
}

// StringRefHasPrefix applies the HasPrefix predicate on the "string_ref" field.
func StringRefHasPrefix(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStringRef), v))
	})
}

// StringRefHasSuffix applies the HasSuffix predicate on the "string_ref" field.
func StringRefHasSuffix(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStringRef), v))
	})
}

// StringRefIsNil applies the IsNil predicate on the "string_ref" field.
func StringRefIsNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStringRef)))
	})
}

// StringRefNotNil applies the NotNil predicate on the "string_ref" field.
func StringRefNotNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStringRef)))
	})
}

// StringRefEqualFold applies the EqualFold predicate on the "string_ref" field.
func StringRefEqualFold(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStringRef), v))
	})
}

// StringRefContainsFold applies the ContainsFold predicate on the "string_ref" field.
func StringRefContainsFold(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStringRef), v))
	})
}

// FacilityIDEQ applies the EQ predicate on the "facility_id" field.
func FacilityIDEQ(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFacilityID), v))
	})
}

// FacilityIDNEQ applies the NEQ predicate on the "facility_id" field.
func FacilityIDNEQ(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFacilityID), v))
	})
}

// FacilityIDIn applies the In predicate on the "facility_id" field.
func FacilityIDIn(vs ...int) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFacilityID), v...))
	})
}

// FacilityIDNotIn applies the NotIn predicate on the "facility_id" field.
func FacilityIDNotIn(vs ...int) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFacilityID), v...))
	})
}

// FacilityIDGT applies the GT predicate on the "facility_id" field.
func FacilityIDGT(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFacilityID), v))
	})
}

// FacilityIDGTE applies the GTE predicate on the "facility_id" field.
func FacilityIDGTE(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFacilityID), v))
	})
}

// FacilityIDLT applies the LT predicate on the "facility_id" field.
func FacilityIDLT(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFacilityID), v))
	})
}

// FacilityIDLTE applies the LTE predicate on the "facility_id" field.
func FacilityIDLTE(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFacilityID), v))
	})
}

// FacilityIDIsNil applies the IsNil predicate on the "facility_id" field.
func FacilityIDIsNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFacilityID)))
	})
}

// FacilityIDNotNil applies the NotNil predicate on the "facility_id" field.
func FacilityIDNotNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFacilityID)))
	})
}

// IntroductionDateEQ applies the EQ predicate on the "introduction_date" field.
func IntroductionDateEQ(v time.Time) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIntroductionDate), v))
	})
}

// IntroductionDateNEQ applies the NEQ predicate on the "introduction_date" field.
func IntroductionDateNEQ(v time.Time) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIntroductionDate), v))
	})
}

// IntroductionDateIn applies the In predicate on the "introduction_date" field.
func IntroductionDateIn(vs ...time.Time) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIntroductionDate), v...))
	})
}

// IntroductionDateNotIn applies the NotIn predicate on the "introduction_date" field.
func IntroductionDateNotIn(vs ...time.Time) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIntroductionDate), v...))
	})
}

// IntroductionDateGT applies the GT predicate on the "introduction_date" field.
func IntroductionDateGT(v time.Time) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIntroductionDate), v))
	})
}

// IntroductionDateGTE applies the GTE predicate on the "introduction_date" field.
func IntroductionDateGTE(v time.Time) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIntroductionDate), v))
	})
}

// IntroductionDateLT applies the LT predicate on the "introduction_date" field.
func IntroductionDateLT(v time.Time) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIntroductionDate), v))
	})
}

// IntroductionDateLTE applies the LTE predicate on the "introduction_date" field.
func IntroductionDateLTE(v time.Time) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIntroductionDate), v))
	})
}

// IntroductionDateIsNil applies the IsNil predicate on the "introduction_date" field.
func IntroductionDateIsNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldIntroductionDate)))
	})
}

// IntroductionDateNotNil applies the NotNil predicate on the "introduction_date" field.
func IntroductionDateNotNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldIntroductionDate)))
	})
}

// ReleaseDateEQ applies the EQ predicate on the "release_date" field.
func ReleaseDateEQ(v time.Time) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReleaseDate), v))
	})
}

// ReleaseDateNEQ applies the NEQ predicate on the "release_date" field.
func ReleaseDateNEQ(v time.Time) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReleaseDate), v))
	})
}

// ReleaseDateIn applies the In predicate on the "release_date" field.
func ReleaseDateIn(vs ...time.Time) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldReleaseDate), v...))
	})
}

// ReleaseDateNotIn applies the NotIn predicate on the "release_date" field.
func ReleaseDateNotIn(vs ...time.Time) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldReleaseDate), v...))
	})
}

// ReleaseDateGT applies the GT predicate on the "release_date" field.
func ReleaseDateGT(v time.Time) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldReleaseDate), v))
	})
}

// ReleaseDateGTE applies the GTE predicate on the "release_date" field.
func ReleaseDateGTE(v time.Time) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldReleaseDate), v))
	})
}

// ReleaseDateLT applies the LT predicate on the "release_date" field.
func ReleaseDateLT(v time.Time) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldReleaseDate), v))
	})
}

// ReleaseDateLTE applies the LTE predicate on the "release_date" field.
func ReleaseDateLTE(v time.Time) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldReleaseDate), v))
	})
}

// ReleaseDateIsNil applies the IsNil predicate on the "release_date" field.
func ReleaseDateIsNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldReleaseDate)))
	})
}

// ReleaseDateNotNil applies the NotNil predicate on the "release_date" field.
func ReleaseDateNotNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldReleaseDate)))
	})
}

// SupportDiscontinuationDateEQ applies the EQ predicate on the "support_discontinuation_date" field.
func SupportDiscontinuationDateEQ(v time.Time) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSupportDiscontinuationDate), v))
	})
}

// SupportDiscontinuationDateNEQ applies the NEQ predicate on the "support_discontinuation_date" field.
func SupportDiscontinuationDateNEQ(v time.Time) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSupportDiscontinuationDate), v))
	})
}

// SupportDiscontinuationDateIn applies the In predicate on the "support_discontinuation_date" field.
func SupportDiscontinuationDateIn(vs ...time.Time) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSupportDiscontinuationDate), v...))
	})
}

// SupportDiscontinuationDateNotIn applies the NotIn predicate on the "support_discontinuation_date" field.
func SupportDiscontinuationDateNotIn(vs ...time.Time) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSupportDiscontinuationDate), v...))
	})
}

// SupportDiscontinuationDateGT applies the GT predicate on the "support_discontinuation_date" field.
func SupportDiscontinuationDateGT(v time.Time) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSupportDiscontinuationDate), v))
	})
}

// SupportDiscontinuationDateGTE applies the GTE predicate on the "support_discontinuation_date" field.
func SupportDiscontinuationDateGTE(v time.Time) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSupportDiscontinuationDate), v))
	})
}

// SupportDiscontinuationDateLT applies the LT predicate on the "support_discontinuation_date" field.
func SupportDiscontinuationDateLT(v time.Time) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSupportDiscontinuationDate), v))
	})
}

// SupportDiscontinuationDateLTE applies the LTE predicate on the "support_discontinuation_date" field.
func SupportDiscontinuationDateLTE(v time.Time) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSupportDiscontinuationDate), v))
	})
}

// SupportDiscontinuationDateIsNil applies the IsNil predicate on the "support_discontinuation_date" field.
func SupportDiscontinuationDateIsNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSupportDiscontinuationDate)))
	})
}

// SupportDiscontinuationDateNotNil applies the NotNil predicate on the "support_discontinuation_date" field.
func SupportDiscontinuationDateNotNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSupportDiscontinuationDate)))
	})
}

// SalesDiscontinuationDateEQ applies the EQ predicate on the "sales_discontinuation_date" field.
func SalesDiscontinuationDateEQ(v time.Time) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSalesDiscontinuationDate), v))
	})
}

// SalesDiscontinuationDateNEQ applies the NEQ predicate on the "sales_discontinuation_date" field.
func SalesDiscontinuationDateNEQ(v time.Time) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSalesDiscontinuationDate), v))
	})
}

// SalesDiscontinuationDateIn applies the In predicate on the "sales_discontinuation_date" field.
func SalesDiscontinuationDateIn(vs ...time.Time) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSalesDiscontinuationDate), v...))
	})
}

// SalesDiscontinuationDateNotIn applies the NotIn predicate on the "sales_discontinuation_date" field.
func SalesDiscontinuationDateNotIn(vs ...time.Time) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSalesDiscontinuationDate), v...))
	})
}

// SalesDiscontinuationDateGT applies the GT predicate on the "sales_discontinuation_date" field.
func SalesDiscontinuationDateGT(v time.Time) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSalesDiscontinuationDate), v))
	})
}

// SalesDiscontinuationDateGTE applies the GTE predicate on the "sales_discontinuation_date" field.
func SalesDiscontinuationDateGTE(v time.Time) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSalesDiscontinuationDate), v))
	})
}

// SalesDiscontinuationDateLT applies the LT predicate on the "sales_discontinuation_date" field.
func SalesDiscontinuationDateLT(v time.Time) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSalesDiscontinuationDate), v))
	})
}

// SalesDiscontinuationDateLTE applies the LTE predicate on the "sales_discontinuation_date" field.
func SalesDiscontinuationDateLTE(v time.Time) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSalesDiscontinuationDate), v))
	})
}

// SalesDiscontinuationDateIsNil applies the IsNil predicate on the "sales_discontinuation_date" field.
func SalesDiscontinuationDateIsNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSalesDiscontinuationDate)))
	})
}

// SalesDiscontinuationDateNotNil applies the NotNil predicate on the "sales_discontinuation_date" field.
func SalesDiscontinuationDateNotNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSalesDiscontinuationDate)))
	})
}

// SalesDiscWhenNotAvailEQ applies the EQ predicate on the "sales_disc_when_not_avail" field.
func SalesDiscWhenNotAvailEQ(v SalesDiscWhenNotAvail) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSalesDiscWhenNotAvail), v))
	})
}

// SalesDiscWhenNotAvailNEQ applies the NEQ predicate on the "sales_disc_when_not_avail" field.
func SalesDiscWhenNotAvailNEQ(v SalesDiscWhenNotAvail) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSalesDiscWhenNotAvail), v))
	})
}

// SalesDiscWhenNotAvailIn applies the In predicate on the "sales_disc_when_not_avail" field.
func SalesDiscWhenNotAvailIn(vs ...SalesDiscWhenNotAvail) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSalesDiscWhenNotAvail), v...))
	})
}

// SalesDiscWhenNotAvailNotIn applies the NotIn predicate on the "sales_disc_when_not_avail" field.
func SalesDiscWhenNotAvailNotIn(vs ...SalesDiscWhenNotAvail) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSalesDiscWhenNotAvail), v...))
	})
}

// SalesDiscWhenNotAvailIsNil applies the IsNil predicate on the "sales_disc_when_not_avail" field.
func SalesDiscWhenNotAvailIsNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSalesDiscWhenNotAvail)))
	})
}

// SalesDiscWhenNotAvailNotNil applies the NotNil predicate on the "sales_disc_when_not_avail" field.
func SalesDiscWhenNotAvailNotNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSalesDiscWhenNotAvail)))
	})
}

// InternalNameEQ applies the EQ predicate on the "internal_name" field.
func InternalNameEQ(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInternalName), v))
	})
}

// InternalNameNEQ applies the NEQ predicate on the "internal_name" field.
func InternalNameNEQ(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldInternalName), v))
	})
}

// InternalNameIn applies the In predicate on the "internal_name" field.
func InternalNameIn(vs ...string) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldInternalName), v...))
	})
}

// InternalNameNotIn applies the NotIn predicate on the "internal_name" field.
func InternalNameNotIn(vs ...string) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldInternalName), v...))
	})
}

// InternalNameGT applies the GT predicate on the "internal_name" field.
func InternalNameGT(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldInternalName), v))
	})
}

// InternalNameGTE applies the GTE predicate on the "internal_name" field.
func InternalNameGTE(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldInternalName), v))
	})
}

// InternalNameLT applies the LT predicate on the "internal_name" field.
func InternalNameLT(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldInternalName), v))
	})
}

// InternalNameLTE applies the LTE predicate on the "internal_name" field.
func InternalNameLTE(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldInternalName), v))
	})
}

// InternalNameContains applies the Contains predicate on the "internal_name" field.
func InternalNameContains(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldInternalName), v))
	})
}

// InternalNameHasPrefix applies the HasPrefix predicate on the "internal_name" field.
func InternalNameHasPrefix(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldInternalName), v))
	})
}

// InternalNameHasSuffix applies the HasSuffix predicate on the "internal_name" field.
func InternalNameHasSuffix(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldInternalName), v))
	})
}

// InternalNameIsNil applies the IsNil predicate on the "internal_name" field.
func InternalNameIsNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldInternalName)))
	})
}

// InternalNameNotNil applies the NotNil predicate on the "internal_name" field.
func InternalNameNotNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldInternalName)))
	})
}

// InternalNameEqualFold applies the EqualFold predicate on the "internal_name" field.
func InternalNameEqualFold(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldInternalName), v))
	})
}

// InternalNameContainsFold applies the ContainsFold predicate on the "internal_name" field.
func InternalNameContainsFold(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldInternalName), v))
	})
}

// BrandNameEQ applies the EQ predicate on the "brand_name" field.
func BrandNameEQ(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBrandName), v))
	})
}

// BrandNameNEQ applies the NEQ predicate on the "brand_name" field.
func BrandNameNEQ(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBrandName), v))
	})
}

// BrandNameIn applies the In predicate on the "brand_name" field.
func BrandNameIn(vs ...string) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBrandName), v...))
	})
}

// BrandNameNotIn applies the NotIn predicate on the "brand_name" field.
func BrandNameNotIn(vs ...string) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBrandName), v...))
	})
}

// BrandNameGT applies the GT predicate on the "brand_name" field.
func BrandNameGT(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBrandName), v))
	})
}

// BrandNameGTE applies the GTE predicate on the "brand_name" field.
func BrandNameGTE(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBrandName), v))
	})
}

// BrandNameLT applies the LT predicate on the "brand_name" field.
func BrandNameLT(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBrandName), v))
	})
}

// BrandNameLTE applies the LTE predicate on the "brand_name" field.
func BrandNameLTE(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBrandName), v))
	})
}

// BrandNameContains applies the Contains predicate on the "brand_name" field.
func BrandNameContains(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBrandName), v))
	})
}

// BrandNameHasPrefix applies the HasPrefix predicate on the "brand_name" field.
func BrandNameHasPrefix(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBrandName), v))
	})
}

// BrandNameHasSuffix applies the HasSuffix predicate on the "brand_name" field.
func BrandNameHasSuffix(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBrandName), v))
	})
}

// BrandNameIsNil applies the IsNil predicate on the "brand_name" field.
func BrandNameIsNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldBrandName)))
	})
}

// BrandNameNotNil applies the NotNil predicate on the "brand_name" field.
func BrandNameNotNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldBrandName)))
	})
}

// BrandNameEqualFold applies the EqualFold predicate on the "brand_name" field.
func BrandNameEqualFold(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBrandName), v))
	})
}

// BrandNameContainsFold applies the ContainsFold predicate on the "brand_name" field.
func BrandNameContainsFold(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBrandName), v))
	})
}

// CommentsEQ applies the EQ predicate on the "comments" field.
func CommentsEQ(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldComments), v))
	})
}

// CommentsNEQ applies the NEQ predicate on the "comments" field.
func CommentsNEQ(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldComments), v))
	})
}

// CommentsIn applies the In predicate on the "comments" field.
func CommentsIn(vs ...string) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldComments), v...))
	})
}

// CommentsNotIn applies the NotIn predicate on the "comments" field.
func CommentsNotIn(vs ...string) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldComments), v...))
	})
}

// CommentsGT applies the GT predicate on the "comments" field.
func CommentsGT(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldComments), v))
	})
}

// CommentsGTE applies the GTE predicate on the "comments" field.
func CommentsGTE(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldComments), v))
	})
}

// CommentsLT applies the LT predicate on the "comments" field.
func CommentsLT(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldComments), v))
	})
}

// CommentsLTE applies the LTE predicate on the "comments" field.
func CommentsLTE(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldComments), v))
	})
}

// CommentsContains applies the Contains predicate on the "comments" field.
func CommentsContains(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldComments), v))
	})
}

// CommentsHasPrefix applies the HasPrefix predicate on the "comments" field.
func CommentsHasPrefix(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldComments), v))
	})
}

// CommentsHasSuffix applies the HasSuffix predicate on the "comments" field.
func CommentsHasSuffix(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldComments), v))
	})
}

// CommentsIsNil applies the IsNil predicate on the "comments" field.
func CommentsIsNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldComments)))
	})
}

// CommentsNotNil applies the NotNil predicate on the "comments" field.
func CommentsNotNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldComments)))
	})
}

// CommentsEqualFold applies the EqualFold predicate on the "comments" field.
func CommentsEqualFold(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldComments), v))
	})
}

// CommentsContainsFold applies the ContainsFold predicate on the "comments" field.
func CommentsContainsFold(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldComments), v))
	})
}

// ProductNameEQ applies the EQ predicate on the "product_name" field.
func ProductNameEQ(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProductName), v))
	})
}

// ProductNameNEQ applies the NEQ predicate on the "product_name" field.
func ProductNameNEQ(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProductName), v))
	})
}

// ProductNameIn applies the In predicate on the "product_name" field.
func ProductNameIn(vs ...string) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldProductName), v...))
	})
}

// ProductNameNotIn applies the NotIn predicate on the "product_name" field.
func ProductNameNotIn(vs ...string) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldProductName), v...))
	})
}

// ProductNameGT applies the GT predicate on the "product_name" field.
func ProductNameGT(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProductName), v))
	})
}

// ProductNameGTE applies the GTE predicate on the "product_name" field.
func ProductNameGTE(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProductName), v))
	})
}

// ProductNameLT applies the LT predicate on the "product_name" field.
func ProductNameLT(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProductName), v))
	})
}

// ProductNameLTE applies the LTE predicate on the "product_name" field.
func ProductNameLTE(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProductName), v))
	})
}

// ProductNameContains applies the Contains predicate on the "product_name" field.
func ProductNameContains(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldProductName), v))
	})
}

// ProductNameHasPrefix applies the HasPrefix predicate on the "product_name" field.
func ProductNameHasPrefix(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldProductName), v))
	})
}

// ProductNameHasSuffix applies the HasSuffix predicate on the "product_name" field.
func ProductNameHasSuffix(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldProductName), v))
	})
}

// ProductNameIsNil applies the IsNil predicate on the "product_name" field.
func ProductNameIsNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldProductName)))
	})
}

// ProductNameNotNil applies the NotNil predicate on the "product_name" field.
func ProductNameNotNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldProductName)))
	})
}

// ProductNameEqualFold applies the EqualFold predicate on the "product_name" field.
func ProductNameEqualFold(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldProductName), v))
	})
}

// ProductNameContainsFold applies the ContainsFold predicate on the "product_name" field.
func ProductNameContainsFold(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldProductName), v))
	})
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDescription), v))
	})
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDescription), v...))
	})
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDescription), v...))
	})
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDescription), v))
	})
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDescription), v))
	})
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDescription), v))
	})
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDescription), v))
	})
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDescription), v))
	})
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDescription), v))
	})
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDescription), v))
	})
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDescription)))
	})
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDescription)))
	})
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDescription), v))
	})
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDescription), v))
	})
}

// LongDescriptionEQ applies the EQ predicate on the "long_description" field.
func LongDescriptionEQ(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLongDescription), v))
	})
}

// LongDescriptionNEQ applies the NEQ predicate on the "long_description" field.
func LongDescriptionNEQ(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLongDescription), v))
	})
}

// LongDescriptionIn applies the In predicate on the "long_description" field.
func LongDescriptionIn(vs ...string) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLongDescription), v...))
	})
}

// LongDescriptionNotIn applies the NotIn predicate on the "long_description" field.
func LongDescriptionNotIn(vs ...string) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLongDescription), v...))
	})
}

// LongDescriptionGT applies the GT predicate on the "long_description" field.
func LongDescriptionGT(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLongDescription), v))
	})
}

// LongDescriptionGTE applies the GTE predicate on the "long_description" field.
func LongDescriptionGTE(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLongDescription), v))
	})
}

// LongDescriptionLT applies the LT predicate on the "long_description" field.
func LongDescriptionLT(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLongDescription), v))
	})
}

// LongDescriptionLTE applies the LTE predicate on the "long_description" field.
func LongDescriptionLTE(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLongDescription), v))
	})
}

// LongDescriptionContains applies the Contains predicate on the "long_description" field.
func LongDescriptionContains(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLongDescription), v))
	})
}

// LongDescriptionHasPrefix applies the HasPrefix predicate on the "long_description" field.
func LongDescriptionHasPrefix(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLongDescription), v))
	})
}

// LongDescriptionHasSuffix applies the HasSuffix predicate on the "long_description" field.
func LongDescriptionHasSuffix(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLongDescription), v))
	})
}

// LongDescriptionIsNil applies the IsNil predicate on the "long_description" field.
func LongDescriptionIsNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLongDescription)))
	})
}

// LongDescriptionNotNil applies the NotNil predicate on the "long_description" field.
func LongDescriptionNotNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLongDescription)))
	})
}

// LongDescriptionEqualFold applies the EqualFold predicate on the "long_description" field.
func LongDescriptionEqualFold(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLongDescription), v))
	})
}

// LongDescriptionContainsFold applies the ContainsFold predicate on the "long_description" field.
func LongDescriptionContainsFold(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLongDescription), v))
	})
}

// PriceDetailTextEQ applies the EQ predicate on the "price_detail_text" field.
func PriceDetailTextEQ(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPriceDetailText), v))
	})
}

// PriceDetailTextNEQ applies the NEQ predicate on the "price_detail_text" field.
func PriceDetailTextNEQ(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPriceDetailText), v))
	})
}

// PriceDetailTextIn applies the In predicate on the "price_detail_text" field.
func PriceDetailTextIn(vs ...string) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPriceDetailText), v...))
	})
}

// PriceDetailTextNotIn applies the NotIn predicate on the "price_detail_text" field.
func PriceDetailTextNotIn(vs ...string) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPriceDetailText), v...))
	})
}

// PriceDetailTextGT applies the GT predicate on the "price_detail_text" field.
func PriceDetailTextGT(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPriceDetailText), v))
	})
}

// PriceDetailTextGTE applies the GTE predicate on the "price_detail_text" field.
func PriceDetailTextGTE(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPriceDetailText), v))
	})
}

// PriceDetailTextLT applies the LT predicate on the "price_detail_text" field.
func PriceDetailTextLT(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPriceDetailText), v))
	})
}

// PriceDetailTextLTE applies the LTE predicate on the "price_detail_text" field.
func PriceDetailTextLTE(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPriceDetailText), v))
	})
}

// PriceDetailTextContains applies the Contains predicate on the "price_detail_text" field.
func PriceDetailTextContains(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPriceDetailText), v))
	})
}

// PriceDetailTextHasPrefix applies the HasPrefix predicate on the "price_detail_text" field.
func PriceDetailTextHasPrefix(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPriceDetailText), v))
	})
}

// PriceDetailTextHasSuffix applies the HasSuffix predicate on the "price_detail_text" field.
func PriceDetailTextHasSuffix(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPriceDetailText), v))
	})
}

// PriceDetailTextIsNil applies the IsNil predicate on the "price_detail_text" field.
func PriceDetailTextIsNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPriceDetailText)))
	})
}

// PriceDetailTextNotNil applies the NotNil predicate on the "price_detail_text" field.
func PriceDetailTextNotNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPriceDetailText)))
	})
}

// PriceDetailTextEqualFold applies the EqualFold predicate on the "price_detail_text" field.
func PriceDetailTextEqualFold(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPriceDetailText), v))
	})
}

// PriceDetailTextContainsFold applies the ContainsFold predicate on the "price_detail_text" field.
func PriceDetailTextContainsFold(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPriceDetailText), v))
	})
}

// SmallImageURLEQ applies the EQ predicate on the "small_image_url" field.
func SmallImageURLEQ(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSmallImageURL), v))
	})
}

// SmallImageURLNEQ applies the NEQ predicate on the "small_image_url" field.
func SmallImageURLNEQ(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSmallImageURL), v))
	})
}

// SmallImageURLIn applies the In predicate on the "small_image_url" field.
func SmallImageURLIn(vs ...string) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSmallImageURL), v...))
	})
}

// SmallImageURLNotIn applies the NotIn predicate on the "small_image_url" field.
func SmallImageURLNotIn(vs ...string) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSmallImageURL), v...))
	})
}

// SmallImageURLGT applies the GT predicate on the "small_image_url" field.
func SmallImageURLGT(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSmallImageURL), v))
	})
}

// SmallImageURLGTE applies the GTE predicate on the "small_image_url" field.
func SmallImageURLGTE(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSmallImageURL), v))
	})
}

// SmallImageURLLT applies the LT predicate on the "small_image_url" field.
func SmallImageURLLT(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSmallImageURL), v))
	})
}

// SmallImageURLLTE applies the LTE predicate on the "small_image_url" field.
func SmallImageURLLTE(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSmallImageURL), v))
	})
}

// SmallImageURLContains applies the Contains predicate on the "small_image_url" field.
func SmallImageURLContains(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSmallImageURL), v))
	})
}

// SmallImageURLHasPrefix applies the HasPrefix predicate on the "small_image_url" field.
func SmallImageURLHasPrefix(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSmallImageURL), v))
	})
}

// SmallImageURLHasSuffix applies the HasSuffix predicate on the "small_image_url" field.
func SmallImageURLHasSuffix(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSmallImageURL), v))
	})
}

// SmallImageURLIsNil applies the IsNil predicate on the "small_image_url" field.
func SmallImageURLIsNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSmallImageURL)))
	})
}

// SmallImageURLNotNil applies the NotNil predicate on the "small_image_url" field.
func SmallImageURLNotNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSmallImageURL)))
	})
}

// SmallImageURLEqualFold applies the EqualFold predicate on the "small_image_url" field.
func SmallImageURLEqualFold(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSmallImageURL), v))
	})
}

// SmallImageURLContainsFold applies the ContainsFold predicate on the "small_image_url" field.
func SmallImageURLContainsFold(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSmallImageURL), v))
	})
}

// MediumImageURLEQ applies the EQ predicate on the "medium_image_url" field.
func MediumImageURLEQ(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMediumImageURL), v))
	})
}

// MediumImageURLNEQ applies the NEQ predicate on the "medium_image_url" field.
func MediumImageURLNEQ(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMediumImageURL), v))
	})
}

// MediumImageURLIn applies the In predicate on the "medium_image_url" field.
func MediumImageURLIn(vs ...string) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMediumImageURL), v...))
	})
}

// MediumImageURLNotIn applies the NotIn predicate on the "medium_image_url" field.
func MediumImageURLNotIn(vs ...string) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMediumImageURL), v...))
	})
}

// MediumImageURLGT applies the GT predicate on the "medium_image_url" field.
func MediumImageURLGT(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMediumImageURL), v))
	})
}

// MediumImageURLGTE applies the GTE predicate on the "medium_image_url" field.
func MediumImageURLGTE(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMediumImageURL), v))
	})
}

// MediumImageURLLT applies the LT predicate on the "medium_image_url" field.
func MediumImageURLLT(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMediumImageURL), v))
	})
}

// MediumImageURLLTE applies the LTE predicate on the "medium_image_url" field.
func MediumImageURLLTE(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMediumImageURL), v))
	})
}

// MediumImageURLContains applies the Contains predicate on the "medium_image_url" field.
func MediumImageURLContains(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMediumImageURL), v))
	})
}

// MediumImageURLHasPrefix applies the HasPrefix predicate on the "medium_image_url" field.
func MediumImageURLHasPrefix(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMediumImageURL), v))
	})
}

// MediumImageURLHasSuffix applies the HasSuffix predicate on the "medium_image_url" field.
func MediumImageURLHasSuffix(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMediumImageURL), v))
	})
}

// MediumImageURLIsNil applies the IsNil predicate on the "medium_image_url" field.
func MediumImageURLIsNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMediumImageURL)))
	})
}

// MediumImageURLNotNil applies the NotNil predicate on the "medium_image_url" field.
func MediumImageURLNotNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMediumImageURL)))
	})
}

// MediumImageURLEqualFold applies the EqualFold predicate on the "medium_image_url" field.
func MediumImageURLEqualFold(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMediumImageURL), v))
	})
}

// MediumImageURLContainsFold applies the ContainsFold predicate on the "medium_image_url" field.
func MediumImageURLContainsFold(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMediumImageURL), v))
	})
}

// LargeImageURLEQ applies the EQ predicate on the "large_image_url" field.
func LargeImageURLEQ(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLargeImageURL), v))
	})
}

// LargeImageURLNEQ applies the NEQ predicate on the "large_image_url" field.
func LargeImageURLNEQ(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLargeImageURL), v))
	})
}

// LargeImageURLIn applies the In predicate on the "large_image_url" field.
func LargeImageURLIn(vs ...string) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLargeImageURL), v...))
	})
}

// LargeImageURLNotIn applies the NotIn predicate on the "large_image_url" field.
func LargeImageURLNotIn(vs ...string) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLargeImageURL), v...))
	})
}

// LargeImageURLGT applies the GT predicate on the "large_image_url" field.
func LargeImageURLGT(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLargeImageURL), v))
	})
}

// LargeImageURLGTE applies the GTE predicate on the "large_image_url" field.
func LargeImageURLGTE(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLargeImageURL), v))
	})
}

// LargeImageURLLT applies the LT predicate on the "large_image_url" field.
func LargeImageURLLT(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLargeImageURL), v))
	})
}

// LargeImageURLLTE applies the LTE predicate on the "large_image_url" field.
func LargeImageURLLTE(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLargeImageURL), v))
	})
}

// LargeImageURLContains applies the Contains predicate on the "large_image_url" field.
func LargeImageURLContains(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLargeImageURL), v))
	})
}

// LargeImageURLHasPrefix applies the HasPrefix predicate on the "large_image_url" field.
func LargeImageURLHasPrefix(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLargeImageURL), v))
	})
}

// LargeImageURLHasSuffix applies the HasSuffix predicate on the "large_image_url" field.
func LargeImageURLHasSuffix(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLargeImageURL), v))
	})
}

// LargeImageURLIsNil applies the IsNil predicate on the "large_image_url" field.
func LargeImageURLIsNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLargeImageURL)))
	})
}

// LargeImageURLNotNil applies the NotNil predicate on the "large_image_url" field.
func LargeImageURLNotNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLargeImageURL)))
	})
}

// LargeImageURLEqualFold applies the EqualFold predicate on the "large_image_url" field.
func LargeImageURLEqualFold(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLargeImageURL), v))
	})
}

// LargeImageURLContainsFold applies the ContainsFold predicate on the "large_image_url" field.
func LargeImageURLContainsFold(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLargeImageURL), v))
	})
}

// DetailImageURLEQ applies the EQ predicate on the "detail_image_url" field.
func DetailImageURLEQ(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDetailImageURL), v))
	})
}

// DetailImageURLNEQ applies the NEQ predicate on the "detail_image_url" field.
func DetailImageURLNEQ(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDetailImageURL), v))
	})
}

// DetailImageURLIn applies the In predicate on the "detail_image_url" field.
func DetailImageURLIn(vs ...string) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDetailImageURL), v...))
	})
}

// DetailImageURLNotIn applies the NotIn predicate on the "detail_image_url" field.
func DetailImageURLNotIn(vs ...string) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDetailImageURL), v...))
	})
}

// DetailImageURLGT applies the GT predicate on the "detail_image_url" field.
func DetailImageURLGT(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDetailImageURL), v))
	})
}

// DetailImageURLGTE applies the GTE predicate on the "detail_image_url" field.
func DetailImageURLGTE(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDetailImageURL), v))
	})
}

// DetailImageURLLT applies the LT predicate on the "detail_image_url" field.
func DetailImageURLLT(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDetailImageURL), v))
	})
}

// DetailImageURLLTE applies the LTE predicate on the "detail_image_url" field.
func DetailImageURLLTE(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDetailImageURL), v))
	})
}

// DetailImageURLContains applies the Contains predicate on the "detail_image_url" field.
func DetailImageURLContains(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDetailImageURL), v))
	})
}

// DetailImageURLHasPrefix applies the HasPrefix predicate on the "detail_image_url" field.
func DetailImageURLHasPrefix(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDetailImageURL), v))
	})
}

// DetailImageURLHasSuffix applies the HasSuffix predicate on the "detail_image_url" field.
func DetailImageURLHasSuffix(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDetailImageURL), v))
	})
}

// DetailImageURLIsNil applies the IsNil predicate on the "detail_image_url" field.
func DetailImageURLIsNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDetailImageURL)))
	})
}

// DetailImageURLNotNil applies the NotNil predicate on the "detail_image_url" field.
func DetailImageURLNotNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDetailImageURL)))
	})
}

// DetailImageURLEqualFold applies the EqualFold predicate on the "detail_image_url" field.
func DetailImageURLEqualFold(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDetailImageURL), v))
	})
}

// DetailImageURLContainsFold applies the ContainsFold predicate on the "detail_image_url" field.
func DetailImageURLContainsFold(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDetailImageURL), v))
	})
}

// OriginalImageURLEQ applies the EQ predicate on the "original_image_url" field.
func OriginalImageURLEQ(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOriginalImageURL), v))
	})
}

// OriginalImageURLNEQ applies the NEQ predicate on the "original_image_url" field.
func OriginalImageURLNEQ(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOriginalImageURL), v))
	})
}

// OriginalImageURLIn applies the In predicate on the "original_image_url" field.
func OriginalImageURLIn(vs ...string) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOriginalImageURL), v...))
	})
}

// OriginalImageURLNotIn applies the NotIn predicate on the "original_image_url" field.
func OriginalImageURLNotIn(vs ...string) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOriginalImageURL), v...))
	})
}

// OriginalImageURLGT applies the GT predicate on the "original_image_url" field.
func OriginalImageURLGT(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOriginalImageURL), v))
	})
}

// OriginalImageURLGTE applies the GTE predicate on the "original_image_url" field.
func OriginalImageURLGTE(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOriginalImageURL), v))
	})
}

// OriginalImageURLLT applies the LT predicate on the "original_image_url" field.
func OriginalImageURLLT(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOriginalImageURL), v))
	})
}

// OriginalImageURLLTE applies the LTE predicate on the "original_image_url" field.
func OriginalImageURLLTE(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOriginalImageURL), v))
	})
}

// OriginalImageURLContains applies the Contains predicate on the "original_image_url" field.
func OriginalImageURLContains(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOriginalImageURL), v))
	})
}

// OriginalImageURLHasPrefix applies the HasPrefix predicate on the "original_image_url" field.
func OriginalImageURLHasPrefix(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOriginalImageURL), v))
	})
}

// OriginalImageURLHasSuffix applies the HasSuffix predicate on the "original_image_url" field.
func OriginalImageURLHasSuffix(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOriginalImageURL), v))
	})
}

// OriginalImageURLIsNil applies the IsNil predicate on the "original_image_url" field.
func OriginalImageURLIsNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOriginalImageURL)))
	})
}

// OriginalImageURLNotNil applies the NotNil predicate on the "original_image_url" field.
func OriginalImageURLNotNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOriginalImageURL)))
	})
}

// OriginalImageURLEqualFold applies the EqualFold predicate on the "original_image_url" field.
func OriginalImageURLEqualFold(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOriginalImageURL), v))
	})
}

// OriginalImageURLContainsFold applies the ContainsFold predicate on the "original_image_url" field.
func OriginalImageURLContainsFold(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOriginalImageURL), v))
	})
}

// DetailScreenEQ applies the EQ predicate on the "detail_screen" field.
func DetailScreenEQ(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDetailScreen), v))
	})
}

// DetailScreenNEQ applies the NEQ predicate on the "detail_screen" field.
func DetailScreenNEQ(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDetailScreen), v))
	})
}

// DetailScreenIn applies the In predicate on the "detail_screen" field.
func DetailScreenIn(vs ...string) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDetailScreen), v...))
	})
}

// DetailScreenNotIn applies the NotIn predicate on the "detail_screen" field.
func DetailScreenNotIn(vs ...string) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDetailScreen), v...))
	})
}

// DetailScreenGT applies the GT predicate on the "detail_screen" field.
func DetailScreenGT(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDetailScreen), v))
	})
}

// DetailScreenGTE applies the GTE predicate on the "detail_screen" field.
func DetailScreenGTE(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDetailScreen), v))
	})
}

// DetailScreenLT applies the LT predicate on the "detail_screen" field.
func DetailScreenLT(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDetailScreen), v))
	})
}

// DetailScreenLTE applies the LTE predicate on the "detail_screen" field.
func DetailScreenLTE(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDetailScreen), v))
	})
}

// DetailScreenContains applies the Contains predicate on the "detail_screen" field.
func DetailScreenContains(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDetailScreen), v))
	})
}

// DetailScreenHasPrefix applies the HasPrefix predicate on the "detail_screen" field.
func DetailScreenHasPrefix(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDetailScreen), v))
	})
}

// DetailScreenHasSuffix applies the HasSuffix predicate on the "detail_screen" field.
func DetailScreenHasSuffix(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDetailScreen), v))
	})
}

// DetailScreenIsNil applies the IsNil predicate on the "detail_screen" field.
func DetailScreenIsNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDetailScreen)))
	})
}

// DetailScreenNotNil applies the NotNil predicate on the "detail_screen" field.
func DetailScreenNotNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDetailScreen)))
	})
}

// DetailScreenEqualFold applies the EqualFold predicate on the "detail_screen" field.
func DetailScreenEqualFold(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDetailScreen), v))
	})
}

// DetailScreenContainsFold applies the ContainsFold predicate on the "detail_screen" field.
func DetailScreenContainsFold(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDetailScreen), v))
	})
}

// InventoryMessageEQ applies the EQ predicate on the "inventory_message" field.
func InventoryMessageEQ(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInventoryMessage), v))
	})
}

// InventoryMessageNEQ applies the NEQ predicate on the "inventory_message" field.
func InventoryMessageNEQ(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldInventoryMessage), v))
	})
}

// InventoryMessageIn applies the In predicate on the "inventory_message" field.
func InventoryMessageIn(vs ...string) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldInventoryMessage), v...))
	})
}

// InventoryMessageNotIn applies the NotIn predicate on the "inventory_message" field.
func InventoryMessageNotIn(vs ...string) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldInventoryMessage), v...))
	})
}

// InventoryMessageGT applies the GT predicate on the "inventory_message" field.
func InventoryMessageGT(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldInventoryMessage), v))
	})
}

// InventoryMessageGTE applies the GTE predicate on the "inventory_message" field.
func InventoryMessageGTE(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldInventoryMessage), v))
	})
}

// InventoryMessageLT applies the LT predicate on the "inventory_message" field.
func InventoryMessageLT(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldInventoryMessage), v))
	})
}

// InventoryMessageLTE applies the LTE predicate on the "inventory_message" field.
func InventoryMessageLTE(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldInventoryMessage), v))
	})
}

// InventoryMessageContains applies the Contains predicate on the "inventory_message" field.
func InventoryMessageContains(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldInventoryMessage), v))
	})
}

// InventoryMessageHasPrefix applies the HasPrefix predicate on the "inventory_message" field.
func InventoryMessageHasPrefix(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldInventoryMessage), v))
	})
}

// InventoryMessageHasSuffix applies the HasSuffix predicate on the "inventory_message" field.
func InventoryMessageHasSuffix(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldInventoryMessage), v))
	})
}

// InventoryMessageIsNil applies the IsNil predicate on the "inventory_message" field.
func InventoryMessageIsNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldInventoryMessage)))
	})
}

// InventoryMessageNotNil applies the NotNil predicate on the "inventory_message" field.
func InventoryMessageNotNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldInventoryMessage)))
	})
}

// InventoryMessageEqualFold applies the EqualFold predicate on the "inventory_message" field.
func InventoryMessageEqualFold(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldInventoryMessage), v))
	})
}

// InventoryMessageContainsFold applies the ContainsFold predicate on the "inventory_message" field.
func InventoryMessageContainsFold(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldInventoryMessage), v))
	})
}

// RequireInventoryEQ applies the EQ predicate on the "require_inventory" field.
func RequireInventoryEQ(v RequireInventory) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRequireInventory), v))
	})
}

// RequireInventoryNEQ applies the NEQ predicate on the "require_inventory" field.
func RequireInventoryNEQ(v RequireInventory) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRequireInventory), v))
	})
}

// RequireInventoryIn applies the In predicate on the "require_inventory" field.
func RequireInventoryIn(vs ...RequireInventory) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRequireInventory), v...))
	})
}

// RequireInventoryNotIn applies the NotIn predicate on the "require_inventory" field.
func RequireInventoryNotIn(vs ...RequireInventory) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRequireInventory), v...))
	})
}

// RequireInventoryIsNil applies the IsNil predicate on the "require_inventory" field.
func RequireInventoryIsNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRequireInventory)))
	})
}

// RequireInventoryNotNil applies the NotNil predicate on the "require_inventory" field.
func RequireInventoryNotNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRequireInventory)))
	})
}

// QuantityUomIDEQ applies the EQ predicate on the "quantity_uom_id" field.
func QuantityUomIDEQ(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQuantityUomID), v))
	})
}

// QuantityUomIDNEQ applies the NEQ predicate on the "quantity_uom_id" field.
func QuantityUomIDNEQ(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldQuantityUomID), v))
	})
}

// QuantityUomIDIn applies the In predicate on the "quantity_uom_id" field.
func QuantityUomIDIn(vs ...int) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldQuantityUomID), v...))
	})
}

// QuantityUomIDNotIn applies the NotIn predicate on the "quantity_uom_id" field.
func QuantityUomIDNotIn(vs ...int) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldQuantityUomID), v...))
	})
}

// QuantityUomIDGT applies the GT predicate on the "quantity_uom_id" field.
func QuantityUomIDGT(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldQuantityUomID), v))
	})
}

// QuantityUomIDGTE applies the GTE predicate on the "quantity_uom_id" field.
func QuantityUomIDGTE(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldQuantityUomID), v))
	})
}

// QuantityUomIDLT applies the LT predicate on the "quantity_uom_id" field.
func QuantityUomIDLT(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldQuantityUomID), v))
	})
}

// QuantityUomIDLTE applies the LTE predicate on the "quantity_uom_id" field.
func QuantityUomIDLTE(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldQuantityUomID), v))
	})
}

// QuantityUomIDIsNil applies the IsNil predicate on the "quantity_uom_id" field.
func QuantityUomIDIsNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldQuantityUomID)))
	})
}

// QuantityUomIDNotNil applies the NotNil predicate on the "quantity_uom_id" field.
func QuantityUomIDNotNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldQuantityUomID)))
	})
}

// QuantityIncludedEQ applies the EQ predicate on the "quantity_included" field.
func QuantityIncludedEQ(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQuantityIncluded), v))
	})
}

// QuantityIncludedNEQ applies the NEQ predicate on the "quantity_included" field.
func QuantityIncludedNEQ(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldQuantityIncluded), v))
	})
}

// QuantityIncludedIn applies the In predicate on the "quantity_included" field.
func QuantityIncludedIn(vs ...float64) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldQuantityIncluded), v...))
	})
}

// QuantityIncludedNotIn applies the NotIn predicate on the "quantity_included" field.
func QuantityIncludedNotIn(vs ...float64) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldQuantityIncluded), v...))
	})
}

// QuantityIncludedGT applies the GT predicate on the "quantity_included" field.
func QuantityIncludedGT(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldQuantityIncluded), v))
	})
}

// QuantityIncludedGTE applies the GTE predicate on the "quantity_included" field.
func QuantityIncludedGTE(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldQuantityIncluded), v))
	})
}

// QuantityIncludedLT applies the LT predicate on the "quantity_included" field.
func QuantityIncludedLT(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldQuantityIncluded), v))
	})
}

// QuantityIncludedLTE applies the LTE predicate on the "quantity_included" field.
func QuantityIncludedLTE(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldQuantityIncluded), v))
	})
}

// QuantityIncludedIsNil applies the IsNil predicate on the "quantity_included" field.
func QuantityIncludedIsNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldQuantityIncluded)))
	})
}

// QuantityIncludedNotNil applies the NotNil predicate on the "quantity_included" field.
func QuantityIncludedNotNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldQuantityIncluded)))
	})
}

// PiecesIncludedEQ applies the EQ predicate on the "pieces_included" field.
func PiecesIncludedEQ(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPiecesIncluded), v))
	})
}

// PiecesIncludedNEQ applies the NEQ predicate on the "pieces_included" field.
func PiecesIncludedNEQ(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPiecesIncluded), v))
	})
}

// PiecesIncludedIn applies the In predicate on the "pieces_included" field.
func PiecesIncludedIn(vs ...int) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPiecesIncluded), v...))
	})
}

// PiecesIncludedNotIn applies the NotIn predicate on the "pieces_included" field.
func PiecesIncludedNotIn(vs ...int) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPiecesIncluded), v...))
	})
}

// PiecesIncludedGT applies the GT predicate on the "pieces_included" field.
func PiecesIncludedGT(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPiecesIncluded), v))
	})
}

// PiecesIncludedGTE applies the GTE predicate on the "pieces_included" field.
func PiecesIncludedGTE(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPiecesIncluded), v))
	})
}

// PiecesIncludedLT applies the LT predicate on the "pieces_included" field.
func PiecesIncludedLT(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPiecesIncluded), v))
	})
}

// PiecesIncludedLTE applies the LTE predicate on the "pieces_included" field.
func PiecesIncludedLTE(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPiecesIncluded), v))
	})
}

// PiecesIncludedIsNil applies the IsNil predicate on the "pieces_included" field.
func PiecesIncludedIsNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPiecesIncluded)))
	})
}

// PiecesIncludedNotNil applies the NotNil predicate on the "pieces_included" field.
func PiecesIncludedNotNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPiecesIncluded)))
	})
}

// RequireAmountEQ applies the EQ predicate on the "require_amount" field.
func RequireAmountEQ(v RequireAmount) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRequireAmount), v))
	})
}

// RequireAmountNEQ applies the NEQ predicate on the "require_amount" field.
func RequireAmountNEQ(v RequireAmount) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRequireAmount), v))
	})
}

// RequireAmountIn applies the In predicate on the "require_amount" field.
func RequireAmountIn(vs ...RequireAmount) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRequireAmount), v...))
	})
}

// RequireAmountNotIn applies the NotIn predicate on the "require_amount" field.
func RequireAmountNotIn(vs ...RequireAmount) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRequireAmount), v...))
	})
}

// RequireAmountIsNil applies the IsNil predicate on the "require_amount" field.
func RequireAmountIsNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRequireAmount)))
	})
}

// RequireAmountNotNil applies the NotNil predicate on the "require_amount" field.
func RequireAmountNotNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRequireAmount)))
	})
}

// FixedAmountEQ applies the EQ predicate on the "fixed_amount" field.
func FixedAmountEQ(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFixedAmount), v))
	})
}

// FixedAmountNEQ applies the NEQ predicate on the "fixed_amount" field.
func FixedAmountNEQ(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFixedAmount), v))
	})
}

// FixedAmountIn applies the In predicate on the "fixed_amount" field.
func FixedAmountIn(vs ...float64) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFixedAmount), v...))
	})
}

// FixedAmountNotIn applies the NotIn predicate on the "fixed_amount" field.
func FixedAmountNotIn(vs ...float64) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFixedAmount), v...))
	})
}

// FixedAmountGT applies the GT predicate on the "fixed_amount" field.
func FixedAmountGT(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFixedAmount), v))
	})
}

// FixedAmountGTE applies the GTE predicate on the "fixed_amount" field.
func FixedAmountGTE(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFixedAmount), v))
	})
}

// FixedAmountLT applies the LT predicate on the "fixed_amount" field.
func FixedAmountLT(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFixedAmount), v))
	})
}

// FixedAmountLTE applies the LTE predicate on the "fixed_amount" field.
func FixedAmountLTE(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFixedAmount), v))
	})
}

// FixedAmountIsNil applies the IsNil predicate on the "fixed_amount" field.
func FixedAmountIsNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFixedAmount)))
	})
}

// FixedAmountNotNil applies the NotNil predicate on the "fixed_amount" field.
func FixedAmountNotNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFixedAmount)))
	})
}

// AmountUomTypeIDEQ applies the EQ predicate on the "amount_uom_type_id" field.
func AmountUomTypeIDEQ(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAmountUomTypeID), v))
	})
}

// AmountUomTypeIDNEQ applies the NEQ predicate on the "amount_uom_type_id" field.
func AmountUomTypeIDNEQ(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAmountUomTypeID), v))
	})
}

// AmountUomTypeIDIn applies the In predicate on the "amount_uom_type_id" field.
func AmountUomTypeIDIn(vs ...int) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAmountUomTypeID), v...))
	})
}

// AmountUomTypeIDNotIn applies the NotIn predicate on the "amount_uom_type_id" field.
func AmountUomTypeIDNotIn(vs ...int) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAmountUomTypeID), v...))
	})
}

// AmountUomTypeIDGT applies the GT predicate on the "amount_uom_type_id" field.
func AmountUomTypeIDGT(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAmountUomTypeID), v))
	})
}

// AmountUomTypeIDGTE applies the GTE predicate on the "amount_uom_type_id" field.
func AmountUomTypeIDGTE(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAmountUomTypeID), v))
	})
}

// AmountUomTypeIDLT applies the LT predicate on the "amount_uom_type_id" field.
func AmountUomTypeIDLT(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAmountUomTypeID), v))
	})
}

// AmountUomTypeIDLTE applies the LTE predicate on the "amount_uom_type_id" field.
func AmountUomTypeIDLTE(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAmountUomTypeID), v))
	})
}

// AmountUomTypeIDIsNil applies the IsNil predicate on the "amount_uom_type_id" field.
func AmountUomTypeIDIsNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAmountUomTypeID)))
	})
}

// AmountUomTypeIDNotNil applies the NotNil predicate on the "amount_uom_type_id" field.
func AmountUomTypeIDNotNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAmountUomTypeID)))
	})
}

// WeightUomIDEQ applies the EQ predicate on the "weight_uom_id" field.
func WeightUomIDEQ(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWeightUomID), v))
	})
}

// WeightUomIDNEQ applies the NEQ predicate on the "weight_uom_id" field.
func WeightUomIDNEQ(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWeightUomID), v))
	})
}

// WeightUomIDIn applies the In predicate on the "weight_uom_id" field.
func WeightUomIDIn(vs ...int) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldWeightUomID), v...))
	})
}

// WeightUomIDNotIn applies the NotIn predicate on the "weight_uom_id" field.
func WeightUomIDNotIn(vs ...int) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldWeightUomID), v...))
	})
}

// WeightUomIDGT applies the GT predicate on the "weight_uom_id" field.
func WeightUomIDGT(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWeightUomID), v))
	})
}

// WeightUomIDGTE applies the GTE predicate on the "weight_uom_id" field.
func WeightUomIDGTE(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWeightUomID), v))
	})
}

// WeightUomIDLT applies the LT predicate on the "weight_uom_id" field.
func WeightUomIDLT(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWeightUomID), v))
	})
}

// WeightUomIDLTE applies the LTE predicate on the "weight_uom_id" field.
func WeightUomIDLTE(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWeightUomID), v))
	})
}

// WeightUomIDIsNil applies the IsNil predicate on the "weight_uom_id" field.
func WeightUomIDIsNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldWeightUomID)))
	})
}

// WeightUomIDNotNil applies the NotNil predicate on the "weight_uom_id" field.
func WeightUomIDNotNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldWeightUomID)))
	})
}

// ShippingWeightEQ applies the EQ predicate on the "shipping_weight" field.
func ShippingWeightEQ(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShippingWeight), v))
	})
}

// ShippingWeightNEQ applies the NEQ predicate on the "shipping_weight" field.
func ShippingWeightNEQ(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShippingWeight), v))
	})
}

// ShippingWeightIn applies the In predicate on the "shipping_weight" field.
func ShippingWeightIn(vs ...float64) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldShippingWeight), v...))
	})
}

// ShippingWeightNotIn applies the NotIn predicate on the "shipping_weight" field.
func ShippingWeightNotIn(vs ...float64) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldShippingWeight), v...))
	})
}

// ShippingWeightGT applies the GT predicate on the "shipping_weight" field.
func ShippingWeightGT(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShippingWeight), v))
	})
}

// ShippingWeightGTE applies the GTE predicate on the "shipping_weight" field.
func ShippingWeightGTE(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShippingWeight), v))
	})
}

// ShippingWeightLT applies the LT predicate on the "shipping_weight" field.
func ShippingWeightLT(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShippingWeight), v))
	})
}

// ShippingWeightLTE applies the LTE predicate on the "shipping_weight" field.
func ShippingWeightLTE(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShippingWeight), v))
	})
}

// ShippingWeightIsNil applies the IsNil predicate on the "shipping_weight" field.
func ShippingWeightIsNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldShippingWeight)))
	})
}

// ShippingWeightNotNil applies the NotNil predicate on the "shipping_weight" field.
func ShippingWeightNotNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldShippingWeight)))
	})
}

// ProductWeightEQ applies the EQ predicate on the "product_weight" field.
func ProductWeightEQ(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProductWeight), v))
	})
}

// ProductWeightNEQ applies the NEQ predicate on the "product_weight" field.
func ProductWeightNEQ(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProductWeight), v))
	})
}

// ProductWeightIn applies the In predicate on the "product_weight" field.
func ProductWeightIn(vs ...float64) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldProductWeight), v...))
	})
}

// ProductWeightNotIn applies the NotIn predicate on the "product_weight" field.
func ProductWeightNotIn(vs ...float64) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldProductWeight), v...))
	})
}

// ProductWeightGT applies the GT predicate on the "product_weight" field.
func ProductWeightGT(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProductWeight), v))
	})
}

// ProductWeightGTE applies the GTE predicate on the "product_weight" field.
func ProductWeightGTE(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProductWeight), v))
	})
}

// ProductWeightLT applies the LT predicate on the "product_weight" field.
func ProductWeightLT(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProductWeight), v))
	})
}

// ProductWeightLTE applies the LTE predicate on the "product_weight" field.
func ProductWeightLTE(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProductWeight), v))
	})
}

// ProductWeightIsNil applies the IsNil predicate on the "product_weight" field.
func ProductWeightIsNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldProductWeight)))
	})
}

// ProductWeightNotNil applies the NotNil predicate on the "product_weight" field.
func ProductWeightNotNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldProductWeight)))
	})
}

// HeightUomIDEQ applies the EQ predicate on the "height_uom_id" field.
func HeightUomIDEQ(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHeightUomID), v))
	})
}

// HeightUomIDNEQ applies the NEQ predicate on the "height_uom_id" field.
func HeightUomIDNEQ(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHeightUomID), v))
	})
}

// HeightUomIDIn applies the In predicate on the "height_uom_id" field.
func HeightUomIDIn(vs ...int) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldHeightUomID), v...))
	})
}

// HeightUomIDNotIn applies the NotIn predicate on the "height_uom_id" field.
func HeightUomIDNotIn(vs ...int) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldHeightUomID), v...))
	})
}

// HeightUomIDGT applies the GT predicate on the "height_uom_id" field.
func HeightUomIDGT(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHeightUomID), v))
	})
}

// HeightUomIDGTE applies the GTE predicate on the "height_uom_id" field.
func HeightUomIDGTE(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHeightUomID), v))
	})
}

// HeightUomIDLT applies the LT predicate on the "height_uom_id" field.
func HeightUomIDLT(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHeightUomID), v))
	})
}

// HeightUomIDLTE applies the LTE predicate on the "height_uom_id" field.
func HeightUomIDLTE(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHeightUomID), v))
	})
}

// HeightUomIDIsNil applies the IsNil predicate on the "height_uom_id" field.
func HeightUomIDIsNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldHeightUomID)))
	})
}

// HeightUomIDNotNil applies the NotNil predicate on the "height_uom_id" field.
func HeightUomIDNotNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldHeightUomID)))
	})
}

// ProductHeightEQ applies the EQ predicate on the "product_height" field.
func ProductHeightEQ(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProductHeight), v))
	})
}

// ProductHeightNEQ applies the NEQ predicate on the "product_height" field.
func ProductHeightNEQ(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProductHeight), v))
	})
}

// ProductHeightIn applies the In predicate on the "product_height" field.
func ProductHeightIn(vs ...float64) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldProductHeight), v...))
	})
}

// ProductHeightNotIn applies the NotIn predicate on the "product_height" field.
func ProductHeightNotIn(vs ...float64) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldProductHeight), v...))
	})
}

// ProductHeightGT applies the GT predicate on the "product_height" field.
func ProductHeightGT(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProductHeight), v))
	})
}

// ProductHeightGTE applies the GTE predicate on the "product_height" field.
func ProductHeightGTE(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProductHeight), v))
	})
}

// ProductHeightLT applies the LT predicate on the "product_height" field.
func ProductHeightLT(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProductHeight), v))
	})
}

// ProductHeightLTE applies the LTE predicate on the "product_height" field.
func ProductHeightLTE(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProductHeight), v))
	})
}

// ProductHeightIsNil applies the IsNil predicate on the "product_height" field.
func ProductHeightIsNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldProductHeight)))
	})
}

// ProductHeightNotNil applies the NotNil predicate on the "product_height" field.
func ProductHeightNotNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldProductHeight)))
	})
}

// ShippingHeightEQ applies the EQ predicate on the "shipping_height" field.
func ShippingHeightEQ(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShippingHeight), v))
	})
}

// ShippingHeightNEQ applies the NEQ predicate on the "shipping_height" field.
func ShippingHeightNEQ(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShippingHeight), v))
	})
}

// ShippingHeightIn applies the In predicate on the "shipping_height" field.
func ShippingHeightIn(vs ...float64) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldShippingHeight), v...))
	})
}

// ShippingHeightNotIn applies the NotIn predicate on the "shipping_height" field.
func ShippingHeightNotIn(vs ...float64) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldShippingHeight), v...))
	})
}

// ShippingHeightGT applies the GT predicate on the "shipping_height" field.
func ShippingHeightGT(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShippingHeight), v))
	})
}

// ShippingHeightGTE applies the GTE predicate on the "shipping_height" field.
func ShippingHeightGTE(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShippingHeight), v))
	})
}

// ShippingHeightLT applies the LT predicate on the "shipping_height" field.
func ShippingHeightLT(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShippingHeight), v))
	})
}

// ShippingHeightLTE applies the LTE predicate on the "shipping_height" field.
func ShippingHeightLTE(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShippingHeight), v))
	})
}

// ShippingHeightIsNil applies the IsNil predicate on the "shipping_height" field.
func ShippingHeightIsNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldShippingHeight)))
	})
}

// ShippingHeightNotNil applies the NotNil predicate on the "shipping_height" field.
func ShippingHeightNotNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldShippingHeight)))
	})
}

// WidthUomIDEQ applies the EQ predicate on the "width_uom_id" field.
func WidthUomIDEQ(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWidthUomID), v))
	})
}

// WidthUomIDNEQ applies the NEQ predicate on the "width_uom_id" field.
func WidthUomIDNEQ(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWidthUomID), v))
	})
}

// WidthUomIDIn applies the In predicate on the "width_uom_id" field.
func WidthUomIDIn(vs ...int) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldWidthUomID), v...))
	})
}

// WidthUomIDNotIn applies the NotIn predicate on the "width_uom_id" field.
func WidthUomIDNotIn(vs ...int) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldWidthUomID), v...))
	})
}

// WidthUomIDGT applies the GT predicate on the "width_uom_id" field.
func WidthUomIDGT(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWidthUomID), v))
	})
}

// WidthUomIDGTE applies the GTE predicate on the "width_uom_id" field.
func WidthUomIDGTE(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWidthUomID), v))
	})
}

// WidthUomIDLT applies the LT predicate on the "width_uom_id" field.
func WidthUomIDLT(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWidthUomID), v))
	})
}

// WidthUomIDLTE applies the LTE predicate on the "width_uom_id" field.
func WidthUomIDLTE(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWidthUomID), v))
	})
}

// WidthUomIDIsNil applies the IsNil predicate on the "width_uom_id" field.
func WidthUomIDIsNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldWidthUomID)))
	})
}

// WidthUomIDNotNil applies the NotNil predicate on the "width_uom_id" field.
func WidthUomIDNotNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldWidthUomID)))
	})
}

// ProductWidthEQ applies the EQ predicate on the "product_width" field.
func ProductWidthEQ(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProductWidth), v))
	})
}

// ProductWidthNEQ applies the NEQ predicate on the "product_width" field.
func ProductWidthNEQ(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProductWidth), v))
	})
}

// ProductWidthIn applies the In predicate on the "product_width" field.
func ProductWidthIn(vs ...float64) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldProductWidth), v...))
	})
}

// ProductWidthNotIn applies the NotIn predicate on the "product_width" field.
func ProductWidthNotIn(vs ...float64) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldProductWidth), v...))
	})
}

// ProductWidthGT applies the GT predicate on the "product_width" field.
func ProductWidthGT(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProductWidth), v))
	})
}

// ProductWidthGTE applies the GTE predicate on the "product_width" field.
func ProductWidthGTE(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProductWidth), v))
	})
}

// ProductWidthLT applies the LT predicate on the "product_width" field.
func ProductWidthLT(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProductWidth), v))
	})
}

// ProductWidthLTE applies the LTE predicate on the "product_width" field.
func ProductWidthLTE(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProductWidth), v))
	})
}

// ProductWidthIsNil applies the IsNil predicate on the "product_width" field.
func ProductWidthIsNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldProductWidth)))
	})
}

// ProductWidthNotNil applies the NotNil predicate on the "product_width" field.
func ProductWidthNotNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldProductWidth)))
	})
}

// ShippingWidthEQ applies the EQ predicate on the "shipping_width" field.
func ShippingWidthEQ(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShippingWidth), v))
	})
}

// ShippingWidthNEQ applies the NEQ predicate on the "shipping_width" field.
func ShippingWidthNEQ(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShippingWidth), v))
	})
}

// ShippingWidthIn applies the In predicate on the "shipping_width" field.
func ShippingWidthIn(vs ...float64) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldShippingWidth), v...))
	})
}

// ShippingWidthNotIn applies the NotIn predicate on the "shipping_width" field.
func ShippingWidthNotIn(vs ...float64) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldShippingWidth), v...))
	})
}

// ShippingWidthGT applies the GT predicate on the "shipping_width" field.
func ShippingWidthGT(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShippingWidth), v))
	})
}

// ShippingWidthGTE applies the GTE predicate on the "shipping_width" field.
func ShippingWidthGTE(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShippingWidth), v))
	})
}

// ShippingWidthLT applies the LT predicate on the "shipping_width" field.
func ShippingWidthLT(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShippingWidth), v))
	})
}

// ShippingWidthLTE applies the LTE predicate on the "shipping_width" field.
func ShippingWidthLTE(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShippingWidth), v))
	})
}

// ShippingWidthIsNil applies the IsNil predicate on the "shipping_width" field.
func ShippingWidthIsNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldShippingWidth)))
	})
}

// ShippingWidthNotNil applies the NotNil predicate on the "shipping_width" field.
func ShippingWidthNotNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldShippingWidth)))
	})
}

// DepthUomIDEQ applies the EQ predicate on the "depth_uom_id" field.
func DepthUomIDEQ(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDepthUomID), v))
	})
}

// DepthUomIDNEQ applies the NEQ predicate on the "depth_uom_id" field.
func DepthUomIDNEQ(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDepthUomID), v))
	})
}

// DepthUomIDIn applies the In predicate on the "depth_uom_id" field.
func DepthUomIDIn(vs ...int) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDepthUomID), v...))
	})
}

// DepthUomIDNotIn applies the NotIn predicate on the "depth_uom_id" field.
func DepthUomIDNotIn(vs ...int) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDepthUomID), v...))
	})
}

// DepthUomIDGT applies the GT predicate on the "depth_uom_id" field.
func DepthUomIDGT(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDepthUomID), v))
	})
}

// DepthUomIDGTE applies the GTE predicate on the "depth_uom_id" field.
func DepthUomIDGTE(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDepthUomID), v))
	})
}

// DepthUomIDLT applies the LT predicate on the "depth_uom_id" field.
func DepthUomIDLT(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDepthUomID), v))
	})
}

// DepthUomIDLTE applies the LTE predicate on the "depth_uom_id" field.
func DepthUomIDLTE(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDepthUomID), v))
	})
}

// DepthUomIDIsNil applies the IsNil predicate on the "depth_uom_id" field.
func DepthUomIDIsNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDepthUomID)))
	})
}

// DepthUomIDNotNil applies the NotNil predicate on the "depth_uom_id" field.
func DepthUomIDNotNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDepthUomID)))
	})
}

// ProductDepthEQ applies the EQ predicate on the "product_depth" field.
func ProductDepthEQ(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProductDepth), v))
	})
}

// ProductDepthNEQ applies the NEQ predicate on the "product_depth" field.
func ProductDepthNEQ(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProductDepth), v))
	})
}

// ProductDepthIn applies the In predicate on the "product_depth" field.
func ProductDepthIn(vs ...float64) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldProductDepth), v...))
	})
}

// ProductDepthNotIn applies the NotIn predicate on the "product_depth" field.
func ProductDepthNotIn(vs ...float64) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldProductDepth), v...))
	})
}

// ProductDepthGT applies the GT predicate on the "product_depth" field.
func ProductDepthGT(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProductDepth), v))
	})
}

// ProductDepthGTE applies the GTE predicate on the "product_depth" field.
func ProductDepthGTE(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProductDepth), v))
	})
}

// ProductDepthLT applies the LT predicate on the "product_depth" field.
func ProductDepthLT(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProductDepth), v))
	})
}

// ProductDepthLTE applies the LTE predicate on the "product_depth" field.
func ProductDepthLTE(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProductDepth), v))
	})
}

// ProductDepthIsNil applies the IsNil predicate on the "product_depth" field.
func ProductDepthIsNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldProductDepth)))
	})
}

// ProductDepthNotNil applies the NotNil predicate on the "product_depth" field.
func ProductDepthNotNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldProductDepth)))
	})
}

// ShippingDepthEQ applies the EQ predicate on the "shipping_depth" field.
func ShippingDepthEQ(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShippingDepth), v))
	})
}

// ShippingDepthNEQ applies the NEQ predicate on the "shipping_depth" field.
func ShippingDepthNEQ(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShippingDepth), v))
	})
}

// ShippingDepthIn applies the In predicate on the "shipping_depth" field.
func ShippingDepthIn(vs ...float64) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldShippingDepth), v...))
	})
}

// ShippingDepthNotIn applies the NotIn predicate on the "shipping_depth" field.
func ShippingDepthNotIn(vs ...float64) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldShippingDepth), v...))
	})
}

// ShippingDepthGT applies the GT predicate on the "shipping_depth" field.
func ShippingDepthGT(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShippingDepth), v))
	})
}

// ShippingDepthGTE applies the GTE predicate on the "shipping_depth" field.
func ShippingDepthGTE(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShippingDepth), v))
	})
}

// ShippingDepthLT applies the LT predicate on the "shipping_depth" field.
func ShippingDepthLT(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShippingDepth), v))
	})
}

// ShippingDepthLTE applies the LTE predicate on the "shipping_depth" field.
func ShippingDepthLTE(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShippingDepth), v))
	})
}

// ShippingDepthIsNil applies the IsNil predicate on the "shipping_depth" field.
func ShippingDepthIsNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldShippingDepth)))
	})
}

// ShippingDepthNotNil applies the NotNil predicate on the "shipping_depth" field.
func ShippingDepthNotNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldShippingDepth)))
	})
}

// DiameterUomIDEQ applies the EQ predicate on the "diameter_uom_id" field.
func DiameterUomIDEQ(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDiameterUomID), v))
	})
}

// DiameterUomIDNEQ applies the NEQ predicate on the "diameter_uom_id" field.
func DiameterUomIDNEQ(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDiameterUomID), v))
	})
}

// DiameterUomIDIn applies the In predicate on the "diameter_uom_id" field.
func DiameterUomIDIn(vs ...int) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDiameterUomID), v...))
	})
}

// DiameterUomIDNotIn applies the NotIn predicate on the "diameter_uom_id" field.
func DiameterUomIDNotIn(vs ...int) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDiameterUomID), v...))
	})
}

// DiameterUomIDGT applies the GT predicate on the "diameter_uom_id" field.
func DiameterUomIDGT(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDiameterUomID), v))
	})
}

// DiameterUomIDGTE applies the GTE predicate on the "diameter_uom_id" field.
func DiameterUomIDGTE(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDiameterUomID), v))
	})
}

// DiameterUomIDLT applies the LT predicate on the "diameter_uom_id" field.
func DiameterUomIDLT(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDiameterUomID), v))
	})
}

// DiameterUomIDLTE applies the LTE predicate on the "diameter_uom_id" field.
func DiameterUomIDLTE(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDiameterUomID), v))
	})
}

// DiameterUomIDIsNil applies the IsNil predicate on the "diameter_uom_id" field.
func DiameterUomIDIsNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDiameterUomID)))
	})
}

// DiameterUomIDNotNil applies the NotNil predicate on the "diameter_uom_id" field.
func DiameterUomIDNotNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDiameterUomID)))
	})
}

// ProductDiameterEQ applies the EQ predicate on the "product_diameter" field.
func ProductDiameterEQ(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProductDiameter), v))
	})
}

// ProductDiameterNEQ applies the NEQ predicate on the "product_diameter" field.
func ProductDiameterNEQ(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProductDiameter), v))
	})
}

// ProductDiameterIn applies the In predicate on the "product_diameter" field.
func ProductDiameterIn(vs ...float64) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldProductDiameter), v...))
	})
}

// ProductDiameterNotIn applies the NotIn predicate on the "product_diameter" field.
func ProductDiameterNotIn(vs ...float64) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldProductDiameter), v...))
	})
}

// ProductDiameterGT applies the GT predicate on the "product_diameter" field.
func ProductDiameterGT(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProductDiameter), v))
	})
}

// ProductDiameterGTE applies the GTE predicate on the "product_diameter" field.
func ProductDiameterGTE(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProductDiameter), v))
	})
}

// ProductDiameterLT applies the LT predicate on the "product_diameter" field.
func ProductDiameterLT(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProductDiameter), v))
	})
}

// ProductDiameterLTE applies the LTE predicate on the "product_diameter" field.
func ProductDiameterLTE(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProductDiameter), v))
	})
}

// ProductDiameterIsNil applies the IsNil predicate on the "product_diameter" field.
func ProductDiameterIsNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldProductDiameter)))
	})
}

// ProductDiameterNotNil applies the NotNil predicate on the "product_diameter" field.
func ProductDiameterNotNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldProductDiameter)))
	})
}

// ProductRatingEQ applies the EQ predicate on the "product_rating" field.
func ProductRatingEQ(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProductRating), v))
	})
}

// ProductRatingNEQ applies the NEQ predicate on the "product_rating" field.
func ProductRatingNEQ(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProductRating), v))
	})
}

// ProductRatingIn applies the In predicate on the "product_rating" field.
func ProductRatingIn(vs ...float64) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldProductRating), v...))
	})
}

// ProductRatingNotIn applies the NotIn predicate on the "product_rating" field.
func ProductRatingNotIn(vs ...float64) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldProductRating), v...))
	})
}

// ProductRatingGT applies the GT predicate on the "product_rating" field.
func ProductRatingGT(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProductRating), v))
	})
}

// ProductRatingGTE applies the GTE predicate on the "product_rating" field.
func ProductRatingGTE(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProductRating), v))
	})
}

// ProductRatingLT applies the LT predicate on the "product_rating" field.
func ProductRatingLT(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProductRating), v))
	})
}

// ProductRatingLTE applies the LTE predicate on the "product_rating" field.
func ProductRatingLTE(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProductRating), v))
	})
}

// ProductRatingIsNil applies the IsNil predicate on the "product_rating" field.
func ProductRatingIsNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldProductRating)))
	})
}

// ProductRatingNotNil applies the NotNil predicate on the "product_rating" field.
func ProductRatingNotNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldProductRating)))
	})
}

// ReturnableEQ applies the EQ predicate on the "returnable" field.
func ReturnableEQ(v Returnable) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReturnable), v))
	})
}

// ReturnableNEQ applies the NEQ predicate on the "returnable" field.
func ReturnableNEQ(v Returnable) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReturnable), v))
	})
}

// ReturnableIn applies the In predicate on the "returnable" field.
func ReturnableIn(vs ...Returnable) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldReturnable), v...))
	})
}

// ReturnableNotIn applies the NotIn predicate on the "returnable" field.
func ReturnableNotIn(vs ...Returnable) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldReturnable), v...))
	})
}

// ReturnableIsNil applies the IsNil predicate on the "returnable" field.
func ReturnableIsNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldReturnable)))
	})
}

// ReturnableNotNil applies the NotNil predicate on the "returnable" field.
func ReturnableNotNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldReturnable)))
	})
}

// TaxableEQ applies the EQ predicate on the "taxable" field.
func TaxableEQ(v Taxable) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTaxable), v))
	})
}

// TaxableNEQ applies the NEQ predicate on the "taxable" field.
func TaxableNEQ(v Taxable) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTaxable), v))
	})
}

// TaxableIn applies the In predicate on the "taxable" field.
func TaxableIn(vs ...Taxable) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTaxable), v...))
	})
}

// TaxableNotIn applies the NotIn predicate on the "taxable" field.
func TaxableNotIn(vs ...Taxable) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTaxable), v...))
	})
}

// TaxableIsNil applies the IsNil predicate on the "taxable" field.
func TaxableIsNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTaxable)))
	})
}

// TaxableNotNil applies the NotNil predicate on the "taxable" field.
func TaxableNotNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTaxable)))
	})
}

// ChargeShippingEQ applies the EQ predicate on the "charge_shipping" field.
func ChargeShippingEQ(v ChargeShipping) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChargeShipping), v))
	})
}

// ChargeShippingNEQ applies the NEQ predicate on the "charge_shipping" field.
func ChargeShippingNEQ(v ChargeShipping) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldChargeShipping), v))
	})
}

// ChargeShippingIn applies the In predicate on the "charge_shipping" field.
func ChargeShippingIn(vs ...ChargeShipping) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldChargeShipping), v...))
	})
}

// ChargeShippingNotIn applies the NotIn predicate on the "charge_shipping" field.
func ChargeShippingNotIn(vs ...ChargeShipping) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldChargeShipping), v...))
	})
}

// ChargeShippingIsNil applies the IsNil predicate on the "charge_shipping" field.
func ChargeShippingIsNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldChargeShipping)))
	})
}

// ChargeShippingNotNil applies the NotNil predicate on the "charge_shipping" field.
func ChargeShippingNotNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldChargeShipping)))
	})
}

// AutoCreateKeywordsEQ applies the EQ predicate on the "auto_create_keywords" field.
func AutoCreateKeywordsEQ(v AutoCreateKeywords) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAutoCreateKeywords), v))
	})
}

// AutoCreateKeywordsNEQ applies the NEQ predicate on the "auto_create_keywords" field.
func AutoCreateKeywordsNEQ(v AutoCreateKeywords) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAutoCreateKeywords), v))
	})
}

// AutoCreateKeywordsIn applies the In predicate on the "auto_create_keywords" field.
func AutoCreateKeywordsIn(vs ...AutoCreateKeywords) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAutoCreateKeywords), v...))
	})
}

// AutoCreateKeywordsNotIn applies the NotIn predicate on the "auto_create_keywords" field.
func AutoCreateKeywordsNotIn(vs ...AutoCreateKeywords) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAutoCreateKeywords), v...))
	})
}

// AutoCreateKeywordsIsNil applies the IsNil predicate on the "auto_create_keywords" field.
func AutoCreateKeywordsIsNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAutoCreateKeywords)))
	})
}

// AutoCreateKeywordsNotNil applies the NotNil predicate on the "auto_create_keywords" field.
func AutoCreateKeywordsNotNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAutoCreateKeywords)))
	})
}

// IncludeInPromotionsEQ applies the EQ predicate on the "include_in_promotions" field.
func IncludeInPromotionsEQ(v IncludeInPromotions) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIncludeInPromotions), v))
	})
}

// IncludeInPromotionsNEQ applies the NEQ predicate on the "include_in_promotions" field.
func IncludeInPromotionsNEQ(v IncludeInPromotions) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIncludeInPromotions), v))
	})
}

// IncludeInPromotionsIn applies the In predicate on the "include_in_promotions" field.
func IncludeInPromotionsIn(vs ...IncludeInPromotions) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIncludeInPromotions), v...))
	})
}

// IncludeInPromotionsNotIn applies the NotIn predicate on the "include_in_promotions" field.
func IncludeInPromotionsNotIn(vs ...IncludeInPromotions) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIncludeInPromotions), v...))
	})
}

// IncludeInPromotionsIsNil applies the IsNil predicate on the "include_in_promotions" field.
func IncludeInPromotionsIsNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldIncludeInPromotions)))
	})
}

// IncludeInPromotionsNotNil applies the NotNil predicate on the "include_in_promotions" field.
func IncludeInPromotionsNotNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldIncludeInPromotions)))
	})
}

// IsVirtualEQ applies the EQ predicate on the "is_virtual" field.
func IsVirtualEQ(v IsVirtual) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsVirtual), v))
	})
}

// IsVirtualNEQ applies the NEQ predicate on the "is_virtual" field.
func IsVirtualNEQ(v IsVirtual) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsVirtual), v))
	})
}

// IsVirtualIn applies the In predicate on the "is_virtual" field.
func IsVirtualIn(vs ...IsVirtual) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIsVirtual), v...))
	})
}

// IsVirtualNotIn applies the NotIn predicate on the "is_virtual" field.
func IsVirtualNotIn(vs ...IsVirtual) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIsVirtual), v...))
	})
}

// IsVirtualIsNil applies the IsNil predicate on the "is_virtual" field.
func IsVirtualIsNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldIsVirtual)))
	})
}

// IsVirtualNotNil applies the NotNil predicate on the "is_virtual" field.
func IsVirtualNotNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldIsVirtual)))
	})
}

// IsVariantEQ applies the EQ predicate on the "is_variant" field.
func IsVariantEQ(v IsVariant) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsVariant), v))
	})
}

// IsVariantNEQ applies the NEQ predicate on the "is_variant" field.
func IsVariantNEQ(v IsVariant) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsVariant), v))
	})
}

// IsVariantIn applies the In predicate on the "is_variant" field.
func IsVariantIn(vs ...IsVariant) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIsVariant), v...))
	})
}

// IsVariantNotIn applies the NotIn predicate on the "is_variant" field.
func IsVariantNotIn(vs ...IsVariant) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIsVariant), v...))
	})
}

// IsVariantIsNil applies the IsNil predicate on the "is_variant" field.
func IsVariantIsNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldIsVariant)))
	})
}

// IsVariantNotNil applies the NotNil predicate on the "is_variant" field.
func IsVariantNotNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldIsVariant)))
	})
}

// OriginGeoIDEQ applies the EQ predicate on the "origin_geo_id" field.
func OriginGeoIDEQ(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOriginGeoID), v))
	})
}

// OriginGeoIDNEQ applies the NEQ predicate on the "origin_geo_id" field.
func OriginGeoIDNEQ(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOriginGeoID), v))
	})
}

// OriginGeoIDIn applies the In predicate on the "origin_geo_id" field.
func OriginGeoIDIn(vs ...int) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOriginGeoID), v...))
	})
}

// OriginGeoIDNotIn applies the NotIn predicate on the "origin_geo_id" field.
func OriginGeoIDNotIn(vs ...int) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOriginGeoID), v...))
	})
}

// OriginGeoIDGT applies the GT predicate on the "origin_geo_id" field.
func OriginGeoIDGT(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOriginGeoID), v))
	})
}

// OriginGeoIDGTE applies the GTE predicate on the "origin_geo_id" field.
func OriginGeoIDGTE(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOriginGeoID), v))
	})
}

// OriginGeoIDLT applies the LT predicate on the "origin_geo_id" field.
func OriginGeoIDLT(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOriginGeoID), v))
	})
}

// OriginGeoIDLTE applies the LTE predicate on the "origin_geo_id" field.
func OriginGeoIDLTE(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOriginGeoID), v))
	})
}

// OriginGeoIDIsNil applies the IsNil predicate on the "origin_geo_id" field.
func OriginGeoIDIsNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOriginGeoID)))
	})
}

// OriginGeoIDNotNil applies the NotNil predicate on the "origin_geo_id" field.
func OriginGeoIDNotNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOriginGeoID)))
	})
}

// BillOfMaterialLevelEQ applies the EQ predicate on the "bill_of_material_level" field.
func BillOfMaterialLevelEQ(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBillOfMaterialLevel), v))
	})
}

// BillOfMaterialLevelNEQ applies the NEQ predicate on the "bill_of_material_level" field.
func BillOfMaterialLevelNEQ(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBillOfMaterialLevel), v))
	})
}

// BillOfMaterialLevelIn applies the In predicate on the "bill_of_material_level" field.
func BillOfMaterialLevelIn(vs ...int) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBillOfMaterialLevel), v...))
	})
}

// BillOfMaterialLevelNotIn applies the NotIn predicate on the "bill_of_material_level" field.
func BillOfMaterialLevelNotIn(vs ...int) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBillOfMaterialLevel), v...))
	})
}

// BillOfMaterialLevelGT applies the GT predicate on the "bill_of_material_level" field.
func BillOfMaterialLevelGT(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBillOfMaterialLevel), v))
	})
}

// BillOfMaterialLevelGTE applies the GTE predicate on the "bill_of_material_level" field.
func BillOfMaterialLevelGTE(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBillOfMaterialLevel), v))
	})
}

// BillOfMaterialLevelLT applies the LT predicate on the "bill_of_material_level" field.
func BillOfMaterialLevelLT(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBillOfMaterialLevel), v))
	})
}

// BillOfMaterialLevelLTE applies the LTE predicate on the "bill_of_material_level" field.
func BillOfMaterialLevelLTE(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBillOfMaterialLevel), v))
	})
}

// BillOfMaterialLevelIsNil applies the IsNil predicate on the "bill_of_material_level" field.
func BillOfMaterialLevelIsNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldBillOfMaterialLevel)))
	})
}

// BillOfMaterialLevelNotNil applies the NotNil predicate on the "bill_of_material_level" field.
func BillOfMaterialLevelNotNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldBillOfMaterialLevel)))
	})
}

// ReservMaxPersonsEQ applies the EQ predicate on the "reserv_max_persons" field.
func ReservMaxPersonsEQ(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReservMaxPersons), v))
	})
}

// ReservMaxPersonsNEQ applies the NEQ predicate on the "reserv_max_persons" field.
func ReservMaxPersonsNEQ(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReservMaxPersons), v))
	})
}

// ReservMaxPersonsIn applies the In predicate on the "reserv_max_persons" field.
func ReservMaxPersonsIn(vs ...float64) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldReservMaxPersons), v...))
	})
}

// ReservMaxPersonsNotIn applies the NotIn predicate on the "reserv_max_persons" field.
func ReservMaxPersonsNotIn(vs ...float64) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldReservMaxPersons), v...))
	})
}

// ReservMaxPersonsGT applies the GT predicate on the "reserv_max_persons" field.
func ReservMaxPersonsGT(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldReservMaxPersons), v))
	})
}

// ReservMaxPersonsGTE applies the GTE predicate on the "reserv_max_persons" field.
func ReservMaxPersonsGTE(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldReservMaxPersons), v))
	})
}

// ReservMaxPersonsLT applies the LT predicate on the "reserv_max_persons" field.
func ReservMaxPersonsLT(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldReservMaxPersons), v))
	})
}

// ReservMaxPersonsLTE applies the LTE predicate on the "reserv_max_persons" field.
func ReservMaxPersonsLTE(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldReservMaxPersons), v))
	})
}

// ReservMaxPersonsIsNil applies the IsNil predicate on the "reserv_max_persons" field.
func ReservMaxPersonsIsNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldReservMaxPersons)))
	})
}

// ReservMaxPersonsNotNil applies the NotNil predicate on the "reserv_max_persons" field.
func ReservMaxPersonsNotNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldReservMaxPersons)))
	})
}

// Reserv2NdPpPercEQ applies the EQ predicate on the "reserv_2_nd_pp_perc" field.
func Reserv2NdPpPercEQ(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReserv2NdPpPerc), v))
	})
}

// Reserv2NdPpPercNEQ applies the NEQ predicate on the "reserv_2_nd_pp_perc" field.
func Reserv2NdPpPercNEQ(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReserv2NdPpPerc), v))
	})
}

// Reserv2NdPpPercIn applies the In predicate on the "reserv_2_nd_pp_perc" field.
func Reserv2NdPpPercIn(vs ...float64) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldReserv2NdPpPerc), v...))
	})
}

// Reserv2NdPpPercNotIn applies the NotIn predicate on the "reserv_2_nd_pp_perc" field.
func Reserv2NdPpPercNotIn(vs ...float64) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldReserv2NdPpPerc), v...))
	})
}

// Reserv2NdPpPercGT applies the GT predicate on the "reserv_2_nd_pp_perc" field.
func Reserv2NdPpPercGT(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldReserv2NdPpPerc), v))
	})
}

// Reserv2NdPpPercGTE applies the GTE predicate on the "reserv_2_nd_pp_perc" field.
func Reserv2NdPpPercGTE(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldReserv2NdPpPerc), v))
	})
}

// Reserv2NdPpPercLT applies the LT predicate on the "reserv_2_nd_pp_perc" field.
func Reserv2NdPpPercLT(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldReserv2NdPpPerc), v))
	})
}

// Reserv2NdPpPercLTE applies the LTE predicate on the "reserv_2_nd_pp_perc" field.
func Reserv2NdPpPercLTE(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldReserv2NdPpPerc), v))
	})
}

// Reserv2NdPpPercIsNil applies the IsNil predicate on the "reserv_2_nd_pp_perc" field.
func Reserv2NdPpPercIsNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldReserv2NdPpPerc)))
	})
}

// Reserv2NdPpPercNotNil applies the NotNil predicate on the "reserv_2_nd_pp_perc" field.
func Reserv2NdPpPercNotNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldReserv2NdPpPerc)))
	})
}

// ReservNthPpPercEQ applies the EQ predicate on the "reserv_nth_pp_perc" field.
func ReservNthPpPercEQ(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReservNthPpPerc), v))
	})
}

// ReservNthPpPercNEQ applies the NEQ predicate on the "reserv_nth_pp_perc" field.
func ReservNthPpPercNEQ(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReservNthPpPerc), v))
	})
}

// ReservNthPpPercIn applies the In predicate on the "reserv_nth_pp_perc" field.
func ReservNthPpPercIn(vs ...float64) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldReservNthPpPerc), v...))
	})
}

// ReservNthPpPercNotIn applies the NotIn predicate on the "reserv_nth_pp_perc" field.
func ReservNthPpPercNotIn(vs ...float64) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldReservNthPpPerc), v...))
	})
}

// ReservNthPpPercGT applies the GT predicate on the "reserv_nth_pp_perc" field.
func ReservNthPpPercGT(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldReservNthPpPerc), v))
	})
}

// ReservNthPpPercGTE applies the GTE predicate on the "reserv_nth_pp_perc" field.
func ReservNthPpPercGTE(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldReservNthPpPerc), v))
	})
}

// ReservNthPpPercLT applies the LT predicate on the "reserv_nth_pp_perc" field.
func ReservNthPpPercLT(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldReservNthPpPerc), v))
	})
}

// ReservNthPpPercLTE applies the LTE predicate on the "reserv_nth_pp_perc" field.
func ReservNthPpPercLTE(v float64) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldReservNthPpPerc), v))
	})
}

// ReservNthPpPercIsNil applies the IsNil predicate on the "reserv_nth_pp_perc" field.
func ReservNthPpPercIsNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldReservNthPpPerc)))
	})
}

// ReservNthPpPercNotNil applies the NotNil predicate on the "reserv_nth_pp_perc" field.
func ReservNthPpPercNotNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldReservNthPpPerc)))
	})
}

// ConfigIDEQ applies the EQ predicate on the "config_id" field.
func ConfigIDEQ(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldConfigID), v))
	})
}

// ConfigIDNEQ applies the NEQ predicate on the "config_id" field.
func ConfigIDNEQ(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldConfigID), v))
	})
}

// ConfigIDIn applies the In predicate on the "config_id" field.
func ConfigIDIn(vs ...int) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldConfigID), v...))
	})
}

// ConfigIDNotIn applies the NotIn predicate on the "config_id" field.
func ConfigIDNotIn(vs ...int) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldConfigID), v...))
	})
}

// ConfigIDGT applies the GT predicate on the "config_id" field.
func ConfigIDGT(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldConfigID), v))
	})
}

// ConfigIDGTE applies the GTE predicate on the "config_id" field.
func ConfigIDGTE(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldConfigID), v))
	})
}

// ConfigIDLT applies the LT predicate on the "config_id" field.
func ConfigIDLT(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldConfigID), v))
	})
}

// ConfigIDLTE applies the LTE predicate on the "config_id" field.
func ConfigIDLTE(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldConfigID), v))
	})
}

// ConfigIDIsNil applies the IsNil predicate on the "config_id" field.
func ConfigIDIsNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldConfigID)))
	})
}

// ConfigIDNotNil applies the NotNil predicate on the "config_id" field.
func ConfigIDNotNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldConfigID)))
	})
}

// CreatedDateEQ applies the EQ predicate on the "created_date" field.
func CreatedDateEQ(v time.Time) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedDate), v))
	})
}

// CreatedDateNEQ applies the NEQ predicate on the "created_date" field.
func CreatedDateNEQ(v time.Time) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedDate), v))
	})
}

// CreatedDateIn applies the In predicate on the "created_date" field.
func CreatedDateIn(vs ...time.Time) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedDate), v...))
	})
}

// CreatedDateNotIn applies the NotIn predicate on the "created_date" field.
func CreatedDateNotIn(vs ...time.Time) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedDate), v...))
	})
}

// CreatedDateGT applies the GT predicate on the "created_date" field.
func CreatedDateGT(v time.Time) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedDate), v))
	})
}

// CreatedDateGTE applies the GTE predicate on the "created_date" field.
func CreatedDateGTE(v time.Time) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedDate), v))
	})
}

// CreatedDateLT applies the LT predicate on the "created_date" field.
func CreatedDateLT(v time.Time) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedDate), v))
	})
}

// CreatedDateLTE applies the LTE predicate on the "created_date" field.
func CreatedDateLTE(v time.Time) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedDate), v))
	})
}

// CreatedDateIsNil applies the IsNil predicate on the "created_date" field.
func CreatedDateIsNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreatedDate)))
	})
}

// CreatedDateNotNil applies the NotNil predicate on the "created_date" field.
func CreatedDateNotNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreatedDate)))
	})
}

// CreatedByUserLoginEQ applies the EQ predicate on the "created_by_user_login" field.
func CreatedByUserLoginEQ(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedByUserLogin), v))
	})
}

// CreatedByUserLoginNEQ applies the NEQ predicate on the "created_by_user_login" field.
func CreatedByUserLoginNEQ(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedByUserLogin), v))
	})
}

// CreatedByUserLoginIn applies the In predicate on the "created_by_user_login" field.
func CreatedByUserLoginIn(vs ...string) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedByUserLogin), v...))
	})
}

// CreatedByUserLoginNotIn applies the NotIn predicate on the "created_by_user_login" field.
func CreatedByUserLoginNotIn(vs ...string) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedByUserLogin), v...))
	})
}

// CreatedByUserLoginGT applies the GT predicate on the "created_by_user_login" field.
func CreatedByUserLoginGT(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedByUserLogin), v))
	})
}

// CreatedByUserLoginGTE applies the GTE predicate on the "created_by_user_login" field.
func CreatedByUserLoginGTE(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedByUserLogin), v))
	})
}

// CreatedByUserLoginLT applies the LT predicate on the "created_by_user_login" field.
func CreatedByUserLoginLT(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedByUserLogin), v))
	})
}

// CreatedByUserLoginLTE applies the LTE predicate on the "created_by_user_login" field.
func CreatedByUserLoginLTE(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedByUserLogin), v))
	})
}

// CreatedByUserLoginContains applies the Contains predicate on the "created_by_user_login" field.
func CreatedByUserLoginContains(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCreatedByUserLogin), v))
	})
}

// CreatedByUserLoginHasPrefix applies the HasPrefix predicate on the "created_by_user_login" field.
func CreatedByUserLoginHasPrefix(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCreatedByUserLogin), v))
	})
}

// CreatedByUserLoginHasSuffix applies the HasSuffix predicate on the "created_by_user_login" field.
func CreatedByUserLoginHasSuffix(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCreatedByUserLogin), v))
	})
}

// CreatedByUserLoginIsNil applies the IsNil predicate on the "created_by_user_login" field.
func CreatedByUserLoginIsNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreatedByUserLogin)))
	})
}

// CreatedByUserLoginNotNil applies the NotNil predicate on the "created_by_user_login" field.
func CreatedByUserLoginNotNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreatedByUserLogin)))
	})
}

// CreatedByUserLoginEqualFold applies the EqualFold predicate on the "created_by_user_login" field.
func CreatedByUserLoginEqualFold(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCreatedByUserLogin), v))
	})
}

// CreatedByUserLoginContainsFold applies the ContainsFold predicate on the "created_by_user_login" field.
func CreatedByUserLoginContainsFold(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCreatedByUserLogin), v))
	})
}

// LastModifiedDateEQ applies the EQ predicate on the "last_modified_date" field.
func LastModifiedDateEQ(v time.Time) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastModifiedDate), v))
	})
}

// LastModifiedDateNEQ applies the NEQ predicate on the "last_modified_date" field.
func LastModifiedDateNEQ(v time.Time) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLastModifiedDate), v))
	})
}

// LastModifiedDateIn applies the In predicate on the "last_modified_date" field.
func LastModifiedDateIn(vs ...time.Time) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLastModifiedDate), v...))
	})
}

// LastModifiedDateNotIn applies the NotIn predicate on the "last_modified_date" field.
func LastModifiedDateNotIn(vs ...time.Time) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLastModifiedDate), v...))
	})
}

// LastModifiedDateGT applies the GT predicate on the "last_modified_date" field.
func LastModifiedDateGT(v time.Time) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLastModifiedDate), v))
	})
}

// LastModifiedDateGTE applies the GTE predicate on the "last_modified_date" field.
func LastModifiedDateGTE(v time.Time) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLastModifiedDate), v))
	})
}

// LastModifiedDateLT applies the LT predicate on the "last_modified_date" field.
func LastModifiedDateLT(v time.Time) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLastModifiedDate), v))
	})
}

// LastModifiedDateLTE applies the LTE predicate on the "last_modified_date" field.
func LastModifiedDateLTE(v time.Time) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLastModifiedDate), v))
	})
}

// LastModifiedDateIsNil applies the IsNil predicate on the "last_modified_date" field.
func LastModifiedDateIsNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLastModifiedDate)))
	})
}

// LastModifiedDateNotNil applies the NotNil predicate on the "last_modified_date" field.
func LastModifiedDateNotNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLastModifiedDate)))
	})
}

// LastModifiedByUserLoginEQ applies the EQ predicate on the "last_modified_by_user_login" field.
func LastModifiedByUserLoginEQ(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastModifiedByUserLogin), v))
	})
}

// LastModifiedByUserLoginNEQ applies the NEQ predicate on the "last_modified_by_user_login" field.
func LastModifiedByUserLoginNEQ(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLastModifiedByUserLogin), v))
	})
}

// LastModifiedByUserLoginIn applies the In predicate on the "last_modified_by_user_login" field.
func LastModifiedByUserLoginIn(vs ...string) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLastModifiedByUserLogin), v...))
	})
}

// LastModifiedByUserLoginNotIn applies the NotIn predicate on the "last_modified_by_user_login" field.
func LastModifiedByUserLoginNotIn(vs ...string) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLastModifiedByUserLogin), v...))
	})
}

// LastModifiedByUserLoginGT applies the GT predicate on the "last_modified_by_user_login" field.
func LastModifiedByUserLoginGT(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLastModifiedByUserLogin), v))
	})
}

// LastModifiedByUserLoginGTE applies the GTE predicate on the "last_modified_by_user_login" field.
func LastModifiedByUserLoginGTE(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLastModifiedByUserLogin), v))
	})
}

// LastModifiedByUserLoginLT applies the LT predicate on the "last_modified_by_user_login" field.
func LastModifiedByUserLoginLT(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLastModifiedByUserLogin), v))
	})
}

// LastModifiedByUserLoginLTE applies the LTE predicate on the "last_modified_by_user_login" field.
func LastModifiedByUserLoginLTE(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLastModifiedByUserLogin), v))
	})
}

// LastModifiedByUserLoginContains applies the Contains predicate on the "last_modified_by_user_login" field.
func LastModifiedByUserLoginContains(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLastModifiedByUserLogin), v))
	})
}

// LastModifiedByUserLoginHasPrefix applies the HasPrefix predicate on the "last_modified_by_user_login" field.
func LastModifiedByUserLoginHasPrefix(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLastModifiedByUserLogin), v))
	})
}

// LastModifiedByUserLoginHasSuffix applies the HasSuffix predicate on the "last_modified_by_user_login" field.
func LastModifiedByUserLoginHasSuffix(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLastModifiedByUserLogin), v))
	})
}

// LastModifiedByUserLoginIsNil applies the IsNil predicate on the "last_modified_by_user_login" field.
func LastModifiedByUserLoginIsNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLastModifiedByUserLogin)))
	})
}

// LastModifiedByUserLoginNotNil applies the NotNil predicate on the "last_modified_by_user_login" field.
func LastModifiedByUserLoginNotNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLastModifiedByUserLogin)))
	})
}

// LastModifiedByUserLoginEqualFold applies the EqualFold predicate on the "last_modified_by_user_login" field.
func LastModifiedByUserLoginEqualFold(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLastModifiedByUserLogin), v))
	})
}

// LastModifiedByUserLoginContainsFold applies the ContainsFold predicate on the "last_modified_by_user_login" field.
func LastModifiedByUserLoginContainsFold(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLastModifiedByUserLogin), v))
	})
}

// InShippingBoxEQ applies the EQ predicate on the "in_shipping_box" field.
func InShippingBoxEQ(v InShippingBox) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInShippingBox), v))
	})
}

// InShippingBoxNEQ applies the NEQ predicate on the "in_shipping_box" field.
func InShippingBoxNEQ(v InShippingBox) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldInShippingBox), v))
	})
}

// InShippingBoxIn applies the In predicate on the "in_shipping_box" field.
func InShippingBoxIn(vs ...InShippingBox) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldInShippingBox), v...))
	})
}

// InShippingBoxNotIn applies the NotIn predicate on the "in_shipping_box" field.
func InShippingBoxNotIn(vs ...InShippingBox) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldInShippingBox), v...))
	})
}

// InShippingBoxIsNil applies the IsNil predicate on the "in_shipping_box" field.
func InShippingBoxIsNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldInShippingBox)))
	})
}

// InShippingBoxNotNil applies the NotNil predicate on the "in_shipping_box" field.
func InShippingBoxNotNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldInShippingBox)))
	})
}

// DefaultShipmentBoxTypeIDEQ applies the EQ predicate on the "default_shipment_box_type_id" field.
func DefaultShipmentBoxTypeIDEQ(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDefaultShipmentBoxTypeID), v))
	})
}

// DefaultShipmentBoxTypeIDNEQ applies the NEQ predicate on the "default_shipment_box_type_id" field.
func DefaultShipmentBoxTypeIDNEQ(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDefaultShipmentBoxTypeID), v))
	})
}

// DefaultShipmentBoxTypeIDIn applies the In predicate on the "default_shipment_box_type_id" field.
func DefaultShipmentBoxTypeIDIn(vs ...int) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDefaultShipmentBoxTypeID), v...))
	})
}

// DefaultShipmentBoxTypeIDNotIn applies the NotIn predicate on the "default_shipment_box_type_id" field.
func DefaultShipmentBoxTypeIDNotIn(vs ...int) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDefaultShipmentBoxTypeID), v...))
	})
}

// DefaultShipmentBoxTypeIDGT applies the GT predicate on the "default_shipment_box_type_id" field.
func DefaultShipmentBoxTypeIDGT(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDefaultShipmentBoxTypeID), v))
	})
}

// DefaultShipmentBoxTypeIDGTE applies the GTE predicate on the "default_shipment_box_type_id" field.
func DefaultShipmentBoxTypeIDGTE(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDefaultShipmentBoxTypeID), v))
	})
}

// DefaultShipmentBoxTypeIDLT applies the LT predicate on the "default_shipment_box_type_id" field.
func DefaultShipmentBoxTypeIDLT(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDefaultShipmentBoxTypeID), v))
	})
}

// DefaultShipmentBoxTypeIDLTE applies the LTE predicate on the "default_shipment_box_type_id" field.
func DefaultShipmentBoxTypeIDLTE(v int) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDefaultShipmentBoxTypeID), v))
	})
}

// DefaultShipmentBoxTypeIDIsNil applies the IsNil predicate on the "default_shipment_box_type_id" field.
func DefaultShipmentBoxTypeIDIsNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDefaultShipmentBoxTypeID)))
	})
}

// DefaultShipmentBoxTypeIDNotNil applies the NotNil predicate on the "default_shipment_box_type_id" field.
func DefaultShipmentBoxTypeIDNotNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDefaultShipmentBoxTypeID)))
	})
}

// LotIDFilledInEQ applies the EQ predicate on the "lot_id_filled_in" field.
func LotIDFilledInEQ(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLotIDFilledIn), v))
	})
}

// LotIDFilledInNEQ applies the NEQ predicate on the "lot_id_filled_in" field.
func LotIDFilledInNEQ(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLotIDFilledIn), v))
	})
}

// LotIDFilledInIn applies the In predicate on the "lot_id_filled_in" field.
func LotIDFilledInIn(vs ...string) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLotIDFilledIn), v...))
	})
}

// LotIDFilledInNotIn applies the NotIn predicate on the "lot_id_filled_in" field.
func LotIDFilledInNotIn(vs ...string) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLotIDFilledIn), v...))
	})
}

// LotIDFilledInGT applies the GT predicate on the "lot_id_filled_in" field.
func LotIDFilledInGT(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLotIDFilledIn), v))
	})
}

// LotIDFilledInGTE applies the GTE predicate on the "lot_id_filled_in" field.
func LotIDFilledInGTE(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLotIDFilledIn), v))
	})
}

// LotIDFilledInLT applies the LT predicate on the "lot_id_filled_in" field.
func LotIDFilledInLT(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLotIDFilledIn), v))
	})
}

// LotIDFilledInLTE applies the LTE predicate on the "lot_id_filled_in" field.
func LotIDFilledInLTE(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLotIDFilledIn), v))
	})
}

// LotIDFilledInContains applies the Contains predicate on the "lot_id_filled_in" field.
func LotIDFilledInContains(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLotIDFilledIn), v))
	})
}

// LotIDFilledInHasPrefix applies the HasPrefix predicate on the "lot_id_filled_in" field.
func LotIDFilledInHasPrefix(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLotIDFilledIn), v))
	})
}

// LotIDFilledInHasSuffix applies the HasSuffix predicate on the "lot_id_filled_in" field.
func LotIDFilledInHasSuffix(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLotIDFilledIn), v))
	})
}

// LotIDFilledInIsNil applies the IsNil predicate on the "lot_id_filled_in" field.
func LotIDFilledInIsNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLotIDFilledIn)))
	})
}

// LotIDFilledInNotNil applies the NotNil predicate on the "lot_id_filled_in" field.
func LotIDFilledInNotNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLotIDFilledIn)))
	})
}

// LotIDFilledInEqualFold applies the EqualFold predicate on the "lot_id_filled_in" field.
func LotIDFilledInEqualFold(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLotIDFilledIn), v))
	})
}

// LotIDFilledInContainsFold applies the ContainsFold predicate on the "lot_id_filled_in" field.
func LotIDFilledInContainsFold(v string) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLotIDFilledIn), v))
	})
}

// OrderDecimalQuantityEQ applies the EQ predicate on the "order_decimal_quantity" field.
func OrderDecimalQuantityEQ(v OrderDecimalQuantity) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderDecimalQuantity), v))
	})
}

// OrderDecimalQuantityNEQ applies the NEQ predicate on the "order_decimal_quantity" field.
func OrderDecimalQuantityNEQ(v OrderDecimalQuantity) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOrderDecimalQuantity), v))
	})
}

// OrderDecimalQuantityIn applies the In predicate on the "order_decimal_quantity" field.
func OrderDecimalQuantityIn(vs ...OrderDecimalQuantity) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOrderDecimalQuantity), v...))
	})
}

// OrderDecimalQuantityNotIn applies the NotIn predicate on the "order_decimal_quantity" field.
func OrderDecimalQuantityNotIn(vs ...OrderDecimalQuantity) predicate.Product {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Product(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOrderDecimalQuantity), v...))
	})
}

// OrderDecimalQuantityIsNil applies the IsNil predicate on the "order_decimal_quantity" field.
func OrderDecimalQuantityIsNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOrderDecimalQuantity)))
	})
}

// OrderDecimalQuantityNotNil applies the NotNil predicate on the "order_decimal_quantity" field.
func OrderDecimalQuantityNotNil() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOrderDecimalQuantity)))
	})
}

// HasProductType applies the HasEdge predicate on the "product_type" edge.
func HasProductType() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProductTypeTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProductTypeTable, ProductTypeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProductTypeWith applies the HasEdge predicate on the "product_type" edge with a given conditions (other predicates).
func HasProductTypeWith(preds ...predicate.ProductType) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProductTypeInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProductTypeTable, ProductTypeColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPrimaryProductCategory applies the HasEdge predicate on the "primary_product_category" edge.
func HasPrimaryProductCategory() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PrimaryProductCategoryTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PrimaryProductCategoryTable, PrimaryProductCategoryColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPrimaryProductCategoryWith applies the HasEdge predicate on the "primary_product_category" edge with a given conditions (other predicates).
func HasPrimaryProductCategoryWith(preds ...predicate.ProductCategory) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PrimaryProductCategoryInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PrimaryProductCategoryTable, PrimaryProductCategoryColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasVirtualVariantMethodEnumeration applies the HasEdge predicate on the "virtual_variant_method_enumeration" edge.
func HasVirtualVariantMethodEnumeration() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(VirtualVariantMethodEnumerationTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, VirtualVariantMethodEnumerationTable, VirtualVariantMethodEnumerationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasVirtualVariantMethodEnumerationWith applies the HasEdge predicate on the "virtual_variant_method_enumeration" edge with a given conditions (other predicates).
func HasVirtualVariantMethodEnumerationWith(preds ...predicate.Enumeration) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(VirtualVariantMethodEnumerationInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, VirtualVariantMethodEnumerationTable, VirtualVariantMethodEnumerationColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRatingEnumeration applies the HasEdge predicate on the "rating_enumeration" edge.
func HasRatingEnumeration() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RatingEnumerationTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RatingEnumerationTable, RatingEnumerationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRatingEnumerationWith applies the HasEdge predicate on the "rating_enumeration" edge with a given conditions (other predicates).
func HasRatingEnumerationWith(preds ...predicate.Enumeration) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RatingEnumerationInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RatingEnumerationTable, RatingEnumerationColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRequirementMethodEnumeration applies the HasEdge predicate on the "requirement_method_enumeration" edge.
func HasRequirementMethodEnumeration() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RequirementMethodEnumerationTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RequirementMethodEnumerationTable, RequirementMethodEnumerationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRequirementMethodEnumerationWith applies the HasEdge predicate on the "requirement_method_enumeration" edge with a given conditions (other predicates).
func HasRequirementMethodEnumerationWith(preds ...predicate.Enumeration) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RequirementMethodEnumerationInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RequirementMethodEnumerationTable, RequirementMethodEnumerationColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasInventoryItemType applies the HasEdge predicate on the "inventory_item_type" edge.
func HasInventoryItemType() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(InventoryItemTypeTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, InventoryItemTypeTable, InventoryItemTypeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasInventoryItemTypeWith applies the HasEdge predicate on the "inventory_item_type" edge with a given conditions (other predicates).
func HasInventoryItemTypeWith(preds ...predicate.InventoryItemType) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(InventoryItemTypeInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, InventoryItemTypeTable, InventoryItemTypeColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrderItems applies the HasEdge predicate on the "order_items" edge.
func HasOrderItems() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderItemsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrderItemsTable, OrderItemsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderItemsWith applies the HasEdge predicate on the "order_items" edge with a given conditions (other predicates).
func HasOrderItemsWith(preds ...predicate.OrderItem) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderItemsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrderItemsTable, OrderItemsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMainProductAssocs applies the HasEdge predicate on the "main_product_assocs" edge.
func HasMainProductAssocs() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MainProductAssocsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MainProductAssocsTable, MainProductAssocsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMainProductAssocsWith applies the HasEdge predicate on the "main_product_assocs" edge with a given conditions (other predicates).
func HasMainProductAssocsWith(preds ...predicate.ProductAssoc) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MainProductAssocsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MainProductAssocsTable, MainProductAssocsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAssocProductAssocs applies the HasEdge predicate on the "assoc_product_assocs" edge.
func HasAssocProductAssocs() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AssocProductAssocsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AssocProductAssocsTable, AssocProductAssocsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAssocProductAssocsWith applies the HasEdge predicate on the "assoc_product_assocs" edge with a given conditions (other predicates).
func HasAssocProductAssocsWith(preds ...predicate.ProductAssoc) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AssocProductAssocsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AssocProductAssocsTable, AssocProductAssocsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProductPrices applies the HasEdge predicate on the "product_prices" edge.
func HasProductPrices() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProductPricesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ProductPricesTable, ProductPricesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProductPricesWith applies the HasEdge predicate on the "product_prices" edge with a given conditions (other predicates).
func HasProductPricesWith(preds ...predicate.ProductPrice) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProductPricesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ProductPricesTable, ProductPricesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProductReviews applies the HasEdge predicate on the "product_reviews" edge.
func HasProductReviews() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProductReviewsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ProductReviewsTable, ProductReviewsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProductReviewsWith applies the HasEdge predicate on the "product_reviews" edge with a given conditions (other predicates).
func HasProductReviewsWith(preds ...predicate.ProductReview) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProductReviewsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ProductReviewsTable, ProductReviewsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Product) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Product) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Product) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		p(s.Not())
	})
}
