// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/enumeration"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/inventoryitemtype"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/orderitem"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/product"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productassoc"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productcategory"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productprice"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productreview"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/producttype"
)

// ProductCreate is the builder for creating a Product entity.
type ProductCreate struct {
	config
	mutation *ProductMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (pc *ProductCreate) SetCreateTime(t time.Time) *ProductCreate {
	pc.mutation.SetCreateTime(t)
	return pc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (pc *ProductCreate) SetNillableCreateTime(t *time.Time) *ProductCreate {
	if t != nil {
		pc.SetCreateTime(*t)
	}
	return pc
}

// SetUpdateTime sets the "update_time" field.
func (pc *ProductCreate) SetUpdateTime(t time.Time) *ProductCreate {
	pc.mutation.SetUpdateTime(t)
	return pc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (pc *ProductCreate) SetNillableUpdateTime(t *time.Time) *ProductCreate {
	if t != nil {
		pc.SetUpdateTime(*t)
	}
	return pc
}

// SetStringRef sets the "string_ref" field.
func (pc *ProductCreate) SetStringRef(s string) *ProductCreate {
	pc.mutation.SetStringRef(s)
	return pc
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (pc *ProductCreate) SetNillableStringRef(s *string) *ProductCreate {
	if s != nil {
		pc.SetStringRef(*s)
	}
	return pc
}

// SetFacilityID sets the "facility_id" field.
func (pc *ProductCreate) SetFacilityID(i int) *ProductCreate {
	pc.mutation.SetFacilityID(i)
	return pc
}

// SetNillableFacilityID sets the "facility_id" field if the given value is not nil.
func (pc *ProductCreate) SetNillableFacilityID(i *int) *ProductCreate {
	if i != nil {
		pc.SetFacilityID(*i)
	}
	return pc
}

// SetIntroductionDate sets the "introduction_date" field.
func (pc *ProductCreate) SetIntroductionDate(t time.Time) *ProductCreate {
	pc.mutation.SetIntroductionDate(t)
	return pc
}

// SetNillableIntroductionDate sets the "introduction_date" field if the given value is not nil.
func (pc *ProductCreate) SetNillableIntroductionDate(t *time.Time) *ProductCreate {
	if t != nil {
		pc.SetIntroductionDate(*t)
	}
	return pc
}

// SetReleaseDate sets the "release_date" field.
func (pc *ProductCreate) SetReleaseDate(t time.Time) *ProductCreate {
	pc.mutation.SetReleaseDate(t)
	return pc
}

// SetNillableReleaseDate sets the "release_date" field if the given value is not nil.
func (pc *ProductCreate) SetNillableReleaseDate(t *time.Time) *ProductCreate {
	if t != nil {
		pc.SetReleaseDate(*t)
	}
	return pc
}

// SetSupportDiscontinuationDate sets the "support_discontinuation_date" field.
func (pc *ProductCreate) SetSupportDiscontinuationDate(t time.Time) *ProductCreate {
	pc.mutation.SetSupportDiscontinuationDate(t)
	return pc
}

// SetNillableSupportDiscontinuationDate sets the "support_discontinuation_date" field if the given value is not nil.
func (pc *ProductCreate) SetNillableSupportDiscontinuationDate(t *time.Time) *ProductCreate {
	if t != nil {
		pc.SetSupportDiscontinuationDate(*t)
	}
	return pc
}

// SetSalesDiscontinuationDate sets the "sales_discontinuation_date" field.
func (pc *ProductCreate) SetSalesDiscontinuationDate(t time.Time) *ProductCreate {
	pc.mutation.SetSalesDiscontinuationDate(t)
	return pc
}

// SetNillableSalesDiscontinuationDate sets the "sales_discontinuation_date" field if the given value is not nil.
func (pc *ProductCreate) SetNillableSalesDiscontinuationDate(t *time.Time) *ProductCreate {
	if t != nil {
		pc.SetSalesDiscontinuationDate(*t)
	}
	return pc
}

// SetSalesDiscWhenNotAvail sets the "sales_disc_when_not_avail" field.
func (pc *ProductCreate) SetSalesDiscWhenNotAvail(pdwna product.SalesDiscWhenNotAvail) *ProductCreate {
	pc.mutation.SetSalesDiscWhenNotAvail(pdwna)
	return pc
}

// SetNillableSalesDiscWhenNotAvail sets the "sales_disc_when_not_avail" field if the given value is not nil.
func (pc *ProductCreate) SetNillableSalesDiscWhenNotAvail(pdwna *product.SalesDiscWhenNotAvail) *ProductCreate {
	if pdwna != nil {
		pc.SetSalesDiscWhenNotAvail(*pdwna)
	}
	return pc
}

// SetInternalName sets the "internal_name" field.
func (pc *ProductCreate) SetInternalName(s string) *ProductCreate {
	pc.mutation.SetInternalName(s)
	return pc
}

// SetNillableInternalName sets the "internal_name" field if the given value is not nil.
func (pc *ProductCreate) SetNillableInternalName(s *string) *ProductCreate {
	if s != nil {
		pc.SetInternalName(*s)
	}
	return pc
}

// SetBrandName sets the "brand_name" field.
func (pc *ProductCreate) SetBrandName(s string) *ProductCreate {
	pc.mutation.SetBrandName(s)
	return pc
}

// SetNillableBrandName sets the "brand_name" field if the given value is not nil.
func (pc *ProductCreate) SetNillableBrandName(s *string) *ProductCreate {
	if s != nil {
		pc.SetBrandName(*s)
	}
	return pc
}

// SetComments sets the "comments" field.
func (pc *ProductCreate) SetComments(s string) *ProductCreate {
	pc.mutation.SetComments(s)
	return pc
}

// SetNillableComments sets the "comments" field if the given value is not nil.
func (pc *ProductCreate) SetNillableComments(s *string) *ProductCreate {
	if s != nil {
		pc.SetComments(*s)
	}
	return pc
}

// SetProductName sets the "product_name" field.
func (pc *ProductCreate) SetProductName(s string) *ProductCreate {
	pc.mutation.SetProductName(s)
	return pc
}

// SetNillableProductName sets the "product_name" field if the given value is not nil.
func (pc *ProductCreate) SetNillableProductName(s *string) *ProductCreate {
	if s != nil {
		pc.SetProductName(*s)
	}
	return pc
}

// SetDescription sets the "description" field.
func (pc *ProductCreate) SetDescription(s string) *ProductCreate {
	pc.mutation.SetDescription(s)
	return pc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pc *ProductCreate) SetNillableDescription(s *string) *ProductCreate {
	if s != nil {
		pc.SetDescription(*s)
	}
	return pc
}

// SetLongDescription sets the "long_description" field.
func (pc *ProductCreate) SetLongDescription(s string) *ProductCreate {
	pc.mutation.SetLongDescription(s)
	return pc
}

// SetNillableLongDescription sets the "long_description" field if the given value is not nil.
func (pc *ProductCreate) SetNillableLongDescription(s *string) *ProductCreate {
	if s != nil {
		pc.SetLongDescription(*s)
	}
	return pc
}

// SetPriceDetailText sets the "price_detail_text" field.
func (pc *ProductCreate) SetPriceDetailText(s string) *ProductCreate {
	pc.mutation.SetPriceDetailText(s)
	return pc
}

// SetNillablePriceDetailText sets the "price_detail_text" field if the given value is not nil.
func (pc *ProductCreate) SetNillablePriceDetailText(s *string) *ProductCreate {
	if s != nil {
		pc.SetPriceDetailText(*s)
	}
	return pc
}

// SetSmallImageURL sets the "small_image_url" field.
func (pc *ProductCreate) SetSmallImageURL(s string) *ProductCreate {
	pc.mutation.SetSmallImageURL(s)
	return pc
}

// SetNillableSmallImageURL sets the "small_image_url" field if the given value is not nil.
func (pc *ProductCreate) SetNillableSmallImageURL(s *string) *ProductCreate {
	if s != nil {
		pc.SetSmallImageURL(*s)
	}
	return pc
}

// SetMediumImageURL sets the "medium_image_url" field.
func (pc *ProductCreate) SetMediumImageURL(s string) *ProductCreate {
	pc.mutation.SetMediumImageURL(s)
	return pc
}

// SetNillableMediumImageURL sets the "medium_image_url" field if the given value is not nil.
func (pc *ProductCreate) SetNillableMediumImageURL(s *string) *ProductCreate {
	if s != nil {
		pc.SetMediumImageURL(*s)
	}
	return pc
}

// SetLargeImageURL sets the "large_image_url" field.
func (pc *ProductCreate) SetLargeImageURL(s string) *ProductCreate {
	pc.mutation.SetLargeImageURL(s)
	return pc
}

// SetNillableLargeImageURL sets the "large_image_url" field if the given value is not nil.
func (pc *ProductCreate) SetNillableLargeImageURL(s *string) *ProductCreate {
	if s != nil {
		pc.SetLargeImageURL(*s)
	}
	return pc
}

// SetDetailImageURL sets the "detail_image_url" field.
func (pc *ProductCreate) SetDetailImageURL(s string) *ProductCreate {
	pc.mutation.SetDetailImageURL(s)
	return pc
}

// SetNillableDetailImageURL sets the "detail_image_url" field if the given value is not nil.
func (pc *ProductCreate) SetNillableDetailImageURL(s *string) *ProductCreate {
	if s != nil {
		pc.SetDetailImageURL(*s)
	}
	return pc
}

// SetOriginalImageURL sets the "original_image_url" field.
func (pc *ProductCreate) SetOriginalImageURL(s string) *ProductCreate {
	pc.mutation.SetOriginalImageURL(s)
	return pc
}

// SetNillableOriginalImageURL sets the "original_image_url" field if the given value is not nil.
func (pc *ProductCreate) SetNillableOriginalImageURL(s *string) *ProductCreate {
	if s != nil {
		pc.SetOriginalImageURL(*s)
	}
	return pc
}

// SetDetailScreen sets the "detail_screen" field.
func (pc *ProductCreate) SetDetailScreen(s string) *ProductCreate {
	pc.mutation.SetDetailScreen(s)
	return pc
}

// SetNillableDetailScreen sets the "detail_screen" field if the given value is not nil.
func (pc *ProductCreate) SetNillableDetailScreen(s *string) *ProductCreate {
	if s != nil {
		pc.SetDetailScreen(*s)
	}
	return pc
}

// SetInventoryMessage sets the "inventory_message" field.
func (pc *ProductCreate) SetInventoryMessage(s string) *ProductCreate {
	pc.mutation.SetInventoryMessage(s)
	return pc
}

// SetNillableInventoryMessage sets the "inventory_message" field if the given value is not nil.
func (pc *ProductCreate) SetNillableInventoryMessage(s *string) *ProductCreate {
	if s != nil {
		pc.SetInventoryMessage(*s)
	}
	return pc
}

// SetRequireInventory sets the "require_inventory" field.
func (pc *ProductCreate) SetRequireInventory(pi product.RequireInventory) *ProductCreate {
	pc.mutation.SetRequireInventory(pi)
	return pc
}

// SetNillableRequireInventory sets the "require_inventory" field if the given value is not nil.
func (pc *ProductCreate) SetNillableRequireInventory(pi *product.RequireInventory) *ProductCreate {
	if pi != nil {
		pc.SetRequireInventory(*pi)
	}
	return pc
}

// SetQuantityUomID sets the "quantity_uom_id" field.
func (pc *ProductCreate) SetQuantityUomID(i int) *ProductCreate {
	pc.mutation.SetQuantityUomID(i)
	return pc
}

// SetNillableQuantityUomID sets the "quantity_uom_id" field if the given value is not nil.
func (pc *ProductCreate) SetNillableQuantityUomID(i *int) *ProductCreate {
	if i != nil {
		pc.SetQuantityUomID(*i)
	}
	return pc
}

// SetQuantityIncluded sets the "quantity_included" field.
func (pc *ProductCreate) SetQuantityIncluded(f float64) *ProductCreate {
	pc.mutation.SetQuantityIncluded(f)
	return pc
}

// SetNillableQuantityIncluded sets the "quantity_included" field if the given value is not nil.
func (pc *ProductCreate) SetNillableQuantityIncluded(f *float64) *ProductCreate {
	if f != nil {
		pc.SetQuantityIncluded(*f)
	}
	return pc
}

// SetPiecesIncluded sets the "pieces_included" field.
func (pc *ProductCreate) SetPiecesIncluded(i int) *ProductCreate {
	pc.mutation.SetPiecesIncluded(i)
	return pc
}

// SetNillablePiecesIncluded sets the "pieces_included" field if the given value is not nil.
func (pc *ProductCreate) SetNillablePiecesIncluded(i *int) *ProductCreate {
	if i != nil {
		pc.SetPiecesIncluded(*i)
	}
	return pc
}

// SetRequireAmount sets the "require_amount" field.
func (pc *ProductCreate) SetRequireAmount(pa product.RequireAmount) *ProductCreate {
	pc.mutation.SetRequireAmount(pa)
	return pc
}

// SetNillableRequireAmount sets the "require_amount" field if the given value is not nil.
func (pc *ProductCreate) SetNillableRequireAmount(pa *product.RequireAmount) *ProductCreate {
	if pa != nil {
		pc.SetRequireAmount(*pa)
	}
	return pc
}

// SetFixedAmount sets the "fixed_amount" field.
func (pc *ProductCreate) SetFixedAmount(f float64) *ProductCreate {
	pc.mutation.SetFixedAmount(f)
	return pc
}

// SetNillableFixedAmount sets the "fixed_amount" field if the given value is not nil.
func (pc *ProductCreate) SetNillableFixedAmount(f *float64) *ProductCreate {
	if f != nil {
		pc.SetFixedAmount(*f)
	}
	return pc
}

// SetAmountUomTypeID sets the "amount_uom_type_id" field.
func (pc *ProductCreate) SetAmountUomTypeID(i int) *ProductCreate {
	pc.mutation.SetAmountUomTypeID(i)
	return pc
}

// SetNillableAmountUomTypeID sets the "amount_uom_type_id" field if the given value is not nil.
func (pc *ProductCreate) SetNillableAmountUomTypeID(i *int) *ProductCreate {
	if i != nil {
		pc.SetAmountUomTypeID(*i)
	}
	return pc
}

// SetWeightUomID sets the "weight_uom_id" field.
func (pc *ProductCreate) SetWeightUomID(i int) *ProductCreate {
	pc.mutation.SetWeightUomID(i)
	return pc
}

// SetNillableWeightUomID sets the "weight_uom_id" field if the given value is not nil.
func (pc *ProductCreate) SetNillableWeightUomID(i *int) *ProductCreate {
	if i != nil {
		pc.SetWeightUomID(*i)
	}
	return pc
}

// SetShippingWeight sets the "shipping_weight" field.
func (pc *ProductCreate) SetShippingWeight(f float64) *ProductCreate {
	pc.mutation.SetShippingWeight(f)
	return pc
}

// SetNillableShippingWeight sets the "shipping_weight" field if the given value is not nil.
func (pc *ProductCreate) SetNillableShippingWeight(f *float64) *ProductCreate {
	if f != nil {
		pc.SetShippingWeight(*f)
	}
	return pc
}

// SetProductWeight sets the "product_weight" field.
func (pc *ProductCreate) SetProductWeight(f float64) *ProductCreate {
	pc.mutation.SetProductWeight(f)
	return pc
}

// SetNillableProductWeight sets the "product_weight" field if the given value is not nil.
func (pc *ProductCreate) SetNillableProductWeight(f *float64) *ProductCreate {
	if f != nil {
		pc.SetProductWeight(*f)
	}
	return pc
}

// SetHeightUomID sets the "height_uom_id" field.
func (pc *ProductCreate) SetHeightUomID(i int) *ProductCreate {
	pc.mutation.SetHeightUomID(i)
	return pc
}

// SetNillableHeightUomID sets the "height_uom_id" field if the given value is not nil.
func (pc *ProductCreate) SetNillableHeightUomID(i *int) *ProductCreate {
	if i != nil {
		pc.SetHeightUomID(*i)
	}
	return pc
}

// SetProductHeight sets the "product_height" field.
func (pc *ProductCreate) SetProductHeight(f float64) *ProductCreate {
	pc.mutation.SetProductHeight(f)
	return pc
}

// SetNillableProductHeight sets the "product_height" field if the given value is not nil.
func (pc *ProductCreate) SetNillableProductHeight(f *float64) *ProductCreate {
	if f != nil {
		pc.SetProductHeight(*f)
	}
	return pc
}

// SetShippingHeight sets the "shipping_height" field.
func (pc *ProductCreate) SetShippingHeight(f float64) *ProductCreate {
	pc.mutation.SetShippingHeight(f)
	return pc
}

// SetNillableShippingHeight sets the "shipping_height" field if the given value is not nil.
func (pc *ProductCreate) SetNillableShippingHeight(f *float64) *ProductCreate {
	if f != nil {
		pc.SetShippingHeight(*f)
	}
	return pc
}

// SetWidthUomID sets the "width_uom_id" field.
func (pc *ProductCreate) SetWidthUomID(i int) *ProductCreate {
	pc.mutation.SetWidthUomID(i)
	return pc
}

// SetNillableWidthUomID sets the "width_uom_id" field if the given value is not nil.
func (pc *ProductCreate) SetNillableWidthUomID(i *int) *ProductCreate {
	if i != nil {
		pc.SetWidthUomID(*i)
	}
	return pc
}

// SetProductWidth sets the "product_width" field.
func (pc *ProductCreate) SetProductWidth(f float64) *ProductCreate {
	pc.mutation.SetProductWidth(f)
	return pc
}

// SetNillableProductWidth sets the "product_width" field if the given value is not nil.
func (pc *ProductCreate) SetNillableProductWidth(f *float64) *ProductCreate {
	if f != nil {
		pc.SetProductWidth(*f)
	}
	return pc
}

// SetShippingWidth sets the "shipping_width" field.
func (pc *ProductCreate) SetShippingWidth(f float64) *ProductCreate {
	pc.mutation.SetShippingWidth(f)
	return pc
}

// SetNillableShippingWidth sets the "shipping_width" field if the given value is not nil.
func (pc *ProductCreate) SetNillableShippingWidth(f *float64) *ProductCreate {
	if f != nil {
		pc.SetShippingWidth(*f)
	}
	return pc
}

// SetDepthUomID sets the "depth_uom_id" field.
func (pc *ProductCreate) SetDepthUomID(i int) *ProductCreate {
	pc.mutation.SetDepthUomID(i)
	return pc
}

// SetNillableDepthUomID sets the "depth_uom_id" field if the given value is not nil.
func (pc *ProductCreate) SetNillableDepthUomID(i *int) *ProductCreate {
	if i != nil {
		pc.SetDepthUomID(*i)
	}
	return pc
}

// SetProductDepth sets the "product_depth" field.
func (pc *ProductCreate) SetProductDepth(f float64) *ProductCreate {
	pc.mutation.SetProductDepth(f)
	return pc
}

// SetNillableProductDepth sets the "product_depth" field if the given value is not nil.
func (pc *ProductCreate) SetNillableProductDepth(f *float64) *ProductCreate {
	if f != nil {
		pc.SetProductDepth(*f)
	}
	return pc
}

// SetShippingDepth sets the "shipping_depth" field.
func (pc *ProductCreate) SetShippingDepth(f float64) *ProductCreate {
	pc.mutation.SetShippingDepth(f)
	return pc
}

// SetNillableShippingDepth sets the "shipping_depth" field if the given value is not nil.
func (pc *ProductCreate) SetNillableShippingDepth(f *float64) *ProductCreate {
	if f != nil {
		pc.SetShippingDepth(*f)
	}
	return pc
}

// SetDiameterUomID sets the "diameter_uom_id" field.
func (pc *ProductCreate) SetDiameterUomID(i int) *ProductCreate {
	pc.mutation.SetDiameterUomID(i)
	return pc
}

// SetNillableDiameterUomID sets the "diameter_uom_id" field if the given value is not nil.
func (pc *ProductCreate) SetNillableDiameterUomID(i *int) *ProductCreate {
	if i != nil {
		pc.SetDiameterUomID(*i)
	}
	return pc
}

// SetProductDiameter sets the "product_diameter" field.
func (pc *ProductCreate) SetProductDiameter(f float64) *ProductCreate {
	pc.mutation.SetProductDiameter(f)
	return pc
}

// SetNillableProductDiameter sets the "product_diameter" field if the given value is not nil.
func (pc *ProductCreate) SetNillableProductDiameter(f *float64) *ProductCreate {
	if f != nil {
		pc.SetProductDiameter(*f)
	}
	return pc
}

// SetProductRating sets the "product_rating" field.
func (pc *ProductCreate) SetProductRating(f float64) *ProductCreate {
	pc.mutation.SetProductRating(f)
	return pc
}

// SetNillableProductRating sets the "product_rating" field if the given value is not nil.
func (pc *ProductCreate) SetNillableProductRating(f *float64) *ProductCreate {
	if f != nil {
		pc.SetProductRating(*f)
	}
	return pc
}

// SetReturnable sets the "returnable" field.
func (pc *ProductCreate) SetReturnable(pr product.Returnable) *ProductCreate {
	pc.mutation.SetReturnable(pr)
	return pc
}

// SetNillableReturnable sets the "returnable" field if the given value is not nil.
func (pc *ProductCreate) SetNillableReturnable(pr *product.Returnable) *ProductCreate {
	if pr != nil {
		pc.SetReturnable(*pr)
	}
	return pc
}

// SetTaxable sets the "taxable" field.
func (pc *ProductCreate) SetTaxable(pr product.Taxable) *ProductCreate {
	pc.mutation.SetTaxable(pr)
	return pc
}

// SetNillableTaxable sets the "taxable" field if the given value is not nil.
func (pc *ProductCreate) SetNillableTaxable(pr *product.Taxable) *ProductCreate {
	if pr != nil {
		pc.SetTaxable(*pr)
	}
	return pc
}

// SetChargeShipping sets the "charge_shipping" field.
func (pc *ProductCreate) SetChargeShipping(ps product.ChargeShipping) *ProductCreate {
	pc.mutation.SetChargeShipping(ps)
	return pc
}

// SetNillableChargeShipping sets the "charge_shipping" field if the given value is not nil.
func (pc *ProductCreate) SetNillableChargeShipping(ps *product.ChargeShipping) *ProductCreate {
	if ps != nil {
		pc.SetChargeShipping(*ps)
	}
	return pc
}

// SetAutoCreateKeywords sets the "auto_create_keywords" field.
func (pc *ProductCreate) SetAutoCreateKeywords(pck product.AutoCreateKeywords) *ProductCreate {
	pc.mutation.SetAutoCreateKeywords(pck)
	return pc
}

// SetNillableAutoCreateKeywords sets the "auto_create_keywords" field if the given value is not nil.
func (pc *ProductCreate) SetNillableAutoCreateKeywords(pck *product.AutoCreateKeywords) *ProductCreate {
	if pck != nil {
		pc.SetAutoCreateKeywords(*pck)
	}
	return pc
}

// SetIncludeInPromotions sets the "include_in_promotions" field.
func (pc *ProductCreate) SetIncludeInPromotions(pip product.IncludeInPromotions) *ProductCreate {
	pc.mutation.SetIncludeInPromotions(pip)
	return pc
}

// SetNillableIncludeInPromotions sets the "include_in_promotions" field if the given value is not nil.
func (pc *ProductCreate) SetNillableIncludeInPromotions(pip *product.IncludeInPromotions) *ProductCreate {
	if pip != nil {
		pc.SetIncludeInPromotions(*pip)
	}
	return pc
}

// SetIsVirtual sets the "is_virtual" field.
func (pc *ProductCreate) SetIsVirtual(pv product.IsVirtual) *ProductCreate {
	pc.mutation.SetIsVirtual(pv)
	return pc
}

// SetNillableIsVirtual sets the "is_virtual" field if the given value is not nil.
func (pc *ProductCreate) SetNillableIsVirtual(pv *product.IsVirtual) *ProductCreate {
	if pv != nil {
		pc.SetIsVirtual(*pv)
	}
	return pc
}

// SetIsVariant sets the "is_variant" field.
func (pc *ProductCreate) SetIsVariant(pv product.IsVariant) *ProductCreate {
	pc.mutation.SetIsVariant(pv)
	return pc
}

// SetNillableIsVariant sets the "is_variant" field if the given value is not nil.
func (pc *ProductCreate) SetNillableIsVariant(pv *product.IsVariant) *ProductCreate {
	if pv != nil {
		pc.SetIsVariant(*pv)
	}
	return pc
}

// SetOriginGeoID sets the "origin_geo_id" field.
func (pc *ProductCreate) SetOriginGeoID(i int) *ProductCreate {
	pc.mutation.SetOriginGeoID(i)
	return pc
}

// SetNillableOriginGeoID sets the "origin_geo_id" field if the given value is not nil.
func (pc *ProductCreate) SetNillableOriginGeoID(i *int) *ProductCreate {
	if i != nil {
		pc.SetOriginGeoID(*i)
	}
	return pc
}

// SetBillOfMaterialLevel sets the "bill_of_material_level" field.
func (pc *ProductCreate) SetBillOfMaterialLevel(i int) *ProductCreate {
	pc.mutation.SetBillOfMaterialLevel(i)
	return pc
}

// SetNillableBillOfMaterialLevel sets the "bill_of_material_level" field if the given value is not nil.
func (pc *ProductCreate) SetNillableBillOfMaterialLevel(i *int) *ProductCreate {
	if i != nil {
		pc.SetBillOfMaterialLevel(*i)
	}
	return pc
}

// SetReservMaxPersons sets the "reserv_max_persons" field.
func (pc *ProductCreate) SetReservMaxPersons(f float64) *ProductCreate {
	pc.mutation.SetReservMaxPersons(f)
	return pc
}

// SetNillableReservMaxPersons sets the "reserv_max_persons" field if the given value is not nil.
func (pc *ProductCreate) SetNillableReservMaxPersons(f *float64) *ProductCreate {
	if f != nil {
		pc.SetReservMaxPersons(*f)
	}
	return pc
}

// SetReserv2NdPpPerc sets the "reserv_2_nd_pp_perc" field.
func (pc *ProductCreate) SetReserv2NdPpPerc(f float64) *ProductCreate {
	pc.mutation.SetReserv2NdPpPerc(f)
	return pc
}

// SetNillableReserv2NdPpPerc sets the "reserv_2_nd_pp_perc" field if the given value is not nil.
func (pc *ProductCreate) SetNillableReserv2NdPpPerc(f *float64) *ProductCreate {
	if f != nil {
		pc.SetReserv2NdPpPerc(*f)
	}
	return pc
}

// SetReservNthPpPerc sets the "reserv_nth_pp_perc" field.
func (pc *ProductCreate) SetReservNthPpPerc(f float64) *ProductCreate {
	pc.mutation.SetReservNthPpPerc(f)
	return pc
}

// SetNillableReservNthPpPerc sets the "reserv_nth_pp_perc" field if the given value is not nil.
func (pc *ProductCreate) SetNillableReservNthPpPerc(f *float64) *ProductCreate {
	if f != nil {
		pc.SetReservNthPpPerc(*f)
	}
	return pc
}

// SetConfigID sets the "config_id" field.
func (pc *ProductCreate) SetConfigID(i int) *ProductCreate {
	pc.mutation.SetConfigID(i)
	return pc
}

// SetNillableConfigID sets the "config_id" field if the given value is not nil.
func (pc *ProductCreate) SetNillableConfigID(i *int) *ProductCreate {
	if i != nil {
		pc.SetConfigID(*i)
	}
	return pc
}

// SetCreatedDate sets the "created_date" field.
func (pc *ProductCreate) SetCreatedDate(t time.Time) *ProductCreate {
	pc.mutation.SetCreatedDate(t)
	return pc
}

// SetNillableCreatedDate sets the "created_date" field if the given value is not nil.
func (pc *ProductCreate) SetNillableCreatedDate(t *time.Time) *ProductCreate {
	if t != nil {
		pc.SetCreatedDate(*t)
	}
	return pc
}

// SetCreatedByUserLogin sets the "created_by_user_login" field.
func (pc *ProductCreate) SetCreatedByUserLogin(s string) *ProductCreate {
	pc.mutation.SetCreatedByUserLogin(s)
	return pc
}

// SetNillableCreatedByUserLogin sets the "created_by_user_login" field if the given value is not nil.
func (pc *ProductCreate) SetNillableCreatedByUserLogin(s *string) *ProductCreate {
	if s != nil {
		pc.SetCreatedByUserLogin(*s)
	}
	return pc
}

// SetLastModifiedDate sets the "last_modified_date" field.
func (pc *ProductCreate) SetLastModifiedDate(t time.Time) *ProductCreate {
	pc.mutation.SetLastModifiedDate(t)
	return pc
}

// SetNillableLastModifiedDate sets the "last_modified_date" field if the given value is not nil.
func (pc *ProductCreate) SetNillableLastModifiedDate(t *time.Time) *ProductCreate {
	if t != nil {
		pc.SetLastModifiedDate(*t)
	}
	return pc
}

// SetLastModifiedByUserLogin sets the "last_modified_by_user_login" field.
func (pc *ProductCreate) SetLastModifiedByUserLogin(s string) *ProductCreate {
	pc.mutation.SetLastModifiedByUserLogin(s)
	return pc
}

// SetNillableLastModifiedByUserLogin sets the "last_modified_by_user_login" field if the given value is not nil.
func (pc *ProductCreate) SetNillableLastModifiedByUserLogin(s *string) *ProductCreate {
	if s != nil {
		pc.SetLastModifiedByUserLogin(*s)
	}
	return pc
}

// SetInShippingBox sets the "in_shipping_box" field.
func (pc *ProductCreate) SetInShippingBox(psb product.InShippingBox) *ProductCreate {
	pc.mutation.SetInShippingBox(psb)
	return pc
}

// SetNillableInShippingBox sets the "in_shipping_box" field if the given value is not nil.
func (pc *ProductCreate) SetNillableInShippingBox(psb *product.InShippingBox) *ProductCreate {
	if psb != nil {
		pc.SetInShippingBox(*psb)
	}
	return pc
}

// SetDefaultShipmentBoxTypeID sets the "default_shipment_box_type_id" field.
func (pc *ProductCreate) SetDefaultShipmentBoxTypeID(i int) *ProductCreate {
	pc.mutation.SetDefaultShipmentBoxTypeID(i)
	return pc
}

// SetNillableDefaultShipmentBoxTypeID sets the "default_shipment_box_type_id" field if the given value is not nil.
func (pc *ProductCreate) SetNillableDefaultShipmentBoxTypeID(i *int) *ProductCreate {
	if i != nil {
		pc.SetDefaultShipmentBoxTypeID(*i)
	}
	return pc
}

// SetLotIDFilledIn sets the "lot_id_filled_in" field.
func (pc *ProductCreate) SetLotIDFilledIn(s string) *ProductCreate {
	pc.mutation.SetLotIDFilledIn(s)
	return pc
}

// SetNillableLotIDFilledIn sets the "lot_id_filled_in" field if the given value is not nil.
func (pc *ProductCreate) SetNillableLotIDFilledIn(s *string) *ProductCreate {
	if s != nil {
		pc.SetLotIDFilledIn(*s)
	}
	return pc
}

// SetOrderDecimalQuantity sets the "order_decimal_quantity" field.
func (pc *ProductCreate) SetOrderDecimalQuantity(pdq product.OrderDecimalQuantity) *ProductCreate {
	pc.mutation.SetOrderDecimalQuantity(pdq)
	return pc
}

// SetNillableOrderDecimalQuantity sets the "order_decimal_quantity" field if the given value is not nil.
func (pc *ProductCreate) SetNillableOrderDecimalQuantity(pdq *product.OrderDecimalQuantity) *ProductCreate {
	if pdq != nil {
		pc.SetOrderDecimalQuantity(*pdq)
	}
	return pc
}

// SetProductTypeID sets the "product_type" edge to the ProductType entity by ID.
func (pc *ProductCreate) SetProductTypeID(id int) *ProductCreate {
	pc.mutation.SetProductTypeID(id)
	return pc
}

// SetNillableProductTypeID sets the "product_type" edge to the ProductType entity by ID if the given value is not nil.
func (pc *ProductCreate) SetNillableProductTypeID(id *int) *ProductCreate {
	if id != nil {
		pc = pc.SetProductTypeID(*id)
	}
	return pc
}

// SetProductType sets the "product_type" edge to the ProductType entity.
func (pc *ProductCreate) SetProductType(p *ProductType) *ProductCreate {
	return pc.SetProductTypeID(p.ID)
}

// SetPrimaryProductCategoryID sets the "primary_product_category" edge to the ProductCategory entity by ID.
func (pc *ProductCreate) SetPrimaryProductCategoryID(id int) *ProductCreate {
	pc.mutation.SetPrimaryProductCategoryID(id)
	return pc
}

// SetNillablePrimaryProductCategoryID sets the "primary_product_category" edge to the ProductCategory entity by ID if the given value is not nil.
func (pc *ProductCreate) SetNillablePrimaryProductCategoryID(id *int) *ProductCreate {
	if id != nil {
		pc = pc.SetPrimaryProductCategoryID(*id)
	}
	return pc
}

// SetPrimaryProductCategory sets the "primary_product_category" edge to the ProductCategory entity.
func (pc *ProductCreate) SetPrimaryProductCategory(p *ProductCategory) *ProductCreate {
	return pc.SetPrimaryProductCategoryID(p.ID)
}

// SetVirtualVariantMethodEnumerationID sets the "virtual_variant_method_enumeration" edge to the Enumeration entity by ID.
func (pc *ProductCreate) SetVirtualVariantMethodEnumerationID(id int) *ProductCreate {
	pc.mutation.SetVirtualVariantMethodEnumerationID(id)
	return pc
}

// SetNillableVirtualVariantMethodEnumerationID sets the "virtual_variant_method_enumeration" edge to the Enumeration entity by ID if the given value is not nil.
func (pc *ProductCreate) SetNillableVirtualVariantMethodEnumerationID(id *int) *ProductCreate {
	if id != nil {
		pc = pc.SetVirtualVariantMethodEnumerationID(*id)
	}
	return pc
}

// SetVirtualVariantMethodEnumeration sets the "virtual_variant_method_enumeration" edge to the Enumeration entity.
func (pc *ProductCreate) SetVirtualVariantMethodEnumeration(e *Enumeration) *ProductCreate {
	return pc.SetVirtualVariantMethodEnumerationID(e.ID)
}

// SetRatingEnumerationID sets the "rating_enumeration" edge to the Enumeration entity by ID.
func (pc *ProductCreate) SetRatingEnumerationID(id int) *ProductCreate {
	pc.mutation.SetRatingEnumerationID(id)
	return pc
}

// SetNillableRatingEnumerationID sets the "rating_enumeration" edge to the Enumeration entity by ID if the given value is not nil.
func (pc *ProductCreate) SetNillableRatingEnumerationID(id *int) *ProductCreate {
	if id != nil {
		pc = pc.SetRatingEnumerationID(*id)
	}
	return pc
}

// SetRatingEnumeration sets the "rating_enumeration" edge to the Enumeration entity.
func (pc *ProductCreate) SetRatingEnumeration(e *Enumeration) *ProductCreate {
	return pc.SetRatingEnumerationID(e.ID)
}

// SetRequirementMethodEnumerationID sets the "requirement_method_enumeration" edge to the Enumeration entity by ID.
func (pc *ProductCreate) SetRequirementMethodEnumerationID(id int) *ProductCreate {
	pc.mutation.SetRequirementMethodEnumerationID(id)
	return pc
}

// SetNillableRequirementMethodEnumerationID sets the "requirement_method_enumeration" edge to the Enumeration entity by ID if the given value is not nil.
func (pc *ProductCreate) SetNillableRequirementMethodEnumerationID(id *int) *ProductCreate {
	if id != nil {
		pc = pc.SetRequirementMethodEnumerationID(*id)
	}
	return pc
}

// SetRequirementMethodEnumeration sets the "requirement_method_enumeration" edge to the Enumeration entity.
func (pc *ProductCreate) SetRequirementMethodEnumeration(e *Enumeration) *ProductCreate {
	return pc.SetRequirementMethodEnumerationID(e.ID)
}

// SetInventoryItemTypeID sets the "inventory_item_type" edge to the InventoryItemType entity by ID.
func (pc *ProductCreate) SetInventoryItemTypeID(id int) *ProductCreate {
	pc.mutation.SetInventoryItemTypeID(id)
	return pc
}

// SetNillableInventoryItemTypeID sets the "inventory_item_type" edge to the InventoryItemType entity by ID if the given value is not nil.
func (pc *ProductCreate) SetNillableInventoryItemTypeID(id *int) *ProductCreate {
	if id != nil {
		pc = pc.SetInventoryItemTypeID(*id)
	}
	return pc
}

// SetInventoryItemType sets the "inventory_item_type" edge to the InventoryItemType entity.
func (pc *ProductCreate) SetInventoryItemType(i *InventoryItemType) *ProductCreate {
	return pc.SetInventoryItemTypeID(i.ID)
}

// AddOrderItemIDs adds the "order_items" edge to the OrderItem entity by IDs.
func (pc *ProductCreate) AddOrderItemIDs(ids ...int) *ProductCreate {
	pc.mutation.AddOrderItemIDs(ids...)
	return pc
}

// AddOrderItems adds the "order_items" edges to the OrderItem entity.
func (pc *ProductCreate) AddOrderItems(o ...*OrderItem) *ProductCreate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return pc.AddOrderItemIDs(ids...)
}

// AddMainProductAssocIDs adds the "main_product_assocs" edge to the ProductAssoc entity by IDs.
func (pc *ProductCreate) AddMainProductAssocIDs(ids ...int) *ProductCreate {
	pc.mutation.AddMainProductAssocIDs(ids...)
	return pc
}

// AddMainProductAssocs adds the "main_product_assocs" edges to the ProductAssoc entity.
func (pc *ProductCreate) AddMainProductAssocs(p ...*ProductAssoc) *ProductCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pc.AddMainProductAssocIDs(ids...)
}

// AddAssocProductAssocIDs adds the "assoc_product_assocs" edge to the ProductAssoc entity by IDs.
func (pc *ProductCreate) AddAssocProductAssocIDs(ids ...int) *ProductCreate {
	pc.mutation.AddAssocProductAssocIDs(ids...)
	return pc
}

// AddAssocProductAssocs adds the "assoc_product_assocs" edges to the ProductAssoc entity.
func (pc *ProductCreate) AddAssocProductAssocs(p ...*ProductAssoc) *ProductCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pc.AddAssocProductAssocIDs(ids...)
}

// AddProductPriceIDs adds the "product_prices" edge to the ProductPrice entity by IDs.
func (pc *ProductCreate) AddProductPriceIDs(ids ...int) *ProductCreate {
	pc.mutation.AddProductPriceIDs(ids...)
	return pc
}

// AddProductPrices adds the "product_prices" edges to the ProductPrice entity.
func (pc *ProductCreate) AddProductPrices(p ...*ProductPrice) *ProductCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pc.AddProductPriceIDs(ids...)
}

// AddProductReviewIDs adds the "product_reviews" edge to the ProductReview entity by IDs.
func (pc *ProductCreate) AddProductReviewIDs(ids ...int) *ProductCreate {
	pc.mutation.AddProductReviewIDs(ids...)
	return pc
}

// AddProductReviews adds the "product_reviews" edges to the ProductReview entity.
func (pc *ProductCreate) AddProductReviews(p ...*ProductReview) *ProductCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pc.AddProductReviewIDs(ids...)
}

// Mutation returns the ProductMutation object of the builder.
func (pc *ProductCreate) Mutation() *ProductMutation {
	return pc.mutation
}

// Save creates the Product in the database.
func (pc *ProductCreate) Save(ctx context.Context) (*Product, error) {
	var (
		err  error
		node *Product
	)
	pc.defaults()
	if len(pc.hooks) == 0 {
		if err = pc.check(); err != nil {
			return nil, err
		}
		node, err = pc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProductMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pc.check(); err != nil {
				return nil, err
			}
			pc.mutation = mutation
			if node, err = pc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(pc.hooks) - 1; i >= 0; i-- {
			mut = pc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pc *ProductCreate) SaveX(ctx context.Context) *Product {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (pc *ProductCreate) defaults() {
	if _, ok := pc.mutation.CreateTime(); !ok {
		v := product.DefaultCreateTime()
		pc.mutation.SetCreateTime(v)
	}
	if _, ok := pc.mutation.UpdateTime(); !ok {
		v := product.DefaultUpdateTime()
		pc.mutation.SetUpdateTime(v)
	}
	if _, ok := pc.mutation.IntroductionDate(); !ok {
		v := product.DefaultIntroductionDate()
		pc.mutation.SetIntroductionDate(v)
	}
	if _, ok := pc.mutation.ReleaseDate(); !ok {
		v := product.DefaultReleaseDate()
		pc.mutation.SetReleaseDate(v)
	}
	if _, ok := pc.mutation.SupportDiscontinuationDate(); !ok {
		v := product.DefaultSupportDiscontinuationDate()
		pc.mutation.SetSupportDiscontinuationDate(v)
	}
	if _, ok := pc.mutation.SalesDiscontinuationDate(); !ok {
		v := product.DefaultSalesDiscontinuationDate()
		pc.mutation.SetSalesDiscontinuationDate(v)
	}
	if _, ok := pc.mutation.CreatedDate(); !ok {
		v := product.DefaultCreatedDate()
		pc.mutation.SetCreatedDate(v)
	}
	if _, ok := pc.mutation.LastModifiedDate(); !ok {
		v := product.DefaultLastModifiedDate()
		pc.mutation.SetLastModifiedDate(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *ProductCreate) check() error {
	if _, ok := pc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New("ent: missing required field \"create_time\"")}
	}
	if _, ok := pc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New("ent: missing required field \"update_time\"")}
	}
	if v, ok := pc.mutation.SalesDiscWhenNotAvail(); ok {
		if err := product.SalesDiscWhenNotAvailValidator(v); err != nil {
			return &ValidationError{Name: "sales_disc_when_not_avail", err: fmt.Errorf("ent: validator failed for field \"sales_disc_when_not_avail\": %w", err)}
		}
	}
	if v, ok := pc.mutation.RequireInventory(); ok {
		if err := product.RequireInventoryValidator(v); err != nil {
			return &ValidationError{Name: "require_inventory", err: fmt.Errorf("ent: validator failed for field \"require_inventory\": %w", err)}
		}
	}
	if v, ok := pc.mutation.RequireAmount(); ok {
		if err := product.RequireAmountValidator(v); err != nil {
			return &ValidationError{Name: "require_amount", err: fmt.Errorf("ent: validator failed for field \"require_amount\": %w", err)}
		}
	}
	if v, ok := pc.mutation.Returnable(); ok {
		if err := product.ReturnableValidator(v); err != nil {
			return &ValidationError{Name: "returnable", err: fmt.Errorf("ent: validator failed for field \"returnable\": %w", err)}
		}
	}
	if v, ok := pc.mutation.Taxable(); ok {
		if err := product.TaxableValidator(v); err != nil {
			return &ValidationError{Name: "taxable", err: fmt.Errorf("ent: validator failed for field \"taxable\": %w", err)}
		}
	}
	if v, ok := pc.mutation.ChargeShipping(); ok {
		if err := product.ChargeShippingValidator(v); err != nil {
			return &ValidationError{Name: "charge_shipping", err: fmt.Errorf("ent: validator failed for field \"charge_shipping\": %w", err)}
		}
	}
	if v, ok := pc.mutation.AutoCreateKeywords(); ok {
		if err := product.AutoCreateKeywordsValidator(v); err != nil {
			return &ValidationError{Name: "auto_create_keywords", err: fmt.Errorf("ent: validator failed for field \"auto_create_keywords\": %w", err)}
		}
	}
	if v, ok := pc.mutation.IncludeInPromotions(); ok {
		if err := product.IncludeInPromotionsValidator(v); err != nil {
			return &ValidationError{Name: "include_in_promotions", err: fmt.Errorf("ent: validator failed for field \"include_in_promotions\": %w", err)}
		}
	}
	if v, ok := pc.mutation.IsVirtual(); ok {
		if err := product.IsVirtualValidator(v); err != nil {
			return &ValidationError{Name: "is_virtual", err: fmt.Errorf("ent: validator failed for field \"is_virtual\": %w", err)}
		}
	}
	if v, ok := pc.mutation.IsVariant(); ok {
		if err := product.IsVariantValidator(v); err != nil {
			return &ValidationError{Name: "is_variant", err: fmt.Errorf("ent: validator failed for field \"is_variant\": %w", err)}
		}
	}
	if v, ok := pc.mutation.InShippingBox(); ok {
		if err := product.InShippingBoxValidator(v); err != nil {
			return &ValidationError{Name: "in_shipping_box", err: fmt.Errorf("ent: validator failed for field \"in_shipping_box\": %w", err)}
		}
	}
	if v, ok := pc.mutation.OrderDecimalQuantity(); ok {
		if err := product.OrderDecimalQuantityValidator(v); err != nil {
			return &ValidationError{Name: "order_decimal_quantity", err: fmt.Errorf("ent: validator failed for field \"order_decimal_quantity\": %w", err)}
		}
	}
	return nil
}

func (pc *ProductCreate) sqlSave(ctx context.Context) (*Product, error) {
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (pc *ProductCreate) createSpec() (*Product, *sqlgraph.CreateSpec) {
	var (
		_node = &Product{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: product.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: product.FieldID,
			},
		}
	)
	if value, ok := pc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: product.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := pc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: product.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := pc.mutation.StringRef(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: product.FieldStringRef,
		})
		_node.StringRef = value
	}
	if value, ok := pc.mutation.FacilityID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: product.FieldFacilityID,
		})
		_node.FacilityID = value
	}
	if value, ok := pc.mutation.IntroductionDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: product.FieldIntroductionDate,
		})
		_node.IntroductionDate = value
	}
	if value, ok := pc.mutation.ReleaseDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: product.FieldReleaseDate,
		})
		_node.ReleaseDate = value
	}
	if value, ok := pc.mutation.SupportDiscontinuationDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: product.FieldSupportDiscontinuationDate,
		})
		_node.SupportDiscontinuationDate = value
	}
	if value, ok := pc.mutation.SalesDiscontinuationDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: product.FieldSalesDiscontinuationDate,
		})
		_node.SalesDiscontinuationDate = value
	}
	if value, ok := pc.mutation.SalesDiscWhenNotAvail(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: product.FieldSalesDiscWhenNotAvail,
		})
		_node.SalesDiscWhenNotAvail = value
	}
	if value, ok := pc.mutation.InternalName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: product.FieldInternalName,
		})
		_node.InternalName = value
	}
	if value, ok := pc.mutation.BrandName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: product.FieldBrandName,
		})
		_node.BrandName = value
	}
	if value, ok := pc.mutation.Comments(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: product.FieldComments,
		})
		_node.Comments = value
	}
	if value, ok := pc.mutation.ProductName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: product.FieldProductName,
		})
		_node.ProductName = value
	}
	if value, ok := pc.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: product.FieldDescription,
		})
		_node.Description = value
	}
	if value, ok := pc.mutation.LongDescription(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: product.FieldLongDescription,
		})
		_node.LongDescription = value
	}
	if value, ok := pc.mutation.PriceDetailText(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: product.FieldPriceDetailText,
		})
		_node.PriceDetailText = value
	}
	if value, ok := pc.mutation.SmallImageURL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: product.FieldSmallImageURL,
		})
		_node.SmallImageURL = value
	}
	if value, ok := pc.mutation.MediumImageURL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: product.FieldMediumImageURL,
		})
		_node.MediumImageURL = value
	}
	if value, ok := pc.mutation.LargeImageURL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: product.FieldLargeImageURL,
		})
		_node.LargeImageURL = value
	}
	if value, ok := pc.mutation.DetailImageURL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: product.FieldDetailImageURL,
		})
		_node.DetailImageURL = value
	}
	if value, ok := pc.mutation.OriginalImageURL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: product.FieldOriginalImageURL,
		})
		_node.OriginalImageURL = value
	}
	if value, ok := pc.mutation.DetailScreen(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: product.FieldDetailScreen,
		})
		_node.DetailScreen = value
	}
	if value, ok := pc.mutation.InventoryMessage(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: product.FieldInventoryMessage,
		})
		_node.InventoryMessage = value
	}
	if value, ok := pc.mutation.RequireInventory(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: product.FieldRequireInventory,
		})
		_node.RequireInventory = value
	}
	if value, ok := pc.mutation.QuantityUomID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: product.FieldQuantityUomID,
		})
		_node.QuantityUomID = value
	}
	if value, ok := pc.mutation.QuantityIncluded(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: product.FieldQuantityIncluded,
		})
		_node.QuantityIncluded = value
	}
	if value, ok := pc.mutation.PiecesIncluded(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: product.FieldPiecesIncluded,
		})
		_node.PiecesIncluded = value
	}
	if value, ok := pc.mutation.RequireAmount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: product.FieldRequireAmount,
		})
		_node.RequireAmount = value
	}
	if value, ok := pc.mutation.FixedAmount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: product.FieldFixedAmount,
		})
		_node.FixedAmount = value
	}
	if value, ok := pc.mutation.AmountUomTypeID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: product.FieldAmountUomTypeID,
		})
		_node.AmountUomTypeID = value
	}
	if value, ok := pc.mutation.WeightUomID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: product.FieldWeightUomID,
		})
		_node.WeightUomID = value
	}
	if value, ok := pc.mutation.ShippingWeight(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: product.FieldShippingWeight,
		})
		_node.ShippingWeight = value
	}
	if value, ok := pc.mutation.ProductWeight(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: product.FieldProductWeight,
		})
		_node.ProductWeight = value
	}
	if value, ok := pc.mutation.HeightUomID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: product.FieldHeightUomID,
		})
		_node.HeightUomID = value
	}
	if value, ok := pc.mutation.ProductHeight(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: product.FieldProductHeight,
		})
		_node.ProductHeight = value
	}
	if value, ok := pc.mutation.ShippingHeight(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: product.FieldShippingHeight,
		})
		_node.ShippingHeight = value
	}
	if value, ok := pc.mutation.WidthUomID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: product.FieldWidthUomID,
		})
		_node.WidthUomID = value
	}
	if value, ok := pc.mutation.ProductWidth(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: product.FieldProductWidth,
		})
		_node.ProductWidth = value
	}
	if value, ok := pc.mutation.ShippingWidth(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: product.FieldShippingWidth,
		})
		_node.ShippingWidth = value
	}
	if value, ok := pc.mutation.DepthUomID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: product.FieldDepthUomID,
		})
		_node.DepthUomID = value
	}
	if value, ok := pc.mutation.ProductDepth(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: product.FieldProductDepth,
		})
		_node.ProductDepth = value
	}
	if value, ok := pc.mutation.ShippingDepth(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: product.FieldShippingDepth,
		})
		_node.ShippingDepth = value
	}
	if value, ok := pc.mutation.DiameterUomID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: product.FieldDiameterUomID,
		})
		_node.DiameterUomID = value
	}
	if value, ok := pc.mutation.ProductDiameter(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: product.FieldProductDiameter,
		})
		_node.ProductDiameter = value
	}
	if value, ok := pc.mutation.ProductRating(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: product.FieldProductRating,
		})
		_node.ProductRating = value
	}
	if value, ok := pc.mutation.Returnable(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: product.FieldReturnable,
		})
		_node.Returnable = value
	}
	if value, ok := pc.mutation.Taxable(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: product.FieldTaxable,
		})
		_node.Taxable = value
	}
	if value, ok := pc.mutation.ChargeShipping(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: product.FieldChargeShipping,
		})
		_node.ChargeShipping = value
	}
	if value, ok := pc.mutation.AutoCreateKeywords(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: product.FieldAutoCreateKeywords,
		})
		_node.AutoCreateKeywords = value
	}
	if value, ok := pc.mutation.IncludeInPromotions(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: product.FieldIncludeInPromotions,
		})
		_node.IncludeInPromotions = value
	}
	if value, ok := pc.mutation.IsVirtual(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: product.FieldIsVirtual,
		})
		_node.IsVirtual = value
	}
	if value, ok := pc.mutation.IsVariant(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: product.FieldIsVariant,
		})
		_node.IsVariant = value
	}
	if value, ok := pc.mutation.OriginGeoID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: product.FieldOriginGeoID,
		})
		_node.OriginGeoID = value
	}
	if value, ok := pc.mutation.BillOfMaterialLevel(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: product.FieldBillOfMaterialLevel,
		})
		_node.BillOfMaterialLevel = value
	}
	if value, ok := pc.mutation.ReservMaxPersons(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: product.FieldReservMaxPersons,
		})
		_node.ReservMaxPersons = value
	}
	if value, ok := pc.mutation.Reserv2NdPpPerc(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: product.FieldReserv2NdPpPerc,
		})
		_node.Reserv2NdPpPerc = value
	}
	if value, ok := pc.mutation.ReservNthPpPerc(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: product.FieldReservNthPpPerc,
		})
		_node.ReservNthPpPerc = value
	}
	if value, ok := pc.mutation.ConfigID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: product.FieldConfigID,
		})
		_node.ConfigID = value
	}
	if value, ok := pc.mutation.CreatedDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: product.FieldCreatedDate,
		})
		_node.CreatedDate = value
	}
	if value, ok := pc.mutation.CreatedByUserLogin(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: product.FieldCreatedByUserLogin,
		})
		_node.CreatedByUserLogin = value
	}
	if value, ok := pc.mutation.LastModifiedDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: product.FieldLastModifiedDate,
		})
		_node.LastModifiedDate = value
	}
	if value, ok := pc.mutation.LastModifiedByUserLogin(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: product.FieldLastModifiedByUserLogin,
		})
		_node.LastModifiedByUserLogin = value
	}
	if value, ok := pc.mutation.InShippingBox(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: product.FieldInShippingBox,
		})
		_node.InShippingBox = value
	}
	if value, ok := pc.mutation.DefaultShipmentBoxTypeID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: product.FieldDefaultShipmentBoxTypeID,
		})
		_node.DefaultShipmentBoxTypeID = value
	}
	if value, ok := pc.mutation.LotIDFilledIn(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: product.FieldLotIDFilledIn,
		})
		_node.LotIDFilledIn = value
	}
	if value, ok := pc.mutation.OrderDecimalQuantity(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: product.FieldOrderDecimalQuantity,
		})
		_node.OrderDecimalQuantity = value
	}
	if nodes := pc.mutation.ProductTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   product.ProductTypeTable,
			Columns: []string{product.ProductTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: producttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.product_type_products = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.PrimaryProductCategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   product.PrimaryProductCategoryTable,
			Columns: []string{product.PrimaryProductCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productcategory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.product_category_primary_products = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.VirtualVariantMethodEnumerationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   product.VirtualVariantMethodEnumerationTable,
			Columns: []string{product.VirtualVariantMethodEnumerationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: enumeration.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.enumeration_virtual_variant_method_products = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.RatingEnumerationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   product.RatingEnumerationTable,
			Columns: []string{product.RatingEnumerationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: enumeration.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.enumeration_rating_products = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.RequirementMethodEnumerationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   product.RequirementMethodEnumerationTable,
			Columns: []string{product.RequirementMethodEnumerationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: enumeration.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.enumeration_requirement_method_products = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.InventoryItemTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   product.InventoryItemTypeTable,
			Columns: []string{product.InventoryItemTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: inventoryitemtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.inventory_item_type_products = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.OrderItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.OrderItemsTable,
			Columns: []string{product.OrderItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.MainProductAssocsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.MainProductAssocsTable,
			Columns: []string{product.MainProductAssocsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productassoc.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.AssocProductAssocsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.AssocProductAssocsTable,
			Columns: []string{product.AssocProductAssocsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productassoc.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.ProductPricesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ProductPricesTable,
			Columns: []string{product.ProductPricesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productprice.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.ProductReviewsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ProductReviewsTable,
			Columns: []string{product.ProductReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productreview.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ProductCreateBulk is the builder for creating many Product entities in bulk.
type ProductCreateBulk struct {
	config
	builders []*ProductCreate
}

// Save creates the Product entities in the database.
func (pcb *ProductCreateBulk) Save(ctx context.Context) ([]*Product, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Product, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProductMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *ProductCreateBulk) SaveX(ctx context.Context) []*Product {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
