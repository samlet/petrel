// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/enumeration"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/inventoryitemtype"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/orderitem"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/predicate"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/product"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productassoc"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productcategory"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productprice"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productreview"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/producttype"
)

// ProductQuery is the builder for querying Product entities.
type ProductQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.Product
	// eager-loading edges.
	withProductType                     *ProductTypeQuery
	withPrimaryProductCategory          *ProductCategoryQuery
	withVirtualVariantMethodEnumeration *EnumerationQuery
	withRatingEnumeration               *EnumerationQuery
	withRequirementMethodEnumeration    *EnumerationQuery
	withInventoryItemType               *InventoryItemTypeQuery
	withOrderItems                      *OrderItemQuery
	withMainProductAssocs               *ProductAssocQuery
	withAssocProductAssocs              *ProductAssocQuery
	withProductPrices                   *ProductPriceQuery
	withProductReviews                  *ProductReviewQuery
	withFKs                             bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ProductQuery builder.
func (pq *ProductQuery) Where(ps ...predicate.Product) *ProductQuery {
	pq.predicates = append(pq.predicates, ps...)
	return pq
}

// Limit adds a limit step to the query.
func (pq *ProductQuery) Limit(limit int) *ProductQuery {
	pq.limit = &limit
	return pq
}

// Offset adds an offset step to the query.
func (pq *ProductQuery) Offset(offset int) *ProductQuery {
	pq.offset = &offset
	return pq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (pq *ProductQuery) Unique(unique bool) *ProductQuery {
	pq.unique = &unique
	return pq
}

// Order adds an order step to the query.
func (pq *ProductQuery) Order(o ...OrderFunc) *ProductQuery {
	pq.order = append(pq.order, o...)
	return pq
}

// QueryProductType chains the current query on the "product_type" edge.
func (pq *ProductQuery) QueryProductType() *ProductTypeQuery {
	query := &ProductTypeQuery{config: pq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(product.Table, product.FieldID, selector),
			sqlgraph.To(producttype.Table, producttype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, product.ProductTypeTable, product.ProductTypeColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPrimaryProductCategory chains the current query on the "primary_product_category" edge.
func (pq *ProductQuery) QueryPrimaryProductCategory() *ProductCategoryQuery {
	query := &ProductCategoryQuery{config: pq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(product.Table, product.FieldID, selector),
			sqlgraph.To(productcategory.Table, productcategory.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, product.PrimaryProductCategoryTable, product.PrimaryProductCategoryColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryVirtualVariantMethodEnumeration chains the current query on the "virtual_variant_method_enumeration" edge.
func (pq *ProductQuery) QueryVirtualVariantMethodEnumeration() *EnumerationQuery {
	query := &EnumerationQuery{config: pq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(product.Table, product.FieldID, selector),
			sqlgraph.To(enumeration.Table, enumeration.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, product.VirtualVariantMethodEnumerationTable, product.VirtualVariantMethodEnumerationColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRatingEnumeration chains the current query on the "rating_enumeration" edge.
func (pq *ProductQuery) QueryRatingEnumeration() *EnumerationQuery {
	query := &EnumerationQuery{config: pq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(product.Table, product.FieldID, selector),
			sqlgraph.To(enumeration.Table, enumeration.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, product.RatingEnumerationTable, product.RatingEnumerationColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRequirementMethodEnumeration chains the current query on the "requirement_method_enumeration" edge.
func (pq *ProductQuery) QueryRequirementMethodEnumeration() *EnumerationQuery {
	query := &EnumerationQuery{config: pq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(product.Table, product.FieldID, selector),
			sqlgraph.To(enumeration.Table, enumeration.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, product.RequirementMethodEnumerationTable, product.RequirementMethodEnumerationColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryInventoryItemType chains the current query on the "inventory_item_type" edge.
func (pq *ProductQuery) QueryInventoryItemType() *InventoryItemTypeQuery {
	query := &InventoryItemTypeQuery{config: pq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(product.Table, product.FieldID, selector),
			sqlgraph.To(inventoryitemtype.Table, inventoryitemtype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, product.InventoryItemTypeTable, product.InventoryItemTypeColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOrderItems chains the current query on the "order_items" edge.
func (pq *ProductQuery) QueryOrderItems() *OrderItemQuery {
	query := &OrderItemQuery{config: pq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(product.Table, product.FieldID, selector),
			sqlgraph.To(orderitem.Table, orderitem.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, product.OrderItemsTable, product.OrderItemsColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMainProductAssocs chains the current query on the "main_product_assocs" edge.
func (pq *ProductQuery) QueryMainProductAssocs() *ProductAssocQuery {
	query := &ProductAssocQuery{config: pq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(product.Table, product.FieldID, selector),
			sqlgraph.To(productassoc.Table, productassoc.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, product.MainProductAssocsTable, product.MainProductAssocsColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAssocProductAssocs chains the current query on the "assoc_product_assocs" edge.
func (pq *ProductQuery) QueryAssocProductAssocs() *ProductAssocQuery {
	query := &ProductAssocQuery{config: pq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(product.Table, product.FieldID, selector),
			sqlgraph.To(productassoc.Table, productassoc.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, product.AssocProductAssocsTable, product.AssocProductAssocsColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProductPrices chains the current query on the "product_prices" edge.
func (pq *ProductQuery) QueryProductPrices() *ProductPriceQuery {
	query := &ProductPriceQuery{config: pq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(product.Table, product.FieldID, selector),
			sqlgraph.To(productprice.Table, productprice.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, product.ProductPricesTable, product.ProductPricesColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProductReviews chains the current query on the "product_reviews" edge.
func (pq *ProductQuery) QueryProductReviews() *ProductReviewQuery {
	query := &ProductReviewQuery{config: pq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(product.Table, product.FieldID, selector),
			sqlgraph.To(productreview.Table, productreview.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, product.ProductReviewsTable, product.ProductReviewsColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Product entity from the query.
// Returns a *NotFoundError when no Product was found.
func (pq *ProductQuery) First(ctx context.Context) (*Product, error) {
	nodes, err := pq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{product.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (pq *ProductQuery) FirstX(ctx context.Context) *Product {
	node, err := pq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Product ID from the query.
// Returns a *NotFoundError when no Product ID was found.
func (pq *ProductQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = pq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{product.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (pq *ProductQuery) FirstIDX(ctx context.Context) int {
	id, err := pq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Product entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one Product entity is not found.
// Returns a *NotFoundError when no Product entities are found.
func (pq *ProductQuery) Only(ctx context.Context) (*Product, error) {
	nodes, err := pq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{product.Label}
	default:
		return nil, &NotSingularError{product.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (pq *ProductQuery) OnlyX(ctx context.Context) *Product {
	node, err := pq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Product ID in the query.
// Returns a *NotSingularError when exactly one Product ID is not found.
// Returns a *NotFoundError when no entities are found.
func (pq *ProductQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = pq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{product.Label}
	default:
		err = &NotSingularError{product.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (pq *ProductQuery) OnlyIDX(ctx context.Context) int {
	id, err := pq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Products.
func (pq *ProductQuery) All(ctx context.Context) ([]*Product, error) {
	if err := pq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return pq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (pq *ProductQuery) AllX(ctx context.Context) []*Product {
	nodes, err := pq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Product IDs.
func (pq *ProductQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := pq.Select(product.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (pq *ProductQuery) IDsX(ctx context.Context) []int {
	ids, err := pq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (pq *ProductQuery) Count(ctx context.Context) (int, error) {
	if err := pq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return pq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (pq *ProductQuery) CountX(ctx context.Context) int {
	count, err := pq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (pq *ProductQuery) Exist(ctx context.Context) (bool, error) {
	if err := pq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return pq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (pq *ProductQuery) ExistX(ctx context.Context) bool {
	exist, err := pq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ProductQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (pq *ProductQuery) Clone() *ProductQuery {
	if pq == nil {
		return nil
	}
	return &ProductQuery{
		config:                              pq.config,
		limit:                               pq.limit,
		offset:                              pq.offset,
		order:                               append([]OrderFunc{}, pq.order...),
		predicates:                          append([]predicate.Product{}, pq.predicates...),
		withProductType:                     pq.withProductType.Clone(),
		withPrimaryProductCategory:          pq.withPrimaryProductCategory.Clone(),
		withVirtualVariantMethodEnumeration: pq.withVirtualVariantMethodEnumeration.Clone(),
		withRatingEnumeration:               pq.withRatingEnumeration.Clone(),
		withRequirementMethodEnumeration:    pq.withRequirementMethodEnumeration.Clone(),
		withInventoryItemType:               pq.withInventoryItemType.Clone(),
		withOrderItems:                      pq.withOrderItems.Clone(),
		withMainProductAssocs:               pq.withMainProductAssocs.Clone(),
		withAssocProductAssocs:              pq.withAssocProductAssocs.Clone(),
		withProductPrices:                   pq.withProductPrices.Clone(),
		withProductReviews:                  pq.withProductReviews.Clone(),
		// clone intermediate query.
		sql:  pq.sql.Clone(),
		path: pq.path,
	}
}

// WithProductType tells the query-builder to eager-load the nodes that are connected to
// the "product_type" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *ProductQuery) WithProductType(opts ...func(*ProductTypeQuery)) *ProductQuery {
	query := &ProductTypeQuery{config: pq.config}
	for _, opt := range opts {
		opt(query)
	}
	pq.withProductType = query
	return pq
}

// WithPrimaryProductCategory tells the query-builder to eager-load the nodes that are connected to
// the "primary_product_category" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *ProductQuery) WithPrimaryProductCategory(opts ...func(*ProductCategoryQuery)) *ProductQuery {
	query := &ProductCategoryQuery{config: pq.config}
	for _, opt := range opts {
		opt(query)
	}
	pq.withPrimaryProductCategory = query
	return pq
}

// WithVirtualVariantMethodEnumeration tells the query-builder to eager-load the nodes that are connected to
// the "virtual_variant_method_enumeration" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *ProductQuery) WithVirtualVariantMethodEnumeration(opts ...func(*EnumerationQuery)) *ProductQuery {
	query := &EnumerationQuery{config: pq.config}
	for _, opt := range opts {
		opt(query)
	}
	pq.withVirtualVariantMethodEnumeration = query
	return pq
}

// WithRatingEnumeration tells the query-builder to eager-load the nodes that are connected to
// the "rating_enumeration" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *ProductQuery) WithRatingEnumeration(opts ...func(*EnumerationQuery)) *ProductQuery {
	query := &EnumerationQuery{config: pq.config}
	for _, opt := range opts {
		opt(query)
	}
	pq.withRatingEnumeration = query
	return pq
}

// WithRequirementMethodEnumeration tells the query-builder to eager-load the nodes that are connected to
// the "requirement_method_enumeration" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *ProductQuery) WithRequirementMethodEnumeration(opts ...func(*EnumerationQuery)) *ProductQuery {
	query := &EnumerationQuery{config: pq.config}
	for _, opt := range opts {
		opt(query)
	}
	pq.withRequirementMethodEnumeration = query
	return pq
}

// WithInventoryItemType tells the query-builder to eager-load the nodes that are connected to
// the "inventory_item_type" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *ProductQuery) WithInventoryItemType(opts ...func(*InventoryItemTypeQuery)) *ProductQuery {
	query := &InventoryItemTypeQuery{config: pq.config}
	for _, opt := range opts {
		opt(query)
	}
	pq.withInventoryItemType = query
	return pq
}

// WithOrderItems tells the query-builder to eager-load the nodes that are connected to
// the "order_items" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *ProductQuery) WithOrderItems(opts ...func(*OrderItemQuery)) *ProductQuery {
	query := &OrderItemQuery{config: pq.config}
	for _, opt := range opts {
		opt(query)
	}
	pq.withOrderItems = query
	return pq
}

// WithMainProductAssocs tells the query-builder to eager-load the nodes that are connected to
// the "main_product_assocs" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *ProductQuery) WithMainProductAssocs(opts ...func(*ProductAssocQuery)) *ProductQuery {
	query := &ProductAssocQuery{config: pq.config}
	for _, opt := range opts {
		opt(query)
	}
	pq.withMainProductAssocs = query
	return pq
}

// WithAssocProductAssocs tells the query-builder to eager-load the nodes that are connected to
// the "assoc_product_assocs" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *ProductQuery) WithAssocProductAssocs(opts ...func(*ProductAssocQuery)) *ProductQuery {
	query := &ProductAssocQuery{config: pq.config}
	for _, opt := range opts {
		opt(query)
	}
	pq.withAssocProductAssocs = query
	return pq
}

// WithProductPrices tells the query-builder to eager-load the nodes that are connected to
// the "product_prices" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *ProductQuery) WithProductPrices(opts ...func(*ProductPriceQuery)) *ProductQuery {
	query := &ProductPriceQuery{config: pq.config}
	for _, opt := range opts {
		opt(query)
	}
	pq.withProductPrices = query
	return pq
}

// WithProductReviews tells the query-builder to eager-load the nodes that are connected to
// the "product_reviews" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *ProductQuery) WithProductReviews(opts ...func(*ProductReviewQuery)) *ProductQuery {
	query := &ProductReviewQuery{config: pq.config}
	for _, opt := range opts {
		opt(query)
	}
	pq.withProductReviews = query
	return pq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Product.Query().
//		GroupBy(product.FieldCreateTime).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (pq *ProductQuery) GroupBy(field string, fields ...string) *ProductGroupBy {
	group := &ProductGroupBy{config: pq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return pq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//	}
//
//	client.Product.Query().
//		Select(product.FieldCreateTime).
//		Scan(ctx, &v)
//
func (pq *ProductQuery) Select(field string, fields ...string) *ProductSelect {
	pq.fields = append([]string{field}, fields...)
	return &ProductSelect{ProductQuery: pq}
}

func (pq *ProductQuery) prepareQuery(ctx context.Context) error {
	for _, f := range pq.fields {
		if !product.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if pq.path != nil {
		prev, err := pq.path(ctx)
		if err != nil {
			return err
		}
		pq.sql = prev
	}
	return nil
}

func (pq *ProductQuery) sqlAll(ctx context.Context) ([]*Product, error) {
	var (
		nodes       = []*Product{}
		withFKs     = pq.withFKs
		_spec       = pq.querySpec()
		loadedTypes = [11]bool{
			pq.withProductType != nil,
			pq.withPrimaryProductCategory != nil,
			pq.withVirtualVariantMethodEnumeration != nil,
			pq.withRatingEnumeration != nil,
			pq.withRequirementMethodEnumeration != nil,
			pq.withInventoryItemType != nil,
			pq.withOrderItems != nil,
			pq.withMainProductAssocs != nil,
			pq.withAssocProductAssocs != nil,
			pq.withProductPrices != nil,
			pq.withProductReviews != nil,
		}
	)
	if pq.withProductType != nil || pq.withPrimaryProductCategory != nil || pq.withVirtualVariantMethodEnumeration != nil || pq.withRatingEnumeration != nil || pq.withRequirementMethodEnumeration != nil || pq.withInventoryItemType != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, product.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &Product{config: pq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, pq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := pq.withProductType; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*Product)
		for i := range nodes {
			if nodes[i].product_type_products == nil {
				continue
			}
			fk := *nodes[i].product_type_products
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(producttype.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "product_type_products" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.ProductType = n
			}
		}
	}

	if query := pq.withPrimaryProductCategory; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*Product)
		for i := range nodes {
			if nodes[i].product_category_primary_products == nil {
				continue
			}
			fk := *nodes[i].product_category_primary_products
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(productcategory.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "product_category_primary_products" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.PrimaryProductCategory = n
			}
		}
	}

	if query := pq.withVirtualVariantMethodEnumeration; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*Product)
		for i := range nodes {
			if nodes[i].enumeration_virtual_variant_method_products == nil {
				continue
			}
			fk := *nodes[i].enumeration_virtual_variant_method_products
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(enumeration.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "enumeration_virtual_variant_method_products" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.VirtualVariantMethodEnumeration = n
			}
		}
	}

	if query := pq.withRatingEnumeration; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*Product)
		for i := range nodes {
			if nodes[i].enumeration_rating_products == nil {
				continue
			}
			fk := *nodes[i].enumeration_rating_products
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(enumeration.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "enumeration_rating_products" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.RatingEnumeration = n
			}
		}
	}

	if query := pq.withRequirementMethodEnumeration; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*Product)
		for i := range nodes {
			if nodes[i].enumeration_requirement_method_products == nil {
				continue
			}
			fk := *nodes[i].enumeration_requirement_method_products
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(enumeration.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "enumeration_requirement_method_products" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.RequirementMethodEnumeration = n
			}
		}
	}

	if query := pq.withInventoryItemType; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*Product)
		for i := range nodes {
			if nodes[i].inventory_item_type_products == nil {
				continue
			}
			fk := *nodes[i].inventory_item_type_products
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(inventoryitemtype.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "inventory_item_type_products" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.InventoryItemType = n
			}
		}
	}

	if query := pq.withOrderItems; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*Product)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.OrderItems = []*OrderItem{}
		}
		query.withFKs = true
		query.Where(predicate.OrderItem(func(s *sql.Selector) {
			s.Where(sql.InValues(product.OrderItemsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.product_order_items
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "product_order_items" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "product_order_items" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.OrderItems = append(node.Edges.OrderItems, n)
		}
	}

	if query := pq.withMainProductAssocs; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*Product)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.MainProductAssocs = []*ProductAssoc{}
		}
		query.withFKs = true
		query.Where(predicate.ProductAssoc(func(s *sql.Selector) {
			s.Where(sql.InValues(product.MainProductAssocsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.product_main_product_assocs
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "product_main_product_assocs" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "product_main_product_assocs" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.MainProductAssocs = append(node.Edges.MainProductAssocs, n)
		}
	}

	if query := pq.withAssocProductAssocs; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*Product)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.AssocProductAssocs = []*ProductAssoc{}
		}
		query.withFKs = true
		query.Where(predicate.ProductAssoc(func(s *sql.Selector) {
			s.Where(sql.InValues(product.AssocProductAssocsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.product_assoc_product_assocs
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "product_assoc_product_assocs" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "product_assoc_product_assocs" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.AssocProductAssocs = append(node.Edges.AssocProductAssocs, n)
		}
	}

	if query := pq.withProductPrices; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*Product)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.ProductPrices = []*ProductPrice{}
		}
		query.withFKs = true
		query.Where(predicate.ProductPrice(func(s *sql.Selector) {
			s.Where(sql.InValues(product.ProductPricesColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.product_product_prices
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "product_product_prices" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "product_product_prices" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.ProductPrices = append(node.Edges.ProductPrices, n)
		}
	}

	if query := pq.withProductReviews; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*Product)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.ProductReviews = []*ProductReview{}
		}
		query.withFKs = true
		query.Where(predicate.ProductReview(func(s *sql.Selector) {
			s.Where(sql.InValues(product.ProductReviewsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.product_product_reviews
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "product_product_reviews" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "product_product_reviews" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.ProductReviews = append(node.Edges.ProductReviews, n)
		}
	}

	return nodes, nil
}

func (pq *ProductQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := pq.querySpec()
	return sqlgraph.CountNodes(ctx, pq.driver, _spec)
}

func (pq *ProductQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := pq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (pq *ProductQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   product.Table,
			Columns: product.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: product.FieldID,
			},
		},
		From:   pq.sql,
		Unique: true,
	}
	if unique := pq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := pq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, product.FieldID)
		for i := range fields {
			if fields[i] != product.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := pq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := pq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := pq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := pq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (pq *ProductQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(pq.driver.Dialect())
	t1 := builder.Table(product.Table)
	columns := pq.fields
	if len(columns) == 0 {
		columns = product.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if pq.sql != nil {
		selector = pq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	for _, p := range pq.predicates {
		p(selector)
	}
	for _, p := range pq.order {
		p(selector)
	}
	if offset := pq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := pq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ProductGroupBy is the group-by builder for Product entities.
type ProductGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (pgb *ProductGroupBy) Aggregate(fns ...AggregateFunc) *ProductGroupBy {
	pgb.fns = append(pgb.fns, fns...)
	return pgb
}

// Scan applies the group-by query and scans the result into the given value.
func (pgb *ProductGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := pgb.path(ctx)
	if err != nil {
		return err
	}
	pgb.sql = query
	return pgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (pgb *ProductGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := pgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (pgb *ProductGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(pgb.fields) > 1 {
		return nil, errors.New("ent: ProductGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := pgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (pgb *ProductGroupBy) StringsX(ctx context.Context) []string {
	v, err := pgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (pgb *ProductGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = pgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{product.Label}
	default:
		err = fmt.Errorf("ent: ProductGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (pgb *ProductGroupBy) StringX(ctx context.Context) string {
	v, err := pgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (pgb *ProductGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(pgb.fields) > 1 {
		return nil, errors.New("ent: ProductGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := pgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (pgb *ProductGroupBy) IntsX(ctx context.Context) []int {
	v, err := pgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (pgb *ProductGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = pgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{product.Label}
	default:
		err = fmt.Errorf("ent: ProductGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (pgb *ProductGroupBy) IntX(ctx context.Context) int {
	v, err := pgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (pgb *ProductGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(pgb.fields) > 1 {
		return nil, errors.New("ent: ProductGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := pgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (pgb *ProductGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := pgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (pgb *ProductGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = pgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{product.Label}
	default:
		err = fmt.Errorf("ent: ProductGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (pgb *ProductGroupBy) Float64X(ctx context.Context) float64 {
	v, err := pgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (pgb *ProductGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(pgb.fields) > 1 {
		return nil, errors.New("ent: ProductGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := pgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (pgb *ProductGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := pgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (pgb *ProductGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = pgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{product.Label}
	default:
		err = fmt.Errorf("ent: ProductGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (pgb *ProductGroupBy) BoolX(ctx context.Context) bool {
	v, err := pgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (pgb *ProductGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range pgb.fields {
		if !product.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := pgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (pgb *ProductGroupBy) sqlQuery() *sql.Selector {
	selector := pgb.sql.Select()
	aggregation := make([]string, 0, len(pgb.fns))
	for _, fn := range pgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(pgb.fields)+len(pgb.fns))
		for _, f := range pgb.fields {
			columns = append(columns, selector.C(f))
		}
		for _, c := range aggregation {
			columns = append(columns, c)
		}
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(pgb.fields...)...)
}

// ProductSelect is the builder for selecting fields of Product entities.
type ProductSelect struct {
	*ProductQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (ps *ProductSelect) Scan(ctx context.Context, v interface{}) error {
	if err := ps.prepareQuery(ctx); err != nil {
		return err
	}
	ps.sql = ps.ProductQuery.sqlQuery(ctx)
	return ps.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (ps *ProductSelect) ScanX(ctx context.Context, v interface{}) {
	if err := ps.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (ps *ProductSelect) Strings(ctx context.Context) ([]string, error) {
	if len(ps.fields) > 1 {
		return nil, errors.New("ent: ProductSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := ps.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (ps *ProductSelect) StringsX(ctx context.Context) []string {
	v, err := ps.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (ps *ProductSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = ps.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{product.Label}
	default:
		err = fmt.Errorf("ent: ProductSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (ps *ProductSelect) StringX(ctx context.Context) string {
	v, err := ps.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (ps *ProductSelect) Ints(ctx context.Context) ([]int, error) {
	if len(ps.fields) > 1 {
		return nil, errors.New("ent: ProductSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := ps.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (ps *ProductSelect) IntsX(ctx context.Context) []int {
	v, err := ps.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (ps *ProductSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = ps.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{product.Label}
	default:
		err = fmt.Errorf("ent: ProductSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (ps *ProductSelect) IntX(ctx context.Context) int {
	v, err := ps.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (ps *ProductSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(ps.fields) > 1 {
		return nil, errors.New("ent: ProductSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := ps.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (ps *ProductSelect) Float64sX(ctx context.Context) []float64 {
	v, err := ps.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (ps *ProductSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = ps.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{product.Label}
	default:
		err = fmt.Errorf("ent: ProductSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (ps *ProductSelect) Float64X(ctx context.Context) float64 {
	v, err := ps.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (ps *ProductSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(ps.fields) > 1 {
		return nil, errors.New("ent: ProductSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := ps.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (ps *ProductSelect) BoolsX(ctx context.Context) []bool {
	v, err := ps.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (ps *ProductSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = ps.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{product.Label}
	default:
		err = fmt.Errorf("ent: ProductSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (ps *ProductSelect) BoolX(ctx context.Context) bool {
	v, err := ps.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ps *ProductSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := ps.sql.Query()
	if err := ps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
