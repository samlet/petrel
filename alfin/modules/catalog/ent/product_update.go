// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/enumeration"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/inventoryitemtype"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/orderitem"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/predicate"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/product"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productassoc"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productcategory"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productprice"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productreview"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/producttype"
)

// ProductUpdate is the builder for updating Product entities.
type ProductUpdate struct {
	config
	hooks    []Hook
	mutation *ProductMutation
}

// Where adds a new predicate for the ProductUpdate builder.
func (pu *ProductUpdate) Where(ps ...predicate.Product) *ProductUpdate {
	pu.mutation.predicates = append(pu.mutation.predicates, ps...)
	return pu
}

// SetStringRef sets the "string_ref" field.
func (pu *ProductUpdate) SetStringRef(s string) *ProductUpdate {
	pu.mutation.SetStringRef(s)
	return pu
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableStringRef(s *string) *ProductUpdate {
	if s != nil {
		pu.SetStringRef(*s)
	}
	return pu
}

// ClearStringRef clears the value of the "string_ref" field.
func (pu *ProductUpdate) ClearStringRef() *ProductUpdate {
	pu.mutation.ClearStringRef()
	return pu
}

// SetFacilityID sets the "facility_id" field.
func (pu *ProductUpdate) SetFacilityID(i int) *ProductUpdate {
	pu.mutation.ResetFacilityID()
	pu.mutation.SetFacilityID(i)
	return pu
}

// SetNillableFacilityID sets the "facility_id" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableFacilityID(i *int) *ProductUpdate {
	if i != nil {
		pu.SetFacilityID(*i)
	}
	return pu
}

// AddFacilityID adds i to the "facility_id" field.
func (pu *ProductUpdate) AddFacilityID(i int) *ProductUpdate {
	pu.mutation.AddFacilityID(i)
	return pu
}

// ClearFacilityID clears the value of the "facility_id" field.
func (pu *ProductUpdate) ClearFacilityID() *ProductUpdate {
	pu.mutation.ClearFacilityID()
	return pu
}

// SetIntroductionDate sets the "introduction_date" field.
func (pu *ProductUpdate) SetIntroductionDate(t time.Time) *ProductUpdate {
	pu.mutation.SetIntroductionDate(t)
	return pu
}

// SetNillableIntroductionDate sets the "introduction_date" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableIntroductionDate(t *time.Time) *ProductUpdate {
	if t != nil {
		pu.SetIntroductionDate(*t)
	}
	return pu
}

// ClearIntroductionDate clears the value of the "introduction_date" field.
func (pu *ProductUpdate) ClearIntroductionDate() *ProductUpdate {
	pu.mutation.ClearIntroductionDate()
	return pu
}

// SetReleaseDate sets the "release_date" field.
func (pu *ProductUpdate) SetReleaseDate(t time.Time) *ProductUpdate {
	pu.mutation.SetReleaseDate(t)
	return pu
}

// SetNillableReleaseDate sets the "release_date" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableReleaseDate(t *time.Time) *ProductUpdate {
	if t != nil {
		pu.SetReleaseDate(*t)
	}
	return pu
}

// ClearReleaseDate clears the value of the "release_date" field.
func (pu *ProductUpdate) ClearReleaseDate() *ProductUpdate {
	pu.mutation.ClearReleaseDate()
	return pu
}

// SetSupportDiscontinuationDate sets the "support_discontinuation_date" field.
func (pu *ProductUpdate) SetSupportDiscontinuationDate(t time.Time) *ProductUpdate {
	pu.mutation.SetSupportDiscontinuationDate(t)
	return pu
}

// SetNillableSupportDiscontinuationDate sets the "support_discontinuation_date" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableSupportDiscontinuationDate(t *time.Time) *ProductUpdate {
	if t != nil {
		pu.SetSupportDiscontinuationDate(*t)
	}
	return pu
}

// ClearSupportDiscontinuationDate clears the value of the "support_discontinuation_date" field.
func (pu *ProductUpdate) ClearSupportDiscontinuationDate() *ProductUpdate {
	pu.mutation.ClearSupportDiscontinuationDate()
	return pu
}

// SetSalesDiscontinuationDate sets the "sales_discontinuation_date" field.
func (pu *ProductUpdate) SetSalesDiscontinuationDate(t time.Time) *ProductUpdate {
	pu.mutation.SetSalesDiscontinuationDate(t)
	return pu
}

// SetNillableSalesDiscontinuationDate sets the "sales_discontinuation_date" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableSalesDiscontinuationDate(t *time.Time) *ProductUpdate {
	if t != nil {
		pu.SetSalesDiscontinuationDate(*t)
	}
	return pu
}

// ClearSalesDiscontinuationDate clears the value of the "sales_discontinuation_date" field.
func (pu *ProductUpdate) ClearSalesDiscontinuationDate() *ProductUpdate {
	pu.mutation.ClearSalesDiscontinuationDate()
	return pu
}

// SetSalesDiscWhenNotAvail sets the "sales_disc_when_not_avail" field.
func (pu *ProductUpdate) SetSalesDiscWhenNotAvail(pdwna product.SalesDiscWhenNotAvail) *ProductUpdate {
	pu.mutation.SetSalesDiscWhenNotAvail(pdwna)
	return pu
}

// SetNillableSalesDiscWhenNotAvail sets the "sales_disc_when_not_avail" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableSalesDiscWhenNotAvail(pdwna *product.SalesDiscWhenNotAvail) *ProductUpdate {
	if pdwna != nil {
		pu.SetSalesDiscWhenNotAvail(*pdwna)
	}
	return pu
}

// ClearSalesDiscWhenNotAvail clears the value of the "sales_disc_when_not_avail" field.
func (pu *ProductUpdate) ClearSalesDiscWhenNotAvail() *ProductUpdate {
	pu.mutation.ClearSalesDiscWhenNotAvail()
	return pu
}

// SetInternalName sets the "internal_name" field.
func (pu *ProductUpdate) SetInternalName(s string) *ProductUpdate {
	pu.mutation.SetInternalName(s)
	return pu
}

// SetNillableInternalName sets the "internal_name" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableInternalName(s *string) *ProductUpdate {
	if s != nil {
		pu.SetInternalName(*s)
	}
	return pu
}

// ClearInternalName clears the value of the "internal_name" field.
func (pu *ProductUpdate) ClearInternalName() *ProductUpdate {
	pu.mutation.ClearInternalName()
	return pu
}

// SetBrandName sets the "brand_name" field.
func (pu *ProductUpdate) SetBrandName(s string) *ProductUpdate {
	pu.mutation.SetBrandName(s)
	return pu
}

// SetNillableBrandName sets the "brand_name" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableBrandName(s *string) *ProductUpdate {
	if s != nil {
		pu.SetBrandName(*s)
	}
	return pu
}

// ClearBrandName clears the value of the "brand_name" field.
func (pu *ProductUpdate) ClearBrandName() *ProductUpdate {
	pu.mutation.ClearBrandName()
	return pu
}

// SetComments sets the "comments" field.
func (pu *ProductUpdate) SetComments(s string) *ProductUpdate {
	pu.mutation.SetComments(s)
	return pu
}

// SetNillableComments sets the "comments" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableComments(s *string) *ProductUpdate {
	if s != nil {
		pu.SetComments(*s)
	}
	return pu
}

// ClearComments clears the value of the "comments" field.
func (pu *ProductUpdate) ClearComments() *ProductUpdate {
	pu.mutation.ClearComments()
	return pu
}

// SetProductName sets the "product_name" field.
func (pu *ProductUpdate) SetProductName(s string) *ProductUpdate {
	pu.mutation.SetProductName(s)
	return pu
}

// SetNillableProductName sets the "product_name" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableProductName(s *string) *ProductUpdate {
	if s != nil {
		pu.SetProductName(*s)
	}
	return pu
}

// ClearProductName clears the value of the "product_name" field.
func (pu *ProductUpdate) ClearProductName() *ProductUpdate {
	pu.mutation.ClearProductName()
	return pu
}

// SetDescription sets the "description" field.
func (pu *ProductUpdate) SetDescription(s string) *ProductUpdate {
	pu.mutation.SetDescription(s)
	return pu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableDescription(s *string) *ProductUpdate {
	if s != nil {
		pu.SetDescription(*s)
	}
	return pu
}

// ClearDescription clears the value of the "description" field.
func (pu *ProductUpdate) ClearDescription() *ProductUpdate {
	pu.mutation.ClearDescription()
	return pu
}

// SetLongDescription sets the "long_description" field.
func (pu *ProductUpdate) SetLongDescription(s string) *ProductUpdate {
	pu.mutation.SetLongDescription(s)
	return pu
}

// SetNillableLongDescription sets the "long_description" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableLongDescription(s *string) *ProductUpdate {
	if s != nil {
		pu.SetLongDescription(*s)
	}
	return pu
}

// ClearLongDescription clears the value of the "long_description" field.
func (pu *ProductUpdate) ClearLongDescription() *ProductUpdate {
	pu.mutation.ClearLongDescription()
	return pu
}

// SetPriceDetailText sets the "price_detail_text" field.
func (pu *ProductUpdate) SetPriceDetailText(s string) *ProductUpdate {
	pu.mutation.SetPriceDetailText(s)
	return pu
}

// SetNillablePriceDetailText sets the "price_detail_text" field if the given value is not nil.
func (pu *ProductUpdate) SetNillablePriceDetailText(s *string) *ProductUpdate {
	if s != nil {
		pu.SetPriceDetailText(*s)
	}
	return pu
}

// ClearPriceDetailText clears the value of the "price_detail_text" field.
func (pu *ProductUpdate) ClearPriceDetailText() *ProductUpdate {
	pu.mutation.ClearPriceDetailText()
	return pu
}

// SetSmallImageURL sets the "small_image_url" field.
func (pu *ProductUpdate) SetSmallImageURL(s string) *ProductUpdate {
	pu.mutation.SetSmallImageURL(s)
	return pu
}

// SetNillableSmallImageURL sets the "small_image_url" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableSmallImageURL(s *string) *ProductUpdate {
	if s != nil {
		pu.SetSmallImageURL(*s)
	}
	return pu
}

// ClearSmallImageURL clears the value of the "small_image_url" field.
func (pu *ProductUpdate) ClearSmallImageURL() *ProductUpdate {
	pu.mutation.ClearSmallImageURL()
	return pu
}

// SetMediumImageURL sets the "medium_image_url" field.
func (pu *ProductUpdate) SetMediumImageURL(s string) *ProductUpdate {
	pu.mutation.SetMediumImageURL(s)
	return pu
}

// SetNillableMediumImageURL sets the "medium_image_url" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableMediumImageURL(s *string) *ProductUpdate {
	if s != nil {
		pu.SetMediumImageURL(*s)
	}
	return pu
}

// ClearMediumImageURL clears the value of the "medium_image_url" field.
func (pu *ProductUpdate) ClearMediumImageURL() *ProductUpdate {
	pu.mutation.ClearMediumImageURL()
	return pu
}

// SetLargeImageURL sets the "large_image_url" field.
func (pu *ProductUpdate) SetLargeImageURL(s string) *ProductUpdate {
	pu.mutation.SetLargeImageURL(s)
	return pu
}

// SetNillableLargeImageURL sets the "large_image_url" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableLargeImageURL(s *string) *ProductUpdate {
	if s != nil {
		pu.SetLargeImageURL(*s)
	}
	return pu
}

// ClearLargeImageURL clears the value of the "large_image_url" field.
func (pu *ProductUpdate) ClearLargeImageURL() *ProductUpdate {
	pu.mutation.ClearLargeImageURL()
	return pu
}

// SetDetailImageURL sets the "detail_image_url" field.
func (pu *ProductUpdate) SetDetailImageURL(s string) *ProductUpdate {
	pu.mutation.SetDetailImageURL(s)
	return pu
}

// SetNillableDetailImageURL sets the "detail_image_url" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableDetailImageURL(s *string) *ProductUpdate {
	if s != nil {
		pu.SetDetailImageURL(*s)
	}
	return pu
}

// ClearDetailImageURL clears the value of the "detail_image_url" field.
func (pu *ProductUpdate) ClearDetailImageURL() *ProductUpdate {
	pu.mutation.ClearDetailImageURL()
	return pu
}

// SetOriginalImageURL sets the "original_image_url" field.
func (pu *ProductUpdate) SetOriginalImageURL(s string) *ProductUpdate {
	pu.mutation.SetOriginalImageURL(s)
	return pu
}

// SetNillableOriginalImageURL sets the "original_image_url" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableOriginalImageURL(s *string) *ProductUpdate {
	if s != nil {
		pu.SetOriginalImageURL(*s)
	}
	return pu
}

// ClearOriginalImageURL clears the value of the "original_image_url" field.
func (pu *ProductUpdate) ClearOriginalImageURL() *ProductUpdate {
	pu.mutation.ClearOriginalImageURL()
	return pu
}

// SetDetailScreen sets the "detail_screen" field.
func (pu *ProductUpdate) SetDetailScreen(s string) *ProductUpdate {
	pu.mutation.SetDetailScreen(s)
	return pu
}

// SetNillableDetailScreen sets the "detail_screen" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableDetailScreen(s *string) *ProductUpdate {
	if s != nil {
		pu.SetDetailScreen(*s)
	}
	return pu
}

// ClearDetailScreen clears the value of the "detail_screen" field.
func (pu *ProductUpdate) ClearDetailScreen() *ProductUpdate {
	pu.mutation.ClearDetailScreen()
	return pu
}

// SetInventoryMessage sets the "inventory_message" field.
func (pu *ProductUpdate) SetInventoryMessage(s string) *ProductUpdate {
	pu.mutation.SetInventoryMessage(s)
	return pu
}

// SetNillableInventoryMessage sets the "inventory_message" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableInventoryMessage(s *string) *ProductUpdate {
	if s != nil {
		pu.SetInventoryMessage(*s)
	}
	return pu
}

// ClearInventoryMessage clears the value of the "inventory_message" field.
func (pu *ProductUpdate) ClearInventoryMessage() *ProductUpdate {
	pu.mutation.ClearInventoryMessage()
	return pu
}

// SetRequireInventory sets the "require_inventory" field.
func (pu *ProductUpdate) SetRequireInventory(pi product.RequireInventory) *ProductUpdate {
	pu.mutation.SetRequireInventory(pi)
	return pu
}

// SetNillableRequireInventory sets the "require_inventory" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableRequireInventory(pi *product.RequireInventory) *ProductUpdate {
	if pi != nil {
		pu.SetRequireInventory(*pi)
	}
	return pu
}

// ClearRequireInventory clears the value of the "require_inventory" field.
func (pu *ProductUpdate) ClearRequireInventory() *ProductUpdate {
	pu.mutation.ClearRequireInventory()
	return pu
}

// SetQuantityUomID sets the "quantity_uom_id" field.
func (pu *ProductUpdate) SetQuantityUomID(i int) *ProductUpdate {
	pu.mutation.ResetQuantityUomID()
	pu.mutation.SetQuantityUomID(i)
	return pu
}

// SetNillableQuantityUomID sets the "quantity_uom_id" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableQuantityUomID(i *int) *ProductUpdate {
	if i != nil {
		pu.SetQuantityUomID(*i)
	}
	return pu
}

// AddQuantityUomID adds i to the "quantity_uom_id" field.
func (pu *ProductUpdate) AddQuantityUomID(i int) *ProductUpdate {
	pu.mutation.AddQuantityUomID(i)
	return pu
}

// ClearQuantityUomID clears the value of the "quantity_uom_id" field.
func (pu *ProductUpdate) ClearQuantityUomID() *ProductUpdate {
	pu.mutation.ClearQuantityUomID()
	return pu
}

// SetQuantityIncluded sets the "quantity_included" field.
func (pu *ProductUpdate) SetQuantityIncluded(f float64) *ProductUpdate {
	pu.mutation.ResetQuantityIncluded()
	pu.mutation.SetQuantityIncluded(f)
	return pu
}

// SetNillableQuantityIncluded sets the "quantity_included" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableQuantityIncluded(f *float64) *ProductUpdate {
	if f != nil {
		pu.SetQuantityIncluded(*f)
	}
	return pu
}

// AddQuantityIncluded adds f to the "quantity_included" field.
func (pu *ProductUpdate) AddQuantityIncluded(f float64) *ProductUpdate {
	pu.mutation.AddQuantityIncluded(f)
	return pu
}

// ClearQuantityIncluded clears the value of the "quantity_included" field.
func (pu *ProductUpdate) ClearQuantityIncluded() *ProductUpdate {
	pu.mutation.ClearQuantityIncluded()
	return pu
}

// SetPiecesIncluded sets the "pieces_included" field.
func (pu *ProductUpdate) SetPiecesIncluded(i int) *ProductUpdate {
	pu.mutation.ResetPiecesIncluded()
	pu.mutation.SetPiecesIncluded(i)
	return pu
}

// SetNillablePiecesIncluded sets the "pieces_included" field if the given value is not nil.
func (pu *ProductUpdate) SetNillablePiecesIncluded(i *int) *ProductUpdate {
	if i != nil {
		pu.SetPiecesIncluded(*i)
	}
	return pu
}

// AddPiecesIncluded adds i to the "pieces_included" field.
func (pu *ProductUpdate) AddPiecesIncluded(i int) *ProductUpdate {
	pu.mutation.AddPiecesIncluded(i)
	return pu
}

// ClearPiecesIncluded clears the value of the "pieces_included" field.
func (pu *ProductUpdate) ClearPiecesIncluded() *ProductUpdate {
	pu.mutation.ClearPiecesIncluded()
	return pu
}

// SetRequireAmount sets the "require_amount" field.
func (pu *ProductUpdate) SetRequireAmount(pa product.RequireAmount) *ProductUpdate {
	pu.mutation.SetRequireAmount(pa)
	return pu
}

// SetNillableRequireAmount sets the "require_amount" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableRequireAmount(pa *product.RequireAmount) *ProductUpdate {
	if pa != nil {
		pu.SetRequireAmount(*pa)
	}
	return pu
}

// ClearRequireAmount clears the value of the "require_amount" field.
func (pu *ProductUpdate) ClearRequireAmount() *ProductUpdate {
	pu.mutation.ClearRequireAmount()
	return pu
}

// SetFixedAmount sets the "fixed_amount" field.
func (pu *ProductUpdate) SetFixedAmount(f float64) *ProductUpdate {
	pu.mutation.ResetFixedAmount()
	pu.mutation.SetFixedAmount(f)
	return pu
}

// SetNillableFixedAmount sets the "fixed_amount" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableFixedAmount(f *float64) *ProductUpdate {
	if f != nil {
		pu.SetFixedAmount(*f)
	}
	return pu
}

// AddFixedAmount adds f to the "fixed_amount" field.
func (pu *ProductUpdate) AddFixedAmount(f float64) *ProductUpdate {
	pu.mutation.AddFixedAmount(f)
	return pu
}

// ClearFixedAmount clears the value of the "fixed_amount" field.
func (pu *ProductUpdate) ClearFixedAmount() *ProductUpdate {
	pu.mutation.ClearFixedAmount()
	return pu
}

// SetAmountUomTypeID sets the "amount_uom_type_id" field.
func (pu *ProductUpdate) SetAmountUomTypeID(i int) *ProductUpdate {
	pu.mutation.ResetAmountUomTypeID()
	pu.mutation.SetAmountUomTypeID(i)
	return pu
}

// SetNillableAmountUomTypeID sets the "amount_uom_type_id" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableAmountUomTypeID(i *int) *ProductUpdate {
	if i != nil {
		pu.SetAmountUomTypeID(*i)
	}
	return pu
}

// AddAmountUomTypeID adds i to the "amount_uom_type_id" field.
func (pu *ProductUpdate) AddAmountUomTypeID(i int) *ProductUpdate {
	pu.mutation.AddAmountUomTypeID(i)
	return pu
}

// ClearAmountUomTypeID clears the value of the "amount_uom_type_id" field.
func (pu *ProductUpdate) ClearAmountUomTypeID() *ProductUpdate {
	pu.mutation.ClearAmountUomTypeID()
	return pu
}

// SetWeightUomID sets the "weight_uom_id" field.
func (pu *ProductUpdate) SetWeightUomID(i int) *ProductUpdate {
	pu.mutation.ResetWeightUomID()
	pu.mutation.SetWeightUomID(i)
	return pu
}

// SetNillableWeightUomID sets the "weight_uom_id" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableWeightUomID(i *int) *ProductUpdate {
	if i != nil {
		pu.SetWeightUomID(*i)
	}
	return pu
}

// AddWeightUomID adds i to the "weight_uom_id" field.
func (pu *ProductUpdate) AddWeightUomID(i int) *ProductUpdate {
	pu.mutation.AddWeightUomID(i)
	return pu
}

// ClearWeightUomID clears the value of the "weight_uom_id" field.
func (pu *ProductUpdate) ClearWeightUomID() *ProductUpdate {
	pu.mutation.ClearWeightUomID()
	return pu
}

// SetShippingWeight sets the "shipping_weight" field.
func (pu *ProductUpdate) SetShippingWeight(f float64) *ProductUpdate {
	pu.mutation.ResetShippingWeight()
	pu.mutation.SetShippingWeight(f)
	return pu
}

// SetNillableShippingWeight sets the "shipping_weight" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableShippingWeight(f *float64) *ProductUpdate {
	if f != nil {
		pu.SetShippingWeight(*f)
	}
	return pu
}

// AddShippingWeight adds f to the "shipping_weight" field.
func (pu *ProductUpdate) AddShippingWeight(f float64) *ProductUpdate {
	pu.mutation.AddShippingWeight(f)
	return pu
}

// ClearShippingWeight clears the value of the "shipping_weight" field.
func (pu *ProductUpdate) ClearShippingWeight() *ProductUpdate {
	pu.mutation.ClearShippingWeight()
	return pu
}

// SetProductWeight sets the "product_weight" field.
func (pu *ProductUpdate) SetProductWeight(f float64) *ProductUpdate {
	pu.mutation.ResetProductWeight()
	pu.mutation.SetProductWeight(f)
	return pu
}

// SetNillableProductWeight sets the "product_weight" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableProductWeight(f *float64) *ProductUpdate {
	if f != nil {
		pu.SetProductWeight(*f)
	}
	return pu
}

// AddProductWeight adds f to the "product_weight" field.
func (pu *ProductUpdate) AddProductWeight(f float64) *ProductUpdate {
	pu.mutation.AddProductWeight(f)
	return pu
}

// ClearProductWeight clears the value of the "product_weight" field.
func (pu *ProductUpdate) ClearProductWeight() *ProductUpdate {
	pu.mutation.ClearProductWeight()
	return pu
}

// SetHeightUomID sets the "height_uom_id" field.
func (pu *ProductUpdate) SetHeightUomID(i int) *ProductUpdate {
	pu.mutation.ResetHeightUomID()
	pu.mutation.SetHeightUomID(i)
	return pu
}

// SetNillableHeightUomID sets the "height_uom_id" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableHeightUomID(i *int) *ProductUpdate {
	if i != nil {
		pu.SetHeightUomID(*i)
	}
	return pu
}

// AddHeightUomID adds i to the "height_uom_id" field.
func (pu *ProductUpdate) AddHeightUomID(i int) *ProductUpdate {
	pu.mutation.AddHeightUomID(i)
	return pu
}

// ClearHeightUomID clears the value of the "height_uom_id" field.
func (pu *ProductUpdate) ClearHeightUomID() *ProductUpdate {
	pu.mutation.ClearHeightUomID()
	return pu
}

// SetProductHeight sets the "product_height" field.
func (pu *ProductUpdate) SetProductHeight(f float64) *ProductUpdate {
	pu.mutation.ResetProductHeight()
	pu.mutation.SetProductHeight(f)
	return pu
}

// SetNillableProductHeight sets the "product_height" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableProductHeight(f *float64) *ProductUpdate {
	if f != nil {
		pu.SetProductHeight(*f)
	}
	return pu
}

// AddProductHeight adds f to the "product_height" field.
func (pu *ProductUpdate) AddProductHeight(f float64) *ProductUpdate {
	pu.mutation.AddProductHeight(f)
	return pu
}

// ClearProductHeight clears the value of the "product_height" field.
func (pu *ProductUpdate) ClearProductHeight() *ProductUpdate {
	pu.mutation.ClearProductHeight()
	return pu
}

// SetShippingHeight sets the "shipping_height" field.
func (pu *ProductUpdate) SetShippingHeight(f float64) *ProductUpdate {
	pu.mutation.ResetShippingHeight()
	pu.mutation.SetShippingHeight(f)
	return pu
}

// SetNillableShippingHeight sets the "shipping_height" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableShippingHeight(f *float64) *ProductUpdate {
	if f != nil {
		pu.SetShippingHeight(*f)
	}
	return pu
}

// AddShippingHeight adds f to the "shipping_height" field.
func (pu *ProductUpdate) AddShippingHeight(f float64) *ProductUpdate {
	pu.mutation.AddShippingHeight(f)
	return pu
}

// ClearShippingHeight clears the value of the "shipping_height" field.
func (pu *ProductUpdate) ClearShippingHeight() *ProductUpdate {
	pu.mutation.ClearShippingHeight()
	return pu
}

// SetWidthUomID sets the "width_uom_id" field.
func (pu *ProductUpdate) SetWidthUomID(i int) *ProductUpdate {
	pu.mutation.ResetWidthUomID()
	pu.mutation.SetWidthUomID(i)
	return pu
}

// SetNillableWidthUomID sets the "width_uom_id" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableWidthUomID(i *int) *ProductUpdate {
	if i != nil {
		pu.SetWidthUomID(*i)
	}
	return pu
}

// AddWidthUomID adds i to the "width_uom_id" field.
func (pu *ProductUpdate) AddWidthUomID(i int) *ProductUpdate {
	pu.mutation.AddWidthUomID(i)
	return pu
}

// ClearWidthUomID clears the value of the "width_uom_id" field.
func (pu *ProductUpdate) ClearWidthUomID() *ProductUpdate {
	pu.mutation.ClearWidthUomID()
	return pu
}

// SetProductWidth sets the "product_width" field.
func (pu *ProductUpdate) SetProductWidth(f float64) *ProductUpdate {
	pu.mutation.ResetProductWidth()
	pu.mutation.SetProductWidth(f)
	return pu
}

// SetNillableProductWidth sets the "product_width" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableProductWidth(f *float64) *ProductUpdate {
	if f != nil {
		pu.SetProductWidth(*f)
	}
	return pu
}

// AddProductWidth adds f to the "product_width" field.
func (pu *ProductUpdate) AddProductWidth(f float64) *ProductUpdate {
	pu.mutation.AddProductWidth(f)
	return pu
}

// ClearProductWidth clears the value of the "product_width" field.
func (pu *ProductUpdate) ClearProductWidth() *ProductUpdate {
	pu.mutation.ClearProductWidth()
	return pu
}

// SetShippingWidth sets the "shipping_width" field.
func (pu *ProductUpdate) SetShippingWidth(f float64) *ProductUpdate {
	pu.mutation.ResetShippingWidth()
	pu.mutation.SetShippingWidth(f)
	return pu
}

// SetNillableShippingWidth sets the "shipping_width" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableShippingWidth(f *float64) *ProductUpdate {
	if f != nil {
		pu.SetShippingWidth(*f)
	}
	return pu
}

// AddShippingWidth adds f to the "shipping_width" field.
func (pu *ProductUpdate) AddShippingWidth(f float64) *ProductUpdate {
	pu.mutation.AddShippingWidth(f)
	return pu
}

// ClearShippingWidth clears the value of the "shipping_width" field.
func (pu *ProductUpdate) ClearShippingWidth() *ProductUpdate {
	pu.mutation.ClearShippingWidth()
	return pu
}

// SetDepthUomID sets the "depth_uom_id" field.
func (pu *ProductUpdate) SetDepthUomID(i int) *ProductUpdate {
	pu.mutation.ResetDepthUomID()
	pu.mutation.SetDepthUomID(i)
	return pu
}

// SetNillableDepthUomID sets the "depth_uom_id" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableDepthUomID(i *int) *ProductUpdate {
	if i != nil {
		pu.SetDepthUomID(*i)
	}
	return pu
}

// AddDepthUomID adds i to the "depth_uom_id" field.
func (pu *ProductUpdate) AddDepthUomID(i int) *ProductUpdate {
	pu.mutation.AddDepthUomID(i)
	return pu
}

// ClearDepthUomID clears the value of the "depth_uom_id" field.
func (pu *ProductUpdate) ClearDepthUomID() *ProductUpdate {
	pu.mutation.ClearDepthUomID()
	return pu
}

// SetProductDepth sets the "product_depth" field.
func (pu *ProductUpdate) SetProductDepth(f float64) *ProductUpdate {
	pu.mutation.ResetProductDepth()
	pu.mutation.SetProductDepth(f)
	return pu
}

// SetNillableProductDepth sets the "product_depth" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableProductDepth(f *float64) *ProductUpdate {
	if f != nil {
		pu.SetProductDepth(*f)
	}
	return pu
}

// AddProductDepth adds f to the "product_depth" field.
func (pu *ProductUpdate) AddProductDepth(f float64) *ProductUpdate {
	pu.mutation.AddProductDepth(f)
	return pu
}

// ClearProductDepth clears the value of the "product_depth" field.
func (pu *ProductUpdate) ClearProductDepth() *ProductUpdate {
	pu.mutation.ClearProductDepth()
	return pu
}

// SetShippingDepth sets the "shipping_depth" field.
func (pu *ProductUpdate) SetShippingDepth(f float64) *ProductUpdate {
	pu.mutation.ResetShippingDepth()
	pu.mutation.SetShippingDepth(f)
	return pu
}

// SetNillableShippingDepth sets the "shipping_depth" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableShippingDepth(f *float64) *ProductUpdate {
	if f != nil {
		pu.SetShippingDepth(*f)
	}
	return pu
}

// AddShippingDepth adds f to the "shipping_depth" field.
func (pu *ProductUpdate) AddShippingDepth(f float64) *ProductUpdate {
	pu.mutation.AddShippingDepth(f)
	return pu
}

// ClearShippingDepth clears the value of the "shipping_depth" field.
func (pu *ProductUpdate) ClearShippingDepth() *ProductUpdate {
	pu.mutation.ClearShippingDepth()
	return pu
}

// SetDiameterUomID sets the "diameter_uom_id" field.
func (pu *ProductUpdate) SetDiameterUomID(i int) *ProductUpdate {
	pu.mutation.ResetDiameterUomID()
	pu.mutation.SetDiameterUomID(i)
	return pu
}

// SetNillableDiameterUomID sets the "diameter_uom_id" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableDiameterUomID(i *int) *ProductUpdate {
	if i != nil {
		pu.SetDiameterUomID(*i)
	}
	return pu
}

// AddDiameterUomID adds i to the "diameter_uom_id" field.
func (pu *ProductUpdate) AddDiameterUomID(i int) *ProductUpdate {
	pu.mutation.AddDiameterUomID(i)
	return pu
}

// ClearDiameterUomID clears the value of the "diameter_uom_id" field.
func (pu *ProductUpdate) ClearDiameterUomID() *ProductUpdate {
	pu.mutation.ClearDiameterUomID()
	return pu
}

// SetProductDiameter sets the "product_diameter" field.
func (pu *ProductUpdate) SetProductDiameter(f float64) *ProductUpdate {
	pu.mutation.ResetProductDiameter()
	pu.mutation.SetProductDiameter(f)
	return pu
}

// SetNillableProductDiameter sets the "product_diameter" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableProductDiameter(f *float64) *ProductUpdate {
	if f != nil {
		pu.SetProductDiameter(*f)
	}
	return pu
}

// AddProductDiameter adds f to the "product_diameter" field.
func (pu *ProductUpdate) AddProductDiameter(f float64) *ProductUpdate {
	pu.mutation.AddProductDiameter(f)
	return pu
}

// ClearProductDiameter clears the value of the "product_diameter" field.
func (pu *ProductUpdate) ClearProductDiameter() *ProductUpdate {
	pu.mutation.ClearProductDiameter()
	return pu
}

// SetProductRating sets the "product_rating" field.
func (pu *ProductUpdate) SetProductRating(f float64) *ProductUpdate {
	pu.mutation.ResetProductRating()
	pu.mutation.SetProductRating(f)
	return pu
}

// SetNillableProductRating sets the "product_rating" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableProductRating(f *float64) *ProductUpdate {
	if f != nil {
		pu.SetProductRating(*f)
	}
	return pu
}

// AddProductRating adds f to the "product_rating" field.
func (pu *ProductUpdate) AddProductRating(f float64) *ProductUpdate {
	pu.mutation.AddProductRating(f)
	return pu
}

// ClearProductRating clears the value of the "product_rating" field.
func (pu *ProductUpdate) ClearProductRating() *ProductUpdate {
	pu.mutation.ClearProductRating()
	return pu
}

// SetReturnable sets the "returnable" field.
func (pu *ProductUpdate) SetReturnable(pr product.Returnable) *ProductUpdate {
	pu.mutation.SetReturnable(pr)
	return pu
}

// SetNillableReturnable sets the "returnable" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableReturnable(pr *product.Returnable) *ProductUpdate {
	if pr != nil {
		pu.SetReturnable(*pr)
	}
	return pu
}

// ClearReturnable clears the value of the "returnable" field.
func (pu *ProductUpdate) ClearReturnable() *ProductUpdate {
	pu.mutation.ClearReturnable()
	return pu
}

// SetTaxable sets the "taxable" field.
func (pu *ProductUpdate) SetTaxable(pr product.Taxable) *ProductUpdate {
	pu.mutation.SetTaxable(pr)
	return pu
}

// SetNillableTaxable sets the "taxable" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableTaxable(pr *product.Taxable) *ProductUpdate {
	if pr != nil {
		pu.SetTaxable(*pr)
	}
	return pu
}

// ClearTaxable clears the value of the "taxable" field.
func (pu *ProductUpdate) ClearTaxable() *ProductUpdate {
	pu.mutation.ClearTaxable()
	return pu
}

// SetChargeShipping sets the "charge_shipping" field.
func (pu *ProductUpdate) SetChargeShipping(ps product.ChargeShipping) *ProductUpdate {
	pu.mutation.SetChargeShipping(ps)
	return pu
}

// SetNillableChargeShipping sets the "charge_shipping" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableChargeShipping(ps *product.ChargeShipping) *ProductUpdate {
	if ps != nil {
		pu.SetChargeShipping(*ps)
	}
	return pu
}

// ClearChargeShipping clears the value of the "charge_shipping" field.
func (pu *ProductUpdate) ClearChargeShipping() *ProductUpdate {
	pu.mutation.ClearChargeShipping()
	return pu
}

// SetAutoCreateKeywords sets the "auto_create_keywords" field.
func (pu *ProductUpdate) SetAutoCreateKeywords(pck product.AutoCreateKeywords) *ProductUpdate {
	pu.mutation.SetAutoCreateKeywords(pck)
	return pu
}

// SetNillableAutoCreateKeywords sets the "auto_create_keywords" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableAutoCreateKeywords(pck *product.AutoCreateKeywords) *ProductUpdate {
	if pck != nil {
		pu.SetAutoCreateKeywords(*pck)
	}
	return pu
}

// ClearAutoCreateKeywords clears the value of the "auto_create_keywords" field.
func (pu *ProductUpdate) ClearAutoCreateKeywords() *ProductUpdate {
	pu.mutation.ClearAutoCreateKeywords()
	return pu
}

// SetIncludeInPromotions sets the "include_in_promotions" field.
func (pu *ProductUpdate) SetIncludeInPromotions(pip product.IncludeInPromotions) *ProductUpdate {
	pu.mutation.SetIncludeInPromotions(pip)
	return pu
}

// SetNillableIncludeInPromotions sets the "include_in_promotions" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableIncludeInPromotions(pip *product.IncludeInPromotions) *ProductUpdate {
	if pip != nil {
		pu.SetIncludeInPromotions(*pip)
	}
	return pu
}

// ClearIncludeInPromotions clears the value of the "include_in_promotions" field.
func (pu *ProductUpdate) ClearIncludeInPromotions() *ProductUpdate {
	pu.mutation.ClearIncludeInPromotions()
	return pu
}

// SetIsVirtual sets the "is_virtual" field.
func (pu *ProductUpdate) SetIsVirtual(pv product.IsVirtual) *ProductUpdate {
	pu.mutation.SetIsVirtual(pv)
	return pu
}

// SetNillableIsVirtual sets the "is_virtual" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableIsVirtual(pv *product.IsVirtual) *ProductUpdate {
	if pv != nil {
		pu.SetIsVirtual(*pv)
	}
	return pu
}

// ClearIsVirtual clears the value of the "is_virtual" field.
func (pu *ProductUpdate) ClearIsVirtual() *ProductUpdate {
	pu.mutation.ClearIsVirtual()
	return pu
}

// SetIsVariant sets the "is_variant" field.
func (pu *ProductUpdate) SetIsVariant(pv product.IsVariant) *ProductUpdate {
	pu.mutation.SetIsVariant(pv)
	return pu
}

// SetNillableIsVariant sets the "is_variant" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableIsVariant(pv *product.IsVariant) *ProductUpdate {
	if pv != nil {
		pu.SetIsVariant(*pv)
	}
	return pu
}

// ClearIsVariant clears the value of the "is_variant" field.
func (pu *ProductUpdate) ClearIsVariant() *ProductUpdate {
	pu.mutation.ClearIsVariant()
	return pu
}

// SetOriginGeoID sets the "origin_geo_id" field.
func (pu *ProductUpdate) SetOriginGeoID(i int) *ProductUpdate {
	pu.mutation.ResetOriginGeoID()
	pu.mutation.SetOriginGeoID(i)
	return pu
}

// SetNillableOriginGeoID sets the "origin_geo_id" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableOriginGeoID(i *int) *ProductUpdate {
	if i != nil {
		pu.SetOriginGeoID(*i)
	}
	return pu
}

// AddOriginGeoID adds i to the "origin_geo_id" field.
func (pu *ProductUpdate) AddOriginGeoID(i int) *ProductUpdate {
	pu.mutation.AddOriginGeoID(i)
	return pu
}

// ClearOriginGeoID clears the value of the "origin_geo_id" field.
func (pu *ProductUpdate) ClearOriginGeoID() *ProductUpdate {
	pu.mutation.ClearOriginGeoID()
	return pu
}

// SetBillOfMaterialLevel sets the "bill_of_material_level" field.
func (pu *ProductUpdate) SetBillOfMaterialLevel(i int) *ProductUpdate {
	pu.mutation.ResetBillOfMaterialLevel()
	pu.mutation.SetBillOfMaterialLevel(i)
	return pu
}

// SetNillableBillOfMaterialLevel sets the "bill_of_material_level" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableBillOfMaterialLevel(i *int) *ProductUpdate {
	if i != nil {
		pu.SetBillOfMaterialLevel(*i)
	}
	return pu
}

// AddBillOfMaterialLevel adds i to the "bill_of_material_level" field.
func (pu *ProductUpdate) AddBillOfMaterialLevel(i int) *ProductUpdate {
	pu.mutation.AddBillOfMaterialLevel(i)
	return pu
}

// ClearBillOfMaterialLevel clears the value of the "bill_of_material_level" field.
func (pu *ProductUpdate) ClearBillOfMaterialLevel() *ProductUpdate {
	pu.mutation.ClearBillOfMaterialLevel()
	return pu
}

// SetReservMaxPersons sets the "reserv_max_persons" field.
func (pu *ProductUpdate) SetReservMaxPersons(f float64) *ProductUpdate {
	pu.mutation.ResetReservMaxPersons()
	pu.mutation.SetReservMaxPersons(f)
	return pu
}

// SetNillableReservMaxPersons sets the "reserv_max_persons" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableReservMaxPersons(f *float64) *ProductUpdate {
	if f != nil {
		pu.SetReservMaxPersons(*f)
	}
	return pu
}

// AddReservMaxPersons adds f to the "reserv_max_persons" field.
func (pu *ProductUpdate) AddReservMaxPersons(f float64) *ProductUpdate {
	pu.mutation.AddReservMaxPersons(f)
	return pu
}

// ClearReservMaxPersons clears the value of the "reserv_max_persons" field.
func (pu *ProductUpdate) ClearReservMaxPersons() *ProductUpdate {
	pu.mutation.ClearReservMaxPersons()
	return pu
}

// SetReserv2NdPpPerc sets the "reserv_2_nd_pp_perc" field.
func (pu *ProductUpdate) SetReserv2NdPpPerc(f float64) *ProductUpdate {
	pu.mutation.ResetReserv2NdPpPerc()
	pu.mutation.SetReserv2NdPpPerc(f)
	return pu
}

// SetNillableReserv2NdPpPerc sets the "reserv_2_nd_pp_perc" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableReserv2NdPpPerc(f *float64) *ProductUpdate {
	if f != nil {
		pu.SetReserv2NdPpPerc(*f)
	}
	return pu
}

// AddReserv2NdPpPerc adds f to the "reserv_2_nd_pp_perc" field.
func (pu *ProductUpdate) AddReserv2NdPpPerc(f float64) *ProductUpdate {
	pu.mutation.AddReserv2NdPpPerc(f)
	return pu
}

// ClearReserv2NdPpPerc clears the value of the "reserv_2_nd_pp_perc" field.
func (pu *ProductUpdate) ClearReserv2NdPpPerc() *ProductUpdate {
	pu.mutation.ClearReserv2NdPpPerc()
	return pu
}

// SetReservNthPpPerc sets the "reserv_nth_pp_perc" field.
func (pu *ProductUpdate) SetReservNthPpPerc(f float64) *ProductUpdate {
	pu.mutation.ResetReservNthPpPerc()
	pu.mutation.SetReservNthPpPerc(f)
	return pu
}

// SetNillableReservNthPpPerc sets the "reserv_nth_pp_perc" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableReservNthPpPerc(f *float64) *ProductUpdate {
	if f != nil {
		pu.SetReservNthPpPerc(*f)
	}
	return pu
}

// AddReservNthPpPerc adds f to the "reserv_nth_pp_perc" field.
func (pu *ProductUpdate) AddReservNthPpPerc(f float64) *ProductUpdate {
	pu.mutation.AddReservNthPpPerc(f)
	return pu
}

// ClearReservNthPpPerc clears the value of the "reserv_nth_pp_perc" field.
func (pu *ProductUpdate) ClearReservNthPpPerc() *ProductUpdate {
	pu.mutation.ClearReservNthPpPerc()
	return pu
}

// SetConfigID sets the "config_id" field.
func (pu *ProductUpdate) SetConfigID(i int) *ProductUpdate {
	pu.mutation.ResetConfigID()
	pu.mutation.SetConfigID(i)
	return pu
}

// SetNillableConfigID sets the "config_id" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableConfigID(i *int) *ProductUpdate {
	if i != nil {
		pu.SetConfigID(*i)
	}
	return pu
}

// AddConfigID adds i to the "config_id" field.
func (pu *ProductUpdate) AddConfigID(i int) *ProductUpdate {
	pu.mutation.AddConfigID(i)
	return pu
}

// ClearConfigID clears the value of the "config_id" field.
func (pu *ProductUpdate) ClearConfigID() *ProductUpdate {
	pu.mutation.ClearConfigID()
	return pu
}

// SetCreatedDate sets the "created_date" field.
func (pu *ProductUpdate) SetCreatedDate(t time.Time) *ProductUpdate {
	pu.mutation.SetCreatedDate(t)
	return pu
}

// SetNillableCreatedDate sets the "created_date" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableCreatedDate(t *time.Time) *ProductUpdate {
	if t != nil {
		pu.SetCreatedDate(*t)
	}
	return pu
}

// ClearCreatedDate clears the value of the "created_date" field.
func (pu *ProductUpdate) ClearCreatedDate() *ProductUpdate {
	pu.mutation.ClearCreatedDate()
	return pu
}

// SetCreatedByUserLogin sets the "created_by_user_login" field.
func (pu *ProductUpdate) SetCreatedByUserLogin(s string) *ProductUpdate {
	pu.mutation.SetCreatedByUserLogin(s)
	return pu
}

// SetNillableCreatedByUserLogin sets the "created_by_user_login" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableCreatedByUserLogin(s *string) *ProductUpdate {
	if s != nil {
		pu.SetCreatedByUserLogin(*s)
	}
	return pu
}

// ClearCreatedByUserLogin clears the value of the "created_by_user_login" field.
func (pu *ProductUpdate) ClearCreatedByUserLogin() *ProductUpdate {
	pu.mutation.ClearCreatedByUserLogin()
	return pu
}

// SetLastModifiedDate sets the "last_modified_date" field.
func (pu *ProductUpdate) SetLastModifiedDate(t time.Time) *ProductUpdate {
	pu.mutation.SetLastModifiedDate(t)
	return pu
}

// SetNillableLastModifiedDate sets the "last_modified_date" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableLastModifiedDate(t *time.Time) *ProductUpdate {
	if t != nil {
		pu.SetLastModifiedDate(*t)
	}
	return pu
}

// ClearLastModifiedDate clears the value of the "last_modified_date" field.
func (pu *ProductUpdate) ClearLastModifiedDate() *ProductUpdate {
	pu.mutation.ClearLastModifiedDate()
	return pu
}

// SetLastModifiedByUserLogin sets the "last_modified_by_user_login" field.
func (pu *ProductUpdate) SetLastModifiedByUserLogin(s string) *ProductUpdate {
	pu.mutation.SetLastModifiedByUserLogin(s)
	return pu
}

// SetNillableLastModifiedByUserLogin sets the "last_modified_by_user_login" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableLastModifiedByUserLogin(s *string) *ProductUpdate {
	if s != nil {
		pu.SetLastModifiedByUserLogin(*s)
	}
	return pu
}

// ClearLastModifiedByUserLogin clears the value of the "last_modified_by_user_login" field.
func (pu *ProductUpdate) ClearLastModifiedByUserLogin() *ProductUpdate {
	pu.mutation.ClearLastModifiedByUserLogin()
	return pu
}

// SetInShippingBox sets the "in_shipping_box" field.
func (pu *ProductUpdate) SetInShippingBox(psb product.InShippingBox) *ProductUpdate {
	pu.mutation.SetInShippingBox(psb)
	return pu
}

// SetNillableInShippingBox sets the "in_shipping_box" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableInShippingBox(psb *product.InShippingBox) *ProductUpdate {
	if psb != nil {
		pu.SetInShippingBox(*psb)
	}
	return pu
}

// ClearInShippingBox clears the value of the "in_shipping_box" field.
func (pu *ProductUpdate) ClearInShippingBox() *ProductUpdate {
	pu.mutation.ClearInShippingBox()
	return pu
}

// SetDefaultShipmentBoxTypeID sets the "default_shipment_box_type_id" field.
func (pu *ProductUpdate) SetDefaultShipmentBoxTypeID(i int) *ProductUpdate {
	pu.mutation.ResetDefaultShipmentBoxTypeID()
	pu.mutation.SetDefaultShipmentBoxTypeID(i)
	return pu
}

// SetNillableDefaultShipmentBoxTypeID sets the "default_shipment_box_type_id" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableDefaultShipmentBoxTypeID(i *int) *ProductUpdate {
	if i != nil {
		pu.SetDefaultShipmentBoxTypeID(*i)
	}
	return pu
}

// AddDefaultShipmentBoxTypeID adds i to the "default_shipment_box_type_id" field.
func (pu *ProductUpdate) AddDefaultShipmentBoxTypeID(i int) *ProductUpdate {
	pu.mutation.AddDefaultShipmentBoxTypeID(i)
	return pu
}

// ClearDefaultShipmentBoxTypeID clears the value of the "default_shipment_box_type_id" field.
func (pu *ProductUpdate) ClearDefaultShipmentBoxTypeID() *ProductUpdate {
	pu.mutation.ClearDefaultShipmentBoxTypeID()
	return pu
}

// SetLotIDFilledIn sets the "lot_id_filled_in" field.
func (pu *ProductUpdate) SetLotIDFilledIn(s string) *ProductUpdate {
	pu.mutation.SetLotIDFilledIn(s)
	return pu
}

// SetNillableLotIDFilledIn sets the "lot_id_filled_in" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableLotIDFilledIn(s *string) *ProductUpdate {
	if s != nil {
		pu.SetLotIDFilledIn(*s)
	}
	return pu
}

// ClearLotIDFilledIn clears the value of the "lot_id_filled_in" field.
func (pu *ProductUpdate) ClearLotIDFilledIn() *ProductUpdate {
	pu.mutation.ClearLotIDFilledIn()
	return pu
}

// SetOrderDecimalQuantity sets the "order_decimal_quantity" field.
func (pu *ProductUpdate) SetOrderDecimalQuantity(pdq product.OrderDecimalQuantity) *ProductUpdate {
	pu.mutation.SetOrderDecimalQuantity(pdq)
	return pu
}

// SetNillableOrderDecimalQuantity sets the "order_decimal_quantity" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableOrderDecimalQuantity(pdq *product.OrderDecimalQuantity) *ProductUpdate {
	if pdq != nil {
		pu.SetOrderDecimalQuantity(*pdq)
	}
	return pu
}

// ClearOrderDecimalQuantity clears the value of the "order_decimal_quantity" field.
func (pu *ProductUpdate) ClearOrderDecimalQuantity() *ProductUpdate {
	pu.mutation.ClearOrderDecimalQuantity()
	return pu
}

// SetProductTypeID sets the "product_type" edge to the ProductType entity by ID.
func (pu *ProductUpdate) SetProductTypeID(id int) *ProductUpdate {
	pu.mutation.SetProductTypeID(id)
	return pu
}

// SetNillableProductTypeID sets the "product_type" edge to the ProductType entity by ID if the given value is not nil.
func (pu *ProductUpdate) SetNillableProductTypeID(id *int) *ProductUpdate {
	if id != nil {
		pu = pu.SetProductTypeID(*id)
	}
	return pu
}

// SetProductType sets the "product_type" edge to the ProductType entity.
func (pu *ProductUpdate) SetProductType(p *ProductType) *ProductUpdate {
	return pu.SetProductTypeID(p.ID)
}

// SetPrimaryProductCategoryID sets the "primary_product_category" edge to the ProductCategory entity by ID.
func (pu *ProductUpdate) SetPrimaryProductCategoryID(id int) *ProductUpdate {
	pu.mutation.SetPrimaryProductCategoryID(id)
	return pu
}

// SetNillablePrimaryProductCategoryID sets the "primary_product_category" edge to the ProductCategory entity by ID if the given value is not nil.
func (pu *ProductUpdate) SetNillablePrimaryProductCategoryID(id *int) *ProductUpdate {
	if id != nil {
		pu = pu.SetPrimaryProductCategoryID(*id)
	}
	return pu
}

// SetPrimaryProductCategory sets the "primary_product_category" edge to the ProductCategory entity.
func (pu *ProductUpdate) SetPrimaryProductCategory(p *ProductCategory) *ProductUpdate {
	return pu.SetPrimaryProductCategoryID(p.ID)
}

// SetVirtualVariantMethodEnumerationID sets the "virtual_variant_method_enumeration" edge to the Enumeration entity by ID.
func (pu *ProductUpdate) SetVirtualVariantMethodEnumerationID(id int) *ProductUpdate {
	pu.mutation.SetVirtualVariantMethodEnumerationID(id)
	return pu
}

// SetNillableVirtualVariantMethodEnumerationID sets the "virtual_variant_method_enumeration" edge to the Enumeration entity by ID if the given value is not nil.
func (pu *ProductUpdate) SetNillableVirtualVariantMethodEnumerationID(id *int) *ProductUpdate {
	if id != nil {
		pu = pu.SetVirtualVariantMethodEnumerationID(*id)
	}
	return pu
}

// SetVirtualVariantMethodEnumeration sets the "virtual_variant_method_enumeration" edge to the Enumeration entity.
func (pu *ProductUpdate) SetVirtualVariantMethodEnumeration(e *Enumeration) *ProductUpdate {
	return pu.SetVirtualVariantMethodEnumerationID(e.ID)
}

// SetRatingEnumerationID sets the "rating_enumeration" edge to the Enumeration entity by ID.
func (pu *ProductUpdate) SetRatingEnumerationID(id int) *ProductUpdate {
	pu.mutation.SetRatingEnumerationID(id)
	return pu
}

// SetNillableRatingEnumerationID sets the "rating_enumeration" edge to the Enumeration entity by ID if the given value is not nil.
func (pu *ProductUpdate) SetNillableRatingEnumerationID(id *int) *ProductUpdate {
	if id != nil {
		pu = pu.SetRatingEnumerationID(*id)
	}
	return pu
}

// SetRatingEnumeration sets the "rating_enumeration" edge to the Enumeration entity.
func (pu *ProductUpdate) SetRatingEnumeration(e *Enumeration) *ProductUpdate {
	return pu.SetRatingEnumerationID(e.ID)
}

// SetRequirementMethodEnumerationID sets the "requirement_method_enumeration" edge to the Enumeration entity by ID.
func (pu *ProductUpdate) SetRequirementMethodEnumerationID(id int) *ProductUpdate {
	pu.mutation.SetRequirementMethodEnumerationID(id)
	return pu
}

// SetNillableRequirementMethodEnumerationID sets the "requirement_method_enumeration" edge to the Enumeration entity by ID if the given value is not nil.
func (pu *ProductUpdate) SetNillableRequirementMethodEnumerationID(id *int) *ProductUpdate {
	if id != nil {
		pu = pu.SetRequirementMethodEnumerationID(*id)
	}
	return pu
}

// SetRequirementMethodEnumeration sets the "requirement_method_enumeration" edge to the Enumeration entity.
func (pu *ProductUpdate) SetRequirementMethodEnumeration(e *Enumeration) *ProductUpdate {
	return pu.SetRequirementMethodEnumerationID(e.ID)
}

// SetInventoryItemTypeID sets the "inventory_item_type" edge to the InventoryItemType entity by ID.
func (pu *ProductUpdate) SetInventoryItemTypeID(id int) *ProductUpdate {
	pu.mutation.SetInventoryItemTypeID(id)
	return pu
}

// SetNillableInventoryItemTypeID sets the "inventory_item_type" edge to the InventoryItemType entity by ID if the given value is not nil.
func (pu *ProductUpdate) SetNillableInventoryItemTypeID(id *int) *ProductUpdate {
	if id != nil {
		pu = pu.SetInventoryItemTypeID(*id)
	}
	return pu
}

// SetInventoryItemType sets the "inventory_item_type" edge to the InventoryItemType entity.
func (pu *ProductUpdate) SetInventoryItemType(i *InventoryItemType) *ProductUpdate {
	return pu.SetInventoryItemTypeID(i.ID)
}

// AddOrderItemIDs adds the "order_items" edge to the OrderItem entity by IDs.
func (pu *ProductUpdate) AddOrderItemIDs(ids ...int) *ProductUpdate {
	pu.mutation.AddOrderItemIDs(ids...)
	return pu
}

// AddOrderItems adds the "order_items" edges to the OrderItem entity.
func (pu *ProductUpdate) AddOrderItems(o ...*OrderItem) *ProductUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return pu.AddOrderItemIDs(ids...)
}

// AddMainProductAssocIDs adds the "main_product_assocs" edge to the ProductAssoc entity by IDs.
func (pu *ProductUpdate) AddMainProductAssocIDs(ids ...int) *ProductUpdate {
	pu.mutation.AddMainProductAssocIDs(ids...)
	return pu
}

// AddMainProductAssocs adds the "main_product_assocs" edges to the ProductAssoc entity.
func (pu *ProductUpdate) AddMainProductAssocs(p ...*ProductAssoc) *ProductUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddMainProductAssocIDs(ids...)
}

// AddAssocProductAssocIDs adds the "assoc_product_assocs" edge to the ProductAssoc entity by IDs.
func (pu *ProductUpdate) AddAssocProductAssocIDs(ids ...int) *ProductUpdate {
	pu.mutation.AddAssocProductAssocIDs(ids...)
	return pu
}

// AddAssocProductAssocs adds the "assoc_product_assocs" edges to the ProductAssoc entity.
func (pu *ProductUpdate) AddAssocProductAssocs(p ...*ProductAssoc) *ProductUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddAssocProductAssocIDs(ids...)
}

// AddProductPriceIDs adds the "product_prices" edge to the ProductPrice entity by IDs.
func (pu *ProductUpdate) AddProductPriceIDs(ids ...int) *ProductUpdate {
	pu.mutation.AddProductPriceIDs(ids...)
	return pu
}

// AddProductPrices adds the "product_prices" edges to the ProductPrice entity.
func (pu *ProductUpdate) AddProductPrices(p ...*ProductPrice) *ProductUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddProductPriceIDs(ids...)
}

// AddProductReviewIDs adds the "product_reviews" edge to the ProductReview entity by IDs.
func (pu *ProductUpdate) AddProductReviewIDs(ids ...int) *ProductUpdate {
	pu.mutation.AddProductReviewIDs(ids...)
	return pu
}

// AddProductReviews adds the "product_reviews" edges to the ProductReview entity.
func (pu *ProductUpdate) AddProductReviews(p ...*ProductReview) *ProductUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddProductReviewIDs(ids...)
}

// Mutation returns the ProductMutation object of the builder.
func (pu *ProductUpdate) Mutation() *ProductMutation {
	return pu.mutation
}

// ClearProductType clears the "product_type" edge to the ProductType entity.
func (pu *ProductUpdate) ClearProductType() *ProductUpdate {
	pu.mutation.ClearProductType()
	return pu
}

// ClearPrimaryProductCategory clears the "primary_product_category" edge to the ProductCategory entity.
func (pu *ProductUpdate) ClearPrimaryProductCategory() *ProductUpdate {
	pu.mutation.ClearPrimaryProductCategory()
	return pu
}

// ClearVirtualVariantMethodEnumeration clears the "virtual_variant_method_enumeration" edge to the Enumeration entity.
func (pu *ProductUpdate) ClearVirtualVariantMethodEnumeration() *ProductUpdate {
	pu.mutation.ClearVirtualVariantMethodEnumeration()
	return pu
}

// ClearRatingEnumeration clears the "rating_enumeration" edge to the Enumeration entity.
func (pu *ProductUpdate) ClearRatingEnumeration() *ProductUpdate {
	pu.mutation.ClearRatingEnumeration()
	return pu
}

// ClearRequirementMethodEnumeration clears the "requirement_method_enumeration" edge to the Enumeration entity.
func (pu *ProductUpdate) ClearRequirementMethodEnumeration() *ProductUpdate {
	pu.mutation.ClearRequirementMethodEnumeration()
	return pu
}

// ClearInventoryItemType clears the "inventory_item_type" edge to the InventoryItemType entity.
func (pu *ProductUpdate) ClearInventoryItemType() *ProductUpdate {
	pu.mutation.ClearInventoryItemType()
	return pu
}

// ClearOrderItems clears all "order_items" edges to the OrderItem entity.
func (pu *ProductUpdate) ClearOrderItems() *ProductUpdate {
	pu.mutation.ClearOrderItems()
	return pu
}

// RemoveOrderItemIDs removes the "order_items" edge to OrderItem entities by IDs.
func (pu *ProductUpdate) RemoveOrderItemIDs(ids ...int) *ProductUpdate {
	pu.mutation.RemoveOrderItemIDs(ids...)
	return pu
}

// RemoveOrderItems removes "order_items" edges to OrderItem entities.
func (pu *ProductUpdate) RemoveOrderItems(o ...*OrderItem) *ProductUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return pu.RemoveOrderItemIDs(ids...)
}

// ClearMainProductAssocs clears all "main_product_assocs" edges to the ProductAssoc entity.
func (pu *ProductUpdate) ClearMainProductAssocs() *ProductUpdate {
	pu.mutation.ClearMainProductAssocs()
	return pu
}

// RemoveMainProductAssocIDs removes the "main_product_assocs" edge to ProductAssoc entities by IDs.
func (pu *ProductUpdate) RemoveMainProductAssocIDs(ids ...int) *ProductUpdate {
	pu.mutation.RemoveMainProductAssocIDs(ids...)
	return pu
}

// RemoveMainProductAssocs removes "main_product_assocs" edges to ProductAssoc entities.
func (pu *ProductUpdate) RemoveMainProductAssocs(p ...*ProductAssoc) *ProductUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemoveMainProductAssocIDs(ids...)
}

// ClearAssocProductAssocs clears all "assoc_product_assocs" edges to the ProductAssoc entity.
func (pu *ProductUpdate) ClearAssocProductAssocs() *ProductUpdate {
	pu.mutation.ClearAssocProductAssocs()
	return pu
}

// RemoveAssocProductAssocIDs removes the "assoc_product_assocs" edge to ProductAssoc entities by IDs.
func (pu *ProductUpdate) RemoveAssocProductAssocIDs(ids ...int) *ProductUpdate {
	pu.mutation.RemoveAssocProductAssocIDs(ids...)
	return pu
}

// RemoveAssocProductAssocs removes "assoc_product_assocs" edges to ProductAssoc entities.
func (pu *ProductUpdate) RemoveAssocProductAssocs(p ...*ProductAssoc) *ProductUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemoveAssocProductAssocIDs(ids...)
}

// ClearProductPrices clears all "product_prices" edges to the ProductPrice entity.
func (pu *ProductUpdate) ClearProductPrices() *ProductUpdate {
	pu.mutation.ClearProductPrices()
	return pu
}

// RemoveProductPriceIDs removes the "product_prices" edge to ProductPrice entities by IDs.
func (pu *ProductUpdate) RemoveProductPriceIDs(ids ...int) *ProductUpdate {
	pu.mutation.RemoveProductPriceIDs(ids...)
	return pu
}

// RemoveProductPrices removes "product_prices" edges to ProductPrice entities.
func (pu *ProductUpdate) RemoveProductPrices(p ...*ProductPrice) *ProductUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemoveProductPriceIDs(ids...)
}

// ClearProductReviews clears all "product_reviews" edges to the ProductReview entity.
func (pu *ProductUpdate) ClearProductReviews() *ProductUpdate {
	pu.mutation.ClearProductReviews()
	return pu
}

// RemoveProductReviewIDs removes the "product_reviews" edge to ProductReview entities by IDs.
func (pu *ProductUpdate) RemoveProductReviewIDs(ids ...int) *ProductUpdate {
	pu.mutation.RemoveProductReviewIDs(ids...)
	return pu
}

// RemoveProductReviews removes "product_reviews" edges to ProductReview entities.
func (pu *ProductUpdate) RemoveProductReviews(p ...*ProductReview) *ProductUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemoveProductReviewIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *ProductUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	pu.defaults()
	if len(pu.hooks) == 0 {
		if err = pu.check(); err != nil {
			return 0, err
		}
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProductMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pu.check(); err != nil {
				return 0, err
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ProductUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ProductUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ProductUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *ProductUpdate) defaults() {
	if _, ok := pu.mutation.UpdateTime(); !ok {
		v := product.UpdateDefaultUpdateTime()
		pu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *ProductUpdate) check() error {
	if v, ok := pu.mutation.SalesDiscWhenNotAvail(); ok {
		if err := product.SalesDiscWhenNotAvailValidator(v); err != nil {
			return &ValidationError{Name: "sales_disc_when_not_avail", err: fmt.Errorf("ent: validator failed for field \"sales_disc_when_not_avail\": %w", err)}
		}
	}
	if v, ok := pu.mutation.RequireInventory(); ok {
		if err := product.RequireInventoryValidator(v); err != nil {
			return &ValidationError{Name: "require_inventory", err: fmt.Errorf("ent: validator failed for field \"require_inventory\": %w", err)}
		}
	}
	if v, ok := pu.mutation.RequireAmount(); ok {
		if err := product.RequireAmountValidator(v); err != nil {
			return &ValidationError{Name: "require_amount", err: fmt.Errorf("ent: validator failed for field \"require_amount\": %w", err)}
		}
	}
	if v, ok := pu.mutation.Returnable(); ok {
		if err := product.ReturnableValidator(v); err != nil {
			return &ValidationError{Name: "returnable", err: fmt.Errorf("ent: validator failed for field \"returnable\": %w", err)}
		}
	}
	if v, ok := pu.mutation.Taxable(); ok {
		if err := product.TaxableValidator(v); err != nil {
			return &ValidationError{Name: "taxable", err: fmt.Errorf("ent: validator failed for field \"taxable\": %w", err)}
		}
	}
	if v, ok := pu.mutation.ChargeShipping(); ok {
		if err := product.ChargeShippingValidator(v); err != nil {
			return &ValidationError{Name: "charge_shipping", err: fmt.Errorf("ent: validator failed for field \"charge_shipping\": %w", err)}
		}
	}
	if v, ok := pu.mutation.AutoCreateKeywords(); ok {
		if err := product.AutoCreateKeywordsValidator(v); err != nil {
			return &ValidationError{Name: "auto_create_keywords", err: fmt.Errorf("ent: validator failed for field \"auto_create_keywords\": %w", err)}
		}
	}
	if v, ok := pu.mutation.IncludeInPromotions(); ok {
		if err := product.IncludeInPromotionsValidator(v); err != nil {
			return &ValidationError{Name: "include_in_promotions", err: fmt.Errorf("ent: validator failed for field \"include_in_promotions\": %w", err)}
		}
	}
	if v, ok := pu.mutation.IsVirtual(); ok {
		if err := product.IsVirtualValidator(v); err != nil {
			return &ValidationError{Name: "is_virtual", err: fmt.Errorf("ent: validator failed for field \"is_virtual\": %w", err)}
		}
	}
	if v, ok := pu.mutation.IsVariant(); ok {
		if err := product.IsVariantValidator(v); err != nil {
			return &ValidationError{Name: "is_variant", err: fmt.Errorf("ent: validator failed for field \"is_variant\": %w", err)}
		}
	}
	if v, ok := pu.mutation.InShippingBox(); ok {
		if err := product.InShippingBoxValidator(v); err != nil {
			return &ValidationError{Name: "in_shipping_box", err: fmt.Errorf("ent: validator failed for field \"in_shipping_box\": %w", err)}
		}
	}
	if v, ok := pu.mutation.OrderDecimalQuantity(); ok {
		if err := product.OrderDecimalQuantityValidator(v); err != nil {
			return &ValidationError{Name: "order_decimal_quantity", err: fmt.Errorf("ent: validator failed for field \"order_decimal_quantity\": %w", err)}
		}
	}
	return nil
}

func (pu *ProductUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   product.Table,
			Columns: product.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: product.FieldID,
			},
		},
	}
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: product.FieldUpdateTime,
		})
	}
	if value, ok := pu.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: product.FieldStringRef,
		})
	}
	if pu.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: product.FieldStringRef,
		})
	}
	if value, ok := pu.mutation.FacilityID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: product.FieldFacilityID,
		})
	}
	if value, ok := pu.mutation.AddedFacilityID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: product.FieldFacilityID,
		})
	}
	if pu.mutation.FacilityIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: product.FieldFacilityID,
		})
	}
	if value, ok := pu.mutation.IntroductionDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: product.FieldIntroductionDate,
		})
	}
	if pu.mutation.IntroductionDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: product.FieldIntroductionDate,
		})
	}
	if value, ok := pu.mutation.ReleaseDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: product.FieldReleaseDate,
		})
	}
	if pu.mutation.ReleaseDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: product.FieldReleaseDate,
		})
	}
	if value, ok := pu.mutation.SupportDiscontinuationDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: product.FieldSupportDiscontinuationDate,
		})
	}
	if pu.mutation.SupportDiscontinuationDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: product.FieldSupportDiscontinuationDate,
		})
	}
	if value, ok := pu.mutation.SalesDiscontinuationDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: product.FieldSalesDiscontinuationDate,
		})
	}
	if pu.mutation.SalesDiscontinuationDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: product.FieldSalesDiscontinuationDate,
		})
	}
	if value, ok := pu.mutation.SalesDiscWhenNotAvail(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: product.FieldSalesDiscWhenNotAvail,
		})
	}
	if pu.mutation.SalesDiscWhenNotAvailCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: product.FieldSalesDiscWhenNotAvail,
		})
	}
	if value, ok := pu.mutation.InternalName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: product.FieldInternalName,
		})
	}
	if pu.mutation.InternalNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: product.FieldInternalName,
		})
	}
	if value, ok := pu.mutation.BrandName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: product.FieldBrandName,
		})
	}
	if pu.mutation.BrandNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: product.FieldBrandName,
		})
	}
	if value, ok := pu.mutation.Comments(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: product.FieldComments,
		})
	}
	if pu.mutation.CommentsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: product.FieldComments,
		})
	}
	if value, ok := pu.mutation.ProductName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: product.FieldProductName,
		})
	}
	if pu.mutation.ProductNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: product.FieldProductName,
		})
	}
	if value, ok := pu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: product.FieldDescription,
		})
	}
	if pu.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: product.FieldDescription,
		})
	}
	if value, ok := pu.mutation.LongDescription(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: product.FieldLongDescription,
		})
	}
	if pu.mutation.LongDescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: product.FieldLongDescription,
		})
	}
	if value, ok := pu.mutation.PriceDetailText(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: product.FieldPriceDetailText,
		})
	}
	if pu.mutation.PriceDetailTextCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: product.FieldPriceDetailText,
		})
	}
	if value, ok := pu.mutation.SmallImageURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: product.FieldSmallImageURL,
		})
	}
	if pu.mutation.SmallImageURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: product.FieldSmallImageURL,
		})
	}
	if value, ok := pu.mutation.MediumImageURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: product.FieldMediumImageURL,
		})
	}
	if pu.mutation.MediumImageURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: product.FieldMediumImageURL,
		})
	}
	if value, ok := pu.mutation.LargeImageURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: product.FieldLargeImageURL,
		})
	}
	if pu.mutation.LargeImageURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: product.FieldLargeImageURL,
		})
	}
	if value, ok := pu.mutation.DetailImageURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: product.FieldDetailImageURL,
		})
	}
	if pu.mutation.DetailImageURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: product.FieldDetailImageURL,
		})
	}
	if value, ok := pu.mutation.OriginalImageURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: product.FieldOriginalImageURL,
		})
	}
	if pu.mutation.OriginalImageURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: product.FieldOriginalImageURL,
		})
	}
	if value, ok := pu.mutation.DetailScreen(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: product.FieldDetailScreen,
		})
	}
	if pu.mutation.DetailScreenCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: product.FieldDetailScreen,
		})
	}
	if value, ok := pu.mutation.InventoryMessage(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: product.FieldInventoryMessage,
		})
	}
	if pu.mutation.InventoryMessageCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: product.FieldInventoryMessage,
		})
	}
	if value, ok := pu.mutation.RequireInventory(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: product.FieldRequireInventory,
		})
	}
	if pu.mutation.RequireInventoryCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: product.FieldRequireInventory,
		})
	}
	if value, ok := pu.mutation.QuantityUomID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: product.FieldQuantityUomID,
		})
	}
	if value, ok := pu.mutation.AddedQuantityUomID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: product.FieldQuantityUomID,
		})
	}
	if pu.mutation.QuantityUomIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: product.FieldQuantityUomID,
		})
	}
	if value, ok := pu.mutation.QuantityIncluded(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: product.FieldQuantityIncluded,
		})
	}
	if value, ok := pu.mutation.AddedQuantityIncluded(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: product.FieldQuantityIncluded,
		})
	}
	if pu.mutation.QuantityIncludedCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: product.FieldQuantityIncluded,
		})
	}
	if value, ok := pu.mutation.PiecesIncluded(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: product.FieldPiecesIncluded,
		})
	}
	if value, ok := pu.mutation.AddedPiecesIncluded(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: product.FieldPiecesIncluded,
		})
	}
	if pu.mutation.PiecesIncludedCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: product.FieldPiecesIncluded,
		})
	}
	if value, ok := pu.mutation.RequireAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: product.FieldRequireAmount,
		})
	}
	if pu.mutation.RequireAmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: product.FieldRequireAmount,
		})
	}
	if value, ok := pu.mutation.FixedAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: product.FieldFixedAmount,
		})
	}
	if value, ok := pu.mutation.AddedFixedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: product.FieldFixedAmount,
		})
	}
	if pu.mutation.FixedAmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: product.FieldFixedAmount,
		})
	}
	if value, ok := pu.mutation.AmountUomTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: product.FieldAmountUomTypeID,
		})
	}
	if value, ok := pu.mutation.AddedAmountUomTypeID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: product.FieldAmountUomTypeID,
		})
	}
	if pu.mutation.AmountUomTypeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: product.FieldAmountUomTypeID,
		})
	}
	if value, ok := pu.mutation.WeightUomID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: product.FieldWeightUomID,
		})
	}
	if value, ok := pu.mutation.AddedWeightUomID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: product.FieldWeightUomID,
		})
	}
	if pu.mutation.WeightUomIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: product.FieldWeightUomID,
		})
	}
	if value, ok := pu.mutation.ShippingWeight(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: product.FieldShippingWeight,
		})
	}
	if value, ok := pu.mutation.AddedShippingWeight(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: product.FieldShippingWeight,
		})
	}
	if pu.mutation.ShippingWeightCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: product.FieldShippingWeight,
		})
	}
	if value, ok := pu.mutation.ProductWeight(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: product.FieldProductWeight,
		})
	}
	if value, ok := pu.mutation.AddedProductWeight(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: product.FieldProductWeight,
		})
	}
	if pu.mutation.ProductWeightCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: product.FieldProductWeight,
		})
	}
	if value, ok := pu.mutation.HeightUomID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: product.FieldHeightUomID,
		})
	}
	if value, ok := pu.mutation.AddedHeightUomID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: product.FieldHeightUomID,
		})
	}
	if pu.mutation.HeightUomIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: product.FieldHeightUomID,
		})
	}
	if value, ok := pu.mutation.ProductHeight(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: product.FieldProductHeight,
		})
	}
	if value, ok := pu.mutation.AddedProductHeight(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: product.FieldProductHeight,
		})
	}
	if pu.mutation.ProductHeightCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: product.FieldProductHeight,
		})
	}
	if value, ok := pu.mutation.ShippingHeight(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: product.FieldShippingHeight,
		})
	}
	if value, ok := pu.mutation.AddedShippingHeight(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: product.FieldShippingHeight,
		})
	}
	if pu.mutation.ShippingHeightCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: product.FieldShippingHeight,
		})
	}
	if value, ok := pu.mutation.WidthUomID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: product.FieldWidthUomID,
		})
	}
	if value, ok := pu.mutation.AddedWidthUomID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: product.FieldWidthUomID,
		})
	}
	if pu.mutation.WidthUomIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: product.FieldWidthUomID,
		})
	}
	if value, ok := pu.mutation.ProductWidth(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: product.FieldProductWidth,
		})
	}
	if value, ok := pu.mutation.AddedProductWidth(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: product.FieldProductWidth,
		})
	}
	if pu.mutation.ProductWidthCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: product.FieldProductWidth,
		})
	}
	if value, ok := pu.mutation.ShippingWidth(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: product.FieldShippingWidth,
		})
	}
	if value, ok := pu.mutation.AddedShippingWidth(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: product.FieldShippingWidth,
		})
	}
	if pu.mutation.ShippingWidthCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: product.FieldShippingWidth,
		})
	}
	if value, ok := pu.mutation.DepthUomID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: product.FieldDepthUomID,
		})
	}
	if value, ok := pu.mutation.AddedDepthUomID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: product.FieldDepthUomID,
		})
	}
	if pu.mutation.DepthUomIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: product.FieldDepthUomID,
		})
	}
	if value, ok := pu.mutation.ProductDepth(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: product.FieldProductDepth,
		})
	}
	if value, ok := pu.mutation.AddedProductDepth(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: product.FieldProductDepth,
		})
	}
	if pu.mutation.ProductDepthCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: product.FieldProductDepth,
		})
	}
	if value, ok := pu.mutation.ShippingDepth(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: product.FieldShippingDepth,
		})
	}
	if value, ok := pu.mutation.AddedShippingDepth(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: product.FieldShippingDepth,
		})
	}
	if pu.mutation.ShippingDepthCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: product.FieldShippingDepth,
		})
	}
	if value, ok := pu.mutation.DiameterUomID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: product.FieldDiameterUomID,
		})
	}
	if value, ok := pu.mutation.AddedDiameterUomID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: product.FieldDiameterUomID,
		})
	}
	if pu.mutation.DiameterUomIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: product.FieldDiameterUomID,
		})
	}
	if value, ok := pu.mutation.ProductDiameter(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: product.FieldProductDiameter,
		})
	}
	if value, ok := pu.mutation.AddedProductDiameter(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: product.FieldProductDiameter,
		})
	}
	if pu.mutation.ProductDiameterCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: product.FieldProductDiameter,
		})
	}
	if value, ok := pu.mutation.ProductRating(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: product.FieldProductRating,
		})
	}
	if value, ok := pu.mutation.AddedProductRating(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: product.FieldProductRating,
		})
	}
	if pu.mutation.ProductRatingCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: product.FieldProductRating,
		})
	}
	if value, ok := pu.mutation.Returnable(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: product.FieldReturnable,
		})
	}
	if pu.mutation.ReturnableCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: product.FieldReturnable,
		})
	}
	if value, ok := pu.mutation.Taxable(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: product.FieldTaxable,
		})
	}
	if pu.mutation.TaxableCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: product.FieldTaxable,
		})
	}
	if value, ok := pu.mutation.ChargeShipping(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: product.FieldChargeShipping,
		})
	}
	if pu.mutation.ChargeShippingCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: product.FieldChargeShipping,
		})
	}
	if value, ok := pu.mutation.AutoCreateKeywords(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: product.FieldAutoCreateKeywords,
		})
	}
	if pu.mutation.AutoCreateKeywordsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: product.FieldAutoCreateKeywords,
		})
	}
	if value, ok := pu.mutation.IncludeInPromotions(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: product.FieldIncludeInPromotions,
		})
	}
	if pu.mutation.IncludeInPromotionsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: product.FieldIncludeInPromotions,
		})
	}
	if value, ok := pu.mutation.IsVirtual(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: product.FieldIsVirtual,
		})
	}
	if pu.mutation.IsVirtualCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: product.FieldIsVirtual,
		})
	}
	if value, ok := pu.mutation.IsVariant(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: product.FieldIsVariant,
		})
	}
	if pu.mutation.IsVariantCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: product.FieldIsVariant,
		})
	}
	if value, ok := pu.mutation.OriginGeoID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: product.FieldOriginGeoID,
		})
	}
	if value, ok := pu.mutation.AddedOriginGeoID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: product.FieldOriginGeoID,
		})
	}
	if pu.mutation.OriginGeoIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: product.FieldOriginGeoID,
		})
	}
	if value, ok := pu.mutation.BillOfMaterialLevel(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: product.FieldBillOfMaterialLevel,
		})
	}
	if value, ok := pu.mutation.AddedBillOfMaterialLevel(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: product.FieldBillOfMaterialLevel,
		})
	}
	if pu.mutation.BillOfMaterialLevelCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: product.FieldBillOfMaterialLevel,
		})
	}
	if value, ok := pu.mutation.ReservMaxPersons(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: product.FieldReservMaxPersons,
		})
	}
	if value, ok := pu.mutation.AddedReservMaxPersons(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: product.FieldReservMaxPersons,
		})
	}
	if pu.mutation.ReservMaxPersonsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: product.FieldReservMaxPersons,
		})
	}
	if value, ok := pu.mutation.Reserv2NdPpPerc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: product.FieldReserv2NdPpPerc,
		})
	}
	if value, ok := pu.mutation.AddedReserv2NdPpPerc(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: product.FieldReserv2NdPpPerc,
		})
	}
	if pu.mutation.Reserv2NdPpPercCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: product.FieldReserv2NdPpPerc,
		})
	}
	if value, ok := pu.mutation.ReservNthPpPerc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: product.FieldReservNthPpPerc,
		})
	}
	if value, ok := pu.mutation.AddedReservNthPpPerc(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: product.FieldReservNthPpPerc,
		})
	}
	if pu.mutation.ReservNthPpPercCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: product.FieldReservNthPpPerc,
		})
	}
	if value, ok := pu.mutation.ConfigID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: product.FieldConfigID,
		})
	}
	if value, ok := pu.mutation.AddedConfigID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: product.FieldConfigID,
		})
	}
	if pu.mutation.ConfigIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: product.FieldConfigID,
		})
	}
	if value, ok := pu.mutation.CreatedDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: product.FieldCreatedDate,
		})
	}
	if pu.mutation.CreatedDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: product.FieldCreatedDate,
		})
	}
	if value, ok := pu.mutation.CreatedByUserLogin(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: product.FieldCreatedByUserLogin,
		})
	}
	if pu.mutation.CreatedByUserLoginCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: product.FieldCreatedByUserLogin,
		})
	}
	if value, ok := pu.mutation.LastModifiedDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: product.FieldLastModifiedDate,
		})
	}
	if pu.mutation.LastModifiedDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: product.FieldLastModifiedDate,
		})
	}
	if value, ok := pu.mutation.LastModifiedByUserLogin(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: product.FieldLastModifiedByUserLogin,
		})
	}
	if pu.mutation.LastModifiedByUserLoginCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: product.FieldLastModifiedByUserLogin,
		})
	}
	if value, ok := pu.mutation.InShippingBox(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: product.FieldInShippingBox,
		})
	}
	if pu.mutation.InShippingBoxCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: product.FieldInShippingBox,
		})
	}
	if value, ok := pu.mutation.DefaultShipmentBoxTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: product.FieldDefaultShipmentBoxTypeID,
		})
	}
	if value, ok := pu.mutation.AddedDefaultShipmentBoxTypeID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: product.FieldDefaultShipmentBoxTypeID,
		})
	}
	if pu.mutation.DefaultShipmentBoxTypeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: product.FieldDefaultShipmentBoxTypeID,
		})
	}
	if value, ok := pu.mutation.LotIDFilledIn(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: product.FieldLotIDFilledIn,
		})
	}
	if pu.mutation.LotIDFilledInCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: product.FieldLotIDFilledIn,
		})
	}
	if value, ok := pu.mutation.OrderDecimalQuantity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: product.FieldOrderDecimalQuantity,
		})
	}
	if pu.mutation.OrderDecimalQuantityCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: product.FieldOrderDecimalQuantity,
		})
	}
	if pu.mutation.ProductTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   product.ProductTypeTable,
			Columns: []string{product.ProductTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: producttype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ProductTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   product.ProductTypeTable,
			Columns: []string{product.ProductTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: producttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.PrimaryProductCategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   product.PrimaryProductCategoryTable,
			Columns: []string{product.PrimaryProductCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productcategory.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PrimaryProductCategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   product.PrimaryProductCategoryTable,
			Columns: []string{product.PrimaryProductCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productcategory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.VirtualVariantMethodEnumerationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   product.VirtualVariantMethodEnumerationTable,
			Columns: []string{product.VirtualVariantMethodEnumerationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: enumeration.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.VirtualVariantMethodEnumerationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   product.VirtualVariantMethodEnumerationTable,
			Columns: []string{product.VirtualVariantMethodEnumerationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: enumeration.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.RatingEnumerationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   product.RatingEnumerationTable,
			Columns: []string{product.RatingEnumerationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: enumeration.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RatingEnumerationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   product.RatingEnumerationTable,
			Columns: []string{product.RatingEnumerationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: enumeration.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.RequirementMethodEnumerationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   product.RequirementMethodEnumerationTable,
			Columns: []string{product.RequirementMethodEnumerationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: enumeration.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RequirementMethodEnumerationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   product.RequirementMethodEnumerationTable,
			Columns: []string{product.RequirementMethodEnumerationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: enumeration.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.InventoryItemTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   product.InventoryItemTypeTable,
			Columns: []string{product.InventoryItemTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: inventoryitemtype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.InventoryItemTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   product.InventoryItemTypeTable,
			Columns: []string{product.InventoryItemTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: inventoryitemtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.OrderItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.OrderItemsTable,
			Columns: []string{product.OrderItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitem.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedOrderItemsIDs(); len(nodes) > 0 && !pu.mutation.OrderItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.OrderItemsTable,
			Columns: []string{product.OrderItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.OrderItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.OrderItemsTable,
			Columns: []string{product.OrderItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.MainProductAssocsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.MainProductAssocsTable,
			Columns: []string{product.MainProductAssocsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productassoc.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedMainProductAssocsIDs(); len(nodes) > 0 && !pu.mutation.MainProductAssocsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.MainProductAssocsTable,
			Columns: []string{product.MainProductAssocsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productassoc.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.MainProductAssocsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.MainProductAssocsTable,
			Columns: []string{product.MainProductAssocsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productassoc.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.AssocProductAssocsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.AssocProductAssocsTable,
			Columns: []string{product.AssocProductAssocsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productassoc.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedAssocProductAssocsIDs(); len(nodes) > 0 && !pu.mutation.AssocProductAssocsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.AssocProductAssocsTable,
			Columns: []string{product.AssocProductAssocsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productassoc.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.AssocProductAssocsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.AssocProductAssocsTable,
			Columns: []string{product.AssocProductAssocsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productassoc.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ProductPricesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ProductPricesTable,
			Columns: []string{product.ProductPricesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productprice.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedProductPricesIDs(); len(nodes) > 0 && !pu.mutation.ProductPricesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ProductPricesTable,
			Columns: []string{product.ProductPricesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productprice.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ProductPricesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ProductPricesTable,
			Columns: []string{product.ProductPricesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productprice.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ProductReviewsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ProductReviewsTable,
			Columns: []string{product.ProductReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productreview.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedProductReviewsIDs(); len(nodes) > 0 && !pu.mutation.ProductReviewsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ProductReviewsTable,
			Columns: []string{product.ProductReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productreview.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ProductReviewsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ProductReviewsTable,
			Columns: []string{product.ProductReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productreview.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{product.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ProductUpdateOne is the builder for updating a single Product entity.
type ProductUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProductMutation
}

// SetStringRef sets the "string_ref" field.
func (puo *ProductUpdateOne) SetStringRef(s string) *ProductUpdateOne {
	puo.mutation.SetStringRef(s)
	return puo
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableStringRef(s *string) *ProductUpdateOne {
	if s != nil {
		puo.SetStringRef(*s)
	}
	return puo
}

// ClearStringRef clears the value of the "string_ref" field.
func (puo *ProductUpdateOne) ClearStringRef() *ProductUpdateOne {
	puo.mutation.ClearStringRef()
	return puo
}

// SetFacilityID sets the "facility_id" field.
func (puo *ProductUpdateOne) SetFacilityID(i int) *ProductUpdateOne {
	puo.mutation.ResetFacilityID()
	puo.mutation.SetFacilityID(i)
	return puo
}

// SetNillableFacilityID sets the "facility_id" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableFacilityID(i *int) *ProductUpdateOne {
	if i != nil {
		puo.SetFacilityID(*i)
	}
	return puo
}

// AddFacilityID adds i to the "facility_id" field.
func (puo *ProductUpdateOne) AddFacilityID(i int) *ProductUpdateOne {
	puo.mutation.AddFacilityID(i)
	return puo
}

// ClearFacilityID clears the value of the "facility_id" field.
func (puo *ProductUpdateOne) ClearFacilityID() *ProductUpdateOne {
	puo.mutation.ClearFacilityID()
	return puo
}

// SetIntroductionDate sets the "introduction_date" field.
func (puo *ProductUpdateOne) SetIntroductionDate(t time.Time) *ProductUpdateOne {
	puo.mutation.SetIntroductionDate(t)
	return puo
}

// SetNillableIntroductionDate sets the "introduction_date" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableIntroductionDate(t *time.Time) *ProductUpdateOne {
	if t != nil {
		puo.SetIntroductionDate(*t)
	}
	return puo
}

// ClearIntroductionDate clears the value of the "introduction_date" field.
func (puo *ProductUpdateOne) ClearIntroductionDate() *ProductUpdateOne {
	puo.mutation.ClearIntroductionDate()
	return puo
}

// SetReleaseDate sets the "release_date" field.
func (puo *ProductUpdateOne) SetReleaseDate(t time.Time) *ProductUpdateOne {
	puo.mutation.SetReleaseDate(t)
	return puo
}

// SetNillableReleaseDate sets the "release_date" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableReleaseDate(t *time.Time) *ProductUpdateOne {
	if t != nil {
		puo.SetReleaseDate(*t)
	}
	return puo
}

// ClearReleaseDate clears the value of the "release_date" field.
func (puo *ProductUpdateOne) ClearReleaseDate() *ProductUpdateOne {
	puo.mutation.ClearReleaseDate()
	return puo
}

// SetSupportDiscontinuationDate sets the "support_discontinuation_date" field.
func (puo *ProductUpdateOne) SetSupportDiscontinuationDate(t time.Time) *ProductUpdateOne {
	puo.mutation.SetSupportDiscontinuationDate(t)
	return puo
}

// SetNillableSupportDiscontinuationDate sets the "support_discontinuation_date" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableSupportDiscontinuationDate(t *time.Time) *ProductUpdateOne {
	if t != nil {
		puo.SetSupportDiscontinuationDate(*t)
	}
	return puo
}

// ClearSupportDiscontinuationDate clears the value of the "support_discontinuation_date" field.
func (puo *ProductUpdateOne) ClearSupportDiscontinuationDate() *ProductUpdateOne {
	puo.mutation.ClearSupportDiscontinuationDate()
	return puo
}

// SetSalesDiscontinuationDate sets the "sales_discontinuation_date" field.
func (puo *ProductUpdateOne) SetSalesDiscontinuationDate(t time.Time) *ProductUpdateOne {
	puo.mutation.SetSalesDiscontinuationDate(t)
	return puo
}

// SetNillableSalesDiscontinuationDate sets the "sales_discontinuation_date" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableSalesDiscontinuationDate(t *time.Time) *ProductUpdateOne {
	if t != nil {
		puo.SetSalesDiscontinuationDate(*t)
	}
	return puo
}

// ClearSalesDiscontinuationDate clears the value of the "sales_discontinuation_date" field.
func (puo *ProductUpdateOne) ClearSalesDiscontinuationDate() *ProductUpdateOne {
	puo.mutation.ClearSalesDiscontinuationDate()
	return puo
}

// SetSalesDiscWhenNotAvail sets the "sales_disc_when_not_avail" field.
func (puo *ProductUpdateOne) SetSalesDiscWhenNotAvail(pdwna product.SalesDiscWhenNotAvail) *ProductUpdateOne {
	puo.mutation.SetSalesDiscWhenNotAvail(pdwna)
	return puo
}

// SetNillableSalesDiscWhenNotAvail sets the "sales_disc_when_not_avail" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableSalesDiscWhenNotAvail(pdwna *product.SalesDiscWhenNotAvail) *ProductUpdateOne {
	if pdwna != nil {
		puo.SetSalesDiscWhenNotAvail(*pdwna)
	}
	return puo
}

// ClearSalesDiscWhenNotAvail clears the value of the "sales_disc_when_not_avail" field.
func (puo *ProductUpdateOne) ClearSalesDiscWhenNotAvail() *ProductUpdateOne {
	puo.mutation.ClearSalesDiscWhenNotAvail()
	return puo
}

// SetInternalName sets the "internal_name" field.
func (puo *ProductUpdateOne) SetInternalName(s string) *ProductUpdateOne {
	puo.mutation.SetInternalName(s)
	return puo
}

// SetNillableInternalName sets the "internal_name" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableInternalName(s *string) *ProductUpdateOne {
	if s != nil {
		puo.SetInternalName(*s)
	}
	return puo
}

// ClearInternalName clears the value of the "internal_name" field.
func (puo *ProductUpdateOne) ClearInternalName() *ProductUpdateOne {
	puo.mutation.ClearInternalName()
	return puo
}

// SetBrandName sets the "brand_name" field.
func (puo *ProductUpdateOne) SetBrandName(s string) *ProductUpdateOne {
	puo.mutation.SetBrandName(s)
	return puo
}

// SetNillableBrandName sets the "brand_name" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableBrandName(s *string) *ProductUpdateOne {
	if s != nil {
		puo.SetBrandName(*s)
	}
	return puo
}

// ClearBrandName clears the value of the "brand_name" field.
func (puo *ProductUpdateOne) ClearBrandName() *ProductUpdateOne {
	puo.mutation.ClearBrandName()
	return puo
}

// SetComments sets the "comments" field.
func (puo *ProductUpdateOne) SetComments(s string) *ProductUpdateOne {
	puo.mutation.SetComments(s)
	return puo
}

// SetNillableComments sets the "comments" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableComments(s *string) *ProductUpdateOne {
	if s != nil {
		puo.SetComments(*s)
	}
	return puo
}

// ClearComments clears the value of the "comments" field.
func (puo *ProductUpdateOne) ClearComments() *ProductUpdateOne {
	puo.mutation.ClearComments()
	return puo
}

// SetProductName sets the "product_name" field.
func (puo *ProductUpdateOne) SetProductName(s string) *ProductUpdateOne {
	puo.mutation.SetProductName(s)
	return puo
}

// SetNillableProductName sets the "product_name" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableProductName(s *string) *ProductUpdateOne {
	if s != nil {
		puo.SetProductName(*s)
	}
	return puo
}

// ClearProductName clears the value of the "product_name" field.
func (puo *ProductUpdateOne) ClearProductName() *ProductUpdateOne {
	puo.mutation.ClearProductName()
	return puo
}

// SetDescription sets the "description" field.
func (puo *ProductUpdateOne) SetDescription(s string) *ProductUpdateOne {
	puo.mutation.SetDescription(s)
	return puo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableDescription(s *string) *ProductUpdateOne {
	if s != nil {
		puo.SetDescription(*s)
	}
	return puo
}

// ClearDescription clears the value of the "description" field.
func (puo *ProductUpdateOne) ClearDescription() *ProductUpdateOne {
	puo.mutation.ClearDescription()
	return puo
}

// SetLongDescription sets the "long_description" field.
func (puo *ProductUpdateOne) SetLongDescription(s string) *ProductUpdateOne {
	puo.mutation.SetLongDescription(s)
	return puo
}

// SetNillableLongDescription sets the "long_description" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableLongDescription(s *string) *ProductUpdateOne {
	if s != nil {
		puo.SetLongDescription(*s)
	}
	return puo
}

// ClearLongDescription clears the value of the "long_description" field.
func (puo *ProductUpdateOne) ClearLongDescription() *ProductUpdateOne {
	puo.mutation.ClearLongDescription()
	return puo
}

// SetPriceDetailText sets the "price_detail_text" field.
func (puo *ProductUpdateOne) SetPriceDetailText(s string) *ProductUpdateOne {
	puo.mutation.SetPriceDetailText(s)
	return puo
}

// SetNillablePriceDetailText sets the "price_detail_text" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillablePriceDetailText(s *string) *ProductUpdateOne {
	if s != nil {
		puo.SetPriceDetailText(*s)
	}
	return puo
}

// ClearPriceDetailText clears the value of the "price_detail_text" field.
func (puo *ProductUpdateOne) ClearPriceDetailText() *ProductUpdateOne {
	puo.mutation.ClearPriceDetailText()
	return puo
}

// SetSmallImageURL sets the "small_image_url" field.
func (puo *ProductUpdateOne) SetSmallImageURL(s string) *ProductUpdateOne {
	puo.mutation.SetSmallImageURL(s)
	return puo
}

// SetNillableSmallImageURL sets the "small_image_url" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableSmallImageURL(s *string) *ProductUpdateOne {
	if s != nil {
		puo.SetSmallImageURL(*s)
	}
	return puo
}

// ClearSmallImageURL clears the value of the "small_image_url" field.
func (puo *ProductUpdateOne) ClearSmallImageURL() *ProductUpdateOne {
	puo.mutation.ClearSmallImageURL()
	return puo
}

// SetMediumImageURL sets the "medium_image_url" field.
func (puo *ProductUpdateOne) SetMediumImageURL(s string) *ProductUpdateOne {
	puo.mutation.SetMediumImageURL(s)
	return puo
}

// SetNillableMediumImageURL sets the "medium_image_url" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableMediumImageURL(s *string) *ProductUpdateOne {
	if s != nil {
		puo.SetMediumImageURL(*s)
	}
	return puo
}

// ClearMediumImageURL clears the value of the "medium_image_url" field.
func (puo *ProductUpdateOne) ClearMediumImageURL() *ProductUpdateOne {
	puo.mutation.ClearMediumImageURL()
	return puo
}

// SetLargeImageURL sets the "large_image_url" field.
func (puo *ProductUpdateOne) SetLargeImageURL(s string) *ProductUpdateOne {
	puo.mutation.SetLargeImageURL(s)
	return puo
}

// SetNillableLargeImageURL sets the "large_image_url" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableLargeImageURL(s *string) *ProductUpdateOne {
	if s != nil {
		puo.SetLargeImageURL(*s)
	}
	return puo
}

// ClearLargeImageURL clears the value of the "large_image_url" field.
func (puo *ProductUpdateOne) ClearLargeImageURL() *ProductUpdateOne {
	puo.mutation.ClearLargeImageURL()
	return puo
}

// SetDetailImageURL sets the "detail_image_url" field.
func (puo *ProductUpdateOne) SetDetailImageURL(s string) *ProductUpdateOne {
	puo.mutation.SetDetailImageURL(s)
	return puo
}

// SetNillableDetailImageURL sets the "detail_image_url" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableDetailImageURL(s *string) *ProductUpdateOne {
	if s != nil {
		puo.SetDetailImageURL(*s)
	}
	return puo
}

// ClearDetailImageURL clears the value of the "detail_image_url" field.
func (puo *ProductUpdateOne) ClearDetailImageURL() *ProductUpdateOne {
	puo.mutation.ClearDetailImageURL()
	return puo
}

// SetOriginalImageURL sets the "original_image_url" field.
func (puo *ProductUpdateOne) SetOriginalImageURL(s string) *ProductUpdateOne {
	puo.mutation.SetOriginalImageURL(s)
	return puo
}

// SetNillableOriginalImageURL sets the "original_image_url" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableOriginalImageURL(s *string) *ProductUpdateOne {
	if s != nil {
		puo.SetOriginalImageURL(*s)
	}
	return puo
}

// ClearOriginalImageURL clears the value of the "original_image_url" field.
func (puo *ProductUpdateOne) ClearOriginalImageURL() *ProductUpdateOne {
	puo.mutation.ClearOriginalImageURL()
	return puo
}

// SetDetailScreen sets the "detail_screen" field.
func (puo *ProductUpdateOne) SetDetailScreen(s string) *ProductUpdateOne {
	puo.mutation.SetDetailScreen(s)
	return puo
}

// SetNillableDetailScreen sets the "detail_screen" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableDetailScreen(s *string) *ProductUpdateOne {
	if s != nil {
		puo.SetDetailScreen(*s)
	}
	return puo
}

// ClearDetailScreen clears the value of the "detail_screen" field.
func (puo *ProductUpdateOne) ClearDetailScreen() *ProductUpdateOne {
	puo.mutation.ClearDetailScreen()
	return puo
}

// SetInventoryMessage sets the "inventory_message" field.
func (puo *ProductUpdateOne) SetInventoryMessage(s string) *ProductUpdateOne {
	puo.mutation.SetInventoryMessage(s)
	return puo
}

// SetNillableInventoryMessage sets the "inventory_message" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableInventoryMessage(s *string) *ProductUpdateOne {
	if s != nil {
		puo.SetInventoryMessage(*s)
	}
	return puo
}

// ClearInventoryMessage clears the value of the "inventory_message" field.
func (puo *ProductUpdateOne) ClearInventoryMessage() *ProductUpdateOne {
	puo.mutation.ClearInventoryMessage()
	return puo
}

// SetRequireInventory sets the "require_inventory" field.
func (puo *ProductUpdateOne) SetRequireInventory(pi product.RequireInventory) *ProductUpdateOne {
	puo.mutation.SetRequireInventory(pi)
	return puo
}

// SetNillableRequireInventory sets the "require_inventory" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableRequireInventory(pi *product.RequireInventory) *ProductUpdateOne {
	if pi != nil {
		puo.SetRequireInventory(*pi)
	}
	return puo
}

// ClearRequireInventory clears the value of the "require_inventory" field.
func (puo *ProductUpdateOne) ClearRequireInventory() *ProductUpdateOne {
	puo.mutation.ClearRequireInventory()
	return puo
}

// SetQuantityUomID sets the "quantity_uom_id" field.
func (puo *ProductUpdateOne) SetQuantityUomID(i int) *ProductUpdateOne {
	puo.mutation.ResetQuantityUomID()
	puo.mutation.SetQuantityUomID(i)
	return puo
}

// SetNillableQuantityUomID sets the "quantity_uom_id" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableQuantityUomID(i *int) *ProductUpdateOne {
	if i != nil {
		puo.SetQuantityUomID(*i)
	}
	return puo
}

// AddQuantityUomID adds i to the "quantity_uom_id" field.
func (puo *ProductUpdateOne) AddQuantityUomID(i int) *ProductUpdateOne {
	puo.mutation.AddQuantityUomID(i)
	return puo
}

// ClearQuantityUomID clears the value of the "quantity_uom_id" field.
func (puo *ProductUpdateOne) ClearQuantityUomID() *ProductUpdateOne {
	puo.mutation.ClearQuantityUomID()
	return puo
}

// SetQuantityIncluded sets the "quantity_included" field.
func (puo *ProductUpdateOne) SetQuantityIncluded(f float64) *ProductUpdateOne {
	puo.mutation.ResetQuantityIncluded()
	puo.mutation.SetQuantityIncluded(f)
	return puo
}

// SetNillableQuantityIncluded sets the "quantity_included" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableQuantityIncluded(f *float64) *ProductUpdateOne {
	if f != nil {
		puo.SetQuantityIncluded(*f)
	}
	return puo
}

// AddQuantityIncluded adds f to the "quantity_included" field.
func (puo *ProductUpdateOne) AddQuantityIncluded(f float64) *ProductUpdateOne {
	puo.mutation.AddQuantityIncluded(f)
	return puo
}

// ClearQuantityIncluded clears the value of the "quantity_included" field.
func (puo *ProductUpdateOne) ClearQuantityIncluded() *ProductUpdateOne {
	puo.mutation.ClearQuantityIncluded()
	return puo
}

// SetPiecesIncluded sets the "pieces_included" field.
func (puo *ProductUpdateOne) SetPiecesIncluded(i int) *ProductUpdateOne {
	puo.mutation.ResetPiecesIncluded()
	puo.mutation.SetPiecesIncluded(i)
	return puo
}

// SetNillablePiecesIncluded sets the "pieces_included" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillablePiecesIncluded(i *int) *ProductUpdateOne {
	if i != nil {
		puo.SetPiecesIncluded(*i)
	}
	return puo
}

// AddPiecesIncluded adds i to the "pieces_included" field.
func (puo *ProductUpdateOne) AddPiecesIncluded(i int) *ProductUpdateOne {
	puo.mutation.AddPiecesIncluded(i)
	return puo
}

// ClearPiecesIncluded clears the value of the "pieces_included" field.
func (puo *ProductUpdateOne) ClearPiecesIncluded() *ProductUpdateOne {
	puo.mutation.ClearPiecesIncluded()
	return puo
}

// SetRequireAmount sets the "require_amount" field.
func (puo *ProductUpdateOne) SetRequireAmount(pa product.RequireAmount) *ProductUpdateOne {
	puo.mutation.SetRequireAmount(pa)
	return puo
}

// SetNillableRequireAmount sets the "require_amount" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableRequireAmount(pa *product.RequireAmount) *ProductUpdateOne {
	if pa != nil {
		puo.SetRequireAmount(*pa)
	}
	return puo
}

// ClearRequireAmount clears the value of the "require_amount" field.
func (puo *ProductUpdateOne) ClearRequireAmount() *ProductUpdateOne {
	puo.mutation.ClearRequireAmount()
	return puo
}

// SetFixedAmount sets the "fixed_amount" field.
func (puo *ProductUpdateOne) SetFixedAmount(f float64) *ProductUpdateOne {
	puo.mutation.ResetFixedAmount()
	puo.mutation.SetFixedAmount(f)
	return puo
}

// SetNillableFixedAmount sets the "fixed_amount" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableFixedAmount(f *float64) *ProductUpdateOne {
	if f != nil {
		puo.SetFixedAmount(*f)
	}
	return puo
}

// AddFixedAmount adds f to the "fixed_amount" field.
func (puo *ProductUpdateOne) AddFixedAmount(f float64) *ProductUpdateOne {
	puo.mutation.AddFixedAmount(f)
	return puo
}

// ClearFixedAmount clears the value of the "fixed_amount" field.
func (puo *ProductUpdateOne) ClearFixedAmount() *ProductUpdateOne {
	puo.mutation.ClearFixedAmount()
	return puo
}

// SetAmountUomTypeID sets the "amount_uom_type_id" field.
func (puo *ProductUpdateOne) SetAmountUomTypeID(i int) *ProductUpdateOne {
	puo.mutation.ResetAmountUomTypeID()
	puo.mutation.SetAmountUomTypeID(i)
	return puo
}

// SetNillableAmountUomTypeID sets the "amount_uom_type_id" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableAmountUomTypeID(i *int) *ProductUpdateOne {
	if i != nil {
		puo.SetAmountUomTypeID(*i)
	}
	return puo
}

// AddAmountUomTypeID adds i to the "amount_uom_type_id" field.
func (puo *ProductUpdateOne) AddAmountUomTypeID(i int) *ProductUpdateOne {
	puo.mutation.AddAmountUomTypeID(i)
	return puo
}

// ClearAmountUomTypeID clears the value of the "amount_uom_type_id" field.
func (puo *ProductUpdateOne) ClearAmountUomTypeID() *ProductUpdateOne {
	puo.mutation.ClearAmountUomTypeID()
	return puo
}

// SetWeightUomID sets the "weight_uom_id" field.
func (puo *ProductUpdateOne) SetWeightUomID(i int) *ProductUpdateOne {
	puo.mutation.ResetWeightUomID()
	puo.mutation.SetWeightUomID(i)
	return puo
}

// SetNillableWeightUomID sets the "weight_uom_id" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableWeightUomID(i *int) *ProductUpdateOne {
	if i != nil {
		puo.SetWeightUomID(*i)
	}
	return puo
}

// AddWeightUomID adds i to the "weight_uom_id" field.
func (puo *ProductUpdateOne) AddWeightUomID(i int) *ProductUpdateOne {
	puo.mutation.AddWeightUomID(i)
	return puo
}

// ClearWeightUomID clears the value of the "weight_uom_id" field.
func (puo *ProductUpdateOne) ClearWeightUomID() *ProductUpdateOne {
	puo.mutation.ClearWeightUomID()
	return puo
}

// SetShippingWeight sets the "shipping_weight" field.
func (puo *ProductUpdateOne) SetShippingWeight(f float64) *ProductUpdateOne {
	puo.mutation.ResetShippingWeight()
	puo.mutation.SetShippingWeight(f)
	return puo
}

// SetNillableShippingWeight sets the "shipping_weight" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableShippingWeight(f *float64) *ProductUpdateOne {
	if f != nil {
		puo.SetShippingWeight(*f)
	}
	return puo
}

// AddShippingWeight adds f to the "shipping_weight" field.
func (puo *ProductUpdateOne) AddShippingWeight(f float64) *ProductUpdateOne {
	puo.mutation.AddShippingWeight(f)
	return puo
}

// ClearShippingWeight clears the value of the "shipping_weight" field.
func (puo *ProductUpdateOne) ClearShippingWeight() *ProductUpdateOne {
	puo.mutation.ClearShippingWeight()
	return puo
}

// SetProductWeight sets the "product_weight" field.
func (puo *ProductUpdateOne) SetProductWeight(f float64) *ProductUpdateOne {
	puo.mutation.ResetProductWeight()
	puo.mutation.SetProductWeight(f)
	return puo
}

// SetNillableProductWeight sets the "product_weight" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableProductWeight(f *float64) *ProductUpdateOne {
	if f != nil {
		puo.SetProductWeight(*f)
	}
	return puo
}

// AddProductWeight adds f to the "product_weight" field.
func (puo *ProductUpdateOne) AddProductWeight(f float64) *ProductUpdateOne {
	puo.mutation.AddProductWeight(f)
	return puo
}

// ClearProductWeight clears the value of the "product_weight" field.
func (puo *ProductUpdateOne) ClearProductWeight() *ProductUpdateOne {
	puo.mutation.ClearProductWeight()
	return puo
}

// SetHeightUomID sets the "height_uom_id" field.
func (puo *ProductUpdateOne) SetHeightUomID(i int) *ProductUpdateOne {
	puo.mutation.ResetHeightUomID()
	puo.mutation.SetHeightUomID(i)
	return puo
}

// SetNillableHeightUomID sets the "height_uom_id" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableHeightUomID(i *int) *ProductUpdateOne {
	if i != nil {
		puo.SetHeightUomID(*i)
	}
	return puo
}

// AddHeightUomID adds i to the "height_uom_id" field.
func (puo *ProductUpdateOne) AddHeightUomID(i int) *ProductUpdateOne {
	puo.mutation.AddHeightUomID(i)
	return puo
}

// ClearHeightUomID clears the value of the "height_uom_id" field.
func (puo *ProductUpdateOne) ClearHeightUomID() *ProductUpdateOne {
	puo.mutation.ClearHeightUomID()
	return puo
}

// SetProductHeight sets the "product_height" field.
func (puo *ProductUpdateOne) SetProductHeight(f float64) *ProductUpdateOne {
	puo.mutation.ResetProductHeight()
	puo.mutation.SetProductHeight(f)
	return puo
}

// SetNillableProductHeight sets the "product_height" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableProductHeight(f *float64) *ProductUpdateOne {
	if f != nil {
		puo.SetProductHeight(*f)
	}
	return puo
}

// AddProductHeight adds f to the "product_height" field.
func (puo *ProductUpdateOne) AddProductHeight(f float64) *ProductUpdateOne {
	puo.mutation.AddProductHeight(f)
	return puo
}

// ClearProductHeight clears the value of the "product_height" field.
func (puo *ProductUpdateOne) ClearProductHeight() *ProductUpdateOne {
	puo.mutation.ClearProductHeight()
	return puo
}

// SetShippingHeight sets the "shipping_height" field.
func (puo *ProductUpdateOne) SetShippingHeight(f float64) *ProductUpdateOne {
	puo.mutation.ResetShippingHeight()
	puo.mutation.SetShippingHeight(f)
	return puo
}

// SetNillableShippingHeight sets the "shipping_height" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableShippingHeight(f *float64) *ProductUpdateOne {
	if f != nil {
		puo.SetShippingHeight(*f)
	}
	return puo
}

// AddShippingHeight adds f to the "shipping_height" field.
func (puo *ProductUpdateOne) AddShippingHeight(f float64) *ProductUpdateOne {
	puo.mutation.AddShippingHeight(f)
	return puo
}

// ClearShippingHeight clears the value of the "shipping_height" field.
func (puo *ProductUpdateOne) ClearShippingHeight() *ProductUpdateOne {
	puo.mutation.ClearShippingHeight()
	return puo
}

// SetWidthUomID sets the "width_uom_id" field.
func (puo *ProductUpdateOne) SetWidthUomID(i int) *ProductUpdateOne {
	puo.mutation.ResetWidthUomID()
	puo.mutation.SetWidthUomID(i)
	return puo
}

// SetNillableWidthUomID sets the "width_uom_id" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableWidthUomID(i *int) *ProductUpdateOne {
	if i != nil {
		puo.SetWidthUomID(*i)
	}
	return puo
}

// AddWidthUomID adds i to the "width_uom_id" field.
func (puo *ProductUpdateOne) AddWidthUomID(i int) *ProductUpdateOne {
	puo.mutation.AddWidthUomID(i)
	return puo
}

// ClearWidthUomID clears the value of the "width_uom_id" field.
func (puo *ProductUpdateOne) ClearWidthUomID() *ProductUpdateOne {
	puo.mutation.ClearWidthUomID()
	return puo
}

// SetProductWidth sets the "product_width" field.
func (puo *ProductUpdateOne) SetProductWidth(f float64) *ProductUpdateOne {
	puo.mutation.ResetProductWidth()
	puo.mutation.SetProductWidth(f)
	return puo
}

// SetNillableProductWidth sets the "product_width" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableProductWidth(f *float64) *ProductUpdateOne {
	if f != nil {
		puo.SetProductWidth(*f)
	}
	return puo
}

// AddProductWidth adds f to the "product_width" field.
func (puo *ProductUpdateOne) AddProductWidth(f float64) *ProductUpdateOne {
	puo.mutation.AddProductWidth(f)
	return puo
}

// ClearProductWidth clears the value of the "product_width" field.
func (puo *ProductUpdateOne) ClearProductWidth() *ProductUpdateOne {
	puo.mutation.ClearProductWidth()
	return puo
}

// SetShippingWidth sets the "shipping_width" field.
func (puo *ProductUpdateOne) SetShippingWidth(f float64) *ProductUpdateOne {
	puo.mutation.ResetShippingWidth()
	puo.mutation.SetShippingWidth(f)
	return puo
}

// SetNillableShippingWidth sets the "shipping_width" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableShippingWidth(f *float64) *ProductUpdateOne {
	if f != nil {
		puo.SetShippingWidth(*f)
	}
	return puo
}

// AddShippingWidth adds f to the "shipping_width" field.
func (puo *ProductUpdateOne) AddShippingWidth(f float64) *ProductUpdateOne {
	puo.mutation.AddShippingWidth(f)
	return puo
}

// ClearShippingWidth clears the value of the "shipping_width" field.
func (puo *ProductUpdateOne) ClearShippingWidth() *ProductUpdateOne {
	puo.mutation.ClearShippingWidth()
	return puo
}

// SetDepthUomID sets the "depth_uom_id" field.
func (puo *ProductUpdateOne) SetDepthUomID(i int) *ProductUpdateOne {
	puo.mutation.ResetDepthUomID()
	puo.mutation.SetDepthUomID(i)
	return puo
}

// SetNillableDepthUomID sets the "depth_uom_id" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableDepthUomID(i *int) *ProductUpdateOne {
	if i != nil {
		puo.SetDepthUomID(*i)
	}
	return puo
}

// AddDepthUomID adds i to the "depth_uom_id" field.
func (puo *ProductUpdateOne) AddDepthUomID(i int) *ProductUpdateOne {
	puo.mutation.AddDepthUomID(i)
	return puo
}

// ClearDepthUomID clears the value of the "depth_uom_id" field.
func (puo *ProductUpdateOne) ClearDepthUomID() *ProductUpdateOne {
	puo.mutation.ClearDepthUomID()
	return puo
}

// SetProductDepth sets the "product_depth" field.
func (puo *ProductUpdateOne) SetProductDepth(f float64) *ProductUpdateOne {
	puo.mutation.ResetProductDepth()
	puo.mutation.SetProductDepth(f)
	return puo
}

// SetNillableProductDepth sets the "product_depth" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableProductDepth(f *float64) *ProductUpdateOne {
	if f != nil {
		puo.SetProductDepth(*f)
	}
	return puo
}

// AddProductDepth adds f to the "product_depth" field.
func (puo *ProductUpdateOne) AddProductDepth(f float64) *ProductUpdateOne {
	puo.mutation.AddProductDepth(f)
	return puo
}

// ClearProductDepth clears the value of the "product_depth" field.
func (puo *ProductUpdateOne) ClearProductDepth() *ProductUpdateOne {
	puo.mutation.ClearProductDepth()
	return puo
}

// SetShippingDepth sets the "shipping_depth" field.
func (puo *ProductUpdateOne) SetShippingDepth(f float64) *ProductUpdateOne {
	puo.mutation.ResetShippingDepth()
	puo.mutation.SetShippingDepth(f)
	return puo
}

// SetNillableShippingDepth sets the "shipping_depth" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableShippingDepth(f *float64) *ProductUpdateOne {
	if f != nil {
		puo.SetShippingDepth(*f)
	}
	return puo
}

// AddShippingDepth adds f to the "shipping_depth" field.
func (puo *ProductUpdateOne) AddShippingDepth(f float64) *ProductUpdateOne {
	puo.mutation.AddShippingDepth(f)
	return puo
}

// ClearShippingDepth clears the value of the "shipping_depth" field.
func (puo *ProductUpdateOne) ClearShippingDepth() *ProductUpdateOne {
	puo.mutation.ClearShippingDepth()
	return puo
}

// SetDiameterUomID sets the "diameter_uom_id" field.
func (puo *ProductUpdateOne) SetDiameterUomID(i int) *ProductUpdateOne {
	puo.mutation.ResetDiameterUomID()
	puo.mutation.SetDiameterUomID(i)
	return puo
}

// SetNillableDiameterUomID sets the "diameter_uom_id" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableDiameterUomID(i *int) *ProductUpdateOne {
	if i != nil {
		puo.SetDiameterUomID(*i)
	}
	return puo
}

// AddDiameterUomID adds i to the "diameter_uom_id" field.
func (puo *ProductUpdateOne) AddDiameterUomID(i int) *ProductUpdateOne {
	puo.mutation.AddDiameterUomID(i)
	return puo
}

// ClearDiameterUomID clears the value of the "diameter_uom_id" field.
func (puo *ProductUpdateOne) ClearDiameterUomID() *ProductUpdateOne {
	puo.mutation.ClearDiameterUomID()
	return puo
}

// SetProductDiameter sets the "product_diameter" field.
func (puo *ProductUpdateOne) SetProductDiameter(f float64) *ProductUpdateOne {
	puo.mutation.ResetProductDiameter()
	puo.mutation.SetProductDiameter(f)
	return puo
}

// SetNillableProductDiameter sets the "product_diameter" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableProductDiameter(f *float64) *ProductUpdateOne {
	if f != nil {
		puo.SetProductDiameter(*f)
	}
	return puo
}

// AddProductDiameter adds f to the "product_diameter" field.
func (puo *ProductUpdateOne) AddProductDiameter(f float64) *ProductUpdateOne {
	puo.mutation.AddProductDiameter(f)
	return puo
}

// ClearProductDiameter clears the value of the "product_diameter" field.
func (puo *ProductUpdateOne) ClearProductDiameter() *ProductUpdateOne {
	puo.mutation.ClearProductDiameter()
	return puo
}

// SetProductRating sets the "product_rating" field.
func (puo *ProductUpdateOne) SetProductRating(f float64) *ProductUpdateOne {
	puo.mutation.ResetProductRating()
	puo.mutation.SetProductRating(f)
	return puo
}

// SetNillableProductRating sets the "product_rating" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableProductRating(f *float64) *ProductUpdateOne {
	if f != nil {
		puo.SetProductRating(*f)
	}
	return puo
}

// AddProductRating adds f to the "product_rating" field.
func (puo *ProductUpdateOne) AddProductRating(f float64) *ProductUpdateOne {
	puo.mutation.AddProductRating(f)
	return puo
}

// ClearProductRating clears the value of the "product_rating" field.
func (puo *ProductUpdateOne) ClearProductRating() *ProductUpdateOne {
	puo.mutation.ClearProductRating()
	return puo
}

// SetReturnable sets the "returnable" field.
func (puo *ProductUpdateOne) SetReturnable(pr product.Returnable) *ProductUpdateOne {
	puo.mutation.SetReturnable(pr)
	return puo
}

// SetNillableReturnable sets the "returnable" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableReturnable(pr *product.Returnable) *ProductUpdateOne {
	if pr != nil {
		puo.SetReturnable(*pr)
	}
	return puo
}

// ClearReturnable clears the value of the "returnable" field.
func (puo *ProductUpdateOne) ClearReturnable() *ProductUpdateOne {
	puo.mutation.ClearReturnable()
	return puo
}

// SetTaxable sets the "taxable" field.
func (puo *ProductUpdateOne) SetTaxable(pr product.Taxable) *ProductUpdateOne {
	puo.mutation.SetTaxable(pr)
	return puo
}

// SetNillableTaxable sets the "taxable" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableTaxable(pr *product.Taxable) *ProductUpdateOne {
	if pr != nil {
		puo.SetTaxable(*pr)
	}
	return puo
}

// ClearTaxable clears the value of the "taxable" field.
func (puo *ProductUpdateOne) ClearTaxable() *ProductUpdateOne {
	puo.mutation.ClearTaxable()
	return puo
}

// SetChargeShipping sets the "charge_shipping" field.
func (puo *ProductUpdateOne) SetChargeShipping(ps product.ChargeShipping) *ProductUpdateOne {
	puo.mutation.SetChargeShipping(ps)
	return puo
}

// SetNillableChargeShipping sets the "charge_shipping" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableChargeShipping(ps *product.ChargeShipping) *ProductUpdateOne {
	if ps != nil {
		puo.SetChargeShipping(*ps)
	}
	return puo
}

// ClearChargeShipping clears the value of the "charge_shipping" field.
func (puo *ProductUpdateOne) ClearChargeShipping() *ProductUpdateOne {
	puo.mutation.ClearChargeShipping()
	return puo
}

// SetAutoCreateKeywords sets the "auto_create_keywords" field.
func (puo *ProductUpdateOne) SetAutoCreateKeywords(pck product.AutoCreateKeywords) *ProductUpdateOne {
	puo.mutation.SetAutoCreateKeywords(pck)
	return puo
}

// SetNillableAutoCreateKeywords sets the "auto_create_keywords" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableAutoCreateKeywords(pck *product.AutoCreateKeywords) *ProductUpdateOne {
	if pck != nil {
		puo.SetAutoCreateKeywords(*pck)
	}
	return puo
}

// ClearAutoCreateKeywords clears the value of the "auto_create_keywords" field.
func (puo *ProductUpdateOne) ClearAutoCreateKeywords() *ProductUpdateOne {
	puo.mutation.ClearAutoCreateKeywords()
	return puo
}

// SetIncludeInPromotions sets the "include_in_promotions" field.
func (puo *ProductUpdateOne) SetIncludeInPromotions(pip product.IncludeInPromotions) *ProductUpdateOne {
	puo.mutation.SetIncludeInPromotions(pip)
	return puo
}

// SetNillableIncludeInPromotions sets the "include_in_promotions" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableIncludeInPromotions(pip *product.IncludeInPromotions) *ProductUpdateOne {
	if pip != nil {
		puo.SetIncludeInPromotions(*pip)
	}
	return puo
}

// ClearIncludeInPromotions clears the value of the "include_in_promotions" field.
func (puo *ProductUpdateOne) ClearIncludeInPromotions() *ProductUpdateOne {
	puo.mutation.ClearIncludeInPromotions()
	return puo
}

// SetIsVirtual sets the "is_virtual" field.
func (puo *ProductUpdateOne) SetIsVirtual(pv product.IsVirtual) *ProductUpdateOne {
	puo.mutation.SetIsVirtual(pv)
	return puo
}

// SetNillableIsVirtual sets the "is_virtual" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableIsVirtual(pv *product.IsVirtual) *ProductUpdateOne {
	if pv != nil {
		puo.SetIsVirtual(*pv)
	}
	return puo
}

// ClearIsVirtual clears the value of the "is_virtual" field.
func (puo *ProductUpdateOne) ClearIsVirtual() *ProductUpdateOne {
	puo.mutation.ClearIsVirtual()
	return puo
}

// SetIsVariant sets the "is_variant" field.
func (puo *ProductUpdateOne) SetIsVariant(pv product.IsVariant) *ProductUpdateOne {
	puo.mutation.SetIsVariant(pv)
	return puo
}

// SetNillableIsVariant sets the "is_variant" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableIsVariant(pv *product.IsVariant) *ProductUpdateOne {
	if pv != nil {
		puo.SetIsVariant(*pv)
	}
	return puo
}

// ClearIsVariant clears the value of the "is_variant" field.
func (puo *ProductUpdateOne) ClearIsVariant() *ProductUpdateOne {
	puo.mutation.ClearIsVariant()
	return puo
}

// SetOriginGeoID sets the "origin_geo_id" field.
func (puo *ProductUpdateOne) SetOriginGeoID(i int) *ProductUpdateOne {
	puo.mutation.ResetOriginGeoID()
	puo.mutation.SetOriginGeoID(i)
	return puo
}

// SetNillableOriginGeoID sets the "origin_geo_id" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableOriginGeoID(i *int) *ProductUpdateOne {
	if i != nil {
		puo.SetOriginGeoID(*i)
	}
	return puo
}

// AddOriginGeoID adds i to the "origin_geo_id" field.
func (puo *ProductUpdateOne) AddOriginGeoID(i int) *ProductUpdateOne {
	puo.mutation.AddOriginGeoID(i)
	return puo
}

// ClearOriginGeoID clears the value of the "origin_geo_id" field.
func (puo *ProductUpdateOne) ClearOriginGeoID() *ProductUpdateOne {
	puo.mutation.ClearOriginGeoID()
	return puo
}

// SetBillOfMaterialLevel sets the "bill_of_material_level" field.
func (puo *ProductUpdateOne) SetBillOfMaterialLevel(i int) *ProductUpdateOne {
	puo.mutation.ResetBillOfMaterialLevel()
	puo.mutation.SetBillOfMaterialLevel(i)
	return puo
}

// SetNillableBillOfMaterialLevel sets the "bill_of_material_level" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableBillOfMaterialLevel(i *int) *ProductUpdateOne {
	if i != nil {
		puo.SetBillOfMaterialLevel(*i)
	}
	return puo
}

// AddBillOfMaterialLevel adds i to the "bill_of_material_level" field.
func (puo *ProductUpdateOne) AddBillOfMaterialLevel(i int) *ProductUpdateOne {
	puo.mutation.AddBillOfMaterialLevel(i)
	return puo
}

// ClearBillOfMaterialLevel clears the value of the "bill_of_material_level" field.
func (puo *ProductUpdateOne) ClearBillOfMaterialLevel() *ProductUpdateOne {
	puo.mutation.ClearBillOfMaterialLevel()
	return puo
}

// SetReservMaxPersons sets the "reserv_max_persons" field.
func (puo *ProductUpdateOne) SetReservMaxPersons(f float64) *ProductUpdateOne {
	puo.mutation.ResetReservMaxPersons()
	puo.mutation.SetReservMaxPersons(f)
	return puo
}

// SetNillableReservMaxPersons sets the "reserv_max_persons" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableReservMaxPersons(f *float64) *ProductUpdateOne {
	if f != nil {
		puo.SetReservMaxPersons(*f)
	}
	return puo
}

// AddReservMaxPersons adds f to the "reserv_max_persons" field.
func (puo *ProductUpdateOne) AddReservMaxPersons(f float64) *ProductUpdateOne {
	puo.mutation.AddReservMaxPersons(f)
	return puo
}

// ClearReservMaxPersons clears the value of the "reserv_max_persons" field.
func (puo *ProductUpdateOne) ClearReservMaxPersons() *ProductUpdateOne {
	puo.mutation.ClearReservMaxPersons()
	return puo
}

// SetReserv2NdPpPerc sets the "reserv_2_nd_pp_perc" field.
func (puo *ProductUpdateOne) SetReserv2NdPpPerc(f float64) *ProductUpdateOne {
	puo.mutation.ResetReserv2NdPpPerc()
	puo.mutation.SetReserv2NdPpPerc(f)
	return puo
}

// SetNillableReserv2NdPpPerc sets the "reserv_2_nd_pp_perc" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableReserv2NdPpPerc(f *float64) *ProductUpdateOne {
	if f != nil {
		puo.SetReserv2NdPpPerc(*f)
	}
	return puo
}

// AddReserv2NdPpPerc adds f to the "reserv_2_nd_pp_perc" field.
func (puo *ProductUpdateOne) AddReserv2NdPpPerc(f float64) *ProductUpdateOne {
	puo.mutation.AddReserv2NdPpPerc(f)
	return puo
}

// ClearReserv2NdPpPerc clears the value of the "reserv_2_nd_pp_perc" field.
func (puo *ProductUpdateOne) ClearReserv2NdPpPerc() *ProductUpdateOne {
	puo.mutation.ClearReserv2NdPpPerc()
	return puo
}

// SetReservNthPpPerc sets the "reserv_nth_pp_perc" field.
func (puo *ProductUpdateOne) SetReservNthPpPerc(f float64) *ProductUpdateOne {
	puo.mutation.ResetReservNthPpPerc()
	puo.mutation.SetReservNthPpPerc(f)
	return puo
}

// SetNillableReservNthPpPerc sets the "reserv_nth_pp_perc" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableReservNthPpPerc(f *float64) *ProductUpdateOne {
	if f != nil {
		puo.SetReservNthPpPerc(*f)
	}
	return puo
}

// AddReservNthPpPerc adds f to the "reserv_nth_pp_perc" field.
func (puo *ProductUpdateOne) AddReservNthPpPerc(f float64) *ProductUpdateOne {
	puo.mutation.AddReservNthPpPerc(f)
	return puo
}

// ClearReservNthPpPerc clears the value of the "reserv_nth_pp_perc" field.
func (puo *ProductUpdateOne) ClearReservNthPpPerc() *ProductUpdateOne {
	puo.mutation.ClearReservNthPpPerc()
	return puo
}

// SetConfigID sets the "config_id" field.
func (puo *ProductUpdateOne) SetConfigID(i int) *ProductUpdateOne {
	puo.mutation.ResetConfigID()
	puo.mutation.SetConfigID(i)
	return puo
}

// SetNillableConfigID sets the "config_id" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableConfigID(i *int) *ProductUpdateOne {
	if i != nil {
		puo.SetConfigID(*i)
	}
	return puo
}

// AddConfigID adds i to the "config_id" field.
func (puo *ProductUpdateOne) AddConfigID(i int) *ProductUpdateOne {
	puo.mutation.AddConfigID(i)
	return puo
}

// ClearConfigID clears the value of the "config_id" field.
func (puo *ProductUpdateOne) ClearConfigID() *ProductUpdateOne {
	puo.mutation.ClearConfigID()
	return puo
}

// SetCreatedDate sets the "created_date" field.
func (puo *ProductUpdateOne) SetCreatedDate(t time.Time) *ProductUpdateOne {
	puo.mutation.SetCreatedDate(t)
	return puo
}

// SetNillableCreatedDate sets the "created_date" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableCreatedDate(t *time.Time) *ProductUpdateOne {
	if t != nil {
		puo.SetCreatedDate(*t)
	}
	return puo
}

// ClearCreatedDate clears the value of the "created_date" field.
func (puo *ProductUpdateOne) ClearCreatedDate() *ProductUpdateOne {
	puo.mutation.ClearCreatedDate()
	return puo
}

// SetCreatedByUserLogin sets the "created_by_user_login" field.
func (puo *ProductUpdateOne) SetCreatedByUserLogin(s string) *ProductUpdateOne {
	puo.mutation.SetCreatedByUserLogin(s)
	return puo
}

// SetNillableCreatedByUserLogin sets the "created_by_user_login" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableCreatedByUserLogin(s *string) *ProductUpdateOne {
	if s != nil {
		puo.SetCreatedByUserLogin(*s)
	}
	return puo
}

// ClearCreatedByUserLogin clears the value of the "created_by_user_login" field.
func (puo *ProductUpdateOne) ClearCreatedByUserLogin() *ProductUpdateOne {
	puo.mutation.ClearCreatedByUserLogin()
	return puo
}

// SetLastModifiedDate sets the "last_modified_date" field.
func (puo *ProductUpdateOne) SetLastModifiedDate(t time.Time) *ProductUpdateOne {
	puo.mutation.SetLastModifiedDate(t)
	return puo
}

// SetNillableLastModifiedDate sets the "last_modified_date" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableLastModifiedDate(t *time.Time) *ProductUpdateOne {
	if t != nil {
		puo.SetLastModifiedDate(*t)
	}
	return puo
}

// ClearLastModifiedDate clears the value of the "last_modified_date" field.
func (puo *ProductUpdateOne) ClearLastModifiedDate() *ProductUpdateOne {
	puo.mutation.ClearLastModifiedDate()
	return puo
}

// SetLastModifiedByUserLogin sets the "last_modified_by_user_login" field.
func (puo *ProductUpdateOne) SetLastModifiedByUserLogin(s string) *ProductUpdateOne {
	puo.mutation.SetLastModifiedByUserLogin(s)
	return puo
}

// SetNillableLastModifiedByUserLogin sets the "last_modified_by_user_login" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableLastModifiedByUserLogin(s *string) *ProductUpdateOne {
	if s != nil {
		puo.SetLastModifiedByUserLogin(*s)
	}
	return puo
}

// ClearLastModifiedByUserLogin clears the value of the "last_modified_by_user_login" field.
func (puo *ProductUpdateOne) ClearLastModifiedByUserLogin() *ProductUpdateOne {
	puo.mutation.ClearLastModifiedByUserLogin()
	return puo
}

// SetInShippingBox sets the "in_shipping_box" field.
func (puo *ProductUpdateOne) SetInShippingBox(psb product.InShippingBox) *ProductUpdateOne {
	puo.mutation.SetInShippingBox(psb)
	return puo
}

// SetNillableInShippingBox sets the "in_shipping_box" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableInShippingBox(psb *product.InShippingBox) *ProductUpdateOne {
	if psb != nil {
		puo.SetInShippingBox(*psb)
	}
	return puo
}

// ClearInShippingBox clears the value of the "in_shipping_box" field.
func (puo *ProductUpdateOne) ClearInShippingBox() *ProductUpdateOne {
	puo.mutation.ClearInShippingBox()
	return puo
}

// SetDefaultShipmentBoxTypeID sets the "default_shipment_box_type_id" field.
func (puo *ProductUpdateOne) SetDefaultShipmentBoxTypeID(i int) *ProductUpdateOne {
	puo.mutation.ResetDefaultShipmentBoxTypeID()
	puo.mutation.SetDefaultShipmentBoxTypeID(i)
	return puo
}

// SetNillableDefaultShipmentBoxTypeID sets the "default_shipment_box_type_id" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableDefaultShipmentBoxTypeID(i *int) *ProductUpdateOne {
	if i != nil {
		puo.SetDefaultShipmentBoxTypeID(*i)
	}
	return puo
}

// AddDefaultShipmentBoxTypeID adds i to the "default_shipment_box_type_id" field.
func (puo *ProductUpdateOne) AddDefaultShipmentBoxTypeID(i int) *ProductUpdateOne {
	puo.mutation.AddDefaultShipmentBoxTypeID(i)
	return puo
}

// ClearDefaultShipmentBoxTypeID clears the value of the "default_shipment_box_type_id" field.
func (puo *ProductUpdateOne) ClearDefaultShipmentBoxTypeID() *ProductUpdateOne {
	puo.mutation.ClearDefaultShipmentBoxTypeID()
	return puo
}

// SetLotIDFilledIn sets the "lot_id_filled_in" field.
func (puo *ProductUpdateOne) SetLotIDFilledIn(s string) *ProductUpdateOne {
	puo.mutation.SetLotIDFilledIn(s)
	return puo
}

// SetNillableLotIDFilledIn sets the "lot_id_filled_in" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableLotIDFilledIn(s *string) *ProductUpdateOne {
	if s != nil {
		puo.SetLotIDFilledIn(*s)
	}
	return puo
}

// ClearLotIDFilledIn clears the value of the "lot_id_filled_in" field.
func (puo *ProductUpdateOne) ClearLotIDFilledIn() *ProductUpdateOne {
	puo.mutation.ClearLotIDFilledIn()
	return puo
}

// SetOrderDecimalQuantity sets the "order_decimal_quantity" field.
func (puo *ProductUpdateOne) SetOrderDecimalQuantity(pdq product.OrderDecimalQuantity) *ProductUpdateOne {
	puo.mutation.SetOrderDecimalQuantity(pdq)
	return puo
}

// SetNillableOrderDecimalQuantity sets the "order_decimal_quantity" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableOrderDecimalQuantity(pdq *product.OrderDecimalQuantity) *ProductUpdateOne {
	if pdq != nil {
		puo.SetOrderDecimalQuantity(*pdq)
	}
	return puo
}

// ClearOrderDecimalQuantity clears the value of the "order_decimal_quantity" field.
func (puo *ProductUpdateOne) ClearOrderDecimalQuantity() *ProductUpdateOne {
	puo.mutation.ClearOrderDecimalQuantity()
	return puo
}

// SetProductTypeID sets the "product_type" edge to the ProductType entity by ID.
func (puo *ProductUpdateOne) SetProductTypeID(id int) *ProductUpdateOne {
	puo.mutation.SetProductTypeID(id)
	return puo
}

// SetNillableProductTypeID sets the "product_type" edge to the ProductType entity by ID if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableProductTypeID(id *int) *ProductUpdateOne {
	if id != nil {
		puo = puo.SetProductTypeID(*id)
	}
	return puo
}

// SetProductType sets the "product_type" edge to the ProductType entity.
func (puo *ProductUpdateOne) SetProductType(p *ProductType) *ProductUpdateOne {
	return puo.SetProductTypeID(p.ID)
}

// SetPrimaryProductCategoryID sets the "primary_product_category" edge to the ProductCategory entity by ID.
func (puo *ProductUpdateOne) SetPrimaryProductCategoryID(id int) *ProductUpdateOne {
	puo.mutation.SetPrimaryProductCategoryID(id)
	return puo
}

// SetNillablePrimaryProductCategoryID sets the "primary_product_category" edge to the ProductCategory entity by ID if the given value is not nil.
func (puo *ProductUpdateOne) SetNillablePrimaryProductCategoryID(id *int) *ProductUpdateOne {
	if id != nil {
		puo = puo.SetPrimaryProductCategoryID(*id)
	}
	return puo
}

// SetPrimaryProductCategory sets the "primary_product_category" edge to the ProductCategory entity.
func (puo *ProductUpdateOne) SetPrimaryProductCategory(p *ProductCategory) *ProductUpdateOne {
	return puo.SetPrimaryProductCategoryID(p.ID)
}

// SetVirtualVariantMethodEnumerationID sets the "virtual_variant_method_enumeration" edge to the Enumeration entity by ID.
func (puo *ProductUpdateOne) SetVirtualVariantMethodEnumerationID(id int) *ProductUpdateOne {
	puo.mutation.SetVirtualVariantMethodEnumerationID(id)
	return puo
}

// SetNillableVirtualVariantMethodEnumerationID sets the "virtual_variant_method_enumeration" edge to the Enumeration entity by ID if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableVirtualVariantMethodEnumerationID(id *int) *ProductUpdateOne {
	if id != nil {
		puo = puo.SetVirtualVariantMethodEnumerationID(*id)
	}
	return puo
}

// SetVirtualVariantMethodEnumeration sets the "virtual_variant_method_enumeration" edge to the Enumeration entity.
func (puo *ProductUpdateOne) SetVirtualVariantMethodEnumeration(e *Enumeration) *ProductUpdateOne {
	return puo.SetVirtualVariantMethodEnumerationID(e.ID)
}

// SetRatingEnumerationID sets the "rating_enumeration" edge to the Enumeration entity by ID.
func (puo *ProductUpdateOne) SetRatingEnumerationID(id int) *ProductUpdateOne {
	puo.mutation.SetRatingEnumerationID(id)
	return puo
}

// SetNillableRatingEnumerationID sets the "rating_enumeration" edge to the Enumeration entity by ID if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableRatingEnumerationID(id *int) *ProductUpdateOne {
	if id != nil {
		puo = puo.SetRatingEnumerationID(*id)
	}
	return puo
}

// SetRatingEnumeration sets the "rating_enumeration" edge to the Enumeration entity.
func (puo *ProductUpdateOne) SetRatingEnumeration(e *Enumeration) *ProductUpdateOne {
	return puo.SetRatingEnumerationID(e.ID)
}

// SetRequirementMethodEnumerationID sets the "requirement_method_enumeration" edge to the Enumeration entity by ID.
func (puo *ProductUpdateOne) SetRequirementMethodEnumerationID(id int) *ProductUpdateOne {
	puo.mutation.SetRequirementMethodEnumerationID(id)
	return puo
}

// SetNillableRequirementMethodEnumerationID sets the "requirement_method_enumeration" edge to the Enumeration entity by ID if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableRequirementMethodEnumerationID(id *int) *ProductUpdateOne {
	if id != nil {
		puo = puo.SetRequirementMethodEnumerationID(*id)
	}
	return puo
}

// SetRequirementMethodEnumeration sets the "requirement_method_enumeration" edge to the Enumeration entity.
func (puo *ProductUpdateOne) SetRequirementMethodEnumeration(e *Enumeration) *ProductUpdateOne {
	return puo.SetRequirementMethodEnumerationID(e.ID)
}

// SetInventoryItemTypeID sets the "inventory_item_type" edge to the InventoryItemType entity by ID.
func (puo *ProductUpdateOne) SetInventoryItemTypeID(id int) *ProductUpdateOne {
	puo.mutation.SetInventoryItemTypeID(id)
	return puo
}

// SetNillableInventoryItemTypeID sets the "inventory_item_type" edge to the InventoryItemType entity by ID if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableInventoryItemTypeID(id *int) *ProductUpdateOne {
	if id != nil {
		puo = puo.SetInventoryItemTypeID(*id)
	}
	return puo
}

// SetInventoryItemType sets the "inventory_item_type" edge to the InventoryItemType entity.
func (puo *ProductUpdateOne) SetInventoryItemType(i *InventoryItemType) *ProductUpdateOne {
	return puo.SetInventoryItemTypeID(i.ID)
}

// AddOrderItemIDs adds the "order_items" edge to the OrderItem entity by IDs.
func (puo *ProductUpdateOne) AddOrderItemIDs(ids ...int) *ProductUpdateOne {
	puo.mutation.AddOrderItemIDs(ids...)
	return puo
}

// AddOrderItems adds the "order_items" edges to the OrderItem entity.
func (puo *ProductUpdateOne) AddOrderItems(o ...*OrderItem) *ProductUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return puo.AddOrderItemIDs(ids...)
}

// AddMainProductAssocIDs adds the "main_product_assocs" edge to the ProductAssoc entity by IDs.
func (puo *ProductUpdateOne) AddMainProductAssocIDs(ids ...int) *ProductUpdateOne {
	puo.mutation.AddMainProductAssocIDs(ids...)
	return puo
}

// AddMainProductAssocs adds the "main_product_assocs" edges to the ProductAssoc entity.
func (puo *ProductUpdateOne) AddMainProductAssocs(p ...*ProductAssoc) *ProductUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddMainProductAssocIDs(ids...)
}

// AddAssocProductAssocIDs adds the "assoc_product_assocs" edge to the ProductAssoc entity by IDs.
func (puo *ProductUpdateOne) AddAssocProductAssocIDs(ids ...int) *ProductUpdateOne {
	puo.mutation.AddAssocProductAssocIDs(ids...)
	return puo
}

// AddAssocProductAssocs adds the "assoc_product_assocs" edges to the ProductAssoc entity.
func (puo *ProductUpdateOne) AddAssocProductAssocs(p ...*ProductAssoc) *ProductUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddAssocProductAssocIDs(ids...)
}

// AddProductPriceIDs adds the "product_prices" edge to the ProductPrice entity by IDs.
func (puo *ProductUpdateOne) AddProductPriceIDs(ids ...int) *ProductUpdateOne {
	puo.mutation.AddProductPriceIDs(ids...)
	return puo
}

// AddProductPrices adds the "product_prices" edges to the ProductPrice entity.
func (puo *ProductUpdateOne) AddProductPrices(p ...*ProductPrice) *ProductUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddProductPriceIDs(ids...)
}

// AddProductReviewIDs adds the "product_reviews" edge to the ProductReview entity by IDs.
func (puo *ProductUpdateOne) AddProductReviewIDs(ids ...int) *ProductUpdateOne {
	puo.mutation.AddProductReviewIDs(ids...)
	return puo
}

// AddProductReviews adds the "product_reviews" edges to the ProductReview entity.
func (puo *ProductUpdateOne) AddProductReviews(p ...*ProductReview) *ProductUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddProductReviewIDs(ids...)
}

// Mutation returns the ProductMutation object of the builder.
func (puo *ProductUpdateOne) Mutation() *ProductMutation {
	return puo.mutation
}

// ClearProductType clears the "product_type" edge to the ProductType entity.
func (puo *ProductUpdateOne) ClearProductType() *ProductUpdateOne {
	puo.mutation.ClearProductType()
	return puo
}

// ClearPrimaryProductCategory clears the "primary_product_category" edge to the ProductCategory entity.
func (puo *ProductUpdateOne) ClearPrimaryProductCategory() *ProductUpdateOne {
	puo.mutation.ClearPrimaryProductCategory()
	return puo
}

// ClearVirtualVariantMethodEnumeration clears the "virtual_variant_method_enumeration" edge to the Enumeration entity.
func (puo *ProductUpdateOne) ClearVirtualVariantMethodEnumeration() *ProductUpdateOne {
	puo.mutation.ClearVirtualVariantMethodEnumeration()
	return puo
}

// ClearRatingEnumeration clears the "rating_enumeration" edge to the Enumeration entity.
func (puo *ProductUpdateOne) ClearRatingEnumeration() *ProductUpdateOne {
	puo.mutation.ClearRatingEnumeration()
	return puo
}

// ClearRequirementMethodEnumeration clears the "requirement_method_enumeration" edge to the Enumeration entity.
func (puo *ProductUpdateOne) ClearRequirementMethodEnumeration() *ProductUpdateOne {
	puo.mutation.ClearRequirementMethodEnumeration()
	return puo
}

// ClearInventoryItemType clears the "inventory_item_type" edge to the InventoryItemType entity.
func (puo *ProductUpdateOne) ClearInventoryItemType() *ProductUpdateOne {
	puo.mutation.ClearInventoryItemType()
	return puo
}

// ClearOrderItems clears all "order_items" edges to the OrderItem entity.
func (puo *ProductUpdateOne) ClearOrderItems() *ProductUpdateOne {
	puo.mutation.ClearOrderItems()
	return puo
}

// RemoveOrderItemIDs removes the "order_items" edge to OrderItem entities by IDs.
func (puo *ProductUpdateOne) RemoveOrderItemIDs(ids ...int) *ProductUpdateOne {
	puo.mutation.RemoveOrderItemIDs(ids...)
	return puo
}

// RemoveOrderItems removes "order_items" edges to OrderItem entities.
func (puo *ProductUpdateOne) RemoveOrderItems(o ...*OrderItem) *ProductUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return puo.RemoveOrderItemIDs(ids...)
}

// ClearMainProductAssocs clears all "main_product_assocs" edges to the ProductAssoc entity.
func (puo *ProductUpdateOne) ClearMainProductAssocs() *ProductUpdateOne {
	puo.mutation.ClearMainProductAssocs()
	return puo
}

// RemoveMainProductAssocIDs removes the "main_product_assocs" edge to ProductAssoc entities by IDs.
func (puo *ProductUpdateOne) RemoveMainProductAssocIDs(ids ...int) *ProductUpdateOne {
	puo.mutation.RemoveMainProductAssocIDs(ids...)
	return puo
}

// RemoveMainProductAssocs removes "main_product_assocs" edges to ProductAssoc entities.
func (puo *ProductUpdateOne) RemoveMainProductAssocs(p ...*ProductAssoc) *ProductUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemoveMainProductAssocIDs(ids...)
}

// ClearAssocProductAssocs clears all "assoc_product_assocs" edges to the ProductAssoc entity.
func (puo *ProductUpdateOne) ClearAssocProductAssocs() *ProductUpdateOne {
	puo.mutation.ClearAssocProductAssocs()
	return puo
}

// RemoveAssocProductAssocIDs removes the "assoc_product_assocs" edge to ProductAssoc entities by IDs.
func (puo *ProductUpdateOne) RemoveAssocProductAssocIDs(ids ...int) *ProductUpdateOne {
	puo.mutation.RemoveAssocProductAssocIDs(ids...)
	return puo
}

// RemoveAssocProductAssocs removes "assoc_product_assocs" edges to ProductAssoc entities.
func (puo *ProductUpdateOne) RemoveAssocProductAssocs(p ...*ProductAssoc) *ProductUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemoveAssocProductAssocIDs(ids...)
}

// ClearProductPrices clears all "product_prices" edges to the ProductPrice entity.
func (puo *ProductUpdateOne) ClearProductPrices() *ProductUpdateOne {
	puo.mutation.ClearProductPrices()
	return puo
}

// RemoveProductPriceIDs removes the "product_prices" edge to ProductPrice entities by IDs.
func (puo *ProductUpdateOne) RemoveProductPriceIDs(ids ...int) *ProductUpdateOne {
	puo.mutation.RemoveProductPriceIDs(ids...)
	return puo
}

// RemoveProductPrices removes "product_prices" edges to ProductPrice entities.
func (puo *ProductUpdateOne) RemoveProductPrices(p ...*ProductPrice) *ProductUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemoveProductPriceIDs(ids...)
}

// ClearProductReviews clears all "product_reviews" edges to the ProductReview entity.
func (puo *ProductUpdateOne) ClearProductReviews() *ProductUpdateOne {
	puo.mutation.ClearProductReviews()
	return puo
}

// RemoveProductReviewIDs removes the "product_reviews" edge to ProductReview entities by IDs.
func (puo *ProductUpdateOne) RemoveProductReviewIDs(ids ...int) *ProductUpdateOne {
	puo.mutation.RemoveProductReviewIDs(ids...)
	return puo
}

// RemoveProductReviews removes "product_reviews" edges to ProductReview entities.
func (puo *ProductUpdateOne) RemoveProductReviews(p ...*ProductReview) *ProductUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemoveProductReviewIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *ProductUpdateOne) Select(field string, fields ...string) *ProductUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Product entity.
func (puo *ProductUpdateOne) Save(ctx context.Context) (*Product, error) {
	var (
		err  error
		node *Product
	)
	puo.defaults()
	if len(puo.hooks) == 0 {
		if err = puo.check(); err != nil {
			return nil, err
		}
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProductMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = puo.check(); err != nil {
				return nil, err
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			mut = puo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, puo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ProductUpdateOne) SaveX(ctx context.Context) *Product {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *ProductUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ProductUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *ProductUpdateOne) defaults() {
	if _, ok := puo.mutation.UpdateTime(); !ok {
		v := product.UpdateDefaultUpdateTime()
		puo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *ProductUpdateOne) check() error {
	if v, ok := puo.mutation.SalesDiscWhenNotAvail(); ok {
		if err := product.SalesDiscWhenNotAvailValidator(v); err != nil {
			return &ValidationError{Name: "sales_disc_when_not_avail", err: fmt.Errorf("ent: validator failed for field \"sales_disc_when_not_avail\": %w", err)}
		}
	}
	if v, ok := puo.mutation.RequireInventory(); ok {
		if err := product.RequireInventoryValidator(v); err != nil {
			return &ValidationError{Name: "require_inventory", err: fmt.Errorf("ent: validator failed for field \"require_inventory\": %w", err)}
		}
	}
	if v, ok := puo.mutation.RequireAmount(); ok {
		if err := product.RequireAmountValidator(v); err != nil {
			return &ValidationError{Name: "require_amount", err: fmt.Errorf("ent: validator failed for field \"require_amount\": %w", err)}
		}
	}
	if v, ok := puo.mutation.Returnable(); ok {
		if err := product.ReturnableValidator(v); err != nil {
			return &ValidationError{Name: "returnable", err: fmt.Errorf("ent: validator failed for field \"returnable\": %w", err)}
		}
	}
	if v, ok := puo.mutation.Taxable(); ok {
		if err := product.TaxableValidator(v); err != nil {
			return &ValidationError{Name: "taxable", err: fmt.Errorf("ent: validator failed for field \"taxable\": %w", err)}
		}
	}
	if v, ok := puo.mutation.ChargeShipping(); ok {
		if err := product.ChargeShippingValidator(v); err != nil {
			return &ValidationError{Name: "charge_shipping", err: fmt.Errorf("ent: validator failed for field \"charge_shipping\": %w", err)}
		}
	}
	if v, ok := puo.mutation.AutoCreateKeywords(); ok {
		if err := product.AutoCreateKeywordsValidator(v); err != nil {
			return &ValidationError{Name: "auto_create_keywords", err: fmt.Errorf("ent: validator failed for field \"auto_create_keywords\": %w", err)}
		}
	}
	if v, ok := puo.mutation.IncludeInPromotions(); ok {
		if err := product.IncludeInPromotionsValidator(v); err != nil {
			return &ValidationError{Name: "include_in_promotions", err: fmt.Errorf("ent: validator failed for field \"include_in_promotions\": %w", err)}
		}
	}
	if v, ok := puo.mutation.IsVirtual(); ok {
		if err := product.IsVirtualValidator(v); err != nil {
			return &ValidationError{Name: "is_virtual", err: fmt.Errorf("ent: validator failed for field \"is_virtual\": %w", err)}
		}
	}
	if v, ok := puo.mutation.IsVariant(); ok {
		if err := product.IsVariantValidator(v); err != nil {
			return &ValidationError{Name: "is_variant", err: fmt.Errorf("ent: validator failed for field \"is_variant\": %w", err)}
		}
	}
	if v, ok := puo.mutation.InShippingBox(); ok {
		if err := product.InShippingBoxValidator(v); err != nil {
			return &ValidationError{Name: "in_shipping_box", err: fmt.Errorf("ent: validator failed for field \"in_shipping_box\": %w", err)}
		}
	}
	if v, ok := puo.mutation.OrderDecimalQuantity(); ok {
		if err := product.OrderDecimalQuantityValidator(v); err != nil {
			return &ValidationError{Name: "order_decimal_quantity", err: fmt.Errorf("ent: validator failed for field \"order_decimal_quantity\": %w", err)}
		}
	}
	return nil
}

func (puo *ProductUpdateOne) sqlSave(ctx context.Context) (_node *Product, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   product.Table,
			Columns: product.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: product.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Product.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, product.FieldID)
		for _, f := range fields {
			if !product.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != product.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: product.FieldUpdateTime,
		})
	}
	if value, ok := puo.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: product.FieldStringRef,
		})
	}
	if puo.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: product.FieldStringRef,
		})
	}
	if value, ok := puo.mutation.FacilityID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: product.FieldFacilityID,
		})
	}
	if value, ok := puo.mutation.AddedFacilityID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: product.FieldFacilityID,
		})
	}
	if puo.mutation.FacilityIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: product.FieldFacilityID,
		})
	}
	if value, ok := puo.mutation.IntroductionDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: product.FieldIntroductionDate,
		})
	}
	if puo.mutation.IntroductionDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: product.FieldIntroductionDate,
		})
	}
	if value, ok := puo.mutation.ReleaseDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: product.FieldReleaseDate,
		})
	}
	if puo.mutation.ReleaseDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: product.FieldReleaseDate,
		})
	}
	if value, ok := puo.mutation.SupportDiscontinuationDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: product.FieldSupportDiscontinuationDate,
		})
	}
	if puo.mutation.SupportDiscontinuationDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: product.FieldSupportDiscontinuationDate,
		})
	}
	if value, ok := puo.mutation.SalesDiscontinuationDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: product.FieldSalesDiscontinuationDate,
		})
	}
	if puo.mutation.SalesDiscontinuationDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: product.FieldSalesDiscontinuationDate,
		})
	}
	if value, ok := puo.mutation.SalesDiscWhenNotAvail(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: product.FieldSalesDiscWhenNotAvail,
		})
	}
	if puo.mutation.SalesDiscWhenNotAvailCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: product.FieldSalesDiscWhenNotAvail,
		})
	}
	if value, ok := puo.mutation.InternalName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: product.FieldInternalName,
		})
	}
	if puo.mutation.InternalNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: product.FieldInternalName,
		})
	}
	if value, ok := puo.mutation.BrandName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: product.FieldBrandName,
		})
	}
	if puo.mutation.BrandNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: product.FieldBrandName,
		})
	}
	if value, ok := puo.mutation.Comments(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: product.FieldComments,
		})
	}
	if puo.mutation.CommentsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: product.FieldComments,
		})
	}
	if value, ok := puo.mutation.ProductName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: product.FieldProductName,
		})
	}
	if puo.mutation.ProductNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: product.FieldProductName,
		})
	}
	if value, ok := puo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: product.FieldDescription,
		})
	}
	if puo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: product.FieldDescription,
		})
	}
	if value, ok := puo.mutation.LongDescription(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: product.FieldLongDescription,
		})
	}
	if puo.mutation.LongDescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: product.FieldLongDescription,
		})
	}
	if value, ok := puo.mutation.PriceDetailText(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: product.FieldPriceDetailText,
		})
	}
	if puo.mutation.PriceDetailTextCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: product.FieldPriceDetailText,
		})
	}
	if value, ok := puo.mutation.SmallImageURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: product.FieldSmallImageURL,
		})
	}
	if puo.mutation.SmallImageURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: product.FieldSmallImageURL,
		})
	}
	if value, ok := puo.mutation.MediumImageURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: product.FieldMediumImageURL,
		})
	}
	if puo.mutation.MediumImageURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: product.FieldMediumImageURL,
		})
	}
	if value, ok := puo.mutation.LargeImageURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: product.FieldLargeImageURL,
		})
	}
	if puo.mutation.LargeImageURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: product.FieldLargeImageURL,
		})
	}
	if value, ok := puo.mutation.DetailImageURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: product.FieldDetailImageURL,
		})
	}
	if puo.mutation.DetailImageURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: product.FieldDetailImageURL,
		})
	}
	if value, ok := puo.mutation.OriginalImageURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: product.FieldOriginalImageURL,
		})
	}
	if puo.mutation.OriginalImageURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: product.FieldOriginalImageURL,
		})
	}
	if value, ok := puo.mutation.DetailScreen(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: product.FieldDetailScreen,
		})
	}
	if puo.mutation.DetailScreenCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: product.FieldDetailScreen,
		})
	}
	if value, ok := puo.mutation.InventoryMessage(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: product.FieldInventoryMessage,
		})
	}
	if puo.mutation.InventoryMessageCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: product.FieldInventoryMessage,
		})
	}
	if value, ok := puo.mutation.RequireInventory(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: product.FieldRequireInventory,
		})
	}
	if puo.mutation.RequireInventoryCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: product.FieldRequireInventory,
		})
	}
	if value, ok := puo.mutation.QuantityUomID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: product.FieldQuantityUomID,
		})
	}
	if value, ok := puo.mutation.AddedQuantityUomID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: product.FieldQuantityUomID,
		})
	}
	if puo.mutation.QuantityUomIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: product.FieldQuantityUomID,
		})
	}
	if value, ok := puo.mutation.QuantityIncluded(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: product.FieldQuantityIncluded,
		})
	}
	if value, ok := puo.mutation.AddedQuantityIncluded(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: product.FieldQuantityIncluded,
		})
	}
	if puo.mutation.QuantityIncludedCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: product.FieldQuantityIncluded,
		})
	}
	if value, ok := puo.mutation.PiecesIncluded(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: product.FieldPiecesIncluded,
		})
	}
	if value, ok := puo.mutation.AddedPiecesIncluded(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: product.FieldPiecesIncluded,
		})
	}
	if puo.mutation.PiecesIncludedCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: product.FieldPiecesIncluded,
		})
	}
	if value, ok := puo.mutation.RequireAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: product.FieldRequireAmount,
		})
	}
	if puo.mutation.RequireAmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: product.FieldRequireAmount,
		})
	}
	if value, ok := puo.mutation.FixedAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: product.FieldFixedAmount,
		})
	}
	if value, ok := puo.mutation.AddedFixedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: product.FieldFixedAmount,
		})
	}
	if puo.mutation.FixedAmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: product.FieldFixedAmount,
		})
	}
	if value, ok := puo.mutation.AmountUomTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: product.FieldAmountUomTypeID,
		})
	}
	if value, ok := puo.mutation.AddedAmountUomTypeID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: product.FieldAmountUomTypeID,
		})
	}
	if puo.mutation.AmountUomTypeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: product.FieldAmountUomTypeID,
		})
	}
	if value, ok := puo.mutation.WeightUomID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: product.FieldWeightUomID,
		})
	}
	if value, ok := puo.mutation.AddedWeightUomID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: product.FieldWeightUomID,
		})
	}
	if puo.mutation.WeightUomIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: product.FieldWeightUomID,
		})
	}
	if value, ok := puo.mutation.ShippingWeight(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: product.FieldShippingWeight,
		})
	}
	if value, ok := puo.mutation.AddedShippingWeight(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: product.FieldShippingWeight,
		})
	}
	if puo.mutation.ShippingWeightCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: product.FieldShippingWeight,
		})
	}
	if value, ok := puo.mutation.ProductWeight(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: product.FieldProductWeight,
		})
	}
	if value, ok := puo.mutation.AddedProductWeight(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: product.FieldProductWeight,
		})
	}
	if puo.mutation.ProductWeightCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: product.FieldProductWeight,
		})
	}
	if value, ok := puo.mutation.HeightUomID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: product.FieldHeightUomID,
		})
	}
	if value, ok := puo.mutation.AddedHeightUomID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: product.FieldHeightUomID,
		})
	}
	if puo.mutation.HeightUomIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: product.FieldHeightUomID,
		})
	}
	if value, ok := puo.mutation.ProductHeight(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: product.FieldProductHeight,
		})
	}
	if value, ok := puo.mutation.AddedProductHeight(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: product.FieldProductHeight,
		})
	}
	if puo.mutation.ProductHeightCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: product.FieldProductHeight,
		})
	}
	if value, ok := puo.mutation.ShippingHeight(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: product.FieldShippingHeight,
		})
	}
	if value, ok := puo.mutation.AddedShippingHeight(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: product.FieldShippingHeight,
		})
	}
	if puo.mutation.ShippingHeightCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: product.FieldShippingHeight,
		})
	}
	if value, ok := puo.mutation.WidthUomID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: product.FieldWidthUomID,
		})
	}
	if value, ok := puo.mutation.AddedWidthUomID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: product.FieldWidthUomID,
		})
	}
	if puo.mutation.WidthUomIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: product.FieldWidthUomID,
		})
	}
	if value, ok := puo.mutation.ProductWidth(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: product.FieldProductWidth,
		})
	}
	if value, ok := puo.mutation.AddedProductWidth(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: product.FieldProductWidth,
		})
	}
	if puo.mutation.ProductWidthCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: product.FieldProductWidth,
		})
	}
	if value, ok := puo.mutation.ShippingWidth(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: product.FieldShippingWidth,
		})
	}
	if value, ok := puo.mutation.AddedShippingWidth(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: product.FieldShippingWidth,
		})
	}
	if puo.mutation.ShippingWidthCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: product.FieldShippingWidth,
		})
	}
	if value, ok := puo.mutation.DepthUomID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: product.FieldDepthUomID,
		})
	}
	if value, ok := puo.mutation.AddedDepthUomID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: product.FieldDepthUomID,
		})
	}
	if puo.mutation.DepthUomIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: product.FieldDepthUomID,
		})
	}
	if value, ok := puo.mutation.ProductDepth(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: product.FieldProductDepth,
		})
	}
	if value, ok := puo.mutation.AddedProductDepth(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: product.FieldProductDepth,
		})
	}
	if puo.mutation.ProductDepthCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: product.FieldProductDepth,
		})
	}
	if value, ok := puo.mutation.ShippingDepth(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: product.FieldShippingDepth,
		})
	}
	if value, ok := puo.mutation.AddedShippingDepth(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: product.FieldShippingDepth,
		})
	}
	if puo.mutation.ShippingDepthCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: product.FieldShippingDepth,
		})
	}
	if value, ok := puo.mutation.DiameterUomID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: product.FieldDiameterUomID,
		})
	}
	if value, ok := puo.mutation.AddedDiameterUomID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: product.FieldDiameterUomID,
		})
	}
	if puo.mutation.DiameterUomIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: product.FieldDiameterUomID,
		})
	}
	if value, ok := puo.mutation.ProductDiameter(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: product.FieldProductDiameter,
		})
	}
	if value, ok := puo.mutation.AddedProductDiameter(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: product.FieldProductDiameter,
		})
	}
	if puo.mutation.ProductDiameterCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: product.FieldProductDiameter,
		})
	}
	if value, ok := puo.mutation.ProductRating(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: product.FieldProductRating,
		})
	}
	if value, ok := puo.mutation.AddedProductRating(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: product.FieldProductRating,
		})
	}
	if puo.mutation.ProductRatingCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: product.FieldProductRating,
		})
	}
	if value, ok := puo.mutation.Returnable(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: product.FieldReturnable,
		})
	}
	if puo.mutation.ReturnableCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: product.FieldReturnable,
		})
	}
	if value, ok := puo.mutation.Taxable(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: product.FieldTaxable,
		})
	}
	if puo.mutation.TaxableCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: product.FieldTaxable,
		})
	}
	if value, ok := puo.mutation.ChargeShipping(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: product.FieldChargeShipping,
		})
	}
	if puo.mutation.ChargeShippingCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: product.FieldChargeShipping,
		})
	}
	if value, ok := puo.mutation.AutoCreateKeywords(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: product.FieldAutoCreateKeywords,
		})
	}
	if puo.mutation.AutoCreateKeywordsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: product.FieldAutoCreateKeywords,
		})
	}
	if value, ok := puo.mutation.IncludeInPromotions(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: product.FieldIncludeInPromotions,
		})
	}
	if puo.mutation.IncludeInPromotionsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: product.FieldIncludeInPromotions,
		})
	}
	if value, ok := puo.mutation.IsVirtual(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: product.FieldIsVirtual,
		})
	}
	if puo.mutation.IsVirtualCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: product.FieldIsVirtual,
		})
	}
	if value, ok := puo.mutation.IsVariant(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: product.FieldIsVariant,
		})
	}
	if puo.mutation.IsVariantCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: product.FieldIsVariant,
		})
	}
	if value, ok := puo.mutation.OriginGeoID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: product.FieldOriginGeoID,
		})
	}
	if value, ok := puo.mutation.AddedOriginGeoID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: product.FieldOriginGeoID,
		})
	}
	if puo.mutation.OriginGeoIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: product.FieldOriginGeoID,
		})
	}
	if value, ok := puo.mutation.BillOfMaterialLevel(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: product.FieldBillOfMaterialLevel,
		})
	}
	if value, ok := puo.mutation.AddedBillOfMaterialLevel(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: product.FieldBillOfMaterialLevel,
		})
	}
	if puo.mutation.BillOfMaterialLevelCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: product.FieldBillOfMaterialLevel,
		})
	}
	if value, ok := puo.mutation.ReservMaxPersons(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: product.FieldReservMaxPersons,
		})
	}
	if value, ok := puo.mutation.AddedReservMaxPersons(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: product.FieldReservMaxPersons,
		})
	}
	if puo.mutation.ReservMaxPersonsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: product.FieldReservMaxPersons,
		})
	}
	if value, ok := puo.mutation.Reserv2NdPpPerc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: product.FieldReserv2NdPpPerc,
		})
	}
	if value, ok := puo.mutation.AddedReserv2NdPpPerc(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: product.FieldReserv2NdPpPerc,
		})
	}
	if puo.mutation.Reserv2NdPpPercCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: product.FieldReserv2NdPpPerc,
		})
	}
	if value, ok := puo.mutation.ReservNthPpPerc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: product.FieldReservNthPpPerc,
		})
	}
	if value, ok := puo.mutation.AddedReservNthPpPerc(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: product.FieldReservNthPpPerc,
		})
	}
	if puo.mutation.ReservNthPpPercCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: product.FieldReservNthPpPerc,
		})
	}
	if value, ok := puo.mutation.ConfigID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: product.FieldConfigID,
		})
	}
	if value, ok := puo.mutation.AddedConfigID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: product.FieldConfigID,
		})
	}
	if puo.mutation.ConfigIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: product.FieldConfigID,
		})
	}
	if value, ok := puo.mutation.CreatedDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: product.FieldCreatedDate,
		})
	}
	if puo.mutation.CreatedDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: product.FieldCreatedDate,
		})
	}
	if value, ok := puo.mutation.CreatedByUserLogin(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: product.FieldCreatedByUserLogin,
		})
	}
	if puo.mutation.CreatedByUserLoginCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: product.FieldCreatedByUserLogin,
		})
	}
	if value, ok := puo.mutation.LastModifiedDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: product.FieldLastModifiedDate,
		})
	}
	if puo.mutation.LastModifiedDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: product.FieldLastModifiedDate,
		})
	}
	if value, ok := puo.mutation.LastModifiedByUserLogin(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: product.FieldLastModifiedByUserLogin,
		})
	}
	if puo.mutation.LastModifiedByUserLoginCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: product.FieldLastModifiedByUserLogin,
		})
	}
	if value, ok := puo.mutation.InShippingBox(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: product.FieldInShippingBox,
		})
	}
	if puo.mutation.InShippingBoxCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: product.FieldInShippingBox,
		})
	}
	if value, ok := puo.mutation.DefaultShipmentBoxTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: product.FieldDefaultShipmentBoxTypeID,
		})
	}
	if value, ok := puo.mutation.AddedDefaultShipmentBoxTypeID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: product.FieldDefaultShipmentBoxTypeID,
		})
	}
	if puo.mutation.DefaultShipmentBoxTypeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: product.FieldDefaultShipmentBoxTypeID,
		})
	}
	if value, ok := puo.mutation.LotIDFilledIn(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: product.FieldLotIDFilledIn,
		})
	}
	if puo.mutation.LotIDFilledInCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: product.FieldLotIDFilledIn,
		})
	}
	if value, ok := puo.mutation.OrderDecimalQuantity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: product.FieldOrderDecimalQuantity,
		})
	}
	if puo.mutation.OrderDecimalQuantityCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: product.FieldOrderDecimalQuantity,
		})
	}
	if puo.mutation.ProductTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   product.ProductTypeTable,
			Columns: []string{product.ProductTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: producttype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ProductTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   product.ProductTypeTable,
			Columns: []string{product.ProductTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: producttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.PrimaryProductCategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   product.PrimaryProductCategoryTable,
			Columns: []string{product.PrimaryProductCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productcategory.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PrimaryProductCategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   product.PrimaryProductCategoryTable,
			Columns: []string{product.PrimaryProductCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productcategory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.VirtualVariantMethodEnumerationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   product.VirtualVariantMethodEnumerationTable,
			Columns: []string{product.VirtualVariantMethodEnumerationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: enumeration.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.VirtualVariantMethodEnumerationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   product.VirtualVariantMethodEnumerationTable,
			Columns: []string{product.VirtualVariantMethodEnumerationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: enumeration.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.RatingEnumerationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   product.RatingEnumerationTable,
			Columns: []string{product.RatingEnumerationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: enumeration.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RatingEnumerationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   product.RatingEnumerationTable,
			Columns: []string{product.RatingEnumerationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: enumeration.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.RequirementMethodEnumerationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   product.RequirementMethodEnumerationTable,
			Columns: []string{product.RequirementMethodEnumerationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: enumeration.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RequirementMethodEnumerationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   product.RequirementMethodEnumerationTable,
			Columns: []string{product.RequirementMethodEnumerationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: enumeration.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.InventoryItemTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   product.InventoryItemTypeTable,
			Columns: []string{product.InventoryItemTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: inventoryitemtype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.InventoryItemTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   product.InventoryItemTypeTable,
			Columns: []string{product.InventoryItemTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: inventoryitemtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.OrderItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.OrderItemsTable,
			Columns: []string{product.OrderItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitem.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedOrderItemsIDs(); len(nodes) > 0 && !puo.mutation.OrderItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.OrderItemsTable,
			Columns: []string{product.OrderItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.OrderItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.OrderItemsTable,
			Columns: []string{product.OrderItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.MainProductAssocsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.MainProductAssocsTable,
			Columns: []string{product.MainProductAssocsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productassoc.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedMainProductAssocsIDs(); len(nodes) > 0 && !puo.mutation.MainProductAssocsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.MainProductAssocsTable,
			Columns: []string{product.MainProductAssocsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productassoc.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.MainProductAssocsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.MainProductAssocsTable,
			Columns: []string{product.MainProductAssocsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productassoc.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.AssocProductAssocsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.AssocProductAssocsTable,
			Columns: []string{product.AssocProductAssocsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productassoc.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedAssocProductAssocsIDs(); len(nodes) > 0 && !puo.mutation.AssocProductAssocsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.AssocProductAssocsTable,
			Columns: []string{product.AssocProductAssocsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productassoc.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.AssocProductAssocsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.AssocProductAssocsTable,
			Columns: []string{product.AssocProductAssocsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productassoc.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ProductPricesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ProductPricesTable,
			Columns: []string{product.ProductPricesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productprice.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedProductPricesIDs(); len(nodes) > 0 && !puo.mutation.ProductPricesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ProductPricesTable,
			Columns: []string{product.ProductPricesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productprice.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ProductPricesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ProductPricesTable,
			Columns: []string{product.ProductPricesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productprice.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ProductReviewsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ProductReviewsTable,
			Columns: []string{product.ProductReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productreview.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedProductReviewsIDs(); len(nodes) > 0 && !puo.mutation.ProductReviewsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ProductReviewsTable,
			Columns: []string{product.ProductReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productreview.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ProductReviewsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ProductReviewsTable,
			Columns: []string{product.ProductReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productreview.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Product{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{product.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
