// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/custommethod"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/product"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productassoc"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productassoctype"
)

// ProductAssoc is the model entity for the ProductAssoc schema.
type ProductAssoc struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// StringRef holds the value of the "string_ref" field.
	StringRef string `json:"string_ref,omitempty"`
	// FromDate holds the value of the "from_date" field.
	FromDate time.Time `json:"from_date,omitempty"`
	// ThruDate holds the value of the "thru_date" field.
	ThruDate time.Time `json:"thru_date,omitempty"`
	// SequenceNum holds the value of the "sequence_num" field.
	SequenceNum int `json:"sequence_num,omitempty"`
	// Reason holds the value of the "reason" field.
	Reason string `json:"reason,omitempty"`
	// Quantity holds the value of the "quantity" field.
	Quantity float64 `json:"quantity,omitempty"`
	// ScrapFactor holds the value of the "scrap_factor" field.
	ScrapFactor float64 `json:"scrap_factor,omitempty"`
	// Instruction holds the value of the "instruction" field.
	Instruction string `json:"instruction,omitempty"`
	// RoutingWorkEffortID holds the value of the "routing_work_effort_id" field.
	RoutingWorkEffortID int `json:"routing_work_effort_id,omitempty"`
	// RecurrenceInfoID holds the value of the "recurrence_info_id" field.
	RecurrenceInfoID int `json:"recurrence_info_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProductAssocQuery when eager-loading is set.
	Edges                             ProductAssocEdges `json:"edges"`
	custom_method_product_assocs      *int
	product_main_product_assocs       *int
	product_assoc_product_assocs      *int
	product_assoc_type_product_assocs *int
}

// ProductAssocEdges holds the relations/edges for other nodes in the graph.
type ProductAssocEdges struct {
	// ProductAssocType holds the value of the product_assoc_type edge.
	ProductAssocType *ProductAssocType `json:"product_assoc_type,omitempty"`
	// MainProduct holds the value of the main_product edge.
	MainProduct *Product `json:"main_product,omitempty"`
	// AssocProduct holds the value of the assoc_product edge.
	AssocProduct *Product `json:"assoc_product,omitempty"`
	// CustomMethod holds the value of the custom_method edge.
	CustomMethod *CustomMethod `json:"custom_method,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// ProductAssocTypeOrErr returns the ProductAssocType value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProductAssocEdges) ProductAssocTypeOrErr() (*ProductAssocType, error) {
	if e.loadedTypes[0] {
		if e.ProductAssocType == nil {
			// The edge product_assoc_type was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: productassoctype.Label}
		}
		return e.ProductAssocType, nil
	}
	return nil, &NotLoadedError{edge: "product_assoc_type"}
}

// MainProductOrErr returns the MainProduct value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProductAssocEdges) MainProductOrErr() (*Product, error) {
	if e.loadedTypes[1] {
		if e.MainProduct == nil {
			// The edge main_product was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: product.Label}
		}
		return e.MainProduct, nil
	}
	return nil, &NotLoadedError{edge: "main_product"}
}

// AssocProductOrErr returns the AssocProduct value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProductAssocEdges) AssocProductOrErr() (*Product, error) {
	if e.loadedTypes[2] {
		if e.AssocProduct == nil {
			// The edge assoc_product was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: product.Label}
		}
		return e.AssocProduct, nil
	}
	return nil, &NotLoadedError{edge: "assoc_product"}
}

// CustomMethodOrErr returns the CustomMethod value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProductAssocEdges) CustomMethodOrErr() (*CustomMethod, error) {
	if e.loadedTypes[3] {
		if e.CustomMethod == nil {
			// The edge custom_method was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: custommethod.Label}
		}
		return e.CustomMethod, nil
	}
	return nil, &NotLoadedError{edge: "custom_method"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProductAssoc) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case productassoc.FieldQuantity, productassoc.FieldScrapFactor:
			values[i] = new(sql.NullFloat64)
		case productassoc.FieldID, productassoc.FieldSequenceNum, productassoc.FieldRoutingWorkEffortID, productassoc.FieldRecurrenceInfoID:
			values[i] = new(sql.NullInt64)
		case productassoc.FieldStringRef, productassoc.FieldReason, productassoc.FieldInstruction:
			values[i] = new(sql.NullString)
		case productassoc.FieldCreateTime, productassoc.FieldUpdateTime, productassoc.FieldFromDate, productassoc.FieldThruDate:
			values[i] = new(sql.NullTime)
		case productassoc.ForeignKeys[0]: // custom_method_product_assocs
			values[i] = new(sql.NullInt64)
		case productassoc.ForeignKeys[1]: // product_main_product_assocs
			values[i] = new(sql.NullInt64)
		case productassoc.ForeignKeys[2]: // product_assoc_product_assocs
			values[i] = new(sql.NullInt64)
		case productassoc.ForeignKeys[3]: // product_assoc_type_product_assocs
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ProductAssoc", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProductAssoc fields.
func (pa *ProductAssoc) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case productassoc.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pa.ID = int(value.Int64)
		case productassoc.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				pa.CreateTime = value.Time
			}
		case productassoc.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				pa.UpdateTime = value.Time
			}
		case productassoc.FieldStringRef:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field string_ref", values[i])
			} else if value.Valid {
				pa.StringRef = value.String
			}
		case productassoc.FieldFromDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field from_date", values[i])
			} else if value.Valid {
				pa.FromDate = value.Time
			}
		case productassoc.FieldThruDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field thru_date", values[i])
			} else if value.Valid {
				pa.ThruDate = value.Time
			}
		case productassoc.FieldSequenceNum:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sequence_num", values[i])
			} else if value.Valid {
				pa.SequenceNum = int(value.Int64)
			}
		case productassoc.FieldReason:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reason", values[i])
			} else if value.Valid {
				pa.Reason = value.String
			}
		case productassoc.FieldQuantity:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field quantity", values[i])
			} else if value.Valid {
				pa.Quantity = value.Float64
			}
		case productassoc.FieldScrapFactor:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field scrap_factor", values[i])
			} else if value.Valid {
				pa.ScrapFactor = value.Float64
			}
		case productassoc.FieldInstruction:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field instruction", values[i])
			} else if value.Valid {
				pa.Instruction = value.String
			}
		case productassoc.FieldRoutingWorkEffortID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field routing_work_effort_id", values[i])
			} else if value.Valid {
				pa.RoutingWorkEffortID = int(value.Int64)
			}
		case productassoc.FieldRecurrenceInfoID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field recurrence_info_id", values[i])
			} else if value.Valid {
				pa.RecurrenceInfoID = int(value.Int64)
			}
		case productassoc.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field custom_method_product_assocs", value)
			} else if value.Valid {
				pa.custom_method_product_assocs = new(int)
				*pa.custom_method_product_assocs = int(value.Int64)
			}
		case productassoc.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field product_main_product_assocs", value)
			} else if value.Valid {
				pa.product_main_product_assocs = new(int)
				*pa.product_main_product_assocs = int(value.Int64)
			}
		case productassoc.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field product_assoc_product_assocs", value)
			} else if value.Valid {
				pa.product_assoc_product_assocs = new(int)
				*pa.product_assoc_product_assocs = int(value.Int64)
			}
		case productassoc.ForeignKeys[3]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field product_assoc_type_product_assocs", value)
			} else if value.Valid {
				pa.product_assoc_type_product_assocs = new(int)
				*pa.product_assoc_type_product_assocs = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryProductAssocType queries the "product_assoc_type" edge of the ProductAssoc entity.
func (pa *ProductAssoc) QueryProductAssocType() *ProductAssocTypeQuery {
	return (&ProductAssocClient{config: pa.config}).QueryProductAssocType(pa)
}

// QueryMainProduct queries the "main_product" edge of the ProductAssoc entity.
func (pa *ProductAssoc) QueryMainProduct() *ProductQuery {
	return (&ProductAssocClient{config: pa.config}).QueryMainProduct(pa)
}

// QueryAssocProduct queries the "assoc_product" edge of the ProductAssoc entity.
func (pa *ProductAssoc) QueryAssocProduct() *ProductQuery {
	return (&ProductAssocClient{config: pa.config}).QueryAssocProduct(pa)
}

// QueryCustomMethod queries the "custom_method" edge of the ProductAssoc entity.
func (pa *ProductAssoc) QueryCustomMethod() *CustomMethodQuery {
	return (&ProductAssocClient{config: pa.config}).QueryCustomMethod(pa)
}

// Update returns a builder for updating this ProductAssoc.
// Note that you need to call ProductAssoc.Unwrap() before calling this method if this ProductAssoc
// was returned from a transaction, and the transaction was committed or rolled back.
func (pa *ProductAssoc) Update() *ProductAssocUpdateOne {
	return (&ProductAssocClient{config: pa.config}).UpdateOne(pa)
}

// Unwrap unwraps the ProductAssoc entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pa *ProductAssoc) Unwrap() *ProductAssoc {
	tx, ok := pa.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProductAssoc is not a transactional entity")
	}
	pa.config.driver = tx.drv
	return pa
}

// String implements the fmt.Stringer.
func (pa *ProductAssoc) String() string {
	var builder strings.Builder
	builder.WriteString("ProductAssoc(")
	builder.WriteString(fmt.Sprintf("id=%v", pa.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(pa.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(pa.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", string_ref=")
	builder.WriteString(pa.StringRef)
	builder.WriteString(", from_date=")
	builder.WriteString(pa.FromDate.Format(time.ANSIC))
	builder.WriteString(", thru_date=")
	builder.WriteString(pa.ThruDate.Format(time.ANSIC))
	builder.WriteString(", sequence_num=")
	builder.WriteString(fmt.Sprintf("%v", pa.SequenceNum))
	builder.WriteString(", reason=")
	builder.WriteString(pa.Reason)
	builder.WriteString(", quantity=")
	builder.WriteString(fmt.Sprintf("%v", pa.Quantity))
	builder.WriteString(", scrap_factor=")
	builder.WriteString(fmt.Sprintf("%v", pa.ScrapFactor))
	builder.WriteString(", instruction=")
	builder.WriteString(pa.Instruction)
	builder.WriteString(", routing_work_effort_id=")
	builder.WriteString(fmt.Sprintf("%v", pa.RoutingWorkEffortID))
	builder.WriteString(", recurrence_info_id=")
	builder.WriteString(fmt.Sprintf("%v", pa.RecurrenceInfoID))
	builder.WriteByte(')')
	return builder.String()
}

// ProductAssocs is a parsable slice of ProductAssoc.
type ProductAssocs []*ProductAssoc

func (pa ProductAssocs) config(cfg config) {
	for _i := range pa {
		pa[_i].config = cfg
	}
}
