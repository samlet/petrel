// Code generated by entc, DO NOT EDIT.

package productassoc

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// StringRef applies equality check predicate on the "string_ref" field. It's identical to StringRefEQ.
func StringRef(v string) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStringRef), v))
	})
}

// FromDate applies equality check predicate on the "from_date" field. It's identical to FromDateEQ.
func FromDate(v time.Time) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFromDate), v))
	})
}

// ThruDate applies equality check predicate on the "thru_date" field. It's identical to ThruDateEQ.
func ThruDate(v time.Time) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldThruDate), v))
	})
}

// SequenceNum applies equality check predicate on the "sequence_num" field. It's identical to SequenceNumEQ.
func SequenceNum(v int) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSequenceNum), v))
	})
}

// Reason applies equality check predicate on the "reason" field. It's identical to ReasonEQ.
func Reason(v string) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReason), v))
	})
}

// Quantity applies equality check predicate on the "quantity" field. It's identical to QuantityEQ.
func Quantity(v float64) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQuantity), v))
	})
}

// ScrapFactor applies equality check predicate on the "scrap_factor" field. It's identical to ScrapFactorEQ.
func ScrapFactor(v float64) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldScrapFactor), v))
	})
}

// Instruction applies equality check predicate on the "instruction" field. It's identical to InstructionEQ.
func Instruction(v string) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInstruction), v))
	})
}

// RoutingWorkEffortID applies equality check predicate on the "routing_work_effort_id" field. It's identical to RoutingWorkEffortIDEQ.
func RoutingWorkEffortID(v int) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRoutingWorkEffortID), v))
	})
}

// RecurrenceInfoID applies equality check predicate on the "recurrence_info_id" field. It's identical to RecurrenceInfoIDEQ.
func RecurrenceInfoID(v int) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRecurrenceInfoID), v))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.ProductAssoc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductAssoc(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.ProductAssoc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductAssoc(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), v))
	})
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.ProductAssoc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductAssoc(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.ProductAssoc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductAssoc(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateTime), v))
	})
}

// StringRefEQ applies the EQ predicate on the "string_ref" field.
func StringRefEQ(v string) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStringRef), v))
	})
}

// StringRefNEQ applies the NEQ predicate on the "string_ref" field.
func StringRefNEQ(v string) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStringRef), v))
	})
}

// StringRefIn applies the In predicate on the "string_ref" field.
func StringRefIn(vs ...string) predicate.ProductAssoc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductAssoc(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStringRef), v...))
	})
}

// StringRefNotIn applies the NotIn predicate on the "string_ref" field.
func StringRefNotIn(vs ...string) predicate.ProductAssoc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductAssoc(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStringRef), v...))
	})
}

// StringRefGT applies the GT predicate on the "string_ref" field.
func StringRefGT(v string) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStringRef), v))
	})
}

// StringRefGTE applies the GTE predicate on the "string_ref" field.
func StringRefGTE(v string) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStringRef), v))
	})
}

// StringRefLT applies the LT predicate on the "string_ref" field.
func StringRefLT(v string) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStringRef), v))
	})
}

// StringRefLTE applies the LTE predicate on the "string_ref" field.
func StringRefLTE(v string) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStringRef), v))
	})
}

// StringRefContains applies the Contains predicate on the "string_ref" field.
func StringRefContains(v string) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStringRef), v))
	})
}

// StringRefHasPrefix applies the HasPrefix predicate on the "string_ref" field.
func StringRefHasPrefix(v string) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStringRef), v))
	})
}

// StringRefHasSuffix applies the HasSuffix predicate on the "string_ref" field.
func StringRefHasSuffix(v string) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStringRef), v))
	})
}

// StringRefIsNil applies the IsNil predicate on the "string_ref" field.
func StringRefIsNil() predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStringRef)))
	})
}

// StringRefNotNil applies the NotNil predicate on the "string_ref" field.
func StringRefNotNil() predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStringRef)))
	})
}

// StringRefEqualFold applies the EqualFold predicate on the "string_ref" field.
func StringRefEqualFold(v string) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStringRef), v))
	})
}

// StringRefContainsFold applies the ContainsFold predicate on the "string_ref" field.
func StringRefContainsFold(v string) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStringRef), v))
	})
}

// FromDateEQ applies the EQ predicate on the "from_date" field.
func FromDateEQ(v time.Time) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFromDate), v))
	})
}

// FromDateNEQ applies the NEQ predicate on the "from_date" field.
func FromDateNEQ(v time.Time) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFromDate), v))
	})
}

// FromDateIn applies the In predicate on the "from_date" field.
func FromDateIn(vs ...time.Time) predicate.ProductAssoc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductAssoc(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFromDate), v...))
	})
}

// FromDateNotIn applies the NotIn predicate on the "from_date" field.
func FromDateNotIn(vs ...time.Time) predicate.ProductAssoc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductAssoc(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFromDate), v...))
	})
}

// FromDateGT applies the GT predicate on the "from_date" field.
func FromDateGT(v time.Time) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFromDate), v))
	})
}

// FromDateGTE applies the GTE predicate on the "from_date" field.
func FromDateGTE(v time.Time) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFromDate), v))
	})
}

// FromDateLT applies the LT predicate on the "from_date" field.
func FromDateLT(v time.Time) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFromDate), v))
	})
}

// FromDateLTE applies the LTE predicate on the "from_date" field.
func FromDateLTE(v time.Time) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFromDate), v))
	})
}

// ThruDateEQ applies the EQ predicate on the "thru_date" field.
func ThruDateEQ(v time.Time) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldThruDate), v))
	})
}

// ThruDateNEQ applies the NEQ predicate on the "thru_date" field.
func ThruDateNEQ(v time.Time) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldThruDate), v))
	})
}

// ThruDateIn applies the In predicate on the "thru_date" field.
func ThruDateIn(vs ...time.Time) predicate.ProductAssoc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductAssoc(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldThruDate), v...))
	})
}

// ThruDateNotIn applies the NotIn predicate on the "thru_date" field.
func ThruDateNotIn(vs ...time.Time) predicate.ProductAssoc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductAssoc(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldThruDate), v...))
	})
}

// ThruDateGT applies the GT predicate on the "thru_date" field.
func ThruDateGT(v time.Time) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldThruDate), v))
	})
}

// ThruDateGTE applies the GTE predicate on the "thru_date" field.
func ThruDateGTE(v time.Time) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldThruDate), v))
	})
}

// ThruDateLT applies the LT predicate on the "thru_date" field.
func ThruDateLT(v time.Time) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldThruDate), v))
	})
}

// ThruDateLTE applies the LTE predicate on the "thru_date" field.
func ThruDateLTE(v time.Time) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldThruDate), v))
	})
}

// ThruDateIsNil applies the IsNil predicate on the "thru_date" field.
func ThruDateIsNil() predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldThruDate)))
	})
}

// ThruDateNotNil applies the NotNil predicate on the "thru_date" field.
func ThruDateNotNil() predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldThruDate)))
	})
}

// SequenceNumEQ applies the EQ predicate on the "sequence_num" field.
func SequenceNumEQ(v int) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSequenceNum), v))
	})
}

// SequenceNumNEQ applies the NEQ predicate on the "sequence_num" field.
func SequenceNumNEQ(v int) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSequenceNum), v))
	})
}

// SequenceNumIn applies the In predicate on the "sequence_num" field.
func SequenceNumIn(vs ...int) predicate.ProductAssoc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductAssoc(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSequenceNum), v...))
	})
}

// SequenceNumNotIn applies the NotIn predicate on the "sequence_num" field.
func SequenceNumNotIn(vs ...int) predicate.ProductAssoc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductAssoc(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSequenceNum), v...))
	})
}

// SequenceNumGT applies the GT predicate on the "sequence_num" field.
func SequenceNumGT(v int) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSequenceNum), v))
	})
}

// SequenceNumGTE applies the GTE predicate on the "sequence_num" field.
func SequenceNumGTE(v int) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSequenceNum), v))
	})
}

// SequenceNumLT applies the LT predicate on the "sequence_num" field.
func SequenceNumLT(v int) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSequenceNum), v))
	})
}

// SequenceNumLTE applies the LTE predicate on the "sequence_num" field.
func SequenceNumLTE(v int) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSequenceNum), v))
	})
}

// SequenceNumIsNil applies the IsNil predicate on the "sequence_num" field.
func SequenceNumIsNil() predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSequenceNum)))
	})
}

// SequenceNumNotNil applies the NotNil predicate on the "sequence_num" field.
func SequenceNumNotNil() predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSequenceNum)))
	})
}

// ReasonEQ applies the EQ predicate on the "reason" field.
func ReasonEQ(v string) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReason), v))
	})
}

// ReasonNEQ applies the NEQ predicate on the "reason" field.
func ReasonNEQ(v string) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReason), v))
	})
}

// ReasonIn applies the In predicate on the "reason" field.
func ReasonIn(vs ...string) predicate.ProductAssoc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductAssoc(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldReason), v...))
	})
}

// ReasonNotIn applies the NotIn predicate on the "reason" field.
func ReasonNotIn(vs ...string) predicate.ProductAssoc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductAssoc(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldReason), v...))
	})
}

// ReasonGT applies the GT predicate on the "reason" field.
func ReasonGT(v string) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldReason), v))
	})
}

// ReasonGTE applies the GTE predicate on the "reason" field.
func ReasonGTE(v string) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldReason), v))
	})
}

// ReasonLT applies the LT predicate on the "reason" field.
func ReasonLT(v string) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldReason), v))
	})
}

// ReasonLTE applies the LTE predicate on the "reason" field.
func ReasonLTE(v string) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldReason), v))
	})
}

// ReasonContains applies the Contains predicate on the "reason" field.
func ReasonContains(v string) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldReason), v))
	})
}

// ReasonHasPrefix applies the HasPrefix predicate on the "reason" field.
func ReasonHasPrefix(v string) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldReason), v))
	})
}

// ReasonHasSuffix applies the HasSuffix predicate on the "reason" field.
func ReasonHasSuffix(v string) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldReason), v))
	})
}

// ReasonIsNil applies the IsNil predicate on the "reason" field.
func ReasonIsNil() predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldReason)))
	})
}

// ReasonNotNil applies the NotNil predicate on the "reason" field.
func ReasonNotNil() predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldReason)))
	})
}

// ReasonEqualFold applies the EqualFold predicate on the "reason" field.
func ReasonEqualFold(v string) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldReason), v))
	})
}

// ReasonContainsFold applies the ContainsFold predicate on the "reason" field.
func ReasonContainsFold(v string) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldReason), v))
	})
}

// QuantityEQ applies the EQ predicate on the "quantity" field.
func QuantityEQ(v float64) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQuantity), v))
	})
}

// QuantityNEQ applies the NEQ predicate on the "quantity" field.
func QuantityNEQ(v float64) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldQuantity), v))
	})
}

// QuantityIn applies the In predicate on the "quantity" field.
func QuantityIn(vs ...float64) predicate.ProductAssoc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductAssoc(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldQuantity), v...))
	})
}

// QuantityNotIn applies the NotIn predicate on the "quantity" field.
func QuantityNotIn(vs ...float64) predicate.ProductAssoc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductAssoc(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldQuantity), v...))
	})
}

// QuantityGT applies the GT predicate on the "quantity" field.
func QuantityGT(v float64) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldQuantity), v))
	})
}

// QuantityGTE applies the GTE predicate on the "quantity" field.
func QuantityGTE(v float64) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldQuantity), v))
	})
}

// QuantityLT applies the LT predicate on the "quantity" field.
func QuantityLT(v float64) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldQuantity), v))
	})
}

// QuantityLTE applies the LTE predicate on the "quantity" field.
func QuantityLTE(v float64) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldQuantity), v))
	})
}

// QuantityIsNil applies the IsNil predicate on the "quantity" field.
func QuantityIsNil() predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldQuantity)))
	})
}

// QuantityNotNil applies the NotNil predicate on the "quantity" field.
func QuantityNotNil() predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldQuantity)))
	})
}

// ScrapFactorEQ applies the EQ predicate on the "scrap_factor" field.
func ScrapFactorEQ(v float64) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldScrapFactor), v))
	})
}

// ScrapFactorNEQ applies the NEQ predicate on the "scrap_factor" field.
func ScrapFactorNEQ(v float64) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldScrapFactor), v))
	})
}

// ScrapFactorIn applies the In predicate on the "scrap_factor" field.
func ScrapFactorIn(vs ...float64) predicate.ProductAssoc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductAssoc(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldScrapFactor), v...))
	})
}

// ScrapFactorNotIn applies the NotIn predicate on the "scrap_factor" field.
func ScrapFactorNotIn(vs ...float64) predicate.ProductAssoc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductAssoc(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldScrapFactor), v...))
	})
}

// ScrapFactorGT applies the GT predicate on the "scrap_factor" field.
func ScrapFactorGT(v float64) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldScrapFactor), v))
	})
}

// ScrapFactorGTE applies the GTE predicate on the "scrap_factor" field.
func ScrapFactorGTE(v float64) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldScrapFactor), v))
	})
}

// ScrapFactorLT applies the LT predicate on the "scrap_factor" field.
func ScrapFactorLT(v float64) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldScrapFactor), v))
	})
}

// ScrapFactorLTE applies the LTE predicate on the "scrap_factor" field.
func ScrapFactorLTE(v float64) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldScrapFactor), v))
	})
}

// ScrapFactorIsNil applies the IsNil predicate on the "scrap_factor" field.
func ScrapFactorIsNil() predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldScrapFactor)))
	})
}

// ScrapFactorNotNil applies the NotNil predicate on the "scrap_factor" field.
func ScrapFactorNotNil() predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldScrapFactor)))
	})
}

// InstructionEQ applies the EQ predicate on the "instruction" field.
func InstructionEQ(v string) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInstruction), v))
	})
}

// InstructionNEQ applies the NEQ predicate on the "instruction" field.
func InstructionNEQ(v string) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldInstruction), v))
	})
}

// InstructionIn applies the In predicate on the "instruction" field.
func InstructionIn(vs ...string) predicate.ProductAssoc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductAssoc(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldInstruction), v...))
	})
}

// InstructionNotIn applies the NotIn predicate on the "instruction" field.
func InstructionNotIn(vs ...string) predicate.ProductAssoc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductAssoc(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldInstruction), v...))
	})
}

// InstructionGT applies the GT predicate on the "instruction" field.
func InstructionGT(v string) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldInstruction), v))
	})
}

// InstructionGTE applies the GTE predicate on the "instruction" field.
func InstructionGTE(v string) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldInstruction), v))
	})
}

// InstructionLT applies the LT predicate on the "instruction" field.
func InstructionLT(v string) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldInstruction), v))
	})
}

// InstructionLTE applies the LTE predicate on the "instruction" field.
func InstructionLTE(v string) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldInstruction), v))
	})
}

// InstructionContains applies the Contains predicate on the "instruction" field.
func InstructionContains(v string) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldInstruction), v))
	})
}

// InstructionHasPrefix applies the HasPrefix predicate on the "instruction" field.
func InstructionHasPrefix(v string) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldInstruction), v))
	})
}

// InstructionHasSuffix applies the HasSuffix predicate on the "instruction" field.
func InstructionHasSuffix(v string) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldInstruction), v))
	})
}

// InstructionIsNil applies the IsNil predicate on the "instruction" field.
func InstructionIsNil() predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldInstruction)))
	})
}

// InstructionNotNil applies the NotNil predicate on the "instruction" field.
func InstructionNotNil() predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldInstruction)))
	})
}

// InstructionEqualFold applies the EqualFold predicate on the "instruction" field.
func InstructionEqualFold(v string) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldInstruction), v))
	})
}

// InstructionContainsFold applies the ContainsFold predicate on the "instruction" field.
func InstructionContainsFold(v string) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldInstruction), v))
	})
}

// RoutingWorkEffortIDEQ applies the EQ predicate on the "routing_work_effort_id" field.
func RoutingWorkEffortIDEQ(v int) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRoutingWorkEffortID), v))
	})
}

// RoutingWorkEffortIDNEQ applies the NEQ predicate on the "routing_work_effort_id" field.
func RoutingWorkEffortIDNEQ(v int) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRoutingWorkEffortID), v))
	})
}

// RoutingWorkEffortIDIn applies the In predicate on the "routing_work_effort_id" field.
func RoutingWorkEffortIDIn(vs ...int) predicate.ProductAssoc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductAssoc(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRoutingWorkEffortID), v...))
	})
}

// RoutingWorkEffortIDNotIn applies the NotIn predicate on the "routing_work_effort_id" field.
func RoutingWorkEffortIDNotIn(vs ...int) predicate.ProductAssoc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductAssoc(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRoutingWorkEffortID), v...))
	})
}

// RoutingWorkEffortIDGT applies the GT predicate on the "routing_work_effort_id" field.
func RoutingWorkEffortIDGT(v int) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRoutingWorkEffortID), v))
	})
}

// RoutingWorkEffortIDGTE applies the GTE predicate on the "routing_work_effort_id" field.
func RoutingWorkEffortIDGTE(v int) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRoutingWorkEffortID), v))
	})
}

// RoutingWorkEffortIDLT applies the LT predicate on the "routing_work_effort_id" field.
func RoutingWorkEffortIDLT(v int) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRoutingWorkEffortID), v))
	})
}

// RoutingWorkEffortIDLTE applies the LTE predicate on the "routing_work_effort_id" field.
func RoutingWorkEffortIDLTE(v int) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRoutingWorkEffortID), v))
	})
}

// RoutingWorkEffortIDIsNil applies the IsNil predicate on the "routing_work_effort_id" field.
func RoutingWorkEffortIDIsNil() predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRoutingWorkEffortID)))
	})
}

// RoutingWorkEffortIDNotNil applies the NotNil predicate on the "routing_work_effort_id" field.
func RoutingWorkEffortIDNotNil() predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRoutingWorkEffortID)))
	})
}

// RecurrenceInfoIDEQ applies the EQ predicate on the "recurrence_info_id" field.
func RecurrenceInfoIDEQ(v int) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRecurrenceInfoID), v))
	})
}

// RecurrenceInfoIDNEQ applies the NEQ predicate on the "recurrence_info_id" field.
func RecurrenceInfoIDNEQ(v int) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRecurrenceInfoID), v))
	})
}

// RecurrenceInfoIDIn applies the In predicate on the "recurrence_info_id" field.
func RecurrenceInfoIDIn(vs ...int) predicate.ProductAssoc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductAssoc(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRecurrenceInfoID), v...))
	})
}

// RecurrenceInfoIDNotIn applies the NotIn predicate on the "recurrence_info_id" field.
func RecurrenceInfoIDNotIn(vs ...int) predicate.ProductAssoc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductAssoc(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRecurrenceInfoID), v...))
	})
}

// RecurrenceInfoIDGT applies the GT predicate on the "recurrence_info_id" field.
func RecurrenceInfoIDGT(v int) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRecurrenceInfoID), v))
	})
}

// RecurrenceInfoIDGTE applies the GTE predicate on the "recurrence_info_id" field.
func RecurrenceInfoIDGTE(v int) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRecurrenceInfoID), v))
	})
}

// RecurrenceInfoIDLT applies the LT predicate on the "recurrence_info_id" field.
func RecurrenceInfoIDLT(v int) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRecurrenceInfoID), v))
	})
}

// RecurrenceInfoIDLTE applies the LTE predicate on the "recurrence_info_id" field.
func RecurrenceInfoIDLTE(v int) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRecurrenceInfoID), v))
	})
}

// RecurrenceInfoIDIsNil applies the IsNil predicate on the "recurrence_info_id" field.
func RecurrenceInfoIDIsNil() predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRecurrenceInfoID)))
	})
}

// RecurrenceInfoIDNotNil applies the NotNil predicate on the "recurrence_info_id" field.
func RecurrenceInfoIDNotNil() predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRecurrenceInfoID)))
	})
}

// HasProductAssocType applies the HasEdge predicate on the "product_assoc_type" edge.
func HasProductAssocType() predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProductAssocTypeTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProductAssocTypeTable, ProductAssocTypeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProductAssocTypeWith applies the HasEdge predicate on the "product_assoc_type" edge with a given conditions (other predicates).
func HasProductAssocTypeWith(preds ...predicate.ProductAssocType) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProductAssocTypeInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProductAssocTypeTable, ProductAssocTypeColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMainProduct applies the HasEdge predicate on the "main_product" edge.
func HasMainProduct() predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MainProductTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, MainProductTable, MainProductColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMainProductWith applies the HasEdge predicate on the "main_product" edge with a given conditions (other predicates).
func HasMainProductWith(preds ...predicate.Product) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MainProductInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, MainProductTable, MainProductColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAssocProduct applies the HasEdge predicate on the "assoc_product" edge.
func HasAssocProduct() predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AssocProductTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AssocProductTable, AssocProductColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAssocProductWith applies the HasEdge predicate on the "assoc_product" edge with a given conditions (other predicates).
func HasAssocProductWith(preds ...predicate.Product) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AssocProductInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AssocProductTable, AssocProductColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCustomMethod applies the HasEdge predicate on the "custom_method" edge.
func HasCustomMethod() predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CustomMethodTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CustomMethodTable, CustomMethodColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCustomMethodWith applies the HasEdge predicate on the "custom_method" edge with a given conditions (other predicates).
func HasCustomMethodWith(preds ...predicate.CustomMethod) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CustomMethodInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CustomMethodTable, CustomMethodColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ProductAssoc) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ProductAssoc) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ProductAssoc) predicate.ProductAssoc {
	return predicate.ProductAssoc(func(s *sql.Selector) {
		p(s.Not())
	})
}
