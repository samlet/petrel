// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/custommethod"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/product"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productassoc"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productassoctype"
)

// ProductAssocCreate is the builder for creating a ProductAssoc entity.
type ProductAssocCreate struct {
	config
	mutation *ProductAssocMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (pac *ProductAssocCreate) SetCreateTime(t time.Time) *ProductAssocCreate {
	pac.mutation.SetCreateTime(t)
	return pac
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (pac *ProductAssocCreate) SetNillableCreateTime(t *time.Time) *ProductAssocCreate {
	if t != nil {
		pac.SetCreateTime(*t)
	}
	return pac
}

// SetUpdateTime sets the "update_time" field.
func (pac *ProductAssocCreate) SetUpdateTime(t time.Time) *ProductAssocCreate {
	pac.mutation.SetUpdateTime(t)
	return pac
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (pac *ProductAssocCreate) SetNillableUpdateTime(t *time.Time) *ProductAssocCreate {
	if t != nil {
		pac.SetUpdateTime(*t)
	}
	return pac
}

// SetStringRef sets the "string_ref" field.
func (pac *ProductAssocCreate) SetStringRef(s string) *ProductAssocCreate {
	pac.mutation.SetStringRef(s)
	return pac
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (pac *ProductAssocCreate) SetNillableStringRef(s *string) *ProductAssocCreate {
	if s != nil {
		pac.SetStringRef(*s)
	}
	return pac
}

// SetFromDate sets the "from_date" field.
func (pac *ProductAssocCreate) SetFromDate(t time.Time) *ProductAssocCreate {
	pac.mutation.SetFromDate(t)
	return pac
}

// SetNillableFromDate sets the "from_date" field if the given value is not nil.
func (pac *ProductAssocCreate) SetNillableFromDate(t *time.Time) *ProductAssocCreate {
	if t != nil {
		pac.SetFromDate(*t)
	}
	return pac
}

// SetThruDate sets the "thru_date" field.
func (pac *ProductAssocCreate) SetThruDate(t time.Time) *ProductAssocCreate {
	pac.mutation.SetThruDate(t)
	return pac
}

// SetNillableThruDate sets the "thru_date" field if the given value is not nil.
func (pac *ProductAssocCreate) SetNillableThruDate(t *time.Time) *ProductAssocCreate {
	if t != nil {
		pac.SetThruDate(*t)
	}
	return pac
}

// SetSequenceNum sets the "sequence_num" field.
func (pac *ProductAssocCreate) SetSequenceNum(i int) *ProductAssocCreate {
	pac.mutation.SetSequenceNum(i)
	return pac
}

// SetNillableSequenceNum sets the "sequence_num" field if the given value is not nil.
func (pac *ProductAssocCreate) SetNillableSequenceNum(i *int) *ProductAssocCreate {
	if i != nil {
		pac.SetSequenceNum(*i)
	}
	return pac
}

// SetReason sets the "reason" field.
func (pac *ProductAssocCreate) SetReason(s string) *ProductAssocCreate {
	pac.mutation.SetReason(s)
	return pac
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (pac *ProductAssocCreate) SetNillableReason(s *string) *ProductAssocCreate {
	if s != nil {
		pac.SetReason(*s)
	}
	return pac
}

// SetQuantity sets the "quantity" field.
func (pac *ProductAssocCreate) SetQuantity(f float64) *ProductAssocCreate {
	pac.mutation.SetQuantity(f)
	return pac
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (pac *ProductAssocCreate) SetNillableQuantity(f *float64) *ProductAssocCreate {
	if f != nil {
		pac.SetQuantity(*f)
	}
	return pac
}

// SetScrapFactor sets the "scrap_factor" field.
func (pac *ProductAssocCreate) SetScrapFactor(f float64) *ProductAssocCreate {
	pac.mutation.SetScrapFactor(f)
	return pac
}

// SetNillableScrapFactor sets the "scrap_factor" field if the given value is not nil.
func (pac *ProductAssocCreate) SetNillableScrapFactor(f *float64) *ProductAssocCreate {
	if f != nil {
		pac.SetScrapFactor(*f)
	}
	return pac
}

// SetInstruction sets the "instruction" field.
func (pac *ProductAssocCreate) SetInstruction(s string) *ProductAssocCreate {
	pac.mutation.SetInstruction(s)
	return pac
}

// SetNillableInstruction sets the "instruction" field if the given value is not nil.
func (pac *ProductAssocCreate) SetNillableInstruction(s *string) *ProductAssocCreate {
	if s != nil {
		pac.SetInstruction(*s)
	}
	return pac
}

// SetRoutingWorkEffortID sets the "routing_work_effort_id" field.
func (pac *ProductAssocCreate) SetRoutingWorkEffortID(i int) *ProductAssocCreate {
	pac.mutation.SetRoutingWorkEffortID(i)
	return pac
}

// SetNillableRoutingWorkEffortID sets the "routing_work_effort_id" field if the given value is not nil.
func (pac *ProductAssocCreate) SetNillableRoutingWorkEffortID(i *int) *ProductAssocCreate {
	if i != nil {
		pac.SetRoutingWorkEffortID(*i)
	}
	return pac
}

// SetRecurrenceInfoID sets the "recurrence_info_id" field.
func (pac *ProductAssocCreate) SetRecurrenceInfoID(i int) *ProductAssocCreate {
	pac.mutation.SetRecurrenceInfoID(i)
	return pac
}

// SetNillableRecurrenceInfoID sets the "recurrence_info_id" field if the given value is not nil.
func (pac *ProductAssocCreate) SetNillableRecurrenceInfoID(i *int) *ProductAssocCreate {
	if i != nil {
		pac.SetRecurrenceInfoID(*i)
	}
	return pac
}

// SetProductAssocTypeID sets the "product_assoc_type" edge to the ProductAssocType entity by ID.
func (pac *ProductAssocCreate) SetProductAssocTypeID(id int) *ProductAssocCreate {
	pac.mutation.SetProductAssocTypeID(id)
	return pac
}

// SetNillableProductAssocTypeID sets the "product_assoc_type" edge to the ProductAssocType entity by ID if the given value is not nil.
func (pac *ProductAssocCreate) SetNillableProductAssocTypeID(id *int) *ProductAssocCreate {
	if id != nil {
		pac = pac.SetProductAssocTypeID(*id)
	}
	return pac
}

// SetProductAssocType sets the "product_assoc_type" edge to the ProductAssocType entity.
func (pac *ProductAssocCreate) SetProductAssocType(p *ProductAssocType) *ProductAssocCreate {
	return pac.SetProductAssocTypeID(p.ID)
}

// SetMainProductID sets the "main_product" edge to the Product entity by ID.
func (pac *ProductAssocCreate) SetMainProductID(id int) *ProductAssocCreate {
	pac.mutation.SetMainProductID(id)
	return pac
}

// SetNillableMainProductID sets the "main_product" edge to the Product entity by ID if the given value is not nil.
func (pac *ProductAssocCreate) SetNillableMainProductID(id *int) *ProductAssocCreate {
	if id != nil {
		pac = pac.SetMainProductID(*id)
	}
	return pac
}

// SetMainProduct sets the "main_product" edge to the Product entity.
func (pac *ProductAssocCreate) SetMainProduct(p *Product) *ProductAssocCreate {
	return pac.SetMainProductID(p.ID)
}

// SetAssocProductID sets the "assoc_product" edge to the Product entity by ID.
func (pac *ProductAssocCreate) SetAssocProductID(id int) *ProductAssocCreate {
	pac.mutation.SetAssocProductID(id)
	return pac
}

// SetNillableAssocProductID sets the "assoc_product" edge to the Product entity by ID if the given value is not nil.
func (pac *ProductAssocCreate) SetNillableAssocProductID(id *int) *ProductAssocCreate {
	if id != nil {
		pac = pac.SetAssocProductID(*id)
	}
	return pac
}

// SetAssocProduct sets the "assoc_product" edge to the Product entity.
func (pac *ProductAssocCreate) SetAssocProduct(p *Product) *ProductAssocCreate {
	return pac.SetAssocProductID(p.ID)
}

// SetCustomMethodID sets the "custom_method" edge to the CustomMethod entity by ID.
func (pac *ProductAssocCreate) SetCustomMethodID(id int) *ProductAssocCreate {
	pac.mutation.SetCustomMethodID(id)
	return pac
}

// SetNillableCustomMethodID sets the "custom_method" edge to the CustomMethod entity by ID if the given value is not nil.
func (pac *ProductAssocCreate) SetNillableCustomMethodID(id *int) *ProductAssocCreate {
	if id != nil {
		pac = pac.SetCustomMethodID(*id)
	}
	return pac
}

// SetCustomMethod sets the "custom_method" edge to the CustomMethod entity.
func (pac *ProductAssocCreate) SetCustomMethod(c *CustomMethod) *ProductAssocCreate {
	return pac.SetCustomMethodID(c.ID)
}

// Mutation returns the ProductAssocMutation object of the builder.
func (pac *ProductAssocCreate) Mutation() *ProductAssocMutation {
	return pac.mutation
}

// Save creates the ProductAssoc in the database.
func (pac *ProductAssocCreate) Save(ctx context.Context) (*ProductAssoc, error) {
	var (
		err  error
		node *ProductAssoc
	)
	pac.defaults()
	if len(pac.hooks) == 0 {
		if err = pac.check(); err != nil {
			return nil, err
		}
		node, err = pac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProductAssocMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pac.check(); err != nil {
				return nil, err
			}
			pac.mutation = mutation
			if node, err = pac.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(pac.hooks) - 1; i >= 0; i-- {
			mut = pac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pac *ProductAssocCreate) SaveX(ctx context.Context) *ProductAssoc {
	v, err := pac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (pac *ProductAssocCreate) defaults() {
	if _, ok := pac.mutation.CreateTime(); !ok {
		v := productassoc.DefaultCreateTime()
		pac.mutation.SetCreateTime(v)
	}
	if _, ok := pac.mutation.UpdateTime(); !ok {
		v := productassoc.DefaultUpdateTime()
		pac.mutation.SetUpdateTime(v)
	}
	if _, ok := pac.mutation.FromDate(); !ok {
		v := productassoc.DefaultFromDate()
		pac.mutation.SetFromDate(v)
	}
	if _, ok := pac.mutation.ThruDate(); !ok {
		v := productassoc.DefaultThruDate()
		pac.mutation.SetThruDate(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pac *ProductAssocCreate) check() error {
	if _, ok := pac.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New("ent: missing required field \"create_time\"")}
	}
	if _, ok := pac.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New("ent: missing required field \"update_time\"")}
	}
	if _, ok := pac.mutation.FromDate(); !ok {
		return &ValidationError{Name: "from_date", err: errors.New("ent: missing required field \"from_date\"")}
	}
	return nil
}

func (pac *ProductAssocCreate) sqlSave(ctx context.Context) (*ProductAssoc, error) {
	_node, _spec := pac.createSpec()
	if err := sqlgraph.CreateNode(ctx, pac.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (pac *ProductAssocCreate) createSpec() (*ProductAssoc, *sqlgraph.CreateSpec) {
	var (
		_node = &ProductAssoc{config: pac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: productassoc.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: productassoc.FieldID,
			},
		}
	)
	if value, ok := pac.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productassoc.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := pac.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productassoc.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := pac.mutation.StringRef(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productassoc.FieldStringRef,
		})
		_node.StringRef = value
	}
	if value, ok := pac.mutation.FromDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productassoc.FieldFromDate,
		})
		_node.FromDate = value
	}
	if value, ok := pac.mutation.ThruDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productassoc.FieldThruDate,
		})
		_node.ThruDate = value
	}
	if value, ok := pac.mutation.SequenceNum(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productassoc.FieldSequenceNum,
		})
		_node.SequenceNum = value
	}
	if value, ok := pac.mutation.Reason(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productassoc.FieldReason,
		})
		_node.Reason = value
	}
	if value, ok := pac.mutation.Quantity(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: productassoc.FieldQuantity,
		})
		_node.Quantity = value
	}
	if value, ok := pac.mutation.ScrapFactor(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: productassoc.FieldScrapFactor,
		})
		_node.ScrapFactor = value
	}
	if value, ok := pac.mutation.Instruction(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productassoc.FieldInstruction,
		})
		_node.Instruction = value
	}
	if value, ok := pac.mutation.RoutingWorkEffortID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productassoc.FieldRoutingWorkEffortID,
		})
		_node.RoutingWorkEffortID = value
	}
	if value, ok := pac.mutation.RecurrenceInfoID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productassoc.FieldRecurrenceInfoID,
		})
		_node.RecurrenceInfoID = value
	}
	if nodes := pac.mutation.ProductAssocTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productassoc.ProductAssocTypeTable,
			Columns: []string{productassoc.ProductAssocTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productassoctype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.product_assoc_type_product_assocs = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pac.mutation.MainProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productassoc.MainProductTable,
			Columns: []string{productassoc.MainProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.product_main_product_assocs = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pac.mutation.AssocProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productassoc.AssocProductTable,
			Columns: []string{productassoc.AssocProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.product_assoc_product_assocs = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pac.mutation.CustomMethodIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productassoc.CustomMethodTable,
			Columns: []string{productassoc.CustomMethodColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: custommethod.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.custom_method_product_assocs = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ProductAssocCreateBulk is the builder for creating many ProductAssoc entities in bulk.
type ProductAssocCreateBulk struct {
	config
	builders []*ProductAssocCreate
}

// Save creates the ProductAssoc entities in the database.
func (pacb *ProductAssocCreateBulk) Save(ctx context.Context) ([]*ProductAssoc, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pacb.builders))
	nodes := make([]*ProductAssoc, len(pacb.builders))
	mutators := make([]Mutator, len(pacb.builders))
	for i := range pacb.builders {
		func(i int, root context.Context) {
			builder := pacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProductAssocMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pacb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pacb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pacb *ProductAssocCreateBulk) SaveX(ctx context.Context) []*ProductAssoc {
	v, err := pacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
