// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/custommethod"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/predicate"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/product"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productassoc"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productassoctype"
)

// ProductAssocUpdate is the builder for updating ProductAssoc entities.
type ProductAssocUpdate struct {
	config
	hooks    []Hook
	mutation *ProductAssocMutation
}

// Where adds a new predicate for the ProductAssocUpdate builder.
func (pau *ProductAssocUpdate) Where(ps ...predicate.ProductAssoc) *ProductAssocUpdate {
	pau.mutation.predicates = append(pau.mutation.predicates, ps...)
	return pau
}

// SetStringRef sets the "string_ref" field.
func (pau *ProductAssocUpdate) SetStringRef(s string) *ProductAssocUpdate {
	pau.mutation.SetStringRef(s)
	return pau
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (pau *ProductAssocUpdate) SetNillableStringRef(s *string) *ProductAssocUpdate {
	if s != nil {
		pau.SetStringRef(*s)
	}
	return pau
}

// ClearStringRef clears the value of the "string_ref" field.
func (pau *ProductAssocUpdate) ClearStringRef() *ProductAssocUpdate {
	pau.mutation.ClearStringRef()
	return pau
}

// SetFromDate sets the "from_date" field.
func (pau *ProductAssocUpdate) SetFromDate(t time.Time) *ProductAssocUpdate {
	pau.mutation.SetFromDate(t)
	return pau
}

// SetNillableFromDate sets the "from_date" field if the given value is not nil.
func (pau *ProductAssocUpdate) SetNillableFromDate(t *time.Time) *ProductAssocUpdate {
	if t != nil {
		pau.SetFromDate(*t)
	}
	return pau
}

// SetThruDate sets the "thru_date" field.
func (pau *ProductAssocUpdate) SetThruDate(t time.Time) *ProductAssocUpdate {
	pau.mutation.SetThruDate(t)
	return pau
}

// SetNillableThruDate sets the "thru_date" field if the given value is not nil.
func (pau *ProductAssocUpdate) SetNillableThruDate(t *time.Time) *ProductAssocUpdate {
	if t != nil {
		pau.SetThruDate(*t)
	}
	return pau
}

// ClearThruDate clears the value of the "thru_date" field.
func (pau *ProductAssocUpdate) ClearThruDate() *ProductAssocUpdate {
	pau.mutation.ClearThruDate()
	return pau
}

// SetSequenceNum sets the "sequence_num" field.
func (pau *ProductAssocUpdate) SetSequenceNum(i int) *ProductAssocUpdate {
	pau.mutation.ResetSequenceNum()
	pau.mutation.SetSequenceNum(i)
	return pau
}

// SetNillableSequenceNum sets the "sequence_num" field if the given value is not nil.
func (pau *ProductAssocUpdate) SetNillableSequenceNum(i *int) *ProductAssocUpdate {
	if i != nil {
		pau.SetSequenceNum(*i)
	}
	return pau
}

// AddSequenceNum adds i to the "sequence_num" field.
func (pau *ProductAssocUpdate) AddSequenceNum(i int) *ProductAssocUpdate {
	pau.mutation.AddSequenceNum(i)
	return pau
}

// ClearSequenceNum clears the value of the "sequence_num" field.
func (pau *ProductAssocUpdate) ClearSequenceNum() *ProductAssocUpdate {
	pau.mutation.ClearSequenceNum()
	return pau
}

// SetReason sets the "reason" field.
func (pau *ProductAssocUpdate) SetReason(s string) *ProductAssocUpdate {
	pau.mutation.SetReason(s)
	return pau
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (pau *ProductAssocUpdate) SetNillableReason(s *string) *ProductAssocUpdate {
	if s != nil {
		pau.SetReason(*s)
	}
	return pau
}

// ClearReason clears the value of the "reason" field.
func (pau *ProductAssocUpdate) ClearReason() *ProductAssocUpdate {
	pau.mutation.ClearReason()
	return pau
}

// SetQuantity sets the "quantity" field.
func (pau *ProductAssocUpdate) SetQuantity(f float64) *ProductAssocUpdate {
	pau.mutation.ResetQuantity()
	pau.mutation.SetQuantity(f)
	return pau
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (pau *ProductAssocUpdate) SetNillableQuantity(f *float64) *ProductAssocUpdate {
	if f != nil {
		pau.SetQuantity(*f)
	}
	return pau
}

// AddQuantity adds f to the "quantity" field.
func (pau *ProductAssocUpdate) AddQuantity(f float64) *ProductAssocUpdate {
	pau.mutation.AddQuantity(f)
	return pau
}

// ClearQuantity clears the value of the "quantity" field.
func (pau *ProductAssocUpdate) ClearQuantity() *ProductAssocUpdate {
	pau.mutation.ClearQuantity()
	return pau
}

// SetScrapFactor sets the "scrap_factor" field.
func (pau *ProductAssocUpdate) SetScrapFactor(f float64) *ProductAssocUpdate {
	pau.mutation.ResetScrapFactor()
	pau.mutation.SetScrapFactor(f)
	return pau
}

// SetNillableScrapFactor sets the "scrap_factor" field if the given value is not nil.
func (pau *ProductAssocUpdate) SetNillableScrapFactor(f *float64) *ProductAssocUpdate {
	if f != nil {
		pau.SetScrapFactor(*f)
	}
	return pau
}

// AddScrapFactor adds f to the "scrap_factor" field.
func (pau *ProductAssocUpdate) AddScrapFactor(f float64) *ProductAssocUpdate {
	pau.mutation.AddScrapFactor(f)
	return pau
}

// ClearScrapFactor clears the value of the "scrap_factor" field.
func (pau *ProductAssocUpdate) ClearScrapFactor() *ProductAssocUpdate {
	pau.mutation.ClearScrapFactor()
	return pau
}

// SetInstruction sets the "instruction" field.
func (pau *ProductAssocUpdate) SetInstruction(s string) *ProductAssocUpdate {
	pau.mutation.SetInstruction(s)
	return pau
}

// SetNillableInstruction sets the "instruction" field if the given value is not nil.
func (pau *ProductAssocUpdate) SetNillableInstruction(s *string) *ProductAssocUpdate {
	if s != nil {
		pau.SetInstruction(*s)
	}
	return pau
}

// ClearInstruction clears the value of the "instruction" field.
func (pau *ProductAssocUpdate) ClearInstruction() *ProductAssocUpdate {
	pau.mutation.ClearInstruction()
	return pau
}

// SetRoutingWorkEffortID sets the "routing_work_effort_id" field.
func (pau *ProductAssocUpdate) SetRoutingWorkEffortID(i int) *ProductAssocUpdate {
	pau.mutation.ResetRoutingWorkEffortID()
	pau.mutation.SetRoutingWorkEffortID(i)
	return pau
}

// SetNillableRoutingWorkEffortID sets the "routing_work_effort_id" field if the given value is not nil.
func (pau *ProductAssocUpdate) SetNillableRoutingWorkEffortID(i *int) *ProductAssocUpdate {
	if i != nil {
		pau.SetRoutingWorkEffortID(*i)
	}
	return pau
}

// AddRoutingWorkEffortID adds i to the "routing_work_effort_id" field.
func (pau *ProductAssocUpdate) AddRoutingWorkEffortID(i int) *ProductAssocUpdate {
	pau.mutation.AddRoutingWorkEffortID(i)
	return pau
}

// ClearRoutingWorkEffortID clears the value of the "routing_work_effort_id" field.
func (pau *ProductAssocUpdate) ClearRoutingWorkEffortID() *ProductAssocUpdate {
	pau.mutation.ClearRoutingWorkEffortID()
	return pau
}

// SetRecurrenceInfoID sets the "recurrence_info_id" field.
func (pau *ProductAssocUpdate) SetRecurrenceInfoID(i int) *ProductAssocUpdate {
	pau.mutation.ResetRecurrenceInfoID()
	pau.mutation.SetRecurrenceInfoID(i)
	return pau
}

// SetNillableRecurrenceInfoID sets the "recurrence_info_id" field if the given value is not nil.
func (pau *ProductAssocUpdate) SetNillableRecurrenceInfoID(i *int) *ProductAssocUpdate {
	if i != nil {
		pau.SetRecurrenceInfoID(*i)
	}
	return pau
}

// AddRecurrenceInfoID adds i to the "recurrence_info_id" field.
func (pau *ProductAssocUpdate) AddRecurrenceInfoID(i int) *ProductAssocUpdate {
	pau.mutation.AddRecurrenceInfoID(i)
	return pau
}

// ClearRecurrenceInfoID clears the value of the "recurrence_info_id" field.
func (pau *ProductAssocUpdate) ClearRecurrenceInfoID() *ProductAssocUpdate {
	pau.mutation.ClearRecurrenceInfoID()
	return pau
}

// SetProductAssocTypeID sets the "product_assoc_type" edge to the ProductAssocType entity by ID.
func (pau *ProductAssocUpdate) SetProductAssocTypeID(id int) *ProductAssocUpdate {
	pau.mutation.SetProductAssocTypeID(id)
	return pau
}

// SetNillableProductAssocTypeID sets the "product_assoc_type" edge to the ProductAssocType entity by ID if the given value is not nil.
func (pau *ProductAssocUpdate) SetNillableProductAssocTypeID(id *int) *ProductAssocUpdate {
	if id != nil {
		pau = pau.SetProductAssocTypeID(*id)
	}
	return pau
}

// SetProductAssocType sets the "product_assoc_type" edge to the ProductAssocType entity.
func (pau *ProductAssocUpdate) SetProductAssocType(p *ProductAssocType) *ProductAssocUpdate {
	return pau.SetProductAssocTypeID(p.ID)
}

// SetMainProductID sets the "main_product" edge to the Product entity by ID.
func (pau *ProductAssocUpdate) SetMainProductID(id int) *ProductAssocUpdate {
	pau.mutation.SetMainProductID(id)
	return pau
}

// SetNillableMainProductID sets the "main_product" edge to the Product entity by ID if the given value is not nil.
func (pau *ProductAssocUpdate) SetNillableMainProductID(id *int) *ProductAssocUpdate {
	if id != nil {
		pau = pau.SetMainProductID(*id)
	}
	return pau
}

// SetMainProduct sets the "main_product" edge to the Product entity.
func (pau *ProductAssocUpdate) SetMainProduct(p *Product) *ProductAssocUpdate {
	return pau.SetMainProductID(p.ID)
}

// SetAssocProductID sets the "assoc_product" edge to the Product entity by ID.
func (pau *ProductAssocUpdate) SetAssocProductID(id int) *ProductAssocUpdate {
	pau.mutation.SetAssocProductID(id)
	return pau
}

// SetNillableAssocProductID sets the "assoc_product" edge to the Product entity by ID if the given value is not nil.
func (pau *ProductAssocUpdate) SetNillableAssocProductID(id *int) *ProductAssocUpdate {
	if id != nil {
		pau = pau.SetAssocProductID(*id)
	}
	return pau
}

// SetAssocProduct sets the "assoc_product" edge to the Product entity.
func (pau *ProductAssocUpdate) SetAssocProduct(p *Product) *ProductAssocUpdate {
	return pau.SetAssocProductID(p.ID)
}

// SetCustomMethodID sets the "custom_method" edge to the CustomMethod entity by ID.
func (pau *ProductAssocUpdate) SetCustomMethodID(id int) *ProductAssocUpdate {
	pau.mutation.SetCustomMethodID(id)
	return pau
}

// SetNillableCustomMethodID sets the "custom_method" edge to the CustomMethod entity by ID if the given value is not nil.
func (pau *ProductAssocUpdate) SetNillableCustomMethodID(id *int) *ProductAssocUpdate {
	if id != nil {
		pau = pau.SetCustomMethodID(*id)
	}
	return pau
}

// SetCustomMethod sets the "custom_method" edge to the CustomMethod entity.
func (pau *ProductAssocUpdate) SetCustomMethod(c *CustomMethod) *ProductAssocUpdate {
	return pau.SetCustomMethodID(c.ID)
}

// Mutation returns the ProductAssocMutation object of the builder.
func (pau *ProductAssocUpdate) Mutation() *ProductAssocMutation {
	return pau.mutation
}

// ClearProductAssocType clears the "product_assoc_type" edge to the ProductAssocType entity.
func (pau *ProductAssocUpdate) ClearProductAssocType() *ProductAssocUpdate {
	pau.mutation.ClearProductAssocType()
	return pau
}

// ClearMainProduct clears the "main_product" edge to the Product entity.
func (pau *ProductAssocUpdate) ClearMainProduct() *ProductAssocUpdate {
	pau.mutation.ClearMainProduct()
	return pau
}

// ClearAssocProduct clears the "assoc_product" edge to the Product entity.
func (pau *ProductAssocUpdate) ClearAssocProduct() *ProductAssocUpdate {
	pau.mutation.ClearAssocProduct()
	return pau
}

// ClearCustomMethod clears the "custom_method" edge to the CustomMethod entity.
func (pau *ProductAssocUpdate) ClearCustomMethod() *ProductAssocUpdate {
	pau.mutation.ClearCustomMethod()
	return pau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pau *ProductAssocUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	pau.defaults()
	if len(pau.hooks) == 0 {
		affected, err = pau.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProductAssocMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pau.mutation = mutation
			affected, err = pau.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pau.hooks) - 1; i >= 0; i-- {
			mut = pau.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pau.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pau *ProductAssocUpdate) SaveX(ctx context.Context) int {
	affected, err := pau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pau *ProductAssocUpdate) Exec(ctx context.Context) error {
	_, err := pau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pau *ProductAssocUpdate) ExecX(ctx context.Context) {
	if err := pau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pau *ProductAssocUpdate) defaults() {
	if _, ok := pau.mutation.UpdateTime(); !ok {
		v := productassoc.UpdateDefaultUpdateTime()
		pau.mutation.SetUpdateTime(v)
	}
}

func (pau *ProductAssocUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   productassoc.Table,
			Columns: productassoc.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: productassoc.FieldID,
			},
		},
	}
	if ps := pau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pau.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productassoc.FieldUpdateTime,
		})
	}
	if value, ok := pau.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productassoc.FieldStringRef,
		})
	}
	if pau.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productassoc.FieldStringRef,
		})
	}
	if value, ok := pau.mutation.FromDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productassoc.FieldFromDate,
		})
	}
	if value, ok := pau.mutation.ThruDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productassoc.FieldThruDate,
		})
	}
	if pau.mutation.ThruDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: productassoc.FieldThruDate,
		})
	}
	if value, ok := pau.mutation.SequenceNum(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productassoc.FieldSequenceNum,
		})
	}
	if value, ok := pau.mutation.AddedSequenceNum(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productassoc.FieldSequenceNum,
		})
	}
	if pau.mutation.SequenceNumCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: productassoc.FieldSequenceNum,
		})
	}
	if value, ok := pau.mutation.Reason(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productassoc.FieldReason,
		})
	}
	if pau.mutation.ReasonCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productassoc.FieldReason,
		})
	}
	if value, ok := pau.mutation.Quantity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: productassoc.FieldQuantity,
		})
	}
	if value, ok := pau.mutation.AddedQuantity(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: productassoc.FieldQuantity,
		})
	}
	if pau.mutation.QuantityCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: productassoc.FieldQuantity,
		})
	}
	if value, ok := pau.mutation.ScrapFactor(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: productassoc.FieldScrapFactor,
		})
	}
	if value, ok := pau.mutation.AddedScrapFactor(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: productassoc.FieldScrapFactor,
		})
	}
	if pau.mutation.ScrapFactorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: productassoc.FieldScrapFactor,
		})
	}
	if value, ok := pau.mutation.Instruction(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productassoc.FieldInstruction,
		})
	}
	if pau.mutation.InstructionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productassoc.FieldInstruction,
		})
	}
	if value, ok := pau.mutation.RoutingWorkEffortID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productassoc.FieldRoutingWorkEffortID,
		})
	}
	if value, ok := pau.mutation.AddedRoutingWorkEffortID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productassoc.FieldRoutingWorkEffortID,
		})
	}
	if pau.mutation.RoutingWorkEffortIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: productassoc.FieldRoutingWorkEffortID,
		})
	}
	if value, ok := pau.mutation.RecurrenceInfoID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productassoc.FieldRecurrenceInfoID,
		})
	}
	if value, ok := pau.mutation.AddedRecurrenceInfoID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productassoc.FieldRecurrenceInfoID,
		})
	}
	if pau.mutation.RecurrenceInfoIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: productassoc.FieldRecurrenceInfoID,
		})
	}
	if pau.mutation.ProductAssocTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productassoc.ProductAssocTypeTable,
			Columns: []string{productassoc.ProductAssocTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productassoctype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pau.mutation.ProductAssocTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productassoc.ProductAssocTypeTable,
			Columns: []string{productassoc.ProductAssocTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productassoctype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pau.mutation.MainProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productassoc.MainProductTable,
			Columns: []string{productassoc.MainProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pau.mutation.MainProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productassoc.MainProductTable,
			Columns: []string{productassoc.MainProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pau.mutation.AssocProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productassoc.AssocProductTable,
			Columns: []string{productassoc.AssocProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pau.mutation.AssocProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productassoc.AssocProductTable,
			Columns: []string{productassoc.AssocProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pau.mutation.CustomMethodCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productassoc.CustomMethodTable,
			Columns: []string{productassoc.CustomMethodColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: custommethod.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pau.mutation.CustomMethodIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productassoc.CustomMethodTable,
			Columns: []string{productassoc.CustomMethodColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: custommethod.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productassoc.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ProductAssocUpdateOne is the builder for updating a single ProductAssoc entity.
type ProductAssocUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProductAssocMutation
}

// SetStringRef sets the "string_ref" field.
func (pauo *ProductAssocUpdateOne) SetStringRef(s string) *ProductAssocUpdateOne {
	pauo.mutation.SetStringRef(s)
	return pauo
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (pauo *ProductAssocUpdateOne) SetNillableStringRef(s *string) *ProductAssocUpdateOne {
	if s != nil {
		pauo.SetStringRef(*s)
	}
	return pauo
}

// ClearStringRef clears the value of the "string_ref" field.
func (pauo *ProductAssocUpdateOne) ClearStringRef() *ProductAssocUpdateOne {
	pauo.mutation.ClearStringRef()
	return pauo
}

// SetFromDate sets the "from_date" field.
func (pauo *ProductAssocUpdateOne) SetFromDate(t time.Time) *ProductAssocUpdateOne {
	pauo.mutation.SetFromDate(t)
	return pauo
}

// SetNillableFromDate sets the "from_date" field if the given value is not nil.
func (pauo *ProductAssocUpdateOne) SetNillableFromDate(t *time.Time) *ProductAssocUpdateOne {
	if t != nil {
		pauo.SetFromDate(*t)
	}
	return pauo
}

// SetThruDate sets the "thru_date" field.
func (pauo *ProductAssocUpdateOne) SetThruDate(t time.Time) *ProductAssocUpdateOne {
	pauo.mutation.SetThruDate(t)
	return pauo
}

// SetNillableThruDate sets the "thru_date" field if the given value is not nil.
func (pauo *ProductAssocUpdateOne) SetNillableThruDate(t *time.Time) *ProductAssocUpdateOne {
	if t != nil {
		pauo.SetThruDate(*t)
	}
	return pauo
}

// ClearThruDate clears the value of the "thru_date" field.
func (pauo *ProductAssocUpdateOne) ClearThruDate() *ProductAssocUpdateOne {
	pauo.mutation.ClearThruDate()
	return pauo
}

// SetSequenceNum sets the "sequence_num" field.
func (pauo *ProductAssocUpdateOne) SetSequenceNum(i int) *ProductAssocUpdateOne {
	pauo.mutation.ResetSequenceNum()
	pauo.mutation.SetSequenceNum(i)
	return pauo
}

// SetNillableSequenceNum sets the "sequence_num" field if the given value is not nil.
func (pauo *ProductAssocUpdateOne) SetNillableSequenceNum(i *int) *ProductAssocUpdateOne {
	if i != nil {
		pauo.SetSequenceNum(*i)
	}
	return pauo
}

// AddSequenceNum adds i to the "sequence_num" field.
func (pauo *ProductAssocUpdateOne) AddSequenceNum(i int) *ProductAssocUpdateOne {
	pauo.mutation.AddSequenceNum(i)
	return pauo
}

// ClearSequenceNum clears the value of the "sequence_num" field.
func (pauo *ProductAssocUpdateOne) ClearSequenceNum() *ProductAssocUpdateOne {
	pauo.mutation.ClearSequenceNum()
	return pauo
}

// SetReason sets the "reason" field.
func (pauo *ProductAssocUpdateOne) SetReason(s string) *ProductAssocUpdateOne {
	pauo.mutation.SetReason(s)
	return pauo
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (pauo *ProductAssocUpdateOne) SetNillableReason(s *string) *ProductAssocUpdateOne {
	if s != nil {
		pauo.SetReason(*s)
	}
	return pauo
}

// ClearReason clears the value of the "reason" field.
func (pauo *ProductAssocUpdateOne) ClearReason() *ProductAssocUpdateOne {
	pauo.mutation.ClearReason()
	return pauo
}

// SetQuantity sets the "quantity" field.
func (pauo *ProductAssocUpdateOne) SetQuantity(f float64) *ProductAssocUpdateOne {
	pauo.mutation.ResetQuantity()
	pauo.mutation.SetQuantity(f)
	return pauo
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (pauo *ProductAssocUpdateOne) SetNillableQuantity(f *float64) *ProductAssocUpdateOne {
	if f != nil {
		pauo.SetQuantity(*f)
	}
	return pauo
}

// AddQuantity adds f to the "quantity" field.
func (pauo *ProductAssocUpdateOne) AddQuantity(f float64) *ProductAssocUpdateOne {
	pauo.mutation.AddQuantity(f)
	return pauo
}

// ClearQuantity clears the value of the "quantity" field.
func (pauo *ProductAssocUpdateOne) ClearQuantity() *ProductAssocUpdateOne {
	pauo.mutation.ClearQuantity()
	return pauo
}

// SetScrapFactor sets the "scrap_factor" field.
func (pauo *ProductAssocUpdateOne) SetScrapFactor(f float64) *ProductAssocUpdateOne {
	pauo.mutation.ResetScrapFactor()
	pauo.mutation.SetScrapFactor(f)
	return pauo
}

// SetNillableScrapFactor sets the "scrap_factor" field if the given value is not nil.
func (pauo *ProductAssocUpdateOne) SetNillableScrapFactor(f *float64) *ProductAssocUpdateOne {
	if f != nil {
		pauo.SetScrapFactor(*f)
	}
	return pauo
}

// AddScrapFactor adds f to the "scrap_factor" field.
func (pauo *ProductAssocUpdateOne) AddScrapFactor(f float64) *ProductAssocUpdateOne {
	pauo.mutation.AddScrapFactor(f)
	return pauo
}

// ClearScrapFactor clears the value of the "scrap_factor" field.
func (pauo *ProductAssocUpdateOne) ClearScrapFactor() *ProductAssocUpdateOne {
	pauo.mutation.ClearScrapFactor()
	return pauo
}

// SetInstruction sets the "instruction" field.
func (pauo *ProductAssocUpdateOne) SetInstruction(s string) *ProductAssocUpdateOne {
	pauo.mutation.SetInstruction(s)
	return pauo
}

// SetNillableInstruction sets the "instruction" field if the given value is not nil.
func (pauo *ProductAssocUpdateOne) SetNillableInstruction(s *string) *ProductAssocUpdateOne {
	if s != nil {
		pauo.SetInstruction(*s)
	}
	return pauo
}

// ClearInstruction clears the value of the "instruction" field.
func (pauo *ProductAssocUpdateOne) ClearInstruction() *ProductAssocUpdateOne {
	pauo.mutation.ClearInstruction()
	return pauo
}

// SetRoutingWorkEffortID sets the "routing_work_effort_id" field.
func (pauo *ProductAssocUpdateOne) SetRoutingWorkEffortID(i int) *ProductAssocUpdateOne {
	pauo.mutation.ResetRoutingWorkEffortID()
	pauo.mutation.SetRoutingWorkEffortID(i)
	return pauo
}

// SetNillableRoutingWorkEffortID sets the "routing_work_effort_id" field if the given value is not nil.
func (pauo *ProductAssocUpdateOne) SetNillableRoutingWorkEffortID(i *int) *ProductAssocUpdateOne {
	if i != nil {
		pauo.SetRoutingWorkEffortID(*i)
	}
	return pauo
}

// AddRoutingWorkEffortID adds i to the "routing_work_effort_id" field.
func (pauo *ProductAssocUpdateOne) AddRoutingWorkEffortID(i int) *ProductAssocUpdateOne {
	pauo.mutation.AddRoutingWorkEffortID(i)
	return pauo
}

// ClearRoutingWorkEffortID clears the value of the "routing_work_effort_id" field.
func (pauo *ProductAssocUpdateOne) ClearRoutingWorkEffortID() *ProductAssocUpdateOne {
	pauo.mutation.ClearRoutingWorkEffortID()
	return pauo
}

// SetRecurrenceInfoID sets the "recurrence_info_id" field.
func (pauo *ProductAssocUpdateOne) SetRecurrenceInfoID(i int) *ProductAssocUpdateOne {
	pauo.mutation.ResetRecurrenceInfoID()
	pauo.mutation.SetRecurrenceInfoID(i)
	return pauo
}

// SetNillableRecurrenceInfoID sets the "recurrence_info_id" field if the given value is not nil.
func (pauo *ProductAssocUpdateOne) SetNillableRecurrenceInfoID(i *int) *ProductAssocUpdateOne {
	if i != nil {
		pauo.SetRecurrenceInfoID(*i)
	}
	return pauo
}

// AddRecurrenceInfoID adds i to the "recurrence_info_id" field.
func (pauo *ProductAssocUpdateOne) AddRecurrenceInfoID(i int) *ProductAssocUpdateOne {
	pauo.mutation.AddRecurrenceInfoID(i)
	return pauo
}

// ClearRecurrenceInfoID clears the value of the "recurrence_info_id" field.
func (pauo *ProductAssocUpdateOne) ClearRecurrenceInfoID() *ProductAssocUpdateOne {
	pauo.mutation.ClearRecurrenceInfoID()
	return pauo
}

// SetProductAssocTypeID sets the "product_assoc_type" edge to the ProductAssocType entity by ID.
func (pauo *ProductAssocUpdateOne) SetProductAssocTypeID(id int) *ProductAssocUpdateOne {
	pauo.mutation.SetProductAssocTypeID(id)
	return pauo
}

// SetNillableProductAssocTypeID sets the "product_assoc_type" edge to the ProductAssocType entity by ID if the given value is not nil.
func (pauo *ProductAssocUpdateOne) SetNillableProductAssocTypeID(id *int) *ProductAssocUpdateOne {
	if id != nil {
		pauo = pauo.SetProductAssocTypeID(*id)
	}
	return pauo
}

// SetProductAssocType sets the "product_assoc_type" edge to the ProductAssocType entity.
func (pauo *ProductAssocUpdateOne) SetProductAssocType(p *ProductAssocType) *ProductAssocUpdateOne {
	return pauo.SetProductAssocTypeID(p.ID)
}

// SetMainProductID sets the "main_product" edge to the Product entity by ID.
func (pauo *ProductAssocUpdateOne) SetMainProductID(id int) *ProductAssocUpdateOne {
	pauo.mutation.SetMainProductID(id)
	return pauo
}

// SetNillableMainProductID sets the "main_product" edge to the Product entity by ID if the given value is not nil.
func (pauo *ProductAssocUpdateOne) SetNillableMainProductID(id *int) *ProductAssocUpdateOne {
	if id != nil {
		pauo = pauo.SetMainProductID(*id)
	}
	return pauo
}

// SetMainProduct sets the "main_product" edge to the Product entity.
func (pauo *ProductAssocUpdateOne) SetMainProduct(p *Product) *ProductAssocUpdateOne {
	return pauo.SetMainProductID(p.ID)
}

// SetAssocProductID sets the "assoc_product" edge to the Product entity by ID.
func (pauo *ProductAssocUpdateOne) SetAssocProductID(id int) *ProductAssocUpdateOne {
	pauo.mutation.SetAssocProductID(id)
	return pauo
}

// SetNillableAssocProductID sets the "assoc_product" edge to the Product entity by ID if the given value is not nil.
func (pauo *ProductAssocUpdateOne) SetNillableAssocProductID(id *int) *ProductAssocUpdateOne {
	if id != nil {
		pauo = pauo.SetAssocProductID(*id)
	}
	return pauo
}

// SetAssocProduct sets the "assoc_product" edge to the Product entity.
func (pauo *ProductAssocUpdateOne) SetAssocProduct(p *Product) *ProductAssocUpdateOne {
	return pauo.SetAssocProductID(p.ID)
}

// SetCustomMethodID sets the "custom_method" edge to the CustomMethod entity by ID.
func (pauo *ProductAssocUpdateOne) SetCustomMethodID(id int) *ProductAssocUpdateOne {
	pauo.mutation.SetCustomMethodID(id)
	return pauo
}

// SetNillableCustomMethodID sets the "custom_method" edge to the CustomMethod entity by ID if the given value is not nil.
func (pauo *ProductAssocUpdateOne) SetNillableCustomMethodID(id *int) *ProductAssocUpdateOne {
	if id != nil {
		pauo = pauo.SetCustomMethodID(*id)
	}
	return pauo
}

// SetCustomMethod sets the "custom_method" edge to the CustomMethod entity.
func (pauo *ProductAssocUpdateOne) SetCustomMethod(c *CustomMethod) *ProductAssocUpdateOne {
	return pauo.SetCustomMethodID(c.ID)
}

// Mutation returns the ProductAssocMutation object of the builder.
func (pauo *ProductAssocUpdateOne) Mutation() *ProductAssocMutation {
	return pauo.mutation
}

// ClearProductAssocType clears the "product_assoc_type" edge to the ProductAssocType entity.
func (pauo *ProductAssocUpdateOne) ClearProductAssocType() *ProductAssocUpdateOne {
	pauo.mutation.ClearProductAssocType()
	return pauo
}

// ClearMainProduct clears the "main_product" edge to the Product entity.
func (pauo *ProductAssocUpdateOne) ClearMainProduct() *ProductAssocUpdateOne {
	pauo.mutation.ClearMainProduct()
	return pauo
}

// ClearAssocProduct clears the "assoc_product" edge to the Product entity.
func (pauo *ProductAssocUpdateOne) ClearAssocProduct() *ProductAssocUpdateOne {
	pauo.mutation.ClearAssocProduct()
	return pauo
}

// ClearCustomMethod clears the "custom_method" edge to the CustomMethod entity.
func (pauo *ProductAssocUpdateOne) ClearCustomMethod() *ProductAssocUpdateOne {
	pauo.mutation.ClearCustomMethod()
	return pauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pauo *ProductAssocUpdateOne) Select(field string, fields ...string) *ProductAssocUpdateOne {
	pauo.fields = append([]string{field}, fields...)
	return pauo
}

// Save executes the query and returns the updated ProductAssoc entity.
func (pauo *ProductAssocUpdateOne) Save(ctx context.Context) (*ProductAssoc, error) {
	var (
		err  error
		node *ProductAssoc
	)
	pauo.defaults()
	if len(pauo.hooks) == 0 {
		node, err = pauo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProductAssocMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pauo.mutation = mutation
			node, err = pauo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pauo.hooks) - 1; i >= 0; i-- {
			mut = pauo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pauo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (pauo *ProductAssocUpdateOne) SaveX(ctx context.Context) *ProductAssoc {
	node, err := pauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pauo *ProductAssocUpdateOne) Exec(ctx context.Context) error {
	_, err := pauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pauo *ProductAssocUpdateOne) ExecX(ctx context.Context) {
	if err := pauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pauo *ProductAssocUpdateOne) defaults() {
	if _, ok := pauo.mutation.UpdateTime(); !ok {
		v := productassoc.UpdateDefaultUpdateTime()
		pauo.mutation.SetUpdateTime(v)
	}
}

func (pauo *ProductAssocUpdateOne) sqlSave(ctx context.Context) (_node *ProductAssoc, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   productassoc.Table,
			Columns: productassoc.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: productassoc.FieldID,
			},
		},
	}
	id, ok := pauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ProductAssoc.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := pauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, productassoc.FieldID)
		for _, f := range fields {
			if !productassoc.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != productassoc.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pauo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productassoc.FieldUpdateTime,
		})
	}
	if value, ok := pauo.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productassoc.FieldStringRef,
		})
	}
	if pauo.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productassoc.FieldStringRef,
		})
	}
	if value, ok := pauo.mutation.FromDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productassoc.FieldFromDate,
		})
	}
	if value, ok := pauo.mutation.ThruDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productassoc.FieldThruDate,
		})
	}
	if pauo.mutation.ThruDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: productassoc.FieldThruDate,
		})
	}
	if value, ok := pauo.mutation.SequenceNum(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productassoc.FieldSequenceNum,
		})
	}
	if value, ok := pauo.mutation.AddedSequenceNum(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productassoc.FieldSequenceNum,
		})
	}
	if pauo.mutation.SequenceNumCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: productassoc.FieldSequenceNum,
		})
	}
	if value, ok := pauo.mutation.Reason(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productassoc.FieldReason,
		})
	}
	if pauo.mutation.ReasonCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productassoc.FieldReason,
		})
	}
	if value, ok := pauo.mutation.Quantity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: productassoc.FieldQuantity,
		})
	}
	if value, ok := pauo.mutation.AddedQuantity(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: productassoc.FieldQuantity,
		})
	}
	if pauo.mutation.QuantityCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: productassoc.FieldQuantity,
		})
	}
	if value, ok := pauo.mutation.ScrapFactor(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: productassoc.FieldScrapFactor,
		})
	}
	if value, ok := pauo.mutation.AddedScrapFactor(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: productassoc.FieldScrapFactor,
		})
	}
	if pauo.mutation.ScrapFactorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: productassoc.FieldScrapFactor,
		})
	}
	if value, ok := pauo.mutation.Instruction(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productassoc.FieldInstruction,
		})
	}
	if pauo.mutation.InstructionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productassoc.FieldInstruction,
		})
	}
	if value, ok := pauo.mutation.RoutingWorkEffortID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productassoc.FieldRoutingWorkEffortID,
		})
	}
	if value, ok := pauo.mutation.AddedRoutingWorkEffortID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productassoc.FieldRoutingWorkEffortID,
		})
	}
	if pauo.mutation.RoutingWorkEffortIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: productassoc.FieldRoutingWorkEffortID,
		})
	}
	if value, ok := pauo.mutation.RecurrenceInfoID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productassoc.FieldRecurrenceInfoID,
		})
	}
	if value, ok := pauo.mutation.AddedRecurrenceInfoID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productassoc.FieldRecurrenceInfoID,
		})
	}
	if pauo.mutation.RecurrenceInfoIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: productassoc.FieldRecurrenceInfoID,
		})
	}
	if pauo.mutation.ProductAssocTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productassoc.ProductAssocTypeTable,
			Columns: []string{productassoc.ProductAssocTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productassoctype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pauo.mutation.ProductAssocTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productassoc.ProductAssocTypeTable,
			Columns: []string{productassoc.ProductAssocTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productassoctype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pauo.mutation.MainProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productassoc.MainProductTable,
			Columns: []string{productassoc.MainProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pauo.mutation.MainProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productassoc.MainProductTable,
			Columns: []string{productassoc.MainProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pauo.mutation.AssocProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productassoc.AssocProductTable,
			Columns: []string{productassoc.AssocProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pauo.mutation.AssocProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productassoc.AssocProductTable,
			Columns: []string{productassoc.AssocProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pauo.mutation.CustomMethodCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productassoc.CustomMethodTable,
			Columns: []string{productassoc.CustomMethodColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: custommethod.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pauo.mutation.CustomMethodIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productassoc.CustomMethodTable,
			Columns: []string{productassoc.CustomMethodColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: custommethod.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProductAssoc{config: pauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productassoc.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
