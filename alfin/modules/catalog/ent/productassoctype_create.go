// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productassoc"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productassoctype"
)

// ProductAssocTypeCreate is the builder for creating a ProductAssocType entity.
type ProductAssocTypeCreate struct {
	config
	mutation *ProductAssocTypeMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (patc *ProductAssocTypeCreate) SetCreateTime(t time.Time) *ProductAssocTypeCreate {
	patc.mutation.SetCreateTime(t)
	return patc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (patc *ProductAssocTypeCreate) SetNillableCreateTime(t *time.Time) *ProductAssocTypeCreate {
	if t != nil {
		patc.SetCreateTime(*t)
	}
	return patc
}

// SetUpdateTime sets the "update_time" field.
func (patc *ProductAssocTypeCreate) SetUpdateTime(t time.Time) *ProductAssocTypeCreate {
	patc.mutation.SetUpdateTime(t)
	return patc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (patc *ProductAssocTypeCreate) SetNillableUpdateTime(t *time.Time) *ProductAssocTypeCreate {
	if t != nil {
		patc.SetUpdateTime(*t)
	}
	return patc
}

// SetStringRef sets the "string_ref" field.
func (patc *ProductAssocTypeCreate) SetStringRef(s string) *ProductAssocTypeCreate {
	patc.mutation.SetStringRef(s)
	return patc
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (patc *ProductAssocTypeCreate) SetNillableStringRef(s *string) *ProductAssocTypeCreate {
	if s != nil {
		patc.SetStringRef(*s)
	}
	return patc
}

// SetHasTable sets the "has_table" field.
func (patc *ProductAssocTypeCreate) SetHasTable(pt productassoctype.HasTable) *ProductAssocTypeCreate {
	patc.mutation.SetHasTable(pt)
	return patc
}

// SetNillableHasTable sets the "has_table" field if the given value is not nil.
func (patc *ProductAssocTypeCreate) SetNillableHasTable(pt *productassoctype.HasTable) *ProductAssocTypeCreate {
	if pt != nil {
		patc.SetHasTable(*pt)
	}
	return patc
}

// SetDescription sets the "description" field.
func (patc *ProductAssocTypeCreate) SetDescription(s string) *ProductAssocTypeCreate {
	patc.mutation.SetDescription(s)
	return patc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (patc *ProductAssocTypeCreate) SetNillableDescription(s *string) *ProductAssocTypeCreate {
	if s != nil {
		patc.SetDescription(*s)
	}
	return patc
}

// SetParentID sets the "parent" edge to the ProductAssocType entity by ID.
func (patc *ProductAssocTypeCreate) SetParentID(id int) *ProductAssocTypeCreate {
	patc.mutation.SetParentID(id)
	return patc
}

// SetNillableParentID sets the "parent" edge to the ProductAssocType entity by ID if the given value is not nil.
func (patc *ProductAssocTypeCreate) SetNillableParentID(id *int) *ProductAssocTypeCreate {
	if id != nil {
		patc = patc.SetParentID(*id)
	}
	return patc
}

// SetParent sets the "parent" edge to the ProductAssocType entity.
func (patc *ProductAssocTypeCreate) SetParent(p *ProductAssocType) *ProductAssocTypeCreate {
	return patc.SetParentID(p.ID)
}

// AddChildIDs adds the "children" edge to the ProductAssocType entity by IDs.
func (patc *ProductAssocTypeCreate) AddChildIDs(ids ...int) *ProductAssocTypeCreate {
	patc.mutation.AddChildIDs(ids...)
	return patc
}

// AddChildren adds the "children" edges to the ProductAssocType entity.
func (patc *ProductAssocTypeCreate) AddChildren(p ...*ProductAssocType) *ProductAssocTypeCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return patc.AddChildIDs(ids...)
}

// AddProductAssocIDs adds the "product_assocs" edge to the ProductAssoc entity by IDs.
func (patc *ProductAssocTypeCreate) AddProductAssocIDs(ids ...int) *ProductAssocTypeCreate {
	patc.mutation.AddProductAssocIDs(ids...)
	return patc
}

// AddProductAssocs adds the "product_assocs" edges to the ProductAssoc entity.
func (patc *ProductAssocTypeCreate) AddProductAssocs(p ...*ProductAssoc) *ProductAssocTypeCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return patc.AddProductAssocIDs(ids...)
}

// AddChildProductAssocTypeIDs adds the "child_product_assoc_types" edge to the ProductAssocType entity by IDs.
func (patc *ProductAssocTypeCreate) AddChildProductAssocTypeIDs(ids ...int) *ProductAssocTypeCreate {
	patc.mutation.AddChildProductAssocTypeIDs(ids...)
	return patc
}

// AddChildProductAssocTypes adds the "child_product_assoc_types" edges to the ProductAssocType entity.
func (patc *ProductAssocTypeCreate) AddChildProductAssocTypes(p ...*ProductAssocType) *ProductAssocTypeCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return patc.AddChildProductAssocTypeIDs(ids...)
}

// Mutation returns the ProductAssocTypeMutation object of the builder.
func (patc *ProductAssocTypeCreate) Mutation() *ProductAssocTypeMutation {
	return patc.mutation
}

// Save creates the ProductAssocType in the database.
func (patc *ProductAssocTypeCreate) Save(ctx context.Context) (*ProductAssocType, error) {
	var (
		err  error
		node *ProductAssocType
	)
	patc.defaults()
	if len(patc.hooks) == 0 {
		if err = patc.check(); err != nil {
			return nil, err
		}
		node, err = patc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProductAssocTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = patc.check(); err != nil {
				return nil, err
			}
			patc.mutation = mutation
			if node, err = patc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(patc.hooks) - 1; i >= 0; i-- {
			mut = patc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, patc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (patc *ProductAssocTypeCreate) SaveX(ctx context.Context) *ProductAssocType {
	v, err := patc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (patc *ProductAssocTypeCreate) defaults() {
	if _, ok := patc.mutation.CreateTime(); !ok {
		v := productassoctype.DefaultCreateTime()
		patc.mutation.SetCreateTime(v)
	}
	if _, ok := patc.mutation.UpdateTime(); !ok {
		v := productassoctype.DefaultUpdateTime()
		patc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (patc *ProductAssocTypeCreate) check() error {
	if _, ok := patc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New("ent: missing required field \"create_time\"")}
	}
	if _, ok := patc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New("ent: missing required field \"update_time\"")}
	}
	if v, ok := patc.mutation.HasTable(); ok {
		if err := productassoctype.HasTableValidator(v); err != nil {
			return &ValidationError{Name: "has_table", err: fmt.Errorf("ent: validator failed for field \"has_table\": %w", err)}
		}
	}
	return nil
}

func (patc *ProductAssocTypeCreate) sqlSave(ctx context.Context) (*ProductAssocType, error) {
	_node, _spec := patc.createSpec()
	if err := sqlgraph.CreateNode(ctx, patc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (patc *ProductAssocTypeCreate) createSpec() (*ProductAssocType, *sqlgraph.CreateSpec) {
	var (
		_node = &ProductAssocType{config: patc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: productassoctype.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: productassoctype.FieldID,
			},
		}
	)
	if value, ok := patc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productassoctype.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := patc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productassoctype.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := patc.mutation.StringRef(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productassoctype.FieldStringRef,
		})
		_node.StringRef = value
	}
	if value, ok := patc.mutation.HasTable(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productassoctype.FieldHasTable,
		})
		_node.HasTable = value
	}
	if value, ok := patc.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productassoctype.FieldDescription,
		})
		_node.Description = value
	}
	if nodes := patc.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productassoctype.ParentTable,
			Columns: []string{productassoctype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productassoctype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.product_assoc_type_children = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := patc.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productassoctype.ChildrenTable,
			Columns: []string{productassoctype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productassoctype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := patc.mutation.ProductAssocsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productassoctype.ProductAssocsTable,
			Columns: []string{productassoctype.ProductAssocsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productassoc.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := patc.mutation.ChildProductAssocTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   productassoctype.ChildProductAssocTypesTable,
			Columns: productassoctype.ChildProductAssocTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productassoctype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ProductAssocTypeCreateBulk is the builder for creating many ProductAssocType entities in bulk.
type ProductAssocTypeCreateBulk struct {
	config
	builders []*ProductAssocTypeCreate
}

// Save creates the ProductAssocType entities in the database.
func (patcb *ProductAssocTypeCreateBulk) Save(ctx context.Context) ([]*ProductAssocType, error) {
	specs := make([]*sqlgraph.CreateSpec, len(patcb.builders))
	nodes := make([]*ProductAssocType, len(patcb.builders))
	mutators := make([]Mutator, len(patcb.builders))
	for i := range patcb.builders {
		func(i int, root context.Context) {
			builder := patcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProductAssocTypeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, patcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, patcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, patcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (patcb *ProductAssocTypeCreateBulk) SaveX(ctx context.Context) []*ProductAssocType {
	v, err := patcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
