// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/predicate"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productassoc"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productassoctype"
)

// ProductAssocTypeUpdate is the builder for updating ProductAssocType entities.
type ProductAssocTypeUpdate struct {
	config
	hooks    []Hook
	mutation *ProductAssocTypeMutation
}

// Where adds a new predicate for the ProductAssocTypeUpdate builder.
func (patu *ProductAssocTypeUpdate) Where(ps ...predicate.ProductAssocType) *ProductAssocTypeUpdate {
	patu.mutation.predicates = append(patu.mutation.predicates, ps...)
	return patu
}

// SetStringRef sets the "string_ref" field.
func (patu *ProductAssocTypeUpdate) SetStringRef(s string) *ProductAssocTypeUpdate {
	patu.mutation.SetStringRef(s)
	return patu
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (patu *ProductAssocTypeUpdate) SetNillableStringRef(s *string) *ProductAssocTypeUpdate {
	if s != nil {
		patu.SetStringRef(*s)
	}
	return patu
}

// ClearStringRef clears the value of the "string_ref" field.
func (patu *ProductAssocTypeUpdate) ClearStringRef() *ProductAssocTypeUpdate {
	patu.mutation.ClearStringRef()
	return patu
}

// SetHasTable sets the "has_table" field.
func (patu *ProductAssocTypeUpdate) SetHasTable(pt productassoctype.HasTable) *ProductAssocTypeUpdate {
	patu.mutation.SetHasTable(pt)
	return patu
}

// SetNillableHasTable sets the "has_table" field if the given value is not nil.
func (patu *ProductAssocTypeUpdate) SetNillableHasTable(pt *productassoctype.HasTable) *ProductAssocTypeUpdate {
	if pt != nil {
		patu.SetHasTable(*pt)
	}
	return patu
}

// ClearHasTable clears the value of the "has_table" field.
func (patu *ProductAssocTypeUpdate) ClearHasTable() *ProductAssocTypeUpdate {
	patu.mutation.ClearHasTable()
	return patu
}

// SetDescription sets the "description" field.
func (patu *ProductAssocTypeUpdate) SetDescription(s string) *ProductAssocTypeUpdate {
	patu.mutation.SetDescription(s)
	return patu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (patu *ProductAssocTypeUpdate) SetNillableDescription(s *string) *ProductAssocTypeUpdate {
	if s != nil {
		patu.SetDescription(*s)
	}
	return patu
}

// ClearDescription clears the value of the "description" field.
func (patu *ProductAssocTypeUpdate) ClearDescription() *ProductAssocTypeUpdate {
	patu.mutation.ClearDescription()
	return patu
}

// SetParentID sets the "parent" edge to the ProductAssocType entity by ID.
func (patu *ProductAssocTypeUpdate) SetParentID(id int) *ProductAssocTypeUpdate {
	patu.mutation.SetParentID(id)
	return patu
}

// SetNillableParentID sets the "parent" edge to the ProductAssocType entity by ID if the given value is not nil.
func (patu *ProductAssocTypeUpdate) SetNillableParentID(id *int) *ProductAssocTypeUpdate {
	if id != nil {
		patu = patu.SetParentID(*id)
	}
	return patu
}

// SetParent sets the "parent" edge to the ProductAssocType entity.
func (patu *ProductAssocTypeUpdate) SetParent(p *ProductAssocType) *ProductAssocTypeUpdate {
	return patu.SetParentID(p.ID)
}

// AddChildIDs adds the "children" edge to the ProductAssocType entity by IDs.
func (patu *ProductAssocTypeUpdate) AddChildIDs(ids ...int) *ProductAssocTypeUpdate {
	patu.mutation.AddChildIDs(ids...)
	return patu
}

// AddChildren adds the "children" edges to the ProductAssocType entity.
func (patu *ProductAssocTypeUpdate) AddChildren(p ...*ProductAssocType) *ProductAssocTypeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return patu.AddChildIDs(ids...)
}

// AddProductAssocIDs adds the "product_assocs" edge to the ProductAssoc entity by IDs.
func (patu *ProductAssocTypeUpdate) AddProductAssocIDs(ids ...int) *ProductAssocTypeUpdate {
	patu.mutation.AddProductAssocIDs(ids...)
	return patu
}

// AddProductAssocs adds the "product_assocs" edges to the ProductAssoc entity.
func (patu *ProductAssocTypeUpdate) AddProductAssocs(p ...*ProductAssoc) *ProductAssocTypeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return patu.AddProductAssocIDs(ids...)
}

// AddChildProductAssocTypeIDs adds the "child_product_assoc_types" edge to the ProductAssocType entity by IDs.
func (patu *ProductAssocTypeUpdate) AddChildProductAssocTypeIDs(ids ...int) *ProductAssocTypeUpdate {
	patu.mutation.AddChildProductAssocTypeIDs(ids...)
	return patu
}

// AddChildProductAssocTypes adds the "child_product_assoc_types" edges to the ProductAssocType entity.
func (patu *ProductAssocTypeUpdate) AddChildProductAssocTypes(p ...*ProductAssocType) *ProductAssocTypeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return patu.AddChildProductAssocTypeIDs(ids...)
}

// Mutation returns the ProductAssocTypeMutation object of the builder.
func (patu *ProductAssocTypeUpdate) Mutation() *ProductAssocTypeMutation {
	return patu.mutation
}

// ClearParent clears the "parent" edge to the ProductAssocType entity.
func (patu *ProductAssocTypeUpdate) ClearParent() *ProductAssocTypeUpdate {
	patu.mutation.ClearParent()
	return patu
}

// ClearChildren clears all "children" edges to the ProductAssocType entity.
func (patu *ProductAssocTypeUpdate) ClearChildren() *ProductAssocTypeUpdate {
	patu.mutation.ClearChildren()
	return patu
}

// RemoveChildIDs removes the "children" edge to ProductAssocType entities by IDs.
func (patu *ProductAssocTypeUpdate) RemoveChildIDs(ids ...int) *ProductAssocTypeUpdate {
	patu.mutation.RemoveChildIDs(ids...)
	return patu
}

// RemoveChildren removes "children" edges to ProductAssocType entities.
func (patu *ProductAssocTypeUpdate) RemoveChildren(p ...*ProductAssocType) *ProductAssocTypeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return patu.RemoveChildIDs(ids...)
}

// ClearProductAssocs clears all "product_assocs" edges to the ProductAssoc entity.
func (patu *ProductAssocTypeUpdate) ClearProductAssocs() *ProductAssocTypeUpdate {
	patu.mutation.ClearProductAssocs()
	return patu
}

// RemoveProductAssocIDs removes the "product_assocs" edge to ProductAssoc entities by IDs.
func (patu *ProductAssocTypeUpdate) RemoveProductAssocIDs(ids ...int) *ProductAssocTypeUpdate {
	patu.mutation.RemoveProductAssocIDs(ids...)
	return patu
}

// RemoveProductAssocs removes "product_assocs" edges to ProductAssoc entities.
func (patu *ProductAssocTypeUpdate) RemoveProductAssocs(p ...*ProductAssoc) *ProductAssocTypeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return patu.RemoveProductAssocIDs(ids...)
}

// ClearChildProductAssocTypes clears all "child_product_assoc_types" edges to the ProductAssocType entity.
func (patu *ProductAssocTypeUpdate) ClearChildProductAssocTypes() *ProductAssocTypeUpdate {
	patu.mutation.ClearChildProductAssocTypes()
	return patu
}

// RemoveChildProductAssocTypeIDs removes the "child_product_assoc_types" edge to ProductAssocType entities by IDs.
func (patu *ProductAssocTypeUpdate) RemoveChildProductAssocTypeIDs(ids ...int) *ProductAssocTypeUpdate {
	patu.mutation.RemoveChildProductAssocTypeIDs(ids...)
	return patu
}

// RemoveChildProductAssocTypes removes "child_product_assoc_types" edges to ProductAssocType entities.
func (patu *ProductAssocTypeUpdate) RemoveChildProductAssocTypes(p ...*ProductAssocType) *ProductAssocTypeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return patu.RemoveChildProductAssocTypeIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (patu *ProductAssocTypeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	patu.defaults()
	if len(patu.hooks) == 0 {
		if err = patu.check(); err != nil {
			return 0, err
		}
		affected, err = patu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProductAssocTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = patu.check(); err != nil {
				return 0, err
			}
			patu.mutation = mutation
			affected, err = patu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(patu.hooks) - 1; i >= 0; i-- {
			mut = patu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, patu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (patu *ProductAssocTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := patu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (patu *ProductAssocTypeUpdate) Exec(ctx context.Context) error {
	_, err := patu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (patu *ProductAssocTypeUpdate) ExecX(ctx context.Context) {
	if err := patu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (patu *ProductAssocTypeUpdate) defaults() {
	if _, ok := patu.mutation.UpdateTime(); !ok {
		v := productassoctype.UpdateDefaultUpdateTime()
		patu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (patu *ProductAssocTypeUpdate) check() error {
	if v, ok := patu.mutation.HasTable(); ok {
		if err := productassoctype.HasTableValidator(v); err != nil {
			return &ValidationError{Name: "has_table", err: fmt.Errorf("ent: validator failed for field \"has_table\": %w", err)}
		}
	}
	return nil
}

func (patu *ProductAssocTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   productassoctype.Table,
			Columns: productassoctype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: productassoctype.FieldID,
			},
		},
	}
	if ps := patu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := patu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productassoctype.FieldUpdateTime,
		})
	}
	if value, ok := patu.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productassoctype.FieldStringRef,
		})
	}
	if patu.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productassoctype.FieldStringRef,
		})
	}
	if value, ok := patu.mutation.HasTable(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productassoctype.FieldHasTable,
		})
	}
	if patu.mutation.HasTableCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productassoctype.FieldHasTable,
		})
	}
	if value, ok := patu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productassoctype.FieldDescription,
		})
	}
	if patu.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productassoctype.FieldDescription,
		})
	}
	if patu.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productassoctype.ParentTable,
			Columns: []string{productassoctype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productassoctype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := patu.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productassoctype.ParentTable,
			Columns: []string{productassoctype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productassoctype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if patu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productassoctype.ChildrenTable,
			Columns: []string{productassoctype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productassoctype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := patu.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !patu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productassoctype.ChildrenTable,
			Columns: []string{productassoctype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productassoctype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := patu.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productassoctype.ChildrenTable,
			Columns: []string{productassoctype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productassoctype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if patu.mutation.ProductAssocsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productassoctype.ProductAssocsTable,
			Columns: []string{productassoctype.ProductAssocsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productassoc.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := patu.mutation.RemovedProductAssocsIDs(); len(nodes) > 0 && !patu.mutation.ProductAssocsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productassoctype.ProductAssocsTable,
			Columns: []string{productassoctype.ProductAssocsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productassoc.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := patu.mutation.ProductAssocsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productassoctype.ProductAssocsTable,
			Columns: []string{productassoctype.ProductAssocsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productassoc.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if patu.mutation.ChildProductAssocTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   productassoctype.ChildProductAssocTypesTable,
			Columns: productassoctype.ChildProductAssocTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productassoctype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := patu.mutation.RemovedChildProductAssocTypesIDs(); len(nodes) > 0 && !patu.mutation.ChildProductAssocTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   productassoctype.ChildProductAssocTypesTable,
			Columns: productassoctype.ChildProductAssocTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productassoctype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := patu.mutation.ChildProductAssocTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   productassoctype.ChildProductAssocTypesTable,
			Columns: productassoctype.ChildProductAssocTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productassoctype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, patu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productassoctype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ProductAssocTypeUpdateOne is the builder for updating a single ProductAssocType entity.
type ProductAssocTypeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProductAssocTypeMutation
}

// SetStringRef sets the "string_ref" field.
func (patuo *ProductAssocTypeUpdateOne) SetStringRef(s string) *ProductAssocTypeUpdateOne {
	patuo.mutation.SetStringRef(s)
	return patuo
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (patuo *ProductAssocTypeUpdateOne) SetNillableStringRef(s *string) *ProductAssocTypeUpdateOne {
	if s != nil {
		patuo.SetStringRef(*s)
	}
	return patuo
}

// ClearStringRef clears the value of the "string_ref" field.
func (patuo *ProductAssocTypeUpdateOne) ClearStringRef() *ProductAssocTypeUpdateOne {
	patuo.mutation.ClearStringRef()
	return patuo
}

// SetHasTable sets the "has_table" field.
func (patuo *ProductAssocTypeUpdateOne) SetHasTable(pt productassoctype.HasTable) *ProductAssocTypeUpdateOne {
	patuo.mutation.SetHasTable(pt)
	return patuo
}

// SetNillableHasTable sets the "has_table" field if the given value is not nil.
func (patuo *ProductAssocTypeUpdateOne) SetNillableHasTable(pt *productassoctype.HasTable) *ProductAssocTypeUpdateOne {
	if pt != nil {
		patuo.SetHasTable(*pt)
	}
	return patuo
}

// ClearHasTable clears the value of the "has_table" field.
func (patuo *ProductAssocTypeUpdateOne) ClearHasTable() *ProductAssocTypeUpdateOne {
	patuo.mutation.ClearHasTable()
	return patuo
}

// SetDescription sets the "description" field.
func (patuo *ProductAssocTypeUpdateOne) SetDescription(s string) *ProductAssocTypeUpdateOne {
	patuo.mutation.SetDescription(s)
	return patuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (patuo *ProductAssocTypeUpdateOne) SetNillableDescription(s *string) *ProductAssocTypeUpdateOne {
	if s != nil {
		patuo.SetDescription(*s)
	}
	return patuo
}

// ClearDescription clears the value of the "description" field.
func (patuo *ProductAssocTypeUpdateOne) ClearDescription() *ProductAssocTypeUpdateOne {
	patuo.mutation.ClearDescription()
	return patuo
}

// SetParentID sets the "parent" edge to the ProductAssocType entity by ID.
func (patuo *ProductAssocTypeUpdateOne) SetParentID(id int) *ProductAssocTypeUpdateOne {
	patuo.mutation.SetParentID(id)
	return patuo
}

// SetNillableParentID sets the "parent" edge to the ProductAssocType entity by ID if the given value is not nil.
func (patuo *ProductAssocTypeUpdateOne) SetNillableParentID(id *int) *ProductAssocTypeUpdateOne {
	if id != nil {
		patuo = patuo.SetParentID(*id)
	}
	return patuo
}

// SetParent sets the "parent" edge to the ProductAssocType entity.
func (patuo *ProductAssocTypeUpdateOne) SetParent(p *ProductAssocType) *ProductAssocTypeUpdateOne {
	return patuo.SetParentID(p.ID)
}

// AddChildIDs adds the "children" edge to the ProductAssocType entity by IDs.
func (patuo *ProductAssocTypeUpdateOne) AddChildIDs(ids ...int) *ProductAssocTypeUpdateOne {
	patuo.mutation.AddChildIDs(ids...)
	return patuo
}

// AddChildren adds the "children" edges to the ProductAssocType entity.
func (patuo *ProductAssocTypeUpdateOne) AddChildren(p ...*ProductAssocType) *ProductAssocTypeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return patuo.AddChildIDs(ids...)
}

// AddProductAssocIDs adds the "product_assocs" edge to the ProductAssoc entity by IDs.
func (patuo *ProductAssocTypeUpdateOne) AddProductAssocIDs(ids ...int) *ProductAssocTypeUpdateOne {
	patuo.mutation.AddProductAssocIDs(ids...)
	return patuo
}

// AddProductAssocs adds the "product_assocs" edges to the ProductAssoc entity.
func (patuo *ProductAssocTypeUpdateOne) AddProductAssocs(p ...*ProductAssoc) *ProductAssocTypeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return patuo.AddProductAssocIDs(ids...)
}

// AddChildProductAssocTypeIDs adds the "child_product_assoc_types" edge to the ProductAssocType entity by IDs.
func (patuo *ProductAssocTypeUpdateOne) AddChildProductAssocTypeIDs(ids ...int) *ProductAssocTypeUpdateOne {
	patuo.mutation.AddChildProductAssocTypeIDs(ids...)
	return patuo
}

// AddChildProductAssocTypes adds the "child_product_assoc_types" edges to the ProductAssocType entity.
func (patuo *ProductAssocTypeUpdateOne) AddChildProductAssocTypes(p ...*ProductAssocType) *ProductAssocTypeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return patuo.AddChildProductAssocTypeIDs(ids...)
}

// Mutation returns the ProductAssocTypeMutation object of the builder.
func (patuo *ProductAssocTypeUpdateOne) Mutation() *ProductAssocTypeMutation {
	return patuo.mutation
}

// ClearParent clears the "parent" edge to the ProductAssocType entity.
func (patuo *ProductAssocTypeUpdateOne) ClearParent() *ProductAssocTypeUpdateOne {
	patuo.mutation.ClearParent()
	return patuo
}

// ClearChildren clears all "children" edges to the ProductAssocType entity.
func (patuo *ProductAssocTypeUpdateOne) ClearChildren() *ProductAssocTypeUpdateOne {
	patuo.mutation.ClearChildren()
	return patuo
}

// RemoveChildIDs removes the "children" edge to ProductAssocType entities by IDs.
func (patuo *ProductAssocTypeUpdateOne) RemoveChildIDs(ids ...int) *ProductAssocTypeUpdateOne {
	patuo.mutation.RemoveChildIDs(ids...)
	return patuo
}

// RemoveChildren removes "children" edges to ProductAssocType entities.
func (patuo *ProductAssocTypeUpdateOne) RemoveChildren(p ...*ProductAssocType) *ProductAssocTypeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return patuo.RemoveChildIDs(ids...)
}

// ClearProductAssocs clears all "product_assocs" edges to the ProductAssoc entity.
func (patuo *ProductAssocTypeUpdateOne) ClearProductAssocs() *ProductAssocTypeUpdateOne {
	patuo.mutation.ClearProductAssocs()
	return patuo
}

// RemoveProductAssocIDs removes the "product_assocs" edge to ProductAssoc entities by IDs.
func (patuo *ProductAssocTypeUpdateOne) RemoveProductAssocIDs(ids ...int) *ProductAssocTypeUpdateOne {
	patuo.mutation.RemoveProductAssocIDs(ids...)
	return patuo
}

// RemoveProductAssocs removes "product_assocs" edges to ProductAssoc entities.
func (patuo *ProductAssocTypeUpdateOne) RemoveProductAssocs(p ...*ProductAssoc) *ProductAssocTypeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return patuo.RemoveProductAssocIDs(ids...)
}

// ClearChildProductAssocTypes clears all "child_product_assoc_types" edges to the ProductAssocType entity.
func (patuo *ProductAssocTypeUpdateOne) ClearChildProductAssocTypes() *ProductAssocTypeUpdateOne {
	patuo.mutation.ClearChildProductAssocTypes()
	return patuo
}

// RemoveChildProductAssocTypeIDs removes the "child_product_assoc_types" edge to ProductAssocType entities by IDs.
func (patuo *ProductAssocTypeUpdateOne) RemoveChildProductAssocTypeIDs(ids ...int) *ProductAssocTypeUpdateOne {
	patuo.mutation.RemoveChildProductAssocTypeIDs(ids...)
	return patuo
}

// RemoveChildProductAssocTypes removes "child_product_assoc_types" edges to ProductAssocType entities.
func (patuo *ProductAssocTypeUpdateOne) RemoveChildProductAssocTypes(p ...*ProductAssocType) *ProductAssocTypeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return patuo.RemoveChildProductAssocTypeIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (patuo *ProductAssocTypeUpdateOne) Select(field string, fields ...string) *ProductAssocTypeUpdateOne {
	patuo.fields = append([]string{field}, fields...)
	return patuo
}

// Save executes the query and returns the updated ProductAssocType entity.
func (patuo *ProductAssocTypeUpdateOne) Save(ctx context.Context) (*ProductAssocType, error) {
	var (
		err  error
		node *ProductAssocType
	)
	patuo.defaults()
	if len(patuo.hooks) == 0 {
		if err = patuo.check(); err != nil {
			return nil, err
		}
		node, err = patuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProductAssocTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = patuo.check(); err != nil {
				return nil, err
			}
			patuo.mutation = mutation
			node, err = patuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(patuo.hooks) - 1; i >= 0; i-- {
			mut = patuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, patuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (patuo *ProductAssocTypeUpdateOne) SaveX(ctx context.Context) *ProductAssocType {
	node, err := patuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (patuo *ProductAssocTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := patuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (patuo *ProductAssocTypeUpdateOne) ExecX(ctx context.Context) {
	if err := patuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (patuo *ProductAssocTypeUpdateOne) defaults() {
	if _, ok := patuo.mutation.UpdateTime(); !ok {
		v := productassoctype.UpdateDefaultUpdateTime()
		patuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (patuo *ProductAssocTypeUpdateOne) check() error {
	if v, ok := patuo.mutation.HasTable(); ok {
		if err := productassoctype.HasTableValidator(v); err != nil {
			return &ValidationError{Name: "has_table", err: fmt.Errorf("ent: validator failed for field \"has_table\": %w", err)}
		}
	}
	return nil
}

func (patuo *ProductAssocTypeUpdateOne) sqlSave(ctx context.Context) (_node *ProductAssocType, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   productassoctype.Table,
			Columns: productassoctype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: productassoctype.FieldID,
			},
		},
	}
	id, ok := patuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ProductAssocType.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := patuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, productassoctype.FieldID)
		for _, f := range fields {
			if !productassoctype.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != productassoctype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := patuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := patuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productassoctype.FieldUpdateTime,
		})
	}
	if value, ok := patuo.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productassoctype.FieldStringRef,
		})
	}
	if patuo.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productassoctype.FieldStringRef,
		})
	}
	if value, ok := patuo.mutation.HasTable(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productassoctype.FieldHasTable,
		})
	}
	if patuo.mutation.HasTableCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productassoctype.FieldHasTable,
		})
	}
	if value, ok := patuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productassoctype.FieldDescription,
		})
	}
	if patuo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productassoctype.FieldDescription,
		})
	}
	if patuo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productassoctype.ParentTable,
			Columns: []string{productassoctype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productassoctype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := patuo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productassoctype.ParentTable,
			Columns: []string{productassoctype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productassoctype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if patuo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productassoctype.ChildrenTable,
			Columns: []string{productassoctype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productassoctype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := patuo.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !patuo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productassoctype.ChildrenTable,
			Columns: []string{productassoctype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productassoctype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := patuo.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productassoctype.ChildrenTable,
			Columns: []string{productassoctype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productassoctype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if patuo.mutation.ProductAssocsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productassoctype.ProductAssocsTable,
			Columns: []string{productassoctype.ProductAssocsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productassoc.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := patuo.mutation.RemovedProductAssocsIDs(); len(nodes) > 0 && !patuo.mutation.ProductAssocsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productassoctype.ProductAssocsTable,
			Columns: []string{productassoctype.ProductAssocsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productassoc.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := patuo.mutation.ProductAssocsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productassoctype.ProductAssocsTable,
			Columns: []string{productassoctype.ProductAssocsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productassoc.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if patuo.mutation.ChildProductAssocTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   productassoctype.ChildProductAssocTypesTable,
			Columns: productassoctype.ChildProductAssocTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productassoctype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := patuo.mutation.RemovedChildProductAssocTypesIDs(); len(nodes) > 0 && !patuo.mutation.ChildProductAssocTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   productassoctype.ChildProductAssocTypesTable,
			Columns: productassoctype.ChildProductAssocTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productassoctype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := patuo.mutation.ChildProductAssocTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   productassoctype.ChildProductAssocTypesTable,
			Columns: productassoctype.ChildProductAssocTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productassoctype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProductAssocType{config: patuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, patuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productassoctype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
