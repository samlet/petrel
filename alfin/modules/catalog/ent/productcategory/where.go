// Code generated by entc, DO NOT EDIT.

package productcategory

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// StringRef applies equality check predicate on the "string_ref" field. It's identical to StringRefEQ.
func StringRef(v string) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStringRef), v))
	})
}

// CategoryName applies equality check predicate on the "category_name" field. It's identical to CategoryNameEQ.
func CategoryName(v string) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCategoryName), v))
	})
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// LongDescription applies equality check predicate on the "long_description" field. It's identical to LongDescriptionEQ.
func LongDescription(v string) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLongDescription), v))
	})
}

// CategoryImageURL applies equality check predicate on the "category_image_url" field. It's identical to CategoryImageURLEQ.
func CategoryImageURL(v string) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCategoryImageURL), v))
	})
}

// LinkOneImageURL applies equality check predicate on the "link_one_image_url" field. It's identical to LinkOneImageURLEQ.
func LinkOneImageURL(v string) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLinkOneImageURL), v))
	})
}

// LinkTwoImageURL applies equality check predicate on the "link_two_image_url" field. It's identical to LinkTwoImageURLEQ.
func LinkTwoImageURL(v string) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLinkTwoImageURL), v))
	})
}

// DetailScreen applies equality check predicate on the "detail_screen" field. It's identical to DetailScreenEQ.
func DetailScreen(v string) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDetailScreen), v))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.ProductCategory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductCategory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.ProductCategory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductCategory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), v))
	})
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.ProductCategory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductCategory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.ProductCategory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductCategory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateTime), v))
	})
}

// StringRefEQ applies the EQ predicate on the "string_ref" field.
func StringRefEQ(v string) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStringRef), v))
	})
}

// StringRefNEQ applies the NEQ predicate on the "string_ref" field.
func StringRefNEQ(v string) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStringRef), v))
	})
}

// StringRefIn applies the In predicate on the "string_ref" field.
func StringRefIn(vs ...string) predicate.ProductCategory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductCategory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStringRef), v...))
	})
}

// StringRefNotIn applies the NotIn predicate on the "string_ref" field.
func StringRefNotIn(vs ...string) predicate.ProductCategory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductCategory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStringRef), v...))
	})
}

// StringRefGT applies the GT predicate on the "string_ref" field.
func StringRefGT(v string) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStringRef), v))
	})
}

// StringRefGTE applies the GTE predicate on the "string_ref" field.
func StringRefGTE(v string) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStringRef), v))
	})
}

// StringRefLT applies the LT predicate on the "string_ref" field.
func StringRefLT(v string) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStringRef), v))
	})
}

// StringRefLTE applies the LTE predicate on the "string_ref" field.
func StringRefLTE(v string) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStringRef), v))
	})
}

// StringRefContains applies the Contains predicate on the "string_ref" field.
func StringRefContains(v string) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStringRef), v))
	})
}

// StringRefHasPrefix applies the HasPrefix predicate on the "string_ref" field.
func StringRefHasPrefix(v string) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStringRef), v))
	})
}

// StringRefHasSuffix applies the HasSuffix predicate on the "string_ref" field.
func StringRefHasSuffix(v string) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStringRef), v))
	})
}

// StringRefIsNil applies the IsNil predicate on the "string_ref" field.
func StringRefIsNil() predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStringRef)))
	})
}

// StringRefNotNil applies the NotNil predicate on the "string_ref" field.
func StringRefNotNil() predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStringRef)))
	})
}

// StringRefEqualFold applies the EqualFold predicate on the "string_ref" field.
func StringRefEqualFold(v string) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStringRef), v))
	})
}

// StringRefContainsFold applies the ContainsFold predicate on the "string_ref" field.
func StringRefContainsFold(v string) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStringRef), v))
	})
}

// CategoryNameEQ applies the EQ predicate on the "category_name" field.
func CategoryNameEQ(v string) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCategoryName), v))
	})
}

// CategoryNameNEQ applies the NEQ predicate on the "category_name" field.
func CategoryNameNEQ(v string) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCategoryName), v))
	})
}

// CategoryNameIn applies the In predicate on the "category_name" field.
func CategoryNameIn(vs ...string) predicate.ProductCategory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductCategory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCategoryName), v...))
	})
}

// CategoryNameNotIn applies the NotIn predicate on the "category_name" field.
func CategoryNameNotIn(vs ...string) predicate.ProductCategory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductCategory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCategoryName), v...))
	})
}

// CategoryNameGT applies the GT predicate on the "category_name" field.
func CategoryNameGT(v string) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCategoryName), v))
	})
}

// CategoryNameGTE applies the GTE predicate on the "category_name" field.
func CategoryNameGTE(v string) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCategoryName), v))
	})
}

// CategoryNameLT applies the LT predicate on the "category_name" field.
func CategoryNameLT(v string) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCategoryName), v))
	})
}

// CategoryNameLTE applies the LTE predicate on the "category_name" field.
func CategoryNameLTE(v string) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCategoryName), v))
	})
}

// CategoryNameContains applies the Contains predicate on the "category_name" field.
func CategoryNameContains(v string) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCategoryName), v))
	})
}

// CategoryNameHasPrefix applies the HasPrefix predicate on the "category_name" field.
func CategoryNameHasPrefix(v string) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCategoryName), v))
	})
}

// CategoryNameHasSuffix applies the HasSuffix predicate on the "category_name" field.
func CategoryNameHasSuffix(v string) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCategoryName), v))
	})
}

// CategoryNameIsNil applies the IsNil predicate on the "category_name" field.
func CategoryNameIsNil() predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCategoryName)))
	})
}

// CategoryNameNotNil applies the NotNil predicate on the "category_name" field.
func CategoryNameNotNil() predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCategoryName)))
	})
}

// CategoryNameEqualFold applies the EqualFold predicate on the "category_name" field.
func CategoryNameEqualFold(v string) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCategoryName), v))
	})
}

// CategoryNameContainsFold applies the ContainsFold predicate on the "category_name" field.
func CategoryNameContainsFold(v string) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCategoryName), v))
	})
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDescription), v))
	})
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.ProductCategory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductCategory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDescription), v...))
	})
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.ProductCategory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductCategory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDescription), v...))
	})
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDescription), v))
	})
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDescription), v))
	})
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDescription), v))
	})
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDescription), v))
	})
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDescription), v))
	})
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDescription), v))
	})
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDescription), v))
	})
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDescription)))
	})
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDescription)))
	})
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDescription), v))
	})
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDescription), v))
	})
}

// LongDescriptionEQ applies the EQ predicate on the "long_description" field.
func LongDescriptionEQ(v string) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLongDescription), v))
	})
}

// LongDescriptionNEQ applies the NEQ predicate on the "long_description" field.
func LongDescriptionNEQ(v string) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLongDescription), v))
	})
}

// LongDescriptionIn applies the In predicate on the "long_description" field.
func LongDescriptionIn(vs ...string) predicate.ProductCategory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductCategory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLongDescription), v...))
	})
}

// LongDescriptionNotIn applies the NotIn predicate on the "long_description" field.
func LongDescriptionNotIn(vs ...string) predicate.ProductCategory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductCategory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLongDescription), v...))
	})
}

// LongDescriptionGT applies the GT predicate on the "long_description" field.
func LongDescriptionGT(v string) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLongDescription), v))
	})
}

// LongDescriptionGTE applies the GTE predicate on the "long_description" field.
func LongDescriptionGTE(v string) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLongDescription), v))
	})
}

// LongDescriptionLT applies the LT predicate on the "long_description" field.
func LongDescriptionLT(v string) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLongDescription), v))
	})
}

// LongDescriptionLTE applies the LTE predicate on the "long_description" field.
func LongDescriptionLTE(v string) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLongDescription), v))
	})
}

// LongDescriptionContains applies the Contains predicate on the "long_description" field.
func LongDescriptionContains(v string) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLongDescription), v))
	})
}

// LongDescriptionHasPrefix applies the HasPrefix predicate on the "long_description" field.
func LongDescriptionHasPrefix(v string) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLongDescription), v))
	})
}

// LongDescriptionHasSuffix applies the HasSuffix predicate on the "long_description" field.
func LongDescriptionHasSuffix(v string) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLongDescription), v))
	})
}

// LongDescriptionIsNil applies the IsNil predicate on the "long_description" field.
func LongDescriptionIsNil() predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLongDescription)))
	})
}

// LongDescriptionNotNil applies the NotNil predicate on the "long_description" field.
func LongDescriptionNotNil() predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLongDescription)))
	})
}

// LongDescriptionEqualFold applies the EqualFold predicate on the "long_description" field.
func LongDescriptionEqualFold(v string) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLongDescription), v))
	})
}

// LongDescriptionContainsFold applies the ContainsFold predicate on the "long_description" field.
func LongDescriptionContainsFold(v string) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLongDescription), v))
	})
}

// CategoryImageURLEQ applies the EQ predicate on the "category_image_url" field.
func CategoryImageURLEQ(v string) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCategoryImageURL), v))
	})
}

// CategoryImageURLNEQ applies the NEQ predicate on the "category_image_url" field.
func CategoryImageURLNEQ(v string) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCategoryImageURL), v))
	})
}

// CategoryImageURLIn applies the In predicate on the "category_image_url" field.
func CategoryImageURLIn(vs ...string) predicate.ProductCategory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductCategory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCategoryImageURL), v...))
	})
}

// CategoryImageURLNotIn applies the NotIn predicate on the "category_image_url" field.
func CategoryImageURLNotIn(vs ...string) predicate.ProductCategory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductCategory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCategoryImageURL), v...))
	})
}

// CategoryImageURLGT applies the GT predicate on the "category_image_url" field.
func CategoryImageURLGT(v string) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCategoryImageURL), v))
	})
}

// CategoryImageURLGTE applies the GTE predicate on the "category_image_url" field.
func CategoryImageURLGTE(v string) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCategoryImageURL), v))
	})
}

// CategoryImageURLLT applies the LT predicate on the "category_image_url" field.
func CategoryImageURLLT(v string) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCategoryImageURL), v))
	})
}

// CategoryImageURLLTE applies the LTE predicate on the "category_image_url" field.
func CategoryImageURLLTE(v string) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCategoryImageURL), v))
	})
}

// CategoryImageURLContains applies the Contains predicate on the "category_image_url" field.
func CategoryImageURLContains(v string) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCategoryImageURL), v))
	})
}

// CategoryImageURLHasPrefix applies the HasPrefix predicate on the "category_image_url" field.
func CategoryImageURLHasPrefix(v string) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCategoryImageURL), v))
	})
}

// CategoryImageURLHasSuffix applies the HasSuffix predicate on the "category_image_url" field.
func CategoryImageURLHasSuffix(v string) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCategoryImageURL), v))
	})
}

// CategoryImageURLIsNil applies the IsNil predicate on the "category_image_url" field.
func CategoryImageURLIsNil() predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCategoryImageURL)))
	})
}

// CategoryImageURLNotNil applies the NotNil predicate on the "category_image_url" field.
func CategoryImageURLNotNil() predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCategoryImageURL)))
	})
}

// CategoryImageURLEqualFold applies the EqualFold predicate on the "category_image_url" field.
func CategoryImageURLEqualFold(v string) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCategoryImageURL), v))
	})
}

// CategoryImageURLContainsFold applies the ContainsFold predicate on the "category_image_url" field.
func CategoryImageURLContainsFold(v string) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCategoryImageURL), v))
	})
}

// LinkOneImageURLEQ applies the EQ predicate on the "link_one_image_url" field.
func LinkOneImageURLEQ(v string) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLinkOneImageURL), v))
	})
}

// LinkOneImageURLNEQ applies the NEQ predicate on the "link_one_image_url" field.
func LinkOneImageURLNEQ(v string) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLinkOneImageURL), v))
	})
}

// LinkOneImageURLIn applies the In predicate on the "link_one_image_url" field.
func LinkOneImageURLIn(vs ...string) predicate.ProductCategory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductCategory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLinkOneImageURL), v...))
	})
}

// LinkOneImageURLNotIn applies the NotIn predicate on the "link_one_image_url" field.
func LinkOneImageURLNotIn(vs ...string) predicate.ProductCategory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductCategory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLinkOneImageURL), v...))
	})
}

// LinkOneImageURLGT applies the GT predicate on the "link_one_image_url" field.
func LinkOneImageURLGT(v string) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLinkOneImageURL), v))
	})
}

// LinkOneImageURLGTE applies the GTE predicate on the "link_one_image_url" field.
func LinkOneImageURLGTE(v string) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLinkOneImageURL), v))
	})
}

// LinkOneImageURLLT applies the LT predicate on the "link_one_image_url" field.
func LinkOneImageURLLT(v string) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLinkOneImageURL), v))
	})
}

// LinkOneImageURLLTE applies the LTE predicate on the "link_one_image_url" field.
func LinkOneImageURLLTE(v string) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLinkOneImageURL), v))
	})
}

// LinkOneImageURLContains applies the Contains predicate on the "link_one_image_url" field.
func LinkOneImageURLContains(v string) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLinkOneImageURL), v))
	})
}

// LinkOneImageURLHasPrefix applies the HasPrefix predicate on the "link_one_image_url" field.
func LinkOneImageURLHasPrefix(v string) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLinkOneImageURL), v))
	})
}

// LinkOneImageURLHasSuffix applies the HasSuffix predicate on the "link_one_image_url" field.
func LinkOneImageURLHasSuffix(v string) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLinkOneImageURL), v))
	})
}

// LinkOneImageURLIsNil applies the IsNil predicate on the "link_one_image_url" field.
func LinkOneImageURLIsNil() predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLinkOneImageURL)))
	})
}

// LinkOneImageURLNotNil applies the NotNil predicate on the "link_one_image_url" field.
func LinkOneImageURLNotNil() predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLinkOneImageURL)))
	})
}

// LinkOneImageURLEqualFold applies the EqualFold predicate on the "link_one_image_url" field.
func LinkOneImageURLEqualFold(v string) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLinkOneImageURL), v))
	})
}

// LinkOneImageURLContainsFold applies the ContainsFold predicate on the "link_one_image_url" field.
func LinkOneImageURLContainsFold(v string) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLinkOneImageURL), v))
	})
}

// LinkTwoImageURLEQ applies the EQ predicate on the "link_two_image_url" field.
func LinkTwoImageURLEQ(v string) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLinkTwoImageURL), v))
	})
}

// LinkTwoImageURLNEQ applies the NEQ predicate on the "link_two_image_url" field.
func LinkTwoImageURLNEQ(v string) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLinkTwoImageURL), v))
	})
}

// LinkTwoImageURLIn applies the In predicate on the "link_two_image_url" field.
func LinkTwoImageURLIn(vs ...string) predicate.ProductCategory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductCategory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLinkTwoImageURL), v...))
	})
}

// LinkTwoImageURLNotIn applies the NotIn predicate on the "link_two_image_url" field.
func LinkTwoImageURLNotIn(vs ...string) predicate.ProductCategory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductCategory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLinkTwoImageURL), v...))
	})
}

// LinkTwoImageURLGT applies the GT predicate on the "link_two_image_url" field.
func LinkTwoImageURLGT(v string) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLinkTwoImageURL), v))
	})
}

// LinkTwoImageURLGTE applies the GTE predicate on the "link_two_image_url" field.
func LinkTwoImageURLGTE(v string) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLinkTwoImageURL), v))
	})
}

// LinkTwoImageURLLT applies the LT predicate on the "link_two_image_url" field.
func LinkTwoImageURLLT(v string) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLinkTwoImageURL), v))
	})
}

// LinkTwoImageURLLTE applies the LTE predicate on the "link_two_image_url" field.
func LinkTwoImageURLLTE(v string) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLinkTwoImageURL), v))
	})
}

// LinkTwoImageURLContains applies the Contains predicate on the "link_two_image_url" field.
func LinkTwoImageURLContains(v string) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLinkTwoImageURL), v))
	})
}

// LinkTwoImageURLHasPrefix applies the HasPrefix predicate on the "link_two_image_url" field.
func LinkTwoImageURLHasPrefix(v string) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLinkTwoImageURL), v))
	})
}

// LinkTwoImageURLHasSuffix applies the HasSuffix predicate on the "link_two_image_url" field.
func LinkTwoImageURLHasSuffix(v string) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLinkTwoImageURL), v))
	})
}

// LinkTwoImageURLIsNil applies the IsNil predicate on the "link_two_image_url" field.
func LinkTwoImageURLIsNil() predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLinkTwoImageURL)))
	})
}

// LinkTwoImageURLNotNil applies the NotNil predicate on the "link_two_image_url" field.
func LinkTwoImageURLNotNil() predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLinkTwoImageURL)))
	})
}

// LinkTwoImageURLEqualFold applies the EqualFold predicate on the "link_two_image_url" field.
func LinkTwoImageURLEqualFold(v string) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLinkTwoImageURL), v))
	})
}

// LinkTwoImageURLContainsFold applies the ContainsFold predicate on the "link_two_image_url" field.
func LinkTwoImageURLContainsFold(v string) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLinkTwoImageURL), v))
	})
}

// DetailScreenEQ applies the EQ predicate on the "detail_screen" field.
func DetailScreenEQ(v string) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDetailScreen), v))
	})
}

// DetailScreenNEQ applies the NEQ predicate on the "detail_screen" field.
func DetailScreenNEQ(v string) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDetailScreen), v))
	})
}

// DetailScreenIn applies the In predicate on the "detail_screen" field.
func DetailScreenIn(vs ...string) predicate.ProductCategory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductCategory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDetailScreen), v...))
	})
}

// DetailScreenNotIn applies the NotIn predicate on the "detail_screen" field.
func DetailScreenNotIn(vs ...string) predicate.ProductCategory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductCategory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDetailScreen), v...))
	})
}

// DetailScreenGT applies the GT predicate on the "detail_screen" field.
func DetailScreenGT(v string) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDetailScreen), v))
	})
}

// DetailScreenGTE applies the GTE predicate on the "detail_screen" field.
func DetailScreenGTE(v string) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDetailScreen), v))
	})
}

// DetailScreenLT applies the LT predicate on the "detail_screen" field.
func DetailScreenLT(v string) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDetailScreen), v))
	})
}

// DetailScreenLTE applies the LTE predicate on the "detail_screen" field.
func DetailScreenLTE(v string) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDetailScreen), v))
	})
}

// DetailScreenContains applies the Contains predicate on the "detail_screen" field.
func DetailScreenContains(v string) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDetailScreen), v))
	})
}

// DetailScreenHasPrefix applies the HasPrefix predicate on the "detail_screen" field.
func DetailScreenHasPrefix(v string) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDetailScreen), v))
	})
}

// DetailScreenHasSuffix applies the HasSuffix predicate on the "detail_screen" field.
func DetailScreenHasSuffix(v string) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDetailScreen), v))
	})
}

// DetailScreenIsNil applies the IsNil predicate on the "detail_screen" field.
func DetailScreenIsNil() predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDetailScreen)))
	})
}

// DetailScreenNotNil applies the NotNil predicate on the "detail_screen" field.
func DetailScreenNotNil() predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDetailScreen)))
	})
}

// DetailScreenEqualFold applies the EqualFold predicate on the "detail_screen" field.
func DetailScreenEqualFold(v string) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDetailScreen), v))
	})
}

// DetailScreenContainsFold applies the ContainsFold predicate on the "detail_screen" field.
func DetailScreenContainsFold(v string) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDetailScreen), v))
	})
}

// ShowInSelectEQ applies the EQ predicate on the "show_in_select" field.
func ShowInSelectEQ(v ShowInSelect) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShowInSelect), v))
	})
}

// ShowInSelectNEQ applies the NEQ predicate on the "show_in_select" field.
func ShowInSelectNEQ(v ShowInSelect) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShowInSelect), v))
	})
}

// ShowInSelectIn applies the In predicate on the "show_in_select" field.
func ShowInSelectIn(vs ...ShowInSelect) predicate.ProductCategory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductCategory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldShowInSelect), v...))
	})
}

// ShowInSelectNotIn applies the NotIn predicate on the "show_in_select" field.
func ShowInSelectNotIn(vs ...ShowInSelect) predicate.ProductCategory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductCategory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldShowInSelect), v...))
	})
}

// ShowInSelectIsNil applies the IsNil predicate on the "show_in_select" field.
func ShowInSelectIsNil() predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldShowInSelect)))
	})
}

// ShowInSelectNotNil applies the NotNil predicate on the "show_in_select" field.
func ShowInSelectNotNil() predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldShowInSelect)))
	})
}

// HasProductCategoryType applies the HasEdge predicate on the "product_category_type" edge.
func HasProductCategoryType() predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProductCategoryTypeTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProductCategoryTypeTable, ProductCategoryTypeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProductCategoryTypeWith applies the HasEdge predicate on the "product_category_type" edge with a given conditions (other predicates).
func HasProductCategoryTypeWith(preds ...predicate.ProductCategoryType) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProductCategoryTypeInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProductCategoryTypeTable, ProductCategoryTypeColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasParent applies the HasEdge predicate on the "parent" edge.
func HasParent() predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ParentTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ParentTable, ParentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasParentWith applies the HasEdge predicate on the "parent" edge with a given conditions (other predicates).
func HasParentWith(preds ...predicate.ProductCategory) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ParentTable, ParentColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasChildren applies the HasEdge predicate on the "children" edge.
func HasChildren() predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ChildrenTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ChildrenTable, ChildrenColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChildrenWith applies the HasEdge predicate on the "children" edge with a given conditions (other predicates).
func HasChildrenWith(preds ...predicate.ProductCategory) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ChildrenTable, ChildrenColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPrimaryChildProductCategories applies the HasEdge predicate on the "primary_child_product_categories" edge.
func HasPrimaryChildProductCategories() predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PrimaryChildProductCategoriesTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, PrimaryChildProductCategoriesTable, PrimaryChildProductCategoriesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPrimaryChildProductCategoriesWith applies the HasEdge predicate on the "primary_child_product_categories" edge with a given conditions (other predicates).
func HasPrimaryChildProductCategoriesWith(preds ...predicate.ProductCategory) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, PrimaryChildProductCategoriesTable, PrimaryChildProductCategoriesPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPrimaryProducts applies the HasEdge predicate on the "primary_products" edge.
func HasPrimaryProducts() predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PrimaryProductsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PrimaryProductsTable, PrimaryProductsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPrimaryProductsWith applies the HasEdge predicate on the "primary_products" edge with a given conditions (other predicates).
func HasPrimaryProductsWith(preds ...predicate.Product) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PrimaryProductsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PrimaryProductsTable, PrimaryProductsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ProductCategory) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ProductCategory) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ProductCategory) predicate.ProductCategory {
	return predicate.ProductCategory(func(s *sql.Selector) {
		p(s.Not())
	})
}
