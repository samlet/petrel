// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/product"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productcategory"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productcategorytype"
)

// ProductCategoryCreate is the builder for creating a ProductCategory entity.
type ProductCategoryCreate struct {
	config
	mutation *ProductCategoryMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (pcc *ProductCategoryCreate) SetCreateTime(t time.Time) *ProductCategoryCreate {
	pcc.mutation.SetCreateTime(t)
	return pcc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (pcc *ProductCategoryCreate) SetNillableCreateTime(t *time.Time) *ProductCategoryCreate {
	if t != nil {
		pcc.SetCreateTime(*t)
	}
	return pcc
}

// SetUpdateTime sets the "update_time" field.
func (pcc *ProductCategoryCreate) SetUpdateTime(t time.Time) *ProductCategoryCreate {
	pcc.mutation.SetUpdateTime(t)
	return pcc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (pcc *ProductCategoryCreate) SetNillableUpdateTime(t *time.Time) *ProductCategoryCreate {
	if t != nil {
		pcc.SetUpdateTime(*t)
	}
	return pcc
}

// SetStringRef sets the "string_ref" field.
func (pcc *ProductCategoryCreate) SetStringRef(s string) *ProductCategoryCreate {
	pcc.mutation.SetStringRef(s)
	return pcc
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (pcc *ProductCategoryCreate) SetNillableStringRef(s *string) *ProductCategoryCreate {
	if s != nil {
		pcc.SetStringRef(*s)
	}
	return pcc
}

// SetCategoryName sets the "category_name" field.
func (pcc *ProductCategoryCreate) SetCategoryName(s string) *ProductCategoryCreate {
	pcc.mutation.SetCategoryName(s)
	return pcc
}

// SetNillableCategoryName sets the "category_name" field if the given value is not nil.
func (pcc *ProductCategoryCreate) SetNillableCategoryName(s *string) *ProductCategoryCreate {
	if s != nil {
		pcc.SetCategoryName(*s)
	}
	return pcc
}

// SetDescription sets the "description" field.
func (pcc *ProductCategoryCreate) SetDescription(s string) *ProductCategoryCreate {
	pcc.mutation.SetDescription(s)
	return pcc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pcc *ProductCategoryCreate) SetNillableDescription(s *string) *ProductCategoryCreate {
	if s != nil {
		pcc.SetDescription(*s)
	}
	return pcc
}

// SetLongDescription sets the "long_description" field.
func (pcc *ProductCategoryCreate) SetLongDescription(s string) *ProductCategoryCreate {
	pcc.mutation.SetLongDescription(s)
	return pcc
}

// SetNillableLongDescription sets the "long_description" field if the given value is not nil.
func (pcc *ProductCategoryCreate) SetNillableLongDescription(s *string) *ProductCategoryCreate {
	if s != nil {
		pcc.SetLongDescription(*s)
	}
	return pcc
}

// SetCategoryImageURL sets the "category_image_url" field.
func (pcc *ProductCategoryCreate) SetCategoryImageURL(s string) *ProductCategoryCreate {
	pcc.mutation.SetCategoryImageURL(s)
	return pcc
}

// SetNillableCategoryImageURL sets the "category_image_url" field if the given value is not nil.
func (pcc *ProductCategoryCreate) SetNillableCategoryImageURL(s *string) *ProductCategoryCreate {
	if s != nil {
		pcc.SetCategoryImageURL(*s)
	}
	return pcc
}

// SetLinkOneImageURL sets the "link_one_image_url" field.
func (pcc *ProductCategoryCreate) SetLinkOneImageURL(s string) *ProductCategoryCreate {
	pcc.mutation.SetLinkOneImageURL(s)
	return pcc
}

// SetNillableLinkOneImageURL sets the "link_one_image_url" field if the given value is not nil.
func (pcc *ProductCategoryCreate) SetNillableLinkOneImageURL(s *string) *ProductCategoryCreate {
	if s != nil {
		pcc.SetLinkOneImageURL(*s)
	}
	return pcc
}

// SetLinkTwoImageURL sets the "link_two_image_url" field.
func (pcc *ProductCategoryCreate) SetLinkTwoImageURL(s string) *ProductCategoryCreate {
	pcc.mutation.SetLinkTwoImageURL(s)
	return pcc
}

// SetNillableLinkTwoImageURL sets the "link_two_image_url" field if the given value is not nil.
func (pcc *ProductCategoryCreate) SetNillableLinkTwoImageURL(s *string) *ProductCategoryCreate {
	if s != nil {
		pcc.SetLinkTwoImageURL(*s)
	}
	return pcc
}

// SetDetailScreen sets the "detail_screen" field.
func (pcc *ProductCategoryCreate) SetDetailScreen(s string) *ProductCategoryCreate {
	pcc.mutation.SetDetailScreen(s)
	return pcc
}

// SetNillableDetailScreen sets the "detail_screen" field if the given value is not nil.
func (pcc *ProductCategoryCreate) SetNillableDetailScreen(s *string) *ProductCategoryCreate {
	if s != nil {
		pcc.SetDetailScreen(*s)
	}
	return pcc
}

// SetShowInSelect sets the "show_in_select" field.
func (pcc *ProductCategoryCreate) SetShowInSelect(pis productcategory.ShowInSelect) *ProductCategoryCreate {
	pcc.mutation.SetShowInSelect(pis)
	return pcc
}

// SetNillableShowInSelect sets the "show_in_select" field if the given value is not nil.
func (pcc *ProductCategoryCreate) SetNillableShowInSelect(pis *productcategory.ShowInSelect) *ProductCategoryCreate {
	if pis != nil {
		pcc.SetShowInSelect(*pis)
	}
	return pcc
}

// SetProductCategoryTypeID sets the "product_category_type" edge to the ProductCategoryType entity by ID.
func (pcc *ProductCategoryCreate) SetProductCategoryTypeID(id int) *ProductCategoryCreate {
	pcc.mutation.SetProductCategoryTypeID(id)
	return pcc
}

// SetNillableProductCategoryTypeID sets the "product_category_type" edge to the ProductCategoryType entity by ID if the given value is not nil.
func (pcc *ProductCategoryCreate) SetNillableProductCategoryTypeID(id *int) *ProductCategoryCreate {
	if id != nil {
		pcc = pcc.SetProductCategoryTypeID(*id)
	}
	return pcc
}

// SetProductCategoryType sets the "product_category_type" edge to the ProductCategoryType entity.
func (pcc *ProductCategoryCreate) SetProductCategoryType(p *ProductCategoryType) *ProductCategoryCreate {
	return pcc.SetProductCategoryTypeID(p.ID)
}

// SetParentID sets the "parent" edge to the ProductCategory entity by ID.
func (pcc *ProductCategoryCreate) SetParentID(id int) *ProductCategoryCreate {
	pcc.mutation.SetParentID(id)
	return pcc
}

// SetNillableParentID sets the "parent" edge to the ProductCategory entity by ID if the given value is not nil.
func (pcc *ProductCategoryCreate) SetNillableParentID(id *int) *ProductCategoryCreate {
	if id != nil {
		pcc = pcc.SetParentID(*id)
	}
	return pcc
}

// SetParent sets the "parent" edge to the ProductCategory entity.
func (pcc *ProductCategoryCreate) SetParent(p *ProductCategory) *ProductCategoryCreate {
	return pcc.SetParentID(p.ID)
}

// AddChildIDs adds the "children" edge to the ProductCategory entity by IDs.
func (pcc *ProductCategoryCreate) AddChildIDs(ids ...int) *ProductCategoryCreate {
	pcc.mutation.AddChildIDs(ids...)
	return pcc
}

// AddChildren adds the "children" edges to the ProductCategory entity.
func (pcc *ProductCategoryCreate) AddChildren(p ...*ProductCategory) *ProductCategoryCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pcc.AddChildIDs(ids...)
}

// AddPrimaryChildProductCategoryIDs adds the "primary_child_product_categories" edge to the ProductCategory entity by IDs.
func (pcc *ProductCategoryCreate) AddPrimaryChildProductCategoryIDs(ids ...int) *ProductCategoryCreate {
	pcc.mutation.AddPrimaryChildProductCategoryIDs(ids...)
	return pcc
}

// AddPrimaryChildProductCategories adds the "primary_child_product_categories" edges to the ProductCategory entity.
func (pcc *ProductCategoryCreate) AddPrimaryChildProductCategories(p ...*ProductCategory) *ProductCategoryCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pcc.AddPrimaryChildProductCategoryIDs(ids...)
}

// AddPrimaryProductIDs adds the "primary_products" edge to the Product entity by IDs.
func (pcc *ProductCategoryCreate) AddPrimaryProductIDs(ids ...int) *ProductCategoryCreate {
	pcc.mutation.AddPrimaryProductIDs(ids...)
	return pcc
}

// AddPrimaryProducts adds the "primary_products" edges to the Product entity.
func (pcc *ProductCategoryCreate) AddPrimaryProducts(p ...*Product) *ProductCategoryCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pcc.AddPrimaryProductIDs(ids...)
}

// Mutation returns the ProductCategoryMutation object of the builder.
func (pcc *ProductCategoryCreate) Mutation() *ProductCategoryMutation {
	return pcc.mutation
}

// Save creates the ProductCategory in the database.
func (pcc *ProductCategoryCreate) Save(ctx context.Context) (*ProductCategory, error) {
	var (
		err  error
		node *ProductCategory
	)
	pcc.defaults()
	if len(pcc.hooks) == 0 {
		if err = pcc.check(); err != nil {
			return nil, err
		}
		node, err = pcc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProductCategoryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pcc.check(); err != nil {
				return nil, err
			}
			pcc.mutation = mutation
			if node, err = pcc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(pcc.hooks) - 1; i >= 0; i-- {
			mut = pcc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pcc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pcc *ProductCategoryCreate) SaveX(ctx context.Context) *ProductCategory {
	v, err := pcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (pcc *ProductCategoryCreate) defaults() {
	if _, ok := pcc.mutation.CreateTime(); !ok {
		v := productcategory.DefaultCreateTime()
		pcc.mutation.SetCreateTime(v)
	}
	if _, ok := pcc.mutation.UpdateTime(); !ok {
		v := productcategory.DefaultUpdateTime()
		pcc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pcc *ProductCategoryCreate) check() error {
	if _, ok := pcc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New("ent: missing required field \"create_time\"")}
	}
	if _, ok := pcc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New("ent: missing required field \"update_time\"")}
	}
	if v, ok := pcc.mutation.ShowInSelect(); ok {
		if err := productcategory.ShowInSelectValidator(v); err != nil {
			return &ValidationError{Name: "show_in_select", err: fmt.Errorf("ent: validator failed for field \"show_in_select\": %w", err)}
		}
	}
	return nil
}

func (pcc *ProductCategoryCreate) sqlSave(ctx context.Context) (*ProductCategory, error) {
	_node, _spec := pcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pcc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (pcc *ProductCategoryCreate) createSpec() (*ProductCategory, *sqlgraph.CreateSpec) {
	var (
		_node = &ProductCategory{config: pcc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: productcategory.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: productcategory.FieldID,
			},
		}
	)
	if value, ok := pcc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productcategory.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := pcc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productcategory.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := pcc.mutation.StringRef(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productcategory.FieldStringRef,
		})
		_node.StringRef = value
	}
	if value, ok := pcc.mutation.CategoryName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productcategory.FieldCategoryName,
		})
		_node.CategoryName = value
	}
	if value, ok := pcc.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productcategory.FieldDescription,
		})
		_node.Description = value
	}
	if value, ok := pcc.mutation.LongDescription(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productcategory.FieldLongDescription,
		})
		_node.LongDescription = value
	}
	if value, ok := pcc.mutation.CategoryImageURL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productcategory.FieldCategoryImageURL,
		})
		_node.CategoryImageURL = value
	}
	if value, ok := pcc.mutation.LinkOneImageURL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productcategory.FieldLinkOneImageURL,
		})
		_node.LinkOneImageURL = value
	}
	if value, ok := pcc.mutation.LinkTwoImageURL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productcategory.FieldLinkTwoImageURL,
		})
		_node.LinkTwoImageURL = value
	}
	if value, ok := pcc.mutation.DetailScreen(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productcategory.FieldDetailScreen,
		})
		_node.DetailScreen = value
	}
	if value, ok := pcc.mutation.ShowInSelect(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productcategory.FieldShowInSelect,
		})
		_node.ShowInSelect = value
	}
	if nodes := pcc.mutation.ProductCategoryTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productcategory.ProductCategoryTypeTable,
			Columns: []string{productcategory.ProductCategoryTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productcategorytype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.product_category_type_product_categories = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pcc.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productcategory.ParentTable,
			Columns: []string{productcategory.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productcategory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.product_category_children = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pcc.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productcategory.ChildrenTable,
			Columns: []string{productcategory.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productcategory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pcc.mutation.PrimaryChildProductCategoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   productcategory.PrimaryChildProductCategoriesTable,
			Columns: productcategory.PrimaryChildProductCategoriesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productcategory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pcc.mutation.PrimaryProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productcategory.PrimaryProductsTable,
			Columns: []string{productcategory.PrimaryProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ProductCategoryCreateBulk is the builder for creating many ProductCategory entities in bulk.
type ProductCategoryCreateBulk struct {
	config
	builders []*ProductCategoryCreate
}

// Save creates the ProductCategory entities in the database.
func (pccb *ProductCategoryCreateBulk) Save(ctx context.Context) ([]*ProductCategory, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pccb.builders))
	nodes := make([]*ProductCategory, len(pccb.builders))
	mutators := make([]Mutator, len(pccb.builders))
	for i := range pccb.builders {
		func(i int, root context.Context) {
			builder := pccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProductCategoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pccb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pccb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pccb *ProductCategoryCreateBulk) SaveX(ctx context.Context) []*ProductCategory {
	v, err := pccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
