// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/predicate"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/product"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productcategory"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productcategorytype"
)

// ProductCategoryUpdate is the builder for updating ProductCategory entities.
type ProductCategoryUpdate struct {
	config
	hooks    []Hook
	mutation *ProductCategoryMutation
}

// Where adds a new predicate for the ProductCategoryUpdate builder.
func (pcu *ProductCategoryUpdate) Where(ps ...predicate.ProductCategory) *ProductCategoryUpdate {
	pcu.mutation.predicates = append(pcu.mutation.predicates, ps...)
	return pcu
}

// SetStringRef sets the "string_ref" field.
func (pcu *ProductCategoryUpdate) SetStringRef(s string) *ProductCategoryUpdate {
	pcu.mutation.SetStringRef(s)
	return pcu
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (pcu *ProductCategoryUpdate) SetNillableStringRef(s *string) *ProductCategoryUpdate {
	if s != nil {
		pcu.SetStringRef(*s)
	}
	return pcu
}

// ClearStringRef clears the value of the "string_ref" field.
func (pcu *ProductCategoryUpdate) ClearStringRef() *ProductCategoryUpdate {
	pcu.mutation.ClearStringRef()
	return pcu
}

// SetCategoryName sets the "category_name" field.
func (pcu *ProductCategoryUpdate) SetCategoryName(s string) *ProductCategoryUpdate {
	pcu.mutation.SetCategoryName(s)
	return pcu
}

// SetNillableCategoryName sets the "category_name" field if the given value is not nil.
func (pcu *ProductCategoryUpdate) SetNillableCategoryName(s *string) *ProductCategoryUpdate {
	if s != nil {
		pcu.SetCategoryName(*s)
	}
	return pcu
}

// ClearCategoryName clears the value of the "category_name" field.
func (pcu *ProductCategoryUpdate) ClearCategoryName() *ProductCategoryUpdate {
	pcu.mutation.ClearCategoryName()
	return pcu
}

// SetDescription sets the "description" field.
func (pcu *ProductCategoryUpdate) SetDescription(s string) *ProductCategoryUpdate {
	pcu.mutation.SetDescription(s)
	return pcu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pcu *ProductCategoryUpdate) SetNillableDescription(s *string) *ProductCategoryUpdate {
	if s != nil {
		pcu.SetDescription(*s)
	}
	return pcu
}

// ClearDescription clears the value of the "description" field.
func (pcu *ProductCategoryUpdate) ClearDescription() *ProductCategoryUpdate {
	pcu.mutation.ClearDescription()
	return pcu
}

// SetLongDescription sets the "long_description" field.
func (pcu *ProductCategoryUpdate) SetLongDescription(s string) *ProductCategoryUpdate {
	pcu.mutation.SetLongDescription(s)
	return pcu
}

// SetNillableLongDescription sets the "long_description" field if the given value is not nil.
func (pcu *ProductCategoryUpdate) SetNillableLongDescription(s *string) *ProductCategoryUpdate {
	if s != nil {
		pcu.SetLongDescription(*s)
	}
	return pcu
}

// ClearLongDescription clears the value of the "long_description" field.
func (pcu *ProductCategoryUpdate) ClearLongDescription() *ProductCategoryUpdate {
	pcu.mutation.ClearLongDescription()
	return pcu
}

// SetCategoryImageURL sets the "category_image_url" field.
func (pcu *ProductCategoryUpdate) SetCategoryImageURL(s string) *ProductCategoryUpdate {
	pcu.mutation.SetCategoryImageURL(s)
	return pcu
}

// SetNillableCategoryImageURL sets the "category_image_url" field if the given value is not nil.
func (pcu *ProductCategoryUpdate) SetNillableCategoryImageURL(s *string) *ProductCategoryUpdate {
	if s != nil {
		pcu.SetCategoryImageURL(*s)
	}
	return pcu
}

// ClearCategoryImageURL clears the value of the "category_image_url" field.
func (pcu *ProductCategoryUpdate) ClearCategoryImageURL() *ProductCategoryUpdate {
	pcu.mutation.ClearCategoryImageURL()
	return pcu
}

// SetLinkOneImageURL sets the "link_one_image_url" field.
func (pcu *ProductCategoryUpdate) SetLinkOneImageURL(s string) *ProductCategoryUpdate {
	pcu.mutation.SetLinkOneImageURL(s)
	return pcu
}

// SetNillableLinkOneImageURL sets the "link_one_image_url" field if the given value is not nil.
func (pcu *ProductCategoryUpdate) SetNillableLinkOneImageURL(s *string) *ProductCategoryUpdate {
	if s != nil {
		pcu.SetLinkOneImageURL(*s)
	}
	return pcu
}

// ClearLinkOneImageURL clears the value of the "link_one_image_url" field.
func (pcu *ProductCategoryUpdate) ClearLinkOneImageURL() *ProductCategoryUpdate {
	pcu.mutation.ClearLinkOneImageURL()
	return pcu
}

// SetLinkTwoImageURL sets the "link_two_image_url" field.
func (pcu *ProductCategoryUpdate) SetLinkTwoImageURL(s string) *ProductCategoryUpdate {
	pcu.mutation.SetLinkTwoImageURL(s)
	return pcu
}

// SetNillableLinkTwoImageURL sets the "link_two_image_url" field if the given value is not nil.
func (pcu *ProductCategoryUpdate) SetNillableLinkTwoImageURL(s *string) *ProductCategoryUpdate {
	if s != nil {
		pcu.SetLinkTwoImageURL(*s)
	}
	return pcu
}

// ClearLinkTwoImageURL clears the value of the "link_two_image_url" field.
func (pcu *ProductCategoryUpdate) ClearLinkTwoImageURL() *ProductCategoryUpdate {
	pcu.mutation.ClearLinkTwoImageURL()
	return pcu
}

// SetDetailScreen sets the "detail_screen" field.
func (pcu *ProductCategoryUpdate) SetDetailScreen(s string) *ProductCategoryUpdate {
	pcu.mutation.SetDetailScreen(s)
	return pcu
}

// SetNillableDetailScreen sets the "detail_screen" field if the given value is not nil.
func (pcu *ProductCategoryUpdate) SetNillableDetailScreen(s *string) *ProductCategoryUpdate {
	if s != nil {
		pcu.SetDetailScreen(*s)
	}
	return pcu
}

// ClearDetailScreen clears the value of the "detail_screen" field.
func (pcu *ProductCategoryUpdate) ClearDetailScreen() *ProductCategoryUpdate {
	pcu.mutation.ClearDetailScreen()
	return pcu
}

// SetShowInSelect sets the "show_in_select" field.
func (pcu *ProductCategoryUpdate) SetShowInSelect(pis productcategory.ShowInSelect) *ProductCategoryUpdate {
	pcu.mutation.SetShowInSelect(pis)
	return pcu
}

// SetNillableShowInSelect sets the "show_in_select" field if the given value is not nil.
func (pcu *ProductCategoryUpdate) SetNillableShowInSelect(pis *productcategory.ShowInSelect) *ProductCategoryUpdate {
	if pis != nil {
		pcu.SetShowInSelect(*pis)
	}
	return pcu
}

// ClearShowInSelect clears the value of the "show_in_select" field.
func (pcu *ProductCategoryUpdate) ClearShowInSelect() *ProductCategoryUpdate {
	pcu.mutation.ClearShowInSelect()
	return pcu
}

// SetProductCategoryTypeID sets the "product_category_type" edge to the ProductCategoryType entity by ID.
func (pcu *ProductCategoryUpdate) SetProductCategoryTypeID(id int) *ProductCategoryUpdate {
	pcu.mutation.SetProductCategoryTypeID(id)
	return pcu
}

// SetNillableProductCategoryTypeID sets the "product_category_type" edge to the ProductCategoryType entity by ID if the given value is not nil.
func (pcu *ProductCategoryUpdate) SetNillableProductCategoryTypeID(id *int) *ProductCategoryUpdate {
	if id != nil {
		pcu = pcu.SetProductCategoryTypeID(*id)
	}
	return pcu
}

// SetProductCategoryType sets the "product_category_type" edge to the ProductCategoryType entity.
func (pcu *ProductCategoryUpdate) SetProductCategoryType(p *ProductCategoryType) *ProductCategoryUpdate {
	return pcu.SetProductCategoryTypeID(p.ID)
}

// SetParentID sets the "parent" edge to the ProductCategory entity by ID.
func (pcu *ProductCategoryUpdate) SetParentID(id int) *ProductCategoryUpdate {
	pcu.mutation.SetParentID(id)
	return pcu
}

// SetNillableParentID sets the "parent" edge to the ProductCategory entity by ID if the given value is not nil.
func (pcu *ProductCategoryUpdate) SetNillableParentID(id *int) *ProductCategoryUpdate {
	if id != nil {
		pcu = pcu.SetParentID(*id)
	}
	return pcu
}

// SetParent sets the "parent" edge to the ProductCategory entity.
func (pcu *ProductCategoryUpdate) SetParent(p *ProductCategory) *ProductCategoryUpdate {
	return pcu.SetParentID(p.ID)
}

// AddChildIDs adds the "children" edge to the ProductCategory entity by IDs.
func (pcu *ProductCategoryUpdate) AddChildIDs(ids ...int) *ProductCategoryUpdate {
	pcu.mutation.AddChildIDs(ids...)
	return pcu
}

// AddChildren adds the "children" edges to the ProductCategory entity.
func (pcu *ProductCategoryUpdate) AddChildren(p ...*ProductCategory) *ProductCategoryUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pcu.AddChildIDs(ids...)
}

// AddPrimaryChildProductCategoryIDs adds the "primary_child_product_categories" edge to the ProductCategory entity by IDs.
func (pcu *ProductCategoryUpdate) AddPrimaryChildProductCategoryIDs(ids ...int) *ProductCategoryUpdate {
	pcu.mutation.AddPrimaryChildProductCategoryIDs(ids...)
	return pcu
}

// AddPrimaryChildProductCategories adds the "primary_child_product_categories" edges to the ProductCategory entity.
func (pcu *ProductCategoryUpdate) AddPrimaryChildProductCategories(p ...*ProductCategory) *ProductCategoryUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pcu.AddPrimaryChildProductCategoryIDs(ids...)
}

// AddPrimaryProductIDs adds the "primary_products" edge to the Product entity by IDs.
func (pcu *ProductCategoryUpdate) AddPrimaryProductIDs(ids ...int) *ProductCategoryUpdate {
	pcu.mutation.AddPrimaryProductIDs(ids...)
	return pcu
}

// AddPrimaryProducts adds the "primary_products" edges to the Product entity.
func (pcu *ProductCategoryUpdate) AddPrimaryProducts(p ...*Product) *ProductCategoryUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pcu.AddPrimaryProductIDs(ids...)
}

// Mutation returns the ProductCategoryMutation object of the builder.
func (pcu *ProductCategoryUpdate) Mutation() *ProductCategoryMutation {
	return pcu.mutation
}

// ClearProductCategoryType clears the "product_category_type" edge to the ProductCategoryType entity.
func (pcu *ProductCategoryUpdate) ClearProductCategoryType() *ProductCategoryUpdate {
	pcu.mutation.ClearProductCategoryType()
	return pcu
}

// ClearParent clears the "parent" edge to the ProductCategory entity.
func (pcu *ProductCategoryUpdate) ClearParent() *ProductCategoryUpdate {
	pcu.mutation.ClearParent()
	return pcu
}

// ClearChildren clears all "children" edges to the ProductCategory entity.
func (pcu *ProductCategoryUpdate) ClearChildren() *ProductCategoryUpdate {
	pcu.mutation.ClearChildren()
	return pcu
}

// RemoveChildIDs removes the "children" edge to ProductCategory entities by IDs.
func (pcu *ProductCategoryUpdate) RemoveChildIDs(ids ...int) *ProductCategoryUpdate {
	pcu.mutation.RemoveChildIDs(ids...)
	return pcu
}

// RemoveChildren removes "children" edges to ProductCategory entities.
func (pcu *ProductCategoryUpdate) RemoveChildren(p ...*ProductCategory) *ProductCategoryUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pcu.RemoveChildIDs(ids...)
}

// ClearPrimaryChildProductCategories clears all "primary_child_product_categories" edges to the ProductCategory entity.
func (pcu *ProductCategoryUpdate) ClearPrimaryChildProductCategories() *ProductCategoryUpdate {
	pcu.mutation.ClearPrimaryChildProductCategories()
	return pcu
}

// RemovePrimaryChildProductCategoryIDs removes the "primary_child_product_categories" edge to ProductCategory entities by IDs.
func (pcu *ProductCategoryUpdate) RemovePrimaryChildProductCategoryIDs(ids ...int) *ProductCategoryUpdate {
	pcu.mutation.RemovePrimaryChildProductCategoryIDs(ids...)
	return pcu
}

// RemovePrimaryChildProductCategories removes "primary_child_product_categories" edges to ProductCategory entities.
func (pcu *ProductCategoryUpdate) RemovePrimaryChildProductCategories(p ...*ProductCategory) *ProductCategoryUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pcu.RemovePrimaryChildProductCategoryIDs(ids...)
}

// ClearPrimaryProducts clears all "primary_products" edges to the Product entity.
func (pcu *ProductCategoryUpdate) ClearPrimaryProducts() *ProductCategoryUpdate {
	pcu.mutation.ClearPrimaryProducts()
	return pcu
}

// RemovePrimaryProductIDs removes the "primary_products" edge to Product entities by IDs.
func (pcu *ProductCategoryUpdate) RemovePrimaryProductIDs(ids ...int) *ProductCategoryUpdate {
	pcu.mutation.RemovePrimaryProductIDs(ids...)
	return pcu
}

// RemovePrimaryProducts removes "primary_products" edges to Product entities.
func (pcu *ProductCategoryUpdate) RemovePrimaryProducts(p ...*Product) *ProductCategoryUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pcu.RemovePrimaryProductIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pcu *ProductCategoryUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	pcu.defaults()
	if len(pcu.hooks) == 0 {
		if err = pcu.check(); err != nil {
			return 0, err
		}
		affected, err = pcu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProductCategoryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pcu.check(); err != nil {
				return 0, err
			}
			pcu.mutation = mutation
			affected, err = pcu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pcu.hooks) - 1; i >= 0; i-- {
			mut = pcu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pcu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pcu *ProductCategoryUpdate) SaveX(ctx context.Context) int {
	affected, err := pcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pcu *ProductCategoryUpdate) Exec(ctx context.Context) error {
	_, err := pcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcu *ProductCategoryUpdate) ExecX(ctx context.Context) {
	if err := pcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pcu *ProductCategoryUpdate) defaults() {
	if _, ok := pcu.mutation.UpdateTime(); !ok {
		v := productcategory.UpdateDefaultUpdateTime()
		pcu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pcu *ProductCategoryUpdate) check() error {
	if v, ok := pcu.mutation.ShowInSelect(); ok {
		if err := productcategory.ShowInSelectValidator(v); err != nil {
			return &ValidationError{Name: "show_in_select", err: fmt.Errorf("ent: validator failed for field \"show_in_select\": %w", err)}
		}
	}
	return nil
}

func (pcu *ProductCategoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   productcategory.Table,
			Columns: productcategory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: productcategory.FieldID,
			},
		},
	}
	if ps := pcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pcu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productcategory.FieldUpdateTime,
		})
	}
	if value, ok := pcu.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productcategory.FieldStringRef,
		})
	}
	if pcu.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productcategory.FieldStringRef,
		})
	}
	if value, ok := pcu.mutation.CategoryName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productcategory.FieldCategoryName,
		})
	}
	if pcu.mutation.CategoryNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productcategory.FieldCategoryName,
		})
	}
	if value, ok := pcu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productcategory.FieldDescription,
		})
	}
	if pcu.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productcategory.FieldDescription,
		})
	}
	if value, ok := pcu.mutation.LongDescription(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productcategory.FieldLongDescription,
		})
	}
	if pcu.mutation.LongDescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productcategory.FieldLongDescription,
		})
	}
	if value, ok := pcu.mutation.CategoryImageURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productcategory.FieldCategoryImageURL,
		})
	}
	if pcu.mutation.CategoryImageURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productcategory.FieldCategoryImageURL,
		})
	}
	if value, ok := pcu.mutation.LinkOneImageURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productcategory.FieldLinkOneImageURL,
		})
	}
	if pcu.mutation.LinkOneImageURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productcategory.FieldLinkOneImageURL,
		})
	}
	if value, ok := pcu.mutation.LinkTwoImageURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productcategory.FieldLinkTwoImageURL,
		})
	}
	if pcu.mutation.LinkTwoImageURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productcategory.FieldLinkTwoImageURL,
		})
	}
	if value, ok := pcu.mutation.DetailScreen(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productcategory.FieldDetailScreen,
		})
	}
	if pcu.mutation.DetailScreenCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productcategory.FieldDetailScreen,
		})
	}
	if value, ok := pcu.mutation.ShowInSelect(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productcategory.FieldShowInSelect,
		})
	}
	if pcu.mutation.ShowInSelectCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productcategory.FieldShowInSelect,
		})
	}
	if pcu.mutation.ProductCategoryTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productcategory.ProductCategoryTypeTable,
			Columns: []string{productcategory.ProductCategoryTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productcategorytype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcu.mutation.ProductCategoryTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productcategory.ProductCategoryTypeTable,
			Columns: []string{productcategory.ProductCategoryTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productcategorytype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pcu.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productcategory.ParentTable,
			Columns: []string{productcategory.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productcategory.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcu.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productcategory.ParentTable,
			Columns: []string{productcategory.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productcategory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pcu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productcategory.ChildrenTable,
			Columns: []string{productcategory.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productcategory.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcu.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !pcu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productcategory.ChildrenTable,
			Columns: []string{productcategory.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productcategory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcu.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productcategory.ChildrenTable,
			Columns: []string{productcategory.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productcategory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pcu.mutation.PrimaryChildProductCategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   productcategory.PrimaryChildProductCategoriesTable,
			Columns: productcategory.PrimaryChildProductCategoriesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productcategory.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcu.mutation.RemovedPrimaryChildProductCategoriesIDs(); len(nodes) > 0 && !pcu.mutation.PrimaryChildProductCategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   productcategory.PrimaryChildProductCategoriesTable,
			Columns: productcategory.PrimaryChildProductCategoriesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productcategory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcu.mutation.PrimaryChildProductCategoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   productcategory.PrimaryChildProductCategoriesTable,
			Columns: productcategory.PrimaryChildProductCategoriesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productcategory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pcu.mutation.PrimaryProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productcategory.PrimaryProductsTable,
			Columns: []string{productcategory.PrimaryProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcu.mutation.RemovedPrimaryProductsIDs(); len(nodes) > 0 && !pcu.mutation.PrimaryProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productcategory.PrimaryProductsTable,
			Columns: []string{productcategory.PrimaryProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcu.mutation.PrimaryProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productcategory.PrimaryProductsTable,
			Columns: []string{productcategory.PrimaryProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productcategory.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ProductCategoryUpdateOne is the builder for updating a single ProductCategory entity.
type ProductCategoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProductCategoryMutation
}

// SetStringRef sets the "string_ref" field.
func (pcuo *ProductCategoryUpdateOne) SetStringRef(s string) *ProductCategoryUpdateOne {
	pcuo.mutation.SetStringRef(s)
	return pcuo
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (pcuo *ProductCategoryUpdateOne) SetNillableStringRef(s *string) *ProductCategoryUpdateOne {
	if s != nil {
		pcuo.SetStringRef(*s)
	}
	return pcuo
}

// ClearStringRef clears the value of the "string_ref" field.
func (pcuo *ProductCategoryUpdateOne) ClearStringRef() *ProductCategoryUpdateOne {
	pcuo.mutation.ClearStringRef()
	return pcuo
}

// SetCategoryName sets the "category_name" field.
func (pcuo *ProductCategoryUpdateOne) SetCategoryName(s string) *ProductCategoryUpdateOne {
	pcuo.mutation.SetCategoryName(s)
	return pcuo
}

// SetNillableCategoryName sets the "category_name" field if the given value is not nil.
func (pcuo *ProductCategoryUpdateOne) SetNillableCategoryName(s *string) *ProductCategoryUpdateOne {
	if s != nil {
		pcuo.SetCategoryName(*s)
	}
	return pcuo
}

// ClearCategoryName clears the value of the "category_name" field.
func (pcuo *ProductCategoryUpdateOne) ClearCategoryName() *ProductCategoryUpdateOne {
	pcuo.mutation.ClearCategoryName()
	return pcuo
}

// SetDescription sets the "description" field.
func (pcuo *ProductCategoryUpdateOne) SetDescription(s string) *ProductCategoryUpdateOne {
	pcuo.mutation.SetDescription(s)
	return pcuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pcuo *ProductCategoryUpdateOne) SetNillableDescription(s *string) *ProductCategoryUpdateOne {
	if s != nil {
		pcuo.SetDescription(*s)
	}
	return pcuo
}

// ClearDescription clears the value of the "description" field.
func (pcuo *ProductCategoryUpdateOne) ClearDescription() *ProductCategoryUpdateOne {
	pcuo.mutation.ClearDescription()
	return pcuo
}

// SetLongDescription sets the "long_description" field.
func (pcuo *ProductCategoryUpdateOne) SetLongDescription(s string) *ProductCategoryUpdateOne {
	pcuo.mutation.SetLongDescription(s)
	return pcuo
}

// SetNillableLongDescription sets the "long_description" field if the given value is not nil.
func (pcuo *ProductCategoryUpdateOne) SetNillableLongDescription(s *string) *ProductCategoryUpdateOne {
	if s != nil {
		pcuo.SetLongDescription(*s)
	}
	return pcuo
}

// ClearLongDescription clears the value of the "long_description" field.
func (pcuo *ProductCategoryUpdateOne) ClearLongDescription() *ProductCategoryUpdateOne {
	pcuo.mutation.ClearLongDescription()
	return pcuo
}

// SetCategoryImageURL sets the "category_image_url" field.
func (pcuo *ProductCategoryUpdateOne) SetCategoryImageURL(s string) *ProductCategoryUpdateOne {
	pcuo.mutation.SetCategoryImageURL(s)
	return pcuo
}

// SetNillableCategoryImageURL sets the "category_image_url" field if the given value is not nil.
func (pcuo *ProductCategoryUpdateOne) SetNillableCategoryImageURL(s *string) *ProductCategoryUpdateOne {
	if s != nil {
		pcuo.SetCategoryImageURL(*s)
	}
	return pcuo
}

// ClearCategoryImageURL clears the value of the "category_image_url" field.
func (pcuo *ProductCategoryUpdateOne) ClearCategoryImageURL() *ProductCategoryUpdateOne {
	pcuo.mutation.ClearCategoryImageURL()
	return pcuo
}

// SetLinkOneImageURL sets the "link_one_image_url" field.
func (pcuo *ProductCategoryUpdateOne) SetLinkOneImageURL(s string) *ProductCategoryUpdateOne {
	pcuo.mutation.SetLinkOneImageURL(s)
	return pcuo
}

// SetNillableLinkOneImageURL sets the "link_one_image_url" field if the given value is not nil.
func (pcuo *ProductCategoryUpdateOne) SetNillableLinkOneImageURL(s *string) *ProductCategoryUpdateOne {
	if s != nil {
		pcuo.SetLinkOneImageURL(*s)
	}
	return pcuo
}

// ClearLinkOneImageURL clears the value of the "link_one_image_url" field.
func (pcuo *ProductCategoryUpdateOne) ClearLinkOneImageURL() *ProductCategoryUpdateOne {
	pcuo.mutation.ClearLinkOneImageURL()
	return pcuo
}

// SetLinkTwoImageURL sets the "link_two_image_url" field.
func (pcuo *ProductCategoryUpdateOne) SetLinkTwoImageURL(s string) *ProductCategoryUpdateOne {
	pcuo.mutation.SetLinkTwoImageURL(s)
	return pcuo
}

// SetNillableLinkTwoImageURL sets the "link_two_image_url" field if the given value is not nil.
func (pcuo *ProductCategoryUpdateOne) SetNillableLinkTwoImageURL(s *string) *ProductCategoryUpdateOne {
	if s != nil {
		pcuo.SetLinkTwoImageURL(*s)
	}
	return pcuo
}

// ClearLinkTwoImageURL clears the value of the "link_two_image_url" field.
func (pcuo *ProductCategoryUpdateOne) ClearLinkTwoImageURL() *ProductCategoryUpdateOne {
	pcuo.mutation.ClearLinkTwoImageURL()
	return pcuo
}

// SetDetailScreen sets the "detail_screen" field.
func (pcuo *ProductCategoryUpdateOne) SetDetailScreen(s string) *ProductCategoryUpdateOne {
	pcuo.mutation.SetDetailScreen(s)
	return pcuo
}

// SetNillableDetailScreen sets the "detail_screen" field if the given value is not nil.
func (pcuo *ProductCategoryUpdateOne) SetNillableDetailScreen(s *string) *ProductCategoryUpdateOne {
	if s != nil {
		pcuo.SetDetailScreen(*s)
	}
	return pcuo
}

// ClearDetailScreen clears the value of the "detail_screen" field.
func (pcuo *ProductCategoryUpdateOne) ClearDetailScreen() *ProductCategoryUpdateOne {
	pcuo.mutation.ClearDetailScreen()
	return pcuo
}

// SetShowInSelect sets the "show_in_select" field.
func (pcuo *ProductCategoryUpdateOne) SetShowInSelect(pis productcategory.ShowInSelect) *ProductCategoryUpdateOne {
	pcuo.mutation.SetShowInSelect(pis)
	return pcuo
}

// SetNillableShowInSelect sets the "show_in_select" field if the given value is not nil.
func (pcuo *ProductCategoryUpdateOne) SetNillableShowInSelect(pis *productcategory.ShowInSelect) *ProductCategoryUpdateOne {
	if pis != nil {
		pcuo.SetShowInSelect(*pis)
	}
	return pcuo
}

// ClearShowInSelect clears the value of the "show_in_select" field.
func (pcuo *ProductCategoryUpdateOne) ClearShowInSelect() *ProductCategoryUpdateOne {
	pcuo.mutation.ClearShowInSelect()
	return pcuo
}

// SetProductCategoryTypeID sets the "product_category_type" edge to the ProductCategoryType entity by ID.
func (pcuo *ProductCategoryUpdateOne) SetProductCategoryTypeID(id int) *ProductCategoryUpdateOne {
	pcuo.mutation.SetProductCategoryTypeID(id)
	return pcuo
}

// SetNillableProductCategoryTypeID sets the "product_category_type" edge to the ProductCategoryType entity by ID if the given value is not nil.
func (pcuo *ProductCategoryUpdateOne) SetNillableProductCategoryTypeID(id *int) *ProductCategoryUpdateOne {
	if id != nil {
		pcuo = pcuo.SetProductCategoryTypeID(*id)
	}
	return pcuo
}

// SetProductCategoryType sets the "product_category_type" edge to the ProductCategoryType entity.
func (pcuo *ProductCategoryUpdateOne) SetProductCategoryType(p *ProductCategoryType) *ProductCategoryUpdateOne {
	return pcuo.SetProductCategoryTypeID(p.ID)
}

// SetParentID sets the "parent" edge to the ProductCategory entity by ID.
func (pcuo *ProductCategoryUpdateOne) SetParentID(id int) *ProductCategoryUpdateOne {
	pcuo.mutation.SetParentID(id)
	return pcuo
}

// SetNillableParentID sets the "parent" edge to the ProductCategory entity by ID if the given value is not nil.
func (pcuo *ProductCategoryUpdateOne) SetNillableParentID(id *int) *ProductCategoryUpdateOne {
	if id != nil {
		pcuo = pcuo.SetParentID(*id)
	}
	return pcuo
}

// SetParent sets the "parent" edge to the ProductCategory entity.
func (pcuo *ProductCategoryUpdateOne) SetParent(p *ProductCategory) *ProductCategoryUpdateOne {
	return pcuo.SetParentID(p.ID)
}

// AddChildIDs adds the "children" edge to the ProductCategory entity by IDs.
func (pcuo *ProductCategoryUpdateOne) AddChildIDs(ids ...int) *ProductCategoryUpdateOne {
	pcuo.mutation.AddChildIDs(ids...)
	return pcuo
}

// AddChildren adds the "children" edges to the ProductCategory entity.
func (pcuo *ProductCategoryUpdateOne) AddChildren(p ...*ProductCategory) *ProductCategoryUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pcuo.AddChildIDs(ids...)
}

// AddPrimaryChildProductCategoryIDs adds the "primary_child_product_categories" edge to the ProductCategory entity by IDs.
func (pcuo *ProductCategoryUpdateOne) AddPrimaryChildProductCategoryIDs(ids ...int) *ProductCategoryUpdateOne {
	pcuo.mutation.AddPrimaryChildProductCategoryIDs(ids...)
	return pcuo
}

// AddPrimaryChildProductCategories adds the "primary_child_product_categories" edges to the ProductCategory entity.
func (pcuo *ProductCategoryUpdateOne) AddPrimaryChildProductCategories(p ...*ProductCategory) *ProductCategoryUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pcuo.AddPrimaryChildProductCategoryIDs(ids...)
}

// AddPrimaryProductIDs adds the "primary_products" edge to the Product entity by IDs.
func (pcuo *ProductCategoryUpdateOne) AddPrimaryProductIDs(ids ...int) *ProductCategoryUpdateOne {
	pcuo.mutation.AddPrimaryProductIDs(ids...)
	return pcuo
}

// AddPrimaryProducts adds the "primary_products" edges to the Product entity.
func (pcuo *ProductCategoryUpdateOne) AddPrimaryProducts(p ...*Product) *ProductCategoryUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pcuo.AddPrimaryProductIDs(ids...)
}

// Mutation returns the ProductCategoryMutation object of the builder.
func (pcuo *ProductCategoryUpdateOne) Mutation() *ProductCategoryMutation {
	return pcuo.mutation
}

// ClearProductCategoryType clears the "product_category_type" edge to the ProductCategoryType entity.
func (pcuo *ProductCategoryUpdateOne) ClearProductCategoryType() *ProductCategoryUpdateOne {
	pcuo.mutation.ClearProductCategoryType()
	return pcuo
}

// ClearParent clears the "parent" edge to the ProductCategory entity.
func (pcuo *ProductCategoryUpdateOne) ClearParent() *ProductCategoryUpdateOne {
	pcuo.mutation.ClearParent()
	return pcuo
}

// ClearChildren clears all "children" edges to the ProductCategory entity.
func (pcuo *ProductCategoryUpdateOne) ClearChildren() *ProductCategoryUpdateOne {
	pcuo.mutation.ClearChildren()
	return pcuo
}

// RemoveChildIDs removes the "children" edge to ProductCategory entities by IDs.
func (pcuo *ProductCategoryUpdateOne) RemoveChildIDs(ids ...int) *ProductCategoryUpdateOne {
	pcuo.mutation.RemoveChildIDs(ids...)
	return pcuo
}

// RemoveChildren removes "children" edges to ProductCategory entities.
func (pcuo *ProductCategoryUpdateOne) RemoveChildren(p ...*ProductCategory) *ProductCategoryUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pcuo.RemoveChildIDs(ids...)
}

// ClearPrimaryChildProductCategories clears all "primary_child_product_categories" edges to the ProductCategory entity.
func (pcuo *ProductCategoryUpdateOne) ClearPrimaryChildProductCategories() *ProductCategoryUpdateOne {
	pcuo.mutation.ClearPrimaryChildProductCategories()
	return pcuo
}

// RemovePrimaryChildProductCategoryIDs removes the "primary_child_product_categories" edge to ProductCategory entities by IDs.
func (pcuo *ProductCategoryUpdateOne) RemovePrimaryChildProductCategoryIDs(ids ...int) *ProductCategoryUpdateOne {
	pcuo.mutation.RemovePrimaryChildProductCategoryIDs(ids...)
	return pcuo
}

// RemovePrimaryChildProductCategories removes "primary_child_product_categories" edges to ProductCategory entities.
func (pcuo *ProductCategoryUpdateOne) RemovePrimaryChildProductCategories(p ...*ProductCategory) *ProductCategoryUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pcuo.RemovePrimaryChildProductCategoryIDs(ids...)
}

// ClearPrimaryProducts clears all "primary_products" edges to the Product entity.
func (pcuo *ProductCategoryUpdateOne) ClearPrimaryProducts() *ProductCategoryUpdateOne {
	pcuo.mutation.ClearPrimaryProducts()
	return pcuo
}

// RemovePrimaryProductIDs removes the "primary_products" edge to Product entities by IDs.
func (pcuo *ProductCategoryUpdateOne) RemovePrimaryProductIDs(ids ...int) *ProductCategoryUpdateOne {
	pcuo.mutation.RemovePrimaryProductIDs(ids...)
	return pcuo
}

// RemovePrimaryProducts removes "primary_products" edges to Product entities.
func (pcuo *ProductCategoryUpdateOne) RemovePrimaryProducts(p ...*Product) *ProductCategoryUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pcuo.RemovePrimaryProductIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pcuo *ProductCategoryUpdateOne) Select(field string, fields ...string) *ProductCategoryUpdateOne {
	pcuo.fields = append([]string{field}, fields...)
	return pcuo
}

// Save executes the query and returns the updated ProductCategory entity.
func (pcuo *ProductCategoryUpdateOne) Save(ctx context.Context) (*ProductCategory, error) {
	var (
		err  error
		node *ProductCategory
	)
	pcuo.defaults()
	if len(pcuo.hooks) == 0 {
		if err = pcuo.check(); err != nil {
			return nil, err
		}
		node, err = pcuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProductCategoryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pcuo.check(); err != nil {
				return nil, err
			}
			pcuo.mutation = mutation
			node, err = pcuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pcuo.hooks) - 1; i >= 0; i-- {
			mut = pcuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pcuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (pcuo *ProductCategoryUpdateOne) SaveX(ctx context.Context) *ProductCategory {
	node, err := pcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pcuo *ProductCategoryUpdateOne) Exec(ctx context.Context) error {
	_, err := pcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcuo *ProductCategoryUpdateOne) ExecX(ctx context.Context) {
	if err := pcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pcuo *ProductCategoryUpdateOne) defaults() {
	if _, ok := pcuo.mutation.UpdateTime(); !ok {
		v := productcategory.UpdateDefaultUpdateTime()
		pcuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pcuo *ProductCategoryUpdateOne) check() error {
	if v, ok := pcuo.mutation.ShowInSelect(); ok {
		if err := productcategory.ShowInSelectValidator(v); err != nil {
			return &ValidationError{Name: "show_in_select", err: fmt.Errorf("ent: validator failed for field \"show_in_select\": %w", err)}
		}
	}
	return nil
}

func (pcuo *ProductCategoryUpdateOne) sqlSave(ctx context.Context) (_node *ProductCategory, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   productcategory.Table,
			Columns: productcategory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: productcategory.FieldID,
			},
		},
	}
	id, ok := pcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ProductCategory.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := pcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, productcategory.FieldID)
		for _, f := range fields {
			if !productcategory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != productcategory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pcuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productcategory.FieldUpdateTime,
		})
	}
	if value, ok := pcuo.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productcategory.FieldStringRef,
		})
	}
	if pcuo.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productcategory.FieldStringRef,
		})
	}
	if value, ok := pcuo.mutation.CategoryName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productcategory.FieldCategoryName,
		})
	}
	if pcuo.mutation.CategoryNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productcategory.FieldCategoryName,
		})
	}
	if value, ok := pcuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productcategory.FieldDescription,
		})
	}
	if pcuo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productcategory.FieldDescription,
		})
	}
	if value, ok := pcuo.mutation.LongDescription(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productcategory.FieldLongDescription,
		})
	}
	if pcuo.mutation.LongDescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productcategory.FieldLongDescription,
		})
	}
	if value, ok := pcuo.mutation.CategoryImageURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productcategory.FieldCategoryImageURL,
		})
	}
	if pcuo.mutation.CategoryImageURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productcategory.FieldCategoryImageURL,
		})
	}
	if value, ok := pcuo.mutation.LinkOneImageURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productcategory.FieldLinkOneImageURL,
		})
	}
	if pcuo.mutation.LinkOneImageURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productcategory.FieldLinkOneImageURL,
		})
	}
	if value, ok := pcuo.mutation.LinkTwoImageURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productcategory.FieldLinkTwoImageURL,
		})
	}
	if pcuo.mutation.LinkTwoImageURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productcategory.FieldLinkTwoImageURL,
		})
	}
	if value, ok := pcuo.mutation.DetailScreen(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productcategory.FieldDetailScreen,
		})
	}
	if pcuo.mutation.DetailScreenCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productcategory.FieldDetailScreen,
		})
	}
	if value, ok := pcuo.mutation.ShowInSelect(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productcategory.FieldShowInSelect,
		})
	}
	if pcuo.mutation.ShowInSelectCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productcategory.FieldShowInSelect,
		})
	}
	if pcuo.mutation.ProductCategoryTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productcategory.ProductCategoryTypeTable,
			Columns: []string{productcategory.ProductCategoryTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productcategorytype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcuo.mutation.ProductCategoryTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productcategory.ProductCategoryTypeTable,
			Columns: []string{productcategory.ProductCategoryTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productcategorytype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pcuo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productcategory.ParentTable,
			Columns: []string{productcategory.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productcategory.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcuo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productcategory.ParentTable,
			Columns: []string{productcategory.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productcategory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pcuo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productcategory.ChildrenTable,
			Columns: []string{productcategory.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productcategory.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcuo.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !pcuo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productcategory.ChildrenTable,
			Columns: []string{productcategory.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productcategory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcuo.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productcategory.ChildrenTable,
			Columns: []string{productcategory.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productcategory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pcuo.mutation.PrimaryChildProductCategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   productcategory.PrimaryChildProductCategoriesTable,
			Columns: productcategory.PrimaryChildProductCategoriesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productcategory.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcuo.mutation.RemovedPrimaryChildProductCategoriesIDs(); len(nodes) > 0 && !pcuo.mutation.PrimaryChildProductCategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   productcategory.PrimaryChildProductCategoriesTable,
			Columns: productcategory.PrimaryChildProductCategoriesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productcategory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcuo.mutation.PrimaryChildProductCategoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   productcategory.PrimaryChildProductCategoriesTable,
			Columns: productcategory.PrimaryChildProductCategoriesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productcategory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pcuo.mutation.PrimaryProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productcategory.PrimaryProductsTable,
			Columns: []string{productcategory.PrimaryProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcuo.mutation.RemovedPrimaryProductsIDs(); len(nodes) > 0 && !pcuo.mutation.PrimaryProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productcategory.PrimaryProductsTable,
			Columns: []string{productcategory.PrimaryProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcuo.mutation.PrimaryProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productcategory.PrimaryProductsTable,
			Columns: []string{productcategory.PrimaryProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProductCategory{config: pcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productcategory.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
