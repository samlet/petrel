// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/predicate"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productcategorycontenttype"
)

// ProductCategoryContentTypeUpdate is the builder for updating ProductCategoryContentType entities.
type ProductCategoryContentTypeUpdate struct {
	config
	hooks    []Hook
	mutation *ProductCategoryContentTypeMutation
}

// Where adds a new predicate for the ProductCategoryContentTypeUpdate builder.
func (pcctu *ProductCategoryContentTypeUpdate) Where(ps ...predicate.ProductCategoryContentType) *ProductCategoryContentTypeUpdate {
	pcctu.mutation.predicates = append(pcctu.mutation.predicates, ps...)
	return pcctu
}

// SetStringRef sets the "string_ref" field.
func (pcctu *ProductCategoryContentTypeUpdate) SetStringRef(s string) *ProductCategoryContentTypeUpdate {
	pcctu.mutation.SetStringRef(s)
	return pcctu
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (pcctu *ProductCategoryContentTypeUpdate) SetNillableStringRef(s *string) *ProductCategoryContentTypeUpdate {
	if s != nil {
		pcctu.SetStringRef(*s)
	}
	return pcctu
}

// ClearStringRef clears the value of the "string_ref" field.
func (pcctu *ProductCategoryContentTypeUpdate) ClearStringRef() *ProductCategoryContentTypeUpdate {
	pcctu.mutation.ClearStringRef()
	return pcctu
}

// SetHasTable sets the "has_table" field.
func (pcctu *ProductCategoryContentTypeUpdate) SetHasTable(pt productcategorycontenttype.HasTable) *ProductCategoryContentTypeUpdate {
	pcctu.mutation.SetHasTable(pt)
	return pcctu
}

// SetNillableHasTable sets the "has_table" field if the given value is not nil.
func (pcctu *ProductCategoryContentTypeUpdate) SetNillableHasTable(pt *productcategorycontenttype.HasTable) *ProductCategoryContentTypeUpdate {
	if pt != nil {
		pcctu.SetHasTable(*pt)
	}
	return pcctu
}

// ClearHasTable clears the value of the "has_table" field.
func (pcctu *ProductCategoryContentTypeUpdate) ClearHasTable() *ProductCategoryContentTypeUpdate {
	pcctu.mutation.ClearHasTable()
	return pcctu
}

// SetDescription sets the "description" field.
func (pcctu *ProductCategoryContentTypeUpdate) SetDescription(s string) *ProductCategoryContentTypeUpdate {
	pcctu.mutation.SetDescription(s)
	return pcctu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pcctu *ProductCategoryContentTypeUpdate) SetNillableDescription(s *string) *ProductCategoryContentTypeUpdate {
	if s != nil {
		pcctu.SetDescription(*s)
	}
	return pcctu
}

// ClearDescription clears the value of the "description" field.
func (pcctu *ProductCategoryContentTypeUpdate) ClearDescription() *ProductCategoryContentTypeUpdate {
	pcctu.mutation.ClearDescription()
	return pcctu
}

// SetParentID sets the "parent" edge to the ProductCategoryContentType entity by ID.
func (pcctu *ProductCategoryContentTypeUpdate) SetParentID(id int) *ProductCategoryContentTypeUpdate {
	pcctu.mutation.SetParentID(id)
	return pcctu
}

// SetNillableParentID sets the "parent" edge to the ProductCategoryContentType entity by ID if the given value is not nil.
func (pcctu *ProductCategoryContentTypeUpdate) SetNillableParentID(id *int) *ProductCategoryContentTypeUpdate {
	if id != nil {
		pcctu = pcctu.SetParentID(*id)
	}
	return pcctu
}

// SetParent sets the "parent" edge to the ProductCategoryContentType entity.
func (pcctu *ProductCategoryContentTypeUpdate) SetParent(p *ProductCategoryContentType) *ProductCategoryContentTypeUpdate {
	return pcctu.SetParentID(p.ID)
}

// AddChildIDs adds the "children" edge to the ProductCategoryContentType entity by IDs.
func (pcctu *ProductCategoryContentTypeUpdate) AddChildIDs(ids ...int) *ProductCategoryContentTypeUpdate {
	pcctu.mutation.AddChildIDs(ids...)
	return pcctu
}

// AddChildren adds the "children" edges to the ProductCategoryContentType entity.
func (pcctu *ProductCategoryContentTypeUpdate) AddChildren(p ...*ProductCategoryContentType) *ProductCategoryContentTypeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pcctu.AddChildIDs(ids...)
}

// AddChildProductCategoryContentTypeIDs adds the "child_product_category_content_types" edge to the ProductCategoryContentType entity by IDs.
func (pcctu *ProductCategoryContentTypeUpdate) AddChildProductCategoryContentTypeIDs(ids ...int) *ProductCategoryContentTypeUpdate {
	pcctu.mutation.AddChildProductCategoryContentTypeIDs(ids...)
	return pcctu
}

// AddChildProductCategoryContentTypes adds the "child_product_category_content_types" edges to the ProductCategoryContentType entity.
func (pcctu *ProductCategoryContentTypeUpdate) AddChildProductCategoryContentTypes(p ...*ProductCategoryContentType) *ProductCategoryContentTypeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pcctu.AddChildProductCategoryContentTypeIDs(ids...)
}

// Mutation returns the ProductCategoryContentTypeMutation object of the builder.
func (pcctu *ProductCategoryContentTypeUpdate) Mutation() *ProductCategoryContentTypeMutation {
	return pcctu.mutation
}

// ClearParent clears the "parent" edge to the ProductCategoryContentType entity.
func (pcctu *ProductCategoryContentTypeUpdate) ClearParent() *ProductCategoryContentTypeUpdate {
	pcctu.mutation.ClearParent()
	return pcctu
}

// ClearChildren clears all "children" edges to the ProductCategoryContentType entity.
func (pcctu *ProductCategoryContentTypeUpdate) ClearChildren() *ProductCategoryContentTypeUpdate {
	pcctu.mutation.ClearChildren()
	return pcctu
}

// RemoveChildIDs removes the "children" edge to ProductCategoryContentType entities by IDs.
func (pcctu *ProductCategoryContentTypeUpdate) RemoveChildIDs(ids ...int) *ProductCategoryContentTypeUpdate {
	pcctu.mutation.RemoveChildIDs(ids...)
	return pcctu
}

// RemoveChildren removes "children" edges to ProductCategoryContentType entities.
func (pcctu *ProductCategoryContentTypeUpdate) RemoveChildren(p ...*ProductCategoryContentType) *ProductCategoryContentTypeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pcctu.RemoveChildIDs(ids...)
}

// ClearChildProductCategoryContentTypes clears all "child_product_category_content_types" edges to the ProductCategoryContentType entity.
func (pcctu *ProductCategoryContentTypeUpdate) ClearChildProductCategoryContentTypes() *ProductCategoryContentTypeUpdate {
	pcctu.mutation.ClearChildProductCategoryContentTypes()
	return pcctu
}

// RemoveChildProductCategoryContentTypeIDs removes the "child_product_category_content_types" edge to ProductCategoryContentType entities by IDs.
func (pcctu *ProductCategoryContentTypeUpdate) RemoveChildProductCategoryContentTypeIDs(ids ...int) *ProductCategoryContentTypeUpdate {
	pcctu.mutation.RemoveChildProductCategoryContentTypeIDs(ids...)
	return pcctu
}

// RemoveChildProductCategoryContentTypes removes "child_product_category_content_types" edges to ProductCategoryContentType entities.
func (pcctu *ProductCategoryContentTypeUpdate) RemoveChildProductCategoryContentTypes(p ...*ProductCategoryContentType) *ProductCategoryContentTypeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pcctu.RemoveChildProductCategoryContentTypeIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pcctu *ProductCategoryContentTypeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	pcctu.defaults()
	if len(pcctu.hooks) == 0 {
		if err = pcctu.check(); err != nil {
			return 0, err
		}
		affected, err = pcctu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProductCategoryContentTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pcctu.check(); err != nil {
				return 0, err
			}
			pcctu.mutation = mutation
			affected, err = pcctu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pcctu.hooks) - 1; i >= 0; i-- {
			mut = pcctu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pcctu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pcctu *ProductCategoryContentTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := pcctu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pcctu *ProductCategoryContentTypeUpdate) Exec(ctx context.Context) error {
	_, err := pcctu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcctu *ProductCategoryContentTypeUpdate) ExecX(ctx context.Context) {
	if err := pcctu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pcctu *ProductCategoryContentTypeUpdate) defaults() {
	if _, ok := pcctu.mutation.UpdateTime(); !ok {
		v := productcategorycontenttype.UpdateDefaultUpdateTime()
		pcctu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pcctu *ProductCategoryContentTypeUpdate) check() error {
	if v, ok := pcctu.mutation.HasTable(); ok {
		if err := productcategorycontenttype.HasTableValidator(v); err != nil {
			return &ValidationError{Name: "has_table", err: fmt.Errorf("ent: validator failed for field \"has_table\": %w", err)}
		}
	}
	return nil
}

func (pcctu *ProductCategoryContentTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   productcategorycontenttype.Table,
			Columns: productcategorycontenttype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: productcategorycontenttype.FieldID,
			},
		},
	}
	if ps := pcctu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pcctu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productcategorycontenttype.FieldUpdateTime,
		})
	}
	if value, ok := pcctu.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productcategorycontenttype.FieldStringRef,
		})
	}
	if pcctu.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productcategorycontenttype.FieldStringRef,
		})
	}
	if value, ok := pcctu.mutation.HasTable(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productcategorycontenttype.FieldHasTable,
		})
	}
	if pcctu.mutation.HasTableCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productcategorycontenttype.FieldHasTable,
		})
	}
	if value, ok := pcctu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productcategorycontenttype.FieldDescription,
		})
	}
	if pcctu.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productcategorycontenttype.FieldDescription,
		})
	}
	if pcctu.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productcategorycontenttype.ParentTable,
			Columns: []string{productcategorycontenttype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productcategorycontenttype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcctu.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productcategorycontenttype.ParentTable,
			Columns: []string{productcategorycontenttype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productcategorycontenttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pcctu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productcategorycontenttype.ChildrenTable,
			Columns: []string{productcategorycontenttype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productcategorycontenttype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcctu.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !pcctu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productcategorycontenttype.ChildrenTable,
			Columns: []string{productcategorycontenttype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productcategorycontenttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcctu.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productcategorycontenttype.ChildrenTable,
			Columns: []string{productcategorycontenttype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productcategorycontenttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pcctu.mutation.ChildProductCategoryContentTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   productcategorycontenttype.ChildProductCategoryContentTypesTable,
			Columns: productcategorycontenttype.ChildProductCategoryContentTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productcategorycontenttype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcctu.mutation.RemovedChildProductCategoryContentTypesIDs(); len(nodes) > 0 && !pcctu.mutation.ChildProductCategoryContentTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   productcategorycontenttype.ChildProductCategoryContentTypesTable,
			Columns: productcategorycontenttype.ChildProductCategoryContentTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productcategorycontenttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcctu.mutation.ChildProductCategoryContentTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   productcategorycontenttype.ChildProductCategoryContentTypesTable,
			Columns: productcategorycontenttype.ChildProductCategoryContentTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productcategorycontenttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pcctu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productcategorycontenttype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ProductCategoryContentTypeUpdateOne is the builder for updating a single ProductCategoryContentType entity.
type ProductCategoryContentTypeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProductCategoryContentTypeMutation
}

// SetStringRef sets the "string_ref" field.
func (pcctuo *ProductCategoryContentTypeUpdateOne) SetStringRef(s string) *ProductCategoryContentTypeUpdateOne {
	pcctuo.mutation.SetStringRef(s)
	return pcctuo
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (pcctuo *ProductCategoryContentTypeUpdateOne) SetNillableStringRef(s *string) *ProductCategoryContentTypeUpdateOne {
	if s != nil {
		pcctuo.SetStringRef(*s)
	}
	return pcctuo
}

// ClearStringRef clears the value of the "string_ref" field.
func (pcctuo *ProductCategoryContentTypeUpdateOne) ClearStringRef() *ProductCategoryContentTypeUpdateOne {
	pcctuo.mutation.ClearStringRef()
	return pcctuo
}

// SetHasTable sets the "has_table" field.
func (pcctuo *ProductCategoryContentTypeUpdateOne) SetHasTable(pt productcategorycontenttype.HasTable) *ProductCategoryContentTypeUpdateOne {
	pcctuo.mutation.SetHasTable(pt)
	return pcctuo
}

// SetNillableHasTable sets the "has_table" field if the given value is not nil.
func (pcctuo *ProductCategoryContentTypeUpdateOne) SetNillableHasTable(pt *productcategorycontenttype.HasTable) *ProductCategoryContentTypeUpdateOne {
	if pt != nil {
		pcctuo.SetHasTable(*pt)
	}
	return pcctuo
}

// ClearHasTable clears the value of the "has_table" field.
func (pcctuo *ProductCategoryContentTypeUpdateOne) ClearHasTable() *ProductCategoryContentTypeUpdateOne {
	pcctuo.mutation.ClearHasTable()
	return pcctuo
}

// SetDescription sets the "description" field.
func (pcctuo *ProductCategoryContentTypeUpdateOne) SetDescription(s string) *ProductCategoryContentTypeUpdateOne {
	pcctuo.mutation.SetDescription(s)
	return pcctuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pcctuo *ProductCategoryContentTypeUpdateOne) SetNillableDescription(s *string) *ProductCategoryContentTypeUpdateOne {
	if s != nil {
		pcctuo.SetDescription(*s)
	}
	return pcctuo
}

// ClearDescription clears the value of the "description" field.
func (pcctuo *ProductCategoryContentTypeUpdateOne) ClearDescription() *ProductCategoryContentTypeUpdateOne {
	pcctuo.mutation.ClearDescription()
	return pcctuo
}

// SetParentID sets the "parent" edge to the ProductCategoryContentType entity by ID.
func (pcctuo *ProductCategoryContentTypeUpdateOne) SetParentID(id int) *ProductCategoryContentTypeUpdateOne {
	pcctuo.mutation.SetParentID(id)
	return pcctuo
}

// SetNillableParentID sets the "parent" edge to the ProductCategoryContentType entity by ID if the given value is not nil.
func (pcctuo *ProductCategoryContentTypeUpdateOne) SetNillableParentID(id *int) *ProductCategoryContentTypeUpdateOne {
	if id != nil {
		pcctuo = pcctuo.SetParentID(*id)
	}
	return pcctuo
}

// SetParent sets the "parent" edge to the ProductCategoryContentType entity.
func (pcctuo *ProductCategoryContentTypeUpdateOne) SetParent(p *ProductCategoryContentType) *ProductCategoryContentTypeUpdateOne {
	return pcctuo.SetParentID(p.ID)
}

// AddChildIDs adds the "children" edge to the ProductCategoryContentType entity by IDs.
func (pcctuo *ProductCategoryContentTypeUpdateOne) AddChildIDs(ids ...int) *ProductCategoryContentTypeUpdateOne {
	pcctuo.mutation.AddChildIDs(ids...)
	return pcctuo
}

// AddChildren adds the "children" edges to the ProductCategoryContentType entity.
func (pcctuo *ProductCategoryContentTypeUpdateOne) AddChildren(p ...*ProductCategoryContentType) *ProductCategoryContentTypeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pcctuo.AddChildIDs(ids...)
}

// AddChildProductCategoryContentTypeIDs adds the "child_product_category_content_types" edge to the ProductCategoryContentType entity by IDs.
func (pcctuo *ProductCategoryContentTypeUpdateOne) AddChildProductCategoryContentTypeIDs(ids ...int) *ProductCategoryContentTypeUpdateOne {
	pcctuo.mutation.AddChildProductCategoryContentTypeIDs(ids...)
	return pcctuo
}

// AddChildProductCategoryContentTypes adds the "child_product_category_content_types" edges to the ProductCategoryContentType entity.
func (pcctuo *ProductCategoryContentTypeUpdateOne) AddChildProductCategoryContentTypes(p ...*ProductCategoryContentType) *ProductCategoryContentTypeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pcctuo.AddChildProductCategoryContentTypeIDs(ids...)
}

// Mutation returns the ProductCategoryContentTypeMutation object of the builder.
func (pcctuo *ProductCategoryContentTypeUpdateOne) Mutation() *ProductCategoryContentTypeMutation {
	return pcctuo.mutation
}

// ClearParent clears the "parent" edge to the ProductCategoryContentType entity.
func (pcctuo *ProductCategoryContentTypeUpdateOne) ClearParent() *ProductCategoryContentTypeUpdateOne {
	pcctuo.mutation.ClearParent()
	return pcctuo
}

// ClearChildren clears all "children" edges to the ProductCategoryContentType entity.
func (pcctuo *ProductCategoryContentTypeUpdateOne) ClearChildren() *ProductCategoryContentTypeUpdateOne {
	pcctuo.mutation.ClearChildren()
	return pcctuo
}

// RemoveChildIDs removes the "children" edge to ProductCategoryContentType entities by IDs.
func (pcctuo *ProductCategoryContentTypeUpdateOne) RemoveChildIDs(ids ...int) *ProductCategoryContentTypeUpdateOne {
	pcctuo.mutation.RemoveChildIDs(ids...)
	return pcctuo
}

// RemoveChildren removes "children" edges to ProductCategoryContentType entities.
func (pcctuo *ProductCategoryContentTypeUpdateOne) RemoveChildren(p ...*ProductCategoryContentType) *ProductCategoryContentTypeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pcctuo.RemoveChildIDs(ids...)
}

// ClearChildProductCategoryContentTypes clears all "child_product_category_content_types" edges to the ProductCategoryContentType entity.
func (pcctuo *ProductCategoryContentTypeUpdateOne) ClearChildProductCategoryContentTypes() *ProductCategoryContentTypeUpdateOne {
	pcctuo.mutation.ClearChildProductCategoryContentTypes()
	return pcctuo
}

// RemoveChildProductCategoryContentTypeIDs removes the "child_product_category_content_types" edge to ProductCategoryContentType entities by IDs.
func (pcctuo *ProductCategoryContentTypeUpdateOne) RemoveChildProductCategoryContentTypeIDs(ids ...int) *ProductCategoryContentTypeUpdateOne {
	pcctuo.mutation.RemoveChildProductCategoryContentTypeIDs(ids...)
	return pcctuo
}

// RemoveChildProductCategoryContentTypes removes "child_product_category_content_types" edges to ProductCategoryContentType entities.
func (pcctuo *ProductCategoryContentTypeUpdateOne) RemoveChildProductCategoryContentTypes(p ...*ProductCategoryContentType) *ProductCategoryContentTypeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pcctuo.RemoveChildProductCategoryContentTypeIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pcctuo *ProductCategoryContentTypeUpdateOne) Select(field string, fields ...string) *ProductCategoryContentTypeUpdateOne {
	pcctuo.fields = append([]string{field}, fields...)
	return pcctuo
}

// Save executes the query and returns the updated ProductCategoryContentType entity.
func (pcctuo *ProductCategoryContentTypeUpdateOne) Save(ctx context.Context) (*ProductCategoryContentType, error) {
	var (
		err  error
		node *ProductCategoryContentType
	)
	pcctuo.defaults()
	if len(pcctuo.hooks) == 0 {
		if err = pcctuo.check(); err != nil {
			return nil, err
		}
		node, err = pcctuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProductCategoryContentTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pcctuo.check(); err != nil {
				return nil, err
			}
			pcctuo.mutation = mutation
			node, err = pcctuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pcctuo.hooks) - 1; i >= 0; i-- {
			mut = pcctuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pcctuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (pcctuo *ProductCategoryContentTypeUpdateOne) SaveX(ctx context.Context) *ProductCategoryContentType {
	node, err := pcctuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pcctuo *ProductCategoryContentTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := pcctuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcctuo *ProductCategoryContentTypeUpdateOne) ExecX(ctx context.Context) {
	if err := pcctuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pcctuo *ProductCategoryContentTypeUpdateOne) defaults() {
	if _, ok := pcctuo.mutation.UpdateTime(); !ok {
		v := productcategorycontenttype.UpdateDefaultUpdateTime()
		pcctuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pcctuo *ProductCategoryContentTypeUpdateOne) check() error {
	if v, ok := pcctuo.mutation.HasTable(); ok {
		if err := productcategorycontenttype.HasTableValidator(v); err != nil {
			return &ValidationError{Name: "has_table", err: fmt.Errorf("ent: validator failed for field \"has_table\": %w", err)}
		}
	}
	return nil
}

func (pcctuo *ProductCategoryContentTypeUpdateOne) sqlSave(ctx context.Context) (_node *ProductCategoryContentType, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   productcategorycontenttype.Table,
			Columns: productcategorycontenttype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: productcategorycontenttype.FieldID,
			},
		},
	}
	id, ok := pcctuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ProductCategoryContentType.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := pcctuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, productcategorycontenttype.FieldID)
		for _, f := range fields {
			if !productcategorycontenttype.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != productcategorycontenttype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pcctuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pcctuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productcategorycontenttype.FieldUpdateTime,
		})
	}
	if value, ok := pcctuo.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productcategorycontenttype.FieldStringRef,
		})
	}
	if pcctuo.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productcategorycontenttype.FieldStringRef,
		})
	}
	if value, ok := pcctuo.mutation.HasTable(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productcategorycontenttype.FieldHasTable,
		})
	}
	if pcctuo.mutation.HasTableCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productcategorycontenttype.FieldHasTable,
		})
	}
	if value, ok := pcctuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productcategorycontenttype.FieldDescription,
		})
	}
	if pcctuo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productcategorycontenttype.FieldDescription,
		})
	}
	if pcctuo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productcategorycontenttype.ParentTable,
			Columns: []string{productcategorycontenttype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productcategorycontenttype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcctuo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productcategorycontenttype.ParentTable,
			Columns: []string{productcategorycontenttype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productcategorycontenttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pcctuo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productcategorycontenttype.ChildrenTable,
			Columns: []string{productcategorycontenttype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productcategorycontenttype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcctuo.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !pcctuo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productcategorycontenttype.ChildrenTable,
			Columns: []string{productcategorycontenttype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productcategorycontenttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcctuo.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productcategorycontenttype.ChildrenTable,
			Columns: []string{productcategorycontenttype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productcategorycontenttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pcctuo.mutation.ChildProductCategoryContentTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   productcategorycontenttype.ChildProductCategoryContentTypesTable,
			Columns: productcategorycontenttype.ChildProductCategoryContentTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productcategorycontenttype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcctuo.mutation.RemovedChildProductCategoryContentTypesIDs(); len(nodes) > 0 && !pcctuo.mutation.ChildProductCategoryContentTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   productcategorycontenttype.ChildProductCategoryContentTypesTable,
			Columns: productcategorycontenttype.ChildProductCategoryContentTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productcategorycontenttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcctuo.mutation.ChildProductCategoryContentTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   productcategorycontenttype.ChildProductCategoryContentTypesTable,
			Columns: productcategorycontenttype.ChildProductCategoryContentTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productcategorycontenttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProductCategoryContentType{config: pcctuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pcctuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productcategorycontenttype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
