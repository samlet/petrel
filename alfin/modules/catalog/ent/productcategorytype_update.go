// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/predicate"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productcategory"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productcategorytype"
)

// ProductCategoryTypeUpdate is the builder for updating ProductCategoryType entities.
type ProductCategoryTypeUpdate struct {
	config
	hooks    []Hook
	mutation *ProductCategoryTypeMutation
}

// Where adds a new predicate for the ProductCategoryTypeUpdate builder.
func (pctu *ProductCategoryTypeUpdate) Where(ps ...predicate.ProductCategoryType) *ProductCategoryTypeUpdate {
	pctu.mutation.predicates = append(pctu.mutation.predicates, ps...)
	return pctu
}

// SetStringRef sets the "string_ref" field.
func (pctu *ProductCategoryTypeUpdate) SetStringRef(s string) *ProductCategoryTypeUpdate {
	pctu.mutation.SetStringRef(s)
	return pctu
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (pctu *ProductCategoryTypeUpdate) SetNillableStringRef(s *string) *ProductCategoryTypeUpdate {
	if s != nil {
		pctu.SetStringRef(*s)
	}
	return pctu
}

// ClearStringRef clears the value of the "string_ref" field.
func (pctu *ProductCategoryTypeUpdate) ClearStringRef() *ProductCategoryTypeUpdate {
	pctu.mutation.ClearStringRef()
	return pctu
}

// SetHasTable sets the "has_table" field.
func (pctu *ProductCategoryTypeUpdate) SetHasTable(pt productcategorytype.HasTable) *ProductCategoryTypeUpdate {
	pctu.mutation.SetHasTable(pt)
	return pctu
}

// SetNillableHasTable sets the "has_table" field if the given value is not nil.
func (pctu *ProductCategoryTypeUpdate) SetNillableHasTable(pt *productcategorytype.HasTable) *ProductCategoryTypeUpdate {
	if pt != nil {
		pctu.SetHasTable(*pt)
	}
	return pctu
}

// ClearHasTable clears the value of the "has_table" field.
func (pctu *ProductCategoryTypeUpdate) ClearHasTable() *ProductCategoryTypeUpdate {
	pctu.mutation.ClearHasTable()
	return pctu
}

// SetDescription sets the "description" field.
func (pctu *ProductCategoryTypeUpdate) SetDescription(s string) *ProductCategoryTypeUpdate {
	pctu.mutation.SetDescription(s)
	return pctu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pctu *ProductCategoryTypeUpdate) SetNillableDescription(s *string) *ProductCategoryTypeUpdate {
	if s != nil {
		pctu.SetDescription(*s)
	}
	return pctu
}

// ClearDescription clears the value of the "description" field.
func (pctu *ProductCategoryTypeUpdate) ClearDescription() *ProductCategoryTypeUpdate {
	pctu.mutation.ClearDescription()
	return pctu
}

// SetParentID sets the "parent" edge to the ProductCategoryType entity by ID.
func (pctu *ProductCategoryTypeUpdate) SetParentID(id int) *ProductCategoryTypeUpdate {
	pctu.mutation.SetParentID(id)
	return pctu
}

// SetNillableParentID sets the "parent" edge to the ProductCategoryType entity by ID if the given value is not nil.
func (pctu *ProductCategoryTypeUpdate) SetNillableParentID(id *int) *ProductCategoryTypeUpdate {
	if id != nil {
		pctu = pctu.SetParentID(*id)
	}
	return pctu
}

// SetParent sets the "parent" edge to the ProductCategoryType entity.
func (pctu *ProductCategoryTypeUpdate) SetParent(p *ProductCategoryType) *ProductCategoryTypeUpdate {
	return pctu.SetParentID(p.ID)
}

// AddChildIDs adds the "children" edge to the ProductCategoryType entity by IDs.
func (pctu *ProductCategoryTypeUpdate) AddChildIDs(ids ...int) *ProductCategoryTypeUpdate {
	pctu.mutation.AddChildIDs(ids...)
	return pctu
}

// AddChildren adds the "children" edges to the ProductCategoryType entity.
func (pctu *ProductCategoryTypeUpdate) AddChildren(p ...*ProductCategoryType) *ProductCategoryTypeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pctu.AddChildIDs(ids...)
}

// AddProductCategoryIDs adds the "product_categories" edge to the ProductCategory entity by IDs.
func (pctu *ProductCategoryTypeUpdate) AddProductCategoryIDs(ids ...int) *ProductCategoryTypeUpdate {
	pctu.mutation.AddProductCategoryIDs(ids...)
	return pctu
}

// AddProductCategories adds the "product_categories" edges to the ProductCategory entity.
func (pctu *ProductCategoryTypeUpdate) AddProductCategories(p ...*ProductCategory) *ProductCategoryTypeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pctu.AddProductCategoryIDs(ids...)
}

// AddChildProductCategoryTypeIDs adds the "child_product_category_types" edge to the ProductCategoryType entity by IDs.
func (pctu *ProductCategoryTypeUpdate) AddChildProductCategoryTypeIDs(ids ...int) *ProductCategoryTypeUpdate {
	pctu.mutation.AddChildProductCategoryTypeIDs(ids...)
	return pctu
}

// AddChildProductCategoryTypes adds the "child_product_category_types" edges to the ProductCategoryType entity.
func (pctu *ProductCategoryTypeUpdate) AddChildProductCategoryTypes(p ...*ProductCategoryType) *ProductCategoryTypeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pctu.AddChildProductCategoryTypeIDs(ids...)
}

// Mutation returns the ProductCategoryTypeMutation object of the builder.
func (pctu *ProductCategoryTypeUpdate) Mutation() *ProductCategoryTypeMutation {
	return pctu.mutation
}

// ClearParent clears the "parent" edge to the ProductCategoryType entity.
func (pctu *ProductCategoryTypeUpdate) ClearParent() *ProductCategoryTypeUpdate {
	pctu.mutation.ClearParent()
	return pctu
}

// ClearChildren clears all "children" edges to the ProductCategoryType entity.
func (pctu *ProductCategoryTypeUpdate) ClearChildren() *ProductCategoryTypeUpdate {
	pctu.mutation.ClearChildren()
	return pctu
}

// RemoveChildIDs removes the "children" edge to ProductCategoryType entities by IDs.
func (pctu *ProductCategoryTypeUpdate) RemoveChildIDs(ids ...int) *ProductCategoryTypeUpdate {
	pctu.mutation.RemoveChildIDs(ids...)
	return pctu
}

// RemoveChildren removes "children" edges to ProductCategoryType entities.
func (pctu *ProductCategoryTypeUpdate) RemoveChildren(p ...*ProductCategoryType) *ProductCategoryTypeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pctu.RemoveChildIDs(ids...)
}

// ClearProductCategories clears all "product_categories" edges to the ProductCategory entity.
func (pctu *ProductCategoryTypeUpdate) ClearProductCategories() *ProductCategoryTypeUpdate {
	pctu.mutation.ClearProductCategories()
	return pctu
}

// RemoveProductCategoryIDs removes the "product_categories" edge to ProductCategory entities by IDs.
func (pctu *ProductCategoryTypeUpdate) RemoveProductCategoryIDs(ids ...int) *ProductCategoryTypeUpdate {
	pctu.mutation.RemoveProductCategoryIDs(ids...)
	return pctu
}

// RemoveProductCategories removes "product_categories" edges to ProductCategory entities.
func (pctu *ProductCategoryTypeUpdate) RemoveProductCategories(p ...*ProductCategory) *ProductCategoryTypeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pctu.RemoveProductCategoryIDs(ids...)
}

// ClearChildProductCategoryTypes clears all "child_product_category_types" edges to the ProductCategoryType entity.
func (pctu *ProductCategoryTypeUpdate) ClearChildProductCategoryTypes() *ProductCategoryTypeUpdate {
	pctu.mutation.ClearChildProductCategoryTypes()
	return pctu
}

// RemoveChildProductCategoryTypeIDs removes the "child_product_category_types" edge to ProductCategoryType entities by IDs.
func (pctu *ProductCategoryTypeUpdate) RemoveChildProductCategoryTypeIDs(ids ...int) *ProductCategoryTypeUpdate {
	pctu.mutation.RemoveChildProductCategoryTypeIDs(ids...)
	return pctu
}

// RemoveChildProductCategoryTypes removes "child_product_category_types" edges to ProductCategoryType entities.
func (pctu *ProductCategoryTypeUpdate) RemoveChildProductCategoryTypes(p ...*ProductCategoryType) *ProductCategoryTypeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pctu.RemoveChildProductCategoryTypeIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pctu *ProductCategoryTypeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	pctu.defaults()
	if len(pctu.hooks) == 0 {
		if err = pctu.check(); err != nil {
			return 0, err
		}
		affected, err = pctu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProductCategoryTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pctu.check(); err != nil {
				return 0, err
			}
			pctu.mutation = mutation
			affected, err = pctu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pctu.hooks) - 1; i >= 0; i-- {
			mut = pctu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pctu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pctu *ProductCategoryTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := pctu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pctu *ProductCategoryTypeUpdate) Exec(ctx context.Context) error {
	_, err := pctu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pctu *ProductCategoryTypeUpdate) ExecX(ctx context.Context) {
	if err := pctu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pctu *ProductCategoryTypeUpdate) defaults() {
	if _, ok := pctu.mutation.UpdateTime(); !ok {
		v := productcategorytype.UpdateDefaultUpdateTime()
		pctu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pctu *ProductCategoryTypeUpdate) check() error {
	if v, ok := pctu.mutation.HasTable(); ok {
		if err := productcategorytype.HasTableValidator(v); err != nil {
			return &ValidationError{Name: "has_table", err: fmt.Errorf("ent: validator failed for field \"has_table\": %w", err)}
		}
	}
	return nil
}

func (pctu *ProductCategoryTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   productcategorytype.Table,
			Columns: productcategorytype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: productcategorytype.FieldID,
			},
		},
	}
	if ps := pctu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pctu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productcategorytype.FieldUpdateTime,
		})
	}
	if value, ok := pctu.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productcategorytype.FieldStringRef,
		})
	}
	if pctu.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productcategorytype.FieldStringRef,
		})
	}
	if value, ok := pctu.mutation.HasTable(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productcategorytype.FieldHasTable,
		})
	}
	if pctu.mutation.HasTableCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productcategorytype.FieldHasTable,
		})
	}
	if value, ok := pctu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productcategorytype.FieldDescription,
		})
	}
	if pctu.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productcategorytype.FieldDescription,
		})
	}
	if pctu.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productcategorytype.ParentTable,
			Columns: []string{productcategorytype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productcategorytype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pctu.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productcategorytype.ParentTable,
			Columns: []string{productcategorytype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productcategorytype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pctu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productcategorytype.ChildrenTable,
			Columns: []string{productcategorytype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productcategorytype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pctu.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !pctu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productcategorytype.ChildrenTable,
			Columns: []string{productcategorytype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productcategorytype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pctu.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productcategorytype.ChildrenTable,
			Columns: []string{productcategorytype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productcategorytype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pctu.mutation.ProductCategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productcategorytype.ProductCategoriesTable,
			Columns: []string{productcategorytype.ProductCategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productcategory.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pctu.mutation.RemovedProductCategoriesIDs(); len(nodes) > 0 && !pctu.mutation.ProductCategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productcategorytype.ProductCategoriesTable,
			Columns: []string{productcategorytype.ProductCategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productcategory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pctu.mutation.ProductCategoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productcategorytype.ProductCategoriesTable,
			Columns: []string{productcategorytype.ProductCategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productcategory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pctu.mutation.ChildProductCategoryTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   productcategorytype.ChildProductCategoryTypesTable,
			Columns: productcategorytype.ChildProductCategoryTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productcategorytype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pctu.mutation.RemovedChildProductCategoryTypesIDs(); len(nodes) > 0 && !pctu.mutation.ChildProductCategoryTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   productcategorytype.ChildProductCategoryTypesTable,
			Columns: productcategorytype.ChildProductCategoryTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productcategorytype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pctu.mutation.ChildProductCategoryTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   productcategorytype.ChildProductCategoryTypesTable,
			Columns: productcategorytype.ChildProductCategoryTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productcategorytype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pctu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productcategorytype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ProductCategoryTypeUpdateOne is the builder for updating a single ProductCategoryType entity.
type ProductCategoryTypeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProductCategoryTypeMutation
}

// SetStringRef sets the "string_ref" field.
func (pctuo *ProductCategoryTypeUpdateOne) SetStringRef(s string) *ProductCategoryTypeUpdateOne {
	pctuo.mutation.SetStringRef(s)
	return pctuo
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (pctuo *ProductCategoryTypeUpdateOne) SetNillableStringRef(s *string) *ProductCategoryTypeUpdateOne {
	if s != nil {
		pctuo.SetStringRef(*s)
	}
	return pctuo
}

// ClearStringRef clears the value of the "string_ref" field.
func (pctuo *ProductCategoryTypeUpdateOne) ClearStringRef() *ProductCategoryTypeUpdateOne {
	pctuo.mutation.ClearStringRef()
	return pctuo
}

// SetHasTable sets the "has_table" field.
func (pctuo *ProductCategoryTypeUpdateOne) SetHasTable(pt productcategorytype.HasTable) *ProductCategoryTypeUpdateOne {
	pctuo.mutation.SetHasTable(pt)
	return pctuo
}

// SetNillableHasTable sets the "has_table" field if the given value is not nil.
func (pctuo *ProductCategoryTypeUpdateOne) SetNillableHasTable(pt *productcategorytype.HasTable) *ProductCategoryTypeUpdateOne {
	if pt != nil {
		pctuo.SetHasTable(*pt)
	}
	return pctuo
}

// ClearHasTable clears the value of the "has_table" field.
func (pctuo *ProductCategoryTypeUpdateOne) ClearHasTable() *ProductCategoryTypeUpdateOne {
	pctuo.mutation.ClearHasTable()
	return pctuo
}

// SetDescription sets the "description" field.
func (pctuo *ProductCategoryTypeUpdateOne) SetDescription(s string) *ProductCategoryTypeUpdateOne {
	pctuo.mutation.SetDescription(s)
	return pctuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pctuo *ProductCategoryTypeUpdateOne) SetNillableDescription(s *string) *ProductCategoryTypeUpdateOne {
	if s != nil {
		pctuo.SetDescription(*s)
	}
	return pctuo
}

// ClearDescription clears the value of the "description" field.
func (pctuo *ProductCategoryTypeUpdateOne) ClearDescription() *ProductCategoryTypeUpdateOne {
	pctuo.mutation.ClearDescription()
	return pctuo
}

// SetParentID sets the "parent" edge to the ProductCategoryType entity by ID.
func (pctuo *ProductCategoryTypeUpdateOne) SetParentID(id int) *ProductCategoryTypeUpdateOne {
	pctuo.mutation.SetParentID(id)
	return pctuo
}

// SetNillableParentID sets the "parent" edge to the ProductCategoryType entity by ID if the given value is not nil.
func (pctuo *ProductCategoryTypeUpdateOne) SetNillableParentID(id *int) *ProductCategoryTypeUpdateOne {
	if id != nil {
		pctuo = pctuo.SetParentID(*id)
	}
	return pctuo
}

// SetParent sets the "parent" edge to the ProductCategoryType entity.
func (pctuo *ProductCategoryTypeUpdateOne) SetParent(p *ProductCategoryType) *ProductCategoryTypeUpdateOne {
	return pctuo.SetParentID(p.ID)
}

// AddChildIDs adds the "children" edge to the ProductCategoryType entity by IDs.
func (pctuo *ProductCategoryTypeUpdateOne) AddChildIDs(ids ...int) *ProductCategoryTypeUpdateOne {
	pctuo.mutation.AddChildIDs(ids...)
	return pctuo
}

// AddChildren adds the "children" edges to the ProductCategoryType entity.
func (pctuo *ProductCategoryTypeUpdateOne) AddChildren(p ...*ProductCategoryType) *ProductCategoryTypeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pctuo.AddChildIDs(ids...)
}

// AddProductCategoryIDs adds the "product_categories" edge to the ProductCategory entity by IDs.
func (pctuo *ProductCategoryTypeUpdateOne) AddProductCategoryIDs(ids ...int) *ProductCategoryTypeUpdateOne {
	pctuo.mutation.AddProductCategoryIDs(ids...)
	return pctuo
}

// AddProductCategories adds the "product_categories" edges to the ProductCategory entity.
func (pctuo *ProductCategoryTypeUpdateOne) AddProductCategories(p ...*ProductCategory) *ProductCategoryTypeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pctuo.AddProductCategoryIDs(ids...)
}

// AddChildProductCategoryTypeIDs adds the "child_product_category_types" edge to the ProductCategoryType entity by IDs.
func (pctuo *ProductCategoryTypeUpdateOne) AddChildProductCategoryTypeIDs(ids ...int) *ProductCategoryTypeUpdateOne {
	pctuo.mutation.AddChildProductCategoryTypeIDs(ids...)
	return pctuo
}

// AddChildProductCategoryTypes adds the "child_product_category_types" edges to the ProductCategoryType entity.
func (pctuo *ProductCategoryTypeUpdateOne) AddChildProductCategoryTypes(p ...*ProductCategoryType) *ProductCategoryTypeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pctuo.AddChildProductCategoryTypeIDs(ids...)
}

// Mutation returns the ProductCategoryTypeMutation object of the builder.
func (pctuo *ProductCategoryTypeUpdateOne) Mutation() *ProductCategoryTypeMutation {
	return pctuo.mutation
}

// ClearParent clears the "parent" edge to the ProductCategoryType entity.
func (pctuo *ProductCategoryTypeUpdateOne) ClearParent() *ProductCategoryTypeUpdateOne {
	pctuo.mutation.ClearParent()
	return pctuo
}

// ClearChildren clears all "children" edges to the ProductCategoryType entity.
func (pctuo *ProductCategoryTypeUpdateOne) ClearChildren() *ProductCategoryTypeUpdateOne {
	pctuo.mutation.ClearChildren()
	return pctuo
}

// RemoveChildIDs removes the "children" edge to ProductCategoryType entities by IDs.
func (pctuo *ProductCategoryTypeUpdateOne) RemoveChildIDs(ids ...int) *ProductCategoryTypeUpdateOne {
	pctuo.mutation.RemoveChildIDs(ids...)
	return pctuo
}

// RemoveChildren removes "children" edges to ProductCategoryType entities.
func (pctuo *ProductCategoryTypeUpdateOne) RemoveChildren(p ...*ProductCategoryType) *ProductCategoryTypeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pctuo.RemoveChildIDs(ids...)
}

// ClearProductCategories clears all "product_categories" edges to the ProductCategory entity.
func (pctuo *ProductCategoryTypeUpdateOne) ClearProductCategories() *ProductCategoryTypeUpdateOne {
	pctuo.mutation.ClearProductCategories()
	return pctuo
}

// RemoveProductCategoryIDs removes the "product_categories" edge to ProductCategory entities by IDs.
func (pctuo *ProductCategoryTypeUpdateOne) RemoveProductCategoryIDs(ids ...int) *ProductCategoryTypeUpdateOne {
	pctuo.mutation.RemoveProductCategoryIDs(ids...)
	return pctuo
}

// RemoveProductCategories removes "product_categories" edges to ProductCategory entities.
func (pctuo *ProductCategoryTypeUpdateOne) RemoveProductCategories(p ...*ProductCategory) *ProductCategoryTypeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pctuo.RemoveProductCategoryIDs(ids...)
}

// ClearChildProductCategoryTypes clears all "child_product_category_types" edges to the ProductCategoryType entity.
func (pctuo *ProductCategoryTypeUpdateOne) ClearChildProductCategoryTypes() *ProductCategoryTypeUpdateOne {
	pctuo.mutation.ClearChildProductCategoryTypes()
	return pctuo
}

// RemoveChildProductCategoryTypeIDs removes the "child_product_category_types" edge to ProductCategoryType entities by IDs.
func (pctuo *ProductCategoryTypeUpdateOne) RemoveChildProductCategoryTypeIDs(ids ...int) *ProductCategoryTypeUpdateOne {
	pctuo.mutation.RemoveChildProductCategoryTypeIDs(ids...)
	return pctuo
}

// RemoveChildProductCategoryTypes removes "child_product_category_types" edges to ProductCategoryType entities.
func (pctuo *ProductCategoryTypeUpdateOne) RemoveChildProductCategoryTypes(p ...*ProductCategoryType) *ProductCategoryTypeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pctuo.RemoveChildProductCategoryTypeIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pctuo *ProductCategoryTypeUpdateOne) Select(field string, fields ...string) *ProductCategoryTypeUpdateOne {
	pctuo.fields = append([]string{field}, fields...)
	return pctuo
}

// Save executes the query and returns the updated ProductCategoryType entity.
func (pctuo *ProductCategoryTypeUpdateOne) Save(ctx context.Context) (*ProductCategoryType, error) {
	var (
		err  error
		node *ProductCategoryType
	)
	pctuo.defaults()
	if len(pctuo.hooks) == 0 {
		if err = pctuo.check(); err != nil {
			return nil, err
		}
		node, err = pctuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProductCategoryTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pctuo.check(); err != nil {
				return nil, err
			}
			pctuo.mutation = mutation
			node, err = pctuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pctuo.hooks) - 1; i >= 0; i-- {
			mut = pctuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pctuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (pctuo *ProductCategoryTypeUpdateOne) SaveX(ctx context.Context) *ProductCategoryType {
	node, err := pctuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pctuo *ProductCategoryTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := pctuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pctuo *ProductCategoryTypeUpdateOne) ExecX(ctx context.Context) {
	if err := pctuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pctuo *ProductCategoryTypeUpdateOne) defaults() {
	if _, ok := pctuo.mutation.UpdateTime(); !ok {
		v := productcategorytype.UpdateDefaultUpdateTime()
		pctuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pctuo *ProductCategoryTypeUpdateOne) check() error {
	if v, ok := pctuo.mutation.HasTable(); ok {
		if err := productcategorytype.HasTableValidator(v); err != nil {
			return &ValidationError{Name: "has_table", err: fmt.Errorf("ent: validator failed for field \"has_table\": %w", err)}
		}
	}
	return nil
}

func (pctuo *ProductCategoryTypeUpdateOne) sqlSave(ctx context.Context) (_node *ProductCategoryType, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   productcategorytype.Table,
			Columns: productcategorytype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: productcategorytype.FieldID,
			},
		},
	}
	id, ok := pctuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ProductCategoryType.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := pctuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, productcategorytype.FieldID)
		for _, f := range fields {
			if !productcategorytype.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != productcategorytype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pctuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pctuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productcategorytype.FieldUpdateTime,
		})
	}
	if value, ok := pctuo.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productcategorytype.FieldStringRef,
		})
	}
	if pctuo.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productcategorytype.FieldStringRef,
		})
	}
	if value, ok := pctuo.mutation.HasTable(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productcategorytype.FieldHasTable,
		})
	}
	if pctuo.mutation.HasTableCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productcategorytype.FieldHasTable,
		})
	}
	if value, ok := pctuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productcategorytype.FieldDescription,
		})
	}
	if pctuo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productcategorytype.FieldDescription,
		})
	}
	if pctuo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productcategorytype.ParentTable,
			Columns: []string{productcategorytype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productcategorytype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pctuo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productcategorytype.ParentTable,
			Columns: []string{productcategorytype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productcategorytype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pctuo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productcategorytype.ChildrenTable,
			Columns: []string{productcategorytype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productcategorytype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pctuo.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !pctuo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productcategorytype.ChildrenTable,
			Columns: []string{productcategorytype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productcategorytype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pctuo.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productcategorytype.ChildrenTable,
			Columns: []string{productcategorytype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productcategorytype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pctuo.mutation.ProductCategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productcategorytype.ProductCategoriesTable,
			Columns: []string{productcategorytype.ProductCategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productcategory.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pctuo.mutation.RemovedProductCategoriesIDs(); len(nodes) > 0 && !pctuo.mutation.ProductCategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productcategorytype.ProductCategoriesTable,
			Columns: []string{productcategorytype.ProductCategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productcategory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pctuo.mutation.ProductCategoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productcategorytype.ProductCategoriesTable,
			Columns: []string{productcategorytype.ProductCategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productcategory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pctuo.mutation.ChildProductCategoryTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   productcategorytype.ChildProductCategoryTypesTable,
			Columns: productcategorytype.ChildProductCategoryTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productcategorytype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pctuo.mutation.RemovedChildProductCategoryTypesIDs(); len(nodes) > 0 && !pctuo.mutation.ChildProductCategoryTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   productcategorytype.ChildProductCategoryTypesTable,
			Columns: productcategorytype.ChildProductCategoryTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productcategorytype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pctuo.mutation.ChildProductCategoryTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   productcategorytype.ChildProductCategoryTypesTable,
			Columns: productcategorytype.ChildProductCategoryTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productcategorytype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProductCategoryType{config: pctuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pctuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productcategorytype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
