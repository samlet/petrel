// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productconfigitem"
)

// ProductConfigItem is the model entity for the ProductConfigItem schema.
type ProductConfigItem struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// StringRef holds the value of the "string_ref" field.
	StringRef string `json:"string_ref,omitempty"`
	// ConfigItemTypeID holds the value of the "config_item_type_id" field.
	ConfigItemTypeID int `json:"config_item_type_id,omitempty"`
	// ConfigItemName holds the value of the "config_item_name" field.
	ConfigItemName string `json:"config_item_name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// LongDescription holds the value of the "long_description" field.
	LongDescription string `json:"long_description,omitempty"`
	// ImageURL holds the value of the "image_url" field.
	ImageURL string `json:"image_url,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProductConfigItem) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case productconfigitem.FieldID, productconfigitem.FieldConfigItemTypeID:
			values[i] = new(sql.NullInt64)
		case productconfigitem.FieldStringRef, productconfigitem.FieldConfigItemName, productconfigitem.FieldDescription, productconfigitem.FieldLongDescription, productconfigitem.FieldImageURL:
			values[i] = new(sql.NullString)
		case productconfigitem.FieldCreateTime, productconfigitem.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ProductConfigItem", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProductConfigItem fields.
func (pci *ProductConfigItem) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case productconfigitem.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pci.ID = int(value.Int64)
		case productconfigitem.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				pci.CreateTime = value.Time
			}
		case productconfigitem.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				pci.UpdateTime = value.Time
			}
		case productconfigitem.FieldStringRef:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field string_ref", values[i])
			} else if value.Valid {
				pci.StringRef = value.String
			}
		case productconfigitem.FieldConfigItemTypeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field config_item_type_id", values[i])
			} else if value.Valid {
				pci.ConfigItemTypeID = int(value.Int64)
			}
		case productconfigitem.FieldConfigItemName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field config_item_name", values[i])
			} else if value.Valid {
				pci.ConfigItemName = value.String
			}
		case productconfigitem.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				pci.Description = value.String
			}
		case productconfigitem.FieldLongDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field long_description", values[i])
			} else if value.Valid {
				pci.LongDescription = value.String
			}
		case productconfigitem.FieldImageURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field image_url", values[i])
			} else if value.Valid {
				pci.ImageURL = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this ProductConfigItem.
// Note that you need to call ProductConfigItem.Unwrap() before calling this method if this ProductConfigItem
// was returned from a transaction, and the transaction was committed or rolled back.
func (pci *ProductConfigItem) Update() *ProductConfigItemUpdateOne {
	return (&ProductConfigItemClient{config: pci.config}).UpdateOne(pci)
}

// Unwrap unwraps the ProductConfigItem entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pci *ProductConfigItem) Unwrap() *ProductConfigItem {
	tx, ok := pci.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProductConfigItem is not a transactional entity")
	}
	pci.config.driver = tx.drv
	return pci
}

// String implements the fmt.Stringer.
func (pci *ProductConfigItem) String() string {
	var builder strings.Builder
	builder.WriteString("ProductConfigItem(")
	builder.WriteString(fmt.Sprintf("id=%v", pci.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(pci.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(pci.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", string_ref=")
	builder.WriteString(pci.StringRef)
	builder.WriteString(", config_item_type_id=")
	builder.WriteString(fmt.Sprintf("%v", pci.ConfigItemTypeID))
	builder.WriteString(", config_item_name=")
	builder.WriteString(pci.ConfigItemName)
	builder.WriteString(", description=")
	builder.WriteString(pci.Description)
	builder.WriteString(", long_description=")
	builder.WriteString(pci.LongDescription)
	builder.WriteString(", image_url=")
	builder.WriteString(pci.ImageURL)
	builder.WriteByte(')')
	return builder.String()
}

// ProductConfigItems is a parsable slice of ProductConfigItem.
type ProductConfigItems []*ProductConfigItem

func (pci ProductConfigItems) config(cfg config) {
	for _i := range pci {
		pci[_i].config = cfg
	}
}
