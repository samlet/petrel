// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/predicate"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productconfigitem"
)

// ProductConfigItemUpdate is the builder for updating ProductConfigItem entities.
type ProductConfigItemUpdate struct {
	config
	hooks    []Hook
	mutation *ProductConfigItemMutation
}

// Where adds a new predicate for the ProductConfigItemUpdate builder.
func (pciu *ProductConfigItemUpdate) Where(ps ...predicate.ProductConfigItem) *ProductConfigItemUpdate {
	pciu.mutation.predicates = append(pciu.mutation.predicates, ps...)
	return pciu
}

// SetStringRef sets the "string_ref" field.
func (pciu *ProductConfigItemUpdate) SetStringRef(s string) *ProductConfigItemUpdate {
	pciu.mutation.SetStringRef(s)
	return pciu
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (pciu *ProductConfigItemUpdate) SetNillableStringRef(s *string) *ProductConfigItemUpdate {
	if s != nil {
		pciu.SetStringRef(*s)
	}
	return pciu
}

// ClearStringRef clears the value of the "string_ref" field.
func (pciu *ProductConfigItemUpdate) ClearStringRef() *ProductConfigItemUpdate {
	pciu.mutation.ClearStringRef()
	return pciu
}

// SetConfigItemTypeID sets the "config_item_type_id" field.
func (pciu *ProductConfigItemUpdate) SetConfigItemTypeID(i int) *ProductConfigItemUpdate {
	pciu.mutation.ResetConfigItemTypeID()
	pciu.mutation.SetConfigItemTypeID(i)
	return pciu
}

// SetNillableConfigItemTypeID sets the "config_item_type_id" field if the given value is not nil.
func (pciu *ProductConfigItemUpdate) SetNillableConfigItemTypeID(i *int) *ProductConfigItemUpdate {
	if i != nil {
		pciu.SetConfigItemTypeID(*i)
	}
	return pciu
}

// AddConfigItemTypeID adds i to the "config_item_type_id" field.
func (pciu *ProductConfigItemUpdate) AddConfigItemTypeID(i int) *ProductConfigItemUpdate {
	pciu.mutation.AddConfigItemTypeID(i)
	return pciu
}

// ClearConfigItemTypeID clears the value of the "config_item_type_id" field.
func (pciu *ProductConfigItemUpdate) ClearConfigItemTypeID() *ProductConfigItemUpdate {
	pciu.mutation.ClearConfigItemTypeID()
	return pciu
}

// SetConfigItemName sets the "config_item_name" field.
func (pciu *ProductConfigItemUpdate) SetConfigItemName(s string) *ProductConfigItemUpdate {
	pciu.mutation.SetConfigItemName(s)
	return pciu
}

// SetNillableConfigItemName sets the "config_item_name" field if the given value is not nil.
func (pciu *ProductConfigItemUpdate) SetNillableConfigItemName(s *string) *ProductConfigItemUpdate {
	if s != nil {
		pciu.SetConfigItemName(*s)
	}
	return pciu
}

// ClearConfigItemName clears the value of the "config_item_name" field.
func (pciu *ProductConfigItemUpdate) ClearConfigItemName() *ProductConfigItemUpdate {
	pciu.mutation.ClearConfigItemName()
	return pciu
}

// SetDescription sets the "description" field.
func (pciu *ProductConfigItemUpdate) SetDescription(s string) *ProductConfigItemUpdate {
	pciu.mutation.SetDescription(s)
	return pciu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pciu *ProductConfigItemUpdate) SetNillableDescription(s *string) *ProductConfigItemUpdate {
	if s != nil {
		pciu.SetDescription(*s)
	}
	return pciu
}

// ClearDescription clears the value of the "description" field.
func (pciu *ProductConfigItemUpdate) ClearDescription() *ProductConfigItemUpdate {
	pciu.mutation.ClearDescription()
	return pciu
}

// SetLongDescription sets the "long_description" field.
func (pciu *ProductConfigItemUpdate) SetLongDescription(s string) *ProductConfigItemUpdate {
	pciu.mutation.SetLongDescription(s)
	return pciu
}

// SetNillableLongDescription sets the "long_description" field if the given value is not nil.
func (pciu *ProductConfigItemUpdate) SetNillableLongDescription(s *string) *ProductConfigItemUpdate {
	if s != nil {
		pciu.SetLongDescription(*s)
	}
	return pciu
}

// ClearLongDescription clears the value of the "long_description" field.
func (pciu *ProductConfigItemUpdate) ClearLongDescription() *ProductConfigItemUpdate {
	pciu.mutation.ClearLongDescription()
	return pciu
}

// SetImageURL sets the "image_url" field.
func (pciu *ProductConfigItemUpdate) SetImageURL(s string) *ProductConfigItemUpdate {
	pciu.mutation.SetImageURL(s)
	return pciu
}

// SetNillableImageURL sets the "image_url" field if the given value is not nil.
func (pciu *ProductConfigItemUpdate) SetNillableImageURL(s *string) *ProductConfigItemUpdate {
	if s != nil {
		pciu.SetImageURL(*s)
	}
	return pciu
}

// ClearImageURL clears the value of the "image_url" field.
func (pciu *ProductConfigItemUpdate) ClearImageURL() *ProductConfigItemUpdate {
	pciu.mutation.ClearImageURL()
	return pciu
}

// Mutation returns the ProductConfigItemMutation object of the builder.
func (pciu *ProductConfigItemUpdate) Mutation() *ProductConfigItemMutation {
	return pciu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pciu *ProductConfigItemUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	pciu.defaults()
	if len(pciu.hooks) == 0 {
		affected, err = pciu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProductConfigItemMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pciu.mutation = mutation
			affected, err = pciu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pciu.hooks) - 1; i >= 0; i-- {
			mut = pciu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pciu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pciu *ProductConfigItemUpdate) SaveX(ctx context.Context) int {
	affected, err := pciu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pciu *ProductConfigItemUpdate) Exec(ctx context.Context) error {
	_, err := pciu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pciu *ProductConfigItemUpdate) ExecX(ctx context.Context) {
	if err := pciu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pciu *ProductConfigItemUpdate) defaults() {
	if _, ok := pciu.mutation.UpdateTime(); !ok {
		v := productconfigitem.UpdateDefaultUpdateTime()
		pciu.mutation.SetUpdateTime(v)
	}
}

func (pciu *ProductConfigItemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   productconfigitem.Table,
			Columns: productconfigitem.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: productconfigitem.FieldID,
			},
		},
	}
	if ps := pciu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pciu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productconfigitem.FieldUpdateTime,
		})
	}
	if value, ok := pciu.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productconfigitem.FieldStringRef,
		})
	}
	if pciu.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productconfigitem.FieldStringRef,
		})
	}
	if value, ok := pciu.mutation.ConfigItemTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productconfigitem.FieldConfigItemTypeID,
		})
	}
	if value, ok := pciu.mutation.AddedConfigItemTypeID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productconfigitem.FieldConfigItemTypeID,
		})
	}
	if pciu.mutation.ConfigItemTypeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: productconfigitem.FieldConfigItemTypeID,
		})
	}
	if value, ok := pciu.mutation.ConfigItemName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productconfigitem.FieldConfigItemName,
		})
	}
	if pciu.mutation.ConfigItemNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productconfigitem.FieldConfigItemName,
		})
	}
	if value, ok := pciu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productconfigitem.FieldDescription,
		})
	}
	if pciu.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productconfigitem.FieldDescription,
		})
	}
	if value, ok := pciu.mutation.LongDescription(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productconfigitem.FieldLongDescription,
		})
	}
	if pciu.mutation.LongDescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productconfigitem.FieldLongDescription,
		})
	}
	if value, ok := pciu.mutation.ImageURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productconfigitem.FieldImageURL,
		})
	}
	if pciu.mutation.ImageURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productconfigitem.FieldImageURL,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pciu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productconfigitem.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ProductConfigItemUpdateOne is the builder for updating a single ProductConfigItem entity.
type ProductConfigItemUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProductConfigItemMutation
}

// SetStringRef sets the "string_ref" field.
func (pciuo *ProductConfigItemUpdateOne) SetStringRef(s string) *ProductConfigItemUpdateOne {
	pciuo.mutation.SetStringRef(s)
	return pciuo
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (pciuo *ProductConfigItemUpdateOne) SetNillableStringRef(s *string) *ProductConfigItemUpdateOne {
	if s != nil {
		pciuo.SetStringRef(*s)
	}
	return pciuo
}

// ClearStringRef clears the value of the "string_ref" field.
func (pciuo *ProductConfigItemUpdateOne) ClearStringRef() *ProductConfigItemUpdateOne {
	pciuo.mutation.ClearStringRef()
	return pciuo
}

// SetConfigItemTypeID sets the "config_item_type_id" field.
func (pciuo *ProductConfigItemUpdateOne) SetConfigItemTypeID(i int) *ProductConfigItemUpdateOne {
	pciuo.mutation.ResetConfigItemTypeID()
	pciuo.mutation.SetConfigItemTypeID(i)
	return pciuo
}

// SetNillableConfigItemTypeID sets the "config_item_type_id" field if the given value is not nil.
func (pciuo *ProductConfigItemUpdateOne) SetNillableConfigItemTypeID(i *int) *ProductConfigItemUpdateOne {
	if i != nil {
		pciuo.SetConfigItemTypeID(*i)
	}
	return pciuo
}

// AddConfigItemTypeID adds i to the "config_item_type_id" field.
func (pciuo *ProductConfigItemUpdateOne) AddConfigItemTypeID(i int) *ProductConfigItemUpdateOne {
	pciuo.mutation.AddConfigItemTypeID(i)
	return pciuo
}

// ClearConfigItemTypeID clears the value of the "config_item_type_id" field.
func (pciuo *ProductConfigItemUpdateOne) ClearConfigItemTypeID() *ProductConfigItemUpdateOne {
	pciuo.mutation.ClearConfigItemTypeID()
	return pciuo
}

// SetConfigItemName sets the "config_item_name" field.
func (pciuo *ProductConfigItemUpdateOne) SetConfigItemName(s string) *ProductConfigItemUpdateOne {
	pciuo.mutation.SetConfigItemName(s)
	return pciuo
}

// SetNillableConfigItemName sets the "config_item_name" field if the given value is not nil.
func (pciuo *ProductConfigItemUpdateOne) SetNillableConfigItemName(s *string) *ProductConfigItemUpdateOne {
	if s != nil {
		pciuo.SetConfigItemName(*s)
	}
	return pciuo
}

// ClearConfigItemName clears the value of the "config_item_name" field.
func (pciuo *ProductConfigItemUpdateOne) ClearConfigItemName() *ProductConfigItemUpdateOne {
	pciuo.mutation.ClearConfigItemName()
	return pciuo
}

// SetDescription sets the "description" field.
func (pciuo *ProductConfigItemUpdateOne) SetDescription(s string) *ProductConfigItemUpdateOne {
	pciuo.mutation.SetDescription(s)
	return pciuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pciuo *ProductConfigItemUpdateOne) SetNillableDescription(s *string) *ProductConfigItemUpdateOne {
	if s != nil {
		pciuo.SetDescription(*s)
	}
	return pciuo
}

// ClearDescription clears the value of the "description" field.
func (pciuo *ProductConfigItemUpdateOne) ClearDescription() *ProductConfigItemUpdateOne {
	pciuo.mutation.ClearDescription()
	return pciuo
}

// SetLongDescription sets the "long_description" field.
func (pciuo *ProductConfigItemUpdateOne) SetLongDescription(s string) *ProductConfigItemUpdateOne {
	pciuo.mutation.SetLongDescription(s)
	return pciuo
}

// SetNillableLongDescription sets the "long_description" field if the given value is not nil.
func (pciuo *ProductConfigItemUpdateOne) SetNillableLongDescription(s *string) *ProductConfigItemUpdateOne {
	if s != nil {
		pciuo.SetLongDescription(*s)
	}
	return pciuo
}

// ClearLongDescription clears the value of the "long_description" field.
func (pciuo *ProductConfigItemUpdateOne) ClearLongDescription() *ProductConfigItemUpdateOne {
	pciuo.mutation.ClearLongDescription()
	return pciuo
}

// SetImageURL sets the "image_url" field.
func (pciuo *ProductConfigItemUpdateOne) SetImageURL(s string) *ProductConfigItemUpdateOne {
	pciuo.mutation.SetImageURL(s)
	return pciuo
}

// SetNillableImageURL sets the "image_url" field if the given value is not nil.
func (pciuo *ProductConfigItemUpdateOne) SetNillableImageURL(s *string) *ProductConfigItemUpdateOne {
	if s != nil {
		pciuo.SetImageURL(*s)
	}
	return pciuo
}

// ClearImageURL clears the value of the "image_url" field.
func (pciuo *ProductConfigItemUpdateOne) ClearImageURL() *ProductConfigItemUpdateOne {
	pciuo.mutation.ClearImageURL()
	return pciuo
}

// Mutation returns the ProductConfigItemMutation object of the builder.
func (pciuo *ProductConfigItemUpdateOne) Mutation() *ProductConfigItemMutation {
	return pciuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pciuo *ProductConfigItemUpdateOne) Select(field string, fields ...string) *ProductConfigItemUpdateOne {
	pciuo.fields = append([]string{field}, fields...)
	return pciuo
}

// Save executes the query and returns the updated ProductConfigItem entity.
func (pciuo *ProductConfigItemUpdateOne) Save(ctx context.Context) (*ProductConfigItem, error) {
	var (
		err  error
		node *ProductConfigItem
	)
	pciuo.defaults()
	if len(pciuo.hooks) == 0 {
		node, err = pciuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProductConfigItemMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pciuo.mutation = mutation
			node, err = pciuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pciuo.hooks) - 1; i >= 0; i-- {
			mut = pciuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pciuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (pciuo *ProductConfigItemUpdateOne) SaveX(ctx context.Context) *ProductConfigItem {
	node, err := pciuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pciuo *ProductConfigItemUpdateOne) Exec(ctx context.Context) error {
	_, err := pciuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pciuo *ProductConfigItemUpdateOne) ExecX(ctx context.Context) {
	if err := pciuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pciuo *ProductConfigItemUpdateOne) defaults() {
	if _, ok := pciuo.mutation.UpdateTime(); !ok {
		v := productconfigitem.UpdateDefaultUpdateTime()
		pciuo.mutation.SetUpdateTime(v)
	}
}

func (pciuo *ProductConfigItemUpdateOne) sqlSave(ctx context.Context) (_node *ProductConfigItem, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   productconfigitem.Table,
			Columns: productconfigitem.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: productconfigitem.FieldID,
			},
		},
	}
	id, ok := pciuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ProductConfigItem.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := pciuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, productconfigitem.FieldID)
		for _, f := range fields {
			if !productconfigitem.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != productconfigitem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pciuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pciuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productconfigitem.FieldUpdateTime,
		})
	}
	if value, ok := pciuo.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productconfigitem.FieldStringRef,
		})
	}
	if pciuo.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productconfigitem.FieldStringRef,
		})
	}
	if value, ok := pciuo.mutation.ConfigItemTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productconfigitem.FieldConfigItemTypeID,
		})
	}
	if value, ok := pciuo.mutation.AddedConfigItemTypeID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productconfigitem.FieldConfigItemTypeID,
		})
	}
	if pciuo.mutation.ConfigItemTypeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: productconfigitem.FieldConfigItemTypeID,
		})
	}
	if value, ok := pciuo.mutation.ConfigItemName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productconfigitem.FieldConfigItemName,
		})
	}
	if pciuo.mutation.ConfigItemNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productconfigitem.FieldConfigItemName,
		})
	}
	if value, ok := pciuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productconfigitem.FieldDescription,
		})
	}
	if pciuo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productconfigitem.FieldDescription,
		})
	}
	if value, ok := pciuo.mutation.LongDescription(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productconfigitem.FieldLongDescription,
		})
	}
	if pciuo.mutation.LongDescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productconfigitem.FieldLongDescription,
		})
	}
	if value, ok := pciuo.mutation.ImageURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productconfigitem.FieldImageURL,
		})
	}
	if pciuo.mutation.ImageURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productconfigitem.FieldImageURL,
		})
	}
	_node = &ProductConfigItem{config: pciuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pciuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productconfigitem.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
