// Code generated by entc, DO NOT EDIT.

package productfeature

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// StringRef applies equality check predicate on the "string_ref" field. It's identical to StringRefEQ.
func StringRef(v string) predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStringRef), v))
	})
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// UomID applies equality check predicate on the "uom_id" field. It's identical to UomIDEQ.
func UomID(v int) predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUomID), v))
	})
}

// NumberSpecified applies equality check predicate on the "number_specified" field. It's identical to NumberSpecifiedEQ.
func NumberSpecified(v float64) predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNumberSpecified), v))
	})
}

// DefaultAmount applies equality check predicate on the "default_amount" field. It's identical to DefaultAmountEQ.
func DefaultAmount(v float64) predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDefaultAmount), v))
	})
}

// DefaultSequenceNum applies equality check predicate on the "default_sequence_num" field. It's identical to DefaultSequenceNumEQ.
func DefaultSequenceNum(v int) predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDefaultSequenceNum), v))
	})
}

// Abbrev applies equality check predicate on the "abbrev" field. It's identical to AbbrevEQ.
func Abbrev(v int) predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAbbrev), v))
	})
}

// IDCode applies equality check predicate on the "id_code" field. It's identical to IDCodeEQ.
func IDCode(v string) predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIDCode), v))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.ProductFeature {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductFeature(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.ProductFeature {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductFeature(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), v))
	})
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.ProductFeature {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductFeature(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.ProductFeature {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductFeature(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateTime), v))
	})
}

// StringRefEQ applies the EQ predicate on the "string_ref" field.
func StringRefEQ(v string) predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStringRef), v))
	})
}

// StringRefNEQ applies the NEQ predicate on the "string_ref" field.
func StringRefNEQ(v string) predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStringRef), v))
	})
}

// StringRefIn applies the In predicate on the "string_ref" field.
func StringRefIn(vs ...string) predicate.ProductFeature {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductFeature(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStringRef), v...))
	})
}

// StringRefNotIn applies the NotIn predicate on the "string_ref" field.
func StringRefNotIn(vs ...string) predicate.ProductFeature {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductFeature(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStringRef), v...))
	})
}

// StringRefGT applies the GT predicate on the "string_ref" field.
func StringRefGT(v string) predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStringRef), v))
	})
}

// StringRefGTE applies the GTE predicate on the "string_ref" field.
func StringRefGTE(v string) predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStringRef), v))
	})
}

// StringRefLT applies the LT predicate on the "string_ref" field.
func StringRefLT(v string) predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStringRef), v))
	})
}

// StringRefLTE applies the LTE predicate on the "string_ref" field.
func StringRefLTE(v string) predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStringRef), v))
	})
}

// StringRefContains applies the Contains predicate on the "string_ref" field.
func StringRefContains(v string) predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStringRef), v))
	})
}

// StringRefHasPrefix applies the HasPrefix predicate on the "string_ref" field.
func StringRefHasPrefix(v string) predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStringRef), v))
	})
}

// StringRefHasSuffix applies the HasSuffix predicate on the "string_ref" field.
func StringRefHasSuffix(v string) predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStringRef), v))
	})
}

// StringRefIsNil applies the IsNil predicate on the "string_ref" field.
func StringRefIsNil() predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStringRef)))
	})
}

// StringRefNotNil applies the NotNil predicate on the "string_ref" field.
func StringRefNotNil() predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStringRef)))
	})
}

// StringRefEqualFold applies the EqualFold predicate on the "string_ref" field.
func StringRefEqualFold(v string) predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStringRef), v))
	})
}

// StringRefContainsFold applies the ContainsFold predicate on the "string_ref" field.
func StringRefContainsFold(v string) predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStringRef), v))
	})
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDescription), v))
	})
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.ProductFeature {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductFeature(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDescription), v...))
	})
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.ProductFeature {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductFeature(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDescription), v...))
	})
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDescription), v))
	})
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDescription), v))
	})
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDescription), v))
	})
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDescription), v))
	})
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDescription), v))
	})
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDescription), v))
	})
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDescription), v))
	})
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDescription)))
	})
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDescription)))
	})
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDescription), v))
	})
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDescription), v))
	})
}

// UomIDEQ applies the EQ predicate on the "uom_id" field.
func UomIDEQ(v int) predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUomID), v))
	})
}

// UomIDNEQ applies the NEQ predicate on the "uom_id" field.
func UomIDNEQ(v int) predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUomID), v))
	})
}

// UomIDIn applies the In predicate on the "uom_id" field.
func UomIDIn(vs ...int) predicate.ProductFeature {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductFeature(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUomID), v...))
	})
}

// UomIDNotIn applies the NotIn predicate on the "uom_id" field.
func UomIDNotIn(vs ...int) predicate.ProductFeature {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductFeature(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUomID), v...))
	})
}

// UomIDGT applies the GT predicate on the "uom_id" field.
func UomIDGT(v int) predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUomID), v))
	})
}

// UomIDGTE applies the GTE predicate on the "uom_id" field.
func UomIDGTE(v int) predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUomID), v))
	})
}

// UomIDLT applies the LT predicate on the "uom_id" field.
func UomIDLT(v int) predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUomID), v))
	})
}

// UomIDLTE applies the LTE predicate on the "uom_id" field.
func UomIDLTE(v int) predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUomID), v))
	})
}

// UomIDIsNil applies the IsNil predicate on the "uom_id" field.
func UomIDIsNil() predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUomID)))
	})
}

// UomIDNotNil applies the NotNil predicate on the "uom_id" field.
func UomIDNotNil() predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUomID)))
	})
}

// NumberSpecifiedEQ applies the EQ predicate on the "number_specified" field.
func NumberSpecifiedEQ(v float64) predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNumberSpecified), v))
	})
}

// NumberSpecifiedNEQ applies the NEQ predicate on the "number_specified" field.
func NumberSpecifiedNEQ(v float64) predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNumberSpecified), v))
	})
}

// NumberSpecifiedIn applies the In predicate on the "number_specified" field.
func NumberSpecifiedIn(vs ...float64) predicate.ProductFeature {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductFeature(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldNumberSpecified), v...))
	})
}

// NumberSpecifiedNotIn applies the NotIn predicate on the "number_specified" field.
func NumberSpecifiedNotIn(vs ...float64) predicate.ProductFeature {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductFeature(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldNumberSpecified), v...))
	})
}

// NumberSpecifiedGT applies the GT predicate on the "number_specified" field.
func NumberSpecifiedGT(v float64) predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNumberSpecified), v))
	})
}

// NumberSpecifiedGTE applies the GTE predicate on the "number_specified" field.
func NumberSpecifiedGTE(v float64) predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNumberSpecified), v))
	})
}

// NumberSpecifiedLT applies the LT predicate on the "number_specified" field.
func NumberSpecifiedLT(v float64) predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNumberSpecified), v))
	})
}

// NumberSpecifiedLTE applies the LTE predicate on the "number_specified" field.
func NumberSpecifiedLTE(v float64) predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNumberSpecified), v))
	})
}

// NumberSpecifiedIsNil applies the IsNil predicate on the "number_specified" field.
func NumberSpecifiedIsNil() predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldNumberSpecified)))
	})
}

// NumberSpecifiedNotNil applies the NotNil predicate on the "number_specified" field.
func NumberSpecifiedNotNil() predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldNumberSpecified)))
	})
}

// DefaultAmountEQ applies the EQ predicate on the "default_amount" field.
func DefaultAmountEQ(v float64) predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDefaultAmount), v))
	})
}

// DefaultAmountNEQ applies the NEQ predicate on the "default_amount" field.
func DefaultAmountNEQ(v float64) predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDefaultAmount), v))
	})
}

// DefaultAmountIn applies the In predicate on the "default_amount" field.
func DefaultAmountIn(vs ...float64) predicate.ProductFeature {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductFeature(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDefaultAmount), v...))
	})
}

// DefaultAmountNotIn applies the NotIn predicate on the "default_amount" field.
func DefaultAmountNotIn(vs ...float64) predicate.ProductFeature {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductFeature(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDefaultAmount), v...))
	})
}

// DefaultAmountGT applies the GT predicate on the "default_amount" field.
func DefaultAmountGT(v float64) predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDefaultAmount), v))
	})
}

// DefaultAmountGTE applies the GTE predicate on the "default_amount" field.
func DefaultAmountGTE(v float64) predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDefaultAmount), v))
	})
}

// DefaultAmountLT applies the LT predicate on the "default_amount" field.
func DefaultAmountLT(v float64) predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDefaultAmount), v))
	})
}

// DefaultAmountLTE applies the LTE predicate on the "default_amount" field.
func DefaultAmountLTE(v float64) predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDefaultAmount), v))
	})
}

// DefaultAmountIsNil applies the IsNil predicate on the "default_amount" field.
func DefaultAmountIsNil() predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDefaultAmount)))
	})
}

// DefaultAmountNotNil applies the NotNil predicate on the "default_amount" field.
func DefaultAmountNotNil() predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDefaultAmount)))
	})
}

// DefaultSequenceNumEQ applies the EQ predicate on the "default_sequence_num" field.
func DefaultSequenceNumEQ(v int) predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDefaultSequenceNum), v))
	})
}

// DefaultSequenceNumNEQ applies the NEQ predicate on the "default_sequence_num" field.
func DefaultSequenceNumNEQ(v int) predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDefaultSequenceNum), v))
	})
}

// DefaultSequenceNumIn applies the In predicate on the "default_sequence_num" field.
func DefaultSequenceNumIn(vs ...int) predicate.ProductFeature {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductFeature(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDefaultSequenceNum), v...))
	})
}

// DefaultSequenceNumNotIn applies the NotIn predicate on the "default_sequence_num" field.
func DefaultSequenceNumNotIn(vs ...int) predicate.ProductFeature {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductFeature(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDefaultSequenceNum), v...))
	})
}

// DefaultSequenceNumGT applies the GT predicate on the "default_sequence_num" field.
func DefaultSequenceNumGT(v int) predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDefaultSequenceNum), v))
	})
}

// DefaultSequenceNumGTE applies the GTE predicate on the "default_sequence_num" field.
func DefaultSequenceNumGTE(v int) predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDefaultSequenceNum), v))
	})
}

// DefaultSequenceNumLT applies the LT predicate on the "default_sequence_num" field.
func DefaultSequenceNumLT(v int) predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDefaultSequenceNum), v))
	})
}

// DefaultSequenceNumLTE applies the LTE predicate on the "default_sequence_num" field.
func DefaultSequenceNumLTE(v int) predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDefaultSequenceNum), v))
	})
}

// DefaultSequenceNumIsNil applies the IsNil predicate on the "default_sequence_num" field.
func DefaultSequenceNumIsNil() predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDefaultSequenceNum)))
	})
}

// DefaultSequenceNumNotNil applies the NotNil predicate on the "default_sequence_num" field.
func DefaultSequenceNumNotNil() predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDefaultSequenceNum)))
	})
}

// AbbrevEQ applies the EQ predicate on the "abbrev" field.
func AbbrevEQ(v int) predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAbbrev), v))
	})
}

// AbbrevNEQ applies the NEQ predicate on the "abbrev" field.
func AbbrevNEQ(v int) predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAbbrev), v))
	})
}

// AbbrevIn applies the In predicate on the "abbrev" field.
func AbbrevIn(vs ...int) predicate.ProductFeature {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductFeature(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAbbrev), v...))
	})
}

// AbbrevNotIn applies the NotIn predicate on the "abbrev" field.
func AbbrevNotIn(vs ...int) predicate.ProductFeature {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductFeature(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAbbrev), v...))
	})
}

// AbbrevGT applies the GT predicate on the "abbrev" field.
func AbbrevGT(v int) predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAbbrev), v))
	})
}

// AbbrevGTE applies the GTE predicate on the "abbrev" field.
func AbbrevGTE(v int) predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAbbrev), v))
	})
}

// AbbrevLT applies the LT predicate on the "abbrev" field.
func AbbrevLT(v int) predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAbbrev), v))
	})
}

// AbbrevLTE applies the LTE predicate on the "abbrev" field.
func AbbrevLTE(v int) predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAbbrev), v))
	})
}

// AbbrevIsNil applies the IsNil predicate on the "abbrev" field.
func AbbrevIsNil() predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAbbrev)))
	})
}

// AbbrevNotNil applies the NotNil predicate on the "abbrev" field.
func AbbrevNotNil() predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAbbrev)))
	})
}

// IDCodeEQ applies the EQ predicate on the "id_code" field.
func IDCodeEQ(v string) predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIDCode), v))
	})
}

// IDCodeNEQ applies the NEQ predicate on the "id_code" field.
func IDCodeNEQ(v string) predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIDCode), v))
	})
}

// IDCodeIn applies the In predicate on the "id_code" field.
func IDCodeIn(vs ...string) predicate.ProductFeature {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductFeature(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIDCode), v...))
	})
}

// IDCodeNotIn applies the NotIn predicate on the "id_code" field.
func IDCodeNotIn(vs ...string) predicate.ProductFeature {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductFeature(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIDCode), v...))
	})
}

// IDCodeGT applies the GT predicate on the "id_code" field.
func IDCodeGT(v string) predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIDCode), v))
	})
}

// IDCodeGTE applies the GTE predicate on the "id_code" field.
func IDCodeGTE(v string) predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIDCode), v))
	})
}

// IDCodeLT applies the LT predicate on the "id_code" field.
func IDCodeLT(v string) predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIDCode), v))
	})
}

// IDCodeLTE applies the LTE predicate on the "id_code" field.
func IDCodeLTE(v string) predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIDCode), v))
	})
}

// IDCodeContains applies the Contains predicate on the "id_code" field.
func IDCodeContains(v string) predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldIDCode), v))
	})
}

// IDCodeHasPrefix applies the HasPrefix predicate on the "id_code" field.
func IDCodeHasPrefix(v string) predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldIDCode), v))
	})
}

// IDCodeHasSuffix applies the HasSuffix predicate on the "id_code" field.
func IDCodeHasSuffix(v string) predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldIDCode), v))
	})
}

// IDCodeIsNil applies the IsNil predicate on the "id_code" field.
func IDCodeIsNil() predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldIDCode)))
	})
}

// IDCodeNotNil applies the NotNil predicate on the "id_code" field.
func IDCodeNotNil() predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldIDCode)))
	})
}

// IDCodeEqualFold applies the EqualFold predicate on the "id_code" field.
func IDCodeEqualFold(v string) predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldIDCode), v))
	})
}

// IDCodeContainsFold applies the ContainsFold predicate on the "id_code" field.
func IDCodeContainsFold(v string) predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldIDCode), v))
	})
}

// HasProductFeatureCategory applies the HasEdge predicate on the "product_feature_category" edge.
func HasProductFeatureCategory() predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProductFeatureCategoryTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProductFeatureCategoryTable, ProductFeatureCategoryColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProductFeatureCategoryWith applies the HasEdge predicate on the "product_feature_category" edge with a given conditions (other predicates).
func HasProductFeatureCategoryWith(preds ...predicate.ProductFeatureCategory) predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProductFeatureCategoryInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProductFeatureCategoryTable, ProductFeatureCategoryColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProductFeatureType applies the HasEdge predicate on the "product_feature_type" edge.
func HasProductFeatureType() predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProductFeatureTypeTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProductFeatureTypeTable, ProductFeatureTypeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProductFeatureTypeWith applies the HasEdge predicate on the "product_feature_type" edge with a given conditions (other predicates).
func HasProductFeatureTypeWith(preds ...predicate.ProductFeatureType) predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProductFeatureTypeInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProductFeatureTypeTable, ProductFeatureTypeColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ProductFeature) predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ProductFeature) predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ProductFeature) predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		p(s.Not())
	})
}
