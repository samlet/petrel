// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productfeature"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productfeaturecategory"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productfeaturetype"
)

// ProductFeatureCreate is the builder for creating a ProductFeature entity.
type ProductFeatureCreate struct {
	config
	mutation *ProductFeatureMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (pfc *ProductFeatureCreate) SetCreateTime(t time.Time) *ProductFeatureCreate {
	pfc.mutation.SetCreateTime(t)
	return pfc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (pfc *ProductFeatureCreate) SetNillableCreateTime(t *time.Time) *ProductFeatureCreate {
	if t != nil {
		pfc.SetCreateTime(*t)
	}
	return pfc
}

// SetUpdateTime sets the "update_time" field.
func (pfc *ProductFeatureCreate) SetUpdateTime(t time.Time) *ProductFeatureCreate {
	pfc.mutation.SetUpdateTime(t)
	return pfc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (pfc *ProductFeatureCreate) SetNillableUpdateTime(t *time.Time) *ProductFeatureCreate {
	if t != nil {
		pfc.SetUpdateTime(*t)
	}
	return pfc
}

// SetStringRef sets the "string_ref" field.
func (pfc *ProductFeatureCreate) SetStringRef(s string) *ProductFeatureCreate {
	pfc.mutation.SetStringRef(s)
	return pfc
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (pfc *ProductFeatureCreate) SetNillableStringRef(s *string) *ProductFeatureCreate {
	if s != nil {
		pfc.SetStringRef(*s)
	}
	return pfc
}

// SetDescription sets the "description" field.
func (pfc *ProductFeatureCreate) SetDescription(s string) *ProductFeatureCreate {
	pfc.mutation.SetDescription(s)
	return pfc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pfc *ProductFeatureCreate) SetNillableDescription(s *string) *ProductFeatureCreate {
	if s != nil {
		pfc.SetDescription(*s)
	}
	return pfc
}

// SetUomID sets the "uom_id" field.
func (pfc *ProductFeatureCreate) SetUomID(i int) *ProductFeatureCreate {
	pfc.mutation.SetUomID(i)
	return pfc
}

// SetNillableUomID sets the "uom_id" field if the given value is not nil.
func (pfc *ProductFeatureCreate) SetNillableUomID(i *int) *ProductFeatureCreate {
	if i != nil {
		pfc.SetUomID(*i)
	}
	return pfc
}

// SetNumberSpecified sets the "number_specified" field.
func (pfc *ProductFeatureCreate) SetNumberSpecified(f float64) *ProductFeatureCreate {
	pfc.mutation.SetNumberSpecified(f)
	return pfc
}

// SetNillableNumberSpecified sets the "number_specified" field if the given value is not nil.
func (pfc *ProductFeatureCreate) SetNillableNumberSpecified(f *float64) *ProductFeatureCreate {
	if f != nil {
		pfc.SetNumberSpecified(*f)
	}
	return pfc
}

// SetDefaultAmount sets the "default_amount" field.
func (pfc *ProductFeatureCreate) SetDefaultAmount(f float64) *ProductFeatureCreate {
	pfc.mutation.SetDefaultAmount(f)
	return pfc
}

// SetNillableDefaultAmount sets the "default_amount" field if the given value is not nil.
func (pfc *ProductFeatureCreate) SetNillableDefaultAmount(f *float64) *ProductFeatureCreate {
	if f != nil {
		pfc.SetDefaultAmount(*f)
	}
	return pfc
}

// SetDefaultSequenceNum sets the "default_sequence_num" field.
func (pfc *ProductFeatureCreate) SetDefaultSequenceNum(i int) *ProductFeatureCreate {
	pfc.mutation.SetDefaultSequenceNum(i)
	return pfc
}

// SetNillableDefaultSequenceNum sets the "default_sequence_num" field if the given value is not nil.
func (pfc *ProductFeatureCreate) SetNillableDefaultSequenceNum(i *int) *ProductFeatureCreate {
	if i != nil {
		pfc.SetDefaultSequenceNum(*i)
	}
	return pfc
}

// SetAbbrev sets the "abbrev" field.
func (pfc *ProductFeatureCreate) SetAbbrev(i int) *ProductFeatureCreate {
	pfc.mutation.SetAbbrev(i)
	return pfc
}

// SetNillableAbbrev sets the "abbrev" field if the given value is not nil.
func (pfc *ProductFeatureCreate) SetNillableAbbrev(i *int) *ProductFeatureCreate {
	if i != nil {
		pfc.SetAbbrev(*i)
	}
	return pfc
}

// SetIDCode sets the "id_code" field.
func (pfc *ProductFeatureCreate) SetIDCode(s string) *ProductFeatureCreate {
	pfc.mutation.SetIDCode(s)
	return pfc
}

// SetNillableIDCode sets the "id_code" field if the given value is not nil.
func (pfc *ProductFeatureCreate) SetNillableIDCode(s *string) *ProductFeatureCreate {
	if s != nil {
		pfc.SetIDCode(*s)
	}
	return pfc
}

// SetProductFeatureCategoryID sets the "product_feature_category" edge to the ProductFeatureCategory entity by ID.
func (pfc *ProductFeatureCreate) SetProductFeatureCategoryID(id int) *ProductFeatureCreate {
	pfc.mutation.SetProductFeatureCategoryID(id)
	return pfc
}

// SetNillableProductFeatureCategoryID sets the "product_feature_category" edge to the ProductFeatureCategory entity by ID if the given value is not nil.
func (pfc *ProductFeatureCreate) SetNillableProductFeatureCategoryID(id *int) *ProductFeatureCreate {
	if id != nil {
		pfc = pfc.SetProductFeatureCategoryID(*id)
	}
	return pfc
}

// SetProductFeatureCategory sets the "product_feature_category" edge to the ProductFeatureCategory entity.
func (pfc *ProductFeatureCreate) SetProductFeatureCategory(p *ProductFeatureCategory) *ProductFeatureCreate {
	return pfc.SetProductFeatureCategoryID(p.ID)
}

// SetProductFeatureTypeID sets the "product_feature_type" edge to the ProductFeatureType entity by ID.
func (pfc *ProductFeatureCreate) SetProductFeatureTypeID(id int) *ProductFeatureCreate {
	pfc.mutation.SetProductFeatureTypeID(id)
	return pfc
}

// SetNillableProductFeatureTypeID sets the "product_feature_type" edge to the ProductFeatureType entity by ID if the given value is not nil.
func (pfc *ProductFeatureCreate) SetNillableProductFeatureTypeID(id *int) *ProductFeatureCreate {
	if id != nil {
		pfc = pfc.SetProductFeatureTypeID(*id)
	}
	return pfc
}

// SetProductFeatureType sets the "product_feature_type" edge to the ProductFeatureType entity.
func (pfc *ProductFeatureCreate) SetProductFeatureType(p *ProductFeatureType) *ProductFeatureCreate {
	return pfc.SetProductFeatureTypeID(p.ID)
}

// Mutation returns the ProductFeatureMutation object of the builder.
func (pfc *ProductFeatureCreate) Mutation() *ProductFeatureMutation {
	return pfc.mutation
}

// Save creates the ProductFeature in the database.
func (pfc *ProductFeatureCreate) Save(ctx context.Context) (*ProductFeature, error) {
	var (
		err  error
		node *ProductFeature
	)
	pfc.defaults()
	if len(pfc.hooks) == 0 {
		if err = pfc.check(); err != nil {
			return nil, err
		}
		node, err = pfc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProductFeatureMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pfc.check(); err != nil {
				return nil, err
			}
			pfc.mutation = mutation
			if node, err = pfc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(pfc.hooks) - 1; i >= 0; i-- {
			mut = pfc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pfc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pfc *ProductFeatureCreate) SaveX(ctx context.Context) *ProductFeature {
	v, err := pfc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (pfc *ProductFeatureCreate) defaults() {
	if _, ok := pfc.mutation.CreateTime(); !ok {
		v := productfeature.DefaultCreateTime()
		pfc.mutation.SetCreateTime(v)
	}
	if _, ok := pfc.mutation.UpdateTime(); !ok {
		v := productfeature.DefaultUpdateTime()
		pfc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pfc *ProductFeatureCreate) check() error {
	if _, ok := pfc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New("ent: missing required field \"create_time\"")}
	}
	if _, ok := pfc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New("ent: missing required field \"update_time\"")}
	}
	if v, ok := pfc.mutation.IDCode(); ok {
		if err := productfeature.IDCodeValidator(v); err != nil {
			return &ValidationError{Name: "id_code", err: fmt.Errorf("ent: validator failed for field \"id_code\": %w", err)}
		}
	}
	return nil
}

func (pfc *ProductFeatureCreate) sqlSave(ctx context.Context) (*ProductFeature, error) {
	_node, _spec := pfc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pfc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (pfc *ProductFeatureCreate) createSpec() (*ProductFeature, *sqlgraph.CreateSpec) {
	var (
		_node = &ProductFeature{config: pfc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: productfeature.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: productfeature.FieldID,
			},
		}
	)
	if value, ok := pfc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productfeature.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := pfc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productfeature.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := pfc.mutation.StringRef(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productfeature.FieldStringRef,
		})
		_node.StringRef = value
	}
	if value, ok := pfc.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productfeature.FieldDescription,
		})
		_node.Description = value
	}
	if value, ok := pfc.mutation.UomID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productfeature.FieldUomID,
		})
		_node.UomID = value
	}
	if value, ok := pfc.mutation.NumberSpecified(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: productfeature.FieldNumberSpecified,
		})
		_node.NumberSpecified = value
	}
	if value, ok := pfc.mutation.DefaultAmount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: productfeature.FieldDefaultAmount,
		})
		_node.DefaultAmount = value
	}
	if value, ok := pfc.mutation.DefaultSequenceNum(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productfeature.FieldDefaultSequenceNum,
		})
		_node.DefaultSequenceNum = value
	}
	if value, ok := pfc.mutation.Abbrev(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productfeature.FieldAbbrev,
		})
		_node.Abbrev = value
	}
	if value, ok := pfc.mutation.IDCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productfeature.FieldIDCode,
		})
		_node.IDCode = value
	}
	if nodes := pfc.mutation.ProductFeatureCategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productfeature.ProductFeatureCategoryTable,
			Columns: []string{productfeature.ProductFeatureCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productfeaturecategory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.product_feature_category_product_features = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pfc.mutation.ProductFeatureTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productfeature.ProductFeatureTypeTable,
			Columns: []string{productfeature.ProductFeatureTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productfeaturetype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.product_feature_type_product_features = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ProductFeatureCreateBulk is the builder for creating many ProductFeature entities in bulk.
type ProductFeatureCreateBulk struct {
	config
	builders []*ProductFeatureCreate
}

// Save creates the ProductFeature entities in the database.
func (pfcb *ProductFeatureCreateBulk) Save(ctx context.Context) ([]*ProductFeature, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pfcb.builders))
	nodes := make([]*ProductFeature, len(pfcb.builders))
	mutators := make([]Mutator, len(pfcb.builders))
	for i := range pfcb.builders {
		func(i int, root context.Context) {
			builder := pfcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProductFeatureMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pfcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pfcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pfcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pfcb *ProductFeatureCreateBulk) SaveX(ctx context.Context) []*ProductFeature {
	v, err := pfcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
