// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/predicate"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productfeature"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productfeaturecategory"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productfeaturetype"
)

// ProductFeatureQuery is the builder for querying ProductFeature entities.
type ProductFeatureQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.ProductFeature
	// eager-loading edges.
	withProductFeatureCategory *ProductFeatureCategoryQuery
	withProductFeatureType     *ProductFeatureTypeQuery
	withFKs                    bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ProductFeatureQuery builder.
func (pfq *ProductFeatureQuery) Where(ps ...predicate.ProductFeature) *ProductFeatureQuery {
	pfq.predicates = append(pfq.predicates, ps...)
	return pfq
}

// Limit adds a limit step to the query.
func (pfq *ProductFeatureQuery) Limit(limit int) *ProductFeatureQuery {
	pfq.limit = &limit
	return pfq
}

// Offset adds an offset step to the query.
func (pfq *ProductFeatureQuery) Offset(offset int) *ProductFeatureQuery {
	pfq.offset = &offset
	return pfq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (pfq *ProductFeatureQuery) Unique(unique bool) *ProductFeatureQuery {
	pfq.unique = &unique
	return pfq
}

// Order adds an order step to the query.
func (pfq *ProductFeatureQuery) Order(o ...OrderFunc) *ProductFeatureQuery {
	pfq.order = append(pfq.order, o...)
	return pfq
}

// QueryProductFeatureCategory chains the current query on the "product_feature_category" edge.
func (pfq *ProductFeatureQuery) QueryProductFeatureCategory() *ProductFeatureCategoryQuery {
	query := &ProductFeatureCategoryQuery{config: pfq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pfq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pfq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(productfeature.Table, productfeature.FieldID, selector),
			sqlgraph.To(productfeaturecategory.Table, productfeaturecategory.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, productfeature.ProductFeatureCategoryTable, productfeature.ProductFeatureCategoryColumn),
		)
		fromU = sqlgraph.SetNeighbors(pfq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProductFeatureType chains the current query on the "product_feature_type" edge.
func (pfq *ProductFeatureQuery) QueryProductFeatureType() *ProductFeatureTypeQuery {
	query := &ProductFeatureTypeQuery{config: pfq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pfq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pfq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(productfeature.Table, productfeature.FieldID, selector),
			sqlgraph.To(productfeaturetype.Table, productfeaturetype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, productfeature.ProductFeatureTypeTable, productfeature.ProductFeatureTypeColumn),
		)
		fromU = sqlgraph.SetNeighbors(pfq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ProductFeature entity from the query.
// Returns a *NotFoundError when no ProductFeature was found.
func (pfq *ProductFeatureQuery) First(ctx context.Context) (*ProductFeature, error) {
	nodes, err := pfq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{productfeature.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (pfq *ProductFeatureQuery) FirstX(ctx context.Context) *ProductFeature {
	node, err := pfq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ProductFeature ID from the query.
// Returns a *NotFoundError when no ProductFeature ID was found.
func (pfq *ProductFeatureQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = pfq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{productfeature.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (pfq *ProductFeatureQuery) FirstIDX(ctx context.Context) int {
	id, err := pfq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ProductFeature entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one ProductFeature entity is not found.
// Returns a *NotFoundError when no ProductFeature entities are found.
func (pfq *ProductFeatureQuery) Only(ctx context.Context) (*ProductFeature, error) {
	nodes, err := pfq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{productfeature.Label}
	default:
		return nil, &NotSingularError{productfeature.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (pfq *ProductFeatureQuery) OnlyX(ctx context.Context) *ProductFeature {
	node, err := pfq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ProductFeature ID in the query.
// Returns a *NotSingularError when exactly one ProductFeature ID is not found.
// Returns a *NotFoundError when no entities are found.
func (pfq *ProductFeatureQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = pfq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{productfeature.Label}
	default:
		err = &NotSingularError{productfeature.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (pfq *ProductFeatureQuery) OnlyIDX(ctx context.Context) int {
	id, err := pfq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ProductFeatures.
func (pfq *ProductFeatureQuery) All(ctx context.Context) ([]*ProductFeature, error) {
	if err := pfq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return pfq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (pfq *ProductFeatureQuery) AllX(ctx context.Context) []*ProductFeature {
	nodes, err := pfq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ProductFeature IDs.
func (pfq *ProductFeatureQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := pfq.Select(productfeature.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (pfq *ProductFeatureQuery) IDsX(ctx context.Context) []int {
	ids, err := pfq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (pfq *ProductFeatureQuery) Count(ctx context.Context) (int, error) {
	if err := pfq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return pfq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (pfq *ProductFeatureQuery) CountX(ctx context.Context) int {
	count, err := pfq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (pfq *ProductFeatureQuery) Exist(ctx context.Context) (bool, error) {
	if err := pfq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return pfq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (pfq *ProductFeatureQuery) ExistX(ctx context.Context) bool {
	exist, err := pfq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ProductFeatureQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (pfq *ProductFeatureQuery) Clone() *ProductFeatureQuery {
	if pfq == nil {
		return nil
	}
	return &ProductFeatureQuery{
		config:                     pfq.config,
		limit:                      pfq.limit,
		offset:                     pfq.offset,
		order:                      append([]OrderFunc{}, pfq.order...),
		predicates:                 append([]predicate.ProductFeature{}, pfq.predicates...),
		withProductFeatureCategory: pfq.withProductFeatureCategory.Clone(),
		withProductFeatureType:     pfq.withProductFeatureType.Clone(),
		// clone intermediate query.
		sql:  pfq.sql.Clone(),
		path: pfq.path,
	}
}

// WithProductFeatureCategory tells the query-builder to eager-load the nodes that are connected to
// the "product_feature_category" edge. The optional arguments are used to configure the query builder of the edge.
func (pfq *ProductFeatureQuery) WithProductFeatureCategory(opts ...func(*ProductFeatureCategoryQuery)) *ProductFeatureQuery {
	query := &ProductFeatureCategoryQuery{config: pfq.config}
	for _, opt := range opts {
		opt(query)
	}
	pfq.withProductFeatureCategory = query
	return pfq
}

// WithProductFeatureType tells the query-builder to eager-load the nodes that are connected to
// the "product_feature_type" edge. The optional arguments are used to configure the query builder of the edge.
func (pfq *ProductFeatureQuery) WithProductFeatureType(opts ...func(*ProductFeatureTypeQuery)) *ProductFeatureQuery {
	query := &ProductFeatureTypeQuery{config: pfq.config}
	for _, opt := range opts {
		opt(query)
	}
	pfq.withProductFeatureType = query
	return pfq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ProductFeature.Query().
//		GroupBy(productfeature.FieldCreateTime).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (pfq *ProductFeatureQuery) GroupBy(field string, fields ...string) *ProductFeatureGroupBy {
	group := &ProductFeatureGroupBy{config: pfq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := pfq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return pfq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//	}
//
//	client.ProductFeature.Query().
//		Select(productfeature.FieldCreateTime).
//		Scan(ctx, &v)
//
func (pfq *ProductFeatureQuery) Select(field string, fields ...string) *ProductFeatureSelect {
	pfq.fields = append([]string{field}, fields...)
	return &ProductFeatureSelect{ProductFeatureQuery: pfq}
}

func (pfq *ProductFeatureQuery) prepareQuery(ctx context.Context) error {
	for _, f := range pfq.fields {
		if !productfeature.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if pfq.path != nil {
		prev, err := pfq.path(ctx)
		if err != nil {
			return err
		}
		pfq.sql = prev
	}
	return nil
}

func (pfq *ProductFeatureQuery) sqlAll(ctx context.Context) ([]*ProductFeature, error) {
	var (
		nodes       = []*ProductFeature{}
		withFKs     = pfq.withFKs
		_spec       = pfq.querySpec()
		loadedTypes = [2]bool{
			pfq.withProductFeatureCategory != nil,
			pfq.withProductFeatureType != nil,
		}
	)
	if pfq.withProductFeatureCategory != nil || pfq.withProductFeatureType != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, productfeature.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &ProductFeature{config: pfq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, pfq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := pfq.withProductFeatureCategory; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*ProductFeature)
		for i := range nodes {
			if nodes[i].product_feature_category_product_features == nil {
				continue
			}
			fk := *nodes[i].product_feature_category_product_features
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(productfeaturecategory.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "product_feature_category_product_features" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.ProductFeatureCategory = n
			}
		}
	}

	if query := pfq.withProductFeatureType; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*ProductFeature)
		for i := range nodes {
			if nodes[i].product_feature_type_product_features == nil {
				continue
			}
			fk := *nodes[i].product_feature_type_product_features
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(productfeaturetype.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "product_feature_type_product_features" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.ProductFeatureType = n
			}
		}
	}

	return nodes, nil
}

func (pfq *ProductFeatureQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := pfq.querySpec()
	return sqlgraph.CountNodes(ctx, pfq.driver, _spec)
}

func (pfq *ProductFeatureQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := pfq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (pfq *ProductFeatureQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   productfeature.Table,
			Columns: productfeature.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: productfeature.FieldID,
			},
		},
		From:   pfq.sql,
		Unique: true,
	}
	if unique := pfq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := pfq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, productfeature.FieldID)
		for i := range fields {
			if fields[i] != productfeature.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := pfq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := pfq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := pfq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := pfq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (pfq *ProductFeatureQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(pfq.driver.Dialect())
	t1 := builder.Table(productfeature.Table)
	columns := pfq.fields
	if len(columns) == 0 {
		columns = productfeature.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if pfq.sql != nil {
		selector = pfq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	for _, p := range pfq.predicates {
		p(selector)
	}
	for _, p := range pfq.order {
		p(selector)
	}
	if offset := pfq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := pfq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ProductFeatureGroupBy is the group-by builder for ProductFeature entities.
type ProductFeatureGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (pfgb *ProductFeatureGroupBy) Aggregate(fns ...AggregateFunc) *ProductFeatureGroupBy {
	pfgb.fns = append(pfgb.fns, fns...)
	return pfgb
}

// Scan applies the group-by query and scans the result into the given value.
func (pfgb *ProductFeatureGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := pfgb.path(ctx)
	if err != nil {
		return err
	}
	pfgb.sql = query
	return pfgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (pfgb *ProductFeatureGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := pfgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (pfgb *ProductFeatureGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(pfgb.fields) > 1 {
		return nil, errors.New("ent: ProductFeatureGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := pfgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (pfgb *ProductFeatureGroupBy) StringsX(ctx context.Context) []string {
	v, err := pfgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (pfgb *ProductFeatureGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = pfgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{productfeature.Label}
	default:
		err = fmt.Errorf("ent: ProductFeatureGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (pfgb *ProductFeatureGroupBy) StringX(ctx context.Context) string {
	v, err := pfgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (pfgb *ProductFeatureGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(pfgb.fields) > 1 {
		return nil, errors.New("ent: ProductFeatureGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := pfgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (pfgb *ProductFeatureGroupBy) IntsX(ctx context.Context) []int {
	v, err := pfgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (pfgb *ProductFeatureGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = pfgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{productfeature.Label}
	default:
		err = fmt.Errorf("ent: ProductFeatureGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (pfgb *ProductFeatureGroupBy) IntX(ctx context.Context) int {
	v, err := pfgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (pfgb *ProductFeatureGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(pfgb.fields) > 1 {
		return nil, errors.New("ent: ProductFeatureGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := pfgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (pfgb *ProductFeatureGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := pfgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (pfgb *ProductFeatureGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = pfgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{productfeature.Label}
	default:
		err = fmt.Errorf("ent: ProductFeatureGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (pfgb *ProductFeatureGroupBy) Float64X(ctx context.Context) float64 {
	v, err := pfgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (pfgb *ProductFeatureGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(pfgb.fields) > 1 {
		return nil, errors.New("ent: ProductFeatureGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := pfgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (pfgb *ProductFeatureGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := pfgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (pfgb *ProductFeatureGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = pfgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{productfeature.Label}
	default:
		err = fmt.Errorf("ent: ProductFeatureGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (pfgb *ProductFeatureGroupBy) BoolX(ctx context.Context) bool {
	v, err := pfgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (pfgb *ProductFeatureGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range pfgb.fields {
		if !productfeature.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := pfgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pfgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (pfgb *ProductFeatureGroupBy) sqlQuery() *sql.Selector {
	selector := pfgb.sql.Select()
	aggregation := make([]string, 0, len(pfgb.fns))
	for _, fn := range pfgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(pfgb.fields)+len(pfgb.fns))
		for _, f := range pfgb.fields {
			columns = append(columns, selector.C(f))
		}
		for _, c := range aggregation {
			columns = append(columns, c)
		}
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(pfgb.fields...)...)
}

// ProductFeatureSelect is the builder for selecting fields of ProductFeature entities.
type ProductFeatureSelect struct {
	*ProductFeatureQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (pfs *ProductFeatureSelect) Scan(ctx context.Context, v interface{}) error {
	if err := pfs.prepareQuery(ctx); err != nil {
		return err
	}
	pfs.sql = pfs.ProductFeatureQuery.sqlQuery(ctx)
	return pfs.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (pfs *ProductFeatureSelect) ScanX(ctx context.Context, v interface{}) {
	if err := pfs.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (pfs *ProductFeatureSelect) Strings(ctx context.Context) ([]string, error) {
	if len(pfs.fields) > 1 {
		return nil, errors.New("ent: ProductFeatureSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := pfs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (pfs *ProductFeatureSelect) StringsX(ctx context.Context) []string {
	v, err := pfs.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (pfs *ProductFeatureSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = pfs.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{productfeature.Label}
	default:
		err = fmt.Errorf("ent: ProductFeatureSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (pfs *ProductFeatureSelect) StringX(ctx context.Context) string {
	v, err := pfs.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (pfs *ProductFeatureSelect) Ints(ctx context.Context) ([]int, error) {
	if len(pfs.fields) > 1 {
		return nil, errors.New("ent: ProductFeatureSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := pfs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (pfs *ProductFeatureSelect) IntsX(ctx context.Context) []int {
	v, err := pfs.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (pfs *ProductFeatureSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = pfs.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{productfeature.Label}
	default:
		err = fmt.Errorf("ent: ProductFeatureSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (pfs *ProductFeatureSelect) IntX(ctx context.Context) int {
	v, err := pfs.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (pfs *ProductFeatureSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(pfs.fields) > 1 {
		return nil, errors.New("ent: ProductFeatureSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := pfs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (pfs *ProductFeatureSelect) Float64sX(ctx context.Context) []float64 {
	v, err := pfs.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (pfs *ProductFeatureSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = pfs.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{productfeature.Label}
	default:
		err = fmt.Errorf("ent: ProductFeatureSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (pfs *ProductFeatureSelect) Float64X(ctx context.Context) float64 {
	v, err := pfs.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (pfs *ProductFeatureSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(pfs.fields) > 1 {
		return nil, errors.New("ent: ProductFeatureSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := pfs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (pfs *ProductFeatureSelect) BoolsX(ctx context.Context) []bool {
	v, err := pfs.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (pfs *ProductFeatureSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = pfs.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{productfeature.Label}
	default:
		err = fmt.Errorf("ent: ProductFeatureSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (pfs *ProductFeatureSelect) BoolX(ctx context.Context) bool {
	v, err := pfs.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (pfs *ProductFeatureSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := pfs.sql.Query()
	if err := pfs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
