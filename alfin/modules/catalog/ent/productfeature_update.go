// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/predicate"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productfeature"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productfeaturecategory"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productfeaturetype"
)

// ProductFeatureUpdate is the builder for updating ProductFeature entities.
type ProductFeatureUpdate struct {
	config
	hooks    []Hook
	mutation *ProductFeatureMutation
}

// Where adds a new predicate for the ProductFeatureUpdate builder.
func (pfu *ProductFeatureUpdate) Where(ps ...predicate.ProductFeature) *ProductFeatureUpdate {
	pfu.mutation.predicates = append(pfu.mutation.predicates, ps...)
	return pfu
}

// SetStringRef sets the "string_ref" field.
func (pfu *ProductFeatureUpdate) SetStringRef(s string) *ProductFeatureUpdate {
	pfu.mutation.SetStringRef(s)
	return pfu
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (pfu *ProductFeatureUpdate) SetNillableStringRef(s *string) *ProductFeatureUpdate {
	if s != nil {
		pfu.SetStringRef(*s)
	}
	return pfu
}

// ClearStringRef clears the value of the "string_ref" field.
func (pfu *ProductFeatureUpdate) ClearStringRef() *ProductFeatureUpdate {
	pfu.mutation.ClearStringRef()
	return pfu
}

// SetDescription sets the "description" field.
func (pfu *ProductFeatureUpdate) SetDescription(s string) *ProductFeatureUpdate {
	pfu.mutation.SetDescription(s)
	return pfu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pfu *ProductFeatureUpdate) SetNillableDescription(s *string) *ProductFeatureUpdate {
	if s != nil {
		pfu.SetDescription(*s)
	}
	return pfu
}

// ClearDescription clears the value of the "description" field.
func (pfu *ProductFeatureUpdate) ClearDescription() *ProductFeatureUpdate {
	pfu.mutation.ClearDescription()
	return pfu
}

// SetUomID sets the "uom_id" field.
func (pfu *ProductFeatureUpdate) SetUomID(i int) *ProductFeatureUpdate {
	pfu.mutation.ResetUomID()
	pfu.mutation.SetUomID(i)
	return pfu
}

// SetNillableUomID sets the "uom_id" field if the given value is not nil.
func (pfu *ProductFeatureUpdate) SetNillableUomID(i *int) *ProductFeatureUpdate {
	if i != nil {
		pfu.SetUomID(*i)
	}
	return pfu
}

// AddUomID adds i to the "uom_id" field.
func (pfu *ProductFeatureUpdate) AddUomID(i int) *ProductFeatureUpdate {
	pfu.mutation.AddUomID(i)
	return pfu
}

// ClearUomID clears the value of the "uom_id" field.
func (pfu *ProductFeatureUpdate) ClearUomID() *ProductFeatureUpdate {
	pfu.mutation.ClearUomID()
	return pfu
}

// SetNumberSpecified sets the "number_specified" field.
func (pfu *ProductFeatureUpdate) SetNumberSpecified(f float64) *ProductFeatureUpdate {
	pfu.mutation.ResetNumberSpecified()
	pfu.mutation.SetNumberSpecified(f)
	return pfu
}

// SetNillableNumberSpecified sets the "number_specified" field if the given value is not nil.
func (pfu *ProductFeatureUpdate) SetNillableNumberSpecified(f *float64) *ProductFeatureUpdate {
	if f != nil {
		pfu.SetNumberSpecified(*f)
	}
	return pfu
}

// AddNumberSpecified adds f to the "number_specified" field.
func (pfu *ProductFeatureUpdate) AddNumberSpecified(f float64) *ProductFeatureUpdate {
	pfu.mutation.AddNumberSpecified(f)
	return pfu
}

// ClearNumberSpecified clears the value of the "number_specified" field.
func (pfu *ProductFeatureUpdate) ClearNumberSpecified() *ProductFeatureUpdate {
	pfu.mutation.ClearNumberSpecified()
	return pfu
}

// SetDefaultAmount sets the "default_amount" field.
func (pfu *ProductFeatureUpdate) SetDefaultAmount(f float64) *ProductFeatureUpdate {
	pfu.mutation.ResetDefaultAmount()
	pfu.mutation.SetDefaultAmount(f)
	return pfu
}

// SetNillableDefaultAmount sets the "default_amount" field if the given value is not nil.
func (pfu *ProductFeatureUpdate) SetNillableDefaultAmount(f *float64) *ProductFeatureUpdate {
	if f != nil {
		pfu.SetDefaultAmount(*f)
	}
	return pfu
}

// AddDefaultAmount adds f to the "default_amount" field.
func (pfu *ProductFeatureUpdate) AddDefaultAmount(f float64) *ProductFeatureUpdate {
	pfu.mutation.AddDefaultAmount(f)
	return pfu
}

// ClearDefaultAmount clears the value of the "default_amount" field.
func (pfu *ProductFeatureUpdate) ClearDefaultAmount() *ProductFeatureUpdate {
	pfu.mutation.ClearDefaultAmount()
	return pfu
}

// SetDefaultSequenceNum sets the "default_sequence_num" field.
func (pfu *ProductFeatureUpdate) SetDefaultSequenceNum(i int) *ProductFeatureUpdate {
	pfu.mutation.ResetDefaultSequenceNum()
	pfu.mutation.SetDefaultSequenceNum(i)
	return pfu
}

// SetNillableDefaultSequenceNum sets the "default_sequence_num" field if the given value is not nil.
func (pfu *ProductFeatureUpdate) SetNillableDefaultSequenceNum(i *int) *ProductFeatureUpdate {
	if i != nil {
		pfu.SetDefaultSequenceNum(*i)
	}
	return pfu
}

// AddDefaultSequenceNum adds i to the "default_sequence_num" field.
func (pfu *ProductFeatureUpdate) AddDefaultSequenceNum(i int) *ProductFeatureUpdate {
	pfu.mutation.AddDefaultSequenceNum(i)
	return pfu
}

// ClearDefaultSequenceNum clears the value of the "default_sequence_num" field.
func (pfu *ProductFeatureUpdate) ClearDefaultSequenceNum() *ProductFeatureUpdate {
	pfu.mutation.ClearDefaultSequenceNum()
	return pfu
}

// SetAbbrev sets the "abbrev" field.
func (pfu *ProductFeatureUpdate) SetAbbrev(i int) *ProductFeatureUpdate {
	pfu.mutation.ResetAbbrev()
	pfu.mutation.SetAbbrev(i)
	return pfu
}

// SetNillableAbbrev sets the "abbrev" field if the given value is not nil.
func (pfu *ProductFeatureUpdate) SetNillableAbbrev(i *int) *ProductFeatureUpdate {
	if i != nil {
		pfu.SetAbbrev(*i)
	}
	return pfu
}

// AddAbbrev adds i to the "abbrev" field.
func (pfu *ProductFeatureUpdate) AddAbbrev(i int) *ProductFeatureUpdate {
	pfu.mutation.AddAbbrev(i)
	return pfu
}

// ClearAbbrev clears the value of the "abbrev" field.
func (pfu *ProductFeatureUpdate) ClearAbbrev() *ProductFeatureUpdate {
	pfu.mutation.ClearAbbrev()
	return pfu
}

// SetIDCode sets the "id_code" field.
func (pfu *ProductFeatureUpdate) SetIDCode(s string) *ProductFeatureUpdate {
	pfu.mutation.SetIDCode(s)
	return pfu
}

// SetNillableIDCode sets the "id_code" field if the given value is not nil.
func (pfu *ProductFeatureUpdate) SetNillableIDCode(s *string) *ProductFeatureUpdate {
	if s != nil {
		pfu.SetIDCode(*s)
	}
	return pfu
}

// ClearIDCode clears the value of the "id_code" field.
func (pfu *ProductFeatureUpdate) ClearIDCode() *ProductFeatureUpdate {
	pfu.mutation.ClearIDCode()
	return pfu
}

// SetProductFeatureCategoryID sets the "product_feature_category" edge to the ProductFeatureCategory entity by ID.
func (pfu *ProductFeatureUpdate) SetProductFeatureCategoryID(id int) *ProductFeatureUpdate {
	pfu.mutation.SetProductFeatureCategoryID(id)
	return pfu
}

// SetNillableProductFeatureCategoryID sets the "product_feature_category" edge to the ProductFeatureCategory entity by ID if the given value is not nil.
func (pfu *ProductFeatureUpdate) SetNillableProductFeatureCategoryID(id *int) *ProductFeatureUpdate {
	if id != nil {
		pfu = pfu.SetProductFeatureCategoryID(*id)
	}
	return pfu
}

// SetProductFeatureCategory sets the "product_feature_category" edge to the ProductFeatureCategory entity.
func (pfu *ProductFeatureUpdate) SetProductFeatureCategory(p *ProductFeatureCategory) *ProductFeatureUpdate {
	return pfu.SetProductFeatureCategoryID(p.ID)
}

// SetProductFeatureTypeID sets the "product_feature_type" edge to the ProductFeatureType entity by ID.
func (pfu *ProductFeatureUpdate) SetProductFeatureTypeID(id int) *ProductFeatureUpdate {
	pfu.mutation.SetProductFeatureTypeID(id)
	return pfu
}

// SetNillableProductFeatureTypeID sets the "product_feature_type" edge to the ProductFeatureType entity by ID if the given value is not nil.
func (pfu *ProductFeatureUpdate) SetNillableProductFeatureTypeID(id *int) *ProductFeatureUpdate {
	if id != nil {
		pfu = pfu.SetProductFeatureTypeID(*id)
	}
	return pfu
}

// SetProductFeatureType sets the "product_feature_type" edge to the ProductFeatureType entity.
func (pfu *ProductFeatureUpdate) SetProductFeatureType(p *ProductFeatureType) *ProductFeatureUpdate {
	return pfu.SetProductFeatureTypeID(p.ID)
}

// Mutation returns the ProductFeatureMutation object of the builder.
func (pfu *ProductFeatureUpdate) Mutation() *ProductFeatureMutation {
	return pfu.mutation
}

// ClearProductFeatureCategory clears the "product_feature_category" edge to the ProductFeatureCategory entity.
func (pfu *ProductFeatureUpdate) ClearProductFeatureCategory() *ProductFeatureUpdate {
	pfu.mutation.ClearProductFeatureCategory()
	return pfu
}

// ClearProductFeatureType clears the "product_feature_type" edge to the ProductFeatureType entity.
func (pfu *ProductFeatureUpdate) ClearProductFeatureType() *ProductFeatureUpdate {
	pfu.mutation.ClearProductFeatureType()
	return pfu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pfu *ProductFeatureUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	pfu.defaults()
	if len(pfu.hooks) == 0 {
		if err = pfu.check(); err != nil {
			return 0, err
		}
		affected, err = pfu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProductFeatureMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pfu.check(); err != nil {
				return 0, err
			}
			pfu.mutation = mutation
			affected, err = pfu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pfu.hooks) - 1; i >= 0; i-- {
			mut = pfu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pfu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pfu *ProductFeatureUpdate) SaveX(ctx context.Context) int {
	affected, err := pfu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pfu *ProductFeatureUpdate) Exec(ctx context.Context) error {
	_, err := pfu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pfu *ProductFeatureUpdate) ExecX(ctx context.Context) {
	if err := pfu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pfu *ProductFeatureUpdate) defaults() {
	if _, ok := pfu.mutation.UpdateTime(); !ok {
		v := productfeature.UpdateDefaultUpdateTime()
		pfu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pfu *ProductFeatureUpdate) check() error {
	if v, ok := pfu.mutation.IDCode(); ok {
		if err := productfeature.IDCodeValidator(v); err != nil {
			return &ValidationError{Name: "id_code", err: fmt.Errorf("ent: validator failed for field \"id_code\": %w", err)}
		}
	}
	return nil
}

func (pfu *ProductFeatureUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   productfeature.Table,
			Columns: productfeature.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: productfeature.FieldID,
			},
		},
	}
	if ps := pfu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pfu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productfeature.FieldUpdateTime,
		})
	}
	if value, ok := pfu.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productfeature.FieldStringRef,
		})
	}
	if pfu.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productfeature.FieldStringRef,
		})
	}
	if value, ok := pfu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productfeature.FieldDescription,
		})
	}
	if pfu.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productfeature.FieldDescription,
		})
	}
	if value, ok := pfu.mutation.UomID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productfeature.FieldUomID,
		})
	}
	if value, ok := pfu.mutation.AddedUomID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productfeature.FieldUomID,
		})
	}
	if pfu.mutation.UomIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: productfeature.FieldUomID,
		})
	}
	if value, ok := pfu.mutation.NumberSpecified(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: productfeature.FieldNumberSpecified,
		})
	}
	if value, ok := pfu.mutation.AddedNumberSpecified(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: productfeature.FieldNumberSpecified,
		})
	}
	if pfu.mutation.NumberSpecifiedCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: productfeature.FieldNumberSpecified,
		})
	}
	if value, ok := pfu.mutation.DefaultAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: productfeature.FieldDefaultAmount,
		})
	}
	if value, ok := pfu.mutation.AddedDefaultAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: productfeature.FieldDefaultAmount,
		})
	}
	if pfu.mutation.DefaultAmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: productfeature.FieldDefaultAmount,
		})
	}
	if value, ok := pfu.mutation.DefaultSequenceNum(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productfeature.FieldDefaultSequenceNum,
		})
	}
	if value, ok := pfu.mutation.AddedDefaultSequenceNum(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productfeature.FieldDefaultSequenceNum,
		})
	}
	if pfu.mutation.DefaultSequenceNumCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: productfeature.FieldDefaultSequenceNum,
		})
	}
	if value, ok := pfu.mutation.Abbrev(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productfeature.FieldAbbrev,
		})
	}
	if value, ok := pfu.mutation.AddedAbbrev(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productfeature.FieldAbbrev,
		})
	}
	if pfu.mutation.AbbrevCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: productfeature.FieldAbbrev,
		})
	}
	if value, ok := pfu.mutation.IDCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productfeature.FieldIDCode,
		})
	}
	if pfu.mutation.IDCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productfeature.FieldIDCode,
		})
	}
	if pfu.mutation.ProductFeatureCategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productfeature.ProductFeatureCategoryTable,
			Columns: []string{productfeature.ProductFeatureCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productfeaturecategory.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pfu.mutation.ProductFeatureCategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productfeature.ProductFeatureCategoryTable,
			Columns: []string{productfeature.ProductFeatureCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productfeaturecategory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pfu.mutation.ProductFeatureTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productfeature.ProductFeatureTypeTable,
			Columns: []string{productfeature.ProductFeatureTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productfeaturetype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pfu.mutation.ProductFeatureTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productfeature.ProductFeatureTypeTable,
			Columns: []string{productfeature.ProductFeatureTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productfeaturetype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pfu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productfeature.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ProductFeatureUpdateOne is the builder for updating a single ProductFeature entity.
type ProductFeatureUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProductFeatureMutation
}

// SetStringRef sets the "string_ref" field.
func (pfuo *ProductFeatureUpdateOne) SetStringRef(s string) *ProductFeatureUpdateOne {
	pfuo.mutation.SetStringRef(s)
	return pfuo
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (pfuo *ProductFeatureUpdateOne) SetNillableStringRef(s *string) *ProductFeatureUpdateOne {
	if s != nil {
		pfuo.SetStringRef(*s)
	}
	return pfuo
}

// ClearStringRef clears the value of the "string_ref" field.
func (pfuo *ProductFeatureUpdateOne) ClearStringRef() *ProductFeatureUpdateOne {
	pfuo.mutation.ClearStringRef()
	return pfuo
}

// SetDescription sets the "description" field.
func (pfuo *ProductFeatureUpdateOne) SetDescription(s string) *ProductFeatureUpdateOne {
	pfuo.mutation.SetDescription(s)
	return pfuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pfuo *ProductFeatureUpdateOne) SetNillableDescription(s *string) *ProductFeatureUpdateOne {
	if s != nil {
		pfuo.SetDescription(*s)
	}
	return pfuo
}

// ClearDescription clears the value of the "description" field.
func (pfuo *ProductFeatureUpdateOne) ClearDescription() *ProductFeatureUpdateOne {
	pfuo.mutation.ClearDescription()
	return pfuo
}

// SetUomID sets the "uom_id" field.
func (pfuo *ProductFeatureUpdateOne) SetUomID(i int) *ProductFeatureUpdateOne {
	pfuo.mutation.ResetUomID()
	pfuo.mutation.SetUomID(i)
	return pfuo
}

// SetNillableUomID sets the "uom_id" field if the given value is not nil.
func (pfuo *ProductFeatureUpdateOne) SetNillableUomID(i *int) *ProductFeatureUpdateOne {
	if i != nil {
		pfuo.SetUomID(*i)
	}
	return pfuo
}

// AddUomID adds i to the "uom_id" field.
func (pfuo *ProductFeatureUpdateOne) AddUomID(i int) *ProductFeatureUpdateOne {
	pfuo.mutation.AddUomID(i)
	return pfuo
}

// ClearUomID clears the value of the "uom_id" field.
func (pfuo *ProductFeatureUpdateOne) ClearUomID() *ProductFeatureUpdateOne {
	pfuo.mutation.ClearUomID()
	return pfuo
}

// SetNumberSpecified sets the "number_specified" field.
func (pfuo *ProductFeatureUpdateOne) SetNumberSpecified(f float64) *ProductFeatureUpdateOne {
	pfuo.mutation.ResetNumberSpecified()
	pfuo.mutation.SetNumberSpecified(f)
	return pfuo
}

// SetNillableNumberSpecified sets the "number_specified" field if the given value is not nil.
func (pfuo *ProductFeatureUpdateOne) SetNillableNumberSpecified(f *float64) *ProductFeatureUpdateOne {
	if f != nil {
		pfuo.SetNumberSpecified(*f)
	}
	return pfuo
}

// AddNumberSpecified adds f to the "number_specified" field.
func (pfuo *ProductFeatureUpdateOne) AddNumberSpecified(f float64) *ProductFeatureUpdateOne {
	pfuo.mutation.AddNumberSpecified(f)
	return pfuo
}

// ClearNumberSpecified clears the value of the "number_specified" field.
func (pfuo *ProductFeatureUpdateOne) ClearNumberSpecified() *ProductFeatureUpdateOne {
	pfuo.mutation.ClearNumberSpecified()
	return pfuo
}

// SetDefaultAmount sets the "default_amount" field.
func (pfuo *ProductFeatureUpdateOne) SetDefaultAmount(f float64) *ProductFeatureUpdateOne {
	pfuo.mutation.ResetDefaultAmount()
	pfuo.mutation.SetDefaultAmount(f)
	return pfuo
}

// SetNillableDefaultAmount sets the "default_amount" field if the given value is not nil.
func (pfuo *ProductFeatureUpdateOne) SetNillableDefaultAmount(f *float64) *ProductFeatureUpdateOne {
	if f != nil {
		pfuo.SetDefaultAmount(*f)
	}
	return pfuo
}

// AddDefaultAmount adds f to the "default_amount" field.
func (pfuo *ProductFeatureUpdateOne) AddDefaultAmount(f float64) *ProductFeatureUpdateOne {
	pfuo.mutation.AddDefaultAmount(f)
	return pfuo
}

// ClearDefaultAmount clears the value of the "default_amount" field.
func (pfuo *ProductFeatureUpdateOne) ClearDefaultAmount() *ProductFeatureUpdateOne {
	pfuo.mutation.ClearDefaultAmount()
	return pfuo
}

// SetDefaultSequenceNum sets the "default_sequence_num" field.
func (pfuo *ProductFeatureUpdateOne) SetDefaultSequenceNum(i int) *ProductFeatureUpdateOne {
	pfuo.mutation.ResetDefaultSequenceNum()
	pfuo.mutation.SetDefaultSequenceNum(i)
	return pfuo
}

// SetNillableDefaultSequenceNum sets the "default_sequence_num" field if the given value is not nil.
func (pfuo *ProductFeatureUpdateOne) SetNillableDefaultSequenceNum(i *int) *ProductFeatureUpdateOne {
	if i != nil {
		pfuo.SetDefaultSequenceNum(*i)
	}
	return pfuo
}

// AddDefaultSequenceNum adds i to the "default_sequence_num" field.
func (pfuo *ProductFeatureUpdateOne) AddDefaultSequenceNum(i int) *ProductFeatureUpdateOne {
	pfuo.mutation.AddDefaultSequenceNum(i)
	return pfuo
}

// ClearDefaultSequenceNum clears the value of the "default_sequence_num" field.
func (pfuo *ProductFeatureUpdateOne) ClearDefaultSequenceNum() *ProductFeatureUpdateOne {
	pfuo.mutation.ClearDefaultSequenceNum()
	return pfuo
}

// SetAbbrev sets the "abbrev" field.
func (pfuo *ProductFeatureUpdateOne) SetAbbrev(i int) *ProductFeatureUpdateOne {
	pfuo.mutation.ResetAbbrev()
	pfuo.mutation.SetAbbrev(i)
	return pfuo
}

// SetNillableAbbrev sets the "abbrev" field if the given value is not nil.
func (pfuo *ProductFeatureUpdateOne) SetNillableAbbrev(i *int) *ProductFeatureUpdateOne {
	if i != nil {
		pfuo.SetAbbrev(*i)
	}
	return pfuo
}

// AddAbbrev adds i to the "abbrev" field.
func (pfuo *ProductFeatureUpdateOne) AddAbbrev(i int) *ProductFeatureUpdateOne {
	pfuo.mutation.AddAbbrev(i)
	return pfuo
}

// ClearAbbrev clears the value of the "abbrev" field.
func (pfuo *ProductFeatureUpdateOne) ClearAbbrev() *ProductFeatureUpdateOne {
	pfuo.mutation.ClearAbbrev()
	return pfuo
}

// SetIDCode sets the "id_code" field.
func (pfuo *ProductFeatureUpdateOne) SetIDCode(s string) *ProductFeatureUpdateOne {
	pfuo.mutation.SetIDCode(s)
	return pfuo
}

// SetNillableIDCode sets the "id_code" field if the given value is not nil.
func (pfuo *ProductFeatureUpdateOne) SetNillableIDCode(s *string) *ProductFeatureUpdateOne {
	if s != nil {
		pfuo.SetIDCode(*s)
	}
	return pfuo
}

// ClearIDCode clears the value of the "id_code" field.
func (pfuo *ProductFeatureUpdateOne) ClearIDCode() *ProductFeatureUpdateOne {
	pfuo.mutation.ClearIDCode()
	return pfuo
}

// SetProductFeatureCategoryID sets the "product_feature_category" edge to the ProductFeatureCategory entity by ID.
func (pfuo *ProductFeatureUpdateOne) SetProductFeatureCategoryID(id int) *ProductFeatureUpdateOne {
	pfuo.mutation.SetProductFeatureCategoryID(id)
	return pfuo
}

// SetNillableProductFeatureCategoryID sets the "product_feature_category" edge to the ProductFeatureCategory entity by ID if the given value is not nil.
func (pfuo *ProductFeatureUpdateOne) SetNillableProductFeatureCategoryID(id *int) *ProductFeatureUpdateOne {
	if id != nil {
		pfuo = pfuo.SetProductFeatureCategoryID(*id)
	}
	return pfuo
}

// SetProductFeatureCategory sets the "product_feature_category" edge to the ProductFeatureCategory entity.
func (pfuo *ProductFeatureUpdateOne) SetProductFeatureCategory(p *ProductFeatureCategory) *ProductFeatureUpdateOne {
	return pfuo.SetProductFeatureCategoryID(p.ID)
}

// SetProductFeatureTypeID sets the "product_feature_type" edge to the ProductFeatureType entity by ID.
func (pfuo *ProductFeatureUpdateOne) SetProductFeatureTypeID(id int) *ProductFeatureUpdateOne {
	pfuo.mutation.SetProductFeatureTypeID(id)
	return pfuo
}

// SetNillableProductFeatureTypeID sets the "product_feature_type" edge to the ProductFeatureType entity by ID if the given value is not nil.
func (pfuo *ProductFeatureUpdateOne) SetNillableProductFeatureTypeID(id *int) *ProductFeatureUpdateOne {
	if id != nil {
		pfuo = pfuo.SetProductFeatureTypeID(*id)
	}
	return pfuo
}

// SetProductFeatureType sets the "product_feature_type" edge to the ProductFeatureType entity.
func (pfuo *ProductFeatureUpdateOne) SetProductFeatureType(p *ProductFeatureType) *ProductFeatureUpdateOne {
	return pfuo.SetProductFeatureTypeID(p.ID)
}

// Mutation returns the ProductFeatureMutation object of the builder.
func (pfuo *ProductFeatureUpdateOne) Mutation() *ProductFeatureMutation {
	return pfuo.mutation
}

// ClearProductFeatureCategory clears the "product_feature_category" edge to the ProductFeatureCategory entity.
func (pfuo *ProductFeatureUpdateOne) ClearProductFeatureCategory() *ProductFeatureUpdateOne {
	pfuo.mutation.ClearProductFeatureCategory()
	return pfuo
}

// ClearProductFeatureType clears the "product_feature_type" edge to the ProductFeatureType entity.
func (pfuo *ProductFeatureUpdateOne) ClearProductFeatureType() *ProductFeatureUpdateOne {
	pfuo.mutation.ClearProductFeatureType()
	return pfuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pfuo *ProductFeatureUpdateOne) Select(field string, fields ...string) *ProductFeatureUpdateOne {
	pfuo.fields = append([]string{field}, fields...)
	return pfuo
}

// Save executes the query and returns the updated ProductFeature entity.
func (pfuo *ProductFeatureUpdateOne) Save(ctx context.Context) (*ProductFeature, error) {
	var (
		err  error
		node *ProductFeature
	)
	pfuo.defaults()
	if len(pfuo.hooks) == 0 {
		if err = pfuo.check(); err != nil {
			return nil, err
		}
		node, err = pfuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProductFeatureMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pfuo.check(); err != nil {
				return nil, err
			}
			pfuo.mutation = mutation
			node, err = pfuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pfuo.hooks) - 1; i >= 0; i-- {
			mut = pfuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pfuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (pfuo *ProductFeatureUpdateOne) SaveX(ctx context.Context) *ProductFeature {
	node, err := pfuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pfuo *ProductFeatureUpdateOne) Exec(ctx context.Context) error {
	_, err := pfuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pfuo *ProductFeatureUpdateOne) ExecX(ctx context.Context) {
	if err := pfuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pfuo *ProductFeatureUpdateOne) defaults() {
	if _, ok := pfuo.mutation.UpdateTime(); !ok {
		v := productfeature.UpdateDefaultUpdateTime()
		pfuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pfuo *ProductFeatureUpdateOne) check() error {
	if v, ok := pfuo.mutation.IDCode(); ok {
		if err := productfeature.IDCodeValidator(v); err != nil {
			return &ValidationError{Name: "id_code", err: fmt.Errorf("ent: validator failed for field \"id_code\": %w", err)}
		}
	}
	return nil
}

func (pfuo *ProductFeatureUpdateOne) sqlSave(ctx context.Context) (_node *ProductFeature, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   productfeature.Table,
			Columns: productfeature.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: productfeature.FieldID,
			},
		},
	}
	id, ok := pfuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ProductFeature.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := pfuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, productfeature.FieldID)
		for _, f := range fields {
			if !productfeature.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != productfeature.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pfuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pfuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productfeature.FieldUpdateTime,
		})
	}
	if value, ok := pfuo.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productfeature.FieldStringRef,
		})
	}
	if pfuo.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productfeature.FieldStringRef,
		})
	}
	if value, ok := pfuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productfeature.FieldDescription,
		})
	}
	if pfuo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productfeature.FieldDescription,
		})
	}
	if value, ok := pfuo.mutation.UomID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productfeature.FieldUomID,
		})
	}
	if value, ok := pfuo.mutation.AddedUomID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productfeature.FieldUomID,
		})
	}
	if pfuo.mutation.UomIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: productfeature.FieldUomID,
		})
	}
	if value, ok := pfuo.mutation.NumberSpecified(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: productfeature.FieldNumberSpecified,
		})
	}
	if value, ok := pfuo.mutation.AddedNumberSpecified(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: productfeature.FieldNumberSpecified,
		})
	}
	if pfuo.mutation.NumberSpecifiedCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: productfeature.FieldNumberSpecified,
		})
	}
	if value, ok := pfuo.mutation.DefaultAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: productfeature.FieldDefaultAmount,
		})
	}
	if value, ok := pfuo.mutation.AddedDefaultAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: productfeature.FieldDefaultAmount,
		})
	}
	if pfuo.mutation.DefaultAmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: productfeature.FieldDefaultAmount,
		})
	}
	if value, ok := pfuo.mutation.DefaultSequenceNum(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productfeature.FieldDefaultSequenceNum,
		})
	}
	if value, ok := pfuo.mutation.AddedDefaultSequenceNum(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productfeature.FieldDefaultSequenceNum,
		})
	}
	if pfuo.mutation.DefaultSequenceNumCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: productfeature.FieldDefaultSequenceNum,
		})
	}
	if value, ok := pfuo.mutation.Abbrev(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productfeature.FieldAbbrev,
		})
	}
	if value, ok := pfuo.mutation.AddedAbbrev(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productfeature.FieldAbbrev,
		})
	}
	if pfuo.mutation.AbbrevCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: productfeature.FieldAbbrev,
		})
	}
	if value, ok := pfuo.mutation.IDCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productfeature.FieldIDCode,
		})
	}
	if pfuo.mutation.IDCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productfeature.FieldIDCode,
		})
	}
	if pfuo.mutation.ProductFeatureCategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productfeature.ProductFeatureCategoryTable,
			Columns: []string{productfeature.ProductFeatureCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productfeaturecategory.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pfuo.mutation.ProductFeatureCategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productfeature.ProductFeatureCategoryTable,
			Columns: []string{productfeature.ProductFeatureCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productfeaturecategory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pfuo.mutation.ProductFeatureTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productfeature.ProductFeatureTypeTable,
			Columns: []string{productfeature.ProductFeatureTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productfeaturetype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pfuo.mutation.ProductFeatureTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productfeature.ProductFeatureTypeTable,
			Columns: []string{productfeature.ProductFeatureTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productfeaturetype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProductFeature{config: pfuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pfuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productfeature.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
