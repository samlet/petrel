// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/predicate"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productfeatureappltype"
)

// ProductFeatureApplTypeQuery is the builder for querying ProductFeatureApplType entities.
type ProductFeatureApplTypeQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.ProductFeatureApplType
	// eager-loading edges.
	withParent                       *ProductFeatureApplTypeQuery
	withChildren                     *ProductFeatureApplTypeQuery
	withChildProductFeatureApplTypes *ProductFeatureApplTypeQuery
	withFKs                          bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ProductFeatureApplTypeQuery builder.
func (pfatq *ProductFeatureApplTypeQuery) Where(ps ...predicate.ProductFeatureApplType) *ProductFeatureApplTypeQuery {
	pfatq.predicates = append(pfatq.predicates, ps...)
	return pfatq
}

// Limit adds a limit step to the query.
func (pfatq *ProductFeatureApplTypeQuery) Limit(limit int) *ProductFeatureApplTypeQuery {
	pfatq.limit = &limit
	return pfatq
}

// Offset adds an offset step to the query.
func (pfatq *ProductFeatureApplTypeQuery) Offset(offset int) *ProductFeatureApplTypeQuery {
	pfatq.offset = &offset
	return pfatq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (pfatq *ProductFeatureApplTypeQuery) Unique(unique bool) *ProductFeatureApplTypeQuery {
	pfatq.unique = &unique
	return pfatq
}

// Order adds an order step to the query.
func (pfatq *ProductFeatureApplTypeQuery) Order(o ...OrderFunc) *ProductFeatureApplTypeQuery {
	pfatq.order = append(pfatq.order, o...)
	return pfatq
}

// QueryParent chains the current query on the "parent" edge.
func (pfatq *ProductFeatureApplTypeQuery) QueryParent() *ProductFeatureApplTypeQuery {
	query := &ProductFeatureApplTypeQuery{config: pfatq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pfatq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pfatq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(productfeatureappltype.Table, productfeatureappltype.FieldID, selector),
			sqlgraph.To(productfeatureappltype.Table, productfeatureappltype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, productfeatureappltype.ParentTable, productfeatureappltype.ParentColumn),
		)
		fromU = sqlgraph.SetNeighbors(pfatq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryChildren chains the current query on the "children" edge.
func (pfatq *ProductFeatureApplTypeQuery) QueryChildren() *ProductFeatureApplTypeQuery {
	query := &ProductFeatureApplTypeQuery{config: pfatq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pfatq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pfatq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(productfeatureappltype.Table, productfeatureappltype.FieldID, selector),
			sqlgraph.To(productfeatureappltype.Table, productfeatureappltype.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, productfeatureappltype.ChildrenTable, productfeatureappltype.ChildrenColumn),
		)
		fromU = sqlgraph.SetNeighbors(pfatq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryChildProductFeatureApplTypes chains the current query on the "child_product_feature_appl_types" edge.
func (pfatq *ProductFeatureApplTypeQuery) QueryChildProductFeatureApplTypes() *ProductFeatureApplTypeQuery {
	query := &ProductFeatureApplTypeQuery{config: pfatq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pfatq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pfatq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(productfeatureappltype.Table, productfeatureappltype.FieldID, selector),
			sqlgraph.To(productfeatureappltype.Table, productfeatureappltype.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, productfeatureappltype.ChildProductFeatureApplTypesTable, productfeatureappltype.ChildProductFeatureApplTypesPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(pfatq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ProductFeatureApplType entity from the query.
// Returns a *NotFoundError when no ProductFeatureApplType was found.
func (pfatq *ProductFeatureApplTypeQuery) First(ctx context.Context) (*ProductFeatureApplType, error) {
	nodes, err := pfatq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{productfeatureappltype.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (pfatq *ProductFeatureApplTypeQuery) FirstX(ctx context.Context) *ProductFeatureApplType {
	node, err := pfatq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ProductFeatureApplType ID from the query.
// Returns a *NotFoundError when no ProductFeatureApplType ID was found.
func (pfatq *ProductFeatureApplTypeQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = pfatq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{productfeatureappltype.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (pfatq *ProductFeatureApplTypeQuery) FirstIDX(ctx context.Context) int {
	id, err := pfatq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ProductFeatureApplType entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one ProductFeatureApplType entity is not found.
// Returns a *NotFoundError when no ProductFeatureApplType entities are found.
func (pfatq *ProductFeatureApplTypeQuery) Only(ctx context.Context) (*ProductFeatureApplType, error) {
	nodes, err := pfatq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{productfeatureappltype.Label}
	default:
		return nil, &NotSingularError{productfeatureappltype.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (pfatq *ProductFeatureApplTypeQuery) OnlyX(ctx context.Context) *ProductFeatureApplType {
	node, err := pfatq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ProductFeatureApplType ID in the query.
// Returns a *NotSingularError when exactly one ProductFeatureApplType ID is not found.
// Returns a *NotFoundError when no entities are found.
func (pfatq *ProductFeatureApplTypeQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = pfatq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{productfeatureappltype.Label}
	default:
		err = &NotSingularError{productfeatureappltype.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (pfatq *ProductFeatureApplTypeQuery) OnlyIDX(ctx context.Context) int {
	id, err := pfatq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ProductFeatureApplTypes.
func (pfatq *ProductFeatureApplTypeQuery) All(ctx context.Context) ([]*ProductFeatureApplType, error) {
	if err := pfatq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return pfatq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (pfatq *ProductFeatureApplTypeQuery) AllX(ctx context.Context) []*ProductFeatureApplType {
	nodes, err := pfatq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ProductFeatureApplType IDs.
func (pfatq *ProductFeatureApplTypeQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := pfatq.Select(productfeatureappltype.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (pfatq *ProductFeatureApplTypeQuery) IDsX(ctx context.Context) []int {
	ids, err := pfatq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (pfatq *ProductFeatureApplTypeQuery) Count(ctx context.Context) (int, error) {
	if err := pfatq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return pfatq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (pfatq *ProductFeatureApplTypeQuery) CountX(ctx context.Context) int {
	count, err := pfatq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (pfatq *ProductFeatureApplTypeQuery) Exist(ctx context.Context) (bool, error) {
	if err := pfatq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return pfatq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (pfatq *ProductFeatureApplTypeQuery) ExistX(ctx context.Context) bool {
	exist, err := pfatq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ProductFeatureApplTypeQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (pfatq *ProductFeatureApplTypeQuery) Clone() *ProductFeatureApplTypeQuery {
	if pfatq == nil {
		return nil
	}
	return &ProductFeatureApplTypeQuery{
		config:                           pfatq.config,
		limit:                            pfatq.limit,
		offset:                           pfatq.offset,
		order:                            append([]OrderFunc{}, pfatq.order...),
		predicates:                       append([]predicate.ProductFeatureApplType{}, pfatq.predicates...),
		withParent:                       pfatq.withParent.Clone(),
		withChildren:                     pfatq.withChildren.Clone(),
		withChildProductFeatureApplTypes: pfatq.withChildProductFeatureApplTypes.Clone(),
		// clone intermediate query.
		sql:  pfatq.sql.Clone(),
		path: pfatq.path,
	}
}

// WithParent tells the query-builder to eager-load the nodes that are connected to
// the "parent" edge. The optional arguments are used to configure the query builder of the edge.
func (pfatq *ProductFeatureApplTypeQuery) WithParent(opts ...func(*ProductFeatureApplTypeQuery)) *ProductFeatureApplTypeQuery {
	query := &ProductFeatureApplTypeQuery{config: pfatq.config}
	for _, opt := range opts {
		opt(query)
	}
	pfatq.withParent = query
	return pfatq
}

// WithChildren tells the query-builder to eager-load the nodes that are connected to
// the "children" edge. The optional arguments are used to configure the query builder of the edge.
func (pfatq *ProductFeatureApplTypeQuery) WithChildren(opts ...func(*ProductFeatureApplTypeQuery)) *ProductFeatureApplTypeQuery {
	query := &ProductFeatureApplTypeQuery{config: pfatq.config}
	for _, opt := range opts {
		opt(query)
	}
	pfatq.withChildren = query
	return pfatq
}

// WithChildProductFeatureApplTypes tells the query-builder to eager-load the nodes that are connected to
// the "child_product_feature_appl_types" edge. The optional arguments are used to configure the query builder of the edge.
func (pfatq *ProductFeatureApplTypeQuery) WithChildProductFeatureApplTypes(opts ...func(*ProductFeatureApplTypeQuery)) *ProductFeatureApplTypeQuery {
	query := &ProductFeatureApplTypeQuery{config: pfatq.config}
	for _, opt := range opts {
		opt(query)
	}
	pfatq.withChildProductFeatureApplTypes = query
	return pfatq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ProductFeatureApplType.Query().
//		GroupBy(productfeatureappltype.FieldCreateTime).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (pfatq *ProductFeatureApplTypeQuery) GroupBy(field string, fields ...string) *ProductFeatureApplTypeGroupBy {
	group := &ProductFeatureApplTypeGroupBy{config: pfatq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := pfatq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return pfatq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//	}
//
//	client.ProductFeatureApplType.Query().
//		Select(productfeatureappltype.FieldCreateTime).
//		Scan(ctx, &v)
//
func (pfatq *ProductFeatureApplTypeQuery) Select(field string, fields ...string) *ProductFeatureApplTypeSelect {
	pfatq.fields = append([]string{field}, fields...)
	return &ProductFeatureApplTypeSelect{ProductFeatureApplTypeQuery: pfatq}
}

func (pfatq *ProductFeatureApplTypeQuery) prepareQuery(ctx context.Context) error {
	for _, f := range pfatq.fields {
		if !productfeatureappltype.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if pfatq.path != nil {
		prev, err := pfatq.path(ctx)
		if err != nil {
			return err
		}
		pfatq.sql = prev
	}
	return nil
}

func (pfatq *ProductFeatureApplTypeQuery) sqlAll(ctx context.Context) ([]*ProductFeatureApplType, error) {
	var (
		nodes       = []*ProductFeatureApplType{}
		withFKs     = pfatq.withFKs
		_spec       = pfatq.querySpec()
		loadedTypes = [3]bool{
			pfatq.withParent != nil,
			pfatq.withChildren != nil,
			pfatq.withChildProductFeatureApplTypes != nil,
		}
	)
	if pfatq.withParent != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, productfeatureappltype.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &ProductFeatureApplType{config: pfatq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, pfatq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := pfatq.withParent; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*ProductFeatureApplType)
		for i := range nodes {
			if nodes[i].product_feature_appl_type_children == nil {
				continue
			}
			fk := *nodes[i].product_feature_appl_type_children
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(productfeatureappltype.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "product_feature_appl_type_children" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Parent = n
			}
		}
	}

	if query := pfatq.withChildren; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*ProductFeatureApplType)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.Children = []*ProductFeatureApplType{}
		}
		query.withFKs = true
		query.Where(predicate.ProductFeatureApplType(func(s *sql.Selector) {
			s.Where(sql.InValues(productfeatureappltype.ChildrenColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.product_feature_appl_type_children
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "product_feature_appl_type_children" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "product_feature_appl_type_children" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.Children = append(node.Edges.Children, n)
		}
	}

	if query := pfatq.withChildProductFeatureApplTypes; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		ids := make(map[int]*ProductFeatureApplType, len(nodes))
		for _, node := range nodes {
			ids[node.ID] = node
			fks = append(fks, node.ID)
			node.Edges.ChildProductFeatureApplTypes = []*ProductFeatureApplType{}
		}
		var (
			edgeids []int
			edges   = make(map[int][]*ProductFeatureApplType)
		)
		_spec := &sqlgraph.EdgeQuerySpec{
			Edge: &sqlgraph.EdgeSpec{
				Inverse: false,
				Table:   productfeatureappltype.ChildProductFeatureApplTypesTable,
				Columns: productfeatureappltype.ChildProductFeatureApplTypesPrimaryKey,
			},
			Predicate: func(s *sql.Selector) {
				s.Where(sql.InValues(productfeatureappltype.ChildProductFeatureApplTypesPrimaryKey[0], fks...))
			},
			ScanValues: func() [2]interface{} {
				return [2]interface{}{new(sql.NullInt64), new(sql.NullInt64)}
			},
			Assign: func(out, in interface{}) error {
				eout, ok := out.(*sql.NullInt64)
				if !ok || eout == nil {
					return fmt.Errorf("unexpected id value for edge-out")
				}
				ein, ok := in.(*sql.NullInt64)
				if !ok || ein == nil {
					return fmt.Errorf("unexpected id value for edge-in")
				}
				outValue := int(eout.Int64)
				inValue := int(ein.Int64)
				node, ok := ids[outValue]
				if !ok {
					return fmt.Errorf("unexpected node id in edges: %v", outValue)
				}
				if _, ok := edges[inValue]; !ok {
					edgeids = append(edgeids, inValue)
				}
				edges[inValue] = append(edges[inValue], node)
				return nil
			},
		}
		if err := sqlgraph.QueryEdges(ctx, pfatq.driver, _spec); err != nil {
			return nil, fmt.Errorf(`query edges "child_product_feature_appl_types": %w`, err)
		}
		query.Where(productfeatureappltype.IDIn(edgeids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := edges[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected "child_product_feature_appl_types" node returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.ChildProductFeatureApplTypes = append(nodes[i].Edges.ChildProductFeatureApplTypes, n)
			}
		}
	}

	return nodes, nil
}

func (pfatq *ProductFeatureApplTypeQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := pfatq.querySpec()
	return sqlgraph.CountNodes(ctx, pfatq.driver, _spec)
}

func (pfatq *ProductFeatureApplTypeQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := pfatq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (pfatq *ProductFeatureApplTypeQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   productfeatureappltype.Table,
			Columns: productfeatureappltype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: productfeatureappltype.FieldID,
			},
		},
		From:   pfatq.sql,
		Unique: true,
	}
	if unique := pfatq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := pfatq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, productfeatureappltype.FieldID)
		for i := range fields {
			if fields[i] != productfeatureappltype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := pfatq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := pfatq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := pfatq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := pfatq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (pfatq *ProductFeatureApplTypeQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(pfatq.driver.Dialect())
	t1 := builder.Table(productfeatureappltype.Table)
	columns := pfatq.fields
	if len(columns) == 0 {
		columns = productfeatureappltype.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if pfatq.sql != nil {
		selector = pfatq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	for _, p := range pfatq.predicates {
		p(selector)
	}
	for _, p := range pfatq.order {
		p(selector)
	}
	if offset := pfatq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := pfatq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ProductFeatureApplTypeGroupBy is the group-by builder for ProductFeatureApplType entities.
type ProductFeatureApplTypeGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (pfatgb *ProductFeatureApplTypeGroupBy) Aggregate(fns ...AggregateFunc) *ProductFeatureApplTypeGroupBy {
	pfatgb.fns = append(pfatgb.fns, fns...)
	return pfatgb
}

// Scan applies the group-by query and scans the result into the given value.
func (pfatgb *ProductFeatureApplTypeGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := pfatgb.path(ctx)
	if err != nil {
		return err
	}
	pfatgb.sql = query
	return pfatgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (pfatgb *ProductFeatureApplTypeGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := pfatgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (pfatgb *ProductFeatureApplTypeGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(pfatgb.fields) > 1 {
		return nil, errors.New("ent: ProductFeatureApplTypeGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := pfatgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (pfatgb *ProductFeatureApplTypeGroupBy) StringsX(ctx context.Context) []string {
	v, err := pfatgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (pfatgb *ProductFeatureApplTypeGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = pfatgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{productfeatureappltype.Label}
	default:
		err = fmt.Errorf("ent: ProductFeatureApplTypeGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (pfatgb *ProductFeatureApplTypeGroupBy) StringX(ctx context.Context) string {
	v, err := pfatgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (pfatgb *ProductFeatureApplTypeGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(pfatgb.fields) > 1 {
		return nil, errors.New("ent: ProductFeatureApplTypeGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := pfatgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (pfatgb *ProductFeatureApplTypeGroupBy) IntsX(ctx context.Context) []int {
	v, err := pfatgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (pfatgb *ProductFeatureApplTypeGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = pfatgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{productfeatureappltype.Label}
	default:
		err = fmt.Errorf("ent: ProductFeatureApplTypeGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (pfatgb *ProductFeatureApplTypeGroupBy) IntX(ctx context.Context) int {
	v, err := pfatgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (pfatgb *ProductFeatureApplTypeGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(pfatgb.fields) > 1 {
		return nil, errors.New("ent: ProductFeatureApplTypeGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := pfatgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (pfatgb *ProductFeatureApplTypeGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := pfatgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (pfatgb *ProductFeatureApplTypeGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = pfatgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{productfeatureappltype.Label}
	default:
		err = fmt.Errorf("ent: ProductFeatureApplTypeGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (pfatgb *ProductFeatureApplTypeGroupBy) Float64X(ctx context.Context) float64 {
	v, err := pfatgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (pfatgb *ProductFeatureApplTypeGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(pfatgb.fields) > 1 {
		return nil, errors.New("ent: ProductFeatureApplTypeGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := pfatgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (pfatgb *ProductFeatureApplTypeGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := pfatgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (pfatgb *ProductFeatureApplTypeGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = pfatgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{productfeatureappltype.Label}
	default:
		err = fmt.Errorf("ent: ProductFeatureApplTypeGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (pfatgb *ProductFeatureApplTypeGroupBy) BoolX(ctx context.Context) bool {
	v, err := pfatgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (pfatgb *ProductFeatureApplTypeGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range pfatgb.fields {
		if !productfeatureappltype.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := pfatgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pfatgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (pfatgb *ProductFeatureApplTypeGroupBy) sqlQuery() *sql.Selector {
	selector := pfatgb.sql.Select()
	aggregation := make([]string, 0, len(pfatgb.fns))
	for _, fn := range pfatgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(pfatgb.fields)+len(pfatgb.fns))
		for _, f := range pfatgb.fields {
			columns = append(columns, selector.C(f))
		}
		for _, c := range aggregation {
			columns = append(columns, c)
		}
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(pfatgb.fields...)...)
}

// ProductFeatureApplTypeSelect is the builder for selecting fields of ProductFeatureApplType entities.
type ProductFeatureApplTypeSelect struct {
	*ProductFeatureApplTypeQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (pfats *ProductFeatureApplTypeSelect) Scan(ctx context.Context, v interface{}) error {
	if err := pfats.prepareQuery(ctx); err != nil {
		return err
	}
	pfats.sql = pfats.ProductFeatureApplTypeQuery.sqlQuery(ctx)
	return pfats.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (pfats *ProductFeatureApplTypeSelect) ScanX(ctx context.Context, v interface{}) {
	if err := pfats.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (pfats *ProductFeatureApplTypeSelect) Strings(ctx context.Context) ([]string, error) {
	if len(pfats.fields) > 1 {
		return nil, errors.New("ent: ProductFeatureApplTypeSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := pfats.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (pfats *ProductFeatureApplTypeSelect) StringsX(ctx context.Context) []string {
	v, err := pfats.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (pfats *ProductFeatureApplTypeSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = pfats.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{productfeatureappltype.Label}
	default:
		err = fmt.Errorf("ent: ProductFeatureApplTypeSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (pfats *ProductFeatureApplTypeSelect) StringX(ctx context.Context) string {
	v, err := pfats.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (pfats *ProductFeatureApplTypeSelect) Ints(ctx context.Context) ([]int, error) {
	if len(pfats.fields) > 1 {
		return nil, errors.New("ent: ProductFeatureApplTypeSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := pfats.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (pfats *ProductFeatureApplTypeSelect) IntsX(ctx context.Context) []int {
	v, err := pfats.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (pfats *ProductFeatureApplTypeSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = pfats.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{productfeatureappltype.Label}
	default:
		err = fmt.Errorf("ent: ProductFeatureApplTypeSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (pfats *ProductFeatureApplTypeSelect) IntX(ctx context.Context) int {
	v, err := pfats.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (pfats *ProductFeatureApplTypeSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(pfats.fields) > 1 {
		return nil, errors.New("ent: ProductFeatureApplTypeSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := pfats.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (pfats *ProductFeatureApplTypeSelect) Float64sX(ctx context.Context) []float64 {
	v, err := pfats.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (pfats *ProductFeatureApplTypeSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = pfats.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{productfeatureappltype.Label}
	default:
		err = fmt.Errorf("ent: ProductFeatureApplTypeSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (pfats *ProductFeatureApplTypeSelect) Float64X(ctx context.Context) float64 {
	v, err := pfats.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (pfats *ProductFeatureApplTypeSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(pfats.fields) > 1 {
		return nil, errors.New("ent: ProductFeatureApplTypeSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := pfats.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (pfats *ProductFeatureApplTypeSelect) BoolsX(ctx context.Context) []bool {
	v, err := pfats.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (pfats *ProductFeatureApplTypeSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = pfats.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{productfeatureappltype.Label}
	default:
		err = fmt.Errorf("ent: ProductFeatureApplTypeSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (pfats *ProductFeatureApplTypeSelect) BoolX(ctx context.Context) bool {
	v, err := pfats.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (pfats *ProductFeatureApplTypeSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := pfats.sql.Query()
	if err := pfats.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
