// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/predicate"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productfeatureappltype"
)

// ProductFeatureApplTypeUpdate is the builder for updating ProductFeatureApplType entities.
type ProductFeatureApplTypeUpdate struct {
	config
	hooks    []Hook
	mutation *ProductFeatureApplTypeMutation
}

// Where adds a new predicate for the ProductFeatureApplTypeUpdate builder.
func (pfatu *ProductFeatureApplTypeUpdate) Where(ps ...predicate.ProductFeatureApplType) *ProductFeatureApplTypeUpdate {
	pfatu.mutation.predicates = append(pfatu.mutation.predicates, ps...)
	return pfatu
}

// SetStringRef sets the "string_ref" field.
func (pfatu *ProductFeatureApplTypeUpdate) SetStringRef(s string) *ProductFeatureApplTypeUpdate {
	pfatu.mutation.SetStringRef(s)
	return pfatu
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (pfatu *ProductFeatureApplTypeUpdate) SetNillableStringRef(s *string) *ProductFeatureApplTypeUpdate {
	if s != nil {
		pfatu.SetStringRef(*s)
	}
	return pfatu
}

// ClearStringRef clears the value of the "string_ref" field.
func (pfatu *ProductFeatureApplTypeUpdate) ClearStringRef() *ProductFeatureApplTypeUpdate {
	pfatu.mutation.ClearStringRef()
	return pfatu
}

// SetHasTable sets the "has_table" field.
func (pfatu *ProductFeatureApplTypeUpdate) SetHasTable(pt productfeatureappltype.HasTable) *ProductFeatureApplTypeUpdate {
	pfatu.mutation.SetHasTable(pt)
	return pfatu
}

// SetNillableHasTable sets the "has_table" field if the given value is not nil.
func (pfatu *ProductFeatureApplTypeUpdate) SetNillableHasTable(pt *productfeatureappltype.HasTable) *ProductFeatureApplTypeUpdate {
	if pt != nil {
		pfatu.SetHasTable(*pt)
	}
	return pfatu
}

// ClearHasTable clears the value of the "has_table" field.
func (pfatu *ProductFeatureApplTypeUpdate) ClearHasTable() *ProductFeatureApplTypeUpdate {
	pfatu.mutation.ClearHasTable()
	return pfatu
}

// SetDescription sets the "description" field.
func (pfatu *ProductFeatureApplTypeUpdate) SetDescription(s string) *ProductFeatureApplTypeUpdate {
	pfatu.mutation.SetDescription(s)
	return pfatu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pfatu *ProductFeatureApplTypeUpdate) SetNillableDescription(s *string) *ProductFeatureApplTypeUpdate {
	if s != nil {
		pfatu.SetDescription(*s)
	}
	return pfatu
}

// ClearDescription clears the value of the "description" field.
func (pfatu *ProductFeatureApplTypeUpdate) ClearDescription() *ProductFeatureApplTypeUpdate {
	pfatu.mutation.ClearDescription()
	return pfatu
}

// SetParentID sets the "parent" edge to the ProductFeatureApplType entity by ID.
func (pfatu *ProductFeatureApplTypeUpdate) SetParentID(id int) *ProductFeatureApplTypeUpdate {
	pfatu.mutation.SetParentID(id)
	return pfatu
}

// SetNillableParentID sets the "parent" edge to the ProductFeatureApplType entity by ID if the given value is not nil.
func (pfatu *ProductFeatureApplTypeUpdate) SetNillableParentID(id *int) *ProductFeatureApplTypeUpdate {
	if id != nil {
		pfatu = pfatu.SetParentID(*id)
	}
	return pfatu
}

// SetParent sets the "parent" edge to the ProductFeatureApplType entity.
func (pfatu *ProductFeatureApplTypeUpdate) SetParent(p *ProductFeatureApplType) *ProductFeatureApplTypeUpdate {
	return pfatu.SetParentID(p.ID)
}

// AddChildIDs adds the "children" edge to the ProductFeatureApplType entity by IDs.
func (pfatu *ProductFeatureApplTypeUpdate) AddChildIDs(ids ...int) *ProductFeatureApplTypeUpdate {
	pfatu.mutation.AddChildIDs(ids...)
	return pfatu
}

// AddChildren adds the "children" edges to the ProductFeatureApplType entity.
func (pfatu *ProductFeatureApplTypeUpdate) AddChildren(p ...*ProductFeatureApplType) *ProductFeatureApplTypeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pfatu.AddChildIDs(ids...)
}

// AddChildProductFeatureApplTypeIDs adds the "child_product_feature_appl_types" edge to the ProductFeatureApplType entity by IDs.
func (pfatu *ProductFeatureApplTypeUpdate) AddChildProductFeatureApplTypeIDs(ids ...int) *ProductFeatureApplTypeUpdate {
	pfatu.mutation.AddChildProductFeatureApplTypeIDs(ids...)
	return pfatu
}

// AddChildProductFeatureApplTypes adds the "child_product_feature_appl_types" edges to the ProductFeatureApplType entity.
func (pfatu *ProductFeatureApplTypeUpdate) AddChildProductFeatureApplTypes(p ...*ProductFeatureApplType) *ProductFeatureApplTypeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pfatu.AddChildProductFeatureApplTypeIDs(ids...)
}

// Mutation returns the ProductFeatureApplTypeMutation object of the builder.
func (pfatu *ProductFeatureApplTypeUpdate) Mutation() *ProductFeatureApplTypeMutation {
	return pfatu.mutation
}

// ClearParent clears the "parent" edge to the ProductFeatureApplType entity.
func (pfatu *ProductFeatureApplTypeUpdate) ClearParent() *ProductFeatureApplTypeUpdate {
	pfatu.mutation.ClearParent()
	return pfatu
}

// ClearChildren clears all "children" edges to the ProductFeatureApplType entity.
func (pfatu *ProductFeatureApplTypeUpdate) ClearChildren() *ProductFeatureApplTypeUpdate {
	pfatu.mutation.ClearChildren()
	return pfatu
}

// RemoveChildIDs removes the "children" edge to ProductFeatureApplType entities by IDs.
func (pfatu *ProductFeatureApplTypeUpdate) RemoveChildIDs(ids ...int) *ProductFeatureApplTypeUpdate {
	pfatu.mutation.RemoveChildIDs(ids...)
	return pfatu
}

// RemoveChildren removes "children" edges to ProductFeatureApplType entities.
func (pfatu *ProductFeatureApplTypeUpdate) RemoveChildren(p ...*ProductFeatureApplType) *ProductFeatureApplTypeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pfatu.RemoveChildIDs(ids...)
}

// ClearChildProductFeatureApplTypes clears all "child_product_feature_appl_types" edges to the ProductFeatureApplType entity.
func (pfatu *ProductFeatureApplTypeUpdate) ClearChildProductFeatureApplTypes() *ProductFeatureApplTypeUpdate {
	pfatu.mutation.ClearChildProductFeatureApplTypes()
	return pfatu
}

// RemoveChildProductFeatureApplTypeIDs removes the "child_product_feature_appl_types" edge to ProductFeatureApplType entities by IDs.
func (pfatu *ProductFeatureApplTypeUpdate) RemoveChildProductFeatureApplTypeIDs(ids ...int) *ProductFeatureApplTypeUpdate {
	pfatu.mutation.RemoveChildProductFeatureApplTypeIDs(ids...)
	return pfatu
}

// RemoveChildProductFeatureApplTypes removes "child_product_feature_appl_types" edges to ProductFeatureApplType entities.
func (pfatu *ProductFeatureApplTypeUpdate) RemoveChildProductFeatureApplTypes(p ...*ProductFeatureApplType) *ProductFeatureApplTypeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pfatu.RemoveChildProductFeatureApplTypeIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pfatu *ProductFeatureApplTypeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	pfatu.defaults()
	if len(pfatu.hooks) == 0 {
		if err = pfatu.check(); err != nil {
			return 0, err
		}
		affected, err = pfatu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProductFeatureApplTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pfatu.check(); err != nil {
				return 0, err
			}
			pfatu.mutation = mutation
			affected, err = pfatu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pfatu.hooks) - 1; i >= 0; i-- {
			mut = pfatu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pfatu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pfatu *ProductFeatureApplTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := pfatu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pfatu *ProductFeatureApplTypeUpdate) Exec(ctx context.Context) error {
	_, err := pfatu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pfatu *ProductFeatureApplTypeUpdate) ExecX(ctx context.Context) {
	if err := pfatu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pfatu *ProductFeatureApplTypeUpdate) defaults() {
	if _, ok := pfatu.mutation.UpdateTime(); !ok {
		v := productfeatureappltype.UpdateDefaultUpdateTime()
		pfatu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pfatu *ProductFeatureApplTypeUpdate) check() error {
	if v, ok := pfatu.mutation.HasTable(); ok {
		if err := productfeatureappltype.HasTableValidator(v); err != nil {
			return &ValidationError{Name: "has_table", err: fmt.Errorf("ent: validator failed for field \"has_table\": %w", err)}
		}
	}
	return nil
}

func (pfatu *ProductFeatureApplTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   productfeatureappltype.Table,
			Columns: productfeatureappltype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: productfeatureappltype.FieldID,
			},
		},
	}
	if ps := pfatu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pfatu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productfeatureappltype.FieldUpdateTime,
		})
	}
	if value, ok := pfatu.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productfeatureappltype.FieldStringRef,
		})
	}
	if pfatu.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productfeatureappltype.FieldStringRef,
		})
	}
	if value, ok := pfatu.mutation.HasTable(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productfeatureappltype.FieldHasTable,
		})
	}
	if pfatu.mutation.HasTableCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productfeatureappltype.FieldHasTable,
		})
	}
	if value, ok := pfatu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productfeatureappltype.FieldDescription,
		})
	}
	if pfatu.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productfeatureappltype.FieldDescription,
		})
	}
	if pfatu.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productfeatureappltype.ParentTable,
			Columns: []string{productfeatureappltype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productfeatureappltype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pfatu.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productfeatureappltype.ParentTable,
			Columns: []string{productfeatureappltype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productfeatureappltype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pfatu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productfeatureappltype.ChildrenTable,
			Columns: []string{productfeatureappltype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productfeatureappltype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pfatu.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !pfatu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productfeatureappltype.ChildrenTable,
			Columns: []string{productfeatureappltype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productfeatureappltype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pfatu.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productfeatureappltype.ChildrenTable,
			Columns: []string{productfeatureappltype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productfeatureappltype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pfatu.mutation.ChildProductFeatureApplTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   productfeatureappltype.ChildProductFeatureApplTypesTable,
			Columns: productfeatureappltype.ChildProductFeatureApplTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productfeatureappltype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pfatu.mutation.RemovedChildProductFeatureApplTypesIDs(); len(nodes) > 0 && !pfatu.mutation.ChildProductFeatureApplTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   productfeatureappltype.ChildProductFeatureApplTypesTable,
			Columns: productfeatureappltype.ChildProductFeatureApplTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productfeatureappltype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pfatu.mutation.ChildProductFeatureApplTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   productfeatureappltype.ChildProductFeatureApplTypesTable,
			Columns: productfeatureappltype.ChildProductFeatureApplTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productfeatureappltype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pfatu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productfeatureappltype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ProductFeatureApplTypeUpdateOne is the builder for updating a single ProductFeatureApplType entity.
type ProductFeatureApplTypeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProductFeatureApplTypeMutation
}

// SetStringRef sets the "string_ref" field.
func (pfatuo *ProductFeatureApplTypeUpdateOne) SetStringRef(s string) *ProductFeatureApplTypeUpdateOne {
	pfatuo.mutation.SetStringRef(s)
	return pfatuo
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (pfatuo *ProductFeatureApplTypeUpdateOne) SetNillableStringRef(s *string) *ProductFeatureApplTypeUpdateOne {
	if s != nil {
		pfatuo.SetStringRef(*s)
	}
	return pfatuo
}

// ClearStringRef clears the value of the "string_ref" field.
func (pfatuo *ProductFeatureApplTypeUpdateOne) ClearStringRef() *ProductFeatureApplTypeUpdateOne {
	pfatuo.mutation.ClearStringRef()
	return pfatuo
}

// SetHasTable sets the "has_table" field.
func (pfatuo *ProductFeatureApplTypeUpdateOne) SetHasTable(pt productfeatureappltype.HasTable) *ProductFeatureApplTypeUpdateOne {
	pfatuo.mutation.SetHasTable(pt)
	return pfatuo
}

// SetNillableHasTable sets the "has_table" field if the given value is not nil.
func (pfatuo *ProductFeatureApplTypeUpdateOne) SetNillableHasTable(pt *productfeatureappltype.HasTable) *ProductFeatureApplTypeUpdateOne {
	if pt != nil {
		pfatuo.SetHasTable(*pt)
	}
	return pfatuo
}

// ClearHasTable clears the value of the "has_table" field.
func (pfatuo *ProductFeatureApplTypeUpdateOne) ClearHasTable() *ProductFeatureApplTypeUpdateOne {
	pfatuo.mutation.ClearHasTable()
	return pfatuo
}

// SetDescription sets the "description" field.
func (pfatuo *ProductFeatureApplTypeUpdateOne) SetDescription(s string) *ProductFeatureApplTypeUpdateOne {
	pfatuo.mutation.SetDescription(s)
	return pfatuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pfatuo *ProductFeatureApplTypeUpdateOne) SetNillableDescription(s *string) *ProductFeatureApplTypeUpdateOne {
	if s != nil {
		pfatuo.SetDescription(*s)
	}
	return pfatuo
}

// ClearDescription clears the value of the "description" field.
func (pfatuo *ProductFeatureApplTypeUpdateOne) ClearDescription() *ProductFeatureApplTypeUpdateOne {
	pfatuo.mutation.ClearDescription()
	return pfatuo
}

// SetParentID sets the "parent" edge to the ProductFeatureApplType entity by ID.
func (pfatuo *ProductFeatureApplTypeUpdateOne) SetParentID(id int) *ProductFeatureApplTypeUpdateOne {
	pfatuo.mutation.SetParentID(id)
	return pfatuo
}

// SetNillableParentID sets the "parent" edge to the ProductFeatureApplType entity by ID if the given value is not nil.
func (pfatuo *ProductFeatureApplTypeUpdateOne) SetNillableParentID(id *int) *ProductFeatureApplTypeUpdateOne {
	if id != nil {
		pfatuo = pfatuo.SetParentID(*id)
	}
	return pfatuo
}

// SetParent sets the "parent" edge to the ProductFeatureApplType entity.
func (pfatuo *ProductFeatureApplTypeUpdateOne) SetParent(p *ProductFeatureApplType) *ProductFeatureApplTypeUpdateOne {
	return pfatuo.SetParentID(p.ID)
}

// AddChildIDs adds the "children" edge to the ProductFeatureApplType entity by IDs.
func (pfatuo *ProductFeatureApplTypeUpdateOne) AddChildIDs(ids ...int) *ProductFeatureApplTypeUpdateOne {
	pfatuo.mutation.AddChildIDs(ids...)
	return pfatuo
}

// AddChildren adds the "children" edges to the ProductFeatureApplType entity.
func (pfatuo *ProductFeatureApplTypeUpdateOne) AddChildren(p ...*ProductFeatureApplType) *ProductFeatureApplTypeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pfatuo.AddChildIDs(ids...)
}

// AddChildProductFeatureApplTypeIDs adds the "child_product_feature_appl_types" edge to the ProductFeatureApplType entity by IDs.
func (pfatuo *ProductFeatureApplTypeUpdateOne) AddChildProductFeatureApplTypeIDs(ids ...int) *ProductFeatureApplTypeUpdateOne {
	pfatuo.mutation.AddChildProductFeatureApplTypeIDs(ids...)
	return pfatuo
}

// AddChildProductFeatureApplTypes adds the "child_product_feature_appl_types" edges to the ProductFeatureApplType entity.
func (pfatuo *ProductFeatureApplTypeUpdateOne) AddChildProductFeatureApplTypes(p ...*ProductFeatureApplType) *ProductFeatureApplTypeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pfatuo.AddChildProductFeatureApplTypeIDs(ids...)
}

// Mutation returns the ProductFeatureApplTypeMutation object of the builder.
func (pfatuo *ProductFeatureApplTypeUpdateOne) Mutation() *ProductFeatureApplTypeMutation {
	return pfatuo.mutation
}

// ClearParent clears the "parent" edge to the ProductFeatureApplType entity.
func (pfatuo *ProductFeatureApplTypeUpdateOne) ClearParent() *ProductFeatureApplTypeUpdateOne {
	pfatuo.mutation.ClearParent()
	return pfatuo
}

// ClearChildren clears all "children" edges to the ProductFeatureApplType entity.
func (pfatuo *ProductFeatureApplTypeUpdateOne) ClearChildren() *ProductFeatureApplTypeUpdateOne {
	pfatuo.mutation.ClearChildren()
	return pfatuo
}

// RemoveChildIDs removes the "children" edge to ProductFeatureApplType entities by IDs.
func (pfatuo *ProductFeatureApplTypeUpdateOne) RemoveChildIDs(ids ...int) *ProductFeatureApplTypeUpdateOne {
	pfatuo.mutation.RemoveChildIDs(ids...)
	return pfatuo
}

// RemoveChildren removes "children" edges to ProductFeatureApplType entities.
func (pfatuo *ProductFeatureApplTypeUpdateOne) RemoveChildren(p ...*ProductFeatureApplType) *ProductFeatureApplTypeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pfatuo.RemoveChildIDs(ids...)
}

// ClearChildProductFeatureApplTypes clears all "child_product_feature_appl_types" edges to the ProductFeatureApplType entity.
func (pfatuo *ProductFeatureApplTypeUpdateOne) ClearChildProductFeatureApplTypes() *ProductFeatureApplTypeUpdateOne {
	pfatuo.mutation.ClearChildProductFeatureApplTypes()
	return pfatuo
}

// RemoveChildProductFeatureApplTypeIDs removes the "child_product_feature_appl_types" edge to ProductFeatureApplType entities by IDs.
func (pfatuo *ProductFeatureApplTypeUpdateOne) RemoveChildProductFeatureApplTypeIDs(ids ...int) *ProductFeatureApplTypeUpdateOne {
	pfatuo.mutation.RemoveChildProductFeatureApplTypeIDs(ids...)
	return pfatuo
}

// RemoveChildProductFeatureApplTypes removes "child_product_feature_appl_types" edges to ProductFeatureApplType entities.
func (pfatuo *ProductFeatureApplTypeUpdateOne) RemoveChildProductFeatureApplTypes(p ...*ProductFeatureApplType) *ProductFeatureApplTypeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pfatuo.RemoveChildProductFeatureApplTypeIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pfatuo *ProductFeatureApplTypeUpdateOne) Select(field string, fields ...string) *ProductFeatureApplTypeUpdateOne {
	pfatuo.fields = append([]string{field}, fields...)
	return pfatuo
}

// Save executes the query and returns the updated ProductFeatureApplType entity.
func (pfatuo *ProductFeatureApplTypeUpdateOne) Save(ctx context.Context) (*ProductFeatureApplType, error) {
	var (
		err  error
		node *ProductFeatureApplType
	)
	pfatuo.defaults()
	if len(pfatuo.hooks) == 0 {
		if err = pfatuo.check(); err != nil {
			return nil, err
		}
		node, err = pfatuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProductFeatureApplTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pfatuo.check(); err != nil {
				return nil, err
			}
			pfatuo.mutation = mutation
			node, err = pfatuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pfatuo.hooks) - 1; i >= 0; i-- {
			mut = pfatuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pfatuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (pfatuo *ProductFeatureApplTypeUpdateOne) SaveX(ctx context.Context) *ProductFeatureApplType {
	node, err := pfatuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pfatuo *ProductFeatureApplTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := pfatuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pfatuo *ProductFeatureApplTypeUpdateOne) ExecX(ctx context.Context) {
	if err := pfatuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pfatuo *ProductFeatureApplTypeUpdateOne) defaults() {
	if _, ok := pfatuo.mutation.UpdateTime(); !ok {
		v := productfeatureappltype.UpdateDefaultUpdateTime()
		pfatuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pfatuo *ProductFeatureApplTypeUpdateOne) check() error {
	if v, ok := pfatuo.mutation.HasTable(); ok {
		if err := productfeatureappltype.HasTableValidator(v); err != nil {
			return &ValidationError{Name: "has_table", err: fmt.Errorf("ent: validator failed for field \"has_table\": %w", err)}
		}
	}
	return nil
}

func (pfatuo *ProductFeatureApplTypeUpdateOne) sqlSave(ctx context.Context) (_node *ProductFeatureApplType, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   productfeatureappltype.Table,
			Columns: productfeatureappltype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: productfeatureappltype.FieldID,
			},
		},
	}
	id, ok := pfatuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ProductFeatureApplType.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := pfatuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, productfeatureappltype.FieldID)
		for _, f := range fields {
			if !productfeatureappltype.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != productfeatureappltype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pfatuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pfatuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productfeatureappltype.FieldUpdateTime,
		})
	}
	if value, ok := pfatuo.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productfeatureappltype.FieldStringRef,
		})
	}
	if pfatuo.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productfeatureappltype.FieldStringRef,
		})
	}
	if value, ok := pfatuo.mutation.HasTable(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productfeatureappltype.FieldHasTable,
		})
	}
	if pfatuo.mutation.HasTableCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productfeatureappltype.FieldHasTable,
		})
	}
	if value, ok := pfatuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productfeatureappltype.FieldDescription,
		})
	}
	if pfatuo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productfeatureappltype.FieldDescription,
		})
	}
	if pfatuo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productfeatureappltype.ParentTable,
			Columns: []string{productfeatureappltype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productfeatureappltype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pfatuo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productfeatureappltype.ParentTable,
			Columns: []string{productfeatureappltype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productfeatureappltype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pfatuo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productfeatureappltype.ChildrenTable,
			Columns: []string{productfeatureappltype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productfeatureappltype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pfatuo.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !pfatuo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productfeatureappltype.ChildrenTable,
			Columns: []string{productfeatureappltype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productfeatureappltype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pfatuo.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productfeatureappltype.ChildrenTable,
			Columns: []string{productfeatureappltype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productfeatureappltype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pfatuo.mutation.ChildProductFeatureApplTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   productfeatureappltype.ChildProductFeatureApplTypesTable,
			Columns: productfeatureappltype.ChildProductFeatureApplTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productfeatureappltype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pfatuo.mutation.RemovedChildProductFeatureApplTypesIDs(); len(nodes) > 0 && !pfatuo.mutation.ChildProductFeatureApplTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   productfeatureappltype.ChildProductFeatureApplTypesTable,
			Columns: productfeatureappltype.ChildProductFeatureApplTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productfeatureappltype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pfatuo.mutation.ChildProductFeatureApplTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   productfeatureappltype.ChildProductFeatureApplTypesTable,
			Columns: productfeatureappltype.ChildProductFeatureApplTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productfeatureappltype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProductFeatureApplType{config: pfatuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pfatuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productfeatureappltype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
