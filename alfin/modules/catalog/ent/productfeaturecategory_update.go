// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/predicate"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productfeature"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productfeaturecategory"
)

// ProductFeatureCategoryUpdate is the builder for updating ProductFeatureCategory entities.
type ProductFeatureCategoryUpdate struct {
	config
	hooks    []Hook
	mutation *ProductFeatureCategoryMutation
}

// Where adds a new predicate for the ProductFeatureCategoryUpdate builder.
func (pfcu *ProductFeatureCategoryUpdate) Where(ps ...predicate.ProductFeatureCategory) *ProductFeatureCategoryUpdate {
	pfcu.mutation.predicates = append(pfcu.mutation.predicates, ps...)
	return pfcu
}

// SetStringRef sets the "string_ref" field.
func (pfcu *ProductFeatureCategoryUpdate) SetStringRef(s string) *ProductFeatureCategoryUpdate {
	pfcu.mutation.SetStringRef(s)
	return pfcu
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (pfcu *ProductFeatureCategoryUpdate) SetNillableStringRef(s *string) *ProductFeatureCategoryUpdate {
	if s != nil {
		pfcu.SetStringRef(*s)
	}
	return pfcu
}

// ClearStringRef clears the value of the "string_ref" field.
func (pfcu *ProductFeatureCategoryUpdate) ClearStringRef() *ProductFeatureCategoryUpdate {
	pfcu.mutation.ClearStringRef()
	return pfcu
}

// SetDescription sets the "description" field.
func (pfcu *ProductFeatureCategoryUpdate) SetDescription(s string) *ProductFeatureCategoryUpdate {
	pfcu.mutation.SetDescription(s)
	return pfcu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pfcu *ProductFeatureCategoryUpdate) SetNillableDescription(s *string) *ProductFeatureCategoryUpdate {
	if s != nil {
		pfcu.SetDescription(*s)
	}
	return pfcu
}

// ClearDescription clears the value of the "description" field.
func (pfcu *ProductFeatureCategoryUpdate) ClearDescription() *ProductFeatureCategoryUpdate {
	pfcu.mutation.ClearDescription()
	return pfcu
}

// SetParentID sets the "parent" edge to the ProductFeatureCategory entity by ID.
func (pfcu *ProductFeatureCategoryUpdate) SetParentID(id int) *ProductFeatureCategoryUpdate {
	pfcu.mutation.SetParentID(id)
	return pfcu
}

// SetNillableParentID sets the "parent" edge to the ProductFeatureCategory entity by ID if the given value is not nil.
func (pfcu *ProductFeatureCategoryUpdate) SetNillableParentID(id *int) *ProductFeatureCategoryUpdate {
	if id != nil {
		pfcu = pfcu.SetParentID(*id)
	}
	return pfcu
}

// SetParent sets the "parent" edge to the ProductFeatureCategory entity.
func (pfcu *ProductFeatureCategoryUpdate) SetParent(p *ProductFeatureCategory) *ProductFeatureCategoryUpdate {
	return pfcu.SetParentID(p.ID)
}

// AddChildIDs adds the "children" edge to the ProductFeatureCategory entity by IDs.
func (pfcu *ProductFeatureCategoryUpdate) AddChildIDs(ids ...int) *ProductFeatureCategoryUpdate {
	pfcu.mutation.AddChildIDs(ids...)
	return pfcu
}

// AddChildren adds the "children" edges to the ProductFeatureCategory entity.
func (pfcu *ProductFeatureCategoryUpdate) AddChildren(p ...*ProductFeatureCategory) *ProductFeatureCategoryUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pfcu.AddChildIDs(ids...)
}

// AddProductFeatureIDs adds the "product_features" edge to the ProductFeature entity by IDs.
func (pfcu *ProductFeatureCategoryUpdate) AddProductFeatureIDs(ids ...int) *ProductFeatureCategoryUpdate {
	pfcu.mutation.AddProductFeatureIDs(ids...)
	return pfcu
}

// AddProductFeatures adds the "product_features" edges to the ProductFeature entity.
func (pfcu *ProductFeatureCategoryUpdate) AddProductFeatures(p ...*ProductFeature) *ProductFeatureCategoryUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pfcu.AddProductFeatureIDs(ids...)
}

// AddChildProductFeatureCategoryIDs adds the "child_product_feature_categories" edge to the ProductFeatureCategory entity by IDs.
func (pfcu *ProductFeatureCategoryUpdate) AddChildProductFeatureCategoryIDs(ids ...int) *ProductFeatureCategoryUpdate {
	pfcu.mutation.AddChildProductFeatureCategoryIDs(ids...)
	return pfcu
}

// AddChildProductFeatureCategories adds the "child_product_feature_categories" edges to the ProductFeatureCategory entity.
func (pfcu *ProductFeatureCategoryUpdate) AddChildProductFeatureCategories(p ...*ProductFeatureCategory) *ProductFeatureCategoryUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pfcu.AddChildProductFeatureCategoryIDs(ids...)
}

// Mutation returns the ProductFeatureCategoryMutation object of the builder.
func (pfcu *ProductFeatureCategoryUpdate) Mutation() *ProductFeatureCategoryMutation {
	return pfcu.mutation
}

// ClearParent clears the "parent" edge to the ProductFeatureCategory entity.
func (pfcu *ProductFeatureCategoryUpdate) ClearParent() *ProductFeatureCategoryUpdate {
	pfcu.mutation.ClearParent()
	return pfcu
}

// ClearChildren clears all "children" edges to the ProductFeatureCategory entity.
func (pfcu *ProductFeatureCategoryUpdate) ClearChildren() *ProductFeatureCategoryUpdate {
	pfcu.mutation.ClearChildren()
	return pfcu
}

// RemoveChildIDs removes the "children" edge to ProductFeatureCategory entities by IDs.
func (pfcu *ProductFeatureCategoryUpdate) RemoveChildIDs(ids ...int) *ProductFeatureCategoryUpdate {
	pfcu.mutation.RemoveChildIDs(ids...)
	return pfcu
}

// RemoveChildren removes "children" edges to ProductFeatureCategory entities.
func (pfcu *ProductFeatureCategoryUpdate) RemoveChildren(p ...*ProductFeatureCategory) *ProductFeatureCategoryUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pfcu.RemoveChildIDs(ids...)
}

// ClearProductFeatures clears all "product_features" edges to the ProductFeature entity.
func (pfcu *ProductFeatureCategoryUpdate) ClearProductFeatures() *ProductFeatureCategoryUpdate {
	pfcu.mutation.ClearProductFeatures()
	return pfcu
}

// RemoveProductFeatureIDs removes the "product_features" edge to ProductFeature entities by IDs.
func (pfcu *ProductFeatureCategoryUpdate) RemoveProductFeatureIDs(ids ...int) *ProductFeatureCategoryUpdate {
	pfcu.mutation.RemoveProductFeatureIDs(ids...)
	return pfcu
}

// RemoveProductFeatures removes "product_features" edges to ProductFeature entities.
func (pfcu *ProductFeatureCategoryUpdate) RemoveProductFeatures(p ...*ProductFeature) *ProductFeatureCategoryUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pfcu.RemoveProductFeatureIDs(ids...)
}

// ClearChildProductFeatureCategories clears all "child_product_feature_categories" edges to the ProductFeatureCategory entity.
func (pfcu *ProductFeatureCategoryUpdate) ClearChildProductFeatureCategories() *ProductFeatureCategoryUpdate {
	pfcu.mutation.ClearChildProductFeatureCategories()
	return pfcu
}

// RemoveChildProductFeatureCategoryIDs removes the "child_product_feature_categories" edge to ProductFeatureCategory entities by IDs.
func (pfcu *ProductFeatureCategoryUpdate) RemoveChildProductFeatureCategoryIDs(ids ...int) *ProductFeatureCategoryUpdate {
	pfcu.mutation.RemoveChildProductFeatureCategoryIDs(ids...)
	return pfcu
}

// RemoveChildProductFeatureCategories removes "child_product_feature_categories" edges to ProductFeatureCategory entities.
func (pfcu *ProductFeatureCategoryUpdate) RemoveChildProductFeatureCategories(p ...*ProductFeatureCategory) *ProductFeatureCategoryUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pfcu.RemoveChildProductFeatureCategoryIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pfcu *ProductFeatureCategoryUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	pfcu.defaults()
	if len(pfcu.hooks) == 0 {
		affected, err = pfcu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProductFeatureCategoryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pfcu.mutation = mutation
			affected, err = pfcu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pfcu.hooks) - 1; i >= 0; i-- {
			mut = pfcu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pfcu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pfcu *ProductFeatureCategoryUpdate) SaveX(ctx context.Context) int {
	affected, err := pfcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pfcu *ProductFeatureCategoryUpdate) Exec(ctx context.Context) error {
	_, err := pfcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pfcu *ProductFeatureCategoryUpdate) ExecX(ctx context.Context) {
	if err := pfcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pfcu *ProductFeatureCategoryUpdate) defaults() {
	if _, ok := pfcu.mutation.UpdateTime(); !ok {
		v := productfeaturecategory.UpdateDefaultUpdateTime()
		pfcu.mutation.SetUpdateTime(v)
	}
}

func (pfcu *ProductFeatureCategoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   productfeaturecategory.Table,
			Columns: productfeaturecategory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: productfeaturecategory.FieldID,
			},
		},
	}
	if ps := pfcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pfcu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productfeaturecategory.FieldUpdateTime,
		})
	}
	if value, ok := pfcu.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productfeaturecategory.FieldStringRef,
		})
	}
	if pfcu.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productfeaturecategory.FieldStringRef,
		})
	}
	if value, ok := pfcu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productfeaturecategory.FieldDescription,
		})
	}
	if pfcu.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productfeaturecategory.FieldDescription,
		})
	}
	if pfcu.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productfeaturecategory.ParentTable,
			Columns: []string{productfeaturecategory.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productfeaturecategory.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pfcu.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productfeaturecategory.ParentTable,
			Columns: []string{productfeaturecategory.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productfeaturecategory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pfcu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productfeaturecategory.ChildrenTable,
			Columns: []string{productfeaturecategory.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productfeaturecategory.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pfcu.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !pfcu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productfeaturecategory.ChildrenTable,
			Columns: []string{productfeaturecategory.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productfeaturecategory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pfcu.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productfeaturecategory.ChildrenTable,
			Columns: []string{productfeaturecategory.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productfeaturecategory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pfcu.mutation.ProductFeaturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productfeaturecategory.ProductFeaturesTable,
			Columns: []string{productfeaturecategory.ProductFeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productfeature.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pfcu.mutation.RemovedProductFeaturesIDs(); len(nodes) > 0 && !pfcu.mutation.ProductFeaturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productfeaturecategory.ProductFeaturesTable,
			Columns: []string{productfeaturecategory.ProductFeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productfeature.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pfcu.mutation.ProductFeaturesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productfeaturecategory.ProductFeaturesTable,
			Columns: []string{productfeaturecategory.ProductFeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productfeature.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pfcu.mutation.ChildProductFeatureCategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   productfeaturecategory.ChildProductFeatureCategoriesTable,
			Columns: productfeaturecategory.ChildProductFeatureCategoriesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productfeaturecategory.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pfcu.mutation.RemovedChildProductFeatureCategoriesIDs(); len(nodes) > 0 && !pfcu.mutation.ChildProductFeatureCategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   productfeaturecategory.ChildProductFeatureCategoriesTable,
			Columns: productfeaturecategory.ChildProductFeatureCategoriesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productfeaturecategory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pfcu.mutation.ChildProductFeatureCategoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   productfeaturecategory.ChildProductFeatureCategoriesTable,
			Columns: productfeaturecategory.ChildProductFeatureCategoriesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productfeaturecategory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pfcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productfeaturecategory.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ProductFeatureCategoryUpdateOne is the builder for updating a single ProductFeatureCategory entity.
type ProductFeatureCategoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProductFeatureCategoryMutation
}

// SetStringRef sets the "string_ref" field.
func (pfcuo *ProductFeatureCategoryUpdateOne) SetStringRef(s string) *ProductFeatureCategoryUpdateOne {
	pfcuo.mutation.SetStringRef(s)
	return pfcuo
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (pfcuo *ProductFeatureCategoryUpdateOne) SetNillableStringRef(s *string) *ProductFeatureCategoryUpdateOne {
	if s != nil {
		pfcuo.SetStringRef(*s)
	}
	return pfcuo
}

// ClearStringRef clears the value of the "string_ref" field.
func (pfcuo *ProductFeatureCategoryUpdateOne) ClearStringRef() *ProductFeatureCategoryUpdateOne {
	pfcuo.mutation.ClearStringRef()
	return pfcuo
}

// SetDescription sets the "description" field.
func (pfcuo *ProductFeatureCategoryUpdateOne) SetDescription(s string) *ProductFeatureCategoryUpdateOne {
	pfcuo.mutation.SetDescription(s)
	return pfcuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pfcuo *ProductFeatureCategoryUpdateOne) SetNillableDescription(s *string) *ProductFeatureCategoryUpdateOne {
	if s != nil {
		pfcuo.SetDescription(*s)
	}
	return pfcuo
}

// ClearDescription clears the value of the "description" field.
func (pfcuo *ProductFeatureCategoryUpdateOne) ClearDescription() *ProductFeatureCategoryUpdateOne {
	pfcuo.mutation.ClearDescription()
	return pfcuo
}

// SetParentID sets the "parent" edge to the ProductFeatureCategory entity by ID.
func (pfcuo *ProductFeatureCategoryUpdateOne) SetParentID(id int) *ProductFeatureCategoryUpdateOne {
	pfcuo.mutation.SetParentID(id)
	return pfcuo
}

// SetNillableParentID sets the "parent" edge to the ProductFeatureCategory entity by ID if the given value is not nil.
func (pfcuo *ProductFeatureCategoryUpdateOne) SetNillableParentID(id *int) *ProductFeatureCategoryUpdateOne {
	if id != nil {
		pfcuo = pfcuo.SetParentID(*id)
	}
	return pfcuo
}

// SetParent sets the "parent" edge to the ProductFeatureCategory entity.
func (pfcuo *ProductFeatureCategoryUpdateOne) SetParent(p *ProductFeatureCategory) *ProductFeatureCategoryUpdateOne {
	return pfcuo.SetParentID(p.ID)
}

// AddChildIDs adds the "children" edge to the ProductFeatureCategory entity by IDs.
func (pfcuo *ProductFeatureCategoryUpdateOne) AddChildIDs(ids ...int) *ProductFeatureCategoryUpdateOne {
	pfcuo.mutation.AddChildIDs(ids...)
	return pfcuo
}

// AddChildren adds the "children" edges to the ProductFeatureCategory entity.
func (pfcuo *ProductFeatureCategoryUpdateOne) AddChildren(p ...*ProductFeatureCategory) *ProductFeatureCategoryUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pfcuo.AddChildIDs(ids...)
}

// AddProductFeatureIDs adds the "product_features" edge to the ProductFeature entity by IDs.
func (pfcuo *ProductFeatureCategoryUpdateOne) AddProductFeatureIDs(ids ...int) *ProductFeatureCategoryUpdateOne {
	pfcuo.mutation.AddProductFeatureIDs(ids...)
	return pfcuo
}

// AddProductFeatures adds the "product_features" edges to the ProductFeature entity.
func (pfcuo *ProductFeatureCategoryUpdateOne) AddProductFeatures(p ...*ProductFeature) *ProductFeatureCategoryUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pfcuo.AddProductFeatureIDs(ids...)
}

// AddChildProductFeatureCategoryIDs adds the "child_product_feature_categories" edge to the ProductFeatureCategory entity by IDs.
func (pfcuo *ProductFeatureCategoryUpdateOne) AddChildProductFeatureCategoryIDs(ids ...int) *ProductFeatureCategoryUpdateOne {
	pfcuo.mutation.AddChildProductFeatureCategoryIDs(ids...)
	return pfcuo
}

// AddChildProductFeatureCategories adds the "child_product_feature_categories" edges to the ProductFeatureCategory entity.
func (pfcuo *ProductFeatureCategoryUpdateOne) AddChildProductFeatureCategories(p ...*ProductFeatureCategory) *ProductFeatureCategoryUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pfcuo.AddChildProductFeatureCategoryIDs(ids...)
}

// Mutation returns the ProductFeatureCategoryMutation object of the builder.
func (pfcuo *ProductFeatureCategoryUpdateOne) Mutation() *ProductFeatureCategoryMutation {
	return pfcuo.mutation
}

// ClearParent clears the "parent" edge to the ProductFeatureCategory entity.
func (pfcuo *ProductFeatureCategoryUpdateOne) ClearParent() *ProductFeatureCategoryUpdateOne {
	pfcuo.mutation.ClearParent()
	return pfcuo
}

// ClearChildren clears all "children" edges to the ProductFeatureCategory entity.
func (pfcuo *ProductFeatureCategoryUpdateOne) ClearChildren() *ProductFeatureCategoryUpdateOne {
	pfcuo.mutation.ClearChildren()
	return pfcuo
}

// RemoveChildIDs removes the "children" edge to ProductFeatureCategory entities by IDs.
func (pfcuo *ProductFeatureCategoryUpdateOne) RemoveChildIDs(ids ...int) *ProductFeatureCategoryUpdateOne {
	pfcuo.mutation.RemoveChildIDs(ids...)
	return pfcuo
}

// RemoveChildren removes "children" edges to ProductFeatureCategory entities.
func (pfcuo *ProductFeatureCategoryUpdateOne) RemoveChildren(p ...*ProductFeatureCategory) *ProductFeatureCategoryUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pfcuo.RemoveChildIDs(ids...)
}

// ClearProductFeatures clears all "product_features" edges to the ProductFeature entity.
func (pfcuo *ProductFeatureCategoryUpdateOne) ClearProductFeatures() *ProductFeatureCategoryUpdateOne {
	pfcuo.mutation.ClearProductFeatures()
	return pfcuo
}

// RemoveProductFeatureIDs removes the "product_features" edge to ProductFeature entities by IDs.
func (pfcuo *ProductFeatureCategoryUpdateOne) RemoveProductFeatureIDs(ids ...int) *ProductFeatureCategoryUpdateOne {
	pfcuo.mutation.RemoveProductFeatureIDs(ids...)
	return pfcuo
}

// RemoveProductFeatures removes "product_features" edges to ProductFeature entities.
func (pfcuo *ProductFeatureCategoryUpdateOne) RemoveProductFeatures(p ...*ProductFeature) *ProductFeatureCategoryUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pfcuo.RemoveProductFeatureIDs(ids...)
}

// ClearChildProductFeatureCategories clears all "child_product_feature_categories" edges to the ProductFeatureCategory entity.
func (pfcuo *ProductFeatureCategoryUpdateOne) ClearChildProductFeatureCategories() *ProductFeatureCategoryUpdateOne {
	pfcuo.mutation.ClearChildProductFeatureCategories()
	return pfcuo
}

// RemoveChildProductFeatureCategoryIDs removes the "child_product_feature_categories" edge to ProductFeatureCategory entities by IDs.
func (pfcuo *ProductFeatureCategoryUpdateOne) RemoveChildProductFeatureCategoryIDs(ids ...int) *ProductFeatureCategoryUpdateOne {
	pfcuo.mutation.RemoveChildProductFeatureCategoryIDs(ids...)
	return pfcuo
}

// RemoveChildProductFeatureCategories removes "child_product_feature_categories" edges to ProductFeatureCategory entities.
func (pfcuo *ProductFeatureCategoryUpdateOne) RemoveChildProductFeatureCategories(p ...*ProductFeatureCategory) *ProductFeatureCategoryUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pfcuo.RemoveChildProductFeatureCategoryIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pfcuo *ProductFeatureCategoryUpdateOne) Select(field string, fields ...string) *ProductFeatureCategoryUpdateOne {
	pfcuo.fields = append([]string{field}, fields...)
	return pfcuo
}

// Save executes the query and returns the updated ProductFeatureCategory entity.
func (pfcuo *ProductFeatureCategoryUpdateOne) Save(ctx context.Context) (*ProductFeatureCategory, error) {
	var (
		err  error
		node *ProductFeatureCategory
	)
	pfcuo.defaults()
	if len(pfcuo.hooks) == 0 {
		node, err = pfcuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProductFeatureCategoryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pfcuo.mutation = mutation
			node, err = pfcuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pfcuo.hooks) - 1; i >= 0; i-- {
			mut = pfcuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pfcuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (pfcuo *ProductFeatureCategoryUpdateOne) SaveX(ctx context.Context) *ProductFeatureCategory {
	node, err := pfcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pfcuo *ProductFeatureCategoryUpdateOne) Exec(ctx context.Context) error {
	_, err := pfcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pfcuo *ProductFeatureCategoryUpdateOne) ExecX(ctx context.Context) {
	if err := pfcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pfcuo *ProductFeatureCategoryUpdateOne) defaults() {
	if _, ok := pfcuo.mutation.UpdateTime(); !ok {
		v := productfeaturecategory.UpdateDefaultUpdateTime()
		pfcuo.mutation.SetUpdateTime(v)
	}
}

func (pfcuo *ProductFeatureCategoryUpdateOne) sqlSave(ctx context.Context) (_node *ProductFeatureCategory, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   productfeaturecategory.Table,
			Columns: productfeaturecategory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: productfeaturecategory.FieldID,
			},
		},
	}
	id, ok := pfcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ProductFeatureCategory.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := pfcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, productfeaturecategory.FieldID)
		for _, f := range fields {
			if !productfeaturecategory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != productfeaturecategory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pfcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pfcuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productfeaturecategory.FieldUpdateTime,
		})
	}
	if value, ok := pfcuo.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productfeaturecategory.FieldStringRef,
		})
	}
	if pfcuo.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productfeaturecategory.FieldStringRef,
		})
	}
	if value, ok := pfcuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productfeaturecategory.FieldDescription,
		})
	}
	if pfcuo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productfeaturecategory.FieldDescription,
		})
	}
	if pfcuo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productfeaturecategory.ParentTable,
			Columns: []string{productfeaturecategory.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productfeaturecategory.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pfcuo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productfeaturecategory.ParentTable,
			Columns: []string{productfeaturecategory.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productfeaturecategory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pfcuo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productfeaturecategory.ChildrenTable,
			Columns: []string{productfeaturecategory.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productfeaturecategory.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pfcuo.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !pfcuo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productfeaturecategory.ChildrenTable,
			Columns: []string{productfeaturecategory.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productfeaturecategory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pfcuo.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productfeaturecategory.ChildrenTable,
			Columns: []string{productfeaturecategory.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productfeaturecategory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pfcuo.mutation.ProductFeaturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productfeaturecategory.ProductFeaturesTable,
			Columns: []string{productfeaturecategory.ProductFeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productfeature.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pfcuo.mutation.RemovedProductFeaturesIDs(); len(nodes) > 0 && !pfcuo.mutation.ProductFeaturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productfeaturecategory.ProductFeaturesTable,
			Columns: []string{productfeaturecategory.ProductFeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productfeature.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pfcuo.mutation.ProductFeaturesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productfeaturecategory.ProductFeaturesTable,
			Columns: []string{productfeaturecategory.ProductFeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productfeature.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pfcuo.mutation.ChildProductFeatureCategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   productfeaturecategory.ChildProductFeatureCategoriesTable,
			Columns: productfeaturecategory.ChildProductFeatureCategoriesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productfeaturecategory.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pfcuo.mutation.RemovedChildProductFeatureCategoriesIDs(); len(nodes) > 0 && !pfcuo.mutation.ChildProductFeatureCategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   productfeaturecategory.ChildProductFeatureCategoriesTable,
			Columns: productfeaturecategory.ChildProductFeatureCategoriesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productfeaturecategory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pfcuo.mutation.ChildProductFeatureCategoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   productfeaturecategory.ChildProductFeatureCategoriesTable,
			Columns: productfeaturecategory.ChildProductFeatureCategoriesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productfeaturecategory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProductFeatureCategory{config: pfcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pfcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productfeaturecategory.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
