// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productfeatureiactntype"
)

// ProductFeatureIactnType is the model entity for the ProductFeatureIactnType schema.
type ProductFeatureIactnType struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// StringRef holds the value of the "string_ref" field.
	StringRef string `json:"string_ref,omitempty"`
	// HasTable holds the value of the "has_table" field.
	HasTable productfeatureiactntype.HasTable `json:"has_table,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProductFeatureIactnTypeQuery when eager-loading is set.
	Edges                               ProductFeatureIactnTypeEdges `json:"edges"`
	product_feature_iactn_type_children *int
}

// ProductFeatureIactnTypeEdges holds the relations/edges for other nodes in the graph.
type ProductFeatureIactnTypeEdges struct {
	// Parent holds the value of the parent edge.
	Parent *ProductFeatureIactnType `json:"parent,omitempty"`
	// Children holds the value of the children edge.
	Children []*ProductFeatureIactnType `json:"children,omitempty"`
	// ChildProductFeatureIactnTypes holds the value of the child_product_feature_iactn_types edge.
	ChildProductFeatureIactnTypes []*ProductFeatureIactnType `json:"child_product_feature_iactn_types,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// ParentOrErr returns the Parent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProductFeatureIactnTypeEdges) ParentOrErr() (*ProductFeatureIactnType, error) {
	if e.loadedTypes[0] {
		if e.Parent == nil {
			// The edge parent was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: productfeatureiactntype.Label}
		}
		return e.Parent, nil
	}
	return nil, &NotLoadedError{edge: "parent"}
}

// ChildrenOrErr returns the Children value or an error if the edge
// was not loaded in eager-loading.
func (e ProductFeatureIactnTypeEdges) ChildrenOrErr() ([]*ProductFeatureIactnType, error) {
	if e.loadedTypes[1] {
		return e.Children, nil
	}
	return nil, &NotLoadedError{edge: "children"}
}

// ChildProductFeatureIactnTypesOrErr returns the ChildProductFeatureIactnTypes value or an error if the edge
// was not loaded in eager-loading.
func (e ProductFeatureIactnTypeEdges) ChildProductFeatureIactnTypesOrErr() ([]*ProductFeatureIactnType, error) {
	if e.loadedTypes[2] {
		return e.ChildProductFeatureIactnTypes, nil
	}
	return nil, &NotLoadedError{edge: "child_product_feature_iactn_types"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProductFeatureIactnType) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case productfeatureiactntype.FieldID:
			values[i] = new(sql.NullInt64)
		case productfeatureiactntype.FieldStringRef, productfeatureiactntype.FieldHasTable, productfeatureiactntype.FieldDescription:
			values[i] = new(sql.NullString)
		case productfeatureiactntype.FieldCreateTime, productfeatureiactntype.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case productfeatureiactntype.ForeignKeys[0]: // product_feature_iactn_type_children
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ProductFeatureIactnType", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProductFeatureIactnType fields.
func (pfit *ProductFeatureIactnType) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case productfeatureiactntype.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pfit.ID = int(value.Int64)
		case productfeatureiactntype.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				pfit.CreateTime = value.Time
			}
		case productfeatureiactntype.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				pfit.UpdateTime = value.Time
			}
		case productfeatureiactntype.FieldStringRef:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field string_ref", values[i])
			} else if value.Valid {
				pfit.StringRef = value.String
			}
		case productfeatureiactntype.FieldHasTable:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field has_table", values[i])
			} else if value.Valid {
				pfit.HasTable = productfeatureiactntype.HasTable(value.String)
			}
		case productfeatureiactntype.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				pfit.Description = value.String
			}
		case productfeatureiactntype.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field product_feature_iactn_type_children", value)
			} else if value.Valid {
				pfit.product_feature_iactn_type_children = new(int)
				*pfit.product_feature_iactn_type_children = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryParent queries the "parent" edge of the ProductFeatureIactnType entity.
func (pfit *ProductFeatureIactnType) QueryParent() *ProductFeatureIactnTypeQuery {
	return (&ProductFeatureIactnTypeClient{config: pfit.config}).QueryParent(pfit)
}

// QueryChildren queries the "children" edge of the ProductFeatureIactnType entity.
func (pfit *ProductFeatureIactnType) QueryChildren() *ProductFeatureIactnTypeQuery {
	return (&ProductFeatureIactnTypeClient{config: pfit.config}).QueryChildren(pfit)
}

// QueryChildProductFeatureIactnTypes queries the "child_product_feature_iactn_types" edge of the ProductFeatureIactnType entity.
func (pfit *ProductFeatureIactnType) QueryChildProductFeatureIactnTypes() *ProductFeatureIactnTypeQuery {
	return (&ProductFeatureIactnTypeClient{config: pfit.config}).QueryChildProductFeatureIactnTypes(pfit)
}

// Update returns a builder for updating this ProductFeatureIactnType.
// Note that you need to call ProductFeatureIactnType.Unwrap() before calling this method if this ProductFeatureIactnType
// was returned from a transaction, and the transaction was committed or rolled back.
func (pfit *ProductFeatureIactnType) Update() *ProductFeatureIactnTypeUpdateOne {
	return (&ProductFeatureIactnTypeClient{config: pfit.config}).UpdateOne(pfit)
}

// Unwrap unwraps the ProductFeatureIactnType entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pfit *ProductFeatureIactnType) Unwrap() *ProductFeatureIactnType {
	tx, ok := pfit.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProductFeatureIactnType is not a transactional entity")
	}
	pfit.config.driver = tx.drv
	return pfit
}

// String implements the fmt.Stringer.
func (pfit *ProductFeatureIactnType) String() string {
	var builder strings.Builder
	builder.WriteString("ProductFeatureIactnType(")
	builder.WriteString(fmt.Sprintf("id=%v", pfit.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(pfit.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(pfit.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", string_ref=")
	builder.WriteString(pfit.StringRef)
	builder.WriteString(", has_table=")
	builder.WriteString(fmt.Sprintf("%v", pfit.HasTable))
	builder.WriteString(", description=")
	builder.WriteString(pfit.Description)
	builder.WriteByte(')')
	return builder.String()
}

// ProductFeatureIactnTypes is a parsable slice of ProductFeatureIactnType.
type ProductFeatureIactnTypes []*ProductFeatureIactnType

func (pfit ProductFeatureIactnTypes) config(cfg config) {
	for _i := range pfit {
		pfit[_i].config = cfg
	}
}
