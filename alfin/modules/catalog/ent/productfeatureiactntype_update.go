// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/predicate"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productfeatureiactntype"
)

// ProductFeatureIactnTypeUpdate is the builder for updating ProductFeatureIactnType entities.
type ProductFeatureIactnTypeUpdate struct {
	config
	hooks    []Hook
	mutation *ProductFeatureIactnTypeMutation
}

// Where adds a new predicate for the ProductFeatureIactnTypeUpdate builder.
func (pfitu *ProductFeatureIactnTypeUpdate) Where(ps ...predicate.ProductFeatureIactnType) *ProductFeatureIactnTypeUpdate {
	pfitu.mutation.predicates = append(pfitu.mutation.predicates, ps...)
	return pfitu
}

// SetStringRef sets the "string_ref" field.
func (pfitu *ProductFeatureIactnTypeUpdate) SetStringRef(s string) *ProductFeatureIactnTypeUpdate {
	pfitu.mutation.SetStringRef(s)
	return pfitu
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (pfitu *ProductFeatureIactnTypeUpdate) SetNillableStringRef(s *string) *ProductFeatureIactnTypeUpdate {
	if s != nil {
		pfitu.SetStringRef(*s)
	}
	return pfitu
}

// ClearStringRef clears the value of the "string_ref" field.
func (pfitu *ProductFeatureIactnTypeUpdate) ClearStringRef() *ProductFeatureIactnTypeUpdate {
	pfitu.mutation.ClearStringRef()
	return pfitu
}

// SetHasTable sets the "has_table" field.
func (pfitu *ProductFeatureIactnTypeUpdate) SetHasTable(pt productfeatureiactntype.HasTable) *ProductFeatureIactnTypeUpdate {
	pfitu.mutation.SetHasTable(pt)
	return pfitu
}

// SetNillableHasTable sets the "has_table" field if the given value is not nil.
func (pfitu *ProductFeatureIactnTypeUpdate) SetNillableHasTable(pt *productfeatureiactntype.HasTable) *ProductFeatureIactnTypeUpdate {
	if pt != nil {
		pfitu.SetHasTable(*pt)
	}
	return pfitu
}

// ClearHasTable clears the value of the "has_table" field.
func (pfitu *ProductFeatureIactnTypeUpdate) ClearHasTable() *ProductFeatureIactnTypeUpdate {
	pfitu.mutation.ClearHasTable()
	return pfitu
}

// SetDescription sets the "description" field.
func (pfitu *ProductFeatureIactnTypeUpdate) SetDescription(s string) *ProductFeatureIactnTypeUpdate {
	pfitu.mutation.SetDescription(s)
	return pfitu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pfitu *ProductFeatureIactnTypeUpdate) SetNillableDescription(s *string) *ProductFeatureIactnTypeUpdate {
	if s != nil {
		pfitu.SetDescription(*s)
	}
	return pfitu
}

// ClearDescription clears the value of the "description" field.
func (pfitu *ProductFeatureIactnTypeUpdate) ClearDescription() *ProductFeatureIactnTypeUpdate {
	pfitu.mutation.ClearDescription()
	return pfitu
}

// SetParentID sets the "parent" edge to the ProductFeatureIactnType entity by ID.
func (pfitu *ProductFeatureIactnTypeUpdate) SetParentID(id int) *ProductFeatureIactnTypeUpdate {
	pfitu.mutation.SetParentID(id)
	return pfitu
}

// SetNillableParentID sets the "parent" edge to the ProductFeatureIactnType entity by ID if the given value is not nil.
func (pfitu *ProductFeatureIactnTypeUpdate) SetNillableParentID(id *int) *ProductFeatureIactnTypeUpdate {
	if id != nil {
		pfitu = pfitu.SetParentID(*id)
	}
	return pfitu
}

// SetParent sets the "parent" edge to the ProductFeatureIactnType entity.
func (pfitu *ProductFeatureIactnTypeUpdate) SetParent(p *ProductFeatureIactnType) *ProductFeatureIactnTypeUpdate {
	return pfitu.SetParentID(p.ID)
}

// AddChildIDs adds the "children" edge to the ProductFeatureIactnType entity by IDs.
func (pfitu *ProductFeatureIactnTypeUpdate) AddChildIDs(ids ...int) *ProductFeatureIactnTypeUpdate {
	pfitu.mutation.AddChildIDs(ids...)
	return pfitu
}

// AddChildren adds the "children" edges to the ProductFeatureIactnType entity.
func (pfitu *ProductFeatureIactnTypeUpdate) AddChildren(p ...*ProductFeatureIactnType) *ProductFeatureIactnTypeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pfitu.AddChildIDs(ids...)
}

// AddChildProductFeatureIactnTypeIDs adds the "child_product_feature_iactn_types" edge to the ProductFeatureIactnType entity by IDs.
func (pfitu *ProductFeatureIactnTypeUpdate) AddChildProductFeatureIactnTypeIDs(ids ...int) *ProductFeatureIactnTypeUpdate {
	pfitu.mutation.AddChildProductFeatureIactnTypeIDs(ids...)
	return pfitu
}

// AddChildProductFeatureIactnTypes adds the "child_product_feature_iactn_types" edges to the ProductFeatureIactnType entity.
func (pfitu *ProductFeatureIactnTypeUpdate) AddChildProductFeatureIactnTypes(p ...*ProductFeatureIactnType) *ProductFeatureIactnTypeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pfitu.AddChildProductFeatureIactnTypeIDs(ids...)
}

// Mutation returns the ProductFeatureIactnTypeMutation object of the builder.
func (pfitu *ProductFeatureIactnTypeUpdate) Mutation() *ProductFeatureIactnTypeMutation {
	return pfitu.mutation
}

// ClearParent clears the "parent" edge to the ProductFeatureIactnType entity.
func (pfitu *ProductFeatureIactnTypeUpdate) ClearParent() *ProductFeatureIactnTypeUpdate {
	pfitu.mutation.ClearParent()
	return pfitu
}

// ClearChildren clears all "children" edges to the ProductFeatureIactnType entity.
func (pfitu *ProductFeatureIactnTypeUpdate) ClearChildren() *ProductFeatureIactnTypeUpdate {
	pfitu.mutation.ClearChildren()
	return pfitu
}

// RemoveChildIDs removes the "children" edge to ProductFeatureIactnType entities by IDs.
func (pfitu *ProductFeatureIactnTypeUpdate) RemoveChildIDs(ids ...int) *ProductFeatureIactnTypeUpdate {
	pfitu.mutation.RemoveChildIDs(ids...)
	return pfitu
}

// RemoveChildren removes "children" edges to ProductFeatureIactnType entities.
func (pfitu *ProductFeatureIactnTypeUpdate) RemoveChildren(p ...*ProductFeatureIactnType) *ProductFeatureIactnTypeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pfitu.RemoveChildIDs(ids...)
}

// ClearChildProductFeatureIactnTypes clears all "child_product_feature_iactn_types" edges to the ProductFeatureIactnType entity.
func (pfitu *ProductFeatureIactnTypeUpdate) ClearChildProductFeatureIactnTypes() *ProductFeatureIactnTypeUpdate {
	pfitu.mutation.ClearChildProductFeatureIactnTypes()
	return pfitu
}

// RemoveChildProductFeatureIactnTypeIDs removes the "child_product_feature_iactn_types" edge to ProductFeatureIactnType entities by IDs.
func (pfitu *ProductFeatureIactnTypeUpdate) RemoveChildProductFeatureIactnTypeIDs(ids ...int) *ProductFeatureIactnTypeUpdate {
	pfitu.mutation.RemoveChildProductFeatureIactnTypeIDs(ids...)
	return pfitu
}

// RemoveChildProductFeatureIactnTypes removes "child_product_feature_iactn_types" edges to ProductFeatureIactnType entities.
func (pfitu *ProductFeatureIactnTypeUpdate) RemoveChildProductFeatureIactnTypes(p ...*ProductFeatureIactnType) *ProductFeatureIactnTypeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pfitu.RemoveChildProductFeatureIactnTypeIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pfitu *ProductFeatureIactnTypeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	pfitu.defaults()
	if len(pfitu.hooks) == 0 {
		if err = pfitu.check(); err != nil {
			return 0, err
		}
		affected, err = pfitu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProductFeatureIactnTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pfitu.check(); err != nil {
				return 0, err
			}
			pfitu.mutation = mutation
			affected, err = pfitu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pfitu.hooks) - 1; i >= 0; i-- {
			mut = pfitu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pfitu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pfitu *ProductFeatureIactnTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := pfitu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pfitu *ProductFeatureIactnTypeUpdate) Exec(ctx context.Context) error {
	_, err := pfitu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pfitu *ProductFeatureIactnTypeUpdate) ExecX(ctx context.Context) {
	if err := pfitu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pfitu *ProductFeatureIactnTypeUpdate) defaults() {
	if _, ok := pfitu.mutation.UpdateTime(); !ok {
		v := productfeatureiactntype.UpdateDefaultUpdateTime()
		pfitu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pfitu *ProductFeatureIactnTypeUpdate) check() error {
	if v, ok := pfitu.mutation.HasTable(); ok {
		if err := productfeatureiactntype.HasTableValidator(v); err != nil {
			return &ValidationError{Name: "has_table", err: fmt.Errorf("ent: validator failed for field \"has_table\": %w", err)}
		}
	}
	return nil
}

func (pfitu *ProductFeatureIactnTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   productfeatureiactntype.Table,
			Columns: productfeatureiactntype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: productfeatureiactntype.FieldID,
			},
		},
	}
	if ps := pfitu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pfitu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productfeatureiactntype.FieldUpdateTime,
		})
	}
	if value, ok := pfitu.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productfeatureiactntype.FieldStringRef,
		})
	}
	if pfitu.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productfeatureiactntype.FieldStringRef,
		})
	}
	if value, ok := pfitu.mutation.HasTable(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productfeatureiactntype.FieldHasTable,
		})
	}
	if pfitu.mutation.HasTableCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productfeatureiactntype.FieldHasTable,
		})
	}
	if value, ok := pfitu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productfeatureiactntype.FieldDescription,
		})
	}
	if pfitu.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productfeatureiactntype.FieldDescription,
		})
	}
	if pfitu.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productfeatureiactntype.ParentTable,
			Columns: []string{productfeatureiactntype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productfeatureiactntype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pfitu.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productfeatureiactntype.ParentTable,
			Columns: []string{productfeatureiactntype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productfeatureiactntype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pfitu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productfeatureiactntype.ChildrenTable,
			Columns: []string{productfeatureiactntype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productfeatureiactntype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pfitu.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !pfitu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productfeatureiactntype.ChildrenTable,
			Columns: []string{productfeatureiactntype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productfeatureiactntype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pfitu.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productfeatureiactntype.ChildrenTable,
			Columns: []string{productfeatureiactntype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productfeatureiactntype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pfitu.mutation.ChildProductFeatureIactnTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   productfeatureiactntype.ChildProductFeatureIactnTypesTable,
			Columns: productfeatureiactntype.ChildProductFeatureIactnTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productfeatureiactntype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pfitu.mutation.RemovedChildProductFeatureIactnTypesIDs(); len(nodes) > 0 && !pfitu.mutation.ChildProductFeatureIactnTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   productfeatureiactntype.ChildProductFeatureIactnTypesTable,
			Columns: productfeatureiactntype.ChildProductFeatureIactnTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productfeatureiactntype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pfitu.mutation.ChildProductFeatureIactnTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   productfeatureiactntype.ChildProductFeatureIactnTypesTable,
			Columns: productfeatureiactntype.ChildProductFeatureIactnTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productfeatureiactntype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pfitu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productfeatureiactntype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ProductFeatureIactnTypeUpdateOne is the builder for updating a single ProductFeatureIactnType entity.
type ProductFeatureIactnTypeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProductFeatureIactnTypeMutation
}

// SetStringRef sets the "string_ref" field.
func (pfituo *ProductFeatureIactnTypeUpdateOne) SetStringRef(s string) *ProductFeatureIactnTypeUpdateOne {
	pfituo.mutation.SetStringRef(s)
	return pfituo
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (pfituo *ProductFeatureIactnTypeUpdateOne) SetNillableStringRef(s *string) *ProductFeatureIactnTypeUpdateOne {
	if s != nil {
		pfituo.SetStringRef(*s)
	}
	return pfituo
}

// ClearStringRef clears the value of the "string_ref" field.
func (pfituo *ProductFeatureIactnTypeUpdateOne) ClearStringRef() *ProductFeatureIactnTypeUpdateOne {
	pfituo.mutation.ClearStringRef()
	return pfituo
}

// SetHasTable sets the "has_table" field.
func (pfituo *ProductFeatureIactnTypeUpdateOne) SetHasTable(pt productfeatureiactntype.HasTable) *ProductFeatureIactnTypeUpdateOne {
	pfituo.mutation.SetHasTable(pt)
	return pfituo
}

// SetNillableHasTable sets the "has_table" field if the given value is not nil.
func (pfituo *ProductFeatureIactnTypeUpdateOne) SetNillableHasTable(pt *productfeatureiactntype.HasTable) *ProductFeatureIactnTypeUpdateOne {
	if pt != nil {
		pfituo.SetHasTable(*pt)
	}
	return pfituo
}

// ClearHasTable clears the value of the "has_table" field.
func (pfituo *ProductFeatureIactnTypeUpdateOne) ClearHasTable() *ProductFeatureIactnTypeUpdateOne {
	pfituo.mutation.ClearHasTable()
	return pfituo
}

// SetDescription sets the "description" field.
func (pfituo *ProductFeatureIactnTypeUpdateOne) SetDescription(s string) *ProductFeatureIactnTypeUpdateOne {
	pfituo.mutation.SetDescription(s)
	return pfituo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pfituo *ProductFeatureIactnTypeUpdateOne) SetNillableDescription(s *string) *ProductFeatureIactnTypeUpdateOne {
	if s != nil {
		pfituo.SetDescription(*s)
	}
	return pfituo
}

// ClearDescription clears the value of the "description" field.
func (pfituo *ProductFeatureIactnTypeUpdateOne) ClearDescription() *ProductFeatureIactnTypeUpdateOne {
	pfituo.mutation.ClearDescription()
	return pfituo
}

// SetParentID sets the "parent" edge to the ProductFeatureIactnType entity by ID.
func (pfituo *ProductFeatureIactnTypeUpdateOne) SetParentID(id int) *ProductFeatureIactnTypeUpdateOne {
	pfituo.mutation.SetParentID(id)
	return pfituo
}

// SetNillableParentID sets the "parent" edge to the ProductFeatureIactnType entity by ID if the given value is not nil.
func (pfituo *ProductFeatureIactnTypeUpdateOne) SetNillableParentID(id *int) *ProductFeatureIactnTypeUpdateOne {
	if id != nil {
		pfituo = pfituo.SetParentID(*id)
	}
	return pfituo
}

// SetParent sets the "parent" edge to the ProductFeatureIactnType entity.
func (pfituo *ProductFeatureIactnTypeUpdateOne) SetParent(p *ProductFeatureIactnType) *ProductFeatureIactnTypeUpdateOne {
	return pfituo.SetParentID(p.ID)
}

// AddChildIDs adds the "children" edge to the ProductFeatureIactnType entity by IDs.
func (pfituo *ProductFeatureIactnTypeUpdateOne) AddChildIDs(ids ...int) *ProductFeatureIactnTypeUpdateOne {
	pfituo.mutation.AddChildIDs(ids...)
	return pfituo
}

// AddChildren adds the "children" edges to the ProductFeatureIactnType entity.
func (pfituo *ProductFeatureIactnTypeUpdateOne) AddChildren(p ...*ProductFeatureIactnType) *ProductFeatureIactnTypeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pfituo.AddChildIDs(ids...)
}

// AddChildProductFeatureIactnTypeIDs adds the "child_product_feature_iactn_types" edge to the ProductFeatureIactnType entity by IDs.
func (pfituo *ProductFeatureIactnTypeUpdateOne) AddChildProductFeatureIactnTypeIDs(ids ...int) *ProductFeatureIactnTypeUpdateOne {
	pfituo.mutation.AddChildProductFeatureIactnTypeIDs(ids...)
	return pfituo
}

// AddChildProductFeatureIactnTypes adds the "child_product_feature_iactn_types" edges to the ProductFeatureIactnType entity.
func (pfituo *ProductFeatureIactnTypeUpdateOne) AddChildProductFeatureIactnTypes(p ...*ProductFeatureIactnType) *ProductFeatureIactnTypeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pfituo.AddChildProductFeatureIactnTypeIDs(ids...)
}

// Mutation returns the ProductFeatureIactnTypeMutation object of the builder.
func (pfituo *ProductFeatureIactnTypeUpdateOne) Mutation() *ProductFeatureIactnTypeMutation {
	return pfituo.mutation
}

// ClearParent clears the "parent" edge to the ProductFeatureIactnType entity.
func (pfituo *ProductFeatureIactnTypeUpdateOne) ClearParent() *ProductFeatureIactnTypeUpdateOne {
	pfituo.mutation.ClearParent()
	return pfituo
}

// ClearChildren clears all "children" edges to the ProductFeatureIactnType entity.
func (pfituo *ProductFeatureIactnTypeUpdateOne) ClearChildren() *ProductFeatureIactnTypeUpdateOne {
	pfituo.mutation.ClearChildren()
	return pfituo
}

// RemoveChildIDs removes the "children" edge to ProductFeatureIactnType entities by IDs.
func (pfituo *ProductFeatureIactnTypeUpdateOne) RemoveChildIDs(ids ...int) *ProductFeatureIactnTypeUpdateOne {
	pfituo.mutation.RemoveChildIDs(ids...)
	return pfituo
}

// RemoveChildren removes "children" edges to ProductFeatureIactnType entities.
func (pfituo *ProductFeatureIactnTypeUpdateOne) RemoveChildren(p ...*ProductFeatureIactnType) *ProductFeatureIactnTypeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pfituo.RemoveChildIDs(ids...)
}

// ClearChildProductFeatureIactnTypes clears all "child_product_feature_iactn_types" edges to the ProductFeatureIactnType entity.
func (pfituo *ProductFeatureIactnTypeUpdateOne) ClearChildProductFeatureIactnTypes() *ProductFeatureIactnTypeUpdateOne {
	pfituo.mutation.ClearChildProductFeatureIactnTypes()
	return pfituo
}

// RemoveChildProductFeatureIactnTypeIDs removes the "child_product_feature_iactn_types" edge to ProductFeatureIactnType entities by IDs.
func (pfituo *ProductFeatureIactnTypeUpdateOne) RemoveChildProductFeatureIactnTypeIDs(ids ...int) *ProductFeatureIactnTypeUpdateOne {
	pfituo.mutation.RemoveChildProductFeatureIactnTypeIDs(ids...)
	return pfituo
}

// RemoveChildProductFeatureIactnTypes removes "child_product_feature_iactn_types" edges to ProductFeatureIactnType entities.
func (pfituo *ProductFeatureIactnTypeUpdateOne) RemoveChildProductFeatureIactnTypes(p ...*ProductFeatureIactnType) *ProductFeatureIactnTypeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pfituo.RemoveChildProductFeatureIactnTypeIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pfituo *ProductFeatureIactnTypeUpdateOne) Select(field string, fields ...string) *ProductFeatureIactnTypeUpdateOne {
	pfituo.fields = append([]string{field}, fields...)
	return pfituo
}

// Save executes the query and returns the updated ProductFeatureIactnType entity.
func (pfituo *ProductFeatureIactnTypeUpdateOne) Save(ctx context.Context) (*ProductFeatureIactnType, error) {
	var (
		err  error
		node *ProductFeatureIactnType
	)
	pfituo.defaults()
	if len(pfituo.hooks) == 0 {
		if err = pfituo.check(); err != nil {
			return nil, err
		}
		node, err = pfituo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProductFeatureIactnTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pfituo.check(); err != nil {
				return nil, err
			}
			pfituo.mutation = mutation
			node, err = pfituo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pfituo.hooks) - 1; i >= 0; i-- {
			mut = pfituo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pfituo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (pfituo *ProductFeatureIactnTypeUpdateOne) SaveX(ctx context.Context) *ProductFeatureIactnType {
	node, err := pfituo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pfituo *ProductFeatureIactnTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := pfituo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pfituo *ProductFeatureIactnTypeUpdateOne) ExecX(ctx context.Context) {
	if err := pfituo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pfituo *ProductFeatureIactnTypeUpdateOne) defaults() {
	if _, ok := pfituo.mutation.UpdateTime(); !ok {
		v := productfeatureiactntype.UpdateDefaultUpdateTime()
		pfituo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pfituo *ProductFeatureIactnTypeUpdateOne) check() error {
	if v, ok := pfituo.mutation.HasTable(); ok {
		if err := productfeatureiactntype.HasTableValidator(v); err != nil {
			return &ValidationError{Name: "has_table", err: fmt.Errorf("ent: validator failed for field \"has_table\": %w", err)}
		}
	}
	return nil
}

func (pfituo *ProductFeatureIactnTypeUpdateOne) sqlSave(ctx context.Context) (_node *ProductFeatureIactnType, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   productfeatureiactntype.Table,
			Columns: productfeatureiactntype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: productfeatureiactntype.FieldID,
			},
		},
	}
	id, ok := pfituo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ProductFeatureIactnType.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := pfituo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, productfeatureiactntype.FieldID)
		for _, f := range fields {
			if !productfeatureiactntype.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != productfeatureiactntype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pfituo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pfituo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productfeatureiactntype.FieldUpdateTime,
		})
	}
	if value, ok := pfituo.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productfeatureiactntype.FieldStringRef,
		})
	}
	if pfituo.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productfeatureiactntype.FieldStringRef,
		})
	}
	if value, ok := pfituo.mutation.HasTable(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productfeatureiactntype.FieldHasTable,
		})
	}
	if pfituo.mutation.HasTableCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productfeatureiactntype.FieldHasTable,
		})
	}
	if value, ok := pfituo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productfeatureiactntype.FieldDescription,
		})
	}
	if pfituo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productfeatureiactntype.FieldDescription,
		})
	}
	if pfituo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productfeatureiactntype.ParentTable,
			Columns: []string{productfeatureiactntype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productfeatureiactntype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pfituo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productfeatureiactntype.ParentTable,
			Columns: []string{productfeatureiactntype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productfeatureiactntype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pfituo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productfeatureiactntype.ChildrenTable,
			Columns: []string{productfeatureiactntype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productfeatureiactntype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pfituo.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !pfituo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productfeatureiactntype.ChildrenTable,
			Columns: []string{productfeatureiactntype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productfeatureiactntype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pfituo.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productfeatureiactntype.ChildrenTable,
			Columns: []string{productfeatureiactntype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productfeatureiactntype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pfituo.mutation.ChildProductFeatureIactnTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   productfeatureiactntype.ChildProductFeatureIactnTypesTable,
			Columns: productfeatureiactntype.ChildProductFeatureIactnTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productfeatureiactntype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pfituo.mutation.RemovedChildProductFeatureIactnTypesIDs(); len(nodes) > 0 && !pfituo.mutation.ChildProductFeatureIactnTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   productfeatureiactntype.ChildProductFeatureIactnTypesTable,
			Columns: productfeatureiactntype.ChildProductFeatureIactnTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productfeatureiactntype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pfituo.mutation.ChildProductFeatureIactnTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   productfeatureiactntype.ChildProductFeatureIactnTypesTable,
			Columns: productfeatureiactntype.ChildProductFeatureIactnTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productfeatureiactntype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProductFeatureIactnType{config: pfituo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pfituo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productfeatureiactntype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
