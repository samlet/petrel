// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/predicate"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productfeature"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productfeaturetype"
)

// ProductFeatureTypeUpdate is the builder for updating ProductFeatureType entities.
type ProductFeatureTypeUpdate struct {
	config
	hooks    []Hook
	mutation *ProductFeatureTypeMutation
}

// Where adds a new predicate for the ProductFeatureTypeUpdate builder.
func (pftu *ProductFeatureTypeUpdate) Where(ps ...predicate.ProductFeatureType) *ProductFeatureTypeUpdate {
	pftu.mutation.predicates = append(pftu.mutation.predicates, ps...)
	return pftu
}

// SetStringRef sets the "string_ref" field.
func (pftu *ProductFeatureTypeUpdate) SetStringRef(s string) *ProductFeatureTypeUpdate {
	pftu.mutation.SetStringRef(s)
	return pftu
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (pftu *ProductFeatureTypeUpdate) SetNillableStringRef(s *string) *ProductFeatureTypeUpdate {
	if s != nil {
		pftu.SetStringRef(*s)
	}
	return pftu
}

// ClearStringRef clears the value of the "string_ref" field.
func (pftu *ProductFeatureTypeUpdate) ClearStringRef() *ProductFeatureTypeUpdate {
	pftu.mutation.ClearStringRef()
	return pftu
}

// SetHasTable sets the "has_table" field.
func (pftu *ProductFeatureTypeUpdate) SetHasTable(pt productfeaturetype.HasTable) *ProductFeatureTypeUpdate {
	pftu.mutation.SetHasTable(pt)
	return pftu
}

// SetNillableHasTable sets the "has_table" field if the given value is not nil.
func (pftu *ProductFeatureTypeUpdate) SetNillableHasTable(pt *productfeaturetype.HasTable) *ProductFeatureTypeUpdate {
	if pt != nil {
		pftu.SetHasTable(*pt)
	}
	return pftu
}

// ClearHasTable clears the value of the "has_table" field.
func (pftu *ProductFeatureTypeUpdate) ClearHasTable() *ProductFeatureTypeUpdate {
	pftu.mutation.ClearHasTable()
	return pftu
}

// SetDescription sets the "description" field.
func (pftu *ProductFeatureTypeUpdate) SetDescription(s string) *ProductFeatureTypeUpdate {
	pftu.mutation.SetDescription(s)
	return pftu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pftu *ProductFeatureTypeUpdate) SetNillableDescription(s *string) *ProductFeatureTypeUpdate {
	if s != nil {
		pftu.SetDescription(*s)
	}
	return pftu
}

// ClearDescription clears the value of the "description" field.
func (pftu *ProductFeatureTypeUpdate) ClearDescription() *ProductFeatureTypeUpdate {
	pftu.mutation.ClearDescription()
	return pftu
}

// SetParentID sets the "parent" edge to the ProductFeatureType entity by ID.
func (pftu *ProductFeatureTypeUpdate) SetParentID(id int) *ProductFeatureTypeUpdate {
	pftu.mutation.SetParentID(id)
	return pftu
}

// SetNillableParentID sets the "parent" edge to the ProductFeatureType entity by ID if the given value is not nil.
func (pftu *ProductFeatureTypeUpdate) SetNillableParentID(id *int) *ProductFeatureTypeUpdate {
	if id != nil {
		pftu = pftu.SetParentID(*id)
	}
	return pftu
}

// SetParent sets the "parent" edge to the ProductFeatureType entity.
func (pftu *ProductFeatureTypeUpdate) SetParent(p *ProductFeatureType) *ProductFeatureTypeUpdate {
	return pftu.SetParentID(p.ID)
}

// AddChildIDs adds the "children" edge to the ProductFeatureType entity by IDs.
func (pftu *ProductFeatureTypeUpdate) AddChildIDs(ids ...int) *ProductFeatureTypeUpdate {
	pftu.mutation.AddChildIDs(ids...)
	return pftu
}

// AddChildren adds the "children" edges to the ProductFeatureType entity.
func (pftu *ProductFeatureTypeUpdate) AddChildren(p ...*ProductFeatureType) *ProductFeatureTypeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pftu.AddChildIDs(ids...)
}

// AddProductFeatureIDs adds the "product_features" edge to the ProductFeature entity by IDs.
func (pftu *ProductFeatureTypeUpdate) AddProductFeatureIDs(ids ...int) *ProductFeatureTypeUpdate {
	pftu.mutation.AddProductFeatureIDs(ids...)
	return pftu
}

// AddProductFeatures adds the "product_features" edges to the ProductFeature entity.
func (pftu *ProductFeatureTypeUpdate) AddProductFeatures(p ...*ProductFeature) *ProductFeatureTypeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pftu.AddProductFeatureIDs(ids...)
}

// AddChildProductFeatureTypeIDs adds the "child_product_feature_types" edge to the ProductFeatureType entity by IDs.
func (pftu *ProductFeatureTypeUpdate) AddChildProductFeatureTypeIDs(ids ...int) *ProductFeatureTypeUpdate {
	pftu.mutation.AddChildProductFeatureTypeIDs(ids...)
	return pftu
}

// AddChildProductFeatureTypes adds the "child_product_feature_types" edges to the ProductFeatureType entity.
func (pftu *ProductFeatureTypeUpdate) AddChildProductFeatureTypes(p ...*ProductFeatureType) *ProductFeatureTypeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pftu.AddChildProductFeatureTypeIDs(ids...)
}

// Mutation returns the ProductFeatureTypeMutation object of the builder.
func (pftu *ProductFeatureTypeUpdate) Mutation() *ProductFeatureTypeMutation {
	return pftu.mutation
}

// ClearParent clears the "parent" edge to the ProductFeatureType entity.
func (pftu *ProductFeatureTypeUpdate) ClearParent() *ProductFeatureTypeUpdate {
	pftu.mutation.ClearParent()
	return pftu
}

// ClearChildren clears all "children" edges to the ProductFeatureType entity.
func (pftu *ProductFeatureTypeUpdate) ClearChildren() *ProductFeatureTypeUpdate {
	pftu.mutation.ClearChildren()
	return pftu
}

// RemoveChildIDs removes the "children" edge to ProductFeatureType entities by IDs.
func (pftu *ProductFeatureTypeUpdate) RemoveChildIDs(ids ...int) *ProductFeatureTypeUpdate {
	pftu.mutation.RemoveChildIDs(ids...)
	return pftu
}

// RemoveChildren removes "children" edges to ProductFeatureType entities.
func (pftu *ProductFeatureTypeUpdate) RemoveChildren(p ...*ProductFeatureType) *ProductFeatureTypeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pftu.RemoveChildIDs(ids...)
}

// ClearProductFeatures clears all "product_features" edges to the ProductFeature entity.
func (pftu *ProductFeatureTypeUpdate) ClearProductFeatures() *ProductFeatureTypeUpdate {
	pftu.mutation.ClearProductFeatures()
	return pftu
}

// RemoveProductFeatureIDs removes the "product_features" edge to ProductFeature entities by IDs.
func (pftu *ProductFeatureTypeUpdate) RemoveProductFeatureIDs(ids ...int) *ProductFeatureTypeUpdate {
	pftu.mutation.RemoveProductFeatureIDs(ids...)
	return pftu
}

// RemoveProductFeatures removes "product_features" edges to ProductFeature entities.
func (pftu *ProductFeatureTypeUpdate) RemoveProductFeatures(p ...*ProductFeature) *ProductFeatureTypeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pftu.RemoveProductFeatureIDs(ids...)
}

// ClearChildProductFeatureTypes clears all "child_product_feature_types" edges to the ProductFeatureType entity.
func (pftu *ProductFeatureTypeUpdate) ClearChildProductFeatureTypes() *ProductFeatureTypeUpdate {
	pftu.mutation.ClearChildProductFeatureTypes()
	return pftu
}

// RemoveChildProductFeatureTypeIDs removes the "child_product_feature_types" edge to ProductFeatureType entities by IDs.
func (pftu *ProductFeatureTypeUpdate) RemoveChildProductFeatureTypeIDs(ids ...int) *ProductFeatureTypeUpdate {
	pftu.mutation.RemoveChildProductFeatureTypeIDs(ids...)
	return pftu
}

// RemoveChildProductFeatureTypes removes "child_product_feature_types" edges to ProductFeatureType entities.
func (pftu *ProductFeatureTypeUpdate) RemoveChildProductFeatureTypes(p ...*ProductFeatureType) *ProductFeatureTypeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pftu.RemoveChildProductFeatureTypeIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pftu *ProductFeatureTypeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	pftu.defaults()
	if len(pftu.hooks) == 0 {
		if err = pftu.check(); err != nil {
			return 0, err
		}
		affected, err = pftu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProductFeatureTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pftu.check(); err != nil {
				return 0, err
			}
			pftu.mutation = mutation
			affected, err = pftu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pftu.hooks) - 1; i >= 0; i-- {
			mut = pftu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pftu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pftu *ProductFeatureTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := pftu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pftu *ProductFeatureTypeUpdate) Exec(ctx context.Context) error {
	_, err := pftu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pftu *ProductFeatureTypeUpdate) ExecX(ctx context.Context) {
	if err := pftu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pftu *ProductFeatureTypeUpdate) defaults() {
	if _, ok := pftu.mutation.UpdateTime(); !ok {
		v := productfeaturetype.UpdateDefaultUpdateTime()
		pftu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pftu *ProductFeatureTypeUpdate) check() error {
	if v, ok := pftu.mutation.HasTable(); ok {
		if err := productfeaturetype.HasTableValidator(v); err != nil {
			return &ValidationError{Name: "has_table", err: fmt.Errorf("ent: validator failed for field \"has_table\": %w", err)}
		}
	}
	return nil
}

func (pftu *ProductFeatureTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   productfeaturetype.Table,
			Columns: productfeaturetype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: productfeaturetype.FieldID,
			},
		},
	}
	if ps := pftu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pftu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productfeaturetype.FieldUpdateTime,
		})
	}
	if value, ok := pftu.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productfeaturetype.FieldStringRef,
		})
	}
	if pftu.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productfeaturetype.FieldStringRef,
		})
	}
	if value, ok := pftu.mutation.HasTable(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productfeaturetype.FieldHasTable,
		})
	}
	if pftu.mutation.HasTableCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productfeaturetype.FieldHasTable,
		})
	}
	if value, ok := pftu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productfeaturetype.FieldDescription,
		})
	}
	if pftu.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productfeaturetype.FieldDescription,
		})
	}
	if pftu.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productfeaturetype.ParentTable,
			Columns: []string{productfeaturetype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productfeaturetype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pftu.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productfeaturetype.ParentTable,
			Columns: []string{productfeaturetype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productfeaturetype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pftu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productfeaturetype.ChildrenTable,
			Columns: []string{productfeaturetype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productfeaturetype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pftu.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !pftu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productfeaturetype.ChildrenTable,
			Columns: []string{productfeaturetype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productfeaturetype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pftu.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productfeaturetype.ChildrenTable,
			Columns: []string{productfeaturetype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productfeaturetype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pftu.mutation.ProductFeaturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productfeaturetype.ProductFeaturesTable,
			Columns: []string{productfeaturetype.ProductFeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productfeature.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pftu.mutation.RemovedProductFeaturesIDs(); len(nodes) > 0 && !pftu.mutation.ProductFeaturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productfeaturetype.ProductFeaturesTable,
			Columns: []string{productfeaturetype.ProductFeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productfeature.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pftu.mutation.ProductFeaturesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productfeaturetype.ProductFeaturesTable,
			Columns: []string{productfeaturetype.ProductFeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productfeature.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pftu.mutation.ChildProductFeatureTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   productfeaturetype.ChildProductFeatureTypesTable,
			Columns: productfeaturetype.ChildProductFeatureTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productfeaturetype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pftu.mutation.RemovedChildProductFeatureTypesIDs(); len(nodes) > 0 && !pftu.mutation.ChildProductFeatureTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   productfeaturetype.ChildProductFeatureTypesTable,
			Columns: productfeaturetype.ChildProductFeatureTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productfeaturetype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pftu.mutation.ChildProductFeatureTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   productfeaturetype.ChildProductFeatureTypesTable,
			Columns: productfeaturetype.ChildProductFeatureTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productfeaturetype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pftu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productfeaturetype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ProductFeatureTypeUpdateOne is the builder for updating a single ProductFeatureType entity.
type ProductFeatureTypeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProductFeatureTypeMutation
}

// SetStringRef sets the "string_ref" field.
func (pftuo *ProductFeatureTypeUpdateOne) SetStringRef(s string) *ProductFeatureTypeUpdateOne {
	pftuo.mutation.SetStringRef(s)
	return pftuo
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (pftuo *ProductFeatureTypeUpdateOne) SetNillableStringRef(s *string) *ProductFeatureTypeUpdateOne {
	if s != nil {
		pftuo.SetStringRef(*s)
	}
	return pftuo
}

// ClearStringRef clears the value of the "string_ref" field.
func (pftuo *ProductFeatureTypeUpdateOne) ClearStringRef() *ProductFeatureTypeUpdateOne {
	pftuo.mutation.ClearStringRef()
	return pftuo
}

// SetHasTable sets the "has_table" field.
func (pftuo *ProductFeatureTypeUpdateOne) SetHasTable(pt productfeaturetype.HasTable) *ProductFeatureTypeUpdateOne {
	pftuo.mutation.SetHasTable(pt)
	return pftuo
}

// SetNillableHasTable sets the "has_table" field if the given value is not nil.
func (pftuo *ProductFeatureTypeUpdateOne) SetNillableHasTable(pt *productfeaturetype.HasTable) *ProductFeatureTypeUpdateOne {
	if pt != nil {
		pftuo.SetHasTable(*pt)
	}
	return pftuo
}

// ClearHasTable clears the value of the "has_table" field.
func (pftuo *ProductFeatureTypeUpdateOne) ClearHasTable() *ProductFeatureTypeUpdateOne {
	pftuo.mutation.ClearHasTable()
	return pftuo
}

// SetDescription sets the "description" field.
func (pftuo *ProductFeatureTypeUpdateOne) SetDescription(s string) *ProductFeatureTypeUpdateOne {
	pftuo.mutation.SetDescription(s)
	return pftuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pftuo *ProductFeatureTypeUpdateOne) SetNillableDescription(s *string) *ProductFeatureTypeUpdateOne {
	if s != nil {
		pftuo.SetDescription(*s)
	}
	return pftuo
}

// ClearDescription clears the value of the "description" field.
func (pftuo *ProductFeatureTypeUpdateOne) ClearDescription() *ProductFeatureTypeUpdateOne {
	pftuo.mutation.ClearDescription()
	return pftuo
}

// SetParentID sets the "parent" edge to the ProductFeatureType entity by ID.
func (pftuo *ProductFeatureTypeUpdateOne) SetParentID(id int) *ProductFeatureTypeUpdateOne {
	pftuo.mutation.SetParentID(id)
	return pftuo
}

// SetNillableParentID sets the "parent" edge to the ProductFeatureType entity by ID if the given value is not nil.
func (pftuo *ProductFeatureTypeUpdateOne) SetNillableParentID(id *int) *ProductFeatureTypeUpdateOne {
	if id != nil {
		pftuo = pftuo.SetParentID(*id)
	}
	return pftuo
}

// SetParent sets the "parent" edge to the ProductFeatureType entity.
func (pftuo *ProductFeatureTypeUpdateOne) SetParent(p *ProductFeatureType) *ProductFeatureTypeUpdateOne {
	return pftuo.SetParentID(p.ID)
}

// AddChildIDs adds the "children" edge to the ProductFeatureType entity by IDs.
func (pftuo *ProductFeatureTypeUpdateOne) AddChildIDs(ids ...int) *ProductFeatureTypeUpdateOne {
	pftuo.mutation.AddChildIDs(ids...)
	return pftuo
}

// AddChildren adds the "children" edges to the ProductFeatureType entity.
func (pftuo *ProductFeatureTypeUpdateOne) AddChildren(p ...*ProductFeatureType) *ProductFeatureTypeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pftuo.AddChildIDs(ids...)
}

// AddProductFeatureIDs adds the "product_features" edge to the ProductFeature entity by IDs.
func (pftuo *ProductFeatureTypeUpdateOne) AddProductFeatureIDs(ids ...int) *ProductFeatureTypeUpdateOne {
	pftuo.mutation.AddProductFeatureIDs(ids...)
	return pftuo
}

// AddProductFeatures adds the "product_features" edges to the ProductFeature entity.
func (pftuo *ProductFeatureTypeUpdateOne) AddProductFeatures(p ...*ProductFeature) *ProductFeatureTypeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pftuo.AddProductFeatureIDs(ids...)
}

// AddChildProductFeatureTypeIDs adds the "child_product_feature_types" edge to the ProductFeatureType entity by IDs.
func (pftuo *ProductFeatureTypeUpdateOne) AddChildProductFeatureTypeIDs(ids ...int) *ProductFeatureTypeUpdateOne {
	pftuo.mutation.AddChildProductFeatureTypeIDs(ids...)
	return pftuo
}

// AddChildProductFeatureTypes adds the "child_product_feature_types" edges to the ProductFeatureType entity.
func (pftuo *ProductFeatureTypeUpdateOne) AddChildProductFeatureTypes(p ...*ProductFeatureType) *ProductFeatureTypeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pftuo.AddChildProductFeatureTypeIDs(ids...)
}

// Mutation returns the ProductFeatureTypeMutation object of the builder.
func (pftuo *ProductFeatureTypeUpdateOne) Mutation() *ProductFeatureTypeMutation {
	return pftuo.mutation
}

// ClearParent clears the "parent" edge to the ProductFeatureType entity.
func (pftuo *ProductFeatureTypeUpdateOne) ClearParent() *ProductFeatureTypeUpdateOne {
	pftuo.mutation.ClearParent()
	return pftuo
}

// ClearChildren clears all "children" edges to the ProductFeatureType entity.
func (pftuo *ProductFeatureTypeUpdateOne) ClearChildren() *ProductFeatureTypeUpdateOne {
	pftuo.mutation.ClearChildren()
	return pftuo
}

// RemoveChildIDs removes the "children" edge to ProductFeatureType entities by IDs.
func (pftuo *ProductFeatureTypeUpdateOne) RemoveChildIDs(ids ...int) *ProductFeatureTypeUpdateOne {
	pftuo.mutation.RemoveChildIDs(ids...)
	return pftuo
}

// RemoveChildren removes "children" edges to ProductFeatureType entities.
func (pftuo *ProductFeatureTypeUpdateOne) RemoveChildren(p ...*ProductFeatureType) *ProductFeatureTypeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pftuo.RemoveChildIDs(ids...)
}

// ClearProductFeatures clears all "product_features" edges to the ProductFeature entity.
func (pftuo *ProductFeatureTypeUpdateOne) ClearProductFeatures() *ProductFeatureTypeUpdateOne {
	pftuo.mutation.ClearProductFeatures()
	return pftuo
}

// RemoveProductFeatureIDs removes the "product_features" edge to ProductFeature entities by IDs.
func (pftuo *ProductFeatureTypeUpdateOne) RemoveProductFeatureIDs(ids ...int) *ProductFeatureTypeUpdateOne {
	pftuo.mutation.RemoveProductFeatureIDs(ids...)
	return pftuo
}

// RemoveProductFeatures removes "product_features" edges to ProductFeature entities.
func (pftuo *ProductFeatureTypeUpdateOne) RemoveProductFeatures(p ...*ProductFeature) *ProductFeatureTypeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pftuo.RemoveProductFeatureIDs(ids...)
}

// ClearChildProductFeatureTypes clears all "child_product_feature_types" edges to the ProductFeatureType entity.
func (pftuo *ProductFeatureTypeUpdateOne) ClearChildProductFeatureTypes() *ProductFeatureTypeUpdateOne {
	pftuo.mutation.ClearChildProductFeatureTypes()
	return pftuo
}

// RemoveChildProductFeatureTypeIDs removes the "child_product_feature_types" edge to ProductFeatureType entities by IDs.
func (pftuo *ProductFeatureTypeUpdateOne) RemoveChildProductFeatureTypeIDs(ids ...int) *ProductFeatureTypeUpdateOne {
	pftuo.mutation.RemoveChildProductFeatureTypeIDs(ids...)
	return pftuo
}

// RemoveChildProductFeatureTypes removes "child_product_feature_types" edges to ProductFeatureType entities.
func (pftuo *ProductFeatureTypeUpdateOne) RemoveChildProductFeatureTypes(p ...*ProductFeatureType) *ProductFeatureTypeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pftuo.RemoveChildProductFeatureTypeIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pftuo *ProductFeatureTypeUpdateOne) Select(field string, fields ...string) *ProductFeatureTypeUpdateOne {
	pftuo.fields = append([]string{field}, fields...)
	return pftuo
}

// Save executes the query and returns the updated ProductFeatureType entity.
func (pftuo *ProductFeatureTypeUpdateOne) Save(ctx context.Context) (*ProductFeatureType, error) {
	var (
		err  error
		node *ProductFeatureType
	)
	pftuo.defaults()
	if len(pftuo.hooks) == 0 {
		if err = pftuo.check(); err != nil {
			return nil, err
		}
		node, err = pftuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProductFeatureTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pftuo.check(); err != nil {
				return nil, err
			}
			pftuo.mutation = mutation
			node, err = pftuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pftuo.hooks) - 1; i >= 0; i-- {
			mut = pftuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pftuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (pftuo *ProductFeatureTypeUpdateOne) SaveX(ctx context.Context) *ProductFeatureType {
	node, err := pftuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pftuo *ProductFeatureTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := pftuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pftuo *ProductFeatureTypeUpdateOne) ExecX(ctx context.Context) {
	if err := pftuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pftuo *ProductFeatureTypeUpdateOne) defaults() {
	if _, ok := pftuo.mutation.UpdateTime(); !ok {
		v := productfeaturetype.UpdateDefaultUpdateTime()
		pftuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pftuo *ProductFeatureTypeUpdateOne) check() error {
	if v, ok := pftuo.mutation.HasTable(); ok {
		if err := productfeaturetype.HasTableValidator(v); err != nil {
			return &ValidationError{Name: "has_table", err: fmt.Errorf("ent: validator failed for field \"has_table\": %w", err)}
		}
	}
	return nil
}

func (pftuo *ProductFeatureTypeUpdateOne) sqlSave(ctx context.Context) (_node *ProductFeatureType, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   productfeaturetype.Table,
			Columns: productfeaturetype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: productfeaturetype.FieldID,
			},
		},
	}
	id, ok := pftuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ProductFeatureType.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := pftuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, productfeaturetype.FieldID)
		for _, f := range fields {
			if !productfeaturetype.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != productfeaturetype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pftuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pftuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productfeaturetype.FieldUpdateTime,
		})
	}
	if value, ok := pftuo.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productfeaturetype.FieldStringRef,
		})
	}
	if pftuo.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productfeaturetype.FieldStringRef,
		})
	}
	if value, ok := pftuo.mutation.HasTable(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productfeaturetype.FieldHasTable,
		})
	}
	if pftuo.mutation.HasTableCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productfeaturetype.FieldHasTable,
		})
	}
	if value, ok := pftuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productfeaturetype.FieldDescription,
		})
	}
	if pftuo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productfeaturetype.FieldDescription,
		})
	}
	if pftuo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productfeaturetype.ParentTable,
			Columns: []string{productfeaturetype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productfeaturetype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pftuo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productfeaturetype.ParentTable,
			Columns: []string{productfeaturetype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productfeaturetype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pftuo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productfeaturetype.ChildrenTable,
			Columns: []string{productfeaturetype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productfeaturetype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pftuo.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !pftuo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productfeaturetype.ChildrenTable,
			Columns: []string{productfeaturetype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productfeaturetype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pftuo.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productfeaturetype.ChildrenTable,
			Columns: []string{productfeaturetype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productfeaturetype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pftuo.mutation.ProductFeaturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productfeaturetype.ProductFeaturesTable,
			Columns: []string{productfeaturetype.ProductFeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productfeature.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pftuo.mutation.RemovedProductFeaturesIDs(); len(nodes) > 0 && !pftuo.mutation.ProductFeaturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productfeaturetype.ProductFeaturesTable,
			Columns: []string{productfeaturetype.ProductFeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productfeature.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pftuo.mutation.ProductFeaturesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productfeaturetype.ProductFeaturesTable,
			Columns: []string{productfeaturetype.ProductFeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productfeature.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pftuo.mutation.ChildProductFeatureTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   productfeaturetype.ChildProductFeatureTypesTable,
			Columns: productfeaturetype.ChildProductFeatureTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productfeaturetype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pftuo.mutation.RemovedChildProductFeatureTypesIDs(); len(nodes) > 0 && !pftuo.mutation.ChildProductFeatureTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   productfeaturetype.ChildProductFeatureTypesTable,
			Columns: productfeaturetype.ChildProductFeatureTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productfeaturetype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pftuo.mutation.ChildProductFeatureTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   productfeaturetype.ChildProductFeatureTypesTable,
			Columns: productfeaturetype.ChildProductFeatureTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productfeaturetype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProductFeatureType{config: pftuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pftuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productfeaturetype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
