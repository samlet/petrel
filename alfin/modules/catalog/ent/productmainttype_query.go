// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/predicate"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productmainttype"
)

// ProductMaintTypeQuery is the builder for querying ProductMaintType entities.
type ProductMaintTypeQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.ProductMaintType
	// eager-loading edges.
	withParent                 *ProductMaintTypeQuery
	withChildren               *ProductMaintTypeQuery
	withChildProductMaintTypes *ProductMaintTypeQuery
	withFKs                    bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ProductMaintTypeQuery builder.
func (pmtq *ProductMaintTypeQuery) Where(ps ...predicate.ProductMaintType) *ProductMaintTypeQuery {
	pmtq.predicates = append(pmtq.predicates, ps...)
	return pmtq
}

// Limit adds a limit step to the query.
func (pmtq *ProductMaintTypeQuery) Limit(limit int) *ProductMaintTypeQuery {
	pmtq.limit = &limit
	return pmtq
}

// Offset adds an offset step to the query.
func (pmtq *ProductMaintTypeQuery) Offset(offset int) *ProductMaintTypeQuery {
	pmtq.offset = &offset
	return pmtq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (pmtq *ProductMaintTypeQuery) Unique(unique bool) *ProductMaintTypeQuery {
	pmtq.unique = &unique
	return pmtq
}

// Order adds an order step to the query.
func (pmtq *ProductMaintTypeQuery) Order(o ...OrderFunc) *ProductMaintTypeQuery {
	pmtq.order = append(pmtq.order, o...)
	return pmtq
}

// QueryParent chains the current query on the "parent" edge.
func (pmtq *ProductMaintTypeQuery) QueryParent() *ProductMaintTypeQuery {
	query := &ProductMaintTypeQuery{config: pmtq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pmtq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pmtq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(productmainttype.Table, productmainttype.FieldID, selector),
			sqlgraph.To(productmainttype.Table, productmainttype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, productmainttype.ParentTable, productmainttype.ParentColumn),
		)
		fromU = sqlgraph.SetNeighbors(pmtq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryChildren chains the current query on the "children" edge.
func (pmtq *ProductMaintTypeQuery) QueryChildren() *ProductMaintTypeQuery {
	query := &ProductMaintTypeQuery{config: pmtq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pmtq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pmtq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(productmainttype.Table, productmainttype.FieldID, selector),
			sqlgraph.To(productmainttype.Table, productmainttype.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, productmainttype.ChildrenTable, productmainttype.ChildrenColumn),
		)
		fromU = sqlgraph.SetNeighbors(pmtq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryChildProductMaintTypes chains the current query on the "child_product_maint_types" edge.
func (pmtq *ProductMaintTypeQuery) QueryChildProductMaintTypes() *ProductMaintTypeQuery {
	query := &ProductMaintTypeQuery{config: pmtq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pmtq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pmtq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(productmainttype.Table, productmainttype.FieldID, selector),
			sqlgraph.To(productmainttype.Table, productmainttype.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, productmainttype.ChildProductMaintTypesTable, productmainttype.ChildProductMaintTypesPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(pmtq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ProductMaintType entity from the query.
// Returns a *NotFoundError when no ProductMaintType was found.
func (pmtq *ProductMaintTypeQuery) First(ctx context.Context) (*ProductMaintType, error) {
	nodes, err := pmtq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{productmainttype.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (pmtq *ProductMaintTypeQuery) FirstX(ctx context.Context) *ProductMaintType {
	node, err := pmtq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ProductMaintType ID from the query.
// Returns a *NotFoundError when no ProductMaintType ID was found.
func (pmtq *ProductMaintTypeQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = pmtq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{productmainttype.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (pmtq *ProductMaintTypeQuery) FirstIDX(ctx context.Context) int {
	id, err := pmtq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ProductMaintType entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one ProductMaintType entity is not found.
// Returns a *NotFoundError when no ProductMaintType entities are found.
func (pmtq *ProductMaintTypeQuery) Only(ctx context.Context) (*ProductMaintType, error) {
	nodes, err := pmtq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{productmainttype.Label}
	default:
		return nil, &NotSingularError{productmainttype.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (pmtq *ProductMaintTypeQuery) OnlyX(ctx context.Context) *ProductMaintType {
	node, err := pmtq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ProductMaintType ID in the query.
// Returns a *NotSingularError when exactly one ProductMaintType ID is not found.
// Returns a *NotFoundError when no entities are found.
func (pmtq *ProductMaintTypeQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = pmtq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{productmainttype.Label}
	default:
		err = &NotSingularError{productmainttype.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (pmtq *ProductMaintTypeQuery) OnlyIDX(ctx context.Context) int {
	id, err := pmtq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ProductMaintTypes.
func (pmtq *ProductMaintTypeQuery) All(ctx context.Context) ([]*ProductMaintType, error) {
	if err := pmtq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return pmtq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (pmtq *ProductMaintTypeQuery) AllX(ctx context.Context) []*ProductMaintType {
	nodes, err := pmtq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ProductMaintType IDs.
func (pmtq *ProductMaintTypeQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := pmtq.Select(productmainttype.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (pmtq *ProductMaintTypeQuery) IDsX(ctx context.Context) []int {
	ids, err := pmtq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (pmtq *ProductMaintTypeQuery) Count(ctx context.Context) (int, error) {
	if err := pmtq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return pmtq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (pmtq *ProductMaintTypeQuery) CountX(ctx context.Context) int {
	count, err := pmtq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (pmtq *ProductMaintTypeQuery) Exist(ctx context.Context) (bool, error) {
	if err := pmtq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return pmtq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (pmtq *ProductMaintTypeQuery) ExistX(ctx context.Context) bool {
	exist, err := pmtq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ProductMaintTypeQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (pmtq *ProductMaintTypeQuery) Clone() *ProductMaintTypeQuery {
	if pmtq == nil {
		return nil
	}
	return &ProductMaintTypeQuery{
		config:                     pmtq.config,
		limit:                      pmtq.limit,
		offset:                     pmtq.offset,
		order:                      append([]OrderFunc{}, pmtq.order...),
		predicates:                 append([]predicate.ProductMaintType{}, pmtq.predicates...),
		withParent:                 pmtq.withParent.Clone(),
		withChildren:               pmtq.withChildren.Clone(),
		withChildProductMaintTypes: pmtq.withChildProductMaintTypes.Clone(),
		// clone intermediate query.
		sql:  pmtq.sql.Clone(),
		path: pmtq.path,
	}
}

// WithParent tells the query-builder to eager-load the nodes that are connected to
// the "parent" edge. The optional arguments are used to configure the query builder of the edge.
func (pmtq *ProductMaintTypeQuery) WithParent(opts ...func(*ProductMaintTypeQuery)) *ProductMaintTypeQuery {
	query := &ProductMaintTypeQuery{config: pmtq.config}
	for _, opt := range opts {
		opt(query)
	}
	pmtq.withParent = query
	return pmtq
}

// WithChildren tells the query-builder to eager-load the nodes that are connected to
// the "children" edge. The optional arguments are used to configure the query builder of the edge.
func (pmtq *ProductMaintTypeQuery) WithChildren(opts ...func(*ProductMaintTypeQuery)) *ProductMaintTypeQuery {
	query := &ProductMaintTypeQuery{config: pmtq.config}
	for _, opt := range opts {
		opt(query)
	}
	pmtq.withChildren = query
	return pmtq
}

// WithChildProductMaintTypes tells the query-builder to eager-load the nodes that are connected to
// the "child_product_maint_types" edge. The optional arguments are used to configure the query builder of the edge.
func (pmtq *ProductMaintTypeQuery) WithChildProductMaintTypes(opts ...func(*ProductMaintTypeQuery)) *ProductMaintTypeQuery {
	query := &ProductMaintTypeQuery{config: pmtq.config}
	for _, opt := range opts {
		opt(query)
	}
	pmtq.withChildProductMaintTypes = query
	return pmtq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ProductMaintType.Query().
//		GroupBy(productmainttype.FieldCreateTime).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (pmtq *ProductMaintTypeQuery) GroupBy(field string, fields ...string) *ProductMaintTypeGroupBy {
	group := &ProductMaintTypeGroupBy{config: pmtq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := pmtq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return pmtq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//	}
//
//	client.ProductMaintType.Query().
//		Select(productmainttype.FieldCreateTime).
//		Scan(ctx, &v)
//
func (pmtq *ProductMaintTypeQuery) Select(field string, fields ...string) *ProductMaintTypeSelect {
	pmtq.fields = append([]string{field}, fields...)
	return &ProductMaintTypeSelect{ProductMaintTypeQuery: pmtq}
}

func (pmtq *ProductMaintTypeQuery) prepareQuery(ctx context.Context) error {
	for _, f := range pmtq.fields {
		if !productmainttype.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if pmtq.path != nil {
		prev, err := pmtq.path(ctx)
		if err != nil {
			return err
		}
		pmtq.sql = prev
	}
	return nil
}

func (pmtq *ProductMaintTypeQuery) sqlAll(ctx context.Context) ([]*ProductMaintType, error) {
	var (
		nodes       = []*ProductMaintType{}
		withFKs     = pmtq.withFKs
		_spec       = pmtq.querySpec()
		loadedTypes = [3]bool{
			pmtq.withParent != nil,
			pmtq.withChildren != nil,
			pmtq.withChildProductMaintTypes != nil,
		}
	)
	if pmtq.withParent != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, productmainttype.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &ProductMaintType{config: pmtq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, pmtq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := pmtq.withParent; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*ProductMaintType)
		for i := range nodes {
			if nodes[i].product_maint_type_children == nil {
				continue
			}
			fk := *nodes[i].product_maint_type_children
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(productmainttype.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "product_maint_type_children" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Parent = n
			}
		}
	}

	if query := pmtq.withChildren; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*ProductMaintType)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.Children = []*ProductMaintType{}
		}
		query.withFKs = true
		query.Where(predicate.ProductMaintType(func(s *sql.Selector) {
			s.Where(sql.InValues(productmainttype.ChildrenColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.product_maint_type_children
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "product_maint_type_children" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "product_maint_type_children" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.Children = append(node.Edges.Children, n)
		}
	}

	if query := pmtq.withChildProductMaintTypes; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		ids := make(map[int]*ProductMaintType, len(nodes))
		for _, node := range nodes {
			ids[node.ID] = node
			fks = append(fks, node.ID)
			node.Edges.ChildProductMaintTypes = []*ProductMaintType{}
		}
		var (
			edgeids []int
			edges   = make(map[int][]*ProductMaintType)
		)
		_spec := &sqlgraph.EdgeQuerySpec{
			Edge: &sqlgraph.EdgeSpec{
				Inverse: false,
				Table:   productmainttype.ChildProductMaintTypesTable,
				Columns: productmainttype.ChildProductMaintTypesPrimaryKey,
			},
			Predicate: func(s *sql.Selector) {
				s.Where(sql.InValues(productmainttype.ChildProductMaintTypesPrimaryKey[0], fks...))
			},
			ScanValues: func() [2]interface{} {
				return [2]interface{}{new(sql.NullInt64), new(sql.NullInt64)}
			},
			Assign: func(out, in interface{}) error {
				eout, ok := out.(*sql.NullInt64)
				if !ok || eout == nil {
					return fmt.Errorf("unexpected id value for edge-out")
				}
				ein, ok := in.(*sql.NullInt64)
				if !ok || ein == nil {
					return fmt.Errorf("unexpected id value for edge-in")
				}
				outValue := int(eout.Int64)
				inValue := int(ein.Int64)
				node, ok := ids[outValue]
				if !ok {
					return fmt.Errorf("unexpected node id in edges: %v", outValue)
				}
				if _, ok := edges[inValue]; !ok {
					edgeids = append(edgeids, inValue)
				}
				edges[inValue] = append(edges[inValue], node)
				return nil
			},
		}
		if err := sqlgraph.QueryEdges(ctx, pmtq.driver, _spec); err != nil {
			return nil, fmt.Errorf(`query edges "child_product_maint_types": %w`, err)
		}
		query.Where(productmainttype.IDIn(edgeids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := edges[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected "child_product_maint_types" node returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.ChildProductMaintTypes = append(nodes[i].Edges.ChildProductMaintTypes, n)
			}
		}
	}

	return nodes, nil
}

func (pmtq *ProductMaintTypeQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := pmtq.querySpec()
	return sqlgraph.CountNodes(ctx, pmtq.driver, _spec)
}

func (pmtq *ProductMaintTypeQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := pmtq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (pmtq *ProductMaintTypeQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   productmainttype.Table,
			Columns: productmainttype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: productmainttype.FieldID,
			},
		},
		From:   pmtq.sql,
		Unique: true,
	}
	if unique := pmtq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := pmtq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, productmainttype.FieldID)
		for i := range fields {
			if fields[i] != productmainttype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := pmtq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := pmtq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := pmtq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := pmtq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (pmtq *ProductMaintTypeQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(pmtq.driver.Dialect())
	t1 := builder.Table(productmainttype.Table)
	columns := pmtq.fields
	if len(columns) == 0 {
		columns = productmainttype.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if pmtq.sql != nil {
		selector = pmtq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	for _, p := range pmtq.predicates {
		p(selector)
	}
	for _, p := range pmtq.order {
		p(selector)
	}
	if offset := pmtq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := pmtq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ProductMaintTypeGroupBy is the group-by builder for ProductMaintType entities.
type ProductMaintTypeGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (pmtgb *ProductMaintTypeGroupBy) Aggregate(fns ...AggregateFunc) *ProductMaintTypeGroupBy {
	pmtgb.fns = append(pmtgb.fns, fns...)
	return pmtgb
}

// Scan applies the group-by query and scans the result into the given value.
func (pmtgb *ProductMaintTypeGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := pmtgb.path(ctx)
	if err != nil {
		return err
	}
	pmtgb.sql = query
	return pmtgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (pmtgb *ProductMaintTypeGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := pmtgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (pmtgb *ProductMaintTypeGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(pmtgb.fields) > 1 {
		return nil, errors.New("ent: ProductMaintTypeGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := pmtgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (pmtgb *ProductMaintTypeGroupBy) StringsX(ctx context.Context) []string {
	v, err := pmtgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (pmtgb *ProductMaintTypeGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = pmtgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{productmainttype.Label}
	default:
		err = fmt.Errorf("ent: ProductMaintTypeGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (pmtgb *ProductMaintTypeGroupBy) StringX(ctx context.Context) string {
	v, err := pmtgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (pmtgb *ProductMaintTypeGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(pmtgb.fields) > 1 {
		return nil, errors.New("ent: ProductMaintTypeGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := pmtgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (pmtgb *ProductMaintTypeGroupBy) IntsX(ctx context.Context) []int {
	v, err := pmtgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (pmtgb *ProductMaintTypeGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = pmtgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{productmainttype.Label}
	default:
		err = fmt.Errorf("ent: ProductMaintTypeGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (pmtgb *ProductMaintTypeGroupBy) IntX(ctx context.Context) int {
	v, err := pmtgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (pmtgb *ProductMaintTypeGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(pmtgb.fields) > 1 {
		return nil, errors.New("ent: ProductMaintTypeGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := pmtgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (pmtgb *ProductMaintTypeGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := pmtgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (pmtgb *ProductMaintTypeGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = pmtgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{productmainttype.Label}
	default:
		err = fmt.Errorf("ent: ProductMaintTypeGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (pmtgb *ProductMaintTypeGroupBy) Float64X(ctx context.Context) float64 {
	v, err := pmtgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (pmtgb *ProductMaintTypeGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(pmtgb.fields) > 1 {
		return nil, errors.New("ent: ProductMaintTypeGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := pmtgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (pmtgb *ProductMaintTypeGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := pmtgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (pmtgb *ProductMaintTypeGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = pmtgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{productmainttype.Label}
	default:
		err = fmt.Errorf("ent: ProductMaintTypeGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (pmtgb *ProductMaintTypeGroupBy) BoolX(ctx context.Context) bool {
	v, err := pmtgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (pmtgb *ProductMaintTypeGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range pmtgb.fields {
		if !productmainttype.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := pmtgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pmtgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (pmtgb *ProductMaintTypeGroupBy) sqlQuery() *sql.Selector {
	selector := pmtgb.sql.Select()
	aggregation := make([]string, 0, len(pmtgb.fns))
	for _, fn := range pmtgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(pmtgb.fields)+len(pmtgb.fns))
		for _, f := range pmtgb.fields {
			columns = append(columns, selector.C(f))
		}
		for _, c := range aggregation {
			columns = append(columns, c)
		}
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(pmtgb.fields...)...)
}

// ProductMaintTypeSelect is the builder for selecting fields of ProductMaintType entities.
type ProductMaintTypeSelect struct {
	*ProductMaintTypeQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (pmts *ProductMaintTypeSelect) Scan(ctx context.Context, v interface{}) error {
	if err := pmts.prepareQuery(ctx); err != nil {
		return err
	}
	pmts.sql = pmts.ProductMaintTypeQuery.sqlQuery(ctx)
	return pmts.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (pmts *ProductMaintTypeSelect) ScanX(ctx context.Context, v interface{}) {
	if err := pmts.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (pmts *ProductMaintTypeSelect) Strings(ctx context.Context) ([]string, error) {
	if len(pmts.fields) > 1 {
		return nil, errors.New("ent: ProductMaintTypeSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := pmts.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (pmts *ProductMaintTypeSelect) StringsX(ctx context.Context) []string {
	v, err := pmts.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (pmts *ProductMaintTypeSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = pmts.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{productmainttype.Label}
	default:
		err = fmt.Errorf("ent: ProductMaintTypeSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (pmts *ProductMaintTypeSelect) StringX(ctx context.Context) string {
	v, err := pmts.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (pmts *ProductMaintTypeSelect) Ints(ctx context.Context) ([]int, error) {
	if len(pmts.fields) > 1 {
		return nil, errors.New("ent: ProductMaintTypeSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := pmts.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (pmts *ProductMaintTypeSelect) IntsX(ctx context.Context) []int {
	v, err := pmts.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (pmts *ProductMaintTypeSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = pmts.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{productmainttype.Label}
	default:
		err = fmt.Errorf("ent: ProductMaintTypeSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (pmts *ProductMaintTypeSelect) IntX(ctx context.Context) int {
	v, err := pmts.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (pmts *ProductMaintTypeSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(pmts.fields) > 1 {
		return nil, errors.New("ent: ProductMaintTypeSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := pmts.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (pmts *ProductMaintTypeSelect) Float64sX(ctx context.Context) []float64 {
	v, err := pmts.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (pmts *ProductMaintTypeSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = pmts.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{productmainttype.Label}
	default:
		err = fmt.Errorf("ent: ProductMaintTypeSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (pmts *ProductMaintTypeSelect) Float64X(ctx context.Context) float64 {
	v, err := pmts.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (pmts *ProductMaintTypeSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(pmts.fields) > 1 {
		return nil, errors.New("ent: ProductMaintTypeSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := pmts.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (pmts *ProductMaintTypeSelect) BoolsX(ctx context.Context) []bool {
	v, err := pmts.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (pmts *ProductMaintTypeSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = pmts.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{productmainttype.Label}
	default:
		err = fmt.Errorf("ent: ProductMaintTypeSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (pmts *ProductMaintTypeSelect) BoolX(ctx context.Context) bool {
	v, err := pmts.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (pmts *ProductMaintTypeSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := pmts.sql.Query()
	if err := pmts.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
