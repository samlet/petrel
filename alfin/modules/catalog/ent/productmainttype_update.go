// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/predicate"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productmainttype"
)

// ProductMaintTypeUpdate is the builder for updating ProductMaintType entities.
type ProductMaintTypeUpdate struct {
	config
	hooks    []Hook
	mutation *ProductMaintTypeMutation
}

// Where adds a new predicate for the ProductMaintTypeUpdate builder.
func (pmtu *ProductMaintTypeUpdate) Where(ps ...predicate.ProductMaintType) *ProductMaintTypeUpdate {
	pmtu.mutation.predicates = append(pmtu.mutation.predicates, ps...)
	return pmtu
}

// SetStringRef sets the "string_ref" field.
func (pmtu *ProductMaintTypeUpdate) SetStringRef(s string) *ProductMaintTypeUpdate {
	pmtu.mutation.SetStringRef(s)
	return pmtu
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (pmtu *ProductMaintTypeUpdate) SetNillableStringRef(s *string) *ProductMaintTypeUpdate {
	if s != nil {
		pmtu.SetStringRef(*s)
	}
	return pmtu
}

// ClearStringRef clears the value of the "string_ref" field.
func (pmtu *ProductMaintTypeUpdate) ClearStringRef() *ProductMaintTypeUpdate {
	pmtu.mutation.ClearStringRef()
	return pmtu
}

// SetDescription sets the "description" field.
func (pmtu *ProductMaintTypeUpdate) SetDescription(s string) *ProductMaintTypeUpdate {
	pmtu.mutation.SetDescription(s)
	return pmtu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pmtu *ProductMaintTypeUpdate) SetNillableDescription(s *string) *ProductMaintTypeUpdate {
	if s != nil {
		pmtu.SetDescription(*s)
	}
	return pmtu
}

// ClearDescription clears the value of the "description" field.
func (pmtu *ProductMaintTypeUpdate) ClearDescription() *ProductMaintTypeUpdate {
	pmtu.mutation.ClearDescription()
	return pmtu
}

// SetParentID sets the "parent" edge to the ProductMaintType entity by ID.
func (pmtu *ProductMaintTypeUpdate) SetParentID(id int) *ProductMaintTypeUpdate {
	pmtu.mutation.SetParentID(id)
	return pmtu
}

// SetNillableParentID sets the "parent" edge to the ProductMaintType entity by ID if the given value is not nil.
func (pmtu *ProductMaintTypeUpdate) SetNillableParentID(id *int) *ProductMaintTypeUpdate {
	if id != nil {
		pmtu = pmtu.SetParentID(*id)
	}
	return pmtu
}

// SetParent sets the "parent" edge to the ProductMaintType entity.
func (pmtu *ProductMaintTypeUpdate) SetParent(p *ProductMaintType) *ProductMaintTypeUpdate {
	return pmtu.SetParentID(p.ID)
}

// AddChildIDs adds the "children" edge to the ProductMaintType entity by IDs.
func (pmtu *ProductMaintTypeUpdate) AddChildIDs(ids ...int) *ProductMaintTypeUpdate {
	pmtu.mutation.AddChildIDs(ids...)
	return pmtu
}

// AddChildren adds the "children" edges to the ProductMaintType entity.
func (pmtu *ProductMaintTypeUpdate) AddChildren(p ...*ProductMaintType) *ProductMaintTypeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pmtu.AddChildIDs(ids...)
}

// AddChildProductMaintTypeIDs adds the "child_product_maint_types" edge to the ProductMaintType entity by IDs.
func (pmtu *ProductMaintTypeUpdate) AddChildProductMaintTypeIDs(ids ...int) *ProductMaintTypeUpdate {
	pmtu.mutation.AddChildProductMaintTypeIDs(ids...)
	return pmtu
}

// AddChildProductMaintTypes adds the "child_product_maint_types" edges to the ProductMaintType entity.
func (pmtu *ProductMaintTypeUpdate) AddChildProductMaintTypes(p ...*ProductMaintType) *ProductMaintTypeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pmtu.AddChildProductMaintTypeIDs(ids...)
}

// Mutation returns the ProductMaintTypeMutation object of the builder.
func (pmtu *ProductMaintTypeUpdate) Mutation() *ProductMaintTypeMutation {
	return pmtu.mutation
}

// ClearParent clears the "parent" edge to the ProductMaintType entity.
func (pmtu *ProductMaintTypeUpdate) ClearParent() *ProductMaintTypeUpdate {
	pmtu.mutation.ClearParent()
	return pmtu
}

// ClearChildren clears all "children" edges to the ProductMaintType entity.
func (pmtu *ProductMaintTypeUpdate) ClearChildren() *ProductMaintTypeUpdate {
	pmtu.mutation.ClearChildren()
	return pmtu
}

// RemoveChildIDs removes the "children" edge to ProductMaintType entities by IDs.
func (pmtu *ProductMaintTypeUpdate) RemoveChildIDs(ids ...int) *ProductMaintTypeUpdate {
	pmtu.mutation.RemoveChildIDs(ids...)
	return pmtu
}

// RemoveChildren removes "children" edges to ProductMaintType entities.
func (pmtu *ProductMaintTypeUpdate) RemoveChildren(p ...*ProductMaintType) *ProductMaintTypeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pmtu.RemoveChildIDs(ids...)
}

// ClearChildProductMaintTypes clears all "child_product_maint_types" edges to the ProductMaintType entity.
func (pmtu *ProductMaintTypeUpdate) ClearChildProductMaintTypes() *ProductMaintTypeUpdate {
	pmtu.mutation.ClearChildProductMaintTypes()
	return pmtu
}

// RemoveChildProductMaintTypeIDs removes the "child_product_maint_types" edge to ProductMaintType entities by IDs.
func (pmtu *ProductMaintTypeUpdate) RemoveChildProductMaintTypeIDs(ids ...int) *ProductMaintTypeUpdate {
	pmtu.mutation.RemoveChildProductMaintTypeIDs(ids...)
	return pmtu
}

// RemoveChildProductMaintTypes removes "child_product_maint_types" edges to ProductMaintType entities.
func (pmtu *ProductMaintTypeUpdate) RemoveChildProductMaintTypes(p ...*ProductMaintType) *ProductMaintTypeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pmtu.RemoveChildProductMaintTypeIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pmtu *ProductMaintTypeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	pmtu.defaults()
	if len(pmtu.hooks) == 0 {
		affected, err = pmtu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProductMaintTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pmtu.mutation = mutation
			affected, err = pmtu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pmtu.hooks) - 1; i >= 0; i-- {
			mut = pmtu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pmtu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pmtu *ProductMaintTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := pmtu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pmtu *ProductMaintTypeUpdate) Exec(ctx context.Context) error {
	_, err := pmtu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pmtu *ProductMaintTypeUpdate) ExecX(ctx context.Context) {
	if err := pmtu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pmtu *ProductMaintTypeUpdate) defaults() {
	if _, ok := pmtu.mutation.UpdateTime(); !ok {
		v := productmainttype.UpdateDefaultUpdateTime()
		pmtu.mutation.SetUpdateTime(v)
	}
}

func (pmtu *ProductMaintTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   productmainttype.Table,
			Columns: productmainttype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: productmainttype.FieldID,
			},
		},
	}
	if ps := pmtu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pmtu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productmainttype.FieldUpdateTime,
		})
	}
	if value, ok := pmtu.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productmainttype.FieldStringRef,
		})
	}
	if pmtu.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productmainttype.FieldStringRef,
		})
	}
	if value, ok := pmtu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productmainttype.FieldDescription,
		})
	}
	if pmtu.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productmainttype.FieldDescription,
		})
	}
	if pmtu.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productmainttype.ParentTable,
			Columns: []string{productmainttype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productmainttype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pmtu.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productmainttype.ParentTable,
			Columns: []string{productmainttype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productmainttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pmtu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productmainttype.ChildrenTable,
			Columns: []string{productmainttype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productmainttype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pmtu.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !pmtu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productmainttype.ChildrenTable,
			Columns: []string{productmainttype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productmainttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pmtu.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productmainttype.ChildrenTable,
			Columns: []string{productmainttype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productmainttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pmtu.mutation.ChildProductMaintTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   productmainttype.ChildProductMaintTypesTable,
			Columns: productmainttype.ChildProductMaintTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productmainttype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pmtu.mutation.RemovedChildProductMaintTypesIDs(); len(nodes) > 0 && !pmtu.mutation.ChildProductMaintTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   productmainttype.ChildProductMaintTypesTable,
			Columns: productmainttype.ChildProductMaintTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productmainttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pmtu.mutation.ChildProductMaintTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   productmainttype.ChildProductMaintTypesTable,
			Columns: productmainttype.ChildProductMaintTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productmainttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pmtu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productmainttype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ProductMaintTypeUpdateOne is the builder for updating a single ProductMaintType entity.
type ProductMaintTypeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProductMaintTypeMutation
}

// SetStringRef sets the "string_ref" field.
func (pmtuo *ProductMaintTypeUpdateOne) SetStringRef(s string) *ProductMaintTypeUpdateOne {
	pmtuo.mutation.SetStringRef(s)
	return pmtuo
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (pmtuo *ProductMaintTypeUpdateOne) SetNillableStringRef(s *string) *ProductMaintTypeUpdateOne {
	if s != nil {
		pmtuo.SetStringRef(*s)
	}
	return pmtuo
}

// ClearStringRef clears the value of the "string_ref" field.
func (pmtuo *ProductMaintTypeUpdateOne) ClearStringRef() *ProductMaintTypeUpdateOne {
	pmtuo.mutation.ClearStringRef()
	return pmtuo
}

// SetDescription sets the "description" field.
func (pmtuo *ProductMaintTypeUpdateOne) SetDescription(s string) *ProductMaintTypeUpdateOne {
	pmtuo.mutation.SetDescription(s)
	return pmtuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pmtuo *ProductMaintTypeUpdateOne) SetNillableDescription(s *string) *ProductMaintTypeUpdateOne {
	if s != nil {
		pmtuo.SetDescription(*s)
	}
	return pmtuo
}

// ClearDescription clears the value of the "description" field.
func (pmtuo *ProductMaintTypeUpdateOne) ClearDescription() *ProductMaintTypeUpdateOne {
	pmtuo.mutation.ClearDescription()
	return pmtuo
}

// SetParentID sets the "parent" edge to the ProductMaintType entity by ID.
func (pmtuo *ProductMaintTypeUpdateOne) SetParentID(id int) *ProductMaintTypeUpdateOne {
	pmtuo.mutation.SetParentID(id)
	return pmtuo
}

// SetNillableParentID sets the "parent" edge to the ProductMaintType entity by ID if the given value is not nil.
func (pmtuo *ProductMaintTypeUpdateOne) SetNillableParentID(id *int) *ProductMaintTypeUpdateOne {
	if id != nil {
		pmtuo = pmtuo.SetParentID(*id)
	}
	return pmtuo
}

// SetParent sets the "parent" edge to the ProductMaintType entity.
func (pmtuo *ProductMaintTypeUpdateOne) SetParent(p *ProductMaintType) *ProductMaintTypeUpdateOne {
	return pmtuo.SetParentID(p.ID)
}

// AddChildIDs adds the "children" edge to the ProductMaintType entity by IDs.
func (pmtuo *ProductMaintTypeUpdateOne) AddChildIDs(ids ...int) *ProductMaintTypeUpdateOne {
	pmtuo.mutation.AddChildIDs(ids...)
	return pmtuo
}

// AddChildren adds the "children" edges to the ProductMaintType entity.
func (pmtuo *ProductMaintTypeUpdateOne) AddChildren(p ...*ProductMaintType) *ProductMaintTypeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pmtuo.AddChildIDs(ids...)
}

// AddChildProductMaintTypeIDs adds the "child_product_maint_types" edge to the ProductMaintType entity by IDs.
func (pmtuo *ProductMaintTypeUpdateOne) AddChildProductMaintTypeIDs(ids ...int) *ProductMaintTypeUpdateOne {
	pmtuo.mutation.AddChildProductMaintTypeIDs(ids...)
	return pmtuo
}

// AddChildProductMaintTypes adds the "child_product_maint_types" edges to the ProductMaintType entity.
func (pmtuo *ProductMaintTypeUpdateOne) AddChildProductMaintTypes(p ...*ProductMaintType) *ProductMaintTypeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pmtuo.AddChildProductMaintTypeIDs(ids...)
}

// Mutation returns the ProductMaintTypeMutation object of the builder.
func (pmtuo *ProductMaintTypeUpdateOne) Mutation() *ProductMaintTypeMutation {
	return pmtuo.mutation
}

// ClearParent clears the "parent" edge to the ProductMaintType entity.
func (pmtuo *ProductMaintTypeUpdateOne) ClearParent() *ProductMaintTypeUpdateOne {
	pmtuo.mutation.ClearParent()
	return pmtuo
}

// ClearChildren clears all "children" edges to the ProductMaintType entity.
func (pmtuo *ProductMaintTypeUpdateOne) ClearChildren() *ProductMaintTypeUpdateOne {
	pmtuo.mutation.ClearChildren()
	return pmtuo
}

// RemoveChildIDs removes the "children" edge to ProductMaintType entities by IDs.
func (pmtuo *ProductMaintTypeUpdateOne) RemoveChildIDs(ids ...int) *ProductMaintTypeUpdateOne {
	pmtuo.mutation.RemoveChildIDs(ids...)
	return pmtuo
}

// RemoveChildren removes "children" edges to ProductMaintType entities.
func (pmtuo *ProductMaintTypeUpdateOne) RemoveChildren(p ...*ProductMaintType) *ProductMaintTypeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pmtuo.RemoveChildIDs(ids...)
}

// ClearChildProductMaintTypes clears all "child_product_maint_types" edges to the ProductMaintType entity.
func (pmtuo *ProductMaintTypeUpdateOne) ClearChildProductMaintTypes() *ProductMaintTypeUpdateOne {
	pmtuo.mutation.ClearChildProductMaintTypes()
	return pmtuo
}

// RemoveChildProductMaintTypeIDs removes the "child_product_maint_types" edge to ProductMaintType entities by IDs.
func (pmtuo *ProductMaintTypeUpdateOne) RemoveChildProductMaintTypeIDs(ids ...int) *ProductMaintTypeUpdateOne {
	pmtuo.mutation.RemoveChildProductMaintTypeIDs(ids...)
	return pmtuo
}

// RemoveChildProductMaintTypes removes "child_product_maint_types" edges to ProductMaintType entities.
func (pmtuo *ProductMaintTypeUpdateOne) RemoveChildProductMaintTypes(p ...*ProductMaintType) *ProductMaintTypeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pmtuo.RemoveChildProductMaintTypeIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pmtuo *ProductMaintTypeUpdateOne) Select(field string, fields ...string) *ProductMaintTypeUpdateOne {
	pmtuo.fields = append([]string{field}, fields...)
	return pmtuo
}

// Save executes the query and returns the updated ProductMaintType entity.
func (pmtuo *ProductMaintTypeUpdateOne) Save(ctx context.Context) (*ProductMaintType, error) {
	var (
		err  error
		node *ProductMaintType
	)
	pmtuo.defaults()
	if len(pmtuo.hooks) == 0 {
		node, err = pmtuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProductMaintTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pmtuo.mutation = mutation
			node, err = pmtuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pmtuo.hooks) - 1; i >= 0; i-- {
			mut = pmtuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pmtuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (pmtuo *ProductMaintTypeUpdateOne) SaveX(ctx context.Context) *ProductMaintType {
	node, err := pmtuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pmtuo *ProductMaintTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := pmtuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pmtuo *ProductMaintTypeUpdateOne) ExecX(ctx context.Context) {
	if err := pmtuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pmtuo *ProductMaintTypeUpdateOne) defaults() {
	if _, ok := pmtuo.mutation.UpdateTime(); !ok {
		v := productmainttype.UpdateDefaultUpdateTime()
		pmtuo.mutation.SetUpdateTime(v)
	}
}

func (pmtuo *ProductMaintTypeUpdateOne) sqlSave(ctx context.Context) (_node *ProductMaintType, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   productmainttype.Table,
			Columns: productmainttype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: productmainttype.FieldID,
			},
		},
	}
	id, ok := pmtuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ProductMaintType.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := pmtuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, productmainttype.FieldID)
		for _, f := range fields {
			if !productmainttype.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != productmainttype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pmtuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pmtuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productmainttype.FieldUpdateTime,
		})
	}
	if value, ok := pmtuo.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productmainttype.FieldStringRef,
		})
	}
	if pmtuo.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productmainttype.FieldStringRef,
		})
	}
	if value, ok := pmtuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productmainttype.FieldDescription,
		})
	}
	if pmtuo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productmainttype.FieldDescription,
		})
	}
	if pmtuo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productmainttype.ParentTable,
			Columns: []string{productmainttype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productmainttype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pmtuo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productmainttype.ParentTable,
			Columns: []string{productmainttype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productmainttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pmtuo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productmainttype.ChildrenTable,
			Columns: []string{productmainttype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productmainttype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pmtuo.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !pmtuo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productmainttype.ChildrenTable,
			Columns: []string{productmainttype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productmainttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pmtuo.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productmainttype.ChildrenTable,
			Columns: []string{productmainttype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productmainttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pmtuo.mutation.ChildProductMaintTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   productmainttype.ChildProductMaintTypesTable,
			Columns: productmainttype.ChildProductMaintTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productmainttype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pmtuo.mutation.RemovedChildProductMaintTypesIDs(); len(nodes) > 0 && !pmtuo.mutation.ChildProductMaintTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   productmainttype.ChildProductMaintTypesTable,
			Columns: productmainttype.ChildProductMaintTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productmainttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pmtuo.mutation.ChildProductMaintTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   productmainttype.ChildProductMaintTypesTable,
			Columns: productmainttype.ChildProductMaintTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productmainttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProductMaintType{config: pmtuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pmtuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productmainttype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
