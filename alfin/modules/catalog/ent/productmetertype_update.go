// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/predicate"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productmetertype"
)

// ProductMeterTypeUpdate is the builder for updating ProductMeterType entities.
type ProductMeterTypeUpdate struct {
	config
	hooks    []Hook
	mutation *ProductMeterTypeMutation
}

// Where adds a new predicate for the ProductMeterTypeUpdate builder.
func (pmtu *ProductMeterTypeUpdate) Where(ps ...predicate.ProductMeterType) *ProductMeterTypeUpdate {
	pmtu.mutation.predicates = append(pmtu.mutation.predicates, ps...)
	return pmtu
}

// SetStringRef sets the "string_ref" field.
func (pmtu *ProductMeterTypeUpdate) SetStringRef(s string) *ProductMeterTypeUpdate {
	pmtu.mutation.SetStringRef(s)
	return pmtu
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (pmtu *ProductMeterTypeUpdate) SetNillableStringRef(s *string) *ProductMeterTypeUpdate {
	if s != nil {
		pmtu.SetStringRef(*s)
	}
	return pmtu
}

// ClearStringRef clears the value of the "string_ref" field.
func (pmtu *ProductMeterTypeUpdate) ClearStringRef() *ProductMeterTypeUpdate {
	pmtu.mutation.ClearStringRef()
	return pmtu
}

// SetDescription sets the "description" field.
func (pmtu *ProductMeterTypeUpdate) SetDescription(s string) *ProductMeterTypeUpdate {
	pmtu.mutation.SetDescription(s)
	return pmtu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pmtu *ProductMeterTypeUpdate) SetNillableDescription(s *string) *ProductMeterTypeUpdate {
	if s != nil {
		pmtu.SetDescription(*s)
	}
	return pmtu
}

// ClearDescription clears the value of the "description" field.
func (pmtu *ProductMeterTypeUpdate) ClearDescription() *ProductMeterTypeUpdate {
	pmtu.mutation.ClearDescription()
	return pmtu
}

// SetDefaultUomID sets the "default_uom_id" field.
func (pmtu *ProductMeterTypeUpdate) SetDefaultUomID(i int) *ProductMeterTypeUpdate {
	pmtu.mutation.ResetDefaultUomID()
	pmtu.mutation.SetDefaultUomID(i)
	return pmtu
}

// SetNillableDefaultUomID sets the "default_uom_id" field if the given value is not nil.
func (pmtu *ProductMeterTypeUpdate) SetNillableDefaultUomID(i *int) *ProductMeterTypeUpdate {
	if i != nil {
		pmtu.SetDefaultUomID(*i)
	}
	return pmtu
}

// AddDefaultUomID adds i to the "default_uom_id" field.
func (pmtu *ProductMeterTypeUpdate) AddDefaultUomID(i int) *ProductMeterTypeUpdate {
	pmtu.mutation.AddDefaultUomID(i)
	return pmtu
}

// ClearDefaultUomID clears the value of the "default_uom_id" field.
func (pmtu *ProductMeterTypeUpdate) ClearDefaultUomID() *ProductMeterTypeUpdate {
	pmtu.mutation.ClearDefaultUomID()
	return pmtu
}

// Mutation returns the ProductMeterTypeMutation object of the builder.
func (pmtu *ProductMeterTypeUpdate) Mutation() *ProductMeterTypeMutation {
	return pmtu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pmtu *ProductMeterTypeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	pmtu.defaults()
	if len(pmtu.hooks) == 0 {
		affected, err = pmtu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProductMeterTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pmtu.mutation = mutation
			affected, err = pmtu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pmtu.hooks) - 1; i >= 0; i-- {
			mut = pmtu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pmtu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pmtu *ProductMeterTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := pmtu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pmtu *ProductMeterTypeUpdate) Exec(ctx context.Context) error {
	_, err := pmtu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pmtu *ProductMeterTypeUpdate) ExecX(ctx context.Context) {
	if err := pmtu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pmtu *ProductMeterTypeUpdate) defaults() {
	if _, ok := pmtu.mutation.UpdateTime(); !ok {
		v := productmetertype.UpdateDefaultUpdateTime()
		pmtu.mutation.SetUpdateTime(v)
	}
}

func (pmtu *ProductMeterTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   productmetertype.Table,
			Columns: productmetertype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: productmetertype.FieldID,
			},
		},
	}
	if ps := pmtu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pmtu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productmetertype.FieldUpdateTime,
		})
	}
	if value, ok := pmtu.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productmetertype.FieldStringRef,
		})
	}
	if pmtu.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productmetertype.FieldStringRef,
		})
	}
	if value, ok := pmtu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productmetertype.FieldDescription,
		})
	}
	if pmtu.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productmetertype.FieldDescription,
		})
	}
	if value, ok := pmtu.mutation.DefaultUomID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productmetertype.FieldDefaultUomID,
		})
	}
	if value, ok := pmtu.mutation.AddedDefaultUomID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productmetertype.FieldDefaultUomID,
		})
	}
	if pmtu.mutation.DefaultUomIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: productmetertype.FieldDefaultUomID,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pmtu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productmetertype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ProductMeterTypeUpdateOne is the builder for updating a single ProductMeterType entity.
type ProductMeterTypeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProductMeterTypeMutation
}

// SetStringRef sets the "string_ref" field.
func (pmtuo *ProductMeterTypeUpdateOne) SetStringRef(s string) *ProductMeterTypeUpdateOne {
	pmtuo.mutation.SetStringRef(s)
	return pmtuo
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (pmtuo *ProductMeterTypeUpdateOne) SetNillableStringRef(s *string) *ProductMeterTypeUpdateOne {
	if s != nil {
		pmtuo.SetStringRef(*s)
	}
	return pmtuo
}

// ClearStringRef clears the value of the "string_ref" field.
func (pmtuo *ProductMeterTypeUpdateOne) ClearStringRef() *ProductMeterTypeUpdateOne {
	pmtuo.mutation.ClearStringRef()
	return pmtuo
}

// SetDescription sets the "description" field.
func (pmtuo *ProductMeterTypeUpdateOne) SetDescription(s string) *ProductMeterTypeUpdateOne {
	pmtuo.mutation.SetDescription(s)
	return pmtuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pmtuo *ProductMeterTypeUpdateOne) SetNillableDescription(s *string) *ProductMeterTypeUpdateOne {
	if s != nil {
		pmtuo.SetDescription(*s)
	}
	return pmtuo
}

// ClearDescription clears the value of the "description" field.
func (pmtuo *ProductMeterTypeUpdateOne) ClearDescription() *ProductMeterTypeUpdateOne {
	pmtuo.mutation.ClearDescription()
	return pmtuo
}

// SetDefaultUomID sets the "default_uom_id" field.
func (pmtuo *ProductMeterTypeUpdateOne) SetDefaultUomID(i int) *ProductMeterTypeUpdateOne {
	pmtuo.mutation.ResetDefaultUomID()
	pmtuo.mutation.SetDefaultUomID(i)
	return pmtuo
}

// SetNillableDefaultUomID sets the "default_uom_id" field if the given value is not nil.
func (pmtuo *ProductMeterTypeUpdateOne) SetNillableDefaultUomID(i *int) *ProductMeterTypeUpdateOne {
	if i != nil {
		pmtuo.SetDefaultUomID(*i)
	}
	return pmtuo
}

// AddDefaultUomID adds i to the "default_uom_id" field.
func (pmtuo *ProductMeterTypeUpdateOne) AddDefaultUomID(i int) *ProductMeterTypeUpdateOne {
	pmtuo.mutation.AddDefaultUomID(i)
	return pmtuo
}

// ClearDefaultUomID clears the value of the "default_uom_id" field.
func (pmtuo *ProductMeterTypeUpdateOne) ClearDefaultUomID() *ProductMeterTypeUpdateOne {
	pmtuo.mutation.ClearDefaultUomID()
	return pmtuo
}

// Mutation returns the ProductMeterTypeMutation object of the builder.
func (pmtuo *ProductMeterTypeUpdateOne) Mutation() *ProductMeterTypeMutation {
	return pmtuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pmtuo *ProductMeterTypeUpdateOne) Select(field string, fields ...string) *ProductMeterTypeUpdateOne {
	pmtuo.fields = append([]string{field}, fields...)
	return pmtuo
}

// Save executes the query and returns the updated ProductMeterType entity.
func (pmtuo *ProductMeterTypeUpdateOne) Save(ctx context.Context) (*ProductMeterType, error) {
	var (
		err  error
		node *ProductMeterType
	)
	pmtuo.defaults()
	if len(pmtuo.hooks) == 0 {
		node, err = pmtuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProductMeterTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pmtuo.mutation = mutation
			node, err = pmtuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pmtuo.hooks) - 1; i >= 0; i-- {
			mut = pmtuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pmtuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (pmtuo *ProductMeterTypeUpdateOne) SaveX(ctx context.Context) *ProductMeterType {
	node, err := pmtuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pmtuo *ProductMeterTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := pmtuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pmtuo *ProductMeterTypeUpdateOne) ExecX(ctx context.Context) {
	if err := pmtuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pmtuo *ProductMeterTypeUpdateOne) defaults() {
	if _, ok := pmtuo.mutation.UpdateTime(); !ok {
		v := productmetertype.UpdateDefaultUpdateTime()
		pmtuo.mutation.SetUpdateTime(v)
	}
}

func (pmtuo *ProductMeterTypeUpdateOne) sqlSave(ctx context.Context) (_node *ProductMeterType, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   productmetertype.Table,
			Columns: productmetertype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: productmetertype.FieldID,
			},
		},
	}
	id, ok := pmtuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ProductMeterType.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := pmtuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, productmetertype.FieldID)
		for _, f := range fields {
			if !productmetertype.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != productmetertype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pmtuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pmtuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productmetertype.FieldUpdateTime,
		})
	}
	if value, ok := pmtuo.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productmetertype.FieldStringRef,
		})
	}
	if pmtuo.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productmetertype.FieldStringRef,
		})
	}
	if value, ok := pmtuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productmetertype.FieldDescription,
		})
	}
	if pmtuo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productmetertype.FieldDescription,
		})
	}
	if value, ok := pmtuo.mutation.DefaultUomID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productmetertype.FieldDefaultUomID,
		})
	}
	if value, ok := pmtuo.mutation.AddedDefaultUomID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productmetertype.FieldDefaultUomID,
		})
	}
	if pmtuo.mutation.DefaultUomIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: productmetertype.FieldDefaultUomID,
		})
	}
	_node = &ProductMeterType{config: pmtuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pmtuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productmetertype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
