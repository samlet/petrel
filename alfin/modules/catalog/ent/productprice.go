// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/custommethod"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/product"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productprice"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productpricepurpose"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productpricetype"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productstoregroup"
)

// ProductPrice is the model entity for the ProductPrice schema.
type ProductPrice struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// StringRef holds the value of the "string_ref" field.
	StringRef string `json:"string_ref,omitempty"`
	// CurrencyUomID holds the value of the "currency_uom_id" field.
	CurrencyUomID int `json:"currency_uom_id,omitempty"`
	// FromDate holds the value of the "from_date" field.
	FromDate time.Time `json:"from_date,omitempty"`
	// ThruDate holds the value of the "thru_date" field.
	ThruDate time.Time `json:"thru_date,omitempty"`
	// Price holds the value of the "price" field.
	Price float64 `json:"price,omitempty"`
	// TermUomID holds the value of the "term_uom_id" field.
	TermUomID int `json:"term_uom_id,omitempty"`
	// PriceWithoutTax holds the value of the "price_without_tax" field.
	PriceWithoutTax float64 `json:"price_without_tax,omitempty"`
	// PriceWithTax holds the value of the "price_with_tax" field.
	PriceWithTax float64 `json:"price_with_tax,omitempty"`
	// TaxAmount holds the value of the "tax_amount" field.
	TaxAmount float64 `json:"tax_amount,omitempty"`
	// TaxPercentage holds the value of the "tax_percentage" field.
	TaxPercentage float64 `json:"tax_percentage,omitempty"`
	// TaxAuthPartyID holds the value of the "tax_auth_party_id" field.
	TaxAuthPartyID int `json:"tax_auth_party_id,omitempty"`
	// TaxAuthGeoID holds the value of the "tax_auth_geo_id" field.
	TaxAuthGeoID int `json:"tax_auth_geo_id,omitempty"`
	// TaxInPrice holds the value of the "tax_in_price" field.
	TaxInPrice productprice.TaxInPrice `json:"tax_in_price,omitempty"`
	// CreatedDate holds the value of the "created_date" field.
	CreatedDate time.Time `json:"created_date,omitempty"`
	// CreatedByUserLogin holds the value of the "created_by_user_login" field.
	CreatedByUserLogin string `json:"created_by_user_login,omitempty"`
	// LastModifiedDate holds the value of the "last_modified_date" field.
	LastModifiedDate time.Time `json:"last_modified_date,omitempty"`
	// LastModifiedByUserLogin holds the value of the "last_modified_by_user_login" field.
	LastModifiedByUserLogin string `json:"last_modified_by_user_login,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProductPriceQuery when eager-loading is set.
	Edges                                ProductPriceEdges `json:"edges"`
	custom_method_product_prices         *int
	product_product_prices               *int
	product_price_purpose_product_prices *int
	product_price_type_product_prices    *int
	product_store_group_product_prices   *int
}

// ProductPriceEdges holds the relations/edges for other nodes in the graph.
type ProductPriceEdges struct {
	// Product holds the value of the product edge.
	Product *Product `json:"product,omitempty"`
	// ProductPriceType holds the value of the product_price_type edge.
	ProductPriceType *ProductPriceType `json:"product_price_type,omitempty"`
	// ProductPricePurpose holds the value of the product_price_purpose edge.
	ProductPricePurpose *ProductPricePurpose `json:"product_price_purpose,omitempty"`
	// ProductStoreGroup holds the value of the product_store_group edge.
	ProductStoreGroup *ProductStoreGroup `json:"product_store_group,omitempty"`
	// CustomMethod holds the value of the custom_method edge.
	CustomMethod *CustomMethod `json:"custom_method,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// ProductOrErr returns the Product value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProductPriceEdges) ProductOrErr() (*Product, error) {
	if e.loadedTypes[0] {
		if e.Product == nil {
			// The edge product was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: product.Label}
		}
		return e.Product, nil
	}
	return nil, &NotLoadedError{edge: "product"}
}

// ProductPriceTypeOrErr returns the ProductPriceType value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProductPriceEdges) ProductPriceTypeOrErr() (*ProductPriceType, error) {
	if e.loadedTypes[1] {
		if e.ProductPriceType == nil {
			// The edge product_price_type was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: productpricetype.Label}
		}
		return e.ProductPriceType, nil
	}
	return nil, &NotLoadedError{edge: "product_price_type"}
}

// ProductPricePurposeOrErr returns the ProductPricePurpose value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProductPriceEdges) ProductPricePurposeOrErr() (*ProductPricePurpose, error) {
	if e.loadedTypes[2] {
		if e.ProductPricePurpose == nil {
			// The edge product_price_purpose was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: productpricepurpose.Label}
		}
		return e.ProductPricePurpose, nil
	}
	return nil, &NotLoadedError{edge: "product_price_purpose"}
}

// ProductStoreGroupOrErr returns the ProductStoreGroup value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProductPriceEdges) ProductStoreGroupOrErr() (*ProductStoreGroup, error) {
	if e.loadedTypes[3] {
		if e.ProductStoreGroup == nil {
			// The edge product_store_group was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: productstoregroup.Label}
		}
		return e.ProductStoreGroup, nil
	}
	return nil, &NotLoadedError{edge: "product_store_group"}
}

// CustomMethodOrErr returns the CustomMethod value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProductPriceEdges) CustomMethodOrErr() (*CustomMethod, error) {
	if e.loadedTypes[4] {
		if e.CustomMethod == nil {
			// The edge custom_method was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: custommethod.Label}
		}
		return e.CustomMethod, nil
	}
	return nil, &NotLoadedError{edge: "custom_method"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProductPrice) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case productprice.FieldPrice, productprice.FieldPriceWithoutTax, productprice.FieldPriceWithTax, productprice.FieldTaxAmount, productprice.FieldTaxPercentage:
			values[i] = new(sql.NullFloat64)
		case productprice.FieldID, productprice.FieldCurrencyUomID, productprice.FieldTermUomID, productprice.FieldTaxAuthPartyID, productprice.FieldTaxAuthGeoID:
			values[i] = new(sql.NullInt64)
		case productprice.FieldStringRef, productprice.FieldTaxInPrice, productprice.FieldCreatedByUserLogin, productprice.FieldLastModifiedByUserLogin:
			values[i] = new(sql.NullString)
		case productprice.FieldCreateTime, productprice.FieldUpdateTime, productprice.FieldFromDate, productprice.FieldThruDate, productprice.FieldCreatedDate, productprice.FieldLastModifiedDate:
			values[i] = new(sql.NullTime)
		case productprice.ForeignKeys[0]: // custom_method_product_prices
			values[i] = new(sql.NullInt64)
		case productprice.ForeignKeys[1]: // product_product_prices
			values[i] = new(sql.NullInt64)
		case productprice.ForeignKeys[2]: // product_price_purpose_product_prices
			values[i] = new(sql.NullInt64)
		case productprice.ForeignKeys[3]: // product_price_type_product_prices
			values[i] = new(sql.NullInt64)
		case productprice.ForeignKeys[4]: // product_store_group_product_prices
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ProductPrice", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProductPrice fields.
func (pp *ProductPrice) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case productprice.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pp.ID = int(value.Int64)
		case productprice.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				pp.CreateTime = value.Time
			}
		case productprice.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				pp.UpdateTime = value.Time
			}
		case productprice.FieldStringRef:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field string_ref", values[i])
			} else if value.Valid {
				pp.StringRef = value.String
			}
		case productprice.FieldCurrencyUomID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field currency_uom_id", values[i])
			} else if value.Valid {
				pp.CurrencyUomID = int(value.Int64)
			}
		case productprice.FieldFromDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field from_date", values[i])
			} else if value.Valid {
				pp.FromDate = value.Time
			}
		case productprice.FieldThruDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field thru_date", values[i])
			} else if value.Valid {
				pp.ThruDate = value.Time
			}
		case productprice.FieldPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				pp.Price = value.Float64
			}
		case productprice.FieldTermUomID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field term_uom_id", values[i])
			} else if value.Valid {
				pp.TermUomID = int(value.Int64)
			}
		case productprice.FieldPriceWithoutTax:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field price_without_tax", values[i])
			} else if value.Valid {
				pp.PriceWithoutTax = value.Float64
			}
		case productprice.FieldPriceWithTax:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field price_with_tax", values[i])
			} else if value.Valid {
				pp.PriceWithTax = value.Float64
			}
		case productprice.FieldTaxAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field tax_amount", values[i])
			} else if value.Valid {
				pp.TaxAmount = value.Float64
			}
		case productprice.FieldTaxPercentage:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field tax_percentage", values[i])
			} else if value.Valid {
				pp.TaxPercentage = value.Float64
			}
		case productprice.FieldTaxAuthPartyID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tax_auth_party_id", values[i])
			} else if value.Valid {
				pp.TaxAuthPartyID = int(value.Int64)
			}
		case productprice.FieldTaxAuthGeoID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tax_auth_geo_id", values[i])
			} else if value.Valid {
				pp.TaxAuthGeoID = int(value.Int64)
			}
		case productprice.FieldTaxInPrice:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tax_in_price", values[i])
			} else if value.Valid {
				pp.TaxInPrice = productprice.TaxInPrice(value.String)
			}
		case productprice.FieldCreatedDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_date", values[i])
			} else if value.Valid {
				pp.CreatedDate = value.Time
			}
		case productprice.FieldCreatedByUserLogin:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by_user_login", values[i])
			} else if value.Valid {
				pp.CreatedByUserLogin = value.String
			}
		case productprice.FieldLastModifiedDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_modified_date", values[i])
			} else if value.Valid {
				pp.LastModifiedDate = value.Time
			}
		case productprice.FieldLastModifiedByUserLogin:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_modified_by_user_login", values[i])
			} else if value.Valid {
				pp.LastModifiedByUserLogin = value.String
			}
		case productprice.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field custom_method_product_prices", value)
			} else if value.Valid {
				pp.custom_method_product_prices = new(int)
				*pp.custom_method_product_prices = int(value.Int64)
			}
		case productprice.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field product_product_prices", value)
			} else if value.Valid {
				pp.product_product_prices = new(int)
				*pp.product_product_prices = int(value.Int64)
			}
		case productprice.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field product_price_purpose_product_prices", value)
			} else if value.Valid {
				pp.product_price_purpose_product_prices = new(int)
				*pp.product_price_purpose_product_prices = int(value.Int64)
			}
		case productprice.ForeignKeys[3]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field product_price_type_product_prices", value)
			} else if value.Valid {
				pp.product_price_type_product_prices = new(int)
				*pp.product_price_type_product_prices = int(value.Int64)
			}
		case productprice.ForeignKeys[4]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field product_store_group_product_prices", value)
			} else if value.Valid {
				pp.product_store_group_product_prices = new(int)
				*pp.product_store_group_product_prices = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryProduct queries the "product" edge of the ProductPrice entity.
func (pp *ProductPrice) QueryProduct() *ProductQuery {
	return (&ProductPriceClient{config: pp.config}).QueryProduct(pp)
}

// QueryProductPriceType queries the "product_price_type" edge of the ProductPrice entity.
func (pp *ProductPrice) QueryProductPriceType() *ProductPriceTypeQuery {
	return (&ProductPriceClient{config: pp.config}).QueryProductPriceType(pp)
}

// QueryProductPricePurpose queries the "product_price_purpose" edge of the ProductPrice entity.
func (pp *ProductPrice) QueryProductPricePurpose() *ProductPricePurposeQuery {
	return (&ProductPriceClient{config: pp.config}).QueryProductPricePurpose(pp)
}

// QueryProductStoreGroup queries the "product_store_group" edge of the ProductPrice entity.
func (pp *ProductPrice) QueryProductStoreGroup() *ProductStoreGroupQuery {
	return (&ProductPriceClient{config: pp.config}).QueryProductStoreGroup(pp)
}

// QueryCustomMethod queries the "custom_method" edge of the ProductPrice entity.
func (pp *ProductPrice) QueryCustomMethod() *CustomMethodQuery {
	return (&ProductPriceClient{config: pp.config}).QueryCustomMethod(pp)
}

// Update returns a builder for updating this ProductPrice.
// Note that you need to call ProductPrice.Unwrap() before calling this method if this ProductPrice
// was returned from a transaction, and the transaction was committed or rolled back.
func (pp *ProductPrice) Update() *ProductPriceUpdateOne {
	return (&ProductPriceClient{config: pp.config}).UpdateOne(pp)
}

// Unwrap unwraps the ProductPrice entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pp *ProductPrice) Unwrap() *ProductPrice {
	tx, ok := pp.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProductPrice is not a transactional entity")
	}
	pp.config.driver = tx.drv
	return pp
}

// String implements the fmt.Stringer.
func (pp *ProductPrice) String() string {
	var builder strings.Builder
	builder.WriteString("ProductPrice(")
	builder.WriteString(fmt.Sprintf("id=%v", pp.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(pp.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(pp.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", string_ref=")
	builder.WriteString(pp.StringRef)
	builder.WriteString(", currency_uom_id=")
	builder.WriteString(fmt.Sprintf("%v", pp.CurrencyUomID))
	builder.WriteString(", from_date=")
	builder.WriteString(pp.FromDate.Format(time.ANSIC))
	builder.WriteString(", thru_date=")
	builder.WriteString(pp.ThruDate.Format(time.ANSIC))
	builder.WriteString(", price=")
	builder.WriteString(fmt.Sprintf("%v", pp.Price))
	builder.WriteString(", term_uom_id=")
	builder.WriteString(fmt.Sprintf("%v", pp.TermUomID))
	builder.WriteString(", price_without_tax=")
	builder.WriteString(fmt.Sprintf("%v", pp.PriceWithoutTax))
	builder.WriteString(", price_with_tax=")
	builder.WriteString(fmt.Sprintf("%v", pp.PriceWithTax))
	builder.WriteString(", tax_amount=")
	builder.WriteString(fmt.Sprintf("%v", pp.TaxAmount))
	builder.WriteString(", tax_percentage=")
	builder.WriteString(fmt.Sprintf("%v", pp.TaxPercentage))
	builder.WriteString(", tax_auth_party_id=")
	builder.WriteString(fmt.Sprintf("%v", pp.TaxAuthPartyID))
	builder.WriteString(", tax_auth_geo_id=")
	builder.WriteString(fmt.Sprintf("%v", pp.TaxAuthGeoID))
	builder.WriteString(", tax_in_price=")
	builder.WriteString(fmt.Sprintf("%v", pp.TaxInPrice))
	builder.WriteString(", created_date=")
	builder.WriteString(pp.CreatedDate.Format(time.ANSIC))
	builder.WriteString(", created_by_user_login=")
	builder.WriteString(pp.CreatedByUserLogin)
	builder.WriteString(", last_modified_date=")
	builder.WriteString(pp.LastModifiedDate.Format(time.ANSIC))
	builder.WriteString(", last_modified_by_user_login=")
	builder.WriteString(pp.LastModifiedByUserLogin)
	builder.WriteByte(')')
	return builder.String()
}

// ProductPrices is a parsable slice of ProductPrice.
type ProductPrices []*ProductPrice

func (pp ProductPrices) config(cfg config) {
	for _i := range pp {
		pp[_i].config = cfg
	}
}
