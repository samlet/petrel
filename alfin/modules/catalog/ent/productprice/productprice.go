// Code generated by entc, DO NOT EDIT.

package productprice

import (
	"fmt"
	"time"
)

const (
	// Label holds the string label denoting the productprice type in the database.
	Label = "product_price"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldStringRef holds the string denoting the string_ref field in the database.
	FieldStringRef = "string_ref"
	// FieldCurrencyUomID holds the string denoting the currency_uom_id field in the database.
	FieldCurrencyUomID = "currency_uom_id"
	// FieldFromDate holds the string denoting the from_date field in the database.
	FieldFromDate = "from_date"
	// FieldThruDate holds the string denoting the thru_date field in the database.
	FieldThruDate = "thru_date"
	// FieldPrice holds the string denoting the price field in the database.
	FieldPrice = "price"
	// FieldTermUomID holds the string denoting the term_uom_id field in the database.
	FieldTermUomID = "term_uom_id"
	// FieldPriceWithoutTax holds the string denoting the price_without_tax field in the database.
	FieldPriceWithoutTax = "price_without_tax"
	// FieldPriceWithTax holds the string denoting the price_with_tax field in the database.
	FieldPriceWithTax = "price_with_tax"
	// FieldTaxAmount holds the string denoting the tax_amount field in the database.
	FieldTaxAmount = "tax_amount"
	// FieldTaxPercentage holds the string denoting the tax_percentage field in the database.
	FieldTaxPercentage = "tax_percentage"
	// FieldTaxAuthPartyID holds the string denoting the tax_auth_party_id field in the database.
	FieldTaxAuthPartyID = "tax_auth_party_id"
	// FieldTaxAuthGeoID holds the string denoting the tax_auth_geo_id field in the database.
	FieldTaxAuthGeoID = "tax_auth_geo_id"
	// FieldTaxInPrice holds the string denoting the tax_in_price field in the database.
	FieldTaxInPrice = "tax_in_price"
	// FieldCreatedDate holds the string denoting the created_date field in the database.
	FieldCreatedDate = "created_date"
	// FieldCreatedByUserLogin holds the string denoting the created_by_user_login field in the database.
	FieldCreatedByUserLogin = "created_by_user_login"
	// FieldLastModifiedDate holds the string denoting the last_modified_date field in the database.
	FieldLastModifiedDate = "last_modified_date"
	// FieldLastModifiedByUserLogin holds the string denoting the last_modified_by_user_login field in the database.
	FieldLastModifiedByUserLogin = "last_modified_by_user_login"
	// EdgeProduct holds the string denoting the product edge name in mutations.
	EdgeProduct = "product"
	// EdgeProductPriceType holds the string denoting the product_price_type edge name in mutations.
	EdgeProductPriceType = "product_price_type"
	// EdgeProductPricePurpose holds the string denoting the product_price_purpose edge name in mutations.
	EdgeProductPricePurpose = "product_price_purpose"
	// EdgeProductStoreGroup holds the string denoting the product_store_group edge name in mutations.
	EdgeProductStoreGroup = "product_store_group"
	// EdgeCustomMethod holds the string denoting the custom_method edge name in mutations.
	EdgeCustomMethod = "custom_method"
	// Table holds the table name of the productprice in the database.
	Table = "product_prices"
	// ProductTable is the table the holds the product relation/edge.
	ProductTable = "product_prices"
	// ProductInverseTable is the table name for the Product entity.
	// It exists in this package in order to avoid circular dependency with the "product" package.
	ProductInverseTable = "products"
	// ProductColumn is the table column denoting the product relation/edge.
	ProductColumn = "product_product_prices"
	// ProductPriceTypeTable is the table the holds the product_price_type relation/edge.
	ProductPriceTypeTable = "product_prices"
	// ProductPriceTypeInverseTable is the table name for the ProductPriceType entity.
	// It exists in this package in order to avoid circular dependency with the "productpricetype" package.
	ProductPriceTypeInverseTable = "product_price_types"
	// ProductPriceTypeColumn is the table column denoting the product_price_type relation/edge.
	ProductPriceTypeColumn = "product_price_type_product_prices"
	// ProductPricePurposeTable is the table the holds the product_price_purpose relation/edge.
	ProductPricePurposeTable = "product_prices"
	// ProductPricePurposeInverseTable is the table name for the ProductPricePurpose entity.
	// It exists in this package in order to avoid circular dependency with the "productpricepurpose" package.
	ProductPricePurposeInverseTable = "product_price_purposes"
	// ProductPricePurposeColumn is the table column denoting the product_price_purpose relation/edge.
	ProductPricePurposeColumn = "product_price_purpose_product_prices"
	// ProductStoreGroupTable is the table the holds the product_store_group relation/edge.
	ProductStoreGroupTable = "product_prices"
	// ProductStoreGroupInverseTable is the table name for the ProductStoreGroup entity.
	// It exists in this package in order to avoid circular dependency with the "productstoregroup" package.
	ProductStoreGroupInverseTable = "product_store_groups"
	// ProductStoreGroupColumn is the table column denoting the product_store_group relation/edge.
	ProductStoreGroupColumn = "product_store_group_product_prices"
	// CustomMethodTable is the table the holds the custom_method relation/edge.
	CustomMethodTable = "product_prices"
	// CustomMethodInverseTable is the table name for the CustomMethod entity.
	// It exists in this package in order to avoid circular dependency with the "custommethod" package.
	CustomMethodInverseTable = "custom_methods"
	// CustomMethodColumn is the table column denoting the custom_method relation/edge.
	CustomMethodColumn = "custom_method_product_prices"
)

// Columns holds all SQL columns for productprice fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldStringRef,
	FieldCurrencyUomID,
	FieldFromDate,
	FieldThruDate,
	FieldPrice,
	FieldTermUomID,
	FieldPriceWithoutTax,
	FieldPriceWithTax,
	FieldTaxAmount,
	FieldTaxPercentage,
	FieldTaxAuthPartyID,
	FieldTaxAuthGeoID,
	FieldTaxInPrice,
	FieldCreatedDate,
	FieldCreatedByUserLogin,
	FieldLastModifiedDate,
	FieldLastModifiedByUserLogin,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "product_prices"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"custom_method_product_prices",
	"product_product_prices",
	"product_price_purpose_product_prices",
	"product_price_type_product_prices",
	"product_store_group_product_prices",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// DefaultFromDate holds the default value on creation for the "from_date" field.
	DefaultFromDate func() time.Time
	// DefaultThruDate holds the default value on creation for the "thru_date" field.
	DefaultThruDate func() time.Time
	// DefaultCreatedDate holds the default value on creation for the "created_date" field.
	DefaultCreatedDate func() time.Time
	// DefaultLastModifiedDate holds the default value on creation for the "last_modified_date" field.
	DefaultLastModifiedDate func() time.Time
)

// TaxInPrice defines the type for the "tax_in_price" enum field.
type TaxInPrice string

// TaxInPrice values.
const (
	TaxInPriceYes     TaxInPrice = "Yes"
	TaxInPriceNo      TaxInPrice = "No"
	TaxInPriceUnknown TaxInPrice = "Unknown"
)

func (tip TaxInPrice) String() string {
	return string(tip)
}

// TaxInPriceValidator is a validator for the "tax_in_price" field enum values. It is called by the builders before save.
func TaxInPriceValidator(tip TaxInPrice) error {
	switch tip {
	case TaxInPriceYes, TaxInPriceNo, TaxInPriceUnknown:
		return nil
	default:
		return fmt.Errorf("productprice: invalid enum value for tax_in_price field: %q", tip)
	}
}
