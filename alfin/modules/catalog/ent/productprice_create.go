// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/custommethod"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/product"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productprice"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productpricepurpose"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productpricetype"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productstoregroup"
)

// ProductPriceCreate is the builder for creating a ProductPrice entity.
type ProductPriceCreate struct {
	config
	mutation *ProductPriceMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (ppc *ProductPriceCreate) SetCreateTime(t time.Time) *ProductPriceCreate {
	ppc.mutation.SetCreateTime(t)
	return ppc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (ppc *ProductPriceCreate) SetNillableCreateTime(t *time.Time) *ProductPriceCreate {
	if t != nil {
		ppc.SetCreateTime(*t)
	}
	return ppc
}

// SetUpdateTime sets the "update_time" field.
func (ppc *ProductPriceCreate) SetUpdateTime(t time.Time) *ProductPriceCreate {
	ppc.mutation.SetUpdateTime(t)
	return ppc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (ppc *ProductPriceCreate) SetNillableUpdateTime(t *time.Time) *ProductPriceCreate {
	if t != nil {
		ppc.SetUpdateTime(*t)
	}
	return ppc
}

// SetStringRef sets the "string_ref" field.
func (ppc *ProductPriceCreate) SetStringRef(s string) *ProductPriceCreate {
	ppc.mutation.SetStringRef(s)
	return ppc
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (ppc *ProductPriceCreate) SetNillableStringRef(s *string) *ProductPriceCreate {
	if s != nil {
		ppc.SetStringRef(*s)
	}
	return ppc
}

// SetCurrencyUomID sets the "currency_uom_id" field.
func (ppc *ProductPriceCreate) SetCurrencyUomID(i int) *ProductPriceCreate {
	ppc.mutation.SetCurrencyUomID(i)
	return ppc
}

// SetFromDate sets the "from_date" field.
func (ppc *ProductPriceCreate) SetFromDate(t time.Time) *ProductPriceCreate {
	ppc.mutation.SetFromDate(t)
	return ppc
}

// SetNillableFromDate sets the "from_date" field if the given value is not nil.
func (ppc *ProductPriceCreate) SetNillableFromDate(t *time.Time) *ProductPriceCreate {
	if t != nil {
		ppc.SetFromDate(*t)
	}
	return ppc
}

// SetThruDate sets the "thru_date" field.
func (ppc *ProductPriceCreate) SetThruDate(t time.Time) *ProductPriceCreate {
	ppc.mutation.SetThruDate(t)
	return ppc
}

// SetNillableThruDate sets the "thru_date" field if the given value is not nil.
func (ppc *ProductPriceCreate) SetNillableThruDate(t *time.Time) *ProductPriceCreate {
	if t != nil {
		ppc.SetThruDate(*t)
	}
	return ppc
}

// SetPrice sets the "price" field.
func (ppc *ProductPriceCreate) SetPrice(f float64) *ProductPriceCreate {
	ppc.mutation.SetPrice(f)
	return ppc
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (ppc *ProductPriceCreate) SetNillablePrice(f *float64) *ProductPriceCreate {
	if f != nil {
		ppc.SetPrice(*f)
	}
	return ppc
}

// SetTermUomID sets the "term_uom_id" field.
func (ppc *ProductPriceCreate) SetTermUomID(i int) *ProductPriceCreate {
	ppc.mutation.SetTermUomID(i)
	return ppc
}

// SetNillableTermUomID sets the "term_uom_id" field if the given value is not nil.
func (ppc *ProductPriceCreate) SetNillableTermUomID(i *int) *ProductPriceCreate {
	if i != nil {
		ppc.SetTermUomID(*i)
	}
	return ppc
}

// SetPriceWithoutTax sets the "price_without_tax" field.
func (ppc *ProductPriceCreate) SetPriceWithoutTax(f float64) *ProductPriceCreate {
	ppc.mutation.SetPriceWithoutTax(f)
	return ppc
}

// SetNillablePriceWithoutTax sets the "price_without_tax" field if the given value is not nil.
func (ppc *ProductPriceCreate) SetNillablePriceWithoutTax(f *float64) *ProductPriceCreate {
	if f != nil {
		ppc.SetPriceWithoutTax(*f)
	}
	return ppc
}

// SetPriceWithTax sets the "price_with_tax" field.
func (ppc *ProductPriceCreate) SetPriceWithTax(f float64) *ProductPriceCreate {
	ppc.mutation.SetPriceWithTax(f)
	return ppc
}

// SetNillablePriceWithTax sets the "price_with_tax" field if the given value is not nil.
func (ppc *ProductPriceCreate) SetNillablePriceWithTax(f *float64) *ProductPriceCreate {
	if f != nil {
		ppc.SetPriceWithTax(*f)
	}
	return ppc
}

// SetTaxAmount sets the "tax_amount" field.
func (ppc *ProductPriceCreate) SetTaxAmount(f float64) *ProductPriceCreate {
	ppc.mutation.SetTaxAmount(f)
	return ppc
}

// SetNillableTaxAmount sets the "tax_amount" field if the given value is not nil.
func (ppc *ProductPriceCreate) SetNillableTaxAmount(f *float64) *ProductPriceCreate {
	if f != nil {
		ppc.SetTaxAmount(*f)
	}
	return ppc
}

// SetTaxPercentage sets the "tax_percentage" field.
func (ppc *ProductPriceCreate) SetTaxPercentage(f float64) *ProductPriceCreate {
	ppc.mutation.SetTaxPercentage(f)
	return ppc
}

// SetNillableTaxPercentage sets the "tax_percentage" field if the given value is not nil.
func (ppc *ProductPriceCreate) SetNillableTaxPercentage(f *float64) *ProductPriceCreate {
	if f != nil {
		ppc.SetTaxPercentage(*f)
	}
	return ppc
}

// SetTaxAuthPartyID sets the "tax_auth_party_id" field.
func (ppc *ProductPriceCreate) SetTaxAuthPartyID(i int) *ProductPriceCreate {
	ppc.mutation.SetTaxAuthPartyID(i)
	return ppc
}

// SetNillableTaxAuthPartyID sets the "tax_auth_party_id" field if the given value is not nil.
func (ppc *ProductPriceCreate) SetNillableTaxAuthPartyID(i *int) *ProductPriceCreate {
	if i != nil {
		ppc.SetTaxAuthPartyID(*i)
	}
	return ppc
}

// SetTaxAuthGeoID sets the "tax_auth_geo_id" field.
func (ppc *ProductPriceCreate) SetTaxAuthGeoID(i int) *ProductPriceCreate {
	ppc.mutation.SetTaxAuthGeoID(i)
	return ppc
}

// SetNillableTaxAuthGeoID sets the "tax_auth_geo_id" field if the given value is not nil.
func (ppc *ProductPriceCreate) SetNillableTaxAuthGeoID(i *int) *ProductPriceCreate {
	if i != nil {
		ppc.SetTaxAuthGeoID(*i)
	}
	return ppc
}

// SetTaxInPrice sets the "tax_in_price" field.
func (ppc *ProductPriceCreate) SetTaxInPrice(pip productprice.TaxInPrice) *ProductPriceCreate {
	ppc.mutation.SetTaxInPrice(pip)
	return ppc
}

// SetNillableTaxInPrice sets the "tax_in_price" field if the given value is not nil.
func (ppc *ProductPriceCreate) SetNillableTaxInPrice(pip *productprice.TaxInPrice) *ProductPriceCreate {
	if pip != nil {
		ppc.SetTaxInPrice(*pip)
	}
	return ppc
}

// SetCreatedDate sets the "created_date" field.
func (ppc *ProductPriceCreate) SetCreatedDate(t time.Time) *ProductPriceCreate {
	ppc.mutation.SetCreatedDate(t)
	return ppc
}

// SetNillableCreatedDate sets the "created_date" field if the given value is not nil.
func (ppc *ProductPriceCreate) SetNillableCreatedDate(t *time.Time) *ProductPriceCreate {
	if t != nil {
		ppc.SetCreatedDate(*t)
	}
	return ppc
}

// SetCreatedByUserLogin sets the "created_by_user_login" field.
func (ppc *ProductPriceCreate) SetCreatedByUserLogin(s string) *ProductPriceCreate {
	ppc.mutation.SetCreatedByUserLogin(s)
	return ppc
}

// SetNillableCreatedByUserLogin sets the "created_by_user_login" field if the given value is not nil.
func (ppc *ProductPriceCreate) SetNillableCreatedByUserLogin(s *string) *ProductPriceCreate {
	if s != nil {
		ppc.SetCreatedByUserLogin(*s)
	}
	return ppc
}

// SetLastModifiedDate sets the "last_modified_date" field.
func (ppc *ProductPriceCreate) SetLastModifiedDate(t time.Time) *ProductPriceCreate {
	ppc.mutation.SetLastModifiedDate(t)
	return ppc
}

// SetNillableLastModifiedDate sets the "last_modified_date" field if the given value is not nil.
func (ppc *ProductPriceCreate) SetNillableLastModifiedDate(t *time.Time) *ProductPriceCreate {
	if t != nil {
		ppc.SetLastModifiedDate(*t)
	}
	return ppc
}

// SetLastModifiedByUserLogin sets the "last_modified_by_user_login" field.
func (ppc *ProductPriceCreate) SetLastModifiedByUserLogin(s string) *ProductPriceCreate {
	ppc.mutation.SetLastModifiedByUserLogin(s)
	return ppc
}

// SetNillableLastModifiedByUserLogin sets the "last_modified_by_user_login" field if the given value is not nil.
func (ppc *ProductPriceCreate) SetNillableLastModifiedByUserLogin(s *string) *ProductPriceCreate {
	if s != nil {
		ppc.SetLastModifiedByUserLogin(*s)
	}
	return ppc
}

// SetProductID sets the "product" edge to the Product entity by ID.
func (ppc *ProductPriceCreate) SetProductID(id int) *ProductPriceCreate {
	ppc.mutation.SetProductID(id)
	return ppc
}

// SetNillableProductID sets the "product" edge to the Product entity by ID if the given value is not nil.
func (ppc *ProductPriceCreate) SetNillableProductID(id *int) *ProductPriceCreate {
	if id != nil {
		ppc = ppc.SetProductID(*id)
	}
	return ppc
}

// SetProduct sets the "product" edge to the Product entity.
func (ppc *ProductPriceCreate) SetProduct(p *Product) *ProductPriceCreate {
	return ppc.SetProductID(p.ID)
}

// SetProductPriceTypeID sets the "product_price_type" edge to the ProductPriceType entity by ID.
func (ppc *ProductPriceCreate) SetProductPriceTypeID(id int) *ProductPriceCreate {
	ppc.mutation.SetProductPriceTypeID(id)
	return ppc
}

// SetNillableProductPriceTypeID sets the "product_price_type" edge to the ProductPriceType entity by ID if the given value is not nil.
func (ppc *ProductPriceCreate) SetNillableProductPriceTypeID(id *int) *ProductPriceCreate {
	if id != nil {
		ppc = ppc.SetProductPriceTypeID(*id)
	}
	return ppc
}

// SetProductPriceType sets the "product_price_type" edge to the ProductPriceType entity.
func (ppc *ProductPriceCreate) SetProductPriceType(p *ProductPriceType) *ProductPriceCreate {
	return ppc.SetProductPriceTypeID(p.ID)
}

// SetProductPricePurposeID sets the "product_price_purpose" edge to the ProductPricePurpose entity by ID.
func (ppc *ProductPriceCreate) SetProductPricePurposeID(id int) *ProductPriceCreate {
	ppc.mutation.SetProductPricePurposeID(id)
	return ppc
}

// SetNillableProductPricePurposeID sets the "product_price_purpose" edge to the ProductPricePurpose entity by ID if the given value is not nil.
func (ppc *ProductPriceCreate) SetNillableProductPricePurposeID(id *int) *ProductPriceCreate {
	if id != nil {
		ppc = ppc.SetProductPricePurposeID(*id)
	}
	return ppc
}

// SetProductPricePurpose sets the "product_price_purpose" edge to the ProductPricePurpose entity.
func (ppc *ProductPriceCreate) SetProductPricePurpose(p *ProductPricePurpose) *ProductPriceCreate {
	return ppc.SetProductPricePurposeID(p.ID)
}

// SetProductStoreGroupID sets the "product_store_group" edge to the ProductStoreGroup entity by ID.
func (ppc *ProductPriceCreate) SetProductStoreGroupID(id int) *ProductPriceCreate {
	ppc.mutation.SetProductStoreGroupID(id)
	return ppc
}

// SetNillableProductStoreGroupID sets the "product_store_group" edge to the ProductStoreGroup entity by ID if the given value is not nil.
func (ppc *ProductPriceCreate) SetNillableProductStoreGroupID(id *int) *ProductPriceCreate {
	if id != nil {
		ppc = ppc.SetProductStoreGroupID(*id)
	}
	return ppc
}

// SetProductStoreGroup sets the "product_store_group" edge to the ProductStoreGroup entity.
func (ppc *ProductPriceCreate) SetProductStoreGroup(p *ProductStoreGroup) *ProductPriceCreate {
	return ppc.SetProductStoreGroupID(p.ID)
}

// SetCustomMethodID sets the "custom_method" edge to the CustomMethod entity by ID.
func (ppc *ProductPriceCreate) SetCustomMethodID(id int) *ProductPriceCreate {
	ppc.mutation.SetCustomMethodID(id)
	return ppc
}

// SetNillableCustomMethodID sets the "custom_method" edge to the CustomMethod entity by ID if the given value is not nil.
func (ppc *ProductPriceCreate) SetNillableCustomMethodID(id *int) *ProductPriceCreate {
	if id != nil {
		ppc = ppc.SetCustomMethodID(*id)
	}
	return ppc
}

// SetCustomMethod sets the "custom_method" edge to the CustomMethod entity.
func (ppc *ProductPriceCreate) SetCustomMethod(c *CustomMethod) *ProductPriceCreate {
	return ppc.SetCustomMethodID(c.ID)
}

// Mutation returns the ProductPriceMutation object of the builder.
func (ppc *ProductPriceCreate) Mutation() *ProductPriceMutation {
	return ppc.mutation
}

// Save creates the ProductPrice in the database.
func (ppc *ProductPriceCreate) Save(ctx context.Context) (*ProductPrice, error) {
	var (
		err  error
		node *ProductPrice
	)
	ppc.defaults()
	if len(ppc.hooks) == 0 {
		if err = ppc.check(); err != nil {
			return nil, err
		}
		node, err = ppc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProductPriceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ppc.check(); err != nil {
				return nil, err
			}
			ppc.mutation = mutation
			if node, err = ppc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ppc.hooks) - 1; i >= 0; i-- {
			mut = ppc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ppc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ppc *ProductPriceCreate) SaveX(ctx context.Context) *ProductPrice {
	v, err := ppc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (ppc *ProductPriceCreate) defaults() {
	if _, ok := ppc.mutation.CreateTime(); !ok {
		v := productprice.DefaultCreateTime()
		ppc.mutation.SetCreateTime(v)
	}
	if _, ok := ppc.mutation.UpdateTime(); !ok {
		v := productprice.DefaultUpdateTime()
		ppc.mutation.SetUpdateTime(v)
	}
	if _, ok := ppc.mutation.FromDate(); !ok {
		v := productprice.DefaultFromDate()
		ppc.mutation.SetFromDate(v)
	}
	if _, ok := ppc.mutation.ThruDate(); !ok {
		v := productprice.DefaultThruDate()
		ppc.mutation.SetThruDate(v)
	}
	if _, ok := ppc.mutation.CreatedDate(); !ok {
		v := productprice.DefaultCreatedDate()
		ppc.mutation.SetCreatedDate(v)
	}
	if _, ok := ppc.mutation.LastModifiedDate(); !ok {
		v := productprice.DefaultLastModifiedDate()
		ppc.mutation.SetLastModifiedDate(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ppc *ProductPriceCreate) check() error {
	if _, ok := ppc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New("ent: missing required field \"create_time\"")}
	}
	if _, ok := ppc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New("ent: missing required field \"update_time\"")}
	}
	if _, ok := ppc.mutation.CurrencyUomID(); !ok {
		return &ValidationError{Name: "currency_uom_id", err: errors.New("ent: missing required field \"currency_uom_id\"")}
	}
	if _, ok := ppc.mutation.FromDate(); !ok {
		return &ValidationError{Name: "from_date", err: errors.New("ent: missing required field \"from_date\"")}
	}
	if v, ok := ppc.mutation.TaxInPrice(); ok {
		if err := productprice.TaxInPriceValidator(v); err != nil {
			return &ValidationError{Name: "tax_in_price", err: fmt.Errorf("ent: validator failed for field \"tax_in_price\": %w", err)}
		}
	}
	return nil
}

func (ppc *ProductPriceCreate) sqlSave(ctx context.Context) (*ProductPrice, error) {
	_node, _spec := ppc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ppc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (ppc *ProductPriceCreate) createSpec() (*ProductPrice, *sqlgraph.CreateSpec) {
	var (
		_node = &ProductPrice{config: ppc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: productprice.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: productprice.FieldID,
			},
		}
	)
	if value, ok := ppc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productprice.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := ppc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productprice.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := ppc.mutation.StringRef(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productprice.FieldStringRef,
		})
		_node.StringRef = value
	}
	if value, ok := ppc.mutation.CurrencyUomID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productprice.FieldCurrencyUomID,
		})
		_node.CurrencyUomID = value
	}
	if value, ok := ppc.mutation.FromDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productprice.FieldFromDate,
		})
		_node.FromDate = value
	}
	if value, ok := ppc.mutation.ThruDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productprice.FieldThruDate,
		})
		_node.ThruDate = value
	}
	if value, ok := ppc.mutation.Price(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: productprice.FieldPrice,
		})
		_node.Price = value
	}
	if value, ok := ppc.mutation.TermUomID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productprice.FieldTermUomID,
		})
		_node.TermUomID = value
	}
	if value, ok := ppc.mutation.PriceWithoutTax(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: productprice.FieldPriceWithoutTax,
		})
		_node.PriceWithoutTax = value
	}
	if value, ok := ppc.mutation.PriceWithTax(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: productprice.FieldPriceWithTax,
		})
		_node.PriceWithTax = value
	}
	if value, ok := ppc.mutation.TaxAmount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: productprice.FieldTaxAmount,
		})
		_node.TaxAmount = value
	}
	if value, ok := ppc.mutation.TaxPercentage(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: productprice.FieldTaxPercentage,
		})
		_node.TaxPercentage = value
	}
	if value, ok := ppc.mutation.TaxAuthPartyID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productprice.FieldTaxAuthPartyID,
		})
		_node.TaxAuthPartyID = value
	}
	if value, ok := ppc.mutation.TaxAuthGeoID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productprice.FieldTaxAuthGeoID,
		})
		_node.TaxAuthGeoID = value
	}
	if value, ok := ppc.mutation.TaxInPrice(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productprice.FieldTaxInPrice,
		})
		_node.TaxInPrice = value
	}
	if value, ok := ppc.mutation.CreatedDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productprice.FieldCreatedDate,
		})
		_node.CreatedDate = value
	}
	if value, ok := ppc.mutation.CreatedByUserLogin(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productprice.FieldCreatedByUserLogin,
		})
		_node.CreatedByUserLogin = value
	}
	if value, ok := ppc.mutation.LastModifiedDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productprice.FieldLastModifiedDate,
		})
		_node.LastModifiedDate = value
	}
	if value, ok := ppc.mutation.LastModifiedByUserLogin(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productprice.FieldLastModifiedByUserLogin,
		})
		_node.LastModifiedByUserLogin = value
	}
	if nodes := ppc.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productprice.ProductTable,
			Columns: []string{productprice.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.product_product_prices = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ppc.mutation.ProductPriceTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productprice.ProductPriceTypeTable,
			Columns: []string{productprice.ProductPriceTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productpricetype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.product_price_type_product_prices = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ppc.mutation.ProductPricePurposeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productprice.ProductPricePurposeTable,
			Columns: []string{productprice.ProductPricePurposeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productpricepurpose.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.product_price_purpose_product_prices = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ppc.mutation.ProductStoreGroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productprice.ProductStoreGroupTable,
			Columns: []string{productprice.ProductStoreGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productstoregroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.product_store_group_product_prices = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ppc.mutation.CustomMethodIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productprice.CustomMethodTable,
			Columns: []string{productprice.CustomMethodColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: custommethod.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.custom_method_product_prices = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ProductPriceCreateBulk is the builder for creating many ProductPrice entities in bulk.
type ProductPriceCreateBulk struct {
	config
	builders []*ProductPriceCreate
}

// Save creates the ProductPrice entities in the database.
func (ppcb *ProductPriceCreateBulk) Save(ctx context.Context) ([]*ProductPrice, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ppcb.builders))
	nodes := make([]*ProductPrice, len(ppcb.builders))
	mutators := make([]Mutator, len(ppcb.builders))
	for i := range ppcb.builders {
		func(i int, root context.Context) {
			builder := ppcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProductPriceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ppcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ppcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ppcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ppcb *ProductPriceCreateBulk) SaveX(ctx context.Context) []*ProductPrice {
	v, err := ppcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
