// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/custommethod"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/predicate"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/product"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productprice"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productpricepurpose"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productpricetype"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productstoregroup"
)

// ProductPriceQuery is the builder for querying ProductPrice entities.
type ProductPriceQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.ProductPrice
	// eager-loading edges.
	withProduct             *ProductQuery
	withProductPriceType    *ProductPriceTypeQuery
	withProductPricePurpose *ProductPricePurposeQuery
	withProductStoreGroup   *ProductStoreGroupQuery
	withCustomMethod        *CustomMethodQuery
	withFKs                 bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ProductPriceQuery builder.
func (ppq *ProductPriceQuery) Where(ps ...predicate.ProductPrice) *ProductPriceQuery {
	ppq.predicates = append(ppq.predicates, ps...)
	return ppq
}

// Limit adds a limit step to the query.
func (ppq *ProductPriceQuery) Limit(limit int) *ProductPriceQuery {
	ppq.limit = &limit
	return ppq
}

// Offset adds an offset step to the query.
func (ppq *ProductPriceQuery) Offset(offset int) *ProductPriceQuery {
	ppq.offset = &offset
	return ppq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ppq *ProductPriceQuery) Unique(unique bool) *ProductPriceQuery {
	ppq.unique = &unique
	return ppq
}

// Order adds an order step to the query.
func (ppq *ProductPriceQuery) Order(o ...OrderFunc) *ProductPriceQuery {
	ppq.order = append(ppq.order, o...)
	return ppq
}

// QueryProduct chains the current query on the "product" edge.
func (ppq *ProductPriceQuery) QueryProduct() *ProductQuery {
	query := &ProductQuery{config: ppq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ppq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ppq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(productprice.Table, productprice.FieldID, selector),
			sqlgraph.To(product.Table, product.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, productprice.ProductTable, productprice.ProductColumn),
		)
		fromU = sqlgraph.SetNeighbors(ppq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProductPriceType chains the current query on the "product_price_type" edge.
func (ppq *ProductPriceQuery) QueryProductPriceType() *ProductPriceTypeQuery {
	query := &ProductPriceTypeQuery{config: ppq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ppq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ppq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(productprice.Table, productprice.FieldID, selector),
			sqlgraph.To(productpricetype.Table, productpricetype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, productprice.ProductPriceTypeTable, productprice.ProductPriceTypeColumn),
		)
		fromU = sqlgraph.SetNeighbors(ppq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProductPricePurpose chains the current query on the "product_price_purpose" edge.
func (ppq *ProductPriceQuery) QueryProductPricePurpose() *ProductPricePurposeQuery {
	query := &ProductPricePurposeQuery{config: ppq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ppq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ppq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(productprice.Table, productprice.FieldID, selector),
			sqlgraph.To(productpricepurpose.Table, productpricepurpose.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, productprice.ProductPricePurposeTable, productprice.ProductPricePurposeColumn),
		)
		fromU = sqlgraph.SetNeighbors(ppq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProductStoreGroup chains the current query on the "product_store_group" edge.
func (ppq *ProductPriceQuery) QueryProductStoreGroup() *ProductStoreGroupQuery {
	query := &ProductStoreGroupQuery{config: ppq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ppq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ppq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(productprice.Table, productprice.FieldID, selector),
			sqlgraph.To(productstoregroup.Table, productstoregroup.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, productprice.ProductStoreGroupTable, productprice.ProductStoreGroupColumn),
		)
		fromU = sqlgraph.SetNeighbors(ppq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCustomMethod chains the current query on the "custom_method" edge.
func (ppq *ProductPriceQuery) QueryCustomMethod() *CustomMethodQuery {
	query := &CustomMethodQuery{config: ppq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ppq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ppq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(productprice.Table, productprice.FieldID, selector),
			sqlgraph.To(custommethod.Table, custommethod.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, productprice.CustomMethodTable, productprice.CustomMethodColumn),
		)
		fromU = sqlgraph.SetNeighbors(ppq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ProductPrice entity from the query.
// Returns a *NotFoundError when no ProductPrice was found.
func (ppq *ProductPriceQuery) First(ctx context.Context) (*ProductPrice, error) {
	nodes, err := ppq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{productprice.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ppq *ProductPriceQuery) FirstX(ctx context.Context) *ProductPrice {
	node, err := ppq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ProductPrice ID from the query.
// Returns a *NotFoundError when no ProductPrice ID was found.
func (ppq *ProductPriceQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ppq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{productprice.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ppq *ProductPriceQuery) FirstIDX(ctx context.Context) int {
	id, err := ppq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ProductPrice entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one ProductPrice entity is not found.
// Returns a *NotFoundError when no ProductPrice entities are found.
func (ppq *ProductPriceQuery) Only(ctx context.Context) (*ProductPrice, error) {
	nodes, err := ppq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{productprice.Label}
	default:
		return nil, &NotSingularError{productprice.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ppq *ProductPriceQuery) OnlyX(ctx context.Context) *ProductPrice {
	node, err := ppq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ProductPrice ID in the query.
// Returns a *NotSingularError when exactly one ProductPrice ID is not found.
// Returns a *NotFoundError when no entities are found.
func (ppq *ProductPriceQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ppq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{productprice.Label}
	default:
		err = &NotSingularError{productprice.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ppq *ProductPriceQuery) OnlyIDX(ctx context.Context) int {
	id, err := ppq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ProductPrices.
func (ppq *ProductPriceQuery) All(ctx context.Context) ([]*ProductPrice, error) {
	if err := ppq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return ppq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (ppq *ProductPriceQuery) AllX(ctx context.Context) []*ProductPrice {
	nodes, err := ppq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ProductPrice IDs.
func (ppq *ProductPriceQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := ppq.Select(productprice.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ppq *ProductPriceQuery) IDsX(ctx context.Context) []int {
	ids, err := ppq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ppq *ProductPriceQuery) Count(ctx context.Context) (int, error) {
	if err := ppq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return ppq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (ppq *ProductPriceQuery) CountX(ctx context.Context) int {
	count, err := ppq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ppq *ProductPriceQuery) Exist(ctx context.Context) (bool, error) {
	if err := ppq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return ppq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (ppq *ProductPriceQuery) ExistX(ctx context.Context) bool {
	exist, err := ppq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ProductPriceQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ppq *ProductPriceQuery) Clone() *ProductPriceQuery {
	if ppq == nil {
		return nil
	}
	return &ProductPriceQuery{
		config:                  ppq.config,
		limit:                   ppq.limit,
		offset:                  ppq.offset,
		order:                   append([]OrderFunc{}, ppq.order...),
		predicates:              append([]predicate.ProductPrice{}, ppq.predicates...),
		withProduct:             ppq.withProduct.Clone(),
		withProductPriceType:    ppq.withProductPriceType.Clone(),
		withProductPricePurpose: ppq.withProductPricePurpose.Clone(),
		withProductStoreGroup:   ppq.withProductStoreGroup.Clone(),
		withCustomMethod:        ppq.withCustomMethod.Clone(),
		// clone intermediate query.
		sql:  ppq.sql.Clone(),
		path: ppq.path,
	}
}

// WithProduct tells the query-builder to eager-load the nodes that are connected to
// the "product" edge. The optional arguments are used to configure the query builder of the edge.
func (ppq *ProductPriceQuery) WithProduct(opts ...func(*ProductQuery)) *ProductPriceQuery {
	query := &ProductQuery{config: ppq.config}
	for _, opt := range opts {
		opt(query)
	}
	ppq.withProduct = query
	return ppq
}

// WithProductPriceType tells the query-builder to eager-load the nodes that are connected to
// the "product_price_type" edge. The optional arguments are used to configure the query builder of the edge.
func (ppq *ProductPriceQuery) WithProductPriceType(opts ...func(*ProductPriceTypeQuery)) *ProductPriceQuery {
	query := &ProductPriceTypeQuery{config: ppq.config}
	for _, opt := range opts {
		opt(query)
	}
	ppq.withProductPriceType = query
	return ppq
}

// WithProductPricePurpose tells the query-builder to eager-load the nodes that are connected to
// the "product_price_purpose" edge. The optional arguments are used to configure the query builder of the edge.
func (ppq *ProductPriceQuery) WithProductPricePurpose(opts ...func(*ProductPricePurposeQuery)) *ProductPriceQuery {
	query := &ProductPricePurposeQuery{config: ppq.config}
	for _, opt := range opts {
		opt(query)
	}
	ppq.withProductPricePurpose = query
	return ppq
}

// WithProductStoreGroup tells the query-builder to eager-load the nodes that are connected to
// the "product_store_group" edge. The optional arguments are used to configure the query builder of the edge.
func (ppq *ProductPriceQuery) WithProductStoreGroup(opts ...func(*ProductStoreGroupQuery)) *ProductPriceQuery {
	query := &ProductStoreGroupQuery{config: ppq.config}
	for _, opt := range opts {
		opt(query)
	}
	ppq.withProductStoreGroup = query
	return ppq
}

// WithCustomMethod tells the query-builder to eager-load the nodes that are connected to
// the "custom_method" edge. The optional arguments are used to configure the query builder of the edge.
func (ppq *ProductPriceQuery) WithCustomMethod(opts ...func(*CustomMethodQuery)) *ProductPriceQuery {
	query := &CustomMethodQuery{config: ppq.config}
	for _, opt := range opts {
		opt(query)
	}
	ppq.withCustomMethod = query
	return ppq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ProductPrice.Query().
//		GroupBy(productprice.FieldCreateTime).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (ppq *ProductPriceQuery) GroupBy(field string, fields ...string) *ProductPriceGroupBy {
	group := &ProductPriceGroupBy{config: ppq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := ppq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return ppq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//	}
//
//	client.ProductPrice.Query().
//		Select(productprice.FieldCreateTime).
//		Scan(ctx, &v)
//
func (ppq *ProductPriceQuery) Select(field string, fields ...string) *ProductPriceSelect {
	ppq.fields = append([]string{field}, fields...)
	return &ProductPriceSelect{ProductPriceQuery: ppq}
}

func (ppq *ProductPriceQuery) prepareQuery(ctx context.Context) error {
	for _, f := range ppq.fields {
		if !productprice.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ppq.path != nil {
		prev, err := ppq.path(ctx)
		if err != nil {
			return err
		}
		ppq.sql = prev
	}
	return nil
}

func (ppq *ProductPriceQuery) sqlAll(ctx context.Context) ([]*ProductPrice, error) {
	var (
		nodes       = []*ProductPrice{}
		withFKs     = ppq.withFKs
		_spec       = ppq.querySpec()
		loadedTypes = [5]bool{
			ppq.withProduct != nil,
			ppq.withProductPriceType != nil,
			ppq.withProductPricePurpose != nil,
			ppq.withProductStoreGroup != nil,
			ppq.withCustomMethod != nil,
		}
	)
	if ppq.withProduct != nil || ppq.withProductPriceType != nil || ppq.withProductPricePurpose != nil || ppq.withProductStoreGroup != nil || ppq.withCustomMethod != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, productprice.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &ProductPrice{config: ppq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, ppq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := ppq.withProduct; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*ProductPrice)
		for i := range nodes {
			if nodes[i].product_product_prices == nil {
				continue
			}
			fk := *nodes[i].product_product_prices
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(product.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "product_product_prices" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Product = n
			}
		}
	}

	if query := ppq.withProductPriceType; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*ProductPrice)
		for i := range nodes {
			if nodes[i].product_price_type_product_prices == nil {
				continue
			}
			fk := *nodes[i].product_price_type_product_prices
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(productpricetype.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "product_price_type_product_prices" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.ProductPriceType = n
			}
		}
	}

	if query := ppq.withProductPricePurpose; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*ProductPrice)
		for i := range nodes {
			if nodes[i].product_price_purpose_product_prices == nil {
				continue
			}
			fk := *nodes[i].product_price_purpose_product_prices
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(productpricepurpose.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "product_price_purpose_product_prices" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.ProductPricePurpose = n
			}
		}
	}

	if query := ppq.withProductStoreGroup; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*ProductPrice)
		for i := range nodes {
			if nodes[i].product_store_group_product_prices == nil {
				continue
			}
			fk := *nodes[i].product_store_group_product_prices
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(productstoregroup.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "product_store_group_product_prices" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.ProductStoreGroup = n
			}
		}
	}

	if query := ppq.withCustomMethod; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*ProductPrice)
		for i := range nodes {
			if nodes[i].custom_method_product_prices == nil {
				continue
			}
			fk := *nodes[i].custom_method_product_prices
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(custommethod.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "custom_method_product_prices" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.CustomMethod = n
			}
		}
	}

	return nodes, nil
}

func (ppq *ProductPriceQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ppq.querySpec()
	return sqlgraph.CountNodes(ctx, ppq.driver, _spec)
}

func (ppq *ProductPriceQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := ppq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (ppq *ProductPriceQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   productprice.Table,
			Columns: productprice.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: productprice.FieldID,
			},
		},
		From:   ppq.sql,
		Unique: true,
	}
	if unique := ppq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := ppq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, productprice.FieldID)
		for i := range fields {
			if fields[i] != productprice.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := ppq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ppq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ppq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ppq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ppq *ProductPriceQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ppq.driver.Dialect())
	t1 := builder.Table(productprice.Table)
	columns := ppq.fields
	if len(columns) == 0 {
		columns = productprice.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ppq.sql != nil {
		selector = ppq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	for _, p := range ppq.predicates {
		p(selector)
	}
	for _, p := range ppq.order {
		p(selector)
	}
	if offset := ppq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ppq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ProductPriceGroupBy is the group-by builder for ProductPrice entities.
type ProductPriceGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ppgb *ProductPriceGroupBy) Aggregate(fns ...AggregateFunc) *ProductPriceGroupBy {
	ppgb.fns = append(ppgb.fns, fns...)
	return ppgb
}

// Scan applies the group-by query and scans the result into the given value.
func (ppgb *ProductPriceGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := ppgb.path(ctx)
	if err != nil {
		return err
	}
	ppgb.sql = query
	return ppgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (ppgb *ProductPriceGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := ppgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (ppgb *ProductPriceGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(ppgb.fields) > 1 {
		return nil, errors.New("ent: ProductPriceGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := ppgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (ppgb *ProductPriceGroupBy) StringsX(ctx context.Context) []string {
	v, err := ppgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (ppgb *ProductPriceGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = ppgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{productprice.Label}
	default:
		err = fmt.Errorf("ent: ProductPriceGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (ppgb *ProductPriceGroupBy) StringX(ctx context.Context) string {
	v, err := ppgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (ppgb *ProductPriceGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(ppgb.fields) > 1 {
		return nil, errors.New("ent: ProductPriceGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := ppgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (ppgb *ProductPriceGroupBy) IntsX(ctx context.Context) []int {
	v, err := ppgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (ppgb *ProductPriceGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = ppgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{productprice.Label}
	default:
		err = fmt.Errorf("ent: ProductPriceGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (ppgb *ProductPriceGroupBy) IntX(ctx context.Context) int {
	v, err := ppgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (ppgb *ProductPriceGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(ppgb.fields) > 1 {
		return nil, errors.New("ent: ProductPriceGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := ppgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (ppgb *ProductPriceGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := ppgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (ppgb *ProductPriceGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = ppgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{productprice.Label}
	default:
		err = fmt.Errorf("ent: ProductPriceGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (ppgb *ProductPriceGroupBy) Float64X(ctx context.Context) float64 {
	v, err := ppgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (ppgb *ProductPriceGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(ppgb.fields) > 1 {
		return nil, errors.New("ent: ProductPriceGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := ppgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (ppgb *ProductPriceGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := ppgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (ppgb *ProductPriceGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = ppgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{productprice.Label}
	default:
		err = fmt.Errorf("ent: ProductPriceGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (ppgb *ProductPriceGroupBy) BoolX(ctx context.Context) bool {
	v, err := ppgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ppgb *ProductPriceGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range ppgb.fields {
		if !productprice.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := ppgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ppgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (ppgb *ProductPriceGroupBy) sqlQuery() *sql.Selector {
	selector := ppgb.sql.Select()
	aggregation := make([]string, 0, len(ppgb.fns))
	for _, fn := range ppgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(ppgb.fields)+len(ppgb.fns))
		for _, f := range ppgb.fields {
			columns = append(columns, selector.C(f))
		}
		for _, c := range aggregation {
			columns = append(columns, c)
		}
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(ppgb.fields...)...)
}

// ProductPriceSelect is the builder for selecting fields of ProductPrice entities.
type ProductPriceSelect struct {
	*ProductPriceQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (pps *ProductPriceSelect) Scan(ctx context.Context, v interface{}) error {
	if err := pps.prepareQuery(ctx); err != nil {
		return err
	}
	pps.sql = pps.ProductPriceQuery.sqlQuery(ctx)
	return pps.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (pps *ProductPriceSelect) ScanX(ctx context.Context, v interface{}) {
	if err := pps.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (pps *ProductPriceSelect) Strings(ctx context.Context) ([]string, error) {
	if len(pps.fields) > 1 {
		return nil, errors.New("ent: ProductPriceSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := pps.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (pps *ProductPriceSelect) StringsX(ctx context.Context) []string {
	v, err := pps.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (pps *ProductPriceSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = pps.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{productprice.Label}
	default:
		err = fmt.Errorf("ent: ProductPriceSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (pps *ProductPriceSelect) StringX(ctx context.Context) string {
	v, err := pps.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (pps *ProductPriceSelect) Ints(ctx context.Context) ([]int, error) {
	if len(pps.fields) > 1 {
		return nil, errors.New("ent: ProductPriceSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := pps.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (pps *ProductPriceSelect) IntsX(ctx context.Context) []int {
	v, err := pps.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (pps *ProductPriceSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = pps.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{productprice.Label}
	default:
		err = fmt.Errorf("ent: ProductPriceSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (pps *ProductPriceSelect) IntX(ctx context.Context) int {
	v, err := pps.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (pps *ProductPriceSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(pps.fields) > 1 {
		return nil, errors.New("ent: ProductPriceSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := pps.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (pps *ProductPriceSelect) Float64sX(ctx context.Context) []float64 {
	v, err := pps.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (pps *ProductPriceSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = pps.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{productprice.Label}
	default:
		err = fmt.Errorf("ent: ProductPriceSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (pps *ProductPriceSelect) Float64X(ctx context.Context) float64 {
	v, err := pps.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (pps *ProductPriceSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(pps.fields) > 1 {
		return nil, errors.New("ent: ProductPriceSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := pps.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (pps *ProductPriceSelect) BoolsX(ctx context.Context) []bool {
	v, err := pps.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (pps *ProductPriceSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = pps.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{productprice.Label}
	default:
		err = fmt.Errorf("ent: ProductPriceSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (pps *ProductPriceSelect) BoolX(ctx context.Context) bool {
	v, err := pps.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (pps *ProductPriceSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := pps.sql.Query()
	if err := pps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
