// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/custommethod"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/predicate"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/product"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productprice"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productpricepurpose"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productpricetype"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productstoregroup"
)

// ProductPriceUpdate is the builder for updating ProductPrice entities.
type ProductPriceUpdate struct {
	config
	hooks    []Hook
	mutation *ProductPriceMutation
}

// Where adds a new predicate for the ProductPriceUpdate builder.
func (ppu *ProductPriceUpdate) Where(ps ...predicate.ProductPrice) *ProductPriceUpdate {
	ppu.mutation.predicates = append(ppu.mutation.predicates, ps...)
	return ppu
}

// SetStringRef sets the "string_ref" field.
func (ppu *ProductPriceUpdate) SetStringRef(s string) *ProductPriceUpdate {
	ppu.mutation.SetStringRef(s)
	return ppu
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (ppu *ProductPriceUpdate) SetNillableStringRef(s *string) *ProductPriceUpdate {
	if s != nil {
		ppu.SetStringRef(*s)
	}
	return ppu
}

// ClearStringRef clears the value of the "string_ref" field.
func (ppu *ProductPriceUpdate) ClearStringRef() *ProductPriceUpdate {
	ppu.mutation.ClearStringRef()
	return ppu
}

// SetCurrencyUomID sets the "currency_uom_id" field.
func (ppu *ProductPriceUpdate) SetCurrencyUomID(i int) *ProductPriceUpdate {
	ppu.mutation.ResetCurrencyUomID()
	ppu.mutation.SetCurrencyUomID(i)
	return ppu
}

// AddCurrencyUomID adds i to the "currency_uom_id" field.
func (ppu *ProductPriceUpdate) AddCurrencyUomID(i int) *ProductPriceUpdate {
	ppu.mutation.AddCurrencyUomID(i)
	return ppu
}

// SetFromDate sets the "from_date" field.
func (ppu *ProductPriceUpdate) SetFromDate(t time.Time) *ProductPriceUpdate {
	ppu.mutation.SetFromDate(t)
	return ppu
}

// SetNillableFromDate sets the "from_date" field if the given value is not nil.
func (ppu *ProductPriceUpdate) SetNillableFromDate(t *time.Time) *ProductPriceUpdate {
	if t != nil {
		ppu.SetFromDate(*t)
	}
	return ppu
}

// SetThruDate sets the "thru_date" field.
func (ppu *ProductPriceUpdate) SetThruDate(t time.Time) *ProductPriceUpdate {
	ppu.mutation.SetThruDate(t)
	return ppu
}

// SetNillableThruDate sets the "thru_date" field if the given value is not nil.
func (ppu *ProductPriceUpdate) SetNillableThruDate(t *time.Time) *ProductPriceUpdate {
	if t != nil {
		ppu.SetThruDate(*t)
	}
	return ppu
}

// ClearThruDate clears the value of the "thru_date" field.
func (ppu *ProductPriceUpdate) ClearThruDate() *ProductPriceUpdate {
	ppu.mutation.ClearThruDate()
	return ppu
}

// SetPrice sets the "price" field.
func (ppu *ProductPriceUpdate) SetPrice(f float64) *ProductPriceUpdate {
	ppu.mutation.ResetPrice()
	ppu.mutation.SetPrice(f)
	return ppu
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (ppu *ProductPriceUpdate) SetNillablePrice(f *float64) *ProductPriceUpdate {
	if f != nil {
		ppu.SetPrice(*f)
	}
	return ppu
}

// AddPrice adds f to the "price" field.
func (ppu *ProductPriceUpdate) AddPrice(f float64) *ProductPriceUpdate {
	ppu.mutation.AddPrice(f)
	return ppu
}

// ClearPrice clears the value of the "price" field.
func (ppu *ProductPriceUpdate) ClearPrice() *ProductPriceUpdate {
	ppu.mutation.ClearPrice()
	return ppu
}

// SetTermUomID sets the "term_uom_id" field.
func (ppu *ProductPriceUpdate) SetTermUomID(i int) *ProductPriceUpdate {
	ppu.mutation.ResetTermUomID()
	ppu.mutation.SetTermUomID(i)
	return ppu
}

// SetNillableTermUomID sets the "term_uom_id" field if the given value is not nil.
func (ppu *ProductPriceUpdate) SetNillableTermUomID(i *int) *ProductPriceUpdate {
	if i != nil {
		ppu.SetTermUomID(*i)
	}
	return ppu
}

// AddTermUomID adds i to the "term_uom_id" field.
func (ppu *ProductPriceUpdate) AddTermUomID(i int) *ProductPriceUpdate {
	ppu.mutation.AddTermUomID(i)
	return ppu
}

// ClearTermUomID clears the value of the "term_uom_id" field.
func (ppu *ProductPriceUpdate) ClearTermUomID() *ProductPriceUpdate {
	ppu.mutation.ClearTermUomID()
	return ppu
}

// SetPriceWithoutTax sets the "price_without_tax" field.
func (ppu *ProductPriceUpdate) SetPriceWithoutTax(f float64) *ProductPriceUpdate {
	ppu.mutation.ResetPriceWithoutTax()
	ppu.mutation.SetPriceWithoutTax(f)
	return ppu
}

// SetNillablePriceWithoutTax sets the "price_without_tax" field if the given value is not nil.
func (ppu *ProductPriceUpdate) SetNillablePriceWithoutTax(f *float64) *ProductPriceUpdate {
	if f != nil {
		ppu.SetPriceWithoutTax(*f)
	}
	return ppu
}

// AddPriceWithoutTax adds f to the "price_without_tax" field.
func (ppu *ProductPriceUpdate) AddPriceWithoutTax(f float64) *ProductPriceUpdate {
	ppu.mutation.AddPriceWithoutTax(f)
	return ppu
}

// ClearPriceWithoutTax clears the value of the "price_without_tax" field.
func (ppu *ProductPriceUpdate) ClearPriceWithoutTax() *ProductPriceUpdate {
	ppu.mutation.ClearPriceWithoutTax()
	return ppu
}

// SetPriceWithTax sets the "price_with_tax" field.
func (ppu *ProductPriceUpdate) SetPriceWithTax(f float64) *ProductPriceUpdate {
	ppu.mutation.ResetPriceWithTax()
	ppu.mutation.SetPriceWithTax(f)
	return ppu
}

// SetNillablePriceWithTax sets the "price_with_tax" field if the given value is not nil.
func (ppu *ProductPriceUpdate) SetNillablePriceWithTax(f *float64) *ProductPriceUpdate {
	if f != nil {
		ppu.SetPriceWithTax(*f)
	}
	return ppu
}

// AddPriceWithTax adds f to the "price_with_tax" field.
func (ppu *ProductPriceUpdate) AddPriceWithTax(f float64) *ProductPriceUpdate {
	ppu.mutation.AddPriceWithTax(f)
	return ppu
}

// ClearPriceWithTax clears the value of the "price_with_tax" field.
func (ppu *ProductPriceUpdate) ClearPriceWithTax() *ProductPriceUpdate {
	ppu.mutation.ClearPriceWithTax()
	return ppu
}

// SetTaxAmount sets the "tax_amount" field.
func (ppu *ProductPriceUpdate) SetTaxAmount(f float64) *ProductPriceUpdate {
	ppu.mutation.ResetTaxAmount()
	ppu.mutation.SetTaxAmount(f)
	return ppu
}

// SetNillableTaxAmount sets the "tax_amount" field if the given value is not nil.
func (ppu *ProductPriceUpdate) SetNillableTaxAmount(f *float64) *ProductPriceUpdate {
	if f != nil {
		ppu.SetTaxAmount(*f)
	}
	return ppu
}

// AddTaxAmount adds f to the "tax_amount" field.
func (ppu *ProductPriceUpdate) AddTaxAmount(f float64) *ProductPriceUpdate {
	ppu.mutation.AddTaxAmount(f)
	return ppu
}

// ClearTaxAmount clears the value of the "tax_amount" field.
func (ppu *ProductPriceUpdate) ClearTaxAmount() *ProductPriceUpdate {
	ppu.mutation.ClearTaxAmount()
	return ppu
}

// SetTaxPercentage sets the "tax_percentage" field.
func (ppu *ProductPriceUpdate) SetTaxPercentage(f float64) *ProductPriceUpdate {
	ppu.mutation.ResetTaxPercentage()
	ppu.mutation.SetTaxPercentage(f)
	return ppu
}

// SetNillableTaxPercentage sets the "tax_percentage" field if the given value is not nil.
func (ppu *ProductPriceUpdate) SetNillableTaxPercentage(f *float64) *ProductPriceUpdate {
	if f != nil {
		ppu.SetTaxPercentage(*f)
	}
	return ppu
}

// AddTaxPercentage adds f to the "tax_percentage" field.
func (ppu *ProductPriceUpdate) AddTaxPercentage(f float64) *ProductPriceUpdate {
	ppu.mutation.AddTaxPercentage(f)
	return ppu
}

// ClearTaxPercentage clears the value of the "tax_percentage" field.
func (ppu *ProductPriceUpdate) ClearTaxPercentage() *ProductPriceUpdate {
	ppu.mutation.ClearTaxPercentage()
	return ppu
}

// SetTaxAuthPartyID sets the "tax_auth_party_id" field.
func (ppu *ProductPriceUpdate) SetTaxAuthPartyID(i int) *ProductPriceUpdate {
	ppu.mutation.ResetTaxAuthPartyID()
	ppu.mutation.SetTaxAuthPartyID(i)
	return ppu
}

// SetNillableTaxAuthPartyID sets the "tax_auth_party_id" field if the given value is not nil.
func (ppu *ProductPriceUpdate) SetNillableTaxAuthPartyID(i *int) *ProductPriceUpdate {
	if i != nil {
		ppu.SetTaxAuthPartyID(*i)
	}
	return ppu
}

// AddTaxAuthPartyID adds i to the "tax_auth_party_id" field.
func (ppu *ProductPriceUpdate) AddTaxAuthPartyID(i int) *ProductPriceUpdate {
	ppu.mutation.AddTaxAuthPartyID(i)
	return ppu
}

// ClearTaxAuthPartyID clears the value of the "tax_auth_party_id" field.
func (ppu *ProductPriceUpdate) ClearTaxAuthPartyID() *ProductPriceUpdate {
	ppu.mutation.ClearTaxAuthPartyID()
	return ppu
}

// SetTaxAuthGeoID sets the "tax_auth_geo_id" field.
func (ppu *ProductPriceUpdate) SetTaxAuthGeoID(i int) *ProductPriceUpdate {
	ppu.mutation.ResetTaxAuthGeoID()
	ppu.mutation.SetTaxAuthGeoID(i)
	return ppu
}

// SetNillableTaxAuthGeoID sets the "tax_auth_geo_id" field if the given value is not nil.
func (ppu *ProductPriceUpdate) SetNillableTaxAuthGeoID(i *int) *ProductPriceUpdate {
	if i != nil {
		ppu.SetTaxAuthGeoID(*i)
	}
	return ppu
}

// AddTaxAuthGeoID adds i to the "tax_auth_geo_id" field.
func (ppu *ProductPriceUpdate) AddTaxAuthGeoID(i int) *ProductPriceUpdate {
	ppu.mutation.AddTaxAuthGeoID(i)
	return ppu
}

// ClearTaxAuthGeoID clears the value of the "tax_auth_geo_id" field.
func (ppu *ProductPriceUpdate) ClearTaxAuthGeoID() *ProductPriceUpdate {
	ppu.mutation.ClearTaxAuthGeoID()
	return ppu
}

// SetTaxInPrice sets the "tax_in_price" field.
func (ppu *ProductPriceUpdate) SetTaxInPrice(pip productprice.TaxInPrice) *ProductPriceUpdate {
	ppu.mutation.SetTaxInPrice(pip)
	return ppu
}

// SetNillableTaxInPrice sets the "tax_in_price" field if the given value is not nil.
func (ppu *ProductPriceUpdate) SetNillableTaxInPrice(pip *productprice.TaxInPrice) *ProductPriceUpdate {
	if pip != nil {
		ppu.SetTaxInPrice(*pip)
	}
	return ppu
}

// ClearTaxInPrice clears the value of the "tax_in_price" field.
func (ppu *ProductPriceUpdate) ClearTaxInPrice() *ProductPriceUpdate {
	ppu.mutation.ClearTaxInPrice()
	return ppu
}

// SetCreatedDate sets the "created_date" field.
func (ppu *ProductPriceUpdate) SetCreatedDate(t time.Time) *ProductPriceUpdate {
	ppu.mutation.SetCreatedDate(t)
	return ppu
}

// SetNillableCreatedDate sets the "created_date" field if the given value is not nil.
func (ppu *ProductPriceUpdate) SetNillableCreatedDate(t *time.Time) *ProductPriceUpdate {
	if t != nil {
		ppu.SetCreatedDate(*t)
	}
	return ppu
}

// ClearCreatedDate clears the value of the "created_date" field.
func (ppu *ProductPriceUpdate) ClearCreatedDate() *ProductPriceUpdate {
	ppu.mutation.ClearCreatedDate()
	return ppu
}

// SetCreatedByUserLogin sets the "created_by_user_login" field.
func (ppu *ProductPriceUpdate) SetCreatedByUserLogin(s string) *ProductPriceUpdate {
	ppu.mutation.SetCreatedByUserLogin(s)
	return ppu
}

// SetNillableCreatedByUserLogin sets the "created_by_user_login" field if the given value is not nil.
func (ppu *ProductPriceUpdate) SetNillableCreatedByUserLogin(s *string) *ProductPriceUpdate {
	if s != nil {
		ppu.SetCreatedByUserLogin(*s)
	}
	return ppu
}

// ClearCreatedByUserLogin clears the value of the "created_by_user_login" field.
func (ppu *ProductPriceUpdate) ClearCreatedByUserLogin() *ProductPriceUpdate {
	ppu.mutation.ClearCreatedByUserLogin()
	return ppu
}

// SetLastModifiedDate sets the "last_modified_date" field.
func (ppu *ProductPriceUpdate) SetLastModifiedDate(t time.Time) *ProductPriceUpdate {
	ppu.mutation.SetLastModifiedDate(t)
	return ppu
}

// SetNillableLastModifiedDate sets the "last_modified_date" field if the given value is not nil.
func (ppu *ProductPriceUpdate) SetNillableLastModifiedDate(t *time.Time) *ProductPriceUpdate {
	if t != nil {
		ppu.SetLastModifiedDate(*t)
	}
	return ppu
}

// ClearLastModifiedDate clears the value of the "last_modified_date" field.
func (ppu *ProductPriceUpdate) ClearLastModifiedDate() *ProductPriceUpdate {
	ppu.mutation.ClearLastModifiedDate()
	return ppu
}

// SetLastModifiedByUserLogin sets the "last_modified_by_user_login" field.
func (ppu *ProductPriceUpdate) SetLastModifiedByUserLogin(s string) *ProductPriceUpdate {
	ppu.mutation.SetLastModifiedByUserLogin(s)
	return ppu
}

// SetNillableLastModifiedByUserLogin sets the "last_modified_by_user_login" field if the given value is not nil.
func (ppu *ProductPriceUpdate) SetNillableLastModifiedByUserLogin(s *string) *ProductPriceUpdate {
	if s != nil {
		ppu.SetLastModifiedByUserLogin(*s)
	}
	return ppu
}

// ClearLastModifiedByUserLogin clears the value of the "last_modified_by_user_login" field.
func (ppu *ProductPriceUpdate) ClearLastModifiedByUserLogin() *ProductPriceUpdate {
	ppu.mutation.ClearLastModifiedByUserLogin()
	return ppu
}

// SetProductID sets the "product" edge to the Product entity by ID.
func (ppu *ProductPriceUpdate) SetProductID(id int) *ProductPriceUpdate {
	ppu.mutation.SetProductID(id)
	return ppu
}

// SetNillableProductID sets the "product" edge to the Product entity by ID if the given value is not nil.
func (ppu *ProductPriceUpdate) SetNillableProductID(id *int) *ProductPriceUpdate {
	if id != nil {
		ppu = ppu.SetProductID(*id)
	}
	return ppu
}

// SetProduct sets the "product" edge to the Product entity.
func (ppu *ProductPriceUpdate) SetProduct(p *Product) *ProductPriceUpdate {
	return ppu.SetProductID(p.ID)
}

// SetProductPriceTypeID sets the "product_price_type" edge to the ProductPriceType entity by ID.
func (ppu *ProductPriceUpdate) SetProductPriceTypeID(id int) *ProductPriceUpdate {
	ppu.mutation.SetProductPriceTypeID(id)
	return ppu
}

// SetNillableProductPriceTypeID sets the "product_price_type" edge to the ProductPriceType entity by ID if the given value is not nil.
func (ppu *ProductPriceUpdate) SetNillableProductPriceTypeID(id *int) *ProductPriceUpdate {
	if id != nil {
		ppu = ppu.SetProductPriceTypeID(*id)
	}
	return ppu
}

// SetProductPriceType sets the "product_price_type" edge to the ProductPriceType entity.
func (ppu *ProductPriceUpdate) SetProductPriceType(p *ProductPriceType) *ProductPriceUpdate {
	return ppu.SetProductPriceTypeID(p.ID)
}

// SetProductPricePurposeID sets the "product_price_purpose" edge to the ProductPricePurpose entity by ID.
func (ppu *ProductPriceUpdate) SetProductPricePurposeID(id int) *ProductPriceUpdate {
	ppu.mutation.SetProductPricePurposeID(id)
	return ppu
}

// SetNillableProductPricePurposeID sets the "product_price_purpose" edge to the ProductPricePurpose entity by ID if the given value is not nil.
func (ppu *ProductPriceUpdate) SetNillableProductPricePurposeID(id *int) *ProductPriceUpdate {
	if id != nil {
		ppu = ppu.SetProductPricePurposeID(*id)
	}
	return ppu
}

// SetProductPricePurpose sets the "product_price_purpose" edge to the ProductPricePurpose entity.
func (ppu *ProductPriceUpdate) SetProductPricePurpose(p *ProductPricePurpose) *ProductPriceUpdate {
	return ppu.SetProductPricePurposeID(p.ID)
}

// SetProductStoreGroupID sets the "product_store_group" edge to the ProductStoreGroup entity by ID.
func (ppu *ProductPriceUpdate) SetProductStoreGroupID(id int) *ProductPriceUpdate {
	ppu.mutation.SetProductStoreGroupID(id)
	return ppu
}

// SetNillableProductStoreGroupID sets the "product_store_group" edge to the ProductStoreGroup entity by ID if the given value is not nil.
func (ppu *ProductPriceUpdate) SetNillableProductStoreGroupID(id *int) *ProductPriceUpdate {
	if id != nil {
		ppu = ppu.SetProductStoreGroupID(*id)
	}
	return ppu
}

// SetProductStoreGroup sets the "product_store_group" edge to the ProductStoreGroup entity.
func (ppu *ProductPriceUpdate) SetProductStoreGroup(p *ProductStoreGroup) *ProductPriceUpdate {
	return ppu.SetProductStoreGroupID(p.ID)
}

// SetCustomMethodID sets the "custom_method" edge to the CustomMethod entity by ID.
func (ppu *ProductPriceUpdate) SetCustomMethodID(id int) *ProductPriceUpdate {
	ppu.mutation.SetCustomMethodID(id)
	return ppu
}

// SetNillableCustomMethodID sets the "custom_method" edge to the CustomMethod entity by ID if the given value is not nil.
func (ppu *ProductPriceUpdate) SetNillableCustomMethodID(id *int) *ProductPriceUpdate {
	if id != nil {
		ppu = ppu.SetCustomMethodID(*id)
	}
	return ppu
}

// SetCustomMethod sets the "custom_method" edge to the CustomMethod entity.
func (ppu *ProductPriceUpdate) SetCustomMethod(c *CustomMethod) *ProductPriceUpdate {
	return ppu.SetCustomMethodID(c.ID)
}

// Mutation returns the ProductPriceMutation object of the builder.
func (ppu *ProductPriceUpdate) Mutation() *ProductPriceMutation {
	return ppu.mutation
}

// ClearProduct clears the "product" edge to the Product entity.
func (ppu *ProductPriceUpdate) ClearProduct() *ProductPriceUpdate {
	ppu.mutation.ClearProduct()
	return ppu
}

// ClearProductPriceType clears the "product_price_type" edge to the ProductPriceType entity.
func (ppu *ProductPriceUpdate) ClearProductPriceType() *ProductPriceUpdate {
	ppu.mutation.ClearProductPriceType()
	return ppu
}

// ClearProductPricePurpose clears the "product_price_purpose" edge to the ProductPricePurpose entity.
func (ppu *ProductPriceUpdate) ClearProductPricePurpose() *ProductPriceUpdate {
	ppu.mutation.ClearProductPricePurpose()
	return ppu
}

// ClearProductStoreGroup clears the "product_store_group" edge to the ProductStoreGroup entity.
func (ppu *ProductPriceUpdate) ClearProductStoreGroup() *ProductPriceUpdate {
	ppu.mutation.ClearProductStoreGroup()
	return ppu
}

// ClearCustomMethod clears the "custom_method" edge to the CustomMethod entity.
func (ppu *ProductPriceUpdate) ClearCustomMethod() *ProductPriceUpdate {
	ppu.mutation.ClearCustomMethod()
	return ppu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ppu *ProductPriceUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	ppu.defaults()
	if len(ppu.hooks) == 0 {
		if err = ppu.check(); err != nil {
			return 0, err
		}
		affected, err = ppu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProductPriceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ppu.check(); err != nil {
				return 0, err
			}
			ppu.mutation = mutation
			affected, err = ppu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ppu.hooks) - 1; i >= 0; i-- {
			mut = ppu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ppu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ppu *ProductPriceUpdate) SaveX(ctx context.Context) int {
	affected, err := ppu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ppu *ProductPriceUpdate) Exec(ctx context.Context) error {
	_, err := ppu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ppu *ProductPriceUpdate) ExecX(ctx context.Context) {
	if err := ppu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ppu *ProductPriceUpdate) defaults() {
	if _, ok := ppu.mutation.UpdateTime(); !ok {
		v := productprice.UpdateDefaultUpdateTime()
		ppu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ppu *ProductPriceUpdate) check() error {
	if v, ok := ppu.mutation.TaxInPrice(); ok {
		if err := productprice.TaxInPriceValidator(v); err != nil {
			return &ValidationError{Name: "tax_in_price", err: fmt.Errorf("ent: validator failed for field \"tax_in_price\": %w", err)}
		}
	}
	return nil
}

func (ppu *ProductPriceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   productprice.Table,
			Columns: productprice.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: productprice.FieldID,
			},
		},
	}
	if ps := ppu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ppu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productprice.FieldUpdateTime,
		})
	}
	if value, ok := ppu.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productprice.FieldStringRef,
		})
	}
	if ppu.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productprice.FieldStringRef,
		})
	}
	if value, ok := ppu.mutation.CurrencyUomID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productprice.FieldCurrencyUomID,
		})
	}
	if value, ok := ppu.mutation.AddedCurrencyUomID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productprice.FieldCurrencyUomID,
		})
	}
	if value, ok := ppu.mutation.FromDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productprice.FieldFromDate,
		})
	}
	if value, ok := ppu.mutation.ThruDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productprice.FieldThruDate,
		})
	}
	if ppu.mutation.ThruDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: productprice.FieldThruDate,
		})
	}
	if value, ok := ppu.mutation.Price(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: productprice.FieldPrice,
		})
	}
	if value, ok := ppu.mutation.AddedPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: productprice.FieldPrice,
		})
	}
	if ppu.mutation.PriceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: productprice.FieldPrice,
		})
	}
	if value, ok := ppu.mutation.TermUomID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productprice.FieldTermUomID,
		})
	}
	if value, ok := ppu.mutation.AddedTermUomID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productprice.FieldTermUomID,
		})
	}
	if ppu.mutation.TermUomIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: productprice.FieldTermUomID,
		})
	}
	if value, ok := ppu.mutation.PriceWithoutTax(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: productprice.FieldPriceWithoutTax,
		})
	}
	if value, ok := ppu.mutation.AddedPriceWithoutTax(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: productprice.FieldPriceWithoutTax,
		})
	}
	if ppu.mutation.PriceWithoutTaxCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: productprice.FieldPriceWithoutTax,
		})
	}
	if value, ok := ppu.mutation.PriceWithTax(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: productprice.FieldPriceWithTax,
		})
	}
	if value, ok := ppu.mutation.AddedPriceWithTax(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: productprice.FieldPriceWithTax,
		})
	}
	if ppu.mutation.PriceWithTaxCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: productprice.FieldPriceWithTax,
		})
	}
	if value, ok := ppu.mutation.TaxAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: productprice.FieldTaxAmount,
		})
	}
	if value, ok := ppu.mutation.AddedTaxAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: productprice.FieldTaxAmount,
		})
	}
	if ppu.mutation.TaxAmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: productprice.FieldTaxAmount,
		})
	}
	if value, ok := ppu.mutation.TaxPercentage(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: productprice.FieldTaxPercentage,
		})
	}
	if value, ok := ppu.mutation.AddedTaxPercentage(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: productprice.FieldTaxPercentage,
		})
	}
	if ppu.mutation.TaxPercentageCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: productprice.FieldTaxPercentage,
		})
	}
	if value, ok := ppu.mutation.TaxAuthPartyID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productprice.FieldTaxAuthPartyID,
		})
	}
	if value, ok := ppu.mutation.AddedTaxAuthPartyID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productprice.FieldTaxAuthPartyID,
		})
	}
	if ppu.mutation.TaxAuthPartyIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: productprice.FieldTaxAuthPartyID,
		})
	}
	if value, ok := ppu.mutation.TaxAuthGeoID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productprice.FieldTaxAuthGeoID,
		})
	}
	if value, ok := ppu.mutation.AddedTaxAuthGeoID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productprice.FieldTaxAuthGeoID,
		})
	}
	if ppu.mutation.TaxAuthGeoIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: productprice.FieldTaxAuthGeoID,
		})
	}
	if value, ok := ppu.mutation.TaxInPrice(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productprice.FieldTaxInPrice,
		})
	}
	if ppu.mutation.TaxInPriceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productprice.FieldTaxInPrice,
		})
	}
	if value, ok := ppu.mutation.CreatedDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productprice.FieldCreatedDate,
		})
	}
	if ppu.mutation.CreatedDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: productprice.FieldCreatedDate,
		})
	}
	if value, ok := ppu.mutation.CreatedByUserLogin(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productprice.FieldCreatedByUserLogin,
		})
	}
	if ppu.mutation.CreatedByUserLoginCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productprice.FieldCreatedByUserLogin,
		})
	}
	if value, ok := ppu.mutation.LastModifiedDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productprice.FieldLastModifiedDate,
		})
	}
	if ppu.mutation.LastModifiedDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: productprice.FieldLastModifiedDate,
		})
	}
	if value, ok := ppu.mutation.LastModifiedByUserLogin(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productprice.FieldLastModifiedByUserLogin,
		})
	}
	if ppu.mutation.LastModifiedByUserLoginCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productprice.FieldLastModifiedByUserLogin,
		})
	}
	if ppu.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productprice.ProductTable,
			Columns: []string{productprice.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ppu.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productprice.ProductTable,
			Columns: []string{productprice.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ppu.mutation.ProductPriceTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productprice.ProductPriceTypeTable,
			Columns: []string{productprice.ProductPriceTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productpricetype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ppu.mutation.ProductPriceTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productprice.ProductPriceTypeTable,
			Columns: []string{productprice.ProductPriceTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productpricetype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ppu.mutation.ProductPricePurposeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productprice.ProductPricePurposeTable,
			Columns: []string{productprice.ProductPricePurposeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productpricepurpose.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ppu.mutation.ProductPricePurposeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productprice.ProductPricePurposeTable,
			Columns: []string{productprice.ProductPricePurposeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productpricepurpose.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ppu.mutation.ProductStoreGroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productprice.ProductStoreGroupTable,
			Columns: []string{productprice.ProductStoreGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productstoregroup.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ppu.mutation.ProductStoreGroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productprice.ProductStoreGroupTable,
			Columns: []string{productprice.ProductStoreGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productstoregroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ppu.mutation.CustomMethodCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productprice.CustomMethodTable,
			Columns: []string{productprice.CustomMethodColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: custommethod.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ppu.mutation.CustomMethodIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productprice.CustomMethodTable,
			Columns: []string{productprice.CustomMethodColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: custommethod.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ppu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productprice.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ProductPriceUpdateOne is the builder for updating a single ProductPrice entity.
type ProductPriceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProductPriceMutation
}

// SetStringRef sets the "string_ref" field.
func (ppuo *ProductPriceUpdateOne) SetStringRef(s string) *ProductPriceUpdateOne {
	ppuo.mutation.SetStringRef(s)
	return ppuo
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (ppuo *ProductPriceUpdateOne) SetNillableStringRef(s *string) *ProductPriceUpdateOne {
	if s != nil {
		ppuo.SetStringRef(*s)
	}
	return ppuo
}

// ClearStringRef clears the value of the "string_ref" field.
func (ppuo *ProductPriceUpdateOne) ClearStringRef() *ProductPriceUpdateOne {
	ppuo.mutation.ClearStringRef()
	return ppuo
}

// SetCurrencyUomID sets the "currency_uom_id" field.
func (ppuo *ProductPriceUpdateOne) SetCurrencyUomID(i int) *ProductPriceUpdateOne {
	ppuo.mutation.ResetCurrencyUomID()
	ppuo.mutation.SetCurrencyUomID(i)
	return ppuo
}

// AddCurrencyUomID adds i to the "currency_uom_id" field.
func (ppuo *ProductPriceUpdateOne) AddCurrencyUomID(i int) *ProductPriceUpdateOne {
	ppuo.mutation.AddCurrencyUomID(i)
	return ppuo
}

// SetFromDate sets the "from_date" field.
func (ppuo *ProductPriceUpdateOne) SetFromDate(t time.Time) *ProductPriceUpdateOne {
	ppuo.mutation.SetFromDate(t)
	return ppuo
}

// SetNillableFromDate sets the "from_date" field if the given value is not nil.
func (ppuo *ProductPriceUpdateOne) SetNillableFromDate(t *time.Time) *ProductPriceUpdateOne {
	if t != nil {
		ppuo.SetFromDate(*t)
	}
	return ppuo
}

// SetThruDate sets the "thru_date" field.
func (ppuo *ProductPriceUpdateOne) SetThruDate(t time.Time) *ProductPriceUpdateOne {
	ppuo.mutation.SetThruDate(t)
	return ppuo
}

// SetNillableThruDate sets the "thru_date" field if the given value is not nil.
func (ppuo *ProductPriceUpdateOne) SetNillableThruDate(t *time.Time) *ProductPriceUpdateOne {
	if t != nil {
		ppuo.SetThruDate(*t)
	}
	return ppuo
}

// ClearThruDate clears the value of the "thru_date" field.
func (ppuo *ProductPriceUpdateOne) ClearThruDate() *ProductPriceUpdateOne {
	ppuo.mutation.ClearThruDate()
	return ppuo
}

// SetPrice sets the "price" field.
func (ppuo *ProductPriceUpdateOne) SetPrice(f float64) *ProductPriceUpdateOne {
	ppuo.mutation.ResetPrice()
	ppuo.mutation.SetPrice(f)
	return ppuo
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (ppuo *ProductPriceUpdateOne) SetNillablePrice(f *float64) *ProductPriceUpdateOne {
	if f != nil {
		ppuo.SetPrice(*f)
	}
	return ppuo
}

// AddPrice adds f to the "price" field.
func (ppuo *ProductPriceUpdateOne) AddPrice(f float64) *ProductPriceUpdateOne {
	ppuo.mutation.AddPrice(f)
	return ppuo
}

// ClearPrice clears the value of the "price" field.
func (ppuo *ProductPriceUpdateOne) ClearPrice() *ProductPriceUpdateOne {
	ppuo.mutation.ClearPrice()
	return ppuo
}

// SetTermUomID sets the "term_uom_id" field.
func (ppuo *ProductPriceUpdateOne) SetTermUomID(i int) *ProductPriceUpdateOne {
	ppuo.mutation.ResetTermUomID()
	ppuo.mutation.SetTermUomID(i)
	return ppuo
}

// SetNillableTermUomID sets the "term_uom_id" field if the given value is not nil.
func (ppuo *ProductPriceUpdateOne) SetNillableTermUomID(i *int) *ProductPriceUpdateOne {
	if i != nil {
		ppuo.SetTermUomID(*i)
	}
	return ppuo
}

// AddTermUomID adds i to the "term_uom_id" field.
func (ppuo *ProductPriceUpdateOne) AddTermUomID(i int) *ProductPriceUpdateOne {
	ppuo.mutation.AddTermUomID(i)
	return ppuo
}

// ClearTermUomID clears the value of the "term_uom_id" field.
func (ppuo *ProductPriceUpdateOne) ClearTermUomID() *ProductPriceUpdateOne {
	ppuo.mutation.ClearTermUomID()
	return ppuo
}

// SetPriceWithoutTax sets the "price_without_tax" field.
func (ppuo *ProductPriceUpdateOne) SetPriceWithoutTax(f float64) *ProductPriceUpdateOne {
	ppuo.mutation.ResetPriceWithoutTax()
	ppuo.mutation.SetPriceWithoutTax(f)
	return ppuo
}

// SetNillablePriceWithoutTax sets the "price_without_tax" field if the given value is not nil.
func (ppuo *ProductPriceUpdateOne) SetNillablePriceWithoutTax(f *float64) *ProductPriceUpdateOne {
	if f != nil {
		ppuo.SetPriceWithoutTax(*f)
	}
	return ppuo
}

// AddPriceWithoutTax adds f to the "price_without_tax" field.
func (ppuo *ProductPriceUpdateOne) AddPriceWithoutTax(f float64) *ProductPriceUpdateOne {
	ppuo.mutation.AddPriceWithoutTax(f)
	return ppuo
}

// ClearPriceWithoutTax clears the value of the "price_without_tax" field.
func (ppuo *ProductPriceUpdateOne) ClearPriceWithoutTax() *ProductPriceUpdateOne {
	ppuo.mutation.ClearPriceWithoutTax()
	return ppuo
}

// SetPriceWithTax sets the "price_with_tax" field.
func (ppuo *ProductPriceUpdateOne) SetPriceWithTax(f float64) *ProductPriceUpdateOne {
	ppuo.mutation.ResetPriceWithTax()
	ppuo.mutation.SetPriceWithTax(f)
	return ppuo
}

// SetNillablePriceWithTax sets the "price_with_tax" field if the given value is not nil.
func (ppuo *ProductPriceUpdateOne) SetNillablePriceWithTax(f *float64) *ProductPriceUpdateOne {
	if f != nil {
		ppuo.SetPriceWithTax(*f)
	}
	return ppuo
}

// AddPriceWithTax adds f to the "price_with_tax" field.
func (ppuo *ProductPriceUpdateOne) AddPriceWithTax(f float64) *ProductPriceUpdateOne {
	ppuo.mutation.AddPriceWithTax(f)
	return ppuo
}

// ClearPriceWithTax clears the value of the "price_with_tax" field.
func (ppuo *ProductPriceUpdateOne) ClearPriceWithTax() *ProductPriceUpdateOne {
	ppuo.mutation.ClearPriceWithTax()
	return ppuo
}

// SetTaxAmount sets the "tax_amount" field.
func (ppuo *ProductPriceUpdateOne) SetTaxAmount(f float64) *ProductPriceUpdateOne {
	ppuo.mutation.ResetTaxAmount()
	ppuo.mutation.SetTaxAmount(f)
	return ppuo
}

// SetNillableTaxAmount sets the "tax_amount" field if the given value is not nil.
func (ppuo *ProductPriceUpdateOne) SetNillableTaxAmount(f *float64) *ProductPriceUpdateOne {
	if f != nil {
		ppuo.SetTaxAmount(*f)
	}
	return ppuo
}

// AddTaxAmount adds f to the "tax_amount" field.
func (ppuo *ProductPriceUpdateOne) AddTaxAmount(f float64) *ProductPriceUpdateOne {
	ppuo.mutation.AddTaxAmount(f)
	return ppuo
}

// ClearTaxAmount clears the value of the "tax_amount" field.
func (ppuo *ProductPriceUpdateOne) ClearTaxAmount() *ProductPriceUpdateOne {
	ppuo.mutation.ClearTaxAmount()
	return ppuo
}

// SetTaxPercentage sets the "tax_percentage" field.
func (ppuo *ProductPriceUpdateOne) SetTaxPercentage(f float64) *ProductPriceUpdateOne {
	ppuo.mutation.ResetTaxPercentage()
	ppuo.mutation.SetTaxPercentage(f)
	return ppuo
}

// SetNillableTaxPercentage sets the "tax_percentage" field if the given value is not nil.
func (ppuo *ProductPriceUpdateOne) SetNillableTaxPercentage(f *float64) *ProductPriceUpdateOne {
	if f != nil {
		ppuo.SetTaxPercentage(*f)
	}
	return ppuo
}

// AddTaxPercentage adds f to the "tax_percentage" field.
func (ppuo *ProductPriceUpdateOne) AddTaxPercentage(f float64) *ProductPriceUpdateOne {
	ppuo.mutation.AddTaxPercentage(f)
	return ppuo
}

// ClearTaxPercentage clears the value of the "tax_percentage" field.
func (ppuo *ProductPriceUpdateOne) ClearTaxPercentage() *ProductPriceUpdateOne {
	ppuo.mutation.ClearTaxPercentage()
	return ppuo
}

// SetTaxAuthPartyID sets the "tax_auth_party_id" field.
func (ppuo *ProductPriceUpdateOne) SetTaxAuthPartyID(i int) *ProductPriceUpdateOne {
	ppuo.mutation.ResetTaxAuthPartyID()
	ppuo.mutation.SetTaxAuthPartyID(i)
	return ppuo
}

// SetNillableTaxAuthPartyID sets the "tax_auth_party_id" field if the given value is not nil.
func (ppuo *ProductPriceUpdateOne) SetNillableTaxAuthPartyID(i *int) *ProductPriceUpdateOne {
	if i != nil {
		ppuo.SetTaxAuthPartyID(*i)
	}
	return ppuo
}

// AddTaxAuthPartyID adds i to the "tax_auth_party_id" field.
func (ppuo *ProductPriceUpdateOne) AddTaxAuthPartyID(i int) *ProductPriceUpdateOne {
	ppuo.mutation.AddTaxAuthPartyID(i)
	return ppuo
}

// ClearTaxAuthPartyID clears the value of the "tax_auth_party_id" field.
func (ppuo *ProductPriceUpdateOne) ClearTaxAuthPartyID() *ProductPriceUpdateOne {
	ppuo.mutation.ClearTaxAuthPartyID()
	return ppuo
}

// SetTaxAuthGeoID sets the "tax_auth_geo_id" field.
func (ppuo *ProductPriceUpdateOne) SetTaxAuthGeoID(i int) *ProductPriceUpdateOne {
	ppuo.mutation.ResetTaxAuthGeoID()
	ppuo.mutation.SetTaxAuthGeoID(i)
	return ppuo
}

// SetNillableTaxAuthGeoID sets the "tax_auth_geo_id" field if the given value is not nil.
func (ppuo *ProductPriceUpdateOne) SetNillableTaxAuthGeoID(i *int) *ProductPriceUpdateOne {
	if i != nil {
		ppuo.SetTaxAuthGeoID(*i)
	}
	return ppuo
}

// AddTaxAuthGeoID adds i to the "tax_auth_geo_id" field.
func (ppuo *ProductPriceUpdateOne) AddTaxAuthGeoID(i int) *ProductPriceUpdateOne {
	ppuo.mutation.AddTaxAuthGeoID(i)
	return ppuo
}

// ClearTaxAuthGeoID clears the value of the "tax_auth_geo_id" field.
func (ppuo *ProductPriceUpdateOne) ClearTaxAuthGeoID() *ProductPriceUpdateOne {
	ppuo.mutation.ClearTaxAuthGeoID()
	return ppuo
}

// SetTaxInPrice sets the "tax_in_price" field.
func (ppuo *ProductPriceUpdateOne) SetTaxInPrice(pip productprice.TaxInPrice) *ProductPriceUpdateOne {
	ppuo.mutation.SetTaxInPrice(pip)
	return ppuo
}

// SetNillableTaxInPrice sets the "tax_in_price" field if the given value is not nil.
func (ppuo *ProductPriceUpdateOne) SetNillableTaxInPrice(pip *productprice.TaxInPrice) *ProductPriceUpdateOne {
	if pip != nil {
		ppuo.SetTaxInPrice(*pip)
	}
	return ppuo
}

// ClearTaxInPrice clears the value of the "tax_in_price" field.
func (ppuo *ProductPriceUpdateOne) ClearTaxInPrice() *ProductPriceUpdateOne {
	ppuo.mutation.ClearTaxInPrice()
	return ppuo
}

// SetCreatedDate sets the "created_date" field.
func (ppuo *ProductPriceUpdateOne) SetCreatedDate(t time.Time) *ProductPriceUpdateOne {
	ppuo.mutation.SetCreatedDate(t)
	return ppuo
}

// SetNillableCreatedDate sets the "created_date" field if the given value is not nil.
func (ppuo *ProductPriceUpdateOne) SetNillableCreatedDate(t *time.Time) *ProductPriceUpdateOne {
	if t != nil {
		ppuo.SetCreatedDate(*t)
	}
	return ppuo
}

// ClearCreatedDate clears the value of the "created_date" field.
func (ppuo *ProductPriceUpdateOne) ClearCreatedDate() *ProductPriceUpdateOne {
	ppuo.mutation.ClearCreatedDate()
	return ppuo
}

// SetCreatedByUserLogin sets the "created_by_user_login" field.
func (ppuo *ProductPriceUpdateOne) SetCreatedByUserLogin(s string) *ProductPriceUpdateOne {
	ppuo.mutation.SetCreatedByUserLogin(s)
	return ppuo
}

// SetNillableCreatedByUserLogin sets the "created_by_user_login" field if the given value is not nil.
func (ppuo *ProductPriceUpdateOne) SetNillableCreatedByUserLogin(s *string) *ProductPriceUpdateOne {
	if s != nil {
		ppuo.SetCreatedByUserLogin(*s)
	}
	return ppuo
}

// ClearCreatedByUserLogin clears the value of the "created_by_user_login" field.
func (ppuo *ProductPriceUpdateOne) ClearCreatedByUserLogin() *ProductPriceUpdateOne {
	ppuo.mutation.ClearCreatedByUserLogin()
	return ppuo
}

// SetLastModifiedDate sets the "last_modified_date" field.
func (ppuo *ProductPriceUpdateOne) SetLastModifiedDate(t time.Time) *ProductPriceUpdateOne {
	ppuo.mutation.SetLastModifiedDate(t)
	return ppuo
}

// SetNillableLastModifiedDate sets the "last_modified_date" field if the given value is not nil.
func (ppuo *ProductPriceUpdateOne) SetNillableLastModifiedDate(t *time.Time) *ProductPriceUpdateOne {
	if t != nil {
		ppuo.SetLastModifiedDate(*t)
	}
	return ppuo
}

// ClearLastModifiedDate clears the value of the "last_modified_date" field.
func (ppuo *ProductPriceUpdateOne) ClearLastModifiedDate() *ProductPriceUpdateOne {
	ppuo.mutation.ClearLastModifiedDate()
	return ppuo
}

// SetLastModifiedByUserLogin sets the "last_modified_by_user_login" field.
func (ppuo *ProductPriceUpdateOne) SetLastModifiedByUserLogin(s string) *ProductPriceUpdateOne {
	ppuo.mutation.SetLastModifiedByUserLogin(s)
	return ppuo
}

// SetNillableLastModifiedByUserLogin sets the "last_modified_by_user_login" field if the given value is not nil.
func (ppuo *ProductPriceUpdateOne) SetNillableLastModifiedByUserLogin(s *string) *ProductPriceUpdateOne {
	if s != nil {
		ppuo.SetLastModifiedByUserLogin(*s)
	}
	return ppuo
}

// ClearLastModifiedByUserLogin clears the value of the "last_modified_by_user_login" field.
func (ppuo *ProductPriceUpdateOne) ClearLastModifiedByUserLogin() *ProductPriceUpdateOne {
	ppuo.mutation.ClearLastModifiedByUserLogin()
	return ppuo
}

// SetProductID sets the "product" edge to the Product entity by ID.
func (ppuo *ProductPriceUpdateOne) SetProductID(id int) *ProductPriceUpdateOne {
	ppuo.mutation.SetProductID(id)
	return ppuo
}

// SetNillableProductID sets the "product" edge to the Product entity by ID if the given value is not nil.
func (ppuo *ProductPriceUpdateOne) SetNillableProductID(id *int) *ProductPriceUpdateOne {
	if id != nil {
		ppuo = ppuo.SetProductID(*id)
	}
	return ppuo
}

// SetProduct sets the "product" edge to the Product entity.
func (ppuo *ProductPriceUpdateOne) SetProduct(p *Product) *ProductPriceUpdateOne {
	return ppuo.SetProductID(p.ID)
}

// SetProductPriceTypeID sets the "product_price_type" edge to the ProductPriceType entity by ID.
func (ppuo *ProductPriceUpdateOne) SetProductPriceTypeID(id int) *ProductPriceUpdateOne {
	ppuo.mutation.SetProductPriceTypeID(id)
	return ppuo
}

// SetNillableProductPriceTypeID sets the "product_price_type" edge to the ProductPriceType entity by ID if the given value is not nil.
func (ppuo *ProductPriceUpdateOne) SetNillableProductPriceTypeID(id *int) *ProductPriceUpdateOne {
	if id != nil {
		ppuo = ppuo.SetProductPriceTypeID(*id)
	}
	return ppuo
}

// SetProductPriceType sets the "product_price_type" edge to the ProductPriceType entity.
func (ppuo *ProductPriceUpdateOne) SetProductPriceType(p *ProductPriceType) *ProductPriceUpdateOne {
	return ppuo.SetProductPriceTypeID(p.ID)
}

// SetProductPricePurposeID sets the "product_price_purpose" edge to the ProductPricePurpose entity by ID.
func (ppuo *ProductPriceUpdateOne) SetProductPricePurposeID(id int) *ProductPriceUpdateOne {
	ppuo.mutation.SetProductPricePurposeID(id)
	return ppuo
}

// SetNillableProductPricePurposeID sets the "product_price_purpose" edge to the ProductPricePurpose entity by ID if the given value is not nil.
func (ppuo *ProductPriceUpdateOne) SetNillableProductPricePurposeID(id *int) *ProductPriceUpdateOne {
	if id != nil {
		ppuo = ppuo.SetProductPricePurposeID(*id)
	}
	return ppuo
}

// SetProductPricePurpose sets the "product_price_purpose" edge to the ProductPricePurpose entity.
func (ppuo *ProductPriceUpdateOne) SetProductPricePurpose(p *ProductPricePurpose) *ProductPriceUpdateOne {
	return ppuo.SetProductPricePurposeID(p.ID)
}

// SetProductStoreGroupID sets the "product_store_group" edge to the ProductStoreGroup entity by ID.
func (ppuo *ProductPriceUpdateOne) SetProductStoreGroupID(id int) *ProductPriceUpdateOne {
	ppuo.mutation.SetProductStoreGroupID(id)
	return ppuo
}

// SetNillableProductStoreGroupID sets the "product_store_group" edge to the ProductStoreGroup entity by ID if the given value is not nil.
func (ppuo *ProductPriceUpdateOne) SetNillableProductStoreGroupID(id *int) *ProductPriceUpdateOne {
	if id != nil {
		ppuo = ppuo.SetProductStoreGroupID(*id)
	}
	return ppuo
}

// SetProductStoreGroup sets the "product_store_group" edge to the ProductStoreGroup entity.
func (ppuo *ProductPriceUpdateOne) SetProductStoreGroup(p *ProductStoreGroup) *ProductPriceUpdateOne {
	return ppuo.SetProductStoreGroupID(p.ID)
}

// SetCustomMethodID sets the "custom_method" edge to the CustomMethod entity by ID.
func (ppuo *ProductPriceUpdateOne) SetCustomMethodID(id int) *ProductPriceUpdateOne {
	ppuo.mutation.SetCustomMethodID(id)
	return ppuo
}

// SetNillableCustomMethodID sets the "custom_method" edge to the CustomMethod entity by ID if the given value is not nil.
func (ppuo *ProductPriceUpdateOne) SetNillableCustomMethodID(id *int) *ProductPriceUpdateOne {
	if id != nil {
		ppuo = ppuo.SetCustomMethodID(*id)
	}
	return ppuo
}

// SetCustomMethod sets the "custom_method" edge to the CustomMethod entity.
func (ppuo *ProductPriceUpdateOne) SetCustomMethod(c *CustomMethod) *ProductPriceUpdateOne {
	return ppuo.SetCustomMethodID(c.ID)
}

// Mutation returns the ProductPriceMutation object of the builder.
func (ppuo *ProductPriceUpdateOne) Mutation() *ProductPriceMutation {
	return ppuo.mutation
}

// ClearProduct clears the "product" edge to the Product entity.
func (ppuo *ProductPriceUpdateOne) ClearProduct() *ProductPriceUpdateOne {
	ppuo.mutation.ClearProduct()
	return ppuo
}

// ClearProductPriceType clears the "product_price_type" edge to the ProductPriceType entity.
func (ppuo *ProductPriceUpdateOne) ClearProductPriceType() *ProductPriceUpdateOne {
	ppuo.mutation.ClearProductPriceType()
	return ppuo
}

// ClearProductPricePurpose clears the "product_price_purpose" edge to the ProductPricePurpose entity.
func (ppuo *ProductPriceUpdateOne) ClearProductPricePurpose() *ProductPriceUpdateOne {
	ppuo.mutation.ClearProductPricePurpose()
	return ppuo
}

// ClearProductStoreGroup clears the "product_store_group" edge to the ProductStoreGroup entity.
func (ppuo *ProductPriceUpdateOne) ClearProductStoreGroup() *ProductPriceUpdateOne {
	ppuo.mutation.ClearProductStoreGroup()
	return ppuo
}

// ClearCustomMethod clears the "custom_method" edge to the CustomMethod entity.
func (ppuo *ProductPriceUpdateOne) ClearCustomMethod() *ProductPriceUpdateOne {
	ppuo.mutation.ClearCustomMethod()
	return ppuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ppuo *ProductPriceUpdateOne) Select(field string, fields ...string) *ProductPriceUpdateOne {
	ppuo.fields = append([]string{field}, fields...)
	return ppuo
}

// Save executes the query and returns the updated ProductPrice entity.
func (ppuo *ProductPriceUpdateOne) Save(ctx context.Context) (*ProductPrice, error) {
	var (
		err  error
		node *ProductPrice
	)
	ppuo.defaults()
	if len(ppuo.hooks) == 0 {
		if err = ppuo.check(); err != nil {
			return nil, err
		}
		node, err = ppuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProductPriceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ppuo.check(); err != nil {
				return nil, err
			}
			ppuo.mutation = mutation
			node, err = ppuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ppuo.hooks) - 1; i >= 0; i-- {
			mut = ppuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ppuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ppuo *ProductPriceUpdateOne) SaveX(ctx context.Context) *ProductPrice {
	node, err := ppuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ppuo *ProductPriceUpdateOne) Exec(ctx context.Context) error {
	_, err := ppuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ppuo *ProductPriceUpdateOne) ExecX(ctx context.Context) {
	if err := ppuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ppuo *ProductPriceUpdateOne) defaults() {
	if _, ok := ppuo.mutation.UpdateTime(); !ok {
		v := productprice.UpdateDefaultUpdateTime()
		ppuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ppuo *ProductPriceUpdateOne) check() error {
	if v, ok := ppuo.mutation.TaxInPrice(); ok {
		if err := productprice.TaxInPriceValidator(v); err != nil {
			return &ValidationError{Name: "tax_in_price", err: fmt.Errorf("ent: validator failed for field \"tax_in_price\": %w", err)}
		}
	}
	return nil
}

func (ppuo *ProductPriceUpdateOne) sqlSave(ctx context.Context) (_node *ProductPrice, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   productprice.Table,
			Columns: productprice.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: productprice.FieldID,
			},
		},
	}
	id, ok := ppuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ProductPrice.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := ppuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, productprice.FieldID)
		for _, f := range fields {
			if !productprice.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != productprice.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ppuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ppuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productprice.FieldUpdateTime,
		})
	}
	if value, ok := ppuo.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productprice.FieldStringRef,
		})
	}
	if ppuo.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productprice.FieldStringRef,
		})
	}
	if value, ok := ppuo.mutation.CurrencyUomID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productprice.FieldCurrencyUomID,
		})
	}
	if value, ok := ppuo.mutation.AddedCurrencyUomID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productprice.FieldCurrencyUomID,
		})
	}
	if value, ok := ppuo.mutation.FromDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productprice.FieldFromDate,
		})
	}
	if value, ok := ppuo.mutation.ThruDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productprice.FieldThruDate,
		})
	}
	if ppuo.mutation.ThruDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: productprice.FieldThruDate,
		})
	}
	if value, ok := ppuo.mutation.Price(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: productprice.FieldPrice,
		})
	}
	if value, ok := ppuo.mutation.AddedPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: productprice.FieldPrice,
		})
	}
	if ppuo.mutation.PriceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: productprice.FieldPrice,
		})
	}
	if value, ok := ppuo.mutation.TermUomID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productprice.FieldTermUomID,
		})
	}
	if value, ok := ppuo.mutation.AddedTermUomID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productprice.FieldTermUomID,
		})
	}
	if ppuo.mutation.TermUomIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: productprice.FieldTermUomID,
		})
	}
	if value, ok := ppuo.mutation.PriceWithoutTax(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: productprice.FieldPriceWithoutTax,
		})
	}
	if value, ok := ppuo.mutation.AddedPriceWithoutTax(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: productprice.FieldPriceWithoutTax,
		})
	}
	if ppuo.mutation.PriceWithoutTaxCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: productprice.FieldPriceWithoutTax,
		})
	}
	if value, ok := ppuo.mutation.PriceWithTax(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: productprice.FieldPriceWithTax,
		})
	}
	if value, ok := ppuo.mutation.AddedPriceWithTax(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: productprice.FieldPriceWithTax,
		})
	}
	if ppuo.mutation.PriceWithTaxCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: productprice.FieldPriceWithTax,
		})
	}
	if value, ok := ppuo.mutation.TaxAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: productprice.FieldTaxAmount,
		})
	}
	if value, ok := ppuo.mutation.AddedTaxAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: productprice.FieldTaxAmount,
		})
	}
	if ppuo.mutation.TaxAmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: productprice.FieldTaxAmount,
		})
	}
	if value, ok := ppuo.mutation.TaxPercentage(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: productprice.FieldTaxPercentage,
		})
	}
	if value, ok := ppuo.mutation.AddedTaxPercentage(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: productprice.FieldTaxPercentage,
		})
	}
	if ppuo.mutation.TaxPercentageCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: productprice.FieldTaxPercentage,
		})
	}
	if value, ok := ppuo.mutation.TaxAuthPartyID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productprice.FieldTaxAuthPartyID,
		})
	}
	if value, ok := ppuo.mutation.AddedTaxAuthPartyID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productprice.FieldTaxAuthPartyID,
		})
	}
	if ppuo.mutation.TaxAuthPartyIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: productprice.FieldTaxAuthPartyID,
		})
	}
	if value, ok := ppuo.mutation.TaxAuthGeoID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productprice.FieldTaxAuthGeoID,
		})
	}
	if value, ok := ppuo.mutation.AddedTaxAuthGeoID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productprice.FieldTaxAuthGeoID,
		})
	}
	if ppuo.mutation.TaxAuthGeoIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: productprice.FieldTaxAuthGeoID,
		})
	}
	if value, ok := ppuo.mutation.TaxInPrice(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productprice.FieldTaxInPrice,
		})
	}
	if ppuo.mutation.TaxInPriceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productprice.FieldTaxInPrice,
		})
	}
	if value, ok := ppuo.mutation.CreatedDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productprice.FieldCreatedDate,
		})
	}
	if ppuo.mutation.CreatedDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: productprice.FieldCreatedDate,
		})
	}
	if value, ok := ppuo.mutation.CreatedByUserLogin(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productprice.FieldCreatedByUserLogin,
		})
	}
	if ppuo.mutation.CreatedByUserLoginCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productprice.FieldCreatedByUserLogin,
		})
	}
	if value, ok := ppuo.mutation.LastModifiedDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productprice.FieldLastModifiedDate,
		})
	}
	if ppuo.mutation.LastModifiedDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: productprice.FieldLastModifiedDate,
		})
	}
	if value, ok := ppuo.mutation.LastModifiedByUserLogin(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productprice.FieldLastModifiedByUserLogin,
		})
	}
	if ppuo.mutation.LastModifiedByUserLoginCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productprice.FieldLastModifiedByUserLogin,
		})
	}
	if ppuo.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productprice.ProductTable,
			Columns: []string{productprice.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ppuo.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productprice.ProductTable,
			Columns: []string{productprice.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ppuo.mutation.ProductPriceTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productprice.ProductPriceTypeTable,
			Columns: []string{productprice.ProductPriceTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productpricetype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ppuo.mutation.ProductPriceTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productprice.ProductPriceTypeTable,
			Columns: []string{productprice.ProductPriceTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productpricetype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ppuo.mutation.ProductPricePurposeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productprice.ProductPricePurposeTable,
			Columns: []string{productprice.ProductPricePurposeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productpricepurpose.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ppuo.mutation.ProductPricePurposeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productprice.ProductPricePurposeTable,
			Columns: []string{productprice.ProductPricePurposeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productpricepurpose.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ppuo.mutation.ProductStoreGroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productprice.ProductStoreGroupTable,
			Columns: []string{productprice.ProductStoreGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productstoregroup.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ppuo.mutation.ProductStoreGroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productprice.ProductStoreGroupTable,
			Columns: []string{productprice.ProductStoreGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productstoregroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ppuo.mutation.CustomMethodCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productprice.CustomMethodTable,
			Columns: []string{productprice.CustomMethodColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: custommethod.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ppuo.mutation.CustomMethodIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productprice.CustomMethodTable,
			Columns: []string{productprice.CustomMethodColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: custommethod.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProductPrice{config: ppuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ppuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productprice.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
