// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/predicate"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productpriceactiontype"
)

// ProductPriceActionTypeUpdate is the builder for updating ProductPriceActionType entities.
type ProductPriceActionTypeUpdate struct {
	config
	hooks    []Hook
	mutation *ProductPriceActionTypeMutation
}

// Where adds a new predicate for the ProductPriceActionTypeUpdate builder.
func (ppatu *ProductPriceActionTypeUpdate) Where(ps ...predicate.ProductPriceActionType) *ProductPriceActionTypeUpdate {
	ppatu.mutation.predicates = append(ppatu.mutation.predicates, ps...)
	return ppatu
}

// SetStringRef sets the "string_ref" field.
func (ppatu *ProductPriceActionTypeUpdate) SetStringRef(s string) *ProductPriceActionTypeUpdate {
	ppatu.mutation.SetStringRef(s)
	return ppatu
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (ppatu *ProductPriceActionTypeUpdate) SetNillableStringRef(s *string) *ProductPriceActionTypeUpdate {
	if s != nil {
		ppatu.SetStringRef(*s)
	}
	return ppatu
}

// ClearStringRef clears the value of the "string_ref" field.
func (ppatu *ProductPriceActionTypeUpdate) ClearStringRef() *ProductPriceActionTypeUpdate {
	ppatu.mutation.ClearStringRef()
	return ppatu
}

// SetDescription sets the "description" field.
func (ppatu *ProductPriceActionTypeUpdate) SetDescription(s string) *ProductPriceActionTypeUpdate {
	ppatu.mutation.SetDescription(s)
	return ppatu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ppatu *ProductPriceActionTypeUpdate) SetNillableDescription(s *string) *ProductPriceActionTypeUpdate {
	if s != nil {
		ppatu.SetDescription(*s)
	}
	return ppatu
}

// ClearDescription clears the value of the "description" field.
func (ppatu *ProductPriceActionTypeUpdate) ClearDescription() *ProductPriceActionTypeUpdate {
	ppatu.mutation.ClearDescription()
	return ppatu
}

// Mutation returns the ProductPriceActionTypeMutation object of the builder.
func (ppatu *ProductPriceActionTypeUpdate) Mutation() *ProductPriceActionTypeMutation {
	return ppatu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ppatu *ProductPriceActionTypeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	ppatu.defaults()
	if len(ppatu.hooks) == 0 {
		affected, err = ppatu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProductPriceActionTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ppatu.mutation = mutation
			affected, err = ppatu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ppatu.hooks) - 1; i >= 0; i-- {
			mut = ppatu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ppatu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ppatu *ProductPriceActionTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := ppatu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ppatu *ProductPriceActionTypeUpdate) Exec(ctx context.Context) error {
	_, err := ppatu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ppatu *ProductPriceActionTypeUpdate) ExecX(ctx context.Context) {
	if err := ppatu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ppatu *ProductPriceActionTypeUpdate) defaults() {
	if _, ok := ppatu.mutation.UpdateTime(); !ok {
		v := productpriceactiontype.UpdateDefaultUpdateTime()
		ppatu.mutation.SetUpdateTime(v)
	}
}

func (ppatu *ProductPriceActionTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   productpriceactiontype.Table,
			Columns: productpriceactiontype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: productpriceactiontype.FieldID,
			},
		},
	}
	if ps := ppatu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ppatu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productpriceactiontype.FieldUpdateTime,
		})
	}
	if value, ok := ppatu.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productpriceactiontype.FieldStringRef,
		})
	}
	if ppatu.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productpriceactiontype.FieldStringRef,
		})
	}
	if value, ok := ppatu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productpriceactiontype.FieldDescription,
		})
	}
	if ppatu.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productpriceactiontype.FieldDescription,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ppatu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productpriceactiontype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ProductPriceActionTypeUpdateOne is the builder for updating a single ProductPriceActionType entity.
type ProductPriceActionTypeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProductPriceActionTypeMutation
}

// SetStringRef sets the "string_ref" field.
func (ppatuo *ProductPriceActionTypeUpdateOne) SetStringRef(s string) *ProductPriceActionTypeUpdateOne {
	ppatuo.mutation.SetStringRef(s)
	return ppatuo
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (ppatuo *ProductPriceActionTypeUpdateOne) SetNillableStringRef(s *string) *ProductPriceActionTypeUpdateOne {
	if s != nil {
		ppatuo.SetStringRef(*s)
	}
	return ppatuo
}

// ClearStringRef clears the value of the "string_ref" field.
func (ppatuo *ProductPriceActionTypeUpdateOne) ClearStringRef() *ProductPriceActionTypeUpdateOne {
	ppatuo.mutation.ClearStringRef()
	return ppatuo
}

// SetDescription sets the "description" field.
func (ppatuo *ProductPriceActionTypeUpdateOne) SetDescription(s string) *ProductPriceActionTypeUpdateOne {
	ppatuo.mutation.SetDescription(s)
	return ppatuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ppatuo *ProductPriceActionTypeUpdateOne) SetNillableDescription(s *string) *ProductPriceActionTypeUpdateOne {
	if s != nil {
		ppatuo.SetDescription(*s)
	}
	return ppatuo
}

// ClearDescription clears the value of the "description" field.
func (ppatuo *ProductPriceActionTypeUpdateOne) ClearDescription() *ProductPriceActionTypeUpdateOne {
	ppatuo.mutation.ClearDescription()
	return ppatuo
}

// Mutation returns the ProductPriceActionTypeMutation object of the builder.
func (ppatuo *ProductPriceActionTypeUpdateOne) Mutation() *ProductPriceActionTypeMutation {
	return ppatuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ppatuo *ProductPriceActionTypeUpdateOne) Select(field string, fields ...string) *ProductPriceActionTypeUpdateOne {
	ppatuo.fields = append([]string{field}, fields...)
	return ppatuo
}

// Save executes the query and returns the updated ProductPriceActionType entity.
func (ppatuo *ProductPriceActionTypeUpdateOne) Save(ctx context.Context) (*ProductPriceActionType, error) {
	var (
		err  error
		node *ProductPriceActionType
	)
	ppatuo.defaults()
	if len(ppatuo.hooks) == 0 {
		node, err = ppatuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProductPriceActionTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ppatuo.mutation = mutation
			node, err = ppatuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ppatuo.hooks) - 1; i >= 0; i-- {
			mut = ppatuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ppatuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ppatuo *ProductPriceActionTypeUpdateOne) SaveX(ctx context.Context) *ProductPriceActionType {
	node, err := ppatuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ppatuo *ProductPriceActionTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := ppatuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ppatuo *ProductPriceActionTypeUpdateOne) ExecX(ctx context.Context) {
	if err := ppatuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ppatuo *ProductPriceActionTypeUpdateOne) defaults() {
	if _, ok := ppatuo.mutation.UpdateTime(); !ok {
		v := productpriceactiontype.UpdateDefaultUpdateTime()
		ppatuo.mutation.SetUpdateTime(v)
	}
}

func (ppatuo *ProductPriceActionTypeUpdateOne) sqlSave(ctx context.Context) (_node *ProductPriceActionType, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   productpriceactiontype.Table,
			Columns: productpriceactiontype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: productpriceactiontype.FieldID,
			},
		},
	}
	id, ok := ppatuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ProductPriceActionType.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := ppatuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, productpriceactiontype.FieldID)
		for _, f := range fields {
			if !productpriceactiontype.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != productpriceactiontype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ppatuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ppatuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productpriceactiontype.FieldUpdateTime,
		})
	}
	if value, ok := ppatuo.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productpriceactiontype.FieldStringRef,
		})
	}
	if ppatuo.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productpriceactiontype.FieldStringRef,
		})
	}
	if value, ok := ppatuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productpriceactiontype.FieldDescription,
		})
	}
	if ppatuo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productpriceactiontype.FieldDescription,
		})
	}
	_node = &ProductPriceActionType{config: ppatuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ppatuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productpriceactiontype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
