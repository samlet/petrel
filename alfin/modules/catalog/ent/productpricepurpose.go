// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productpricepurpose"
)

// ProductPricePurpose is the model entity for the ProductPricePurpose schema.
type ProductPricePurpose struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// StringRef holds the value of the "string_ref" field.
	StringRef string `json:"string_ref,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProductPricePurposeQuery when eager-loading is set.
	Edges ProductPricePurposeEdges `json:"edges"`
}

// ProductPricePurposeEdges holds the relations/edges for other nodes in the graph.
type ProductPricePurposeEdges struct {
	// OrderPaymentPreferences holds the value of the order_payment_preferences edge.
	OrderPaymentPreferences []*OrderPaymentPreference `json:"order_payment_preferences,omitempty"`
	// ProductPrices holds the value of the product_prices edge.
	ProductPrices []*ProductPrice `json:"product_prices,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// OrderPaymentPreferencesOrErr returns the OrderPaymentPreferences value or an error if the edge
// was not loaded in eager-loading.
func (e ProductPricePurposeEdges) OrderPaymentPreferencesOrErr() ([]*OrderPaymentPreference, error) {
	if e.loadedTypes[0] {
		return e.OrderPaymentPreferences, nil
	}
	return nil, &NotLoadedError{edge: "order_payment_preferences"}
}

// ProductPricesOrErr returns the ProductPrices value or an error if the edge
// was not loaded in eager-loading.
func (e ProductPricePurposeEdges) ProductPricesOrErr() ([]*ProductPrice, error) {
	if e.loadedTypes[1] {
		return e.ProductPrices, nil
	}
	return nil, &NotLoadedError{edge: "product_prices"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProductPricePurpose) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case productpricepurpose.FieldID:
			values[i] = new(sql.NullInt64)
		case productpricepurpose.FieldStringRef, productpricepurpose.FieldDescription:
			values[i] = new(sql.NullString)
		case productpricepurpose.FieldCreateTime, productpricepurpose.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ProductPricePurpose", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProductPricePurpose fields.
func (ppp *ProductPricePurpose) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case productpricepurpose.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ppp.ID = int(value.Int64)
		case productpricepurpose.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				ppp.CreateTime = value.Time
			}
		case productpricepurpose.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				ppp.UpdateTime = value.Time
			}
		case productpricepurpose.FieldStringRef:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field string_ref", values[i])
			} else if value.Valid {
				ppp.StringRef = value.String
			}
		case productpricepurpose.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				ppp.Description = value.String
			}
		}
	}
	return nil
}

// QueryOrderPaymentPreferences queries the "order_payment_preferences" edge of the ProductPricePurpose entity.
func (ppp *ProductPricePurpose) QueryOrderPaymentPreferences() *OrderPaymentPreferenceQuery {
	return (&ProductPricePurposeClient{config: ppp.config}).QueryOrderPaymentPreferences(ppp)
}

// QueryProductPrices queries the "product_prices" edge of the ProductPricePurpose entity.
func (ppp *ProductPricePurpose) QueryProductPrices() *ProductPriceQuery {
	return (&ProductPricePurposeClient{config: ppp.config}).QueryProductPrices(ppp)
}

// Update returns a builder for updating this ProductPricePurpose.
// Note that you need to call ProductPricePurpose.Unwrap() before calling this method if this ProductPricePurpose
// was returned from a transaction, and the transaction was committed or rolled back.
func (ppp *ProductPricePurpose) Update() *ProductPricePurposeUpdateOne {
	return (&ProductPricePurposeClient{config: ppp.config}).UpdateOne(ppp)
}

// Unwrap unwraps the ProductPricePurpose entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ppp *ProductPricePurpose) Unwrap() *ProductPricePurpose {
	tx, ok := ppp.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProductPricePurpose is not a transactional entity")
	}
	ppp.config.driver = tx.drv
	return ppp
}

// String implements the fmt.Stringer.
func (ppp *ProductPricePurpose) String() string {
	var builder strings.Builder
	builder.WriteString("ProductPricePurpose(")
	builder.WriteString(fmt.Sprintf("id=%v", ppp.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(ppp.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(ppp.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", string_ref=")
	builder.WriteString(ppp.StringRef)
	builder.WriteString(", description=")
	builder.WriteString(ppp.Description)
	builder.WriteByte(')')
	return builder.String()
}

// ProductPricePurposes is a parsable slice of ProductPricePurpose.
type ProductPricePurposes []*ProductPricePurpose

func (ppp ProductPricePurposes) config(cfg config) {
	for _i := range ppp {
		ppp[_i].config = cfg
	}
}
