// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/orderpaymentpreference"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/predicate"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productprice"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productpricepurpose"
)

// ProductPricePurposeUpdate is the builder for updating ProductPricePurpose entities.
type ProductPricePurposeUpdate struct {
	config
	hooks    []Hook
	mutation *ProductPricePurposeMutation
}

// Where adds a new predicate for the ProductPricePurposeUpdate builder.
func (pppu *ProductPricePurposeUpdate) Where(ps ...predicate.ProductPricePurpose) *ProductPricePurposeUpdate {
	pppu.mutation.predicates = append(pppu.mutation.predicates, ps...)
	return pppu
}

// SetStringRef sets the "string_ref" field.
func (pppu *ProductPricePurposeUpdate) SetStringRef(s string) *ProductPricePurposeUpdate {
	pppu.mutation.SetStringRef(s)
	return pppu
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (pppu *ProductPricePurposeUpdate) SetNillableStringRef(s *string) *ProductPricePurposeUpdate {
	if s != nil {
		pppu.SetStringRef(*s)
	}
	return pppu
}

// ClearStringRef clears the value of the "string_ref" field.
func (pppu *ProductPricePurposeUpdate) ClearStringRef() *ProductPricePurposeUpdate {
	pppu.mutation.ClearStringRef()
	return pppu
}

// SetDescription sets the "description" field.
func (pppu *ProductPricePurposeUpdate) SetDescription(s string) *ProductPricePurposeUpdate {
	pppu.mutation.SetDescription(s)
	return pppu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pppu *ProductPricePurposeUpdate) SetNillableDescription(s *string) *ProductPricePurposeUpdate {
	if s != nil {
		pppu.SetDescription(*s)
	}
	return pppu
}

// ClearDescription clears the value of the "description" field.
func (pppu *ProductPricePurposeUpdate) ClearDescription() *ProductPricePurposeUpdate {
	pppu.mutation.ClearDescription()
	return pppu
}

// AddOrderPaymentPreferenceIDs adds the "order_payment_preferences" edge to the OrderPaymentPreference entity by IDs.
func (pppu *ProductPricePurposeUpdate) AddOrderPaymentPreferenceIDs(ids ...int) *ProductPricePurposeUpdate {
	pppu.mutation.AddOrderPaymentPreferenceIDs(ids...)
	return pppu
}

// AddOrderPaymentPreferences adds the "order_payment_preferences" edges to the OrderPaymentPreference entity.
func (pppu *ProductPricePurposeUpdate) AddOrderPaymentPreferences(o ...*OrderPaymentPreference) *ProductPricePurposeUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return pppu.AddOrderPaymentPreferenceIDs(ids...)
}

// AddProductPriceIDs adds the "product_prices" edge to the ProductPrice entity by IDs.
func (pppu *ProductPricePurposeUpdate) AddProductPriceIDs(ids ...int) *ProductPricePurposeUpdate {
	pppu.mutation.AddProductPriceIDs(ids...)
	return pppu
}

// AddProductPrices adds the "product_prices" edges to the ProductPrice entity.
func (pppu *ProductPricePurposeUpdate) AddProductPrices(p ...*ProductPrice) *ProductPricePurposeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pppu.AddProductPriceIDs(ids...)
}

// Mutation returns the ProductPricePurposeMutation object of the builder.
func (pppu *ProductPricePurposeUpdate) Mutation() *ProductPricePurposeMutation {
	return pppu.mutation
}

// ClearOrderPaymentPreferences clears all "order_payment_preferences" edges to the OrderPaymentPreference entity.
func (pppu *ProductPricePurposeUpdate) ClearOrderPaymentPreferences() *ProductPricePurposeUpdate {
	pppu.mutation.ClearOrderPaymentPreferences()
	return pppu
}

// RemoveOrderPaymentPreferenceIDs removes the "order_payment_preferences" edge to OrderPaymentPreference entities by IDs.
func (pppu *ProductPricePurposeUpdate) RemoveOrderPaymentPreferenceIDs(ids ...int) *ProductPricePurposeUpdate {
	pppu.mutation.RemoveOrderPaymentPreferenceIDs(ids...)
	return pppu
}

// RemoveOrderPaymentPreferences removes "order_payment_preferences" edges to OrderPaymentPreference entities.
func (pppu *ProductPricePurposeUpdate) RemoveOrderPaymentPreferences(o ...*OrderPaymentPreference) *ProductPricePurposeUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return pppu.RemoveOrderPaymentPreferenceIDs(ids...)
}

// ClearProductPrices clears all "product_prices" edges to the ProductPrice entity.
func (pppu *ProductPricePurposeUpdate) ClearProductPrices() *ProductPricePurposeUpdate {
	pppu.mutation.ClearProductPrices()
	return pppu
}

// RemoveProductPriceIDs removes the "product_prices" edge to ProductPrice entities by IDs.
func (pppu *ProductPricePurposeUpdate) RemoveProductPriceIDs(ids ...int) *ProductPricePurposeUpdate {
	pppu.mutation.RemoveProductPriceIDs(ids...)
	return pppu
}

// RemoveProductPrices removes "product_prices" edges to ProductPrice entities.
func (pppu *ProductPricePurposeUpdate) RemoveProductPrices(p ...*ProductPrice) *ProductPricePurposeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pppu.RemoveProductPriceIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pppu *ProductPricePurposeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	pppu.defaults()
	if len(pppu.hooks) == 0 {
		affected, err = pppu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProductPricePurposeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pppu.mutation = mutation
			affected, err = pppu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pppu.hooks) - 1; i >= 0; i-- {
			mut = pppu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pppu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pppu *ProductPricePurposeUpdate) SaveX(ctx context.Context) int {
	affected, err := pppu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pppu *ProductPricePurposeUpdate) Exec(ctx context.Context) error {
	_, err := pppu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pppu *ProductPricePurposeUpdate) ExecX(ctx context.Context) {
	if err := pppu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pppu *ProductPricePurposeUpdate) defaults() {
	if _, ok := pppu.mutation.UpdateTime(); !ok {
		v := productpricepurpose.UpdateDefaultUpdateTime()
		pppu.mutation.SetUpdateTime(v)
	}
}

func (pppu *ProductPricePurposeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   productpricepurpose.Table,
			Columns: productpricepurpose.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: productpricepurpose.FieldID,
			},
		},
	}
	if ps := pppu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pppu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productpricepurpose.FieldUpdateTime,
		})
	}
	if value, ok := pppu.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productpricepurpose.FieldStringRef,
		})
	}
	if pppu.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productpricepurpose.FieldStringRef,
		})
	}
	if value, ok := pppu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productpricepurpose.FieldDescription,
		})
	}
	if pppu.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productpricepurpose.FieldDescription,
		})
	}
	if pppu.mutation.OrderPaymentPreferencesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productpricepurpose.OrderPaymentPreferencesTable,
			Columns: []string{productpricepurpose.OrderPaymentPreferencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderpaymentpreference.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pppu.mutation.RemovedOrderPaymentPreferencesIDs(); len(nodes) > 0 && !pppu.mutation.OrderPaymentPreferencesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productpricepurpose.OrderPaymentPreferencesTable,
			Columns: []string{productpricepurpose.OrderPaymentPreferencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderpaymentpreference.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pppu.mutation.OrderPaymentPreferencesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productpricepurpose.OrderPaymentPreferencesTable,
			Columns: []string{productpricepurpose.OrderPaymentPreferencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderpaymentpreference.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pppu.mutation.ProductPricesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productpricepurpose.ProductPricesTable,
			Columns: []string{productpricepurpose.ProductPricesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productprice.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pppu.mutation.RemovedProductPricesIDs(); len(nodes) > 0 && !pppu.mutation.ProductPricesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productpricepurpose.ProductPricesTable,
			Columns: []string{productpricepurpose.ProductPricesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productprice.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pppu.mutation.ProductPricesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productpricepurpose.ProductPricesTable,
			Columns: []string{productpricepurpose.ProductPricesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productprice.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pppu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productpricepurpose.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ProductPricePurposeUpdateOne is the builder for updating a single ProductPricePurpose entity.
type ProductPricePurposeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProductPricePurposeMutation
}

// SetStringRef sets the "string_ref" field.
func (pppuo *ProductPricePurposeUpdateOne) SetStringRef(s string) *ProductPricePurposeUpdateOne {
	pppuo.mutation.SetStringRef(s)
	return pppuo
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (pppuo *ProductPricePurposeUpdateOne) SetNillableStringRef(s *string) *ProductPricePurposeUpdateOne {
	if s != nil {
		pppuo.SetStringRef(*s)
	}
	return pppuo
}

// ClearStringRef clears the value of the "string_ref" field.
func (pppuo *ProductPricePurposeUpdateOne) ClearStringRef() *ProductPricePurposeUpdateOne {
	pppuo.mutation.ClearStringRef()
	return pppuo
}

// SetDescription sets the "description" field.
func (pppuo *ProductPricePurposeUpdateOne) SetDescription(s string) *ProductPricePurposeUpdateOne {
	pppuo.mutation.SetDescription(s)
	return pppuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pppuo *ProductPricePurposeUpdateOne) SetNillableDescription(s *string) *ProductPricePurposeUpdateOne {
	if s != nil {
		pppuo.SetDescription(*s)
	}
	return pppuo
}

// ClearDescription clears the value of the "description" field.
func (pppuo *ProductPricePurposeUpdateOne) ClearDescription() *ProductPricePurposeUpdateOne {
	pppuo.mutation.ClearDescription()
	return pppuo
}

// AddOrderPaymentPreferenceIDs adds the "order_payment_preferences" edge to the OrderPaymentPreference entity by IDs.
func (pppuo *ProductPricePurposeUpdateOne) AddOrderPaymentPreferenceIDs(ids ...int) *ProductPricePurposeUpdateOne {
	pppuo.mutation.AddOrderPaymentPreferenceIDs(ids...)
	return pppuo
}

// AddOrderPaymentPreferences adds the "order_payment_preferences" edges to the OrderPaymentPreference entity.
func (pppuo *ProductPricePurposeUpdateOne) AddOrderPaymentPreferences(o ...*OrderPaymentPreference) *ProductPricePurposeUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return pppuo.AddOrderPaymentPreferenceIDs(ids...)
}

// AddProductPriceIDs adds the "product_prices" edge to the ProductPrice entity by IDs.
func (pppuo *ProductPricePurposeUpdateOne) AddProductPriceIDs(ids ...int) *ProductPricePurposeUpdateOne {
	pppuo.mutation.AddProductPriceIDs(ids...)
	return pppuo
}

// AddProductPrices adds the "product_prices" edges to the ProductPrice entity.
func (pppuo *ProductPricePurposeUpdateOne) AddProductPrices(p ...*ProductPrice) *ProductPricePurposeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pppuo.AddProductPriceIDs(ids...)
}

// Mutation returns the ProductPricePurposeMutation object of the builder.
func (pppuo *ProductPricePurposeUpdateOne) Mutation() *ProductPricePurposeMutation {
	return pppuo.mutation
}

// ClearOrderPaymentPreferences clears all "order_payment_preferences" edges to the OrderPaymentPreference entity.
func (pppuo *ProductPricePurposeUpdateOne) ClearOrderPaymentPreferences() *ProductPricePurposeUpdateOne {
	pppuo.mutation.ClearOrderPaymentPreferences()
	return pppuo
}

// RemoveOrderPaymentPreferenceIDs removes the "order_payment_preferences" edge to OrderPaymentPreference entities by IDs.
func (pppuo *ProductPricePurposeUpdateOne) RemoveOrderPaymentPreferenceIDs(ids ...int) *ProductPricePurposeUpdateOne {
	pppuo.mutation.RemoveOrderPaymentPreferenceIDs(ids...)
	return pppuo
}

// RemoveOrderPaymentPreferences removes "order_payment_preferences" edges to OrderPaymentPreference entities.
func (pppuo *ProductPricePurposeUpdateOne) RemoveOrderPaymentPreferences(o ...*OrderPaymentPreference) *ProductPricePurposeUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return pppuo.RemoveOrderPaymentPreferenceIDs(ids...)
}

// ClearProductPrices clears all "product_prices" edges to the ProductPrice entity.
func (pppuo *ProductPricePurposeUpdateOne) ClearProductPrices() *ProductPricePurposeUpdateOne {
	pppuo.mutation.ClearProductPrices()
	return pppuo
}

// RemoveProductPriceIDs removes the "product_prices" edge to ProductPrice entities by IDs.
func (pppuo *ProductPricePurposeUpdateOne) RemoveProductPriceIDs(ids ...int) *ProductPricePurposeUpdateOne {
	pppuo.mutation.RemoveProductPriceIDs(ids...)
	return pppuo
}

// RemoveProductPrices removes "product_prices" edges to ProductPrice entities.
func (pppuo *ProductPricePurposeUpdateOne) RemoveProductPrices(p ...*ProductPrice) *ProductPricePurposeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pppuo.RemoveProductPriceIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pppuo *ProductPricePurposeUpdateOne) Select(field string, fields ...string) *ProductPricePurposeUpdateOne {
	pppuo.fields = append([]string{field}, fields...)
	return pppuo
}

// Save executes the query and returns the updated ProductPricePurpose entity.
func (pppuo *ProductPricePurposeUpdateOne) Save(ctx context.Context) (*ProductPricePurpose, error) {
	var (
		err  error
		node *ProductPricePurpose
	)
	pppuo.defaults()
	if len(pppuo.hooks) == 0 {
		node, err = pppuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProductPricePurposeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pppuo.mutation = mutation
			node, err = pppuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pppuo.hooks) - 1; i >= 0; i-- {
			mut = pppuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pppuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (pppuo *ProductPricePurposeUpdateOne) SaveX(ctx context.Context) *ProductPricePurpose {
	node, err := pppuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pppuo *ProductPricePurposeUpdateOne) Exec(ctx context.Context) error {
	_, err := pppuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pppuo *ProductPricePurposeUpdateOne) ExecX(ctx context.Context) {
	if err := pppuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pppuo *ProductPricePurposeUpdateOne) defaults() {
	if _, ok := pppuo.mutation.UpdateTime(); !ok {
		v := productpricepurpose.UpdateDefaultUpdateTime()
		pppuo.mutation.SetUpdateTime(v)
	}
}

func (pppuo *ProductPricePurposeUpdateOne) sqlSave(ctx context.Context) (_node *ProductPricePurpose, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   productpricepurpose.Table,
			Columns: productpricepurpose.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: productpricepurpose.FieldID,
			},
		},
	}
	id, ok := pppuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ProductPricePurpose.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := pppuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, productpricepurpose.FieldID)
		for _, f := range fields {
			if !productpricepurpose.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != productpricepurpose.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pppuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pppuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productpricepurpose.FieldUpdateTime,
		})
	}
	if value, ok := pppuo.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productpricepurpose.FieldStringRef,
		})
	}
	if pppuo.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productpricepurpose.FieldStringRef,
		})
	}
	if value, ok := pppuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productpricepurpose.FieldDescription,
		})
	}
	if pppuo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productpricepurpose.FieldDescription,
		})
	}
	if pppuo.mutation.OrderPaymentPreferencesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productpricepurpose.OrderPaymentPreferencesTable,
			Columns: []string{productpricepurpose.OrderPaymentPreferencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderpaymentpreference.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pppuo.mutation.RemovedOrderPaymentPreferencesIDs(); len(nodes) > 0 && !pppuo.mutation.OrderPaymentPreferencesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productpricepurpose.OrderPaymentPreferencesTable,
			Columns: []string{productpricepurpose.OrderPaymentPreferencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderpaymentpreference.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pppuo.mutation.OrderPaymentPreferencesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productpricepurpose.OrderPaymentPreferencesTable,
			Columns: []string{productpricepurpose.OrderPaymentPreferencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderpaymentpreference.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pppuo.mutation.ProductPricesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productpricepurpose.ProductPricesTable,
			Columns: []string{productpricepurpose.ProductPricesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productprice.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pppuo.mutation.RemovedProductPricesIDs(); len(nodes) > 0 && !pppuo.mutation.ProductPricesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productpricepurpose.ProductPricesTable,
			Columns: []string{productpricepurpose.ProductPricesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productprice.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pppuo.mutation.ProductPricesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productpricepurpose.ProductPricesTable,
			Columns: []string{productpricepurpose.ProductPricesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productprice.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProductPricePurpose{config: pppuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pppuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productpricepurpose.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
