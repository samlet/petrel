// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productprice"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productpricetype"
)

// ProductPriceTypeCreate is the builder for creating a ProductPriceType entity.
type ProductPriceTypeCreate struct {
	config
	mutation *ProductPriceTypeMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (pptc *ProductPriceTypeCreate) SetCreateTime(t time.Time) *ProductPriceTypeCreate {
	pptc.mutation.SetCreateTime(t)
	return pptc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (pptc *ProductPriceTypeCreate) SetNillableCreateTime(t *time.Time) *ProductPriceTypeCreate {
	if t != nil {
		pptc.SetCreateTime(*t)
	}
	return pptc
}

// SetUpdateTime sets the "update_time" field.
func (pptc *ProductPriceTypeCreate) SetUpdateTime(t time.Time) *ProductPriceTypeCreate {
	pptc.mutation.SetUpdateTime(t)
	return pptc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (pptc *ProductPriceTypeCreate) SetNillableUpdateTime(t *time.Time) *ProductPriceTypeCreate {
	if t != nil {
		pptc.SetUpdateTime(*t)
	}
	return pptc
}

// SetStringRef sets the "string_ref" field.
func (pptc *ProductPriceTypeCreate) SetStringRef(s string) *ProductPriceTypeCreate {
	pptc.mutation.SetStringRef(s)
	return pptc
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (pptc *ProductPriceTypeCreate) SetNillableStringRef(s *string) *ProductPriceTypeCreate {
	if s != nil {
		pptc.SetStringRef(*s)
	}
	return pptc
}

// SetDescription sets the "description" field.
func (pptc *ProductPriceTypeCreate) SetDescription(s string) *ProductPriceTypeCreate {
	pptc.mutation.SetDescription(s)
	return pptc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pptc *ProductPriceTypeCreate) SetNillableDescription(s *string) *ProductPriceTypeCreate {
	if s != nil {
		pptc.SetDescription(*s)
	}
	return pptc
}

// AddProductPriceIDs adds the "product_prices" edge to the ProductPrice entity by IDs.
func (pptc *ProductPriceTypeCreate) AddProductPriceIDs(ids ...int) *ProductPriceTypeCreate {
	pptc.mutation.AddProductPriceIDs(ids...)
	return pptc
}

// AddProductPrices adds the "product_prices" edges to the ProductPrice entity.
func (pptc *ProductPriceTypeCreate) AddProductPrices(p ...*ProductPrice) *ProductPriceTypeCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pptc.AddProductPriceIDs(ids...)
}

// Mutation returns the ProductPriceTypeMutation object of the builder.
func (pptc *ProductPriceTypeCreate) Mutation() *ProductPriceTypeMutation {
	return pptc.mutation
}

// Save creates the ProductPriceType in the database.
func (pptc *ProductPriceTypeCreate) Save(ctx context.Context) (*ProductPriceType, error) {
	var (
		err  error
		node *ProductPriceType
	)
	pptc.defaults()
	if len(pptc.hooks) == 0 {
		if err = pptc.check(); err != nil {
			return nil, err
		}
		node, err = pptc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProductPriceTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pptc.check(); err != nil {
				return nil, err
			}
			pptc.mutation = mutation
			if node, err = pptc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(pptc.hooks) - 1; i >= 0; i-- {
			mut = pptc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pptc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pptc *ProductPriceTypeCreate) SaveX(ctx context.Context) *ProductPriceType {
	v, err := pptc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (pptc *ProductPriceTypeCreate) defaults() {
	if _, ok := pptc.mutation.CreateTime(); !ok {
		v := productpricetype.DefaultCreateTime()
		pptc.mutation.SetCreateTime(v)
	}
	if _, ok := pptc.mutation.UpdateTime(); !ok {
		v := productpricetype.DefaultUpdateTime()
		pptc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pptc *ProductPriceTypeCreate) check() error {
	if _, ok := pptc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New("ent: missing required field \"create_time\"")}
	}
	if _, ok := pptc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New("ent: missing required field \"update_time\"")}
	}
	return nil
}

func (pptc *ProductPriceTypeCreate) sqlSave(ctx context.Context) (*ProductPriceType, error) {
	_node, _spec := pptc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pptc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (pptc *ProductPriceTypeCreate) createSpec() (*ProductPriceType, *sqlgraph.CreateSpec) {
	var (
		_node = &ProductPriceType{config: pptc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: productpricetype.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: productpricetype.FieldID,
			},
		}
	)
	if value, ok := pptc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productpricetype.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := pptc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productpricetype.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := pptc.mutation.StringRef(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productpricetype.FieldStringRef,
		})
		_node.StringRef = value
	}
	if value, ok := pptc.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productpricetype.FieldDescription,
		})
		_node.Description = value
	}
	if nodes := pptc.mutation.ProductPricesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productpricetype.ProductPricesTable,
			Columns: []string{productpricetype.ProductPricesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productprice.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ProductPriceTypeCreateBulk is the builder for creating many ProductPriceType entities in bulk.
type ProductPriceTypeCreateBulk struct {
	config
	builders []*ProductPriceTypeCreate
}

// Save creates the ProductPriceType entities in the database.
func (pptcb *ProductPriceTypeCreateBulk) Save(ctx context.Context) ([]*ProductPriceType, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pptcb.builders))
	nodes := make([]*ProductPriceType, len(pptcb.builders))
	mutators := make([]Mutator, len(pptcb.builders))
	for i := range pptcb.builders {
		func(i int, root context.Context) {
			builder := pptcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProductPriceTypeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pptcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pptcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pptcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pptcb *ProductPriceTypeCreateBulk) SaveX(ctx context.Context) []*ProductPriceType {
	v, err := pptcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
