// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/predicate"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productprice"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productpricetype"
)

// ProductPriceTypeUpdate is the builder for updating ProductPriceType entities.
type ProductPriceTypeUpdate struct {
	config
	hooks    []Hook
	mutation *ProductPriceTypeMutation
}

// Where adds a new predicate for the ProductPriceTypeUpdate builder.
func (pptu *ProductPriceTypeUpdate) Where(ps ...predicate.ProductPriceType) *ProductPriceTypeUpdate {
	pptu.mutation.predicates = append(pptu.mutation.predicates, ps...)
	return pptu
}

// SetStringRef sets the "string_ref" field.
func (pptu *ProductPriceTypeUpdate) SetStringRef(s string) *ProductPriceTypeUpdate {
	pptu.mutation.SetStringRef(s)
	return pptu
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (pptu *ProductPriceTypeUpdate) SetNillableStringRef(s *string) *ProductPriceTypeUpdate {
	if s != nil {
		pptu.SetStringRef(*s)
	}
	return pptu
}

// ClearStringRef clears the value of the "string_ref" field.
func (pptu *ProductPriceTypeUpdate) ClearStringRef() *ProductPriceTypeUpdate {
	pptu.mutation.ClearStringRef()
	return pptu
}

// SetDescription sets the "description" field.
func (pptu *ProductPriceTypeUpdate) SetDescription(s string) *ProductPriceTypeUpdate {
	pptu.mutation.SetDescription(s)
	return pptu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pptu *ProductPriceTypeUpdate) SetNillableDescription(s *string) *ProductPriceTypeUpdate {
	if s != nil {
		pptu.SetDescription(*s)
	}
	return pptu
}

// ClearDescription clears the value of the "description" field.
func (pptu *ProductPriceTypeUpdate) ClearDescription() *ProductPriceTypeUpdate {
	pptu.mutation.ClearDescription()
	return pptu
}

// AddProductPriceIDs adds the "product_prices" edge to the ProductPrice entity by IDs.
func (pptu *ProductPriceTypeUpdate) AddProductPriceIDs(ids ...int) *ProductPriceTypeUpdate {
	pptu.mutation.AddProductPriceIDs(ids...)
	return pptu
}

// AddProductPrices adds the "product_prices" edges to the ProductPrice entity.
func (pptu *ProductPriceTypeUpdate) AddProductPrices(p ...*ProductPrice) *ProductPriceTypeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pptu.AddProductPriceIDs(ids...)
}

// Mutation returns the ProductPriceTypeMutation object of the builder.
func (pptu *ProductPriceTypeUpdate) Mutation() *ProductPriceTypeMutation {
	return pptu.mutation
}

// ClearProductPrices clears all "product_prices" edges to the ProductPrice entity.
func (pptu *ProductPriceTypeUpdate) ClearProductPrices() *ProductPriceTypeUpdate {
	pptu.mutation.ClearProductPrices()
	return pptu
}

// RemoveProductPriceIDs removes the "product_prices" edge to ProductPrice entities by IDs.
func (pptu *ProductPriceTypeUpdate) RemoveProductPriceIDs(ids ...int) *ProductPriceTypeUpdate {
	pptu.mutation.RemoveProductPriceIDs(ids...)
	return pptu
}

// RemoveProductPrices removes "product_prices" edges to ProductPrice entities.
func (pptu *ProductPriceTypeUpdate) RemoveProductPrices(p ...*ProductPrice) *ProductPriceTypeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pptu.RemoveProductPriceIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pptu *ProductPriceTypeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	pptu.defaults()
	if len(pptu.hooks) == 0 {
		affected, err = pptu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProductPriceTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pptu.mutation = mutation
			affected, err = pptu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pptu.hooks) - 1; i >= 0; i-- {
			mut = pptu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pptu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pptu *ProductPriceTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := pptu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pptu *ProductPriceTypeUpdate) Exec(ctx context.Context) error {
	_, err := pptu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pptu *ProductPriceTypeUpdate) ExecX(ctx context.Context) {
	if err := pptu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pptu *ProductPriceTypeUpdate) defaults() {
	if _, ok := pptu.mutation.UpdateTime(); !ok {
		v := productpricetype.UpdateDefaultUpdateTime()
		pptu.mutation.SetUpdateTime(v)
	}
}

func (pptu *ProductPriceTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   productpricetype.Table,
			Columns: productpricetype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: productpricetype.FieldID,
			},
		},
	}
	if ps := pptu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pptu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productpricetype.FieldUpdateTime,
		})
	}
	if value, ok := pptu.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productpricetype.FieldStringRef,
		})
	}
	if pptu.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productpricetype.FieldStringRef,
		})
	}
	if value, ok := pptu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productpricetype.FieldDescription,
		})
	}
	if pptu.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productpricetype.FieldDescription,
		})
	}
	if pptu.mutation.ProductPricesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productpricetype.ProductPricesTable,
			Columns: []string{productpricetype.ProductPricesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productprice.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pptu.mutation.RemovedProductPricesIDs(); len(nodes) > 0 && !pptu.mutation.ProductPricesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productpricetype.ProductPricesTable,
			Columns: []string{productpricetype.ProductPricesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productprice.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pptu.mutation.ProductPricesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productpricetype.ProductPricesTable,
			Columns: []string{productpricetype.ProductPricesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productprice.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pptu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productpricetype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ProductPriceTypeUpdateOne is the builder for updating a single ProductPriceType entity.
type ProductPriceTypeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProductPriceTypeMutation
}

// SetStringRef sets the "string_ref" field.
func (pptuo *ProductPriceTypeUpdateOne) SetStringRef(s string) *ProductPriceTypeUpdateOne {
	pptuo.mutation.SetStringRef(s)
	return pptuo
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (pptuo *ProductPriceTypeUpdateOne) SetNillableStringRef(s *string) *ProductPriceTypeUpdateOne {
	if s != nil {
		pptuo.SetStringRef(*s)
	}
	return pptuo
}

// ClearStringRef clears the value of the "string_ref" field.
func (pptuo *ProductPriceTypeUpdateOne) ClearStringRef() *ProductPriceTypeUpdateOne {
	pptuo.mutation.ClearStringRef()
	return pptuo
}

// SetDescription sets the "description" field.
func (pptuo *ProductPriceTypeUpdateOne) SetDescription(s string) *ProductPriceTypeUpdateOne {
	pptuo.mutation.SetDescription(s)
	return pptuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pptuo *ProductPriceTypeUpdateOne) SetNillableDescription(s *string) *ProductPriceTypeUpdateOne {
	if s != nil {
		pptuo.SetDescription(*s)
	}
	return pptuo
}

// ClearDescription clears the value of the "description" field.
func (pptuo *ProductPriceTypeUpdateOne) ClearDescription() *ProductPriceTypeUpdateOne {
	pptuo.mutation.ClearDescription()
	return pptuo
}

// AddProductPriceIDs adds the "product_prices" edge to the ProductPrice entity by IDs.
func (pptuo *ProductPriceTypeUpdateOne) AddProductPriceIDs(ids ...int) *ProductPriceTypeUpdateOne {
	pptuo.mutation.AddProductPriceIDs(ids...)
	return pptuo
}

// AddProductPrices adds the "product_prices" edges to the ProductPrice entity.
func (pptuo *ProductPriceTypeUpdateOne) AddProductPrices(p ...*ProductPrice) *ProductPriceTypeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pptuo.AddProductPriceIDs(ids...)
}

// Mutation returns the ProductPriceTypeMutation object of the builder.
func (pptuo *ProductPriceTypeUpdateOne) Mutation() *ProductPriceTypeMutation {
	return pptuo.mutation
}

// ClearProductPrices clears all "product_prices" edges to the ProductPrice entity.
func (pptuo *ProductPriceTypeUpdateOne) ClearProductPrices() *ProductPriceTypeUpdateOne {
	pptuo.mutation.ClearProductPrices()
	return pptuo
}

// RemoveProductPriceIDs removes the "product_prices" edge to ProductPrice entities by IDs.
func (pptuo *ProductPriceTypeUpdateOne) RemoveProductPriceIDs(ids ...int) *ProductPriceTypeUpdateOne {
	pptuo.mutation.RemoveProductPriceIDs(ids...)
	return pptuo
}

// RemoveProductPrices removes "product_prices" edges to ProductPrice entities.
func (pptuo *ProductPriceTypeUpdateOne) RemoveProductPrices(p ...*ProductPrice) *ProductPriceTypeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pptuo.RemoveProductPriceIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pptuo *ProductPriceTypeUpdateOne) Select(field string, fields ...string) *ProductPriceTypeUpdateOne {
	pptuo.fields = append([]string{field}, fields...)
	return pptuo
}

// Save executes the query and returns the updated ProductPriceType entity.
func (pptuo *ProductPriceTypeUpdateOne) Save(ctx context.Context) (*ProductPriceType, error) {
	var (
		err  error
		node *ProductPriceType
	)
	pptuo.defaults()
	if len(pptuo.hooks) == 0 {
		node, err = pptuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProductPriceTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pptuo.mutation = mutation
			node, err = pptuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pptuo.hooks) - 1; i >= 0; i-- {
			mut = pptuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pptuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (pptuo *ProductPriceTypeUpdateOne) SaveX(ctx context.Context) *ProductPriceType {
	node, err := pptuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pptuo *ProductPriceTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := pptuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pptuo *ProductPriceTypeUpdateOne) ExecX(ctx context.Context) {
	if err := pptuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pptuo *ProductPriceTypeUpdateOne) defaults() {
	if _, ok := pptuo.mutation.UpdateTime(); !ok {
		v := productpricetype.UpdateDefaultUpdateTime()
		pptuo.mutation.SetUpdateTime(v)
	}
}

func (pptuo *ProductPriceTypeUpdateOne) sqlSave(ctx context.Context) (_node *ProductPriceType, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   productpricetype.Table,
			Columns: productpricetype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: productpricetype.FieldID,
			},
		},
	}
	id, ok := pptuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ProductPriceType.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := pptuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, productpricetype.FieldID)
		for _, f := range fields {
			if !productpricetype.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != productpricetype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pptuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pptuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productpricetype.FieldUpdateTime,
		})
	}
	if value, ok := pptuo.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productpricetype.FieldStringRef,
		})
	}
	if pptuo.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productpricetype.FieldStringRef,
		})
	}
	if value, ok := pptuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productpricetype.FieldDescription,
		})
	}
	if pptuo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productpricetype.FieldDescription,
		})
	}
	if pptuo.mutation.ProductPricesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productpricetype.ProductPricesTable,
			Columns: []string{productpricetype.ProductPricesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productprice.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pptuo.mutation.RemovedProductPricesIDs(); len(nodes) > 0 && !pptuo.mutation.ProductPricesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productpricetype.ProductPricesTable,
			Columns: []string{productpricetype.ProductPricesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productprice.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pptuo.mutation.ProductPricesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productpricetype.ProductPricesTable,
			Columns: []string{productpricetype.ProductPricesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productprice.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProductPriceType{config: pptuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pptuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productpricetype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
