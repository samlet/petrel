// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/product"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productreview"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productstore"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/statusitem"
)

// ProductReview is the model entity for the ProductReview schema.
type ProductReview struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// StringRef holds the value of the "string_ref" field.
	StringRef string `json:"string_ref,omitempty"`
	// UserLoginID holds the value of the "user_login_id" field.
	UserLoginID string `json:"user_login_id,omitempty"`
	// PostedAnonymous holds the value of the "posted_anonymous" field.
	PostedAnonymous productreview.PostedAnonymous `json:"posted_anonymous,omitempty"`
	// PostedDateTime holds the value of the "posted_date_time" field.
	PostedDateTime time.Time `json:"posted_date_time,omitempty"`
	// ProductRating holds the value of the "product_rating" field.
	ProductRating float64 `json:"product_rating,omitempty"`
	// ProductReview holds the value of the "product_review" field.
	ProductReview string `json:"product_review,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProductReviewQuery when eager-loading is set.
	Edges                         ProductReviewEdges `json:"edges"`
	product_product_reviews       *int
	product_store_product_reviews *int
	status_item_product_reviews   *int
}

// ProductReviewEdges holds the relations/edges for other nodes in the graph.
type ProductReviewEdges struct {
	// ProductStore holds the value of the product_store edge.
	ProductStore *ProductStore `json:"product_store,omitempty"`
	// Product holds the value of the product edge.
	Product *Product `json:"product,omitempty"`
	// StatusItem holds the value of the status_item edge.
	StatusItem *StatusItem `json:"status_item,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// ProductStoreOrErr returns the ProductStore value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProductReviewEdges) ProductStoreOrErr() (*ProductStore, error) {
	if e.loadedTypes[0] {
		if e.ProductStore == nil {
			// The edge product_store was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: productstore.Label}
		}
		return e.ProductStore, nil
	}
	return nil, &NotLoadedError{edge: "product_store"}
}

// ProductOrErr returns the Product value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProductReviewEdges) ProductOrErr() (*Product, error) {
	if e.loadedTypes[1] {
		if e.Product == nil {
			// The edge product was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: product.Label}
		}
		return e.Product, nil
	}
	return nil, &NotLoadedError{edge: "product"}
}

// StatusItemOrErr returns the StatusItem value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProductReviewEdges) StatusItemOrErr() (*StatusItem, error) {
	if e.loadedTypes[2] {
		if e.StatusItem == nil {
			// The edge status_item was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: statusitem.Label}
		}
		return e.StatusItem, nil
	}
	return nil, &NotLoadedError{edge: "status_item"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProductReview) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case productreview.FieldProductRating:
			values[i] = new(sql.NullFloat64)
		case productreview.FieldID:
			values[i] = new(sql.NullInt64)
		case productreview.FieldStringRef, productreview.FieldUserLoginID, productreview.FieldPostedAnonymous, productreview.FieldProductReview:
			values[i] = new(sql.NullString)
		case productreview.FieldCreateTime, productreview.FieldUpdateTime, productreview.FieldPostedDateTime:
			values[i] = new(sql.NullTime)
		case productreview.ForeignKeys[0]: // product_product_reviews
			values[i] = new(sql.NullInt64)
		case productreview.ForeignKeys[1]: // product_store_product_reviews
			values[i] = new(sql.NullInt64)
		case productreview.ForeignKeys[2]: // status_item_product_reviews
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ProductReview", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProductReview fields.
func (pr *ProductReview) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case productreview.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pr.ID = int(value.Int64)
		case productreview.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				pr.CreateTime = value.Time
			}
		case productreview.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				pr.UpdateTime = value.Time
			}
		case productreview.FieldStringRef:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field string_ref", values[i])
			} else if value.Valid {
				pr.StringRef = value.String
			}
		case productreview.FieldUserLoginID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_login_id", values[i])
			} else if value.Valid {
				pr.UserLoginID = value.String
			}
		case productreview.FieldPostedAnonymous:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field posted_anonymous", values[i])
			} else if value.Valid {
				pr.PostedAnonymous = productreview.PostedAnonymous(value.String)
			}
		case productreview.FieldPostedDateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field posted_date_time", values[i])
			} else if value.Valid {
				pr.PostedDateTime = value.Time
			}
		case productreview.FieldProductRating:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field product_rating", values[i])
			} else if value.Valid {
				pr.ProductRating = value.Float64
			}
		case productreview.FieldProductReview:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field product_review", values[i])
			} else if value.Valid {
				pr.ProductReview = value.String
			}
		case productreview.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field product_product_reviews", value)
			} else if value.Valid {
				pr.product_product_reviews = new(int)
				*pr.product_product_reviews = int(value.Int64)
			}
		case productreview.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field product_store_product_reviews", value)
			} else if value.Valid {
				pr.product_store_product_reviews = new(int)
				*pr.product_store_product_reviews = int(value.Int64)
			}
		case productreview.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field status_item_product_reviews", value)
			} else if value.Valid {
				pr.status_item_product_reviews = new(int)
				*pr.status_item_product_reviews = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryProductStore queries the "product_store" edge of the ProductReview entity.
func (pr *ProductReview) QueryProductStore() *ProductStoreQuery {
	return (&ProductReviewClient{config: pr.config}).QueryProductStore(pr)
}

// QueryProduct queries the "product" edge of the ProductReview entity.
func (pr *ProductReview) QueryProduct() *ProductQuery {
	return (&ProductReviewClient{config: pr.config}).QueryProduct(pr)
}

// QueryStatusItem queries the "status_item" edge of the ProductReview entity.
func (pr *ProductReview) QueryStatusItem() *StatusItemQuery {
	return (&ProductReviewClient{config: pr.config}).QueryStatusItem(pr)
}

// Update returns a builder for updating this ProductReview.
// Note that you need to call ProductReview.Unwrap() before calling this method if this ProductReview
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *ProductReview) Update() *ProductReviewUpdateOne {
	return (&ProductReviewClient{config: pr.config}).UpdateOne(pr)
}

// Unwrap unwraps the ProductReview entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *ProductReview) Unwrap() *ProductReview {
	tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProductReview is not a transactional entity")
	}
	pr.config.driver = tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *ProductReview) String() string {
	var builder strings.Builder
	builder.WriteString("ProductReview(")
	builder.WriteString(fmt.Sprintf("id=%v", pr.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(pr.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(pr.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", string_ref=")
	builder.WriteString(pr.StringRef)
	builder.WriteString(", user_login_id=")
	builder.WriteString(pr.UserLoginID)
	builder.WriteString(", posted_anonymous=")
	builder.WriteString(fmt.Sprintf("%v", pr.PostedAnonymous))
	builder.WriteString(", posted_date_time=")
	builder.WriteString(pr.PostedDateTime.Format(time.ANSIC))
	builder.WriteString(", product_rating=")
	builder.WriteString(fmt.Sprintf("%v", pr.ProductRating))
	builder.WriteString(", product_review=")
	builder.WriteString(pr.ProductReview)
	builder.WriteByte(')')
	return builder.String()
}

// ProductReviews is a parsable slice of ProductReview.
type ProductReviews []*ProductReview

func (pr ProductReviews) config(cfg config) {
	for _i := range pr {
		pr[_i].config = cfg
	}
}
