// Code generated by entc, DO NOT EDIT.

package productreview

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ProductReview {
	return predicate.ProductReview(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ProductReview {
	return predicate.ProductReview(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ProductReview {
	return predicate.ProductReview(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ProductReview {
	return predicate.ProductReview(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ProductReview {
	return predicate.ProductReview(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ProductReview {
	return predicate.ProductReview(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ProductReview {
	return predicate.ProductReview(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ProductReview {
	return predicate.ProductReview(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ProductReview {
	return predicate.ProductReview(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.ProductReview {
	return predicate.ProductReview(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.ProductReview {
	return predicate.ProductReview(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// StringRef applies equality check predicate on the "string_ref" field. It's identical to StringRefEQ.
func StringRef(v string) predicate.ProductReview {
	return predicate.ProductReview(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStringRef), v))
	})
}

// UserLoginID applies equality check predicate on the "user_login_id" field. It's identical to UserLoginIDEQ.
func UserLoginID(v string) predicate.ProductReview {
	return predicate.ProductReview(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserLoginID), v))
	})
}

// PostedDateTime applies equality check predicate on the "posted_date_time" field. It's identical to PostedDateTimeEQ.
func PostedDateTime(v time.Time) predicate.ProductReview {
	return predicate.ProductReview(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPostedDateTime), v))
	})
}

// ProductRating applies equality check predicate on the "product_rating" field. It's identical to ProductRatingEQ.
func ProductRating(v float64) predicate.ProductReview {
	return predicate.ProductReview(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProductRating), v))
	})
}

// ProductReview applies equality check predicate on the "product_review" field. It's identical to ProductReviewEQ.
func ProductReview(v string) predicate.ProductReview {
	return predicate.ProductReview(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProductReview), v))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.ProductReview {
	return predicate.ProductReview(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.ProductReview {
	return predicate.ProductReview(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.ProductReview {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductReview(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.ProductReview {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductReview(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.ProductReview {
	return predicate.ProductReview(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.ProductReview {
	return predicate.ProductReview(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.ProductReview {
	return predicate.ProductReview(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.ProductReview {
	return predicate.ProductReview(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), v))
	})
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.ProductReview {
	return predicate.ProductReview(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.ProductReview {
	return predicate.ProductReview(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.ProductReview {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductReview(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.ProductReview {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductReview(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.ProductReview {
	return predicate.ProductReview(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.ProductReview {
	return predicate.ProductReview(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.ProductReview {
	return predicate.ProductReview(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.ProductReview {
	return predicate.ProductReview(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateTime), v))
	})
}

// StringRefEQ applies the EQ predicate on the "string_ref" field.
func StringRefEQ(v string) predicate.ProductReview {
	return predicate.ProductReview(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStringRef), v))
	})
}

// StringRefNEQ applies the NEQ predicate on the "string_ref" field.
func StringRefNEQ(v string) predicate.ProductReview {
	return predicate.ProductReview(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStringRef), v))
	})
}

// StringRefIn applies the In predicate on the "string_ref" field.
func StringRefIn(vs ...string) predicate.ProductReview {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductReview(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStringRef), v...))
	})
}

// StringRefNotIn applies the NotIn predicate on the "string_ref" field.
func StringRefNotIn(vs ...string) predicate.ProductReview {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductReview(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStringRef), v...))
	})
}

// StringRefGT applies the GT predicate on the "string_ref" field.
func StringRefGT(v string) predicate.ProductReview {
	return predicate.ProductReview(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStringRef), v))
	})
}

// StringRefGTE applies the GTE predicate on the "string_ref" field.
func StringRefGTE(v string) predicate.ProductReview {
	return predicate.ProductReview(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStringRef), v))
	})
}

// StringRefLT applies the LT predicate on the "string_ref" field.
func StringRefLT(v string) predicate.ProductReview {
	return predicate.ProductReview(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStringRef), v))
	})
}

// StringRefLTE applies the LTE predicate on the "string_ref" field.
func StringRefLTE(v string) predicate.ProductReview {
	return predicate.ProductReview(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStringRef), v))
	})
}

// StringRefContains applies the Contains predicate on the "string_ref" field.
func StringRefContains(v string) predicate.ProductReview {
	return predicate.ProductReview(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStringRef), v))
	})
}

// StringRefHasPrefix applies the HasPrefix predicate on the "string_ref" field.
func StringRefHasPrefix(v string) predicate.ProductReview {
	return predicate.ProductReview(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStringRef), v))
	})
}

// StringRefHasSuffix applies the HasSuffix predicate on the "string_ref" field.
func StringRefHasSuffix(v string) predicate.ProductReview {
	return predicate.ProductReview(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStringRef), v))
	})
}

// StringRefIsNil applies the IsNil predicate on the "string_ref" field.
func StringRefIsNil() predicate.ProductReview {
	return predicate.ProductReview(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStringRef)))
	})
}

// StringRefNotNil applies the NotNil predicate on the "string_ref" field.
func StringRefNotNil() predicate.ProductReview {
	return predicate.ProductReview(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStringRef)))
	})
}

// StringRefEqualFold applies the EqualFold predicate on the "string_ref" field.
func StringRefEqualFold(v string) predicate.ProductReview {
	return predicate.ProductReview(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStringRef), v))
	})
}

// StringRefContainsFold applies the ContainsFold predicate on the "string_ref" field.
func StringRefContainsFold(v string) predicate.ProductReview {
	return predicate.ProductReview(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStringRef), v))
	})
}

// UserLoginIDEQ applies the EQ predicate on the "user_login_id" field.
func UserLoginIDEQ(v string) predicate.ProductReview {
	return predicate.ProductReview(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserLoginID), v))
	})
}

// UserLoginIDNEQ applies the NEQ predicate on the "user_login_id" field.
func UserLoginIDNEQ(v string) predicate.ProductReview {
	return predicate.ProductReview(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserLoginID), v))
	})
}

// UserLoginIDIn applies the In predicate on the "user_login_id" field.
func UserLoginIDIn(vs ...string) predicate.ProductReview {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductReview(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUserLoginID), v...))
	})
}

// UserLoginIDNotIn applies the NotIn predicate on the "user_login_id" field.
func UserLoginIDNotIn(vs ...string) predicate.ProductReview {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductReview(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUserLoginID), v...))
	})
}

// UserLoginIDGT applies the GT predicate on the "user_login_id" field.
func UserLoginIDGT(v string) predicate.ProductReview {
	return predicate.ProductReview(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUserLoginID), v))
	})
}

// UserLoginIDGTE applies the GTE predicate on the "user_login_id" field.
func UserLoginIDGTE(v string) predicate.ProductReview {
	return predicate.ProductReview(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUserLoginID), v))
	})
}

// UserLoginIDLT applies the LT predicate on the "user_login_id" field.
func UserLoginIDLT(v string) predicate.ProductReview {
	return predicate.ProductReview(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUserLoginID), v))
	})
}

// UserLoginIDLTE applies the LTE predicate on the "user_login_id" field.
func UserLoginIDLTE(v string) predicate.ProductReview {
	return predicate.ProductReview(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUserLoginID), v))
	})
}

// UserLoginIDContains applies the Contains predicate on the "user_login_id" field.
func UserLoginIDContains(v string) predicate.ProductReview {
	return predicate.ProductReview(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUserLoginID), v))
	})
}

// UserLoginIDHasPrefix applies the HasPrefix predicate on the "user_login_id" field.
func UserLoginIDHasPrefix(v string) predicate.ProductReview {
	return predicate.ProductReview(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUserLoginID), v))
	})
}

// UserLoginIDHasSuffix applies the HasSuffix predicate on the "user_login_id" field.
func UserLoginIDHasSuffix(v string) predicate.ProductReview {
	return predicate.ProductReview(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUserLoginID), v))
	})
}

// UserLoginIDIsNil applies the IsNil predicate on the "user_login_id" field.
func UserLoginIDIsNil() predicate.ProductReview {
	return predicate.ProductReview(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUserLoginID)))
	})
}

// UserLoginIDNotNil applies the NotNil predicate on the "user_login_id" field.
func UserLoginIDNotNil() predicate.ProductReview {
	return predicate.ProductReview(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUserLoginID)))
	})
}

// UserLoginIDEqualFold applies the EqualFold predicate on the "user_login_id" field.
func UserLoginIDEqualFold(v string) predicate.ProductReview {
	return predicate.ProductReview(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUserLoginID), v))
	})
}

// UserLoginIDContainsFold applies the ContainsFold predicate on the "user_login_id" field.
func UserLoginIDContainsFold(v string) predicate.ProductReview {
	return predicate.ProductReview(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUserLoginID), v))
	})
}

// PostedAnonymousEQ applies the EQ predicate on the "posted_anonymous" field.
func PostedAnonymousEQ(v PostedAnonymous) predicate.ProductReview {
	return predicate.ProductReview(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPostedAnonymous), v))
	})
}

// PostedAnonymousNEQ applies the NEQ predicate on the "posted_anonymous" field.
func PostedAnonymousNEQ(v PostedAnonymous) predicate.ProductReview {
	return predicate.ProductReview(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPostedAnonymous), v))
	})
}

// PostedAnonymousIn applies the In predicate on the "posted_anonymous" field.
func PostedAnonymousIn(vs ...PostedAnonymous) predicate.ProductReview {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductReview(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPostedAnonymous), v...))
	})
}

// PostedAnonymousNotIn applies the NotIn predicate on the "posted_anonymous" field.
func PostedAnonymousNotIn(vs ...PostedAnonymous) predicate.ProductReview {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductReview(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPostedAnonymous), v...))
	})
}

// PostedAnonymousIsNil applies the IsNil predicate on the "posted_anonymous" field.
func PostedAnonymousIsNil() predicate.ProductReview {
	return predicate.ProductReview(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPostedAnonymous)))
	})
}

// PostedAnonymousNotNil applies the NotNil predicate on the "posted_anonymous" field.
func PostedAnonymousNotNil() predicate.ProductReview {
	return predicate.ProductReview(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPostedAnonymous)))
	})
}

// PostedDateTimeEQ applies the EQ predicate on the "posted_date_time" field.
func PostedDateTimeEQ(v time.Time) predicate.ProductReview {
	return predicate.ProductReview(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPostedDateTime), v))
	})
}

// PostedDateTimeNEQ applies the NEQ predicate on the "posted_date_time" field.
func PostedDateTimeNEQ(v time.Time) predicate.ProductReview {
	return predicate.ProductReview(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPostedDateTime), v))
	})
}

// PostedDateTimeIn applies the In predicate on the "posted_date_time" field.
func PostedDateTimeIn(vs ...time.Time) predicate.ProductReview {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductReview(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPostedDateTime), v...))
	})
}

// PostedDateTimeNotIn applies the NotIn predicate on the "posted_date_time" field.
func PostedDateTimeNotIn(vs ...time.Time) predicate.ProductReview {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductReview(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPostedDateTime), v...))
	})
}

// PostedDateTimeGT applies the GT predicate on the "posted_date_time" field.
func PostedDateTimeGT(v time.Time) predicate.ProductReview {
	return predicate.ProductReview(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPostedDateTime), v))
	})
}

// PostedDateTimeGTE applies the GTE predicate on the "posted_date_time" field.
func PostedDateTimeGTE(v time.Time) predicate.ProductReview {
	return predicate.ProductReview(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPostedDateTime), v))
	})
}

// PostedDateTimeLT applies the LT predicate on the "posted_date_time" field.
func PostedDateTimeLT(v time.Time) predicate.ProductReview {
	return predicate.ProductReview(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPostedDateTime), v))
	})
}

// PostedDateTimeLTE applies the LTE predicate on the "posted_date_time" field.
func PostedDateTimeLTE(v time.Time) predicate.ProductReview {
	return predicate.ProductReview(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPostedDateTime), v))
	})
}

// PostedDateTimeIsNil applies the IsNil predicate on the "posted_date_time" field.
func PostedDateTimeIsNil() predicate.ProductReview {
	return predicate.ProductReview(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPostedDateTime)))
	})
}

// PostedDateTimeNotNil applies the NotNil predicate on the "posted_date_time" field.
func PostedDateTimeNotNil() predicate.ProductReview {
	return predicate.ProductReview(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPostedDateTime)))
	})
}

// ProductRatingEQ applies the EQ predicate on the "product_rating" field.
func ProductRatingEQ(v float64) predicate.ProductReview {
	return predicate.ProductReview(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProductRating), v))
	})
}

// ProductRatingNEQ applies the NEQ predicate on the "product_rating" field.
func ProductRatingNEQ(v float64) predicate.ProductReview {
	return predicate.ProductReview(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProductRating), v))
	})
}

// ProductRatingIn applies the In predicate on the "product_rating" field.
func ProductRatingIn(vs ...float64) predicate.ProductReview {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductReview(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldProductRating), v...))
	})
}

// ProductRatingNotIn applies the NotIn predicate on the "product_rating" field.
func ProductRatingNotIn(vs ...float64) predicate.ProductReview {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductReview(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldProductRating), v...))
	})
}

// ProductRatingGT applies the GT predicate on the "product_rating" field.
func ProductRatingGT(v float64) predicate.ProductReview {
	return predicate.ProductReview(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProductRating), v))
	})
}

// ProductRatingGTE applies the GTE predicate on the "product_rating" field.
func ProductRatingGTE(v float64) predicate.ProductReview {
	return predicate.ProductReview(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProductRating), v))
	})
}

// ProductRatingLT applies the LT predicate on the "product_rating" field.
func ProductRatingLT(v float64) predicate.ProductReview {
	return predicate.ProductReview(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProductRating), v))
	})
}

// ProductRatingLTE applies the LTE predicate on the "product_rating" field.
func ProductRatingLTE(v float64) predicate.ProductReview {
	return predicate.ProductReview(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProductRating), v))
	})
}

// ProductRatingIsNil applies the IsNil predicate on the "product_rating" field.
func ProductRatingIsNil() predicate.ProductReview {
	return predicate.ProductReview(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldProductRating)))
	})
}

// ProductRatingNotNil applies the NotNil predicate on the "product_rating" field.
func ProductRatingNotNil() predicate.ProductReview {
	return predicate.ProductReview(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldProductRating)))
	})
}

// ProductReviewEQ applies the EQ predicate on the "product_review" field.
func ProductReviewEQ(v string) predicate.ProductReview {
	return predicate.ProductReview(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProductReview), v))
	})
}

// ProductReviewNEQ applies the NEQ predicate on the "product_review" field.
func ProductReviewNEQ(v string) predicate.ProductReview {
	return predicate.ProductReview(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProductReview), v))
	})
}

// ProductReviewIn applies the In predicate on the "product_review" field.
func ProductReviewIn(vs ...string) predicate.ProductReview {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductReview(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldProductReview), v...))
	})
}

// ProductReviewNotIn applies the NotIn predicate on the "product_review" field.
func ProductReviewNotIn(vs ...string) predicate.ProductReview {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductReview(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldProductReview), v...))
	})
}

// ProductReviewGT applies the GT predicate on the "product_review" field.
func ProductReviewGT(v string) predicate.ProductReview {
	return predicate.ProductReview(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProductReview), v))
	})
}

// ProductReviewGTE applies the GTE predicate on the "product_review" field.
func ProductReviewGTE(v string) predicate.ProductReview {
	return predicate.ProductReview(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProductReview), v))
	})
}

// ProductReviewLT applies the LT predicate on the "product_review" field.
func ProductReviewLT(v string) predicate.ProductReview {
	return predicate.ProductReview(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProductReview), v))
	})
}

// ProductReviewLTE applies the LTE predicate on the "product_review" field.
func ProductReviewLTE(v string) predicate.ProductReview {
	return predicate.ProductReview(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProductReview), v))
	})
}

// ProductReviewContains applies the Contains predicate on the "product_review" field.
func ProductReviewContains(v string) predicate.ProductReview {
	return predicate.ProductReview(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldProductReview), v))
	})
}

// ProductReviewHasPrefix applies the HasPrefix predicate on the "product_review" field.
func ProductReviewHasPrefix(v string) predicate.ProductReview {
	return predicate.ProductReview(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldProductReview), v))
	})
}

// ProductReviewHasSuffix applies the HasSuffix predicate on the "product_review" field.
func ProductReviewHasSuffix(v string) predicate.ProductReview {
	return predicate.ProductReview(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldProductReview), v))
	})
}

// ProductReviewIsNil applies the IsNil predicate on the "product_review" field.
func ProductReviewIsNil() predicate.ProductReview {
	return predicate.ProductReview(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldProductReview)))
	})
}

// ProductReviewNotNil applies the NotNil predicate on the "product_review" field.
func ProductReviewNotNil() predicate.ProductReview {
	return predicate.ProductReview(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldProductReview)))
	})
}

// ProductReviewEqualFold applies the EqualFold predicate on the "product_review" field.
func ProductReviewEqualFold(v string) predicate.ProductReview {
	return predicate.ProductReview(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldProductReview), v))
	})
}

// ProductReviewContainsFold applies the ContainsFold predicate on the "product_review" field.
func ProductReviewContainsFold(v string) predicate.ProductReview {
	return predicate.ProductReview(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldProductReview), v))
	})
}

// HasProductStore applies the HasEdge predicate on the "product_store" edge.
func HasProductStore() predicate.ProductReview {
	return predicate.ProductReview(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProductStoreTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProductStoreTable, ProductStoreColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProductStoreWith applies the HasEdge predicate on the "product_store" edge with a given conditions (other predicates).
func HasProductStoreWith(preds ...predicate.ProductStore) predicate.ProductReview {
	return predicate.ProductReview(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProductStoreInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProductStoreTable, ProductStoreColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProduct applies the HasEdge predicate on the "product" edge.
func HasProduct() predicate.ProductReview {
	return predicate.ProductReview(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProductTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProductTable, ProductColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProductWith applies the HasEdge predicate on the "product" edge with a given conditions (other predicates).
func HasProductWith(preds ...predicate.Product) predicate.ProductReview {
	return predicate.ProductReview(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProductInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProductTable, ProductColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasStatusItem applies the HasEdge predicate on the "status_item" edge.
func HasStatusItem() predicate.ProductReview {
	return predicate.ProductReview(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StatusItemTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, StatusItemTable, StatusItemColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStatusItemWith applies the HasEdge predicate on the "status_item" edge with a given conditions (other predicates).
func HasStatusItemWith(preds ...predicate.StatusItem) predicate.ProductReview {
	return predicate.ProductReview(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StatusItemInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, StatusItemTable, StatusItemColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ProductReview) predicate.ProductReview {
	return predicate.ProductReview(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ProductReview) predicate.ProductReview {
	return predicate.ProductReview(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ProductReview) predicate.ProductReview {
	return predicate.ProductReview(func(s *sql.Selector) {
		p(s.Not())
	})
}
