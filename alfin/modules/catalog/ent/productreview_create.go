// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/product"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productreview"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productstore"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/statusitem"
)

// ProductReviewCreate is the builder for creating a ProductReview entity.
type ProductReviewCreate struct {
	config
	mutation *ProductReviewMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (prc *ProductReviewCreate) SetCreateTime(t time.Time) *ProductReviewCreate {
	prc.mutation.SetCreateTime(t)
	return prc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (prc *ProductReviewCreate) SetNillableCreateTime(t *time.Time) *ProductReviewCreate {
	if t != nil {
		prc.SetCreateTime(*t)
	}
	return prc
}

// SetUpdateTime sets the "update_time" field.
func (prc *ProductReviewCreate) SetUpdateTime(t time.Time) *ProductReviewCreate {
	prc.mutation.SetUpdateTime(t)
	return prc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (prc *ProductReviewCreate) SetNillableUpdateTime(t *time.Time) *ProductReviewCreate {
	if t != nil {
		prc.SetUpdateTime(*t)
	}
	return prc
}

// SetStringRef sets the "string_ref" field.
func (prc *ProductReviewCreate) SetStringRef(s string) *ProductReviewCreate {
	prc.mutation.SetStringRef(s)
	return prc
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (prc *ProductReviewCreate) SetNillableStringRef(s *string) *ProductReviewCreate {
	if s != nil {
		prc.SetStringRef(*s)
	}
	return prc
}

// SetUserLoginID sets the "user_login_id" field.
func (prc *ProductReviewCreate) SetUserLoginID(s string) *ProductReviewCreate {
	prc.mutation.SetUserLoginID(s)
	return prc
}

// SetNillableUserLoginID sets the "user_login_id" field if the given value is not nil.
func (prc *ProductReviewCreate) SetNillableUserLoginID(s *string) *ProductReviewCreate {
	if s != nil {
		prc.SetUserLoginID(*s)
	}
	return prc
}

// SetPostedAnonymous sets the "posted_anonymous" field.
func (prc *ProductReviewCreate) SetPostedAnonymous(pa productreview.PostedAnonymous) *ProductReviewCreate {
	prc.mutation.SetPostedAnonymous(pa)
	return prc
}

// SetNillablePostedAnonymous sets the "posted_anonymous" field if the given value is not nil.
func (prc *ProductReviewCreate) SetNillablePostedAnonymous(pa *productreview.PostedAnonymous) *ProductReviewCreate {
	if pa != nil {
		prc.SetPostedAnonymous(*pa)
	}
	return prc
}

// SetPostedDateTime sets the "posted_date_time" field.
func (prc *ProductReviewCreate) SetPostedDateTime(t time.Time) *ProductReviewCreate {
	prc.mutation.SetPostedDateTime(t)
	return prc
}

// SetNillablePostedDateTime sets the "posted_date_time" field if the given value is not nil.
func (prc *ProductReviewCreate) SetNillablePostedDateTime(t *time.Time) *ProductReviewCreate {
	if t != nil {
		prc.SetPostedDateTime(*t)
	}
	return prc
}

// SetProductRating sets the "product_rating" field.
func (prc *ProductReviewCreate) SetProductRating(f float64) *ProductReviewCreate {
	prc.mutation.SetProductRating(f)
	return prc
}

// SetNillableProductRating sets the "product_rating" field if the given value is not nil.
func (prc *ProductReviewCreate) SetNillableProductRating(f *float64) *ProductReviewCreate {
	if f != nil {
		prc.SetProductRating(*f)
	}
	return prc
}

// SetProductReview sets the "product_review" field.
func (prc *ProductReviewCreate) SetProductReview(s string) *ProductReviewCreate {
	prc.mutation.SetProductReview(s)
	return prc
}

// SetNillableProductReview sets the "product_review" field if the given value is not nil.
func (prc *ProductReviewCreate) SetNillableProductReview(s *string) *ProductReviewCreate {
	if s != nil {
		prc.SetProductReview(*s)
	}
	return prc
}

// SetProductStoreID sets the "product_store" edge to the ProductStore entity by ID.
func (prc *ProductReviewCreate) SetProductStoreID(id int) *ProductReviewCreate {
	prc.mutation.SetProductStoreID(id)
	return prc
}

// SetNillableProductStoreID sets the "product_store" edge to the ProductStore entity by ID if the given value is not nil.
func (prc *ProductReviewCreate) SetNillableProductStoreID(id *int) *ProductReviewCreate {
	if id != nil {
		prc = prc.SetProductStoreID(*id)
	}
	return prc
}

// SetProductStore sets the "product_store" edge to the ProductStore entity.
func (prc *ProductReviewCreate) SetProductStore(p *ProductStore) *ProductReviewCreate {
	return prc.SetProductStoreID(p.ID)
}

// SetProductID sets the "product" edge to the Product entity by ID.
func (prc *ProductReviewCreate) SetProductID(id int) *ProductReviewCreate {
	prc.mutation.SetProductID(id)
	return prc
}

// SetNillableProductID sets the "product" edge to the Product entity by ID if the given value is not nil.
func (prc *ProductReviewCreate) SetNillableProductID(id *int) *ProductReviewCreate {
	if id != nil {
		prc = prc.SetProductID(*id)
	}
	return prc
}

// SetProduct sets the "product" edge to the Product entity.
func (prc *ProductReviewCreate) SetProduct(p *Product) *ProductReviewCreate {
	return prc.SetProductID(p.ID)
}

// SetStatusItemID sets the "status_item" edge to the StatusItem entity by ID.
func (prc *ProductReviewCreate) SetStatusItemID(id int) *ProductReviewCreate {
	prc.mutation.SetStatusItemID(id)
	return prc
}

// SetNillableStatusItemID sets the "status_item" edge to the StatusItem entity by ID if the given value is not nil.
func (prc *ProductReviewCreate) SetNillableStatusItemID(id *int) *ProductReviewCreate {
	if id != nil {
		prc = prc.SetStatusItemID(*id)
	}
	return prc
}

// SetStatusItem sets the "status_item" edge to the StatusItem entity.
func (prc *ProductReviewCreate) SetStatusItem(s *StatusItem) *ProductReviewCreate {
	return prc.SetStatusItemID(s.ID)
}

// Mutation returns the ProductReviewMutation object of the builder.
func (prc *ProductReviewCreate) Mutation() *ProductReviewMutation {
	return prc.mutation
}

// Save creates the ProductReview in the database.
func (prc *ProductReviewCreate) Save(ctx context.Context) (*ProductReview, error) {
	var (
		err  error
		node *ProductReview
	)
	prc.defaults()
	if len(prc.hooks) == 0 {
		if err = prc.check(); err != nil {
			return nil, err
		}
		node, err = prc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProductReviewMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = prc.check(); err != nil {
				return nil, err
			}
			prc.mutation = mutation
			if node, err = prc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(prc.hooks) - 1; i >= 0; i-- {
			mut = prc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, prc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (prc *ProductReviewCreate) SaveX(ctx context.Context) *ProductReview {
	v, err := prc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (prc *ProductReviewCreate) defaults() {
	if _, ok := prc.mutation.CreateTime(); !ok {
		v := productreview.DefaultCreateTime()
		prc.mutation.SetCreateTime(v)
	}
	if _, ok := prc.mutation.UpdateTime(); !ok {
		v := productreview.DefaultUpdateTime()
		prc.mutation.SetUpdateTime(v)
	}
	if _, ok := prc.mutation.PostedDateTime(); !ok {
		v := productreview.DefaultPostedDateTime()
		prc.mutation.SetPostedDateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (prc *ProductReviewCreate) check() error {
	if _, ok := prc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New("ent: missing required field \"create_time\"")}
	}
	if _, ok := prc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New("ent: missing required field \"update_time\"")}
	}
	if v, ok := prc.mutation.PostedAnonymous(); ok {
		if err := productreview.PostedAnonymousValidator(v); err != nil {
			return &ValidationError{Name: "posted_anonymous", err: fmt.Errorf("ent: validator failed for field \"posted_anonymous\": %w", err)}
		}
	}
	return nil
}

func (prc *ProductReviewCreate) sqlSave(ctx context.Context) (*ProductReview, error) {
	_node, _spec := prc.createSpec()
	if err := sqlgraph.CreateNode(ctx, prc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (prc *ProductReviewCreate) createSpec() (*ProductReview, *sqlgraph.CreateSpec) {
	var (
		_node = &ProductReview{config: prc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: productreview.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: productreview.FieldID,
			},
		}
	)
	if value, ok := prc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productreview.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := prc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productreview.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := prc.mutation.StringRef(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productreview.FieldStringRef,
		})
		_node.StringRef = value
	}
	if value, ok := prc.mutation.UserLoginID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productreview.FieldUserLoginID,
		})
		_node.UserLoginID = value
	}
	if value, ok := prc.mutation.PostedAnonymous(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productreview.FieldPostedAnonymous,
		})
		_node.PostedAnonymous = value
	}
	if value, ok := prc.mutation.PostedDateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productreview.FieldPostedDateTime,
		})
		_node.PostedDateTime = value
	}
	if value, ok := prc.mutation.ProductRating(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: productreview.FieldProductRating,
		})
		_node.ProductRating = value
	}
	if value, ok := prc.mutation.ProductReview(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productreview.FieldProductReview,
		})
		_node.ProductReview = value
	}
	if nodes := prc.mutation.ProductStoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productreview.ProductStoreTable,
			Columns: []string{productreview.ProductStoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productstore.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.product_store_product_reviews = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := prc.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productreview.ProductTable,
			Columns: []string{productreview.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.product_product_reviews = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := prc.mutation.StatusItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productreview.StatusItemTable,
			Columns: []string{productreview.StatusItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.status_item_product_reviews = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ProductReviewCreateBulk is the builder for creating many ProductReview entities in bulk.
type ProductReviewCreateBulk struct {
	config
	builders []*ProductReviewCreate
}

// Save creates the ProductReview entities in the database.
func (prcb *ProductReviewCreateBulk) Save(ctx context.Context) ([]*ProductReview, error) {
	specs := make([]*sqlgraph.CreateSpec, len(prcb.builders))
	nodes := make([]*ProductReview, len(prcb.builders))
	mutators := make([]Mutator, len(prcb.builders))
	for i := range prcb.builders {
		func(i int, root context.Context) {
			builder := prcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProductReviewMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, prcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, prcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, prcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (prcb *ProductReviewCreateBulk) SaveX(ctx context.Context) []*ProductReview {
	v, err := prcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
