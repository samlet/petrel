// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/predicate"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/product"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productreview"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productstore"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/statusitem"
)

// ProductReviewUpdate is the builder for updating ProductReview entities.
type ProductReviewUpdate struct {
	config
	hooks    []Hook
	mutation *ProductReviewMutation
}

// Where adds a new predicate for the ProductReviewUpdate builder.
func (pru *ProductReviewUpdate) Where(ps ...predicate.ProductReview) *ProductReviewUpdate {
	pru.mutation.predicates = append(pru.mutation.predicates, ps...)
	return pru
}

// SetStringRef sets the "string_ref" field.
func (pru *ProductReviewUpdate) SetStringRef(s string) *ProductReviewUpdate {
	pru.mutation.SetStringRef(s)
	return pru
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (pru *ProductReviewUpdate) SetNillableStringRef(s *string) *ProductReviewUpdate {
	if s != nil {
		pru.SetStringRef(*s)
	}
	return pru
}

// ClearStringRef clears the value of the "string_ref" field.
func (pru *ProductReviewUpdate) ClearStringRef() *ProductReviewUpdate {
	pru.mutation.ClearStringRef()
	return pru
}

// SetUserLoginID sets the "user_login_id" field.
func (pru *ProductReviewUpdate) SetUserLoginID(s string) *ProductReviewUpdate {
	pru.mutation.SetUserLoginID(s)
	return pru
}

// SetNillableUserLoginID sets the "user_login_id" field if the given value is not nil.
func (pru *ProductReviewUpdate) SetNillableUserLoginID(s *string) *ProductReviewUpdate {
	if s != nil {
		pru.SetUserLoginID(*s)
	}
	return pru
}

// ClearUserLoginID clears the value of the "user_login_id" field.
func (pru *ProductReviewUpdate) ClearUserLoginID() *ProductReviewUpdate {
	pru.mutation.ClearUserLoginID()
	return pru
}

// SetPostedAnonymous sets the "posted_anonymous" field.
func (pru *ProductReviewUpdate) SetPostedAnonymous(pa productreview.PostedAnonymous) *ProductReviewUpdate {
	pru.mutation.SetPostedAnonymous(pa)
	return pru
}

// SetNillablePostedAnonymous sets the "posted_anonymous" field if the given value is not nil.
func (pru *ProductReviewUpdate) SetNillablePostedAnonymous(pa *productreview.PostedAnonymous) *ProductReviewUpdate {
	if pa != nil {
		pru.SetPostedAnonymous(*pa)
	}
	return pru
}

// ClearPostedAnonymous clears the value of the "posted_anonymous" field.
func (pru *ProductReviewUpdate) ClearPostedAnonymous() *ProductReviewUpdate {
	pru.mutation.ClearPostedAnonymous()
	return pru
}

// SetPostedDateTime sets the "posted_date_time" field.
func (pru *ProductReviewUpdate) SetPostedDateTime(t time.Time) *ProductReviewUpdate {
	pru.mutation.SetPostedDateTime(t)
	return pru
}

// SetNillablePostedDateTime sets the "posted_date_time" field if the given value is not nil.
func (pru *ProductReviewUpdate) SetNillablePostedDateTime(t *time.Time) *ProductReviewUpdate {
	if t != nil {
		pru.SetPostedDateTime(*t)
	}
	return pru
}

// ClearPostedDateTime clears the value of the "posted_date_time" field.
func (pru *ProductReviewUpdate) ClearPostedDateTime() *ProductReviewUpdate {
	pru.mutation.ClearPostedDateTime()
	return pru
}

// SetProductRating sets the "product_rating" field.
func (pru *ProductReviewUpdate) SetProductRating(f float64) *ProductReviewUpdate {
	pru.mutation.ResetProductRating()
	pru.mutation.SetProductRating(f)
	return pru
}

// SetNillableProductRating sets the "product_rating" field if the given value is not nil.
func (pru *ProductReviewUpdate) SetNillableProductRating(f *float64) *ProductReviewUpdate {
	if f != nil {
		pru.SetProductRating(*f)
	}
	return pru
}

// AddProductRating adds f to the "product_rating" field.
func (pru *ProductReviewUpdate) AddProductRating(f float64) *ProductReviewUpdate {
	pru.mutation.AddProductRating(f)
	return pru
}

// ClearProductRating clears the value of the "product_rating" field.
func (pru *ProductReviewUpdate) ClearProductRating() *ProductReviewUpdate {
	pru.mutation.ClearProductRating()
	return pru
}

// SetProductReview sets the "product_review" field.
func (pru *ProductReviewUpdate) SetProductReview(s string) *ProductReviewUpdate {
	pru.mutation.SetProductReview(s)
	return pru
}

// SetNillableProductReview sets the "product_review" field if the given value is not nil.
func (pru *ProductReviewUpdate) SetNillableProductReview(s *string) *ProductReviewUpdate {
	if s != nil {
		pru.SetProductReview(*s)
	}
	return pru
}

// ClearProductReview clears the value of the "product_review" field.
func (pru *ProductReviewUpdate) ClearProductReview() *ProductReviewUpdate {
	pru.mutation.ClearProductReview()
	return pru
}

// SetProductStoreID sets the "product_store" edge to the ProductStore entity by ID.
func (pru *ProductReviewUpdate) SetProductStoreID(id int) *ProductReviewUpdate {
	pru.mutation.SetProductStoreID(id)
	return pru
}

// SetNillableProductStoreID sets the "product_store" edge to the ProductStore entity by ID if the given value is not nil.
func (pru *ProductReviewUpdate) SetNillableProductStoreID(id *int) *ProductReviewUpdate {
	if id != nil {
		pru = pru.SetProductStoreID(*id)
	}
	return pru
}

// SetProductStore sets the "product_store" edge to the ProductStore entity.
func (pru *ProductReviewUpdate) SetProductStore(p *ProductStore) *ProductReviewUpdate {
	return pru.SetProductStoreID(p.ID)
}

// SetProductID sets the "product" edge to the Product entity by ID.
func (pru *ProductReviewUpdate) SetProductID(id int) *ProductReviewUpdate {
	pru.mutation.SetProductID(id)
	return pru
}

// SetNillableProductID sets the "product" edge to the Product entity by ID if the given value is not nil.
func (pru *ProductReviewUpdate) SetNillableProductID(id *int) *ProductReviewUpdate {
	if id != nil {
		pru = pru.SetProductID(*id)
	}
	return pru
}

// SetProduct sets the "product" edge to the Product entity.
func (pru *ProductReviewUpdate) SetProduct(p *Product) *ProductReviewUpdate {
	return pru.SetProductID(p.ID)
}

// SetStatusItemID sets the "status_item" edge to the StatusItem entity by ID.
func (pru *ProductReviewUpdate) SetStatusItemID(id int) *ProductReviewUpdate {
	pru.mutation.SetStatusItemID(id)
	return pru
}

// SetNillableStatusItemID sets the "status_item" edge to the StatusItem entity by ID if the given value is not nil.
func (pru *ProductReviewUpdate) SetNillableStatusItemID(id *int) *ProductReviewUpdate {
	if id != nil {
		pru = pru.SetStatusItemID(*id)
	}
	return pru
}

// SetStatusItem sets the "status_item" edge to the StatusItem entity.
func (pru *ProductReviewUpdate) SetStatusItem(s *StatusItem) *ProductReviewUpdate {
	return pru.SetStatusItemID(s.ID)
}

// Mutation returns the ProductReviewMutation object of the builder.
func (pru *ProductReviewUpdate) Mutation() *ProductReviewMutation {
	return pru.mutation
}

// ClearProductStore clears the "product_store" edge to the ProductStore entity.
func (pru *ProductReviewUpdate) ClearProductStore() *ProductReviewUpdate {
	pru.mutation.ClearProductStore()
	return pru
}

// ClearProduct clears the "product" edge to the Product entity.
func (pru *ProductReviewUpdate) ClearProduct() *ProductReviewUpdate {
	pru.mutation.ClearProduct()
	return pru
}

// ClearStatusItem clears the "status_item" edge to the StatusItem entity.
func (pru *ProductReviewUpdate) ClearStatusItem() *ProductReviewUpdate {
	pru.mutation.ClearStatusItem()
	return pru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pru *ProductReviewUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	pru.defaults()
	if len(pru.hooks) == 0 {
		if err = pru.check(); err != nil {
			return 0, err
		}
		affected, err = pru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProductReviewMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pru.check(); err != nil {
				return 0, err
			}
			pru.mutation = mutation
			affected, err = pru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pru.hooks) - 1; i >= 0; i-- {
			mut = pru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pru *ProductReviewUpdate) SaveX(ctx context.Context) int {
	affected, err := pru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pru *ProductReviewUpdate) Exec(ctx context.Context) error {
	_, err := pru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pru *ProductReviewUpdate) ExecX(ctx context.Context) {
	if err := pru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pru *ProductReviewUpdate) defaults() {
	if _, ok := pru.mutation.UpdateTime(); !ok {
		v := productreview.UpdateDefaultUpdateTime()
		pru.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pru *ProductReviewUpdate) check() error {
	if v, ok := pru.mutation.PostedAnonymous(); ok {
		if err := productreview.PostedAnonymousValidator(v); err != nil {
			return &ValidationError{Name: "posted_anonymous", err: fmt.Errorf("ent: validator failed for field \"posted_anonymous\": %w", err)}
		}
	}
	return nil
}

func (pru *ProductReviewUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   productreview.Table,
			Columns: productreview.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: productreview.FieldID,
			},
		},
	}
	if ps := pru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pru.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productreview.FieldUpdateTime,
		})
	}
	if value, ok := pru.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productreview.FieldStringRef,
		})
	}
	if pru.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productreview.FieldStringRef,
		})
	}
	if value, ok := pru.mutation.UserLoginID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productreview.FieldUserLoginID,
		})
	}
	if pru.mutation.UserLoginIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productreview.FieldUserLoginID,
		})
	}
	if value, ok := pru.mutation.PostedAnonymous(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productreview.FieldPostedAnonymous,
		})
	}
	if pru.mutation.PostedAnonymousCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productreview.FieldPostedAnonymous,
		})
	}
	if value, ok := pru.mutation.PostedDateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productreview.FieldPostedDateTime,
		})
	}
	if pru.mutation.PostedDateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: productreview.FieldPostedDateTime,
		})
	}
	if value, ok := pru.mutation.ProductRating(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: productreview.FieldProductRating,
		})
	}
	if value, ok := pru.mutation.AddedProductRating(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: productreview.FieldProductRating,
		})
	}
	if pru.mutation.ProductRatingCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: productreview.FieldProductRating,
		})
	}
	if value, ok := pru.mutation.ProductReview(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productreview.FieldProductReview,
		})
	}
	if pru.mutation.ProductReviewCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productreview.FieldProductReview,
		})
	}
	if pru.mutation.ProductStoreCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productreview.ProductStoreTable,
			Columns: []string{productreview.ProductStoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productstore.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pru.mutation.ProductStoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productreview.ProductStoreTable,
			Columns: []string{productreview.ProductStoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productstore.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pru.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productreview.ProductTable,
			Columns: []string{productreview.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pru.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productreview.ProductTable,
			Columns: []string{productreview.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pru.mutation.StatusItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productreview.StatusItemTable,
			Columns: []string{productreview.StatusItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusitem.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pru.mutation.StatusItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productreview.StatusItemTable,
			Columns: []string{productreview.StatusItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productreview.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ProductReviewUpdateOne is the builder for updating a single ProductReview entity.
type ProductReviewUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProductReviewMutation
}

// SetStringRef sets the "string_ref" field.
func (pruo *ProductReviewUpdateOne) SetStringRef(s string) *ProductReviewUpdateOne {
	pruo.mutation.SetStringRef(s)
	return pruo
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (pruo *ProductReviewUpdateOne) SetNillableStringRef(s *string) *ProductReviewUpdateOne {
	if s != nil {
		pruo.SetStringRef(*s)
	}
	return pruo
}

// ClearStringRef clears the value of the "string_ref" field.
func (pruo *ProductReviewUpdateOne) ClearStringRef() *ProductReviewUpdateOne {
	pruo.mutation.ClearStringRef()
	return pruo
}

// SetUserLoginID sets the "user_login_id" field.
func (pruo *ProductReviewUpdateOne) SetUserLoginID(s string) *ProductReviewUpdateOne {
	pruo.mutation.SetUserLoginID(s)
	return pruo
}

// SetNillableUserLoginID sets the "user_login_id" field if the given value is not nil.
func (pruo *ProductReviewUpdateOne) SetNillableUserLoginID(s *string) *ProductReviewUpdateOne {
	if s != nil {
		pruo.SetUserLoginID(*s)
	}
	return pruo
}

// ClearUserLoginID clears the value of the "user_login_id" field.
func (pruo *ProductReviewUpdateOne) ClearUserLoginID() *ProductReviewUpdateOne {
	pruo.mutation.ClearUserLoginID()
	return pruo
}

// SetPostedAnonymous sets the "posted_anonymous" field.
func (pruo *ProductReviewUpdateOne) SetPostedAnonymous(pa productreview.PostedAnonymous) *ProductReviewUpdateOne {
	pruo.mutation.SetPostedAnonymous(pa)
	return pruo
}

// SetNillablePostedAnonymous sets the "posted_anonymous" field if the given value is not nil.
func (pruo *ProductReviewUpdateOne) SetNillablePostedAnonymous(pa *productreview.PostedAnonymous) *ProductReviewUpdateOne {
	if pa != nil {
		pruo.SetPostedAnonymous(*pa)
	}
	return pruo
}

// ClearPostedAnonymous clears the value of the "posted_anonymous" field.
func (pruo *ProductReviewUpdateOne) ClearPostedAnonymous() *ProductReviewUpdateOne {
	pruo.mutation.ClearPostedAnonymous()
	return pruo
}

// SetPostedDateTime sets the "posted_date_time" field.
func (pruo *ProductReviewUpdateOne) SetPostedDateTime(t time.Time) *ProductReviewUpdateOne {
	pruo.mutation.SetPostedDateTime(t)
	return pruo
}

// SetNillablePostedDateTime sets the "posted_date_time" field if the given value is not nil.
func (pruo *ProductReviewUpdateOne) SetNillablePostedDateTime(t *time.Time) *ProductReviewUpdateOne {
	if t != nil {
		pruo.SetPostedDateTime(*t)
	}
	return pruo
}

// ClearPostedDateTime clears the value of the "posted_date_time" field.
func (pruo *ProductReviewUpdateOne) ClearPostedDateTime() *ProductReviewUpdateOne {
	pruo.mutation.ClearPostedDateTime()
	return pruo
}

// SetProductRating sets the "product_rating" field.
func (pruo *ProductReviewUpdateOne) SetProductRating(f float64) *ProductReviewUpdateOne {
	pruo.mutation.ResetProductRating()
	pruo.mutation.SetProductRating(f)
	return pruo
}

// SetNillableProductRating sets the "product_rating" field if the given value is not nil.
func (pruo *ProductReviewUpdateOne) SetNillableProductRating(f *float64) *ProductReviewUpdateOne {
	if f != nil {
		pruo.SetProductRating(*f)
	}
	return pruo
}

// AddProductRating adds f to the "product_rating" field.
func (pruo *ProductReviewUpdateOne) AddProductRating(f float64) *ProductReviewUpdateOne {
	pruo.mutation.AddProductRating(f)
	return pruo
}

// ClearProductRating clears the value of the "product_rating" field.
func (pruo *ProductReviewUpdateOne) ClearProductRating() *ProductReviewUpdateOne {
	pruo.mutation.ClearProductRating()
	return pruo
}

// SetProductReview sets the "product_review" field.
func (pruo *ProductReviewUpdateOne) SetProductReview(s string) *ProductReviewUpdateOne {
	pruo.mutation.SetProductReview(s)
	return pruo
}

// SetNillableProductReview sets the "product_review" field if the given value is not nil.
func (pruo *ProductReviewUpdateOne) SetNillableProductReview(s *string) *ProductReviewUpdateOne {
	if s != nil {
		pruo.SetProductReview(*s)
	}
	return pruo
}

// ClearProductReview clears the value of the "product_review" field.
func (pruo *ProductReviewUpdateOne) ClearProductReview() *ProductReviewUpdateOne {
	pruo.mutation.ClearProductReview()
	return pruo
}

// SetProductStoreID sets the "product_store" edge to the ProductStore entity by ID.
func (pruo *ProductReviewUpdateOne) SetProductStoreID(id int) *ProductReviewUpdateOne {
	pruo.mutation.SetProductStoreID(id)
	return pruo
}

// SetNillableProductStoreID sets the "product_store" edge to the ProductStore entity by ID if the given value is not nil.
func (pruo *ProductReviewUpdateOne) SetNillableProductStoreID(id *int) *ProductReviewUpdateOne {
	if id != nil {
		pruo = pruo.SetProductStoreID(*id)
	}
	return pruo
}

// SetProductStore sets the "product_store" edge to the ProductStore entity.
func (pruo *ProductReviewUpdateOne) SetProductStore(p *ProductStore) *ProductReviewUpdateOne {
	return pruo.SetProductStoreID(p.ID)
}

// SetProductID sets the "product" edge to the Product entity by ID.
func (pruo *ProductReviewUpdateOne) SetProductID(id int) *ProductReviewUpdateOne {
	pruo.mutation.SetProductID(id)
	return pruo
}

// SetNillableProductID sets the "product" edge to the Product entity by ID if the given value is not nil.
func (pruo *ProductReviewUpdateOne) SetNillableProductID(id *int) *ProductReviewUpdateOne {
	if id != nil {
		pruo = pruo.SetProductID(*id)
	}
	return pruo
}

// SetProduct sets the "product" edge to the Product entity.
func (pruo *ProductReviewUpdateOne) SetProduct(p *Product) *ProductReviewUpdateOne {
	return pruo.SetProductID(p.ID)
}

// SetStatusItemID sets the "status_item" edge to the StatusItem entity by ID.
func (pruo *ProductReviewUpdateOne) SetStatusItemID(id int) *ProductReviewUpdateOne {
	pruo.mutation.SetStatusItemID(id)
	return pruo
}

// SetNillableStatusItemID sets the "status_item" edge to the StatusItem entity by ID if the given value is not nil.
func (pruo *ProductReviewUpdateOne) SetNillableStatusItemID(id *int) *ProductReviewUpdateOne {
	if id != nil {
		pruo = pruo.SetStatusItemID(*id)
	}
	return pruo
}

// SetStatusItem sets the "status_item" edge to the StatusItem entity.
func (pruo *ProductReviewUpdateOne) SetStatusItem(s *StatusItem) *ProductReviewUpdateOne {
	return pruo.SetStatusItemID(s.ID)
}

// Mutation returns the ProductReviewMutation object of the builder.
func (pruo *ProductReviewUpdateOne) Mutation() *ProductReviewMutation {
	return pruo.mutation
}

// ClearProductStore clears the "product_store" edge to the ProductStore entity.
func (pruo *ProductReviewUpdateOne) ClearProductStore() *ProductReviewUpdateOne {
	pruo.mutation.ClearProductStore()
	return pruo
}

// ClearProduct clears the "product" edge to the Product entity.
func (pruo *ProductReviewUpdateOne) ClearProduct() *ProductReviewUpdateOne {
	pruo.mutation.ClearProduct()
	return pruo
}

// ClearStatusItem clears the "status_item" edge to the StatusItem entity.
func (pruo *ProductReviewUpdateOne) ClearStatusItem() *ProductReviewUpdateOne {
	pruo.mutation.ClearStatusItem()
	return pruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pruo *ProductReviewUpdateOne) Select(field string, fields ...string) *ProductReviewUpdateOne {
	pruo.fields = append([]string{field}, fields...)
	return pruo
}

// Save executes the query and returns the updated ProductReview entity.
func (pruo *ProductReviewUpdateOne) Save(ctx context.Context) (*ProductReview, error) {
	var (
		err  error
		node *ProductReview
	)
	pruo.defaults()
	if len(pruo.hooks) == 0 {
		if err = pruo.check(); err != nil {
			return nil, err
		}
		node, err = pruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProductReviewMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pruo.check(); err != nil {
				return nil, err
			}
			pruo.mutation = mutation
			node, err = pruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pruo.hooks) - 1; i >= 0; i-- {
			mut = pruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (pruo *ProductReviewUpdateOne) SaveX(ctx context.Context) *ProductReview {
	node, err := pruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pruo *ProductReviewUpdateOne) Exec(ctx context.Context) error {
	_, err := pruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pruo *ProductReviewUpdateOne) ExecX(ctx context.Context) {
	if err := pruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pruo *ProductReviewUpdateOne) defaults() {
	if _, ok := pruo.mutation.UpdateTime(); !ok {
		v := productreview.UpdateDefaultUpdateTime()
		pruo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pruo *ProductReviewUpdateOne) check() error {
	if v, ok := pruo.mutation.PostedAnonymous(); ok {
		if err := productreview.PostedAnonymousValidator(v); err != nil {
			return &ValidationError{Name: "posted_anonymous", err: fmt.Errorf("ent: validator failed for field \"posted_anonymous\": %w", err)}
		}
	}
	return nil
}

func (pruo *ProductReviewUpdateOne) sqlSave(ctx context.Context) (_node *ProductReview, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   productreview.Table,
			Columns: productreview.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: productreview.FieldID,
			},
		},
	}
	id, ok := pruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ProductReview.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := pruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, productreview.FieldID)
		for _, f := range fields {
			if !productreview.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != productreview.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pruo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productreview.FieldUpdateTime,
		})
	}
	if value, ok := pruo.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productreview.FieldStringRef,
		})
	}
	if pruo.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productreview.FieldStringRef,
		})
	}
	if value, ok := pruo.mutation.UserLoginID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productreview.FieldUserLoginID,
		})
	}
	if pruo.mutation.UserLoginIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productreview.FieldUserLoginID,
		})
	}
	if value, ok := pruo.mutation.PostedAnonymous(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productreview.FieldPostedAnonymous,
		})
	}
	if pruo.mutation.PostedAnonymousCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productreview.FieldPostedAnonymous,
		})
	}
	if value, ok := pruo.mutation.PostedDateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productreview.FieldPostedDateTime,
		})
	}
	if pruo.mutation.PostedDateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: productreview.FieldPostedDateTime,
		})
	}
	if value, ok := pruo.mutation.ProductRating(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: productreview.FieldProductRating,
		})
	}
	if value, ok := pruo.mutation.AddedProductRating(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: productreview.FieldProductRating,
		})
	}
	if pruo.mutation.ProductRatingCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: productreview.FieldProductRating,
		})
	}
	if value, ok := pruo.mutation.ProductReview(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productreview.FieldProductReview,
		})
	}
	if pruo.mutation.ProductReviewCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productreview.FieldProductReview,
		})
	}
	if pruo.mutation.ProductStoreCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productreview.ProductStoreTable,
			Columns: []string{productreview.ProductStoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productstore.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pruo.mutation.ProductStoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productreview.ProductStoreTable,
			Columns: []string{productreview.ProductStoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productstore.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pruo.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productreview.ProductTable,
			Columns: []string{productreview.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pruo.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productreview.ProductTable,
			Columns: []string{productreview.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pruo.mutation.StatusItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productreview.StatusItemTable,
			Columns: []string{productreview.StatusItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusitem.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pruo.mutation.StatusItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productreview.StatusItemTable,
			Columns: []string{productreview.StatusItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProductReview{config: pruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productreview.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
