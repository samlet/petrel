// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/enumeration"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productstore"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productstoregroup"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/statusitem"
)

// ProductStore is the model entity for the ProductStore schema.
type ProductStore struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// StringRef holds the value of the "string_ref" field.
	StringRef string `json:"string_ref,omitempty"`
	// StoreName holds the value of the "store_name" field.
	StoreName string `json:"store_name,omitempty"`
	// CompanyName holds the value of the "company_name" field.
	CompanyName string `json:"company_name,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Subtitle holds the value of the "subtitle" field.
	Subtitle string `json:"subtitle,omitempty"`
	// PayToPartyID holds the value of the "pay_to_party_id" field.
	PayToPartyID int `json:"pay_to_party_id,omitempty"`
	// DaysToCancelNonPay holds the value of the "days_to_cancel_non_pay" field.
	DaysToCancelNonPay int `json:"days_to_cancel_non_pay,omitempty"`
	// ManualAuthIsCapture holds the value of the "manual_auth_is_capture" field.
	ManualAuthIsCapture productstore.ManualAuthIsCapture `json:"manual_auth_is_capture,omitempty"`
	// ProrateShipping holds the value of the "prorate_shipping" field.
	ProrateShipping productstore.ProrateShipping `json:"prorate_shipping,omitempty"`
	// ProrateTaxes holds the value of the "prorate_taxes" field.
	ProrateTaxes productstore.ProrateTaxes `json:"prorate_taxes,omitempty"`
	// ViewCartOnAdd holds the value of the "view_cart_on_add" field.
	ViewCartOnAdd productstore.ViewCartOnAdd `json:"view_cart_on_add,omitempty"`
	// AutoSaveCart holds the value of the "auto_save_cart" field.
	AutoSaveCart productstore.AutoSaveCart `json:"auto_save_cart,omitempty"`
	// AutoApproveReviews holds the value of the "auto_approve_reviews" field.
	AutoApproveReviews productstore.AutoApproveReviews `json:"auto_approve_reviews,omitempty"`
	// IsDemoStore holds the value of the "is_demo_store" field.
	IsDemoStore productstore.IsDemoStore `json:"is_demo_store,omitempty"`
	// IsImmediatelyFulfilled holds the value of the "is_immediately_fulfilled" field.
	IsImmediatelyFulfilled productstore.IsImmediatelyFulfilled `json:"is_immediately_fulfilled,omitempty"`
	// InventoryFacilityID holds the value of the "inventory_facility_id" field.
	InventoryFacilityID int `json:"inventory_facility_id,omitempty"`
	// OneInventoryFacility holds the value of the "one_inventory_facility" field.
	OneInventoryFacility productstore.OneInventoryFacility `json:"one_inventory_facility,omitempty"`
	// CheckInventory holds the value of the "check_inventory" field.
	CheckInventory productstore.CheckInventory `json:"check_inventory,omitempty"`
	// ReserveInventory holds the value of the "reserve_inventory" field.
	ReserveInventory productstore.ReserveInventory `json:"reserve_inventory,omitempty"`
	// RequireInventory holds the value of the "require_inventory" field.
	RequireInventory productstore.RequireInventory `json:"require_inventory,omitempty"`
	// BalanceResOnOrderCreation holds the value of the "balance_res_on_order_creation" field.
	BalanceResOnOrderCreation productstore.BalanceResOnOrderCreation `json:"balance_res_on_order_creation,omitempty"`
	// OrderNumberPrefix holds the value of the "order_number_prefix" field.
	OrderNumberPrefix string `json:"order_number_prefix,omitempty"`
	// DefaultLocaleString holds the value of the "default_locale_string" field.
	DefaultLocaleString string `json:"default_locale_string,omitempty"`
	// DefaultCurrencyUomID holds the value of the "default_currency_uom_id" field.
	DefaultCurrencyUomID int `json:"default_currency_uom_id,omitempty"`
	// DefaultTimeZoneString holds the value of the "default_time_zone_string" field.
	DefaultTimeZoneString string `json:"default_time_zone_string,omitempty"`
	// AllowPassword holds the value of the "allow_password" field.
	AllowPassword productstore.AllowPassword `json:"allow_password,omitempty"`
	// DefaultPassword holds the value of the "default_password" field.
	DefaultPassword string `json:"default_password,omitempty"`
	// ExplodeOrderItems holds the value of the "explode_order_items" field.
	ExplodeOrderItems productstore.ExplodeOrderItems `json:"explode_order_items,omitempty"`
	// CheckGcBalance holds the value of the "check_gc_balance" field.
	CheckGcBalance productstore.CheckGcBalance `json:"check_gc_balance,omitempty"`
	// RetryFailedAuths holds the value of the "retry_failed_auths" field.
	RetryFailedAuths productstore.RetryFailedAuths `json:"retry_failed_auths,omitempty"`
	// AuthDeclinedMessage holds the value of the "auth_declined_message" field.
	AuthDeclinedMessage string `json:"auth_declined_message,omitempty"`
	// AuthFraudMessage holds the value of the "auth_fraud_message" field.
	AuthFraudMessage string `json:"auth_fraud_message,omitempty"`
	// AuthErrorMessage holds the value of the "auth_error_message" field.
	AuthErrorMessage string `json:"auth_error_message,omitempty"`
	// VisualThemeID holds the value of the "visual_theme_id" field.
	VisualThemeID int `json:"visual_theme_id,omitempty"`
	// UsePrimaryEmailUsername holds the value of the "use_primary_email_username" field.
	UsePrimaryEmailUsername productstore.UsePrimaryEmailUsername `json:"use_primary_email_username,omitempty"`
	// RequireCustomerRole holds the value of the "require_customer_role" field.
	RequireCustomerRole productstore.RequireCustomerRole `json:"require_customer_role,omitempty"`
	// AutoInvoiceDigitalItems holds the value of the "auto_invoice_digital_items" field.
	AutoInvoiceDigitalItems productstore.AutoInvoiceDigitalItems `json:"auto_invoice_digital_items,omitempty"`
	// ReqShipAddrForDigItems holds the value of the "req_ship_addr_for_dig_items" field.
	ReqShipAddrForDigItems productstore.ReqShipAddrForDigItems `json:"req_ship_addr_for_dig_items,omitempty"`
	// ShowCheckoutGiftOptions holds the value of the "show_checkout_gift_options" field.
	ShowCheckoutGiftOptions productstore.ShowCheckoutGiftOptions `json:"show_checkout_gift_options,omitempty"`
	// SelectPaymentTypePerItem holds the value of the "select_payment_type_per_item" field.
	SelectPaymentTypePerItem productstore.SelectPaymentTypePerItem `json:"select_payment_type_per_item,omitempty"`
	// ShowPricesWithVatTax holds the value of the "show_prices_with_vat_tax" field.
	ShowPricesWithVatTax productstore.ShowPricesWithVatTax `json:"show_prices_with_vat_tax,omitempty"`
	// ShowTaxIsExempt holds the value of the "show_tax_is_exempt" field.
	ShowTaxIsExempt productstore.ShowTaxIsExempt `json:"show_tax_is_exempt,omitempty"`
	// VatTaxAuthGeoID holds the value of the "vat_tax_auth_geo_id" field.
	VatTaxAuthGeoID int `json:"vat_tax_auth_geo_id,omitempty"`
	// VatTaxAuthPartyID holds the value of the "vat_tax_auth_party_id" field.
	VatTaxAuthPartyID int `json:"vat_tax_auth_party_id,omitempty"`
	// EnableAutoSuggestionList holds the value of the "enable_auto_suggestion_list" field.
	EnableAutoSuggestionList productstore.EnableAutoSuggestionList `json:"enable_auto_suggestion_list,omitempty"`
	// EnableDigProdUpload holds the value of the "enable_dig_prod_upload" field.
	EnableDigProdUpload productstore.EnableDigProdUpload `json:"enable_dig_prod_upload,omitempty"`
	// ProdSearchExcludeVariants holds the value of the "prod_search_exclude_variants" field.
	ProdSearchExcludeVariants productstore.ProdSearchExcludeVariants `json:"prod_search_exclude_variants,omitempty"`
	// DigProdUploadCategoryID holds the value of the "dig_prod_upload_category_id" field.
	DigProdUploadCategoryID int `json:"dig_prod_upload_category_id,omitempty"`
	// AutoOrderCcTryExp holds the value of the "auto_order_cc_try_exp" field.
	AutoOrderCcTryExp productstore.AutoOrderCcTryExp `json:"auto_order_cc_try_exp,omitempty"`
	// AutoOrderCcTryOtherCards holds the value of the "auto_order_cc_try_other_cards" field.
	AutoOrderCcTryOtherCards productstore.AutoOrderCcTryOtherCards `json:"auto_order_cc_try_other_cards,omitempty"`
	// AutoOrderCcTryLaterNsf holds the value of the "auto_order_cc_try_later_nsf" field.
	AutoOrderCcTryLaterNsf productstore.AutoOrderCcTryLaterNsf `json:"auto_order_cc_try_later_nsf,omitempty"`
	// AutoOrderCcTryLaterMax holds the value of the "auto_order_cc_try_later_max" field.
	AutoOrderCcTryLaterMax int `json:"auto_order_cc_try_later_max,omitempty"`
	// StoreCreditValidDays holds the value of the "store_credit_valid_days" field.
	StoreCreditValidDays int `json:"store_credit_valid_days,omitempty"`
	// AutoApproveInvoice holds the value of the "auto_approve_invoice" field.
	AutoApproveInvoice productstore.AutoApproveInvoice `json:"auto_approve_invoice,omitempty"`
	// AutoApproveOrder holds the value of the "auto_approve_order" field.
	AutoApproveOrder productstore.AutoApproveOrder `json:"auto_approve_order,omitempty"`
	// ShipIfCaptureFails holds the value of the "ship_if_capture_fails" field.
	ShipIfCaptureFails productstore.ShipIfCaptureFails `json:"ship_if_capture_fails,omitempty"`
	// SetOwnerUponIssuance holds the value of the "set_owner_upon_issuance" field.
	SetOwnerUponIssuance productstore.SetOwnerUponIssuance `json:"set_owner_upon_issuance,omitempty"`
	// ReqReturnInventoryReceive holds the value of the "req_return_inventory_receive" field.
	ReqReturnInventoryReceive productstore.ReqReturnInventoryReceive `json:"req_return_inventory_receive,omitempty"`
	// AddToCartRemoveIncompat holds the value of the "add_to_cart_remove_incompat" field.
	AddToCartRemoveIncompat productstore.AddToCartRemoveIncompat `json:"add_to_cart_remove_incompat,omitempty"`
	// AddToCartReplaceUpsell holds the value of the "add_to_cart_replace_upsell" field.
	AddToCartReplaceUpsell productstore.AddToCartReplaceUpsell `json:"add_to_cart_replace_upsell,omitempty"`
	// SplitPayPrefPerShpGrp holds the value of the "split_pay_pref_per_shp_grp" field.
	SplitPayPrefPerShpGrp productstore.SplitPayPrefPerShpGrp `json:"split_pay_pref_per_shp_grp,omitempty"`
	// ManagedByLot holds the value of the "managed_by_lot" field.
	ManagedByLot productstore.ManagedByLot `json:"managed_by_lot,omitempty"`
	// ShowOutOfStockProducts holds the value of the "show_out_of_stock_products" field.
	ShowOutOfStockProducts productstore.ShowOutOfStockProducts `json:"show_out_of_stock_products,omitempty"`
	// OrderDecimalQuantity holds the value of the "order_decimal_quantity" field.
	OrderDecimalQuantity productstore.OrderDecimalQuantity `json:"order_decimal_quantity,omitempty"`
	// AllowComment holds the value of the "allow_comment" field.
	AllowComment productstore.AllowComment `json:"allow_comment,omitempty"`
	// AllocateInventory holds the value of the "allocate_inventory" field.
	AllocateInventory productstore.AllocateInventory `json:"allocate_inventory,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProductStoreQuery when eager-loading is set.
	Edges                                            ProductStoreEdges `json:"edges"`
	enumeration_reserve_order_product_stores         *int
	enumeration_requirement_method_product_stores    *int
	enumeration_default_sales_channel_product_stores *int
	enumeration_store_credit_account_product_stores  *int
	product_store_group_primary_product_stores       *int
	status_item_header_approved_product_stores       *int
	status_item_item_approved_product_stores         *int
	status_item_digital_item_approved_product_stores *int
	status_item_header_declined_product_stores       *int
	status_item_item_declined_product_stores         *int
	status_item_header_cancel_product_stores         *int
	status_item_item_cancel_product_stores           *int
}

// ProductStoreEdges holds the relations/edges for other nodes in the graph.
type ProductStoreEdges struct {
	// PrimaryProductStoreGroup holds the value of the primary_product_store_group edge.
	PrimaryProductStoreGroup *ProductStoreGroup `json:"primary_product_store_group,omitempty"`
	// ReserveOrderEnumeration holds the value of the reserve_order_enumeration edge.
	ReserveOrderEnumeration *Enumeration `json:"reserve_order_enumeration,omitempty"`
	// RequirementMethodEnumeration holds the value of the requirement_method_enumeration edge.
	RequirementMethodEnumeration *Enumeration `json:"requirement_method_enumeration,omitempty"`
	// DefaultSalesChannelEnumeration holds the value of the default_sales_channel_enumeration edge.
	DefaultSalesChannelEnumeration *Enumeration `json:"default_sales_channel_enumeration,omitempty"`
	// HeaderApprovedStatusItem holds the value of the header_approved_status_item edge.
	HeaderApprovedStatusItem *StatusItem `json:"header_approved_status_item,omitempty"`
	// ItemApprovedStatusItem holds the value of the item_approved_status_item edge.
	ItemApprovedStatusItem *StatusItem `json:"item_approved_status_item,omitempty"`
	// DigitalItemApprovedStatusItem holds the value of the digital_item_approved_status_item edge.
	DigitalItemApprovedStatusItem *StatusItem `json:"digital_item_approved_status_item,omitempty"`
	// HeaderDeclinedStatusItem holds the value of the header_declined_status_item edge.
	HeaderDeclinedStatusItem *StatusItem `json:"header_declined_status_item,omitempty"`
	// ItemDeclinedStatusItem holds the value of the item_declined_status_item edge.
	ItemDeclinedStatusItem *StatusItem `json:"item_declined_status_item,omitempty"`
	// HeaderCancelStatusItem holds the value of the header_cancel_status_item edge.
	HeaderCancelStatusItem *StatusItem `json:"header_cancel_status_item,omitempty"`
	// ItemCancelStatusItem holds the value of the item_cancel_status_item edge.
	ItemCancelStatusItem *StatusItem `json:"item_cancel_status_item,omitempty"`
	// StoreCreditAccountEnumeration holds the value of the store_credit_account_enumeration edge.
	StoreCreditAccountEnumeration *Enumeration `json:"store_credit_account_enumeration,omitempty"`
	// OrderHeaders holds the value of the order_headers edge.
	OrderHeaders []*OrderHeader `json:"order_headers,omitempty"`
	// ProductReviews holds the value of the product_reviews edge.
	ProductReviews []*ProductReview `json:"product_reviews,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [14]bool
}

// PrimaryProductStoreGroupOrErr returns the PrimaryProductStoreGroup value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProductStoreEdges) PrimaryProductStoreGroupOrErr() (*ProductStoreGroup, error) {
	if e.loadedTypes[0] {
		if e.PrimaryProductStoreGroup == nil {
			// The edge primary_product_store_group was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: productstoregroup.Label}
		}
		return e.PrimaryProductStoreGroup, nil
	}
	return nil, &NotLoadedError{edge: "primary_product_store_group"}
}

// ReserveOrderEnumerationOrErr returns the ReserveOrderEnumeration value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProductStoreEdges) ReserveOrderEnumerationOrErr() (*Enumeration, error) {
	if e.loadedTypes[1] {
		if e.ReserveOrderEnumeration == nil {
			// The edge reserve_order_enumeration was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: enumeration.Label}
		}
		return e.ReserveOrderEnumeration, nil
	}
	return nil, &NotLoadedError{edge: "reserve_order_enumeration"}
}

// RequirementMethodEnumerationOrErr returns the RequirementMethodEnumeration value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProductStoreEdges) RequirementMethodEnumerationOrErr() (*Enumeration, error) {
	if e.loadedTypes[2] {
		if e.RequirementMethodEnumeration == nil {
			// The edge requirement_method_enumeration was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: enumeration.Label}
		}
		return e.RequirementMethodEnumeration, nil
	}
	return nil, &NotLoadedError{edge: "requirement_method_enumeration"}
}

// DefaultSalesChannelEnumerationOrErr returns the DefaultSalesChannelEnumeration value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProductStoreEdges) DefaultSalesChannelEnumerationOrErr() (*Enumeration, error) {
	if e.loadedTypes[3] {
		if e.DefaultSalesChannelEnumeration == nil {
			// The edge default_sales_channel_enumeration was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: enumeration.Label}
		}
		return e.DefaultSalesChannelEnumeration, nil
	}
	return nil, &NotLoadedError{edge: "default_sales_channel_enumeration"}
}

// HeaderApprovedStatusItemOrErr returns the HeaderApprovedStatusItem value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProductStoreEdges) HeaderApprovedStatusItemOrErr() (*StatusItem, error) {
	if e.loadedTypes[4] {
		if e.HeaderApprovedStatusItem == nil {
			// The edge header_approved_status_item was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: statusitem.Label}
		}
		return e.HeaderApprovedStatusItem, nil
	}
	return nil, &NotLoadedError{edge: "header_approved_status_item"}
}

// ItemApprovedStatusItemOrErr returns the ItemApprovedStatusItem value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProductStoreEdges) ItemApprovedStatusItemOrErr() (*StatusItem, error) {
	if e.loadedTypes[5] {
		if e.ItemApprovedStatusItem == nil {
			// The edge item_approved_status_item was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: statusitem.Label}
		}
		return e.ItemApprovedStatusItem, nil
	}
	return nil, &NotLoadedError{edge: "item_approved_status_item"}
}

// DigitalItemApprovedStatusItemOrErr returns the DigitalItemApprovedStatusItem value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProductStoreEdges) DigitalItemApprovedStatusItemOrErr() (*StatusItem, error) {
	if e.loadedTypes[6] {
		if e.DigitalItemApprovedStatusItem == nil {
			// The edge digital_item_approved_status_item was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: statusitem.Label}
		}
		return e.DigitalItemApprovedStatusItem, nil
	}
	return nil, &NotLoadedError{edge: "digital_item_approved_status_item"}
}

// HeaderDeclinedStatusItemOrErr returns the HeaderDeclinedStatusItem value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProductStoreEdges) HeaderDeclinedStatusItemOrErr() (*StatusItem, error) {
	if e.loadedTypes[7] {
		if e.HeaderDeclinedStatusItem == nil {
			// The edge header_declined_status_item was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: statusitem.Label}
		}
		return e.HeaderDeclinedStatusItem, nil
	}
	return nil, &NotLoadedError{edge: "header_declined_status_item"}
}

// ItemDeclinedStatusItemOrErr returns the ItemDeclinedStatusItem value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProductStoreEdges) ItemDeclinedStatusItemOrErr() (*StatusItem, error) {
	if e.loadedTypes[8] {
		if e.ItemDeclinedStatusItem == nil {
			// The edge item_declined_status_item was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: statusitem.Label}
		}
		return e.ItemDeclinedStatusItem, nil
	}
	return nil, &NotLoadedError{edge: "item_declined_status_item"}
}

// HeaderCancelStatusItemOrErr returns the HeaderCancelStatusItem value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProductStoreEdges) HeaderCancelStatusItemOrErr() (*StatusItem, error) {
	if e.loadedTypes[9] {
		if e.HeaderCancelStatusItem == nil {
			// The edge header_cancel_status_item was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: statusitem.Label}
		}
		return e.HeaderCancelStatusItem, nil
	}
	return nil, &NotLoadedError{edge: "header_cancel_status_item"}
}

// ItemCancelStatusItemOrErr returns the ItemCancelStatusItem value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProductStoreEdges) ItemCancelStatusItemOrErr() (*StatusItem, error) {
	if e.loadedTypes[10] {
		if e.ItemCancelStatusItem == nil {
			// The edge item_cancel_status_item was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: statusitem.Label}
		}
		return e.ItemCancelStatusItem, nil
	}
	return nil, &NotLoadedError{edge: "item_cancel_status_item"}
}

// StoreCreditAccountEnumerationOrErr returns the StoreCreditAccountEnumeration value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProductStoreEdges) StoreCreditAccountEnumerationOrErr() (*Enumeration, error) {
	if e.loadedTypes[11] {
		if e.StoreCreditAccountEnumeration == nil {
			// The edge store_credit_account_enumeration was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: enumeration.Label}
		}
		return e.StoreCreditAccountEnumeration, nil
	}
	return nil, &NotLoadedError{edge: "store_credit_account_enumeration"}
}

// OrderHeadersOrErr returns the OrderHeaders value or an error if the edge
// was not loaded in eager-loading.
func (e ProductStoreEdges) OrderHeadersOrErr() ([]*OrderHeader, error) {
	if e.loadedTypes[12] {
		return e.OrderHeaders, nil
	}
	return nil, &NotLoadedError{edge: "order_headers"}
}

// ProductReviewsOrErr returns the ProductReviews value or an error if the edge
// was not loaded in eager-loading.
func (e ProductStoreEdges) ProductReviewsOrErr() ([]*ProductReview, error) {
	if e.loadedTypes[13] {
		return e.ProductReviews, nil
	}
	return nil, &NotLoadedError{edge: "product_reviews"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProductStore) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case productstore.FieldID, productstore.FieldPayToPartyID, productstore.FieldDaysToCancelNonPay, productstore.FieldInventoryFacilityID, productstore.FieldDefaultCurrencyUomID, productstore.FieldVisualThemeID, productstore.FieldVatTaxAuthGeoID, productstore.FieldVatTaxAuthPartyID, productstore.FieldDigProdUploadCategoryID, productstore.FieldAutoOrderCcTryLaterMax, productstore.FieldStoreCreditValidDays:
			values[i] = new(sql.NullInt64)
		case productstore.FieldStringRef, productstore.FieldStoreName, productstore.FieldCompanyName, productstore.FieldTitle, productstore.FieldSubtitle, productstore.FieldManualAuthIsCapture, productstore.FieldProrateShipping, productstore.FieldProrateTaxes, productstore.FieldViewCartOnAdd, productstore.FieldAutoSaveCart, productstore.FieldAutoApproveReviews, productstore.FieldIsDemoStore, productstore.FieldIsImmediatelyFulfilled, productstore.FieldOneInventoryFacility, productstore.FieldCheckInventory, productstore.FieldReserveInventory, productstore.FieldRequireInventory, productstore.FieldBalanceResOnOrderCreation, productstore.FieldOrderNumberPrefix, productstore.FieldDefaultLocaleString, productstore.FieldDefaultTimeZoneString, productstore.FieldAllowPassword, productstore.FieldDefaultPassword, productstore.FieldExplodeOrderItems, productstore.FieldCheckGcBalance, productstore.FieldRetryFailedAuths, productstore.FieldAuthDeclinedMessage, productstore.FieldAuthFraudMessage, productstore.FieldAuthErrorMessage, productstore.FieldUsePrimaryEmailUsername, productstore.FieldRequireCustomerRole, productstore.FieldAutoInvoiceDigitalItems, productstore.FieldReqShipAddrForDigItems, productstore.FieldShowCheckoutGiftOptions, productstore.FieldSelectPaymentTypePerItem, productstore.FieldShowPricesWithVatTax, productstore.FieldShowTaxIsExempt, productstore.FieldEnableAutoSuggestionList, productstore.FieldEnableDigProdUpload, productstore.FieldProdSearchExcludeVariants, productstore.FieldAutoOrderCcTryExp, productstore.FieldAutoOrderCcTryOtherCards, productstore.FieldAutoOrderCcTryLaterNsf, productstore.FieldAutoApproveInvoice, productstore.FieldAutoApproveOrder, productstore.FieldShipIfCaptureFails, productstore.FieldSetOwnerUponIssuance, productstore.FieldReqReturnInventoryReceive, productstore.FieldAddToCartRemoveIncompat, productstore.FieldAddToCartReplaceUpsell, productstore.FieldSplitPayPrefPerShpGrp, productstore.FieldManagedByLot, productstore.FieldShowOutOfStockProducts, productstore.FieldOrderDecimalQuantity, productstore.FieldAllowComment, productstore.FieldAllocateInventory:
			values[i] = new(sql.NullString)
		case productstore.FieldCreateTime, productstore.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case productstore.ForeignKeys[0]: // enumeration_reserve_order_product_stores
			values[i] = new(sql.NullInt64)
		case productstore.ForeignKeys[1]: // enumeration_requirement_method_product_stores
			values[i] = new(sql.NullInt64)
		case productstore.ForeignKeys[2]: // enumeration_default_sales_channel_product_stores
			values[i] = new(sql.NullInt64)
		case productstore.ForeignKeys[3]: // enumeration_store_credit_account_product_stores
			values[i] = new(sql.NullInt64)
		case productstore.ForeignKeys[4]: // product_store_group_primary_product_stores
			values[i] = new(sql.NullInt64)
		case productstore.ForeignKeys[5]: // status_item_header_approved_product_stores
			values[i] = new(sql.NullInt64)
		case productstore.ForeignKeys[6]: // status_item_item_approved_product_stores
			values[i] = new(sql.NullInt64)
		case productstore.ForeignKeys[7]: // status_item_digital_item_approved_product_stores
			values[i] = new(sql.NullInt64)
		case productstore.ForeignKeys[8]: // status_item_header_declined_product_stores
			values[i] = new(sql.NullInt64)
		case productstore.ForeignKeys[9]: // status_item_item_declined_product_stores
			values[i] = new(sql.NullInt64)
		case productstore.ForeignKeys[10]: // status_item_header_cancel_product_stores
			values[i] = new(sql.NullInt64)
		case productstore.ForeignKeys[11]: // status_item_item_cancel_product_stores
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ProductStore", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProductStore fields.
func (ps *ProductStore) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case productstore.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ps.ID = int(value.Int64)
		case productstore.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				ps.CreateTime = value.Time
			}
		case productstore.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				ps.UpdateTime = value.Time
			}
		case productstore.FieldStringRef:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field string_ref", values[i])
			} else if value.Valid {
				ps.StringRef = value.String
			}
		case productstore.FieldStoreName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field store_name", values[i])
			} else if value.Valid {
				ps.StoreName = value.String
			}
		case productstore.FieldCompanyName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field company_name", values[i])
			} else if value.Valid {
				ps.CompanyName = value.String
			}
		case productstore.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				ps.Title = value.String
			}
		case productstore.FieldSubtitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subtitle", values[i])
			} else if value.Valid {
				ps.Subtitle = value.String
			}
		case productstore.FieldPayToPartyID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field pay_to_party_id", values[i])
			} else if value.Valid {
				ps.PayToPartyID = int(value.Int64)
			}
		case productstore.FieldDaysToCancelNonPay:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field days_to_cancel_non_pay", values[i])
			} else if value.Valid {
				ps.DaysToCancelNonPay = int(value.Int64)
			}
		case productstore.FieldManualAuthIsCapture:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field manual_auth_is_capture", values[i])
			} else if value.Valid {
				ps.ManualAuthIsCapture = productstore.ManualAuthIsCapture(value.String)
			}
		case productstore.FieldProrateShipping:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field prorate_shipping", values[i])
			} else if value.Valid {
				ps.ProrateShipping = productstore.ProrateShipping(value.String)
			}
		case productstore.FieldProrateTaxes:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field prorate_taxes", values[i])
			} else if value.Valid {
				ps.ProrateTaxes = productstore.ProrateTaxes(value.String)
			}
		case productstore.FieldViewCartOnAdd:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field view_cart_on_add", values[i])
			} else if value.Valid {
				ps.ViewCartOnAdd = productstore.ViewCartOnAdd(value.String)
			}
		case productstore.FieldAutoSaveCart:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field auto_save_cart", values[i])
			} else if value.Valid {
				ps.AutoSaveCart = productstore.AutoSaveCart(value.String)
			}
		case productstore.FieldAutoApproveReviews:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field auto_approve_reviews", values[i])
			} else if value.Valid {
				ps.AutoApproveReviews = productstore.AutoApproveReviews(value.String)
			}
		case productstore.FieldIsDemoStore:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field is_demo_store", values[i])
			} else if value.Valid {
				ps.IsDemoStore = productstore.IsDemoStore(value.String)
			}
		case productstore.FieldIsImmediatelyFulfilled:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field is_immediately_fulfilled", values[i])
			} else if value.Valid {
				ps.IsImmediatelyFulfilled = productstore.IsImmediatelyFulfilled(value.String)
			}
		case productstore.FieldInventoryFacilityID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field inventory_facility_id", values[i])
			} else if value.Valid {
				ps.InventoryFacilityID = int(value.Int64)
			}
		case productstore.FieldOneInventoryFacility:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field one_inventory_facility", values[i])
			} else if value.Valid {
				ps.OneInventoryFacility = productstore.OneInventoryFacility(value.String)
			}
		case productstore.FieldCheckInventory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field check_inventory", values[i])
			} else if value.Valid {
				ps.CheckInventory = productstore.CheckInventory(value.String)
			}
		case productstore.FieldReserveInventory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reserve_inventory", values[i])
			} else if value.Valid {
				ps.ReserveInventory = productstore.ReserveInventory(value.String)
			}
		case productstore.FieldRequireInventory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field require_inventory", values[i])
			} else if value.Valid {
				ps.RequireInventory = productstore.RequireInventory(value.String)
			}
		case productstore.FieldBalanceResOnOrderCreation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field balance_res_on_order_creation", values[i])
			} else if value.Valid {
				ps.BalanceResOnOrderCreation = productstore.BalanceResOnOrderCreation(value.String)
			}
		case productstore.FieldOrderNumberPrefix:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field order_number_prefix", values[i])
			} else if value.Valid {
				ps.OrderNumberPrefix = value.String
			}
		case productstore.FieldDefaultLocaleString:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field default_locale_string", values[i])
			} else if value.Valid {
				ps.DefaultLocaleString = value.String
			}
		case productstore.FieldDefaultCurrencyUomID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field default_currency_uom_id", values[i])
			} else if value.Valid {
				ps.DefaultCurrencyUomID = int(value.Int64)
			}
		case productstore.FieldDefaultTimeZoneString:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field default_time_zone_string", values[i])
			} else if value.Valid {
				ps.DefaultTimeZoneString = value.String
			}
		case productstore.FieldAllowPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field allow_password", values[i])
			} else if value.Valid {
				ps.AllowPassword = productstore.AllowPassword(value.String)
			}
		case productstore.FieldDefaultPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field default_password", values[i])
			} else if value.Valid {
				ps.DefaultPassword = value.String
			}
		case productstore.FieldExplodeOrderItems:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field explode_order_items", values[i])
			} else if value.Valid {
				ps.ExplodeOrderItems = productstore.ExplodeOrderItems(value.String)
			}
		case productstore.FieldCheckGcBalance:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field check_gc_balance", values[i])
			} else if value.Valid {
				ps.CheckGcBalance = productstore.CheckGcBalance(value.String)
			}
		case productstore.FieldRetryFailedAuths:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field retry_failed_auths", values[i])
			} else if value.Valid {
				ps.RetryFailedAuths = productstore.RetryFailedAuths(value.String)
			}
		case productstore.FieldAuthDeclinedMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field auth_declined_message", values[i])
			} else if value.Valid {
				ps.AuthDeclinedMessage = value.String
			}
		case productstore.FieldAuthFraudMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field auth_fraud_message", values[i])
			} else if value.Valid {
				ps.AuthFraudMessage = value.String
			}
		case productstore.FieldAuthErrorMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field auth_error_message", values[i])
			} else if value.Valid {
				ps.AuthErrorMessage = value.String
			}
		case productstore.FieldVisualThemeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field visual_theme_id", values[i])
			} else if value.Valid {
				ps.VisualThemeID = int(value.Int64)
			}
		case productstore.FieldUsePrimaryEmailUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field use_primary_email_username", values[i])
			} else if value.Valid {
				ps.UsePrimaryEmailUsername = productstore.UsePrimaryEmailUsername(value.String)
			}
		case productstore.FieldRequireCustomerRole:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field require_customer_role", values[i])
			} else if value.Valid {
				ps.RequireCustomerRole = productstore.RequireCustomerRole(value.String)
			}
		case productstore.FieldAutoInvoiceDigitalItems:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field auto_invoice_digital_items", values[i])
			} else if value.Valid {
				ps.AutoInvoiceDigitalItems = productstore.AutoInvoiceDigitalItems(value.String)
			}
		case productstore.FieldReqShipAddrForDigItems:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field req_ship_addr_for_dig_items", values[i])
			} else if value.Valid {
				ps.ReqShipAddrForDigItems = productstore.ReqShipAddrForDigItems(value.String)
			}
		case productstore.FieldShowCheckoutGiftOptions:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field show_checkout_gift_options", values[i])
			} else if value.Valid {
				ps.ShowCheckoutGiftOptions = productstore.ShowCheckoutGiftOptions(value.String)
			}
		case productstore.FieldSelectPaymentTypePerItem:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field select_payment_type_per_item", values[i])
			} else if value.Valid {
				ps.SelectPaymentTypePerItem = productstore.SelectPaymentTypePerItem(value.String)
			}
		case productstore.FieldShowPricesWithVatTax:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field show_prices_with_vat_tax", values[i])
			} else if value.Valid {
				ps.ShowPricesWithVatTax = productstore.ShowPricesWithVatTax(value.String)
			}
		case productstore.FieldShowTaxIsExempt:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field show_tax_is_exempt", values[i])
			} else if value.Valid {
				ps.ShowTaxIsExempt = productstore.ShowTaxIsExempt(value.String)
			}
		case productstore.FieldVatTaxAuthGeoID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field vat_tax_auth_geo_id", values[i])
			} else if value.Valid {
				ps.VatTaxAuthGeoID = int(value.Int64)
			}
		case productstore.FieldVatTaxAuthPartyID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field vat_tax_auth_party_id", values[i])
			} else if value.Valid {
				ps.VatTaxAuthPartyID = int(value.Int64)
			}
		case productstore.FieldEnableAutoSuggestionList:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field enable_auto_suggestion_list", values[i])
			} else if value.Valid {
				ps.EnableAutoSuggestionList = productstore.EnableAutoSuggestionList(value.String)
			}
		case productstore.FieldEnableDigProdUpload:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field enable_dig_prod_upload", values[i])
			} else if value.Valid {
				ps.EnableDigProdUpload = productstore.EnableDigProdUpload(value.String)
			}
		case productstore.FieldProdSearchExcludeVariants:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field prod_search_exclude_variants", values[i])
			} else if value.Valid {
				ps.ProdSearchExcludeVariants = productstore.ProdSearchExcludeVariants(value.String)
			}
		case productstore.FieldDigProdUploadCategoryID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field dig_prod_upload_category_id", values[i])
			} else if value.Valid {
				ps.DigProdUploadCategoryID = int(value.Int64)
			}
		case productstore.FieldAutoOrderCcTryExp:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field auto_order_cc_try_exp", values[i])
			} else if value.Valid {
				ps.AutoOrderCcTryExp = productstore.AutoOrderCcTryExp(value.String)
			}
		case productstore.FieldAutoOrderCcTryOtherCards:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field auto_order_cc_try_other_cards", values[i])
			} else if value.Valid {
				ps.AutoOrderCcTryOtherCards = productstore.AutoOrderCcTryOtherCards(value.String)
			}
		case productstore.FieldAutoOrderCcTryLaterNsf:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field auto_order_cc_try_later_nsf", values[i])
			} else if value.Valid {
				ps.AutoOrderCcTryLaterNsf = productstore.AutoOrderCcTryLaterNsf(value.String)
			}
		case productstore.FieldAutoOrderCcTryLaterMax:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field auto_order_cc_try_later_max", values[i])
			} else if value.Valid {
				ps.AutoOrderCcTryLaterMax = int(value.Int64)
			}
		case productstore.FieldStoreCreditValidDays:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field store_credit_valid_days", values[i])
			} else if value.Valid {
				ps.StoreCreditValidDays = int(value.Int64)
			}
		case productstore.FieldAutoApproveInvoice:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field auto_approve_invoice", values[i])
			} else if value.Valid {
				ps.AutoApproveInvoice = productstore.AutoApproveInvoice(value.String)
			}
		case productstore.FieldAutoApproveOrder:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field auto_approve_order", values[i])
			} else if value.Valid {
				ps.AutoApproveOrder = productstore.AutoApproveOrder(value.String)
			}
		case productstore.FieldShipIfCaptureFails:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ship_if_capture_fails", values[i])
			} else if value.Valid {
				ps.ShipIfCaptureFails = productstore.ShipIfCaptureFails(value.String)
			}
		case productstore.FieldSetOwnerUponIssuance:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field set_owner_upon_issuance", values[i])
			} else if value.Valid {
				ps.SetOwnerUponIssuance = productstore.SetOwnerUponIssuance(value.String)
			}
		case productstore.FieldReqReturnInventoryReceive:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field req_return_inventory_receive", values[i])
			} else if value.Valid {
				ps.ReqReturnInventoryReceive = productstore.ReqReturnInventoryReceive(value.String)
			}
		case productstore.FieldAddToCartRemoveIncompat:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field add_to_cart_remove_incompat", values[i])
			} else if value.Valid {
				ps.AddToCartRemoveIncompat = productstore.AddToCartRemoveIncompat(value.String)
			}
		case productstore.FieldAddToCartReplaceUpsell:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field add_to_cart_replace_upsell", values[i])
			} else if value.Valid {
				ps.AddToCartReplaceUpsell = productstore.AddToCartReplaceUpsell(value.String)
			}
		case productstore.FieldSplitPayPrefPerShpGrp:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field split_pay_pref_per_shp_grp", values[i])
			} else if value.Valid {
				ps.SplitPayPrefPerShpGrp = productstore.SplitPayPrefPerShpGrp(value.String)
			}
		case productstore.FieldManagedByLot:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field managed_by_lot", values[i])
			} else if value.Valid {
				ps.ManagedByLot = productstore.ManagedByLot(value.String)
			}
		case productstore.FieldShowOutOfStockProducts:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field show_out_of_stock_products", values[i])
			} else if value.Valid {
				ps.ShowOutOfStockProducts = productstore.ShowOutOfStockProducts(value.String)
			}
		case productstore.FieldOrderDecimalQuantity:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field order_decimal_quantity", values[i])
			} else if value.Valid {
				ps.OrderDecimalQuantity = productstore.OrderDecimalQuantity(value.String)
			}
		case productstore.FieldAllowComment:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field allow_comment", values[i])
			} else if value.Valid {
				ps.AllowComment = productstore.AllowComment(value.String)
			}
		case productstore.FieldAllocateInventory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field allocate_inventory", values[i])
			} else if value.Valid {
				ps.AllocateInventory = productstore.AllocateInventory(value.String)
			}
		case productstore.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field enumeration_reserve_order_product_stores", value)
			} else if value.Valid {
				ps.enumeration_reserve_order_product_stores = new(int)
				*ps.enumeration_reserve_order_product_stores = int(value.Int64)
			}
		case productstore.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field enumeration_requirement_method_product_stores", value)
			} else if value.Valid {
				ps.enumeration_requirement_method_product_stores = new(int)
				*ps.enumeration_requirement_method_product_stores = int(value.Int64)
			}
		case productstore.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field enumeration_default_sales_channel_product_stores", value)
			} else if value.Valid {
				ps.enumeration_default_sales_channel_product_stores = new(int)
				*ps.enumeration_default_sales_channel_product_stores = int(value.Int64)
			}
		case productstore.ForeignKeys[3]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field enumeration_store_credit_account_product_stores", value)
			} else if value.Valid {
				ps.enumeration_store_credit_account_product_stores = new(int)
				*ps.enumeration_store_credit_account_product_stores = int(value.Int64)
			}
		case productstore.ForeignKeys[4]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field product_store_group_primary_product_stores", value)
			} else if value.Valid {
				ps.product_store_group_primary_product_stores = new(int)
				*ps.product_store_group_primary_product_stores = int(value.Int64)
			}
		case productstore.ForeignKeys[5]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field status_item_header_approved_product_stores", value)
			} else if value.Valid {
				ps.status_item_header_approved_product_stores = new(int)
				*ps.status_item_header_approved_product_stores = int(value.Int64)
			}
		case productstore.ForeignKeys[6]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field status_item_item_approved_product_stores", value)
			} else if value.Valid {
				ps.status_item_item_approved_product_stores = new(int)
				*ps.status_item_item_approved_product_stores = int(value.Int64)
			}
		case productstore.ForeignKeys[7]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field status_item_digital_item_approved_product_stores", value)
			} else if value.Valid {
				ps.status_item_digital_item_approved_product_stores = new(int)
				*ps.status_item_digital_item_approved_product_stores = int(value.Int64)
			}
		case productstore.ForeignKeys[8]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field status_item_header_declined_product_stores", value)
			} else if value.Valid {
				ps.status_item_header_declined_product_stores = new(int)
				*ps.status_item_header_declined_product_stores = int(value.Int64)
			}
		case productstore.ForeignKeys[9]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field status_item_item_declined_product_stores", value)
			} else if value.Valid {
				ps.status_item_item_declined_product_stores = new(int)
				*ps.status_item_item_declined_product_stores = int(value.Int64)
			}
		case productstore.ForeignKeys[10]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field status_item_header_cancel_product_stores", value)
			} else if value.Valid {
				ps.status_item_header_cancel_product_stores = new(int)
				*ps.status_item_header_cancel_product_stores = int(value.Int64)
			}
		case productstore.ForeignKeys[11]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field status_item_item_cancel_product_stores", value)
			} else if value.Valid {
				ps.status_item_item_cancel_product_stores = new(int)
				*ps.status_item_item_cancel_product_stores = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryPrimaryProductStoreGroup queries the "primary_product_store_group" edge of the ProductStore entity.
func (ps *ProductStore) QueryPrimaryProductStoreGroup() *ProductStoreGroupQuery {
	return (&ProductStoreClient{config: ps.config}).QueryPrimaryProductStoreGroup(ps)
}

// QueryReserveOrderEnumeration queries the "reserve_order_enumeration" edge of the ProductStore entity.
func (ps *ProductStore) QueryReserveOrderEnumeration() *EnumerationQuery {
	return (&ProductStoreClient{config: ps.config}).QueryReserveOrderEnumeration(ps)
}

// QueryRequirementMethodEnumeration queries the "requirement_method_enumeration" edge of the ProductStore entity.
func (ps *ProductStore) QueryRequirementMethodEnumeration() *EnumerationQuery {
	return (&ProductStoreClient{config: ps.config}).QueryRequirementMethodEnumeration(ps)
}

// QueryDefaultSalesChannelEnumeration queries the "default_sales_channel_enumeration" edge of the ProductStore entity.
func (ps *ProductStore) QueryDefaultSalesChannelEnumeration() *EnumerationQuery {
	return (&ProductStoreClient{config: ps.config}).QueryDefaultSalesChannelEnumeration(ps)
}

// QueryHeaderApprovedStatusItem queries the "header_approved_status_item" edge of the ProductStore entity.
func (ps *ProductStore) QueryHeaderApprovedStatusItem() *StatusItemQuery {
	return (&ProductStoreClient{config: ps.config}).QueryHeaderApprovedStatusItem(ps)
}

// QueryItemApprovedStatusItem queries the "item_approved_status_item" edge of the ProductStore entity.
func (ps *ProductStore) QueryItemApprovedStatusItem() *StatusItemQuery {
	return (&ProductStoreClient{config: ps.config}).QueryItemApprovedStatusItem(ps)
}

// QueryDigitalItemApprovedStatusItem queries the "digital_item_approved_status_item" edge of the ProductStore entity.
func (ps *ProductStore) QueryDigitalItemApprovedStatusItem() *StatusItemQuery {
	return (&ProductStoreClient{config: ps.config}).QueryDigitalItemApprovedStatusItem(ps)
}

// QueryHeaderDeclinedStatusItem queries the "header_declined_status_item" edge of the ProductStore entity.
func (ps *ProductStore) QueryHeaderDeclinedStatusItem() *StatusItemQuery {
	return (&ProductStoreClient{config: ps.config}).QueryHeaderDeclinedStatusItem(ps)
}

// QueryItemDeclinedStatusItem queries the "item_declined_status_item" edge of the ProductStore entity.
func (ps *ProductStore) QueryItemDeclinedStatusItem() *StatusItemQuery {
	return (&ProductStoreClient{config: ps.config}).QueryItemDeclinedStatusItem(ps)
}

// QueryHeaderCancelStatusItem queries the "header_cancel_status_item" edge of the ProductStore entity.
func (ps *ProductStore) QueryHeaderCancelStatusItem() *StatusItemQuery {
	return (&ProductStoreClient{config: ps.config}).QueryHeaderCancelStatusItem(ps)
}

// QueryItemCancelStatusItem queries the "item_cancel_status_item" edge of the ProductStore entity.
func (ps *ProductStore) QueryItemCancelStatusItem() *StatusItemQuery {
	return (&ProductStoreClient{config: ps.config}).QueryItemCancelStatusItem(ps)
}

// QueryStoreCreditAccountEnumeration queries the "store_credit_account_enumeration" edge of the ProductStore entity.
func (ps *ProductStore) QueryStoreCreditAccountEnumeration() *EnumerationQuery {
	return (&ProductStoreClient{config: ps.config}).QueryStoreCreditAccountEnumeration(ps)
}

// QueryOrderHeaders queries the "order_headers" edge of the ProductStore entity.
func (ps *ProductStore) QueryOrderHeaders() *OrderHeaderQuery {
	return (&ProductStoreClient{config: ps.config}).QueryOrderHeaders(ps)
}

// QueryProductReviews queries the "product_reviews" edge of the ProductStore entity.
func (ps *ProductStore) QueryProductReviews() *ProductReviewQuery {
	return (&ProductStoreClient{config: ps.config}).QueryProductReviews(ps)
}

// Update returns a builder for updating this ProductStore.
// Note that you need to call ProductStore.Unwrap() before calling this method if this ProductStore
// was returned from a transaction, and the transaction was committed or rolled back.
func (ps *ProductStore) Update() *ProductStoreUpdateOne {
	return (&ProductStoreClient{config: ps.config}).UpdateOne(ps)
}

// Unwrap unwraps the ProductStore entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ps *ProductStore) Unwrap() *ProductStore {
	tx, ok := ps.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProductStore is not a transactional entity")
	}
	ps.config.driver = tx.drv
	return ps
}

// String implements the fmt.Stringer.
func (ps *ProductStore) String() string {
	var builder strings.Builder
	builder.WriteString("ProductStore(")
	builder.WriteString(fmt.Sprintf("id=%v", ps.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(ps.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(ps.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", string_ref=")
	builder.WriteString(ps.StringRef)
	builder.WriteString(", store_name=")
	builder.WriteString(ps.StoreName)
	builder.WriteString(", company_name=")
	builder.WriteString(ps.CompanyName)
	builder.WriteString(", title=")
	builder.WriteString(ps.Title)
	builder.WriteString(", subtitle=")
	builder.WriteString(ps.Subtitle)
	builder.WriteString(", pay_to_party_id=")
	builder.WriteString(fmt.Sprintf("%v", ps.PayToPartyID))
	builder.WriteString(", days_to_cancel_non_pay=")
	builder.WriteString(fmt.Sprintf("%v", ps.DaysToCancelNonPay))
	builder.WriteString(", manual_auth_is_capture=")
	builder.WriteString(fmt.Sprintf("%v", ps.ManualAuthIsCapture))
	builder.WriteString(", prorate_shipping=")
	builder.WriteString(fmt.Sprintf("%v", ps.ProrateShipping))
	builder.WriteString(", prorate_taxes=")
	builder.WriteString(fmt.Sprintf("%v", ps.ProrateTaxes))
	builder.WriteString(", view_cart_on_add=")
	builder.WriteString(fmt.Sprintf("%v", ps.ViewCartOnAdd))
	builder.WriteString(", auto_save_cart=")
	builder.WriteString(fmt.Sprintf("%v", ps.AutoSaveCart))
	builder.WriteString(", auto_approve_reviews=")
	builder.WriteString(fmt.Sprintf("%v", ps.AutoApproveReviews))
	builder.WriteString(", is_demo_store=")
	builder.WriteString(fmt.Sprintf("%v", ps.IsDemoStore))
	builder.WriteString(", is_immediately_fulfilled=")
	builder.WriteString(fmt.Sprintf("%v", ps.IsImmediatelyFulfilled))
	builder.WriteString(", inventory_facility_id=")
	builder.WriteString(fmt.Sprintf("%v", ps.InventoryFacilityID))
	builder.WriteString(", one_inventory_facility=")
	builder.WriteString(fmt.Sprintf("%v", ps.OneInventoryFacility))
	builder.WriteString(", check_inventory=")
	builder.WriteString(fmt.Sprintf("%v", ps.CheckInventory))
	builder.WriteString(", reserve_inventory=")
	builder.WriteString(fmt.Sprintf("%v", ps.ReserveInventory))
	builder.WriteString(", require_inventory=")
	builder.WriteString(fmt.Sprintf("%v", ps.RequireInventory))
	builder.WriteString(", balance_res_on_order_creation=")
	builder.WriteString(fmt.Sprintf("%v", ps.BalanceResOnOrderCreation))
	builder.WriteString(", order_number_prefix=")
	builder.WriteString(ps.OrderNumberPrefix)
	builder.WriteString(", default_locale_string=")
	builder.WriteString(ps.DefaultLocaleString)
	builder.WriteString(", default_currency_uom_id=")
	builder.WriteString(fmt.Sprintf("%v", ps.DefaultCurrencyUomID))
	builder.WriteString(", default_time_zone_string=")
	builder.WriteString(ps.DefaultTimeZoneString)
	builder.WriteString(", allow_password=")
	builder.WriteString(fmt.Sprintf("%v", ps.AllowPassword))
	builder.WriteString(", default_password=")
	builder.WriteString(ps.DefaultPassword)
	builder.WriteString(", explode_order_items=")
	builder.WriteString(fmt.Sprintf("%v", ps.ExplodeOrderItems))
	builder.WriteString(", check_gc_balance=")
	builder.WriteString(fmt.Sprintf("%v", ps.CheckGcBalance))
	builder.WriteString(", retry_failed_auths=")
	builder.WriteString(fmt.Sprintf("%v", ps.RetryFailedAuths))
	builder.WriteString(", auth_declined_message=")
	builder.WriteString(ps.AuthDeclinedMessage)
	builder.WriteString(", auth_fraud_message=")
	builder.WriteString(ps.AuthFraudMessage)
	builder.WriteString(", auth_error_message=")
	builder.WriteString(ps.AuthErrorMessage)
	builder.WriteString(", visual_theme_id=")
	builder.WriteString(fmt.Sprintf("%v", ps.VisualThemeID))
	builder.WriteString(", use_primary_email_username=")
	builder.WriteString(fmt.Sprintf("%v", ps.UsePrimaryEmailUsername))
	builder.WriteString(", require_customer_role=")
	builder.WriteString(fmt.Sprintf("%v", ps.RequireCustomerRole))
	builder.WriteString(", auto_invoice_digital_items=")
	builder.WriteString(fmt.Sprintf("%v", ps.AutoInvoiceDigitalItems))
	builder.WriteString(", req_ship_addr_for_dig_items=")
	builder.WriteString(fmt.Sprintf("%v", ps.ReqShipAddrForDigItems))
	builder.WriteString(", show_checkout_gift_options=")
	builder.WriteString(fmt.Sprintf("%v", ps.ShowCheckoutGiftOptions))
	builder.WriteString(", select_payment_type_per_item=")
	builder.WriteString(fmt.Sprintf("%v", ps.SelectPaymentTypePerItem))
	builder.WriteString(", show_prices_with_vat_tax=")
	builder.WriteString(fmt.Sprintf("%v", ps.ShowPricesWithVatTax))
	builder.WriteString(", show_tax_is_exempt=")
	builder.WriteString(fmt.Sprintf("%v", ps.ShowTaxIsExempt))
	builder.WriteString(", vat_tax_auth_geo_id=")
	builder.WriteString(fmt.Sprintf("%v", ps.VatTaxAuthGeoID))
	builder.WriteString(", vat_tax_auth_party_id=")
	builder.WriteString(fmt.Sprintf("%v", ps.VatTaxAuthPartyID))
	builder.WriteString(", enable_auto_suggestion_list=")
	builder.WriteString(fmt.Sprintf("%v", ps.EnableAutoSuggestionList))
	builder.WriteString(", enable_dig_prod_upload=")
	builder.WriteString(fmt.Sprintf("%v", ps.EnableDigProdUpload))
	builder.WriteString(", prod_search_exclude_variants=")
	builder.WriteString(fmt.Sprintf("%v", ps.ProdSearchExcludeVariants))
	builder.WriteString(", dig_prod_upload_category_id=")
	builder.WriteString(fmt.Sprintf("%v", ps.DigProdUploadCategoryID))
	builder.WriteString(", auto_order_cc_try_exp=")
	builder.WriteString(fmt.Sprintf("%v", ps.AutoOrderCcTryExp))
	builder.WriteString(", auto_order_cc_try_other_cards=")
	builder.WriteString(fmt.Sprintf("%v", ps.AutoOrderCcTryOtherCards))
	builder.WriteString(", auto_order_cc_try_later_nsf=")
	builder.WriteString(fmt.Sprintf("%v", ps.AutoOrderCcTryLaterNsf))
	builder.WriteString(", auto_order_cc_try_later_max=")
	builder.WriteString(fmt.Sprintf("%v", ps.AutoOrderCcTryLaterMax))
	builder.WriteString(", store_credit_valid_days=")
	builder.WriteString(fmt.Sprintf("%v", ps.StoreCreditValidDays))
	builder.WriteString(", auto_approve_invoice=")
	builder.WriteString(fmt.Sprintf("%v", ps.AutoApproveInvoice))
	builder.WriteString(", auto_approve_order=")
	builder.WriteString(fmt.Sprintf("%v", ps.AutoApproveOrder))
	builder.WriteString(", ship_if_capture_fails=")
	builder.WriteString(fmt.Sprintf("%v", ps.ShipIfCaptureFails))
	builder.WriteString(", set_owner_upon_issuance=")
	builder.WriteString(fmt.Sprintf("%v", ps.SetOwnerUponIssuance))
	builder.WriteString(", req_return_inventory_receive=")
	builder.WriteString(fmt.Sprintf("%v", ps.ReqReturnInventoryReceive))
	builder.WriteString(", add_to_cart_remove_incompat=")
	builder.WriteString(fmt.Sprintf("%v", ps.AddToCartRemoveIncompat))
	builder.WriteString(", add_to_cart_replace_upsell=")
	builder.WriteString(fmt.Sprintf("%v", ps.AddToCartReplaceUpsell))
	builder.WriteString(", split_pay_pref_per_shp_grp=")
	builder.WriteString(fmt.Sprintf("%v", ps.SplitPayPrefPerShpGrp))
	builder.WriteString(", managed_by_lot=")
	builder.WriteString(fmt.Sprintf("%v", ps.ManagedByLot))
	builder.WriteString(", show_out_of_stock_products=")
	builder.WriteString(fmt.Sprintf("%v", ps.ShowOutOfStockProducts))
	builder.WriteString(", order_decimal_quantity=")
	builder.WriteString(fmt.Sprintf("%v", ps.OrderDecimalQuantity))
	builder.WriteString(", allow_comment=")
	builder.WriteString(fmt.Sprintf("%v", ps.AllowComment))
	builder.WriteString(", allocate_inventory=")
	builder.WriteString(fmt.Sprintf("%v", ps.AllocateInventory))
	builder.WriteByte(')')
	return builder.String()
}

// ProductStores is a parsable slice of ProductStore.
type ProductStores []*ProductStore

func (ps ProductStores) config(cfg config) {
	for _i := range ps {
		ps[_i].config = cfg
	}
}
