// Code generated by entc, DO NOT EDIT.

package productstore

import (
	"fmt"
	"time"
)

const (
	// Label holds the string label denoting the productstore type in the database.
	Label = "product_store"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldStringRef holds the string denoting the string_ref field in the database.
	FieldStringRef = "string_ref"
	// FieldStoreName holds the string denoting the store_name field in the database.
	FieldStoreName = "store_name"
	// FieldCompanyName holds the string denoting the company_name field in the database.
	FieldCompanyName = "company_name"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldSubtitle holds the string denoting the subtitle field in the database.
	FieldSubtitle = "subtitle"
	// FieldPayToPartyID holds the string denoting the pay_to_party_id field in the database.
	FieldPayToPartyID = "pay_to_party_id"
	// FieldDaysToCancelNonPay holds the string denoting the days_to_cancel_non_pay field in the database.
	FieldDaysToCancelNonPay = "days_to_cancel_non_pay"
	// FieldManualAuthIsCapture holds the string denoting the manual_auth_is_capture field in the database.
	FieldManualAuthIsCapture = "manual_auth_is_capture"
	// FieldProrateShipping holds the string denoting the prorate_shipping field in the database.
	FieldProrateShipping = "prorate_shipping"
	// FieldProrateTaxes holds the string denoting the prorate_taxes field in the database.
	FieldProrateTaxes = "prorate_taxes"
	// FieldViewCartOnAdd holds the string denoting the view_cart_on_add field in the database.
	FieldViewCartOnAdd = "view_cart_on_add"
	// FieldAutoSaveCart holds the string denoting the auto_save_cart field in the database.
	FieldAutoSaveCart = "auto_save_cart"
	// FieldAutoApproveReviews holds the string denoting the auto_approve_reviews field in the database.
	FieldAutoApproveReviews = "auto_approve_reviews"
	// FieldIsDemoStore holds the string denoting the is_demo_store field in the database.
	FieldIsDemoStore = "is_demo_store"
	// FieldIsImmediatelyFulfilled holds the string denoting the is_immediately_fulfilled field in the database.
	FieldIsImmediatelyFulfilled = "is_immediately_fulfilled"
	// FieldInventoryFacilityID holds the string denoting the inventory_facility_id field in the database.
	FieldInventoryFacilityID = "inventory_facility_id"
	// FieldOneInventoryFacility holds the string denoting the one_inventory_facility field in the database.
	FieldOneInventoryFacility = "one_inventory_facility"
	// FieldCheckInventory holds the string denoting the check_inventory field in the database.
	FieldCheckInventory = "check_inventory"
	// FieldReserveInventory holds the string denoting the reserve_inventory field in the database.
	FieldReserveInventory = "reserve_inventory"
	// FieldRequireInventory holds the string denoting the require_inventory field in the database.
	FieldRequireInventory = "require_inventory"
	// FieldBalanceResOnOrderCreation holds the string denoting the balance_res_on_order_creation field in the database.
	FieldBalanceResOnOrderCreation = "balance_res_on_order_creation"
	// FieldOrderNumberPrefix holds the string denoting the order_number_prefix field in the database.
	FieldOrderNumberPrefix = "order_number_prefix"
	// FieldDefaultLocaleString holds the string denoting the default_locale_string field in the database.
	FieldDefaultLocaleString = "default_locale_string"
	// FieldDefaultCurrencyUomID holds the string denoting the default_currency_uom_id field in the database.
	FieldDefaultCurrencyUomID = "default_currency_uom_id"
	// FieldDefaultTimeZoneString holds the string denoting the default_time_zone_string field in the database.
	FieldDefaultTimeZoneString = "default_time_zone_string"
	// FieldAllowPassword holds the string denoting the allow_password field in the database.
	FieldAllowPassword = "allow_password"
	// FieldDefaultPassword holds the string denoting the default_password field in the database.
	FieldDefaultPassword = "default_password"
	// FieldExplodeOrderItems holds the string denoting the explode_order_items field in the database.
	FieldExplodeOrderItems = "explode_order_items"
	// FieldCheckGcBalance holds the string denoting the check_gc_balance field in the database.
	FieldCheckGcBalance = "check_gc_balance"
	// FieldRetryFailedAuths holds the string denoting the retry_failed_auths field in the database.
	FieldRetryFailedAuths = "retry_failed_auths"
	// FieldAuthDeclinedMessage holds the string denoting the auth_declined_message field in the database.
	FieldAuthDeclinedMessage = "auth_declined_message"
	// FieldAuthFraudMessage holds the string denoting the auth_fraud_message field in the database.
	FieldAuthFraudMessage = "auth_fraud_message"
	// FieldAuthErrorMessage holds the string denoting the auth_error_message field in the database.
	FieldAuthErrorMessage = "auth_error_message"
	// FieldVisualThemeID holds the string denoting the visual_theme_id field in the database.
	FieldVisualThemeID = "visual_theme_id"
	// FieldUsePrimaryEmailUsername holds the string denoting the use_primary_email_username field in the database.
	FieldUsePrimaryEmailUsername = "use_primary_email_username"
	// FieldRequireCustomerRole holds the string denoting the require_customer_role field in the database.
	FieldRequireCustomerRole = "require_customer_role"
	// FieldAutoInvoiceDigitalItems holds the string denoting the auto_invoice_digital_items field in the database.
	FieldAutoInvoiceDigitalItems = "auto_invoice_digital_items"
	// FieldReqShipAddrForDigItems holds the string denoting the req_ship_addr_for_dig_items field in the database.
	FieldReqShipAddrForDigItems = "req_ship_addr_for_dig_items"
	// FieldShowCheckoutGiftOptions holds the string denoting the show_checkout_gift_options field in the database.
	FieldShowCheckoutGiftOptions = "show_checkout_gift_options"
	// FieldSelectPaymentTypePerItem holds the string denoting the select_payment_type_per_item field in the database.
	FieldSelectPaymentTypePerItem = "select_payment_type_per_item"
	// FieldShowPricesWithVatTax holds the string denoting the show_prices_with_vat_tax field in the database.
	FieldShowPricesWithVatTax = "show_prices_with_vat_tax"
	// FieldShowTaxIsExempt holds the string denoting the show_tax_is_exempt field in the database.
	FieldShowTaxIsExempt = "show_tax_is_exempt"
	// FieldVatTaxAuthGeoID holds the string denoting the vat_tax_auth_geo_id field in the database.
	FieldVatTaxAuthGeoID = "vat_tax_auth_geo_id"
	// FieldVatTaxAuthPartyID holds the string denoting the vat_tax_auth_party_id field in the database.
	FieldVatTaxAuthPartyID = "vat_tax_auth_party_id"
	// FieldEnableAutoSuggestionList holds the string denoting the enable_auto_suggestion_list field in the database.
	FieldEnableAutoSuggestionList = "enable_auto_suggestion_list"
	// FieldEnableDigProdUpload holds the string denoting the enable_dig_prod_upload field in the database.
	FieldEnableDigProdUpload = "enable_dig_prod_upload"
	// FieldProdSearchExcludeVariants holds the string denoting the prod_search_exclude_variants field in the database.
	FieldProdSearchExcludeVariants = "prod_search_exclude_variants"
	// FieldDigProdUploadCategoryID holds the string denoting the dig_prod_upload_category_id field in the database.
	FieldDigProdUploadCategoryID = "dig_prod_upload_category_id"
	// FieldAutoOrderCcTryExp holds the string denoting the auto_order_cc_try_exp field in the database.
	FieldAutoOrderCcTryExp = "auto_order_cc_try_exp"
	// FieldAutoOrderCcTryOtherCards holds the string denoting the auto_order_cc_try_other_cards field in the database.
	FieldAutoOrderCcTryOtherCards = "auto_order_cc_try_other_cards"
	// FieldAutoOrderCcTryLaterNsf holds the string denoting the auto_order_cc_try_later_nsf field in the database.
	FieldAutoOrderCcTryLaterNsf = "auto_order_cc_try_later_nsf"
	// FieldAutoOrderCcTryLaterMax holds the string denoting the auto_order_cc_try_later_max field in the database.
	FieldAutoOrderCcTryLaterMax = "auto_order_cc_try_later_max"
	// FieldStoreCreditValidDays holds the string denoting the store_credit_valid_days field in the database.
	FieldStoreCreditValidDays = "store_credit_valid_days"
	// FieldAutoApproveInvoice holds the string denoting the auto_approve_invoice field in the database.
	FieldAutoApproveInvoice = "auto_approve_invoice"
	// FieldAutoApproveOrder holds the string denoting the auto_approve_order field in the database.
	FieldAutoApproveOrder = "auto_approve_order"
	// FieldShipIfCaptureFails holds the string denoting the ship_if_capture_fails field in the database.
	FieldShipIfCaptureFails = "ship_if_capture_fails"
	// FieldSetOwnerUponIssuance holds the string denoting the set_owner_upon_issuance field in the database.
	FieldSetOwnerUponIssuance = "set_owner_upon_issuance"
	// FieldReqReturnInventoryReceive holds the string denoting the req_return_inventory_receive field in the database.
	FieldReqReturnInventoryReceive = "req_return_inventory_receive"
	// FieldAddToCartRemoveIncompat holds the string denoting the add_to_cart_remove_incompat field in the database.
	FieldAddToCartRemoveIncompat = "add_to_cart_remove_incompat"
	// FieldAddToCartReplaceUpsell holds the string denoting the add_to_cart_replace_upsell field in the database.
	FieldAddToCartReplaceUpsell = "add_to_cart_replace_upsell"
	// FieldSplitPayPrefPerShpGrp holds the string denoting the split_pay_pref_per_shp_grp field in the database.
	FieldSplitPayPrefPerShpGrp = "split_pay_pref_per_shp_grp"
	// FieldManagedByLot holds the string denoting the managed_by_lot field in the database.
	FieldManagedByLot = "managed_by_lot"
	// FieldShowOutOfStockProducts holds the string denoting the show_out_of_stock_products field in the database.
	FieldShowOutOfStockProducts = "show_out_of_stock_products"
	// FieldOrderDecimalQuantity holds the string denoting the order_decimal_quantity field in the database.
	FieldOrderDecimalQuantity = "order_decimal_quantity"
	// FieldAllowComment holds the string denoting the allow_comment field in the database.
	FieldAllowComment = "allow_comment"
	// FieldAllocateInventory holds the string denoting the allocate_inventory field in the database.
	FieldAllocateInventory = "allocate_inventory"
	// EdgePrimaryProductStoreGroup holds the string denoting the primary_product_store_group edge name in mutations.
	EdgePrimaryProductStoreGroup = "primary_product_store_group"
	// EdgeReserveOrderEnumeration holds the string denoting the reserve_order_enumeration edge name in mutations.
	EdgeReserveOrderEnumeration = "reserve_order_enumeration"
	// EdgeRequirementMethodEnumeration holds the string denoting the requirement_method_enumeration edge name in mutations.
	EdgeRequirementMethodEnumeration = "requirement_method_enumeration"
	// EdgeDefaultSalesChannelEnumeration holds the string denoting the default_sales_channel_enumeration edge name in mutations.
	EdgeDefaultSalesChannelEnumeration = "default_sales_channel_enumeration"
	// EdgeHeaderApprovedStatusItem holds the string denoting the header_approved_status_item edge name in mutations.
	EdgeHeaderApprovedStatusItem = "header_approved_status_item"
	// EdgeItemApprovedStatusItem holds the string denoting the item_approved_status_item edge name in mutations.
	EdgeItemApprovedStatusItem = "item_approved_status_item"
	// EdgeDigitalItemApprovedStatusItem holds the string denoting the digital_item_approved_status_item edge name in mutations.
	EdgeDigitalItemApprovedStatusItem = "digital_item_approved_status_item"
	// EdgeHeaderDeclinedStatusItem holds the string denoting the header_declined_status_item edge name in mutations.
	EdgeHeaderDeclinedStatusItem = "header_declined_status_item"
	// EdgeItemDeclinedStatusItem holds the string denoting the item_declined_status_item edge name in mutations.
	EdgeItemDeclinedStatusItem = "item_declined_status_item"
	// EdgeHeaderCancelStatusItem holds the string denoting the header_cancel_status_item edge name in mutations.
	EdgeHeaderCancelStatusItem = "header_cancel_status_item"
	// EdgeItemCancelStatusItem holds the string denoting the item_cancel_status_item edge name in mutations.
	EdgeItemCancelStatusItem = "item_cancel_status_item"
	// EdgeStoreCreditAccountEnumeration holds the string denoting the store_credit_account_enumeration edge name in mutations.
	EdgeStoreCreditAccountEnumeration = "store_credit_account_enumeration"
	// EdgeOrderHeaders holds the string denoting the order_headers edge name in mutations.
	EdgeOrderHeaders = "order_headers"
	// EdgeProductReviews holds the string denoting the product_reviews edge name in mutations.
	EdgeProductReviews = "product_reviews"
	// Table holds the table name of the productstore in the database.
	Table = "product_stores"
	// PrimaryProductStoreGroupTable is the table the holds the primary_product_store_group relation/edge.
	PrimaryProductStoreGroupTable = "product_stores"
	// PrimaryProductStoreGroupInverseTable is the table name for the ProductStoreGroup entity.
	// It exists in this package in order to avoid circular dependency with the "productstoregroup" package.
	PrimaryProductStoreGroupInverseTable = "product_store_groups"
	// PrimaryProductStoreGroupColumn is the table column denoting the primary_product_store_group relation/edge.
	PrimaryProductStoreGroupColumn = "product_store_group_primary_product_stores"
	// ReserveOrderEnumerationTable is the table the holds the reserve_order_enumeration relation/edge.
	ReserveOrderEnumerationTable = "product_stores"
	// ReserveOrderEnumerationInverseTable is the table name for the Enumeration entity.
	// It exists in this package in order to avoid circular dependency with the "enumeration" package.
	ReserveOrderEnumerationInverseTable = "enumerations"
	// ReserveOrderEnumerationColumn is the table column denoting the reserve_order_enumeration relation/edge.
	ReserveOrderEnumerationColumn = "enumeration_reserve_order_product_stores"
	// RequirementMethodEnumerationTable is the table the holds the requirement_method_enumeration relation/edge.
	RequirementMethodEnumerationTable = "product_stores"
	// RequirementMethodEnumerationInverseTable is the table name for the Enumeration entity.
	// It exists in this package in order to avoid circular dependency with the "enumeration" package.
	RequirementMethodEnumerationInverseTable = "enumerations"
	// RequirementMethodEnumerationColumn is the table column denoting the requirement_method_enumeration relation/edge.
	RequirementMethodEnumerationColumn = "enumeration_requirement_method_product_stores"
	// DefaultSalesChannelEnumerationTable is the table the holds the default_sales_channel_enumeration relation/edge.
	DefaultSalesChannelEnumerationTable = "product_stores"
	// DefaultSalesChannelEnumerationInverseTable is the table name for the Enumeration entity.
	// It exists in this package in order to avoid circular dependency with the "enumeration" package.
	DefaultSalesChannelEnumerationInverseTable = "enumerations"
	// DefaultSalesChannelEnumerationColumn is the table column denoting the default_sales_channel_enumeration relation/edge.
	DefaultSalesChannelEnumerationColumn = "enumeration_default_sales_channel_product_stores"
	// HeaderApprovedStatusItemTable is the table the holds the header_approved_status_item relation/edge.
	HeaderApprovedStatusItemTable = "product_stores"
	// HeaderApprovedStatusItemInverseTable is the table name for the StatusItem entity.
	// It exists in this package in order to avoid circular dependency with the "statusitem" package.
	HeaderApprovedStatusItemInverseTable = "status_items"
	// HeaderApprovedStatusItemColumn is the table column denoting the header_approved_status_item relation/edge.
	HeaderApprovedStatusItemColumn = "status_item_header_approved_product_stores"
	// ItemApprovedStatusItemTable is the table the holds the item_approved_status_item relation/edge.
	ItemApprovedStatusItemTable = "product_stores"
	// ItemApprovedStatusItemInverseTable is the table name for the StatusItem entity.
	// It exists in this package in order to avoid circular dependency with the "statusitem" package.
	ItemApprovedStatusItemInverseTable = "status_items"
	// ItemApprovedStatusItemColumn is the table column denoting the item_approved_status_item relation/edge.
	ItemApprovedStatusItemColumn = "status_item_item_approved_product_stores"
	// DigitalItemApprovedStatusItemTable is the table the holds the digital_item_approved_status_item relation/edge.
	DigitalItemApprovedStatusItemTable = "product_stores"
	// DigitalItemApprovedStatusItemInverseTable is the table name for the StatusItem entity.
	// It exists in this package in order to avoid circular dependency with the "statusitem" package.
	DigitalItemApprovedStatusItemInverseTable = "status_items"
	// DigitalItemApprovedStatusItemColumn is the table column denoting the digital_item_approved_status_item relation/edge.
	DigitalItemApprovedStatusItemColumn = "status_item_digital_item_approved_product_stores"
	// HeaderDeclinedStatusItemTable is the table the holds the header_declined_status_item relation/edge.
	HeaderDeclinedStatusItemTable = "product_stores"
	// HeaderDeclinedStatusItemInverseTable is the table name for the StatusItem entity.
	// It exists in this package in order to avoid circular dependency with the "statusitem" package.
	HeaderDeclinedStatusItemInverseTable = "status_items"
	// HeaderDeclinedStatusItemColumn is the table column denoting the header_declined_status_item relation/edge.
	HeaderDeclinedStatusItemColumn = "status_item_header_declined_product_stores"
	// ItemDeclinedStatusItemTable is the table the holds the item_declined_status_item relation/edge.
	ItemDeclinedStatusItemTable = "product_stores"
	// ItemDeclinedStatusItemInverseTable is the table name for the StatusItem entity.
	// It exists in this package in order to avoid circular dependency with the "statusitem" package.
	ItemDeclinedStatusItemInverseTable = "status_items"
	// ItemDeclinedStatusItemColumn is the table column denoting the item_declined_status_item relation/edge.
	ItemDeclinedStatusItemColumn = "status_item_item_declined_product_stores"
	// HeaderCancelStatusItemTable is the table the holds the header_cancel_status_item relation/edge.
	HeaderCancelStatusItemTable = "product_stores"
	// HeaderCancelStatusItemInverseTable is the table name for the StatusItem entity.
	// It exists in this package in order to avoid circular dependency with the "statusitem" package.
	HeaderCancelStatusItemInverseTable = "status_items"
	// HeaderCancelStatusItemColumn is the table column denoting the header_cancel_status_item relation/edge.
	HeaderCancelStatusItemColumn = "status_item_header_cancel_product_stores"
	// ItemCancelStatusItemTable is the table the holds the item_cancel_status_item relation/edge.
	ItemCancelStatusItemTable = "product_stores"
	// ItemCancelStatusItemInverseTable is the table name for the StatusItem entity.
	// It exists in this package in order to avoid circular dependency with the "statusitem" package.
	ItemCancelStatusItemInverseTable = "status_items"
	// ItemCancelStatusItemColumn is the table column denoting the item_cancel_status_item relation/edge.
	ItemCancelStatusItemColumn = "status_item_item_cancel_product_stores"
	// StoreCreditAccountEnumerationTable is the table the holds the store_credit_account_enumeration relation/edge.
	StoreCreditAccountEnumerationTable = "product_stores"
	// StoreCreditAccountEnumerationInverseTable is the table name for the Enumeration entity.
	// It exists in this package in order to avoid circular dependency with the "enumeration" package.
	StoreCreditAccountEnumerationInverseTable = "enumerations"
	// StoreCreditAccountEnumerationColumn is the table column denoting the store_credit_account_enumeration relation/edge.
	StoreCreditAccountEnumerationColumn = "enumeration_store_credit_account_product_stores"
	// OrderHeadersTable is the table the holds the order_headers relation/edge.
	OrderHeadersTable = "order_headers"
	// OrderHeadersInverseTable is the table name for the OrderHeader entity.
	// It exists in this package in order to avoid circular dependency with the "orderheader" package.
	OrderHeadersInverseTable = "order_headers"
	// OrderHeadersColumn is the table column denoting the order_headers relation/edge.
	OrderHeadersColumn = "product_store_order_headers"
	// ProductReviewsTable is the table the holds the product_reviews relation/edge.
	ProductReviewsTable = "product_reviews"
	// ProductReviewsInverseTable is the table name for the ProductReview entity.
	// It exists in this package in order to avoid circular dependency with the "productreview" package.
	ProductReviewsInverseTable = "product_reviews"
	// ProductReviewsColumn is the table column denoting the product_reviews relation/edge.
	ProductReviewsColumn = "product_store_product_reviews"
)

// Columns holds all SQL columns for productstore fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldStringRef,
	FieldStoreName,
	FieldCompanyName,
	FieldTitle,
	FieldSubtitle,
	FieldPayToPartyID,
	FieldDaysToCancelNonPay,
	FieldManualAuthIsCapture,
	FieldProrateShipping,
	FieldProrateTaxes,
	FieldViewCartOnAdd,
	FieldAutoSaveCart,
	FieldAutoApproveReviews,
	FieldIsDemoStore,
	FieldIsImmediatelyFulfilled,
	FieldInventoryFacilityID,
	FieldOneInventoryFacility,
	FieldCheckInventory,
	FieldReserveInventory,
	FieldRequireInventory,
	FieldBalanceResOnOrderCreation,
	FieldOrderNumberPrefix,
	FieldDefaultLocaleString,
	FieldDefaultCurrencyUomID,
	FieldDefaultTimeZoneString,
	FieldAllowPassword,
	FieldDefaultPassword,
	FieldExplodeOrderItems,
	FieldCheckGcBalance,
	FieldRetryFailedAuths,
	FieldAuthDeclinedMessage,
	FieldAuthFraudMessage,
	FieldAuthErrorMessage,
	FieldVisualThemeID,
	FieldUsePrimaryEmailUsername,
	FieldRequireCustomerRole,
	FieldAutoInvoiceDigitalItems,
	FieldReqShipAddrForDigItems,
	FieldShowCheckoutGiftOptions,
	FieldSelectPaymentTypePerItem,
	FieldShowPricesWithVatTax,
	FieldShowTaxIsExempt,
	FieldVatTaxAuthGeoID,
	FieldVatTaxAuthPartyID,
	FieldEnableAutoSuggestionList,
	FieldEnableDigProdUpload,
	FieldProdSearchExcludeVariants,
	FieldDigProdUploadCategoryID,
	FieldAutoOrderCcTryExp,
	FieldAutoOrderCcTryOtherCards,
	FieldAutoOrderCcTryLaterNsf,
	FieldAutoOrderCcTryLaterMax,
	FieldStoreCreditValidDays,
	FieldAutoApproveInvoice,
	FieldAutoApproveOrder,
	FieldShipIfCaptureFails,
	FieldSetOwnerUponIssuance,
	FieldReqReturnInventoryReceive,
	FieldAddToCartRemoveIncompat,
	FieldAddToCartReplaceUpsell,
	FieldSplitPayPrefPerShpGrp,
	FieldManagedByLot,
	FieldShowOutOfStockProducts,
	FieldOrderDecimalQuantity,
	FieldAllowComment,
	FieldAllocateInventory,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "product_stores"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"enumeration_reserve_order_product_stores",
	"enumeration_requirement_method_product_stores",
	"enumeration_default_sales_channel_product_stores",
	"enumeration_store_credit_account_product_stores",
	"product_store_group_primary_product_stores",
	"status_item_header_approved_product_stores",
	"status_item_item_approved_product_stores",
	"status_item_digital_item_approved_product_stores",
	"status_item_header_declined_product_stores",
	"status_item_item_declined_product_stores",
	"status_item_header_cancel_product_stores",
	"status_item_item_cancel_product_stores",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// OrderNumberPrefixValidator is a validator for the "order_number_prefix" field. It is called by the builders before save.
	OrderNumberPrefixValidator func(string) error
	// DefaultLocaleStringValidator is a validator for the "default_locale_string" field. It is called by the builders before save.
	DefaultLocaleStringValidator func(string) error
	// DefaultTimeZoneStringValidator is a validator for the "default_time_zone_string" field. It is called by the builders before save.
	DefaultTimeZoneStringValidator func(string) error
)

// ManualAuthIsCapture defines the type for the "manual_auth_is_capture" enum field.
type ManualAuthIsCapture string

// ManualAuthIsCapture values.
const (
	ManualAuthIsCaptureYes     ManualAuthIsCapture = "Yes"
	ManualAuthIsCaptureNo      ManualAuthIsCapture = "No"
	ManualAuthIsCaptureUnknown ManualAuthIsCapture = "Unknown"
)

func (maic ManualAuthIsCapture) String() string {
	return string(maic)
}

// ManualAuthIsCaptureValidator is a validator for the "manual_auth_is_capture" field enum values. It is called by the builders before save.
func ManualAuthIsCaptureValidator(maic ManualAuthIsCapture) error {
	switch maic {
	case ManualAuthIsCaptureYes, ManualAuthIsCaptureNo, ManualAuthIsCaptureUnknown:
		return nil
	default:
		return fmt.Errorf("productstore: invalid enum value for manual_auth_is_capture field: %q", maic)
	}
}

// ProrateShipping defines the type for the "prorate_shipping" enum field.
type ProrateShipping string

// ProrateShipping values.
const (
	ProrateShippingYes     ProrateShipping = "Yes"
	ProrateShippingNo      ProrateShipping = "No"
	ProrateShippingUnknown ProrateShipping = "Unknown"
)

func (ps ProrateShipping) String() string {
	return string(ps)
}

// ProrateShippingValidator is a validator for the "prorate_shipping" field enum values. It is called by the builders before save.
func ProrateShippingValidator(ps ProrateShipping) error {
	switch ps {
	case ProrateShippingYes, ProrateShippingNo, ProrateShippingUnknown:
		return nil
	default:
		return fmt.Errorf("productstore: invalid enum value for prorate_shipping field: %q", ps)
	}
}

// ProrateTaxes defines the type for the "prorate_taxes" enum field.
type ProrateTaxes string

// ProrateTaxes values.
const (
	ProrateTaxesYes     ProrateTaxes = "Yes"
	ProrateTaxesNo      ProrateTaxes = "No"
	ProrateTaxesUnknown ProrateTaxes = "Unknown"
)

func (pt ProrateTaxes) String() string {
	return string(pt)
}

// ProrateTaxesValidator is a validator for the "prorate_taxes" field enum values. It is called by the builders before save.
func ProrateTaxesValidator(pt ProrateTaxes) error {
	switch pt {
	case ProrateTaxesYes, ProrateTaxesNo, ProrateTaxesUnknown:
		return nil
	default:
		return fmt.Errorf("productstore: invalid enum value for prorate_taxes field: %q", pt)
	}
}

// ViewCartOnAdd defines the type for the "view_cart_on_add" enum field.
type ViewCartOnAdd string

// ViewCartOnAdd values.
const (
	ViewCartOnAddYes     ViewCartOnAdd = "Yes"
	ViewCartOnAddNo      ViewCartOnAdd = "No"
	ViewCartOnAddUnknown ViewCartOnAdd = "Unknown"
)

func (vcoa ViewCartOnAdd) String() string {
	return string(vcoa)
}

// ViewCartOnAddValidator is a validator for the "view_cart_on_add" field enum values. It is called by the builders before save.
func ViewCartOnAddValidator(vcoa ViewCartOnAdd) error {
	switch vcoa {
	case ViewCartOnAddYes, ViewCartOnAddNo, ViewCartOnAddUnknown:
		return nil
	default:
		return fmt.Errorf("productstore: invalid enum value for view_cart_on_add field: %q", vcoa)
	}
}

// AutoSaveCart defines the type for the "auto_save_cart" enum field.
type AutoSaveCart string

// AutoSaveCart values.
const (
	AutoSaveCartYes     AutoSaveCart = "Yes"
	AutoSaveCartNo      AutoSaveCart = "No"
	AutoSaveCartUnknown AutoSaveCart = "Unknown"
)

func (asc AutoSaveCart) String() string {
	return string(asc)
}

// AutoSaveCartValidator is a validator for the "auto_save_cart" field enum values. It is called by the builders before save.
func AutoSaveCartValidator(asc AutoSaveCart) error {
	switch asc {
	case AutoSaveCartYes, AutoSaveCartNo, AutoSaveCartUnknown:
		return nil
	default:
		return fmt.Errorf("productstore: invalid enum value for auto_save_cart field: %q", asc)
	}
}

// AutoApproveReviews defines the type for the "auto_approve_reviews" enum field.
type AutoApproveReviews string

// AutoApproveReviews values.
const (
	AutoApproveReviewsYes     AutoApproveReviews = "Yes"
	AutoApproveReviewsNo      AutoApproveReviews = "No"
	AutoApproveReviewsUnknown AutoApproveReviews = "Unknown"
)

func (aar AutoApproveReviews) String() string {
	return string(aar)
}

// AutoApproveReviewsValidator is a validator for the "auto_approve_reviews" field enum values. It is called by the builders before save.
func AutoApproveReviewsValidator(aar AutoApproveReviews) error {
	switch aar {
	case AutoApproveReviewsYes, AutoApproveReviewsNo, AutoApproveReviewsUnknown:
		return nil
	default:
		return fmt.Errorf("productstore: invalid enum value for auto_approve_reviews field: %q", aar)
	}
}

// IsDemoStore defines the type for the "is_demo_store" enum field.
type IsDemoStore string

// IsDemoStore values.
const (
	IsDemoStoreYes     IsDemoStore = "Yes"
	IsDemoStoreNo      IsDemoStore = "No"
	IsDemoStoreUnknown IsDemoStore = "Unknown"
)

func (ids IsDemoStore) String() string {
	return string(ids)
}

// IsDemoStoreValidator is a validator for the "is_demo_store" field enum values. It is called by the builders before save.
func IsDemoStoreValidator(ids IsDemoStore) error {
	switch ids {
	case IsDemoStoreYes, IsDemoStoreNo, IsDemoStoreUnknown:
		return nil
	default:
		return fmt.Errorf("productstore: invalid enum value for is_demo_store field: %q", ids)
	}
}

// IsImmediatelyFulfilled defines the type for the "is_immediately_fulfilled" enum field.
type IsImmediatelyFulfilled string

// IsImmediatelyFulfilled values.
const (
	IsImmediatelyFulfilledYes     IsImmediatelyFulfilled = "Yes"
	IsImmediatelyFulfilledNo      IsImmediatelyFulfilled = "No"
	IsImmediatelyFulfilledUnknown IsImmediatelyFulfilled = "Unknown"
)

func (iif IsImmediatelyFulfilled) String() string {
	return string(iif)
}

// IsImmediatelyFulfilledValidator is a validator for the "is_immediately_fulfilled" field enum values. It is called by the builders before save.
func IsImmediatelyFulfilledValidator(iif IsImmediatelyFulfilled) error {
	switch iif {
	case IsImmediatelyFulfilledYes, IsImmediatelyFulfilledNo, IsImmediatelyFulfilledUnknown:
		return nil
	default:
		return fmt.Errorf("productstore: invalid enum value for is_immediately_fulfilled field: %q", iif)
	}
}

// OneInventoryFacility defines the type for the "one_inventory_facility" enum field.
type OneInventoryFacility string

// OneInventoryFacility values.
const (
	OneInventoryFacilityYes     OneInventoryFacility = "Yes"
	OneInventoryFacilityNo      OneInventoryFacility = "No"
	OneInventoryFacilityUnknown OneInventoryFacility = "Unknown"
)

func (oif OneInventoryFacility) String() string {
	return string(oif)
}

// OneInventoryFacilityValidator is a validator for the "one_inventory_facility" field enum values. It is called by the builders before save.
func OneInventoryFacilityValidator(oif OneInventoryFacility) error {
	switch oif {
	case OneInventoryFacilityYes, OneInventoryFacilityNo, OneInventoryFacilityUnknown:
		return nil
	default:
		return fmt.Errorf("productstore: invalid enum value for one_inventory_facility field: %q", oif)
	}
}

// CheckInventory defines the type for the "check_inventory" enum field.
type CheckInventory string

// CheckInventory values.
const (
	CheckInventoryYes     CheckInventory = "Yes"
	CheckInventoryNo      CheckInventory = "No"
	CheckInventoryUnknown CheckInventory = "Unknown"
)

func (ci CheckInventory) String() string {
	return string(ci)
}

// CheckInventoryValidator is a validator for the "check_inventory" field enum values. It is called by the builders before save.
func CheckInventoryValidator(ci CheckInventory) error {
	switch ci {
	case CheckInventoryYes, CheckInventoryNo, CheckInventoryUnknown:
		return nil
	default:
		return fmt.Errorf("productstore: invalid enum value for check_inventory field: %q", ci)
	}
}

// ReserveInventory defines the type for the "reserve_inventory" enum field.
type ReserveInventory string

// ReserveInventory values.
const (
	ReserveInventoryYes     ReserveInventory = "Yes"
	ReserveInventoryNo      ReserveInventory = "No"
	ReserveInventoryUnknown ReserveInventory = "Unknown"
)

func (ri ReserveInventory) String() string {
	return string(ri)
}

// ReserveInventoryValidator is a validator for the "reserve_inventory" field enum values. It is called by the builders before save.
func ReserveInventoryValidator(ri ReserveInventory) error {
	switch ri {
	case ReserveInventoryYes, ReserveInventoryNo, ReserveInventoryUnknown:
		return nil
	default:
		return fmt.Errorf("productstore: invalid enum value for reserve_inventory field: %q", ri)
	}
}

// RequireInventory defines the type for the "require_inventory" enum field.
type RequireInventory string

// RequireInventory values.
const (
	RequireInventoryYes     RequireInventory = "Yes"
	RequireInventoryNo      RequireInventory = "No"
	RequireInventoryUnknown RequireInventory = "Unknown"
)

func (ri RequireInventory) String() string {
	return string(ri)
}

// RequireInventoryValidator is a validator for the "require_inventory" field enum values. It is called by the builders before save.
func RequireInventoryValidator(ri RequireInventory) error {
	switch ri {
	case RequireInventoryYes, RequireInventoryNo, RequireInventoryUnknown:
		return nil
	default:
		return fmt.Errorf("productstore: invalid enum value for require_inventory field: %q", ri)
	}
}

// BalanceResOnOrderCreation defines the type for the "balance_res_on_order_creation" enum field.
type BalanceResOnOrderCreation string

// BalanceResOnOrderCreation values.
const (
	BalanceResOnOrderCreationYes     BalanceResOnOrderCreation = "Yes"
	BalanceResOnOrderCreationNo      BalanceResOnOrderCreation = "No"
	BalanceResOnOrderCreationUnknown BalanceResOnOrderCreation = "Unknown"
)

func (brooc BalanceResOnOrderCreation) String() string {
	return string(brooc)
}

// BalanceResOnOrderCreationValidator is a validator for the "balance_res_on_order_creation" field enum values. It is called by the builders before save.
func BalanceResOnOrderCreationValidator(brooc BalanceResOnOrderCreation) error {
	switch brooc {
	case BalanceResOnOrderCreationYes, BalanceResOnOrderCreationNo, BalanceResOnOrderCreationUnknown:
		return nil
	default:
		return fmt.Errorf("productstore: invalid enum value for balance_res_on_order_creation field: %q", brooc)
	}
}

// AllowPassword defines the type for the "allow_password" enum field.
type AllowPassword string

// AllowPassword values.
const (
	AllowPasswordYes     AllowPassword = "Yes"
	AllowPasswordNo      AllowPassword = "No"
	AllowPasswordUnknown AllowPassword = "Unknown"
)

func (ap AllowPassword) String() string {
	return string(ap)
}

// AllowPasswordValidator is a validator for the "allow_password" field enum values. It is called by the builders before save.
func AllowPasswordValidator(ap AllowPassword) error {
	switch ap {
	case AllowPasswordYes, AllowPasswordNo, AllowPasswordUnknown:
		return nil
	default:
		return fmt.Errorf("productstore: invalid enum value for allow_password field: %q", ap)
	}
}

// ExplodeOrderItems defines the type for the "explode_order_items" enum field.
type ExplodeOrderItems string

// ExplodeOrderItems values.
const (
	ExplodeOrderItemsYes     ExplodeOrderItems = "Yes"
	ExplodeOrderItemsNo      ExplodeOrderItems = "No"
	ExplodeOrderItemsUnknown ExplodeOrderItems = "Unknown"
)

func (eoi ExplodeOrderItems) String() string {
	return string(eoi)
}

// ExplodeOrderItemsValidator is a validator for the "explode_order_items" field enum values. It is called by the builders before save.
func ExplodeOrderItemsValidator(eoi ExplodeOrderItems) error {
	switch eoi {
	case ExplodeOrderItemsYes, ExplodeOrderItemsNo, ExplodeOrderItemsUnknown:
		return nil
	default:
		return fmt.Errorf("productstore: invalid enum value for explode_order_items field: %q", eoi)
	}
}

// CheckGcBalance defines the type for the "check_gc_balance" enum field.
type CheckGcBalance string

// CheckGcBalance values.
const (
	CheckGcBalanceYes     CheckGcBalance = "Yes"
	CheckGcBalanceNo      CheckGcBalance = "No"
	CheckGcBalanceUnknown CheckGcBalance = "Unknown"
)

func (cgb CheckGcBalance) String() string {
	return string(cgb)
}

// CheckGcBalanceValidator is a validator for the "check_gc_balance" field enum values. It is called by the builders before save.
func CheckGcBalanceValidator(cgb CheckGcBalance) error {
	switch cgb {
	case CheckGcBalanceYes, CheckGcBalanceNo, CheckGcBalanceUnknown:
		return nil
	default:
		return fmt.Errorf("productstore: invalid enum value for check_gc_balance field: %q", cgb)
	}
}

// RetryFailedAuths defines the type for the "retry_failed_auths" enum field.
type RetryFailedAuths string

// RetryFailedAuths values.
const (
	RetryFailedAuthsYes     RetryFailedAuths = "Yes"
	RetryFailedAuthsNo      RetryFailedAuths = "No"
	RetryFailedAuthsUnknown RetryFailedAuths = "Unknown"
)

func (rfa RetryFailedAuths) String() string {
	return string(rfa)
}

// RetryFailedAuthsValidator is a validator for the "retry_failed_auths" field enum values. It is called by the builders before save.
func RetryFailedAuthsValidator(rfa RetryFailedAuths) error {
	switch rfa {
	case RetryFailedAuthsYes, RetryFailedAuthsNo, RetryFailedAuthsUnknown:
		return nil
	default:
		return fmt.Errorf("productstore: invalid enum value for retry_failed_auths field: %q", rfa)
	}
}

// UsePrimaryEmailUsername defines the type for the "use_primary_email_username" enum field.
type UsePrimaryEmailUsername string

// UsePrimaryEmailUsername values.
const (
	UsePrimaryEmailUsernameYes     UsePrimaryEmailUsername = "Yes"
	UsePrimaryEmailUsernameNo      UsePrimaryEmailUsername = "No"
	UsePrimaryEmailUsernameUnknown UsePrimaryEmailUsername = "Unknown"
)

func (upeu UsePrimaryEmailUsername) String() string {
	return string(upeu)
}

// UsePrimaryEmailUsernameValidator is a validator for the "use_primary_email_username" field enum values. It is called by the builders before save.
func UsePrimaryEmailUsernameValidator(upeu UsePrimaryEmailUsername) error {
	switch upeu {
	case UsePrimaryEmailUsernameYes, UsePrimaryEmailUsernameNo, UsePrimaryEmailUsernameUnknown:
		return nil
	default:
		return fmt.Errorf("productstore: invalid enum value for use_primary_email_username field: %q", upeu)
	}
}

// RequireCustomerRole defines the type for the "require_customer_role" enum field.
type RequireCustomerRole string

// RequireCustomerRole values.
const (
	RequireCustomerRoleYes     RequireCustomerRole = "Yes"
	RequireCustomerRoleNo      RequireCustomerRole = "No"
	RequireCustomerRoleUnknown RequireCustomerRole = "Unknown"
)

func (rcr RequireCustomerRole) String() string {
	return string(rcr)
}

// RequireCustomerRoleValidator is a validator for the "require_customer_role" field enum values. It is called by the builders before save.
func RequireCustomerRoleValidator(rcr RequireCustomerRole) error {
	switch rcr {
	case RequireCustomerRoleYes, RequireCustomerRoleNo, RequireCustomerRoleUnknown:
		return nil
	default:
		return fmt.Errorf("productstore: invalid enum value for require_customer_role field: %q", rcr)
	}
}

// AutoInvoiceDigitalItems defines the type for the "auto_invoice_digital_items" enum field.
type AutoInvoiceDigitalItems string

// AutoInvoiceDigitalItems values.
const (
	AutoInvoiceDigitalItemsYes     AutoInvoiceDigitalItems = "Yes"
	AutoInvoiceDigitalItemsNo      AutoInvoiceDigitalItems = "No"
	AutoInvoiceDigitalItemsUnknown AutoInvoiceDigitalItems = "Unknown"
)

func (aidi AutoInvoiceDigitalItems) String() string {
	return string(aidi)
}

// AutoInvoiceDigitalItemsValidator is a validator for the "auto_invoice_digital_items" field enum values. It is called by the builders before save.
func AutoInvoiceDigitalItemsValidator(aidi AutoInvoiceDigitalItems) error {
	switch aidi {
	case AutoInvoiceDigitalItemsYes, AutoInvoiceDigitalItemsNo, AutoInvoiceDigitalItemsUnknown:
		return nil
	default:
		return fmt.Errorf("productstore: invalid enum value for auto_invoice_digital_items field: %q", aidi)
	}
}

// ReqShipAddrForDigItems defines the type for the "req_ship_addr_for_dig_items" enum field.
type ReqShipAddrForDigItems string

// ReqShipAddrForDigItems values.
const (
	ReqShipAddrForDigItemsYes     ReqShipAddrForDigItems = "Yes"
	ReqShipAddrForDigItemsNo      ReqShipAddrForDigItems = "No"
	ReqShipAddrForDigItemsUnknown ReqShipAddrForDigItems = "Unknown"
)

func (rsafdi ReqShipAddrForDigItems) String() string {
	return string(rsafdi)
}

// ReqShipAddrForDigItemsValidator is a validator for the "req_ship_addr_for_dig_items" field enum values. It is called by the builders before save.
func ReqShipAddrForDigItemsValidator(rsafdi ReqShipAddrForDigItems) error {
	switch rsafdi {
	case ReqShipAddrForDigItemsYes, ReqShipAddrForDigItemsNo, ReqShipAddrForDigItemsUnknown:
		return nil
	default:
		return fmt.Errorf("productstore: invalid enum value for req_ship_addr_for_dig_items field: %q", rsafdi)
	}
}

// ShowCheckoutGiftOptions defines the type for the "show_checkout_gift_options" enum field.
type ShowCheckoutGiftOptions string

// ShowCheckoutGiftOptions values.
const (
	ShowCheckoutGiftOptionsYes     ShowCheckoutGiftOptions = "Yes"
	ShowCheckoutGiftOptionsNo      ShowCheckoutGiftOptions = "No"
	ShowCheckoutGiftOptionsUnknown ShowCheckoutGiftOptions = "Unknown"
)

func (scgo ShowCheckoutGiftOptions) String() string {
	return string(scgo)
}

// ShowCheckoutGiftOptionsValidator is a validator for the "show_checkout_gift_options" field enum values. It is called by the builders before save.
func ShowCheckoutGiftOptionsValidator(scgo ShowCheckoutGiftOptions) error {
	switch scgo {
	case ShowCheckoutGiftOptionsYes, ShowCheckoutGiftOptionsNo, ShowCheckoutGiftOptionsUnknown:
		return nil
	default:
		return fmt.Errorf("productstore: invalid enum value for show_checkout_gift_options field: %q", scgo)
	}
}

// SelectPaymentTypePerItem defines the type for the "select_payment_type_per_item" enum field.
type SelectPaymentTypePerItem string

// SelectPaymentTypePerItem values.
const (
	SelectPaymentTypePerItemYes     SelectPaymentTypePerItem = "Yes"
	SelectPaymentTypePerItemNo      SelectPaymentTypePerItem = "No"
	SelectPaymentTypePerItemUnknown SelectPaymentTypePerItem = "Unknown"
)

func (sptpi SelectPaymentTypePerItem) String() string {
	return string(sptpi)
}

// SelectPaymentTypePerItemValidator is a validator for the "select_payment_type_per_item" field enum values. It is called by the builders before save.
func SelectPaymentTypePerItemValidator(sptpi SelectPaymentTypePerItem) error {
	switch sptpi {
	case SelectPaymentTypePerItemYes, SelectPaymentTypePerItemNo, SelectPaymentTypePerItemUnknown:
		return nil
	default:
		return fmt.Errorf("productstore: invalid enum value for select_payment_type_per_item field: %q", sptpi)
	}
}

// ShowPricesWithVatTax defines the type for the "show_prices_with_vat_tax" enum field.
type ShowPricesWithVatTax string

// ShowPricesWithVatTax values.
const (
	ShowPricesWithVatTaxYes     ShowPricesWithVatTax = "Yes"
	ShowPricesWithVatTaxNo      ShowPricesWithVatTax = "No"
	ShowPricesWithVatTaxUnknown ShowPricesWithVatTax = "Unknown"
)

func (spwvt ShowPricesWithVatTax) String() string {
	return string(spwvt)
}

// ShowPricesWithVatTaxValidator is a validator for the "show_prices_with_vat_tax" field enum values. It is called by the builders before save.
func ShowPricesWithVatTaxValidator(spwvt ShowPricesWithVatTax) error {
	switch spwvt {
	case ShowPricesWithVatTaxYes, ShowPricesWithVatTaxNo, ShowPricesWithVatTaxUnknown:
		return nil
	default:
		return fmt.Errorf("productstore: invalid enum value for show_prices_with_vat_tax field: %q", spwvt)
	}
}

// ShowTaxIsExempt defines the type for the "show_tax_is_exempt" enum field.
type ShowTaxIsExempt string

// ShowTaxIsExempt values.
const (
	ShowTaxIsExemptYes     ShowTaxIsExempt = "Yes"
	ShowTaxIsExemptNo      ShowTaxIsExempt = "No"
	ShowTaxIsExemptUnknown ShowTaxIsExempt = "Unknown"
)

func (stie ShowTaxIsExempt) String() string {
	return string(stie)
}

// ShowTaxIsExemptValidator is a validator for the "show_tax_is_exempt" field enum values. It is called by the builders before save.
func ShowTaxIsExemptValidator(stie ShowTaxIsExempt) error {
	switch stie {
	case ShowTaxIsExemptYes, ShowTaxIsExemptNo, ShowTaxIsExemptUnknown:
		return nil
	default:
		return fmt.Errorf("productstore: invalid enum value for show_tax_is_exempt field: %q", stie)
	}
}

// EnableAutoSuggestionList defines the type for the "enable_auto_suggestion_list" enum field.
type EnableAutoSuggestionList string

// EnableAutoSuggestionList values.
const (
	EnableAutoSuggestionListYes     EnableAutoSuggestionList = "Yes"
	EnableAutoSuggestionListNo      EnableAutoSuggestionList = "No"
	EnableAutoSuggestionListUnknown EnableAutoSuggestionList = "Unknown"
)

func (easl EnableAutoSuggestionList) String() string {
	return string(easl)
}

// EnableAutoSuggestionListValidator is a validator for the "enable_auto_suggestion_list" field enum values. It is called by the builders before save.
func EnableAutoSuggestionListValidator(easl EnableAutoSuggestionList) error {
	switch easl {
	case EnableAutoSuggestionListYes, EnableAutoSuggestionListNo, EnableAutoSuggestionListUnknown:
		return nil
	default:
		return fmt.Errorf("productstore: invalid enum value for enable_auto_suggestion_list field: %q", easl)
	}
}

// EnableDigProdUpload defines the type for the "enable_dig_prod_upload" enum field.
type EnableDigProdUpload string

// EnableDigProdUpload values.
const (
	EnableDigProdUploadYes     EnableDigProdUpload = "Yes"
	EnableDigProdUploadNo      EnableDigProdUpload = "No"
	EnableDigProdUploadUnknown EnableDigProdUpload = "Unknown"
)

func (edpu EnableDigProdUpload) String() string {
	return string(edpu)
}

// EnableDigProdUploadValidator is a validator for the "enable_dig_prod_upload" field enum values. It is called by the builders before save.
func EnableDigProdUploadValidator(edpu EnableDigProdUpload) error {
	switch edpu {
	case EnableDigProdUploadYes, EnableDigProdUploadNo, EnableDigProdUploadUnknown:
		return nil
	default:
		return fmt.Errorf("productstore: invalid enum value for enable_dig_prod_upload field: %q", edpu)
	}
}

// ProdSearchExcludeVariants defines the type for the "prod_search_exclude_variants" enum field.
type ProdSearchExcludeVariants string

// ProdSearchExcludeVariants values.
const (
	ProdSearchExcludeVariantsYes     ProdSearchExcludeVariants = "Yes"
	ProdSearchExcludeVariantsNo      ProdSearchExcludeVariants = "No"
	ProdSearchExcludeVariantsUnknown ProdSearchExcludeVariants = "Unknown"
)

func (psev ProdSearchExcludeVariants) String() string {
	return string(psev)
}

// ProdSearchExcludeVariantsValidator is a validator for the "prod_search_exclude_variants" field enum values. It is called by the builders before save.
func ProdSearchExcludeVariantsValidator(psev ProdSearchExcludeVariants) error {
	switch psev {
	case ProdSearchExcludeVariantsYes, ProdSearchExcludeVariantsNo, ProdSearchExcludeVariantsUnknown:
		return nil
	default:
		return fmt.Errorf("productstore: invalid enum value for prod_search_exclude_variants field: %q", psev)
	}
}

// AutoOrderCcTryExp defines the type for the "auto_order_cc_try_exp" enum field.
type AutoOrderCcTryExp string

// AutoOrderCcTryExp values.
const (
	AutoOrderCcTryExpYes     AutoOrderCcTryExp = "Yes"
	AutoOrderCcTryExpNo      AutoOrderCcTryExp = "No"
	AutoOrderCcTryExpUnknown AutoOrderCcTryExp = "Unknown"
)

func (aocte AutoOrderCcTryExp) String() string {
	return string(aocte)
}

// AutoOrderCcTryExpValidator is a validator for the "auto_order_cc_try_exp" field enum values. It is called by the builders before save.
func AutoOrderCcTryExpValidator(aocte AutoOrderCcTryExp) error {
	switch aocte {
	case AutoOrderCcTryExpYes, AutoOrderCcTryExpNo, AutoOrderCcTryExpUnknown:
		return nil
	default:
		return fmt.Errorf("productstore: invalid enum value for auto_order_cc_try_exp field: %q", aocte)
	}
}

// AutoOrderCcTryOtherCards defines the type for the "auto_order_cc_try_other_cards" enum field.
type AutoOrderCcTryOtherCards string

// AutoOrderCcTryOtherCards values.
const (
	AutoOrderCcTryOtherCardsYes     AutoOrderCcTryOtherCards = "Yes"
	AutoOrderCcTryOtherCardsNo      AutoOrderCcTryOtherCards = "No"
	AutoOrderCcTryOtherCardsUnknown AutoOrderCcTryOtherCards = "Unknown"
)

func (aoctoc AutoOrderCcTryOtherCards) String() string {
	return string(aoctoc)
}

// AutoOrderCcTryOtherCardsValidator is a validator for the "auto_order_cc_try_other_cards" field enum values. It is called by the builders before save.
func AutoOrderCcTryOtherCardsValidator(aoctoc AutoOrderCcTryOtherCards) error {
	switch aoctoc {
	case AutoOrderCcTryOtherCardsYes, AutoOrderCcTryOtherCardsNo, AutoOrderCcTryOtherCardsUnknown:
		return nil
	default:
		return fmt.Errorf("productstore: invalid enum value for auto_order_cc_try_other_cards field: %q", aoctoc)
	}
}

// AutoOrderCcTryLaterNsf defines the type for the "auto_order_cc_try_later_nsf" enum field.
type AutoOrderCcTryLaterNsf string

// AutoOrderCcTryLaterNsf values.
const (
	AutoOrderCcTryLaterNsfYes     AutoOrderCcTryLaterNsf = "Yes"
	AutoOrderCcTryLaterNsfNo      AutoOrderCcTryLaterNsf = "No"
	AutoOrderCcTryLaterNsfUnknown AutoOrderCcTryLaterNsf = "Unknown"
)

func (aoctln AutoOrderCcTryLaterNsf) String() string {
	return string(aoctln)
}

// AutoOrderCcTryLaterNsfValidator is a validator for the "auto_order_cc_try_later_nsf" field enum values. It is called by the builders before save.
func AutoOrderCcTryLaterNsfValidator(aoctln AutoOrderCcTryLaterNsf) error {
	switch aoctln {
	case AutoOrderCcTryLaterNsfYes, AutoOrderCcTryLaterNsfNo, AutoOrderCcTryLaterNsfUnknown:
		return nil
	default:
		return fmt.Errorf("productstore: invalid enum value for auto_order_cc_try_later_nsf field: %q", aoctln)
	}
}

// AutoApproveInvoice defines the type for the "auto_approve_invoice" enum field.
type AutoApproveInvoice string

// AutoApproveInvoice values.
const (
	AutoApproveInvoiceYes     AutoApproveInvoice = "Yes"
	AutoApproveInvoiceNo      AutoApproveInvoice = "No"
	AutoApproveInvoiceUnknown AutoApproveInvoice = "Unknown"
)

func (aai AutoApproveInvoice) String() string {
	return string(aai)
}

// AutoApproveInvoiceValidator is a validator for the "auto_approve_invoice" field enum values. It is called by the builders before save.
func AutoApproveInvoiceValidator(aai AutoApproveInvoice) error {
	switch aai {
	case AutoApproveInvoiceYes, AutoApproveInvoiceNo, AutoApproveInvoiceUnknown:
		return nil
	default:
		return fmt.Errorf("productstore: invalid enum value for auto_approve_invoice field: %q", aai)
	}
}

// AutoApproveOrder defines the type for the "auto_approve_order" enum field.
type AutoApproveOrder string

// AutoApproveOrder values.
const (
	AutoApproveOrderYes     AutoApproveOrder = "Yes"
	AutoApproveOrderNo      AutoApproveOrder = "No"
	AutoApproveOrderUnknown AutoApproveOrder = "Unknown"
)

func (aao AutoApproveOrder) String() string {
	return string(aao)
}

// AutoApproveOrderValidator is a validator for the "auto_approve_order" field enum values. It is called by the builders before save.
func AutoApproveOrderValidator(aao AutoApproveOrder) error {
	switch aao {
	case AutoApproveOrderYes, AutoApproveOrderNo, AutoApproveOrderUnknown:
		return nil
	default:
		return fmt.Errorf("productstore: invalid enum value for auto_approve_order field: %q", aao)
	}
}

// ShipIfCaptureFails defines the type for the "ship_if_capture_fails" enum field.
type ShipIfCaptureFails string

// ShipIfCaptureFails values.
const (
	ShipIfCaptureFailsYes     ShipIfCaptureFails = "Yes"
	ShipIfCaptureFailsNo      ShipIfCaptureFails = "No"
	ShipIfCaptureFailsUnknown ShipIfCaptureFails = "Unknown"
)

func (sicf ShipIfCaptureFails) String() string {
	return string(sicf)
}

// ShipIfCaptureFailsValidator is a validator for the "ship_if_capture_fails" field enum values. It is called by the builders before save.
func ShipIfCaptureFailsValidator(sicf ShipIfCaptureFails) error {
	switch sicf {
	case ShipIfCaptureFailsYes, ShipIfCaptureFailsNo, ShipIfCaptureFailsUnknown:
		return nil
	default:
		return fmt.Errorf("productstore: invalid enum value for ship_if_capture_fails field: %q", sicf)
	}
}

// SetOwnerUponIssuance defines the type for the "set_owner_upon_issuance" enum field.
type SetOwnerUponIssuance string

// SetOwnerUponIssuance values.
const (
	SetOwnerUponIssuanceYes     SetOwnerUponIssuance = "Yes"
	SetOwnerUponIssuanceNo      SetOwnerUponIssuance = "No"
	SetOwnerUponIssuanceUnknown SetOwnerUponIssuance = "Unknown"
)

func (soui SetOwnerUponIssuance) String() string {
	return string(soui)
}

// SetOwnerUponIssuanceValidator is a validator for the "set_owner_upon_issuance" field enum values. It is called by the builders before save.
func SetOwnerUponIssuanceValidator(soui SetOwnerUponIssuance) error {
	switch soui {
	case SetOwnerUponIssuanceYes, SetOwnerUponIssuanceNo, SetOwnerUponIssuanceUnknown:
		return nil
	default:
		return fmt.Errorf("productstore: invalid enum value for set_owner_upon_issuance field: %q", soui)
	}
}

// ReqReturnInventoryReceive defines the type for the "req_return_inventory_receive" enum field.
type ReqReturnInventoryReceive string

// ReqReturnInventoryReceive values.
const (
	ReqReturnInventoryReceiveYes     ReqReturnInventoryReceive = "Yes"
	ReqReturnInventoryReceiveNo      ReqReturnInventoryReceive = "No"
	ReqReturnInventoryReceiveUnknown ReqReturnInventoryReceive = "Unknown"
)

func (rrir ReqReturnInventoryReceive) String() string {
	return string(rrir)
}

// ReqReturnInventoryReceiveValidator is a validator for the "req_return_inventory_receive" field enum values. It is called by the builders before save.
func ReqReturnInventoryReceiveValidator(rrir ReqReturnInventoryReceive) error {
	switch rrir {
	case ReqReturnInventoryReceiveYes, ReqReturnInventoryReceiveNo, ReqReturnInventoryReceiveUnknown:
		return nil
	default:
		return fmt.Errorf("productstore: invalid enum value for req_return_inventory_receive field: %q", rrir)
	}
}

// AddToCartRemoveIncompat defines the type for the "add_to_cart_remove_incompat" enum field.
type AddToCartRemoveIncompat string

// AddToCartRemoveIncompat values.
const (
	AddToCartRemoveIncompatYes     AddToCartRemoveIncompat = "Yes"
	AddToCartRemoveIncompatNo      AddToCartRemoveIncompat = "No"
	AddToCartRemoveIncompatUnknown AddToCartRemoveIncompat = "Unknown"
)

func (atcri AddToCartRemoveIncompat) String() string {
	return string(atcri)
}

// AddToCartRemoveIncompatValidator is a validator for the "add_to_cart_remove_incompat" field enum values. It is called by the builders before save.
func AddToCartRemoveIncompatValidator(atcri AddToCartRemoveIncompat) error {
	switch atcri {
	case AddToCartRemoveIncompatYes, AddToCartRemoveIncompatNo, AddToCartRemoveIncompatUnknown:
		return nil
	default:
		return fmt.Errorf("productstore: invalid enum value for add_to_cart_remove_incompat field: %q", atcri)
	}
}

// AddToCartReplaceUpsell defines the type for the "add_to_cart_replace_upsell" enum field.
type AddToCartReplaceUpsell string

// AddToCartReplaceUpsell values.
const (
	AddToCartReplaceUpsellYes     AddToCartReplaceUpsell = "Yes"
	AddToCartReplaceUpsellNo      AddToCartReplaceUpsell = "No"
	AddToCartReplaceUpsellUnknown AddToCartReplaceUpsell = "Unknown"
)

func (atcru AddToCartReplaceUpsell) String() string {
	return string(atcru)
}

// AddToCartReplaceUpsellValidator is a validator for the "add_to_cart_replace_upsell" field enum values. It is called by the builders before save.
func AddToCartReplaceUpsellValidator(atcru AddToCartReplaceUpsell) error {
	switch atcru {
	case AddToCartReplaceUpsellYes, AddToCartReplaceUpsellNo, AddToCartReplaceUpsellUnknown:
		return nil
	default:
		return fmt.Errorf("productstore: invalid enum value for add_to_cart_replace_upsell field: %q", atcru)
	}
}

// SplitPayPrefPerShpGrp defines the type for the "split_pay_pref_per_shp_grp" enum field.
type SplitPayPrefPerShpGrp string

// SplitPayPrefPerShpGrp values.
const (
	SplitPayPrefPerShpGrpYes     SplitPayPrefPerShpGrp = "Yes"
	SplitPayPrefPerShpGrpNo      SplitPayPrefPerShpGrp = "No"
	SplitPayPrefPerShpGrpUnknown SplitPayPrefPerShpGrp = "Unknown"
)

func (spppsg SplitPayPrefPerShpGrp) String() string {
	return string(spppsg)
}

// SplitPayPrefPerShpGrpValidator is a validator for the "split_pay_pref_per_shp_grp" field enum values. It is called by the builders before save.
func SplitPayPrefPerShpGrpValidator(spppsg SplitPayPrefPerShpGrp) error {
	switch spppsg {
	case SplitPayPrefPerShpGrpYes, SplitPayPrefPerShpGrpNo, SplitPayPrefPerShpGrpUnknown:
		return nil
	default:
		return fmt.Errorf("productstore: invalid enum value for split_pay_pref_per_shp_grp field: %q", spppsg)
	}
}

// ManagedByLot defines the type for the "managed_by_lot" enum field.
type ManagedByLot string

// ManagedByLot values.
const (
	ManagedByLotYes     ManagedByLot = "Yes"
	ManagedByLotNo      ManagedByLot = "No"
	ManagedByLotUnknown ManagedByLot = "Unknown"
)

func (mbl ManagedByLot) String() string {
	return string(mbl)
}

// ManagedByLotValidator is a validator for the "managed_by_lot" field enum values. It is called by the builders before save.
func ManagedByLotValidator(mbl ManagedByLot) error {
	switch mbl {
	case ManagedByLotYes, ManagedByLotNo, ManagedByLotUnknown:
		return nil
	default:
		return fmt.Errorf("productstore: invalid enum value for managed_by_lot field: %q", mbl)
	}
}

// ShowOutOfStockProducts defines the type for the "show_out_of_stock_products" enum field.
type ShowOutOfStockProducts string

// ShowOutOfStockProducts values.
const (
	ShowOutOfStockProductsYes     ShowOutOfStockProducts = "Yes"
	ShowOutOfStockProductsNo      ShowOutOfStockProducts = "No"
	ShowOutOfStockProductsUnknown ShowOutOfStockProducts = "Unknown"
)

func (soosp ShowOutOfStockProducts) String() string {
	return string(soosp)
}

// ShowOutOfStockProductsValidator is a validator for the "show_out_of_stock_products" field enum values. It is called by the builders before save.
func ShowOutOfStockProductsValidator(soosp ShowOutOfStockProducts) error {
	switch soosp {
	case ShowOutOfStockProductsYes, ShowOutOfStockProductsNo, ShowOutOfStockProductsUnknown:
		return nil
	default:
		return fmt.Errorf("productstore: invalid enum value for show_out_of_stock_products field: %q", soosp)
	}
}

// OrderDecimalQuantity defines the type for the "order_decimal_quantity" enum field.
type OrderDecimalQuantity string

// OrderDecimalQuantity values.
const (
	OrderDecimalQuantityYes     OrderDecimalQuantity = "Yes"
	OrderDecimalQuantityNo      OrderDecimalQuantity = "No"
	OrderDecimalQuantityUnknown OrderDecimalQuantity = "Unknown"
)

func (odq OrderDecimalQuantity) String() string {
	return string(odq)
}

// OrderDecimalQuantityValidator is a validator for the "order_decimal_quantity" field enum values. It is called by the builders before save.
func OrderDecimalQuantityValidator(odq OrderDecimalQuantity) error {
	switch odq {
	case OrderDecimalQuantityYes, OrderDecimalQuantityNo, OrderDecimalQuantityUnknown:
		return nil
	default:
		return fmt.Errorf("productstore: invalid enum value for order_decimal_quantity field: %q", odq)
	}
}

// AllowComment defines the type for the "allow_comment" enum field.
type AllowComment string

// AllowComment values.
const (
	AllowCommentYes     AllowComment = "Yes"
	AllowCommentNo      AllowComment = "No"
	AllowCommentUnknown AllowComment = "Unknown"
)

func (ac AllowComment) String() string {
	return string(ac)
}

// AllowCommentValidator is a validator for the "allow_comment" field enum values. It is called by the builders before save.
func AllowCommentValidator(ac AllowComment) error {
	switch ac {
	case AllowCommentYes, AllowCommentNo, AllowCommentUnknown:
		return nil
	default:
		return fmt.Errorf("productstore: invalid enum value for allow_comment field: %q", ac)
	}
}

// AllocateInventory defines the type for the "allocate_inventory" enum field.
type AllocateInventory string

// AllocateInventory values.
const (
	AllocateInventoryYes     AllocateInventory = "Yes"
	AllocateInventoryNo      AllocateInventory = "No"
	AllocateInventoryUnknown AllocateInventory = "Unknown"
)

func (ai AllocateInventory) String() string {
	return string(ai)
}

// AllocateInventoryValidator is a validator for the "allocate_inventory" field enum values. It is called by the builders before save.
func AllocateInventoryValidator(ai AllocateInventory) error {
	switch ai {
	case AllocateInventoryYes, AllocateInventoryNo, AllocateInventoryUnknown:
		return nil
	default:
		return fmt.Errorf("productstore: invalid enum value for allocate_inventory field: %q", ai)
	}
}
