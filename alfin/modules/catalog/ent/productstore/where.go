// Code generated by entc, DO NOT EDIT.

package productstore

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// StringRef applies equality check predicate on the "string_ref" field. It's identical to StringRefEQ.
func StringRef(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStringRef), v))
	})
}

// StoreName applies equality check predicate on the "store_name" field. It's identical to StoreNameEQ.
func StoreName(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStoreName), v))
	})
}

// CompanyName applies equality check predicate on the "company_name" field. It's identical to CompanyNameEQ.
func CompanyName(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCompanyName), v))
	})
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTitle), v))
	})
}

// Subtitle applies equality check predicate on the "subtitle" field. It's identical to SubtitleEQ.
func Subtitle(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSubtitle), v))
	})
}

// PayToPartyID applies equality check predicate on the "pay_to_party_id" field. It's identical to PayToPartyIDEQ.
func PayToPartyID(v int) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPayToPartyID), v))
	})
}

// DaysToCancelNonPay applies equality check predicate on the "days_to_cancel_non_pay" field. It's identical to DaysToCancelNonPayEQ.
func DaysToCancelNonPay(v int) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDaysToCancelNonPay), v))
	})
}

// InventoryFacilityID applies equality check predicate on the "inventory_facility_id" field. It's identical to InventoryFacilityIDEQ.
func InventoryFacilityID(v int) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInventoryFacilityID), v))
	})
}

// OrderNumberPrefix applies equality check predicate on the "order_number_prefix" field. It's identical to OrderNumberPrefixEQ.
func OrderNumberPrefix(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderNumberPrefix), v))
	})
}

// DefaultLocaleString applies equality check predicate on the "default_locale_string" field. It's identical to DefaultLocaleStringEQ.
func DefaultLocaleString(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDefaultLocaleString), v))
	})
}

// DefaultCurrencyUomID applies equality check predicate on the "default_currency_uom_id" field. It's identical to DefaultCurrencyUomIDEQ.
func DefaultCurrencyUomID(v int) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDefaultCurrencyUomID), v))
	})
}

// DefaultTimeZoneString applies equality check predicate on the "default_time_zone_string" field. It's identical to DefaultTimeZoneStringEQ.
func DefaultTimeZoneString(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDefaultTimeZoneString), v))
	})
}

// DefaultPassword applies equality check predicate on the "default_password" field. It's identical to DefaultPasswordEQ.
func DefaultPassword(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDefaultPassword), v))
	})
}

// AuthDeclinedMessage applies equality check predicate on the "auth_declined_message" field. It's identical to AuthDeclinedMessageEQ.
func AuthDeclinedMessage(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAuthDeclinedMessage), v))
	})
}

// AuthFraudMessage applies equality check predicate on the "auth_fraud_message" field. It's identical to AuthFraudMessageEQ.
func AuthFraudMessage(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAuthFraudMessage), v))
	})
}

// AuthErrorMessage applies equality check predicate on the "auth_error_message" field. It's identical to AuthErrorMessageEQ.
func AuthErrorMessage(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAuthErrorMessage), v))
	})
}

// VisualThemeID applies equality check predicate on the "visual_theme_id" field. It's identical to VisualThemeIDEQ.
func VisualThemeID(v int) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVisualThemeID), v))
	})
}

// VatTaxAuthGeoID applies equality check predicate on the "vat_tax_auth_geo_id" field. It's identical to VatTaxAuthGeoIDEQ.
func VatTaxAuthGeoID(v int) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVatTaxAuthGeoID), v))
	})
}

// VatTaxAuthPartyID applies equality check predicate on the "vat_tax_auth_party_id" field. It's identical to VatTaxAuthPartyIDEQ.
func VatTaxAuthPartyID(v int) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVatTaxAuthPartyID), v))
	})
}

// DigProdUploadCategoryID applies equality check predicate on the "dig_prod_upload_category_id" field. It's identical to DigProdUploadCategoryIDEQ.
func DigProdUploadCategoryID(v int) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDigProdUploadCategoryID), v))
	})
}

// AutoOrderCcTryLaterMax applies equality check predicate on the "auto_order_cc_try_later_max" field. It's identical to AutoOrderCcTryLaterMaxEQ.
func AutoOrderCcTryLaterMax(v int) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAutoOrderCcTryLaterMax), v))
	})
}

// StoreCreditValidDays applies equality check predicate on the "store_credit_valid_days" field. It's identical to StoreCreditValidDaysEQ.
func StoreCreditValidDays(v int) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStoreCreditValidDays), v))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), v))
	})
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateTime), v))
	})
}

// StringRefEQ applies the EQ predicate on the "string_ref" field.
func StringRefEQ(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStringRef), v))
	})
}

// StringRefNEQ applies the NEQ predicate on the "string_ref" field.
func StringRefNEQ(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStringRef), v))
	})
}

// StringRefIn applies the In predicate on the "string_ref" field.
func StringRefIn(vs ...string) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStringRef), v...))
	})
}

// StringRefNotIn applies the NotIn predicate on the "string_ref" field.
func StringRefNotIn(vs ...string) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStringRef), v...))
	})
}

// StringRefGT applies the GT predicate on the "string_ref" field.
func StringRefGT(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStringRef), v))
	})
}

// StringRefGTE applies the GTE predicate on the "string_ref" field.
func StringRefGTE(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStringRef), v))
	})
}

// StringRefLT applies the LT predicate on the "string_ref" field.
func StringRefLT(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStringRef), v))
	})
}

// StringRefLTE applies the LTE predicate on the "string_ref" field.
func StringRefLTE(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStringRef), v))
	})
}

// StringRefContains applies the Contains predicate on the "string_ref" field.
func StringRefContains(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStringRef), v))
	})
}

// StringRefHasPrefix applies the HasPrefix predicate on the "string_ref" field.
func StringRefHasPrefix(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStringRef), v))
	})
}

// StringRefHasSuffix applies the HasSuffix predicate on the "string_ref" field.
func StringRefHasSuffix(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStringRef), v))
	})
}

// StringRefIsNil applies the IsNil predicate on the "string_ref" field.
func StringRefIsNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStringRef)))
	})
}

// StringRefNotNil applies the NotNil predicate on the "string_ref" field.
func StringRefNotNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStringRef)))
	})
}

// StringRefEqualFold applies the EqualFold predicate on the "string_ref" field.
func StringRefEqualFold(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStringRef), v))
	})
}

// StringRefContainsFold applies the ContainsFold predicate on the "string_ref" field.
func StringRefContainsFold(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStringRef), v))
	})
}

// StoreNameEQ applies the EQ predicate on the "store_name" field.
func StoreNameEQ(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStoreName), v))
	})
}

// StoreNameNEQ applies the NEQ predicate on the "store_name" field.
func StoreNameNEQ(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStoreName), v))
	})
}

// StoreNameIn applies the In predicate on the "store_name" field.
func StoreNameIn(vs ...string) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStoreName), v...))
	})
}

// StoreNameNotIn applies the NotIn predicate on the "store_name" field.
func StoreNameNotIn(vs ...string) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStoreName), v...))
	})
}

// StoreNameGT applies the GT predicate on the "store_name" field.
func StoreNameGT(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStoreName), v))
	})
}

// StoreNameGTE applies the GTE predicate on the "store_name" field.
func StoreNameGTE(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStoreName), v))
	})
}

// StoreNameLT applies the LT predicate on the "store_name" field.
func StoreNameLT(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStoreName), v))
	})
}

// StoreNameLTE applies the LTE predicate on the "store_name" field.
func StoreNameLTE(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStoreName), v))
	})
}

// StoreNameContains applies the Contains predicate on the "store_name" field.
func StoreNameContains(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStoreName), v))
	})
}

// StoreNameHasPrefix applies the HasPrefix predicate on the "store_name" field.
func StoreNameHasPrefix(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStoreName), v))
	})
}

// StoreNameHasSuffix applies the HasSuffix predicate on the "store_name" field.
func StoreNameHasSuffix(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStoreName), v))
	})
}

// StoreNameIsNil applies the IsNil predicate on the "store_name" field.
func StoreNameIsNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStoreName)))
	})
}

// StoreNameNotNil applies the NotNil predicate on the "store_name" field.
func StoreNameNotNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStoreName)))
	})
}

// StoreNameEqualFold applies the EqualFold predicate on the "store_name" field.
func StoreNameEqualFold(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStoreName), v))
	})
}

// StoreNameContainsFold applies the ContainsFold predicate on the "store_name" field.
func StoreNameContainsFold(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStoreName), v))
	})
}

// CompanyNameEQ applies the EQ predicate on the "company_name" field.
func CompanyNameEQ(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCompanyName), v))
	})
}

// CompanyNameNEQ applies the NEQ predicate on the "company_name" field.
func CompanyNameNEQ(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCompanyName), v))
	})
}

// CompanyNameIn applies the In predicate on the "company_name" field.
func CompanyNameIn(vs ...string) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCompanyName), v...))
	})
}

// CompanyNameNotIn applies the NotIn predicate on the "company_name" field.
func CompanyNameNotIn(vs ...string) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCompanyName), v...))
	})
}

// CompanyNameGT applies the GT predicate on the "company_name" field.
func CompanyNameGT(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCompanyName), v))
	})
}

// CompanyNameGTE applies the GTE predicate on the "company_name" field.
func CompanyNameGTE(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCompanyName), v))
	})
}

// CompanyNameLT applies the LT predicate on the "company_name" field.
func CompanyNameLT(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCompanyName), v))
	})
}

// CompanyNameLTE applies the LTE predicate on the "company_name" field.
func CompanyNameLTE(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCompanyName), v))
	})
}

// CompanyNameContains applies the Contains predicate on the "company_name" field.
func CompanyNameContains(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCompanyName), v))
	})
}

// CompanyNameHasPrefix applies the HasPrefix predicate on the "company_name" field.
func CompanyNameHasPrefix(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCompanyName), v))
	})
}

// CompanyNameHasSuffix applies the HasSuffix predicate on the "company_name" field.
func CompanyNameHasSuffix(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCompanyName), v))
	})
}

// CompanyNameIsNil applies the IsNil predicate on the "company_name" field.
func CompanyNameIsNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCompanyName)))
	})
}

// CompanyNameNotNil applies the NotNil predicate on the "company_name" field.
func CompanyNameNotNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCompanyName)))
	})
}

// CompanyNameEqualFold applies the EqualFold predicate on the "company_name" field.
func CompanyNameEqualFold(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCompanyName), v))
	})
}

// CompanyNameContainsFold applies the ContainsFold predicate on the "company_name" field.
func CompanyNameContainsFold(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCompanyName), v))
	})
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTitle), v))
	})
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTitle), v))
	})
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTitle), v...))
	})
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTitle), v...))
	})
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTitle), v))
	})
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTitle), v))
	})
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTitle), v))
	})
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTitle), v))
	})
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTitle), v))
	})
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTitle), v))
	})
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTitle), v))
	})
}

// TitleIsNil applies the IsNil predicate on the "title" field.
func TitleIsNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTitle)))
	})
}

// TitleNotNil applies the NotNil predicate on the "title" field.
func TitleNotNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTitle)))
	})
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTitle), v))
	})
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTitle), v))
	})
}

// SubtitleEQ applies the EQ predicate on the "subtitle" field.
func SubtitleEQ(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSubtitle), v))
	})
}

// SubtitleNEQ applies the NEQ predicate on the "subtitle" field.
func SubtitleNEQ(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSubtitle), v))
	})
}

// SubtitleIn applies the In predicate on the "subtitle" field.
func SubtitleIn(vs ...string) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSubtitle), v...))
	})
}

// SubtitleNotIn applies the NotIn predicate on the "subtitle" field.
func SubtitleNotIn(vs ...string) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSubtitle), v...))
	})
}

// SubtitleGT applies the GT predicate on the "subtitle" field.
func SubtitleGT(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSubtitle), v))
	})
}

// SubtitleGTE applies the GTE predicate on the "subtitle" field.
func SubtitleGTE(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSubtitle), v))
	})
}

// SubtitleLT applies the LT predicate on the "subtitle" field.
func SubtitleLT(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSubtitle), v))
	})
}

// SubtitleLTE applies the LTE predicate on the "subtitle" field.
func SubtitleLTE(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSubtitle), v))
	})
}

// SubtitleContains applies the Contains predicate on the "subtitle" field.
func SubtitleContains(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSubtitle), v))
	})
}

// SubtitleHasPrefix applies the HasPrefix predicate on the "subtitle" field.
func SubtitleHasPrefix(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSubtitle), v))
	})
}

// SubtitleHasSuffix applies the HasSuffix predicate on the "subtitle" field.
func SubtitleHasSuffix(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSubtitle), v))
	})
}

// SubtitleIsNil applies the IsNil predicate on the "subtitle" field.
func SubtitleIsNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSubtitle)))
	})
}

// SubtitleNotNil applies the NotNil predicate on the "subtitle" field.
func SubtitleNotNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSubtitle)))
	})
}

// SubtitleEqualFold applies the EqualFold predicate on the "subtitle" field.
func SubtitleEqualFold(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSubtitle), v))
	})
}

// SubtitleContainsFold applies the ContainsFold predicate on the "subtitle" field.
func SubtitleContainsFold(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSubtitle), v))
	})
}

// PayToPartyIDEQ applies the EQ predicate on the "pay_to_party_id" field.
func PayToPartyIDEQ(v int) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPayToPartyID), v))
	})
}

// PayToPartyIDNEQ applies the NEQ predicate on the "pay_to_party_id" field.
func PayToPartyIDNEQ(v int) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPayToPartyID), v))
	})
}

// PayToPartyIDIn applies the In predicate on the "pay_to_party_id" field.
func PayToPartyIDIn(vs ...int) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPayToPartyID), v...))
	})
}

// PayToPartyIDNotIn applies the NotIn predicate on the "pay_to_party_id" field.
func PayToPartyIDNotIn(vs ...int) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPayToPartyID), v...))
	})
}

// PayToPartyIDGT applies the GT predicate on the "pay_to_party_id" field.
func PayToPartyIDGT(v int) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPayToPartyID), v))
	})
}

// PayToPartyIDGTE applies the GTE predicate on the "pay_to_party_id" field.
func PayToPartyIDGTE(v int) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPayToPartyID), v))
	})
}

// PayToPartyIDLT applies the LT predicate on the "pay_to_party_id" field.
func PayToPartyIDLT(v int) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPayToPartyID), v))
	})
}

// PayToPartyIDLTE applies the LTE predicate on the "pay_to_party_id" field.
func PayToPartyIDLTE(v int) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPayToPartyID), v))
	})
}

// PayToPartyIDIsNil applies the IsNil predicate on the "pay_to_party_id" field.
func PayToPartyIDIsNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPayToPartyID)))
	})
}

// PayToPartyIDNotNil applies the NotNil predicate on the "pay_to_party_id" field.
func PayToPartyIDNotNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPayToPartyID)))
	})
}

// DaysToCancelNonPayEQ applies the EQ predicate on the "days_to_cancel_non_pay" field.
func DaysToCancelNonPayEQ(v int) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDaysToCancelNonPay), v))
	})
}

// DaysToCancelNonPayNEQ applies the NEQ predicate on the "days_to_cancel_non_pay" field.
func DaysToCancelNonPayNEQ(v int) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDaysToCancelNonPay), v))
	})
}

// DaysToCancelNonPayIn applies the In predicate on the "days_to_cancel_non_pay" field.
func DaysToCancelNonPayIn(vs ...int) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDaysToCancelNonPay), v...))
	})
}

// DaysToCancelNonPayNotIn applies the NotIn predicate on the "days_to_cancel_non_pay" field.
func DaysToCancelNonPayNotIn(vs ...int) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDaysToCancelNonPay), v...))
	})
}

// DaysToCancelNonPayGT applies the GT predicate on the "days_to_cancel_non_pay" field.
func DaysToCancelNonPayGT(v int) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDaysToCancelNonPay), v))
	})
}

// DaysToCancelNonPayGTE applies the GTE predicate on the "days_to_cancel_non_pay" field.
func DaysToCancelNonPayGTE(v int) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDaysToCancelNonPay), v))
	})
}

// DaysToCancelNonPayLT applies the LT predicate on the "days_to_cancel_non_pay" field.
func DaysToCancelNonPayLT(v int) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDaysToCancelNonPay), v))
	})
}

// DaysToCancelNonPayLTE applies the LTE predicate on the "days_to_cancel_non_pay" field.
func DaysToCancelNonPayLTE(v int) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDaysToCancelNonPay), v))
	})
}

// DaysToCancelNonPayIsNil applies the IsNil predicate on the "days_to_cancel_non_pay" field.
func DaysToCancelNonPayIsNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDaysToCancelNonPay)))
	})
}

// DaysToCancelNonPayNotNil applies the NotNil predicate on the "days_to_cancel_non_pay" field.
func DaysToCancelNonPayNotNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDaysToCancelNonPay)))
	})
}

// ManualAuthIsCaptureEQ applies the EQ predicate on the "manual_auth_is_capture" field.
func ManualAuthIsCaptureEQ(v ManualAuthIsCapture) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldManualAuthIsCapture), v))
	})
}

// ManualAuthIsCaptureNEQ applies the NEQ predicate on the "manual_auth_is_capture" field.
func ManualAuthIsCaptureNEQ(v ManualAuthIsCapture) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldManualAuthIsCapture), v))
	})
}

// ManualAuthIsCaptureIn applies the In predicate on the "manual_auth_is_capture" field.
func ManualAuthIsCaptureIn(vs ...ManualAuthIsCapture) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldManualAuthIsCapture), v...))
	})
}

// ManualAuthIsCaptureNotIn applies the NotIn predicate on the "manual_auth_is_capture" field.
func ManualAuthIsCaptureNotIn(vs ...ManualAuthIsCapture) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldManualAuthIsCapture), v...))
	})
}

// ManualAuthIsCaptureIsNil applies the IsNil predicate on the "manual_auth_is_capture" field.
func ManualAuthIsCaptureIsNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldManualAuthIsCapture)))
	})
}

// ManualAuthIsCaptureNotNil applies the NotNil predicate on the "manual_auth_is_capture" field.
func ManualAuthIsCaptureNotNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldManualAuthIsCapture)))
	})
}

// ProrateShippingEQ applies the EQ predicate on the "prorate_shipping" field.
func ProrateShippingEQ(v ProrateShipping) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProrateShipping), v))
	})
}

// ProrateShippingNEQ applies the NEQ predicate on the "prorate_shipping" field.
func ProrateShippingNEQ(v ProrateShipping) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProrateShipping), v))
	})
}

// ProrateShippingIn applies the In predicate on the "prorate_shipping" field.
func ProrateShippingIn(vs ...ProrateShipping) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldProrateShipping), v...))
	})
}

// ProrateShippingNotIn applies the NotIn predicate on the "prorate_shipping" field.
func ProrateShippingNotIn(vs ...ProrateShipping) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldProrateShipping), v...))
	})
}

// ProrateShippingIsNil applies the IsNil predicate on the "prorate_shipping" field.
func ProrateShippingIsNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldProrateShipping)))
	})
}

// ProrateShippingNotNil applies the NotNil predicate on the "prorate_shipping" field.
func ProrateShippingNotNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldProrateShipping)))
	})
}

// ProrateTaxesEQ applies the EQ predicate on the "prorate_taxes" field.
func ProrateTaxesEQ(v ProrateTaxes) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProrateTaxes), v))
	})
}

// ProrateTaxesNEQ applies the NEQ predicate on the "prorate_taxes" field.
func ProrateTaxesNEQ(v ProrateTaxes) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProrateTaxes), v))
	})
}

// ProrateTaxesIn applies the In predicate on the "prorate_taxes" field.
func ProrateTaxesIn(vs ...ProrateTaxes) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldProrateTaxes), v...))
	})
}

// ProrateTaxesNotIn applies the NotIn predicate on the "prorate_taxes" field.
func ProrateTaxesNotIn(vs ...ProrateTaxes) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldProrateTaxes), v...))
	})
}

// ProrateTaxesIsNil applies the IsNil predicate on the "prorate_taxes" field.
func ProrateTaxesIsNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldProrateTaxes)))
	})
}

// ProrateTaxesNotNil applies the NotNil predicate on the "prorate_taxes" field.
func ProrateTaxesNotNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldProrateTaxes)))
	})
}

// ViewCartOnAddEQ applies the EQ predicate on the "view_cart_on_add" field.
func ViewCartOnAddEQ(v ViewCartOnAdd) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldViewCartOnAdd), v))
	})
}

// ViewCartOnAddNEQ applies the NEQ predicate on the "view_cart_on_add" field.
func ViewCartOnAddNEQ(v ViewCartOnAdd) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldViewCartOnAdd), v))
	})
}

// ViewCartOnAddIn applies the In predicate on the "view_cart_on_add" field.
func ViewCartOnAddIn(vs ...ViewCartOnAdd) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldViewCartOnAdd), v...))
	})
}

// ViewCartOnAddNotIn applies the NotIn predicate on the "view_cart_on_add" field.
func ViewCartOnAddNotIn(vs ...ViewCartOnAdd) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldViewCartOnAdd), v...))
	})
}

// ViewCartOnAddIsNil applies the IsNil predicate on the "view_cart_on_add" field.
func ViewCartOnAddIsNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldViewCartOnAdd)))
	})
}

// ViewCartOnAddNotNil applies the NotNil predicate on the "view_cart_on_add" field.
func ViewCartOnAddNotNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldViewCartOnAdd)))
	})
}

// AutoSaveCartEQ applies the EQ predicate on the "auto_save_cart" field.
func AutoSaveCartEQ(v AutoSaveCart) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAutoSaveCart), v))
	})
}

// AutoSaveCartNEQ applies the NEQ predicate on the "auto_save_cart" field.
func AutoSaveCartNEQ(v AutoSaveCart) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAutoSaveCart), v))
	})
}

// AutoSaveCartIn applies the In predicate on the "auto_save_cart" field.
func AutoSaveCartIn(vs ...AutoSaveCart) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAutoSaveCart), v...))
	})
}

// AutoSaveCartNotIn applies the NotIn predicate on the "auto_save_cart" field.
func AutoSaveCartNotIn(vs ...AutoSaveCart) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAutoSaveCart), v...))
	})
}

// AutoSaveCartIsNil applies the IsNil predicate on the "auto_save_cart" field.
func AutoSaveCartIsNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAutoSaveCart)))
	})
}

// AutoSaveCartNotNil applies the NotNil predicate on the "auto_save_cart" field.
func AutoSaveCartNotNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAutoSaveCart)))
	})
}

// AutoApproveReviewsEQ applies the EQ predicate on the "auto_approve_reviews" field.
func AutoApproveReviewsEQ(v AutoApproveReviews) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAutoApproveReviews), v))
	})
}

// AutoApproveReviewsNEQ applies the NEQ predicate on the "auto_approve_reviews" field.
func AutoApproveReviewsNEQ(v AutoApproveReviews) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAutoApproveReviews), v))
	})
}

// AutoApproveReviewsIn applies the In predicate on the "auto_approve_reviews" field.
func AutoApproveReviewsIn(vs ...AutoApproveReviews) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAutoApproveReviews), v...))
	})
}

// AutoApproveReviewsNotIn applies the NotIn predicate on the "auto_approve_reviews" field.
func AutoApproveReviewsNotIn(vs ...AutoApproveReviews) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAutoApproveReviews), v...))
	})
}

// AutoApproveReviewsIsNil applies the IsNil predicate on the "auto_approve_reviews" field.
func AutoApproveReviewsIsNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAutoApproveReviews)))
	})
}

// AutoApproveReviewsNotNil applies the NotNil predicate on the "auto_approve_reviews" field.
func AutoApproveReviewsNotNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAutoApproveReviews)))
	})
}

// IsDemoStoreEQ applies the EQ predicate on the "is_demo_store" field.
func IsDemoStoreEQ(v IsDemoStore) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsDemoStore), v))
	})
}

// IsDemoStoreNEQ applies the NEQ predicate on the "is_demo_store" field.
func IsDemoStoreNEQ(v IsDemoStore) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsDemoStore), v))
	})
}

// IsDemoStoreIn applies the In predicate on the "is_demo_store" field.
func IsDemoStoreIn(vs ...IsDemoStore) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIsDemoStore), v...))
	})
}

// IsDemoStoreNotIn applies the NotIn predicate on the "is_demo_store" field.
func IsDemoStoreNotIn(vs ...IsDemoStore) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIsDemoStore), v...))
	})
}

// IsDemoStoreIsNil applies the IsNil predicate on the "is_demo_store" field.
func IsDemoStoreIsNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldIsDemoStore)))
	})
}

// IsDemoStoreNotNil applies the NotNil predicate on the "is_demo_store" field.
func IsDemoStoreNotNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldIsDemoStore)))
	})
}

// IsImmediatelyFulfilledEQ applies the EQ predicate on the "is_immediately_fulfilled" field.
func IsImmediatelyFulfilledEQ(v IsImmediatelyFulfilled) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsImmediatelyFulfilled), v))
	})
}

// IsImmediatelyFulfilledNEQ applies the NEQ predicate on the "is_immediately_fulfilled" field.
func IsImmediatelyFulfilledNEQ(v IsImmediatelyFulfilled) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsImmediatelyFulfilled), v))
	})
}

// IsImmediatelyFulfilledIn applies the In predicate on the "is_immediately_fulfilled" field.
func IsImmediatelyFulfilledIn(vs ...IsImmediatelyFulfilled) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIsImmediatelyFulfilled), v...))
	})
}

// IsImmediatelyFulfilledNotIn applies the NotIn predicate on the "is_immediately_fulfilled" field.
func IsImmediatelyFulfilledNotIn(vs ...IsImmediatelyFulfilled) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIsImmediatelyFulfilled), v...))
	})
}

// IsImmediatelyFulfilledIsNil applies the IsNil predicate on the "is_immediately_fulfilled" field.
func IsImmediatelyFulfilledIsNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldIsImmediatelyFulfilled)))
	})
}

// IsImmediatelyFulfilledNotNil applies the NotNil predicate on the "is_immediately_fulfilled" field.
func IsImmediatelyFulfilledNotNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldIsImmediatelyFulfilled)))
	})
}

// InventoryFacilityIDEQ applies the EQ predicate on the "inventory_facility_id" field.
func InventoryFacilityIDEQ(v int) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInventoryFacilityID), v))
	})
}

// InventoryFacilityIDNEQ applies the NEQ predicate on the "inventory_facility_id" field.
func InventoryFacilityIDNEQ(v int) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldInventoryFacilityID), v))
	})
}

// InventoryFacilityIDIn applies the In predicate on the "inventory_facility_id" field.
func InventoryFacilityIDIn(vs ...int) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldInventoryFacilityID), v...))
	})
}

// InventoryFacilityIDNotIn applies the NotIn predicate on the "inventory_facility_id" field.
func InventoryFacilityIDNotIn(vs ...int) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldInventoryFacilityID), v...))
	})
}

// InventoryFacilityIDGT applies the GT predicate on the "inventory_facility_id" field.
func InventoryFacilityIDGT(v int) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldInventoryFacilityID), v))
	})
}

// InventoryFacilityIDGTE applies the GTE predicate on the "inventory_facility_id" field.
func InventoryFacilityIDGTE(v int) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldInventoryFacilityID), v))
	})
}

// InventoryFacilityIDLT applies the LT predicate on the "inventory_facility_id" field.
func InventoryFacilityIDLT(v int) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldInventoryFacilityID), v))
	})
}

// InventoryFacilityIDLTE applies the LTE predicate on the "inventory_facility_id" field.
func InventoryFacilityIDLTE(v int) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldInventoryFacilityID), v))
	})
}

// InventoryFacilityIDIsNil applies the IsNil predicate on the "inventory_facility_id" field.
func InventoryFacilityIDIsNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldInventoryFacilityID)))
	})
}

// InventoryFacilityIDNotNil applies the NotNil predicate on the "inventory_facility_id" field.
func InventoryFacilityIDNotNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldInventoryFacilityID)))
	})
}

// OneInventoryFacilityEQ applies the EQ predicate on the "one_inventory_facility" field.
func OneInventoryFacilityEQ(v OneInventoryFacility) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOneInventoryFacility), v))
	})
}

// OneInventoryFacilityNEQ applies the NEQ predicate on the "one_inventory_facility" field.
func OneInventoryFacilityNEQ(v OneInventoryFacility) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOneInventoryFacility), v))
	})
}

// OneInventoryFacilityIn applies the In predicate on the "one_inventory_facility" field.
func OneInventoryFacilityIn(vs ...OneInventoryFacility) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOneInventoryFacility), v...))
	})
}

// OneInventoryFacilityNotIn applies the NotIn predicate on the "one_inventory_facility" field.
func OneInventoryFacilityNotIn(vs ...OneInventoryFacility) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOneInventoryFacility), v...))
	})
}

// OneInventoryFacilityIsNil applies the IsNil predicate on the "one_inventory_facility" field.
func OneInventoryFacilityIsNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOneInventoryFacility)))
	})
}

// OneInventoryFacilityNotNil applies the NotNil predicate on the "one_inventory_facility" field.
func OneInventoryFacilityNotNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOneInventoryFacility)))
	})
}

// CheckInventoryEQ applies the EQ predicate on the "check_inventory" field.
func CheckInventoryEQ(v CheckInventory) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCheckInventory), v))
	})
}

// CheckInventoryNEQ applies the NEQ predicate on the "check_inventory" field.
func CheckInventoryNEQ(v CheckInventory) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCheckInventory), v))
	})
}

// CheckInventoryIn applies the In predicate on the "check_inventory" field.
func CheckInventoryIn(vs ...CheckInventory) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCheckInventory), v...))
	})
}

// CheckInventoryNotIn applies the NotIn predicate on the "check_inventory" field.
func CheckInventoryNotIn(vs ...CheckInventory) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCheckInventory), v...))
	})
}

// CheckInventoryIsNil applies the IsNil predicate on the "check_inventory" field.
func CheckInventoryIsNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCheckInventory)))
	})
}

// CheckInventoryNotNil applies the NotNil predicate on the "check_inventory" field.
func CheckInventoryNotNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCheckInventory)))
	})
}

// ReserveInventoryEQ applies the EQ predicate on the "reserve_inventory" field.
func ReserveInventoryEQ(v ReserveInventory) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReserveInventory), v))
	})
}

// ReserveInventoryNEQ applies the NEQ predicate on the "reserve_inventory" field.
func ReserveInventoryNEQ(v ReserveInventory) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReserveInventory), v))
	})
}

// ReserveInventoryIn applies the In predicate on the "reserve_inventory" field.
func ReserveInventoryIn(vs ...ReserveInventory) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldReserveInventory), v...))
	})
}

// ReserveInventoryNotIn applies the NotIn predicate on the "reserve_inventory" field.
func ReserveInventoryNotIn(vs ...ReserveInventory) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldReserveInventory), v...))
	})
}

// ReserveInventoryIsNil applies the IsNil predicate on the "reserve_inventory" field.
func ReserveInventoryIsNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldReserveInventory)))
	})
}

// ReserveInventoryNotNil applies the NotNil predicate on the "reserve_inventory" field.
func ReserveInventoryNotNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldReserveInventory)))
	})
}

// RequireInventoryEQ applies the EQ predicate on the "require_inventory" field.
func RequireInventoryEQ(v RequireInventory) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRequireInventory), v))
	})
}

// RequireInventoryNEQ applies the NEQ predicate on the "require_inventory" field.
func RequireInventoryNEQ(v RequireInventory) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRequireInventory), v))
	})
}

// RequireInventoryIn applies the In predicate on the "require_inventory" field.
func RequireInventoryIn(vs ...RequireInventory) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRequireInventory), v...))
	})
}

// RequireInventoryNotIn applies the NotIn predicate on the "require_inventory" field.
func RequireInventoryNotIn(vs ...RequireInventory) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRequireInventory), v...))
	})
}

// RequireInventoryIsNil applies the IsNil predicate on the "require_inventory" field.
func RequireInventoryIsNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRequireInventory)))
	})
}

// RequireInventoryNotNil applies the NotNil predicate on the "require_inventory" field.
func RequireInventoryNotNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRequireInventory)))
	})
}

// BalanceResOnOrderCreationEQ applies the EQ predicate on the "balance_res_on_order_creation" field.
func BalanceResOnOrderCreationEQ(v BalanceResOnOrderCreation) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBalanceResOnOrderCreation), v))
	})
}

// BalanceResOnOrderCreationNEQ applies the NEQ predicate on the "balance_res_on_order_creation" field.
func BalanceResOnOrderCreationNEQ(v BalanceResOnOrderCreation) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBalanceResOnOrderCreation), v))
	})
}

// BalanceResOnOrderCreationIn applies the In predicate on the "balance_res_on_order_creation" field.
func BalanceResOnOrderCreationIn(vs ...BalanceResOnOrderCreation) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBalanceResOnOrderCreation), v...))
	})
}

// BalanceResOnOrderCreationNotIn applies the NotIn predicate on the "balance_res_on_order_creation" field.
func BalanceResOnOrderCreationNotIn(vs ...BalanceResOnOrderCreation) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBalanceResOnOrderCreation), v...))
	})
}

// BalanceResOnOrderCreationIsNil applies the IsNil predicate on the "balance_res_on_order_creation" field.
func BalanceResOnOrderCreationIsNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldBalanceResOnOrderCreation)))
	})
}

// BalanceResOnOrderCreationNotNil applies the NotNil predicate on the "balance_res_on_order_creation" field.
func BalanceResOnOrderCreationNotNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldBalanceResOnOrderCreation)))
	})
}

// OrderNumberPrefixEQ applies the EQ predicate on the "order_number_prefix" field.
func OrderNumberPrefixEQ(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderNumberPrefix), v))
	})
}

// OrderNumberPrefixNEQ applies the NEQ predicate on the "order_number_prefix" field.
func OrderNumberPrefixNEQ(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOrderNumberPrefix), v))
	})
}

// OrderNumberPrefixIn applies the In predicate on the "order_number_prefix" field.
func OrderNumberPrefixIn(vs ...string) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOrderNumberPrefix), v...))
	})
}

// OrderNumberPrefixNotIn applies the NotIn predicate on the "order_number_prefix" field.
func OrderNumberPrefixNotIn(vs ...string) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOrderNumberPrefix), v...))
	})
}

// OrderNumberPrefixGT applies the GT predicate on the "order_number_prefix" field.
func OrderNumberPrefixGT(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOrderNumberPrefix), v))
	})
}

// OrderNumberPrefixGTE applies the GTE predicate on the "order_number_prefix" field.
func OrderNumberPrefixGTE(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOrderNumberPrefix), v))
	})
}

// OrderNumberPrefixLT applies the LT predicate on the "order_number_prefix" field.
func OrderNumberPrefixLT(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOrderNumberPrefix), v))
	})
}

// OrderNumberPrefixLTE applies the LTE predicate on the "order_number_prefix" field.
func OrderNumberPrefixLTE(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOrderNumberPrefix), v))
	})
}

// OrderNumberPrefixContains applies the Contains predicate on the "order_number_prefix" field.
func OrderNumberPrefixContains(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOrderNumberPrefix), v))
	})
}

// OrderNumberPrefixHasPrefix applies the HasPrefix predicate on the "order_number_prefix" field.
func OrderNumberPrefixHasPrefix(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOrderNumberPrefix), v))
	})
}

// OrderNumberPrefixHasSuffix applies the HasSuffix predicate on the "order_number_prefix" field.
func OrderNumberPrefixHasSuffix(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOrderNumberPrefix), v))
	})
}

// OrderNumberPrefixIsNil applies the IsNil predicate on the "order_number_prefix" field.
func OrderNumberPrefixIsNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOrderNumberPrefix)))
	})
}

// OrderNumberPrefixNotNil applies the NotNil predicate on the "order_number_prefix" field.
func OrderNumberPrefixNotNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOrderNumberPrefix)))
	})
}

// OrderNumberPrefixEqualFold applies the EqualFold predicate on the "order_number_prefix" field.
func OrderNumberPrefixEqualFold(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOrderNumberPrefix), v))
	})
}

// OrderNumberPrefixContainsFold applies the ContainsFold predicate on the "order_number_prefix" field.
func OrderNumberPrefixContainsFold(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOrderNumberPrefix), v))
	})
}

// DefaultLocaleStringEQ applies the EQ predicate on the "default_locale_string" field.
func DefaultLocaleStringEQ(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDefaultLocaleString), v))
	})
}

// DefaultLocaleStringNEQ applies the NEQ predicate on the "default_locale_string" field.
func DefaultLocaleStringNEQ(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDefaultLocaleString), v))
	})
}

// DefaultLocaleStringIn applies the In predicate on the "default_locale_string" field.
func DefaultLocaleStringIn(vs ...string) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDefaultLocaleString), v...))
	})
}

// DefaultLocaleStringNotIn applies the NotIn predicate on the "default_locale_string" field.
func DefaultLocaleStringNotIn(vs ...string) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDefaultLocaleString), v...))
	})
}

// DefaultLocaleStringGT applies the GT predicate on the "default_locale_string" field.
func DefaultLocaleStringGT(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDefaultLocaleString), v))
	})
}

// DefaultLocaleStringGTE applies the GTE predicate on the "default_locale_string" field.
func DefaultLocaleStringGTE(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDefaultLocaleString), v))
	})
}

// DefaultLocaleStringLT applies the LT predicate on the "default_locale_string" field.
func DefaultLocaleStringLT(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDefaultLocaleString), v))
	})
}

// DefaultLocaleStringLTE applies the LTE predicate on the "default_locale_string" field.
func DefaultLocaleStringLTE(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDefaultLocaleString), v))
	})
}

// DefaultLocaleStringContains applies the Contains predicate on the "default_locale_string" field.
func DefaultLocaleStringContains(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDefaultLocaleString), v))
	})
}

// DefaultLocaleStringHasPrefix applies the HasPrefix predicate on the "default_locale_string" field.
func DefaultLocaleStringHasPrefix(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDefaultLocaleString), v))
	})
}

// DefaultLocaleStringHasSuffix applies the HasSuffix predicate on the "default_locale_string" field.
func DefaultLocaleStringHasSuffix(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDefaultLocaleString), v))
	})
}

// DefaultLocaleStringIsNil applies the IsNil predicate on the "default_locale_string" field.
func DefaultLocaleStringIsNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDefaultLocaleString)))
	})
}

// DefaultLocaleStringNotNil applies the NotNil predicate on the "default_locale_string" field.
func DefaultLocaleStringNotNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDefaultLocaleString)))
	})
}

// DefaultLocaleStringEqualFold applies the EqualFold predicate on the "default_locale_string" field.
func DefaultLocaleStringEqualFold(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDefaultLocaleString), v))
	})
}

// DefaultLocaleStringContainsFold applies the ContainsFold predicate on the "default_locale_string" field.
func DefaultLocaleStringContainsFold(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDefaultLocaleString), v))
	})
}

// DefaultCurrencyUomIDEQ applies the EQ predicate on the "default_currency_uom_id" field.
func DefaultCurrencyUomIDEQ(v int) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDefaultCurrencyUomID), v))
	})
}

// DefaultCurrencyUomIDNEQ applies the NEQ predicate on the "default_currency_uom_id" field.
func DefaultCurrencyUomIDNEQ(v int) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDefaultCurrencyUomID), v))
	})
}

// DefaultCurrencyUomIDIn applies the In predicate on the "default_currency_uom_id" field.
func DefaultCurrencyUomIDIn(vs ...int) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDefaultCurrencyUomID), v...))
	})
}

// DefaultCurrencyUomIDNotIn applies the NotIn predicate on the "default_currency_uom_id" field.
func DefaultCurrencyUomIDNotIn(vs ...int) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDefaultCurrencyUomID), v...))
	})
}

// DefaultCurrencyUomIDGT applies the GT predicate on the "default_currency_uom_id" field.
func DefaultCurrencyUomIDGT(v int) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDefaultCurrencyUomID), v))
	})
}

// DefaultCurrencyUomIDGTE applies the GTE predicate on the "default_currency_uom_id" field.
func DefaultCurrencyUomIDGTE(v int) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDefaultCurrencyUomID), v))
	})
}

// DefaultCurrencyUomIDLT applies the LT predicate on the "default_currency_uom_id" field.
func DefaultCurrencyUomIDLT(v int) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDefaultCurrencyUomID), v))
	})
}

// DefaultCurrencyUomIDLTE applies the LTE predicate on the "default_currency_uom_id" field.
func DefaultCurrencyUomIDLTE(v int) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDefaultCurrencyUomID), v))
	})
}

// DefaultCurrencyUomIDIsNil applies the IsNil predicate on the "default_currency_uom_id" field.
func DefaultCurrencyUomIDIsNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDefaultCurrencyUomID)))
	})
}

// DefaultCurrencyUomIDNotNil applies the NotNil predicate on the "default_currency_uom_id" field.
func DefaultCurrencyUomIDNotNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDefaultCurrencyUomID)))
	})
}

// DefaultTimeZoneStringEQ applies the EQ predicate on the "default_time_zone_string" field.
func DefaultTimeZoneStringEQ(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDefaultTimeZoneString), v))
	})
}

// DefaultTimeZoneStringNEQ applies the NEQ predicate on the "default_time_zone_string" field.
func DefaultTimeZoneStringNEQ(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDefaultTimeZoneString), v))
	})
}

// DefaultTimeZoneStringIn applies the In predicate on the "default_time_zone_string" field.
func DefaultTimeZoneStringIn(vs ...string) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDefaultTimeZoneString), v...))
	})
}

// DefaultTimeZoneStringNotIn applies the NotIn predicate on the "default_time_zone_string" field.
func DefaultTimeZoneStringNotIn(vs ...string) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDefaultTimeZoneString), v...))
	})
}

// DefaultTimeZoneStringGT applies the GT predicate on the "default_time_zone_string" field.
func DefaultTimeZoneStringGT(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDefaultTimeZoneString), v))
	})
}

// DefaultTimeZoneStringGTE applies the GTE predicate on the "default_time_zone_string" field.
func DefaultTimeZoneStringGTE(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDefaultTimeZoneString), v))
	})
}

// DefaultTimeZoneStringLT applies the LT predicate on the "default_time_zone_string" field.
func DefaultTimeZoneStringLT(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDefaultTimeZoneString), v))
	})
}

// DefaultTimeZoneStringLTE applies the LTE predicate on the "default_time_zone_string" field.
func DefaultTimeZoneStringLTE(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDefaultTimeZoneString), v))
	})
}

// DefaultTimeZoneStringContains applies the Contains predicate on the "default_time_zone_string" field.
func DefaultTimeZoneStringContains(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDefaultTimeZoneString), v))
	})
}

// DefaultTimeZoneStringHasPrefix applies the HasPrefix predicate on the "default_time_zone_string" field.
func DefaultTimeZoneStringHasPrefix(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDefaultTimeZoneString), v))
	})
}

// DefaultTimeZoneStringHasSuffix applies the HasSuffix predicate on the "default_time_zone_string" field.
func DefaultTimeZoneStringHasSuffix(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDefaultTimeZoneString), v))
	})
}

// DefaultTimeZoneStringIsNil applies the IsNil predicate on the "default_time_zone_string" field.
func DefaultTimeZoneStringIsNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDefaultTimeZoneString)))
	})
}

// DefaultTimeZoneStringNotNil applies the NotNil predicate on the "default_time_zone_string" field.
func DefaultTimeZoneStringNotNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDefaultTimeZoneString)))
	})
}

// DefaultTimeZoneStringEqualFold applies the EqualFold predicate on the "default_time_zone_string" field.
func DefaultTimeZoneStringEqualFold(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDefaultTimeZoneString), v))
	})
}

// DefaultTimeZoneStringContainsFold applies the ContainsFold predicate on the "default_time_zone_string" field.
func DefaultTimeZoneStringContainsFold(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDefaultTimeZoneString), v))
	})
}

// AllowPasswordEQ applies the EQ predicate on the "allow_password" field.
func AllowPasswordEQ(v AllowPassword) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAllowPassword), v))
	})
}

// AllowPasswordNEQ applies the NEQ predicate on the "allow_password" field.
func AllowPasswordNEQ(v AllowPassword) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAllowPassword), v))
	})
}

// AllowPasswordIn applies the In predicate on the "allow_password" field.
func AllowPasswordIn(vs ...AllowPassword) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAllowPassword), v...))
	})
}

// AllowPasswordNotIn applies the NotIn predicate on the "allow_password" field.
func AllowPasswordNotIn(vs ...AllowPassword) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAllowPassword), v...))
	})
}

// AllowPasswordIsNil applies the IsNil predicate on the "allow_password" field.
func AllowPasswordIsNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAllowPassword)))
	})
}

// AllowPasswordNotNil applies the NotNil predicate on the "allow_password" field.
func AllowPasswordNotNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAllowPassword)))
	})
}

// DefaultPasswordEQ applies the EQ predicate on the "default_password" field.
func DefaultPasswordEQ(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDefaultPassword), v))
	})
}

// DefaultPasswordNEQ applies the NEQ predicate on the "default_password" field.
func DefaultPasswordNEQ(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDefaultPassword), v))
	})
}

// DefaultPasswordIn applies the In predicate on the "default_password" field.
func DefaultPasswordIn(vs ...string) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDefaultPassword), v...))
	})
}

// DefaultPasswordNotIn applies the NotIn predicate on the "default_password" field.
func DefaultPasswordNotIn(vs ...string) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDefaultPassword), v...))
	})
}

// DefaultPasswordGT applies the GT predicate on the "default_password" field.
func DefaultPasswordGT(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDefaultPassword), v))
	})
}

// DefaultPasswordGTE applies the GTE predicate on the "default_password" field.
func DefaultPasswordGTE(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDefaultPassword), v))
	})
}

// DefaultPasswordLT applies the LT predicate on the "default_password" field.
func DefaultPasswordLT(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDefaultPassword), v))
	})
}

// DefaultPasswordLTE applies the LTE predicate on the "default_password" field.
func DefaultPasswordLTE(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDefaultPassword), v))
	})
}

// DefaultPasswordContains applies the Contains predicate on the "default_password" field.
func DefaultPasswordContains(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDefaultPassword), v))
	})
}

// DefaultPasswordHasPrefix applies the HasPrefix predicate on the "default_password" field.
func DefaultPasswordHasPrefix(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDefaultPassword), v))
	})
}

// DefaultPasswordHasSuffix applies the HasSuffix predicate on the "default_password" field.
func DefaultPasswordHasSuffix(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDefaultPassword), v))
	})
}

// DefaultPasswordIsNil applies the IsNil predicate on the "default_password" field.
func DefaultPasswordIsNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDefaultPassword)))
	})
}

// DefaultPasswordNotNil applies the NotNil predicate on the "default_password" field.
func DefaultPasswordNotNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDefaultPassword)))
	})
}

// DefaultPasswordEqualFold applies the EqualFold predicate on the "default_password" field.
func DefaultPasswordEqualFold(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDefaultPassword), v))
	})
}

// DefaultPasswordContainsFold applies the ContainsFold predicate on the "default_password" field.
func DefaultPasswordContainsFold(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDefaultPassword), v))
	})
}

// ExplodeOrderItemsEQ applies the EQ predicate on the "explode_order_items" field.
func ExplodeOrderItemsEQ(v ExplodeOrderItems) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExplodeOrderItems), v))
	})
}

// ExplodeOrderItemsNEQ applies the NEQ predicate on the "explode_order_items" field.
func ExplodeOrderItemsNEQ(v ExplodeOrderItems) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldExplodeOrderItems), v))
	})
}

// ExplodeOrderItemsIn applies the In predicate on the "explode_order_items" field.
func ExplodeOrderItemsIn(vs ...ExplodeOrderItems) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldExplodeOrderItems), v...))
	})
}

// ExplodeOrderItemsNotIn applies the NotIn predicate on the "explode_order_items" field.
func ExplodeOrderItemsNotIn(vs ...ExplodeOrderItems) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldExplodeOrderItems), v...))
	})
}

// ExplodeOrderItemsIsNil applies the IsNil predicate on the "explode_order_items" field.
func ExplodeOrderItemsIsNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldExplodeOrderItems)))
	})
}

// ExplodeOrderItemsNotNil applies the NotNil predicate on the "explode_order_items" field.
func ExplodeOrderItemsNotNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldExplodeOrderItems)))
	})
}

// CheckGcBalanceEQ applies the EQ predicate on the "check_gc_balance" field.
func CheckGcBalanceEQ(v CheckGcBalance) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCheckGcBalance), v))
	})
}

// CheckGcBalanceNEQ applies the NEQ predicate on the "check_gc_balance" field.
func CheckGcBalanceNEQ(v CheckGcBalance) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCheckGcBalance), v))
	})
}

// CheckGcBalanceIn applies the In predicate on the "check_gc_balance" field.
func CheckGcBalanceIn(vs ...CheckGcBalance) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCheckGcBalance), v...))
	})
}

// CheckGcBalanceNotIn applies the NotIn predicate on the "check_gc_balance" field.
func CheckGcBalanceNotIn(vs ...CheckGcBalance) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCheckGcBalance), v...))
	})
}

// CheckGcBalanceIsNil applies the IsNil predicate on the "check_gc_balance" field.
func CheckGcBalanceIsNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCheckGcBalance)))
	})
}

// CheckGcBalanceNotNil applies the NotNil predicate on the "check_gc_balance" field.
func CheckGcBalanceNotNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCheckGcBalance)))
	})
}

// RetryFailedAuthsEQ applies the EQ predicate on the "retry_failed_auths" field.
func RetryFailedAuthsEQ(v RetryFailedAuths) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRetryFailedAuths), v))
	})
}

// RetryFailedAuthsNEQ applies the NEQ predicate on the "retry_failed_auths" field.
func RetryFailedAuthsNEQ(v RetryFailedAuths) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRetryFailedAuths), v))
	})
}

// RetryFailedAuthsIn applies the In predicate on the "retry_failed_auths" field.
func RetryFailedAuthsIn(vs ...RetryFailedAuths) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRetryFailedAuths), v...))
	})
}

// RetryFailedAuthsNotIn applies the NotIn predicate on the "retry_failed_auths" field.
func RetryFailedAuthsNotIn(vs ...RetryFailedAuths) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRetryFailedAuths), v...))
	})
}

// RetryFailedAuthsIsNil applies the IsNil predicate on the "retry_failed_auths" field.
func RetryFailedAuthsIsNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRetryFailedAuths)))
	})
}

// RetryFailedAuthsNotNil applies the NotNil predicate on the "retry_failed_auths" field.
func RetryFailedAuthsNotNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRetryFailedAuths)))
	})
}

// AuthDeclinedMessageEQ applies the EQ predicate on the "auth_declined_message" field.
func AuthDeclinedMessageEQ(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAuthDeclinedMessage), v))
	})
}

// AuthDeclinedMessageNEQ applies the NEQ predicate on the "auth_declined_message" field.
func AuthDeclinedMessageNEQ(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAuthDeclinedMessage), v))
	})
}

// AuthDeclinedMessageIn applies the In predicate on the "auth_declined_message" field.
func AuthDeclinedMessageIn(vs ...string) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAuthDeclinedMessage), v...))
	})
}

// AuthDeclinedMessageNotIn applies the NotIn predicate on the "auth_declined_message" field.
func AuthDeclinedMessageNotIn(vs ...string) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAuthDeclinedMessage), v...))
	})
}

// AuthDeclinedMessageGT applies the GT predicate on the "auth_declined_message" field.
func AuthDeclinedMessageGT(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAuthDeclinedMessage), v))
	})
}

// AuthDeclinedMessageGTE applies the GTE predicate on the "auth_declined_message" field.
func AuthDeclinedMessageGTE(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAuthDeclinedMessage), v))
	})
}

// AuthDeclinedMessageLT applies the LT predicate on the "auth_declined_message" field.
func AuthDeclinedMessageLT(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAuthDeclinedMessage), v))
	})
}

// AuthDeclinedMessageLTE applies the LTE predicate on the "auth_declined_message" field.
func AuthDeclinedMessageLTE(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAuthDeclinedMessage), v))
	})
}

// AuthDeclinedMessageContains applies the Contains predicate on the "auth_declined_message" field.
func AuthDeclinedMessageContains(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAuthDeclinedMessage), v))
	})
}

// AuthDeclinedMessageHasPrefix applies the HasPrefix predicate on the "auth_declined_message" field.
func AuthDeclinedMessageHasPrefix(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAuthDeclinedMessage), v))
	})
}

// AuthDeclinedMessageHasSuffix applies the HasSuffix predicate on the "auth_declined_message" field.
func AuthDeclinedMessageHasSuffix(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAuthDeclinedMessage), v))
	})
}

// AuthDeclinedMessageIsNil applies the IsNil predicate on the "auth_declined_message" field.
func AuthDeclinedMessageIsNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAuthDeclinedMessage)))
	})
}

// AuthDeclinedMessageNotNil applies the NotNil predicate on the "auth_declined_message" field.
func AuthDeclinedMessageNotNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAuthDeclinedMessage)))
	})
}

// AuthDeclinedMessageEqualFold applies the EqualFold predicate on the "auth_declined_message" field.
func AuthDeclinedMessageEqualFold(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAuthDeclinedMessage), v))
	})
}

// AuthDeclinedMessageContainsFold applies the ContainsFold predicate on the "auth_declined_message" field.
func AuthDeclinedMessageContainsFold(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAuthDeclinedMessage), v))
	})
}

// AuthFraudMessageEQ applies the EQ predicate on the "auth_fraud_message" field.
func AuthFraudMessageEQ(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAuthFraudMessage), v))
	})
}

// AuthFraudMessageNEQ applies the NEQ predicate on the "auth_fraud_message" field.
func AuthFraudMessageNEQ(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAuthFraudMessage), v))
	})
}

// AuthFraudMessageIn applies the In predicate on the "auth_fraud_message" field.
func AuthFraudMessageIn(vs ...string) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAuthFraudMessage), v...))
	})
}

// AuthFraudMessageNotIn applies the NotIn predicate on the "auth_fraud_message" field.
func AuthFraudMessageNotIn(vs ...string) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAuthFraudMessage), v...))
	})
}

// AuthFraudMessageGT applies the GT predicate on the "auth_fraud_message" field.
func AuthFraudMessageGT(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAuthFraudMessage), v))
	})
}

// AuthFraudMessageGTE applies the GTE predicate on the "auth_fraud_message" field.
func AuthFraudMessageGTE(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAuthFraudMessage), v))
	})
}

// AuthFraudMessageLT applies the LT predicate on the "auth_fraud_message" field.
func AuthFraudMessageLT(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAuthFraudMessage), v))
	})
}

// AuthFraudMessageLTE applies the LTE predicate on the "auth_fraud_message" field.
func AuthFraudMessageLTE(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAuthFraudMessage), v))
	})
}

// AuthFraudMessageContains applies the Contains predicate on the "auth_fraud_message" field.
func AuthFraudMessageContains(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAuthFraudMessage), v))
	})
}

// AuthFraudMessageHasPrefix applies the HasPrefix predicate on the "auth_fraud_message" field.
func AuthFraudMessageHasPrefix(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAuthFraudMessage), v))
	})
}

// AuthFraudMessageHasSuffix applies the HasSuffix predicate on the "auth_fraud_message" field.
func AuthFraudMessageHasSuffix(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAuthFraudMessage), v))
	})
}

// AuthFraudMessageIsNil applies the IsNil predicate on the "auth_fraud_message" field.
func AuthFraudMessageIsNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAuthFraudMessage)))
	})
}

// AuthFraudMessageNotNil applies the NotNil predicate on the "auth_fraud_message" field.
func AuthFraudMessageNotNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAuthFraudMessage)))
	})
}

// AuthFraudMessageEqualFold applies the EqualFold predicate on the "auth_fraud_message" field.
func AuthFraudMessageEqualFold(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAuthFraudMessage), v))
	})
}

// AuthFraudMessageContainsFold applies the ContainsFold predicate on the "auth_fraud_message" field.
func AuthFraudMessageContainsFold(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAuthFraudMessage), v))
	})
}

// AuthErrorMessageEQ applies the EQ predicate on the "auth_error_message" field.
func AuthErrorMessageEQ(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAuthErrorMessage), v))
	})
}

// AuthErrorMessageNEQ applies the NEQ predicate on the "auth_error_message" field.
func AuthErrorMessageNEQ(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAuthErrorMessage), v))
	})
}

// AuthErrorMessageIn applies the In predicate on the "auth_error_message" field.
func AuthErrorMessageIn(vs ...string) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAuthErrorMessage), v...))
	})
}

// AuthErrorMessageNotIn applies the NotIn predicate on the "auth_error_message" field.
func AuthErrorMessageNotIn(vs ...string) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAuthErrorMessage), v...))
	})
}

// AuthErrorMessageGT applies the GT predicate on the "auth_error_message" field.
func AuthErrorMessageGT(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAuthErrorMessage), v))
	})
}

// AuthErrorMessageGTE applies the GTE predicate on the "auth_error_message" field.
func AuthErrorMessageGTE(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAuthErrorMessage), v))
	})
}

// AuthErrorMessageLT applies the LT predicate on the "auth_error_message" field.
func AuthErrorMessageLT(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAuthErrorMessage), v))
	})
}

// AuthErrorMessageLTE applies the LTE predicate on the "auth_error_message" field.
func AuthErrorMessageLTE(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAuthErrorMessage), v))
	})
}

// AuthErrorMessageContains applies the Contains predicate on the "auth_error_message" field.
func AuthErrorMessageContains(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAuthErrorMessage), v))
	})
}

// AuthErrorMessageHasPrefix applies the HasPrefix predicate on the "auth_error_message" field.
func AuthErrorMessageHasPrefix(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAuthErrorMessage), v))
	})
}

// AuthErrorMessageHasSuffix applies the HasSuffix predicate on the "auth_error_message" field.
func AuthErrorMessageHasSuffix(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAuthErrorMessage), v))
	})
}

// AuthErrorMessageIsNil applies the IsNil predicate on the "auth_error_message" field.
func AuthErrorMessageIsNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAuthErrorMessage)))
	})
}

// AuthErrorMessageNotNil applies the NotNil predicate on the "auth_error_message" field.
func AuthErrorMessageNotNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAuthErrorMessage)))
	})
}

// AuthErrorMessageEqualFold applies the EqualFold predicate on the "auth_error_message" field.
func AuthErrorMessageEqualFold(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAuthErrorMessage), v))
	})
}

// AuthErrorMessageContainsFold applies the ContainsFold predicate on the "auth_error_message" field.
func AuthErrorMessageContainsFold(v string) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAuthErrorMessage), v))
	})
}

// VisualThemeIDEQ applies the EQ predicate on the "visual_theme_id" field.
func VisualThemeIDEQ(v int) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVisualThemeID), v))
	})
}

// VisualThemeIDNEQ applies the NEQ predicate on the "visual_theme_id" field.
func VisualThemeIDNEQ(v int) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldVisualThemeID), v))
	})
}

// VisualThemeIDIn applies the In predicate on the "visual_theme_id" field.
func VisualThemeIDIn(vs ...int) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldVisualThemeID), v...))
	})
}

// VisualThemeIDNotIn applies the NotIn predicate on the "visual_theme_id" field.
func VisualThemeIDNotIn(vs ...int) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldVisualThemeID), v...))
	})
}

// VisualThemeIDGT applies the GT predicate on the "visual_theme_id" field.
func VisualThemeIDGT(v int) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldVisualThemeID), v))
	})
}

// VisualThemeIDGTE applies the GTE predicate on the "visual_theme_id" field.
func VisualThemeIDGTE(v int) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldVisualThemeID), v))
	})
}

// VisualThemeIDLT applies the LT predicate on the "visual_theme_id" field.
func VisualThemeIDLT(v int) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldVisualThemeID), v))
	})
}

// VisualThemeIDLTE applies the LTE predicate on the "visual_theme_id" field.
func VisualThemeIDLTE(v int) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldVisualThemeID), v))
	})
}

// VisualThemeIDIsNil applies the IsNil predicate on the "visual_theme_id" field.
func VisualThemeIDIsNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldVisualThemeID)))
	})
}

// VisualThemeIDNotNil applies the NotNil predicate on the "visual_theme_id" field.
func VisualThemeIDNotNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldVisualThemeID)))
	})
}

// UsePrimaryEmailUsernameEQ applies the EQ predicate on the "use_primary_email_username" field.
func UsePrimaryEmailUsernameEQ(v UsePrimaryEmailUsername) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUsePrimaryEmailUsername), v))
	})
}

// UsePrimaryEmailUsernameNEQ applies the NEQ predicate on the "use_primary_email_username" field.
func UsePrimaryEmailUsernameNEQ(v UsePrimaryEmailUsername) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUsePrimaryEmailUsername), v))
	})
}

// UsePrimaryEmailUsernameIn applies the In predicate on the "use_primary_email_username" field.
func UsePrimaryEmailUsernameIn(vs ...UsePrimaryEmailUsername) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUsePrimaryEmailUsername), v...))
	})
}

// UsePrimaryEmailUsernameNotIn applies the NotIn predicate on the "use_primary_email_username" field.
func UsePrimaryEmailUsernameNotIn(vs ...UsePrimaryEmailUsername) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUsePrimaryEmailUsername), v...))
	})
}

// UsePrimaryEmailUsernameIsNil applies the IsNil predicate on the "use_primary_email_username" field.
func UsePrimaryEmailUsernameIsNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUsePrimaryEmailUsername)))
	})
}

// UsePrimaryEmailUsernameNotNil applies the NotNil predicate on the "use_primary_email_username" field.
func UsePrimaryEmailUsernameNotNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUsePrimaryEmailUsername)))
	})
}

// RequireCustomerRoleEQ applies the EQ predicate on the "require_customer_role" field.
func RequireCustomerRoleEQ(v RequireCustomerRole) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRequireCustomerRole), v))
	})
}

// RequireCustomerRoleNEQ applies the NEQ predicate on the "require_customer_role" field.
func RequireCustomerRoleNEQ(v RequireCustomerRole) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRequireCustomerRole), v))
	})
}

// RequireCustomerRoleIn applies the In predicate on the "require_customer_role" field.
func RequireCustomerRoleIn(vs ...RequireCustomerRole) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRequireCustomerRole), v...))
	})
}

// RequireCustomerRoleNotIn applies the NotIn predicate on the "require_customer_role" field.
func RequireCustomerRoleNotIn(vs ...RequireCustomerRole) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRequireCustomerRole), v...))
	})
}

// RequireCustomerRoleIsNil applies the IsNil predicate on the "require_customer_role" field.
func RequireCustomerRoleIsNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRequireCustomerRole)))
	})
}

// RequireCustomerRoleNotNil applies the NotNil predicate on the "require_customer_role" field.
func RequireCustomerRoleNotNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRequireCustomerRole)))
	})
}

// AutoInvoiceDigitalItemsEQ applies the EQ predicate on the "auto_invoice_digital_items" field.
func AutoInvoiceDigitalItemsEQ(v AutoInvoiceDigitalItems) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAutoInvoiceDigitalItems), v))
	})
}

// AutoInvoiceDigitalItemsNEQ applies the NEQ predicate on the "auto_invoice_digital_items" field.
func AutoInvoiceDigitalItemsNEQ(v AutoInvoiceDigitalItems) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAutoInvoiceDigitalItems), v))
	})
}

// AutoInvoiceDigitalItemsIn applies the In predicate on the "auto_invoice_digital_items" field.
func AutoInvoiceDigitalItemsIn(vs ...AutoInvoiceDigitalItems) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAutoInvoiceDigitalItems), v...))
	})
}

// AutoInvoiceDigitalItemsNotIn applies the NotIn predicate on the "auto_invoice_digital_items" field.
func AutoInvoiceDigitalItemsNotIn(vs ...AutoInvoiceDigitalItems) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAutoInvoiceDigitalItems), v...))
	})
}

// AutoInvoiceDigitalItemsIsNil applies the IsNil predicate on the "auto_invoice_digital_items" field.
func AutoInvoiceDigitalItemsIsNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAutoInvoiceDigitalItems)))
	})
}

// AutoInvoiceDigitalItemsNotNil applies the NotNil predicate on the "auto_invoice_digital_items" field.
func AutoInvoiceDigitalItemsNotNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAutoInvoiceDigitalItems)))
	})
}

// ReqShipAddrForDigItemsEQ applies the EQ predicate on the "req_ship_addr_for_dig_items" field.
func ReqShipAddrForDigItemsEQ(v ReqShipAddrForDigItems) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReqShipAddrForDigItems), v))
	})
}

// ReqShipAddrForDigItemsNEQ applies the NEQ predicate on the "req_ship_addr_for_dig_items" field.
func ReqShipAddrForDigItemsNEQ(v ReqShipAddrForDigItems) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReqShipAddrForDigItems), v))
	})
}

// ReqShipAddrForDigItemsIn applies the In predicate on the "req_ship_addr_for_dig_items" field.
func ReqShipAddrForDigItemsIn(vs ...ReqShipAddrForDigItems) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldReqShipAddrForDigItems), v...))
	})
}

// ReqShipAddrForDigItemsNotIn applies the NotIn predicate on the "req_ship_addr_for_dig_items" field.
func ReqShipAddrForDigItemsNotIn(vs ...ReqShipAddrForDigItems) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldReqShipAddrForDigItems), v...))
	})
}

// ReqShipAddrForDigItemsIsNil applies the IsNil predicate on the "req_ship_addr_for_dig_items" field.
func ReqShipAddrForDigItemsIsNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldReqShipAddrForDigItems)))
	})
}

// ReqShipAddrForDigItemsNotNil applies the NotNil predicate on the "req_ship_addr_for_dig_items" field.
func ReqShipAddrForDigItemsNotNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldReqShipAddrForDigItems)))
	})
}

// ShowCheckoutGiftOptionsEQ applies the EQ predicate on the "show_checkout_gift_options" field.
func ShowCheckoutGiftOptionsEQ(v ShowCheckoutGiftOptions) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShowCheckoutGiftOptions), v))
	})
}

// ShowCheckoutGiftOptionsNEQ applies the NEQ predicate on the "show_checkout_gift_options" field.
func ShowCheckoutGiftOptionsNEQ(v ShowCheckoutGiftOptions) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShowCheckoutGiftOptions), v))
	})
}

// ShowCheckoutGiftOptionsIn applies the In predicate on the "show_checkout_gift_options" field.
func ShowCheckoutGiftOptionsIn(vs ...ShowCheckoutGiftOptions) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldShowCheckoutGiftOptions), v...))
	})
}

// ShowCheckoutGiftOptionsNotIn applies the NotIn predicate on the "show_checkout_gift_options" field.
func ShowCheckoutGiftOptionsNotIn(vs ...ShowCheckoutGiftOptions) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldShowCheckoutGiftOptions), v...))
	})
}

// ShowCheckoutGiftOptionsIsNil applies the IsNil predicate on the "show_checkout_gift_options" field.
func ShowCheckoutGiftOptionsIsNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldShowCheckoutGiftOptions)))
	})
}

// ShowCheckoutGiftOptionsNotNil applies the NotNil predicate on the "show_checkout_gift_options" field.
func ShowCheckoutGiftOptionsNotNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldShowCheckoutGiftOptions)))
	})
}

// SelectPaymentTypePerItemEQ applies the EQ predicate on the "select_payment_type_per_item" field.
func SelectPaymentTypePerItemEQ(v SelectPaymentTypePerItem) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSelectPaymentTypePerItem), v))
	})
}

// SelectPaymentTypePerItemNEQ applies the NEQ predicate on the "select_payment_type_per_item" field.
func SelectPaymentTypePerItemNEQ(v SelectPaymentTypePerItem) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSelectPaymentTypePerItem), v))
	})
}

// SelectPaymentTypePerItemIn applies the In predicate on the "select_payment_type_per_item" field.
func SelectPaymentTypePerItemIn(vs ...SelectPaymentTypePerItem) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSelectPaymentTypePerItem), v...))
	})
}

// SelectPaymentTypePerItemNotIn applies the NotIn predicate on the "select_payment_type_per_item" field.
func SelectPaymentTypePerItemNotIn(vs ...SelectPaymentTypePerItem) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSelectPaymentTypePerItem), v...))
	})
}

// SelectPaymentTypePerItemIsNil applies the IsNil predicate on the "select_payment_type_per_item" field.
func SelectPaymentTypePerItemIsNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSelectPaymentTypePerItem)))
	})
}

// SelectPaymentTypePerItemNotNil applies the NotNil predicate on the "select_payment_type_per_item" field.
func SelectPaymentTypePerItemNotNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSelectPaymentTypePerItem)))
	})
}

// ShowPricesWithVatTaxEQ applies the EQ predicate on the "show_prices_with_vat_tax" field.
func ShowPricesWithVatTaxEQ(v ShowPricesWithVatTax) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShowPricesWithVatTax), v))
	})
}

// ShowPricesWithVatTaxNEQ applies the NEQ predicate on the "show_prices_with_vat_tax" field.
func ShowPricesWithVatTaxNEQ(v ShowPricesWithVatTax) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShowPricesWithVatTax), v))
	})
}

// ShowPricesWithVatTaxIn applies the In predicate on the "show_prices_with_vat_tax" field.
func ShowPricesWithVatTaxIn(vs ...ShowPricesWithVatTax) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldShowPricesWithVatTax), v...))
	})
}

// ShowPricesWithVatTaxNotIn applies the NotIn predicate on the "show_prices_with_vat_tax" field.
func ShowPricesWithVatTaxNotIn(vs ...ShowPricesWithVatTax) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldShowPricesWithVatTax), v...))
	})
}

// ShowPricesWithVatTaxIsNil applies the IsNil predicate on the "show_prices_with_vat_tax" field.
func ShowPricesWithVatTaxIsNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldShowPricesWithVatTax)))
	})
}

// ShowPricesWithVatTaxNotNil applies the NotNil predicate on the "show_prices_with_vat_tax" field.
func ShowPricesWithVatTaxNotNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldShowPricesWithVatTax)))
	})
}

// ShowTaxIsExemptEQ applies the EQ predicate on the "show_tax_is_exempt" field.
func ShowTaxIsExemptEQ(v ShowTaxIsExempt) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShowTaxIsExempt), v))
	})
}

// ShowTaxIsExemptNEQ applies the NEQ predicate on the "show_tax_is_exempt" field.
func ShowTaxIsExemptNEQ(v ShowTaxIsExempt) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShowTaxIsExempt), v))
	})
}

// ShowTaxIsExemptIn applies the In predicate on the "show_tax_is_exempt" field.
func ShowTaxIsExemptIn(vs ...ShowTaxIsExempt) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldShowTaxIsExempt), v...))
	})
}

// ShowTaxIsExemptNotIn applies the NotIn predicate on the "show_tax_is_exempt" field.
func ShowTaxIsExemptNotIn(vs ...ShowTaxIsExempt) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldShowTaxIsExempt), v...))
	})
}

// ShowTaxIsExemptIsNil applies the IsNil predicate on the "show_tax_is_exempt" field.
func ShowTaxIsExemptIsNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldShowTaxIsExempt)))
	})
}

// ShowTaxIsExemptNotNil applies the NotNil predicate on the "show_tax_is_exempt" field.
func ShowTaxIsExemptNotNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldShowTaxIsExempt)))
	})
}

// VatTaxAuthGeoIDEQ applies the EQ predicate on the "vat_tax_auth_geo_id" field.
func VatTaxAuthGeoIDEQ(v int) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVatTaxAuthGeoID), v))
	})
}

// VatTaxAuthGeoIDNEQ applies the NEQ predicate on the "vat_tax_auth_geo_id" field.
func VatTaxAuthGeoIDNEQ(v int) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldVatTaxAuthGeoID), v))
	})
}

// VatTaxAuthGeoIDIn applies the In predicate on the "vat_tax_auth_geo_id" field.
func VatTaxAuthGeoIDIn(vs ...int) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldVatTaxAuthGeoID), v...))
	})
}

// VatTaxAuthGeoIDNotIn applies the NotIn predicate on the "vat_tax_auth_geo_id" field.
func VatTaxAuthGeoIDNotIn(vs ...int) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldVatTaxAuthGeoID), v...))
	})
}

// VatTaxAuthGeoIDGT applies the GT predicate on the "vat_tax_auth_geo_id" field.
func VatTaxAuthGeoIDGT(v int) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldVatTaxAuthGeoID), v))
	})
}

// VatTaxAuthGeoIDGTE applies the GTE predicate on the "vat_tax_auth_geo_id" field.
func VatTaxAuthGeoIDGTE(v int) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldVatTaxAuthGeoID), v))
	})
}

// VatTaxAuthGeoIDLT applies the LT predicate on the "vat_tax_auth_geo_id" field.
func VatTaxAuthGeoIDLT(v int) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldVatTaxAuthGeoID), v))
	})
}

// VatTaxAuthGeoIDLTE applies the LTE predicate on the "vat_tax_auth_geo_id" field.
func VatTaxAuthGeoIDLTE(v int) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldVatTaxAuthGeoID), v))
	})
}

// VatTaxAuthGeoIDIsNil applies the IsNil predicate on the "vat_tax_auth_geo_id" field.
func VatTaxAuthGeoIDIsNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldVatTaxAuthGeoID)))
	})
}

// VatTaxAuthGeoIDNotNil applies the NotNil predicate on the "vat_tax_auth_geo_id" field.
func VatTaxAuthGeoIDNotNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldVatTaxAuthGeoID)))
	})
}

// VatTaxAuthPartyIDEQ applies the EQ predicate on the "vat_tax_auth_party_id" field.
func VatTaxAuthPartyIDEQ(v int) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVatTaxAuthPartyID), v))
	})
}

// VatTaxAuthPartyIDNEQ applies the NEQ predicate on the "vat_tax_auth_party_id" field.
func VatTaxAuthPartyIDNEQ(v int) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldVatTaxAuthPartyID), v))
	})
}

// VatTaxAuthPartyIDIn applies the In predicate on the "vat_tax_auth_party_id" field.
func VatTaxAuthPartyIDIn(vs ...int) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldVatTaxAuthPartyID), v...))
	})
}

// VatTaxAuthPartyIDNotIn applies the NotIn predicate on the "vat_tax_auth_party_id" field.
func VatTaxAuthPartyIDNotIn(vs ...int) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldVatTaxAuthPartyID), v...))
	})
}

// VatTaxAuthPartyIDGT applies the GT predicate on the "vat_tax_auth_party_id" field.
func VatTaxAuthPartyIDGT(v int) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldVatTaxAuthPartyID), v))
	})
}

// VatTaxAuthPartyIDGTE applies the GTE predicate on the "vat_tax_auth_party_id" field.
func VatTaxAuthPartyIDGTE(v int) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldVatTaxAuthPartyID), v))
	})
}

// VatTaxAuthPartyIDLT applies the LT predicate on the "vat_tax_auth_party_id" field.
func VatTaxAuthPartyIDLT(v int) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldVatTaxAuthPartyID), v))
	})
}

// VatTaxAuthPartyIDLTE applies the LTE predicate on the "vat_tax_auth_party_id" field.
func VatTaxAuthPartyIDLTE(v int) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldVatTaxAuthPartyID), v))
	})
}

// VatTaxAuthPartyIDIsNil applies the IsNil predicate on the "vat_tax_auth_party_id" field.
func VatTaxAuthPartyIDIsNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldVatTaxAuthPartyID)))
	})
}

// VatTaxAuthPartyIDNotNil applies the NotNil predicate on the "vat_tax_auth_party_id" field.
func VatTaxAuthPartyIDNotNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldVatTaxAuthPartyID)))
	})
}

// EnableAutoSuggestionListEQ applies the EQ predicate on the "enable_auto_suggestion_list" field.
func EnableAutoSuggestionListEQ(v EnableAutoSuggestionList) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEnableAutoSuggestionList), v))
	})
}

// EnableAutoSuggestionListNEQ applies the NEQ predicate on the "enable_auto_suggestion_list" field.
func EnableAutoSuggestionListNEQ(v EnableAutoSuggestionList) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEnableAutoSuggestionList), v))
	})
}

// EnableAutoSuggestionListIn applies the In predicate on the "enable_auto_suggestion_list" field.
func EnableAutoSuggestionListIn(vs ...EnableAutoSuggestionList) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEnableAutoSuggestionList), v...))
	})
}

// EnableAutoSuggestionListNotIn applies the NotIn predicate on the "enable_auto_suggestion_list" field.
func EnableAutoSuggestionListNotIn(vs ...EnableAutoSuggestionList) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEnableAutoSuggestionList), v...))
	})
}

// EnableAutoSuggestionListIsNil applies the IsNil predicate on the "enable_auto_suggestion_list" field.
func EnableAutoSuggestionListIsNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldEnableAutoSuggestionList)))
	})
}

// EnableAutoSuggestionListNotNil applies the NotNil predicate on the "enable_auto_suggestion_list" field.
func EnableAutoSuggestionListNotNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldEnableAutoSuggestionList)))
	})
}

// EnableDigProdUploadEQ applies the EQ predicate on the "enable_dig_prod_upload" field.
func EnableDigProdUploadEQ(v EnableDigProdUpload) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEnableDigProdUpload), v))
	})
}

// EnableDigProdUploadNEQ applies the NEQ predicate on the "enable_dig_prod_upload" field.
func EnableDigProdUploadNEQ(v EnableDigProdUpload) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEnableDigProdUpload), v))
	})
}

// EnableDigProdUploadIn applies the In predicate on the "enable_dig_prod_upload" field.
func EnableDigProdUploadIn(vs ...EnableDigProdUpload) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEnableDigProdUpload), v...))
	})
}

// EnableDigProdUploadNotIn applies the NotIn predicate on the "enable_dig_prod_upload" field.
func EnableDigProdUploadNotIn(vs ...EnableDigProdUpload) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEnableDigProdUpload), v...))
	})
}

// EnableDigProdUploadIsNil applies the IsNil predicate on the "enable_dig_prod_upload" field.
func EnableDigProdUploadIsNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldEnableDigProdUpload)))
	})
}

// EnableDigProdUploadNotNil applies the NotNil predicate on the "enable_dig_prod_upload" field.
func EnableDigProdUploadNotNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldEnableDigProdUpload)))
	})
}

// ProdSearchExcludeVariantsEQ applies the EQ predicate on the "prod_search_exclude_variants" field.
func ProdSearchExcludeVariantsEQ(v ProdSearchExcludeVariants) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProdSearchExcludeVariants), v))
	})
}

// ProdSearchExcludeVariantsNEQ applies the NEQ predicate on the "prod_search_exclude_variants" field.
func ProdSearchExcludeVariantsNEQ(v ProdSearchExcludeVariants) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProdSearchExcludeVariants), v))
	})
}

// ProdSearchExcludeVariantsIn applies the In predicate on the "prod_search_exclude_variants" field.
func ProdSearchExcludeVariantsIn(vs ...ProdSearchExcludeVariants) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldProdSearchExcludeVariants), v...))
	})
}

// ProdSearchExcludeVariantsNotIn applies the NotIn predicate on the "prod_search_exclude_variants" field.
func ProdSearchExcludeVariantsNotIn(vs ...ProdSearchExcludeVariants) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldProdSearchExcludeVariants), v...))
	})
}

// ProdSearchExcludeVariantsIsNil applies the IsNil predicate on the "prod_search_exclude_variants" field.
func ProdSearchExcludeVariantsIsNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldProdSearchExcludeVariants)))
	})
}

// ProdSearchExcludeVariantsNotNil applies the NotNil predicate on the "prod_search_exclude_variants" field.
func ProdSearchExcludeVariantsNotNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldProdSearchExcludeVariants)))
	})
}

// DigProdUploadCategoryIDEQ applies the EQ predicate on the "dig_prod_upload_category_id" field.
func DigProdUploadCategoryIDEQ(v int) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDigProdUploadCategoryID), v))
	})
}

// DigProdUploadCategoryIDNEQ applies the NEQ predicate on the "dig_prod_upload_category_id" field.
func DigProdUploadCategoryIDNEQ(v int) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDigProdUploadCategoryID), v))
	})
}

// DigProdUploadCategoryIDIn applies the In predicate on the "dig_prod_upload_category_id" field.
func DigProdUploadCategoryIDIn(vs ...int) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDigProdUploadCategoryID), v...))
	})
}

// DigProdUploadCategoryIDNotIn applies the NotIn predicate on the "dig_prod_upload_category_id" field.
func DigProdUploadCategoryIDNotIn(vs ...int) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDigProdUploadCategoryID), v...))
	})
}

// DigProdUploadCategoryIDGT applies the GT predicate on the "dig_prod_upload_category_id" field.
func DigProdUploadCategoryIDGT(v int) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDigProdUploadCategoryID), v))
	})
}

// DigProdUploadCategoryIDGTE applies the GTE predicate on the "dig_prod_upload_category_id" field.
func DigProdUploadCategoryIDGTE(v int) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDigProdUploadCategoryID), v))
	})
}

// DigProdUploadCategoryIDLT applies the LT predicate on the "dig_prod_upload_category_id" field.
func DigProdUploadCategoryIDLT(v int) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDigProdUploadCategoryID), v))
	})
}

// DigProdUploadCategoryIDLTE applies the LTE predicate on the "dig_prod_upload_category_id" field.
func DigProdUploadCategoryIDLTE(v int) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDigProdUploadCategoryID), v))
	})
}

// DigProdUploadCategoryIDIsNil applies the IsNil predicate on the "dig_prod_upload_category_id" field.
func DigProdUploadCategoryIDIsNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDigProdUploadCategoryID)))
	})
}

// DigProdUploadCategoryIDNotNil applies the NotNil predicate on the "dig_prod_upload_category_id" field.
func DigProdUploadCategoryIDNotNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDigProdUploadCategoryID)))
	})
}

// AutoOrderCcTryExpEQ applies the EQ predicate on the "auto_order_cc_try_exp" field.
func AutoOrderCcTryExpEQ(v AutoOrderCcTryExp) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAutoOrderCcTryExp), v))
	})
}

// AutoOrderCcTryExpNEQ applies the NEQ predicate on the "auto_order_cc_try_exp" field.
func AutoOrderCcTryExpNEQ(v AutoOrderCcTryExp) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAutoOrderCcTryExp), v))
	})
}

// AutoOrderCcTryExpIn applies the In predicate on the "auto_order_cc_try_exp" field.
func AutoOrderCcTryExpIn(vs ...AutoOrderCcTryExp) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAutoOrderCcTryExp), v...))
	})
}

// AutoOrderCcTryExpNotIn applies the NotIn predicate on the "auto_order_cc_try_exp" field.
func AutoOrderCcTryExpNotIn(vs ...AutoOrderCcTryExp) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAutoOrderCcTryExp), v...))
	})
}

// AutoOrderCcTryExpIsNil applies the IsNil predicate on the "auto_order_cc_try_exp" field.
func AutoOrderCcTryExpIsNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAutoOrderCcTryExp)))
	})
}

// AutoOrderCcTryExpNotNil applies the NotNil predicate on the "auto_order_cc_try_exp" field.
func AutoOrderCcTryExpNotNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAutoOrderCcTryExp)))
	})
}

// AutoOrderCcTryOtherCardsEQ applies the EQ predicate on the "auto_order_cc_try_other_cards" field.
func AutoOrderCcTryOtherCardsEQ(v AutoOrderCcTryOtherCards) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAutoOrderCcTryOtherCards), v))
	})
}

// AutoOrderCcTryOtherCardsNEQ applies the NEQ predicate on the "auto_order_cc_try_other_cards" field.
func AutoOrderCcTryOtherCardsNEQ(v AutoOrderCcTryOtherCards) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAutoOrderCcTryOtherCards), v))
	})
}

// AutoOrderCcTryOtherCardsIn applies the In predicate on the "auto_order_cc_try_other_cards" field.
func AutoOrderCcTryOtherCardsIn(vs ...AutoOrderCcTryOtherCards) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAutoOrderCcTryOtherCards), v...))
	})
}

// AutoOrderCcTryOtherCardsNotIn applies the NotIn predicate on the "auto_order_cc_try_other_cards" field.
func AutoOrderCcTryOtherCardsNotIn(vs ...AutoOrderCcTryOtherCards) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAutoOrderCcTryOtherCards), v...))
	})
}

// AutoOrderCcTryOtherCardsIsNil applies the IsNil predicate on the "auto_order_cc_try_other_cards" field.
func AutoOrderCcTryOtherCardsIsNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAutoOrderCcTryOtherCards)))
	})
}

// AutoOrderCcTryOtherCardsNotNil applies the NotNil predicate on the "auto_order_cc_try_other_cards" field.
func AutoOrderCcTryOtherCardsNotNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAutoOrderCcTryOtherCards)))
	})
}

// AutoOrderCcTryLaterNsfEQ applies the EQ predicate on the "auto_order_cc_try_later_nsf" field.
func AutoOrderCcTryLaterNsfEQ(v AutoOrderCcTryLaterNsf) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAutoOrderCcTryLaterNsf), v))
	})
}

// AutoOrderCcTryLaterNsfNEQ applies the NEQ predicate on the "auto_order_cc_try_later_nsf" field.
func AutoOrderCcTryLaterNsfNEQ(v AutoOrderCcTryLaterNsf) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAutoOrderCcTryLaterNsf), v))
	})
}

// AutoOrderCcTryLaterNsfIn applies the In predicate on the "auto_order_cc_try_later_nsf" field.
func AutoOrderCcTryLaterNsfIn(vs ...AutoOrderCcTryLaterNsf) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAutoOrderCcTryLaterNsf), v...))
	})
}

// AutoOrderCcTryLaterNsfNotIn applies the NotIn predicate on the "auto_order_cc_try_later_nsf" field.
func AutoOrderCcTryLaterNsfNotIn(vs ...AutoOrderCcTryLaterNsf) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAutoOrderCcTryLaterNsf), v...))
	})
}

// AutoOrderCcTryLaterNsfIsNil applies the IsNil predicate on the "auto_order_cc_try_later_nsf" field.
func AutoOrderCcTryLaterNsfIsNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAutoOrderCcTryLaterNsf)))
	})
}

// AutoOrderCcTryLaterNsfNotNil applies the NotNil predicate on the "auto_order_cc_try_later_nsf" field.
func AutoOrderCcTryLaterNsfNotNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAutoOrderCcTryLaterNsf)))
	})
}

// AutoOrderCcTryLaterMaxEQ applies the EQ predicate on the "auto_order_cc_try_later_max" field.
func AutoOrderCcTryLaterMaxEQ(v int) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAutoOrderCcTryLaterMax), v))
	})
}

// AutoOrderCcTryLaterMaxNEQ applies the NEQ predicate on the "auto_order_cc_try_later_max" field.
func AutoOrderCcTryLaterMaxNEQ(v int) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAutoOrderCcTryLaterMax), v))
	})
}

// AutoOrderCcTryLaterMaxIn applies the In predicate on the "auto_order_cc_try_later_max" field.
func AutoOrderCcTryLaterMaxIn(vs ...int) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAutoOrderCcTryLaterMax), v...))
	})
}

// AutoOrderCcTryLaterMaxNotIn applies the NotIn predicate on the "auto_order_cc_try_later_max" field.
func AutoOrderCcTryLaterMaxNotIn(vs ...int) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAutoOrderCcTryLaterMax), v...))
	})
}

// AutoOrderCcTryLaterMaxGT applies the GT predicate on the "auto_order_cc_try_later_max" field.
func AutoOrderCcTryLaterMaxGT(v int) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAutoOrderCcTryLaterMax), v))
	})
}

// AutoOrderCcTryLaterMaxGTE applies the GTE predicate on the "auto_order_cc_try_later_max" field.
func AutoOrderCcTryLaterMaxGTE(v int) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAutoOrderCcTryLaterMax), v))
	})
}

// AutoOrderCcTryLaterMaxLT applies the LT predicate on the "auto_order_cc_try_later_max" field.
func AutoOrderCcTryLaterMaxLT(v int) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAutoOrderCcTryLaterMax), v))
	})
}

// AutoOrderCcTryLaterMaxLTE applies the LTE predicate on the "auto_order_cc_try_later_max" field.
func AutoOrderCcTryLaterMaxLTE(v int) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAutoOrderCcTryLaterMax), v))
	})
}

// AutoOrderCcTryLaterMaxIsNil applies the IsNil predicate on the "auto_order_cc_try_later_max" field.
func AutoOrderCcTryLaterMaxIsNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAutoOrderCcTryLaterMax)))
	})
}

// AutoOrderCcTryLaterMaxNotNil applies the NotNil predicate on the "auto_order_cc_try_later_max" field.
func AutoOrderCcTryLaterMaxNotNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAutoOrderCcTryLaterMax)))
	})
}

// StoreCreditValidDaysEQ applies the EQ predicate on the "store_credit_valid_days" field.
func StoreCreditValidDaysEQ(v int) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStoreCreditValidDays), v))
	})
}

// StoreCreditValidDaysNEQ applies the NEQ predicate on the "store_credit_valid_days" field.
func StoreCreditValidDaysNEQ(v int) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStoreCreditValidDays), v))
	})
}

// StoreCreditValidDaysIn applies the In predicate on the "store_credit_valid_days" field.
func StoreCreditValidDaysIn(vs ...int) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStoreCreditValidDays), v...))
	})
}

// StoreCreditValidDaysNotIn applies the NotIn predicate on the "store_credit_valid_days" field.
func StoreCreditValidDaysNotIn(vs ...int) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStoreCreditValidDays), v...))
	})
}

// StoreCreditValidDaysGT applies the GT predicate on the "store_credit_valid_days" field.
func StoreCreditValidDaysGT(v int) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStoreCreditValidDays), v))
	})
}

// StoreCreditValidDaysGTE applies the GTE predicate on the "store_credit_valid_days" field.
func StoreCreditValidDaysGTE(v int) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStoreCreditValidDays), v))
	})
}

// StoreCreditValidDaysLT applies the LT predicate on the "store_credit_valid_days" field.
func StoreCreditValidDaysLT(v int) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStoreCreditValidDays), v))
	})
}

// StoreCreditValidDaysLTE applies the LTE predicate on the "store_credit_valid_days" field.
func StoreCreditValidDaysLTE(v int) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStoreCreditValidDays), v))
	})
}

// StoreCreditValidDaysIsNil applies the IsNil predicate on the "store_credit_valid_days" field.
func StoreCreditValidDaysIsNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStoreCreditValidDays)))
	})
}

// StoreCreditValidDaysNotNil applies the NotNil predicate on the "store_credit_valid_days" field.
func StoreCreditValidDaysNotNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStoreCreditValidDays)))
	})
}

// AutoApproveInvoiceEQ applies the EQ predicate on the "auto_approve_invoice" field.
func AutoApproveInvoiceEQ(v AutoApproveInvoice) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAutoApproveInvoice), v))
	})
}

// AutoApproveInvoiceNEQ applies the NEQ predicate on the "auto_approve_invoice" field.
func AutoApproveInvoiceNEQ(v AutoApproveInvoice) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAutoApproveInvoice), v))
	})
}

// AutoApproveInvoiceIn applies the In predicate on the "auto_approve_invoice" field.
func AutoApproveInvoiceIn(vs ...AutoApproveInvoice) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAutoApproveInvoice), v...))
	})
}

// AutoApproveInvoiceNotIn applies the NotIn predicate on the "auto_approve_invoice" field.
func AutoApproveInvoiceNotIn(vs ...AutoApproveInvoice) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAutoApproveInvoice), v...))
	})
}

// AutoApproveInvoiceIsNil applies the IsNil predicate on the "auto_approve_invoice" field.
func AutoApproveInvoiceIsNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAutoApproveInvoice)))
	})
}

// AutoApproveInvoiceNotNil applies the NotNil predicate on the "auto_approve_invoice" field.
func AutoApproveInvoiceNotNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAutoApproveInvoice)))
	})
}

// AutoApproveOrderEQ applies the EQ predicate on the "auto_approve_order" field.
func AutoApproveOrderEQ(v AutoApproveOrder) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAutoApproveOrder), v))
	})
}

// AutoApproveOrderNEQ applies the NEQ predicate on the "auto_approve_order" field.
func AutoApproveOrderNEQ(v AutoApproveOrder) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAutoApproveOrder), v))
	})
}

// AutoApproveOrderIn applies the In predicate on the "auto_approve_order" field.
func AutoApproveOrderIn(vs ...AutoApproveOrder) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAutoApproveOrder), v...))
	})
}

// AutoApproveOrderNotIn applies the NotIn predicate on the "auto_approve_order" field.
func AutoApproveOrderNotIn(vs ...AutoApproveOrder) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAutoApproveOrder), v...))
	})
}

// AutoApproveOrderIsNil applies the IsNil predicate on the "auto_approve_order" field.
func AutoApproveOrderIsNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAutoApproveOrder)))
	})
}

// AutoApproveOrderNotNil applies the NotNil predicate on the "auto_approve_order" field.
func AutoApproveOrderNotNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAutoApproveOrder)))
	})
}

// ShipIfCaptureFailsEQ applies the EQ predicate on the "ship_if_capture_fails" field.
func ShipIfCaptureFailsEQ(v ShipIfCaptureFails) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShipIfCaptureFails), v))
	})
}

// ShipIfCaptureFailsNEQ applies the NEQ predicate on the "ship_if_capture_fails" field.
func ShipIfCaptureFailsNEQ(v ShipIfCaptureFails) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShipIfCaptureFails), v))
	})
}

// ShipIfCaptureFailsIn applies the In predicate on the "ship_if_capture_fails" field.
func ShipIfCaptureFailsIn(vs ...ShipIfCaptureFails) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldShipIfCaptureFails), v...))
	})
}

// ShipIfCaptureFailsNotIn applies the NotIn predicate on the "ship_if_capture_fails" field.
func ShipIfCaptureFailsNotIn(vs ...ShipIfCaptureFails) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldShipIfCaptureFails), v...))
	})
}

// ShipIfCaptureFailsIsNil applies the IsNil predicate on the "ship_if_capture_fails" field.
func ShipIfCaptureFailsIsNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldShipIfCaptureFails)))
	})
}

// ShipIfCaptureFailsNotNil applies the NotNil predicate on the "ship_if_capture_fails" field.
func ShipIfCaptureFailsNotNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldShipIfCaptureFails)))
	})
}

// SetOwnerUponIssuanceEQ applies the EQ predicate on the "set_owner_upon_issuance" field.
func SetOwnerUponIssuanceEQ(v SetOwnerUponIssuance) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSetOwnerUponIssuance), v))
	})
}

// SetOwnerUponIssuanceNEQ applies the NEQ predicate on the "set_owner_upon_issuance" field.
func SetOwnerUponIssuanceNEQ(v SetOwnerUponIssuance) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSetOwnerUponIssuance), v))
	})
}

// SetOwnerUponIssuanceIn applies the In predicate on the "set_owner_upon_issuance" field.
func SetOwnerUponIssuanceIn(vs ...SetOwnerUponIssuance) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSetOwnerUponIssuance), v...))
	})
}

// SetOwnerUponIssuanceNotIn applies the NotIn predicate on the "set_owner_upon_issuance" field.
func SetOwnerUponIssuanceNotIn(vs ...SetOwnerUponIssuance) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSetOwnerUponIssuance), v...))
	})
}

// SetOwnerUponIssuanceIsNil applies the IsNil predicate on the "set_owner_upon_issuance" field.
func SetOwnerUponIssuanceIsNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSetOwnerUponIssuance)))
	})
}

// SetOwnerUponIssuanceNotNil applies the NotNil predicate on the "set_owner_upon_issuance" field.
func SetOwnerUponIssuanceNotNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSetOwnerUponIssuance)))
	})
}

// ReqReturnInventoryReceiveEQ applies the EQ predicate on the "req_return_inventory_receive" field.
func ReqReturnInventoryReceiveEQ(v ReqReturnInventoryReceive) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReqReturnInventoryReceive), v))
	})
}

// ReqReturnInventoryReceiveNEQ applies the NEQ predicate on the "req_return_inventory_receive" field.
func ReqReturnInventoryReceiveNEQ(v ReqReturnInventoryReceive) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReqReturnInventoryReceive), v))
	})
}

// ReqReturnInventoryReceiveIn applies the In predicate on the "req_return_inventory_receive" field.
func ReqReturnInventoryReceiveIn(vs ...ReqReturnInventoryReceive) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldReqReturnInventoryReceive), v...))
	})
}

// ReqReturnInventoryReceiveNotIn applies the NotIn predicate on the "req_return_inventory_receive" field.
func ReqReturnInventoryReceiveNotIn(vs ...ReqReturnInventoryReceive) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldReqReturnInventoryReceive), v...))
	})
}

// ReqReturnInventoryReceiveIsNil applies the IsNil predicate on the "req_return_inventory_receive" field.
func ReqReturnInventoryReceiveIsNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldReqReturnInventoryReceive)))
	})
}

// ReqReturnInventoryReceiveNotNil applies the NotNil predicate on the "req_return_inventory_receive" field.
func ReqReturnInventoryReceiveNotNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldReqReturnInventoryReceive)))
	})
}

// AddToCartRemoveIncompatEQ applies the EQ predicate on the "add_to_cart_remove_incompat" field.
func AddToCartRemoveIncompatEQ(v AddToCartRemoveIncompat) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAddToCartRemoveIncompat), v))
	})
}

// AddToCartRemoveIncompatNEQ applies the NEQ predicate on the "add_to_cart_remove_incompat" field.
func AddToCartRemoveIncompatNEQ(v AddToCartRemoveIncompat) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAddToCartRemoveIncompat), v))
	})
}

// AddToCartRemoveIncompatIn applies the In predicate on the "add_to_cart_remove_incompat" field.
func AddToCartRemoveIncompatIn(vs ...AddToCartRemoveIncompat) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAddToCartRemoveIncompat), v...))
	})
}

// AddToCartRemoveIncompatNotIn applies the NotIn predicate on the "add_to_cart_remove_incompat" field.
func AddToCartRemoveIncompatNotIn(vs ...AddToCartRemoveIncompat) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAddToCartRemoveIncompat), v...))
	})
}

// AddToCartRemoveIncompatIsNil applies the IsNil predicate on the "add_to_cart_remove_incompat" field.
func AddToCartRemoveIncompatIsNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAddToCartRemoveIncompat)))
	})
}

// AddToCartRemoveIncompatNotNil applies the NotNil predicate on the "add_to_cart_remove_incompat" field.
func AddToCartRemoveIncompatNotNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAddToCartRemoveIncompat)))
	})
}

// AddToCartReplaceUpsellEQ applies the EQ predicate on the "add_to_cart_replace_upsell" field.
func AddToCartReplaceUpsellEQ(v AddToCartReplaceUpsell) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAddToCartReplaceUpsell), v))
	})
}

// AddToCartReplaceUpsellNEQ applies the NEQ predicate on the "add_to_cart_replace_upsell" field.
func AddToCartReplaceUpsellNEQ(v AddToCartReplaceUpsell) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAddToCartReplaceUpsell), v))
	})
}

// AddToCartReplaceUpsellIn applies the In predicate on the "add_to_cart_replace_upsell" field.
func AddToCartReplaceUpsellIn(vs ...AddToCartReplaceUpsell) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAddToCartReplaceUpsell), v...))
	})
}

// AddToCartReplaceUpsellNotIn applies the NotIn predicate on the "add_to_cart_replace_upsell" field.
func AddToCartReplaceUpsellNotIn(vs ...AddToCartReplaceUpsell) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAddToCartReplaceUpsell), v...))
	})
}

// AddToCartReplaceUpsellIsNil applies the IsNil predicate on the "add_to_cart_replace_upsell" field.
func AddToCartReplaceUpsellIsNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAddToCartReplaceUpsell)))
	})
}

// AddToCartReplaceUpsellNotNil applies the NotNil predicate on the "add_to_cart_replace_upsell" field.
func AddToCartReplaceUpsellNotNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAddToCartReplaceUpsell)))
	})
}

// SplitPayPrefPerShpGrpEQ applies the EQ predicate on the "split_pay_pref_per_shp_grp" field.
func SplitPayPrefPerShpGrpEQ(v SplitPayPrefPerShpGrp) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSplitPayPrefPerShpGrp), v))
	})
}

// SplitPayPrefPerShpGrpNEQ applies the NEQ predicate on the "split_pay_pref_per_shp_grp" field.
func SplitPayPrefPerShpGrpNEQ(v SplitPayPrefPerShpGrp) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSplitPayPrefPerShpGrp), v))
	})
}

// SplitPayPrefPerShpGrpIn applies the In predicate on the "split_pay_pref_per_shp_grp" field.
func SplitPayPrefPerShpGrpIn(vs ...SplitPayPrefPerShpGrp) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSplitPayPrefPerShpGrp), v...))
	})
}

// SplitPayPrefPerShpGrpNotIn applies the NotIn predicate on the "split_pay_pref_per_shp_grp" field.
func SplitPayPrefPerShpGrpNotIn(vs ...SplitPayPrefPerShpGrp) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSplitPayPrefPerShpGrp), v...))
	})
}

// SplitPayPrefPerShpGrpIsNil applies the IsNil predicate on the "split_pay_pref_per_shp_grp" field.
func SplitPayPrefPerShpGrpIsNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSplitPayPrefPerShpGrp)))
	})
}

// SplitPayPrefPerShpGrpNotNil applies the NotNil predicate on the "split_pay_pref_per_shp_grp" field.
func SplitPayPrefPerShpGrpNotNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSplitPayPrefPerShpGrp)))
	})
}

// ManagedByLotEQ applies the EQ predicate on the "managed_by_lot" field.
func ManagedByLotEQ(v ManagedByLot) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldManagedByLot), v))
	})
}

// ManagedByLotNEQ applies the NEQ predicate on the "managed_by_lot" field.
func ManagedByLotNEQ(v ManagedByLot) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldManagedByLot), v))
	})
}

// ManagedByLotIn applies the In predicate on the "managed_by_lot" field.
func ManagedByLotIn(vs ...ManagedByLot) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldManagedByLot), v...))
	})
}

// ManagedByLotNotIn applies the NotIn predicate on the "managed_by_lot" field.
func ManagedByLotNotIn(vs ...ManagedByLot) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldManagedByLot), v...))
	})
}

// ManagedByLotIsNil applies the IsNil predicate on the "managed_by_lot" field.
func ManagedByLotIsNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldManagedByLot)))
	})
}

// ManagedByLotNotNil applies the NotNil predicate on the "managed_by_lot" field.
func ManagedByLotNotNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldManagedByLot)))
	})
}

// ShowOutOfStockProductsEQ applies the EQ predicate on the "show_out_of_stock_products" field.
func ShowOutOfStockProductsEQ(v ShowOutOfStockProducts) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShowOutOfStockProducts), v))
	})
}

// ShowOutOfStockProductsNEQ applies the NEQ predicate on the "show_out_of_stock_products" field.
func ShowOutOfStockProductsNEQ(v ShowOutOfStockProducts) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShowOutOfStockProducts), v))
	})
}

// ShowOutOfStockProductsIn applies the In predicate on the "show_out_of_stock_products" field.
func ShowOutOfStockProductsIn(vs ...ShowOutOfStockProducts) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldShowOutOfStockProducts), v...))
	})
}

// ShowOutOfStockProductsNotIn applies the NotIn predicate on the "show_out_of_stock_products" field.
func ShowOutOfStockProductsNotIn(vs ...ShowOutOfStockProducts) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldShowOutOfStockProducts), v...))
	})
}

// ShowOutOfStockProductsIsNil applies the IsNil predicate on the "show_out_of_stock_products" field.
func ShowOutOfStockProductsIsNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldShowOutOfStockProducts)))
	})
}

// ShowOutOfStockProductsNotNil applies the NotNil predicate on the "show_out_of_stock_products" field.
func ShowOutOfStockProductsNotNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldShowOutOfStockProducts)))
	})
}

// OrderDecimalQuantityEQ applies the EQ predicate on the "order_decimal_quantity" field.
func OrderDecimalQuantityEQ(v OrderDecimalQuantity) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderDecimalQuantity), v))
	})
}

// OrderDecimalQuantityNEQ applies the NEQ predicate on the "order_decimal_quantity" field.
func OrderDecimalQuantityNEQ(v OrderDecimalQuantity) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOrderDecimalQuantity), v))
	})
}

// OrderDecimalQuantityIn applies the In predicate on the "order_decimal_quantity" field.
func OrderDecimalQuantityIn(vs ...OrderDecimalQuantity) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOrderDecimalQuantity), v...))
	})
}

// OrderDecimalQuantityNotIn applies the NotIn predicate on the "order_decimal_quantity" field.
func OrderDecimalQuantityNotIn(vs ...OrderDecimalQuantity) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOrderDecimalQuantity), v...))
	})
}

// OrderDecimalQuantityIsNil applies the IsNil predicate on the "order_decimal_quantity" field.
func OrderDecimalQuantityIsNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOrderDecimalQuantity)))
	})
}

// OrderDecimalQuantityNotNil applies the NotNil predicate on the "order_decimal_quantity" field.
func OrderDecimalQuantityNotNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOrderDecimalQuantity)))
	})
}

// AllowCommentEQ applies the EQ predicate on the "allow_comment" field.
func AllowCommentEQ(v AllowComment) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAllowComment), v))
	})
}

// AllowCommentNEQ applies the NEQ predicate on the "allow_comment" field.
func AllowCommentNEQ(v AllowComment) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAllowComment), v))
	})
}

// AllowCommentIn applies the In predicate on the "allow_comment" field.
func AllowCommentIn(vs ...AllowComment) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAllowComment), v...))
	})
}

// AllowCommentNotIn applies the NotIn predicate on the "allow_comment" field.
func AllowCommentNotIn(vs ...AllowComment) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAllowComment), v...))
	})
}

// AllowCommentIsNil applies the IsNil predicate on the "allow_comment" field.
func AllowCommentIsNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAllowComment)))
	})
}

// AllowCommentNotNil applies the NotNil predicate on the "allow_comment" field.
func AllowCommentNotNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAllowComment)))
	})
}

// AllocateInventoryEQ applies the EQ predicate on the "allocate_inventory" field.
func AllocateInventoryEQ(v AllocateInventory) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAllocateInventory), v))
	})
}

// AllocateInventoryNEQ applies the NEQ predicate on the "allocate_inventory" field.
func AllocateInventoryNEQ(v AllocateInventory) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAllocateInventory), v))
	})
}

// AllocateInventoryIn applies the In predicate on the "allocate_inventory" field.
func AllocateInventoryIn(vs ...AllocateInventory) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAllocateInventory), v...))
	})
}

// AllocateInventoryNotIn applies the NotIn predicate on the "allocate_inventory" field.
func AllocateInventoryNotIn(vs ...AllocateInventory) predicate.ProductStore {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProductStore(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAllocateInventory), v...))
	})
}

// AllocateInventoryIsNil applies the IsNil predicate on the "allocate_inventory" field.
func AllocateInventoryIsNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAllocateInventory)))
	})
}

// AllocateInventoryNotNil applies the NotNil predicate on the "allocate_inventory" field.
func AllocateInventoryNotNil() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAllocateInventory)))
	})
}

// HasPrimaryProductStoreGroup applies the HasEdge predicate on the "primary_product_store_group" edge.
func HasPrimaryProductStoreGroup() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PrimaryProductStoreGroupTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PrimaryProductStoreGroupTable, PrimaryProductStoreGroupColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPrimaryProductStoreGroupWith applies the HasEdge predicate on the "primary_product_store_group" edge with a given conditions (other predicates).
func HasPrimaryProductStoreGroupWith(preds ...predicate.ProductStoreGroup) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PrimaryProductStoreGroupInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PrimaryProductStoreGroupTable, PrimaryProductStoreGroupColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasReserveOrderEnumeration applies the HasEdge predicate on the "reserve_order_enumeration" edge.
func HasReserveOrderEnumeration() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ReserveOrderEnumerationTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ReserveOrderEnumerationTable, ReserveOrderEnumerationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReserveOrderEnumerationWith applies the HasEdge predicate on the "reserve_order_enumeration" edge with a given conditions (other predicates).
func HasReserveOrderEnumerationWith(preds ...predicate.Enumeration) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ReserveOrderEnumerationInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ReserveOrderEnumerationTable, ReserveOrderEnumerationColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRequirementMethodEnumeration applies the HasEdge predicate on the "requirement_method_enumeration" edge.
func HasRequirementMethodEnumeration() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RequirementMethodEnumerationTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RequirementMethodEnumerationTable, RequirementMethodEnumerationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRequirementMethodEnumerationWith applies the HasEdge predicate on the "requirement_method_enumeration" edge with a given conditions (other predicates).
func HasRequirementMethodEnumerationWith(preds ...predicate.Enumeration) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RequirementMethodEnumerationInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RequirementMethodEnumerationTable, RequirementMethodEnumerationColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDefaultSalesChannelEnumeration applies the HasEdge predicate on the "default_sales_channel_enumeration" edge.
func HasDefaultSalesChannelEnumeration() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DefaultSalesChannelEnumerationTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DefaultSalesChannelEnumerationTable, DefaultSalesChannelEnumerationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDefaultSalesChannelEnumerationWith applies the HasEdge predicate on the "default_sales_channel_enumeration" edge with a given conditions (other predicates).
func HasDefaultSalesChannelEnumerationWith(preds ...predicate.Enumeration) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DefaultSalesChannelEnumerationInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DefaultSalesChannelEnumerationTable, DefaultSalesChannelEnumerationColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasHeaderApprovedStatusItem applies the HasEdge predicate on the "header_approved_status_item" edge.
func HasHeaderApprovedStatusItem() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(HeaderApprovedStatusItemTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, HeaderApprovedStatusItemTable, HeaderApprovedStatusItemColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHeaderApprovedStatusItemWith applies the HasEdge predicate on the "header_approved_status_item" edge with a given conditions (other predicates).
func HasHeaderApprovedStatusItemWith(preds ...predicate.StatusItem) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(HeaderApprovedStatusItemInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, HeaderApprovedStatusItemTable, HeaderApprovedStatusItemColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasItemApprovedStatusItem applies the HasEdge predicate on the "item_approved_status_item" edge.
func HasItemApprovedStatusItem() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ItemApprovedStatusItemTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ItemApprovedStatusItemTable, ItemApprovedStatusItemColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasItemApprovedStatusItemWith applies the HasEdge predicate on the "item_approved_status_item" edge with a given conditions (other predicates).
func HasItemApprovedStatusItemWith(preds ...predicate.StatusItem) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ItemApprovedStatusItemInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ItemApprovedStatusItemTable, ItemApprovedStatusItemColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDigitalItemApprovedStatusItem applies the HasEdge predicate on the "digital_item_approved_status_item" edge.
func HasDigitalItemApprovedStatusItem() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DigitalItemApprovedStatusItemTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DigitalItemApprovedStatusItemTable, DigitalItemApprovedStatusItemColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDigitalItemApprovedStatusItemWith applies the HasEdge predicate on the "digital_item_approved_status_item" edge with a given conditions (other predicates).
func HasDigitalItemApprovedStatusItemWith(preds ...predicate.StatusItem) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DigitalItemApprovedStatusItemInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DigitalItemApprovedStatusItemTable, DigitalItemApprovedStatusItemColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasHeaderDeclinedStatusItem applies the HasEdge predicate on the "header_declined_status_item" edge.
func HasHeaderDeclinedStatusItem() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(HeaderDeclinedStatusItemTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, HeaderDeclinedStatusItemTable, HeaderDeclinedStatusItemColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHeaderDeclinedStatusItemWith applies the HasEdge predicate on the "header_declined_status_item" edge with a given conditions (other predicates).
func HasHeaderDeclinedStatusItemWith(preds ...predicate.StatusItem) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(HeaderDeclinedStatusItemInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, HeaderDeclinedStatusItemTable, HeaderDeclinedStatusItemColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasItemDeclinedStatusItem applies the HasEdge predicate on the "item_declined_status_item" edge.
func HasItemDeclinedStatusItem() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ItemDeclinedStatusItemTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ItemDeclinedStatusItemTable, ItemDeclinedStatusItemColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasItemDeclinedStatusItemWith applies the HasEdge predicate on the "item_declined_status_item" edge with a given conditions (other predicates).
func HasItemDeclinedStatusItemWith(preds ...predicate.StatusItem) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ItemDeclinedStatusItemInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ItemDeclinedStatusItemTable, ItemDeclinedStatusItemColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasHeaderCancelStatusItem applies the HasEdge predicate on the "header_cancel_status_item" edge.
func HasHeaderCancelStatusItem() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(HeaderCancelStatusItemTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, HeaderCancelStatusItemTable, HeaderCancelStatusItemColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHeaderCancelStatusItemWith applies the HasEdge predicate on the "header_cancel_status_item" edge with a given conditions (other predicates).
func HasHeaderCancelStatusItemWith(preds ...predicate.StatusItem) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(HeaderCancelStatusItemInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, HeaderCancelStatusItemTable, HeaderCancelStatusItemColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasItemCancelStatusItem applies the HasEdge predicate on the "item_cancel_status_item" edge.
func HasItemCancelStatusItem() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ItemCancelStatusItemTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ItemCancelStatusItemTable, ItemCancelStatusItemColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasItemCancelStatusItemWith applies the HasEdge predicate on the "item_cancel_status_item" edge with a given conditions (other predicates).
func HasItemCancelStatusItemWith(preds ...predicate.StatusItem) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ItemCancelStatusItemInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ItemCancelStatusItemTable, ItemCancelStatusItemColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasStoreCreditAccountEnumeration applies the HasEdge predicate on the "store_credit_account_enumeration" edge.
func HasStoreCreditAccountEnumeration() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StoreCreditAccountEnumerationTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, StoreCreditAccountEnumerationTable, StoreCreditAccountEnumerationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStoreCreditAccountEnumerationWith applies the HasEdge predicate on the "store_credit_account_enumeration" edge with a given conditions (other predicates).
func HasStoreCreditAccountEnumerationWith(preds ...predicate.Enumeration) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StoreCreditAccountEnumerationInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, StoreCreditAccountEnumerationTable, StoreCreditAccountEnumerationColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrderHeaders applies the HasEdge predicate on the "order_headers" edge.
func HasOrderHeaders() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderHeadersTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrderHeadersTable, OrderHeadersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderHeadersWith applies the HasEdge predicate on the "order_headers" edge with a given conditions (other predicates).
func HasOrderHeadersWith(preds ...predicate.OrderHeader) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderHeadersInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrderHeadersTable, OrderHeadersColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProductReviews applies the HasEdge predicate on the "product_reviews" edge.
func HasProductReviews() predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProductReviewsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ProductReviewsTable, ProductReviewsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProductReviewsWith applies the HasEdge predicate on the "product_reviews" edge with a given conditions (other predicates).
func HasProductReviewsWith(preds ...predicate.ProductReview) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProductReviewsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ProductReviewsTable, ProductReviewsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ProductStore) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ProductStore) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ProductStore) predicate.ProductStore {
	return predicate.ProductStore(func(s *sql.Selector) {
		p(s.Not())
	})
}
