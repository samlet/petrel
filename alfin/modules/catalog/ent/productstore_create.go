// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/enumeration"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/orderheader"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productreview"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productstore"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productstoregroup"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/statusitem"
)

// ProductStoreCreate is the builder for creating a ProductStore entity.
type ProductStoreCreate struct {
	config
	mutation *ProductStoreMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (psc *ProductStoreCreate) SetCreateTime(t time.Time) *ProductStoreCreate {
	psc.mutation.SetCreateTime(t)
	return psc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (psc *ProductStoreCreate) SetNillableCreateTime(t *time.Time) *ProductStoreCreate {
	if t != nil {
		psc.SetCreateTime(*t)
	}
	return psc
}

// SetUpdateTime sets the "update_time" field.
func (psc *ProductStoreCreate) SetUpdateTime(t time.Time) *ProductStoreCreate {
	psc.mutation.SetUpdateTime(t)
	return psc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (psc *ProductStoreCreate) SetNillableUpdateTime(t *time.Time) *ProductStoreCreate {
	if t != nil {
		psc.SetUpdateTime(*t)
	}
	return psc
}

// SetStringRef sets the "string_ref" field.
func (psc *ProductStoreCreate) SetStringRef(s string) *ProductStoreCreate {
	psc.mutation.SetStringRef(s)
	return psc
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (psc *ProductStoreCreate) SetNillableStringRef(s *string) *ProductStoreCreate {
	if s != nil {
		psc.SetStringRef(*s)
	}
	return psc
}

// SetStoreName sets the "store_name" field.
func (psc *ProductStoreCreate) SetStoreName(s string) *ProductStoreCreate {
	psc.mutation.SetStoreName(s)
	return psc
}

// SetNillableStoreName sets the "store_name" field if the given value is not nil.
func (psc *ProductStoreCreate) SetNillableStoreName(s *string) *ProductStoreCreate {
	if s != nil {
		psc.SetStoreName(*s)
	}
	return psc
}

// SetCompanyName sets the "company_name" field.
func (psc *ProductStoreCreate) SetCompanyName(s string) *ProductStoreCreate {
	psc.mutation.SetCompanyName(s)
	return psc
}

// SetNillableCompanyName sets the "company_name" field if the given value is not nil.
func (psc *ProductStoreCreate) SetNillableCompanyName(s *string) *ProductStoreCreate {
	if s != nil {
		psc.SetCompanyName(*s)
	}
	return psc
}

// SetTitle sets the "title" field.
func (psc *ProductStoreCreate) SetTitle(s string) *ProductStoreCreate {
	psc.mutation.SetTitle(s)
	return psc
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (psc *ProductStoreCreate) SetNillableTitle(s *string) *ProductStoreCreate {
	if s != nil {
		psc.SetTitle(*s)
	}
	return psc
}

// SetSubtitle sets the "subtitle" field.
func (psc *ProductStoreCreate) SetSubtitle(s string) *ProductStoreCreate {
	psc.mutation.SetSubtitle(s)
	return psc
}

// SetNillableSubtitle sets the "subtitle" field if the given value is not nil.
func (psc *ProductStoreCreate) SetNillableSubtitle(s *string) *ProductStoreCreate {
	if s != nil {
		psc.SetSubtitle(*s)
	}
	return psc
}

// SetPayToPartyID sets the "pay_to_party_id" field.
func (psc *ProductStoreCreate) SetPayToPartyID(i int) *ProductStoreCreate {
	psc.mutation.SetPayToPartyID(i)
	return psc
}

// SetNillablePayToPartyID sets the "pay_to_party_id" field if the given value is not nil.
func (psc *ProductStoreCreate) SetNillablePayToPartyID(i *int) *ProductStoreCreate {
	if i != nil {
		psc.SetPayToPartyID(*i)
	}
	return psc
}

// SetDaysToCancelNonPay sets the "days_to_cancel_non_pay" field.
func (psc *ProductStoreCreate) SetDaysToCancelNonPay(i int) *ProductStoreCreate {
	psc.mutation.SetDaysToCancelNonPay(i)
	return psc
}

// SetNillableDaysToCancelNonPay sets the "days_to_cancel_non_pay" field if the given value is not nil.
func (psc *ProductStoreCreate) SetNillableDaysToCancelNonPay(i *int) *ProductStoreCreate {
	if i != nil {
		psc.SetDaysToCancelNonPay(*i)
	}
	return psc
}

// SetManualAuthIsCapture sets the "manual_auth_is_capture" field.
func (psc *ProductStoreCreate) SetManualAuthIsCapture(paic productstore.ManualAuthIsCapture) *ProductStoreCreate {
	psc.mutation.SetManualAuthIsCapture(paic)
	return psc
}

// SetNillableManualAuthIsCapture sets the "manual_auth_is_capture" field if the given value is not nil.
func (psc *ProductStoreCreate) SetNillableManualAuthIsCapture(paic *productstore.ManualAuthIsCapture) *ProductStoreCreate {
	if paic != nil {
		psc.SetManualAuthIsCapture(*paic)
	}
	return psc
}

// SetProrateShipping sets the "prorate_shipping" field.
func (psc *ProductStoreCreate) SetProrateShipping(ps productstore.ProrateShipping) *ProductStoreCreate {
	psc.mutation.SetProrateShipping(ps)
	return psc
}

// SetNillableProrateShipping sets the "prorate_shipping" field if the given value is not nil.
func (psc *ProductStoreCreate) SetNillableProrateShipping(ps *productstore.ProrateShipping) *ProductStoreCreate {
	if ps != nil {
		psc.SetProrateShipping(*ps)
	}
	return psc
}

// SetProrateTaxes sets the "prorate_taxes" field.
func (psc *ProductStoreCreate) SetProrateTaxes(pt productstore.ProrateTaxes) *ProductStoreCreate {
	psc.mutation.SetProrateTaxes(pt)
	return psc
}

// SetNillableProrateTaxes sets the "prorate_taxes" field if the given value is not nil.
func (psc *ProductStoreCreate) SetNillableProrateTaxes(pt *productstore.ProrateTaxes) *ProductStoreCreate {
	if pt != nil {
		psc.SetProrateTaxes(*pt)
	}
	return psc
}

// SetViewCartOnAdd sets the "view_cart_on_add" field.
func (psc *ProductStoreCreate) SetViewCartOnAdd(pcoa productstore.ViewCartOnAdd) *ProductStoreCreate {
	psc.mutation.SetViewCartOnAdd(pcoa)
	return psc
}

// SetNillableViewCartOnAdd sets the "view_cart_on_add" field if the given value is not nil.
func (psc *ProductStoreCreate) SetNillableViewCartOnAdd(pcoa *productstore.ViewCartOnAdd) *ProductStoreCreate {
	if pcoa != nil {
		psc.SetViewCartOnAdd(*pcoa)
	}
	return psc
}

// SetAutoSaveCart sets the "auto_save_cart" field.
func (psc *ProductStoreCreate) SetAutoSaveCart(value productstore.AutoSaveCart) *ProductStoreCreate {
	psc.mutation.SetAutoSaveCart(value)
	return psc
}

// SetNillableAutoSaveCart sets the "auto_save_cart" field if the given value is not nil.
func (psc *ProductStoreCreate) SetNillableAutoSaveCart(value *productstore.AutoSaveCart) *ProductStoreCreate {
	if value != nil {
		psc.SetAutoSaveCart(*value)
	}
	return psc
}

// SetAutoApproveReviews sets the "auto_approve_reviews" field.
func (psc *ProductStoreCreate) SetAutoApproveReviews(par productstore.AutoApproveReviews) *ProductStoreCreate {
	psc.mutation.SetAutoApproveReviews(par)
	return psc
}

// SetNillableAutoApproveReviews sets the "auto_approve_reviews" field if the given value is not nil.
func (psc *ProductStoreCreate) SetNillableAutoApproveReviews(par *productstore.AutoApproveReviews) *ProductStoreCreate {
	if par != nil {
		psc.SetAutoApproveReviews(*par)
	}
	return psc
}

// SetIsDemoStore sets the "is_demo_store" field.
func (psc *ProductStoreCreate) SetIsDemoStore(pds productstore.IsDemoStore) *ProductStoreCreate {
	psc.mutation.SetIsDemoStore(pds)
	return psc
}

// SetNillableIsDemoStore sets the "is_demo_store" field if the given value is not nil.
func (psc *ProductStoreCreate) SetNillableIsDemoStore(pds *productstore.IsDemoStore) *ProductStoreCreate {
	if pds != nil {
		psc.SetIsDemoStore(*pds)
	}
	return psc
}

// SetIsImmediatelyFulfilled sets the "is_immediately_fulfilled" field.
func (psc *ProductStoreCreate) SetIsImmediatelyFulfilled(pif productstore.IsImmediatelyFulfilled) *ProductStoreCreate {
	psc.mutation.SetIsImmediatelyFulfilled(pif)
	return psc
}

// SetNillableIsImmediatelyFulfilled sets the "is_immediately_fulfilled" field if the given value is not nil.
func (psc *ProductStoreCreate) SetNillableIsImmediatelyFulfilled(pif *productstore.IsImmediatelyFulfilled) *ProductStoreCreate {
	if pif != nil {
		psc.SetIsImmediatelyFulfilled(*pif)
	}
	return psc
}

// SetInventoryFacilityID sets the "inventory_facility_id" field.
func (psc *ProductStoreCreate) SetInventoryFacilityID(i int) *ProductStoreCreate {
	psc.mutation.SetInventoryFacilityID(i)
	return psc
}

// SetNillableInventoryFacilityID sets the "inventory_facility_id" field if the given value is not nil.
func (psc *ProductStoreCreate) SetNillableInventoryFacilityID(i *int) *ProductStoreCreate {
	if i != nil {
		psc.SetInventoryFacilityID(*i)
	}
	return psc
}

// SetOneInventoryFacility sets the "one_inventory_facility" field.
func (psc *ProductStoreCreate) SetOneInventoryFacility(pif productstore.OneInventoryFacility) *ProductStoreCreate {
	psc.mutation.SetOneInventoryFacility(pif)
	return psc
}

// SetNillableOneInventoryFacility sets the "one_inventory_facility" field if the given value is not nil.
func (psc *ProductStoreCreate) SetNillableOneInventoryFacility(pif *productstore.OneInventoryFacility) *ProductStoreCreate {
	if pif != nil {
		psc.SetOneInventoryFacility(*pif)
	}
	return psc
}

// SetCheckInventory sets the "check_inventory" field.
func (psc *ProductStoreCreate) SetCheckInventory(pi productstore.CheckInventory) *ProductStoreCreate {
	psc.mutation.SetCheckInventory(pi)
	return psc
}

// SetNillableCheckInventory sets the "check_inventory" field if the given value is not nil.
func (psc *ProductStoreCreate) SetNillableCheckInventory(pi *productstore.CheckInventory) *ProductStoreCreate {
	if pi != nil {
		psc.SetCheckInventory(*pi)
	}
	return psc
}

// SetReserveInventory sets the "reserve_inventory" field.
func (psc *ProductStoreCreate) SetReserveInventory(pi productstore.ReserveInventory) *ProductStoreCreate {
	psc.mutation.SetReserveInventory(pi)
	return psc
}

// SetNillableReserveInventory sets the "reserve_inventory" field if the given value is not nil.
func (psc *ProductStoreCreate) SetNillableReserveInventory(pi *productstore.ReserveInventory) *ProductStoreCreate {
	if pi != nil {
		psc.SetReserveInventory(*pi)
	}
	return psc
}

// SetRequireInventory sets the "require_inventory" field.
func (psc *ProductStoreCreate) SetRequireInventory(pi productstore.RequireInventory) *ProductStoreCreate {
	psc.mutation.SetRequireInventory(pi)
	return psc
}

// SetNillableRequireInventory sets the "require_inventory" field if the given value is not nil.
func (psc *ProductStoreCreate) SetNillableRequireInventory(pi *productstore.RequireInventory) *ProductStoreCreate {
	if pi != nil {
		psc.SetRequireInventory(*pi)
	}
	return psc
}

// SetBalanceResOnOrderCreation sets the "balance_res_on_order_creation" field.
func (psc *ProductStoreCreate) SetBalanceResOnOrderCreation(prooc productstore.BalanceResOnOrderCreation) *ProductStoreCreate {
	psc.mutation.SetBalanceResOnOrderCreation(prooc)
	return psc
}

// SetNillableBalanceResOnOrderCreation sets the "balance_res_on_order_creation" field if the given value is not nil.
func (psc *ProductStoreCreate) SetNillableBalanceResOnOrderCreation(prooc *productstore.BalanceResOnOrderCreation) *ProductStoreCreate {
	if prooc != nil {
		psc.SetBalanceResOnOrderCreation(*prooc)
	}
	return psc
}

// SetOrderNumberPrefix sets the "order_number_prefix" field.
func (psc *ProductStoreCreate) SetOrderNumberPrefix(s string) *ProductStoreCreate {
	psc.mutation.SetOrderNumberPrefix(s)
	return psc
}

// SetNillableOrderNumberPrefix sets the "order_number_prefix" field if the given value is not nil.
func (psc *ProductStoreCreate) SetNillableOrderNumberPrefix(s *string) *ProductStoreCreate {
	if s != nil {
		psc.SetOrderNumberPrefix(*s)
	}
	return psc
}

// SetDefaultLocaleString sets the "default_locale_string" field.
func (psc *ProductStoreCreate) SetDefaultLocaleString(s string) *ProductStoreCreate {
	psc.mutation.SetDefaultLocaleString(s)
	return psc
}

// SetNillableDefaultLocaleString sets the "default_locale_string" field if the given value is not nil.
func (psc *ProductStoreCreate) SetNillableDefaultLocaleString(s *string) *ProductStoreCreate {
	if s != nil {
		psc.SetDefaultLocaleString(*s)
	}
	return psc
}

// SetDefaultCurrencyUomID sets the "default_currency_uom_id" field.
func (psc *ProductStoreCreate) SetDefaultCurrencyUomID(i int) *ProductStoreCreate {
	psc.mutation.SetDefaultCurrencyUomID(i)
	return psc
}

// SetNillableDefaultCurrencyUomID sets the "default_currency_uom_id" field if the given value is not nil.
func (psc *ProductStoreCreate) SetNillableDefaultCurrencyUomID(i *int) *ProductStoreCreate {
	if i != nil {
		psc.SetDefaultCurrencyUomID(*i)
	}
	return psc
}

// SetDefaultTimeZoneString sets the "default_time_zone_string" field.
func (psc *ProductStoreCreate) SetDefaultTimeZoneString(s string) *ProductStoreCreate {
	psc.mutation.SetDefaultTimeZoneString(s)
	return psc
}

// SetNillableDefaultTimeZoneString sets the "default_time_zone_string" field if the given value is not nil.
func (psc *ProductStoreCreate) SetNillableDefaultTimeZoneString(s *string) *ProductStoreCreate {
	if s != nil {
		psc.SetDefaultTimeZoneString(*s)
	}
	return psc
}

// SetAllowPassword sets the "allow_password" field.
func (psc *ProductStoreCreate) SetAllowPassword(pp productstore.AllowPassword) *ProductStoreCreate {
	psc.mutation.SetAllowPassword(pp)
	return psc
}

// SetNillableAllowPassword sets the "allow_password" field if the given value is not nil.
func (psc *ProductStoreCreate) SetNillableAllowPassword(pp *productstore.AllowPassword) *ProductStoreCreate {
	if pp != nil {
		psc.SetAllowPassword(*pp)
	}
	return psc
}

// SetDefaultPassword sets the "default_password" field.
func (psc *ProductStoreCreate) SetDefaultPassword(s string) *ProductStoreCreate {
	psc.mutation.SetDefaultPassword(s)
	return psc
}

// SetNillableDefaultPassword sets the "default_password" field if the given value is not nil.
func (psc *ProductStoreCreate) SetNillableDefaultPassword(s *string) *ProductStoreCreate {
	if s != nil {
		psc.SetDefaultPassword(*s)
	}
	return psc
}

// SetExplodeOrderItems sets the "explode_order_items" field.
func (psc *ProductStoreCreate) SetExplodeOrderItems(poi productstore.ExplodeOrderItems) *ProductStoreCreate {
	psc.mutation.SetExplodeOrderItems(poi)
	return psc
}

// SetNillableExplodeOrderItems sets the "explode_order_items" field if the given value is not nil.
func (psc *ProductStoreCreate) SetNillableExplodeOrderItems(poi *productstore.ExplodeOrderItems) *ProductStoreCreate {
	if poi != nil {
		psc.SetExplodeOrderItems(*poi)
	}
	return psc
}

// SetCheckGcBalance sets the "check_gc_balance" field.
func (psc *ProductStoreCreate) SetCheckGcBalance(pgb productstore.CheckGcBalance) *ProductStoreCreate {
	psc.mutation.SetCheckGcBalance(pgb)
	return psc
}

// SetNillableCheckGcBalance sets the "check_gc_balance" field if the given value is not nil.
func (psc *ProductStoreCreate) SetNillableCheckGcBalance(pgb *productstore.CheckGcBalance) *ProductStoreCreate {
	if pgb != nil {
		psc.SetCheckGcBalance(*pgb)
	}
	return psc
}

// SetRetryFailedAuths sets the "retry_failed_auths" field.
func (psc *ProductStoreCreate) SetRetryFailedAuths(pfa productstore.RetryFailedAuths) *ProductStoreCreate {
	psc.mutation.SetRetryFailedAuths(pfa)
	return psc
}

// SetNillableRetryFailedAuths sets the "retry_failed_auths" field if the given value is not nil.
func (psc *ProductStoreCreate) SetNillableRetryFailedAuths(pfa *productstore.RetryFailedAuths) *ProductStoreCreate {
	if pfa != nil {
		psc.SetRetryFailedAuths(*pfa)
	}
	return psc
}

// SetAuthDeclinedMessage sets the "auth_declined_message" field.
func (psc *ProductStoreCreate) SetAuthDeclinedMessage(s string) *ProductStoreCreate {
	psc.mutation.SetAuthDeclinedMessage(s)
	return psc
}

// SetNillableAuthDeclinedMessage sets the "auth_declined_message" field if the given value is not nil.
func (psc *ProductStoreCreate) SetNillableAuthDeclinedMessage(s *string) *ProductStoreCreate {
	if s != nil {
		psc.SetAuthDeclinedMessage(*s)
	}
	return psc
}

// SetAuthFraudMessage sets the "auth_fraud_message" field.
func (psc *ProductStoreCreate) SetAuthFraudMessage(s string) *ProductStoreCreate {
	psc.mutation.SetAuthFraudMessage(s)
	return psc
}

// SetNillableAuthFraudMessage sets the "auth_fraud_message" field if the given value is not nil.
func (psc *ProductStoreCreate) SetNillableAuthFraudMessage(s *string) *ProductStoreCreate {
	if s != nil {
		psc.SetAuthFraudMessage(*s)
	}
	return psc
}

// SetAuthErrorMessage sets the "auth_error_message" field.
func (psc *ProductStoreCreate) SetAuthErrorMessage(s string) *ProductStoreCreate {
	psc.mutation.SetAuthErrorMessage(s)
	return psc
}

// SetNillableAuthErrorMessage sets the "auth_error_message" field if the given value is not nil.
func (psc *ProductStoreCreate) SetNillableAuthErrorMessage(s *string) *ProductStoreCreate {
	if s != nil {
		psc.SetAuthErrorMessage(*s)
	}
	return psc
}

// SetVisualThemeID sets the "visual_theme_id" field.
func (psc *ProductStoreCreate) SetVisualThemeID(i int) *ProductStoreCreate {
	psc.mutation.SetVisualThemeID(i)
	return psc
}

// SetNillableVisualThemeID sets the "visual_theme_id" field if the given value is not nil.
func (psc *ProductStoreCreate) SetNillableVisualThemeID(i *int) *ProductStoreCreate {
	if i != nil {
		psc.SetVisualThemeID(*i)
	}
	return psc
}

// SetUsePrimaryEmailUsername sets the "use_primary_email_username" field.
func (psc *ProductStoreCreate) SetUsePrimaryEmailUsername(ppeu productstore.UsePrimaryEmailUsername) *ProductStoreCreate {
	psc.mutation.SetUsePrimaryEmailUsername(ppeu)
	return psc
}

// SetNillableUsePrimaryEmailUsername sets the "use_primary_email_username" field if the given value is not nil.
func (psc *ProductStoreCreate) SetNillableUsePrimaryEmailUsername(ppeu *productstore.UsePrimaryEmailUsername) *ProductStoreCreate {
	if ppeu != nil {
		psc.SetUsePrimaryEmailUsername(*ppeu)
	}
	return psc
}

// SetRequireCustomerRole sets the "require_customer_role" field.
func (psc *ProductStoreCreate) SetRequireCustomerRole(pcr productstore.RequireCustomerRole) *ProductStoreCreate {
	psc.mutation.SetRequireCustomerRole(pcr)
	return psc
}

// SetNillableRequireCustomerRole sets the "require_customer_role" field if the given value is not nil.
func (psc *ProductStoreCreate) SetNillableRequireCustomerRole(pcr *productstore.RequireCustomerRole) *ProductStoreCreate {
	if pcr != nil {
		psc.SetRequireCustomerRole(*pcr)
	}
	return psc
}

// SetAutoInvoiceDigitalItems sets the "auto_invoice_digital_items" field.
func (psc *ProductStoreCreate) SetAutoInvoiceDigitalItems(pidi productstore.AutoInvoiceDigitalItems) *ProductStoreCreate {
	psc.mutation.SetAutoInvoiceDigitalItems(pidi)
	return psc
}

// SetNillableAutoInvoiceDigitalItems sets the "auto_invoice_digital_items" field if the given value is not nil.
func (psc *ProductStoreCreate) SetNillableAutoInvoiceDigitalItems(pidi *productstore.AutoInvoiceDigitalItems) *ProductStoreCreate {
	if pidi != nil {
		psc.SetAutoInvoiceDigitalItems(*pidi)
	}
	return psc
}

// SetReqShipAddrForDigItems sets the "req_ship_addr_for_dig_items" field.
func (psc *ProductStoreCreate) SetReqShipAddrForDigItems(psafdi productstore.ReqShipAddrForDigItems) *ProductStoreCreate {
	psc.mutation.SetReqShipAddrForDigItems(psafdi)
	return psc
}

// SetNillableReqShipAddrForDigItems sets the "req_ship_addr_for_dig_items" field if the given value is not nil.
func (psc *ProductStoreCreate) SetNillableReqShipAddrForDigItems(psafdi *productstore.ReqShipAddrForDigItems) *ProductStoreCreate {
	if psafdi != nil {
		psc.SetReqShipAddrForDigItems(*psafdi)
	}
	return psc
}

// SetShowCheckoutGiftOptions sets the "show_checkout_gift_options" field.
func (psc *ProductStoreCreate) SetShowCheckoutGiftOptions(pcgo productstore.ShowCheckoutGiftOptions) *ProductStoreCreate {
	psc.mutation.SetShowCheckoutGiftOptions(pcgo)
	return psc
}

// SetNillableShowCheckoutGiftOptions sets the "show_checkout_gift_options" field if the given value is not nil.
func (psc *ProductStoreCreate) SetNillableShowCheckoutGiftOptions(pcgo *productstore.ShowCheckoutGiftOptions) *ProductStoreCreate {
	if pcgo != nil {
		psc.SetShowCheckoutGiftOptions(*pcgo)
	}
	return psc
}

// SetSelectPaymentTypePerItem sets the "select_payment_type_per_item" field.
func (psc *ProductStoreCreate) SetSelectPaymentTypePerItem(pptpi productstore.SelectPaymentTypePerItem) *ProductStoreCreate {
	psc.mutation.SetSelectPaymentTypePerItem(pptpi)
	return psc
}

// SetNillableSelectPaymentTypePerItem sets the "select_payment_type_per_item" field if the given value is not nil.
func (psc *ProductStoreCreate) SetNillableSelectPaymentTypePerItem(pptpi *productstore.SelectPaymentTypePerItem) *ProductStoreCreate {
	if pptpi != nil {
		psc.SetSelectPaymentTypePerItem(*pptpi)
	}
	return psc
}

// SetShowPricesWithVatTax sets the "show_prices_with_vat_tax" field.
func (psc *ProductStoreCreate) SetShowPricesWithVatTax(ppwvt productstore.ShowPricesWithVatTax) *ProductStoreCreate {
	psc.mutation.SetShowPricesWithVatTax(ppwvt)
	return psc
}

// SetNillableShowPricesWithVatTax sets the "show_prices_with_vat_tax" field if the given value is not nil.
func (psc *ProductStoreCreate) SetNillableShowPricesWithVatTax(ppwvt *productstore.ShowPricesWithVatTax) *ProductStoreCreate {
	if ppwvt != nil {
		psc.SetShowPricesWithVatTax(*ppwvt)
	}
	return psc
}

// SetShowTaxIsExempt sets the "show_tax_is_exempt" field.
func (psc *ProductStoreCreate) SetShowTaxIsExempt(ptie productstore.ShowTaxIsExempt) *ProductStoreCreate {
	psc.mutation.SetShowTaxIsExempt(ptie)
	return psc
}

// SetNillableShowTaxIsExempt sets the "show_tax_is_exempt" field if the given value is not nil.
func (psc *ProductStoreCreate) SetNillableShowTaxIsExempt(ptie *productstore.ShowTaxIsExempt) *ProductStoreCreate {
	if ptie != nil {
		psc.SetShowTaxIsExempt(*ptie)
	}
	return psc
}

// SetVatTaxAuthGeoID sets the "vat_tax_auth_geo_id" field.
func (psc *ProductStoreCreate) SetVatTaxAuthGeoID(i int) *ProductStoreCreate {
	psc.mutation.SetVatTaxAuthGeoID(i)
	return psc
}

// SetNillableVatTaxAuthGeoID sets the "vat_tax_auth_geo_id" field if the given value is not nil.
func (psc *ProductStoreCreate) SetNillableVatTaxAuthGeoID(i *int) *ProductStoreCreate {
	if i != nil {
		psc.SetVatTaxAuthGeoID(*i)
	}
	return psc
}

// SetVatTaxAuthPartyID sets the "vat_tax_auth_party_id" field.
func (psc *ProductStoreCreate) SetVatTaxAuthPartyID(i int) *ProductStoreCreate {
	psc.mutation.SetVatTaxAuthPartyID(i)
	return psc
}

// SetNillableVatTaxAuthPartyID sets the "vat_tax_auth_party_id" field if the given value is not nil.
func (psc *ProductStoreCreate) SetNillableVatTaxAuthPartyID(i *int) *ProductStoreCreate {
	if i != nil {
		psc.SetVatTaxAuthPartyID(*i)
	}
	return psc
}

// SetEnableAutoSuggestionList sets the "enable_auto_suggestion_list" field.
func (psc *ProductStoreCreate) SetEnableAutoSuggestionList(pasl productstore.EnableAutoSuggestionList) *ProductStoreCreate {
	psc.mutation.SetEnableAutoSuggestionList(pasl)
	return psc
}

// SetNillableEnableAutoSuggestionList sets the "enable_auto_suggestion_list" field if the given value is not nil.
func (psc *ProductStoreCreate) SetNillableEnableAutoSuggestionList(pasl *productstore.EnableAutoSuggestionList) *ProductStoreCreate {
	if pasl != nil {
		psc.SetEnableAutoSuggestionList(*pasl)
	}
	return psc
}

// SetEnableDigProdUpload sets the "enable_dig_prod_upload" field.
func (psc *ProductStoreCreate) SetEnableDigProdUpload(pdpu productstore.EnableDigProdUpload) *ProductStoreCreate {
	psc.mutation.SetEnableDigProdUpload(pdpu)
	return psc
}

// SetNillableEnableDigProdUpload sets the "enable_dig_prod_upload" field if the given value is not nil.
func (psc *ProductStoreCreate) SetNillableEnableDigProdUpload(pdpu *productstore.EnableDigProdUpload) *ProductStoreCreate {
	if pdpu != nil {
		psc.SetEnableDigProdUpload(*pdpu)
	}
	return psc
}

// SetProdSearchExcludeVariants sets the "prod_search_exclude_variants" field.
func (psc *ProductStoreCreate) SetProdSearchExcludeVariants(psev productstore.ProdSearchExcludeVariants) *ProductStoreCreate {
	psc.mutation.SetProdSearchExcludeVariants(psev)
	return psc
}

// SetNillableProdSearchExcludeVariants sets the "prod_search_exclude_variants" field if the given value is not nil.
func (psc *ProductStoreCreate) SetNillableProdSearchExcludeVariants(psev *productstore.ProdSearchExcludeVariants) *ProductStoreCreate {
	if psev != nil {
		psc.SetProdSearchExcludeVariants(*psev)
	}
	return psc
}

// SetDigProdUploadCategoryID sets the "dig_prod_upload_category_id" field.
func (psc *ProductStoreCreate) SetDigProdUploadCategoryID(i int) *ProductStoreCreate {
	psc.mutation.SetDigProdUploadCategoryID(i)
	return psc
}

// SetNillableDigProdUploadCategoryID sets the "dig_prod_upload_category_id" field if the given value is not nil.
func (psc *ProductStoreCreate) SetNillableDigProdUploadCategoryID(i *int) *ProductStoreCreate {
	if i != nil {
		psc.SetDigProdUploadCategoryID(*i)
	}
	return psc
}

// SetAutoOrderCcTryExp sets the "auto_order_cc_try_exp" field.
func (psc *ProductStoreCreate) SetAutoOrderCcTryExp(pocte productstore.AutoOrderCcTryExp) *ProductStoreCreate {
	psc.mutation.SetAutoOrderCcTryExp(pocte)
	return psc
}

// SetNillableAutoOrderCcTryExp sets the "auto_order_cc_try_exp" field if the given value is not nil.
func (psc *ProductStoreCreate) SetNillableAutoOrderCcTryExp(pocte *productstore.AutoOrderCcTryExp) *ProductStoreCreate {
	if pocte != nil {
		psc.SetAutoOrderCcTryExp(*pocte)
	}
	return psc
}

// SetAutoOrderCcTryOtherCards sets the "auto_order_cc_try_other_cards" field.
func (psc *ProductStoreCreate) SetAutoOrderCcTryOtherCards(poctoc productstore.AutoOrderCcTryOtherCards) *ProductStoreCreate {
	psc.mutation.SetAutoOrderCcTryOtherCards(poctoc)
	return psc
}

// SetNillableAutoOrderCcTryOtherCards sets the "auto_order_cc_try_other_cards" field if the given value is not nil.
func (psc *ProductStoreCreate) SetNillableAutoOrderCcTryOtherCards(poctoc *productstore.AutoOrderCcTryOtherCards) *ProductStoreCreate {
	if poctoc != nil {
		psc.SetAutoOrderCcTryOtherCards(*poctoc)
	}
	return psc
}

// SetAutoOrderCcTryLaterNsf sets the "auto_order_cc_try_later_nsf" field.
func (psc *ProductStoreCreate) SetAutoOrderCcTryLaterNsf(poctln productstore.AutoOrderCcTryLaterNsf) *ProductStoreCreate {
	psc.mutation.SetAutoOrderCcTryLaterNsf(poctln)
	return psc
}

// SetNillableAutoOrderCcTryLaterNsf sets the "auto_order_cc_try_later_nsf" field if the given value is not nil.
func (psc *ProductStoreCreate) SetNillableAutoOrderCcTryLaterNsf(poctln *productstore.AutoOrderCcTryLaterNsf) *ProductStoreCreate {
	if poctln != nil {
		psc.SetAutoOrderCcTryLaterNsf(*poctln)
	}
	return psc
}

// SetAutoOrderCcTryLaterMax sets the "auto_order_cc_try_later_max" field.
func (psc *ProductStoreCreate) SetAutoOrderCcTryLaterMax(i int) *ProductStoreCreate {
	psc.mutation.SetAutoOrderCcTryLaterMax(i)
	return psc
}

// SetNillableAutoOrderCcTryLaterMax sets the "auto_order_cc_try_later_max" field if the given value is not nil.
func (psc *ProductStoreCreate) SetNillableAutoOrderCcTryLaterMax(i *int) *ProductStoreCreate {
	if i != nil {
		psc.SetAutoOrderCcTryLaterMax(*i)
	}
	return psc
}

// SetStoreCreditValidDays sets the "store_credit_valid_days" field.
func (psc *ProductStoreCreate) SetStoreCreditValidDays(i int) *ProductStoreCreate {
	psc.mutation.SetStoreCreditValidDays(i)
	return psc
}

// SetNillableStoreCreditValidDays sets the "store_credit_valid_days" field if the given value is not nil.
func (psc *ProductStoreCreate) SetNillableStoreCreditValidDays(i *int) *ProductStoreCreate {
	if i != nil {
		psc.SetStoreCreditValidDays(*i)
	}
	return psc
}

// SetAutoApproveInvoice sets the "auto_approve_invoice" field.
func (psc *ProductStoreCreate) SetAutoApproveInvoice(pai productstore.AutoApproveInvoice) *ProductStoreCreate {
	psc.mutation.SetAutoApproveInvoice(pai)
	return psc
}

// SetNillableAutoApproveInvoice sets the "auto_approve_invoice" field if the given value is not nil.
func (psc *ProductStoreCreate) SetNillableAutoApproveInvoice(pai *productstore.AutoApproveInvoice) *ProductStoreCreate {
	if pai != nil {
		psc.SetAutoApproveInvoice(*pai)
	}
	return psc
}

// SetAutoApproveOrder sets the "auto_approve_order" field.
func (psc *ProductStoreCreate) SetAutoApproveOrder(pao productstore.AutoApproveOrder) *ProductStoreCreate {
	psc.mutation.SetAutoApproveOrder(pao)
	return psc
}

// SetNillableAutoApproveOrder sets the "auto_approve_order" field if the given value is not nil.
func (psc *ProductStoreCreate) SetNillableAutoApproveOrder(pao *productstore.AutoApproveOrder) *ProductStoreCreate {
	if pao != nil {
		psc.SetAutoApproveOrder(*pao)
	}
	return psc
}

// SetShipIfCaptureFails sets the "ship_if_capture_fails" field.
func (psc *ProductStoreCreate) SetShipIfCaptureFails(picf productstore.ShipIfCaptureFails) *ProductStoreCreate {
	psc.mutation.SetShipIfCaptureFails(picf)
	return psc
}

// SetNillableShipIfCaptureFails sets the "ship_if_capture_fails" field if the given value is not nil.
func (psc *ProductStoreCreate) SetNillableShipIfCaptureFails(picf *productstore.ShipIfCaptureFails) *ProductStoreCreate {
	if picf != nil {
		psc.SetShipIfCaptureFails(*picf)
	}
	return psc
}

// SetSetOwnerUponIssuance sets the "set_owner_upon_issuance" field.
func (psc *ProductStoreCreate) SetSetOwnerUponIssuance(poui productstore.SetOwnerUponIssuance) *ProductStoreCreate {
	psc.mutation.SetSetOwnerUponIssuance(poui)
	return psc
}

// SetNillableSetOwnerUponIssuance sets the "set_owner_upon_issuance" field if the given value is not nil.
func (psc *ProductStoreCreate) SetNillableSetOwnerUponIssuance(poui *productstore.SetOwnerUponIssuance) *ProductStoreCreate {
	if poui != nil {
		psc.SetSetOwnerUponIssuance(*poui)
	}
	return psc
}

// SetReqReturnInventoryReceive sets the "req_return_inventory_receive" field.
func (psc *ProductStoreCreate) SetReqReturnInventoryReceive(prir productstore.ReqReturnInventoryReceive) *ProductStoreCreate {
	psc.mutation.SetReqReturnInventoryReceive(prir)
	return psc
}

// SetNillableReqReturnInventoryReceive sets the "req_return_inventory_receive" field if the given value is not nil.
func (psc *ProductStoreCreate) SetNillableReqReturnInventoryReceive(prir *productstore.ReqReturnInventoryReceive) *ProductStoreCreate {
	if prir != nil {
		psc.SetReqReturnInventoryReceive(*prir)
	}
	return psc
}

// SetAddToCartRemoveIncompat sets the "add_to_cart_remove_incompat" field.
func (psc *ProductStoreCreate) SetAddToCartRemoveIncompat(ptcri productstore.AddToCartRemoveIncompat) *ProductStoreCreate {
	psc.mutation.SetAddToCartRemoveIncompat(ptcri)
	return psc
}

// SetNillableAddToCartRemoveIncompat sets the "add_to_cart_remove_incompat" field if the given value is not nil.
func (psc *ProductStoreCreate) SetNillableAddToCartRemoveIncompat(ptcri *productstore.AddToCartRemoveIncompat) *ProductStoreCreate {
	if ptcri != nil {
		psc.SetAddToCartRemoveIncompat(*ptcri)
	}
	return psc
}

// SetAddToCartReplaceUpsell sets the "add_to_cart_replace_upsell" field.
func (psc *ProductStoreCreate) SetAddToCartReplaceUpsell(ptcru productstore.AddToCartReplaceUpsell) *ProductStoreCreate {
	psc.mutation.SetAddToCartReplaceUpsell(ptcru)
	return psc
}

// SetNillableAddToCartReplaceUpsell sets the "add_to_cart_replace_upsell" field if the given value is not nil.
func (psc *ProductStoreCreate) SetNillableAddToCartReplaceUpsell(ptcru *productstore.AddToCartReplaceUpsell) *ProductStoreCreate {
	if ptcru != nil {
		psc.SetAddToCartReplaceUpsell(*ptcru)
	}
	return psc
}

// SetSplitPayPrefPerShpGrp sets the "split_pay_pref_per_shp_grp" field.
func (psc *ProductStoreCreate) SetSplitPayPrefPerShpGrp(ppppsg productstore.SplitPayPrefPerShpGrp) *ProductStoreCreate {
	psc.mutation.SetSplitPayPrefPerShpGrp(ppppsg)
	return psc
}

// SetNillableSplitPayPrefPerShpGrp sets the "split_pay_pref_per_shp_grp" field if the given value is not nil.
func (psc *ProductStoreCreate) SetNillableSplitPayPrefPerShpGrp(ppppsg *productstore.SplitPayPrefPerShpGrp) *ProductStoreCreate {
	if ppppsg != nil {
		psc.SetSplitPayPrefPerShpGrp(*ppppsg)
	}
	return psc
}

// SetManagedByLot sets the "managed_by_lot" field.
func (psc *ProductStoreCreate) SetManagedByLot(pbl productstore.ManagedByLot) *ProductStoreCreate {
	psc.mutation.SetManagedByLot(pbl)
	return psc
}

// SetNillableManagedByLot sets the "managed_by_lot" field if the given value is not nil.
func (psc *ProductStoreCreate) SetNillableManagedByLot(pbl *productstore.ManagedByLot) *ProductStoreCreate {
	if pbl != nil {
		psc.SetManagedByLot(*pbl)
	}
	return psc
}

// SetShowOutOfStockProducts sets the "show_out_of_stock_products" field.
func (psc *ProductStoreCreate) SetShowOutOfStockProducts(poosp productstore.ShowOutOfStockProducts) *ProductStoreCreate {
	psc.mutation.SetShowOutOfStockProducts(poosp)
	return psc
}

// SetNillableShowOutOfStockProducts sets the "show_out_of_stock_products" field if the given value is not nil.
func (psc *ProductStoreCreate) SetNillableShowOutOfStockProducts(poosp *productstore.ShowOutOfStockProducts) *ProductStoreCreate {
	if poosp != nil {
		psc.SetShowOutOfStockProducts(*poosp)
	}
	return psc
}

// SetOrderDecimalQuantity sets the "order_decimal_quantity" field.
func (psc *ProductStoreCreate) SetOrderDecimalQuantity(pdq productstore.OrderDecimalQuantity) *ProductStoreCreate {
	psc.mutation.SetOrderDecimalQuantity(pdq)
	return psc
}

// SetNillableOrderDecimalQuantity sets the "order_decimal_quantity" field if the given value is not nil.
func (psc *ProductStoreCreate) SetNillableOrderDecimalQuantity(pdq *productstore.OrderDecimalQuantity) *ProductStoreCreate {
	if pdq != nil {
		psc.SetOrderDecimalQuantity(*pdq)
	}
	return psc
}

// SetAllowComment sets the "allow_comment" field.
func (psc *ProductStoreCreate) SetAllowComment(pc productstore.AllowComment) *ProductStoreCreate {
	psc.mutation.SetAllowComment(pc)
	return psc
}

// SetNillableAllowComment sets the "allow_comment" field if the given value is not nil.
func (psc *ProductStoreCreate) SetNillableAllowComment(pc *productstore.AllowComment) *ProductStoreCreate {
	if pc != nil {
		psc.SetAllowComment(*pc)
	}
	return psc
}

// SetAllocateInventory sets the "allocate_inventory" field.
func (psc *ProductStoreCreate) SetAllocateInventory(pi productstore.AllocateInventory) *ProductStoreCreate {
	psc.mutation.SetAllocateInventory(pi)
	return psc
}

// SetNillableAllocateInventory sets the "allocate_inventory" field if the given value is not nil.
func (psc *ProductStoreCreate) SetNillableAllocateInventory(pi *productstore.AllocateInventory) *ProductStoreCreate {
	if pi != nil {
		psc.SetAllocateInventory(*pi)
	}
	return psc
}

// SetPrimaryProductStoreGroupID sets the "primary_product_store_group" edge to the ProductStoreGroup entity by ID.
func (psc *ProductStoreCreate) SetPrimaryProductStoreGroupID(id int) *ProductStoreCreate {
	psc.mutation.SetPrimaryProductStoreGroupID(id)
	return psc
}

// SetNillablePrimaryProductStoreGroupID sets the "primary_product_store_group" edge to the ProductStoreGroup entity by ID if the given value is not nil.
func (psc *ProductStoreCreate) SetNillablePrimaryProductStoreGroupID(id *int) *ProductStoreCreate {
	if id != nil {
		psc = psc.SetPrimaryProductStoreGroupID(*id)
	}
	return psc
}

// SetPrimaryProductStoreGroup sets the "primary_product_store_group" edge to the ProductStoreGroup entity.
func (psc *ProductStoreCreate) SetPrimaryProductStoreGroup(p *ProductStoreGroup) *ProductStoreCreate {
	return psc.SetPrimaryProductStoreGroupID(p.ID)
}

// SetReserveOrderEnumerationID sets the "reserve_order_enumeration" edge to the Enumeration entity by ID.
func (psc *ProductStoreCreate) SetReserveOrderEnumerationID(id int) *ProductStoreCreate {
	psc.mutation.SetReserveOrderEnumerationID(id)
	return psc
}

// SetNillableReserveOrderEnumerationID sets the "reserve_order_enumeration" edge to the Enumeration entity by ID if the given value is not nil.
func (psc *ProductStoreCreate) SetNillableReserveOrderEnumerationID(id *int) *ProductStoreCreate {
	if id != nil {
		psc = psc.SetReserveOrderEnumerationID(*id)
	}
	return psc
}

// SetReserveOrderEnumeration sets the "reserve_order_enumeration" edge to the Enumeration entity.
func (psc *ProductStoreCreate) SetReserveOrderEnumeration(e *Enumeration) *ProductStoreCreate {
	return psc.SetReserveOrderEnumerationID(e.ID)
}

// SetRequirementMethodEnumerationID sets the "requirement_method_enumeration" edge to the Enumeration entity by ID.
func (psc *ProductStoreCreate) SetRequirementMethodEnumerationID(id int) *ProductStoreCreate {
	psc.mutation.SetRequirementMethodEnumerationID(id)
	return psc
}

// SetNillableRequirementMethodEnumerationID sets the "requirement_method_enumeration" edge to the Enumeration entity by ID if the given value is not nil.
func (psc *ProductStoreCreate) SetNillableRequirementMethodEnumerationID(id *int) *ProductStoreCreate {
	if id != nil {
		psc = psc.SetRequirementMethodEnumerationID(*id)
	}
	return psc
}

// SetRequirementMethodEnumeration sets the "requirement_method_enumeration" edge to the Enumeration entity.
func (psc *ProductStoreCreate) SetRequirementMethodEnumeration(e *Enumeration) *ProductStoreCreate {
	return psc.SetRequirementMethodEnumerationID(e.ID)
}

// SetDefaultSalesChannelEnumerationID sets the "default_sales_channel_enumeration" edge to the Enumeration entity by ID.
func (psc *ProductStoreCreate) SetDefaultSalesChannelEnumerationID(id int) *ProductStoreCreate {
	psc.mutation.SetDefaultSalesChannelEnumerationID(id)
	return psc
}

// SetNillableDefaultSalesChannelEnumerationID sets the "default_sales_channel_enumeration" edge to the Enumeration entity by ID if the given value is not nil.
func (psc *ProductStoreCreate) SetNillableDefaultSalesChannelEnumerationID(id *int) *ProductStoreCreate {
	if id != nil {
		psc = psc.SetDefaultSalesChannelEnumerationID(*id)
	}
	return psc
}

// SetDefaultSalesChannelEnumeration sets the "default_sales_channel_enumeration" edge to the Enumeration entity.
func (psc *ProductStoreCreate) SetDefaultSalesChannelEnumeration(e *Enumeration) *ProductStoreCreate {
	return psc.SetDefaultSalesChannelEnumerationID(e.ID)
}

// SetHeaderApprovedStatusItemID sets the "header_approved_status_item" edge to the StatusItem entity by ID.
func (psc *ProductStoreCreate) SetHeaderApprovedStatusItemID(id int) *ProductStoreCreate {
	psc.mutation.SetHeaderApprovedStatusItemID(id)
	return psc
}

// SetNillableHeaderApprovedStatusItemID sets the "header_approved_status_item" edge to the StatusItem entity by ID if the given value is not nil.
func (psc *ProductStoreCreate) SetNillableHeaderApprovedStatusItemID(id *int) *ProductStoreCreate {
	if id != nil {
		psc = psc.SetHeaderApprovedStatusItemID(*id)
	}
	return psc
}

// SetHeaderApprovedStatusItem sets the "header_approved_status_item" edge to the StatusItem entity.
func (psc *ProductStoreCreate) SetHeaderApprovedStatusItem(s *StatusItem) *ProductStoreCreate {
	return psc.SetHeaderApprovedStatusItemID(s.ID)
}

// SetItemApprovedStatusItemID sets the "item_approved_status_item" edge to the StatusItem entity by ID.
func (psc *ProductStoreCreate) SetItemApprovedStatusItemID(id int) *ProductStoreCreate {
	psc.mutation.SetItemApprovedStatusItemID(id)
	return psc
}

// SetNillableItemApprovedStatusItemID sets the "item_approved_status_item" edge to the StatusItem entity by ID if the given value is not nil.
func (psc *ProductStoreCreate) SetNillableItemApprovedStatusItemID(id *int) *ProductStoreCreate {
	if id != nil {
		psc = psc.SetItemApprovedStatusItemID(*id)
	}
	return psc
}

// SetItemApprovedStatusItem sets the "item_approved_status_item" edge to the StatusItem entity.
func (psc *ProductStoreCreate) SetItemApprovedStatusItem(s *StatusItem) *ProductStoreCreate {
	return psc.SetItemApprovedStatusItemID(s.ID)
}

// SetDigitalItemApprovedStatusItemID sets the "digital_item_approved_status_item" edge to the StatusItem entity by ID.
func (psc *ProductStoreCreate) SetDigitalItemApprovedStatusItemID(id int) *ProductStoreCreate {
	psc.mutation.SetDigitalItemApprovedStatusItemID(id)
	return psc
}

// SetNillableDigitalItemApprovedStatusItemID sets the "digital_item_approved_status_item" edge to the StatusItem entity by ID if the given value is not nil.
func (psc *ProductStoreCreate) SetNillableDigitalItemApprovedStatusItemID(id *int) *ProductStoreCreate {
	if id != nil {
		psc = psc.SetDigitalItemApprovedStatusItemID(*id)
	}
	return psc
}

// SetDigitalItemApprovedStatusItem sets the "digital_item_approved_status_item" edge to the StatusItem entity.
func (psc *ProductStoreCreate) SetDigitalItemApprovedStatusItem(s *StatusItem) *ProductStoreCreate {
	return psc.SetDigitalItemApprovedStatusItemID(s.ID)
}

// SetHeaderDeclinedStatusItemID sets the "header_declined_status_item" edge to the StatusItem entity by ID.
func (psc *ProductStoreCreate) SetHeaderDeclinedStatusItemID(id int) *ProductStoreCreate {
	psc.mutation.SetHeaderDeclinedStatusItemID(id)
	return psc
}

// SetNillableHeaderDeclinedStatusItemID sets the "header_declined_status_item" edge to the StatusItem entity by ID if the given value is not nil.
func (psc *ProductStoreCreate) SetNillableHeaderDeclinedStatusItemID(id *int) *ProductStoreCreate {
	if id != nil {
		psc = psc.SetHeaderDeclinedStatusItemID(*id)
	}
	return psc
}

// SetHeaderDeclinedStatusItem sets the "header_declined_status_item" edge to the StatusItem entity.
func (psc *ProductStoreCreate) SetHeaderDeclinedStatusItem(s *StatusItem) *ProductStoreCreate {
	return psc.SetHeaderDeclinedStatusItemID(s.ID)
}

// SetItemDeclinedStatusItemID sets the "item_declined_status_item" edge to the StatusItem entity by ID.
func (psc *ProductStoreCreate) SetItemDeclinedStatusItemID(id int) *ProductStoreCreate {
	psc.mutation.SetItemDeclinedStatusItemID(id)
	return psc
}

// SetNillableItemDeclinedStatusItemID sets the "item_declined_status_item" edge to the StatusItem entity by ID if the given value is not nil.
func (psc *ProductStoreCreate) SetNillableItemDeclinedStatusItemID(id *int) *ProductStoreCreate {
	if id != nil {
		psc = psc.SetItemDeclinedStatusItemID(*id)
	}
	return psc
}

// SetItemDeclinedStatusItem sets the "item_declined_status_item" edge to the StatusItem entity.
func (psc *ProductStoreCreate) SetItemDeclinedStatusItem(s *StatusItem) *ProductStoreCreate {
	return psc.SetItemDeclinedStatusItemID(s.ID)
}

// SetHeaderCancelStatusItemID sets the "header_cancel_status_item" edge to the StatusItem entity by ID.
func (psc *ProductStoreCreate) SetHeaderCancelStatusItemID(id int) *ProductStoreCreate {
	psc.mutation.SetHeaderCancelStatusItemID(id)
	return psc
}

// SetNillableHeaderCancelStatusItemID sets the "header_cancel_status_item" edge to the StatusItem entity by ID if the given value is not nil.
func (psc *ProductStoreCreate) SetNillableHeaderCancelStatusItemID(id *int) *ProductStoreCreate {
	if id != nil {
		psc = psc.SetHeaderCancelStatusItemID(*id)
	}
	return psc
}

// SetHeaderCancelStatusItem sets the "header_cancel_status_item" edge to the StatusItem entity.
func (psc *ProductStoreCreate) SetHeaderCancelStatusItem(s *StatusItem) *ProductStoreCreate {
	return psc.SetHeaderCancelStatusItemID(s.ID)
}

// SetItemCancelStatusItemID sets the "item_cancel_status_item" edge to the StatusItem entity by ID.
func (psc *ProductStoreCreate) SetItemCancelStatusItemID(id int) *ProductStoreCreate {
	psc.mutation.SetItemCancelStatusItemID(id)
	return psc
}

// SetNillableItemCancelStatusItemID sets the "item_cancel_status_item" edge to the StatusItem entity by ID if the given value is not nil.
func (psc *ProductStoreCreate) SetNillableItemCancelStatusItemID(id *int) *ProductStoreCreate {
	if id != nil {
		psc = psc.SetItemCancelStatusItemID(*id)
	}
	return psc
}

// SetItemCancelStatusItem sets the "item_cancel_status_item" edge to the StatusItem entity.
func (psc *ProductStoreCreate) SetItemCancelStatusItem(s *StatusItem) *ProductStoreCreate {
	return psc.SetItemCancelStatusItemID(s.ID)
}

// SetStoreCreditAccountEnumerationID sets the "store_credit_account_enumeration" edge to the Enumeration entity by ID.
func (psc *ProductStoreCreate) SetStoreCreditAccountEnumerationID(id int) *ProductStoreCreate {
	psc.mutation.SetStoreCreditAccountEnumerationID(id)
	return psc
}

// SetNillableStoreCreditAccountEnumerationID sets the "store_credit_account_enumeration" edge to the Enumeration entity by ID if the given value is not nil.
func (psc *ProductStoreCreate) SetNillableStoreCreditAccountEnumerationID(id *int) *ProductStoreCreate {
	if id != nil {
		psc = psc.SetStoreCreditAccountEnumerationID(*id)
	}
	return psc
}

// SetStoreCreditAccountEnumeration sets the "store_credit_account_enumeration" edge to the Enumeration entity.
func (psc *ProductStoreCreate) SetStoreCreditAccountEnumeration(e *Enumeration) *ProductStoreCreate {
	return psc.SetStoreCreditAccountEnumerationID(e.ID)
}

// AddOrderHeaderIDs adds the "order_headers" edge to the OrderHeader entity by IDs.
func (psc *ProductStoreCreate) AddOrderHeaderIDs(ids ...int) *ProductStoreCreate {
	psc.mutation.AddOrderHeaderIDs(ids...)
	return psc
}

// AddOrderHeaders adds the "order_headers" edges to the OrderHeader entity.
func (psc *ProductStoreCreate) AddOrderHeaders(o ...*OrderHeader) *ProductStoreCreate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return psc.AddOrderHeaderIDs(ids...)
}

// AddProductReviewIDs adds the "product_reviews" edge to the ProductReview entity by IDs.
func (psc *ProductStoreCreate) AddProductReviewIDs(ids ...int) *ProductStoreCreate {
	psc.mutation.AddProductReviewIDs(ids...)
	return psc
}

// AddProductReviews adds the "product_reviews" edges to the ProductReview entity.
func (psc *ProductStoreCreate) AddProductReviews(p ...*ProductReview) *ProductStoreCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return psc.AddProductReviewIDs(ids...)
}

// Mutation returns the ProductStoreMutation object of the builder.
func (psc *ProductStoreCreate) Mutation() *ProductStoreMutation {
	return psc.mutation
}

// Save creates the ProductStore in the database.
func (psc *ProductStoreCreate) Save(ctx context.Context) (*ProductStore, error) {
	var (
		err  error
		node *ProductStore
	)
	psc.defaults()
	if len(psc.hooks) == 0 {
		if err = psc.check(); err != nil {
			return nil, err
		}
		node, err = psc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProductStoreMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = psc.check(); err != nil {
				return nil, err
			}
			psc.mutation = mutation
			if node, err = psc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(psc.hooks) - 1; i >= 0; i-- {
			mut = psc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, psc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (psc *ProductStoreCreate) SaveX(ctx context.Context) *ProductStore {
	v, err := psc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (psc *ProductStoreCreate) defaults() {
	if _, ok := psc.mutation.CreateTime(); !ok {
		v := productstore.DefaultCreateTime()
		psc.mutation.SetCreateTime(v)
	}
	if _, ok := psc.mutation.UpdateTime(); !ok {
		v := productstore.DefaultUpdateTime()
		psc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (psc *ProductStoreCreate) check() error {
	if _, ok := psc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New("ent: missing required field \"create_time\"")}
	}
	if _, ok := psc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New("ent: missing required field \"update_time\"")}
	}
	if v, ok := psc.mutation.ManualAuthIsCapture(); ok {
		if err := productstore.ManualAuthIsCaptureValidator(v); err != nil {
			return &ValidationError{Name: "manual_auth_is_capture", err: fmt.Errorf("ent: validator failed for field \"manual_auth_is_capture\": %w", err)}
		}
	}
	if v, ok := psc.mutation.ProrateShipping(); ok {
		if err := productstore.ProrateShippingValidator(v); err != nil {
			return &ValidationError{Name: "prorate_shipping", err: fmt.Errorf("ent: validator failed for field \"prorate_shipping\": %w", err)}
		}
	}
	if v, ok := psc.mutation.ProrateTaxes(); ok {
		if err := productstore.ProrateTaxesValidator(v); err != nil {
			return &ValidationError{Name: "prorate_taxes", err: fmt.Errorf("ent: validator failed for field \"prorate_taxes\": %w", err)}
		}
	}
	if v, ok := psc.mutation.ViewCartOnAdd(); ok {
		if err := productstore.ViewCartOnAddValidator(v); err != nil {
			return &ValidationError{Name: "view_cart_on_add", err: fmt.Errorf("ent: validator failed for field \"view_cart_on_add\": %w", err)}
		}
	}
	if v, ok := psc.mutation.AutoSaveCart(); ok {
		if err := productstore.AutoSaveCartValidator(v); err != nil {
			return &ValidationError{Name: "auto_save_cart", err: fmt.Errorf("ent: validator failed for field \"auto_save_cart\": %w", err)}
		}
	}
	if v, ok := psc.mutation.AutoApproveReviews(); ok {
		if err := productstore.AutoApproveReviewsValidator(v); err != nil {
			return &ValidationError{Name: "auto_approve_reviews", err: fmt.Errorf("ent: validator failed for field \"auto_approve_reviews\": %w", err)}
		}
	}
	if v, ok := psc.mutation.IsDemoStore(); ok {
		if err := productstore.IsDemoStoreValidator(v); err != nil {
			return &ValidationError{Name: "is_demo_store", err: fmt.Errorf("ent: validator failed for field \"is_demo_store\": %w", err)}
		}
	}
	if v, ok := psc.mutation.IsImmediatelyFulfilled(); ok {
		if err := productstore.IsImmediatelyFulfilledValidator(v); err != nil {
			return &ValidationError{Name: "is_immediately_fulfilled", err: fmt.Errorf("ent: validator failed for field \"is_immediately_fulfilled\": %w", err)}
		}
	}
	if v, ok := psc.mutation.OneInventoryFacility(); ok {
		if err := productstore.OneInventoryFacilityValidator(v); err != nil {
			return &ValidationError{Name: "one_inventory_facility", err: fmt.Errorf("ent: validator failed for field \"one_inventory_facility\": %w", err)}
		}
	}
	if v, ok := psc.mutation.CheckInventory(); ok {
		if err := productstore.CheckInventoryValidator(v); err != nil {
			return &ValidationError{Name: "check_inventory", err: fmt.Errorf("ent: validator failed for field \"check_inventory\": %w", err)}
		}
	}
	if v, ok := psc.mutation.ReserveInventory(); ok {
		if err := productstore.ReserveInventoryValidator(v); err != nil {
			return &ValidationError{Name: "reserve_inventory", err: fmt.Errorf("ent: validator failed for field \"reserve_inventory\": %w", err)}
		}
	}
	if v, ok := psc.mutation.RequireInventory(); ok {
		if err := productstore.RequireInventoryValidator(v); err != nil {
			return &ValidationError{Name: "require_inventory", err: fmt.Errorf("ent: validator failed for field \"require_inventory\": %w", err)}
		}
	}
	if v, ok := psc.mutation.BalanceResOnOrderCreation(); ok {
		if err := productstore.BalanceResOnOrderCreationValidator(v); err != nil {
			return &ValidationError{Name: "balance_res_on_order_creation", err: fmt.Errorf("ent: validator failed for field \"balance_res_on_order_creation\": %w", err)}
		}
	}
	if v, ok := psc.mutation.OrderNumberPrefix(); ok {
		if err := productstore.OrderNumberPrefixValidator(v); err != nil {
			return &ValidationError{Name: "order_number_prefix", err: fmt.Errorf("ent: validator failed for field \"order_number_prefix\": %w", err)}
		}
	}
	if v, ok := psc.mutation.DefaultLocaleString(); ok {
		if err := productstore.DefaultLocaleStringValidator(v); err != nil {
			return &ValidationError{Name: "default_locale_string", err: fmt.Errorf("ent: validator failed for field \"default_locale_string\": %w", err)}
		}
	}
	if v, ok := psc.mutation.DefaultTimeZoneString(); ok {
		if err := productstore.DefaultTimeZoneStringValidator(v); err != nil {
			return &ValidationError{Name: "default_time_zone_string", err: fmt.Errorf("ent: validator failed for field \"default_time_zone_string\": %w", err)}
		}
	}
	if v, ok := psc.mutation.AllowPassword(); ok {
		if err := productstore.AllowPasswordValidator(v); err != nil {
			return &ValidationError{Name: "allow_password", err: fmt.Errorf("ent: validator failed for field \"allow_password\": %w", err)}
		}
	}
	if v, ok := psc.mutation.ExplodeOrderItems(); ok {
		if err := productstore.ExplodeOrderItemsValidator(v); err != nil {
			return &ValidationError{Name: "explode_order_items", err: fmt.Errorf("ent: validator failed for field \"explode_order_items\": %w", err)}
		}
	}
	if v, ok := psc.mutation.CheckGcBalance(); ok {
		if err := productstore.CheckGcBalanceValidator(v); err != nil {
			return &ValidationError{Name: "check_gc_balance", err: fmt.Errorf("ent: validator failed for field \"check_gc_balance\": %w", err)}
		}
	}
	if v, ok := psc.mutation.RetryFailedAuths(); ok {
		if err := productstore.RetryFailedAuthsValidator(v); err != nil {
			return &ValidationError{Name: "retry_failed_auths", err: fmt.Errorf("ent: validator failed for field \"retry_failed_auths\": %w", err)}
		}
	}
	if v, ok := psc.mutation.UsePrimaryEmailUsername(); ok {
		if err := productstore.UsePrimaryEmailUsernameValidator(v); err != nil {
			return &ValidationError{Name: "use_primary_email_username", err: fmt.Errorf("ent: validator failed for field \"use_primary_email_username\": %w", err)}
		}
	}
	if v, ok := psc.mutation.RequireCustomerRole(); ok {
		if err := productstore.RequireCustomerRoleValidator(v); err != nil {
			return &ValidationError{Name: "require_customer_role", err: fmt.Errorf("ent: validator failed for field \"require_customer_role\": %w", err)}
		}
	}
	if v, ok := psc.mutation.AutoInvoiceDigitalItems(); ok {
		if err := productstore.AutoInvoiceDigitalItemsValidator(v); err != nil {
			return &ValidationError{Name: "auto_invoice_digital_items", err: fmt.Errorf("ent: validator failed for field \"auto_invoice_digital_items\": %w", err)}
		}
	}
	if v, ok := psc.mutation.ReqShipAddrForDigItems(); ok {
		if err := productstore.ReqShipAddrForDigItemsValidator(v); err != nil {
			return &ValidationError{Name: "req_ship_addr_for_dig_items", err: fmt.Errorf("ent: validator failed for field \"req_ship_addr_for_dig_items\": %w", err)}
		}
	}
	if v, ok := psc.mutation.ShowCheckoutGiftOptions(); ok {
		if err := productstore.ShowCheckoutGiftOptionsValidator(v); err != nil {
			return &ValidationError{Name: "show_checkout_gift_options", err: fmt.Errorf("ent: validator failed for field \"show_checkout_gift_options\": %w", err)}
		}
	}
	if v, ok := psc.mutation.SelectPaymentTypePerItem(); ok {
		if err := productstore.SelectPaymentTypePerItemValidator(v); err != nil {
			return &ValidationError{Name: "select_payment_type_per_item", err: fmt.Errorf("ent: validator failed for field \"select_payment_type_per_item\": %w", err)}
		}
	}
	if v, ok := psc.mutation.ShowPricesWithVatTax(); ok {
		if err := productstore.ShowPricesWithVatTaxValidator(v); err != nil {
			return &ValidationError{Name: "show_prices_with_vat_tax", err: fmt.Errorf("ent: validator failed for field \"show_prices_with_vat_tax\": %w", err)}
		}
	}
	if v, ok := psc.mutation.ShowTaxIsExempt(); ok {
		if err := productstore.ShowTaxIsExemptValidator(v); err != nil {
			return &ValidationError{Name: "show_tax_is_exempt", err: fmt.Errorf("ent: validator failed for field \"show_tax_is_exempt\": %w", err)}
		}
	}
	if v, ok := psc.mutation.EnableAutoSuggestionList(); ok {
		if err := productstore.EnableAutoSuggestionListValidator(v); err != nil {
			return &ValidationError{Name: "enable_auto_suggestion_list", err: fmt.Errorf("ent: validator failed for field \"enable_auto_suggestion_list\": %w", err)}
		}
	}
	if v, ok := psc.mutation.EnableDigProdUpload(); ok {
		if err := productstore.EnableDigProdUploadValidator(v); err != nil {
			return &ValidationError{Name: "enable_dig_prod_upload", err: fmt.Errorf("ent: validator failed for field \"enable_dig_prod_upload\": %w", err)}
		}
	}
	if v, ok := psc.mutation.ProdSearchExcludeVariants(); ok {
		if err := productstore.ProdSearchExcludeVariantsValidator(v); err != nil {
			return &ValidationError{Name: "prod_search_exclude_variants", err: fmt.Errorf("ent: validator failed for field \"prod_search_exclude_variants\": %w", err)}
		}
	}
	if v, ok := psc.mutation.AutoOrderCcTryExp(); ok {
		if err := productstore.AutoOrderCcTryExpValidator(v); err != nil {
			return &ValidationError{Name: "auto_order_cc_try_exp", err: fmt.Errorf("ent: validator failed for field \"auto_order_cc_try_exp\": %w", err)}
		}
	}
	if v, ok := psc.mutation.AutoOrderCcTryOtherCards(); ok {
		if err := productstore.AutoOrderCcTryOtherCardsValidator(v); err != nil {
			return &ValidationError{Name: "auto_order_cc_try_other_cards", err: fmt.Errorf("ent: validator failed for field \"auto_order_cc_try_other_cards\": %w", err)}
		}
	}
	if v, ok := psc.mutation.AutoOrderCcTryLaterNsf(); ok {
		if err := productstore.AutoOrderCcTryLaterNsfValidator(v); err != nil {
			return &ValidationError{Name: "auto_order_cc_try_later_nsf", err: fmt.Errorf("ent: validator failed for field \"auto_order_cc_try_later_nsf\": %w", err)}
		}
	}
	if v, ok := psc.mutation.AutoApproveInvoice(); ok {
		if err := productstore.AutoApproveInvoiceValidator(v); err != nil {
			return &ValidationError{Name: "auto_approve_invoice", err: fmt.Errorf("ent: validator failed for field \"auto_approve_invoice\": %w", err)}
		}
	}
	if v, ok := psc.mutation.AutoApproveOrder(); ok {
		if err := productstore.AutoApproveOrderValidator(v); err != nil {
			return &ValidationError{Name: "auto_approve_order", err: fmt.Errorf("ent: validator failed for field \"auto_approve_order\": %w", err)}
		}
	}
	if v, ok := psc.mutation.ShipIfCaptureFails(); ok {
		if err := productstore.ShipIfCaptureFailsValidator(v); err != nil {
			return &ValidationError{Name: "ship_if_capture_fails", err: fmt.Errorf("ent: validator failed for field \"ship_if_capture_fails\": %w", err)}
		}
	}
	if v, ok := psc.mutation.SetOwnerUponIssuance(); ok {
		if err := productstore.SetOwnerUponIssuanceValidator(v); err != nil {
			return &ValidationError{Name: "set_owner_upon_issuance", err: fmt.Errorf("ent: validator failed for field \"set_owner_upon_issuance\": %w", err)}
		}
	}
	if v, ok := psc.mutation.ReqReturnInventoryReceive(); ok {
		if err := productstore.ReqReturnInventoryReceiveValidator(v); err != nil {
			return &ValidationError{Name: "req_return_inventory_receive", err: fmt.Errorf("ent: validator failed for field \"req_return_inventory_receive\": %w", err)}
		}
	}
	if v, ok := psc.mutation.AddToCartRemoveIncompat(); ok {
		if err := productstore.AddToCartRemoveIncompatValidator(v); err != nil {
			return &ValidationError{Name: "add_to_cart_remove_incompat", err: fmt.Errorf("ent: validator failed for field \"add_to_cart_remove_incompat\": %w", err)}
		}
	}
	if v, ok := psc.mutation.AddToCartReplaceUpsell(); ok {
		if err := productstore.AddToCartReplaceUpsellValidator(v); err != nil {
			return &ValidationError{Name: "add_to_cart_replace_upsell", err: fmt.Errorf("ent: validator failed for field \"add_to_cart_replace_upsell\": %w", err)}
		}
	}
	if v, ok := psc.mutation.SplitPayPrefPerShpGrp(); ok {
		if err := productstore.SplitPayPrefPerShpGrpValidator(v); err != nil {
			return &ValidationError{Name: "split_pay_pref_per_shp_grp", err: fmt.Errorf("ent: validator failed for field \"split_pay_pref_per_shp_grp\": %w", err)}
		}
	}
	if v, ok := psc.mutation.ManagedByLot(); ok {
		if err := productstore.ManagedByLotValidator(v); err != nil {
			return &ValidationError{Name: "managed_by_lot", err: fmt.Errorf("ent: validator failed for field \"managed_by_lot\": %w", err)}
		}
	}
	if v, ok := psc.mutation.ShowOutOfStockProducts(); ok {
		if err := productstore.ShowOutOfStockProductsValidator(v); err != nil {
			return &ValidationError{Name: "show_out_of_stock_products", err: fmt.Errorf("ent: validator failed for field \"show_out_of_stock_products\": %w", err)}
		}
	}
	if v, ok := psc.mutation.OrderDecimalQuantity(); ok {
		if err := productstore.OrderDecimalQuantityValidator(v); err != nil {
			return &ValidationError{Name: "order_decimal_quantity", err: fmt.Errorf("ent: validator failed for field \"order_decimal_quantity\": %w", err)}
		}
	}
	if v, ok := psc.mutation.AllowComment(); ok {
		if err := productstore.AllowCommentValidator(v); err != nil {
			return &ValidationError{Name: "allow_comment", err: fmt.Errorf("ent: validator failed for field \"allow_comment\": %w", err)}
		}
	}
	if v, ok := psc.mutation.AllocateInventory(); ok {
		if err := productstore.AllocateInventoryValidator(v); err != nil {
			return &ValidationError{Name: "allocate_inventory", err: fmt.Errorf("ent: validator failed for field \"allocate_inventory\": %w", err)}
		}
	}
	return nil
}

func (psc *ProductStoreCreate) sqlSave(ctx context.Context) (*ProductStore, error) {
	_node, _spec := psc.createSpec()
	if err := sqlgraph.CreateNode(ctx, psc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (psc *ProductStoreCreate) createSpec() (*ProductStore, *sqlgraph.CreateSpec) {
	var (
		_node = &ProductStore{config: psc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: productstore.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: productstore.FieldID,
			},
		}
	)
	if value, ok := psc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productstore.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := psc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productstore.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := psc.mutation.StringRef(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productstore.FieldStringRef,
		})
		_node.StringRef = value
	}
	if value, ok := psc.mutation.StoreName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productstore.FieldStoreName,
		})
		_node.StoreName = value
	}
	if value, ok := psc.mutation.CompanyName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productstore.FieldCompanyName,
		})
		_node.CompanyName = value
	}
	if value, ok := psc.mutation.Title(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productstore.FieldTitle,
		})
		_node.Title = value
	}
	if value, ok := psc.mutation.Subtitle(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productstore.FieldSubtitle,
		})
		_node.Subtitle = value
	}
	if value, ok := psc.mutation.PayToPartyID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productstore.FieldPayToPartyID,
		})
		_node.PayToPartyID = value
	}
	if value, ok := psc.mutation.DaysToCancelNonPay(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productstore.FieldDaysToCancelNonPay,
		})
		_node.DaysToCancelNonPay = value
	}
	if value, ok := psc.mutation.ManualAuthIsCapture(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldManualAuthIsCapture,
		})
		_node.ManualAuthIsCapture = value
	}
	if value, ok := psc.mutation.ProrateShipping(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldProrateShipping,
		})
		_node.ProrateShipping = value
	}
	if value, ok := psc.mutation.ProrateTaxes(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldProrateTaxes,
		})
		_node.ProrateTaxes = value
	}
	if value, ok := psc.mutation.ViewCartOnAdd(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldViewCartOnAdd,
		})
		_node.ViewCartOnAdd = value
	}
	if value, ok := psc.mutation.AutoSaveCart(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldAutoSaveCart,
		})
		_node.AutoSaveCart = value
	}
	if value, ok := psc.mutation.AutoApproveReviews(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldAutoApproveReviews,
		})
		_node.AutoApproveReviews = value
	}
	if value, ok := psc.mutation.IsDemoStore(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldIsDemoStore,
		})
		_node.IsDemoStore = value
	}
	if value, ok := psc.mutation.IsImmediatelyFulfilled(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldIsImmediatelyFulfilled,
		})
		_node.IsImmediatelyFulfilled = value
	}
	if value, ok := psc.mutation.InventoryFacilityID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productstore.FieldInventoryFacilityID,
		})
		_node.InventoryFacilityID = value
	}
	if value, ok := psc.mutation.OneInventoryFacility(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldOneInventoryFacility,
		})
		_node.OneInventoryFacility = value
	}
	if value, ok := psc.mutation.CheckInventory(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldCheckInventory,
		})
		_node.CheckInventory = value
	}
	if value, ok := psc.mutation.ReserveInventory(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldReserveInventory,
		})
		_node.ReserveInventory = value
	}
	if value, ok := psc.mutation.RequireInventory(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldRequireInventory,
		})
		_node.RequireInventory = value
	}
	if value, ok := psc.mutation.BalanceResOnOrderCreation(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldBalanceResOnOrderCreation,
		})
		_node.BalanceResOnOrderCreation = value
	}
	if value, ok := psc.mutation.OrderNumberPrefix(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productstore.FieldOrderNumberPrefix,
		})
		_node.OrderNumberPrefix = value
	}
	if value, ok := psc.mutation.DefaultLocaleString(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productstore.FieldDefaultLocaleString,
		})
		_node.DefaultLocaleString = value
	}
	if value, ok := psc.mutation.DefaultCurrencyUomID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productstore.FieldDefaultCurrencyUomID,
		})
		_node.DefaultCurrencyUomID = value
	}
	if value, ok := psc.mutation.DefaultTimeZoneString(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productstore.FieldDefaultTimeZoneString,
		})
		_node.DefaultTimeZoneString = value
	}
	if value, ok := psc.mutation.AllowPassword(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldAllowPassword,
		})
		_node.AllowPassword = value
	}
	if value, ok := psc.mutation.DefaultPassword(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productstore.FieldDefaultPassword,
		})
		_node.DefaultPassword = value
	}
	if value, ok := psc.mutation.ExplodeOrderItems(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldExplodeOrderItems,
		})
		_node.ExplodeOrderItems = value
	}
	if value, ok := psc.mutation.CheckGcBalance(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldCheckGcBalance,
		})
		_node.CheckGcBalance = value
	}
	if value, ok := psc.mutation.RetryFailedAuths(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldRetryFailedAuths,
		})
		_node.RetryFailedAuths = value
	}
	if value, ok := psc.mutation.AuthDeclinedMessage(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productstore.FieldAuthDeclinedMessage,
		})
		_node.AuthDeclinedMessage = value
	}
	if value, ok := psc.mutation.AuthFraudMessage(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productstore.FieldAuthFraudMessage,
		})
		_node.AuthFraudMessage = value
	}
	if value, ok := psc.mutation.AuthErrorMessage(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productstore.FieldAuthErrorMessage,
		})
		_node.AuthErrorMessage = value
	}
	if value, ok := psc.mutation.VisualThemeID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productstore.FieldVisualThemeID,
		})
		_node.VisualThemeID = value
	}
	if value, ok := psc.mutation.UsePrimaryEmailUsername(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldUsePrimaryEmailUsername,
		})
		_node.UsePrimaryEmailUsername = value
	}
	if value, ok := psc.mutation.RequireCustomerRole(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldRequireCustomerRole,
		})
		_node.RequireCustomerRole = value
	}
	if value, ok := psc.mutation.AutoInvoiceDigitalItems(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldAutoInvoiceDigitalItems,
		})
		_node.AutoInvoiceDigitalItems = value
	}
	if value, ok := psc.mutation.ReqShipAddrForDigItems(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldReqShipAddrForDigItems,
		})
		_node.ReqShipAddrForDigItems = value
	}
	if value, ok := psc.mutation.ShowCheckoutGiftOptions(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldShowCheckoutGiftOptions,
		})
		_node.ShowCheckoutGiftOptions = value
	}
	if value, ok := psc.mutation.SelectPaymentTypePerItem(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldSelectPaymentTypePerItem,
		})
		_node.SelectPaymentTypePerItem = value
	}
	if value, ok := psc.mutation.ShowPricesWithVatTax(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldShowPricesWithVatTax,
		})
		_node.ShowPricesWithVatTax = value
	}
	if value, ok := psc.mutation.ShowTaxIsExempt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldShowTaxIsExempt,
		})
		_node.ShowTaxIsExempt = value
	}
	if value, ok := psc.mutation.VatTaxAuthGeoID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productstore.FieldVatTaxAuthGeoID,
		})
		_node.VatTaxAuthGeoID = value
	}
	if value, ok := psc.mutation.VatTaxAuthPartyID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productstore.FieldVatTaxAuthPartyID,
		})
		_node.VatTaxAuthPartyID = value
	}
	if value, ok := psc.mutation.EnableAutoSuggestionList(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldEnableAutoSuggestionList,
		})
		_node.EnableAutoSuggestionList = value
	}
	if value, ok := psc.mutation.EnableDigProdUpload(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldEnableDigProdUpload,
		})
		_node.EnableDigProdUpload = value
	}
	if value, ok := psc.mutation.ProdSearchExcludeVariants(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldProdSearchExcludeVariants,
		})
		_node.ProdSearchExcludeVariants = value
	}
	if value, ok := psc.mutation.DigProdUploadCategoryID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productstore.FieldDigProdUploadCategoryID,
		})
		_node.DigProdUploadCategoryID = value
	}
	if value, ok := psc.mutation.AutoOrderCcTryExp(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldAutoOrderCcTryExp,
		})
		_node.AutoOrderCcTryExp = value
	}
	if value, ok := psc.mutation.AutoOrderCcTryOtherCards(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldAutoOrderCcTryOtherCards,
		})
		_node.AutoOrderCcTryOtherCards = value
	}
	if value, ok := psc.mutation.AutoOrderCcTryLaterNsf(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldAutoOrderCcTryLaterNsf,
		})
		_node.AutoOrderCcTryLaterNsf = value
	}
	if value, ok := psc.mutation.AutoOrderCcTryLaterMax(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productstore.FieldAutoOrderCcTryLaterMax,
		})
		_node.AutoOrderCcTryLaterMax = value
	}
	if value, ok := psc.mutation.StoreCreditValidDays(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productstore.FieldStoreCreditValidDays,
		})
		_node.StoreCreditValidDays = value
	}
	if value, ok := psc.mutation.AutoApproveInvoice(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldAutoApproveInvoice,
		})
		_node.AutoApproveInvoice = value
	}
	if value, ok := psc.mutation.AutoApproveOrder(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldAutoApproveOrder,
		})
		_node.AutoApproveOrder = value
	}
	if value, ok := psc.mutation.ShipIfCaptureFails(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldShipIfCaptureFails,
		})
		_node.ShipIfCaptureFails = value
	}
	if value, ok := psc.mutation.SetOwnerUponIssuance(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldSetOwnerUponIssuance,
		})
		_node.SetOwnerUponIssuance = value
	}
	if value, ok := psc.mutation.ReqReturnInventoryReceive(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldReqReturnInventoryReceive,
		})
		_node.ReqReturnInventoryReceive = value
	}
	if value, ok := psc.mutation.AddToCartRemoveIncompat(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldAddToCartRemoveIncompat,
		})
		_node.AddToCartRemoveIncompat = value
	}
	if value, ok := psc.mutation.AddToCartReplaceUpsell(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldAddToCartReplaceUpsell,
		})
		_node.AddToCartReplaceUpsell = value
	}
	if value, ok := psc.mutation.SplitPayPrefPerShpGrp(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldSplitPayPrefPerShpGrp,
		})
		_node.SplitPayPrefPerShpGrp = value
	}
	if value, ok := psc.mutation.ManagedByLot(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldManagedByLot,
		})
		_node.ManagedByLot = value
	}
	if value, ok := psc.mutation.ShowOutOfStockProducts(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldShowOutOfStockProducts,
		})
		_node.ShowOutOfStockProducts = value
	}
	if value, ok := psc.mutation.OrderDecimalQuantity(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldOrderDecimalQuantity,
		})
		_node.OrderDecimalQuantity = value
	}
	if value, ok := psc.mutation.AllowComment(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldAllowComment,
		})
		_node.AllowComment = value
	}
	if value, ok := psc.mutation.AllocateInventory(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldAllocateInventory,
		})
		_node.AllocateInventory = value
	}
	if nodes := psc.mutation.PrimaryProductStoreGroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productstore.PrimaryProductStoreGroupTable,
			Columns: []string{productstore.PrimaryProductStoreGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productstoregroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.product_store_group_primary_product_stores = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := psc.mutation.ReserveOrderEnumerationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productstore.ReserveOrderEnumerationTable,
			Columns: []string{productstore.ReserveOrderEnumerationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: enumeration.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.enumeration_reserve_order_product_stores = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := psc.mutation.RequirementMethodEnumerationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productstore.RequirementMethodEnumerationTable,
			Columns: []string{productstore.RequirementMethodEnumerationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: enumeration.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.enumeration_requirement_method_product_stores = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := psc.mutation.DefaultSalesChannelEnumerationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productstore.DefaultSalesChannelEnumerationTable,
			Columns: []string{productstore.DefaultSalesChannelEnumerationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: enumeration.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.enumeration_default_sales_channel_product_stores = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := psc.mutation.HeaderApprovedStatusItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productstore.HeaderApprovedStatusItemTable,
			Columns: []string{productstore.HeaderApprovedStatusItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.status_item_header_approved_product_stores = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := psc.mutation.ItemApprovedStatusItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productstore.ItemApprovedStatusItemTable,
			Columns: []string{productstore.ItemApprovedStatusItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.status_item_item_approved_product_stores = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := psc.mutation.DigitalItemApprovedStatusItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productstore.DigitalItemApprovedStatusItemTable,
			Columns: []string{productstore.DigitalItemApprovedStatusItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.status_item_digital_item_approved_product_stores = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := psc.mutation.HeaderDeclinedStatusItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productstore.HeaderDeclinedStatusItemTable,
			Columns: []string{productstore.HeaderDeclinedStatusItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.status_item_header_declined_product_stores = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := psc.mutation.ItemDeclinedStatusItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productstore.ItemDeclinedStatusItemTable,
			Columns: []string{productstore.ItemDeclinedStatusItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.status_item_item_declined_product_stores = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := psc.mutation.HeaderCancelStatusItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productstore.HeaderCancelStatusItemTable,
			Columns: []string{productstore.HeaderCancelStatusItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.status_item_header_cancel_product_stores = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := psc.mutation.ItemCancelStatusItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productstore.ItemCancelStatusItemTable,
			Columns: []string{productstore.ItemCancelStatusItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.status_item_item_cancel_product_stores = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := psc.mutation.StoreCreditAccountEnumerationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productstore.StoreCreditAccountEnumerationTable,
			Columns: []string{productstore.StoreCreditAccountEnumerationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: enumeration.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.enumeration_store_credit_account_product_stores = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := psc.mutation.OrderHeadersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productstore.OrderHeadersTable,
			Columns: []string{productstore.OrderHeadersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderheader.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := psc.mutation.ProductReviewsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productstore.ProductReviewsTable,
			Columns: []string{productstore.ProductReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productreview.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ProductStoreCreateBulk is the builder for creating many ProductStore entities in bulk.
type ProductStoreCreateBulk struct {
	config
	builders []*ProductStoreCreate
}

// Save creates the ProductStore entities in the database.
func (pscb *ProductStoreCreateBulk) Save(ctx context.Context) ([]*ProductStore, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pscb.builders))
	nodes := make([]*ProductStore, len(pscb.builders))
	mutators := make([]Mutator, len(pscb.builders))
	for i := range pscb.builders {
		func(i int, root context.Context) {
			builder := pscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProductStoreMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pscb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pscb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pscb *ProductStoreCreateBulk) SaveX(ctx context.Context) []*ProductStore {
	v, err := pscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
