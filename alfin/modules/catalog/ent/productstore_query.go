// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/enumeration"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/orderheader"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/predicate"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productreview"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productstore"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productstoregroup"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/statusitem"
)

// ProductStoreQuery is the builder for querying ProductStore entities.
type ProductStoreQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.ProductStore
	// eager-loading edges.
	withPrimaryProductStoreGroup       *ProductStoreGroupQuery
	withReserveOrderEnumeration        *EnumerationQuery
	withRequirementMethodEnumeration   *EnumerationQuery
	withDefaultSalesChannelEnumeration *EnumerationQuery
	withHeaderApprovedStatusItem       *StatusItemQuery
	withItemApprovedStatusItem         *StatusItemQuery
	withDigitalItemApprovedStatusItem  *StatusItemQuery
	withHeaderDeclinedStatusItem       *StatusItemQuery
	withItemDeclinedStatusItem         *StatusItemQuery
	withHeaderCancelStatusItem         *StatusItemQuery
	withItemCancelStatusItem           *StatusItemQuery
	withStoreCreditAccountEnumeration  *EnumerationQuery
	withOrderHeaders                   *OrderHeaderQuery
	withProductReviews                 *ProductReviewQuery
	withFKs                            bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ProductStoreQuery builder.
func (psq *ProductStoreQuery) Where(ps ...predicate.ProductStore) *ProductStoreQuery {
	psq.predicates = append(psq.predicates, ps...)
	return psq
}

// Limit adds a limit step to the query.
func (psq *ProductStoreQuery) Limit(limit int) *ProductStoreQuery {
	psq.limit = &limit
	return psq
}

// Offset adds an offset step to the query.
func (psq *ProductStoreQuery) Offset(offset int) *ProductStoreQuery {
	psq.offset = &offset
	return psq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (psq *ProductStoreQuery) Unique(unique bool) *ProductStoreQuery {
	psq.unique = &unique
	return psq
}

// Order adds an order step to the query.
func (psq *ProductStoreQuery) Order(o ...OrderFunc) *ProductStoreQuery {
	psq.order = append(psq.order, o...)
	return psq
}

// QueryPrimaryProductStoreGroup chains the current query on the "primary_product_store_group" edge.
func (psq *ProductStoreQuery) QueryPrimaryProductStoreGroup() *ProductStoreGroupQuery {
	query := &ProductStoreGroupQuery{config: psq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := psq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := psq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(productstore.Table, productstore.FieldID, selector),
			sqlgraph.To(productstoregroup.Table, productstoregroup.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, productstore.PrimaryProductStoreGroupTable, productstore.PrimaryProductStoreGroupColumn),
		)
		fromU = sqlgraph.SetNeighbors(psq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryReserveOrderEnumeration chains the current query on the "reserve_order_enumeration" edge.
func (psq *ProductStoreQuery) QueryReserveOrderEnumeration() *EnumerationQuery {
	query := &EnumerationQuery{config: psq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := psq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := psq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(productstore.Table, productstore.FieldID, selector),
			sqlgraph.To(enumeration.Table, enumeration.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, productstore.ReserveOrderEnumerationTable, productstore.ReserveOrderEnumerationColumn),
		)
		fromU = sqlgraph.SetNeighbors(psq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRequirementMethodEnumeration chains the current query on the "requirement_method_enumeration" edge.
func (psq *ProductStoreQuery) QueryRequirementMethodEnumeration() *EnumerationQuery {
	query := &EnumerationQuery{config: psq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := psq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := psq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(productstore.Table, productstore.FieldID, selector),
			sqlgraph.To(enumeration.Table, enumeration.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, productstore.RequirementMethodEnumerationTable, productstore.RequirementMethodEnumerationColumn),
		)
		fromU = sqlgraph.SetNeighbors(psq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDefaultSalesChannelEnumeration chains the current query on the "default_sales_channel_enumeration" edge.
func (psq *ProductStoreQuery) QueryDefaultSalesChannelEnumeration() *EnumerationQuery {
	query := &EnumerationQuery{config: psq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := psq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := psq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(productstore.Table, productstore.FieldID, selector),
			sqlgraph.To(enumeration.Table, enumeration.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, productstore.DefaultSalesChannelEnumerationTable, productstore.DefaultSalesChannelEnumerationColumn),
		)
		fromU = sqlgraph.SetNeighbors(psq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryHeaderApprovedStatusItem chains the current query on the "header_approved_status_item" edge.
func (psq *ProductStoreQuery) QueryHeaderApprovedStatusItem() *StatusItemQuery {
	query := &StatusItemQuery{config: psq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := psq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := psq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(productstore.Table, productstore.FieldID, selector),
			sqlgraph.To(statusitem.Table, statusitem.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, productstore.HeaderApprovedStatusItemTable, productstore.HeaderApprovedStatusItemColumn),
		)
		fromU = sqlgraph.SetNeighbors(psq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryItemApprovedStatusItem chains the current query on the "item_approved_status_item" edge.
func (psq *ProductStoreQuery) QueryItemApprovedStatusItem() *StatusItemQuery {
	query := &StatusItemQuery{config: psq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := psq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := psq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(productstore.Table, productstore.FieldID, selector),
			sqlgraph.To(statusitem.Table, statusitem.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, productstore.ItemApprovedStatusItemTable, productstore.ItemApprovedStatusItemColumn),
		)
		fromU = sqlgraph.SetNeighbors(psq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDigitalItemApprovedStatusItem chains the current query on the "digital_item_approved_status_item" edge.
func (psq *ProductStoreQuery) QueryDigitalItemApprovedStatusItem() *StatusItemQuery {
	query := &StatusItemQuery{config: psq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := psq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := psq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(productstore.Table, productstore.FieldID, selector),
			sqlgraph.To(statusitem.Table, statusitem.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, productstore.DigitalItemApprovedStatusItemTable, productstore.DigitalItemApprovedStatusItemColumn),
		)
		fromU = sqlgraph.SetNeighbors(psq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryHeaderDeclinedStatusItem chains the current query on the "header_declined_status_item" edge.
func (psq *ProductStoreQuery) QueryHeaderDeclinedStatusItem() *StatusItemQuery {
	query := &StatusItemQuery{config: psq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := psq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := psq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(productstore.Table, productstore.FieldID, selector),
			sqlgraph.To(statusitem.Table, statusitem.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, productstore.HeaderDeclinedStatusItemTable, productstore.HeaderDeclinedStatusItemColumn),
		)
		fromU = sqlgraph.SetNeighbors(psq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryItemDeclinedStatusItem chains the current query on the "item_declined_status_item" edge.
func (psq *ProductStoreQuery) QueryItemDeclinedStatusItem() *StatusItemQuery {
	query := &StatusItemQuery{config: psq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := psq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := psq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(productstore.Table, productstore.FieldID, selector),
			sqlgraph.To(statusitem.Table, statusitem.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, productstore.ItemDeclinedStatusItemTable, productstore.ItemDeclinedStatusItemColumn),
		)
		fromU = sqlgraph.SetNeighbors(psq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryHeaderCancelStatusItem chains the current query on the "header_cancel_status_item" edge.
func (psq *ProductStoreQuery) QueryHeaderCancelStatusItem() *StatusItemQuery {
	query := &StatusItemQuery{config: psq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := psq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := psq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(productstore.Table, productstore.FieldID, selector),
			sqlgraph.To(statusitem.Table, statusitem.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, productstore.HeaderCancelStatusItemTable, productstore.HeaderCancelStatusItemColumn),
		)
		fromU = sqlgraph.SetNeighbors(psq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryItemCancelStatusItem chains the current query on the "item_cancel_status_item" edge.
func (psq *ProductStoreQuery) QueryItemCancelStatusItem() *StatusItemQuery {
	query := &StatusItemQuery{config: psq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := psq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := psq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(productstore.Table, productstore.FieldID, selector),
			sqlgraph.To(statusitem.Table, statusitem.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, productstore.ItemCancelStatusItemTable, productstore.ItemCancelStatusItemColumn),
		)
		fromU = sqlgraph.SetNeighbors(psq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryStoreCreditAccountEnumeration chains the current query on the "store_credit_account_enumeration" edge.
func (psq *ProductStoreQuery) QueryStoreCreditAccountEnumeration() *EnumerationQuery {
	query := &EnumerationQuery{config: psq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := psq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := psq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(productstore.Table, productstore.FieldID, selector),
			sqlgraph.To(enumeration.Table, enumeration.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, productstore.StoreCreditAccountEnumerationTable, productstore.StoreCreditAccountEnumerationColumn),
		)
		fromU = sqlgraph.SetNeighbors(psq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOrderHeaders chains the current query on the "order_headers" edge.
func (psq *ProductStoreQuery) QueryOrderHeaders() *OrderHeaderQuery {
	query := &OrderHeaderQuery{config: psq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := psq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := psq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(productstore.Table, productstore.FieldID, selector),
			sqlgraph.To(orderheader.Table, orderheader.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, productstore.OrderHeadersTable, productstore.OrderHeadersColumn),
		)
		fromU = sqlgraph.SetNeighbors(psq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProductReviews chains the current query on the "product_reviews" edge.
func (psq *ProductStoreQuery) QueryProductReviews() *ProductReviewQuery {
	query := &ProductReviewQuery{config: psq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := psq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := psq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(productstore.Table, productstore.FieldID, selector),
			sqlgraph.To(productreview.Table, productreview.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, productstore.ProductReviewsTable, productstore.ProductReviewsColumn),
		)
		fromU = sqlgraph.SetNeighbors(psq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ProductStore entity from the query.
// Returns a *NotFoundError when no ProductStore was found.
func (psq *ProductStoreQuery) First(ctx context.Context) (*ProductStore, error) {
	nodes, err := psq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{productstore.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (psq *ProductStoreQuery) FirstX(ctx context.Context) *ProductStore {
	node, err := psq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ProductStore ID from the query.
// Returns a *NotFoundError when no ProductStore ID was found.
func (psq *ProductStoreQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = psq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{productstore.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (psq *ProductStoreQuery) FirstIDX(ctx context.Context) int {
	id, err := psq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ProductStore entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one ProductStore entity is not found.
// Returns a *NotFoundError when no ProductStore entities are found.
func (psq *ProductStoreQuery) Only(ctx context.Context) (*ProductStore, error) {
	nodes, err := psq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{productstore.Label}
	default:
		return nil, &NotSingularError{productstore.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (psq *ProductStoreQuery) OnlyX(ctx context.Context) *ProductStore {
	node, err := psq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ProductStore ID in the query.
// Returns a *NotSingularError when exactly one ProductStore ID is not found.
// Returns a *NotFoundError when no entities are found.
func (psq *ProductStoreQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = psq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{productstore.Label}
	default:
		err = &NotSingularError{productstore.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (psq *ProductStoreQuery) OnlyIDX(ctx context.Context) int {
	id, err := psq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ProductStores.
func (psq *ProductStoreQuery) All(ctx context.Context) ([]*ProductStore, error) {
	if err := psq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return psq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (psq *ProductStoreQuery) AllX(ctx context.Context) []*ProductStore {
	nodes, err := psq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ProductStore IDs.
func (psq *ProductStoreQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := psq.Select(productstore.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (psq *ProductStoreQuery) IDsX(ctx context.Context) []int {
	ids, err := psq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (psq *ProductStoreQuery) Count(ctx context.Context) (int, error) {
	if err := psq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return psq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (psq *ProductStoreQuery) CountX(ctx context.Context) int {
	count, err := psq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (psq *ProductStoreQuery) Exist(ctx context.Context) (bool, error) {
	if err := psq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return psq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (psq *ProductStoreQuery) ExistX(ctx context.Context) bool {
	exist, err := psq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ProductStoreQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (psq *ProductStoreQuery) Clone() *ProductStoreQuery {
	if psq == nil {
		return nil
	}
	return &ProductStoreQuery{
		config:                             psq.config,
		limit:                              psq.limit,
		offset:                             psq.offset,
		order:                              append([]OrderFunc{}, psq.order...),
		predicates:                         append([]predicate.ProductStore{}, psq.predicates...),
		withPrimaryProductStoreGroup:       psq.withPrimaryProductStoreGroup.Clone(),
		withReserveOrderEnumeration:        psq.withReserveOrderEnumeration.Clone(),
		withRequirementMethodEnumeration:   psq.withRequirementMethodEnumeration.Clone(),
		withDefaultSalesChannelEnumeration: psq.withDefaultSalesChannelEnumeration.Clone(),
		withHeaderApprovedStatusItem:       psq.withHeaderApprovedStatusItem.Clone(),
		withItemApprovedStatusItem:         psq.withItemApprovedStatusItem.Clone(),
		withDigitalItemApprovedStatusItem:  psq.withDigitalItemApprovedStatusItem.Clone(),
		withHeaderDeclinedStatusItem:       psq.withHeaderDeclinedStatusItem.Clone(),
		withItemDeclinedStatusItem:         psq.withItemDeclinedStatusItem.Clone(),
		withHeaderCancelStatusItem:         psq.withHeaderCancelStatusItem.Clone(),
		withItemCancelStatusItem:           psq.withItemCancelStatusItem.Clone(),
		withStoreCreditAccountEnumeration:  psq.withStoreCreditAccountEnumeration.Clone(),
		withOrderHeaders:                   psq.withOrderHeaders.Clone(),
		withProductReviews:                 psq.withProductReviews.Clone(),
		// clone intermediate query.
		sql:  psq.sql.Clone(),
		path: psq.path,
	}
}

// WithPrimaryProductStoreGroup tells the query-builder to eager-load the nodes that are connected to
// the "primary_product_store_group" edge. The optional arguments are used to configure the query builder of the edge.
func (psq *ProductStoreQuery) WithPrimaryProductStoreGroup(opts ...func(*ProductStoreGroupQuery)) *ProductStoreQuery {
	query := &ProductStoreGroupQuery{config: psq.config}
	for _, opt := range opts {
		opt(query)
	}
	psq.withPrimaryProductStoreGroup = query
	return psq
}

// WithReserveOrderEnumeration tells the query-builder to eager-load the nodes that are connected to
// the "reserve_order_enumeration" edge. The optional arguments are used to configure the query builder of the edge.
func (psq *ProductStoreQuery) WithReserveOrderEnumeration(opts ...func(*EnumerationQuery)) *ProductStoreQuery {
	query := &EnumerationQuery{config: psq.config}
	for _, opt := range opts {
		opt(query)
	}
	psq.withReserveOrderEnumeration = query
	return psq
}

// WithRequirementMethodEnumeration tells the query-builder to eager-load the nodes that are connected to
// the "requirement_method_enumeration" edge. The optional arguments are used to configure the query builder of the edge.
func (psq *ProductStoreQuery) WithRequirementMethodEnumeration(opts ...func(*EnumerationQuery)) *ProductStoreQuery {
	query := &EnumerationQuery{config: psq.config}
	for _, opt := range opts {
		opt(query)
	}
	psq.withRequirementMethodEnumeration = query
	return psq
}

// WithDefaultSalesChannelEnumeration tells the query-builder to eager-load the nodes that are connected to
// the "default_sales_channel_enumeration" edge. The optional arguments are used to configure the query builder of the edge.
func (psq *ProductStoreQuery) WithDefaultSalesChannelEnumeration(opts ...func(*EnumerationQuery)) *ProductStoreQuery {
	query := &EnumerationQuery{config: psq.config}
	for _, opt := range opts {
		opt(query)
	}
	psq.withDefaultSalesChannelEnumeration = query
	return psq
}

// WithHeaderApprovedStatusItem tells the query-builder to eager-load the nodes that are connected to
// the "header_approved_status_item" edge. The optional arguments are used to configure the query builder of the edge.
func (psq *ProductStoreQuery) WithHeaderApprovedStatusItem(opts ...func(*StatusItemQuery)) *ProductStoreQuery {
	query := &StatusItemQuery{config: psq.config}
	for _, opt := range opts {
		opt(query)
	}
	psq.withHeaderApprovedStatusItem = query
	return psq
}

// WithItemApprovedStatusItem tells the query-builder to eager-load the nodes that are connected to
// the "item_approved_status_item" edge. The optional arguments are used to configure the query builder of the edge.
func (psq *ProductStoreQuery) WithItemApprovedStatusItem(opts ...func(*StatusItemQuery)) *ProductStoreQuery {
	query := &StatusItemQuery{config: psq.config}
	for _, opt := range opts {
		opt(query)
	}
	psq.withItemApprovedStatusItem = query
	return psq
}

// WithDigitalItemApprovedStatusItem tells the query-builder to eager-load the nodes that are connected to
// the "digital_item_approved_status_item" edge. The optional arguments are used to configure the query builder of the edge.
func (psq *ProductStoreQuery) WithDigitalItemApprovedStatusItem(opts ...func(*StatusItemQuery)) *ProductStoreQuery {
	query := &StatusItemQuery{config: psq.config}
	for _, opt := range opts {
		opt(query)
	}
	psq.withDigitalItemApprovedStatusItem = query
	return psq
}

// WithHeaderDeclinedStatusItem tells the query-builder to eager-load the nodes that are connected to
// the "header_declined_status_item" edge. The optional arguments are used to configure the query builder of the edge.
func (psq *ProductStoreQuery) WithHeaderDeclinedStatusItem(opts ...func(*StatusItemQuery)) *ProductStoreQuery {
	query := &StatusItemQuery{config: psq.config}
	for _, opt := range opts {
		opt(query)
	}
	psq.withHeaderDeclinedStatusItem = query
	return psq
}

// WithItemDeclinedStatusItem tells the query-builder to eager-load the nodes that are connected to
// the "item_declined_status_item" edge. The optional arguments are used to configure the query builder of the edge.
func (psq *ProductStoreQuery) WithItemDeclinedStatusItem(opts ...func(*StatusItemQuery)) *ProductStoreQuery {
	query := &StatusItemQuery{config: psq.config}
	for _, opt := range opts {
		opt(query)
	}
	psq.withItemDeclinedStatusItem = query
	return psq
}

// WithHeaderCancelStatusItem tells the query-builder to eager-load the nodes that are connected to
// the "header_cancel_status_item" edge. The optional arguments are used to configure the query builder of the edge.
func (psq *ProductStoreQuery) WithHeaderCancelStatusItem(opts ...func(*StatusItemQuery)) *ProductStoreQuery {
	query := &StatusItemQuery{config: psq.config}
	for _, opt := range opts {
		opt(query)
	}
	psq.withHeaderCancelStatusItem = query
	return psq
}

// WithItemCancelStatusItem tells the query-builder to eager-load the nodes that are connected to
// the "item_cancel_status_item" edge. The optional arguments are used to configure the query builder of the edge.
func (psq *ProductStoreQuery) WithItemCancelStatusItem(opts ...func(*StatusItemQuery)) *ProductStoreQuery {
	query := &StatusItemQuery{config: psq.config}
	for _, opt := range opts {
		opt(query)
	}
	psq.withItemCancelStatusItem = query
	return psq
}

// WithStoreCreditAccountEnumeration tells the query-builder to eager-load the nodes that are connected to
// the "store_credit_account_enumeration" edge. The optional arguments are used to configure the query builder of the edge.
func (psq *ProductStoreQuery) WithStoreCreditAccountEnumeration(opts ...func(*EnumerationQuery)) *ProductStoreQuery {
	query := &EnumerationQuery{config: psq.config}
	for _, opt := range opts {
		opt(query)
	}
	psq.withStoreCreditAccountEnumeration = query
	return psq
}

// WithOrderHeaders tells the query-builder to eager-load the nodes that are connected to
// the "order_headers" edge. The optional arguments are used to configure the query builder of the edge.
func (psq *ProductStoreQuery) WithOrderHeaders(opts ...func(*OrderHeaderQuery)) *ProductStoreQuery {
	query := &OrderHeaderQuery{config: psq.config}
	for _, opt := range opts {
		opt(query)
	}
	psq.withOrderHeaders = query
	return psq
}

// WithProductReviews tells the query-builder to eager-load the nodes that are connected to
// the "product_reviews" edge. The optional arguments are used to configure the query builder of the edge.
func (psq *ProductStoreQuery) WithProductReviews(opts ...func(*ProductReviewQuery)) *ProductStoreQuery {
	query := &ProductReviewQuery{config: psq.config}
	for _, opt := range opts {
		opt(query)
	}
	psq.withProductReviews = query
	return psq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ProductStore.Query().
//		GroupBy(productstore.FieldCreateTime).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (psq *ProductStoreQuery) GroupBy(field string, fields ...string) *ProductStoreGroupBy {
	group := &ProductStoreGroupBy{config: psq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := psq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return psq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//	}
//
//	client.ProductStore.Query().
//		Select(productstore.FieldCreateTime).
//		Scan(ctx, &v)
//
func (psq *ProductStoreQuery) Select(field string, fields ...string) *ProductStoreSelect {
	psq.fields = append([]string{field}, fields...)
	return &ProductStoreSelect{ProductStoreQuery: psq}
}

func (psq *ProductStoreQuery) prepareQuery(ctx context.Context) error {
	for _, f := range psq.fields {
		if !productstore.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if psq.path != nil {
		prev, err := psq.path(ctx)
		if err != nil {
			return err
		}
		psq.sql = prev
	}
	return nil
}

func (psq *ProductStoreQuery) sqlAll(ctx context.Context) ([]*ProductStore, error) {
	var (
		nodes       = []*ProductStore{}
		withFKs     = psq.withFKs
		_spec       = psq.querySpec()
		loadedTypes = [14]bool{
			psq.withPrimaryProductStoreGroup != nil,
			psq.withReserveOrderEnumeration != nil,
			psq.withRequirementMethodEnumeration != nil,
			psq.withDefaultSalesChannelEnumeration != nil,
			psq.withHeaderApprovedStatusItem != nil,
			psq.withItemApprovedStatusItem != nil,
			psq.withDigitalItemApprovedStatusItem != nil,
			psq.withHeaderDeclinedStatusItem != nil,
			psq.withItemDeclinedStatusItem != nil,
			psq.withHeaderCancelStatusItem != nil,
			psq.withItemCancelStatusItem != nil,
			psq.withStoreCreditAccountEnumeration != nil,
			psq.withOrderHeaders != nil,
			psq.withProductReviews != nil,
		}
	)
	if psq.withPrimaryProductStoreGroup != nil || psq.withReserveOrderEnumeration != nil || psq.withRequirementMethodEnumeration != nil || psq.withDefaultSalesChannelEnumeration != nil || psq.withHeaderApprovedStatusItem != nil || psq.withItemApprovedStatusItem != nil || psq.withDigitalItemApprovedStatusItem != nil || psq.withHeaderDeclinedStatusItem != nil || psq.withItemDeclinedStatusItem != nil || psq.withHeaderCancelStatusItem != nil || psq.withItemCancelStatusItem != nil || psq.withStoreCreditAccountEnumeration != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, productstore.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &ProductStore{config: psq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, psq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := psq.withPrimaryProductStoreGroup; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*ProductStore)
		for i := range nodes {
			if nodes[i].product_store_group_primary_product_stores == nil {
				continue
			}
			fk := *nodes[i].product_store_group_primary_product_stores
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(productstoregroup.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "product_store_group_primary_product_stores" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.PrimaryProductStoreGroup = n
			}
		}
	}

	if query := psq.withReserveOrderEnumeration; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*ProductStore)
		for i := range nodes {
			if nodes[i].enumeration_reserve_order_product_stores == nil {
				continue
			}
			fk := *nodes[i].enumeration_reserve_order_product_stores
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(enumeration.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "enumeration_reserve_order_product_stores" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.ReserveOrderEnumeration = n
			}
		}
	}

	if query := psq.withRequirementMethodEnumeration; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*ProductStore)
		for i := range nodes {
			if nodes[i].enumeration_requirement_method_product_stores == nil {
				continue
			}
			fk := *nodes[i].enumeration_requirement_method_product_stores
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(enumeration.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "enumeration_requirement_method_product_stores" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.RequirementMethodEnumeration = n
			}
		}
	}

	if query := psq.withDefaultSalesChannelEnumeration; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*ProductStore)
		for i := range nodes {
			if nodes[i].enumeration_default_sales_channel_product_stores == nil {
				continue
			}
			fk := *nodes[i].enumeration_default_sales_channel_product_stores
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(enumeration.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "enumeration_default_sales_channel_product_stores" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.DefaultSalesChannelEnumeration = n
			}
		}
	}

	if query := psq.withHeaderApprovedStatusItem; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*ProductStore)
		for i := range nodes {
			if nodes[i].status_item_header_approved_product_stores == nil {
				continue
			}
			fk := *nodes[i].status_item_header_approved_product_stores
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(statusitem.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "status_item_header_approved_product_stores" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.HeaderApprovedStatusItem = n
			}
		}
	}

	if query := psq.withItemApprovedStatusItem; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*ProductStore)
		for i := range nodes {
			if nodes[i].status_item_item_approved_product_stores == nil {
				continue
			}
			fk := *nodes[i].status_item_item_approved_product_stores
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(statusitem.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "status_item_item_approved_product_stores" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.ItemApprovedStatusItem = n
			}
		}
	}

	if query := psq.withDigitalItemApprovedStatusItem; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*ProductStore)
		for i := range nodes {
			if nodes[i].status_item_digital_item_approved_product_stores == nil {
				continue
			}
			fk := *nodes[i].status_item_digital_item_approved_product_stores
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(statusitem.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "status_item_digital_item_approved_product_stores" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.DigitalItemApprovedStatusItem = n
			}
		}
	}

	if query := psq.withHeaderDeclinedStatusItem; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*ProductStore)
		for i := range nodes {
			if nodes[i].status_item_header_declined_product_stores == nil {
				continue
			}
			fk := *nodes[i].status_item_header_declined_product_stores
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(statusitem.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "status_item_header_declined_product_stores" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.HeaderDeclinedStatusItem = n
			}
		}
	}

	if query := psq.withItemDeclinedStatusItem; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*ProductStore)
		for i := range nodes {
			if nodes[i].status_item_item_declined_product_stores == nil {
				continue
			}
			fk := *nodes[i].status_item_item_declined_product_stores
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(statusitem.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "status_item_item_declined_product_stores" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.ItemDeclinedStatusItem = n
			}
		}
	}

	if query := psq.withHeaderCancelStatusItem; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*ProductStore)
		for i := range nodes {
			if nodes[i].status_item_header_cancel_product_stores == nil {
				continue
			}
			fk := *nodes[i].status_item_header_cancel_product_stores
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(statusitem.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "status_item_header_cancel_product_stores" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.HeaderCancelStatusItem = n
			}
		}
	}

	if query := psq.withItemCancelStatusItem; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*ProductStore)
		for i := range nodes {
			if nodes[i].status_item_item_cancel_product_stores == nil {
				continue
			}
			fk := *nodes[i].status_item_item_cancel_product_stores
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(statusitem.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "status_item_item_cancel_product_stores" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.ItemCancelStatusItem = n
			}
		}
	}

	if query := psq.withStoreCreditAccountEnumeration; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*ProductStore)
		for i := range nodes {
			if nodes[i].enumeration_store_credit_account_product_stores == nil {
				continue
			}
			fk := *nodes[i].enumeration_store_credit_account_product_stores
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(enumeration.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "enumeration_store_credit_account_product_stores" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.StoreCreditAccountEnumeration = n
			}
		}
	}

	if query := psq.withOrderHeaders; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*ProductStore)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.OrderHeaders = []*OrderHeader{}
		}
		query.withFKs = true
		query.Where(predicate.OrderHeader(func(s *sql.Selector) {
			s.Where(sql.InValues(productstore.OrderHeadersColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.product_store_order_headers
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "product_store_order_headers" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "product_store_order_headers" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.OrderHeaders = append(node.Edges.OrderHeaders, n)
		}
	}

	if query := psq.withProductReviews; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*ProductStore)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.ProductReviews = []*ProductReview{}
		}
		query.withFKs = true
		query.Where(predicate.ProductReview(func(s *sql.Selector) {
			s.Where(sql.InValues(productstore.ProductReviewsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.product_store_product_reviews
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "product_store_product_reviews" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "product_store_product_reviews" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.ProductReviews = append(node.Edges.ProductReviews, n)
		}
	}

	return nodes, nil
}

func (psq *ProductStoreQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := psq.querySpec()
	return sqlgraph.CountNodes(ctx, psq.driver, _spec)
}

func (psq *ProductStoreQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := psq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (psq *ProductStoreQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   productstore.Table,
			Columns: productstore.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: productstore.FieldID,
			},
		},
		From:   psq.sql,
		Unique: true,
	}
	if unique := psq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := psq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, productstore.FieldID)
		for i := range fields {
			if fields[i] != productstore.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := psq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := psq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := psq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := psq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (psq *ProductStoreQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(psq.driver.Dialect())
	t1 := builder.Table(productstore.Table)
	columns := psq.fields
	if len(columns) == 0 {
		columns = productstore.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if psq.sql != nil {
		selector = psq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	for _, p := range psq.predicates {
		p(selector)
	}
	for _, p := range psq.order {
		p(selector)
	}
	if offset := psq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := psq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ProductStoreGroupBy is the group-by builder for ProductStore entities.
type ProductStoreGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (psgb *ProductStoreGroupBy) Aggregate(fns ...AggregateFunc) *ProductStoreGroupBy {
	psgb.fns = append(psgb.fns, fns...)
	return psgb
}

// Scan applies the group-by query and scans the result into the given value.
func (psgb *ProductStoreGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := psgb.path(ctx)
	if err != nil {
		return err
	}
	psgb.sql = query
	return psgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (psgb *ProductStoreGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := psgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (psgb *ProductStoreGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(psgb.fields) > 1 {
		return nil, errors.New("ent: ProductStoreGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := psgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (psgb *ProductStoreGroupBy) StringsX(ctx context.Context) []string {
	v, err := psgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (psgb *ProductStoreGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = psgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{productstore.Label}
	default:
		err = fmt.Errorf("ent: ProductStoreGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (psgb *ProductStoreGroupBy) StringX(ctx context.Context) string {
	v, err := psgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (psgb *ProductStoreGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(psgb.fields) > 1 {
		return nil, errors.New("ent: ProductStoreGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := psgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (psgb *ProductStoreGroupBy) IntsX(ctx context.Context) []int {
	v, err := psgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (psgb *ProductStoreGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = psgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{productstore.Label}
	default:
		err = fmt.Errorf("ent: ProductStoreGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (psgb *ProductStoreGroupBy) IntX(ctx context.Context) int {
	v, err := psgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (psgb *ProductStoreGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(psgb.fields) > 1 {
		return nil, errors.New("ent: ProductStoreGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := psgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (psgb *ProductStoreGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := psgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (psgb *ProductStoreGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = psgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{productstore.Label}
	default:
		err = fmt.Errorf("ent: ProductStoreGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (psgb *ProductStoreGroupBy) Float64X(ctx context.Context) float64 {
	v, err := psgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (psgb *ProductStoreGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(psgb.fields) > 1 {
		return nil, errors.New("ent: ProductStoreGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := psgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (psgb *ProductStoreGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := psgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (psgb *ProductStoreGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = psgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{productstore.Label}
	default:
		err = fmt.Errorf("ent: ProductStoreGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (psgb *ProductStoreGroupBy) BoolX(ctx context.Context) bool {
	v, err := psgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (psgb *ProductStoreGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range psgb.fields {
		if !productstore.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := psgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := psgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (psgb *ProductStoreGroupBy) sqlQuery() *sql.Selector {
	selector := psgb.sql.Select()
	aggregation := make([]string, 0, len(psgb.fns))
	for _, fn := range psgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(psgb.fields)+len(psgb.fns))
		for _, f := range psgb.fields {
			columns = append(columns, selector.C(f))
		}
		for _, c := range aggregation {
			columns = append(columns, c)
		}
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(psgb.fields...)...)
}

// ProductStoreSelect is the builder for selecting fields of ProductStore entities.
type ProductStoreSelect struct {
	*ProductStoreQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (pss *ProductStoreSelect) Scan(ctx context.Context, v interface{}) error {
	if err := pss.prepareQuery(ctx); err != nil {
		return err
	}
	pss.sql = pss.ProductStoreQuery.sqlQuery(ctx)
	return pss.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (pss *ProductStoreSelect) ScanX(ctx context.Context, v interface{}) {
	if err := pss.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (pss *ProductStoreSelect) Strings(ctx context.Context) ([]string, error) {
	if len(pss.fields) > 1 {
		return nil, errors.New("ent: ProductStoreSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := pss.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (pss *ProductStoreSelect) StringsX(ctx context.Context) []string {
	v, err := pss.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (pss *ProductStoreSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = pss.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{productstore.Label}
	default:
		err = fmt.Errorf("ent: ProductStoreSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (pss *ProductStoreSelect) StringX(ctx context.Context) string {
	v, err := pss.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (pss *ProductStoreSelect) Ints(ctx context.Context) ([]int, error) {
	if len(pss.fields) > 1 {
		return nil, errors.New("ent: ProductStoreSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := pss.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (pss *ProductStoreSelect) IntsX(ctx context.Context) []int {
	v, err := pss.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (pss *ProductStoreSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = pss.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{productstore.Label}
	default:
		err = fmt.Errorf("ent: ProductStoreSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (pss *ProductStoreSelect) IntX(ctx context.Context) int {
	v, err := pss.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (pss *ProductStoreSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(pss.fields) > 1 {
		return nil, errors.New("ent: ProductStoreSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := pss.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (pss *ProductStoreSelect) Float64sX(ctx context.Context) []float64 {
	v, err := pss.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (pss *ProductStoreSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = pss.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{productstore.Label}
	default:
		err = fmt.Errorf("ent: ProductStoreSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (pss *ProductStoreSelect) Float64X(ctx context.Context) float64 {
	v, err := pss.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (pss *ProductStoreSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(pss.fields) > 1 {
		return nil, errors.New("ent: ProductStoreSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := pss.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (pss *ProductStoreSelect) BoolsX(ctx context.Context) []bool {
	v, err := pss.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (pss *ProductStoreSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = pss.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{productstore.Label}
	default:
		err = fmt.Errorf("ent: ProductStoreSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (pss *ProductStoreSelect) BoolX(ctx context.Context) bool {
	v, err := pss.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (pss *ProductStoreSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := pss.sql.Query()
	if err := pss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
