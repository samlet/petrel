// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/enumeration"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/orderheader"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/predicate"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productreview"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productstore"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productstoregroup"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/statusitem"
)

// ProductStoreUpdate is the builder for updating ProductStore entities.
type ProductStoreUpdate struct {
	config
	hooks    []Hook
	mutation *ProductStoreMutation
}

// Where adds a new predicate for the ProductStoreUpdate builder.
func (psu *ProductStoreUpdate) Where(ps ...predicate.ProductStore) *ProductStoreUpdate {
	psu.mutation.predicates = append(psu.mutation.predicates, ps...)
	return psu
}

// SetStringRef sets the "string_ref" field.
func (psu *ProductStoreUpdate) SetStringRef(s string) *ProductStoreUpdate {
	psu.mutation.SetStringRef(s)
	return psu
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (psu *ProductStoreUpdate) SetNillableStringRef(s *string) *ProductStoreUpdate {
	if s != nil {
		psu.SetStringRef(*s)
	}
	return psu
}

// ClearStringRef clears the value of the "string_ref" field.
func (psu *ProductStoreUpdate) ClearStringRef() *ProductStoreUpdate {
	psu.mutation.ClearStringRef()
	return psu
}

// SetStoreName sets the "store_name" field.
func (psu *ProductStoreUpdate) SetStoreName(s string) *ProductStoreUpdate {
	psu.mutation.SetStoreName(s)
	return psu
}

// SetNillableStoreName sets the "store_name" field if the given value is not nil.
func (psu *ProductStoreUpdate) SetNillableStoreName(s *string) *ProductStoreUpdate {
	if s != nil {
		psu.SetStoreName(*s)
	}
	return psu
}

// ClearStoreName clears the value of the "store_name" field.
func (psu *ProductStoreUpdate) ClearStoreName() *ProductStoreUpdate {
	psu.mutation.ClearStoreName()
	return psu
}

// SetCompanyName sets the "company_name" field.
func (psu *ProductStoreUpdate) SetCompanyName(s string) *ProductStoreUpdate {
	psu.mutation.SetCompanyName(s)
	return psu
}

// SetNillableCompanyName sets the "company_name" field if the given value is not nil.
func (psu *ProductStoreUpdate) SetNillableCompanyName(s *string) *ProductStoreUpdate {
	if s != nil {
		psu.SetCompanyName(*s)
	}
	return psu
}

// ClearCompanyName clears the value of the "company_name" field.
func (psu *ProductStoreUpdate) ClearCompanyName() *ProductStoreUpdate {
	psu.mutation.ClearCompanyName()
	return psu
}

// SetTitle sets the "title" field.
func (psu *ProductStoreUpdate) SetTitle(s string) *ProductStoreUpdate {
	psu.mutation.SetTitle(s)
	return psu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (psu *ProductStoreUpdate) SetNillableTitle(s *string) *ProductStoreUpdate {
	if s != nil {
		psu.SetTitle(*s)
	}
	return psu
}

// ClearTitle clears the value of the "title" field.
func (psu *ProductStoreUpdate) ClearTitle() *ProductStoreUpdate {
	psu.mutation.ClearTitle()
	return psu
}

// SetSubtitle sets the "subtitle" field.
func (psu *ProductStoreUpdate) SetSubtitle(s string) *ProductStoreUpdate {
	psu.mutation.SetSubtitle(s)
	return psu
}

// SetNillableSubtitle sets the "subtitle" field if the given value is not nil.
func (psu *ProductStoreUpdate) SetNillableSubtitle(s *string) *ProductStoreUpdate {
	if s != nil {
		psu.SetSubtitle(*s)
	}
	return psu
}

// ClearSubtitle clears the value of the "subtitle" field.
func (psu *ProductStoreUpdate) ClearSubtitle() *ProductStoreUpdate {
	psu.mutation.ClearSubtitle()
	return psu
}

// SetPayToPartyID sets the "pay_to_party_id" field.
func (psu *ProductStoreUpdate) SetPayToPartyID(i int) *ProductStoreUpdate {
	psu.mutation.ResetPayToPartyID()
	psu.mutation.SetPayToPartyID(i)
	return psu
}

// SetNillablePayToPartyID sets the "pay_to_party_id" field if the given value is not nil.
func (psu *ProductStoreUpdate) SetNillablePayToPartyID(i *int) *ProductStoreUpdate {
	if i != nil {
		psu.SetPayToPartyID(*i)
	}
	return psu
}

// AddPayToPartyID adds i to the "pay_to_party_id" field.
func (psu *ProductStoreUpdate) AddPayToPartyID(i int) *ProductStoreUpdate {
	psu.mutation.AddPayToPartyID(i)
	return psu
}

// ClearPayToPartyID clears the value of the "pay_to_party_id" field.
func (psu *ProductStoreUpdate) ClearPayToPartyID() *ProductStoreUpdate {
	psu.mutation.ClearPayToPartyID()
	return psu
}

// SetDaysToCancelNonPay sets the "days_to_cancel_non_pay" field.
func (psu *ProductStoreUpdate) SetDaysToCancelNonPay(i int) *ProductStoreUpdate {
	psu.mutation.ResetDaysToCancelNonPay()
	psu.mutation.SetDaysToCancelNonPay(i)
	return psu
}

// SetNillableDaysToCancelNonPay sets the "days_to_cancel_non_pay" field if the given value is not nil.
func (psu *ProductStoreUpdate) SetNillableDaysToCancelNonPay(i *int) *ProductStoreUpdate {
	if i != nil {
		psu.SetDaysToCancelNonPay(*i)
	}
	return psu
}

// AddDaysToCancelNonPay adds i to the "days_to_cancel_non_pay" field.
func (psu *ProductStoreUpdate) AddDaysToCancelNonPay(i int) *ProductStoreUpdate {
	psu.mutation.AddDaysToCancelNonPay(i)
	return psu
}

// ClearDaysToCancelNonPay clears the value of the "days_to_cancel_non_pay" field.
func (psu *ProductStoreUpdate) ClearDaysToCancelNonPay() *ProductStoreUpdate {
	psu.mutation.ClearDaysToCancelNonPay()
	return psu
}

// SetManualAuthIsCapture sets the "manual_auth_is_capture" field.
func (psu *ProductStoreUpdate) SetManualAuthIsCapture(paic productstore.ManualAuthIsCapture) *ProductStoreUpdate {
	psu.mutation.SetManualAuthIsCapture(paic)
	return psu
}

// SetNillableManualAuthIsCapture sets the "manual_auth_is_capture" field if the given value is not nil.
func (psu *ProductStoreUpdate) SetNillableManualAuthIsCapture(paic *productstore.ManualAuthIsCapture) *ProductStoreUpdate {
	if paic != nil {
		psu.SetManualAuthIsCapture(*paic)
	}
	return psu
}

// ClearManualAuthIsCapture clears the value of the "manual_auth_is_capture" field.
func (psu *ProductStoreUpdate) ClearManualAuthIsCapture() *ProductStoreUpdate {
	psu.mutation.ClearManualAuthIsCapture()
	return psu
}

// SetProrateShipping sets the "prorate_shipping" field.
func (psu *ProductStoreUpdate) SetProrateShipping(ps productstore.ProrateShipping) *ProductStoreUpdate {
	psu.mutation.SetProrateShipping(ps)
	return psu
}

// SetNillableProrateShipping sets the "prorate_shipping" field if the given value is not nil.
func (psu *ProductStoreUpdate) SetNillableProrateShipping(ps *productstore.ProrateShipping) *ProductStoreUpdate {
	if ps != nil {
		psu.SetProrateShipping(*ps)
	}
	return psu
}

// ClearProrateShipping clears the value of the "prorate_shipping" field.
func (psu *ProductStoreUpdate) ClearProrateShipping() *ProductStoreUpdate {
	psu.mutation.ClearProrateShipping()
	return psu
}

// SetProrateTaxes sets the "prorate_taxes" field.
func (psu *ProductStoreUpdate) SetProrateTaxes(pt productstore.ProrateTaxes) *ProductStoreUpdate {
	psu.mutation.SetProrateTaxes(pt)
	return psu
}

// SetNillableProrateTaxes sets the "prorate_taxes" field if the given value is not nil.
func (psu *ProductStoreUpdate) SetNillableProrateTaxes(pt *productstore.ProrateTaxes) *ProductStoreUpdate {
	if pt != nil {
		psu.SetProrateTaxes(*pt)
	}
	return psu
}

// ClearProrateTaxes clears the value of the "prorate_taxes" field.
func (psu *ProductStoreUpdate) ClearProrateTaxes() *ProductStoreUpdate {
	psu.mutation.ClearProrateTaxes()
	return psu
}

// SetViewCartOnAdd sets the "view_cart_on_add" field.
func (psu *ProductStoreUpdate) SetViewCartOnAdd(pcoa productstore.ViewCartOnAdd) *ProductStoreUpdate {
	psu.mutation.SetViewCartOnAdd(pcoa)
	return psu
}

// SetNillableViewCartOnAdd sets the "view_cart_on_add" field if the given value is not nil.
func (psu *ProductStoreUpdate) SetNillableViewCartOnAdd(pcoa *productstore.ViewCartOnAdd) *ProductStoreUpdate {
	if pcoa != nil {
		psu.SetViewCartOnAdd(*pcoa)
	}
	return psu
}

// ClearViewCartOnAdd clears the value of the "view_cart_on_add" field.
func (psu *ProductStoreUpdate) ClearViewCartOnAdd() *ProductStoreUpdate {
	psu.mutation.ClearViewCartOnAdd()
	return psu
}

// SetAutoSaveCart sets the "auto_save_cart" field.
func (psu *ProductStoreUpdate) SetAutoSaveCart(psc productstore.AutoSaveCart) *ProductStoreUpdate {
	psu.mutation.SetAutoSaveCart(psc)
	return psu
}

// SetNillableAutoSaveCart sets the "auto_save_cart" field if the given value is not nil.
func (psu *ProductStoreUpdate) SetNillableAutoSaveCart(psc *productstore.AutoSaveCart) *ProductStoreUpdate {
	if psc != nil {
		psu.SetAutoSaveCart(*psc)
	}
	return psu
}

// ClearAutoSaveCart clears the value of the "auto_save_cart" field.
func (psu *ProductStoreUpdate) ClearAutoSaveCart() *ProductStoreUpdate {
	psu.mutation.ClearAutoSaveCart()
	return psu
}

// SetAutoApproveReviews sets the "auto_approve_reviews" field.
func (psu *ProductStoreUpdate) SetAutoApproveReviews(par productstore.AutoApproveReviews) *ProductStoreUpdate {
	psu.mutation.SetAutoApproveReviews(par)
	return psu
}

// SetNillableAutoApproveReviews sets the "auto_approve_reviews" field if the given value is not nil.
func (psu *ProductStoreUpdate) SetNillableAutoApproveReviews(par *productstore.AutoApproveReviews) *ProductStoreUpdate {
	if par != nil {
		psu.SetAutoApproveReviews(*par)
	}
	return psu
}

// ClearAutoApproveReviews clears the value of the "auto_approve_reviews" field.
func (psu *ProductStoreUpdate) ClearAutoApproveReviews() *ProductStoreUpdate {
	psu.mutation.ClearAutoApproveReviews()
	return psu
}

// SetIsDemoStore sets the "is_demo_store" field.
func (psu *ProductStoreUpdate) SetIsDemoStore(pds productstore.IsDemoStore) *ProductStoreUpdate {
	psu.mutation.SetIsDemoStore(pds)
	return psu
}

// SetNillableIsDemoStore sets the "is_demo_store" field if the given value is not nil.
func (psu *ProductStoreUpdate) SetNillableIsDemoStore(pds *productstore.IsDemoStore) *ProductStoreUpdate {
	if pds != nil {
		psu.SetIsDemoStore(*pds)
	}
	return psu
}

// ClearIsDemoStore clears the value of the "is_demo_store" field.
func (psu *ProductStoreUpdate) ClearIsDemoStore() *ProductStoreUpdate {
	psu.mutation.ClearIsDemoStore()
	return psu
}

// SetIsImmediatelyFulfilled sets the "is_immediately_fulfilled" field.
func (psu *ProductStoreUpdate) SetIsImmediatelyFulfilled(pif productstore.IsImmediatelyFulfilled) *ProductStoreUpdate {
	psu.mutation.SetIsImmediatelyFulfilled(pif)
	return psu
}

// SetNillableIsImmediatelyFulfilled sets the "is_immediately_fulfilled" field if the given value is not nil.
func (psu *ProductStoreUpdate) SetNillableIsImmediatelyFulfilled(pif *productstore.IsImmediatelyFulfilled) *ProductStoreUpdate {
	if pif != nil {
		psu.SetIsImmediatelyFulfilled(*pif)
	}
	return psu
}

// ClearIsImmediatelyFulfilled clears the value of the "is_immediately_fulfilled" field.
func (psu *ProductStoreUpdate) ClearIsImmediatelyFulfilled() *ProductStoreUpdate {
	psu.mutation.ClearIsImmediatelyFulfilled()
	return psu
}

// SetInventoryFacilityID sets the "inventory_facility_id" field.
func (psu *ProductStoreUpdate) SetInventoryFacilityID(i int) *ProductStoreUpdate {
	psu.mutation.ResetInventoryFacilityID()
	psu.mutation.SetInventoryFacilityID(i)
	return psu
}

// SetNillableInventoryFacilityID sets the "inventory_facility_id" field if the given value is not nil.
func (psu *ProductStoreUpdate) SetNillableInventoryFacilityID(i *int) *ProductStoreUpdate {
	if i != nil {
		psu.SetInventoryFacilityID(*i)
	}
	return psu
}

// AddInventoryFacilityID adds i to the "inventory_facility_id" field.
func (psu *ProductStoreUpdate) AddInventoryFacilityID(i int) *ProductStoreUpdate {
	psu.mutation.AddInventoryFacilityID(i)
	return psu
}

// ClearInventoryFacilityID clears the value of the "inventory_facility_id" field.
func (psu *ProductStoreUpdate) ClearInventoryFacilityID() *ProductStoreUpdate {
	psu.mutation.ClearInventoryFacilityID()
	return psu
}

// SetOneInventoryFacility sets the "one_inventory_facility" field.
func (psu *ProductStoreUpdate) SetOneInventoryFacility(pif productstore.OneInventoryFacility) *ProductStoreUpdate {
	psu.mutation.SetOneInventoryFacility(pif)
	return psu
}

// SetNillableOneInventoryFacility sets the "one_inventory_facility" field if the given value is not nil.
func (psu *ProductStoreUpdate) SetNillableOneInventoryFacility(pif *productstore.OneInventoryFacility) *ProductStoreUpdate {
	if pif != nil {
		psu.SetOneInventoryFacility(*pif)
	}
	return psu
}

// ClearOneInventoryFacility clears the value of the "one_inventory_facility" field.
func (psu *ProductStoreUpdate) ClearOneInventoryFacility() *ProductStoreUpdate {
	psu.mutation.ClearOneInventoryFacility()
	return psu
}

// SetCheckInventory sets the "check_inventory" field.
func (psu *ProductStoreUpdate) SetCheckInventory(pi productstore.CheckInventory) *ProductStoreUpdate {
	psu.mutation.SetCheckInventory(pi)
	return psu
}

// SetNillableCheckInventory sets the "check_inventory" field if the given value is not nil.
func (psu *ProductStoreUpdate) SetNillableCheckInventory(pi *productstore.CheckInventory) *ProductStoreUpdate {
	if pi != nil {
		psu.SetCheckInventory(*pi)
	}
	return psu
}

// ClearCheckInventory clears the value of the "check_inventory" field.
func (psu *ProductStoreUpdate) ClearCheckInventory() *ProductStoreUpdate {
	psu.mutation.ClearCheckInventory()
	return psu
}

// SetReserveInventory sets the "reserve_inventory" field.
func (psu *ProductStoreUpdate) SetReserveInventory(pi productstore.ReserveInventory) *ProductStoreUpdate {
	psu.mutation.SetReserveInventory(pi)
	return psu
}

// SetNillableReserveInventory sets the "reserve_inventory" field if the given value is not nil.
func (psu *ProductStoreUpdate) SetNillableReserveInventory(pi *productstore.ReserveInventory) *ProductStoreUpdate {
	if pi != nil {
		psu.SetReserveInventory(*pi)
	}
	return psu
}

// ClearReserveInventory clears the value of the "reserve_inventory" field.
func (psu *ProductStoreUpdate) ClearReserveInventory() *ProductStoreUpdate {
	psu.mutation.ClearReserveInventory()
	return psu
}

// SetRequireInventory sets the "require_inventory" field.
func (psu *ProductStoreUpdate) SetRequireInventory(pi productstore.RequireInventory) *ProductStoreUpdate {
	psu.mutation.SetRequireInventory(pi)
	return psu
}

// SetNillableRequireInventory sets the "require_inventory" field if the given value is not nil.
func (psu *ProductStoreUpdate) SetNillableRequireInventory(pi *productstore.RequireInventory) *ProductStoreUpdate {
	if pi != nil {
		psu.SetRequireInventory(*pi)
	}
	return psu
}

// ClearRequireInventory clears the value of the "require_inventory" field.
func (psu *ProductStoreUpdate) ClearRequireInventory() *ProductStoreUpdate {
	psu.mutation.ClearRequireInventory()
	return psu
}

// SetBalanceResOnOrderCreation sets the "balance_res_on_order_creation" field.
func (psu *ProductStoreUpdate) SetBalanceResOnOrderCreation(prooc productstore.BalanceResOnOrderCreation) *ProductStoreUpdate {
	psu.mutation.SetBalanceResOnOrderCreation(prooc)
	return psu
}

// SetNillableBalanceResOnOrderCreation sets the "balance_res_on_order_creation" field if the given value is not nil.
func (psu *ProductStoreUpdate) SetNillableBalanceResOnOrderCreation(prooc *productstore.BalanceResOnOrderCreation) *ProductStoreUpdate {
	if prooc != nil {
		psu.SetBalanceResOnOrderCreation(*prooc)
	}
	return psu
}

// ClearBalanceResOnOrderCreation clears the value of the "balance_res_on_order_creation" field.
func (psu *ProductStoreUpdate) ClearBalanceResOnOrderCreation() *ProductStoreUpdate {
	psu.mutation.ClearBalanceResOnOrderCreation()
	return psu
}

// SetOrderNumberPrefix sets the "order_number_prefix" field.
func (psu *ProductStoreUpdate) SetOrderNumberPrefix(s string) *ProductStoreUpdate {
	psu.mutation.SetOrderNumberPrefix(s)
	return psu
}

// SetNillableOrderNumberPrefix sets the "order_number_prefix" field if the given value is not nil.
func (psu *ProductStoreUpdate) SetNillableOrderNumberPrefix(s *string) *ProductStoreUpdate {
	if s != nil {
		psu.SetOrderNumberPrefix(*s)
	}
	return psu
}

// ClearOrderNumberPrefix clears the value of the "order_number_prefix" field.
func (psu *ProductStoreUpdate) ClearOrderNumberPrefix() *ProductStoreUpdate {
	psu.mutation.ClearOrderNumberPrefix()
	return psu
}

// SetDefaultLocaleString sets the "default_locale_string" field.
func (psu *ProductStoreUpdate) SetDefaultLocaleString(s string) *ProductStoreUpdate {
	psu.mutation.SetDefaultLocaleString(s)
	return psu
}

// SetNillableDefaultLocaleString sets the "default_locale_string" field if the given value is not nil.
func (psu *ProductStoreUpdate) SetNillableDefaultLocaleString(s *string) *ProductStoreUpdate {
	if s != nil {
		psu.SetDefaultLocaleString(*s)
	}
	return psu
}

// ClearDefaultLocaleString clears the value of the "default_locale_string" field.
func (psu *ProductStoreUpdate) ClearDefaultLocaleString() *ProductStoreUpdate {
	psu.mutation.ClearDefaultLocaleString()
	return psu
}

// SetDefaultCurrencyUomID sets the "default_currency_uom_id" field.
func (psu *ProductStoreUpdate) SetDefaultCurrencyUomID(i int) *ProductStoreUpdate {
	psu.mutation.ResetDefaultCurrencyUomID()
	psu.mutation.SetDefaultCurrencyUomID(i)
	return psu
}

// SetNillableDefaultCurrencyUomID sets the "default_currency_uom_id" field if the given value is not nil.
func (psu *ProductStoreUpdate) SetNillableDefaultCurrencyUomID(i *int) *ProductStoreUpdate {
	if i != nil {
		psu.SetDefaultCurrencyUomID(*i)
	}
	return psu
}

// AddDefaultCurrencyUomID adds i to the "default_currency_uom_id" field.
func (psu *ProductStoreUpdate) AddDefaultCurrencyUomID(i int) *ProductStoreUpdate {
	psu.mutation.AddDefaultCurrencyUomID(i)
	return psu
}

// ClearDefaultCurrencyUomID clears the value of the "default_currency_uom_id" field.
func (psu *ProductStoreUpdate) ClearDefaultCurrencyUomID() *ProductStoreUpdate {
	psu.mutation.ClearDefaultCurrencyUomID()
	return psu
}

// SetDefaultTimeZoneString sets the "default_time_zone_string" field.
func (psu *ProductStoreUpdate) SetDefaultTimeZoneString(s string) *ProductStoreUpdate {
	psu.mutation.SetDefaultTimeZoneString(s)
	return psu
}

// SetNillableDefaultTimeZoneString sets the "default_time_zone_string" field if the given value is not nil.
func (psu *ProductStoreUpdate) SetNillableDefaultTimeZoneString(s *string) *ProductStoreUpdate {
	if s != nil {
		psu.SetDefaultTimeZoneString(*s)
	}
	return psu
}

// ClearDefaultTimeZoneString clears the value of the "default_time_zone_string" field.
func (psu *ProductStoreUpdate) ClearDefaultTimeZoneString() *ProductStoreUpdate {
	psu.mutation.ClearDefaultTimeZoneString()
	return psu
}

// SetAllowPassword sets the "allow_password" field.
func (psu *ProductStoreUpdate) SetAllowPassword(pp productstore.AllowPassword) *ProductStoreUpdate {
	psu.mutation.SetAllowPassword(pp)
	return psu
}

// SetNillableAllowPassword sets the "allow_password" field if the given value is not nil.
func (psu *ProductStoreUpdate) SetNillableAllowPassword(pp *productstore.AllowPassword) *ProductStoreUpdate {
	if pp != nil {
		psu.SetAllowPassword(*pp)
	}
	return psu
}

// ClearAllowPassword clears the value of the "allow_password" field.
func (psu *ProductStoreUpdate) ClearAllowPassword() *ProductStoreUpdate {
	psu.mutation.ClearAllowPassword()
	return psu
}

// SetDefaultPassword sets the "default_password" field.
func (psu *ProductStoreUpdate) SetDefaultPassword(s string) *ProductStoreUpdate {
	psu.mutation.SetDefaultPassword(s)
	return psu
}

// SetNillableDefaultPassword sets the "default_password" field if the given value is not nil.
func (psu *ProductStoreUpdate) SetNillableDefaultPassword(s *string) *ProductStoreUpdate {
	if s != nil {
		psu.SetDefaultPassword(*s)
	}
	return psu
}

// ClearDefaultPassword clears the value of the "default_password" field.
func (psu *ProductStoreUpdate) ClearDefaultPassword() *ProductStoreUpdate {
	psu.mutation.ClearDefaultPassword()
	return psu
}

// SetExplodeOrderItems sets the "explode_order_items" field.
func (psu *ProductStoreUpdate) SetExplodeOrderItems(poi productstore.ExplodeOrderItems) *ProductStoreUpdate {
	psu.mutation.SetExplodeOrderItems(poi)
	return psu
}

// SetNillableExplodeOrderItems sets the "explode_order_items" field if the given value is not nil.
func (psu *ProductStoreUpdate) SetNillableExplodeOrderItems(poi *productstore.ExplodeOrderItems) *ProductStoreUpdate {
	if poi != nil {
		psu.SetExplodeOrderItems(*poi)
	}
	return psu
}

// ClearExplodeOrderItems clears the value of the "explode_order_items" field.
func (psu *ProductStoreUpdate) ClearExplodeOrderItems() *ProductStoreUpdate {
	psu.mutation.ClearExplodeOrderItems()
	return psu
}

// SetCheckGcBalance sets the "check_gc_balance" field.
func (psu *ProductStoreUpdate) SetCheckGcBalance(pgb productstore.CheckGcBalance) *ProductStoreUpdate {
	psu.mutation.SetCheckGcBalance(pgb)
	return psu
}

// SetNillableCheckGcBalance sets the "check_gc_balance" field if the given value is not nil.
func (psu *ProductStoreUpdate) SetNillableCheckGcBalance(pgb *productstore.CheckGcBalance) *ProductStoreUpdate {
	if pgb != nil {
		psu.SetCheckGcBalance(*pgb)
	}
	return psu
}

// ClearCheckGcBalance clears the value of the "check_gc_balance" field.
func (psu *ProductStoreUpdate) ClearCheckGcBalance() *ProductStoreUpdate {
	psu.mutation.ClearCheckGcBalance()
	return psu
}

// SetRetryFailedAuths sets the "retry_failed_auths" field.
func (psu *ProductStoreUpdate) SetRetryFailedAuths(pfa productstore.RetryFailedAuths) *ProductStoreUpdate {
	psu.mutation.SetRetryFailedAuths(pfa)
	return psu
}

// SetNillableRetryFailedAuths sets the "retry_failed_auths" field if the given value is not nil.
func (psu *ProductStoreUpdate) SetNillableRetryFailedAuths(pfa *productstore.RetryFailedAuths) *ProductStoreUpdate {
	if pfa != nil {
		psu.SetRetryFailedAuths(*pfa)
	}
	return psu
}

// ClearRetryFailedAuths clears the value of the "retry_failed_auths" field.
func (psu *ProductStoreUpdate) ClearRetryFailedAuths() *ProductStoreUpdate {
	psu.mutation.ClearRetryFailedAuths()
	return psu
}

// SetAuthDeclinedMessage sets the "auth_declined_message" field.
func (psu *ProductStoreUpdate) SetAuthDeclinedMessage(s string) *ProductStoreUpdate {
	psu.mutation.SetAuthDeclinedMessage(s)
	return psu
}

// SetNillableAuthDeclinedMessage sets the "auth_declined_message" field if the given value is not nil.
func (psu *ProductStoreUpdate) SetNillableAuthDeclinedMessage(s *string) *ProductStoreUpdate {
	if s != nil {
		psu.SetAuthDeclinedMessage(*s)
	}
	return psu
}

// ClearAuthDeclinedMessage clears the value of the "auth_declined_message" field.
func (psu *ProductStoreUpdate) ClearAuthDeclinedMessage() *ProductStoreUpdate {
	psu.mutation.ClearAuthDeclinedMessage()
	return psu
}

// SetAuthFraudMessage sets the "auth_fraud_message" field.
func (psu *ProductStoreUpdate) SetAuthFraudMessage(s string) *ProductStoreUpdate {
	psu.mutation.SetAuthFraudMessage(s)
	return psu
}

// SetNillableAuthFraudMessage sets the "auth_fraud_message" field if the given value is not nil.
func (psu *ProductStoreUpdate) SetNillableAuthFraudMessage(s *string) *ProductStoreUpdate {
	if s != nil {
		psu.SetAuthFraudMessage(*s)
	}
	return psu
}

// ClearAuthFraudMessage clears the value of the "auth_fraud_message" field.
func (psu *ProductStoreUpdate) ClearAuthFraudMessage() *ProductStoreUpdate {
	psu.mutation.ClearAuthFraudMessage()
	return psu
}

// SetAuthErrorMessage sets the "auth_error_message" field.
func (psu *ProductStoreUpdate) SetAuthErrorMessage(s string) *ProductStoreUpdate {
	psu.mutation.SetAuthErrorMessage(s)
	return psu
}

// SetNillableAuthErrorMessage sets the "auth_error_message" field if the given value is not nil.
func (psu *ProductStoreUpdate) SetNillableAuthErrorMessage(s *string) *ProductStoreUpdate {
	if s != nil {
		psu.SetAuthErrorMessage(*s)
	}
	return psu
}

// ClearAuthErrorMessage clears the value of the "auth_error_message" field.
func (psu *ProductStoreUpdate) ClearAuthErrorMessage() *ProductStoreUpdate {
	psu.mutation.ClearAuthErrorMessage()
	return psu
}

// SetVisualThemeID sets the "visual_theme_id" field.
func (psu *ProductStoreUpdate) SetVisualThemeID(i int) *ProductStoreUpdate {
	psu.mutation.ResetVisualThemeID()
	psu.mutation.SetVisualThemeID(i)
	return psu
}

// SetNillableVisualThemeID sets the "visual_theme_id" field if the given value is not nil.
func (psu *ProductStoreUpdate) SetNillableVisualThemeID(i *int) *ProductStoreUpdate {
	if i != nil {
		psu.SetVisualThemeID(*i)
	}
	return psu
}

// AddVisualThemeID adds i to the "visual_theme_id" field.
func (psu *ProductStoreUpdate) AddVisualThemeID(i int) *ProductStoreUpdate {
	psu.mutation.AddVisualThemeID(i)
	return psu
}

// ClearVisualThemeID clears the value of the "visual_theme_id" field.
func (psu *ProductStoreUpdate) ClearVisualThemeID() *ProductStoreUpdate {
	psu.mutation.ClearVisualThemeID()
	return psu
}

// SetUsePrimaryEmailUsername sets the "use_primary_email_username" field.
func (psu *ProductStoreUpdate) SetUsePrimaryEmailUsername(ppeu productstore.UsePrimaryEmailUsername) *ProductStoreUpdate {
	psu.mutation.SetUsePrimaryEmailUsername(ppeu)
	return psu
}

// SetNillableUsePrimaryEmailUsername sets the "use_primary_email_username" field if the given value is not nil.
func (psu *ProductStoreUpdate) SetNillableUsePrimaryEmailUsername(ppeu *productstore.UsePrimaryEmailUsername) *ProductStoreUpdate {
	if ppeu != nil {
		psu.SetUsePrimaryEmailUsername(*ppeu)
	}
	return psu
}

// ClearUsePrimaryEmailUsername clears the value of the "use_primary_email_username" field.
func (psu *ProductStoreUpdate) ClearUsePrimaryEmailUsername() *ProductStoreUpdate {
	psu.mutation.ClearUsePrimaryEmailUsername()
	return psu
}

// SetRequireCustomerRole sets the "require_customer_role" field.
func (psu *ProductStoreUpdate) SetRequireCustomerRole(pcr productstore.RequireCustomerRole) *ProductStoreUpdate {
	psu.mutation.SetRequireCustomerRole(pcr)
	return psu
}

// SetNillableRequireCustomerRole sets the "require_customer_role" field if the given value is not nil.
func (psu *ProductStoreUpdate) SetNillableRequireCustomerRole(pcr *productstore.RequireCustomerRole) *ProductStoreUpdate {
	if pcr != nil {
		psu.SetRequireCustomerRole(*pcr)
	}
	return psu
}

// ClearRequireCustomerRole clears the value of the "require_customer_role" field.
func (psu *ProductStoreUpdate) ClearRequireCustomerRole() *ProductStoreUpdate {
	psu.mutation.ClearRequireCustomerRole()
	return psu
}

// SetAutoInvoiceDigitalItems sets the "auto_invoice_digital_items" field.
func (psu *ProductStoreUpdate) SetAutoInvoiceDigitalItems(pidi productstore.AutoInvoiceDigitalItems) *ProductStoreUpdate {
	psu.mutation.SetAutoInvoiceDigitalItems(pidi)
	return psu
}

// SetNillableAutoInvoiceDigitalItems sets the "auto_invoice_digital_items" field if the given value is not nil.
func (psu *ProductStoreUpdate) SetNillableAutoInvoiceDigitalItems(pidi *productstore.AutoInvoiceDigitalItems) *ProductStoreUpdate {
	if pidi != nil {
		psu.SetAutoInvoiceDigitalItems(*pidi)
	}
	return psu
}

// ClearAutoInvoiceDigitalItems clears the value of the "auto_invoice_digital_items" field.
func (psu *ProductStoreUpdate) ClearAutoInvoiceDigitalItems() *ProductStoreUpdate {
	psu.mutation.ClearAutoInvoiceDigitalItems()
	return psu
}

// SetReqShipAddrForDigItems sets the "req_ship_addr_for_dig_items" field.
func (psu *ProductStoreUpdate) SetReqShipAddrForDigItems(psafdi productstore.ReqShipAddrForDigItems) *ProductStoreUpdate {
	psu.mutation.SetReqShipAddrForDigItems(psafdi)
	return psu
}

// SetNillableReqShipAddrForDigItems sets the "req_ship_addr_for_dig_items" field if the given value is not nil.
func (psu *ProductStoreUpdate) SetNillableReqShipAddrForDigItems(psafdi *productstore.ReqShipAddrForDigItems) *ProductStoreUpdate {
	if psafdi != nil {
		psu.SetReqShipAddrForDigItems(*psafdi)
	}
	return psu
}

// ClearReqShipAddrForDigItems clears the value of the "req_ship_addr_for_dig_items" field.
func (psu *ProductStoreUpdate) ClearReqShipAddrForDigItems() *ProductStoreUpdate {
	psu.mutation.ClearReqShipAddrForDigItems()
	return psu
}

// SetShowCheckoutGiftOptions sets the "show_checkout_gift_options" field.
func (psu *ProductStoreUpdate) SetShowCheckoutGiftOptions(pcgo productstore.ShowCheckoutGiftOptions) *ProductStoreUpdate {
	psu.mutation.SetShowCheckoutGiftOptions(pcgo)
	return psu
}

// SetNillableShowCheckoutGiftOptions sets the "show_checkout_gift_options" field if the given value is not nil.
func (psu *ProductStoreUpdate) SetNillableShowCheckoutGiftOptions(pcgo *productstore.ShowCheckoutGiftOptions) *ProductStoreUpdate {
	if pcgo != nil {
		psu.SetShowCheckoutGiftOptions(*pcgo)
	}
	return psu
}

// ClearShowCheckoutGiftOptions clears the value of the "show_checkout_gift_options" field.
func (psu *ProductStoreUpdate) ClearShowCheckoutGiftOptions() *ProductStoreUpdate {
	psu.mutation.ClearShowCheckoutGiftOptions()
	return psu
}

// SetSelectPaymentTypePerItem sets the "select_payment_type_per_item" field.
func (psu *ProductStoreUpdate) SetSelectPaymentTypePerItem(pptpi productstore.SelectPaymentTypePerItem) *ProductStoreUpdate {
	psu.mutation.SetSelectPaymentTypePerItem(pptpi)
	return psu
}

// SetNillableSelectPaymentTypePerItem sets the "select_payment_type_per_item" field if the given value is not nil.
func (psu *ProductStoreUpdate) SetNillableSelectPaymentTypePerItem(pptpi *productstore.SelectPaymentTypePerItem) *ProductStoreUpdate {
	if pptpi != nil {
		psu.SetSelectPaymentTypePerItem(*pptpi)
	}
	return psu
}

// ClearSelectPaymentTypePerItem clears the value of the "select_payment_type_per_item" field.
func (psu *ProductStoreUpdate) ClearSelectPaymentTypePerItem() *ProductStoreUpdate {
	psu.mutation.ClearSelectPaymentTypePerItem()
	return psu
}

// SetShowPricesWithVatTax sets the "show_prices_with_vat_tax" field.
func (psu *ProductStoreUpdate) SetShowPricesWithVatTax(ppwvt productstore.ShowPricesWithVatTax) *ProductStoreUpdate {
	psu.mutation.SetShowPricesWithVatTax(ppwvt)
	return psu
}

// SetNillableShowPricesWithVatTax sets the "show_prices_with_vat_tax" field if the given value is not nil.
func (psu *ProductStoreUpdate) SetNillableShowPricesWithVatTax(ppwvt *productstore.ShowPricesWithVatTax) *ProductStoreUpdate {
	if ppwvt != nil {
		psu.SetShowPricesWithVatTax(*ppwvt)
	}
	return psu
}

// ClearShowPricesWithVatTax clears the value of the "show_prices_with_vat_tax" field.
func (psu *ProductStoreUpdate) ClearShowPricesWithVatTax() *ProductStoreUpdate {
	psu.mutation.ClearShowPricesWithVatTax()
	return psu
}

// SetShowTaxIsExempt sets the "show_tax_is_exempt" field.
func (psu *ProductStoreUpdate) SetShowTaxIsExempt(ptie productstore.ShowTaxIsExempt) *ProductStoreUpdate {
	psu.mutation.SetShowTaxIsExempt(ptie)
	return psu
}

// SetNillableShowTaxIsExempt sets the "show_tax_is_exempt" field if the given value is not nil.
func (psu *ProductStoreUpdate) SetNillableShowTaxIsExempt(ptie *productstore.ShowTaxIsExempt) *ProductStoreUpdate {
	if ptie != nil {
		psu.SetShowTaxIsExempt(*ptie)
	}
	return psu
}

// ClearShowTaxIsExempt clears the value of the "show_tax_is_exempt" field.
func (psu *ProductStoreUpdate) ClearShowTaxIsExempt() *ProductStoreUpdate {
	psu.mutation.ClearShowTaxIsExempt()
	return psu
}

// SetVatTaxAuthGeoID sets the "vat_tax_auth_geo_id" field.
func (psu *ProductStoreUpdate) SetVatTaxAuthGeoID(i int) *ProductStoreUpdate {
	psu.mutation.ResetVatTaxAuthGeoID()
	psu.mutation.SetVatTaxAuthGeoID(i)
	return psu
}

// SetNillableVatTaxAuthGeoID sets the "vat_tax_auth_geo_id" field if the given value is not nil.
func (psu *ProductStoreUpdate) SetNillableVatTaxAuthGeoID(i *int) *ProductStoreUpdate {
	if i != nil {
		psu.SetVatTaxAuthGeoID(*i)
	}
	return psu
}

// AddVatTaxAuthGeoID adds i to the "vat_tax_auth_geo_id" field.
func (psu *ProductStoreUpdate) AddVatTaxAuthGeoID(i int) *ProductStoreUpdate {
	psu.mutation.AddVatTaxAuthGeoID(i)
	return psu
}

// ClearVatTaxAuthGeoID clears the value of the "vat_tax_auth_geo_id" field.
func (psu *ProductStoreUpdate) ClearVatTaxAuthGeoID() *ProductStoreUpdate {
	psu.mutation.ClearVatTaxAuthGeoID()
	return psu
}

// SetVatTaxAuthPartyID sets the "vat_tax_auth_party_id" field.
func (psu *ProductStoreUpdate) SetVatTaxAuthPartyID(i int) *ProductStoreUpdate {
	psu.mutation.ResetVatTaxAuthPartyID()
	psu.mutation.SetVatTaxAuthPartyID(i)
	return psu
}

// SetNillableVatTaxAuthPartyID sets the "vat_tax_auth_party_id" field if the given value is not nil.
func (psu *ProductStoreUpdate) SetNillableVatTaxAuthPartyID(i *int) *ProductStoreUpdate {
	if i != nil {
		psu.SetVatTaxAuthPartyID(*i)
	}
	return psu
}

// AddVatTaxAuthPartyID adds i to the "vat_tax_auth_party_id" field.
func (psu *ProductStoreUpdate) AddVatTaxAuthPartyID(i int) *ProductStoreUpdate {
	psu.mutation.AddVatTaxAuthPartyID(i)
	return psu
}

// ClearVatTaxAuthPartyID clears the value of the "vat_tax_auth_party_id" field.
func (psu *ProductStoreUpdate) ClearVatTaxAuthPartyID() *ProductStoreUpdate {
	psu.mutation.ClearVatTaxAuthPartyID()
	return psu
}

// SetEnableAutoSuggestionList sets the "enable_auto_suggestion_list" field.
func (psu *ProductStoreUpdate) SetEnableAutoSuggestionList(pasl productstore.EnableAutoSuggestionList) *ProductStoreUpdate {
	psu.mutation.SetEnableAutoSuggestionList(pasl)
	return psu
}

// SetNillableEnableAutoSuggestionList sets the "enable_auto_suggestion_list" field if the given value is not nil.
func (psu *ProductStoreUpdate) SetNillableEnableAutoSuggestionList(pasl *productstore.EnableAutoSuggestionList) *ProductStoreUpdate {
	if pasl != nil {
		psu.SetEnableAutoSuggestionList(*pasl)
	}
	return psu
}

// ClearEnableAutoSuggestionList clears the value of the "enable_auto_suggestion_list" field.
func (psu *ProductStoreUpdate) ClearEnableAutoSuggestionList() *ProductStoreUpdate {
	psu.mutation.ClearEnableAutoSuggestionList()
	return psu
}

// SetEnableDigProdUpload sets the "enable_dig_prod_upload" field.
func (psu *ProductStoreUpdate) SetEnableDigProdUpload(pdpu productstore.EnableDigProdUpload) *ProductStoreUpdate {
	psu.mutation.SetEnableDigProdUpload(pdpu)
	return psu
}

// SetNillableEnableDigProdUpload sets the "enable_dig_prod_upload" field if the given value is not nil.
func (psu *ProductStoreUpdate) SetNillableEnableDigProdUpload(pdpu *productstore.EnableDigProdUpload) *ProductStoreUpdate {
	if pdpu != nil {
		psu.SetEnableDigProdUpload(*pdpu)
	}
	return psu
}

// ClearEnableDigProdUpload clears the value of the "enable_dig_prod_upload" field.
func (psu *ProductStoreUpdate) ClearEnableDigProdUpload() *ProductStoreUpdate {
	psu.mutation.ClearEnableDigProdUpload()
	return psu
}

// SetProdSearchExcludeVariants sets the "prod_search_exclude_variants" field.
func (psu *ProductStoreUpdate) SetProdSearchExcludeVariants(psev productstore.ProdSearchExcludeVariants) *ProductStoreUpdate {
	psu.mutation.SetProdSearchExcludeVariants(psev)
	return psu
}

// SetNillableProdSearchExcludeVariants sets the "prod_search_exclude_variants" field if the given value is not nil.
func (psu *ProductStoreUpdate) SetNillableProdSearchExcludeVariants(psev *productstore.ProdSearchExcludeVariants) *ProductStoreUpdate {
	if psev != nil {
		psu.SetProdSearchExcludeVariants(*psev)
	}
	return psu
}

// ClearProdSearchExcludeVariants clears the value of the "prod_search_exclude_variants" field.
func (psu *ProductStoreUpdate) ClearProdSearchExcludeVariants() *ProductStoreUpdate {
	psu.mutation.ClearProdSearchExcludeVariants()
	return psu
}

// SetDigProdUploadCategoryID sets the "dig_prod_upload_category_id" field.
func (psu *ProductStoreUpdate) SetDigProdUploadCategoryID(i int) *ProductStoreUpdate {
	psu.mutation.ResetDigProdUploadCategoryID()
	psu.mutation.SetDigProdUploadCategoryID(i)
	return psu
}

// SetNillableDigProdUploadCategoryID sets the "dig_prod_upload_category_id" field if the given value is not nil.
func (psu *ProductStoreUpdate) SetNillableDigProdUploadCategoryID(i *int) *ProductStoreUpdate {
	if i != nil {
		psu.SetDigProdUploadCategoryID(*i)
	}
	return psu
}

// AddDigProdUploadCategoryID adds i to the "dig_prod_upload_category_id" field.
func (psu *ProductStoreUpdate) AddDigProdUploadCategoryID(i int) *ProductStoreUpdate {
	psu.mutation.AddDigProdUploadCategoryID(i)
	return psu
}

// ClearDigProdUploadCategoryID clears the value of the "dig_prod_upload_category_id" field.
func (psu *ProductStoreUpdate) ClearDigProdUploadCategoryID() *ProductStoreUpdate {
	psu.mutation.ClearDigProdUploadCategoryID()
	return psu
}

// SetAutoOrderCcTryExp sets the "auto_order_cc_try_exp" field.
func (psu *ProductStoreUpdate) SetAutoOrderCcTryExp(pocte productstore.AutoOrderCcTryExp) *ProductStoreUpdate {
	psu.mutation.SetAutoOrderCcTryExp(pocte)
	return psu
}

// SetNillableAutoOrderCcTryExp sets the "auto_order_cc_try_exp" field if the given value is not nil.
func (psu *ProductStoreUpdate) SetNillableAutoOrderCcTryExp(pocte *productstore.AutoOrderCcTryExp) *ProductStoreUpdate {
	if pocte != nil {
		psu.SetAutoOrderCcTryExp(*pocte)
	}
	return psu
}

// ClearAutoOrderCcTryExp clears the value of the "auto_order_cc_try_exp" field.
func (psu *ProductStoreUpdate) ClearAutoOrderCcTryExp() *ProductStoreUpdate {
	psu.mutation.ClearAutoOrderCcTryExp()
	return psu
}

// SetAutoOrderCcTryOtherCards sets the "auto_order_cc_try_other_cards" field.
func (psu *ProductStoreUpdate) SetAutoOrderCcTryOtherCards(poctoc productstore.AutoOrderCcTryOtherCards) *ProductStoreUpdate {
	psu.mutation.SetAutoOrderCcTryOtherCards(poctoc)
	return psu
}

// SetNillableAutoOrderCcTryOtherCards sets the "auto_order_cc_try_other_cards" field if the given value is not nil.
func (psu *ProductStoreUpdate) SetNillableAutoOrderCcTryOtherCards(poctoc *productstore.AutoOrderCcTryOtherCards) *ProductStoreUpdate {
	if poctoc != nil {
		psu.SetAutoOrderCcTryOtherCards(*poctoc)
	}
	return psu
}

// ClearAutoOrderCcTryOtherCards clears the value of the "auto_order_cc_try_other_cards" field.
func (psu *ProductStoreUpdate) ClearAutoOrderCcTryOtherCards() *ProductStoreUpdate {
	psu.mutation.ClearAutoOrderCcTryOtherCards()
	return psu
}

// SetAutoOrderCcTryLaterNsf sets the "auto_order_cc_try_later_nsf" field.
func (psu *ProductStoreUpdate) SetAutoOrderCcTryLaterNsf(poctln productstore.AutoOrderCcTryLaterNsf) *ProductStoreUpdate {
	psu.mutation.SetAutoOrderCcTryLaterNsf(poctln)
	return psu
}

// SetNillableAutoOrderCcTryLaterNsf sets the "auto_order_cc_try_later_nsf" field if the given value is not nil.
func (psu *ProductStoreUpdate) SetNillableAutoOrderCcTryLaterNsf(poctln *productstore.AutoOrderCcTryLaterNsf) *ProductStoreUpdate {
	if poctln != nil {
		psu.SetAutoOrderCcTryLaterNsf(*poctln)
	}
	return psu
}

// ClearAutoOrderCcTryLaterNsf clears the value of the "auto_order_cc_try_later_nsf" field.
func (psu *ProductStoreUpdate) ClearAutoOrderCcTryLaterNsf() *ProductStoreUpdate {
	psu.mutation.ClearAutoOrderCcTryLaterNsf()
	return psu
}

// SetAutoOrderCcTryLaterMax sets the "auto_order_cc_try_later_max" field.
func (psu *ProductStoreUpdate) SetAutoOrderCcTryLaterMax(i int) *ProductStoreUpdate {
	psu.mutation.ResetAutoOrderCcTryLaterMax()
	psu.mutation.SetAutoOrderCcTryLaterMax(i)
	return psu
}

// SetNillableAutoOrderCcTryLaterMax sets the "auto_order_cc_try_later_max" field if the given value is not nil.
func (psu *ProductStoreUpdate) SetNillableAutoOrderCcTryLaterMax(i *int) *ProductStoreUpdate {
	if i != nil {
		psu.SetAutoOrderCcTryLaterMax(*i)
	}
	return psu
}

// AddAutoOrderCcTryLaterMax adds i to the "auto_order_cc_try_later_max" field.
func (psu *ProductStoreUpdate) AddAutoOrderCcTryLaterMax(i int) *ProductStoreUpdate {
	psu.mutation.AddAutoOrderCcTryLaterMax(i)
	return psu
}

// ClearAutoOrderCcTryLaterMax clears the value of the "auto_order_cc_try_later_max" field.
func (psu *ProductStoreUpdate) ClearAutoOrderCcTryLaterMax() *ProductStoreUpdate {
	psu.mutation.ClearAutoOrderCcTryLaterMax()
	return psu
}

// SetStoreCreditValidDays sets the "store_credit_valid_days" field.
func (psu *ProductStoreUpdate) SetStoreCreditValidDays(i int) *ProductStoreUpdate {
	psu.mutation.ResetStoreCreditValidDays()
	psu.mutation.SetStoreCreditValidDays(i)
	return psu
}

// SetNillableStoreCreditValidDays sets the "store_credit_valid_days" field if the given value is not nil.
func (psu *ProductStoreUpdate) SetNillableStoreCreditValidDays(i *int) *ProductStoreUpdate {
	if i != nil {
		psu.SetStoreCreditValidDays(*i)
	}
	return psu
}

// AddStoreCreditValidDays adds i to the "store_credit_valid_days" field.
func (psu *ProductStoreUpdate) AddStoreCreditValidDays(i int) *ProductStoreUpdate {
	psu.mutation.AddStoreCreditValidDays(i)
	return psu
}

// ClearStoreCreditValidDays clears the value of the "store_credit_valid_days" field.
func (psu *ProductStoreUpdate) ClearStoreCreditValidDays() *ProductStoreUpdate {
	psu.mutation.ClearStoreCreditValidDays()
	return psu
}

// SetAutoApproveInvoice sets the "auto_approve_invoice" field.
func (psu *ProductStoreUpdate) SetAutoApproveInvoice(pai productstore.AutoApproveInvoice) *ProductStoreUpdate {
	psu.mutation.SetAutoApproveInvoice(pai)
	return psu
}

// SetNillableAutoApproveInvoice sets the "auto_approve_invoice" field if the given value is not nil.
func (psu *ProductStoreUpdate) SetNillableAutoApproveInvoice(pai *productstore.AutoApproveInvoice) *ProductStoreUpdate {
	if pai != nil {
		psu.SetAutoApproveInvoice(*pai)
	}
	return psu
}

// ClearAutoApproveInvoice clears the value of the "auto_approve_invoice" field.
func (psu *ProductStoreUpdate) ClearAutoApproveInvoice() *ProductStoreUpdate {
	psu.mutation.ClearAutoApproveInvoice()
	return psu
}

// SetAutoApproveOrder sets the "auto_approve_order" field.
func (psu *ProductStoreUpdate) SetAutoApproveOrder(pao productstore.AutoApproveOrder) *ProductStoreUpdate {
	psu.mutation.SetAutoApproveOrder(pao)
	return psu
}

// SetNillableAutoApproveOrder sets the "auto_approve_order" field if the given value is not nil.
func (psu *ProductStoreUpdate) SetNillableAutoApproveOrder(pao *productstore.AutoApproveOrder) *ProductStoreUpdate {
	if pao != nil {
		psu.SetAutoApproveOrder(*pao)
	}
	return psu
}

// ClearAutoApproveOrder clears the value of the "auto_approve_order" field.
func (psu *ProductStoreUpdate) ClearAutoApproveOrder() *ProductStoreUpdate {
	psu.mutation.ClearAutoApproveOrder()
	return psu
}

// SetShipIfCaptureFails sets the "ship_if_capture_fails" field.
func (psu *ProductStoreUpdate) SetShipIfCaptureFails(picf productstore.ShipIfCaptureFails) *ProductStoreUpdate {
	psu.mutation.SetShipIfCaptureFails(picf)
	return psu
}

// SetNillableShipIfCaptureFails sets the "ship_if_capture_fails" field if the given value is not nil.
func (psu *ProductStoreUpdate) SetNillableShipIfCaptureFails(picf *productstore.ShipIfCaptureFails) *ProductStoreUpdate {
	if picf != nil {
		psu.SetShipIfCaptureFails(*picf)
	}
	return psu
}

// ClearShipIfCaptureFails clears the value of the "ship_if_capture_fails" field.
func (psu *ProductStoreUpdate) ClearShipIfCaptureFails() *ProductStoreUpdate {
	psu.mutation.ClearShipIfCaptureFails()
	return psu
}

// SetSetOwnerUponIssuance sets the "set_owner_upon_issuance" field.
func (psu *ProductStoreUpdate) SetSetOwnerUponIssuance(poui productstore.SetOwnerUponIssuance) *ProductStoreUpdate {
	psu.mutation.SetSetOwnerUponIssuance(poui)
	return psu
}

// SetNillableSetOwnerUponIssuance sets the "set_owner_upon_issuance" field if the given value is not nil.
func (psu *ProductStoreUpdate) SetNillableSetOwnerUponIssuance(poui *productstore.SetOwnerUponIssuance) *ProductStoreUpdate {
	if poui != nil {
		psu.SetSetOwnerUponIssuance(*poui)
	}
	return psu
}

// ClearSetOwnerUponIssuance clears the value of the "set_owner_upon_issuance" field.
func (psu *ProductStoreUpdate) ClearSetOwnerUponIssuance() *ProductStoreUpdate {
	psu.mutation.ClearSetOwnerUponIssuance()
	return psu
}

// SetReqReturnInventoryReceive sets the "req_return_inventory_receive" field.
func (psu *ProductStoreUpdate) SetReqReturnInventoryReceive(prir productstore.ReqReturnInventoryReceive) *ProductStoreUpdate {
	psu.mutation.SetReqReturnInventoryReceive(prir)
	return psu
}

// SetNillableReqReturnInventoryReceive sets the "req_return_inventory_receive" field if the given value is not nil.
func (psu *ProductStoreUpdate) SetNillableReqReturnInventoryReceive(prir *productstore.ReqReturnInventoryReceive) *ProductStoreUpdate {
	if prir != nil {
		psu.SetReqReturnInventoryReceive(*prir)
	}
	return psu
}

// ClearReqReturnInventoryReceive clears the value of the "req_return_inventory_receive" field.
func (psu *ProductStoreUpdate) ClearReqReturnInventoryReceive() *ProductStoreUpdate {
	psu.mutation.ClearReqReturnInventoryReceive()
	return psu
}

// SetAddToCartRemoveIncompat sets the "add_to_cart_remove_incompat" field.
func (psu *ProductStoreUpdate) SetAddToCartRemoveIncompat(ptcri productstore.AddToCartRemoveIncompat) *ProductStoreUpdate {
	psu.mutation.SetAddToCartRemoveIncompat(ptcri)
	return psu
}

// SetNillableAddToCartRemoveIncompat sets the "add_to_cart_remove_incompat" field if the given value is not nil.
func (psu *ProductStoreUpdate) SetNillableAddToCartRemoveIncompat(ptcri *productstore.AddToCartRemoveIncompat) *ProductStoreUpdate {
	if ptcri != nil {
		psu.SetAddToCartRemoveIncompat(*ptcri)
	}
	return psu
}

// ClearAddToCartRemoveIncompat clears the value of the "add_to_cart_remove_incompat" field.
func (psu *ProductStoreUpdate) ClearAddToCartRemoveIncompat() *ProductStoreUpdate {
	psu.mutation.ClearAddToCartRemoveIncompat()
	return psu
}

// SetAddToCartReplaceUpsell sets the "add_to_cart_replace_upsell" field.
func (psu *ProductStoreUpdate) SetAddToCartReplaceUpsell(ptcru productstore.AddToCartReplaceUpsell) *ProductStoreUpdate {
	psu.mutation.SetAddToCartReplaceUpsell(ptcru)
	return psu
}

// SetNillableAddToCartReplaceUpsell sets the "add_to_cart_replace_upsell" field if the given value is not nil.
func (psu *ProductStoreUpdate) SetNillableAddToCartReplaceUpsell(ptcru *productstore.AddToCartReplaceUpsell) *ProductStoreUpdate {
	if ptcru != nil {
		psu.SetAddToCartReplaceUpsell(*ptcru)
	}
	return psu
}

// ClearAddToCartReplaceUpsell clears the value of the "add_to_cart_replace_upsell" field.
func (psu *ProductStoreUpdate) ClearAddToCartReplaceUpsell() *ProductStoreUpdate {
	psu.mutation.ClearAddToCartReplaceUpsell()
	return psu
}

// SetSplitPayPrefPerShpGrp sets the "split_pay_pref_per_shp_grp" field.
func (psu *ProductStoreUpdate) SetSplitPayPrefPerShpGrp(ppppsg productstore.SplitPayPrefPerShpGrp) *ProductStoreUpdate {
	psu.mutation.SetSplitPayPrefPerShpGrp(ppppsg)
	return psu
}

// SetNillableSplitPayPrefPerShpGrp sets the "split_pay_pref_per_shp_grp" field if the given value is not nil.
func (psu *ProductStoreUpdate) SetNillableSplitPayPrefPerShpGrp(ppppsg *productstore.SplitPayPrefPerShpGrp) *ProductStoreUpdate {
	if ppppsg != nil {
		psu.SetSplitPayPrefPerShpGrp(*ppppsg)
	}
	return psu
}

// ClearSplitPayPrefPerShpGrp clears the value of the "split_pay_pref_per_shp_grp" field.
func (psu *ProductStoreUpdate) ClearSplitPayPrefPerShpGrp() *ProductStoreUpdate {
	psu.mutation.ClearSplitPayPrefPerShpGrp()
	return psu
}

// SetManagedByLot sets the "managed_by_lot" field.
func (psu *ProductStoreUpdate) SetManagedByLot(pbl productstore.ManagedByLot) *ProductStoreUpdate {
	psu.mutation.SetManagedByLot(pbl)
	return psu
}

// SetNillableManagedByLot sets the "managed_by_lot" field if the given value is not nil.
func (psu *ProductStoreUpdate) SetNillableManagedByLot(pbl *productstore.ManagedByLot) *ProductStoreUpdate {
	if pbl != nil {
		psu.SetManagedByLot(*pbl)
	}
	return psu
}

// ClearManagedByLot clears the value of the "managed_by_lot" field.
func (psu *ProductStoreUpdate) ClearManagedByLot() *ProductStoreUpdate {
	psu.mutation.ClearManagedByLot()
	return psu
}

// SetShowOutOfStockProducts sets the "show_out_of_stock_products" field.
func (psu *ProductStoreUpdate) SetShowOutOfStockProducts(poosp productstore.ShowOutOfStockProducts) *ProductStoreUpdate {
	psu.mutation.SetShowOutOfStockProducts(poosp)
	return psu
}

// SetNillableShowOutOfStockProducts sets the "show_out_of_stock_products" field if the given value is not nil.
func (psu *ProductStoreUpdate) SetNillableShowOutOfStockProducts(poosp *productstore.ShowOutOfStockProducts) *ProductStoreUpdate {
	if poosp != nil {
		psu.SetShowOutOfStockProducts(*poosp)
	}
	return psu
}

// ClearShowOutOfStockProducts clears the value of the "show_out_of_stock_products" field.
func (psu *ProductStoreUpdate) ClearShowOutOfStockProducts() *ProductStoreUpdate {
	psu.mutation.ClearShowOutOfStockProducts()
	return psu
}

// SetOrderDecimalQuantity sets the "order_decimal_quantity" field.
func (psu *ProductStoreUpdate) SetOrderDecimalQuantity(pdq productstore.OrderDecimalQuantity) *ProductStoreUpdate {
	psu.mutation.SetOrderDecimalQuantity(pdq)
	return psu
}

// SetNillableOrderDecimalQuantity sets the "order_decimal_quantity" field if the given value is not nil.
func (psu *ProductStoreUpdate) SetNillableOrderDecimalQuantity(pdq *productstore.OrderDecimalQuantity) *ProductStoreUpdate {
	if pdq != nil {
		psu.SetOrderDecimalQuantity(*pdq)
	}
	return psu
}

// ClearOrderDecimalQuantity clears the value of the "order_decimal_quantity" field.
func (psu *ProductStoreUpdate) ClearOrderDecimalQuantity() *ProductStoreUpdate {
	psu.mutation.ClearOrderDecimalQuantity()
	return psu
}

// SetAllowComment sets the "allow_comment" field.
func (psu *ProductStoreUpdate) SetAllowComment(pc productstore.AllowComment) *ProductStoreUpdate {
	psu.mutation.SetAllowComment(pc)
	return psu
}

// SetNillableAllowComment sets the "allow_comment" field if the given value is not nil.
func (psu *ProductStoreUpdate) SetNillableAllowComment(pc *productstore.AllowComment) *ProductStoreUpdate {
	if pc != nil {
		psu.SetAllowComment(*pc)
	}
	return psu
}

// ClearAllowComment clears the value of the "allow_comment" field.
func (psu *ProductStoreUpdate) ClearAllowComment() *ProductStoreUpdate {
	psu.mutation.ClearAllowComment()
	return psu
}

// SetAllocateInventory sets the "allocate_inventory" field.
func (psu *ProductStoreUpdate) SetAllocateInventory(pi productstore.AllocateInventory) *ProductStoreUpdate {
	psu.mutation.SetAllocateInventory(pi)
	return psu
}

// SetNillableAllocateInventory sets the "allocate_inventory" field if the given value is not nil.
func (psu *ProductStoreUpdate) SetNillableAllocateInventory(pi *productstore.AllocateInventory) *ProductStoreUpdate {
	if pi != nil {
		psu.SetAllocateInventory(*pi)
	}
	return psu
}

// ClearAllocateInventory clears the value of the "allocate_inventory" field.
func (psu *ProductStoreUpdate) ClearAllocateInventory() *ProductStoreUpdate {
	psu.mutation.ClearAllocateInventory()
	return psu
}

// SetPrimaryProductStoreGroupID sets the "primary_product_store_group" edge to the ProductStoreGroup entity by ID.
func (psu *ProductStoreUpdate) SetPrimaryProductStoreGroupID(id int) *ProductStoreUpdate {
	psu.mutation.SetPrimaryProductStoreGroupID(id)
	return psu
}

// SetNillablePrimaryProductStoreGroupID sets the "primary_product_store_group" edge to the ProductStoreGroup entity by ID if the given value is not nil.
func (psu *ProductStoreUpdate) SetNillablePrimaryProductStoreGroupID(id *int) *ProductStoreUpdate {
	if id != nil {
		psu = psu.SetPrimaryProductStoreGroupID(*id)
	}
	return psu
}

// SetPrimaryProductStoreGroup sets the "primary_product_store_group" edge to the ProductStoreGroup entity.
func (psu *ProductStoreUpdate) SetPrimaryProductStoreGroup(p *ProductStoreGroup) *ProductStoreUpdate {
	return psu.SetPrimaryProductStoreGroupID(p.ID)
}

// SetReserveOrderEnumerationID sets the "reserve_order_enumeration" edge to the Enumeration entity by ID.
func (psu *ProductStoreUpdate) SetReserveOrderEnumerationID(id int) *ProductStoreUpdate {
	psu.mutation.SetReserveOrderEnumerationID(id)
	return psu
}

// SetNillableReserveOrderEnumerationID sets the "reserve_order_enumeration" edge to the Enumeration entity by ID if the given value is not nil.
func (psu *ProductStoreUpdate) SetNillableReserveOrderEnumerationID(id *int) *ProductStoreUpdate {
	if id != nil {
		psu = psu.SetReserveOrderEnumerationID(*id)
	}
	return psu
}

// SetReserveOrderEnumeration sets the "reserve_order_enumeration" edge to the Enumeration entity.
func (psu *ProductStoreUpdate) SetReserveOrderEnumeration(e *Enumeration) *ProductStoreUpdate {
	return psu.SetReserveOrderEnumerationID(e.ID)
}

// SetRequirementMethodEnumerationID sets the "requirement_method_enumeration" edge to the Enumeration entity by ID.
func (psu *ProductStoreUpdate) SetRequirementMethodEnumerationID(id int) *ProductStoreUpdate {
	psu.mutation.SetRequirementMethodEnumerationID(id)
	return psu
}

// SetNillableRequirementMethodEnumerationID sets the "requirement_method_enumeration" edge to the Enumeration entity by ID if the given value is not nil.
func (psu *ProductStoreUpdate) SetNillableRequirementMethodEnumerationID(id *int) *ProductStoreUpdate {
	if id != nil {
		psu = psu.SetRequirementMethodEnumerationID(*id)
	}
	return psu
}

// SetRequirementMethodEnumeration sets the "requirement_method_enumeration" edge to the Enumeration entity.
func (psu *ProductStoreUpdate) SetRequirementMethodEnumeration(e *Enumeration) *ProductStoreUpdate {
	return psu.SetRequirementMethodEnumerationID(e.ID)
}

// SetDefaultSalesChannelEnumerationID sets the "default_sales_channel_enumeration" edge to the Enumeration entity by ID.
func (psu *ProductStoreUpdate) SetDefaultSalesChannelEnumerationID(id int) *ProductStoreUpdate {
	psu.mutation.SetDefaultSalesChannelEnumerationID(id)
	return psu
}

// SetNillableDefaultSalesChannelEnumerationID sets the "default_sales_channel_enumeration" edge to the Enumeration entity by ID if the given value is not nil.
func (psu *ProductStoreUpdate) SetNillableDefaultSalesChannelEnumerationID(id *int) *ProductStoreUpdate {
	if id != nil {
		psu = psu.SetDefaultSalesChannelEnumerationID(*id)
	}
	return psu
}

// SetDefaultSalesChannelEnumeration sets the "default_sales_channel_enumeration" edge to the Enumeration entity.
func (psu *ProductStoreUpdate) SetDefaultSalesChannelEnumeration(e *Enumeration) *ProductStoreUpdate {
	return psu.SetDefaultSalesChannelEnumerationID(e.ID)
}

// SetHeaderApprovedStatusItemID sets the "header_approved_status_item" edge to the StatusItem entity by ID.
func (psu *ProductStoreUpdate) SetHeaderApprovedStatusItemID(id int) *ProductStoreUpdate {
	psu.mutation.SetHeaderApprovedStatusItemID(id)
	return psu
}

// SetNillableHeaderApprovedStatusItemID sets the "header_approved_status_item" edge to the StatusItem entity by ID if the given value is not nil.
func (psu *ProductStoreUpdate) SetNillableHeaderApprovedStatusItemID(id *int) *ProductStoreUpdate {
	if id != nil {
		psu = psu.SetHeaderApprovedStatusItemID(*id)
	}
	return psu
}

// SetHeaderApprovedStatusItem sets the "header_approved_status_item" edge to the StatusItem entity.
func (psu *ProductStoreUpdate) SetHeaderApprovedStatusItem(s *StatusItem) *ProductStoreUpdate {
	return psu.SetHeaderApprovedStatusItemID(s.ID)
}

// SetItemApprovedStatusItemID sets the "item_approved_status_item" edge to the StatusItem entity by ID.
func (psu *ProductStoreUpdate) SetItemApprovedStatusItemID(id int) *ProductStoreUpdate {
	psu.mutation.SetItemApprovedStatusItemID(id)
	return psu
}

// SetNillableItemApprovedStatusItemID sets the "item_approved_status_item" edge to the StatusItem entity by ID if the given value is not nil.
func (psu *ProductStoreUpdate) SetNillableItemApprovedStatusItemID(id *int) *ProductStoreUpdate {
	if id != nil {
		psu = psu.SetItemApprovedStatusItemID(*id)
	}
	return psu
}

// SetItemApprovedStatusItem sets the "item_approved_status_item" edge to the StatusItem entity.
func (psu *ProductStoreUpdate) SetItemApprovedStatusItem(s *StatusItem) *ProductStoreUpdate {
	return psu.SetItemApprovedStatusItemID(s.ID)
}

// SetDigitalItemApprovedStatusItemID sets the "digital_item_approved_status_item" edge to the StatusItem entity by ID.
func (psu *ProductStoreUpdate) SetDigitalItemApprovedStatusItemID(id int) *ProductStoreUpdate {
	psu.mutation.SetDigitalItemApprovedStatusItemID(id)
	return psu
}

// SetNillableDigitalItemApprovedStatusItemID sets the "digital_item_approved_status_item" edge to the StatusItem entity by ID if the given value is not nil.
func (psu *ProductStoreUpdate) SetNillableDigitalItemApprovedStatusItemID(id *int) *ProductStoreUpdate {
	if id != nil {
		psu = psu.SetDigitalItemApprovedStatusItemID(*id)
	}
	return psu
}

// SetDigitalItemApprovedStatusItem sets the "digital_item_approved_status_item" edge to the StatusItem entity.
func (psu *ProductStoreUpdate) SetDigitalItemApprovedStatusItem(s *StatusItem) *ProductStoreUpdate {
	return psu.SetDigitalItemApprovedStatusItemID(s.ID)
}

// SetHeaderDeclinedStatusItemID sets the "header_declined_status_item" edge to the StatusItem entity by ID.
func (psu *ProductStoreUpdate) SetHeaderDeclinedStatusItemID(id int) *ProductStoreUpdate {
	psu.mutation.SetHeaderDeclinedStatusItemID(id)
	return psu
}

// SetNillableHeaderDeclinedStatusItemID sets the "header_declined_status_item" edge to the StatusItem entity by ID if the given value is not nil.
func (psu *ProductStoreUpdate) SetNillableHeaderDeclinedStatusItemID(id *int) *ProductStoreUpdate {
	if id != nil {
		psu = psu.SetHeaderDeclinedStatusItemID(*id)
	}
	return psu
}

// SetHeaderDeclinedStatusItem sets the "header_declined_status_item" edge to the StatusItem entity.
func (psu *ProductStoreUpdate) SetHeaderDeclinedStatusItem(s *StatusItem) *ProductStoreUpdate {
	return psu.SetHeaderDeclinedStatusItemID(s.ID)
}

// SetItemDeclinedStatusItemID sets the "item_declined_status_item" edge to the StatusItem entity by ID.
func (psu *ProductStoreUpdate) SetItemDeclinedStatusItemID(id int) *ProductStoreUpdate {
	psu.mutation.SetItemDeclinedStatusItemID(id)
	return psu
}

// SetNillableItemDeclinedStatusItemID sets the "item_declined_status_item" edge to the StatusItem entity by ID if the given value is not nil.
func (psu *ProductStoreUpdate) SetNillableItemDeclinedStatusItemID(id *int) *ProductStoreUpdate {
	if id != nil {
		psu = psu.SetItemDeclinedStatusItemID(*id)
	}
	return psu
}

// SetItemDeclinedStatusItem sets the "item_declined_status_item" edge to the StatusItem entity.
func (psu *ProductStoreUpdate) SetItemDeclinedStatusItem(s *StatusItem) *ProductStoreUpdate {
	return psu.SetItemDeclinedStatusItemID(s.ID)
}

// SetHeaderCancelStatusItemID sets the "header_cancel_status_item" edge to the StatusItem entity by ID.
func (psu *ProductStoreUpdate) SetHeaderCancelStatusItemID(id int) *ProductStoreUpdate {
	psu.mutation.SetHeaderCancelStatusItemID(id)
	return psu
}

// SetNillableHeaderCancelStatusItemID sets the "header_cancel_status_item" edge to the StatusItem entity by ID if the given value is not nil.
func (psu *ProductStoreUpdate) SetNillableHeaderCancelStatusItemID(id *int) *ProductStoreUpdate {
	if id != nil {
		psu = psu.SetHeaderCancelStatusItemID(*id)
	}
	return psu
}

// SetHeaderCancelStatusItem sets the "header_cancel_status_item" edge to the StatusItem entity.
func (psu *ProductStoreUpdate) SetHeaderCancelStatusItem(s *StatusItem) *ProductStoreUpdate {
	return psu.SetHeaderCancelStatusItemID(s.ID)
}

// SetItemCancelStatusItemID sets the "item_cancel_status_item" edge to the StatusItem entity by ID.
func (psu *ProductStoreUpdate) SetItemCancelStatusItemID(id int) *ProductStoreUpdate {
	psu.mutation.SetItemCancelStatusItemID(id)
	return psu
}

// SetNillableItemCancelStatusItemID sets the "item_cancel_status_item" edge to the StatusItem entity by ID if the given value is not nil.
func (psu *ProductStoreUpdate) SetNillableItemCancelStatusItemID(id *int) *ProductStoreUpdate {
	if id != nil {
		psu = psu.SetItemCancelStatusItemID(*id)
	}
	return psu
}

// SetItemCancelStatusItem sets the "item_cancel_status_item" edge to the StatusItem entity.
func (psu *ProductStoreUpdate) SetItemCancelStatusItem(s *StatusItem) *ProductStoreUpdate {
	return psu.SetItemCancelStatusItemID(s.ID)
}

// SetStoreCreditAccountEnumerationID sets the "store_credit_account_enumeration" edge to the Enumeration entity by ID.
func (psu *ProductStoreUpdate) SetStoreCreditAccountEnumerationID(id int) *ProductStoreUpdate {
	psu.mutation.SetStoreCreditAccountEnumerationID(id)
	return psu
}

// SetNillableStoreCreditAccountEnumerationID sets the "store_credit_account_enumeration" edge to the Enumeration entity by ID if the given value is not nil.
func (psu *ProductStoreUpdate) SetNillableStoreCreditAccountEnumerationID(id *int) *ProductStoreUpdate {
	if id != nil {
		psu = psu.SetStoreCreditAccountEnumerationID(*id)
	}
	return psu
}

// SetStoreCreditAccountEnumeration sets the "store_credit_account_enumeration" edge to the Enumeration entity.
func (psu *ProductStoreUpdate) SetStoreCreditAccountEnumeration(e *Enumeration) *ProductStoreUpdate {
	return psu.SetStoreCreditAccountEnumerationID(e.ID)
}

// AddOrderHeaderIDs adds the "order_headers" edge to the OrderHeader entity by IDs.
func (psu *ProductStoreUpdate) AddOrderHeaderIDs(ids ...int) *ProductStoreUpdate {
	psu.mutation.AddOrderHeaderIDs(ids...)
	return psu
}

// AddOrderHeaders adds the "order_headers" edges to the OrderHeader entity.
func (psu *ProductStoreUpdate) AddOrderHeaders(o ...*OrderHeader) *ProductStoreUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return psu.AddOrderHeaderIDs(ids...)
}

// AddProductReviewIDs adds the "product_reviews" edge to the ProductReview entity by IDs.
func (psu *ProductStoreUpdate) AddProductReviewIDs(ids ...int) *ProductStoreUpdate {
	psu.mutation.AddProductReviewIDs(ids...)
	return psu
}

// AddProductReviews adds the "product_reviews" edges to the ProductReview entity.
func (psu *ProductStoreUpdate) AddProductReviews(p ...*ProductReview) *ProductStoreUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return psu.AddProductReviewIDs(ids...)
}

// Mutation returns the ProductStoreMutation object of the builder.
func (psu *ProductStoreUpdate) Mutation() *ProductStoreMutation {
	return psu.mutation
}

// ClearPrimaryProductStoreGroup clears the "primary_product_store_group" edge to the ProductStoreGroup entity.
func (psu *ProductStoreUpdate) ClearPrimaryProductStoreGroup() *ProductStoreUpdate {
	psu.mutation.ClearPrimaryProductStoreGroup()
	return psu
}

// ClearReserveOrderEnumeration clears the "reserve_order_enumeration" edge to the Enumeration entity.
func (psu *ProductStoreUpdate) ClearReserveOrderEnumeration() *ProductStoreUpdate {
	psu.mutation.ClearReserveOrderEnumeration()
	return psu
}

// ClearRequirementMethodEnumeration clears the "requirement_method_enumeration" edge to the Enumeration entity.
func (psu *ProductStoreUpdate) ClearRequirementMethodEnumeration() *ProductStoreUpdate {
	psu.mutation.ClearRequirementMethodEnumeration()
	return psu
}

// ClearDefaultSalesChannelEnumeration clears the "default_sales_channel_enumeration" edge to the Enumeration entity.
func (psu *ProductStoreUpdate) ClearDefaultSalesChannelEnumeration() *ProductStoreUpdate {
	psu.mutation.ClearDefaultSalesChannelEnumeration()
	return psu
}

// ClearHeaderApprovedStatusItem clears the "header_approved_status_item" edge to the StatusItem entity.
func (psu *ProductStoreUpdate) ClearHeaderApprovedStatusItem() *ProductStoreUpdate {
	psu.mutation.ClearHeaderApprovedStatusItem()
	return psu
}

// ClearItemApprovedStatusItem clears the "item_approved_status_item" edge to the StatusItem entity.
func (psu *ProductStoreUpdate) ClearItemApprovedStatusItem() *ProductStoreUpdate {
	psu.mutation.ClearItemApprovedStatusItem()
	return psu
}

// ClearDigitalItemApprovedStatusItem clears the "digital_item_approved_status_item" edge to the StatusItem entity.
func (psu *ProductStoreUpdate) ClearDigitalItemApprovedStatusItem() *ProductStoreUpdate {
	psu.mutation.ClearDigitalItemApprovedStatusItem()
	return psu
}

// ClearHeaderDeclinedStatusItem clears the "header_declined_status_item" edge to the StatusItem entity.
func (psu *ProductStoreUpdate) ClearHeaderDeclinedStatusItem() *ProductStoreUpdate {
	psu.mutation.ClearHeaderDeclinedStatusItem()
	return psu
}

// ClearItemDeclinedStatusItem clears the "item_declined_status_item" edge to the StatusItem entity.
func (psu *ProductStoreUpdate) ClearItemDeclinedStatusItem() *ProductStoreUpdate {
	psu.mutation.ClearItemDeclinedStatusItem()
	return psu
}

// ClearHeaderCancelStatusItem clears the "header_cancel_status_item" edge to the StatusItem entity.
func (psu *ProductStoreUpdate) ClearHeaderCancelStatusItem() *ProductStoreUpdate {
	psu.mutation.ClearHeaderCancelStatusItem()
	return psu
}

// ClearItemCancelStatusItem clears the "item_cancel_status_item" edge to the StatusItem entity.
func (psu *ProductStoreUpdate) ClearItemCancelStatusItem() *ProductStoreUpdate {
	psu.mutation.ClearItemCancelStatusItem()
	return psu
}

// ClearStoreCreditAccountEnumeration clears the "store_credit_account_enumeration" edge to the Enumeration entity.
func (psu *ProductStoreUpdate) ClearStoreCreditAccountEnumeration() *ProductStoreUpdate {
	psu.mutation.ClearStoreCreditAccountEnumeration()
	return psu
}

// ClearOrderHeaders clears all "order_headers" edges to the OrderHeader entity.
func (psu *ProductStoreUpdate) ClearOrderHeaders() *ProductStoreUpdate {
	psu.mutation.ClearOrderHeaders()
	return psu
}

// RemoveOrderHeaderIDs removes the "order_headers" edge to OrderHeader entities by IDs.
func (psu *ProductStoreUpdate) RemoveOrderHeaderIDs(ids ...int) *ProductStoreUpdate {
	psu.mutation.RemoveOrderHeaderIDs(ids...)
	return psu
}

// RemoveOrderHeaders removes "order_headers" edges to OrderHeader entities.
func (psu *ProductStoreUpdate) RemoveOrderHeaders(o ...*OrderHeader) *ProductStoreUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return psu.RemoveOrderHeaderIDs(ids...)
}

// ClearProductReviews clears all "product_reviews" edges to the ProductReview entity.
func (psu *ProductStoreUpdate) ClearProductReviews() *ProductStoreUpdate {
	psu.mutation.ClearProductReviews()
	return psu
}

// RemoveProductReviewIDs removes the "product_reviews" edge to ProductReview entities by IDs.
func (psu *ProductStoreUpdate) RemoveProductReviewIDs(ids ...int) *ProductStoreUpdate {
	psu.mutation.RemoveProductReviewIDs(ids...)
	return psu
}

// RemoveProductReviews removes "product_reviews" edges to ProductReview entities.
func (psu *ProductStoreUpdate) RemoveProductReviews(p ...*ProductReview) *ProductStoreUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return psu.RemoveProductReviewIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (psu *ProductStoreUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	psu.defaults()
	if len(psu.hooks) == 0 {
		if err = psu.check(); err != nil {
			return 0, err
		}
		affected, err = psu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProductStoreMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = psu.check(); err != nil {
				return 0, err
			}
			psu.mutation = mutation
			affected, err = psu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(psu.hooks) - 1; i >= 0; i-- {
			mut = psu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, psu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (psu *ProductStoreUpdate) SaveX(ctx context.Context) int {
	affected, err := psu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (psu *ProductStoreUpdate) Exec(ctx context.Context) error {
	_, err := psu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psu *ProductStoreUpdate) ExecX(ctx context.Context) {
	if err := psu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (psu *ProductStoreUpdate) defaults() {
	if _, ok := psu.mutation.UpdateTime(); !ok {
		v := productstore.UpdateDefaultUpdateTime()
		psu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (psu *ProductStoreUpdate) check() error {
	if v, ok := psu.mutation.ManualAuthIsCapture(); ok {
		if err := productstore.ManualAuthIsCaptureValidator(v); err != nil {
			return &ValidationError{Name: "manual_auth_is_capture", err: fmt.Errorf("ent: validator failed for field \"manual_auth_is_capture\": %w", err)}
		}
	}
	if v, ok := psu.mutation.ProrateShipping(); ok {
		if err := productstore.ProrateShippingValidator(v); err != nil {
			return &ValidationError{Name: "prorate_shipping", err: fmt.Errorf("ent: validator failed for field \"prorate_shipping\": %w", err)}
		}
	}
	if v, ok := psu.mutation.ProrateTaxes(); ok {
		if err := productstore.ProrateTaxesValidator(v); err != nil {
			return &ValidationError{Name: "prorate_taxes", err: fmt.Errorf("ent: validator failed for field \"prorate_taxes\": %w", err)}
		}
	}
	if v, ok := psu.mutation.ViewCartOnAdd(); ok {
		if err := productstore.ViewCartOnAddValidator(v); err != nil {
			return &ValidationError{Name: "view_cart_on_add", err: fmt.Errorf("ent: validator failed for field \"view_cart_on_add\": %w", err)}
		}
	}
	if v, ok := psu.mutation.AutoSaveCart(); ok {
		if err := productstore.AutoSaveCartValidator(v); err != nil {
			return &ValidationError{Name: "auto_save_cart", err: fmt.Errorf("ent: validator failed for field \"auto_save_cart\": %w", err)}
		}
	}
	if v, ok := psu.mutation.AutoApproveReviews(); ok {
		if err := productstore.AutoApproveReviewsValidator(v); err != nil {
			return &ValidationError{Name: "auto_approve_reviews", err: fmt.Errorf("ent: validator failed for field \"auto_approve_reviews\": %w", err)}
		}
	}
	if v, ok := psu.mutation.IsDemoStore(); ok {
		if err := productstore.IsDemoStoreValidator(v); err != nil {
			return &ValidationError{Name: "is_demo_store", err: fmt.Errorf("ent: validator failed for field \"is_demo_store\": %w", err)}
		}
	}
	if v, ok := psu.mutation.IsImmediatelyFulfilled(); ok {
		if err := productstore.IsImmediatelyFulfilledValidator(v); err != nil {
			return &ValidationError{Name: "is_immediately_fulfilled", err: fmt.Errorf("ent: validator failed for field \"is_immediately_fulfilled\": %w", err)}
		}
	}
	if v, ok := psu.mutation.OneInventoryFacility(); ok {
		if err := productstore.OneInventoryFacilityValidator(v); err != nil {
			return &ValidationError{Name: "one_inventory_facility", err: fmt.Errorf("ent: validator failed for field \"one_inventory_facility\": %w", err)}
		}
	}
	if v, ok := psu.mutation.CheckInventory(); ok {
		if err := productstore.CheckInventoryValidator(v); err != nil {
			return &ValidationError{Name: "check_inventory", err: fmt.Errorf("ent: validator failed for field \"check_inventory\": %w", err)}
		}
	}
	if v, ok := psu.mutation.ReserveInventory(); ok {
		if err := productstore.ReserveInventoryValidator(v); err != nil {
			return &ValidationError{Name: "reserve_inventory", err: fmt.Errorf("ent: validator failed for field \"reserve_inventory\": %w", err)}
		}
	}
	if v, ok := psu.mutation.RequireInventory(); ok {
		if err := productstore.RequireInventoryValidator(v); err != nil {
			return &ValidationError{Name: "require_inventory", err: fmt.Errorf("ent: validator failed for field \"require_inventory\": %w", err)}
		}
	}
	if v, ok := psu.mutation.BalanceResOnOrderCreation(); ok {
		if err := productstore.BalanceResOnOrderCreationValidator(v); err != nil {
			return &ValidationError{Name: "balance_res_on_order_creation", err: fmt.Errorf("ent: validator failed for field \"balance_res_on_order_creation\": %w", err)}
		}
	}
	if v, ok := psu.mutation.OrderNumberPrefix(); ok {
		if err := productstore.OrderNumberPrefixValidator(v); err != nil {
			return &ValidationError{Name: "order_number_prefix", err: fmt.Errorf("ent: validator failed for field \"order_number_prefix\": %w", err)}
		}
	}
	if v, ok := psu.mutation.DefaultLocaleString(); ok {
		if err := productstore.DefaultLocaleStringValidator(v); err != nil {
			return &ValidationError{Name: "default_locale_string", err: fmt.Errorf("ent: validator failed for field \"default_locale_string\": %w", err)}
		}
	}
	if v, ok := psu.mutation.DefaultTimeZoneString(); ok {
		if err := productstore.DefaultTimeZoneStringValidator(v); err != nil {
			return &ValidationError{Name: "default_time_zone_string", err: fmt.Errorf("ent: validator failed for field \"default_time_zone_string\": %w", err)}
		}
	}
	if v, ok := psu.mutation.AllowPassword(); ok {
		if err := productstore.AllowPasswordValidator(v); err != nil {
			return &ValidationError{Name: "allow_password", err: fmt.Errorf("ent: validator failed for field \"allow_password\": %w", err)}
		}
	}
	if v, ok := psu.mutation.ExplodeOrderItems(); ok {
		if err := productstore.ExplodeOrderItemsValidator(v); err != nil {
			return &ValidationError{Name: "explode_order_items", err: fmt.Errorf("ent: validator failed for field \"explode_order_items\": %w", err)}
		}
	}
	if v, ok := psu.mutation.CheckGcBalance(); ok {
		if err := productstore.CheckGcBalanceValidator(v); err != nil {
			return &ValidationError{Name: "check_gc_balance", err: fmt.Errorf("ent: validator failed for field \"check_gc_balance\": %w", err)}
		}
	}
	if v, ok := psu.mutation.RetryFailedAuths(); ok {
		if err := productstore.RetryFailedAuthsValidator(v); err != nil {
			return &ValidationError{Name: "retry_failed_auths", err: fmt.Errorf("ent: validator failed for field \"retry_failed_auths\": %w", err)}
		}
	}
	if v, ok := psu.mutation.UsePrimaryEmailUsername(); ok {
		if err := productstore.UsePrimaryEmailUsernameValidator(v); err != nil {
			return &ValidationError{Name: "use_primary_email_username", err: fmt.Errorf("ent: validator failed for field \"use_primary_email_username\": %w", err)}
		}
	}
	if v, ok := psu.mutation.RequireCustomerRole(); ok {
		if err := productstore.RequireCustomerRoleValidator(v); err != nil {
			return &ValidationError{Name: "require_customer_role", err: fmt.Errorf("ent: validator failed for field \"require_customer_role\": %w", err)}
		}
	}
	if v, ok := psu.mutation.AutoInvoiceDigitalItems(); ok {
		if err := productstore.AutoInvoiceDigitalItemsValidator(v); err != nil {
			return &ValidationError{Name: "auto_invoice_digital_items", err: fmt.Errorf("ent: validator failed for field \"auto_invoice_digital_items\": %w", err)}
		}
	}
	if v, ok := psu.mutation.ReqShipAddrForDigItems(); ok {
		if err := productstore.ReqShipAddrForDigItemsValidator(v); err != nil {
			return &ValidationError{Name: "req_ship_addr_for_dig_items", err: fmt.Errorf("ent: validator failed for field \"req_ship_addr_for_dig_items\": %w", err)}
		}
	}
	if v, ok := psu.mutation.ShowCheckoutGiftOptions(); ok {
		if err := productstore.ShowCheckoutGiftOptionsValidator(v); err != nil {
			return &ValidationError{Name: "show_checkout_gift_options", err: fmt.Errorf("ent: validator failed for field \"show_checkout_gift_options\": %w", err)}
		}
	}
	if v, ok := psu.mutation.SelectPaymentTypePerItem(); ok {
		if err := productstore.SelectPaymentTypePerItemValidator(v); err != nil {
			return &ValidationError{Name: "select_payment_type_per_item", err: fmt.Errorf("ent: validator failed for field \"select_payment_type_per_item\": %w", err)}
		}
	}
	if v, ok := psu.mutation.ShowPricesWithVatTax(); ok {
		if err := productstore.ShowPricesWithVatTaxValidator(v); err != nil {
			return &ValidationError{Name: "show_prices_with_vat_tax", err: fmt.Errorf("ent: validator failed for field \"show_prices_with_vat_tax\": %w", err)}
		}
	}
	if v, ok := psu.mutation.ShowTaxIsExempt(); ok {
		if err := productstore.ShowTaxIsExemptValidator(v); err != nil {
			return &ValidationError{Name: "show_tax_is_exempt", err: fmt.Errorf("ent: validator failed for field \"show_tax_is_exempt\": %w", err)}
		}
	}
	if v, ok := psu.mutation.EnableAutoSuggestionList(); ok {
		if err := productstore.EnableAutoSuggestionListValidator(v); err != nil {
			return &ValidationError{Name: "enable_auto_suggestion_list", err: fmt.Errorf("ent: validator failed for field \"enable_auto_suggestion_list\": %w", err)}
		}
	}
	if v, ok := psu.mutation.EnableDigProdUpload(); ok {
		if err := productstore.EnableDigProdUploadValidator(v); err != nil {
			return &ValidationError{Name: "enable_dig_prod_upload", err: fmt.Errorf("ent: validator failed for field \"enable_dig_prod_upload\": %w", err)}
		}
	}
	if v, ok := psu.mutation.ProdSearchExcludeVariants(); ok {
		if err := productstore.ProdSearchExcludeVariantsValidator(v); err != nil {
			return &ValidationError{Name: "prod_search_exclude_variants", err: fmt.Errorf("ent: validator failed for field \"prod_search_exclude_variants\": %w", err)}
		}
	}
	if v, ok := psu.mutation.AutoOrderCcTryExp(); ok {
		if err := productstore.AutoOrderCcTryExpValidator(v); err != nil {
			return &ValidationError{Name: "auto_order_cc_try_exp", err: fmt.Errorf("ent: validator failed for field \"auto_order_cc_try_exp\": %w", err)}
		}
	}
	if v, ok := psu.mutation.AutoOrderCcTryOtherCards(); ok {
		if err := productstore.AutoOrderCcTryOtherCardsValidator(v); err != nil {
			return &ValidationError{Name: "auto_order_cc_try_other_cards", err: fmt.Errorf("ent: validator failed for field \"auto_order_cc_try_other_cards\": %w", err)}
		}
	}
	if v, ok := psu.mutation.AutoOrderCcTryLaterNsf(); ok {
		if err := productstore.AutoOrderCcTryLaterNsfValidator(v); err != nil {
			return &ValidationError{Name: "auto_order_cc_try_later_nsf", err: fmt.Errorf("ent: validator failed for field \"auto_order_cc_try_later_nsf\": %w", err)}
		}
	}
	if v, ok := psu.mutation.AutoApproveInvoice(); ok {
		if err := productstore.AutoApproveInvoiceValidator(v); err != nil {
			return &ValidationError{Name: "auto_approve_invoice", err: fmt.Errorf("ent: validator failed for field \"auto_approve_invoice\": %w", err)}
		}
	}
	if v, ok := psu.mutation.AutoApproveOrder(); ok {
		if err := productstore.AutoApproveOrderValidator(v); err != nil {
			return &ValidationError{Name: "auto_approve_order", err: fmt.Errorf("ent: validator failed for field \"auto_approve_order\": %w", err)}
		}
	}
	if v, ok := psu.mutation.ShipIfCaptureFails(); ok {
		if err := productstore.ShipIfCaptureFailsValidator(v); err != nil {
			return &ValidationError{Name: "ship_if_capture_fails", err: fmt.Errorf("ent: validator failed for field \"ship_if_capture_fails\": %w", err)}
		}
	}
	if v, ok := psu.mutation.SetOwnerUponIssuance(); ok {
		if err := productstore.SetOwnerUponIssuanceValidator(v); err != nil {
			return &ValidationError{Name: "set_owner_upon_issuance", err: fmt.Errorf("ent: validator failed for field \"set_owner_upon_issuance\": %w", err)}
		}
	}
	if v, ok := psu.mutation.ReqReturnInventoryReceive(); ok {
		if err := productstore.ReqReturnInventoryReceiveValidator(v); err != nil {
			return &ValidationError{Name: "req_return_inventory_receive", err: fmt.Errorf("ent: validator failed for field \"req_return_inventory_receive\": %w", err)}
		}
	}
	if v, ok := psu.mutation.AddToCartRemoveIncompat(); ok {
		if err := productstore.AddToCartRemoveIncompatValidator(v); err != nil {
			return &ValidationError{Name: "add_to_cart_remove_incompat", err: fmt.Errorf("ent: validator failed for field \"add_to_cart_remove_incompat\": %w", err)}
		}
	}
	if v, ok := psu.mutation.AddToCartReplaceUpsell(); ok {
		if err := productstore.AddToCartReplaceUpsellValidator(v); err != nil {
			return &ValidationError{Name: "add_to_cart_replace_upsell", err: fmt.Errorf("ent: validator failed for field \"add_to_cart_replace_upsell\": %w", err)}
		}
	}
	if v, ok := psu.mutation.SplitPayPrefPerShpGrp(); ok {
		if err := productstore.SplitPayPrefPerShpGrpValidator(v); err != nil {
			return &ValidationError{Name: "split_pay_pref_per_shp_grp", err: fmt.Errorf("ent: validator failed for field \"split_pay_pref_per_shp_grp\": %w", err)}
		}
	}
	if v, ok := psu.mutation.ManagedByLot(); ok {
		if err := productstore.ManagedByLotValidator(v); err != nil {
			return &ValidationError{Name: "managed_by_lot", err: fmt.Errorf("ent: validator failed for field \"managed_by_lot\": %w", err)}
		}
	}
	if v, ok := psu.mutation.ShowOutOfStockProducts(); ok {
		if err := productstore.ShowOutOfStockProductsValidator(v); err != nil {
			return &ValidationError{Name: "show_out_of_stock_products", err: fmt.Errorf("ent: validator failed for field \"show_out_of_stock_products\": %w", err)}
		}
	}
	if v, ok := psu.mutation.OrderDecimalQuantity(); ok {
		if err := productstore.OrderDecimalQuantityValidator(v); err != nil {
			return &ValidationError{Name: "order_decimal_quantity", err: fmt.Errorf("ent: validator failed for field \"order_decimal_quantity\": %w", err)}
		}
	}
	if v, ok := psu.mutation.AllowComment(); ok {
		if err := productstore.AllowCommentValidator(v); err != nil {
			return &ValidationError{Name: "allow_comment", err: fmt.Errorf("ent: validator failed for field \"allow_comment\": %w", err)}
		}
	}
	if v, ok := psu.mutation.AllocateInventory(); ok {
		if err := productstore.AllocateInventoryValidator(v); err != nil {
			return &ValidationError{Name: "allocate_inventory", err: fmt.Errorf("ent: validator failed for field \"allocate_inventory\": %w", err)}
		}
	}
	return nil
}

func (psu *ProductStoreUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   productstore.Table,
			Columns: productstore.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: productstore.FieldID,
			},
		},
	}
	if ps := psu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := psu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productstore.FieldUpdateTime,
		})
	}
	if value, ok := psu.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productstore.FieldStringRef,
		})
	}
	if psu.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productstore.FieldStringRef,
		})
	}
	if value, ok := psu.mutation.StoreName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productstore.FieldStoreName,
		})
	}
	if psu.mutation.StoreNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productstore.FieldStoreName,
		})
	}
	if value, ok := psu.mutation.CompanyName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productstore.FieldCompanyName,
		})
	}
	if psu.mutation.CompanyNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productstore.FieldCompanyName,
		})
	}
	if value, ok := psu.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productstore.FieldTitle,
		})
	}
	if psu.mutation.TitleCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productstore.FieldTitle,
		})
	}
	if value, ok := psu.mutation.Subtitle(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productstore.FieldSubtitle,
		})
	}
	if psu.mutation.SubtitleCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productstore.FieldSubtitle,
		})
	}
	if value, ok := psu.mutation.PayToPartyID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productstore.FieldPayToPartyID,
		})
	}
	if value, ok := psu.mutation.AddedPayToPartyID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productstore.FieldPayToPartyID,
		})
	}
	if psu.mutation.PayToPartyIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: productstore.FieldPayToPartyID,
		})
	}
	if value, ok := psu.mutation.DaysToCancelNonPay(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productstore.FieldDaysToCancelNonPay,
		})
	}
	if value, ok := psu.mutation.AddedDaysToCancelNonPay(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productstore.FieldDaysToCancelNonPay,
		})
	}
	if psu.mutation.DaysToCancelNonPayCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: productstore.FieldDaysToCancelNonPay,
		})
	}
	if value, ok := psu.mutation.ManualAuthIsCapture(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldManualAuthIsCapture,
		})
	}
	if psu.mutation.ManualAuthIsCaptureCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productstore.FieldManualAuthIsCapture,
		})
	}
	if value, ok := psu.mutation.ProrateShipping(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldProrateShipping,
		})
	}
	if psu.mutation.ProrateShippingCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productstore.FieldProrateShipping,
		})
	}
	if value, ok := psu.mutation.ProrateTaxes(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldProrateTaxes,
		})
	}
	if psu.mutation.ProrateTaxesCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productstore.FieldProrateTaxes,
		})
	}
	if value, ok := psu.mutation.ViewCartOnAdd(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldViewCartOnAdd,
		})
	}
	if psu.mutation.ViewCartOnAddCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productstore.FieldViewCartOnAdd,
		})
	}
	if value, ok := psu.mutation.AutoSaveCart(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldAutoSaveCart,
		})
	}
	if psu.mutation.AutoSaveCartCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productstore.FieldAutoSaveCart,
		})
	}
	if value, ok := psu.mutation.AutoApproveReviews(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldAutoApproveReviews,
		})
	}
	if psu.mutation.AutoApproveReviewsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productstore.FieldAutoApproveReviews,
		})
	}
	if value, ok := psu.mutation.IsDemoStore(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldIsDemoStore,
		})
	}
	if psu.mutation.IsDemoStoreCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productstore.FieldIsDemoStore,
		})
	}
	if value, ok := psu.mutation.IsImmediatelyFulfilled(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldIsImmediatelyFulfilled,
		})
	}
	if psu.mutation.IsImmediatelyFulfilledCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productstore.FieldIsImmediatelyFulfilled,
		})
	}
	if value, ok := psu.mutation.InventoryFacilityID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productstore.FieldInventoryFacilityID,
		})
	}
	if value, ok := psu.mutation.AddedInventoryFacilityID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productstore.FieldInventoryFacilityID,
		})
	}
	if psu.mutation.InventoryFacilityIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: productstore.FieldInventoryFacilityID,
		})
	}
	if value, ok := psu.mutation.OneInventoryFacility(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldOneInventoryFacility,
		})
	}
	if psu.mutation.OneInventoryFacilityCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productstore.FieldOneInventoryFacility,
		})
	}
	if value, ok := psu.mutation.CheckInventory(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldCheckInventory,
		})
	}
	if psu.mutation.CheckInventoryCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productstore.FieldCheckInventory,
		})
	}
	if value, ok := psu.mutation.ReserveInventory(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldReserveInventory,
		})
	}
	if psu.mutation.ReserveInventoryCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productstore.FieldReserveInventory,
		})
	}
	if value, ok := psu.mutation.RequireInventory(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldRequireInventory,
		})
	}
	if psu.mutation.RequireInventoryCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productstore.FieldRequireInventory,
		})
	}
	if value, ok := psu.mutation.BalanceResOnOrderCreation(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldBalanceResOnOrderCreation,
		})
	}
	if psu.mutation.BalanceResOnOrderCreationCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productstore.FieldBalanceResOnOrderCreation,
		})
	}
	if value, ok := psu.mutation.OrderNumberPrefix(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productstore.FieldOrderNumberPrefix,
		})
	}
	if psu.mutation.OrderNumberPrefixCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productstore.FieldOrderNumberPrefix,
		})
	}
	if value, ok := psu.mutation.DefaultLocaleString(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productstore.FieldDefaultLocaleString,
		})
	}
	if psu.mutation.DefaultLocaleStringCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productstore.FieldDefaultLocaleString,
		})
	}
	if value, ok := psu.mutation.DefaultCurrencyUomID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productstore.FieldDefaultCurrencyUomID,
		})
	}
	if value, ok := psu.mutation.AddedDefaultCurrencyUomID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productstore.FieldDefaultCurrencyUomID,
		})
	}
	if psu.mutation.DefaultCurrencyUomIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: productstore.FieldDefaultCurrencyUomID,
		})
	}
	if value, ok := psu.mutation.DefaultTimeZoneString(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productstore.FieldDefaultTimeZoneString,
		})
	}
	if psu.mutation.DefaultTimeZoneStringCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productstore.FieldDefaultTimeZoneString,
		})
	}
	if value, ok := psu.mutation.AllowPassword(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldAllowPassword,
		})
	}
	if psu.mutation.AllowPasswordCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productstore.FieldAllowPassword,
		})
	}
	if value, ok := psu.mutation.DefaultPassword(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productstore.FieldDefaultPassword,
		})
	}
	if psu.mutation.DefaultPasswordCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productstore.FieldDefaultPassword,
		})
	}
	if value, ok := psu.mutation.ExplodeOrderItems(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldExplodeOrderItems,
		})
	}
	if psu.mutation.ExplodeOrderItemsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productstore.FieldExplodeOrderItems,
		})
	}
	if value, ok := psu.mutation.CheckGcBalance(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldCheckGcBalance,
		})
	}
	if psu.mutation.CheckGcBalanceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productstore.FieldCheckGcBalance,
		})
	}
	if value, ok := psu.mutation.RetryFailedAuths(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldRetryFailedAuths,
		})
	}
	if psu.mutation.RetryFailedAuthsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productstore.FieldRetryFailedAuths,
		})
	}
	if value, ok := psu.mutation.AuthDeclinedMessage(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productstore.FieldAuthDeclinedMessage,
		})
	}
	if psu.mutation.AuthDeclinedMessageCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productstore.FieldAuthDeclinedMessage,
		})
	}
	if value, ok := psu.mutation.AuthFraudMessage(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productstore.FieldAuthFraudMessage,
		})
	}
	if psu.mutation.AuthFraudMessageCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productstore.FieldAuthFraudMessage,
		})
	}
	if value, ok := psu.mutation.AuthErrorMessage(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productstore.FieldAuthErrorMessage,
		})
	}
	if psu.mutation.AuthErrorMessageCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productstore.FieldAuthErrorMessage,
		})
	}
	if value, ok := psu.mutation.VisualThemeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productstore.FieldVisualThemeID,
		})
	}
	if value, ok := psu.mutation.AddedVisualThemeID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productstore.FieldVisualThemeID,
		})
	}
	if psu.mutation.VisualThemeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: productstore.FieldVisualThemeID,
		})
	}
	if value, ok := psu.mutation.UsePrimaryEmailUsername(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldUsePrimaryEmailUsername,
		})
	}
	if psu.mutation.UsePrimaryEmailUsernameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productstore.FieldUsePrimaryEmailUsername,
		})
	}
	if value, ok := psu.mutation.RequireCustomerRole(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldRequireCustomerRole,
		})
	}
	if psu.mutation.RequireCustomerRoleCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productstore.FieldRequireCustomerRole,
		})
	}
	if value, ok := psu.mutation.AutoInvoiceDigitalItems(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldAutoInvoiceDigitalItems,
		})
	}
	if psu.mutation.AutoInvoiceDigitalItemsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productstore.FieldAutoInvoiceDigitalItems,
		})
	}
	if value, ok := psu.mutation.ReqShipAddrForDigItems(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldReqShipAddrForDigItems,
		})
	}
	if psu.mutation.ReqShipAddrForDigItemsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productstore.FieldReqShipAddrForDigItems,
		})
	}
	if value, ok := psu.mutation.ShowCheckoutGiftOptions(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldShowCheckoutGiftOptions,
		})
	}
	if psu.mutation.ShowCheckoutGiftOptionsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productstore.FieldShowCheckoutGiftOptions,
		})
	}
	if value, ok := psu.mutation.SelectPaymentTypePerItem(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldSelectPaymentTypePerItem,
		})
	}
	if psu.mutation.SelectPaymentTypePerItemCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productstore.FieldSelectPaymentTypePerItem,
		})
	}
	if value, ok := psu.mutation.ShowPricesWithVatTax(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldShowPricesWithVatTax,
		})
	}
	if psu.mutation.ShowPricesWithVatTaxCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productstore.FieldShowPricesWithVatTax,
		})
	}
	if value, ok := psu.mutation.ShowTaxIsExempt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldShowTaxIsExempt,
		})
	}
	if psu.mutation.ShowTaxIsExemptCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productstore.FieldShowTaxIsExempt,
		})
	}
	if value, ok := psu.mutation.VatTaxAuthGeoID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productstore.FieldVatTaxAuthGeoID,
		})
	}
	if value, ok := psu.mutation.AddedVatTaxAuthGeoID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productstore.FieldVatTaxAuthGeoID,
		})
	}
	if psu.mutation.VatTaxAuthGeoIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: productstore.FieldVatTaxAuthGeoID,
		})
	}
	if value, ok := psu.mutation.VatTaxAuthPartyID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productstore.FieldVatTaxAuthPartyID,
		})
	}
	if value, ok := psu.mutation.AddedVatTaxAuthPartyID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productstore.FieldVatTaxAuthPartyID,
		})
	}
	if psu.mutation.VatTaxAuthPartyIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: productstore.FieldVatTaxAuthPartyID,
		})
	}
	if value, ok := psu.mutation.EnableAutoSuggestionList(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldEnableAutoSuggestionList,
		})
	}
	if psu.mutation.EnableAutoSuggestionListCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productstore.FieldEnableAutoSuggestionList,
		})
	}
	if value, ok := psu.mutation.EnableDigProdUpload(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldEnableDigProdUpload,
		})
	}
	if psu.mutation.EnableDigProdUploadCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productstore.FieldEnableDigProdUpload,
		})
	}
	if value, ok := psu.mutation.ProdSearchExcludeVariants(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldProdSearchExcludeVariants,
		})
	}
	if psu.mutation.ProdSearchExcludeVariantsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productstore.FieldProdSearchExcludeVariants,
		})
	}
	if value, ok := psu.mutation.DigProdUploadCategoryID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productstore.FieldDigProdUploadCategoryID,
		})
	}
	if value, ok := psu.mutation.AddedDigProdUploadCategoryID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productstore.FieldDigProdUploadCategoryID,
		})
	}
	if psu.mutation.DigProdUploadCategoryIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: productstore.FieldDigProdUploadCategoryID,
		})
	}
	if value, ok := psu.mutation.AutoOrderCcTryExp(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldAutoOrderCcTryExp,
		})
	}
	if psu.mutation.AutoOrderCcTryExpCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productstore.FieldAutoOrderCcTryExp,
		})
	}
	if value, ok := psu.mutation.AutoOrderCcTryOtherCards(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldAutoOrderCcTryOtherCards,
		})
	}
	if psu.mutation.AutoOrderCcTryOtherCardsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productstore.FieldAutoOrderCcTryOtherCards,
		})
	}
	if value, ok := psu.mutation.AutoOrderCcTryLaterNsf(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldAutoOrderCcTryLaterNsf,
		})
	}
	if psu.mutation.AutoOrderCcTryLaterNsfCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productstore.FieldAutoOrderCcTryLaterNsf,
		})
	}
	if value, ok := psu.mutation.AutoOrderCcTryLaterMax(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productstore.FieldAutoOrderCcTryLaterMax,
		})
	}
	if value, ok := psu.mutation.AddedAutoOrderCcTryLaterMax(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productstore.FieldAutoOrderCcTryLaterMax,
		})
	}
	if psu.mutation.AutoOrderCcTryLaterMaxCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: productstore.FieldAutoOrderCcTryLaterMax,
		})
	}
	if value, ok := psu.mutation.StoreCreditValidDays(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productstore.FieldStoreCreditValidDays,
		})
	}
	if value, ok := psu.mutation.AddedStoreCreditValidDays(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productstore.FieldStoreCreditValidDays,
		})
	}
	if psu.mutation.StoreCreditValidDaysCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: productstore.FieldStoreCreditValidDays,
		})
	}
	if value, ok := psu.mutation.AutoApproveInvoice(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldAutoApproveInvoice,
		})
	}
	if psu.mutation.AutoApproveInvoiceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productstore.FieldAutoApproveInvoice,
		})
	}
	if value, ok := psu.mutation.AutoApproveOrder(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldAutoApproveOrder,
		})
	}
	if psu.mutation.AutoApproveOrderCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productstore.FieldAutoApproveOrder,
		})
	}
	if value, ok := psu.mutation.ShipIfCaptureFails(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldShipIfCaptureFails,
		})
	}
	if psu.mutation.ShipIfCaptureFailsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productstore.FieldShipIfCaptureFails,
		})
	}
	if value, ok := psu.mutation.SetOwnerUponIssuance(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldSetOwnerUponIssuance,
		})
	}
	if psu.mutation.SetOwnerUponIssuanceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productstore.FieldSetOwnerUponIssuance,
		})
	}
	if value, ok := psu.mutation.ReqReturnInventoryReceive(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldReqReturnInventoryReceive,
		})
	}
	if psu.mutation.ReqReturnInventoryReceiveCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productstore.FieldReqReturnInventoryReceive,
		})
	}
	if value, ok := psu.mutation.AddToCartRemoveIncompat(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldAddToCartRemoveIncompat,
		})
	}
	if psu.mutation.AddToCartRemoveIncompatCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productstore.FieldAddToCartRemoveIncompat,
		})
	}
	if value, ok := psu.mutation.AddToCartReplaceUpsell(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldAddToCartReplaceUpsell,
		})
	}
	if psu.mutation.AddToCartReplaceUpsellCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productstore.FieldAddToCartReplaceUpsell,
		})
	}
	if value, ok := psu.mutation.SplitPayPrefPerShpGrp(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldSplitPayPrefPerShpGrp,
		})
	}
	if psu.mutation.SplitPayPrefPerShpGrpCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productstore.FieldSplitPayPrefPerShpGrp,
		})
	}
	if value, ok := psu.mutation.ManagedByLot(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldManagedByLot,
		})
	}
	if psu.mutation.ManagedByLotCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productstore.FieldManagedByLot,
		})
	}
	if value, ok := psu.mutation.ShowOutOfStockProducts(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldShowOutOfStockProducts,
		})
	}
	if psu.mutation.ShowOutOfStockProductsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productstore.FieldShowOutOfStockProducts,
		})
	}
	if value, ok := psu.mutation.OrderDecimalQuantity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldOrderDecimalQuantity,
		})
	}
	if psu.mutation.OrderDecimalQuantityCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productstore.FieldOrderDecimalQuantity,
		})
	}
	if value, ok := psu.mutation.AllowComment(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldAllowComment,
		})
	}
	if psu.mutation.AllowCommentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productstore.FieldAllowComment,
		})
	}
	if value, ok := psu.mutation.AllocateInventory(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldAllocateInventory,
		})
	}
	if psu.mutation.AllocateInventoryCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productstore.FieldAllocateInventory,
		})
	}
	if psu.mutation.PrimaryProductStoreGroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productstore.PrimaryProductStoreGroupTable,
			Columns: []string{productstore.PrimaryProductStoreGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productstoregroup.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.PrimaryProductStoreGroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productstore.PrimaryProductStoreGroupTable,
			Columns: []string{productstore.PrimaryProductStoreGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productstoregroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psu.mutation.ReserveOrderEnumerationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productstore.ReserveOrderEnumerationTable,
			Columns: []string{productstore.ReserveOrderEnumerationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: enumeration.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.ReserveOrderEnumerationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productstore.ReserveOrderEnumerationTable,
			Columns: []string{productstore.ReserveOrderEnumerationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: enumeration.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psu.mutation.RequirementMethodEnumerationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productstore.RequirementMethodEnumerationTable,
			Columns: []string{productstore.RequirementMethodEnumerationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: enumeration.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.RequirementMethodEnumerationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productstore.RequirementMethodEnumerationTable,
			Columns: []string{productstore.RequirementMethodEnumerationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: enumeration.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psu.mutation.DefaultSalesChannelEnumerationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productstore.DefaultSalesChannelEnumerationTable,
			Columns: []string{productstore.DefaultSalesChannelEnumerationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: enumeration.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.DefaultSalesChannelEnumerationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productstore.DefaultSalesChannelEnumerationTable,
			Columns: []string{productstore.DefaultSalesChannelEnumerationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: enumeration.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psu.mutation.HeaderApprovedStatusItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productstore.HeaderApprovedStatusItemTable,
			Columns: []string{productstore.HeaderApprovedStatusItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusitem.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.HeaderApprovedStatusItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productstore.HeaderApprovedStatusItemTable,
			Columns: []string{productstore.HeaderApprovedStatusItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psu.mutation.ItemApprovedStatusItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productstore.ItemApprovedStatusItemTable,
			Columns: []string{productstore.ItemApprovedStatusItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusitem.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.ItemApprovedStatusItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productstore.ItemApprovedStatusItemTable,
			Columns: []string{productstore.ItemApprovedStatusItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psu.mutation.DigitalItemApprovedStatusItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productstore.DigitalItemApprovedStatusItemTable,
			Columns: []string{productstore.DigitalItemApprovedStatusItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusitem.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.DigitalItemApprovedStatusItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productstore.DigitalItemApprovedStatusItemTable,
			Columns: []string{productstore.DigitalItemApprovedStatusItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psu.mutation.HeaderDeclinedStatusItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productstore.HeaderDeclinedStatusItemTable,
			Columns: []string{productstore.HeaderDeclinedStatusItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusitem.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.HeaderDeclinedStatusItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productstore.HeaderDeclinedStatusItemTable,
			Columns: []string{productstore.HeaderDeclinedStatusItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psu.mutation.ItemDeclinedStatusItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productstore.ItemDeclinedStatusItemTable,
			Columns: []string{productstore.ItemDeclinedStatusItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusitem.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.ItemDeclinedStatusItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productstore.ItemDeclinedStatusItemTable,
			Columns: []string{productstore.ItemDeclinedStatusItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psu.mutation.HeaderCancelStatusItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productstore.HeaderCancelStatusItemTable,
			Columns: []string{productstore.HeaderCancelStatusItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusitem.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.HeaderCancelStatusItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productstore.HeaderCancelStatusItemTable,
			Columns: []string{productstore.HeaderCancelStatusItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psu.mutation.ItemCancelStatusItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productstore.ItemCancelStatusItemTable,
			Columns: []string{productstore.ItemCancelStatusItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusitem.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.ItemCancelStatusItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productstore.ItemCancelStatusItemTable,
			Columns: []string{productstore.ItemCancelStatusItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psu.mutation.StoreCreditAccountEnumerationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productstore.StoreCreditAccountEnumerationTable,
			Columns: []string{productstore.StoreCreditAccountEnumerationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: enumeration.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.StoreCreditAccountEnumerationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productstore.StoreCreditAccountEnumerationTable,
			Columns: []string{productstore.StoreCreditAccountEnumerationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: enumeration.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psu.mutation.OrderHeadersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productstore.OrderHeadersTable,
			Columns: []string{productstore.OrderHeadersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderheader.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.RemovedOrderHeadersIDs(); len(nodes) > 0 && !psu.mutation.OrderHeadersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productstore.OrderHeadersTable,
			Columns: []string{productstore.OrderHeadersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderheader.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.OrderHeadersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productstore.OrderHeadersTable,
			Columns: []string{productstore.OrderHeadersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderheader.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psu.mutation.ProductReviewsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productstore.ProductReviewsTable,
			Columns: []string{productstore.ProductReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productreview.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.RemovedProductReviewsIDs(); len(nodes) > 0 && !psu.mutation.ProductReviewsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productstore.ProductReviewsTable,
			Columns: []string{productstore.ProductReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productreview.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.ProductReviewsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productstore.ProductReviewsTable,
			Columns: []string{productstore.ProductReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productreview.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, psu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productstore.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ProductStoreUpdateOne is the builder for updating a single ProductStore entity.
type ProductStoreUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProductStoreMutation
}

// SetStringRef sets the "string_ref" field.
func (psuo *ProductStoreUpdateOne) SetStringRef(s string) *ProductStoreUpdateOne {
	psuo.mutation.SetStringRef(s)
	return psuo
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (psuo *ProductStoreUpdateOne) SetNillableStringRef(s *string) *ProductStoreUpdateOne {
	if s != nil {
		psuo.SetStringRef(*s)
	}
	return psuo
}

// ClearStringRef clears the value of the "string_ref" field.
func (psuo *ProductStoreUpdateOne) ClearStringRef() *ProductStoreUpdateOne {
	psuo.mutation.ClearStringRef()
	return psuo
}

// SetStoreName sets the "store_name" field.
func (psuo *ProductStoreUpdateOne) SetStoreName(s string) *ProductStoreUpdateOne {
	psuo.mutation.SetStoreName(s)
	return psuo
}

// SetNillableStoreName sets the "store_name" field if the given value is not nil.
func (psuo *ProductStoreUpdateOne) SetNillableStoreName(s *string) *ProductStoreUpdateOne {
	if s != nil {
		psuo.SetStoreName(*s)
	}
	return psuo
}

// ClearStoreName clears the value of the "store_name" field.
func (psuo *ProductStoreUpdateOne) ClearStoreName() *ProductStoreUpdateOne {
	psuo.mutation.ClearStoreName()
	return psuo
}

// SetCompanyName sets the "company_name" field.
func (psuo *ProductStoreUpdateOne) SetCompanyName(s string) *ProductStoreUpdateOne {
	psuo.mutation.SetCompanyName(s)
	return psuo
}

// SetNillableCompanyName sets the "company_name" field if the given value is not nil.
func (psuo *ProductStoreUpdateOne) SetNillableCompanyName(s *string) *ProductStoreUpdateOne {
	if s != nil {
		psuo.SetCompanyName(*s)
	}
	return psuo
}

// ClearCompanyName clears the value of the "company_name" field.
func (psuo *ProductStoreUpdateOne) ClearCompanyName() *ProductStoreUpdateOne {
	psuo.mutation.ClearCompanyName()
	return psuo
}

// SetTitle sets the "title" field.
func (psuo *ProductStoreUpdateOne) SetTitle(s string) *ProductStoreUpdateOne {
	psuo.mutation.SetTitle(s)
	return psuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (psuo *ProductStoreUpdateOne) SetNillableTitle(s *string) *ProductStoreUpdateOne {
	if s != nil {
		psuo.SetTitle(*s)
	}
	return psuo
}

// ClearTitle clears the value of the "title" field.
func (psuo *ProductStoreUpdateOne) ClearTitle() *ProductStoreUpdateOne {
	psuo.mutation.ClearTitle()
	return psuo
}

// SetSubtitle sets the "subtitle" field.
func (psuo *ProductStoreUpdateOne) SetSubtitle(s string) *ProductStoreUpdateOne {
	psuo.mutation.SetSubtitle(s)
	return psuo
}

// SetNillableSubtitle sets the "subtitle" field if the given value is not nil.
func (psuo *ProductStoreUpdateOne) SetNillableSubtitle(s *string) *ProductStoreUpdateOne {
	if s != nil {
		psuo.SetSubtitle(*s)
	}
	return psuo
}

// ClearSubtitle clears the value of the "subtitle" field.
func (psuo *ProductStoreUpdateOne) ClearSubtitle() *ProductStoreUpdateOne {
	psuo.mutation.ClearSubtitle()
	return psuo
}

// SetPayToPartyID sets the "pay_to_party_id" field.
func (psuo *ProductStoreUpdateOne) SetPayToPartyID(i int) *ProductStoreUpdateOne {
	psuo.mutation.ResetPayToPartyID()
	psuo.mutation.SetPayToPartyID(i)
	return psuo
}

// SetNillablePayToPartyID sets the "pay_to_party_id" field if the given value is not nil.
func (psuo *ProductStoreUpdateOne) SetNillablePayToPartyID(i *int) *ProductStoreUpdateOne {
	if i != nil {
		psuo.SetPayToPartyID(*i)
	}
	return psuo
}

// AddPayToPartyID adds i to the "pay_to_party_id" field.
func (psuo *ProductStoreUpdateOne) AddPayToPartyID(i int) *ProductStoreUpdateOne {
	psuo.mutation.AddPayToPartyID(i)
	return psuo
}

// ClearPayToPartyID clears the value of the "pay_to_party_id" field.
func (psuo *ProductStoreUpdateOne) ClearPayToPartyID() *ProductStoreUpdateOne {
	psuo.mutation.ClearPayToPartyID()
	return psuo
}

// SetDaysToCancelNonPay sets the "days_to_cancel_non_pay" field.
func (psuo *ProductStoreUpdateOne) SetDaysToCancelNonPay(i int) *ProductStoreUpdateOne {
	psuo.mutation.ResetDaysToCancelNonPay()
	psuo.mutation.SetDaysToCancelNonPay(i)
	return psuo
}

// SetNillableDaysToCancelNonPay sets the "days_to_cancel_non_pay" field if the given value is not nil.
func (psuo *ProductStoreUpdateOne) SetNillableDaysToCancelNonPay(i *int) *ProductStoreUpdateOne {
	if i != nil {
		psuo.SetDaysToCancelNonPay(*i)
	}
	return psuo
}

// AddDaysToCancelNonPay adds i to the "days_to_cancel_non_pay" field.
func (psuo *ProductStoreUpdateOne) AddDaysToCancelNonPay(i int) *ProductStoreUpdateOne {
	psuo.mutation.AddDaysToCancelNonPay(i)
	return psuo
}

// ClearDaysToCancelNonPay clears the value of the "days_to_cancel_non_pay" field.
func (psuo *ProductStoreUpdateOne) ClearDaysToCancelNonPay() *ProductStoreUpdateOne {
	psuo.mutation.ClearDaysToCancelNonPay()
	return psuo
}

// SetManualAuthIsCapture sets the "manual_auth_is_capture" field.
func (psuo *ProductStoreUpdateOne) SetManualAuthIsCapture(paic productstore.ManualAuthIsCapture) *ProductStoreUpdateOne {
	psuo.mutation.SetManualAuthIsCapture(paic)
	return psuo
}

// SetNillableManualAuthIsCapture sets the "manual_auth_is_capture" field if the given value is not nil.
func (psuo *ProductStoreUpdateOne) SetNillableManualAuthIsCapture(paic *productstore.ManualAuthIsCapture) *ProductStoreUpdateOne {
	if paic != nil {
		psuo.SetManualAuthIsCapture(*paic)
	}
	return psuo
}

// ClearManualAuthIsCapture clears the value of the "manual_auth_is_capture" field.
func (psuo *ProductStoreUpdateOne) ClearManualAuthIsCapture() *ProductStoreUpdateOne {
	psuo.mutation.ClearManualAuthIsCapture()
	return psuo
}

// SetProrateShipping sets the "prorate_shipping" field.
func (psuo *ProductStoreUpdateOne) SetProrateShipping(ps productstore.ProrateShipping) *ProductStoreUpdateOne {
	psuo.mutation.SetProrateShipping(ps)
	return psuo
}

// SetNillableProrateShipping sets the "prorate_shipping" field if the given value is not nil.
func (psuo *ProductStoreUpdateOne) SetNillableProrateShipping(ps *productstore.ProrateShipping) *ProductStoreUpdateOne {
	if ps != nil {
		psuo.SetProrateShipping(*ps)
	}
	return psuo
}

// ClearProrateShipping clears the value of the "prorate_shipping" field.
func (psuo *ProductStoreUpdateOne) ClearProrateShipping() *ProductStoreUpdateOne {
	psuo.mutation.ClearProrateShipping()
	return psuo
}

// SetProrateTaxes sets the "prorate_taxes" field.
func (psuo *ProductStoreUpdateOne) SetProrateTaxes(pt productstore.ProrateTaxes) *ProductStoreUpdateOne {
	psuo.mutation.SetProrateTaxes(pt)
	return psuo
}

// SetNillableProrateTaxes sets the "prorate_taxes" field if the given value is not nil.
func (psuo *ProductStoreUpdateOne) SetNillableProrateTaxes(pt *productstore.ProrateTaxes) *ProductStoreUpdateOne {
	if pt != nil {
		psuo.SetProrateTaxes(*pt)
	}
	return psuo
}

// ClearProrateTaxes clears the value of the "prorate_taxes" field.
func (psuo *ProductStoreUpdateOne) ClearProrateTaxes() *ProductStoreUpdateOne {
	psuo.mutation.ClearProrateTaxes()
	return psuo
}

// SetViewCartOnAdd sets the "view_cart_on_add" field.
func (psuo *ProductStoreUpdateOne) SetViewCartOnAdd(pcoa productstore.ViewCartOnAdd) *ProductStoreUpdateOne {
	psuo.mutation.SetViewCartOnAdd(pcoa)
	return psuo
}

// SetNillableViewCartOnAdd sets the "view_cart_on_add" field if the given value is not nil.
func (psuo *ProductStoreUpdateOne) SetNillableViewCartOnAdd(pcoa *productstore.ViewCartOnAdd) *ProductStoreUpdateOne {
	if pcoa != nil {
		psuo.SetViewCartOnAdd(*pcoa)
	}
	return psuo
}

// ClearViewCartOnAdd clears the value of the "view_cart_on_add" field.
func (psuo *ProductStoreUpdateOne) ClearViewCartOnAdd() *ProductStoreUpdateOne {
	psuo.mutation.ClearViewCartOnAdd()
	return psuo
}

// SetAutoSaveCart sets the "auto_save_cart" field.
func (psuo *ProductStoreUpdateOne) SetAutoSaveCart(psc productstore.AutoSaveCart) *ProductStoreUpdateOne {
	psuo.mutation.SetAutoSaveCart(psc)
	return psuo
}

// SetNillableAutoSaveCart sets the "auto_save_cart" field if the given value is not nil.
func (psuo *ProductStoreUpdateOne) SetNillableAutoSaveCart(psc *productstore.AutoSaveCart) *ProductStoreUpdateOne {
	if psc != nil {
		psuo.SetAutoSaveCart(*psc)
	}
	return psuo
}

// ClearAutoSaveCart clears the value of the "auto_save_cart" field.
func (psuo *ProductStoreUpdateOne) ClearAutoSaveCart() *ProductStoreUpdateOne {
	psuo.mutation.ClearAutoSaveCart()
	return psuo
}

// SetAutoApproveReviews sets the "auto_approve_reviews" field.
func (psuo *ProductStoreUpdateOne) SetAutoApproveReviews(par productstore.AutoApproveReviews) *ProductStoreUpdateOne {
	psuo.mutation.SetAutoApproveReviews(par)
	return psuo
}

// SetNillableAutoApproveReviews sets the "auto_approve_reviews" field if the given value is not nil.
func (psuo *ProductStoreUpdateOne) SetNillableAutoApproveReviews(par *productstore.AutoApproveReviews) *ProductStoreUpdateOne {
	if par != nil {
		psuo.SetAutoApproveReviews(*par)
	}
	return psuo
}

// ClearAutoApproveReviews clears the value of the "auto_approve_reviews" field.
func (psuo *ProductStoreUpdateOne) ClearAutoApproveReviews() *ProductStoreUpdateOne {
	psuo.mutation.ClearAutoApproveReviews()
	return psuo
}

// SetIsDemoStore sets the "is_demo_store" field.
func (psuo *ProductStoreUpdateOne) SetIsDemoStore(pds productstore.IsDemoStore) *ProductStoreUpdateOne {
	psuo.mutation.SetIsDemoStore(pds)
	return psuo
}

// SetNillableIsDemoStore sets the "is_demo_store" field if the given value is not nil.
func (psuo *ProductStoreUpdateOne) SetNillableIsDemoStore(pds *productstore.IsDemoStore) *ProductStoreUpdateOne {
	if pds != nil {
		psuo.SetIsDemoStore(*pds)
	}
	return psuo
}

// ClearIsDemoStore clears the value of the "is_demo_store" field.
func (psuo *ProductStoreUpdateOne) ClearIsDemoStore() *ProductStoreUpdateOne {
	psuo.mutation.ClearIsDemoStore()
	return psuo
}

// SetIsImmediatelyFulfilled sets the "is_immediately_fulfilled" field.
func (psuo *ProductStoreUpdateOne) SetIsImmediatelyFulfilled(pif productstore.IsImmediatelyFulfilled) *ProductStoreUpdateOne {
	psuo.mutation.SetIsImmediatelyFulfilled(pif)
	return psuo
}

// SetNillableIsImmediatelyFulfilled sets the "is_immediately_fulfilled" field if the given value is not nil.
func (psuo *ProductStoreUpdateOne) SetNillableIsImmediatelyFulfilled(pif *productstore.IsImmediatelyFulfilled) *ProductStoreUpdateOne {
	if pif != nil {
		psuo.SetIsImmediatelyFulfilled(*pif)
	}
	return psuo
}

// ClearIsImmediatelyFulfilled clears the value of the "is_immediately_fulfilled" field.
func (psuo *ProductStoreUpdateOne) ClearIsImmediatelyFulfilled() *ProductStoreUpdateOne {
	psuo.mutation.ClearIsImmediatelyFulfilled()
	return psuo
}

// SetInventoryFacilityID sets the "inventory_facility_id" field.
func (psuo *ProductStoreUpdateOne) SetInventoryFacilityID(i int) *ProductStoreUpdateOne {
	psuo.mutation.ResetInventoryFacilityID()
	psuo.mutation.SetInventoryFacilityID(i)
	return psuo
}

// SetNillableInventoryFacilityID sets the "inventory_facility_id" field if the given value is not nil.
func (psuo *ProductStoreUpdateOne) SetNillableInventoryFacilityID(i *int) *ProductStoreUpdateOne {
	if i != nil {
		psuo.SetInventoryFacilityID(*i)
	}
	return psuo
}

// AddInventoryFacilityID adds i to the "inventory_facility_id" field.
func (psuo *ProductStoreUpdateOne) AddInventoryFacilityID(i int) *ProductStoreUpdateOne {
	psuo.mutation.AddInventoryFacilityID(i)
	return psuo
}

// ClearInventoryFacilityID clears the value of the "inventory_facility_id" field.
func (psuo *ProductStoreUpdateOne) ClearInventoryFacilityID() *ProductStoreUpdateOne {
	psuo.mutation.ClearInventoryFacilityID()
	return psuo
}

// SetOneInventoryFacility sets the "one_inventory_facility" field.
func (psuo *ProductStoreUpdateOne) SetOneInventoryFacility(pif productstore.OneInventoryFacility) *ProductStoreUpdateOne {
	psuo.mutation.SetOneInventoryFacility(pif)
	return psuo
}

// SetNillableOneInventoryFacility sets the "one_inventory_facility" field if the given value is not nil.
func (psuo *ProductStoreUpdateOne) SetNillableOneInventoryFacility(pif *productstore.OneInventoryFacility) *ProductStoreUpdateOne {
	if pif != nil {
		psuo.SetOneInventoryFacility(*pif)
	}
	return psuo
}

// ClearOneInventoryFacility clears the value of the "one_inventory_facility" field.
func (psuo *ProductStoreUpdateOne) ClearOneInventoryFacility() *ProductStoreUpdateOne {
	psuo.mutation.ClearOneInventoryFacility()
	return psuo
}

// SetCheckInventory sets the "check_inventory" field.
func (psuo *ProductStoreUpdateOne) SetCheckInventory(pi productstore.CheckInventory) *ProductStoreUpdateOne {
	psuo.mutation.SetCheckInventory(pi)
	return psuo
}

// SetNillableCheckInventory sets the "check_inventory" field if the given value is not nil.
func (psuo *ProductStoreUpdateOne) SetNillableCheckInventory(pi *productstore.CheckInventory) *ProductStoreUpdateOne {
	if pi != nil {
		psuo.SetCheckInventory(*pi)
	}
	return psuo
}

// ClearCheckInventory clears the value of the "check_inventory" field.
func (psuo *ProductStoreUpdateOne) ClearCheckInventory() *ProductStoreUpdateOne {
	psuo.mutation.ClearCheckInventory()
	return psuo
}

// SetReserveInventory sets the "reserve_inventory" field.
func (psuo *ProductStoreUpdateOne) SetReserveInventory(pi productstore.ReserveInventory) *ProductStoreUpdateOne {
	psuo.mutation.SetReserveInventory(pi)
	return psuo
}

// SetNillableReserveInventory sets the "reserve_inventory" field if the given value is not nil.
func (psuo *ProductStoreUpdateOne) SetNillableReserveInventory(pi *productstore.ReserveInventory) *ProductStoreUpdateOne {
	if pi != nil {
		psuo.SetReserveInventory(*pi)
	}
	return psuo
}

// ClearReserveInventory clears the value of the "reserve_inventory" field.
func (psuo *ProductStoreUpdateOne) ClearReserveInventory() *ProductStoreUpdateOne {
	psuo.mutation.ClearReserveInventory()
	return psuo
}

// SetRequireInventory sets the "require_inventory" field.
func (psuo *ProductStoreUpdateOne) SetRequireInventory(pi productstore.RequireInventory) *ProductStoreUpdateOne {
	psuo.mutation.SetRequireInventory(pi)
	return psuo
}

// SetNillableRequireInventory sets the "require_inventory" field if the given value is not nil.
func (psuo *ProductStoreUpdateOne) SetNillableRequireInventory(pi *productstore.RequireInventory) *ProductStoreUpdateOne {
	if pi != nil {
		psuo.SetRequireInventory(*pi)
	}
	return psuo
}

// ClearRequireInventory clears the value of the "require_inventory" field.
func (psuo *ProductStoreUpdateOne) ClearRequireInventory() *ProductStoreUpdateOne {
	psuo.mutation.ClearRequireInventory()
	return psuo
}

// SetBalanceResOnOrderCreation sets the "balance_res_on_order_creation" field.
func (psuo *ProductStoreUpdateOne) SetBalanceResOnOrderCreation(prooc productstore.BalanceResOnOrderCreation) *ProductStoreUpdateOne {
	psuo.mutation.SetBalanceResOnOrderCreation(prooc)
	return psuo
}

// SetNillableBalanceResOnOrderCreation sets the "balance_res_on_order_creation" field if the given value is not nil.
func (psuo *ProductStoreUpdateOne) SetNillableBalanceResOnOrderCreation(prooc *productstore.BalanceResOnOrderCreation) *ProductStoreUpdateOne {
	if prooc != nil {
		psuo.SetBalanceResOnOrderCreation(*prooc)
	}
	return psuo
}

// ClearBalanceResOnOrderCreation clears the value of the "balance_res_on_order_creation" field.
func (psuo *ProductStoreUpdateOne) ClearBalanceResOnOrderCreation() *ProductStoreUpdateOne {
	psuo.mutation.ClearBalanceResOnOrderCreation()
	return psuo
}

// SetOrderNumberPrefix sets the "order_number_prefix" field.
func (psuo *ProductStoreUpdateOne) SetOrderNumberPrefix(s string) *ProductStoreUpdateOne {
	psuo.mutation.SetOrderNumberPrefix(s)
	return psuo
}

// SetNillableOrderNumberPrefix sets the "order_number_prefix" field if the given value is not nil.
func (psuo *ProductStoreUpdateOne) SetNillableOrderNumberPrefix(s *string) *ProductStoreUpdateOne {
	if s != nil {
		psuo.SetOrderNumberPrefix(*s)
	}
	return psuo
}

// ClearOrderNumberPrefix clears the value of the "order_number_prefix" field.
func (psuo *ProductStoreUpdateOne) ClearOrderNumberPrefix() *ProductStoreUpdateOne {
	psuo.mutation.ClearOrderNumberPrefix()
	return psuo
}

// SetDefaultLocaleString sets the "default_locale_string" field.
func (psuo *ProductStoreUpdateOne) SetDefaultLocaleString(s string) *ProductStoreUpdateOne {
	psuo.mutation.SetDefaultLocaleString(s)
	return psuo
}

// SetNillableDefaultLocaleString sets the "default_locale_string" field if the given value is not nil.
func (psuo *ProductStoreUpdateOne) SetNillableDefaultLocaleString(s *string) *ProductStoreUpdateOne {
	if s != nil {
		psuo.SetDefaultLocaleString(*s)
	}
	return psuo
}

// ClearDefaultLocaleString clears the value of the "default_locale_string" field.
func (psuo *ProductStoreUpdateOne) ClearDefaultLocaleString() *ProductStoreUpdateOne {
	psuo.mutation.ClearDefaultLocaleString()
	return psuo
}

// SetDefaultCurrencyUomID sets the "default_currency_uom_id" field.
func (psuo *ProductStoreUpdateOne) SetDefaultCurrencyUomID(i int) *ProductStoreUpdateOne {
	psuo.mutation.ResetDefaultCurrencyUomID()
	psuo.mutation.SetDefaultCurrencyUomID(i)
	return psuo
}

// SetNillableDefaultCurrencyUomID sets the "default_currency_uom_id" field if the given value is not nil.
func (psuo *ProductStoreUpdateOne) SetNillableDefaultCurrencyUomID(i *int) *ProductStoreUpdateOne {
	if i != nil {
		psuo.SetDefaultCurrencyUomID(*i)
	}
	return psuo
}

// AddDefaultCurrencyUomID adds i to the "default_currency_uom_id" field.
func (psuo *ProductStoreUpdateOne) AddDefaultCurrencyUomID(i int) *ProductStoreUpdateOne {
	psuo.mutation.AddDefaultCurrencyUomID(i)
	return psuo
}

// ClearDefaultCurrencyUomID clears the value of the "default_currency_uom_id" field.
func (psuo *ProductStoreUpdateOne) ClearDefaultCurrencyUomID() *ProductStoreUpdateOne {
	psuo.mutation.ClearDefaultCurrencyUomID()
	return psuo
}

// SetDefaultTimeZoneString sets the "default_time_zone_string" field.
func (psuo *ProductStoreUpdateOne) SetDefaultTimeZoneString(s string) *ProductStoreUpdateOne {
	psuo.mutation.SetDefaultTimeZoneString(s)
	return psuo
}

// SetNillableDefaultTimeZoneString sets the "default_time_zone_string" field if the given value is not nil.
func (psuo *ProductStoreUpdateOne) SetNillableDefaultTimeZoneString(s *string) *ProductStoreUpdateOne {
	if s != nil {
		psuo.SetDefaultTimeZoneString(*s)
	}
	return psuo
}

// ClearDefaultTimeZoneString clears the value of the "default_time_zone_string" field.
func (psuo *ProductStoreUpdateOne) ClearDefaultTimeZoneString() *ProductStoreUpdateOne {
	psuo.mutation.ClearDefaultTimeZoneString()
	return psuo
}

// SetAllowPassword sets the "allow_password" field.
func (psuo *ProductStoreUpdateOne) SetAllowPassword(pp productstore.AllowPassword) *ProductStoreUpdateOne {
	psuo.mutation.SetAllowPassword(pp)
	return psuo
}

// SetNillableAllowPassword sets the "allow_password" field if the given value is not nil.
func (psuo *ProductStoreUpdateOne) SetNillableAllowPassword(pp *productstore.AllowPassword) *ProductStoreUpdateOne {
	if pp != nil {
		psuo.SetAllowPassword(*pp)
	}
	return psuo
}

// ClearAllowPassword clears the value of the "allow_password" field.
func (psuo *ProductStoreUpdateOne) ClearAllowPassword() *ProductStoreUpdateOne {
	psuo.mutation.ClearAllowPassword()
	return psuo
}

// SetDefaultPassword sets the "default_password" field.
func (psuo *ProductStoreUpdateOne) SetDefaultPassword(s string) *ProductStoreUpdateOne {
	psuo.mutation.SetDefaultPassword(s)
	return psuo
}

// SetNillableDefaultPassword sets the "default_password" field if the given value is not nil.
func (psuo *ProductStoreUpdateOne) SetNillableDefaultPassword(s *string) *ProductStoreUpdateOne {
	if s != nil {
		psuo.SetDefaultPassword(*s)
	}
	return psuo
}

// ClearDefaultPassword clears the value of the "default_password" field.
func (psuo *ProductStoreUpdateOne) ClearDefaultPassword() *ProductStoreUpdateOne {
	psuo.mutation.ClearDefaultPassword()
	return psuo
}

// SetExplodeOrderItems sets the "explode_order_items" field.
func (psuo *ProductStoreUpdateOne) SetExplodeOrderItems(poi productstore.ExplodeOrderItems) *ProductStoreUpdateOne {
	psuo.mutation.SetExplodeOrderItems(poi)
	return psuo
}

// SetNillableExplodeOrderItems sets the "explode_order_items" field if the given value is not nil.
func (psuo *ProductStoreUpdateOne) SetNillableExplodeOrderItems(poi *productstore.ExplodeOrderItems) *ProductStoreUpdateOne {
	if poi != nil {
		psuo.SetExplodeOrderItems(*poi)
	}
	return psuo
}

// ClearExplodeOrderItems clears the value of the "explode_order_items" field.
func (psuo *ProductStoreUpdateOne) ClearExplodeOrderItems() *ProductStoreUpdateOne {
	psuo.mutation.ClearExplodeOrderItems()
	return psuo
}

// SetCheckGcBalance sets the "check_gc_balance" field.
func (psuo *ProductStoreUpdateOne) SetCheckGcBalance(pgb productstore.CheckGcBalance) *ProductStoreUpdateOne {
	psuo.mutation.SetCheckGcBalance(pgb)
	return psuo
}

// SetNillableCheckGcBalance sets the "check_gc_balance" field if the given value is not nil.
func (psuo *ProductStoreUpdateOne) SetNillableCheckGcBalance(pgb *productstore.CheckGcBalance) *ProductStoreUpdateOne {
	if pgb != nil {
		psuo.SetCheckGcBalance(*pgb)
	}
	return psuo
}

// ClearCheckGcBalance clears the value of the "check_gc_balance" field.
func (psuo *ProductStoreUpdateOne) ClearCheckGcBalance() *ProductStoreUpdateOne {
	psuo.mutation.ClearCheckGcBalance()
	return psuo
}

// SetRetryFailedAuths sets the "retry_failed_auths" field.
func (psuo *ProductStoreUpdateOne) SetRetryFailedAuths(pfa productstore.RetryFailedAuths) *ProductStoreUpdateOne {
	psuo.mutation.SetRetryFailedAuths(pfa)
	return psuo
}

// SetNillableRetryFailedAuths sets the "retry_failed_auths" field if the given value is not nil.
func (psuo *ProductStoreUpdateOne) SetNillableRetryFailedAuths(pfa *productstore.RetryFailedAuths) *ProductStoreUpdateOne {
	if pfa != nil {
		psuo.SetRetryFailedAuths(*pfa)
	}
	return psuo
}

// ClearRetryFailedAuths clears the value of the "retry_failed_auths" field.
func (psuo *ProductStoreUpdateOne) ClearRetryFailedAuths() *ProductStoreUpdateOne {
	psuo.mutation.ClearRetryFailedAuths()
	return psuo
}

// SetAuthDeclinedMessage sets the "auth_declined_message" field.
func (psuo *ProductStoreUpdateOne) SetAuthDeclinedMessage(s string) *ProductStoreUpdateOne {
	psuo.mutation.SetAuthDeclinedMessage(s)
	return psuo
}

// SetNillableAuthDeclinedMessage sets the "auth_declined_message" field if the given value is not nil.
func (psuo *ProductStoreUpdateOne) SetNillableAuthDeclinedMessage(s *string) *ProductStoreUpdateOne {
	if s != nil {
		psuo.SetAuthDeclinedMessage(*s)
	}
	return psuo
}

// ClearAuthDeclinedMessage clears the value of the "auth_declined_message" field.
func (psuo *ProductStoreUpdateOne) ClearAuthDeclinedMessage() *ProductStoreUpdateOne {
	psuo.mutation.ClearAuthDeclinedMessage()
	return psuo
}

// SetAuthFraudMessage sets the "auth_fraud_message" field.
func (psuo *ProductStoreUpdateOne) SetAuthFraudMessage(s string) *ProductStoreUpdateOne {
	psuo.mutation.SetAuthFraudMessage(s)
	return psuo
}

// SetNillableAuthFraudMessage sets the "auth_fraud_message" field if the given value is not nil.
func (psuo *ProductStoreUpdateOne) SetNillableAuthFraudMessage(s *string) *ProductStoreUpdateOne {
	if s != nil {
		psuo.SetAuthFraudMessage(*s)
	}
	return psuo
}

// ClearAuthFraudMessage clears the value of the "auth_fraud_message" field.
func (psuo *ProductStoreUpdateOne) ClearAuthFraudMessage() *ProductStoreUpdateOne {
	psuo.mutation.ClearAuthFraudMessage()
	return psuo
}

// SetAuthErrorMessage sets the "auth_error_message" field.
func (psuo *ProductStoreUpdateOne) SetAuthErrorMessage(s string) *ProductStoreUpdateOne {
	psuo.mutation.SetAuthErrorMessage(s)
	return psuo
}

// SetNillableAuthErrorMessage sets the "auth_error_message" field if the given value is not nil.
func (psuo *ProductStoreUpdateOne) SetNillableAuthErrorMessage(s *string) *ProductStoreUpdateOne {
	if s != nil {
		psuo.SetAuthErrorMessage(*s)
	}
	return psuo
}

// ClearAuthErrorMessage clears the value of the "auth_error_message" field.
func (psuo *ProductStoreUpdateOne) ClearAuthErrorMessage() *ProductStoreUpdateOne {
	psuo.mutation.ClearAuthErrorMessage()
	return psuo
}

// SetVisualThemeID sets the "visual_theme_id" field.
func (psuo *ProductStoreUpdateOne) SetVisualThemeID(i int) *ProductStoreUpdateOne {
	psuo.mutation.ResetVisualThemeID()
	psuo.mutation.SetVisualThemeID(i)
	return psuo
}

// SetNillableVisualThemeID sets the "visual_theme_id" field if the given value is not nil.
func (psuo *ProductStoreUpdateOne) SetNillableVisualThemeID(i *int) *ProductStoreUpdateOne {
	if i != nil {
		psuo.SetVisualThemeID(*i)
	}
	return psuo
}

// AddVisualThemeID adds i to the "visual_theme_id" field.
func (psuo *ProductStoreUpdateOne) AddVisualThemeID(i int) *ProductStoreUpdateOne {
	psuo.mutation.AddVisualThemeID(i)
	return psuo
}

// ClearVisualThemeID clears the value of the "visual_theme_id" field.
func (psuo *ProductStoreUpdateOne) ClearVisualThemeID() *ProductStoreUpdateOne {
	psuo.mutation.ClearVisualThemeID()
	return psuo
}

// SetUsePrimaryEmailUsername sets the "use_primary_email_username" field.
func (psuo *ProductStoreUpdateOne) SetUsePrimaryEmailUsername(ppeu productstore.UsePrimaryEmailUsername) *ProductStoreUpdateOne {
	psuo.mutation.SetUsePrimaryEmailUsername(ppeu)
	return psuo
}

// SetNillableUsePrimaryEmailUsername sets the "use_primary_email_username" field if the given value is not nil.
func (psuo *ProductStoreUpdateOne) SetNillableUsePrimaryEmailUsername(ppeu *productstore.UsePrimaryEmailUsername) *ProductStoreUpdateOne {
	if ppeu != nil {
		psuo.SetUsePrimaryEmailUsername(*ppeu)
	}
	return psuo
}

// ClearUsePrimaryEmailUsername clears the value of the "use_primary_email_username" field.
func (psuo *ProductStoreUpdateOne) ClearUsePrimaryEmailUsername() *ProductStoreUpdateOne {
	psuo.mutation.ClearUsePrimaryEmailUsername()
	return psuo
}

// SetRequireCustomerRole sets the "require_customer_role" field.
func (psuo *ProductStoreUpdateOne) SetRequireCustomerRole(pcr productstore.RequireCustomerRole) *ProductStoreUpdateOne {
	psuo.mutation.SetRequireCustomerRole(pcr)
	return psuo
}

// SetNillableRequireCustomerRole sets the "require_customer_role" field if the given value is not nil.
func (psuo *ProductStoreUpdateOne) SetNillableRequireCustomerRole(pcr *productstore.RequireCustomerRole) *ProductStoreUpdateOne {
	if pcr != nil {
		psuo.SetRequireCustomerRole(*pcr)
	}
	return psuo
}

// ClearRequireCustomerRole clears the value of the "require_customer_role" field.
func (psuo *ProductStoreUpdateOne) ClearRequireCustomerRole() *ProductStoreUpdateOne {
	psuo.mutation.ClearRequireCustomerRole()
	return psuo
}

// SetAutoInvoiceDigitalItems sets the "auto_invoice_digital_items" field.
func (psuo *ProductStoreUpdateOne) SetAutoInvoiceDigitalItems(pidi productstore.AutoInvoiceDigitalItems) *ProductStoreUpdateOne {
	psuo.mutation.SetAutoInvoiceDigitalItems(pidi)
	return psuo
}

// SetNillableAutoInvoiceDigitalItems sets the "auto_invoice_digital_items" field if the given value is not nil.
func (psuo *ProductStoreUpdateOne) SetNillableAutoInvoiceDigitalItems(pidi *productstore.AutoInvoiceDigitalItems) *ProductStoreUpdateOne {
	if pidi != nil {
		psuo.SetAutoInvoiceDigitalItems(*pidi)
	}
	return psuo
}

// ClearAutoInvoiceDigitalItems clears the value of the "auto_invoice_digital_items" field.
func (psuo *ProductStoreUpdateOne) ClearAutoInvoiceDigitalItems() *ProductStoreUpdateOne {
	psuo.mutation.ClearAutoInvoiceDigitalItems()
	return psuo
}

// SetReqShipAddrForDigItems sets the "req_ship_addr_for_dig_items" field.
func (psuo *ProductStoreUpdateOne) SetReqShipAddrForDigItems(psafdi productstore.ReqShipAddrForDigItems) *ProductStoreUpdateOne {
	psuo.mutation.SetReqShipAddrForDigItems(psafdi)
	return psuo
}

// SetNillableReqShipAddrForDigItems sets the "req_ship_addr_for_dig_items" field if the given value is not nil.
func (psuo *ProductStoreUpdateOne) SetNillableReqShipAddrForDigItems(psafdi *productstore.ReqShipAddrForDigItems) *ProductStoreUpdateOne {
	if psafdi != nil {
		psuo.SetReqShipAddrForDigItems(*psafdi)
	}
	return psuo
}

// ClearReqShipAddrForDigItems clears the value of the "req_ship_addr_for_dig_items" field.
func (psuo *ProductStoreUpdateOne) ClearReqShipAddrForDigItems() *ProductStoreUpdateOne {
	psuo.mutation.ClearReqShipAddrForDigItems()
	return psuo
}

// SetShowCheckoutGiftOptions sets the "show_checkout_gift_options" field.
func (psuo *ProductStoreUpdateOne) SetShowCheckoutGiftOptions(pcgo productstore.ShowCheckoutGiftOptions) *ProductStoreUpdateOne {
	psuo.mutation.SetShowCheckoutGiftOptions(pcgo)
	return psuo
}

// SetNillableShowCheckoutGiftOptions sets the "show_checkout_gift_options" field if the given value is not nil.
func (psuo *ProductStoreUpdateOne) SetNillableShowCheckoutGiftOptions(pcgo *productstore.ShowCheckoutGiftOptions) *ProductStoreUpdateOne {
	if pcgo != nil {
		psuo.SetShowCheckoutGiftOptions(*pcgo)
	}
	return psuo
}

// ClearShowCheckoutGiftOptions clears the value of the "show_checkout_gift_options" field.
func (psuo *ProductStoreUpdateOne) ClearShowCheckoutGiftOptions() *ProductStoreUpdateOne {
	psuo.mutation.ClearShowCheckoutGiftOptions()
	return psuo
}

// SetSelectPaymentTypePerItem sets the "select_payment_type_per_item" field.
func (psuo *ProductStoreUpdateOne) SetSelectPaymentTypePerItem(pptpi productstore.SelectPaymentTypePerItem) *ProductStoreUpdateOne {
	psuo.mutation.SetSelectPaymentTypePerItem(pptpi)
	return psuo
}

// SetNillableSelectPaymentTypePerItem sets the "select_payment_type_per_item" field if the given value is not nil.
func (psuo *ProductStoreUpdateOne) SetNillableSelectPaymentTypePerItem(pptpi *productstore.SelectPaymentTypePerItem) *ProductStoreUpdateOne {
	if pptpi != nil {
		psuo.SetSelectPaymentTypePerItem(*pptpi)
	}
	return psuo
}

// ClearSelectPaymentTypePerItem clears the value of the "select_payment_type_per_item" field.
func (psuo *ProductStoreUpdateOne) ClearSelectPaymentTypePerItem() *ProductStoreUpdateOne {
	psuo.mutation.ClearSelectPaymentTypePerItem()
	return psuo
}

// SetShowPricesWithVatTax sets the "show_prices_with_vat_tax" field.
func (psuo *ProductStoreUpdateOne) SetShowPricesWithVatTax(ppwvt productstore.ShowPricesWithVatTax) *ProductStoreUpdateOne {
	psuo.mutation.SetShowPricesWithVatTax(ppwvt)
	return psuo
}

// SetNillableShowPricesWithVatTax sets the "show_prices_with_vat_tax" field if the given value is not nil.
func (psuo *ProductStoreUpdateOne) SetNillableShowPricesWithVatTax(ppwvt *productstore.ShowPricesWithVatTax) *ProductStoreUpdateOne {
	if ppwvt != nil {
		psuo.SetShowPricesWithVatTax(*ppwvt)
	}
	return psuo
}

// ClearShowPricesWithVatTax clears the value of the "show_prices_with_vat_tax" field.
func (psuo *ProductStoreUpdateOne) ClearShowPricesWithVatTax() *ProductStoreUpdateOne {
	psuo.mutation.ClearShowPricesWithVatTax()
	return psuo
}

// SetShowTaxIsExempt sets the "show_tax_is_exempt" field.
func (psuo *ProductStoreUpdateOne) SetShowTaxIsExempt(ptie productstore.ShowTaxIsExempt) *ProductStoreUpdateOne {
	psuo.mutation.SetShowTaxIsExempt(ptie)
	return psuo
}

// SetNillableShowTaxIsExempt sets the "show_tax_is_exempt" field if the given value is not nil.
func (psuo *ProductStoreUpdateOne) SetNillableShowTaxIsExempt(ptie *productstore.ShowTaxIsExempt) *ProductStoreUpdateOne {
	if ptie != nil {
		psuo.SetShowTaxIsExempt(*ptie)
	}
	return psuo
}

// ClearShowTaxIsExempt clears the value of the "show_tax_is_exempt" field.
func (psuo *ProductStoreUpdateOne) ClearShowTaxIsExempt() *ProductStoreUpdateOne {
	psuo.mutation.ClearShowTaxIsExempt()
	return psuo
}

// SetVatTaxAuthGeoID sets the "vat_tax_auth_geo_id" field.
func (psuo *ProductStoreUpdateOne) SetVatTaxAuthGeoID(i int) *ProductStoreUpdateOne {
	psuo.mutation.ResetVatTaxAuthGeoID()
	psuo.mutation.SetVatTaxAuthGeoID(i)
	return psuo
}

// SetNillableVatTaxAuthGeoID sets the "vat_tax_auth_geo_id" field if the given value is not nil.
func (psuo *ProductStoreUpdateOne) SetNillableVatTaxAuthGeoID(i *int) *ProductStoreUpdateOne {
	if i != nil {
		psuo.SetVatTaxAuthGeoID(*i)
	}
	return psuo
}

// AddVatTaxAuthGeoID adds i to the "vat_tax_auth_geo_id" field.
func (psuo *ProductStoreUpdateOne) AddVatTaxAuthGeoID(i int) *ProductStoreUpdateOne {
	psuo.mutation.AddVatTaxAuthGeoID(i)
	return psuo
}

// ClearVatTaxAuthGeoID clears the value of the "vat_tax_auth_geo_id" field.
func (psuo *ProductStoreUpdateOne) ClearVatTaxAuthGeoID() *ProductStoreUpdateOne {
	psuo.mutation.ClearVatTaxAuthGeoID()
	return psuo
}

// SetVatTaxAuthPartyID sets the "vat_tax_auth_party_id" field.
func (psuo *ProductStoreUpdateOne) SetVatTaxAuthPartyID(i int) *ProductStoreUpdateOne {
	psuo.mutation.ResetVatTaxAuthPartyID()
	psuo.mutation.SetVatTaxAuthPartyID(i)
	return psuo
}

// SetNillableVatTaxAuthPartyID sets the "vat_tax_auth_party_id" field if the given value is not nil.
func (psuo *ProductStoreUpdateOne) SetNillableVatTaxAuthPartyID(i *int) *ProductStoreUpdateOne {
	if i != nil {
		psuo.SetVatTaxAuthPartyID(*i)
	}
	return psuo
}

// AddVatTaxAuthPartyID adds i to the "vat_tax_auth_party_id" field.
func (psuo *ProductStoreUpdateOne) AddVatTaxAuthPartyID(i int) *ProductStoreUpdateOne {
	psuo.mutation.AddVatTaxAuthPartyID(i)
	return psuo
}

// ClearVatTaxAuthPartyID clears the value of the "vat_tax_auth_party_id" field.
func (psuo *ProductStoreUpdateOne) ClearVatTaxAuthPartyID() *ProductStoreUpdateOne {
	psuo.mutation.ClearVatTaxAuthPartyID()
	return psuo
}

// SetEnableAutoSuggestionList sets the "enable_auto_suggestion_list" field.
func (psuo *ProductStoreUpdateOne) SetEnableAutoSuggestionList(pasl productstore.EnableAutoSuggestionList) *ProductStoreUpdateOne {
	psuo.mutation.SetEnableAutoSuggestionList(pasl)
	return psuo
}

// SetNillableEnableAutoSuggestionList sets the "enable_auto_suggestion_list" field if the given value is not nil.
func (psuo *ProductStoreUpdateOne) SetNillableEnableAutoSuggestionList(pasl *productstore.EnableAutoSuggestionList) *ProductStoreUpdateOne {
	if pasl != nil {
		psuo.SetEnableAutoSuggestionList(*pasl)
	}
	return psuo
}

// ClearEnableAutoSuggestionList clears the value of the "enable_auto_suggestion_list" field.
func (psuo *ProductStoreUpdateOne) ClearEnableAutoSuggestionList() *ProductStoreUpdateOne {
	psuo.mutation.ClearEnableAutoSuggestionList()
	return psuo
}

// SetEnableDigProdUpload sets the "enable_dig_prod_upload" field.
func (psuo *ProductStoreUpdateOne) SetEnableDigProdUpload(pdpu productstore.EnableDigProdUpload) *ProductStoreUpdateOne {
	psuo.mutation.SetEnableDigProdUpload(pdpu)
	return psuo
}

// SetNillableEnableDigProdUpload sets the "enable_dig_prod_upload" field if the given value is not nil.
func (psuo *ProductStoreUpdateOne) SetNillableEnableDigProdUpload(pdpu *productstore.EnableDigProdUpload) *ProductStoreUpdateOne {
	if pdpu != nil {
		psuo.SetEnableDigProdUpload(*pdpu)
	}
	return psuo
}

// ClearEnableDigProdUpload clears the value of the "enable_dig_prod_upload" field.
func (psuo *ProductStoreUpdateOne) ClearEnableDigProdUpload() *ProductStoreUpdateOne {
	psuo.mutation.ClearEnableDigProdUpload()
	return psuo
}

// SetProdSearchExcludeVariants sets the "prod_search_exclude_variants" field.
func (psuo *ProductStoreUpdateOne) SetProdSearchExcludeVariants(psev productstore.ProdSearchExcludeVariants) *ProductStoreUpdateOne {
	psuo.mutation.SetProdSearchExcludeVariants(psev)
	return psuo
}

// SetNillableProdSearchExcludeVariants sets the "prod_search_exclude_variants" field if the given value is not nil.
func (psuo *ProductStoreUpdateOne) SetNillableProdSearchExcludeVariants(psev *productstore.ProdSearchExcludeVariants) *ProductStoreUpdateOne {
	if psev != nil {
		psuo.SetProdSearchExcludeVariants(*psev)
	}
	return psuo
}

// ClearProdSearchExcludeVariants clears the value of the "prod_search_exclude_variants" field.
func (psuo *ProductStoreUpdateOne) ClearProdSearchExcludeVariants() *ProductStoreUpdateOne {
	psuo.mutation.ClearProdSearchExcludeVariants()
	return psuo
}

// SetDigProdUploadCategoryID sets the "dig_prod_upload_category_id" field.
func (psuo *ProductStoreUpdateOne) SetDigProdUploadCategoryID(i int) *ProductStoreUpdateOne {
	psuo.mutation.ResetDigProdUploadCategoryID()
	psuo.mutation.SetDigProdUploadCategoryID(i)
	return psuo
}

// SetNillableDigProdUploadCategoryID sets the "dig_prod_upload_category_id" field if the given value is not nil.
func (psuo *ProductStoreUpdateOne) SetNillableDigProdUploadCategoryID(i *int) *ProductStoreUpdateOne {
	if i != nil {
		psuo.SetDigProdUploadCategoryID(*i)
	}
	return psuo
}

// AddDigProdUploadCategoryID adds i to the "dig_prod_upload_category_id" field.
func (psuo *ProductStoreUpdateOne) AddDigProdUploadCategoryID(i int) *ProductStoreUpdateOne {
	psuo.mutation.AddDigProdUploadCategoryID(i)
	return psuo
}

// ClearDigProdUploadCategoryID clears the value of the "dig_prod_upload_category_id" field.
func (psuo *ProductStoreUpdateOne) ClearDigProdUploadCategoryID() *ProductStoreUpdateOne {
	psuo.mutation.ClearDigProdUploadCategoryID()
	return psuo
}

// SetAutoOrderCcTryExp sets the "auto_order_cc_try_exp" field.
func (psuo *ProductStoreUpdateOne) SetAutoOrderCcTryExp(pocte productstore.AutoOrderCcTryExp) *ProductStoreUpdateOne {
	psuo.mutation.SetAutoOrderCcTryExp(pocte)
	return psuo
}

// SetNillableAutoOrderCcTryExp sets the "auto_order_cc_try_exp" field if the given value is not nil.
func (psuo *ProductStoreUpdateOne) SetNillableAutoOrderCcTryExp(pocte *productstore.AutoOrderCcTryExp) *ProductStoreUpdateOne {
	if pocte != nil {
		psuo.SetAutoOrderCcTryExp(*pocte)
	}
	return psuo
}

// ClearAutoOrderCcTryExp clears the value of the "auto_order_cc_try_exp" field.
func (psuo *ProductStoreUpdateOne) ClearAutoOrderCcTryExp() *ProductStoreUpdateOne {
	psuo.mutation.ClearAutoOrderCcTryExp()
	return psuo
}

// SetAutoOrderCcTryOtherCards sets the "auto_order_cc_try_other_cards" field.
func (psuo *ProductStoreUpdateOne) SetAutoOrderCcTryOtherCards(poctoc productstore.AutoOrderCcTryOtherCards) *ProductStoreUpdateOne {
	psuo.mutation.SetAutoOrderCcTryOtherCards(poctoc)
	return psuo
}

// SetNillableAutoOrderCcTryOtherCards sets the "auto_order_cc_try_other_cards" field if the given value is not nil.
func (psuo *ProductStoreUpdateOne) SetNillableAutoOrderCcTryOtherCards(poctoc *productstore.AutoOrderCcTryOtherCards) *ProductStoreUpdateOne {
	if poctoc != nil {
		psuo.SetAutoOrderCcTryOtherCards(*poctoc)
	}
	return psuo
}

// ClearAutoOrderCcTryOtherCards clears the value of the "auto_order_cc_try_other_cards" field.
func (psuo *ProductStoreUpdateOne) ClearAutoOrderCcTryOtherCards() *ProductStoreUpdateOne {
	psuo.mutation.ClearAutoOrderCcTryOtherCards()
	return psuo
}

// SetAutoOrderCcTryLaterNsf sets the "auto_order_cc_try_later_nsf" field.
func (psuo *ProductStoreUpdateOne) SetAutoOrderCcTryLaterNsf(poctln productstore.AutoOrderCcTryLaterNsf) *ProductStoreUpdateOne {
	psuo.mutation.SetAutoOrderCcTryLaterNsf(poctln)
	return psuo
}

// SetNillableAutoOrderCcTryLaterNsf sets the "auto_order_cc_try_later_nsf" field if the given value is not nil.
func (psuo *ProductStoreUpdateOne) SetNillableAutoOrderCcTryLaterNsf(poctln *productstore.AutoOrderCcTryLaterNsf) *ProductStoreUpdateOne {
	if poctln != nil {
		psuo.SetAutoOrderCcTryLaterNsf(*poctln)
	}
	return psuo
}

// ClearAutoOrderCcTryLaterNsf clears the value of the "auto_order_cc_try_later_nsf" field.
func (psuo *ProductStoreUpdateOne) ClearAutoOrderCcTryLaterNsf() *ProductStoreUpdateOne {
	psuo.mutation.ClearAutoOrderCcTryLaterNsf()
	return psuo
}

// SetAutoOrderCcTryLaterMax sets the "auto_order_cc_try_later_max" field.
func (psuo *ProductStoreUpdateOne) SetAutoOrderCcTryLaterMax(i int) *ProductStoreUpdateOne {
	psuo.mutation.ResetAutoOrderCcTryLaterMax()
	psuo.mutation.SetAutoOrderCcTryLaterMax(i)
	return psuo
}

// SetNillableAutoOrderCcTryLaterMax sets the "auto_order_cc_try_later_max" field if the given value is not nil.
func (psuo *ProductStoreUpdateOne) SetNillableAutoOrderCcTryLaterMax(i *int) *ProductStoreUpdateOne {
	if i != nil {
		psuo.SetAutoOrderCcTryLaterMax(*i)
	}
	return psuo
}

// AddAutoOrderCcTryLaterMax adds i to the "auto_order_cc_try_later_max" field.
func (psuo *ProductStoreUpdateOne) AddAutoOrderCcTryLaterMax(i int) *ProductStoreUpdateOne {
	psuo.mutation.AddAutoOrderCcTryLaterMax(i)
	return psuo
}

// ClearAutoOrderCcTryLaterMax clears the value of the "auto_order_cc_try_later_max" field.
func (psuo *ProductStoreUpdateOne) ClearAutoOrderCcTryLaterMax() *ProductStoreUpdateOne {
	psuo.mutation.ClearAutoOrderCcTryLaterMax()
	return psuo
}

// SetStoreCreditValidDays sets the "store_credit_valid_days" field.
func (psuo *ProductStoreUpdateOne) SetStoreCreditValidDays(i int) *ProductStoreUpdateOne {
	psuo.mutation.ResetStoreCreditValidDays()
	psuo.mutation.SetStoreCreditValidDays(i)
	return psuo
}

// SetNillableStoreCreditValidDays sets the "store_credit_valid_days" field if the given value is not nil.
func (psuo *ProductStoreUpdateOne) SetNillableStoreCreditValidDays(i *int) *ProductStoreUpdateOne {
	if i != nil {
		psuo.SetStoreCreditValidDays(*i)
	}
	return psuo
}

// AddStoreCreditValidDays adds i to the "store_credit_valid_days" field.
func (psuo *ProductStoreUpdateOne) AddStoreCreditValidDays(i int) *ProductStoreUpdateOne {
	psuo.mutation.AddStoreCreditValidDays(i)
	return psuo
}

// ClearStoreCreditValidDays clears the value of the "store_credit_valid_days" field.
func (psuo *ProductStoreUpdateOne) ClearStoreCreditValidDays() *ProductStoreUpdateOne {
	psuo.mutation.ClearStoreCreditValidDays()
	return psuo
}

// SetAutoApproveInvoice sets the "auto_approve_invoice" field.
func (psuo *ProductStoreUpdateOne) SetAutoApproveInvoice(pai productstore.AutoApproveInvoice) *ProductStoreUpdateOne {
	psuo.mutation.SetAutoApproveInvoice(pai)
	return psuo
}

// SetNillableAutoApproveInvoice sets the "auto_approve_invoice" field if the given value is not nil.
func (psuo *ProductStoreUpdateOne) SetNillableAutoApproveInvoice(pai *productstore.AutoApproveInvoice) *ProductStoreUpdateOne {
	if pai != nil {
		psuo.SetAutoApproveInvoice(*pai)
	}
	return psuo
}

// ClearAutoApproveInvoice clears the value of the "auto_approve_invoice" field.
func (psuo *ProductStoreUpdateOne) ClearAutoApproveInvoice() *ProductStoreUpdateOne {
	psuo.mutation.ClearAutoApproveInvoice()
	return psuo
}

// SetAutoApproveOrder sets the "auto_approve_order" field.
func (psuo *ProductStoreUpdateOne) SetAutoApproveOrder(pao productstore.AutoApproveOrder) *ProductStoreUpdateOne {
	psuo.mutation.SetAutoApproveOrder(pao)
	return psuo
}

// SetNillableAutoApproveOrder sets the "auto_approve_order" field if the given value is not nil.
func (psuo *ProductStoreUpdateOne) SetNillableAutoApproveOrder(pao *productstore.AutoApproveOrder) *ProductStoreUpdateOne {
	if pao != nil {
		psuo.SetAutoApproveOrder(*pao)
	}
	return psuo
}

// ClearAutoApproveOrder clears the value of the "auto_approve_order" field.
func (psuo *ProductStoreUpdateOne) ClearAutoApproveOrder() *ProductStoreUpdateOne {
	psuo.mutation.ClearAutoApproveOrder()
	return psuo
}

// SetShipIfCaptureFails sets the "ship_if_capture_fails" field.
func (psuo *ProductStoreUpdateOne) SetShipIfCaptureFails(picf productstore.ShipIfCaptureFails) *ProductStoreUpdateOne {
	psuo.mutation.SetShipIfCaptureFails(picf)
	return psuo
}

// SetNillableShipIfCaptureFails sets the "ship_if_capture_fails" field if the given value is not nil.
func (psuo *ProductStoreUpdateOne) SetNillableShipIfCaptureFails(picf *productstore.ShipIfCaptureFails) *ProductStoreUpdateOne {
	if picf != nil {
		psuo.SetShipIfCaptureFails(*picf)
	}
	return psuo
}

// ClearShipIfCaptureFails clears the value of the "ship_if_capture_fails" field.
func (psuo *ProductStoreUpdateOne) ClearShipIfCaptureFails() *ProductStoreUpdateOne {
	psuo.mutation.ClearShipIfCaptureFails()
	return psuo
}

// SetSetOwnerUponIssuance sets the "set_owner_upon_issuance" field.
func (psuo *ProductStoreUpdateOne) SetSetOwnerUponIssuance(poui productstore.SetOwnerUponIssuance) *ProductStoreUpdateOne {
	psuo.mutation.SetSetOwnerUponIssuance(poui)
	return psuo
}

// SetNillableSetOwnerUponIssuance sets the "set_owner_upon_issuance" field if the given value is not nil.
func (psuo *ProductStoreUpdateOne) SetNillableSetOwnerUponIssuance(poui *productstore.SetOwnerUponIssuance) *ProductStoreUpdateOne {
	if poui != nil {
		psuo.SetSetOwnerUponIssuance(*poui)
	}
	return psuo
}

// ClearSetOwnerUponIssuance clears the value of the "set_owner_upon_issuance" field.
func (psuo *ProductStoreUpdateOne) ClearSetOwnerUponIssuance() *ProductStoreUpdateOne {
	psuo.mutation.ClearSetOwnerUponIssuance()
	return psuo
}

// SetReqReturnInventoryReceive sets the "req_return_inventory_receive" field.
func (psuo *ProductStoreUpdateOne) SetReqReturnInventoryReceive(prir productstore.ReqReturnInventoryReceive) *ProductStoreUpdateOne {
	psuo.mutation.SetReqReturnInventoryReceive(prir)
	return psuo
}

// SetNillableReqReturnInventoryReceive sets the "req_return_inventory_receive" field if the given value is not nil.
func (psuo *ProductStoreUpdateOne) SetNillableReqReturnInventoryReceive(prir *productstore.ReqReturnInventoryReceive) *ProductStoreUpdateOne {
	if prir != nil {
		psuo.SetReqReturnInventoryReceive(*prir)
	}
	return psuo
}

// ClearReqReturnInventoryReceive clears the value of the "req_return_inventory_receive" field.
func (psuo *ProductStoreUpdateOne) ClearReqReturnInventoryReceive() *ProductStoreUpdateOne {
	psuo.mutation.ClearReqReturnInventoryReceive()
	return psuo
}

// SetAddToCartRemoveIncompat sets the "add_to_cart_remove_incompat" field.
func (psuo *ProductStoreUpdateOne) SetAddToCartRemoveIncompat(ptcri productstore.AddToCartRemoveIncompat) *ProductStoreUpdateOne {
	psuo.mutation.SetAddToCartRemoveIncompat(ptcri)
	return psuo
}

// SetNillableAddToCartRemoveIncompat sets the "add_to_cart_remove_incompat" field if the given value is not nil.
func (psuo *ProductStoreUpdateOne) SetNillableAddToCartRemoveIncompat(ptcri *productstore.AddToCartRemoveIncompat) *ProductStoreUpdateOne {
	if ptcri != nil {
		psuo.SetAddToCartRemoveIncompat(*ptcri)
	}
	return psuo
}

// ClearAddToCartRemoveIncompat clears the value of the "add_to_cart_remove_incompat" field.
func (psuo *ProductStoreUpdateOne) ClearAddToCartRemoveIncompat() *ProductStoreUpdateOne {
	psuo.mutation.ClearAddToCartRemoveIncompat()
	return psuo
}

// SetAddToCartReplaceUpsell sets the "add_to_cart_replace_upsell" field.
func (psuo *ProductStoreUpdateOne) SetAddToCartReplaceUpsell(ptcru productstore.AddToCartReplaceUpsell) *ProductStoreUpdateOne {
	psuo.mutation.SetAddToCartReplaceUpsell(ptcru)
	return psuo
}

// SetNillableAddToCartReplaceUpsell sets the "add_to_cart_replace_upsell" field if the given value is not nil.
func (psuo *ProductStoreUpdateOne) SetNillableAddToCartReplaceUpsell(ptcru *productstore.AddToCartReplaceUpsell) *ProductStoreUpdateOne {
	if ptcru != nil {
		psuo.SetAddToCartReplaceUpsell(*ptcru)
	}
	return psuo
}

// ClearAddToCartReplaceUpsell clears the value of the "add_to_cart_replace_upsell" field.
func (psuo *ProductStoreUpdateOne) ClearAddToCartReplaceUpsell() *ProductStoreUpdateOne {
	psuo.mutation.ClearAddToCartReplaceUpsell()
	return psuo
}

// SetSplitPayPrefPerShpGrp sets the "split_pay_pref_per_shp_grp" field.
func (psuo *ProductStoreUpdateOne) SetSplitPayPrefPerShpGrp(ppppsg productstore.SplitPayPrefPerShpGrp) *ProductStoreUpdateOne {
	psuo.mutation.SetSplitPayPrefPerShpGrp(ppppsg)
	return psuo
}

// SetNillableSplitPayPrefPerShpGrp sets the "split_pay_pref_per_shp_grp" field if the given value is not nil.
func (psuo *ProductStoreUpdateOne) SetNillableSplitPayPrefPerShpGrp(ppppsg *productstore.SplitPayPrefPerShpGrp) *ProductStoreUpdateOne {
	if ppppsg != nil {
		psuo.SetSplitPayPrefPerShpGrp(*ppppsg)
	}
	return psuo
}

// ClearSplitPayPrefPerShpGrp clears the value of the "split_pay_pref_per_shp_grp" field.
func (psuo *ProductStoreUpdateOne) ClearSplitPayPrefPerShpGrp() *ProductStoreUpdateOne {
	psuo.mutation.ClearSplitPayPrefPerShpGrp()
	return psuo
}

// SetManagedByLot sets the "managed_by_lot" field.
func (psuo *ProductStoreUpdateOne) SetManagedByLot(pbl productstore.ManagedByLot) *ProductStoreUpdateOne {
	psuo.mutation.SetManagedByLot(pbl)
	return psuo
}

// SetNillableManagedByLot sets the "managed_by_lot" field if the given value is not nil.
func (psuo *ProductStoreUpdateOne) SetNillableManagedByLot(pbl *productstore.ManagedByLot) *ProductStoreUpdateOne {
	if pbl != nil {
		psuo.SetManagedByLot(*pbl)
	}
	return psuo
}

// ClearManagedByLot clears the value of the "managed_by_lot" field.
func (psuo *ProductStoreUpdateOne) ClearManagedByLot() *ProductStoreUpdateOne {
	psuo.mutation.ClearManagedByLot()
	return psuo
}

// SetShowOutOfStockProducts sets the "show_out_of_stock_products" field.
func (psuo *ProductStoreUpdateOne) SetShowOutOfStockProducts(poosp productstore.ShowOutOfStockProducts) *ProductStoreUpdateOne {
	psuo.mutation.SetShowOutOfStockProducts(poosp)
	return psuo
}

// SetNillableShowOutOfStockProducts sets the "show_out_of_stock_products" field if the given value is not nil.
func (psuo *ProductStoreUpdateOne) SetNillableShowOutOfStockProducts(poosp *productstore.ShowOutOfStockProducts) *ProductStoreUpdateOne {
	if poosp != nil {
		psuo.SetShowOutOfStockProducts(*poosp)
	}
	return psuo
}

// ClearShowOutOfStockProducts clears the value of the "show_out_of_stock_products" field.
func (psuo *ProductStoreUpdateOne) ClearShowOutOfStockProducts() *ProductStoreUpdateOne {
	psuo.mutation.ClearShowOutOfStockProducts()
	return psuo
}

// SetOrderDecimalQuantity sets the "order_decimal_quantity" field.
func (psuo *ProductStoreUpdateOne) SetOrderDecimalQuantity(pdq productstore.OrderDecimalQuantity) *ProductStoreUpdateOne {
	psuo.mutation.SetOrderDecimalQuantity(pdq)
	return psuo
}

// SetNillableOrderDecimalQuantity sets the "order_decimal_quantity" field if the given value is not nil.
func (psuo *ProductStoreUpdateOne) SetNillableOrderDecimalQuantity(pdq *productstore.OrderDecimalQuantity) *ProductStoreUpdateOne {
	if pdq != nil {
		psuo.SetOrderDecimalQuantity(*pdq)
	}
	return psuo
}

// ClearOrderDecimalQuantity clears the value of the "order_decimal_quantity" field.
func (psuo *ProductStoreUpdateOne) ClearOrderDecimalQuantity() *ProductStoreUpdateOne {
	psuo.mutation.ClearOrderDecimalQuantity()
	return psuo
}

// SetAllowComment sets the "allow_comment" field.
func (psuo *ProductStoreUpdateOne) SetAllowComment(pc productstore.AllowComment) *ProductStoreUpdateOne {
	psuo.mutation.SetAllowComment(pc)
	return psuo
}

// SetNillableAllowComment sets the "allow_comment" field if the given value is not nil.
func (psuo *ProductStoreUpdateOne) SetNillableAllowComment(pc *productstore.AllowComment) *ProductStoreUpdateOne {
	if pc != nil {
		psuo.SetAllowComment(*pc)
	}
	return psuo
}

// ClearAllowComment clears the value of the "allow_comment" field.
func (psuo *ProductStoreUpdateOne) ClearAllowComment() *ProductStoreUpdateOne {
	psuo.mutation.ClearAllowComment()
	return psuo
}

// SetAllocateInventory sets the "allocate_inventory" field.
func (psuo *ProductStoreUpdateOne) SetAllocateInventory(pi productstore.AllocateInventory) *ProductStoreUpdateOne {
	psuo.mutation.SetAllocateInventory(pi)
	return psuo
}

// SetNillableAllocateInventory sets the "allocate_inventory" field if the given value is not nil.
func (psuo *ProductStoreUpdateOne) SetNillableAllocateInventory(pi *productstore.AllocateInventory) *ProductStoreUpdateOne {
	if pi != nil {
		psuo.SetAllocateInventory(*pi)
	}
	return psuo
}

// ClearAllocateInventory clears the value of the "allocate_inventory" field.
func (psuo *ProductStoreUpdateOne) ClearAllocateInventory() *ProductStoreUpdateOne {
	psuo.mutation.ClearAllocateInventory()
	return psuo
}

// SetPrimaryProductStoreGroupID sets the "primary_product_store_group" edge to the ProductStoreGroup entity by ID.
func (psuo *ProductStoreUpdateOne) SetPrimaryProductStoreGroupID(id int) *ProductStoreUpdateOne {
	psuo.mutation.SetPrimaryProductStoreGroupID(id)
	return psuo
}

// SetNillablePrimaryProductStoreGroupID sets the "primary_product_store_group" edge to the ProductStoreGroup entity by ID if the given value is not nil.
func (psuo *ProductStoreUpdateOne) SetNillablePrimaryProductStoreGroupID(id *int) *ProductStoreUpdateOne {
	if id != nil {
		psuo = psuo.SetPrimaryProductStoreGroupID(*id)
	}
	return psuo
}

// SetPrimaryProductStoreGroup sets the "primary_product_store_group" edge to the ProductStoreGroup entity.
func (psuo *ProductStoreUpdateOne) SetPrimaryProductStoreGroup(p *ProductStoreGroup) *ProductStoreUpdateOne {
	return psuo.SetPrimaryProductStoreGroupID(p.ID)
}

// SetReserveOrderEnumerationID sets the "reserve_order_enumeration" edge to the Enumeration entity by ID.
func (psuo *ProductStoreUpdateOne) SetReserveOrderEnumerationID(id int) *ProductStoreUpdateOne {
	psuo.mutation.SetReserveOrderEnumerationID(id)
	return psuo
}

// SetNillableReserveOrderEnumerationID sets the "reserve_order_enumeration" edge to the Enumeration entity by ID if the given value is not nil.
func (psuo *ProductStoreUpdateOne) SetNillableReserveOrderEnumerationID(id *int) *ProductStoreUpdateOne {
	if id != nil {
		psuo = psuo.SetReserveOrderEnumerationID(*id)
	}
	return psuo
}

// SetReserveOrderEnumeration sets the "reserve_order_enumeration" edge to the Enumeration entity.
func (psuo *ProductStoreUpdateOne) SetReserveOrderEnumeration(e *Enumeration) *ProductStoreUpdateOne {
	return psuo.SetReserveOrderEnumerationID(e.ID)
}

// SetRequirementMethodEnumerationID sets the "requirement_method_enumeration" edge to the Enumeration entity by ID.
func (psuo *ProductStoreUpdateOne) SetRequirementMethodEnumerationID(id int) *ProductStoreUpdateOne {
	psuo.mutation.SetRequirementMethodEnumerationID(id)
	return psuo
}

// SetNillableRequirementMethodEnumerationID sets the "requirement_method_enumeration" edge to the Enumeration entity by ID if the given value is not nil.
func (psuo *ProductStoreUpdateOne) SetNillableRequirementMethodEnumerationID(id *int) *ProductStoreUpdateOne {
	if id != nil {
		psuo = psuo.SetRequirementMethodEnumerationID(*id)
	}
	return psuo
}

// SetRequirementMethodEnumeration sets the "requirement_method_enumeration" edge to the Enumeration entity.
func (psuo *ProductStoreUpdateOne) SetRequirementMethodEnumeration(e *Enumeration) *ProductStoreUpdateOne {
	return psuo.SetRequirementMethodEnumerationID(e.ID)
}

// SetDefaultSalesChannelEnumerationID sets the "default_sales_channel_enumeration" edge to the Enumeration entity by ID.
func (psuo *ProductStoreUpdateOne) SetDefaultSalesChannelEnumerationID(id int) *ProductStoreUpdateOne {
	psuo.mutation.SetDefaultSalesChannelEnumerationID(id)
	return psuo
}

// SetNillableDefaultSalesChannelEnumerationID sets the "default_sales_channel_enumeration" edge to the Enumeration entity by ID if the given value is not nil.
func (psuo *ProductStoreUpdateOne) SetNillableDefaultSalesChannelEnumerationID(id *int) *ProductStoreUpdateOne {
	if id != nil {
		psuo = psuo.SetDefaultSalesChannelEnumerationID(*id)
	}
	return psuo
}

// SetDefaultSalesChannelEnumeration sets the "default_sales_channel_enumeration" edge to the Enumeration entity.
func (psuo *ProductStoreUpdateOne) SetDefaultSalesChannelEnumeration(e *Enumeration) *ProductStoreUpdateOne {
	return psuo.SetDefaultSalesChannelEnumerationID(e.ID)
}

// SetHeaderApprovedStatusItemID sets the "header_approved_status_item" edge to the StatusItem entity by ID.
func (psuo *ProductStoreUpdateOne) SetHeaderApprovedStatusItemID(id int) *ProductStoreUpdateOne {
	psuo.mutation.SetHeaderApprovedStatusItemID(id)
	return psuo
}

// SetNillableHeaderApprovedStatusItemID sets the "header_approved_status_item" edge to the StatusItem entity by ID if the given value is not nil.
func (psuo *ProductStoreUpdateOne) SetNillableHeaderApprovedStatusItemID(id *int) *ProductStoreUpdateOne {
	if id != nil {
		psuo = psuo.SetHeaderApprovedStatusItemID(*id)
	}
	return psuo
}

// SetHeaderApprovedStatusItem sets the "header_approved_status_item" edge to the StatusItem entity.
func (psuo *ProductStoreUpdateOne) SetHeaderApprovedStatusItem(s *StatusItem) *ProductStoreUpdateOne {
	return psuo.SetHeaderApprovedStatusItemID(s.ID)
}

// SetItemApprovedStatusItemID sets the "item_approved_status_item" edge to the StatusItem entity by ID.
func (psuo *ProductStoreUpdateOne) SetItemApprovedStatusItemID(id int) *ProductStoreUpdateOne {
	psuo.mutation.SetItemApprovedStatusItemID(id)
	return psuo
}

// SetNillableItemApprovedStatusItemID sets the "item_approved_status_item" edge to the StatusItem entity by ID if the given value is not nil.
func (psuo *ProductStoreUpdateOne) SetNillableItemApprovedStatusItemID(id *int) *ProductStoreUpdateOne {
	if id != nil {
		psuo = psuo.SetItemApprovedStatusItemID(*id)
	}
	return psuo
}

// SetItemApprovedStatusItem sets the "item_approved_status_item" edge to the StatusItem entity.
func (psuo *ProductStoreUpdateOne) SetItemApprovedStatusItem(s *StatusItem) *ProductStoreUpdateOne {
	return psuo.SetItemApprovedStatusItemID(s.ID)
}

// SetDigitalItemApprovedStatusItemID sets the "digital_item_approved_status_item" edge to the StatusItem entity by ID.
func (psuo *ProductStoreUpdateOne) SetDigitalItemApprovedStatusItemID(id int) *ProductStoreUpdateOne {
	psuo.mutation.SetDigitalItemApprovedStatusItemID(id)
	return psuo
}

// SetNillableDigitalItemApprovedStatusItemID sets the "digital_item_approved_status_item" edge to the StatusItem entity by ID if the given value is not nil.
func (psuo *ProductStoreUpdateOne) SetNillableDigitalItemApprovedStatusItemID(id *int) *ProductStoreUpdateOne {
	if id != nil {
		psuo = psuo.SetDigitalItemApprovedStatusItemID(*id)
	}
	return psuo
}

// SetDigitalItemApprovedStatusItem sets the "digital_item_approved_status_item" edge to the StatusItem entity.
func (psuo *ProductStoreUpdateOne) SetDigitalItemApprovedStatusItem(s *StatusItem) *ProductStoreUpdateOne {
	return psuo.SetDigitalItemApprovedStatusItemID(s.ID)
}

// SetHeaderDeclinedStatusItemID sets the "header_declined_status_item" edge to the StatusItem entity by ID.
func (psuo *ProductStoreUpdateOne) SetHeaderDeclinedStatusItemID(id int) *ProductStoreUpdateOne {
	psuo.mutation.SetHeaderDeclinedStatusItemID(id)
	return psuo
}

// SetNillableHeaderDeclinedStatusItemID sets the "header_declined_status_item" edge to the StatusItem entity by ID if the given value is not nil.
func (psuo *ProductStoreUpdateOne) SetNillableHeaderDeclinedStatusItemID(id *int) *ProductStoreUpdateOne {
	if id != nil {
		psuo = psuo.SetHeaderDeclinedStatusItemID(*id)
	}
	return psuo
}

// SetHeaderDeclinedStatusItem sets the "header_declined_status_item" edge to the StatusItem entity.
func (psuo *ProductStoreUpdateOne) SetHeaderDeclinedStatusItem(s *StatusItem) *ProductStoreUpdateOne {
	return psuo.SetHeaderDeclinedStatusItemID(s.ID)
}

// SetItemDeclinedStatusItemID sets the "item_declined_status_item" edge to the StatusItem entity by ID.
func (psuo *ProductStoreUpdateOne) SetItemDeclinedStatusItemID(id int) *ProductStoreUpdateOne {
	psuo.mutation.SetItemDeclinedStatusItemID(id)
	return psuo
}

// SetNillableItemDeclinedStatusItemID sets the "item_declined_status_item" edge to the StatusItem entity by ID if the given value is not nil.
func (psuo *ProductStoreUpdateOne) SetNillableItemDeclinedStatusItemID(id *int) *ProductStoreUpdateOne {
	if id != nil {
		psuo = psuo.SetItemDeclinedStatusItemID(*id)
	}
	return psuo
}

// SetItemDeclinedStatusItem sets the "item_declined_status_item" edge to the StatusItem entity.
func (psuo *ProductStoreUpdateOne) SetItemDeclinedStatusItem(s *StatusItem) *ProductStoreUpdateOne {
	return psuo.SetItemDeclinedStatusItemID(s.ID)
}

// SetHeaderCancelStatusItemID sets the "header_cancel_status_item" edge to the StatusItem entity by ID.
func (psuo *ProductStoreUpdateOne) SetHeaderCancelStatusItemID(id int) *ProductStoreUpdateOne {
	psuo.mutation.SetHeaderCancelStatusItemID(id)
	return psuo
}

// SetNillableHeaderCancelStatusItemID sets the "header_cancel_status_item" edge to the StatusItem entity by ID if the given value is not nil.
func (psuo *ProductStoreUpdateOne) SetNillableHeaderCancelStatusItemID(id *int) *ProductStoreUpdateOne {
	if id != nil {
		psuo = psuo.SetHeaderCancelStatusItemID(*id)
	}
	return psuo
}

// SetHeaderCancelStatusItem sets the "header_cancel_status_item" edge to the StatusItem entity.
func (psuo *ProductStoreUpdateOne) SetHeaderCancelStatusItem(s *StatusItem) *ProductStoreUpdateOne {
	return psuo.SetHeaderCancelStatusItemID(s.ID)
}

// SetItemCancelStatusItemID sets the "item_cancel_status_item" edge to the StatusItem entity by ID.
func (psuo *ProductStoreUpdateOne) SetItemCancelStatusItemID(id int) *ProductStoreUpdateOne {
	psuo.mutation.SetItemCancelStatusItemID(id)
	return psuo
}

// SetNillableItemCancelStatusItemID sets the "item_cancel_status_item" edge to the StatusItem entity by ID if the given value is not nil.
func (psuo *ProductStoreUpdateOne) SetNillableItemCancelStatusItemID(id *int) *ProductStoreUpdateOne {
	if id != nil {
		psuo = psuo.SetItemCancelStatusItemID(*id)
	}
	return psuo
}

// SetItemCancelStatusItem sets the "item_cancel_status_item" edge to the StatusItem entity.
func (psuo *ProductStoreUpdateOne) SetItemCancelStatusItem(s *StatusItem) *ProductStoreUpdateOne {
	return psuo.SetItemCancelStatusItemID(s.ID)
}

// SetStoreCreditAccountEnumerationID sets the "store_credit_account_enumeration" edge to the Enumeration entity by ID.
func (psuo *ProductStoreUpdateOne) SetStoreCreditAccountEnumerationID(id int) *ProductStoreUpdateOne {
	psuo.mutation.SetStoreCreditAccountEnumerationID(id)
	return psuo
}

// SetNillableStoreCreditAccountEnumerationID sets the "store_credit_account_enumeration" edge to the Enumeration entity by ID if the given value is not nil.
func (psuo *ProductStoreUpdateOne) SetNillableStoreCreditAccountEnumerationID(id *int) *ProductStoreUpdateOne {
	if id != nil {
		psuo = psuo.SetStoreCreditAccountEnumerationID(*id)
	}
	return psuo
}

// SetStoreCreditAccountEnumeration sets the "store_credit_account_enumeration" edge to the Enumeration entity.
func (psuo *ProductStoreUpdateOne) SetStoreCreditAccountEnumeration(e *Enumeration) *ProductStoreUpdateOne {
	return psuo.SetStoreCreditAccountEnumerationID(e.ID)
}

// AddOrderHeaderIDs adds the "order_headers" edge to the OrderHeader entity by IDs.
func (psuo *ProductStoreUpdateOne) AddOrderHeaderIDs(ids ...int) *ProductStoreUpdateOne {
	psuo.mutation.AddOrderHeaderIDs(ids...)
	return psuo
}

// AddOrderHeaders adds the "order_headers" edges to the OrderHeader entity.
func (psuo *ProductStoreUpdateOne) AddOrderHeaders(o ...*OrderHeader) *ProductStoreUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return psuo.AddOrderHeaderIDs(ids...)
}

// AddProductReviewIDs adds the "product_reviews" edge to the ProductReview entity by IDs.
func (psuo *ProductStoreUpdateOne) AddProductReviewIDs(ids ...int) *ProductStoreUpdateOne {
	psuo.mutation.AddProductReviewIDs(ids...)
	return psuo
}

// AddProductReviews adds the "product_reviews" edges to the ProductReview entity.
func (psuo *ProductStoreUpdateOne) AddProductReviews(p ...*ProductReview) *ProductStoreUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return psuo.AddProductReviewIDs(ids...)
}

// Mutation returns the ProductStoreMutation object of the builder.
func (psuo *ProductStoreUpdateOne) Mutation() *ProductStoreMutation {
	return psuo.mutation
}

// ClearPrimaryProductStoreGroup clears the "primary_product_store_group" edge to the ProductStoreGroup entity.
func (psuo *ProductStoreUpdateOne) ClearPrimaryProductStoreGroup() *ProductStoreUpdateOne {
	psuo.mutation.ClearPrimaryProductStoreGroup()
	return psuo
}

// ClearReserveOrderEnumeration clears the "reserve_order_enumeration" edge to the Enumeration entity.
func (psuo *ProductStoreUpdateOne) ClearReserveOrderEnumeration() *ProductStoreUpdateOne {
	psuo.mutation.ClearReserveOrderEnumeration()
	return psuo
}

// ClearRequirementMethodEnumeration clears the "requirement_method_enumeration" edge to the Enumeration entity.
func (psuo *ProductStoreUpdateOne) ClearRequirementMethodEnumeration() *ProductStoreUpdateOne {
	psuo.mutation.ClearRequirementMethodEnumeration()
	return psuo
}

// ClearDefaultSalesChannelEnumeration clears the "default_sales_channel_enumeration" edge to the Enumeration entity.
func (psuo *ProductStoreUpdateOne) ClearDefaultSalesChannelEnumeration() *ProductStoreUpdateOne {
	psuo.mutation.ClearDefaultSalesChannelEnumeration()
	return psuo
}

// ClearHeaderApprovedStatusItem clears the "header_approved_status_item" edge to the StatusItem entity.
func (psuo *ProductStoreUpdateOne) ClearHeaderApprovedStatusItem() *ProductStoreUpdateOne {
	psuo.mutation.ClearHeaderApprovedStatusItem()
	return psuo
}

// ClearItemApprovedStatusItem clears the "item_approved_status_item" edge to the StatusItem entity.
func (psuo *ProductStoreUpdateOne) ClearItemApprovedStatusItem() *ProductStoreUpdateOne {
	psuo.mutation.ClearItemApprovedStatusItem()
	return psuo
}

// ClearDigitalItemApprovedStatusItem clears the "digital_item_approved_status_item" edge to the StatusItem entity.
func (psuo *ProductStoreUpdateOne) ClearDigitalItemApprovedStatusItem() *ProductStoreUpdateOne {
	psuo.mutation.ClearDigitalItemApprovedStatusItem()
	return psuo
}

// ClearHeaderDeclinedStatusItem clears the "header_declined_status_item" edge to the StatusItem entity.
func (psuo *ProductStoreUpdateOne) ClearHeaderDeclinedStatusItem() *ProductStoreUpdateOne {
	psuo.mutation.ClearHeaderDeclinedStatusItem()
	return psuo
}

// ClearItemDeclinedStatusItem clears the "item_declined_status_item" edge to the StatusItem entity.
func (psuo *ProductStoreUpdateOne) ClearItemDeclinedStatusItem() *ProductStoreUpdateOne {
	psuo.mutation.ClearItemDeclinedStatusItem()
	return psuo
}

// ClearHeaderCancelStatusItem clears the "header_cancel_status_item" edge to the StatusItem entity.
func (psuo *ProductStoreUpdateOne) ClearHeaderCancelStatusItem() *ProductStoreUpdateOne {
	psuo.mutation.ClearHeaderCancelStatusItem()
	return psuo
}

// ClearItemCancelStatusItem clears the "item_cancel_status_item" edge to the StatusItem entity.
func (psuo *ProductStoreUpdateOne) ClearItemCancelStatusItem() *ProductStoreUpdateOne {
	psuo.mutation.ClearItemCancelStatusItem()
	return psuo
}

// ClearStoreCreditAccountEnumeration clears the "store_credit_account_enumeration" edge to the Enumeration entity.
func (psuo *ProductStoreUpdateOne) ClearStoreCreditAccountEnumeration() *ProductStoreUpdateOne {
	psuo.mutation.ClearStoreCreditAccountEnumeration()
	return psuo
}

// ClearOrderHeaders clears all "order_headers" edges to the OrderHeader entity.
func (psuo *ProductStoreUpdateOne) ClearOrderHeaders() *ProductStoreUpdateOne {
	psuo.mutation.ClearOrderHeaders()
	return psuo
}

// RemoveOrderHeaderIDs removes the "order_headers" edge to OrderHeader entities by IDs.
func (psuo *ProductStoreUpdateOne) RemoveOrderHeaderIDs(ids ...int) *ProductStoreUpdateOne {
	psuo.mutation.RemoveOrderHeaderIDs(ids...)
	return psuo
}

// RemoveOrderHeaders removes "order_headers" edges to OrderHeader entities.
func (psuo *ProductStoreUpdateOne) RemoveOrderHeaders(o ...*OrderHeader) *ProductStoreUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return psuo.RemoveOrderHeaderIDs(ids...)
}

// ClearProductReviews clears all "product_reviews" edges to the ProductReview entity.
func (psuo *ProductStoreUpdateOne) ClearProductReviews() *ProductStoreUpdateOne {
	psuo.mutation.ClearProductReviews()
	return psuo
}

// RemoveProductReviewIDs removes the "product_reviews" edge to ProductReview entities by IDs.
func (psuo *ProductStoreUpdateOne) RemoveProductReviewIDs(ids ...int) *ProductStoreUpdateOne {
	psuo.mutation.RemoveProductReviewIDs(ids...)
	return psuo
}

// RemoveProductReviews removes "product_reviews" edges to ProductReview entities.
func (psuo *ProductStoreUpdateOne) RemoveProductReviews(p ...*ProductReview) *ProductStoreUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return psuo.RemoveProductReviewIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (psuo *ProductStoreUpdateOne) Select(field string, fields ...string) *ProductStoreUpdateOne {
	psuo.fields = append([]string{field}, fields...)
	return psuo
}

// Save executes the query and returns the updated ProductStore entity.
func (psuo *ProductStoreUpdateOne) Save(ctx context.Context) (*ProductStore, error) {
	var (
		err  error
		node *ProductStore
	)
	psuo.defaults()
	if len(psuo.hooks) == 0 {
		if err = psuo.check(); err != nil {
			return nil, err
		}
		node, err = psuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProductStoreMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = psuo.check(); err != nil {
				return nil, err
			}
			psuo.mutation = mutation
			node, err = psuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(psuo.hooks) - 1; i >= 0; i-- {
			mut = psuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, psuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (psuo *ProductStoreUpdateOne) SaveX(ctx context.Context) *ProductStore {
	node, err := psuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (psuo *ProductStoreUpdateOne) Exec(ctx context.Context) error {
	_, err := psuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psuo *ProductStoreUpdateOne) ExecX(ctx context.Context) {
	if err := psuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (psuo *ProductStoreUpdateOne) defaults() {
	if _, ok := psuo.mutation.UpdateTime(); !ok {
		v := productstore.UpdateDefaultUpdateTime()
		psuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (psuo *ProductStoreUpdateOne) check() error {
	if v, ok := psuo.mutation.ManualAuthIsCapture(); ok {
		if err := productstore.ManualAuthIsCaptureValidator(v); err != nil {
			return &ValidationError{Name: "manual_auth_is_capture", err: fmt.Errorf("ent: validator failed for field \"manual_auth_is_capture\": %w", err)}
		}
	}
	if v, ok := psuo.mutation.ProrateShipping(); ok {
		if err := productstore.ProrateShippingValidator(v); err != nil {
			return &ValidationError{Name: "prorate_shipping", err: fmt.Errorf("ent: validator failed for field \"prorate_shipping\": %w", err)}
		}
	}
	if v, ok := psuo.mutation.ProrateTaxes(); ok {
		if err := productstore.ProrateTaxesValidator(v); err != nil {
			return &ValidationError{Name: "prorate_taxes", err: fmt.Errorf("ent: validator failed for field \"prorate_taxes\": %w", err)}
		}
	}
	if v, ok := psuo.mutation.ViewCartOnAdd(); ok {
		if err := productstore.ViewCartOnAddValidator(v); err != nil {
			return &ValidationError{Name: "view_cart_on_add", err: fmt.Errorf("ent: validator failed for field \"view_cart_on_add\": %w", err)}
		}
	}
	if v, ok := psuo.mutation.AutoSaveCart(); ok {
		if err := productstore.AutoSaveCartValidator(v); err != nil {
			return &ValidationError{Name: "auto_save_cart", err: fmt.Errorf("ent: validator failed for field \"auto_save_cart\": %w", err)}
		}
	}
	if v, ok := psuo.mutation.AutoApproveReviews(); ok {
		if err := productstore.AutoApproveReviewsValidator(v); err != nil {
			return &ValidationError{Name: "auto_approve_reviews", err: fmt.Errorf("ent: validator failed for field \"auto_approve_reviews\": %w", err)}
		}
	}
	if v, ok := psuo.mutation.IsDemoStore(); ok {
		if err := productstore.IsDemoStoreValidator(v); err != nil {
			return &ValidationError{Name: "is_demo_store", err: fmt.Errorf("ent: validator failed for field \"is_demo_store\": %w", err)}
		}
	}
	if v, ok := psuo.mutation.IsImmediatelyFulfilled(); ok {
		if err := productstore.IsImmediatelyFulfilledValidator(v); err != nil {
			return &ValidationError{Name: "is_immediately_fulfilled", err: fmt.Errorf("ent: validator failed for field \"is_immediately_fulfilled\": %w", err)}
		}
	}
	if v, ok := psuo.mutation.OneInventoryFacility(); ok {
		if err := productstore.OneInventoryFacilityValidator(v); err != nil {
			return &ValidationError{Name: "one_inventory_facility", err: fmt.Errorf("ent: validator failed for field \"one_inventory_facility\": %w", err)}
		}
	}
	if v, ok := psuo.mutation.CheckInventory(); ok {
		if err := productstore.CheckInventoryValidator(v); err != nil {
			return &ValidationError{Name: "check_inventory", err: fmt.Errorf("ent: validator failed for field \"check_inventory\": %w", err)}
		}
	}
	if v, ok := psuo.mutation.ReserveInventory(); ok {
		if err := productstore.ReserveInventoryValidator(v); err != nil {
			return &ValidationError{Name: "reserve_inventory", err: fmt.Errorf("ent: validator failed for field \"reserve_inventory\": %w", err)}
		}
	}
	if v, ok := psuo.mutation.RequireInventory(); ok {
		if err := productstore.RequireInventoryValidator(v); err != nil {
			return &ValidationError{Name: "require_inventory", err: fmt.Errorf("ent: validator failed for field \"require_inventory\": %w", err)}
		}
	}
	if v, ok := psuo.mutation.BalanceResOnOrderCreation(); ok {
		if err := productstore.BalanceResOnOrderCreationValidator(v); err != nil {
			return &ValidationError{Name: "balance_res_on_order_creation", err: fmt.Errorf("ent: validator failed for field \"balance_res_on_order_creation\": %w", err)}
		}
	}
	if v, ok := psuo.mutation.OrderNumberPrefix(); ok {
		if err := productstore.OrderNumberPrefixValidator(v); err != nil {
			return &ValidationError{Name: "order_number_prefix", err: fmt.Errorf("ent: validator failed for field \"order_number_prefix\": %w", err)}
		}
	}
	if v, ok := psuo.mutation.DefaultLocaleString(); ok {
		if err := productstore.DefaultLocaleStringValidator(v); err != nil {
			return &ValidationError{Name: "default_locale_string", err: fmt.Errorf("ent: validator failed for field \"default_locale_string\": %w", err)}
		}
	}
	if v, ok := psuo.mutation.DefaultTimeZoneString(); ok {
		if err := productstore.DefaultTimeZoneStringValidator(v); err != nil {
			return &ValidationError{Name: "default_time_zone_string", err: fmt.Errorf("ent: validator failed for field \"default_time_zone_string\": %w", err)}
		}
	}
	if v, ok := psuo.mutation.AllowPassword(); ok {
		if err := productstore.AllowPasswordValidator(v); err != nil {
			return &ValidationError{Name: "allow_password", err: fmt.Errorf("ent: validator failed for field \"allow_password\": %w", err)}
		}
	}
	if v, ok := psuo.mutation.ExplodeOrderItems(); ok {
		if err := productstore.ExplodeOrderItemsValidator(v); err != nil {
			return &ValidationError{Name: "explode_order_items", err: fmt.Errorf("ent: validator failed for field \"explode_order_items\": %w", err)}
		}
	}
	if v, ok := psuo.mutation.CheckGcBalance(); ok {
		if err := productstore.CheckGcBalanceValidator(v); err != nil {
			return &ValidationError{Name: "check_gc_balance", err: fmt.Errorf("ent: validator failed for field \"check_gc_balance\": %w", err)}
		}
	}
	if v, ok := psuo.mutation.RetryFailedAuths(); ok {
		if err := productstore.RetryFailedAuthsValidator(v); err != nil {
			return &ValidationError{Name: "retry_failed_auths", err: fmt.Errorf("ent: validator failed for field \"retry_failed_auths\": %w", err)}
		}
	}
	if v, ok := psuo.mutation.UsePrimaryEmailUsername(); ok {
		if err := productstore.UsePrimaryEmailUsernameValidator(v); err != nil {
			return &ValidationError{Name: "use_primary_email_username", err: fmt.Errorf("ent: validator failed for field \"use_primary_email_username\": %w", err)}
		}
	}
	if v, ok := psuo.mutation.RequireCustomerRole(); ok {
		if err := productstore.RequireCustomerRoleValidator(v); err != nil {
			return &ValidationError{Name: "require_customer_role", err: fmt.Errorf("ent: validator failed for field \"require_customer_role\": %w", err)}
		}
	}
	if v, ok := psuo.mutation.AutoInvoiceDigitalItems(); ok {
		if err := productstore.AutoInvoiceDigitalItemsValidator(v); err != nil {
			return &ValidationError{Name: "auto_invoice_digital_items", err: fmt.Errorf("ent: validator failed for field \"auto_invoice_digital_items\": %w", err)}
		}
	}
	if v, ok := psuo.mutation.ReqShipAddrForDigItems(); ok {
		if err := productstore.ReqShipAddrForDigItemsValidator(v); err != nil {
			return &ValidationError{Name: "req_ship_addr_for_dig_items", err: fmt.Errorf("ent: validator failed for field \"req_ship_addr_for_dig_items\": %w", err)}
		}
	}
	if v, ok := psuo.mutation.ShowCheckoutGiftOptions(); ok {
		if err := productstore.ShowCheckoutGiftOptionsValidator(v); err != nil {
			return &ValidationError{Name: "show_checkout_gift_options", err: fmt.Errorf("ent: validator failed for field \"show_checkout_gift_options\": %w", err)}
		}
	}
	if v, ok := psuo.mutation.SelectPaymentTypePerItem(); ok {
		if err := productstore.SelectPaymentTypePerItemValidator(v); err != nil {
			return &ValidationError{Name: "select_payment_type_per_item", err: fmt.Errorf("ent: validator failed for field \"select_payment_type_per_item\": %w", err)}
		}
	}
	if v, ok := psuo.mutation.ShowPricesWithVatTax(); ok {
		if err := productstore.ShowPricesWithVatTaxValidator(v); err != nil {
			return &ValidationError{Name: "show_prices_with_vat_tax", err: fmt.Errorf("ent: validator failed for field \"show_prices_with_vat_tax\": %w", err)}
		}
	}
	if v, ok := psuo.mutation.ShowTaxIsExempt(); ok {
		if err := productstore.ShowTaxIsExemptValidator(v); err != nil {
			return &ValidationError{Name: "show_tax_is_exempt", err: fmt.Errorf("ent: validator failed for field \"show_tax_is_exempt\": %w", err)}
		}
	}
	if v, ok := psuo.mutation.EnableAutoSuggestionList(); ok {
		if err := productstore.EnableAutoSuggestionListValidator(v); err != nil {
			return &ValidationError{Name: "enable_auto_suggestion_list", err: fmt.Errorf("ent: validator failed for field \"enable_auto_suggestion_list\": %w", err)}
		}
	}
	if v, ok := psuo.mutation.EnableDigProdUpload(); ok {
		if err := productstore.EnableDigProdUploadValidator(v); err != nil {
			return &ValidationError{Name: "enable_dig_prod_upload", err: fmt.Errorf("ent: validator failed for field \"enable_dig_prod_upload\": %w", err)}
		}
	}
	if v, ok := psuo.mutation.ProdSearchExcludeVariants(); ok {
		if err := productstore.ProdSearchExcludeVariantsValidator(v); err != nil {
			return &ValidationError{Name: "prod_search_exclude_variants", err: fmt.Errorf("ent: validator failed for field \"prod_search_exclude_variants\": %w", err)}
		}
	}
	if v, ok := psuo.mutation.AutoOrderCcTryExp(); ok {
		if err := productstore.AutoOrderCcTryExpValidator(v); err != nil {
			return &ValidationError{Name: "auto_order_cc_try_exp", err: fmt.Errorf("ent: validator failed for field \"auto_order_cc_try_exp\": %w", err)}
		}
	}
	if v, ok := psuo.mutation.AutoOrderCcTryOtherCards(); ok {
		if err := productstore.AutoOrderCcTryOtherCardsValidator(v); err != nil {
			return &ValidationError{Name: "auto_order_cc_try_other_cards", err: fmt.Errorf("ent: validator failed for field \"auto_order_cc_try_other_cards\": %w", err)}
		}
	}
	if v, ok := psuo.mutation.AutoOrderCcTryLaterNsf(); ok {
		if err := productstore.AutoOrderCcTryLaterNsfValidator(v); err != nil {
			return &ValidationError{Name: "auto_order_cc_try_later_nsf", err: fmt.Errorf("ent: validator failed for field \"auto_order_cc_try_later_nsf\": %w", err)}
		}
	}
	if v, ok := psuo.mutation.AutoApproveInvoice(); ok {
		if err := productstore.AutoApproveInvoiceValidator(v); err != nil {
			return &ValidationError{Name: "auto_approve_invoice", err: fmt.Errorf("ent: validator failed for field \"auto_approve_invoice\": %w", err)}
		}
	}
	if v, ok := psuo.mutation.AutoApproveOrder(); ok {
		if err := productstore.AutoApproveOrderValidator(v); err != nil {
			return &ValidationError{Name: "auto_approve_order", err: fmt.Errorf("ent: validator failed for field \"auto_approve_order\": %w", err)}
		}
	}
	if v, ok := psuo.mutation.ShipIfCaptureFails(); ok {
		if err := productstore.ShipIfCaptureFailsValidator(v); err != nil {
			return &ValidationError{Name: "ship_if_capture_fails", err: fmt.Errorf("ent: validator failed for field \"ship_if_capture_fails\": %w", err)}
		}
	}
	if v, ok := psuo.mutation.SetOwnerUponIssuance(); ok {
		if err := productstore.SetOwnerUponIssuanceValidator(v); err != nil {
			return &ValidationError{Name: "set_owner_upon_issuance", err: fmt.Errorf("ent: validator failed for field \"set_owner_upon_issuance\": %w", err)}
		}
	}
	if v, ok := psuo.mutation.ReqReturnInventoryReceive(); ok {
		if err := productstore.ReqReturnInventoryReceiveValidator(v); err != nil {
			return &ValidationError{Name: "req_return_inventory_receive", err: fmt.Errorf("ent: validator failed for field \"req_return_inventory_receive\": %w", err)}
		}
	}
	if v, ok := psuo.mutation.AddToCartRemoveIncompat(); ok {
		if err := productstore.AddToCartRemoveIncompatValidator(v); err != nil {
			return &ValidationError{Name: "add_to_cart_remove_incompat", err: fmt.Errorf("ent: validator failed for field \"add_to_cart_remove_incompat\": %w", err)}
		}
	}
	if v, ok := psuo.mutation.AddToCartReplaceUpsell(); ok {
		if err := productstore.AddToCartReplaceUpsellValidator(v); err != nil {
			return &ValidationError{Name: "add_to_cart_replace_upsell", err: fmt.Errorf("ent: validator failed for field \"add_to_cart_replace_upsell\": %w", err)}
		}
	}
	if v, ok := psuo.mutation.SplitPayPrefPerShpGrp(); ok {
		if err := productstore.SplitPayPrefPerShpGrpValidator(v); err != nil {
			return &ValidationError{Name: "split_pay_pref_per_shp_grp", err: fmt.Errorf("ent: validator failed for field \"split_pay_pref_per_shp_grp\": %w", err)}
		}
	}
	if v, ok := psuo.mutation.ManagedByLot(); ok {
		if err := productstore.ManagedByLotValidator(v); err != nil {
			return &ValidationError{Name: "managed_by_lot", err: fmt.Errorf("ent: validator failed for field \"managed_by_lot\": %w", err)}
		}
	}
	if v, ok := psuo.mutation.ShowOutOfStockProducts(); ok {
		if err := productstore.ShowOutOfStockProductsValidator(v); err != nil {
			return &ValidationError{Name: "show_out_of_stock_products", err: fmt.Errorf("ent: validator failed for field \"show_out_of_stock_products\": %w", err)}
		}
	}
	if v, ok := psuo.mutation.OrderDecimalQuantity(); ok {
		if err := productstore.OrderDecimalQuantityValidator(v); err != nil {
			return &ValidationError{Name: "order_decimal_quantity", err: fmt.Errorf("ent: validator failed for field \"order_decimal_quantity\": %w", err)}
		}
	}
	if v, ok := psuo.mutation.AllowComment(); ok {
		if err := productstore.AllowCommentValidator(v); err != nil {
			return &ValidationError{Name: "allow_comment", err: fmt.Errorf("ent: validator failed for field \"allow_comment\": %w", err)}
		}
	}
	if v, ok := psuo.mutation.AllocateInventory(); ok {
		if err := productstore.AllocateInventoryValidator(v); err != nil {
			return &ValidationError{Name: "allocate_inventory", err: fmt.Errorf("ent: validator failed for field \"allocate_inventory\": %w", err)}
		}
	}
	return nil
}

func (psuo *ProductStoreUpdateOne) sqlSave(ctx context.Context) (_node *ProductStore, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   productstore.Table,
			Columns: productstore.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: productstore.FieldID,
			},
		},
	}
	id, ok := psuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ProductStore.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := psuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, productstore.FieldID)
		for _, f := range fields {
			if !productstore.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != productstore.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := psuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := psuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productstore.FieldUpdateTime,
		})
	}
	if value, ok := psuo.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productstore.FieldStringRef,
		})
	}
	if psuo.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productstore.FieldStringRef,
		})
	}
	if value, ok := psuo.mutation.StoreName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productstore.FieldStoreName,
		})
	}
	if psuo.mutation.StoreNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productstore.FieldStoreName,
		})
	}
	if value, ok := psuo.mutation.CompanyName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productstore.FieldCompanyName,
		})
	}
	if psuo.mutation.CompanyNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productstore.FieldCompanyName,
		})
	}
	if value, ok := psuo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productstore.FieldTitle,
		})
	}
	if psuo.mutation.TitleCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productstore.FieldTitle,
		})
	}
	if value, ok := psuo.mutation.Subtitle(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productstore.FieldSubtitle,
		})
	}
	if psuo.mutation.SubtitleCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productstore.FieldSubtitle,
		})
	}
	if value, ok := psuo.mutation.PayToPartyID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productstore.FieldPayToPartyID,
		})
	}
	if value, ok := psuo.mutation.AddedPayToPartyID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productstore.FieldPayToPartyID,
		})
	}
	if psuo.mutation.PayToPartyIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: productstore.FieldPayToPartyID,
		})
	}
	if value, ok := psuo.mutation.DaysToCancelNonPay(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productstore.FieldDaysToCancelNonPay,
		})
	}
	if value, ok := psuo.mutation.AddedDaysToCancelNonPay(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productstore.FieldDaysToCancelNonPay,
		})
	}
	if psuo.mutation.DaysToCancelNonPayCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: productstore.FieldDaysToCancelNonPay,
		})
	}
	if value, ok := psuo.mutation.ManualAuthIsCapture(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldManualAuthIsCapture,
		})
	}
	if psuo.mutation.ManualAuthIsCaptureCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productstore.FieldManualAuthIsCapture,
		})
	}
	if value, ok := psuo.mutation.ProrateShipping(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldProrateShipping,
		})
	}
	if psuo.mutation.ProrateShippingCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productstore.FieldProrateShipping,
		})
	}
	if value, ok := psuo.mutation.ProrateTaxes(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldProrateTaxes,
		})
	}
	if psuo.mutation.ProrateTaxesCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productstore.FieldProrateTaxes,
		})
	}
	if value, ok := psuo.mutation.ViewCartOnAdd(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldViewCartOnAdd,
		})
	}
	if psuo.mutation.ViewCartOnAddCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productstore.FieldViewCartOnAdd,
		})
	}
	if value, ok := psuo.mutation.AutoSaveCart(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldAutoSaveCart,
		})
	}
	if psuo.mutation.AutoSaveCartCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productstore.FieldAutoSaveCart,
		})
	}
	if value, ok := psuo.mutation.AutoApproveReviews(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldAutoApproveReviews,
		})
	}
	if psuo.mutation.AutoApproveReviewsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productstore.FieldAutoApproveReviews,
		})
	}
	if value, ok := psuo.mutation.IsDemoStore(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldIsDemoStore,
		})
	}
	if psuo.mutation.IsDemoStoreCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productstore.FieldIsDemoStore,
		})
	}
	if value, ok := psuo.mutation.IsImmediatelyFulfilled(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldIsImmediatelyFulfilled,
		})
	}
	if psuo.mutation.IsImmediatelyFulfilledCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productstore.FieldIsImmediatelyFulfilled,
		})
	}
	if value, ok := psuo.mutation.InventoryFacilityID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productstore.FieldInventoryFacilityID,
		})
	}
	if value, ok := psuo.mutation.AddedInventoryFacilityID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productstore.FieldInventoryFacilityID,
		})
	}
	if psuo.mutation.InventoryFacilityIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: productstore.FieldInventoryFacilityID,
		})
	}
	if value, ok := psuo.mutation.OneInventoryFacility(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldOneInventoryFacility,
		})
	}
	if psuo.mutation.OneInventoryFacilityCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productstore.FieldOneInventoryFacility,
		})
	}
	if value, ok := psuo.mutation.CheckInventory(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldCheckInventory,
		})
	}
	if psuo.mutation.CheckInventoryCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productstore.FieldCheckInventory,
		})
	}
	if value, ok := psuo.mutation.ReserveInventory(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldReserveInventory,
		})
	}
	if psuo.mutation.ReserveInventoryCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productstore.FieldReserveInventory,
		})
	}
	if value, ok := psuo.mutation.RequireInventory(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldRequireInventory,
		})
	}
	if psuo.mutation.RequireInventoryCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productstore.FieldRequireInventory,
		})
	}
	if value, ok := psuo.mutation.BalanceResOnOrderCreation(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldBalanceResOnOrderCreation,
		})
	}
	if psuo.mutation.BalanceResOnOrderCreationCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productstore.FieldBalanceResOnOrderCreation,
		})
	}
	if value, ok := psuo.mutation.OrderNumberPrefix(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productstore.FieldOrderNumberPrefix,
		})
	}
	if psuo.mutation.OrderNumberPrefixCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productstore.FieldOrderNumberPrefix,
		})
	}
	if value, ok := psuo.mutation.DefaultLocaleString(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productstore.FieldDefaultLocaleString,
		})
	}
	if psuo.mutation.DefaultLocaleStringCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productstore.FieldDefaultLocaleString,
		})
	}
	if value, ok := psuo.mutation.DefaultCurrencyUomID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productstore.FieldDefaultCurrencyUomID,
		})
	}
	if value, ok := psuo.mutation.AddedDefaultCurrencyUomID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productstore.FieldDefaultCurrencyUomID,
		})
	}
	if psuo.mutation.DefaultCurrencyUomIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: productstore.FieldDefaultCurrencyUomID,
		})
	}
	if value, ok := psuo.mutation.DefaultTimeZoneString(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productstore.FieldDefaultTimeZoneString,
		})
	}
	if psuo.mutation.DefaultTimeZoneStringCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productstore.FieldDefaultTimeZoneString,
		})
	}
	if value, ok := psuo.mutation.AllowPassword(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldAllowPassword,
		})
	}
	if psuo.mutation.AllowPasswordCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productstore.FieldAllowPassword,
		})
	}
	if value, ok := psuo.mutation.DefaultPassword(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productstore.FieldDefaultPassword,
		})
	}
	if psuo.mutation.DefaultPasswordCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productstore.FieldDefaultPassword,
		})
	}
	if value, ok := psuo.mutation.ExplodeOrderItems(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldExplodeOrderItems,
		})
	}
	if psuo.mutation.ExplodeOrderItemsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productstore.FieldExplodeOrderItems,
		})
	}
	if value, ok := psuo.mutation.CheckGcBalance(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldCheckGcBalance,
		})
	}
	if psuo.mutation.CheckGcBalanceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productstore.FieldCheckGcBalance,
		})
	}
	if value, ok := psuo.mutation.RetryFailedAuths(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldRetryFailedAuths,
		})
	}
	if psuo.mutation.RetryFailedAuthsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productstore.FieldRetryFailedAuths,
		})
	}
	if value, ok := psuo.mutation.AuthDeclinedMessage(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productstore.FieldAuthDeclinedMessage,
		})
	}
	if psuo.mutation.AuthDeclinedMessageCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productstore.FieldAuthDeclinedMessage,
		})
	}
	if value, ok := psuo.mutation.AuthFraudMessage(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productstore.FieldAuthFraudMessage,
		})
	}
	if psuo.mutation.AuthFraudMessageCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productstore.FieldAuthFraudMessage,
		})
	}
	if value, ok := psuo.mutation.AuthErrorMessage(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productstore.FieldAuthErrorMessage,
		})
	}
	if psuo.mutation.AuthErrorMessageCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productstore.FieldAuthErrorMessage,
		})
	}
	if value, ok := psuo.mutation.VisualThemeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productstore.FieldVisualThemeID,
		})
	}
	if value, ok := psuo.mutation.AddedVisualThemeID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productstore.FieldVisualThemeID,
		})
	}
	if psuo.mutation.VisualThemeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: productstore.FieldVisualThemeID,
		})
	}
	if value, ok := psuo.mutation.UsePrimaryEmailUsername(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldUsePrimaryEmailUsername,
		})
	}
	if psuo.mutation.UsePrimaryEmailUsernameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productstore.FieldUsePrimaryEmailUsername,
		})
	}
	if value, ok := psuo.mutation.RequireCustomerRole(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldRequireCustomerRole,
		})
	}
	if psuo.mutation.RequireCustomerRoleCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productstore.FieldRequireCustomerRole,
		})
	}
	if value, ok := psuo.mutation.AutoInvoiceDigitalItems(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldAutoInvoiceDigitalItems,
		})
	}
	if psuo.mutation.AutoInvoiceDigitalItemsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productstore.FieldAutoInvoiceDigitalItems,
		})
	}
	if value, ok := psuo.mutation.ReqShipAddrForDigItems(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldReqShipAddrForDigItems,
		})
	}
	if psuo.mutation.ReqShipAddrForDigItemsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productstore.FieldReqShipAddrForDigItems,
		})
	}
	if value, ok := psuo.mutation.ShowCheckoutGiftOptions(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldShowCheckoutGiftOptions,
		})
	}
	if psuo.mutation.ShowCheckoutGiftOptionsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productstore.FieldShowCheckoutGiftOptions,
		})
	}
	if value, ok := psuo.mutation.SelectPaymentTypePerItem(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldSelectPaymentTypePerItem,
		})
	}
	if psuo.mutation.SelectPaymentTypePerItemCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productstore.FieldSelectPaymentTypePerItem,
		})
	}
	if value, ok := psuo.mutation.ShowPricesWithVatTax(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldShowPricesWithVatTax,
		})
	}
	if psuo.mutation.ShowPricesWithVatTaxCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productstore.FieldShowPricesWithVatTax,
		})
	}
	if value, ok := psuo.mutation.ShowTaxIsExempt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldShowTaxIsExempt,
		})
	}
	if psuo.mutation.ShowTaxIsExemptCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productstore.FieldShowTaxIsExempt,
		})
	}
	if value, ok := psuo.mutation.VatTaxAuthGeoID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productstore.FieldVatTaxAuthGeoID,
		})
	}
	if value, ok := psuo.mutation.AddedVatTaxAuthGeoID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productstore.FieldVatTaxAuthGeoID,
		})
	}
	if psuo.mutation.VatTaxAuthGeoIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: productstore.FieldVatTaxAuthGeoID,
		})
	}
	if value, ok := psuo.mutation.VatTaxAuthPartyID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productstore.FieldVatTaxAuthPartyID,
		})
	}
	if value, ok := psuo.mutation.AddedVatTaxAuthPartyID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productstore.FieldVatTaxAuthPartyID,
		})
	}
	if psuo.mutation.VatTaxAuthPartyIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: productstore.FieldVatTaxAuthPartyID,
		})
	}
	if value, ok := psuo.mutation.EnableAutoSuggestionList(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldEnableAutoSuggestionList,
		})
	}
	if psuo.mutation.EnableAutoSuggestionListCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productstore.FieldEnableAutoSuggestionList,
		})
	}
	if value, ok := psuo.mutation.EnableDigProdUpload(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldEnableDigProdUpload,
		})
	}
	if psuo.mutation.EnableDigProdUploadCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productstore.FieldEnableDigProdUpload,
		})
	}
	if value, ok := psuo.mutation.ProdSearchExcludeVariants(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldProdSearchExcludeVariants,
		})
	}
	if psuo.mutation.ProdSearchExcludeVariantsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productstore.FieldProdSearchExcludeVariants,
		})
	}
	if value, ok := psuo.mutation.DigProdUploadCategoryID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productstore.FieldDigProdUploadCategoryID,
		})
	}
	if value, ok := psuo.mutation.AddedDigProdUploadCategoryID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productstore.FieldDigProdUploadCategoryID,
		})
	}
	if psuo.mutation.DigProdUploadCategoryIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: productstore.FieldDigProdUploadCategoryID,
		})
	}
	if value, ok := psuo.mutation.AutoOrderCcTryExp(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldAutoOrderCcTryExp,
		})
	}
	if psuo.mutation.AutoOrderCcTryExpCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productstore.FieldAutoOrderCcTryExp,
		})
	}
	if value, ok := psuo.mutation.AutoOrderCcTryOtherCards(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldAutoOrderCcTryOtherCards,
		})
	}
	if psuo.mutation.AutoOrderCcTryOtherCardsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productstore.FieldAutoOrderCcTryOtherCards,
		})
	}
	if value, ok := psuo.mutation.AutoOrderCcTryLaterNsf(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldAutoOrderCcTryLaterNsf,
		})
	}
	if psuo.mutation.AutoOrderCcTryLaterNsfCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productstore.FieldAutoOrderCcTryLaterNsf,
		})
	}
	if value, ok := psuo.mutation.AutoOrderCcTryLaterMax(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productstore.FieldAutoOrderCcTryLaterMax,
		})
	}
	if value, ok := psuo.mutation.AddedAutoOrderCcTryLaterMax(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productstore.FieldAutoOrderCcTryLaterMax,
		})
	}
	if psuo.mutation.AutoOrderCcTryLaterMaxCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: productstore.FieldAutoOrderCcTryLaterMax,
		})
	}
	if value, ok := psuo.mutation.StoreCreditValidDays(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productstore.FieldStoreCreditValidDays,
		})
	}
	if value, ok := psuo.mutation.AddedStoreCreditValidDays(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productstore.FieldStoreCreditValidDays,
		})
	}
	if psuo.mutation.StoreCreditValidDaysCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: productstore.FieldStoreCreditValidDays,
		})
	}
	if value, ok := psuo.mutation.AutoApproveInvoice(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldAutoApproveInvoice,
		})
	}
	if psuo.mutation.AutoApproveInvoiceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productstore.FieldAutoApproveInvoice,
		})
	}
	if value, ok := psuo.mutation.AutoApproveOrder(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldAutoApproveOrder,
		})
	}
	if psuo.mutation.AutoApproveOrderCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productstore.FieldAutoApproveOrder,
		})
	}
	if value, ok := psuo.mutation.ShipIfCaptureFails(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldShipIfCaptureFails,
		})
	}
	if psuo.mutation.ShipIfCaptureFailsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productstore.FieldShipIfCaptureFails,
		})
	}
	if value, ok := psuo.mutation.SetOwnerUponIssuance(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldSetOwnerUponIssuance,
		})
	}
	if psuo.mutation.SetOwnerUponIssuanceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productstore.FieldSetOwnerUponIssuance,
		})
	}
	if value, ok := psuo.mutation.ReqReturnInventoryReceive(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldReqReturnInventoryReceive,
		})
	}
	if psuo.mutation.ReqReturnInventoryReceiveCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productstore.FieldReqReturnInventoryReceive,
		})
	}
	if value, ok := psuo.mutation.AddToCartRemoveIncompat(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldAddToCartRemoveIncompat,
		})
	}
	if psuo.mutation.AddToCartRemoveIncompatCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productstore.FieldAddToCartRemoveIncompat,
		})
	}
	if value, ok := psuo.mutation.AddToCartReplaceUpsell(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldAddToCartReplaceUpsell,
		})
	}
	if psuo.mutation.AddToCartReplaceUpsellCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productstore.FieldAddToCartReplaceUpsell,
		})
	}
	if value, ok := psuo.mutation.SplitPayPrefPerShpGrp(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldSplitPayPrefPerShpGrp,
		})
	}
	if psuo.mutation.SplitPayPrefPerShpGrpCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productstore.FieldSplitPayPrefPerShpGrp,
		})
	}
	if value, ok := psuo.mutation.ManagedByLot(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldManagedByLot,
		})
	}
	if psuo.mutation.ManagedByLotCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productstore.FieldManagedByLot,
		})
	}
	if value, ok := psuo.mutation.ShowOutOfStockProducts(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldShowOutOfStockProducts,
		})
	}
	if psuo.mutation.ShowOutOfStockProductsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productstore.FieldShowOutOfStockProducts,
		})
	}
	if value, ok := psuo.mutation.OrderDecimalQuantity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldOrderDecimalQuantity,
		})
	}
	if psuo.mutation.OrderDecimalQuantityCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productstore.FieldOrderDecimalQuantity,
		})
	}
	if value, ok := psuo.mutation.AllowComment(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldAllowComment,
		})
	}
	if psuo.mutation.AllowCommentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productstore.FieldAllowComment,
		})
	}
	if value, ok := psuo.mutation.AllocateInventory(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: productstore.FieldAllocateInventory,
		})
	}
	if psuo.mutation.AllocateInventoryCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: productstore.FieldAllocateInventory,
		})
	}
	if psuo.mutation.PrimaryProductStoreGroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productstore.PrimaryProductStoreGroupTable,
			Columns: []string{productstore.PrimaryProductStoreGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productstoregroup.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.PrimaryProductStoreGroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productstore.PrimaryProductStoreGroupTable,
			Columns: []string{productstore.PrimaryProductStoreGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productstoregroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psuo.mutation.ReserveOrderEnumerationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productstore.ReserveOrderEnumerationTable,
			Columns: []string{productstore.ReserveOrderEnumerationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: enumeration.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.ReserveOrderEnumerationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productstore.ReserveOrderEnumerationTable,
			Columns: []string{productstore.ReserveOrderEnumerationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: enumeration.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psuo.mutation.RequirementMethodEnumerationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productstore.RequirementMethodEnumerationTable,
			Columns: []string{productstore.RequirementMethodEnumerationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: enumeration.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.RequirementMethodEnumerationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productstore.RequirementMethodEnumerationTable,
			Columns: []string{productstore.RequirementMethodEnumerationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: enumeration.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psuo.mutation.DefaultSalesChannelEnumerationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productstore.DefaultSalesChannelEnumerationTable,
			Columns: []string{productstore.DefaultSalesChannelEnumerationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: enumeration.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.DefaultSalesChannelEnumerationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productstore.DefaultSalesChannelEnumerationTable,
			Columns: []string{productstore.DefaultSalesChannelEnumerationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: enumeration.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psuo.mutation.HeaderApprovedStatusItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productstore.HeaderApprovedStatusItemTable,
			Columns: []string{productstore.HeaderApprovedStatusItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusitem.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.HeaderApprovedStatusItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productstore.HeaderApprovedStatusItemTable,
			Columns: []string{productstore.HeaderApprovedStatusItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psuo.mutation.ItemApprovedStatusItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productstore.ItemApprovedStatusItemTable,
			Columns: []string{productstore.ItemApprovedStatusItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusitem.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.ItemApprovedStatusItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productstore.ItemApprovedStatusItemTable,
			Columns: []string{productstore.ItemApprovedStatusItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psuo.mutation.DigitalItemApprovedStatusItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productstore.DigitalItemApprovedStatusItemTable,
			Columns: []string{productstore.DigitalItemApprovedStatusItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusitem.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.DigitalItemApprovedStatusItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productstore.DigitalItemApprovedStatusItemTable,
			Columns: []string{productstore.DigitalItemApprovedStatusItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psuo.mutation.HeaderDeclinedStatusItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productstore.HeaderDeclinedStatusItemTable,
			Columns: []string{productstore.HeaderDeclinedStatusItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusitem.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.HeaderDeclinedStatusItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productstore.HeaderDeclinedStatusItemTable,
			Columns: []string{productstore.HeaderDeclinedStatusItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psuo.mutation.ItemDeclinedStatusItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productstore.ItemDeclinedStatusItemTable,
			Columns: []string{productstore.ItemDeclinedStatusItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusitem.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.ItemDeclinedStatusItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productstore.ItemDeclinedStatusItemTable,
			Columns: []string{productstore.ItemDeclinedStatusItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psuo.mutation.HeaderCancelStatusItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productstore.HeaderCancelStatusItemTable,
			Columns: []string{productstore.HeaderCancelStatusItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusitem.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.HeaderCancelStatusItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productstore.HeaderCancelStatusItemTable,
			Columns: []string{productstore.HeaderCancelStatusItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psuo.mutation.ItemCancelStatusItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productstore.ItemCancelStatusItemTable,
			Columns: []string{productstore.ItemCancelStatusItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusitem.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.ItemCancelStatusItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productstore.ItemCancelStatusItemTable,
			Columns: []string{productstore.ItemCancelStatusItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psuo.mutation.StoreCreditAccountEnumerationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productstore.StoreCreditAccountEnumerationTable,
			Columns: []string{productstore.StoreCreditAccountEnumerationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: enumeration.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.StoreCreditAccountEnumerationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productstore.StoreCreditAccountEnumerationTable,
			Columns: []string{productstore.StoreCreditAccountEnumerationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: enumeration.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psuo.mutation.OrderHeadersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productstore.OrderHeadersTable,
			Columns: []string{productstore.OrderHeadersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderheader.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.RemovedOrderHeadersIDs(); len(nodes) > 0 && !psuo.mutation.OrderHeadersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productstore.OrderHeadersTable,
			Columns: []string{productstore.OrderHeadersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderheader.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.OrderHeadersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productstore.OrderHeadersTable,
			Columns: []string{productstore.OrderHeadersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderheader.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psuo.mutation.ProductReviewsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productstore.ProductReviewsTable,
			Columns: []string{productstore.ProductReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productreview.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.RemovedProductReviewsIDs(); len(nodes) > 0 && !psuo.mutation.ProductReviewsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productstore.ProductReviewsTable,
			Columns: []string{productstore.ProductReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productreview.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.ProductReviewsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productstore.ProductReviewsTable,
			Columns: []string{productstore.ProductReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productreview.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProductStore{config: psuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, psuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productstore.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
