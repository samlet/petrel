// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productstoregroup"
)

// ProductStoreGroup is the model entity for the ProductStoreGroup schema.
type ProductStoreGroup struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// StringRef holds the value of the "string_ref" field.
	StringRef string `json:"string_ref,omitempty"`
	// ProductStoreGroupTypeID holds the value of the "product_store_group_type_id" field.
	ProductStoreGroupTypeID int `json:"product_store_group_type_id,omitempty"`
	// ProductStoreGroupName holds the value of the "product_store_group_name" field.
	ProductStoreGroupName string `json:"product_store_group_name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProductStoreGroupQuery when eager-loading is set.
	Edges                        ProductStoreGroupEdges `json:"edges"`
	product_store_group_children *int
}

// ProductStoreGroupEdges holds the relations/edges for other nodes in the graph.
type ProductStoreGroupEdges struct {
	// Parent holds the value of the parent edge.
	Parent *ProductStoreGroup `json:"parent,omitempty"`
	// Children holds the value of the children edge.
	Children []*ProductStoreGroup `json:"children,omitempty"`
	// ProductPrices holds the value of the product_prices edge.
	ProductPrices []*ProductPrice `json:"product_prices,omitempty"`
	// PrimaryProductStores holds the value of the primary_product_stores edge.
	PrimaryProductStores []*ProductStore `json:"primary_product_stores,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// ParentOrErr returns the Parent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProductStoreGroupEdges) ParentOrErr() (*ProductStoreGroup, error) {
	if e.loadedTypes[0] {
		if e.Parent == nil {
			// The edge parent was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: productstoregroup.Label}
		}
		return e.Parent, nil
	}
	return nil, &NotLoadedError{edge: "parent"}
}

// ChildrenOrErr returns the Children value or an error if the edge
// was not loaded in eager-loading.
func (e ProductStoreGroupEdges) ChildrenOrErr() ([]*ProductStoreGroup, error) {
	if e.loadedTypes[1] {
		return e.Children, nil
	}
	return nil, &NotLoadedError{edge: "children"}
}

// ProductPricesOrErr returns the ProductPrices value or an error if the edge
// was not loaded in eager-loading.
func (e ProductStoreGroupEdges) ProductPricesOrErr() ([]*ProductPrice, error) {
	if e.loadedTypes[2] {
		return e.ProductPrices, nil
	}
	return nil, &NotLoadedError{edge: "product_prices"}
}

// PrimaryProductStoresOrErr returns the PrimaryProductStores value or an error if the edge
// was not loaded in eager-loading.
func (e ProductStoreGroupEdges) PrimaryProductStoresOrErr() ([]*ProductStore, error) {
	if e.loadedTypes[3] {
		return e.PrimaryProductStores, nil
	}
	return nil, &NotLoadedError{edge: "primary_product_stores"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProductStoreGroup) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case productstoregroup.FieldID, productstoregroup.FieldProductStoreGroupTypeID:
			values[i] = new(sql.NullInt64)
		case productstoregroup.FieldStringRef, productstoregroup.FieldProductStoreGroupName, productstoregroup.FieldDescription:
			values[i] = new(sql.NullString)
		case productstoregroup.FieldCreateTime, productstoregroup.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case productstoregroup.ForeignKeys[0]: // product_store_group_children
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ProductStoreGroup", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProductStoreGroup fields.
func (psg *ProductStoreGroup) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case productstoregroup.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			psg.ID = int(value.Int64)
		case productstoregroup.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				psg.CreateTime = value.Time
			}
		case productstoregroup.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				psg.UpdateTime = value.Time
			}
		case productstoregroup.FieldStringRef:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field string_ref", values[i])
			} else if value.Valid {
				psg.StringRef = value.String
			}
		case productstoregroup.FieldProductStoreGroupTypeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field product_store_group_type_id", values[i])
			} else if value.Valid {
				psg.ProductStoreGroupTypeID = int(value.Int64)
			}
		case productstoregroup.FieldProductStoreGroupName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field product_store_group_name", values[i])
			} else if value.Valid {
				psg.ProductStoreGroupName = value.String
			}
		case productstoregroup.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				psg.Description = value.String
			}
		case productstoregroup.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field product_store_group_children", value)
			} else if value.Valid {
				psg.product_store_group_children = new(int)
				*psg.product_store_group_children = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryParent queries the "parent" edge of the ProductStoreGroup entity.
func (psg *ProductStoreGroup) QueryParent() *ProductStoreGroupQuery {
	return (&ProductStoreGroupClient{config: psg.config}).QueryParent(psg)
}

// QueryChildren queries the "children" edge of the ProductStoreGroup entity.
func (psg *ProductStoreGroup) QueryChildren() *ProductStoreGroupQuery {
	return (&ProductStoreGroupClient{config: psg.config}).QueryChildren(psg)
}

// QueryProductPrices queries the "product_prices" edge of the ProductStoreGroup entity.
func (psg *ProductStoreGroup) QueryProductPrices() *ProductPriceQuery {
	return (&ProductStoreGroupClient{config: psg.config}).QueryProductPrices(psg)
}

// QueryPrimaryProductStores queries the "primary_product_stores" edge of the ProductStoreGroup entity.
func (psg *ProductStoreGroup) QueryPrimaryProductStores() *ProductStoreQuery {
	return (&ProductStoreGroupClient{config: psg.config}).QueryPrimaryProductStores(psg)
}

// Update returns a builder for updating this ProductStoreGroup.
// Note that you need to call ProductStoreGroup.Unwrap() before calling this method if this ProductStoreGroup
// was returned from a transaction, and the transaction was committed or rolled back.
func (psg *ProductStoreGroup) Update() *ProductStoreGroupUpdateOne {
	return (&ProductStoreGroupClient{config: psg.config}).UpdateOne(psg)
}

// Unwrap unwraps the ProductStoreGroup entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (psg *ProductStoreGroup) Unwrap() *ProductStoreGroup {
	tx, ok := psg.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProductStoreGroup is not a transactional entity")
	}
	psg.config.driver = tx.drv
	return psg
}

// String implements the fmt.Stringer.
func (psg *ProductStoreGroup) String() string {
	var builder strings.Builder
	builder.WriteString("ProductStoreGroup(")
	builder.WriteString(fmt.Sprintf("id=%v", psg.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(psg.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(psg.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", string_ref=")
	builder.WriteString(psg.StringRef)
	builder.WriteString(", product_store_group_type_id=")
	builder.WriteString(fmt.Sprintf("%v", psg.ProductStoreGroupTypeID))
	builder.WriteString(", product_store_group_name=")
	builder.WriteString(psg.ProductStoreGroupName)
	builder.WriteString(", description=")
	builder.WriteString(psg.Description)
	builder.WriteByte(')')
	return builder.String()
}

// ProductStoreGroups is a parsable slice of ProductStoreGroup.
type ProductStoreGroups []*ProductStoreGroup

func (psg ProductStoreGroups) config(cfg config) {
	for _i := range psg {
		psg[_i].config = cfg
	}
}
