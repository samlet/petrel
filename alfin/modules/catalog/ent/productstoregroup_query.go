// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/predicate"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productprice"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productstore"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productstoregroup"
)

// ProductStoreGroupQuery is the builder for querying ProductStoreGroup entities.
type ProductStoreGroupQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.ProductStoreGroup
	// eager-loading edges.
	withParent               *ProductStoreGroupQuery
	withChildren             *ProductStoreGroupQuery
	withProductPrices        *ProductPriceQuery
	withPrimaryProductStores *ProductStoreQuery
	withFKs                  bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ProductStoreGroupQuery builder.
func (psgq *ProductStoreGroupQuery) Where(ps ...predicate.ProductStoreGroup) *ProductStoreGroupQuery {
	psgq.predicates = append(psgq.predicates, ps...)
	return psgq
}

// Limit adds a limit step to the query.
func (psgq *ProductStoreGroupQuery) Limit(limit int) *ProductStoreGroupQuery {
	psgq.limit = &limit
	return psgq
}

// Offset adds an offset step to the query.
func (psgq *ProductStoreGroupQuery) Offset(offset int) *ProductStoreGroupQuery {
	psgq.offset = &offset
	return psgq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (psgq *ProductStoreGroupQuery) Unique(unique bool) *ProductStoreGroupQuery {
	psgq.unique = &unique
	return psgq
}

// Order adds an order step to the query.
func (psgq *ProductStoreGroupQuery) Order(o ...OrderFunc) *ProductStoreGroupQuery {
	psgq.order = append(psgq.order, o...)
	return psgq
}

// QueryParent chains the current query on the "parent" edge.
func (psgq *ProductStoreGroupQuery) QueryParent() *ProductStoreGroupQuery {
	query := &ProductStoreGroupQuery{config: psgq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := psgq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := psgq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(productstoregroup.Table, productstoregroup.FieldID, selector),
			sqlgraph.To(productstoregroup.Table, productstoregroup.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, productstoregroup.ParentTable, productstoregroup.ParentColumn),
		)
		fromU = sqlgraph.SetNeighbors(psgq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryChildren chains the current query on the "children" edge.
func (psgq *ProductStoreGroupQuery) QueryChildren() *ProductStoreGroupQuery {
	query := &ProductStoreGroupQuery{config: psgq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := psgq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := psgq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(productstoregroup.Table, productstoregroup.FieldID, selector),
			sqlgraph.To(productstoregroup.Table, productstoregroup.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, productstoregroup.ChildrenTable, productstoregroup.ChildrenColumn),
		)
		fromU = sqlgraph.SetNeighbors(psgq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProductPrices chains the current query on the "product_prices" edge.
func (psgq *ProductStoreGroupQuery) QueryProductPrices() *ProductPriceQuery {
	query := &ProductPriceQuery{config: psgq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := psgq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := psgq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(productstoregroup.Table, productstoregroup.FieldID, selector),
			sqlgraph.To(productprice.Table, productprice.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, productstoregroup.ProductPricesTable, productstoregroup.ProductPricesColumn),
		)
		fromU = sqlgraph.SetNeighbors(psgq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPrimaryProductStores chains the current query on the "primary_product_stores" edge.
func (psgq *ProductStoreGroupQuery) QueryPrimaryProductStores() *ProductStoreQuery {
	query := &ProductStoreQuery{config: psgq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := psgq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := psgq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(productstoregroup.Table, productstoregroup.FieldID, selector),
			sqlgraph.To(productstore.Table, productstore.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, productstoregroup.PrimaryProductStoresTable, productstoregroup.PrimaryProductStoresColumn),
		)
		fromU = sqlgraph.SetNeighbors(psgq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ProductStoreGroup entity from the query.
// Returns a *NotFoundError when no ProductStoreGroup was found.
func (psgq *ProductStoreGroupQuery) First(ctx context.Context) (*ProductStoreGroup, error) {
	nodes, err := psgq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{productstoregroup.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (psgq *ProductStoreGroupQuery) FirstX(ctx context.Context) *ProductStoreGroup {
	node, err := psgq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ProductStoreGroup ID from the query.
// Returns a *NotFoundError when no ProductStoreGroup ID was found.
func (psgq *ProductStoreGroupQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = psgq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{productstoregroup.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (psgq *ProductStoreGroupQuery) FirstIDX(ctx context.Context) int {
	id, err := psgq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ProductStoreGroup entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one ProductStoreGroup entity is not found.
// Returns a *NotFoundError when no ProductStoreGroup entities are found.
func (psgq *ProductStoreGroupQuery) Only(ctx context.Context) (*ProductStoreGroup, error) {
	nodes, err := psgq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{productstoregroup.Label}
	default:
		return nil, &NotSingularError{productstoregroup.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (psgq *ProductStoreGroupQuery) OnlyX(ctx context.Context) *ProductStoreGroup {
	node, err := psgq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ProductStoreGroup ID in the query.
// Returns a *NotSingularError when exactly one ProductStoreGroup ID is not found.
// Returns a *NotFoundError when no entities are found.
func (psgq *ProductStoreGroupQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = psgq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{productstoregroup.Label}
	default:
		err = &NotSingularError{productstoregroup.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (psgq *ProductStoreGroupQuery) OnlyIDX(ctx context.Context) int {
	id, err := psgq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ProductStoreGroups.
func (psgq *ProductStoreGroupQuery) All(ctx context.Context) ([]*ProductStoreGroup, error) {
	if err := psgq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return psgq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (psgq *ProductStoreGroupQuery) AllX(ctx context.Context) []*ProductStoreGroup {
	nodes, err := psgq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ProductStoreGroup IDs.
func (psgq *ProductStoreGroupQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := psgq.Select(productstoregroup.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (psgq *ProductStoreGroupQuery) IDsX(ctx context.Context) []int {
	ids, err := psgq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (psgq *ProductStoreGroupQuery) Count(ctx context.Context) (int, error) {
	if err := psgq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return psgq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (psgq *ProductStoreGroupQuery) CountX(ctx context.Context) int {
	count, err := psgq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (psgq *ProductStoreGroupQuery) Exist(ctx context.Context) (bool, error) {
	if err := psgq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return psgq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (psgq *ProductStoreGroupQuery) ExistX(ctx context.Context) bool {
	exist, err := psgq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ProductStoreGroupQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (psgq *ProductStoreGroupQuery) Clone() *ProductStoreGroupQuery {
	if psgq == nil {
		return nil
	}
	return &ProductStoreGroupQuery{
		config:                   psgq.config,
		limit:                    psgq.limit,
		offset:                   psgq.offset,
		order:                    append([]OrderFunc{}, psgq.order...),
		predicates:               append([]predicate.ProductStoreGroup{}, psgq.predicates...),
		withParent:               psgq.withParent.Clone(),
		withChildren:             psgq.withChildren.Clone(),
		withProductPrices:        psgq.withProductPrices.Clone(),
		withPrimaryProductStores: psgq.withPrimaryProductStores.Clone(),
		// clone intermediate query.
		sql:  psgq.sql.Clone(),
		path: psgq.path,
	}
}

// WithParent tells the query-builder to eager-load the nodes that are connected to
// the "parent" edge. The optional arguments are used to configure the query builder of the edge.
func (psgq *ProductStoreGroupQuery) WithParent(opts ...func(*ProductStoreGroupQuery)) *ProductStoreGroupQuery {
	query := &ProductStoreGroupQuery{config: psgq.config}
	for _, opt := range opts {
		opt(query)
	}
	psgq.withParent = query
	return psgq
}

// WithChildren tells the query-builder to eager-load the nodes that are connected to
// the "children" edge. The optional arguments are used to configure the query builder of the edge.
func (psgq *ProductStoreGroupQuery) WithChildren(opts ...func(*ProductStoreGroupQuery)) *ProductStoreGroupQuery {
	query := &ProductStoreGroupQuery{config: psgq.config}
	for _, opt := range opts {
		opt(query)
	}
	psgq.withChildren = query
	return psgq
}

// WithProductPrices tells the query-builder to eager-load the nodes that are connected to
// the "product_prices" edge. The optional arguments are used to configure the query builder of the edge.
func (psgq *ProductStoreGroupQuery) WithProductPrices(opts ...func(*ProductPriceQuery)) *ProductStoreGroupQuery {
	query := &ProductPriceQuery{config: psgq.config}
	for _, opt := range opts {
		opt(query)
	}
	psgq.withProductPrices = query
	return psgq
}

// WithPrimaryProductStores tells the query-builder to eager-load the nodes that are connected to
// the "primary_product_stores" edge. The optional arguments are used to configure the query builder of the edge.
func (psgq *ProductStoreGroupQuery) WithPrimaryProductStores(opts ...func(*ProductStoreQuery)) *ProductStoreGroupQuery {
	query := &ProductStoreQuery{config: psgq.config}
	for _, opt := range opts {
		opt(query)
	}
	psgq.withPrimaryProductStores = query
	return psgq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ProductStoreGroup.Query().
//		GroupBy(productstoregroup.FieldCreateTime).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (psgq *ProductStoreGroupQuery) GroupBy(field string, fields ...string) *ProductStoreGroupGroupBy {
	group := &ProductStoreGroupGroupBy{config: psgq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := psgq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return psgq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//	}
//
//	client.ProductStoreGroup.Query().
//		Select(productstoregroup.FieldCreateTime).
//		Scan(ctx, &v)
//
func (psgq *ProductStoreGroupQuery) Select(field string, fields ...string) *ProductStoreGroupSelect {
	psgq.fields = append([]string{field}, fields...)
	return &ProductStoreGroupSelect{ProductStoreGroupQuery: psgq}
}

func (psgq *ProductStoreGroupQuery) prepareQuery(ctx context.Context) error {
	for _, f := range psgq.fields {
		if !productstoregroup.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if psgq.path != nil {
		prev, err := psgq.path(ctx)
		if err != nil {
			return err
		}
		psgq.sql = prev
	}
	return nil
}

func (psgq *ProductStoreGroupQuery) sqlAll(ctx context.Context) ([]*ProductStoreGroup, error) {
	var (
		nodes       = []*ProductStoreGroup{}
		withFKs     = psgq.withFKs
		_spec       = psgq.querySpec()
		loadedTypes = [4]bool{
			psgq.withParent != nil,
			psgq.withChildren != nil,
			psgq.withProductPrices != nil,
			psgq.withPrimaryProductStores != nil,
		}
	)
	if psgq.withParent != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, productstoregroup.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &ProductStoreGroup{config: psgq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, psgq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := psgq.withParent; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*ProductStoreGroup)
		for i := range nodes {
			if nodes[i].product_store_group_children == nil {
				continue
			}
			fk := *nodes[i].product_store_group_children
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(productstoregroup.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "product_store_group_children" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Parent = n
			}
		}
	}

	if query := psgq.withChildren; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*ProductStoreGroup)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.Children = []*ProductStoreGroup{}
		}
		query.withFKs = true
		query.Where(predicate.ProductStoreGroup(func(s *sql.Selector) {
			s.Where(sql.InValues(productstoregroup.ChildrenColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.product_store_group_children
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "product_store_group_children" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "product_store_group_children" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.Children = append(node.Edges.Children, n)
		}
	}

	if query := psgq.withProductPrices; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*ProductStoreGroup)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.ProductPrices = []*ProductPrice{}
		}
		query.withFKs = true
		query.Where(predicate.ProductPrice(func(s *sql.Selector) {
			s.Where(sql.InValues(productstoregroup.ProductPricesColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.product_store_group_product_prices
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "product_store_group_product_prices" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "product_store_group_product_prices" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.ProductPrices = append(node.Edges.ProductPrices, n)
		}
	}

	if query := psgq.withPrimaryProductStores; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*ProductStoreGroup)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.PrimaryProductStores = []*ProductStore{}
		}
		query.withFKs = true
		query.Where(predicate.ProductStore(func(s *sql.Selector) {
			s.Where(sql.InValues(productstoregroup.PrimaryProductStoresColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.product_store_group_primary_product_stores
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "product_store_group_primary_product_stores" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "product_store_group_primary_product_stores" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.PrimaryProductStores = append(node.Edges.PrimaryProductStores, n)
		}
	}

	return nodes, nil
}

func (psgq *ProductStoreGroupQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := psgq.querySpec()
	return sqlgraph.CountNodes(ctx, psgq.driver, _spec)
}

func (psgq *ProductStoreGroupQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := psgq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (psgq *ProductStoreGroupQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   productstoregroup.Table,
			Columns: productstoregroup.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: productstoregroup.FieldID,
			},
		},
		From:   psgq.sql,
		Unique: true,
	}
	if unique := psgq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := psgq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, productstoregroup.FieldID)
		for i := range fields {
			if fields[i] != productstoregroup.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := psgq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := psgq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := psgq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := psgq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (psgq *ProductStoreGroupQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(psgq.driver.Dialect())
	t1 := builder.Table(productstoregroup.Table)
	columns := psgq.fields
	if len(columns) == 0 {
		columns = productstoregroup.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if psgq.sql != nil {
		selector = psgq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	for _, p := range psgq.predicates {
		p(selector)
	}
	for _, p := range psgq.order {
		p(selector)
	}
	if offset := psgq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := psgq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ProductStoreGroupGroupBy is the group-by builder for ProductStoreGroup entities.
type ProductStoreGroupGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (psggb *ProductStoreGroupGroupBy) Aggregate(fns ...AggregateFunc) *ProductStoreGroupGroupBy {
	psggb.fns = append(psggb.fns, fns...)
	return psggb
}

// Scan applies the group-by query and scans the result into the given value.
func (psggb *ProductStoreGroupGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := psggb.path(ctx)
	if err != nil {
		return err
	}
	psggb.sql = query
	return psggb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (psggb *ProductStoreGroupGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := psggb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (psggb *ProductStoreGroupGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(psggb.fields) > 1 {
		return nil, errors.New("ent: ProductStoreGroupGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := psggb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (psggb *ProductStoreGroupGroupBy) StringsX(ctx context.Context) []string {
	v, err := psggb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (psggb *ProductStoreGroupGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = psggb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{productstoregroup.Label}
	default:
		err = fmt.Errorf("ent: ProductStoreGroupGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (psggb *ProductStoreGroupGroupBy) StringX(ctx context.Context) string {
	v, err := psggb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (psggb *ProductStoreGroupGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(psggb.fields) > 1 {
		return nil, errors.New("ent: ProductStoreGroupGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := psggb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (psggb *ProductStoreGroupGroupBy) IntsX(ctx context.Context) []int {
	v, err := psggb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (psggb *ProductStoreGroupGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = psggb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{productstoregroup.Label}
	default:
		err = fmt.Errorf("ent: ProductStoreGroupGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (psggb *ProductStoreGroupGroupBy) IntX(ctx context.Context) int {
	v, err := psggb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (psggb *ProductStoreGroupGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(psggb.fields) > 1 {
		return nil, errors.New("ent: ProductStoreGroupGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := psggb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (psggb *ProductStoreGroupGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := psggb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (psggb *ProductStoreGroupGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = psggb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{productstoregroup.Label}
	default:
		err = fmt.Errorf("ent: ProductStoreGroupGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (psggb *ProductStoreGroupGroupBy) Float64X(ctx context.Context) float64 {
	v, err := psggb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (psggb *ProductStoreGroupGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(psggb.fields) > 1 {
		return nil, errors.New("ent: ProductStoreGroupGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := psggb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (psggb *ProductStoreGroupGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := psggb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (psggb *ProductStoreGroupGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = psggb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{productstoregroup.Label}
	default:
		err = fmt.Errorf("ent: ProductStoreGroupGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (psggb *ProductStoreGroupGroupBy) BoolX(ctx context.Context) bool {
	v, err := psggb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (psggb *ProductStoreGroupGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range psggb.fields {
		if !productstoregroup.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := psggb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := psggb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (psggb *ProductStoreGroupGroupBy) sqlQuery() *sql.Selector {
	selector := psggb.sql.Select()
	aggregation := make([]string, 0, len(psggb.fns))
	for _, fn := range psggb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(psggb.fields)+len(psggb.fns))
		for _, f := range psggb.fields {
			columns = append(columns, selector.C(f))
		}
		for _, c := range aggregation {
			columns = append(columns, c)
		}
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(psggb.fields...)...)
}

// ProductStoreGroupSelect is the builder for selecting fields of ProductStoreGroup entities.
type ProductStoreGroupSelect struct {
	*ProductStoreGroupQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (psgs *ProductStoreGroupSelect) Scan(ctx context.Context, v interface{}) error {
	if err := psgs.prepareQuery(ctx); err != nil {
		return err
	}
	psgs.sql = psgs.ProductStoreGroupQuery.sqlQuery(ctx)
	return psgs.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (psgs *ProductStoreGroupSelect) ScanX(ctx context.Context, v interface{}) {
	if err := psgs.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (psgs *ProductStoreGroupSelect) Strings(ctx context.Context) ([]string, error) {
	if len(psgs.fields) > 1 {
		return nil, errors.New("ent: ProductStoreGroupSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := psgs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (psgs *ProductStoreGroupSelect) StringsX(ctx context.Context) []string {
	v, err := psgs.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (psgs *ProductStoreGroupSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = psgs.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{productstoregroup.Label}
	default:
		err = fmt.Errorf("ent: ProductStoreGroupSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (psgs *ProductStoreGroupSelect) StringX(ctx context.Context) string {
	v, err := psgs.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (psgs *ProductStoreGroupSelect) Ints(ctx context.Context) ([]int, error) {
	if len(psgs.fields) > 1 {
		return nil, errors.New("ent: ProductStoreGroupSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := psgs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (psgs *ProductStoreGroupSelect) IntsX(ctx context.Context) []int {
	v, err := psgs.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (psgs *ProductStoreGroupSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = psgs.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{productstoregroup.Label}
	default:
		err = fmt.Errorf("ent: ProductStoreGroupSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (psgs *ProductStoreGroupSelect) IntX(ctx context.Context) int {
	v, err := psgs.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (psgs *ProductStoreGroupSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(psgs.fields) > 1 {
		return nil, errors.New("ent: ProductStoreGroupSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := psgs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (psgs *ProductStoreGroupSelect) Float64sX(ctx context.Context) []float64 {
	v, err := psgs.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (psgs *ProductStoreGroupSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = psgs.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{productstoregroup.Label}
	default:
		err = fmt.Errorf("ent: ProductStoreGroupSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (psgs *ProductStoreGroupSelect) Float64X(ctx context.Context) float64 {
	v, err := psgs.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (psgs *ProductStoreGroupSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(psgs.fields) > 1 {
		return nil, errors.New("ent: ProductStoreGroupSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := psgs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (psgs *ProductStoreGroupSelect) BoolsX(ctx context.Context) []bool {
	v, err := psgs.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (psgs *ProductStoreGroupSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = psgs.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{productstoregroup.Label}
	default:
		err = fmt.Errorf("ent: ProductStoreGroupSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (psgs *ProductStoreGroupSelect) BoolX(ctx context.Context) bool {
	v, err := psgs.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (psgs *ProductStoreGroupSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := psgs.sql.Query()
	if err := psgs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
