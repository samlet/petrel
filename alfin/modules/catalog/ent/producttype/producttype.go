// Code generated by entc, DO NOT EDIT.

package producttype

import (
	"fmt"
	"time"
)

const (
	// Label holds the string label denoting the producttype type in the database.
	Label = "product_type"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldStringRef holds the string denoting the string_ref field in the database.
	FieldStringRef = "string_ref"
	// FieldIsPhysical holds the string denoting the is_physical field in the database.
	FieldIsPhysical = "is_physical"
	// FieldIsDigital holds the string denoting the is_digital field in the database.
	FieldIsDigital = "is_digital"
	// FieldHasTable holds the string denoting the has_table field in the database.
	FieldHasTable = "has_table"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// EdgeParent holds the string denoting the parent edge name in mutations.
	EdgeParent = "parent"
	// EdgeChildren holds the string denoting the children edge name in mutations.
	EdgeChildren = "children"
	// EdgeProducts holds the string denoting the products edge name in mutations.
	EdgeProducts = "products"
	// EdgeChildProductTypes holds the string denoting the child_product_types edge name in mutations.
	EdgeChildProductTypes = "child_product_types"
	// Table holds the table name of the producttype in the database.
	Table = "product_types"
	// ParentTable is the table the holds the parent relation/edge.
	ParentTable = "product_types"
	// ParentColumn is the table column denoting the parent relation/edge.
	ParentColumn = "product_type_children"
	// ChildrenTable is the table the holds the children relation/edge.
	ChildrenTable = "product_types"
	// ChildrenColumn is the table column denoting the children relation/edge.
	ChildrenColumn = "product_type_children"
	// ProductsTable is the table the holds the products relation/edge.
	ProductsTable = "products"
	// ProductsInverseTable is the table name for the Product entity.
	// It exists in this package in order to avoid circular dependency with the "product" package.
	ProductsInverseTable = "products"
	// ProductsColumn is the table column denoting the products relation/edge.
	ProductsColumn = "product_type_products"
	// ChildProductTypesTable is the table the holds the child_product_types relation/edge. The primary key declared below.
	ChildProductTypesTable = "product_type_child_product_types"
)

// Columns holds all SQL columns for producttype fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldStringRef,
	FieldIsPhysical,
	FieldIsDigital,
	FieldHasTable,
	FieldDescription,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "product_types"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"product_type_children",
}

var (
	// ChildProductTypesPrimaryKey and ChildProductTypesColumn2 are the table columns denoting the
	// primary key for the child_product_types relation (M2M).
	ChildProductTypesPrimaryKey = []string{"product_type_id", "child_product_type_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
)

// IsPhysical defines the type for the "is_physical" enum field.
type IsPhysical string

// IsPhysical values.
const (
	IsPhysicalYes     IsPhysical = "Yes"
	IsPhysicalNo      IsPhysical = "No"
	IsPhysicalUnknown IsPhysical = "Unknown"
)

func (ip IsPhysical) String() string {
	return string(ip)
}

// IsPhysicalValidator is a validator for the "is_physical" field enum values. It is called by the builders before save.
func IsPhysicalValidator(ip IsPhysical) error {
	switch ip {
	case IsPhysicalYes, IsPhysicalNo, IsPhysicalUnknown:
		return nil
	default:
		return fmt.Errorf("producttype: invalid enum value for is_physical field: %q", ip)
	}
}

// IsDigital defines the type for the "is_digital" enum field.
type IsDigital string

// IsDigital values.
const (
	IsDigitalYes     IsDigital = "Yes"
	IsDigitalNo      IsDigital = "No"
	IsDigitalUnknown IsDigital = "Unknown"
)

func (id IsDigital) String() string {
	return string(id)
}

// IsDigitalValidator is a validator for the "is_digital" field enum values. It is called by the builders before save.
func IsDigitalValidator(id IsDigital) error {
	switch id {
	case IsDigitalYes, IsDigitalNo, IsDigitalUnknown:
		return nil
	default:
		return fmt.Errorf("producttype: invalid enum value for is_digital field: %q", id)
	}
}

// HasTable defines the type for the "has_table" enum field.
type HasTable string

// HasTable values.
const (
	HasTableYes     HasTable = "Yes"
	HasTableNo      HasTable = "No"
	HasTableUnknown HasTable = "Unknown"
)

func (ht HasTable) String() string {
	return string(ht)
}

// HasTableValidator is a validator for the "has_table" field enum values. It is called by the builders before save.
func HasTableValidator(ht HasTable) error {
	switch ht {
	case HasTableYes, HasTableNo, HasTableUnknown:
		return nil
	default:
		return fmt.Errorf("producttype: invalid enum value for has_table field: %q", ht)
	}
}
