// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/predicate"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/product"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/producttype"
)

// ProductTypeUpdate is the builder for updating ProductType entities.
type ProductTypeUpdate struct {
	config
	hooks    []Hook
	mutation *ProductTypeMutation
}

// Where adds a new predicate for the ProductTypeUpdate builder.
func (ptu *ProductTypeUpdate) Where(ps ...predicate.ProductType) *ProductTypeUpdate {
	ptu.mutation.predicates = append(ptu.mutation.predicates, ps...)
	return ptu
}

// SetStringRef sets the "string_ref" field.
func (ptu *ProductTypeUpdate) SetStringRef(s string) *ProductTypeUpdate {
	ptu.mutation.SetStringRef(s)
	return ptu
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (ptu *ProductTypeUpdate) SetNillableStringRef(s *string) *ProductTypeUpdate {
	if s != nil {
		ptu.SetStringRef(*s)
	}
	return ptu
}

// ClearStringRef clears the value of the "string_ref" field.
func (ptu *ProductTypeUpdate) ClearStringRef() *ProductTypeUpdate {
	ptu.mutation.ClearStringRef()
	return ptu
}

// SetIsPhysical sets the "is_physical" field.
func (ptu *ProductTypeUpdate) SetIsPhysical(pp producttype.IsPhysical) *ProductTypeUpdate {
	ptu.mutation.SetIsPhysical(pp)
	return ptu
}

// SetNillableIsPhysical sets the "is_physical" field if the given value is not nil.
func (ptu *ProductTypeUpdate) SetNillableIsPhysical(pp *producttype.IsPhysical) *ProductTypeUpdate {
	if pp != nil {
		ptu.SetIsPhysical(*pp)
	}
	return ptu
}

// ClearIsPhysical clears the value of the "is_physical" field.
func (ptu *ProductTypeUpdate) ClearIsPhysical() *ProductTypeUpdate {
	ptu.mutation.ClearIsPhysical()
	return ptu
}

// SetIsDigital sets the "is_digital" field.
func (ptu *ProductTypeUpdate) SetIsDigital(pd producttype.IsDigital) *ProductTypeUpdate {
	ptu.mutation.SetIsDigital(pd)
	return ptu
}

// SetNillableIsDigital sets the "is_digital" field if the given value is not nil.
func (ptu *ProductTypeUpdate) SetNillableIsDigital(pd *producttype.IsDigital) *ProductTypeUpdate {
	if pd != nil {
		ptu.SetIsDigital(*pd)
	}
	return ptu
}

// ClearIsDigital clears the value of the "is_digital" field.
func (ptu *ProductTypeUpdate) ClearIsDigital() *ProductTypeUpdate {
	ptu.mutation.ClearIsDigital()
	return ptu
}

// SetHasTable sets the "has_table" field.
func (ptu *ProductTypeUpdate) SetHasTable(pt producttype.HasTable) *ProductTypeUpdate {
	ptu.mutation.SetHasTable(pt)
	return ptu
}

// SetNillableHasTable sets the "has_table" field if the given value is not nil.
func (ptu *ProductTypeUpdate) SetNillableHasTable(pt *producttype.HasTable) *ProductTypeUpdate {
	if pt != nil {
		ptu.SetHasTable(*pt)
	}
	return ptu
}

// ClearHasTable clears the value of the "has_table" field.
func (ptu *ProductTypeUpdate) ClearHasTable() *ProductTypeUpdate {
	ptu.mutation.ClearHasTable()
	return ptu
}

// SetDescription sets the "description" field.
func (ptu *ProductTypeUpdate) SetDescription(s string) *ProductTypeUpdate {
	ptu.mutation.SetDescription(s)
	return ptu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ptu *ProductTypeUpdate) SetNillableDescription(s *string) *ProductTypeUpdate {
	if s != nil {
		ptu.SetDescription(*s)
	}
	return ptu
}

// ClearDescription clears the value of the "description" field.
func (ptu *ProductTypeUpdate) ClearDescription() *ProductTypeUpdate {
	ptu.mutation.ClearDescription()
	return ptu
}

// SetParentID sets the "parent" edge to the ProductType entity by ID.
func (ptu *ProductTypeUpdate) SetParentID(id int) *ProductTypeUpdate {
	ptu.mutation.SetParentID(id)
	return ptu
}

// SetNillableParentID sets the "parent" edge to the ProductType entity by ID if the given value is not nil.
func (ptu *ProductTypeUpdate) SetNillableParentID(id *int) *ProductTypeUpdate {
	if id != nil {
		ptu = ptu.SetParentID(*id)
	}
	return ptu
}

// SetParent sets the "parent" edge to the ProductType entity.
func (ptu *ProductTypeUpdate) SetParent(p *ProductType) *ProductTypeUpdate {
	return ptu.SetParentID(p.ID)
}

// AddChildIDs adds the "children" edge to the ProductType entity by IDs.
func (ptu *ProductTypeUpdate) AddChildIDs(ids ...int) *ProductTypeUpdate {
	ptu.mutation.AddChildIDs(ids...)
	return ptu
}

// AddChildren adds the "children" edges to the ProductType entity.
func (ptu *ProductTypeUpdate) AddChildren(p ...*ProductType) *ProductTypeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ptu.AddChildIDs(ids...)
}

// AddProductIDs adds the "products" edge to the Product entity by IDs.
func (ptu *ProductTypeUpdate) AddProductIDs(ids ...int) *ProductTypeUpdate {
	ptu.mutation.AddProductIDs(ids...)
	return ptu
}

// AddProducts adds the "products" edges to the Product entity.
func (ptu *ProductTypeUpdate) AddProducts(p ...*Product) *ProductTypeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ptu.AddProductIDs(ids...)
}

// AddChildProductTypeIDs adds the "child_product_types" edge to the ProductType entity by IDs.
func (ptu *ProductTypeUpdate) AddChildProductTypeIDs(ids ...int) *ProductTypeUpdate {
	ptu.mutation.AddChildProductTypeIDs(ids...)
	return ptu
}

// AddChildProductTypes adds the "child_product_types" edges to the ProductType entity.
func (ptu *ProductTypeUpdate) AddChildProductTypes(p ...*ProductType) *ProductTypeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ptu.AddChildProductTypeIDs(ids...)
}

// Mutation returns the ProductTypeMutation object of the builder.
func (ptu *ProductTypeUpdate) Mutation() *ProductTypeMutation {
	return ptu.mutation
}

// ClearParent clears the "parent" edge to the ProductType entity.
func (ptu *ProductTypeUpdate) ClearParent() *ProductTypeUpdate {
	ptu.mutation.ClearParent()
	return ptu
}

// ClearChildren clears all "children" edges to the ProductType entity.
func (ptu *ProductTypeUpdate) ClearChildren() *ProductTypeUpdate {
	ptu.mutation.ClearChildren()
	return ptu
}

// RemoveChildIDs removes the "children" edge to ProductType entities by IDs.
func (ptu *ProductTypeUpdate) RemoveChildIDs(ids ...int) *ProductTypeUpdate {
	ptu.mutation.RemoveChildIDs(ids...)
	return ptu
}

// RemoveChildren removes "children" edges to ProductType entities.
func (ptu *ProductTypeUpdate) RemoveChildren(p ...*ProductType) *ProductTypeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ptu.RemoveChildIDs(ids...)
}

// ClearProducts clears all "products" edges to the Product entity.
func (ptu *ProductTypeUpdate) ClearProducts() *ProductTypeUpdate {
	ptu.mutation.ClearProducts()
	return ptu
}

// RemoveProductIDs removes the "products" edge to Product entities by IDs.
func (ptu *ProductTypeUpdate) RemoveProductIDs(ids ...int) *ProductTypeUpdate {
	ptu.mutation.RemoveProductIDs(ids...)
	return ptu
}

// RemoveProducts removes "products" edges to Product entities.
func (ptu *ProductTypeUpdate) RemoveProducts(p ...*Product) *ProductTypeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ptu.RemoveProductIDs(ids...)
}

// ClearChildProductTypes clears all "child_product_types" edges to the ProductType entity.
func (ptu *ProductTypeUpdate) ClearChildProductTypes() *ProductTypeUpdate {
	ptu.mutation.ClearChildProductTypes()
	return ptu
}

// RemoveChildProductTypeIDs removes the "child_product_types" edge to ProductType entities by IDs.
func (ptu *ProductTypeUpdate) RemoveChildProductTypeIDs(ids ...int) *ProductTypeUpdate {
	ptu.mutation.RemoveChildProductTypeIDs(ids...)
	return ptu
}

// RemoveChildProductTypes removes "child_product_types" edges to ProductType entities.
func (ptu *ProductTypeUpdate) RemoveChildProductTypes(p ...*ProductType) *ProductTypeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ptu.RemoveChildProductTypeIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ptu *ProductTypeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	ptu.defaults()
	if len(ptu.hooks) == 0 {
		if err = ptu.check(); err != nil {
			return 0, err
		}
		affected, err = ptu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProductTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ptu.check(); err != nil {
				return 0, err
			}
			ptu.mutation = mutation
			affected, err = ptu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ptu.hooks) - 1; i >= 0; i-- {
			mut = ptu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ptu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ptu *ProductTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := ptu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ptu *ProductTypeUpdate) Exec(ctx context.Context) error {
	_, err := ptu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptu *ProductTypeUpdate) ExecX(ctx context.Context) {
	if err := ptu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ptu *ProductTypeUpdate) defaults() {
	if _, ok := ptu.mutation.UpdateTime(); !ok {
		v := producttype.UpdateDefaultUpdateTime()
		ptu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ptu *ProductTypeUpdate) check() error {
	if v, ok := ptu.mutation.IsPhysical(); ok {
		if err := producttype.IsPhysicalValidator(v); err != nil {
			return &ValidationError{Name: "is_physical", err: fmt.Errorf("ent: validator failed for field \"is_physical\": %w", err)}
		}
	}
	if v, ok := ptu.mutation.IsDigital(); ok {
		if err := producttype.IsDigitalValidator(v); err != nil {
			return &ValidationError{Name: "is_digital", err: fmt.Errorf("ent: validator failed for field \"is_digital\": %w", err)}
		}
	}
	if v, ok := ptu.mutation.HasTable(); ok {
		if err := producttype.HasTableValidator(v); err != nil {
			return &ValidationError{Name: "has_table", err: fmt.Errorf("ent: validator failed for field \"has_table\": %w", err)}
		}
	}
	return nil
}

func (ptu *ProductTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   producttype.Table,
			Columns: producttype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: producttype.FieldID,
			},
		},
	}
	if ps := ptu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ptu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: producttype.FieldUpdateTime,
		})
	}
	if value, ok := ptu.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: producttype.FieldStringRef,
		})
	}
	if ptu.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: producttype.FieldStringRef,
		})
	}
	if value, ok := ptu.mutation.IsPhysical(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: producttype.FieldIsPhysical,
		})
	}
	if ptu.mutation.IsPhysicalCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: producttype.FieldIsPhysical,
		})
	}
	if value, ok := ptu.mutation.IsDigital(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: producttype.FieldIsDigital,
		})
	}
	if ptu.mutation.IsDigitalCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: producttype.FieldIsDigital,
		})
	}
	if value, ok := ptu.mutation.HasTable(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: producttype.FieldHasTable,
		})
	}
	if ptu.mutation.HasTableCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: producttype.FieldHasTable,
		})
	}
	if value, ok := ptu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: producttype.FieldDescription,
		})
	}
	if ptu.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: producttype.FieldDescription,
		})
	}
	if ptu.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   producttype.ParentTable,
			Columns: []string{producttype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: producttype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptu.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   producttype.ParentTable,
			Columns: []string{producttype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: producttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ptu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   producttype.ChildrenTable,
			Columns: []string{producttype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: producttype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptu.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !ptu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   producttype.ChildrenTable,
			Columns: []string{producttype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: producttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptu.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   producttype.ChildrenTable,
			Columns: []string{producttype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: producttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ptu.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   producttype.ProductsTable,
			Columns: []string{producttype.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptu.mutation.RemovedProductsIDs(); len(nodes) > 0 && !ptu.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   producttype.ProductsTable,
			Columns: []string{producttype.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptu.mutation.ProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   producttype.ProductsTable,
			Columns: []string{producttype.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ptu.mutation.ChildProductTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   producttype.ChildProductTypesTable,
			Columns: producttype.ChildProductTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: producttype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptu.mutation.RemovedChildProductTypesIDs(); len(nodes) > 0 && !ptu.mutation.ChildProductTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   producttype.ChildProductTypesTable,
			Columns: producttype.ChildProductTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: producttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptu.mutation.ChildProductTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   producttype.ChildProductTypesTable,
			Columns: producttype.ChildProductTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: producttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ptu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{producttype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ProductTypeUpdateOne is the builder for updating a single ProductType entity.
type ProductTypeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProductTypeMutation
}

// SetStringRef sets the "string_ref" field.
func (ptuo *ProductTypeUpdateOne) SetStringRef(s string) *ProductTypeUpdateOne {
	ptuo.mutation.SetStringRef(s)
	return ptuo
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (ptuo *ProductTypeUpdateOne) SetNillableStringRef(s *string) *ProductTypeUpdateOne {
	if s != nil {
		ptuo.SetStringRef(*s)
	}
	return ptuo
}

// ClearStringRef clears the value of the "string_ref" field.
func (ptuo *ProductTypeUpdateOne) ClearStringRef() *ProductTypeUpdateOne {
	ptuo.mutation.ClearStringRef()
	return ptuo
}

// SetIsPhysical sets the "is_physical" field.
func (ptuo *ProductTypeUpdateOne) SetIsPhysical(pp producttype.IsPhysical) *ProductTypeUpdateOne {
	ptuo.mutation.SetIsPhysical(pp)
	return ptuo
}

// SetNillableIsPhysical sets the "is_physical" field if the given value is not nil.
func (ptuo *ProductTypeUpdateOne) SetNillableIsPhysical(pp *producttype.IsPhysical) *ProductTypeUpdateOne {
	if pp != nil {
		ptuo.SetIsPhysical(*pp)
	}
	return ptuo
}

// ClearIsPhysical clears the value of the "is_physical" field.
func (ptuo *ProductTypeUpdateOne) ClearIsPhysical() *ProductTypeUpdateOne {
	ptuo.mutation.ClearIsPhysical()
	return ptuo
}

// SetIsDigital sets the "is_digital" field.
func (ptuo *ProductTypeUpdateOne) SetIsDigital(pd producttype.IsDigital) *ProductTypeUpdateOne {
	ptuo.mutation.SetIsDigital(pd)
	return ptuo
}

// SetNillableIsDigital sets the "is_digital" field if the given value is not nil.
func (ptuo *ProductTypeUpdateOne) SetNillableIsDigital(pd *producttype.IsDigital) *ProductTypeUpdateOne {
	if pd != nil {
		ptuo.SetIsDigital(*pd)
	}
	return ptuo
}

// ClearIsDigital clears the value of the "is_digital" field.
func (ptuo *ProductTypeUpdateOne) ClearIsDigital() *ProductTypeUpdateOne {
	ptuo.mutation.ClearIsDigital()
	return ptuo
}

// SetHasTable sets the "has_table" field.
func (ptuo *ProductTypeUpdateOne) SetHasTable(pt producttype.HasTable) *ProductTypeUpdateOne {
	ptuo.mutation.SetHasTable(pt)
	return ptuo
}

// SetNillableHasTable sets the "has_table" field if the given value is not nil.
func (ptuo *ProductTypeUpdateOne) SetNillableHasTable(pt *producttype.HasTable) *ProductTypeUpdateOne {
	if pt != nil {
		ptuo.SetHasTable(*pt)
	}
	return ptuo
}

// ClearHasTable clears the value of the "has_table" field.
func (ptuo *ProductTypeUpdateOne) ClearHasTable() *ProductTypeUpdateOne {
	ptuo.mutation.ClearHasTable()
	return ptuo
}

// SetDescription sets the "description" field.
func (ptuo *ProductTypeUpdateOne) SetDescription(s string) *ProductTypeUpdateOne {
	ptuo.mutation.SetDescription(s)
	return ptuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ptuo *ProductTypeUpdateOne) SetNillableDescription(s *string) *ProductTypeUpdateOne {
	if s != nil {
		ptuo.SetDescription(*s)
	}
	return ptuo
}

// ClearDescription clears the value of the "description" field.
func (ptuo *ProductTypeUpdateOne) ClearDescription() *ProductTypeUpdateOne {
	ptuo.mutation.ClearDescription()
	return ptuo
}

// SetParentID sets the "parent" edge to the ProductType entity by ID.
func (ptuo *ProductTypeUpdateOne) SetParentID(id int) *ProductTypeUpdateOne {
	ptuo.mutation.SetParentID(id)
	return ptuo
}

// SetNillableParentID sets the "parent" edge to the ProductType entity by ID if the given value is not nil.
func (ptuo *ProductTypeUpdateOne) SetNillableParentID(id *int) *ProductTypeUpdateOne {
	if id != nil {
		ptuo = ptuo.SetParentID(*id)
	}
	return ptuo
}

// SetParent sets the "parent" edge to the ProductType entity.
func (ptuo *ProductTypeUpdateOne) SetParent(p *ProductType) *ProductTypeUpdateOne {
	return ptuo.SetParentID(p.ID)
}

// AddChildIDs adds the "children" edge to the ProductType entity by IDs.
func (ptuo *ProductTypeUpdateOne) AddChildIDs(ids ...int) *ProductTypeUpdateOne {
	ptuo.mutation.AddChildIDs(ids...)
	return ptuo
}

// AddChildren adds the "children" edges to the ProductType entity.
func (ptuo *ProductTypeUpdateOne) AddChildren(p ...*ProductType) *ProductTypeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ptuo.AddChildIDs(ids...)
}

// AddProductIDs adds the "products" edge to the Product entity by IDs.
func (ptuo *ProductTypeUpdateOne) AddProductIDs(ids ...int) *ProductTypeUpdateOne {
	ptuo.mutation.AddProductIDs(ids...)
	return ptuo
}

// AddProducts adds the "products" edges to the Product entity.
func (ptuo *ProductTypeUpdateOne) AddProducts(p ...*Product) *ProductTypeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ptuo.AddProductIDs(ids...)
}

// AddChildProductTypeIDs adds the "child_product_types" edge to the ProductType entity by IDs.
func (ptuo *ProductTypeUpdateOne) AddChildProductTypeIDs(ids ...int) *ProductTypeUpdateOne {
	ptuo.mutation.AddChildProductTypeIDs(ids...)
	return ptuo
}

// AddChildProductTypes adds the "child_product_types" edges to the ProductType entity.
func (ptuo *ProductTypeUpdateOne) AddChildProductTypes(p ...*ProductType) *ProductTypeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ptuo.AddChildProductTypeIDs(ids...)
}

// Mutation returns the ProductTypeMutation object of the builder.
func (ptuo *ProductTypeUpdateOne) Mutation() *ProductTypeMutation {
	return ptuo.mutation
}

// ClearParent clears the "parent" edge to the ProductType entity.
func (ptuo *ProductTypeUpdateOne) ClearParent() *ProductTypeUpdateOne {
	ptuo.mutation.ClearParent()
	return ptuo
}

// ClearChildren clears all "children" edges to the ProductType entity.
func (ptuo *ProductTypeUpdateOne) ClearChildren() *ProductTypeUpdateOne {
	ptuo.mutation.ClearChildren()
	return ptuo
}

// RemoveChildIDs removes the "children" edge to ProductType entities by IDs.
func (ptuo *ProductTypeUpdateOne) RemoveChildIDs(ids ...int) *ProductTypeUpdateOne {
	ptuo.mutation.RemoveChildIDs(ids...)
	return ptuo
}

// RemoveChildren removes "children" edges to ProductType entities.
func (ptuo *ProductTypeUpdateOne) RemoveChildren(p ...*ProductType) *ProductTypeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ptuo.RemoveChildIDs(ids...)
}

// ClearProducts clears all "products" edges to the Product entity.
func (ptuo *ProductTypeUpdateOne) ClearProducts() *ProductTypeUpdateOne {
	ptuo.mutation.ClearProducts()
	return ptuo
}

// RemoveProductIDs removes the "products" edge to Product entities by IDs.
func (ptuo *ProductTypeUpdateOne) RemoveProductIDs(ids ...int) *ProductTypeUpdateOne {
	ptuo.mutation.RemoveProductIDs(ids...)
	return ptuo
}

// RemoveProducts removes "products" edges to Product entities.
func (ptuo *ProductTypeUpdateOne) RemoveProducts(p ...*Product) *ProductTypeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ptuo.RemoveProductIDs(ids...)
}

// ClearChildProductTypes clears all "child_product_types" edges to the ProductType entity.
func (ptuo *ProductTypeUpdateOne) ClearChildProductTypes() *ProductTypeUpdateOne {
	ptuo.mutation.ClearChildProductTypes()
	return ptuo
}

// RemoveChildProductTypeIDs removes the "child_product_types" edge to ProductType entities by IDs.
func (ptuo *ProductTypeUpdateOne) RemoveChildProductTypeIDs(ids ...int) *ProductTypeUpdateOne {
	ptuo.mutation.RemoveChildProductTypeIDs(ids...)
	return ptuo
}

// RemoveChildProductTypes removes "child_product_types" edges to ProductType entities.
func (ptuo *ProductTypeUpdateOne) RemoveChildProductTypes(p ...*ProductType) *ProductTypeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ptuo.RemoveChildProductTypeIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ptuo *ProductTypeUpdateOne) Select(field string, fields ...string) *ProductTypeUpdateOne {
	ptuo.fields = append([]string{field}, fields...)
	return ptuo
}

// Save executes the query and returns the updated ProductType entity.
func (ptuo *ProductTypeUpdateOne) Save(ctx context.Context) (*ProductType, error) {
	var (
		err  error
		node *ProductType
	)
	ptuo.defaults()
	if len(ptuo.hooks) == 0 {
		if err = ptuo.check(); err != nil {
			return nil, err
		}
		node, err = ptuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProductTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ptuo.check(); err != nil {
				return nil, err
			}
			ptuo.mutation = mutation
			node, err = ptuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ptuo.hooks) - 1; i >= 0; i-- {
			mut = ptuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ptuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ptuo *ProductTypeUpdateOne) SaveX(ctx context.Context) *ProductType {
	node, err := ptuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ptuo *ProductTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := ptuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptuo *ProductTypeUpdateOne) ExecX(ctx context.Context) {
	if err := ptuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ptuo *ProductTypeUpdateOne) defaults() {
	if _, ok := ptuo.mutation.UpdateTime(); !ok {
		v := producttype.UpdateDefaultUpdateTime()
		ptuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ptuo *ProductTypeUpdateOne) check() error {
	if v, ok := ptuo.mutation.IsPhysical(); ok {
		if err := producttype.IsPhysicalValidator(v); err != nil {
			return &ValidationError{Name: "is_physical", err: fmt.Errorf("ent: validator failed for field \"is_physical\": %w", err)}
		}
	}
	if v, ok := ptuo.mutation.IsDigital(); ok {
		if err := producttype.IsDigitalValidator(v); err != nil {
			return &ValidationError{Name: "is_digital", err: fmt.Errorf("ent: validator failed for field \"is_digital\": %w", err)}
		}
	}
	if v, ok := ptuo.mutation.HasTable(); ok {
		if err := producttype.HasTableValidator(v); err != nil {
			return &ValidationError{Name: "has_table", err: fmt.Errorf("ent: validator failed for field \"has_table\": %w", err)}
		}
	}
	return nil
}

func (ptuo *ProductTypeUpdateOne) sqlSave(ctx context.Context) (_node *ProductType, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   producttype.Table,
			Columns: producttype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: producttype.FieldID,
			},
		},
	}
	id, ok := ptuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ProductType.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := ptuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, producttype.FieldID)
		for _, f := range fields {
			if !producttype.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != producttype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ptuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ptuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: producttype.FieldUpdateTime,
		})
	}
	if value, ok := ptuo.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: producttype.FieldStringRef,
		})
	}
	if ptuo.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: producttype.FieldStringRef,
		})
	}
	if value, ok := ptuo.mutation.IsPhysical(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: producttype.FieldIsPhysical,
		})
	}
	if ptuo.mutation.IsPhysicalCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: producttype.FieldIsPhysical,
		})
	}
	if value, ok := ptuo.mutation.IsDigital(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: producttype.FieldIsDigital,
		})
	}
	if ptuo.mutation.IsDigitalCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: producttype.FieldIsDigital,
		})
	}
	if value, ok := ptuo.mutation.HasTable(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: producttype.FieldHasTable,
		})
	}
	if ptuo.mutation.HasTableCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: producttype.FieldHasTable,
		})
	}
	if value, ok := ptuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: producttype.FieldDescription,
		})
	}
	if ptuo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: producttype.FieldDescription,
		})
	}
	if ptuo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   producttype.ParentTable,
			Columns: []string{producttype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: producttype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptuo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   producttype.ParentTable,
			Columns: []string{producttype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: producttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ptuo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   producttype.ChildrenTable,
			Columns: []string{producttype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: producttype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptuo.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !ptuo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   producttype.ChildrenTable,
			Columns: []string{producttype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: producttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptuo.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   producttype.ChildrenTable,
			Columns: []string{producttype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: producttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ptuo.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   producttype.ProductsTable,
			Columns: []string{producttype.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptuo.mutation.RemovedProductsIDs(); len(nodes) > 0 && !ptuo.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   producttype.ProductsTable,
			Columns: []string{producttype.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptuo.mutation.ProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   producttype.ProductsTable,
			Columns: []string{producttype.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ptuo.mutation.ChildProductTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   producttype.ChildProductTypesTable,
			Columns: producttype.ChildProductTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: producttype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptuo.mutation.RemovedChildProductTypesIDs(); len(nodes) > 0 && !ptuo.mutation.ChildProductTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   producttype.ChildProductTypesTable,
			Columns: producttype.ChildProductTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: producttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptuo.mutation.ChildProductTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   producttype.ChildProductTypesTable,
			Columns: producttype.ChildProductTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: producttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProductType{config: ptuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ptuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{producttype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
