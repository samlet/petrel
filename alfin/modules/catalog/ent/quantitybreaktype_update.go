// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/predicate"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/quantitybreaktype"
)

// QuantityBreakTypeUpdate is the builder for updating QuantityBreakType entities.
type QuantityBreakTypeUpdate struct {
	config
	hooks    []Hook
	mutation *QuantityBreakTypeMutation
}

// Where adds a new predicate for the QuantityBreakTypeUpdate builder.
func (qbtu *QuantityBreakTypeUpdate) Where(ps ...predicate.QuantityBreakType) *QuantityBreakTypeUpdate {
	qbtu.mutation.predicates = append(qbtu.mutation.predicates, ps...)
	return qbtu
}

// SetStringRef sets the "string_ref" field.
func (qbtu *QuantityBreakTypeUpdate) SetStringRef(s string) *QuantityBreakTypeUpdate {
	qbtu.mutation.SetStringRef(s)
	return qbtu
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (qbtu *QuantityBreakTypeUpdate) SetNillableStringRef(s *string) *QuantityBreakTypeUpdate {
	if s != nil {
		qbtu.SetStringRef(*s)
	}
	return qbtu
}

// ClearStringRef clears the value of the "string_ref" field.
func (qbtu *QuantityBreakTypeUpdate) ClearStringRef() *QuantityBreakTypeUpdate {
	qbtu.mutation.ClearStringRef()
	return qbtu
}

// SetDescription sets the "description" field.
func (qbtu *QuantityBreakTypeUpdate) SetDescription(s string) *QuantityBreakTypeUpdate {
	qbtu.mutation.SetDescription(s)
	return qbtu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (qbtu *QuantityBreakTypeUpdate) SetNillableDescription(s *string) *QuantityBreakTypeUpdate {
	if s != nil {
		qbtu.SetDescription(*s)
	}
	return qbtu
}

// ClearDescription clears the value of the "description" field.
func (qbtu *QuantityBreakTypeUpdate) ClearDescription() *QuantityBreakTypeUpdate {
	qbtu.mutation.ClearDescription()
	return qbtu
}

// Mutation returns the QuantityBreakTypeMutation object of the builder.
func (qbtu *QuantityBreakTypeUpdate) Mutation() *QuantityBreakTypeMutation {
	return qbtu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (qbtu *QuantityBreakTypeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	qbtu.defaults()
	if len(qbtu.hooks) == 0 {
		affected, err = qbtu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*QuantityBreakTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			qbtu.mutation = mutation
			affected, err = qbtu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(qbtu.hooks) - 1; i >= 0; i-- {
			mut = qbtu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, qbtu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (qbtu *QuantityBreakTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := qbtu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (qbtu *QuantityBreakTypeUpdate) Exec(ctx context.Context) error {
	_, err := qbtu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qbtu *QuantityBreakTypeUpdate) ExecX(ctx context.Context) {
	if err := qbtu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (qbtu *QuantityBreakTypeUpdate) defaults() {
	if _, ok := qbtu.mutation.UpdateTime(); !ok {
		v := quantitybreaktype.UpdateDefaultUpdateTime()
		qbtu.mutation.SetUpdateTime(v)
	}
}

func (qbtu *QuantityBreakTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   quantitybreaktype.Table,
			Columns: quantitybreaktype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: quantitybreaktype.FieldID,
			},
		},
	}
	if ps := qbtu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := qbtu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: quantitybreaktype.FieldUpdateTime,
		})
	}
	if value, ok := qbtu.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: quantitybreaktype.FieldStringRef,
		})
	}
	if qbtu.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: quantitybreaktype.FieldStringRef,
		})
	}
	if value, ok := qbtu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: quantitybreaktype.FieldDescription,
		})
	}
	if qbtu.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: quantitybreaktype.FieldDescription,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, qbtu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{quantitybreaktype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// QuantityBreakTypeUpdateOne is the builder for updating a single QuantityBreakType entity.
type QuantityBreakTypeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *QuantityBreakTypeMutation
}

// SetStringRef sets the "string_ref" field.
func (qbtuo *QuantityBreakTypeUpdateOne) SetStringRef(s string) *QuantityBreakTypeUpdateOne {
	qbtuo.mutation.SetStringRef(s)
	return qbtuo
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (qbtuo *QuantityBreakTypeUpdateOne) SetNillableStringRef(s *string) *QuantityBreakTypeUpdateOne {
	if s != nil {
		qbtuo.SetStringRef(*s)
	}
	return qbtuo
}

// ClearStringRef clears the value of the "string_ref" field.
func (qbtuo *QuantityBreakTypeUpdateOne) ClearStringRef() *QuantityBreakTypeUpdateOne {
	qbtuo.mutation.ClearStringRef()
	return qbtuo
}

// SetDescription sets the "description" field.
func (qbtuo *QuantityBreakTypeUpdateOne) SetDescription(s string) *QuantityBreakTypeUpdateOne {
	qbtuo.mutation.SetDescription(s)
	return qbtuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (qbtuo *QuantityBreakTypeUpdateOne) SetNillableDescription(s *string) *QuantityBreakTypeUpdateOne {
	if s != nil {
		qbtuo.SetDescription(*s)
	}
	return qbtuo
}

// ClearDescription clears the value of the "description" field.
func (qbtuo *QuantityBreakTypeUpdateOne) ClearDescription() *QuantityBreakTypeUpdateOne {
	qbtuo.mutation.ClearDescription()
	return qbtuo
}

// Mutation returns the QuantityBreakTypeMutation object of the builder.
func (qbtuo *QuantityBreakTypeUpdateOne) Mutation() *QuantityBreakTypeMutation {
	return qbtuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (qbtuo *QuantityBreakTypeUpdateOne) Select(field string, fields ...string) *QuantityBreakTypeUpdateOne {
	qbtuo.fields = append([]string{field}, fields...)
	return qbtuo
}

// Save executes the query and returns the updated QuantityBreakType entity.
func (qbtuo *QuantityBreakTypeUpdateOne) Save(ctx context.Context) (*QuantityBreakType, error) {
	var (
		err  error
		node *QuantityBreakType
	)
	qbtuo.defaults()
	if len(qbtuo.hooks) == 0 {
		node, err = qbtuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*QuantityBreakTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			qbtuo.mutation = mutation
			node, err = qbtuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(qbtuo.hooks) - 1; i >= 0; i-- {
			mut = qbtuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, qbtuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (qbtuo *QuantityBreakTypeUpdateOne) SaveX(ctx context.Context) *QuantityBreakType {
	node, err := qbtuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (qbtuo *QuantityBreakTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := qbtuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qbtuo *QuantityBreakTypeUpdateOne) ExecX(ctx context.Context) {
	if err := qbtuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (qbtuo *QuantityBreakTypeUpdateOne) defaults() {
	if _, ok := qbtuo.mutation.UpdateTime(); !ok {
		v := quantitybreaktype.UpdateDefaultUpdateTime()
		qbtuo.mutation.SetUpdateTime(v)
	}
}

func (qbtuo *QuantityBreakTypeUpdateOne) sqlSave(ctx context.Context) (_node *QuantityBreakType, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   quantitybreaktype.Table,
			Columns: quantitybreaktype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: quantitybreaktype.FieldID,
			},
		},
	}
	id, ok := qbtuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing QuantityBreakType.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := qbtuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, quantitybreaktype.FieldID)
		for _, f := range fields {
			if !quantitybreaktype.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != quantitybreaktype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := qbtuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := qbtuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: quantitybreaktype.FieldUpdateTime,
		})
	}
	if value, ok := qbtuo.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: quantitybreaktype.FieldStringRef,
		})
	}
	if qbtuo.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: quantitybreaktype.FieldStringRef,
		})
	}
	if value, ok := qbtuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: quantitybreaktype.FieldDescription,
		})
	}
	if qbtuo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: quantitybreaktype.FieldDescription,
		})
	}
	_node = &QuantityBreakType{config: qbtuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, qbtuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{quantitybreaktype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
