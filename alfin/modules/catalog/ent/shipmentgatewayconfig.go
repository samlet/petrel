// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/shipmentgatewayconfig"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/shipmentgatewayconfigtype"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/shipmentgatewaydhl"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/shipmentgatewayfedex"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/shipmentgatewayups"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/shipmentgatewayusps"
)

// ShipmentGatewayConfig is the model entity for the ShipmentGatewayConfig schema.
type ShipmentGatewayConfig struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// StringRef holds the value of the "string_ref" field.
	StringRef string `json:"string_ref,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ShipmentGatewayConfigQuery when eager-loading is set.
	Edges                                                 ShipmentGatewayConfigEdges `json:"edges"`
	shipment_gateway_config_type_shipment_gateway_configs *int
}

// ShipmentGatewayConfigEdges holds the relations/edges for other nodes in the graph.
type ShipmentGatewayConfigEdges struct {
	// ShipmentGatewayConfigType holds the value of the shipment_gateway_config_type edge.
	ShipmentGatewayConfigType *ShipmentGatewayConfigType `json:"shipment_gateway_config_type,omitempty"`
	// ShipmentGatewayDhl holds the value of the shipment_gateway_dhl edge.
	ShipmentGatewayDhl *ShipmentGatewayDhl `json:"shipment_gateway_dhl,omitempty"`
	// ShipmentGatewayFedex holds the value of the shipment_gateway_fedex edge.
	ShipmentGatewayFedex *ShipmentGatewayFedex `json:"shipment_gateway_fedex,omitempty"`
	// ShipmentGatewayUps holds the value of the shipment_gateway_ups edge.
	ShipmentGatewayUps *ShipmentGatewayUps `json:"shipment_gateway_ups,omitempty"`
	// ShipmentGatewayUsps holds the value of the shipment_gateway_usps edge.
	ShipmentGatewayUsps *ShipmentGatewayUsps `json:"shipment_gateway_usps,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// ShipmentGatewayConfigTypeOrErr returns the ShipmentGatewayConfigType value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ShipmentGatewayConfigEdges) ShipmentGatewayConfigTypeOrErr() (*ShipmentGatewayConfigType, error) {
	if e.loadedTypes[0] {
		if e.ShipmentGatewayConfigType == nil {
			// The edge shipment_gateway_config_type was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: shipmentgatewayconfigtype.Label}
		}
		return e.ShipmentGatewayConfigType, nil
	}
	return nil, &NotLoadedError{edge: "shipment_gateway_config_type"}
}

// ShipmentGatewayDhlOrErr returns the ShipmentGatewayDhl value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ShipmentGatewayConfigEdges) ShipmentGatewayDhlOrErr() (*ShipmentGatewayDhl, error) {
	if e.loadedTypes[1] {
		if e.ShipmentGatewayDhl == nil {
			// The edge shipment_gateway_dhl was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: shipmentgatewaydhl.Label}
		}
		return e.ShipmentGatewayDhl, nil
	}
	return nil, &NotLoadedError{edge: "shipment_gateway_dhl"}
}

// ShipmentGatewayFedexOrErr returns the ShipmentGatewayFedex value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ShipmentGatewayConfigEdges) ShipmentGatewayFedexOrErr() (*ShipmentGatewayFedex, error) {
	if e.loadedTypes[2] {
		if e.ShipmentGatewayFedex == nil {
			// The edge shipment_gateway_fedex was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: shipmentgatewayfedex.Label}
		}
		return e.ShipmentGatewayFedex, nil
	}
	return nil, &NotLoadedError{edge: "shipment_gateway_fedex"}
}

// ShipmentGatewayUpsOrErr returns the ShipmentGatewayUps value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ShipmentGatewayConfigEdges) ShipmentGatewayUpsOrErr() (*ShipmentGatewayUps, error) {
	if e.loadedTypes[3] {
		if e.ShipmentGatewayUps == nil {
			// The edge shipment_gateway_ups was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: shipmentgatewayups.Label}
		}
		return e.ShipmentGatewayUps, nil
	}
	return nil, &NotLoadedError{edge: "shipment_gateway_ups"}
}

// ShipmentGatewayUspsOrErr returns the ShipmentGatewayUsps value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ShipmentGatewayConfigEdges) ShipmentGatewayUspsOrErr() (*ShipmentGatewayUsps, error) {
	if e.loadedTypes[4] {
		if e.ShipmentGatewayUsps == nil {
			// The edge shipment_gateway_usps was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: shipmentgatewayusps.Label}
		}
		return e.ShipmentGatewayUsps, nil
	}
	return nil, &NotLoadedError{edge: "shipment_gateway_usps"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ShipmentGatewayConfig) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case shipmentgatewayconfig.FieldID:
			values[i] = new(sql.NullInt64)
		case shipmentgatewayconfig.FieldStringRef, shipmentgatewayconfig.FieldDescription:
			values[i] = new(sql.NullString)
		case shipmentgatewayconfig.FieldCreateTime, shipmentgatewayconfig.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case shipmentgatewayconfig.ForeignKeys[0]: // shipment_gateway_config_type_shipment_gateway_configs
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ShipmentGatewayConfig", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ShipmentGatewayConfig fields.
func (sgc *ShipmentGatewayConfig) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case shipmentgatewayconfig.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sgc.ID = int(value.Int64)
		case shipmentgatewayconfig.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				sgc.CreateTime = value.Time
			}
		case shipmentgatewayconfig.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				sgc.UpdateTime = value.Time
			}
		case shipmentgatewayconfig.FieldStringRef:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field string_ref", values[i])
			} else if value.Valid {
				sgc.StringRef = value.String
			}
		case shipmentgatewayconfig.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				sgc.Description = value.String
			}
		case shipmentgatewayconfig.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field shipment_gateway_config_type_shipment_gateway_configs", value)
			} else if value.Valid {
				sgc.shipment_gateway_config_type_shipment_gateway_configs = new(int)
				*sgc.shipment_gateway_config_type_shipment_gateway_configs = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryShipmentGatewayConfigType queries the "shipment_gateway_config_type" edge of the ShipmentGatewayConfig entity.
func (sgc *ShipmentGatewayConfig) QueryShipmentGatewayConfigType() *ShipmentGatewayConfigTypeQuery {
	return (&ShipmentGatewayConfigClient{config: sgc.config}).QueryShipmentGatewayConfigType(sgc)
}

// QueryShipmentGatewayDhl queries the "shipment_gateway_dhl" edge of the ShipmentGatewayConfig entity.
func (sgc *ShipmentGatewayConfig) QueryShipmentGatewayDhl() *ShipmentGatewayDhlQuery {
	return (&ShipmentGatewayConfigClient{config: sgc.config}).QueryShipmentGatewayDhl(sgc)
}

// QueryShipmentGatewayFedex queries the "shipment_gateway_fedex" edge of the ShipmentGatewayConfig entity.
func (sgc *ShipmentGatewayConfig) QueryShipmentGatewayFedex() *ShipmentGatewayFedexQuery {
	return (&ShipmentGatewayConfigClient{config: sgc.config}).QueryShipmentGatewayFedex(sgc)
}

// QueryShipmentGatewayUps queries the "shipment_gateway_ups" edge of the ShipmentGatewayConfig entity.
func (sgc *ShipmentGatewayConfig) QueryShipmentGatewayUps() *ShipmentGatewayUpsQuery {
	return (&ShipmentGatewayConfigClient{config: sgc.config}).QueryShipmentGatewayUps(sgc)
}

// QueryShipmentGatewayUsps queries the "shipment_gateway_usps" edge of the ShipmentGatewayConfig entity.
func (sgc *ShipmentGatewayConfig) QueryShipmentGatewayUsps() *ShipmentGatewayUspsQuery {
	return (&ShipmentGatewayConfigClient{config: sgc.config}).QueryShipmentGatewayUsps(sgc)
}

// Update returns a builder for updating this ShipmentGatewayConfig.
// Note that you need to call ShipmentGatewayConfig.Unwrap() before calling this method if this ShipmentGatewayConfig
// was returned from a transaction, and the transaction was committed or rolled back.
func (sgc *ShipmentGatewayConfig) Update() *ShipmentGatewayConfigUpdateOne {
	return (&ShipmentGatewayConfigClient{config: sgc.config}).UpdateOne(sgc)
}

// Unwrap unwraps the ShipmentGatewayConfig entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sgc *ShipmentGatewayConfig) Unwrap() *ShipmentGatewayConfig {
	tx, ok := sgc.config.driver.(*txDriver)
	if !ok {
		panic("ent: ShipmentGatewayConfig is not a transactional entity")
	}
	sgc.config.driver = tx.drv
	return sgc
}

// String implements the fmt.Stringer.
func (sgc *ShipmentGatewayConfig) String() string {
	var builder strings.Builder
	builder.WriteString("ShipmentGatewayConfig(")
	builder.WriteString(fmt.Sprintf("id=%v", sgc.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(sgc.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(sgc.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", string_ref=")
	builder.WriteString(sgc.StringRef)
	builder.WriteString(", description=")
	builder.WriteString(sgc.Description)
	builder.WriteByte(')')
	return builder.String()
}

// ShipmentGatewayConfigs is a parsable slice of ShipmentGatewayConfig.
type ShipmentGatewayConfigs []*ShipmentGatewayConfig

func (sgc ShipmentGatewayConfigs) config(cfg config) {
	for _i := range sgc {
		sgc[_i].config = cfg
	}
}
