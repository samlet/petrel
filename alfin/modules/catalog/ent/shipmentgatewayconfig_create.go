// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/shipmentgatewayconfig"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/shipmentgatewayconfigtype"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/shipmentgatewaydhl"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/shipmentgatewayfedex"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/shipmentgatewayups"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/shipmentgatewayusps"
)

// ShipmentGatewayConfigCreate is the builder for creating a ShipmentGatewayConfig entity.
type ShipmentGatewayConfigCreate struct {
	config
	mutation *ShipmentGatewayConfigMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (sgcc *ShipmentGatewayConfigCreate) SetCreateTime(t time.Time) *ShipmentGatewayConfigCreate {
	sgcc.mutation.SetCreateTime(t)
	return sgcc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (sgcc *ShipmentGatewayConfigCreate) SetNillableCreateTime(t *time.Time) *ShipmentGatewayConfigCreate {
	if t != nil {
		sgcc.SetCreateTime(*t)
	}
	return sgcc
}

// SetUpdateTime sets the "update_time" field.
func (sgcc *ShipmentGatewayConfigCreate) SetUpdateTime(t time.Time) *ShipmentGatewayConfigCreate {
	sgcc.mutation.SetUpdateTime(t)
	return sgcc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (sgcc *ShipmentGatewayConfigCreate) SetNillableUpdateTime(t *time.Time) *ShipmentGatewayConfigCreate {
	if t != nil {
		sgcc.SetUpdateTime(*t)
	}
	return sgcc
}

// SetStringRef sets the "string_ref" field.
func (sgcc *ShipmentGatewayConfigCreate) SetStringRef(s string) *ShipmentGatewayConfigCreate {
	sgcc.mutation.SetStringRef(s)
	return sgcc
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (sgcc *ShipmentGatewayConfigCreate) SetNillableStringRef(s *string) *ShipmentGatewayConfigCreate {
	if s != nil {
		sgcc.SetStringRef(*s)
	}
	return sgcc
}

// SetDescription sets the "description" field.
func (sgcc *ShipmentGatewayConfigCreate) SetDescription(s string) *ShipmentGatewayConfigCreate {
	sgcc.mutation.SetDescription(s)
	return sgcc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (sgcc *ShipmentGatewayConfigCreate) SetNillableDescription(s *string) *ShipmentGatewayConfigCreate {
	if s != nil {
		sgcc.SetDescription(*s)
	}
	return sgcc
}

// SetShipmentGatewayConfigTypeID sets the "shipment_gateway_config_type" edge to the ShipmentGatewayConfigType entity by ID.
func (sgcc *ShipmentGatewayConfigCreate) SetShipmentGatewayConfigTypeID(id int) *ShipmentGatewayConfigCreate {
	sgcc.mutation.SetShipmentGatewayConfigTypeID(id)
	return sgcc
}

// SetNillableShipmentGatewayConfigTypeID sets the "shipment_gateway_config_type" edge to the ShipmentGatewayConfigType entity by ID if the given value is not nil.
func (sgcc *ShipmentGatewayConfigCreate) SetNillableShipmentGatewayConfigTypeID(id *int) *ShipmentGatewayConfigCreate {
	if id != nil {
		sgcc = sgcc.SetShipmentGatewayConfigTypeID(*id)
	}
	return sgcc
}

// SetShipmentGatewayConfigType sets the "shipment_gateway_config_type" edge to the ShipmentGatewayConfigType entity.
func (sgcc *ShipmentGatewayConfigCreate) SetShipmentGatewayConfigType(s *ShipmentGatewayConfigType) *ShipmentGatewayConfigCreate {
	return sgcc.SetShipmentGatewayConfigTypeID(s.ID)
}

// SetShipmentGatewayDhlID sets the "shipment_gateway_dhl" edge to the ShipmentGatewayDhl entity by ID.
func (sgcc *ShipmentGatewayConfigCreate) SetShipmentGatewayDhlID(id int) *ShipmentGatewayConfigCreate {
	sgcc.mutation.SetShipmentGatewayDhlID(id)
	return sgcc
}

// SetNillableShipmentGatewayDhlID sets the "shipment_gateway_dhl" edge to the ShipmentGatewayDhl entity by ID if the given value is not nil.
func (sgcc *ShipmentGatewayConfigCreate) SetNillableShipmentGatewayDhlID(id *int) *ShipmentGatewayConfigCreate {
	if id != nil {
		sgcc = sgcc.SetShipmentGatewayDhlID(*id)
	}
	return sgcc
}

// SetShipmentGatewayDhl sets the "shipment_gateway_dhl" edge to the ShipmentGatewayDhl entity.
func (sgcc *ShipmentGatewayConfigCreate) SetShipmentGatewayDhl(s *ShipmentGatewayDhl) *ShipmentGatewayConfigCreate {
	return sgcc.SetShipmentGatewayDhlID(s.ID)
}

// SetShipmentGatewayFedexID sets the "shipment_gateway_fedex" edge to the ShipmentGatewayFedex entity by ID.
func (sgcc *ShipmentGatewayConfigCreate) SetShipmentGatewayFedexID(id int) *ShipmentGatewayConfigCreate {
	sgcc.mutation.SetShipmentGatewayFedexID(id)
	return sgcc
}

// SetNillableShipmentGatewayFedexID sets the "shipment_gateway_fedex" edge to the ShipmentGatewayFedex entity by ID if the given value is not nil.
func (sgcc *ShipmentGatewayConfigCreate) SetNillableShipmentGatewayFedexID(id *int) *ShipmentGatewayConfigCreate {
	if id != nil {
		sgcc = sgcc.SetShipmentGatewayFedexID(*id)
	}
	return sgcc
}

// SetShipmentGatewayFedex sets the "shipment_gateway_fedex" edge to the ShipmentGatewayFedex entity.
func (sgcc *ShipmentGatewayConfigCreate) SetShipmentGatewayFedex(s *ShipmentGatewayFedex) *ShipmentGatewayConfigCreate {
	return sgcc.SetShipmentGatewayFedexID(s.ID)
}

// SetShipmentGatewayUpsID sets the "shipment_gateway_ups" edge to the ShipmentGatewayUps entity by ID.
func (sgcc *ShipmentGatewayConfigCreate) SetShipmentGatewayUpsID(id int) *ShipmentGatewayConfigCreate {
	sgcc.mutation.SetShipmentGatewayUpsID(id)
	return sgcc
}

// SetNillableShipmentGatewayUpsID sets the "shipment_gateway_ups" edge to the ShipmentGatewayUps entity by ID if the given value is not nil.
func (sgcc *ShipmentGatewayConfigCreate) SetNillableShipmentGatewayUpsID(id *int) *ShipmentGatewayConfigCreate {
	if id != nil {
		sgcc = sgcc.SetShipmentGatewayUpsID(*id)
	}
	return sgcc
}

// SetShipmentGatewayUps sets the "shipment_gateway_ups" edge to the ShipmentGatewayUps entity.
func (sgcc *ShipmentGatewayConfigCreate) SetShipmentGatewayUps(s *ShipmentGatewayUps) *ShipmentGatewayConfigCreate {
	return sgcc.SetShipmentGatewayUpsID(s.ID)
}

// SetShipmentGatewayUspsID sets the "shipment_gateway_usps" edge to the ShipmentGatewayUsps entity by ID.
func (sgcc *ShipmentGatewayConfigCreate) SetShipmentGatewayUspsID(id int) *ShipmentGatewayConfigCreate {
	sgcc.mutation.SetShipmentGatewayUspsID(id)
	return sgcc
}

// SetNillableShipmentGatewayUspsID sets the "shipment_gateway_usps" edge to the ShipmentGatewayUsps entity by ID if the given value is not nil.
func (sgcc *ShipmentGatewayConfigCreate) SetNillableShipmentGatewayUspsID(id *int) *ShipmentGatewayConfigCreate {
	if id != nil {
		sgcc = sgcc.SetShipmentGatewayUspsID(*id)
	}
	return sgcc
}

// SetShipmentGatewayUsps sets the "shipment_gateway_usps" edge to the ShipmentGatewayUsps entity.
func (sgcc *ShipmentGatewayConfigCreate) SetShipmentGatewayUsps(s *ShipmentGatewayUsps) *ShipmentGatewayConfigCreate {
	return sgcc.SetShipmentGatewayUspsID(s.ID)
}

// Mutation returns the ShipmentGatewayConfigMutation object of the builder.
func (sgcc *ShipmentGatewayConfigCreate) Mutation() *ShipmentGatewayConfigMutation {
	return sgcc.mutation
}

// Save creates the ShipmentGatewayConfig in the database.
func (sgcc *ShipmentGatewayConfigCreate) Save(ctx context.Context) (*ShipmentGatewayConfig, error) {
	var (
		err  error
		node *ShipmentGatewayConfig
	)
	sgcc.defaults()
	if len(sgcc.hooks) == 0 {
		if err = sgcc.check(); err != nil {
			return nil, err
		}
		node, err = sgcc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ShipmentGatewayConfigMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sgcc.check(); err != nil {
				return nil, err
			}
			sgcc.mutation = mutation
			if node, err = sgcc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(sgcc.hooks) - 1; i >= 0; i-- {
			mut = sgcc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sgcc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sgcc *ShipmentGatewayConfigCreate) SaveX(ctx context.Context) *ShipmentGatewayConfig {
	v, err := sgcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (sgcc *ShipmentGatewayConfigCreate) defaults() {
	if _, ok := sgcc.mutation.CreateTime(); !ok {
		v := shipmentgatewayconfig.DefaultCreateTime()
		sgcc.mutation.SetCreateTime(v)
	}
	if _, ok := sgcc.mutation.UpdateTime(); !ok {
		v := shipmentgatewayconfig.DefaultUpdateTime()
		sgcc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sgcc *ShipmentGatewayConfigCreate) check() error {
	if _, ok := sgcc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New("ent: missing required field \"create_time\"")}
	}
	if _, ok := sgcc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New("ent: missing required field \"update_time\"")}
	}
	return nil
}

func (sgcc *ShipmentGatewayConfigCreate) sqlSave(ctx context.Context) (*ShipmentGatewayConfig, error) {
	_node, _spec := sgcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sgcc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (sgcc *ShipmentGatewayConfigCreate) createSpec() (*ShipmentGatewayConfig, *sqlgraph.CreateSpec) {
	var (
		_node = &ShipmentGatewayConfig{config: sgcc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: shipmentgatewayconfig.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: shipmentgatewayconfig.FieldID,
			},
		}
	)
	if value, ok := sgcc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: shipmentgatewayconfig.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := sgcc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: shipmentgatewayconfig.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := sgcc.mutation.StringRef(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewayconfig.FieldStringRef,
		})
		_node.StringRef = value
	}
	if value, ok := sgcc.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewayconfig.FieldDescription,
		})
		_node.Description = value
	}
	if nodes := sgcc.mutation.ShipmentGatewayConfigTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shipmentgatewayconfig.ShipmentGatewayConfigTypeTable,
			Columns: []string{shipmentgatewayconfig.ShipmentGatewayConfigTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipmentgatewayconfigtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.shipment_gateway_config_type_shipment_gateway_configs = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sgcc.mutation.ShipmentGatewayDhlIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   shipmentgatewayconfig.ShipmentGatewayDhlTable,
			Columns: []string{shipmentgatewayconfig.ShipmentGatewayDhlColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipmentgatewaydhl.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sgcc.mutation.ShipmentGatewayFedexIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   shipmentgatewayconfig.ShipmentGatewayFedexTable,
			Columns: []string{shipmentgatewayconfig.ShipmentGatewayFedexColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipmentgatewayfedex.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sgcc.mutation.ShipmentGatewayUpsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   shipmentgatewayconfig.ShipmentGatewayUpsTable,
			Columns: []string{shipmentgatewayconfig.ShipmentGatewayUpsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipmentgatewayups.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sgcc.mutation.ShipmentGatewayUspsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   shipmentgatewayconfig.ShipmentGatewayUspsTable,
			Columns: []string{shipmentgatewayconfig.ShipmentGatewayUspsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipmentgatewayusps.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ShipmentGatewayConfigCreateBulk is the builder for creating many ShipmentGatewayConfig entities in bulk.
type ShipmentGatewayConfigCreateBulk struct {
	config
	builders []*ShipmentGatewayConfigCreate
}

// Save creates the ShipmentGatewayConfig entities in the database.
func (sgccb *ShipmentGatewayConfigCreateBulk) Save(ctx context.Context) ([]*ShipmentGatewayConfig, error) {
	specs := make([]*sqlgraph.CreateSpec, len(sgccb.builders))
	nodes := make([]*ShipmentGatewayConfig, len(sgccb.builders))
	mutators := make([]Mutator, len(sgccb.builders))
	for i := range sgccb.builders {
		func(i int, root context.Context) {
			builder := sgccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ShipmentGatewayConfigMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sgccb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sgccb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sgccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sgccb *ShipmentGatewayConfigCreateBulk) SaveX(ctx context.Context) []*ShipmentGatewayConfig {
	v, err := sgccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
