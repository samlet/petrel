// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/predicate"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/shipmentgatewayconfig"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/shipmentgatewayconfigtype"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/shipmentgatewaydhl"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/shipmentgatewayfedex"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/shipmentgatewayups"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/shipmentgatewayusps"
)

// ShipmentGatewayConfigQuery is the builder for querying ShipmentGatewayConfig entities.
type ShipmentGatewayConfigQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.ShipmentGatewayConfig
	// eager-loading edges.
	withShipmentGatewayConfigType *ShipmentGatewayConfigTypeQuery
	withShipmentGatewayDhl        *ShipmentGatewayDhlQuery
	withShipmentGatewayFedex      *ShipmentGatewayFedexQuery
	withShipmentGatewayUps        *ShipmentGatewayUpsQuery
	withShipmentGatewayUsps       *ShipmentGatewayUspsQuery
	withFKs                       bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ShipmentGatewayConfigQuery builder.
func (sgcq *ShipmentGatewayConfigQuery) Where(ps ...predicate.ShipmentGatewayConfig) *ShipmentGatewayConfigQuery {
	sgcq.predicates = append(sgcq.predicates, ps...)
	return sgcq
}

// Limit adds a limit step to the query.
func (sgcq *ShipmentGatewayConfigQuery) Limit(limit int) *ShipmentGatewayConfigQuery {
	sgcq.limit = &limit
	return sgcq
}

// Offset adds an offset step to the query.
func (sgcq *ShipmentGatewayConfigQuery) Offset(offset int) *ShipmentGatewayConfigQuery {
	sgcq.offset = &offset
	return sgcq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (sgcq *ShipmentGatewayConfigQuery) Unique(unique bool) *ShipmentGatewayConfigQuery {
	sgcq.unique = &unique
	return sgcq
}

// Order adds an order step to the query.
func (sgcq *ShipmentGatewayConfigQuery) Order(o ...OrderFunc) *ShipmentGatewayConfigQuery {
	sgcq.order = append(sgcq.order, o...)
	return sgcq
}

// QueryShipmentGatewayConfigType chains the current query on the "shipment_gateway_config_type" edge.
func (sgcq *ShipmentGatewayConfigQuery) QueryShipmentGatewayConfigType() *ShipmentGatewayConfigTypeQuery {
	query := &ShipmentGatewayConfigTypeQuery{config: sgcq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sgcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sgcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(shipmentgatewayconfig.Table, shipmentgatewayconfig.FieldID, selector),
			sqlgraph.To(shipmentgatewayconfigtype.Table, shipmentgatewayconfigtype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, shipmentgatewayconfig.ShipmentGatewayConfigTypeTable, shipmentgatewayconfig.ShipmentGatewayConfigTypeColumn),
		)
		fromU = sqlgraph.SetNeighbors(sgcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryShipmentGatewayDhl chains the current query on the "shipment_gateway_dhl" edge.
func (sgcq *ShipmentGatewayConfigQuery) QueryShipmentGatewayDhl() *ShipmentGatewayDhlQuery {
	query := &ShipmentGatewayDhlQuery{config: sgcq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sgcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sgcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(shipmentgatewayconfig.Table, shipmentgatewayconfig.FieldID, selector),
			sqlgraph.To(shipmentgatewaydhl.Table, shipmentgatewaydhl.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, shipmentgatewayconfig.ShipmentGatewayDhlTable, shipmentgatewayconfig.ShipmentGatewayDhlColumn),
		)
		fromU = sqlgraph.SetNeighbors(sgcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryShipmentGatewayFedex chains the current query on the "shipment_gateway_fedex" edge.
func (sgcq *ShipmentGatewayConfigQuery) QueryShipmentGatewayFedex() *ShipmentGatewayFedexQuery {
	query := &ShipmentGatewayFedexQuery{config: sgcq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sgcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sgcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(shipmentgatewayconfig.Table, shipmentgatewayconfig.FieldID, selector),
			sqlgraph.To(shipmentgatewayfedex.Table, shipmentgatewayfedex.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, shipmentgatewayconfig.ShipmentGatewayFedexTable, shipmentgatewayconfig.ShipmentGatewayFedexColumn),
		)
		fromU = sqlgraph.SetNeighbors(sgcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryShipmentGatewayUps chains the current query on the "shipment_gateway_ups" edge.
func (sgcq *ShipmentGatewayConfigQuery) QueryShipmentGatewayUps() *ShipmentGatewayUpsQuery {
	query := &ShipmentGatewayUpsQuery{config: sgcq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sgcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sgcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(shipmentgatewayconfig.Table, shipmentgatewayconfig.FieldID, selector),
			sqlgraph.To(shipmentgatewayups.Table, shipmentgatewayups.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, shipmentgatewayconfig.ShipmentGatewayUpsTable, shipmentgatewayconfig.ShipmentGatewayUpsColumn),
		)
		fromU = sqlgraph.SetNeighbors(sgcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryShipmentGatewayUsps chains the current query on the "shipment_gateway_usps" edge.
func (sgcq *ShipmentGatewayConfigQuery) QueryShipmentGatewayUsps() *ShipmentGatewayUspsQuery {
	query := &ShipmentGatewayUspsQuery{config: sgcq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sgcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sgcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(shipmentgatewayconfig.Table, shipmentgatewayconfig.FieldID, selector),
			sqlgraph.To(shipmentgatewayusps.Table, shipmentgatewayusps.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, shipmentgatewayconfig.ShipmentGatewayUspsTable, shipmentgatewayconfig.ShipmentGatewayUspsColumn),
		)
		fromU = sqlgraph.SetNeighbors(sgcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ShipmentGatewayConfig entity from the query.
// Returns a *NotFoundError when no ShipmentGatewayConfig was found.
func (sgcq *ShipmentGatewayConfigQuery) First(ctx context.Context) (*ShipmentGatewayConfig, error) {
	nodes, err := sgcq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{shipmentgatewayconfig.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (sgcq *ShipmentGatewayConfigQuery) FirstX(ctx context.Context) *ShipmentGatewayConfig {
	node, err := sgcq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ShipmentGatewayConfig ID from the query.
// Returns a *NotFoundError when no ShipmentGatewayConfig ID was found.
func (sgcq *ShipmentGatewayConfigQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = sgcq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{shipmentgatewayconfig.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (sgcq *ShipmentGatewayConfigQuery) FirstIDX(ctx context.Context) int {
	id, err := sgcq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ShipmentGatewayConfig entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one ShipmentGatewayConfig entity is not found.
// Returns a *NotFoundError when no ShipmentGatewayConfig entities are found.
func (sgcq *ShipmentGatewayConfigQuery) Only(ctx context.Context) (*ShipmentGatewayConfig, error) {
	nodes, err := sgcq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{shipmentgatewayconfig.Label}
	default:
		return nil, &NotSingularError{shipmentgatewayconfig.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (sgcq *ShipmentGatewayConfigQuery) OnlyX(ctx context.Context) *ShipmentGatewayConfig {
	node, err := sgcq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ShipmentGatewayConfig ID in the query.
// Returns a *NotSingularError when exactly one ShipmentGatewayConfig ID is not found.
// Returns a *NotFoundError when no entities are found.
func (sgcq *ShipmentGatewayConfigQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = sgcq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{shipmentgatewayconfig.Label}
	default:
		err = &NotSingularError{shipmentgatewayconfig.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (sgcq *ShipmentGatewayConfigQuery) OnlyIDX(ctx context.Context) int {
	id, err := sgcq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ShipmentGatewayConfigs.
func (sgcq *ShipmentGatewayConfigQuery) All(ctx context.Context) ([]*ShipmentGatewayConfig, error) {
	if err := sgcq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return sgcq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (sgcq *ShipmentGatewayConfigQuery) AllX(ctx context.Context) []*ShipmentGatewayConfig {
	nodes, err := sgcq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ShipmentGatewayConfig IDs.
func (sgcq *ShipmentGatewayConfigQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := sgcq.Select(shipmentgatewayconfig.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (sgcq *ShipmentGatewayConfigQuery) IDsX(ctx context.Context) []int {
	ids, err := sgcq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (sgcq *ShipmentGatewayConfigQuery) Count(ctx context.Context) (int, error) {
	if err := sgcq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return sgcq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (sgcq *ShipmentGatewayConfigQuery) CountX(ctx context.Context) int {
	count, err := sgcq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (sgcq *ShipmentGatewayConfigQuery) Exist(ctx context.Context) (bool, error) {
	if err := sgcq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return sgcq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (sgcq *ShipmentGatewayConfigQuery) ExistX(ctx context.Context) bool {
	exist, err := sgcq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ShipmentGatewayConfigQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (sgcq *ShipmentGatewayConfigQuery) Clone() *ShipmentGatewayConfigQuery {
	if sgcq == nil {
		return nil
	}
	return &ShipmentGatewayConfigQuery{
		config:                        sgcq.config,
		limit:                         sgcq.limit,
		offset:                        sgcq.offset,
		order:                         append([]OrderFunc{}, sgcq.order...),
		predicates:                    append([]predicate.ShipmentGatewayConfig{}, sgcq.predicates...),
		withShipmentGatewayConfigType: sgcq.withShipmentGatewayConfigType.Clone(),
		withShipmentGatewayDhl:        sgcq.withShipmentGatewayDhl.Clone(),
		withShipmentGatewayFedex:      sgcq.withShipmentGatewayFedex.Clone(),
		withShipmentGatewayUps:        sgcq.withShipmentGatewayUps.Clone(),
		withShipmentGatewayUsps:       sgcq.withShipmentGatewayUsps.Clone(),
		// clone intermediate query.
		sql:  sgcq.sql.Clone(),
		path: sgcq.path,
	}
}

// WithShipmentGatewayConfigType tells the query-builder to eager-load the nodes that are connected to
// the "shipment_gateway_config_type" edge. The optional arguments are used to configure the query builder of the edge.
func (sgcq *ShipmentGatewayConfigQuery) WithShipmentGatewayConfigType(opts ...func(*ShipmentGatewayConfigTypeQuery)) *ShipmentGatewayConfigQuery {
	query := &ShipmentGatewayConfigTypeQuery{config: sgcq.config}
	for _, opt := range opts {
		opt(query)
	}
	sgcq.withShipmentGatewayConfigType = query
	return sgcq
}

// WithShipmentGatewayDhl tells the query-builder to eager-load the nodes that are connected to
// the "shipment_gateway_dhl" edge. The optional arguments are used to configure the query builder of the edge.
func (sgcq *ShipmentGatewayConfigQuery) WithShipmentGatewayDhl(opts ...func(*ShipmentGatewayDhlQuery)) *ShipmentGatewayConfigQuery {
	query := &ShipmentGatewayDhlQuery{config: sgcq.config}
	for _, opt := range opts {
		opt(query)
	}
	sgcq.withShipmentGatewayDhl = query
	return sgcq
}

// WithShipmentGatewayFedex tells the query-builder to eager-load the nodes that are connected to
// the "shipment_gateway_fedex" edge. The optional arguments are used to configure the query builder of the edge.
func (sgcq *ShipmentGatewayConfigQuery) WithShipmentGatewayFedex(opts ...func(*ShipmentGatewayFedexQuery)) *ShipmentGatewayConfigQuery {
	query := &ShipmentGatewayFedexQuery{config: sgcq.config}
	for _, opt := range opts {
		opt(query)
	}
	sgcq.withShipmentGatewayFedex = query
	return sgcq
}

// WithShipmentGatewayUps tells the query-builder to eager-load the nodes that are connected to
// the "shipment_gateway_ups" edge. The optional arguments are used to configure the query builder of the edge.
func (sgcq *ShipmentGatewayConfigQuery) WithShipmentGatewayUps(opts ...func(*ShipmentGatewayUpsQuery)) *ShipmentGatewayConfigQuery {
	query := &ShipmentGatewayUpsQuery{config: sgcq.config}
	for _, opt := range opts {
		opt(query)
	}
	sgcq.withShipmentGatewayUps = query
	return sgcq
}

// WithShipmentGatewayUsps tells the query-builder to eager-load the nodes that are connected to
// the "shipment_gateway_usps" edge. The optional arguments are used to configure the query builder of the edge.
func (sgcq *ShipmentGatewayConfigQuery) WithShipmentGatewayUsps(opts ...func(*ShipmentGatewayUspsQuery)) *ShipmentGatewayConfigQuery {
	query := &ShipmentGatewayUspsQuery{config: sgcq.config}
	for _, opt := range opts {
		opt(query)
	}
	sgcq.withShipmentGatewayUsps = query
	return sgcq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ShipmentGatewayConfig.Query().
//		GroupBy(shipmentgatewayconfig.FieldCreateTime).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (sgcq *ShipmentGatewayConfigQuery) GroupBy(field string, fields ...string) *ShipmentGatewayConfigGroupBy {
	group := &ShipmentGatewayConfigGroupBy{config: sgcq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := sgcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return sgcq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//	}
//
//	client.ShipmentGatewayConfig.Query().
//		Select(shipmentgatewayconfig.FieldCreateTime).
//		Scan(ctx, &v)
//
func (sgcq *ShipmentGatewayConfigQuery) Select(field string, fields ...string) *ShipmentGatewayConfigSelect {
	sgcq.fields = append([]string{field}, fields...)
	return &ShipmentGatewayConfigSelect{ShipmentGatewayConfigQuery: sgcq}
}

func (sgcq *ShipmentGatewayConfigQuery) prepareQuery(ctx context.Context) error {
	for _, f := range sgcq.fields {
		if !shipmentgatewayconfig.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if sgcq.path != nil {
		prev, err := sgcq.path(ctx)
		if err != nil {
			return err
		}
		sgcq.sql = prev
	}
	return nil
}

func (sgcq *ShipmentGatewayConfigQuery) sqlAll(ctx context.Context) ([]*ShipmentGatewayConfig, error) {
	var (
		nodes       = []*ShipmentGatewayConfig{}
		withFKs     = sgcq.withFKs
		_spec       = sgcq.querySpec()
		loadedTypes = [5]bool{
			sgcq.withShipmentGatewayConfigType != nil,
			sgcq.withShipmentGatewayDhl != nil,
			sgcq.withShipmentGatewayFedex != nil,
			sgcq.withShipmentGatewayUps != nil,
			sgcq.withShipmentGatewayUsps != nil,
		}
	)
	if sgcq.withShipmentGatewayConfigType != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, shipmentgatewayconfig.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &ShipmentGatewayConfig{config: sgcq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, sgcq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := sgcq.withShipmentGatewayConfigType; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*ShipmentGatewayConfig)
		for i := range nodes {
			if nodes[i].shipment_gateway_config_type_shipment_gateway_configs == nil {
				continue
			}
			fk := *nodes[i].shipment_gateway_config_type_shipment_gateway_configs
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(shipmentgatewayconfigtype.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "shipment_gateway_config_type_shipment_gateway_configs" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.ShipmentGatewayConfigType = n
			}
		}
	}

	if query := sgcq.withShipmentGatewayDhl; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*ShipmentGatewayConfig)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
		}
		query.withFKs = true
		query.Where(predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
			s.Where(sql.InValues(shipmentgatewayconfig.ShipmentGatewayDhlColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.shipment_gateway_config_shipment_gateway_dhl
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "shipment_gateway_config_shipment_gateway_dhl" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "shipment_gateway_config_shipment_gateway_dhl" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.ShipmentGatewayDhl = n
		}
	}

	if query := sgcq.withShipmentGatewayFedex; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*ShipmentGatewayConfig)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
		}
		query.withFKs = true
		query.Where(predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
			s.Where(sql.InValues(shipmentgatewayconfig.ShipmentGatewayFedexColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.shipment_gateway_config_shipment_gateway_fedex
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "shipment_gateway_config_shipment_gateway_fedex" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "shipment_gateway_config_shipment_gateway_fedex" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.ShipmentGatewayFedex = n
		}
	}

	if query := sgcq.withShipmentGatewayUps; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*ShipmentGatewayConfig)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
		}
		query.withFKs = true
		query.Where(predicate.ShipmentGatewayUps(func(s *sql.Selector) {
			s.Where(sql.InValues(shipmentgatewayconfig.ShipmentGatewayUpsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.shipment_gateway_config_shipment_gateway_ups
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "shipment_gateway_config_shipment_gateway_ups" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "shipment_gateway_config_shipment_gateway_ups" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.ShipmentGatewayUps = n
		}
	}

	if query := sgcq.withShipmentGatewayUsps; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*ShipmentGatewayConfig)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
		}
		query.withFKs = true
		query.Where(predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
			s.Where(sql.InValues(shipmentgatewayconfig.ShipmentGatewayUspsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.shipment_gateway_config_shipment_gateway_usps
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "shipment_gateway_config_shipment_gateway_usps" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "shipment_gateway_config_shipment_gateway_usps" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.ShipmentGatewayUsps = n
		}
	}

	return nodes, nil
}

func (sgcq *ShipmentGatewayConfigQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := sgcq.querySpec()
	return sqlgraph.CountNodes(ctx, sgcq.driver, _spec)
}

func (sgcq *ShipmentGatewayConfigQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := sgcq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (sgcq *ShipmentGatewayConfigQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   shipmentgatewayconfig.Table,
			Columns: shipmentgatewayconfig.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: shipmentgatewayconfig.FieldID,
			},
		},
		From:   sgcq.sql,
		Unique: true,
	}
	if unique := sgcq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := sgcq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, shipmentgatewayconfig.FieldID)
		for i := range fields {
			if fields[i] != shipmentgatewayconfig.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := sgcq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := sgcq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := sgcq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := sgcq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (sgcq *ShipmentGatewayConfigQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(sgcq.driver.Dialect())
	t1 := builder.Table(shipmentgatewayconfig.Table)
	columns := sgcq.fields
	if len(columns) == 0 {
		columns = shipmentgatewayconfig.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if sgcq.sql != nil {
		selector = sgcq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	for _, p := range sgcq.predicates {
		p(selector)
	}
	for _, p := range sgcq.order {
		p(selector)
	}
	if offset := sgcq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := sgcq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ShipmentGatewayConfigGroupBy is the group-by builder for ShipmentGatewayConfig entities.
type ShipmentGatewayConfigGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (sgcgb *ShipmentGatewayConfigGroupBy) Aggregate(fns ...AggregateFunc) *ShipmentGatewayConfigGroupBy {
	sgcgb.fns = append(sgcgb.fns, fns...)
	return sgcgb
}

// Scan applies the group-by query and scans the result into the given value.
func (sgcgb *ShipmentGatewayConfigGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := sgcgb.path(ctx)
	if err != nil {
		return err
	}
	sgcgb.sql = query
	return sgcgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (sgcgb *ShipmentGatewayConfigGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := sgcgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (sgcgb *ShipmentGatewayConfigGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(sgcgb.fields) > 1 {
		return nil, errors.New("ent: ShipmentGatewayConfigGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := sgcgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (sgcgb *ShipmentGatewayConfigGroupBy) StringsX(ctx context.Context) []string {
	v, err := sgcgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (sgcgb *ShipmentGatewayConfigGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = sgcgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{shipmentgatewayconfig.Label}
	default:
		err = fmt.Errorf("ent: ShipmentGatewayConfigGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (sgcgb *ShipmentGatewayConfigGroupBy) StringX(ctx context.Context) string {
	v, err := sgcgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (sgcgb *ShipmentGatewayConfigGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(sgcgb.fields) > 1 {
		return nil, errors.New("ent: ShipmentGatewayConfigGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := sgcgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (sgcgb *ShipmentGatewayConfigGroupBy) IntsX(ctx context.Context) []int {
	v, err := sgcgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (sgcgb *ShipmentGatewayConfigGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = sgcgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{shipmentgatewayconfig.Label}
	default:
		err = fmt.Errorf("ent: ShipmentGatewayConfigGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (sgcgb *ShipmentGatewayConfigGroupBy) IntX(ctx context.Context) int {
	v, err := sgcgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (sgcgb *ShipmentGatewayConfigGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(sgcgb.fields) > 1 {
		return nil, errors.New("ent: ShipmentGatewayConfigGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := sgcgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (sgcgb *ShipmentGatewayConfigGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := sgcgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (sgcgb *ShipmentGatewayConfigGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = sgcgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{shipmentgatewayconfig.Label}
	default:
		err = fmt.Errorf("ent: ShipmentGatewayConfigGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (sgcgb *ShipmentGatewayConfigGroupBy) Float64X(ctx context.Context) float64 {
	v, err := sgcgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (sgcgb *ShipmentGatewayConfigGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(sgcgb.fields) > 1 {
		return nil, errors.New("ent: ShipmentGatewayConfigGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := sgcgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (sgcgb *ShipmentGatewayConfigGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := sgcgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (sgcgb *ShipmentGatewayConfigGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = sgcgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{shipmentgatewayconfig.Label}
	default:
		err = fmt.Errorf("ent: ShipmentGatewayConfigGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (sgcgb *ShipmentGatewayConfigGroupBy) BoolX(ctx context.Context) bool {
	v, err := sgcgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (sgcgb *ShipmentGatewayConfigGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range sgcgb.fields {
		if !shipmentgatewayconfig.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := sgcgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sgcgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (sgcgb *ShipmentGatewayConfigGroupBy) sqlQuery() *sql.Selector {
	selector := sgcgb.sql.Select()
	aggregation := make([]string, 0, len(sgcgb.fns))
	for _, fn := range sgcgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(sgcgb.fields)+len(sgcgb.fns))
		for _, f := range sgcgb.fields {
			columns = append(columns, selector.C(f))
		}
		for _, c := range aggregation {
			columns = append(columns, c)
		}
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(sgcgb.fields...)...)
}

// ShipmentGatewayConfigSelect is the builder for selecting fields of ShipmentGatewayConfig entities.
type ShipmentGatewayConfigSelect struct {
	*ShipmentGatewayConfigQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (sgcs *ShipmentGatewayConfigSelect) Scan(ctx context.Context, v interface{}) error {
	if err := sgcs.prepareQuery(ctx); err != nil {
		return err
	}
	sgcs.sql = sgcs.ShipmentGatewayConfigQuery.sqlQuery(ctx)
	return sgcs.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (sgcs *ShipmentGatewayConfigSelect) ScanX(ctx context.Context, v interface{}) {
	if err := sgcs.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (sgcs *ShipmentGatewayConfigSelect) Strings(ctx context.Context) ([]string, error) {
	if len(sgcs.fields) > 1 {
		return nil, errors.New("ent: ShipmentGatewayConfigSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := sgcs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (sgcs *ShipmentGatewayConfigSelect) StringsX(ctx context.Context) []string {
	v, err := sgcs.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (sgcs *ShipmentGatewayConfigSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = sgcs.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{shipmentgatewayconfig.Label}
	default:
		err = fmt.Errorf("ent: ShipmentGatewayConfigSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (sgcs *ShipmentGatewayConfigSelect) StringX(ctx context.Context) string {
	v, err := sgcs.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (sgcs *ShipmentGatewayConfigSelect) Ints(ctx context.Context) ([]int, error) {
	if len(sgcs.fields) > 1 {
		return nil, errors.New("ent: ShipmentGatewayConfigSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := sgcs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (sgcs *ShipmentGatewayConfigSelect) IntsX(ctx context.Context) []int {
	v, err := sgcs.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (sgcs *ShipmentGatewayConfigSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = sgcs.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{shipmentgatewayconfig.Label}
	default:
		err = fmt.Errorf("ent: ShipmentGatewayConfigSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (sgcs *ShipmentGatewayConfigSelect) IntX(ctx context.Context) int {
	v, err := sgcs.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (sgcs *ShipmentGatewayConfigSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(sgcs.fields) > 1 {
		return nil, errors.New("ent: ShipmentGatewayConfigSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := sgcs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (sgcs *ShipmentGatewayConfigSelect) Float64sX(ctx context.Context) []float64 {
	v, err := sgcs.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (sgcs *ShipmentGatewayConfigSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = sgcs.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{shipmentgatewayconfig.Label}
	default:
		err = fmt.Errorf("ent: ShipmentGatewayConfigSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (sgcs *ShipmentGatewayConfigSelect) Float64X(ctx context.Context) float64 {
	v, err := sgcs.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (sgcs *ShipmentGatewayConfigSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(sgcs.fields) > 1 {
		return nil, errors.New("ent: ShipmentGatewayConfigSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := sgcs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (sgcs *ShipmentGatewayConfigSelect) BoolsX(ctx context.Context) []bool {
	v, err := sgcs.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (sgcs *ShipmentGatewayConfigSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = sgcs.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{shipmentgatewayconfig.Label}
	default:
		err = fmt.Errorf("ent: ShipmentGatewayConfigSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (sgcs *ShipmentGatewayConfigSelect) BoolX(ctx context.Context) bool {
	v, err := sgcs.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (sgcs *ShipmentGatewayConfigSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := sgcs.sql.Query()
	if err := sgcs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
