// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/predicate"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/shipmentgatewayconfig"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/shipmentgatewayconfigtype"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/shipmentgatewaydhl"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/shipmentgatewayfedex"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/shipmentgatewayups"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/shipmentgatewayusps"
)

// ShipmentGatewayConfigUpdate is the builder for updating ShipmentGatewayConfig entities.
type ShipmentGatewayConfigUpdate struct {
	config
	hooks    []Hook
	mutation *ShipmentGatewayConfigMutation
}

// Where adds a new predicate for the ShipmentGatewayConfigUpdate builder.
func (sgcu *ShipmentGatewayConfigUpdate) Where(ps ...predicate.ShipmentGatewayConfig) *ShipmentGatewayConfigUpdate {
	sgcu.mutation.predicates = append(sgcu.mutation.predicates, ps...)
	return sgcu
}

// SetStringRef sets the "string_ref" field.
func (sgcu *ShipmentGatewayConfigUpdate) SetStringRef(s string) *ShipmentGatewayConfigUpdate {
	sgcu.mutation.SetStringRef(s)
	return sgcu
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (sgcu *ShipmentGatewayConfigUpdate) SetNillableStringRef(s *string) *ShipmentGatewayConfigUpdate {
	if s != nil {
		sgcu.SetStringRef(*s)
	}
	return sgcu
}

// ClearStringRef clears the value of the "string_ref" field.
func (sgcu *ShipmentGatewayConfigUpdate) ClearStringRef() *ShipmentGatewayConfigUpdate {
	sgcu.mutation.ClearStringRef()
	return sgcu
}

// SetDescription sets the "description" field.
func (sgcu *ShipmentGatewayConfigUpdate) SetDescription(s string) *ShipmentGatewayConfigUpdate {
	sgcu.mutation.SetDescription(s)
	return sgcu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (sgcu *ShipmentGatewayConfigUpdate) SetNillableDescription(s *string) *ShipmentGatewayConfigUpdate {
	if s != nil {
		sgcu.SetDescription(*s)
	}
	return sgcu
}

// ClearDescription clears the value of the "description" field.
func (sgcu *ShipmentGatewayConfigUpdate) ClearDescription() *ShipmentGatewayConfigUpdate {
	sgcu.mutation.ClearDescription()
	return sgcu
}

// SetShipmentGatewayConfigTypeID sets the "shipment_gateway_config_type" edge to the ShipmentGatewayConfigType entity by ID.
func (sgcu *ShipmentGatewayConfigUpdate) SetShipmentGatewayConfigTypeID(id int) *ShipmentGatewayConfigUpdate {
	sgcu.mutation.SetShipmentGatewayConfigTypeID(id)
	return sgcu
}

// SetNillableShipmentGatewayConfigTypeID sets the "shipment_gateway_config_type" edge to the ShipmentGatewayConfigType entity by ID if the given value is not nil.
func (sgcu *ShipmentGatewayConfigUpdate) SetNillableShipmentGatewayConfigTypeID(id *int) *ShipmentGatewayConfigUpdate {
	if id != nil {
		sgcu = sgcu.SetShipmentGatewayConfigTypeID(*id)
	}
	return sgcu
}

// SetShipmentGatewayConfigType sets the "shipment_gateway_config_type" edge to the ShipmentGatewayConfigType entity.
func (sgcu *ShipmentGatewayConfigUpdate) SetShipmentGatewayConfigType(s *ShipmentGatewayConfigType) *ShipmentGatewayConfigUpdate {
	return sgcu.SetShipmentGatewayConfigTypeID(s.ID)
}

// SetShipmentGatewayDhlID sets the "shipment_gateway_dhl" edge to the ShipmentGatewayDhl entity by ID.
func (sgcu *ShipmentGatewayConfigUpdate) SetShipmentGatewayDhlID(id int) *ShipmentGatewayConfigUpdate {
	sgcu.mutation.SetShipmentGatewayDhlID(id)
	return sgcu
}

// SetNillableShipmentGatewayDhlID sets the "shipment_gateway_dhl" edge to the ShipmentGatewayDhl entity by ID if the given value is not nil.
func (sgcu *ShipmentGatewayConfigUpdate) SetNillableShipmentGatewayDhlID(id *int) *ShipmentGatewayConfigUpdate {
	if id != nil {
		sgcu = sgcu.SetShipmentGatewayDhlID(*id)
	}
	return sgcu
}

// SetShipmentGatewayDhl sets the "shipment_gateway_dhl" edge to the ShipmentGatewayDhl entity.
func (sgcu *ShipmentGatewayConfigUpdate) SetShipmentGatewayDhl(s *ShipmentGatewayDhl) *ShipmentGatewayConfigUpdate {
	return sgcu.SetShipmentGatewayDhlID(s.ID)
}

// SetShipmentGatewayFedexID sets the "shipment_gateway_fedex" edge to the ShipmentGatewayFedex entity by ID.
func (sgcu *ShipmentGatewayConfigUpdate) SetShipmentGatewayFedexID(id int) *ShipmentGatewayConfigUpdate {
	sgcu.mutation.SetShipmentGatewayFedexID(id)
	return sgcu
}

// SetNillableShipmentGatewayFedexID sets the "shipment_gateway_fedex" edge to the ShipmentGatewayFedex entity by ID if the given value is not nil.
func (sgcu *ShipmentGatewayConfigUpdate) SetNillableShipmentGatewayFedexID(id *int) *ShipmentGatewayConfigUpdate {
	if id != nil {
		sgcu = sgcu.SetShipmentGatewayFedexID(*id)
	}
	return sgcu
}

// SetShipmentGatewayFedex sets the "shipment_gateway_fedex" edge to the ShipmentGatewayFedex entity.
func (sgcu *ShipmentGatewayConfigUpdate) SetShipmentGatewayFedex(s *ShipmentGatewayFedex) *ShipmentGatewayConfigUpdate {
	return sgcu.SetShipmentGatewayFedexID(s.ID)
}

// SetShipmentGatewayUpsID sets the "shipment_gateway_ups" edge to the ShipmentGatewayUps entity by ID.
func (sgcu *ShipmentGatewayConfigUpdate) SetShipmentGatewayUpsID(id int) *ShipmentGatewayConfigUpdate {
	sgcu.mutation.SetShipmentGatewayUpsID(id)
	return sgcu
}

// SetNillableShipmentGatewayUpsID sets the "shipment_gateway_ups" edge to the ShipmentGatewayUps entity by ID if the given value is not nil.
func (sgcu *ShipmentGatewayConfigUpdate) SetNillableShipmentGatewayUpsID(id *int) *ShipmentGatewayConfigUpdate {
	if id != nil {
		sgcu = sgcu.SetShipmentGatewayUpsID(*id)
	}
	return sgcu
}

// SetShipmentGatewayUps sets the "shipment_gateway_ups" edge to the ShipmentGatewayUps entity.
func (sgcu *ShipmentGatewayConfigUpdate) SetShipmentGatewayUps(s *ShipmentGatewayUps) *ShipmentGatewayConfigUpdate {
	return sgcu.SetShipmentGatewayUpsID(s.ID)
}

// SetShipmentGatewayUspsID sets the "shipment_gateway_usps" edge to the ShipmentGatewayUsps entity by ID.
func (sgcu *ShipmentGatewayConfigUpdate) SetShipmentGatewayUspsID(id int) *ShipmentGatewayConfigUpdate {
	sgcu.mutation.SetShipmentGatewayUspsID(id)
	return sgcu
}

// SetNillableShipmentGatewayUspsID sets the "shipment_gateway_usps" edge to the ShipmentGatewayUsps entity by ID if the given value is not nil.
func (sgcu *ShipmentGatewayConfigUpdate) SetNillableShipmentGatewayUspsID(id *int) *ShipmentGatewayConfigUpdate {
	if id != nil {
		sgcu = sgcu.SetShipmentGatewayUspsID(*id)
	}
	return sgcu
}

// SetShipmentGatewayUsps sets the "shipment_gateway_usps" edge to the ShipmentGatewayUsps entity.
func (sgcu *ShipmentGatewayConfigUpdate) SetShipmentGatewayUsps(s *ShipmentGatewayUsps) *ShipmentGatewayConfigUpdate {
	return sgcu.SetShipmentGatewayUspsID(s.ID)
}

// Mutation returns the ShipmentGatewayConfigMutation object of the builder.
func (sgcu *ShipmentGatewayConfigUpdate) Mutation() *ShipmentGatewayConfigMutation {
	return sgcu.mutation
}

// ClearShipmentGatewayConfigType clears the "shipment_gateway_config_type" edge to the ShipmentGatewayConfigType entity.
func (sgcu *ShipmentGatewayConfigUpdate) ClearShipmentGatewayConfigType() *ShipmentGatewayConfigUpdate {
	sgcu.mutation.ClearShipmentGatewayConfigType()
	return sgcu
}

// ClearShipmentGatewayDhl clears the "shipment_gateway_dhl" edge to the ShipmentGatewayDhl entity.
func (sgcu *ShipmentGatewayConfigUpdate) ClearShipmentGatewayDhl() *ShipmentGatewayConfigUpdate {
	sgcu.mutation.ClearShipmentGatewayDhl()
	return sgcu
}

// ClearShipmentGatewayFedex clears the "shipment_gateway_fedex" edge to the ShipmentGatewayFedex entity.
func (sgcu *ShipmentGatewayConfigUpdate) ClearShipmentGatewayFedex() *ShipmentGatewayConfigUpdate {
	sgcu.mutation.ClearShipmentGatewayFedex()
	return sgcu
}

// ClearShipmentGatewayUps clears the "shipment_gateway_ups" edge to the ShipmentGatewayUps entity.
func (sgcu *ShipmentGatewayConfigUpdate) ClearShipmentGatewayUps() *ShipmentGatewayConfigUpdate {
	sgcu.mutation.ClearShipmentGatewayUps()
	return sgcu
}

// ClearShipmentGatewayUsps clears the "shipment_gateway_usps" edge to the ShipmentGatewayUsps entity.
func (sgcu *ShipmentGatewayConfigUpdate) ClearShipmentGatewayUsps() *ShipmentGatewayConfigUpdate {
	sgcu.mutation.ClearShipmentGatewayUsps()
	return sgcu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sgcu *ShipmentGatewayConfigUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	sgcu.defaults()
	if len(sgcu.hooks) == 0 {
		affected, err = sgcu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ShipmentGatewayConfigMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			sgcu.mutation = mutation
			affected, err = sgcu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(sgcu.hooks) - 1; i >= 0; i-- {
			mut = sgcu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sgcu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (sgcu *ShipmentGatewayConfigUpdate) SaveX(ctx context.Context) int {
	affected, err := sgcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sgcu *ShipmentGatewayConfigUpdate) Exec(ctx context.Context) error {
	_, err := sgcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sgcu *ShipmentGatewayConfigUpdate) ExecX(ctx context.Context) {
	if err := sgcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sgcu *ShipmentGatewayConfigUpdate) defaults() {
	if _, ok := sgcu.mutation.UpdateTime(); !ok {
		v := shipmentgatewayconfig.UpdateDefaultUpdateTime()
		sgcu.mutation.SetUpdateTime(v)
	}
}

func (sgcu *ShipmentGatewayConfigUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   shipmentgatewayconfig.Table,
			Columns: shipmentgatewayconfig.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: shipmentgatewayconfig.FieldID,
			},
		},
	}
	if ps := sgcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sgcu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: shipmentgatewayconfig.FieldUpdateTime,
		})
	}
	if value, ok := sgcu.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewayconfig.FieldStringRef,
		})
	}
	if sgcu.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmentgatewayconfig.FieldStringRef,
		})
	}
	if value, ok := sgcu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewayconfig.FieldDescription,
		})
	}
	if sgcu.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmentgatewayconfig.FieldDescription,
		})
	}
	if sgcu.mutation.ShipmentGatewayConfigTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shipmentgatewayconfig.ShipmentGatewayConfigTypeTable,
			Columns: []string{shipmentgatewayconfig.ShipmentGatewayConfigTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipmentgatewayconfigtype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sgcu.mutation.ShipmentGatewayConfigTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shipmentgatewayconfig.ShipmentGatewayConfigTypeTable,
			Columns: []string{shipmentgatewayconfig.ShipmentGatewayConfigTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipmentgatewayconfigtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sgcu.mutation.ShipmentGatewayDhlCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   shipmentgatewayconfig.ShipmentGatewayDhlTable,
			Columns: []string{shipmentgatewayconfig.ShipmentGatewayDhlColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipmentgatewaydhl.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sgcu.mutation.ShipmentGatewayDhlIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   shipmentgatewayconfig.ShipmentGatewayDhlTable,
			Columns: []string{shipmentgatewayconfig.ShipmentGatewayDhlColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipmentgatewaydhl.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sgcu.mutation.ShipmentGatewayFedexCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   shipmentgatewayconfig.ShipmentGatewayFedexTable,
			Columns: []string{shipmentgatewayconfig.ShipmentGatewayFedexColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipmentgatewayfedex.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sgcu.mutation.ShipmentGatewayFedexIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   shipmentgatewayconfig.ShipmentGatewayFedexTable,
			Columns: []string{shipmentgatewayconfig.ShipmentGatewayFedexColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipmentgatewayfedex.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sgcu.mutation.ShipmentGatewayUpsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   shipmentgatewayconfig.ShipmentGatewayUpsTable,
			Columns: []string{shipmentgatewayconfig.ShipmentGatewayUpsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipmentgatewayups.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sgcu.mutation.ShipmentGatewayUpsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   shipmentgatewayconfig.ShipmentGatewayUpsTable,
			Columns: []string{shipmentgatewayconfig.ShipmentGatewayUpsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipmentgatewayups.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sgcu.mutation.ShipmentGatewayUspsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   shipmentgatewayconfig.ShipmentGatewayUspsTable,
			Columns: []string{shipmentgatewayconfig.ShipmentGatewayUspsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipmentgatewayusps.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sgcu.mutation.ShipmentGatewayUspsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   shipmentgatewayconfig.ShipmentGatewayUspsTable,
			Columns: []string{shipmentgatewayconfig.ShipmentGatewayUspsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipmentgatewayusps.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sgcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shipmentgatewayconfig.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ShipmentGatewayConfigUpdateOne is the builder for updating a single ShipmentGatewayConfig entity.
type ShipmentGatewayConfigUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ShipmentGatewayConfigMutation
}

// SetStringRef sets the "string_ref" field.
func (sgcuo *ShipmentGatewayConfigUpdateOne) SetStringRef(s string) *ShipmentGatewayConfigUpdateOne {
	sgcuo.mutation.SetStringRef(s)
	return sgcuo
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (sgcuo *ShipmentGatewayConfigUpdateOne) SetNillableStringRef(s *string) *ShipmentGatewayConfigUpdateOne {
	if s != nil {
		sgcuo.SetStringRef(*s)
	}
	return sgcuo
}

// ClearStringRef clears the value of the "string_ref" field.
func (sgcuo *ShipmentGatewayConfigUpdateOne) ClearStringRef() *ShipmentGatewayConfigUpdateOne {
	sgcuo.mutation.ClearStringRef()
	return sgcuo
}

// SetDescription sets the "description" field.
func (sgcuo *ShipmentGatewayConfigUpdateOne) SetDescription(s string) *ShipmentGatewayConfigUpdateOne {
	sgcuo.mutation.SetDescription(s)
	return sgcuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (sgcuo *ShipmentGatewayConfigUpdateOne) SetNillableDescription(s *string) *ShipmentGatewayConfigUpdateOne {
	if s != nil {
		sgcuo.SetDescription(*s)
	}
	return sgcuo
}

// ClearDescription clears the value of the "description" field.
func (sgcuo *ShipmentGatewayConfigUpdateOne) ClearDescription() *ShipmentGatewayConfigUpdateOne {
	sgcuo.mutation.ClearDescription()
	return sgcuo
}

// SetShipmentGatewayConfigTypeID sets the "shipment_gateway_config_type" edge to the ShipmentGatewayConfigType entity by ID.
func (sgcuo *ShipmentGatewayConfigUpdateOne) SetShipmentGatewayConfigTypeID(id int) *ShipmentGatewayConfigUpdateOne {
	sgcuo.mutation.SetShipmentGatewayConfigTypeID(id)
	return sgcuo
}

// SetNillableShipmentGatewayConfigTypeID sets the "shipment_gateway_config_type" edge to the ShipmentGatewayConfigType entity by ID if the given value is not nil.
func (sgcuo *ShipmentGatewayConfigUpdateOne) SetNillableShipmentGatewayConfigTypeID(id *int) *ShipmentGatewayConfigUpdateOne {
	if id != nil {
		sgcuo = sgcuo.SetShipmentGatewayConfigTypeID(*id)
	}
	return sgcuo
}

// SetShipmentGatewayConfigType sets the "shipment_gateway_config_type" edge to the ShipmentGatewayConfigType entity.
func (sgcuo *ShipmentGatewayConfigUpdateOne) SetShipmentGatewayConfigType(s *ShipmentGatewayConfigType) *ShipmentGatewayConfigUpdateOne {
	return sgcuo.SetShipmentGatewayConfigTypeID(s.ID)
}

// SetShipmentGatewayDhlID sets the "shipment_gateway_dhl" edge to the ShipmentGatewayDhl entity by ID.
func (sgcuo *ShipmentGatewayConfigUpdateOne) SetShipmentGatewayDhlID(id int) *ShipmentGatewayConfigUpdateOne {
	sgcuo.mutation.SetShipmentGatewayDhlID(id)
	return sgcuo
}

// SetNillableShipmentGatewayDhlID sets the "shipment_gateway_dhl" edge to the ShipmentGatewayDhl entity by ID if the given value is not nil.
func (sgcuo *ShipmentGatewayConfigUpdateOne) SetNillableShipmentGatewayDhlID(id *int) *ShipmentGatewayConfigUpdateOne {
	if id != nil {
		sgcuo = sgcuo.SetShipmentGatewayDhlID(*id)
	}
	return sgcuo
}

// SetShipmentGatewayDhl sets the "shipment_gateway_dhl" edge to the ShipmentGatewayDhl entity.
func (sgcuo *ShipmentGatewayConfigUpdateOne) SetShipmentGatewayDhl(s *ShipmentGatewayDhl) *ShipmentGatewayConfigUpdateOne {
	return sgcuo.SetShipmentGatewayDhlID(s.ID)
}

// SetShipmentGatewayFedexID sets the "shipment_gateway_fedex" edge to the ShipmentGatewayFedex entity by ID.
func (sgcuo *ShipmentGatewayConfigUpdateOne) SetShipmentGatewayFedexID(id int) *ShipmentGatewayConfigUpdateOne {
	sgcuo.mutation.SetShipmentGatewayFedexID(id)
	return sgcuo
}

// SetNillableShipmentGatewayFedexID sets the "shipment_gateway_fedex" edge to the ShipmentGatewayFedex entity by ID if the given value is not nil.
func (sgcuo *ShipmentGatewayConfigUpdateOne) SetNillableShipmentGatewayFedexID(id *int) *ShipmentGatewayConfigUpdateOne {
	if id != nil {
		sgcuo = sgcuo.SetShipmentGatewayFedexID(*id)
	}
	return sgcuo
}

// SetShipmentGatewayFedex sets the "shipment_gateway_fedex" edge to the ShipmentGatewayFedex entity.
func (sgcuo *ShipmentGatewayConfigUpdateOne) SetShipmentGatewayFedex(s *ShipmentGatewayFedex) *ShipmentGatewayConfigUpdateOne {
	return sgcuo.SetShipmentGatewayFedexID(s.ID)
}

// SetShipmentGatewayUpsID sets the "shipment_gateway_ups" edge to the ShipmentGatewayUps entity by ID.
func (sgcuo *ShipmentGatewayConfigUpdateOne) SetShipmentGatewayUpsID(id int) *ShipmentGatewayConfigUpdateOne {
	sgcuo.mutation.SetShipmentGatewayUpsID(id)
	return sgcuo
}

// SetNillableShipmentGatewayUpsID sets the "shipment_gateway_ups" edge to the ShipmentGatewayUps entity by ID if the given value is not nil.
func (sgcuo *ShipmentGatewayConfigUpdateOne) SetNillableShipmentGatewayUpsID(id *int) *ShipmentGatewayConfigUpdateOne {
	if id != nil {
		sgcuo = sgcuo.SetShipmentGatewayUpsID(*id)
	}
	return sgcuo
}

// SetShipmentGatewayUps sets the "shipment_gateway_ups" edge to the ShipmentGatewayUps entity.
func (sgcuo *ShipmentGatewayConfigUpdateOne) SetShipmentGatewayUps(s *ShipmentGatewayUps) *ShipmentGatewayConfigUpdateOne {
	return sgcuo.SetShipmentGatewayUpsID(s.ID)
}

// SetShipmentGatewayUspsID sets the "shipment_gateway_usps" edge to the ShipmentGatewayUsps entity by ID.
func (sgcuo *ShipmentGatewayConfigUpdateOne) SetShipmentGatewayUspsID(id int) *ShipmentGatewayConfigUpdateOne {
	sgcuo.mutation.SetShipmentGatewayUspsID(id)
	return sgcuo
}

// SetNillableShipmentGatewayUspsID sets the "shipment_gateway_usps" edge to the ShipmentGatewayUsps entity by ID if the given value is not nil.
func (sgcuo *ShipmentGatewayConfigUpdateOne) SetNillableShipmentGatewayUspsID(id *int) *ShipmentGatewayConfigUpdateOne {
	if id != nil {
		sgcuo = sgcuo.SetShipmentGatewayUspsID(*id)
	}
	return sgcuo
}

// SetShipmentGatewayUsps sets the "shipment_gateway_usps" edge to the ShipmentGatewayUsps entity.
func (sgcuo *ShipmentGatewayConfigUpdateOne) SetShipmentGatewayUsps(s *ShipmentGatewayUsps) *ShipmentGatewayConfigUpdateOne {
	return sgcuo.SetShipmentGatewayUspsID(s.ID)
}

// Mutation returns the ShipmentGatewayConfigMutation object of the builder.
func (sgcuo *ShipmentGatewayConfigUpdateOne) Mutation() *ShipmentGatewayConfigMutation {
	return sgcuo.mutation
}

// ClearShipmentGatewayConfigType clears the "shipment_gateway_config_type" edge to the ShipmentGatewayConfigType entity.
func (sgcuo *ShipmentGatewayConfigUpdateOne) ClearShipmentGatewayConfigType() *ShipmentGatewayConfigUpdateOne {
	sgcuo.mutation.ClearShipmentGatewayConfigType()
	return sgcuo
}

// ClearShipmentGatewayDhl clears the "shipment_gateway_dhl" edge to the ShipmentGatewayDhl entity.
func (sgcuo *ShipmentGatewayConfigUpdateOne) ClearShipmentGatewayDhl() *ShipmentGatewayConfigUpdateOne {
	sgcuo.mutation.ClearShipmentGatewayDhl()
	return sgcuo
}

// ClearShipmentGatewayFedex clears the "shipment_gateway_fedex" edge to the ShipmentGatewayFedex entity.
func (sgcuo *ShipmentGatewayConfigUpdateOne) ClearShipmentGatewayFedex() *ShipmentGatewayConfigUpdateOne {
	sgcuo.mutation.ClearShipmentGatewayFedex()
	return sgcuo
}

// ClearShipmentGatewayUps clears the "shipment_gateway_ups" edge to the ShipmentGatewayUps entity.
func (sgcuo *ShipmentGatewayConfigUpdateOne) ClearShipmentGatewayUps() *ShipmentGatewayConfigUpdateOne {
	sgcuo.mutation.ClearShipmentGatewayUps()
	return sgcuo
}

// ClearShipmentGatewayUsps clears the "shipment_gateway_usps" edge to the ShipmentGatewayUsps entity.
func (sgcuo *ShipmentGatewayConfigUpdateOne) ClearShipmentGatewayUsps() *ShipmentGatewayConfigUpdateOne {
	sgcuo.mutation.ClearShipmentGatewayUsps()
	return sgcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sgcuo *ShipmentGatewayConfigUpdateOne) Select(field string, fields ...string) *ShipmentGatewayConfigUpdateOne {
	sgcuo.fields = append([]string{field}, fields...)
	return sgcuo
}

// Save executes the query and returns the updated ShipmentGatewayConfig entity.
func (sgcuo *ShipmentGatewayConfigUpdateOne) Save(ctx context.Context) (*ShipmentGatewayConfig, error) {
	var (
		err  error
		node *ShipmentGatewayConfig
	)
	sgcuo.defaults()
	if len(sgcuo.hooks) == 0 {
		node, err = sgcuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ShipmentGatewayConfigMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			sgcuo.mutation = mutation
			node, err = sgcuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(sgcuo.hooks) - 1; i >= 0; i-- {
			mut = sgcuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sgcuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (sgcuo *ShipmentGatewayConfigUpdateOne) SaveX(ctx context.Context) *ShipmentGatewayConfig {
	node, err := sgcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sgcuo *ShipmentGatewayConfigUpdateOne) Exec(ctx context.Context) error {
	_, err := sgcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sgcuo *ShipmentGatewayConfigUpdateOne) ExecX(ctx context.Context) {
	if err := sgcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sgcuo *ShipmentGatewayConfigUpdateOne) defaults() {
	if _, ok := sgcuo.mutation.UpdateTime(); !ok {
		v := shipmentgatewayconfig.UpdateDefaultUpdateTime()
		sgcuo.mutation.SetUpdateTime(v)
	}
}

func (sgcuo *ShipmentGatewayConfigUpdateOne) sqlSave(ctx context.Context) (_node *ShipmentGatewayConfig, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   shipmentgatewayconfig.Table,
			Columns: shipmentgatewayconfig.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: shipmentgatewayconfig.FieldID,
			},
		},
	}
	id, ok := sgcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ShipmentGatewayConfig.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := sgcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, shipmentgatewayconfig.FieldID)
		for _, f := range fields {
			if !shipmentgatewayconfig.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != shipmentgatewayconfig.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sgcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sgcuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: shipmentgatewayconfig.FieldUpdateTime,
		})
	}
	if value, ok := sgcuo.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewayconfig.FieldStringRef,
		})
	}
	if sgcuo.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmentgatewayconfig.FieldStringRef,
		})
	}
	if value, ok := sgcuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewayconfig.FieldDescription,
		})
	}
	if sgcuo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmentgatewayconfig.FieldDescription,
		})
	}
	if sgcuo.mutation.ShipmentGatewayConfigTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shipmentgatewayconfig.ShipmentGatewayConfigTypeTable,
			Columns: []string{shipmentgatewayconfig.ShipmentGatewayConfigTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipmentgatewayconfigtype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sgcuo.mutation.ShipmentGatewayConfigTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shipmentgatewayconfig.ShipmentGatewayConfigTypeTable,
			Columns: []string{shipmentgatewayconfig.ShipmentGatewayConfigTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipmentgatewayconfigtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sgcuo.mutation.ShipmentGatewayDhlCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   shipmentgatewayconfig.ShipmentGatewayDhlTable,
			Columns: []string{shipmentgatewayconfig.ShipmentGatewayDhlColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipmentgatewaydhl.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sgcuo.mutation.ShipmentGatewayDhlIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   shipmentgatewayconfig.ShipmentGatewayDhlTable,
			Columns: []string{shipmentgatewayconfig.ShipmentGatewayDhlColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipmentgatewaydhl.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sgcuo.mutation.ShipmentGatewayFedexCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   shipmentgatewayconfig.ShipmentGatewayFedexTable,
			Columns: []string{shipmentgatewayconfig.ShipmentGatewayFedexColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipmentgatewayfedex.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sgcuo.mutation.ShipmentGatewayFedexIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   shipmentgatewayconfig.ShipmentGatewayFedexTable,
			Columns: []string{shipmentgatewayconfig.ShipmentGatewayFedexColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipmentgatewayfedex.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sgcuo.mutation.ShipmentGatewayUpsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   shipmentgatewayconfig.ShipmentGatewayUpsTable,
			Columns: []string{shipmentgatewayconfig.ShipmentGatewayUpsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipmentgatewayups.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sgcuo.mutation.ShipmentGatewayUpsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   shipmentgatewayconfig.ShipmentGatewayUpsTable,
			Columns: []string{shipmentgatewayconfig.ShipmentGatewayUpsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipmentgatewayups.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sgcuo.mutation.ShipmentGatewayUspsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   shipmentgatewayconfig.ShipmentGatewayUspsTable,
			Columns: []string{shipmentgatewayconfig.ShipmentGatewayUspsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipmentgatewayusps.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sgcuo.mutation.ShipmentGatewayUspsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   shipmentgatewayconfig.ShipmentGatewayUspsTable,
			Columns: []string{shipmentgatewayconfig.ShipmentGatewayUspsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipmentgatewayusps.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ShipmentGatewayConfig{config: sgcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sgcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shipmentgatewayconfig.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
