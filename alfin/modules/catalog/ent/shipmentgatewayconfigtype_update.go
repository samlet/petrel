// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/predicate"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/shipmentgatewayconfig"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/shipmentgatewayconfigtype"
)

// ShipmentGatewayConfigTypeUpdate is the builder for updating ShipmentGatewayConfigType entities.
type ShipmentGatewayConfigTypeUpdate struct {
	config
	hooks    []Hook
	mutation *ShipmentGatewayConfigTypeMutation
}

// Where adds a new predicate for the ShipmentGatewayConfigTypeUpdate builder.
func (sgctu *ShipmentGatewayConfigTypeUpdate) Where(ps ...predicate.ShipmentGatewayConfigType) *ShipmentGatewayConfigTypeUpdate {
	sgctu.mutation.predicates = append(sgctu.mutation.predicates, ps...)
	return sgctu
}

// SetStringRef sets the "string_ref" field.
func (sgctu *ShipmentGatewayConfigTypeUpdate) SetStringRef(s string) *ShipmentGatewayConfigTypeUpdate {
	sgctu.mutation.SetStringRef(s)
	return sgctu
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (sgctu *ShipmentGatewayConfigTypeUpdate) SetNillableStringRef(s *string) *ShipmentGatewayConfigTypeUpdate {
	if s != nil {
		sgctu.SetStringRef(*s)
	}
	return sgctu
}

// ClearStringRef clears the value of the "string_ref" field.
func (sgctu *ShipmentGatewayConfigTypeUpdate) ClearStringRef() *ShipmentGatewayConfigTypeUpdate {
	sgctu.mutation.ClearStringRef()
	return sgctu
}

// SetHasTable sets the "has_table" field.
func (sgctu *ShipmentGatewayConfigTypeUpdate) SetHasTable(st shipmentgatewayconfigtype.HasTable) *ShipmentGatewayConfigTypeUpdate {
	sgctu.mutation.SetHasTable(st)
	return sgctu
}

// SetNillableHasTable sets the "has_table" field if the given value is not nil.
func (sgctu *ShipmentGatewayConfigTypeUpdate) SetNillableHasTable(st *shipmentgatewayconfigtype.HasTable) *ShipmentGatewayConfigTypeUpdate {
	if st != nil {
		sgctu.SetHasTable(*st)
	}
	return sgctu
}

// ClearHasTable clears the value of the "has_table" field.
func (sgctu *ShipmentGatewayConfigTypeUpdate) ClearHasTable() *ShipmentGatewayConfigTypeUpdate {
	sgctu.mutation.ClearHasTable()
	return sgctu
}

// SetDescription sets the "description" field.
func (sgctu *ShipmentGatewayConfigTypeUpdate) SetDescription(s string) *ShipmentGatewayConfigTypeUpdate {
	sgctu.mutation.SetDescription(s)
	return sgctu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (sgctu *ShipmentGatewayConfigTypeUpdate) SetNillableDescription(s *string) *ShipmentGatewayConfigTypeUpdate {
	if s != nil {
		sgctu.SetDescription(*s)
	}
	return sgctu
}

// ClearDescription clears the value of the "description" field.
func (sgctu *ShipmentGatewayConfigTypeUpdate) ClearDescription() *ShipmentGatewayConfigTypeUpdate {
	sgctu.mutation.ClearDescription()
	return sgctu
}

// SetParentID sets the "parent" edge to the ShipmentGatewayConfigType entity by ID.
func (sgctu *ShipmentGatewayConfigTypeUpdate) SetParentID(id int) *ShipmentGatewayConfigTypeUpdate {
	sgctu.mutation.SetParentID(id)
	return sgctu
}

// SetNillableParentID sets the "parent" edge to the ShipmentGatewayConfigType entity by ID if the given value is not nil.
func (sgctu *ShipmentGatewayConfigTypeUpdate) SetNillableParentID(id *int) *ShipmentGatewayConfigTypeUpdate {
	if id != nil {
		sgctu = sgctu.SetParentID(*id)
	}
	return sgctu
}

// SetParent sets the "parent" edge to the ShipmentGatewayConfigType entity.
func (sgctu *ShipmentGatewayConfigTypeUpdate) SetParent(s *ShipmentGatewayConfigType) *ShipmentGatewayConfigTypeUpdate {
	return sgctu.SetParentID(s.ID)
}

// AddChildIDs adds the "children" edge to the ShipmentGatewayConfigType entity by IDs.
func (sgctu *ShipmentGatewayConfigTypeUpdate) AddChildIDs(ids ...int) *ShipmentGatewayConfigTypeUpdate {
	sgctu.mutation.AddChildIDs(ids...)
	return sgctu
}

// AddChildren adds the "children" edges to the ShipmentGatewayConfigType entity.
func (sgctu *ShipmentGatewayConfigTypeUpdate) AddChildren(s ...*ShipmentGatewayConfigType) *ShipmentGatewayConfigTypeUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sgctu.AddChildIDs(ids...)
}

// AddSiblingShipmentGatewayConfigTypeIDs adds the "sibling_shipment_gateway_config_types" edge to the ShipmentGatewayConfigType entity by IDs.
func (sgctu *ShipmentGatewayConfigTypeUpdate) AddSiblingShipmentGatewayConfigTypeIDs(ids ...int) *ShipmentGatewayConfigTypeUpdate {
	sgctu.mutation.AddSiblingShipmentGatewayConfigTypeIDs(ids...)
	return sgctu
}

// AddSiblingShipmentGatewayConfigTypes adds the "sibling_shipment_gateway_config_types" edges to the ShipmentGatewayConfigType entity.
func (sgctu *ShipmentGatewayConfigTypeUpdate) AddSiblingShipmentGatewayConfigTypes(s ...*ShipmentGatewayConfigType) *ShipmentGatewayConfigTypeUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sgctu.AddSiblingShipmentGatewayConfigTypeIDs(ids...)
}

// AddShipmentGatewayConfigIDs adds the "shipment_gateway_configs" edge to the ShipmentGatewayConfig entity by IDs.
func (sgctu *ShipmentGatewayConfigTypeUpdate) AddShipmentGatewayConfigIDs(ids ...int) *ShipmentGatewayConfigTypeUpdate {
	sgctu.mutation.AddShipmentGatewayConfigIDs(ids...)
	return sgctu
}

// AddShipmentGatewayConfigs adds the "shipment_gateway_configs" edges to the ShipmentGatewayConfig entity.
func (sgctu *ShipmentGatewayConfigTypeUpdate) AddShipmentGatewayConfigs(s ...*ShipmentGatewayConfig) *ShipmentGatewayConfigTypeUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sgctu.AddShipmentGatewayConfigIDs(ids...)
}

// AddChildShipmentGatewayConfigTypeIDs adds the "child_shipment_gateway_config_types" edge to the ShipmentGatewayConfigType entity by IDs.
func (sgctu *ShipmentGatewayConfigTypeUpdate) AddChildShipmentGatewayConfigTypeIDs(ids ...int) *ShipmentGatewayConfigTypeUpdate {
	sgctu.mutation.AddChildShipmentGatewayConfigTypeIDs(ids...)
	return sgctu
}

// AddChildShipmentGatewayConfigTypes adds the "child_shipment_gateway_config_types" edges to the ShipmentGatewayConfigType entity.
func (sgctu *ShipmentGatewayConfigTypeUpdate) AddChildShipmentGatewayConfigTypes(s ...*ShipmentGatewayConfigType) *ShipmentGatewayConfigTypeUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sgctu.AddChildShipmentGatewayConfigTypeIDs(ids...)
}

// Mutation returns the ShipmentGatewayConfigTypeMutation object of the builder.
func (sgctu *ShipmentGatewayConfigTypeUpdate) Mutation() *ShipmentGatewayConfigTypeMutation {
	return sgctu.mutation
}

// ClearParent clears the "parent" edge to the ShipmentGatewayConfigType entity.
func (sgctu *ShipmentGatewayConfigTypeUpdate) ClearParent() *ShipmentGatewayConfigTypeUpdate {
	sgctu.mutation.ClearParent()
	return sgctu
}

// ClearChildren clears all "children" edges to the ShipmentGatewayConfigType entity.
func (sgctu *ShipmentGatewayConfigTypeUpdate) ClearChildren() *ShipmentGatewayConfigTypeUpdate {
	sgctu.mutation.ClearChildren()
	return sgctu
}

// RemoveChildIDs removes the "children" edge to ShipmentGatewayConfigType entities by IDs.
func (sgctu *ShipmentGatewayConfigTypeUpdate) RemoveChildIDs(ids ...int) *ShipmentGatewayConfigTypeUpdate {
	sgctu.mutation.RemoveChildIDs(ids...)
	return sgctu
}

// RemoveChildren removes "children" edges to ShipmentGatewayConfigType entities.
func (sgctu *ShipmentGatewayConfigTypeUpdate) RemoveChildren(s ...*ShipmentGatewayConfigType) *ShipmentGatewayConfigTypeUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sgctu.RemoveChildIDs(ids...)
}

// ClearSiblingShipmentGatewayConfigTypes clears all "sibling_shipment_gateway_config_types" edges to the ShipmentGatewayConfigType entity.
func (sgctu *ShipmentGatewayConfigTypeUpdate) ClearSiblingShipmentGatewayConfigTypes() *ShipmentGatewayConfigTypeUpdate {
	sgctu.mutation.ClearSiblingShipmentGatewayConfigTypes()
	return sgctu
}

// RemoveSiblingShipmentGatewayConfigTypeIDs removes the "sibling_shipment_gateway_config_types" edge to ShipmentGatewayConfigType entities by IDs.
func (sgctu *ShipmentGatewayConfigTypeUpdate) RemoveSiblingShipmentGatewayConfigTypeIDs(ids ...int) *ShipmentGatewayConfigTypeUpdate {
	sgctu.mutation.RemoveSiblingShipmentGatewayConfigTypeIDs(ids...)
	return sgctu
}

// RemoveSiblingShipmentGatewayConfigTypes removes "sibling_shipment_gateway_config_types" edges to ShipmentGatewayConfigType entities.
func (sgctu *ShipmentGatewayConfigTypeUpdate) RemoveSiblingShipmentGatewayConfigTypes(s ...*ShipmentGatewayConfigType) *ShipmentGatewayConfigTypeUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sgctu.RemoveSiblingShipmentGatewayConfigTypeIDs(ids...)
}

// ClearShipmentGatewayConfigs clears all "shipment_gateway_configs" edges to the ShipmentGatewayConfig entity.
func (sgctu *ShipmentGatewayConfigTypeUpdate) ClearShipmentGatewayConfigs() *ShipmentGatewayConfigTypeUpdate {
	sgctu.mutation.ClearShipmentGatewayConfigs()
	return sgctu
}

// RemoveShipmentGatewayConfigIDs removes the "shipment_gateway_configs" edge to ShipmentGatewayConfig entities by IDs.
func (sgctu *ShipmentGatewayConfigTypeUpdate) RemoveShipmentGatewayConfigIDs(ids ...int) *ShipmentGatewayConfigTypeUpdate {
	sgctu.mutation.RemoveShipmentGatewayConfigIDs(ids...)
	return sgctu
}

// RemoveShipmentGatewayConfigs removes "shipment_gateway_configs" edges to ShipmentGatewayConfig entities.
func (sgctu *ShipmentGatewayConfigTypeUpdate) RemoveShipmentGatewayConfigs(s ...*ShipmentGatewayConfig) *ShipmentGatewayConfigTypeUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sgctu.RemoveShipmentGatewayConfigIDs(ids...)
}

// ClearChildShipmentGatewayConfigTypes clears all "child_shipment_gateway_config_types" edges to the ShipmentGatewayConfigType entity.
func (sgctu *ShipmentGatewayConfigTypeUpdate) ClearChildShipmentGatewayConfigTypes() *ShipmentGatewayConfigTypeUpdate {
	sgctu.mutation.ClearChildShipmentGatewayConfigTypes()
	return sgctu
}

// RemoveChildShipmentGatewayConfigTypeIDs removes the "child_shipment_gateway_config_types" edge to ShipmentGatewayConfigType entities by IDs.
func (sgctu *ShipmentGatewayConfigTypeUpdate) RemoveChildShipmentGatewayConfigTypeIDs(ids ...int) *ShipmentGatewayConfigTypeUpdate {
	sgctu.mutation.RemoveChildShipmentGatewayConfigTypeIDs(ids...)
	return sgctu
}

// RemoveChildShipmentGatewayConfigTypes removes "child_shipment_gateway_config_types" edges to ShipmentGatewayConfigType entities.
func (sgctu *ShipmentGatewayConfigTypeUpdate) RemoveChildShipmentGatewayConfigTypes(s ...*ShipmentGatewayConfigType) *ShipmentGatewayConfigTypeUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sgctu.RemoveChildShipmentGatewayConfigTypeIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sgctu *ShipmentGatewayConfigTypeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	sgctu.defaults()
	if len(sgctu.hooks) == 0 {
		if err = sgctu.check(); err != nil {
			return 0, err
		}
		affected, err = sgctu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ShipmentGatewayConfigTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sgctu.check(); err != nil {
				return 0, err
			}
			sgctu.mutation = mutation
			affected, err = sgctu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(sgctu.hooks) - 1; i >= 0; i-- {
			mut = sgctu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sgctu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (sgctu *ShipmentGatewayConfigTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := sgctu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sgctu *ShipmentGatewayConfigTypeUpdate) Exec(ctx context.Context) error {
	_, err := sgctu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sgctu *ShipmentGatewayConfigTypeUpdate) ExecX(ctx context.Context) {
	if err := sgctu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sgctu *ShipmentGatewayConfigTypeUpdate) defaults() {
	if _, ok := sgctu.mutation.UpdateTime(); !ok {
		v := shipmentgatewayconfigtype.UpdateDefaultUpdateTime()
		sgctu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sgctu *ShipmentGatewayConfigTypeUpdate) check() error {
	if v, ok := sgctu.mutation.HasTable(); ok {
		if err := shipmentgatewayconfigtype.HasTableValidator(v); err != nil {
			return &ValidationError{Name: "has_table", err: fmt.Errorf("ent: validator failed for field \"has_table\": %w", err)}
		}
	}
	return nil
}

func (sgctu *ShipmentGatewayConfigTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   shipmentgatewayconfigtype.Table,
			Columns: shipmentgatewayconfigtype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: shipmentgatewayconfigtype.FieldID,
			},
		},
	}
	if ps := sgctu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sgctu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: shipmentgatewayconfigtype.FieldUpdateTime,
		})
	}
	if value, ok := sgctu.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewayconfigtype.FieldStringRef,
		})
	}
	if sgctu.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmentgatewayconfigtype.FieldStringRef,
		})
	}
	if value, ok := sgctu.mutation.HasTable(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: shipmentgatewayconfigtype.FieldHasTable,
		})
	}
	if sgctu.mutation.HasTableCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: shipmentgatewayconfigtype.FieldHasTable,
		})
	}
	if value, ok := sgctu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewayconfigtype.FieldDescription,
		})
	}
	if sgctu.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmentgatewayconfigtype.FieldDescription,
		})
	}
	if sgctu.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shipmentgatewayconfigtype.ParentTable,
			Columns: []string{shipmentgatewayconfigtype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipmentgatewayconfigtype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sgctu.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shipmentgatewayconfigtype.ParentTable,
			Columns: []string{shipmentgatewayconfigtype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipmentgatewayconfigtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sgctu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shipmentgatewayconfigtype.ChildrenTable,
			Columns: []string{shipmentgatewayconfigtype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipmentgatewayconfigtype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sgctu.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !sgctu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shipmentgatewayconfigtype.ChildrenTable,
			Columns: []string{shipmentgatewayconfigtype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipmentgatewayconfigtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sgctu.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shipmentgatewayconfigtype.ChildrenTable,
			Columns: []string{shipmentgatewayconfigtype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipmentgatewayconfigtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sgctu.mutation.SiblingShipmentGatewayConfigTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   shipmentgatewayconfigtype.SiblingShipmentGatewayConfigTypesTable,
			Columns: shipmentgatewayconfigtype.SiblingShipmentGatewayConfigTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipmentgatewayconfigtype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sgctu.mutation.RemovedSiblingShipmentGatewayConfigTypesIDs(); len(nodes) > 0 && !sgctu.mutation.SiblingShipmentGatewayConfigTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   shipmentgatewayconfigtype.SiblingShipmentGatewayConfigTypesTable,
			Columns: shipmentgatewayconfigtype.SiblingShipmentGatewayConfigTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipmentgatewayconfigtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sgctu.mutation.SiblingShipmentGatewayConfigTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   shipmentgatewayconfigtype.SiblingShipmentGatewayConfigTypesTable,
			Columns: shipmentgatewayconfigtype.SiblingShipmentGatewayConfigTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipmentgatewayconfigtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sgctu.mutation.ShipmentGatewayConfigsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shipmentgatewayconfigtype.ShipmentGatewayConfigsTable,
			Columns: []string{shipmentgatewayconfigtype.ShipmentGatewayConfigsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipmentgatewayconfig.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sgctu.mutation.RemovedShipmentGatewayConfigsIDs(); len(nodes) > 0 && !sgctu.mutation.ShipmentGatewayConfigsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shipmentgatewayconfigtype.ShipmentGatewayConfigsTable,
			Columns: []string{shipmentgatewayconfigtype.ShipmentGatewayConfigsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipmentgatewayconfig.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sgctu.mutation.ShipmentGatewayConfigsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shipmentgatewayconfigtype.ShipmentGatewayConfigsTable,
			Columns: []string{shipmentgatewayconfigtype.ShipmentGatewayConfigsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipmentgatewayconfig.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sgctu.mutation.ChildShipmentGatewayConfigTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   shipmentgatewayconfigtype.ChildShipmentGatewayConfigTypesTable,
			Columns: shipmentgatewayconfigtype.ChildShipmentGatewayConfigTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipmentgatewayconfigtype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sgctu.mutation.RemovedChildShipmentGatewayConfigTypesIDs(); len(nodes) > 0 && !sgctu.mutation.ChildShipmentGatewayConfigTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   shipmentgatewayconfigtype.ChildShipmentGatewayConfigTypesTable,
			Columns: shipmentgatewayconfigtype.ChildShipmentGatewayConfigTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipmentgatewayconfigtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sgctu.mutation.ChildShipmentGatewayConfigTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   shipmentgatewayconfigtype.ChildShipmentGatewayConfigTypesTable,
			Columns: shipmentgatewayconfigtype.ChildShipmentGatewayConfigTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipmentgatewayconfigtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sgctu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shipmentgatewayconfigtype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ShipmentGatewayConfigTypeUpdateOne is the builder for updating a single ShipmentGatewayConfigType entity.
type ShipmentGatewayConfigTypeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ShipmentGatewayConfigTypeMutation
}

// SetStringRef sets the "string_ref" field.
func (sgctuo *ShipmentGatewayConfigTypeUpdateOne) SetStringRef(s string) *ShipmentGatewayConfigTypeUpdateOne {
	sgctuo.mutation.SetStringRef(s)
	return sgctuo
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (sgctuo *ShipmentGatewayConfigTypeUpdateOne) SetNillableStringRef(s *string) *ShipmentGatewayConfigTypeUpdateOne {
	if s != nil {
		sgctuo.SetStringRef(*s)
	}
	return sgctuo
}

// ClearStringRef clears the value of the "string_ref" field.
func (sgctuo *ShipmentGatewayConfigTypeUpdateOne) ClearStringRef() *ShipmentGatewayConfigTypeUpdateOne {
	sgctuo.mutation.ClearStringRef()
	return sgctuo
}

// SetHasTable sets the "has_table" field.
func (sgctuo *ShipmentGatewayConfigTypeUpdateOne) SetHasTable(st shipmentgatewayconfigtype.HasTable) *ShipmentGatewayConfigTypeUpdateOne {
	sgctuo.mutation.SetHasTable(st)
	return sgctuo
}

// SetNillableHasTable sets the "has_table" field if the given value is not nil.
func (sgctuo *ShipmentGatewayConfigTypeUpdateOne) SetNillableHasTable(st *shipmentgatewayconfigtype.HasTable) *ShipmentGatewayConfigTypeUpdateOne {
	if st != nil {
		sgctuo.SetHasTable(*st)
	}
	return sgctuo
}

// ClearHasTable clears the value of the "has_table" field.
func (sgctuo *ShipmentGatewayConfigTypeUpdateOne) ClearHasTable() *ShipmentGatewayConfigTypeUpdateOne {
	sgctuo.mutation.ClearHasTable()
	return sgctuo
}

// SetDescription sets the "description" field.
func (sgctuo *ShipmentGatewayConfigTypeUpdateOne) SetDescription(s string) *ShipmentGatewayConfigTypeUpdateOne {
	sgctuo.mutation.SetDescription(s)
	return sgctuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (sgctuo *ShipmentGatewayConfigTypeUpdateOne) SetNillableDescription(s *string) *ShipmentGatewayConfigTypeUpdateOne {
	if s != nil {
		sgctuo.SetDescription(*s)
	}
	return sgctuo
}

// ClearDescription clears the value of the "description" field.
func (sgctuo *ShipmentGatewayConfigTypeUpdateOne) ClearDescription() *ShipmentGatewayConfigTypeUpdateOne {
	sgctuo.mutation.ClearDescription()
	return sgctuo
}

// SetParentID sets the "parent" edge to the ShipmentGatewayConfigType entity by ID.
func (sgctuo *ShipmentGatewayConfigTypeUpdateOne) SetParentID(id int) *ShipmentGatewayConfigTypeUpdateOne {
	sgctuo.mutation.SetParentID(id)
	return sgctuo
}

// SetNillableParentID sets the "parent" edge to the ShipmentGatewayConfigType entity by ID if the given value is not nil.
func (sgctuo *ShipmentGatewayConfigTypeUpdateOne) SetNillableParentID(id *int) *ShipmentGatewayConfigTypeUpdateOne {
	if id != nil {
		sgctuo = sgctuo.SetParentID(*id)
	}
	return sgctuo
}

// SetParent sets the "parent" edge to the ShipmentGatewayConfigType entity.
func (sgctuo *ShipmentGatewayConfigTypeUpdateOne) SetParent(s *ShipmentGatewayConfigType) *ShipmentGatewayConfigTypeUpdateOne {
	return sgctuo.SetParentID(s.ID)
}

// AddChildIDs adds the "children" edge to the ShipmentGatewayConfigType entity by IDs.
func (sgctuo *ShipmentGatewayConfigTypeUpdateOne) AddChildIDs(ids ...int) *ShipmentGatewayConfigTypeUpdateOne {
	sgctuo.mutation.AddChildIDs(ids...)
	return sgctuo
}

// AddChildren adds the "children" edges to the ShipmentGatewayConfigType entity.
func (sgctuo *ShipmentGatewayConfigTypeUpdateOne) AddChildren(s ...*ShipmentGatewayConfigType) *ShipmentGatewayConfigTypeUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sgctuo.AddChildIDs(ids...)
}

// AddSiblingShipmentGatewayConfigTypeIDs adds the "sibling_shipment_gateway_config_types" edge to the ShipmentGatewayConfigType entity by IDs.
func (sgctuo *ShipmentGatewayConfigTypeUpdateOne) AddSiblingShipmentGatewayConfigTypeIDs(ids ...int) *ShipmentGatewayConfigTypeUpdateOne {
	sgctuo.mutation.AddSiblingShipmentGatewayConfigTypeIDs(ids...)
	return sgctuo
}

// AddSiblingShipmentGatewayConfigTypes adds the "sibling_shipment_gateway_config_types" edges to the ShipmentGatewayConfigType entity.
func (sgctuo *ShipmentGatewayConfigTypeUpdateOne) AddSiblingShipmentGatewayConfigTypes(s ...*ShipmentGatewayConfigType) *ShipmentGatewayConfigTypeUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sgctuo.AddSiblingShipmentGatewayConfigTypeIDs(ids...)
}

// AddShipmentGatewayConfigIDs adds the "shipment_gateway_configs" edge to the ShipmentGatewayConfig entity by IDs.
func (sgctuo *ShipmentGatewayConfigTypeUpdateOne) AddShipmentGatewayConfigIDs(ids ...int) *ShipmentGatewayConfigTypeUpdateOne {
	sgctuo.mutation.AddShipmentGatewayConfigIDs(ids...)
	return sgctuo
}

// AddShipmentGatewayConfigs adds the "shipment_gateway_configs" edges to the ShipmentGatewayConfig entity.
func (sgctuo *ShipmentGatewayConfigTypeUpdateOne) AddShipmentGatewayConfigs(s ...*ShipmentGatewayConfig) *ShipmentGatewayConfigTypeUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sgctuo.AddShipmentGatewayConfigIDs(ids...)
}

// AddChildShipmentGatewayConfigTypeIDs adds the "child_shipment_gateway_config_types" edge to the ShipmentGatewayConfigType entity by IDs.
func (sgctuo *ShipmentGatewayConfigTypeUpdateOne) AddChildShipmentGatewayConfigTypeIDs(ids ...int) *ShipmentGatewayConfigTypeUpdateOne {
	sgctuo.mutation.AddChildShipmentGatewayConfigTypeIDs(ids...)
	return sgctuo
}

// AddChildShipmentGatewayConfigTypes adds the "child_shipment_gateway_config_types" edges to the ShipmentGatewayConfigType entity.
func (sgctuo *ShipmentGatewayConfigTypeUpdateOne) AddChildShipmentGatewayConfigTypes(s ...*ShipmentGatewayConfigType) *ShipmentGatewayConfigTypeUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sgctuo.AddChildShipmentGatewayConfigTypeIDs(ids...)
}

// Mutation returns the ShipmentGatewayConfigTypeMutation object of the builder.
func (sgctuo *ShipmentGatewayConfigTypeUpdateOne) Mutation() *ShipmentGatewayConfigTypeMutation {
	return sgctuo.mutation
}

// ClearParent clears the "parent" edge to the ShipmentGatewayConfigType entity.
func (sgctuo *ShipmentGatewayConfigTypeUpdateOne) ClearParent() *ShipmentGatewayConfigTypeUpdateOne {
	sgctuo.mutation.ClearParent()
	return sgctuo
}

// ClearChildren clears all "children" edges to the ShipmentGatewayConfigType entity.
func (sgctuo *ShipmentGatewayConfigTypeUpdateOne) ClearChildren() *ShipmentGatewayConfigTypeUpdateOne {
	sgctuo.mutation.ClearChildren()
	return sgctuo
}

// RemoveChildIDs removes the "children" edge to ShipmentGatewayConfigType entities by IDs.
func (sgctuo *ShipmentGatewayConfigTypeUpdateOne) RemoveChildIDs(ids ...int) *ShipmentGatewayConfigTypeUpdateOne {
	sgctuo.mutation.RemoveChildIDs(ids...)
	return sgctuo
}

// RemoveChildren removes "children" edges to ShipmentGatewayConfigType entities.
func (sgctuo *ShipmentGatewayConfigTypeUpdateOne) RemoveChildren(s ...*ShipmentGatewayConfigType) *ShipmentGatewayConfigTypeUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sgctuo.RemoveChildIDs(ids...)
}

// ClearSiblingShipmentGatewayConfigTypes clears all "sibling_shipment_gateway_config_types" edges to the ShipmentGatewayConfigType entity.
func (sgctuo *ShipmentGatewayConfigTypeUpdateOne) ClearSiblingShipmentGatewayConfigTypes() *ShipmentGatewayConfigTypeUpdateOne {
	sgctuo.mutation.ClearSiblingShipmentGatewayConfigTypes()
	return sgctuo
}

// RemoveSiblingShipmentGatewayConfigTypeIDs removes the "sibling_shipment_gateway_config_types" edge to ShipmentGatewayConfigType entities by IDs.
func (sgctuo *ShipmentGatewayConfigTypeUpdateOne) RemoveSiblingShipmentGatewayConfigTypeIDs(ids ...int) *ShipmentGatewayConfigTypeUpdateOne {
	sgctuo.mutation.RemoveSiblingShipmentGatewayConfigTypeIDs(ids...)
	return sgctuo
}

// RemoveSiblingShipmentGatewayConfigTypes removes "sibling_shipment_gateway_config_types" edges to ShipmentGatewayConfigType entities.
func (sgctuo *ShipmentGatewayConfigTypeUpdateOne) RemoveSiblingShipmentGatewayConfigTypes(s ...*ShipmentGatewayConfigType) *ShipmentGatewayConfigTypeUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sgctuo.RemoveSiblingShipmentGatewayConfigTypeIDs(ids...)
}

// ClearShipmentGatewayConfigs clears all "shipment_gateway_configs" edges to the ShipmentGatewayConfig entity.
func (sgctuo *ShipmentGatewayConfigTypeUpdateOne) ClearShipmentGatewayConfigs() *ShipmentGatewayConfigTypeUpdateOne {
	sgctuo.mutation.ClearShipmentGatewayConfigs()
	return sgctuo
}

// RemoveShipmentGatewayConfigIDs removes the "shipment_gateway_configs" edge to ShipmentGatewayConfig entities by IDs.
func (sgctuo *ShipmentGatewayConfigTypeUpdateOne) RemoveShipmentGatewayConfigIDs(ids ...int) *ShipmentGatewayConfigTypeUpdateOne {
	sgctuo.mutation.RemoveShipmentGatewayConfigIDs(ids...)
	return sgctuo
}

// RemoveShipmentGatewayConfigs removes "shipment_gateway_configs" edges to ShipmentGatewayConfig entities.
func (sgctuo *ShipmentGatewayConfigTypeUpdateOne) RemoveShipmentGatewayConfigs(s ...*ShipmentGatewayConfig) *ShipmentGatewayConfigTypeUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sgctuo.RemoveShipmentGatewayConfigIDs(ids...)
}

// ClearChildShipmentGatewayConfigTypes clears all "child_shipment_gateway_config_types" edges to the ShipmentGatewayConfigType entity.
func (sgctuo *ShipmentGatewayConfigTypeUpdateOne) ClearChildShipmentGatewayConfigTypes() *ShipmentGatewayConfigTypeUpdateOne {
	sgctuo.mutation.ClearChildShipmentGatewayConfigTypes()
	return sgctuo
}

// RemoveChildShipmentGatewayConfigTypeIDs removes the "child_shipment_gateway_config_types" edge to ShipmentGatewayConfigType entities by IDs.
func (sgctuo *ShipmentGatewayConfigTypeUpdateOne) RemoveChildShipmentGatewayConfigTypeIDs(ids ...int) *ShipmentGatewayConfigTypeUpdateOne {
	sgctuo.mutation.RemoveChildShipmentGatewayConfigTypeIDs(ids...)
	return sgctuo
}

// RemoveChildShipmentGatewayConfigTypes removes "child_shipment_gateway_config_types" edges to ShipmentGatewayConfigType entities.
func (sgctuo *ShipmentGatewayConfigTypeUpdateOne) RemoveChildShipmentGatewayConfigTypes(s ...*ShipmentGatewayConfigType) *ShipmentGatewayConfigTypeUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sgctuo.RemoveChildShipmentGatewayConfigTypeIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sgctuo *ShipmentGatewayConfigTypeUpdateOne) Select(field string, fields ...string) *ShipmentGatewayConfigTypeUpdateOne {
	sgctuo.fields = append([]string{field}, fields...)
	return sgctuo
}

// Save executes the query and returns the updated ShipmentGatewayConfigType entity.
func (sgctuo *ShipmentGatewayConfigTypeUpdateOne) Save(ctx context.Context) (*ShipmentGatewayConfigType, error) {
	var (
		err  error
		node *ShipmentGatewayConfigType
	)
	sgctuo.defaults()
	if len(sgctuo.hooks) == 0 {
		if err = sgctuo.check(); err != nil {
			return nil, err
		}
		node, err = sgctuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ShipmentGatewayConfigTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sgctuo.check(); err != nil {
				return nil, err
			}
			sgctuo.mutation = mutation
			node, err = sgctuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(sgctuo.hooks) - 1; i >= 0; i-- {
			mut = sgctuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sgctuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (sgctuo *ShipmentGatewayConfigTypeUpdateOne) SaveX(ctx context.Context) *ShipmentGatewayConfigType {
	node, err := sgctuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sgctuo *ShipmentGatewayConfigTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := sgctuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sgctuo *ShipmentGatewayConfigTypeUpdateOne) ExecX(ctx context.Context) {
	if err := sgctuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sgctuo *ShipmentGatewayConfigTypeUpdateOne) defaults() {
	if _, ok := sgctuo.mutation.UpdateTime(); !ok {
		v := shipmentgatewayconfigtype.UpdateDefaultUpdateTime()
		sgctuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sgctuo *ShipmentGatewayConfigTypeUpdateOne) check() error {
	if v, ok := sgctuo.mutation.HasTable(); ok {
		if err := shipmentgatewayconfigtype.HasTableValidator(v); err != nil {
			return &ValidationError{Name: "has_table", err: fmt.Errorf("ent: validator failed for field \"has_table\": %w", err)}
		}
	}
	return nil
}

func (sgctuo *ShipmentGatewayConfigTypeUpdateOne) sqlSave(ctx context.Context) (_node *ShipmentGatewayConfigType, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   shipmentgatewayconfigtype.Table,
			Columns: shipmentgatewayconfigtype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: shipmentgatewayconfigtype.FieldID,
			},
		},
	}
	id, ok := sgctuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ShipmentGatewayConfigType.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := sgctuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, shipmentgatewayconfigtype.FieldID)
		for _, f := range fields {
			if !shipmentgatewayconfigtype.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != shipmentgatewayconfigtype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sgctuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sgctuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: shipmentgatewayconfigtype.FieldUpdateTime,
		})
	}
	if value, ok := sgctuo.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewayconfigtype.FieldStringRef,
		})
	}
	if sgctuo.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmentgatewayconfigtype.FieldStringRef,
		})
	}
	if value, ok := sgctuo.mutation.HasTable(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: shipmentgatewayconfigtype.FieldHasTable,
		})
	}
	if sgctuo.mutation.HasTableCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: shipmentgatewayconfigtype.FieldHasTable,
		})
	}
	if value, ok := sgctuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewayconfigtype.FieldDescription,
		})
	}
	if sgctuo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmentgatewayconfigtype.FieldDescription,
		})
	}
	if sgctuo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shipmentgatewayconfigtype.ParentTable,
			Columns: []string{shipmentgatewayconfigtype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipmentgatewayconfigtype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sgctuo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shipmentgatewayconfigtype.ParentTable,
			Columns: []string{shipmentgatewayconfigtype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipmentgatewayconfigtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sgctuo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shipmentgatewayconfigtype.ChildrenTable,
			Columns: []string{shipmentgatewayconfigtype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipmentgatewayconfigtype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sgctuo.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !sgctuo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shipmentgatewayconfigtype.ChildrenTable,
			Columns: []string{shipmentgatewayconfigtype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipmentgatewayconfigtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sgctuo.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shipmentgatewayconfigtype.ChildrenTable,
			Columns: []string{shipmentgatewayconfigtype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipmentgatewayconfigtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sgctuo.mutation.SiblingShipmentGatewayConfigTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   shipmentgatewayconfigtype.SiblingShipmentGatewayConfigTypesTable,
			Columns: shipmentgatewayconfigtype.SiblingShipmentGatewayConfigTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipmentgatewayconfigtype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sgctuo.mutation.RemovedSiblingShipmentGatewayConfigTypesIDs(); len(nodes) > 0 && !sgctuo.mutation.SiblingShipmentGatewayConfigTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   shipmentgatewayconfigtype.SiblingShipmentGatewayConfigTypesTable,
			Columns: shipmentgatewayconfigtype.SiblingShipmentGatewayConfigTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipmentgatewayconfigtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sgctuo.mutation.SiblingShipmentGatewayConfigTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   shipmentgatewayconfigtype.SiblingShipmentGatewayConfigTypesTable,
			Columns: shipmentgatewayconfigtype.SiblingShipmentGatewayConfigTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipmentgatewayconfigtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sgctuo.mutation.ShipmentGatewayConfigsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shipmentgatewayconfigtype.ShipmentGatewayConfigsTable,
			Columns: []string{shipmentgatewayconfigtype.ShipmentGatewayConfigsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipmentgatewayconfig.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sgctuo.mutation.RemovedShipmentGatewayConfigsIDs(); len(nodes) > 0 && !sgctuo.mutation.ShipmentGatewayConfigsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shipmentgatewayconfigtype.ShipmentGatewayConfigsTable,
			Columns: []string{shipmentgatewayconfigtype.ShipmentGatewayConfigsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipmentgatewayconfig.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sgctuo.mutation.ShipmentGatewayConfigsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shipmentgatewayconfigtype.ShipmentGatewayConfigsTable,
			Columns: []string{shipmentgatewayconfigtype.ShipmentGatewayConfigsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipmentgatewayconfig.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sgctuo.mutation.ChildShipmentGatewayConfigTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   shipmentgatewayconfigtype.ChildShipmentGatewayConfigTypesTable,
			Columns: shipmentgatewayconfigtype.ChildShipmentGatewayConfigTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipmentgatewayconfigtype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sgctuo.mutation.RemovedChildShipmentGatewayConfigTypesIDs(); len(nodes) > 0 && !sgctuo.mutation.ChildShipmentGatewayConfigTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   shipmentgatewayconfigtype.ChildShipmentGatewayConfigTypesTable,
			Columns: shipmentgatewayconfigtype.ChildShipmentGatewayConfigTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipmentgatewayconfigtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sgctuo.mutation.ChildShipmentGatewayConfigTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   shipmentgatewayconfigtype.ChildShipmentGatewayConfigTypesTable,
			Columns: shipmentgatewayconfigtype.ChildShipmentGatewayConfigTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipmentgatewayconfigtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ShipmentGatewayConfigType{config: sgctuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sgctuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shipmentgatewayconfigtype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
