// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/shipmentgatewayconfig"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/shipmentgatewaydhl"
)

// ShipmentGatewayDhl is the model entity for the ShipmentGatewayDhl schema.
type ShipmentGatewayDhl struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// StringRef holds the value of the "string_ref" field.
	StringRef string `json:"string_ref,omitempty"`
	// ConnectURL holds the value of the "connect_url" field.
	ConnectURL string `json:"connect_url,omitempty"`
	// ConnectTimeout holds the value of the "connect_timeout" field.
	ConnectTimeout int `json:"connect_timeout,omitempty"`
	// HeadVersion holds the value of the "head_version" field.
	HeadVersion string `json:"head_version,omitempty"`
	// HeadAction holds the value of the "head_action" field.
	HeadAction string `json:"head_action,omitempty"`
	// AccessUserID holds the value of the "access_user_id" field.
	AccessUserID string `json:"access_user_id,omitempty"`
	// AccessPassword holds the value of the "access_password" field.
	AccessPassword string `json:"access_password,omitempty"`
	// AccessAccountNbr holds the value of the "access_account_nbr" field.
	AccessAccountNbr string `json:"access_account_nbr,omitempty"`
	// AccessShippingKey holds the value of the "access_shipping_key" field.
	AccessShippingKey string `json:"access_shipping_key,omitempty"`
	// LabelImageFormat holds the value of the "label_image_format" field.
	LabelImageFormat string `json:"label_image_format,omitempty"`
	// RateEstimateTemplate holds the value of the "rate_estimate_template" field.
	RateEstimateTemplate string `json:"rate_estimate_template,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ShipmentGatewayDhlQuery when eager-loading is set.
	Edges                                        ShipmentGatewayDhlEdges `json:"edges"`
	shipment_gateway_config_shipment_gateway_dhl *int
}

// ShipmentGatewayDhlEdges holds the relations/edges for other nodes in the graph.
type ShipmentGatewayDhlEdges struct {
	// ShipmentGatewayConfig holds the value of the shipment_gateway_config edge.
	ShipmentGatewayConfig *ShipmentGatewayConfig `json:"shipment_gateway_config,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ShipmentGatewayConfigOrErr returns the ShipmentGatewayConfig value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ShipmentGatewayDhlEdges) ShipmentGatewayConfigOrErr() (*ShipmentGatewayConfig, error) {
	if e.loadedTypes[0] {
		if e.ShipmentGatewayConfig == nil {
			// The edge shipment_gateway_config was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: shipmentgatewayconfig.Label}
		}
		return e.ShipmentGatewayConfig, nil
	}
	return nil, &NotLoadedError{edge: "shipment_gateway_config"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ShipmentGatewayDhl) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case shipmentgatewaydhl.FieldID, shipmentgatewaydhl.FieldConnectTimeout:
			values[i] = new(sql.NullInt64)
		case shipmentgatewaydhl.FieldStringRef, shipmentgatewaydhl.FieldConnectURL, shipmentgatewaydhl.FieldHeadVersion, shipmentgatewaydhl.FieldHeadAction, shipmentgatewaydhl.FieldAccessUserID, shipmentgatewaydhl.FieldAccessPassword, shipmentgatewaydhl.FieldAccessAccountNbr, shipmentgatewaydhl.FieldAccessShippingKey, shipmentgatewaydhl.FieldLabelImageFormat, shipmentgatewaydhl.FieldRateEstimateTemplate:
			values[i] = new(sql.NullString)
		case shipmentgatewaydhl.FieldCreateTime, shipmentgatewaydhl.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case shipmentgatewaydhl.ForeignKeys[0]: // shipment_gateway_config_shipment_gateway_dhl
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ShipmentGatewayDhl", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ShipmentGatewayDhl fields.
func (sgd *ShipmentGatewayDhl) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case shipmentgatewaydhl.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sgd.ID = int(value.Int64)
		case shipmentgatewaydhl.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				sgd.CreateTime = value.Time
			}
		case shipmentgatewaydhl.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				sgd.UpdateTime = value.Time
			}
		case shipmentgatewaydhl.FieldStringRef:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field string_ref", values[i])
			} else if value.Valid {
				sgd.StringRef = value.String
			}
		case shipmentgatewaydhl.FieldConnectURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field connect_url", values[i])
			} else if value.Valid {
				sgd.ConnectURL = value.String
			}
		case shipmentgatewaydhl.FieldConnectTimeout:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field connect_timeout", values[i])
			} else if value.Valid {
				sgd.ConnectTimeout = int(value.Int64)
			}
		case shipmentgatewaydhl.FieldHeadVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field head_version", values[i])
			} else if value.Valid {
				sgd.HeadVersion = value.String
			}
		case shipmentgatewaydhl.FieldHeadAction:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field head_action", values[i])
			} else if value.Valid {
				sgd.HeadAction = value.String
			}
		case shipmentgatewaydhl.FieldAccessUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field access_user_id", values[i])
			} else if value.Valid {
				sgd.AccessUserID = value.String
			}
		case shipmentgatewaydhl.FieldAccessPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field access_password", values[i])
			} else if value.Valid {
				sgd.AccessPassword = value.String
			}
		case shipmentgatewaydhl.FieldAccessAccountNbr:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field access_account_nbr", values[i])
			} else if value.Valid {
				sgd.AccessAccountNbr = value.String
			}
		case shipmentgatewaydhl.FieldAccessShippingKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field access_shipping_key", values[i])
			} else if value.Valid {
				sgd.AccessShippingKey = value.String
			}
		case shipmentgatewaydhl.FieldLabelImageFormat:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field label_image_format", values[i])
			} else if value.Valid {
				sgd.LabelImageFormat = value.String
			}
		case shipmentgatewaydhl.FieldRateEstimateTemplate:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field rate_estimate_template", values[i])
			} else if value.Valid {
				sgd.RateEstimateTemplate = value.String
			}
		case shipmentgatewaydhl.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field shipment_gateway_config_shipment_gateway_dhl", value)
			} else if value.Valid {
				sgd.shipment_gateway_config_shipment_gateway_dhl = new(int)
				*sgd.shipment_gateway_config_shipment_gateway_dhl = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryShipmentGatewayConfig queries the "shipment_gateway_config" edge of the ShipmentGatewayDhl entity.
func (sgd *ShipmentGatewayDhl) QueryShipmentGatewayConfig() *ShipmentGatewayConfigQuery {
	return (&ShipmentGatewayDhlClient{config: sgd.config}).QueryShipmentGatewayConfig(sgd)
}

// Update returns a builder for updating this ShipmentGatewayDhl.
// Note that you need to call ShipmentGatewayDhl.Unwrap() before calling this method if this ShipmentGatewayDhl
// was returned from a transaction, and the transaction was committed or rolled back.
func (sgd *ShipmentGatewayDhl) Update() *ShipmentGatewayDhlUpdateOne {
	return (&ShipmentGatewayDhlClient{config: sgd.config}).UpdateOne(sgd)
}

// Unwrap unwraps the ShipmentGatewayDhl entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sgd *ShipmentGatewayDhl) Unwrap() *ShipmentGatewayDhl {
	tx, ok := sgd.config.driver.(*txDriver)
	if !ok {
		panic("ent: ShipmentGatewayDhl is not a transactional entity")
	}
	sgd.config.driver = tx.drv
	return sgd
}

// String implements the fmt.Stringer.
func (sgd *ShipmentGatewayDhl) String() string {
	var builder strings.Builder
	builder.WriteString("ShipmentGatewayDhl(")
	builder.WriteString(fmt.Sprintf("id=%v", sgd.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(sgd.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(sgd.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", string_ref=")
	builder.WriteString(sgd.StringRef)
	builder.WriteString(", connect_url=")
	builder.WriteString(sgd.ConnectURL)
	builder.WriteString(", connect_timeout=")
	builder.WriteString(fmt.Sprintf("%v", sgd.ConnectTimeout))
	builder.WriteString(", head_version=")
	builder.WriteString(sgd.HeadVersion)
	builder.WriteString(", head_action=")
	builder.WriteString(sgd.HeadAction)
	builder.WriteString(", access_user_id=")
	builder.WriteString(sgd.AccessUserID)
	builder.WriteString(", access_password=")
	builder.WriteString(sgd.AccessPassword)
	builder.WriteString(", access_account_nbr=")
	builder.WriteString(sgd.AccessAccountNbr)
	builder.WriteString(", access_shipping_key=")
	builder.WriteString(sgd.AccessShippingKey)
	builder.WriteString(", label_image_format=")
	builder.WriteString(sgd.LabelImageFormat)
	builder.WriteString(", rate_estimate_template=")
	builder.WriteString(sgd.RateEstimateTemplate)
	builder.WriteByte(')')
	return builder.String()
}

// ShipmentGatewayDhls is a parsable slice of ShipmentGatewayDhl.
type ShipmentGatewayDhls []*ShipmentGatewayDhl

func (sgd ShipmentGatewayDhls) config(cfg config) {
	for _i := range sgd {
		sgd[_i].config = cfg
	}
}
