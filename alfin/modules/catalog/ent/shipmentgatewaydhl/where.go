// Code generated by entc, DO NOT EDIT.

package shipmentgatewaydhl

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// StringRef applies equality check predicate on the "string_ref" field. It's identical to StringRefEQ.
func StringRef(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStringRef), v))
	})
}

// ConnectURL applies equality check predicate on the "connect_url" field. It's identical to ConnectURLEQ.
func ConnectURL(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldConnectURL), v))
	})
}

// ConnectTimeout applies equality check predicate on the "connect_timeout" field. It's identical to ConnectTimeoutEQ.
func ConnectTimeout(v int) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldConnectTimeout), v))
	})
}

// HeadVersion applies equality check predicate on the "head_version" field. It's identical to HeadVersionEQ.
func HeadVersion(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHeadVersion), v))
	})
}

// HeadAction applies equality check predicate on the "head_action" field. It's identical to HeadActionEQ.
func HeadAction(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHeadAction), v))
	})
}

// AccessUserID applies equality check predicate on the "access_user_id" field. It's identical to AccessUserIDEQ.
func AccessUserID(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccessUserID), v))
	})
}

// AccessPassword applies equality check predicate on the "access_password" field. It's identical to AccessPasswordEQ.
func AccessPassword(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccessPassword), v))
	})
}

// AccessAccountNbr applies equality check predicate on the "access_account_nbr" field. It's identical to AccessAccountNbrEQ.
func AccessAccountNbr(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccessAccountNbr), v))
	})
}

// AccessShippingKey applies equality check predicate on the "access_shipping_key" field. It's identical to AccessShippingKeyEQ.
func AccessShippingKey(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccessShippingKey), v))
	})
}

// LabelImageFormat applies equality check predicate on the "label_image_format" field. It's identical to LabelImageFormatEQ.
func LabelImageFormat(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLabelImageFormat), v))
	})
}

// RateEstimateTemplate applies equality check predicate on the "rate_estimate_template" field. It's identical to RateEstimateTemplateEQ.
func RateEstimateTemplate(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRateEstimateTemplate), v))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.ShipmentGatewayDhl {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.ShipmentGatewayDhl {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), v))
	})
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.ShipmentGatewayDhl {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.ShipmentGatewayDhl {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateTime), v))
	})
}

// StringRefEQ applies the EQ predicate on the "string_ref" field.
func StringRefEQ(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStringRef), v))
	})
}

// StringRefNEQ applies the NEQ predicate on the "string_ref" field.
func StringRefNEQ(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStringRef), v))
	})
}

// StringRefIn applies the In predicate on the "string_ref" field.
func StringRefIn(vs ...string) predicate.ShipmentGatewayDhl {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStringRef), v...))
	})
}

// StringRefNotIn applies the NotIn predicate on the "string_ref" field.
func StringRefNotIn(vs ...string) predicate.ShipmentGatewayDhl {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStringRef), v...))
	})
}

// StringRefGT applies the GT predicate on the "string_ref" field.
func StringRefGT(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStringRef), v))
	})
}

// StringRefGTE applies the GTE predicate on the "string_ref" field.
func StringRefGTE(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStringRef), v))
	})
}

// StringRefLT applies the LT predicate on the "string_ref" field.
func StringRefLT(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStringRef), v))
	})
}

// StringRefLTE applies the LTE predicate on the "string_ref" field.
func StringRefLTE(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStringRef), v))
	})
}

// StringRefContains applies the Contains predicate on the "string_ref" field.
func StringRefContains(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStringRef), v))
	})
}

// StringRefHasPrefix applies the HasPrefix predicate on the "string_ref" field.
func StringRefHasPrefix(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStringRef), v))
	})
}

// StringRefHasSuffix applies the HasSuffix predicate on the "string_ref" field.
func StringRefHasSuffix(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStringRef), v))
	})
}

// StringRefIsNil applies the IsNil predicate on the "string_ref" field.
func StringRefIsNil() predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStringRef)))
	})
}

// StringRefNotNil applies the NotNil predicate on the "string_ref" field.
func StringRefNotNil() predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStringRef)))
	})
}

// StringRefEqualFold applies the EqualFold predicate on the "string_ref" field.
func StringRefEqualFold(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStringRef), v))
	})
}

// StringRefContainsFold applies the ContainsFold predicate on the "string_ref" field.
func StringRefContainsFold(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStringRef), v))
	})
}

// ConnectURLEQ applies the EQ predicate on the "connect_url" field.
func ConnectURLEQ(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldConnectURL), v))
	})
}

// ConnectURLNEQ applies the NEQ predicate on the "connect_url" field.
func ConnectURLNEQ(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldConnectURL), v))
	})
}

// ConnectURLIn applies the In predicate on the "connect_url" field.
func ConnectURLIn(vs ...string) predicate.ShipmentGatewayDhl {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldConnectURL), v...))
	})
}

// ConnectURLNotIn applies the NotIn predicate on the "connect_url" field.
func ConnectURLNotIn(vs ...string) predicate.ShipmentGatewayDhl {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldConnectURL), v...))
	})
}

// ConnectURLGT applies the GT predicate on the "connect_url" field.
func ConnectURLGT(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldConnectURL), v))
	})
}

// ConnectURLGTE applies the GTE predicate on the "connect_url" field.
func ConnectURLGTE(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldConnectURL), v))
	})
}

// ConnectURLLT applies the LT predicate on the "connect_url" field.
func ConnectURLLT(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldConnectURL), v))
	})
}

// ConnectURLLTE applies the LTE predicate on the "connect_url" field.
func ConnectURLLTE(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldConnectURL), v))
	})
}

// ConnectURLContains applies the Contains predicate on the "connect_url" field.
func ConnectURLContains(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldConnectURL), v))
	})
}

// ConnectURLHasPrefix applies the HasPrefix predicate on the "connect_url" field.
func ConnectURLHasPrefix(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldConnectURL), v))
	})
}

// ConnectURLHasSuffix applies the HasSuffix predicate on the "connect_url" field.
func ConnectURLHasSuffix(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldConnectURL), v))
	})
}

// ConnectURLIsNil applies the IsNil predicate on the "connect_url" field.
func ConnectURLIsNil() predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldConnectURL)))
	})
}

// ConnectURLNotNil applies the NotNil predicate on the "connect_url" field.
func ConnectURLNotNil() predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldConnectURL)))
	})
}

// ConnectURLEqualFold applies the EqualFold predicate on the "connect_url" field.
func ConnectURLEqualFold(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldConnectURL), v))
	})
}

// ConnectURLContainsFold applies the ContainsFold predicate on the "connect_url" field.
func ConnectURLContainsFold(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldConnectURL), v))
	})
}

// ConnectTimeoutEQ applies the EQ predicate on the "connect_timeout" field.
func ConnectTimeoutEQ(v int) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldConnectTimeout), v))
	})
}

// ConnectTimeoutNEQ applies the NEQ predicate on the "connect_timeout" field.
func ConnectTimeoutNEQ(v int) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldConnectTimeout), v))
	})
}

// ConnectTimeoutIn applies the In predicate on the "connect_timeout" field.
func ConnectTimeoutIn(vs ...int) predicate.ShipmentGatewayDhl {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldConnectTimeout), v...))
	})
}

// ConnectTimeoutNotIn applies the NotIn predicate on the "connect_timeout" field.
func ConnectTimeoutNotIn(vs ...int) predicate.ShipmentGatewayDhl {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldConnectTimeout), v...))
	})
}

// ConnectTimeoutGT applies the GT predicate on the "connect_timeout" field.
func ConnectTimeoutGT(v int) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldConnectTimeout), v))
	})
}

// ConnectTimeoutGTE applies the GTE predicate on the "connect_timeout" field.
func ConnectTimeoutGTE(v int) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldConnectTimeout), v))
	})
}

// ConnectTimeoutLT applies the LT predicate on the "connect_timeout" field.
func ConnectTimeoutLT(v int) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldConnectTimeout), v))
	})
}

// ConnectTimeoutLTE applies the LTE predicate on the "connect_timeout" field.
func ConnectTimeoutLTE(v int) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldConnectTimeout), v))
	})
}

// ConnectTimeoutIsNil applies the IsNil predicate on the "connect_timeout" field.
func ConnectTimeoutIsNil() predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldConnectTimeout)))
	})
}

// ConnectTimeoutNotNil applies the NotNil predicate on the "connect_timeout" field.
func ConnectTimeoutNotNil() predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldConnectTimeout)))
	})
}

// HeadVersionEQ applies the EQ predicate on the "head_version" field.
func HeadVersionEQ(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHeadVersion), v))
	})
}

// HeadVersionNEQ applies the NEQ predicate on the "head_version" field.
func HeadVersionNEQ(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHeadVersion), v))
	})
}

// HeadVersionIn applies the In predicate on the "head_version" field.
func HeadVersionIn(vs ...string) predicate.ShipmentGatewayDhl {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldHeadVersion), v...))
	})
}

// HeadVersionNotIn applies the NotIn predicate on the "head_version" field.
func HeadVersionNotIn(vs ...string) predicate.ShipmentGatewayDhl {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldHeadVersion), v...))
	})
}

// HeadVersionGT applies the GT predicate on the "head_version" field.
func HeadVersionGT(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHeadVersion), v))
	})
}

// HeadVersionGTE applies the GTE predicate on the "head_version" field.
func HeadVersionGTE(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHeadVersion), v))
	})
}

// HeadVersionLT applies the LT predicate on the "head_version" field.
func HeadVersionLT(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHeadVersion), v))
	})
}

// HeadVersionLTE applies the LTE predicate on the "head_version" field.
func HeadVersionLTE(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHeadVersion), v))
	})
}

// HeadVersionContains applies the Contains predicate on the "head_version" field.
func HeadVersionContains(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldHeadVersion), v))
	})
}

// HeadVersionHasPrefix applies the HasPrefix predicate on the "head_version" field.
func HeadVersionHasPrefix(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldHeadVersion), v))
	})
}

// HeadVersionHasSuffix applies the HasSuffix predicate on the "head_version" field.
func HeadVersionHasSuffix(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldHeadVersion), v))
	})
}

// HeadVersionIsNil applies the IsNil predicate on the "head_version" field.
func HeadVersionIsNil() predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldHeadVersion)))
	})
}

// HeadVersionNotNil applies the NotNil predicate on the "head_version" field.
func HeadVersionNotNil() predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldHeadVersion)))
	})
}

// HeadVersionEqualFold applies the EqualFold predicate on the "head_version" field.
func HeadVersionEqualFold(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldHeadVersion), v))
	})
}

// HeadVersionContainsFold applies the ContainsFold predicate on the "head_version" field.
func HeadVersionContainsFold(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldHeadVersion), v))
	})
}

// HeadActionEQ applies the EQ predicate on the "head_action" field.
func HeadActionEQ(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHeadAction), v))
	})
}

// HeadActionNEQ applies the NEQ predicate on the "head_action" field.
func HeadActionNEQ(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHeadAction), v))
	})
}

// HeadActionIn applies the In predicate on the "head_action" field.
func HeadActionIn(vs ...string) predicate.ShipmentGatewayDhl {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldHeadAction), v...))
	})
}

// HeadActionNotIn applies the NotIn predicate on the "head_action" field.
func HeadActionNotIn(vs ...string) predicate.ShipmentGatewayDhl {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldHeadAction), v...))
	})
}

// HeadActionGT applies the GT predicate on the "head_action" field.
func HeadActionGT(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHeadAction), v))
	})
}

// HeadActionGTE applies the GTE predicate on the "head_action" field.
func HeadActionGTE(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHeadAction), v))
	})
}

// HeadActionLT applies the LT predicate on the "head_action" field.
func HeadActionLT(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHeadAction), v))
	})
}

// HeadActionLTE applies the LTE predicate on the "head_action" field.
func HeadActionLTE(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHeadAction), v))
	})
}

// HeadActionContains applies the Contains predicate on the "head_action" field.
func HeadActionContains(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldHeadAction), v))
	})
}

// HeadActionHasPrefix applies the HasPrefix predicate on the "head_action" field.
func HeadActionHasPrefix(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldHeadAction), v))
	})
}

// HeadActionHasSuffix applies the HasSuffix predicate on the "head_action" field.
func HeadActionHasSuffix(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldHeadAction), v))
	})
}

// HeadActionIsNil applies the IsNil predicate on the "head_action" field.
func HeadActionIsNil() predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldHeadAction)))
	})
}

// HeadActionNotNil applies the NotNil predicate on the "head_action" field.
func HeadActionNotNil() predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldHeadAction)))
	})
}

// HeadActionEqualFold applies the EqualFold predicate on the "head_action" field.
func HeadActionEqualFold(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldHeadAction), v))
	})
}

// HeadActionContainsFold applies the ContainsFold predicate on the "head_action" field.
func HeadActionContainsFold(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldHeadAction), v))
	})
}

// AccessUserIDEQ applies the EQ predicate on the "access_user_id" field.
func AccessUserIDEQ(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccessUserID), v))
	})
}

// AccessUserIDNEQ applies the NEQ predicate on the "access_user_id" field.
func AccessUserIDNEQ(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAccessUserID), v))
	})
}

// AccessUserIDIn applies the In predicate on the "access_user_id" field.
func AccessUserIDIn(vs ...string) predicate.ShipmentGatewayDhl {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAccessUserID), v...))
	})
}

// AccessUserIDNotIn applies the NotIn predicate on the "access_user_id" field.
func AccessUserIDNotIn(vs ...string) predicate.ShipmentGatewayDhl {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAccessUserID), v...))
	})
}

// AccessUserIDGT applies the GT predicate on the "access_user_id" field.
func AccessUserIDGT(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAccessUserID), v))
	})
}

// AccessUserIDGTE applies the GTE predicate on the "access_user_id" field.
func AccessUserIDGTE(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAccessUserID), v))
	})
}

// AccessUserIDLT applies the LT predicate on the "access_user_id" field.
func AccessUserIDLT(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAccessUserID), v))
	})
}

// AccessUserIDLTE applies the LTE predicate on the "access_user_id" field.
func AccessUserIDLTE(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAccessUserID), v))
	})
}

// AccessUserIDContains applies the Contains predicate on the "access_user_id" field.
func AccessUserIDContains(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAccessUserID), v))
	})
}

// AccessUserIDHasPrefix applies the HasPrefix predicate on the "access_user_id" field.
func AccessUserIDHasPrefix(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAccessUserID), v))
	})
}

// AccessUserIDHasSuffix applies the HasSuffix predicate on the "access_user_id" field.
func AccessUserIDHasSuffix(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAccessUserID), v))
	})
}

// AccessUserIDIsNil applies the IsNil predicate on the "access_user_id" field.
func AccessUserIDIsNil() predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAccessUserID)))
	})
}

// AccessUserIDNotNil applies the NotNil predicate on the "access_user_id" field.
func AccessUserIDNotNil() predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAccessUserID)))
	})
}

// AccessUserIDEqualFold applies the EqualFold predicate on the "access_user_id" field.
func AccessUserIDEqualFold(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAccessUserID), v))
	})
}

// AccessUserIDContainsFold applies the ContainsFold predicate on the "access_user_id" field.
func AccessUserIDContainsFold(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAccessUserID), v))
	})
}

// AccessPasswordEQ applies the EQ predicate on the "access_password" field.
func AccessPasswordEQ(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccessPassword), v))
	})
}

// AccessPasswordNEQ applies the NEQ predicate on the "access_password" field.
func AccessPasswordNEQ(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAccessPassword), v))
	})
}

// AccessPasswordIn applies the In predicate on the "access_password" field.
func AccessPasswordIn(vs ...string) predicate.ShipmentGatewayDhl {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAccessPassword), v...))
	})
}

// AccessPasswordNotIn applies the NotIn predicate on the "access_password" field.
func AccessPasswordNotIn(vs ...string) predicate.ShipmentGatewayDhl {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAccessPassword), v...))
	})
}

// AccessPasswordGT applies the GT predicate on the "access_password" field.
func AccessPasswordGT(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAccessPassword), v))
	})
}

// AccessPasswordGTE applies the GTE predicate on the "access_password" field.
func AccessPasswordGTE(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAccessPassword), v))
	})
}

// AccessPasswordLT applies the LT predicate on the "access_password" field.
func AccessPasswordLT(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAccessPassword), v))
	})
}

// AccessPasswordLTE applies the LTE predicate on the "access_password" field.
func AccessPasswordLTE(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAccessPassword), v))
	})
}

// AccessPasswordContains applies the Contains predicate on the "access_password" field.
func AccessPasswordContains(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAccessPassword), v))
	})
}

// AccessPasswordHasPrefix applies the HasPrefix predicate on the "access_password" field.
func AccessPasswordHasPrefix(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAccessPassword), v))
	})
}

// AccessPasswordHasSuffix applies the HasSuffix predicate on the "access_password" field.
func AccessPasswordHasSuffix(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAccessPassword), v))
	})
}

// AccessPasswordIsNil applies the IsNil predicate on the "access_password" field.
func AccessPasswordIsNil() predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAccessPassword)))
	})
}

// AccessPasswordNotNil applies the NotNil predicate on the "access_password" field.
func AccessPasswordNotNil() predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAccessPassword)))
	})
}

// AccessPasswordEqualFold applies the EqualFold predicate on the "access_password" field.
func AccessPasswordEqualFold(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAccessPassword), v))
	})
}

// AccessPasswordContainsFold applies the ContainsFold predicate on the "access_password" field.
func AccessPasswordContainsFold(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAccessPassword), v))
	})
}

// AccessAccountNbrEQ applies the EQ predicate on the "access_account_nbr" field.
func AccessAccountNbrEQ(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccessAccountNbr), v))
	})
}

// AccessAccountNbrNEQ applies the NEQ predicate on the "access_account_nbr" field.
func AccessAccountNbrNEQ(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAccessAccountNbr), v))
	})
}

// AccessAccountNbrIn applies the In predicate on the "access_account_nbr" field.
func AccessAccountNbrIn(vs ...string) predicate.ShipmentGatewayDhl {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAccessAccountNbr), v...))
	})
}

// AccessAccountNbrNotIn applies the NotIn predicate on the "access_account_nbr" field.
func AccessAccountNbrNotIn(vs ...string) predicate.ShipmentGatewayDhl {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAccessAccountNbr), v...))
	})
}

// AccessAccountNbrGT applies the GT predicate on the "access_account_nbr" field.
func AccessAccountNbrGT(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAccessAccountNbr), v))
	})
}

// AccessAccountNbrGTE applies the GTE predicate on the "access_account_nbr" field.
func AccessAccountNbrGTE(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAccessAccountNbr), v))
	})
}

// AccessAccountNbrLT applies the LT predicate on the "access_account_nbr" field.
func AccessAccountNbrLT(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAccessAccountNbr), v))
	})
}

// AccessAccountNbrLTE applies the LTE predicate on the "access_account_nbr" field.
func AccessAccountNbrLTE(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAccessAccountNbr), v))
	})
}

// AccessAccountNbrContains applies the Contains predicate on the "access_account_nbr" field.
func AccessAccountNbrContains(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAccessAccountNbr), v))
	})
}

// AccessAccountNbrHasPrefix applies the HasPrefix predicate on the "access_account_nbr" field.
func AccessAccountNbrHasPrefix(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAccessAccountNbr), v))
	})
}

// AccessAccountNbrHasSuffix applies the HasSuffix predicate on the "access_account_nbr" field.
func AccessAccountNbrHasSuffix(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAccessAccountNbr), v))
	})
}

// AccessAccountNbrIsNil applies the IsNil predicate on the "access_account_nbr" field.
func AccessAccountNbrIsNil() predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAccessAccountNbr)))
	})
}

// AccessAccountNbrNotNil applies the NotNil predicate on the "access_account_nbr" field.
func AccessAccountNbrNotNil() predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAccessAccountNbr)))
	})
}

// AccessAccountNbrEqualFold applies the EqualFold predicate on the "access_account_nbr" field.
func AccessAccountNbrEqualFold(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAccessAccountNbr), v))
	})
}

// AccessAccountNbrContainsFold applies the ContainsFold predicate on the "access_account_nbr" field.
func AccessAccountNbrContainsFold(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAccessAccountNbr), v))
	})
}

// AccessShippingKeyEQ applies the EQ predicate on the "access_shipping_key" field.
func AccessShippingKeyEQ(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccessShippingKey), v))
	})
}

// AccessShippingKeyNEQ applies the NEQ predicate on the "access_shipping_key" field.
func AccessShippingKeyNEQ(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAccessShippingKey), v))
	})
}

// AccessShippingKeyIn applies the In predicate on the "access_shipping_key" field.
func AccessShippingKeyIn(vs ...string) predicate.ShipmentGatewayDhl {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAccessShippingKey), v...))
	})
}

// AccessShippingKeyNotIn applies the NotIn predicate on the "access_shipping_key" field.
func AccessShippingKeyNotIn(vs ...string) predicate.ShipmentGatewayDhl {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAccessShippingKey), v...))
	})
}

// AccessShippingKeyGT applies the GT predicate on the "access_shipping_key" field.
func AccessShippingKeyGT(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAccessShippingKey), v))
	})
}

// AccessShippingKeyGTE applies the GTE predicate on the "access_shipping_key" field.
func AccessShippingKeyGTE(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAccessShippingKey), v))
	})
}

// AccessShippingKeyLT applies the LT predicate on the "access_shipping_key" field.
func AccessShippingKeyLT(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAccessShippingKey), v))
	})
}

// AccessShippingKeyLTE applies the LTE predicate on the "access_shipping_key" field.
func AccessShippingKeyLTE(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAccessShippingKey), v))
	})
}

// AccessShippingKeyContains applies the Contains predicate on the "access_shipping_key" field.
func AccessShippingKeyContains(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAccessShippingKey), v))
	})
}

// AccessShippingKeyHasPrefix applies the HasPrefix predicate on the "access_shipping_key" field.
func AccessShippingKeyHasPrefix(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAccessShippingKey), v))
	})
}

// AccessShippingKeyHasSuffix applies the HasSuffix predicate on the "access_shipping_key" field.
func AccessShippingKeyHasSuffix(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAccessShippingKey), v))
	})
}

// AccessShippingKeyIsNil applies the IsNil predicate on the "access_shipping_key" field.
func AccessShippingKeyIsNil() predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAccessShippingKey)))
	})
}

// AccessShippingKeyNotNil applies the NotNil predicate on the "access_shipping_key" field.
func AccessShippingKeyNotNil() predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAccessShippingKey)))
	})
}

// AccessShippingKeyEqualFold applies the EqualFold predicate on the "access_shipping_key" field.
func AccessShippingKeyEqualFold(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAccessShippingKey), v))
	})
}

// AccessShippingKeyContainsFold applies the ContainsFold predicate on the "access_shipping_key" field.
func AccessShippingKeyContainsFold(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAccessShippingKey), v))
	})
}

// LabelImageFormatEQ applies the EQ predicate on the "label_image_format" field.
func LabelImageFormatEQ(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLabelImageFormat), v))
	})
}

// LabelImageFormatNEQ applies the NEQ predicate on the "label_image_format" field.
func LabelImageFormatNEQ(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLabelImageFormat), v))
	})
}

// LabelImageFormatIn applies the In predicate on the "label_image_format" field.
func LabelImageFormatIn(vs ...string) predicate.ShipmentGatewayDhl {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLabelImageFormat), v...))
	})
}

// LabelImageFormatNotIn applies the NotIn predicate on the "label_image_format" field.
func LabelImageFormatNotIn(vs ...string) predicate.ShipmentGatewayDhl {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLabelImageFormat), v...))
	})
}

// LabelImageFormatGT applies the GT predicate on the "label_image_format" field.
func LabelImageFormatGT(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLabelImageFormat), v))
	})
}

// LabelImageFormatGTE applies the GTE predicate on the "label_image_format" field.
func LabelImageFormatGTE(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLabelImageFormat), v))
	})
}

// LabelImageFormatLT applies the LT predicate on the "label_image_format" field.
func LabelImageFormatLT(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLabelImageFormat), v))
	})
}

// LabelImageFormatLTE applies the LTE predicate on the "label_image_format" field.
func LabelImageFormatLTE(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLabelImageFormat), v))
	})
}

// LabelImageFormatContains applies the Contains predicate on the "label_image_format" field.
func LabelImageFormatContains(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLabelImageFormat), v))
	})
}

// LabelImageFormatHasPrefix applies the HasPrefix predicate on the "label_image_format" field.
func LabelImageFormatHasPrefix(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLabelImageFormat), v))
	})
}

// LabelImageFormatHasSuffix applies the HasSuffix predicate on the "label_image_format" field.
func LabelImageFormatHasSuffix(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLabelImageFormat), v))
	})
}

// LabelImageFormatIsNil applies the IsNil predicate on the "label_image_format" field.
func LabelImageFormatIsNil() predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLabelImageFormat)))
	})
}

// LabelImageFormatNotNil applies the NotNil predicate on the "label_image_format" field.
func LabelImageFormatNotNil() predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLabelImageFormat)))
	})
}

// LabelImageFormatEqualFold applies the EqualFold predicate on the "label_image_format" field.
func LabelImageFormatEqualFold(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLabelImageFormat), v))
	})
}

// LabelImageFormatContainsFold applies the ContainsFold predicate on the "label_image_format" field.
func LabelImageFormatContainsFold(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLabelImageFormat), v))
	})
}

// RateEstimateTemplateEQ applies the EQ predicate on the "rate_estimate_template" field.
func RateEstimateTemplateEQ(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRateEstimateTemplate), v))
	})
}

// RateEstimateTemplateNEQ applies the NEQ predicate on the "rate_estimate_template" field.
func RateEstimateTemplateNEQ(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRateEstimateTemplate), v))
	})
}

// RateEstimateTemplateIn applies the In predicate on the "rate_estimate_template" field.
func RateEstimateTemplateIn(vs ...string) predicate.ShipmentGatewayDhl {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRateEstimateTemplate), v...))
	})
}

// RateEstimateTemplateNotIn applies the NotIn predicate on the "rate_estimate_template" field.
func RateEstimateTemplateNotIn(vs ...string) predicate.ShipmentGatewayDhl {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRateEstimateTemplate), v...))
	})
}

// RateEstimateTemplateGT applies the GT predicate on the "rate_estimate_template" field.
func RateEstimateTemplateGT(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRateEstimateTemplate), v))
	})
}

// RateEstimateTemplateGTE applies the GTE predicate on the "rate_estimate_template" field.
func RateEstimateTemplateGTE(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRateEstimateTemplate), v))
	})
}

// RateEstimateTemplateLT applies the LT predicate on the "rate_estimate_template" field.
func RateEstimateTemplateLT(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRateEstimateTemplate), v))
	})
}

// RateEstimateTemplateLTE applies the LTE predicate on the "rate_estimate_template" field.
func RateEstimateTemplateLTE(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRateEstimateTemplate), v))
	})
}

// RateEstimateTemplateContains applies the Contains predicate on the "rate_estimate_template" field.
func RateEstimateTemplateContains(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRateEstimateTemplate), v))
	})
}

// RateEstimateTemplateHasPrefix applies the HasPrefix predicate on the "rate_estimate_template" field.
func RateEstimateTemplateHasPrefix(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRateEstimateTemplate), v))
	})
}

// RateEstimateTemplateHasSuffix applies the HasSuffix predicate on the "rate_estimate_template" field.
func RateEstimateTemplateHasSuffix(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRateEstimateTemplate), v))
	})
}

// RateEstimateTemplateIsNil applies the IsNil predicate on the "rate_estimate_template" field.
func RateEstimateTemplateIsNil() predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRateEstimateTemplate)))
	})
}

// RateEstimateTemplateNotNil applies the NotNil predicate on the "rate_estimate_template" field.
func RateEstimateTemplateNotNil() predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRateEstimateTemplate)))
	})
}

// RateEstimateTemplateEqualFold applies the EqualFold predicate on the "rate_estimate_template" field.
func RateEstimateTemplateEqualFold(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRateEstimateTemplate), v))
	})
}

// RateEstimateTemplateContainsFold applies the ContainsFold predicate on the "rate_estimate_template" field.
func RateEstimateTemplateContainsFold(v string) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRateEstimateTemplate), v))
	})
}

// HasShipmentGatewayConfig applies the HasEdge predicate on the "shipment_gateway_config" edge.
func HasShipmentGatewayConfig() predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ShipmentGatewayConfigTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, ShipmentGatewayConfigTable, ShipmentGatewayConfigColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasShipmentGatewayConfigWith applies the HasEdge predicate on the "shipment_gateway_config" edge with a given conditions (other predicates).
func HasShipmentGatewayConfigWith(preds ...predicate.ShipmentGatewayConfig) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ShipmentGatewayConfigInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, ShipmentGatewayConfigTable, ShipmentGatewayConfigColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ShipmentGatewayDhl) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ShipmentGatewayDhl) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ShipmentGatewayDhl) predicate.ShipmentGatewayDhl {
	return predicate.ShipmentGatewayDhl(func(s *sql.Selector) {
		p(s.Not())
	})
}
