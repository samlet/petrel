// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/predicate"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/shipmentgatewayconfig"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/shipmentgatewaydhl"
)

// ShipmentGatewayDhlUpdate is the builder for updating ShipmentGatewayDhl entities.
type ShipmentGatewayDhlUpdate struct {
	config
	hooks    []Hook
	mutation *ShipmentGatewayDhlMutation
}

// Where adds a new predicate for the ShipmentGatewayDhlUpdate builder.
func (sgdu *ShipmentGatewayDhlUpdate) Where(ps ...predicate.ShipmentGatewayDhl) *ShipmentGatewayDhlUpdate {
	sgdu.mutation.predicates = append(sgdu.mutation.predicates, ps...)
	return sgdu
}

// SetStringRef sets the "string_ref" field.
func (sgdu *ShipmentGatewayDhlUpdate) SetStringRef(s string) *ShipmentGatewayDhlUpdate {
	sgdu.mutation.SetStringRef(s)
	return sgdu
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (sgdu *ShipmentGatewayDhlUpdate) SetNillableStringRef(s *string) *ShipmentGatewayDhlUpdate {
	if s != nil {
		sgdu.SetStringRef(*s)
	}
	return sgdu
}

// ClearStringRef clears the value of the "string_ref" field.
func (sgdu *ShipmentGatewayDhlUpdate) ClearStringRef() *ShipmentGatewayDhlUpdate {
	sgdu.mutation.ClearStringRef()
	return sgdu
}

// SetConnectURL sets the "connect_url" field.
func (sgdu *ShipmentGatewayDhlUpdate) SetConnectURL(s string) *ShipmentGatewayDhlUpdate {
	sgdu.mutation.SetConnectURL(s)
	return sgdu
}

// SetNillableConnectURL sets the "connect_url" field if the given value is not nil.
func (sgdu *ShipmentGatewayDhlUpdate) SetNillableConnectURL(s *string) *ShipmentGatewayDhlUpdate {
	if s != nil {
		sgdu.SetConnectURL(*s)
	}
	return sgdu
}

// ClearConnectURL clears the value of the "connect_url" field.
func (sgdu *ShipmentGatewayDhlUpdate) ClearConnectURL() *ShipmentGatewayDhlUpdate {
	sgdu.mutation.ClearConnectURL()
	return sgdu
}

// SetConnectTimeout sets the "connect_timeout" field.
func (sgdu *ShipmentGatewayDhlUpdate) SetConnectTimeout(i int) *ShipmentGatewayDhlUpdate {
	sgdu.mutation.ResetConnectTimeout()
	sgdu.mutation.SetConnectTimeout(i)
	return sgdu
}

// SetNillableConnectTimeout sets the "connect_timeout" field if the given value is not nil.
func (sgdu *ShipmentGatewayDhlUpdate) SetNillableConnectTimeout(i *int) *ShipmentGatewayDhlUpdate {
	if i != nil {
		sgdu.SetConnectTimeout(*i)
	}
	return sgdu
}

// AddConnectTimeout adds i to the "connect_timeout" field.
func (sgdu *ShipmentGatewayDhlUpdate) AddConnectTimeout(i int) *ShipmentGatewayDhlUpdate {
	sgdu.mutation.AddConnectTimeout(i)
	return sgdu
}

// ClearConnectTimeout clears the value of the "connect_timeout" field.
func (sgdu *ShipmentGatewayDhlUpdate) ClearConnectTimeout() *ShipmentGatewayDhlUpdate {
	sgdu.mutation.ClearConnectTimeout()
	return sgdu
}

// SetHeadVersion sets the "head_version" field.
func (sgdu *ShipmentGatewayDhlUpdate) SetHeadVersion(s string) *ShipmentGatewayDhlUpdate {
	sgdu.mutation.SetHeadVersion(s)
	return sgdu
}

// SetNillableHeadVersion sets the "head_version" field if the given value is not nil.
func (sgdu *ShipmentGatewayDhlUpdate) SetNillableHeadVersion(s *string) *ShipmentGatewayDhlUpdate {
	if s != nil {
		sgdu.SetHeadVersion(*s)
	}
	return sgdu
}

// ClearHeadVersion clears the value of the "head_version" field.
func (sgdu *ShipmentGatewayDhlUpdate) ClearHeadVersion() *ShipmentGatewayDhlUpdate {
	sgdu.mutation.ClearHeadVersion()
	return sgdu
}

// SetHeadAction sets the "head_action" field.
func (sgdu *ShipmentGatewayDhlUpdate) SetHeadAction(s string) *ShipmentGatewayDhlUpdate {
	sgdu.mutation.SetHeadAction(s)
	return sgdu
}

// SetNillableHeadAction sets the "head_action" field if the given value is not nil.
func (sgdu *ShipmentGatewayDhlUpdate) SetNillableHeadAction(s *string) *ShipmentGatewayDhlUpdate {
	if s != nil {
		sgdu.SetHeadAction(*s)
	}
	return sgdu
}

// ClearHeadAction clears the value of the "head_action" field.
func (sgdu *ShipmentGatewayDhlUpdate) ClearHeadAction() *ShipmentGatewayDhlUpdate {
	sgdu.mutation.ClearHeadAction()
	return sgdu
}

// SetAccessUserID sets the "access_user_id" field.
func (sgdu *ShipmentGatewayDhlUpdate) SetAccessUserID(s string) *ShipmentGatewayDhlUpdate {
	sgdu.mutation.SetAccessUserID(s)
	return sgdu
}

// SetNillableAccessUserID sets the "access_user_id" field if the given value is not nil.
func (sgdu *ShipmentGatewayDhlUpdate) SetNillableAccessUserID(s *string) *ShipmentGatewayDhlUpdate {
	if s != nil {
		sgdu.SetAccessUserID(*s)
	}
	return sgdu
}

// ClearAccessUserID clears the value of the "access_user_id" field.
func (sgdu *ShipmentGatewayDhlUpdate) ClearAccessUserID() *ShipmentGatewayDhlUpdate {
	sgdu.mutation.ClearAccessUserID()
	return sgdu
}

// SetAccessPassword sets the "access_password" field.
func (sgdu *ShipmentGatewayDhlUpdate) SetAccessPassword(s string) *ShipmentGatewayDhlUpdate {
	sgdu.mutation.SetAccessPassword(s)
	return sgdu
}

// SetNillableAccessPassword sets the "access_password" field if the given value is not nil.
func (sgdu *ShipmentGatewayDhlUpdate) SetNillableAccessPassword(s *string) *ShipmentGatewayDhlUpdate {
	if s != nil {
		sgdu.SetAccessPassword(*s)
	}
	return sgdu
}

// ClearAccessPassword clears the value of the "access_password" field.
func (sgdu *ShipmentGatewayDhlUpdate) ClearAccessPassword() *ShipmentGatewayDhlUpdate {
	sgdu.mutation.ClearAccessPassword()
	return sgdu
}

// SetAccessAccountNbr sets the "access_account_nbr" field.
func (sgdu *ShipmentGatewayDhlUpdate) SetAccessAccountNbr(s string) *ShipmentGatewayDhlUpdate {
	sgdu.mutation.SetAccessAccountNbr(s)
	return sgdu
}

// SetNillableAccessAccountNbr sets the "access_account_nbr" field if the given value is not nil.
func (sgdu *ShipmentGatewayDhlUpdate) SetNillableAccessAccountNbr(s *string) *ShipmentGatewayDhlUpdate {
	if s != nil {
		sgdu.SetAccessAccountNbr(*s)
	}
	return sgdu
}

// ClearAccessAccountNbr clears the value of the "access_account_nbr" field.
func (sgdu *ShipmentGatewayDhlUpdate) ClearAccessAccountNbr() *ShipmentGatewayDhlUpdate {
	sgdu.mutation.ClearAccessAccountNbr()
	return sgdu
}

// SetAccessShippingKey sets the "access_shipping_key" field.
func (sgdu *ShipmentGatewayDhlUpdate) SetAccessShippingKey(s string) *ShipmentGatewayDhlUpdate {
	sgdu.mutation.SetAccessShippingKey(s)
	return sgdu
}

// SetNillableAccessShippingKey sets the "access_shipping_key" field if the given value is not nil.
func (sgdu *ShipmentGatewayDhlUpdate) SetNillableAccessShippingKey(s *string) *ShipmentGatewayDhlUpdate {
	if s != nil {
		sgdu.SetAccessShippingKey(*s)
	}
	return sgdu
}

// ClearAccessShippingKey clears the value of the "access_shipping_key" field.
func (sgdu *ShipmentGatewayDhlUpdate) ClearAccessShippingKey() *ShipmentGatewayDhlUpdate {
	sgdu.mutation.ClearAccessShippingKey()
	return sgdu
}

// SetLabelImageFormat sets the "label_image_format" field.
func (sgdu *ShipmentGatewayDhlUpdate) SetLabelImageFormat(s string) *ShipmentGatewayDhlUpdate {
	sgdu.mutation.SetLabelImageFormat(s)
	return sgdu
}

// SetNillableLabelImageFormat sets the "label_image_format" field if the given value is not nil.
func (sgdu *ShipmentGatewayDhlUpdate) SetNillableLabelImageFormat(s *string) *ShipmentGatewayDhlUpdate {
	if s != nil {
		sgdu.SetLabelImageFormat(*s)
	}
	return sgdu
}

// ClearLabelImageFormat clears the value of the "label_image_format" field.
func (sgdu *ShipmentGatewayDhlUpdate) ClearLabelImageFormat() *ShipmentGatewayDhlUpdate {
	sgdu.mutation.ClearLabelImageFormat()
	return sgdu
}

// SetRateEstimateTemplate sets the "rate_estimate_template" field.
func (sgdu *ShipmentGatewayDhlUpdate) SetRateEstimateTemplate(s string) *ShipmentGatewayDhlUpdate {
	sgdu.mutation.SetRateEstimateTemplate(s)
	return sgdu
}

// SetNillableRateEstimateTemplate sets the "rate_estimate_template" field if the given value is not nil.
func (sgdu *ShipmentGatewayDhlUpdate) SetNillableRateEstimateTemplate(s *string) *ShipmentGatewayDhlUpdate {
	if s != nil {
		sgdu.SetRateEstimateTemplate(*s)
	}
	return sgdu
}

// ClearRateEstimateTemplate clears the value of the "rate_estimate_template" field.
func (sgdu *ShipmentGatewayDhlUpdate) ClearRateEstimateTemplate() *ShipmentGatewayDhlUpdate {
	sgdu.mutation.ClearRateEstimateTemplate()
	return sgdu
}

// SetShipmentGatewayConfigID sets the "shipment_gateway_config" edge to the ShipmentGatewayConfig entity by ID.
func (sgdu *ShipmentGatewayDhlUpdate) SetShipmentGatewayConfigID(id int) *ShipmentGatewayDhlUpdate {
	sgdu.mutation.SetShipmentGatewayConfigID(id)
	return sgdu
}

// SetNillableShipmentGatewayConfigID sets the "shipment_gateway_config" edge to the ShipmentGatewayConfig entity by ID if the given value is not nil.
func (sgdu *ShipmentGatewayDhlUpdate) SetNillableShipmentGatewayConfigID(id *int) *ShipmentGatewayDhlUpdate {
	if id != nil {
		sgdu = sgdu.SetShipmentGatewayConfigID(*id)
	}
	return sgdu
}

// SetShipmentGatewayConfig sets the "shipment_gateway_config" edge to the ShipmentGatewayConfig entity.
func (sgdu *ShipmentGatewayDhlUpdate) SetShipmentGatewayConfig(s *ShipmentGatewayConfig) *ShipmentGatewayDhlUpdate {
	return sgdu.SetShipmentGatewayConfigID(s.ID)
}

// Mutation returns the ShipmentGatewayDhlMutation object of the builder.
func (sgdu *ShipmentGatewayDhlUpdate) Mutation() *ShipmentGatewayDhlMutation {
	return sgdu.mutation
}

// ClearShipmentGatewayConfig clears the "shipment_gateway_config" edge to the ShipmentGatewayConfig entity.
func (sgdu *ShipmentGatewayDhlUpdate) ClearShipmentGatewayConfig() *ShipmentGatewayDhlUpdate {
	sgdu.mutation.ClearShipmentGatewayConfig()
	return sgdu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sgdu *ShipmentGatewayDhlUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	sgdu.defaults()
	if len(sgdu.hooks) == 0 {
		affected, err = sgdu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ShipmentGatewayDhlMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			sgdu.mutation = mutation
			affected, err = sgdu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(sgdu.hooks) - 1; i >= 0; i-- {
			mut = sgdu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sgdu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (sgdu *ShipmentGatewayDhlUpdate) SaveX(ctx context.Context) int {
	affected, err := sgdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sgdu *ShipmentGatewayDhlUpdate) Exec(ctx context.Context) error {
	_, err := sgdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sgdu *ShipmentGatewayDhlUpdate) ExecX(ctx context.Context) {
	if err := sgdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sgdu *ShipmentGatewayDhlUpdate) defaults() {
	if _, ok := sgdu.mutation.UpdateTime(); !ok {
		v := shipmentgatewaydhl.UpdateDefaultUpdateTime()
		sgdu.mutation.SetUpdateTime(v)
	}
}

func (sgdu *ShipmentGatewayDhlUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   shipmentgatewaydhl.Table,
			Columns: shipmentgatewaydhl.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: shipmentgatewaydhl.FieldID,
			},
		},
	}
	if ps := sgdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sgdu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: shipmentgatewaydhl.FieldUpdateTime,
		})
	}
	if value, ok := sgdu.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewaydhl.FieldStringRef,
		})
	}
	if sgdu.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmentgatewaydhl.FieldStringRef,
		})
	}
	if value, ok := sgdu.mutation.ConnectURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewaydhl.FieldConnectURL,
		})
	}
	if sgdu.mutation.ConnectURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmentgatewaydhl.FieldConnectURL,
		})
	}
	if value, ok := sgdu.mutation.ConnectTimeout(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shipmentgatewaydhl.FieldConnectTimeout,
		})
	}
	if value, ok := sgdu.mutation.AddedConnectTimeout(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shipmentgatewaydhl.FieldConnectTimeout,
		})
	}
	if sgdu.mutation.ConnectTimeoutCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: shipmentgatewaydhl.FieldConnectTimeout,
		})
	}
	if value, ok := sgdu.mutation.HeadVersion(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewaydhl.FieldHeadVersion,
		})
	}
	if sgdu.mutation.HeadVersionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmentgatewaydhl.FieldHeadVersion,
		})
	}
	if value, ok := sgdu.mutation.HeadAction(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewaydhl.FieldHeadAction,
		})
	}
	if sgdu.mutation.HeadActionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmentgatewaydhl.FieldHeadAction,
		})
	}
	if value, ok := sgdu.mutation.AccessUserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewaydhl.FieldAccessUserID,
		})
	}
	if sgdu.mutation.AccessUserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmentgatewaydhl.FieldAccessUserID,
		})
	}
	if value, ok := sgdu.mutation.AccessPassword(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewaydhl.FieldAccessPassword,
		})
	}
	if sgdu.mutation.AccessPasswordCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmentgatewaydhl.FieldAccessPassword,
		})
	}
	if value, ok := sgdu.mutation.AccessAccountNbr(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewaydhl.FieldAccessAccountNbr,
		})
	}
	if sgdu.mutation.AccessAccountNbrCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmentgatewaydhl.FieldAccessAccountNbr,
		})
	}
	if value, ok := sgdu.mutation.AccessShippingKey(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewaydhl.FieldAccessShippingKey,
		})
	}
	if sgdu.mutation.AccessShippingKeyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmentgatewaydhl.FieldAccessShippingKey,
		})
	}
	if value, ok := sgdu.mutation.LabelImageFormat(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewaydhl.FieldLabelImageFormat,
		})
	}
	if sgdu.mutation.LabelImageFormatCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmentgatewaydhl.FieldLabelImageFormat,
		})
	}
	if value, ok := sgdu.mutation.RateEstimateTemplate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewaydhl.FieldRateEstimateTemplate,
		})
	}
	if sgdu.mutation.RateEstimateTemplateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmentgatewaydhl.FieldRateEstimateTemplate,
		})
	}
	if sgdu.mutation.ShipmentGatewayConfigCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   shipmentgatewaydhl.ShipmentGatewayConfigTable,
			Columns: []string{shipmentgatewaydhl.ShipmentGatewayConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipmentgatewayconfig.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sgdu.mutation.ShipmentGatewayConfigIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   shipmentgatewaydhl.ShipmentGatewayConfigTable,
			Columns: []string{shipmentgatewaydhl.ShipmentGatewayConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipmentgatewayconfig.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sgdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shipmentgatewaydhl.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ShipmentGatewayDhlUpdateOne is the builder for updating a single ShipmentGatewayDhl entity.
type ShipmentGatewayDhlUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ShipmentGatewayDhlMutation
}

// SetStringRef sets the "string_ref" field.
func (sgduo *ShipmentGatewayDhlUpdateOne) SetStringRef(s string) *ShipmentGatewayDhlUpdateOne {
	sgduo.mutation.SetStringRef(s)
	return sgduo
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (sgduo *ShipmentGatewayDhlUpdateOne) SetNillableStringRef(s *string) *ShipmentGatewayDhlUpdateOne {
	if s != nil {
		sgduo.SetStringRef(*s)
	}
	return sgduo
}

// ClearStringRef clears the value of the "string_ref" field.
func (sgduo *ShipmentGatewayDhlUpdateOne) ClearStringRef() *ShipmentGatewayDhlUpdateOne {
	sgduo.mutation.ClearStringRef()
	return sgduo
}

// SetConnectURL sets the "connect_url" field.
func (sgduo *ShipmentGatewayDhlUpdateOne) SetConnectURL(s string) *ShipmentGatewayDhlUpdateOne {
	sgduo.mutation.SetConnectURL(s)
	return sgduo
}

// SetNillableConnectURL sets the "connect_url" field if the given value is not nil.
func (sgduo *ShipmentGatewayDhlUpdateOne) SetNillableConnectURL(s *string) *ShipmentGatewayDhlUpdateOne {
	if s != nil {
		sgduo.SetConnectURL(*s)
	}
	return sgduo
}

// ClearConnectURL clears the value of the "connect_url" field.
func (sgduo *ShipmentGatewayDhlUpdateOne) ClearConnectURL() *ShipmentGatewayDhlUpdateOne {
	sgduo.mutation.ClearConnectURL()
	return sgduo
}

// SetConnectTimeout sets the "connect_timeout" field.
func (sgduo *ShipmentGatewayDhlUpdateOne) SetConnectTimeout(i int) *ShipmentGatewayDhlUpdateOne {
	sgduo.mutation.ResetConnectTimeout()
	sgduo.mutation.SetConnectTimeout(i)
	return sgduo
}

// SetNillableConnectTimeout sets the "connect_timeout" field if the given value is not nil.
func (sgduo *ShipmentGatewayDhlUpdateOne) SetNillableConnectTimeout(i *int) *ShipmentGatewayDhlUpdateOne {
	if i != nil {
		sgduo.SetConnectTimeout(*i)
	}
	return sgduo
}

// AddConnectTimeout adds i to the "connect_timeout" field.
func (sgduo *ShipmentGatewayDhlUpdateOne) AddConnectTimeout(i int) *ShipmentGatewayDhlUpdateOne {
	sgduo.mutation.AddConnectTimeout(i)
	return sgduo
}

// ClearConnectTimeout clears the value of the "connect_timeout" field.
func (sgduo *ShipmentGatewayDhlUpdateOne) ClearConnectTimeout() *ShipmentGatewayDhlUpdateOne {
	sgduo.mutation.ClearConnectTimeout()
	return sgduo
}

// SetHeadVersion sets the "head_version" field.
func (sgduo *ShipmentGatewayDhlUpdateOne) SetHeadVersion(s string) *ShipmentGatewayDhlUpdateOne {
	sgduo.mutation.SetHeadVersion(s)
	return sgduo
}

// SetNillableHeadVersion sets the "head_version" field if the given value is not nil.
func (sgduo *ShipmentGatewayDhlUpdateOne) SetNillableHeadVersion(s *string) *ShipmentGatewayDhlUpdateOne {
	if s != nil {
		sgduo.SetHeadVersion(*s)
	}
	return sgduo
}

// ClearHeadVersion clears the value of the "head_version" field.
func (sgduo *ShipmentGatewayDhlUpdateOne) ClearHeadVersion() *ShipmentGatewayDhlUpdateOne {
	sgduo.mutation.ClearHeadVersion()
	return sgduo
}

// SetHeadAction sets the "head_action" field.
func (sgduo *ShipmentGatewayDhlUpdateOne) SetHeadAction(s string) *ShipmentGatewayDhlUpdateOne {
	sgduo.mutation.SetHeadAction(s)
	return sgduo
}

// SetNillableHeadAction sets the "head_action" field if the given value is not nil.
func (sgduo *ShipmentGatewayDhlUpdateOne) SetNillableHeadAction(s *string) *ShipmentGatewayDhlUpdateOne {
	if s != nil {
		sgduo.SetHeadAction(*s)
	}
	return sgduo
}

// ClearHeadAction clears the value of the "head_action" field.
func (sgduo *ShipmentGatewayDhlUpdateOne) ClearHeadAction() *ShipmentGatewayDhlUpdateOne {
	sgduo.mutation.ClearHeadAction()
	return sgduo
}

// SetAccessUserID sets the "access_user_id" field.
func (sgduo *ShipmentGatewayDhlUpdateOne) SetAccessUserID(s string) *ShipmentGatewayDhlUpdateOne {
	sgduo.mutation.SetAccessUserID(s)
	return sgduo
}

// SetNillableAccessUserID sets the "access_user_id" field if the given value is not nil.
func (sgduo *ShipmentGatewayDhlUpdateOne) SetNillableAccessUserID(s *string) *ShipmentGatewayDhlUpdateOne {
	if s != nil {
		sgduo.SetAccessUserID(*s)
	}
	return sgduo
}

// ClearAccessUserID clears the value of the "access_user_id" field.
func (sgduo *ShipmentGatewayDhlUpdateOne) ClearAccessUserID() *ShipmentGatewayDhlUpdateOne {
	sgduo.mutation.ClearAccessUserID()
	return sgduo
}

// SetAccessPassword sets the "access_password" field.
func (sgduo *ShipmentGatewayDhlUpdateOne) SetAccessPassword(s string) *ShipmentGatewayDhlUpdateOne {
	sgduo.mutation.SetAccessPassword(s)
	return sgduo
}

// SetNillableAccessPassword sets the "access_password" field if the given value is not nil.
func (sgduo *ShipmentGatewayDhlUpdateOne) SetNillableAccessPassword(s *string) *ShipmentGatewayDhlUpdateOne {
	if s != nil {
		sgduo.SetAccessPassword(*s)
	}
	return sgduo
}

// ClearAccessPassword clears the value of the "access_password" field.
func (sgduo *ShipmentGatewayDhlUpdateOne) ClearAccessPassword() *ShipmentGatewayDhlUpdateOne {
	sgduo.mutation.ClearAccessPassword()
	return sgduo
}

// SetAccessAccountNbr sets the "access_account_nbr" field.
func (sgduo *ShipmentGatewayDhlUpdateOne) SetAccessAccountNbr(s string) *ShipmentGatewayDhlUpdateOne {
	sgduo.mutation.SetAccessAccountNbr(s)
	return sgduo
}

// SetNillableAccessAccountNbr sets the "access_account_nbr" field if the given value is not nil.
func (sgduo *ShipmentGatewayDhlUpdateOne) SetNillableAccessAccountNbr(s *string) *ShipmentGatewayDhlUpdateOne {
	if s != nil {
		sgduo.SetAccessAccountNbr(*s)
	}
	return sgduo
}

// ClearAccessAccountNbr clears the value of the "access_account_nbr" field.
func (sgduo *ShipmentGatewayDhlUpdateOne) ClearAccessAccountNbr() *ShipmentGatewayDhlUpdateOne {
	sgduo.mutation.ClearAccessAccountNbr()
	return sgduo
}

// SetAccessShippingKey sets the "access_shipping_key" field.
func (sgduo *ShipmentGatewayDhlUpdateOne) SetAccessShippingKey(s string) *ShipmentGatewayDhlUpdateOne {
	sgduo.mutation.SetAccessShippingKey(s)
	return sgduo
}

// SetNillableAccessShippingKey sets the "access_shipping_key" field if the given value is not nil.
func (sgduo *ShipmentGatewayDhlUpdateOne) SetNillableAccessShippingKey(s *string) *ShipmentGatewayDhlUpdateOne {
	if s != nil {
		sgduo.SetAccessShippingKey(*s)
	}
	return sgduo
}

// ClearAccessShippingKey clears the value of the "access_shipping_key" field.
func (sgduo *ShipmentGatewayDhlUpdateOne) ClearAccessShippingKey() *ShipmentGatewayDhlUpdateOne {
	sgduo.mutation.ClearAccessShippingKey()
	return sgduo
}

// SetLabelImageFormat sets the "label_image_format" field.
func (sgduo *ShipmentGatewayDhlUpdateOne) SetLabelImageFormat(s string) *ShipmentGatewayDhlUpdateOne {
	sgduo.mutation.SetLabelImageFormat(s)
	return sgduo
}

// SetNillableLabelImageFormat sets the "label_image_format" field if the given value is not nil.
func (sgduo *ShipmentGatewayDhlUpdateOne) SetNillableLabelImageFormat(s *string) *ShipmentGatewayDhlUpdateOne {
	if s != nil {
		sgduo.SetLabelImageFormat(*s)
	}
	return sgduo
}

// ClearLabelImageFormat clears the value of the "label_image_format" field.
func (sgduo *ShipmentGatewayDhlUpdateOne) ClearLabelImageFormat() *ShipmentGatewayDhlUpdateOne {
	sgduo.mutation.ClearLabelImageFormat()
	return sgduo
}

// SetRateEstimateTemplate sets the "rate_estimate_template" field.
func (sgduo *ShipmentGatewayDhlUpdateOne) SetRateEstimateTemplate(s string) *ShipmentGatewayDhlUpdateOne {
	sgduo.mutation.SetRateEstimateTemplate(s)
	return sgduo
}

// SetNillableRateEstimateTemplate sets the "rate_estimate_template" field if the given value is not nil.
func (sgduo *ShipmentGatewayDhlUpdateOne) SetNillableRateEstimateTemplate(s *string) *ShipmentGatewayDhlUpdateOne {
	if s != nil {
		sgduo.SetRateEstimateTemplate(*s)
	}
	return sgduo
}

// ClearRateEstimateTemplate clears the value of the "rate_estimate_template" field.
func (sgduo *ShipmentGatewayDhlUpdateOne) ClearRateEstimateTemplate() *ShipmentGatewayDhlUpdateOne {
	sgduo.mutation.ClearRateEstimateTemplate()
	return sgduo
}

// SetShipmentGatewayConfigID sets the "shipment_gateway_config" edge to the ShipmentGatewayConfig entity by ID.
func (sgduo *ShipmentGatewayDhlUpdateOne) SetShipmentGatewayConfigID(id int) *ShipmentGatewayDhlUpdateOne {
	sgduo.mutation.SetShipmentGatewayConfigID(id)
	return sgduo
}

// SetNillableShipmentGatewayConfigID sets the "shipment_gateway_config" edge to the ShipmentGatewayConfig entity by ID if the given value is not nil.
func (sgduo *ShipmentGatewayDhlUpdateOne) SetNillableShipmentGatewayConfigID(id *int) *ShipmentGatewayDhlUpdateOne {
	if id != nil {
		sgduo = sgduo.SetShipmentGatewayConfigID(*id)
	}
	return sgduo
}

// SetShipmentGatewayConfig sets the "shipment_gateway_config" edge to the ShipmentGatewayConfig entity.
func (sgduo *ShipmentGatewayDhlUpdateOne) SetShipmentGatewayConfig(s *ShipmentGatewayConfig) *ShipmentGatewayDhlUpdateOne {
	return sgduo.SetShipmentGatewayConfigID(s.ID)
}

// Mutation returns the ShipmentGatewayDhlMutation object of the builder.
func (sgduo *ShipmentGatewayDhlUpdateOne) Mutation() *ShipmentGatewayDhlMutation {
	return sgduo.mutation
}

// ClearShipmentGatewayConfig clears the "shipment_gateway_config" edge to the ShipmentGatewayConfig entity.
func (sgduo *ShipmentGatewayDhlUpdateOne) ClearShipmentGatewayConfig() *ShipmentGatewayDhlUpdateOne {
	sgduo.mutation.ClearShipmentGatewayConfig()
	return sgduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sgduo *ShipmentGatewayDhlUpdateOne) Select(field string, fields ...string) *ShipmentGatewayDhlUpdateOne {
	sgduo.fields = append([]string{field}, fields...)
	return sgduo
}

// Save executes the query and returns the updated ShipmentGatewayDhl entity.
func (sgduo *ShipmentGatewayDhlUpdateOne) Save(ctx context.Context) (*ShipmentGatewayDhl, error) {
	var (
		err  error
		node *ShipmentGatewayDhl
	)
	sgduo.defaults()
	if len(sgduo.hooks) == 0 {
		node, err = sgduo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ShipmentGatewayDhlMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			sgduo.mutation = mutation
			node, err = sgduo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(sgduo.hooks) - 1; i >= 0; i-- {
			mut = sgduo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sgduo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (sgduo *ShipmentGatewayDhlUpdateOne) SaveX(ctx context.Context) *ShipmentGatewayDhl {
	node, err := sgduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sgduo *ShipmentGatewayDhlUpdateOne) Exec(ctx context.Context) error {
	_, err := sgduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sgduo *ShipmentGatewayDhlUpdateOne) ExecX(ctx context.Context) {
	if err := sgduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sgduo *ShipmentGatewayDhlUpdateOne) defaults() {
	if _, ok := sgduo.mutation.UpdateTime(); !ok {
		v := shipmentgatewaydhl.UpdateDefaultUpdateTime()
		sgduo.mutation.SetUpdateTime(v)
	}
}

func (sgduo *ShipmentGatewayDhlUpdateOne) sqlSave(ctx context.Context) (_node *ShipmentGatewayDhl, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   shipmentgatewaydhl.Table,
			Columns: shipmentgatewaydhl.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: shipmentgatewaydhl.FieldID,
			},
		},
	}
	id, ok := sgduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ShipmentGatewayDhl.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := sgduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, shipmentgatewaydhl.FieldID)
		for _, f := range fields {
			if !shipmentgatewaydhl.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != shipmentgatewaydhl.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sgduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sgduo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: shipmentgatewaydhl.FieldUpdateTime,
		})
	}
	if value, ok := sgduo.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewaydhl.FieldStringRef,
		})
	}
	if sgduo.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmentgatewaydhl.FieldStringRef,
		})
	}
	if value, ok := sgduo.mutation.ConnectURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewaydhl.FieldConnectURL,
		})
	}
	if sgduo.mutation.ConnectURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmentgatewaydhl.FieldConnectURL,
		})
	}
	if value, ok := sgduo.mutation.ConnectTimeout(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shipmentgatewaydhl.FieldConnectTimeout,
		})
	}
	if value, ok := sgduo.mutation.AddedConnectTimeout(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shipmentgatewaydhl.FieldConnectTimeout,
		})
	}
	if sgduo.mutation.ConnectTimeoutCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: shipmentgatewaydhl.FieldConnectTimeout,
		})
	}
	if value, ok := sgduo.mutation.HeadVersion(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewaydhl.FieldHeadVersion,
		})
	}
	if sgduo.mutation.HeadVersionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmentgatewaydhl.FieldHeadVersion,
		})
	}
	if value, ok := sgduo.mutation.HeadAction(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewaydhl.FieldHeadAction,
		})
	}
	if sgduo.mutation.HeadActionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmentgatewaydhl.FieldHeadAction,
		})
	}
	if value, ok := sgduo.mutation.AccessUserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewaydhl.FieldAccessUserID,
		})
	}
	if sgduo.mutation.AccessUserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmentgatewaydhl.FieldAccessUserID,
		})
	}
	if value, ok := sgduo.mutation.AccessPassword(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewaydhl.FieldAccessPassword,
		})
	}
	if sgduo.mutation.AccessPasswordCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmentgatewaydhl.FieldAccessPassword,
		})
	}
	if value, ok := sgduo.mutation.AccessAccountNbr(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewaydhl.FieldAccessAccountNbr,
		})
	}
	if sgduo.mutation.AccessAccountNbrCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmentgatewaydhl.FieldAccessAccountNbr,
		})
	}
	if value, ok := sgduo.mutation.AccessShippingKey(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewaydhl.FieldAccessShippingKey,
		})
	}
	if sgduo.mutation.AccessShippingKeyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmentgatewaydhl.FieldAccessShippingKey,
		})
	}
	if value, ok := sgduo.mutation.LabelImageFormat(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewaydhl.FieldLabelImageFormat,
		})
	}
	if sgduo.mutation.LabelImageFormatCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmentgatewaydhl.FieldLabelImageFormat,
		})
	}
	if value, ok := sgduo.mutation.RateEstimateTemplate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewaydhl.FieldRateEstimateTemplate,
		})
	}
	if sgduo.mutation.RateEstimateTemplateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmentgatewaydhl.FieldRateEstimateTemplate,
		})
	}
	if sgduo.mutation.ShipmentGatewayConfigCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   shipmentgatewaydhl.ShipmentGatewayConfigTable,
			Columns: []string{shipmentgatewaydhl.ShipmentGatewayConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipmentgatewayconfig.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sgduo.mutation.ShipmentGatewayConfigIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   shipmentgatewaydhl.ShipmentGatewayConfigTable,
			Columns: []string{shipmentgatewaydhl.ShipmentGatewayConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipmentgatewayconfig.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ShipmentGatewayDhl{config: sgduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sgduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shipmentgatewaydhl.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
