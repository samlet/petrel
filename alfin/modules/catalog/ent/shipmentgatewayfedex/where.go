// Code generated by entc, DO NOT EDIT.

package shipmentgatewayfedex

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// StringRef applies equality check predicate on the "string_ref" field. It's identical to StringRefEQ.
func StringRef(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStringRef), v))
	})
}

// ConnectURL applies equality check predicate on the "connect_url" field. It's identical to ConnectURLEQ.
func ConnectURL(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldConnectURL), v))
	})
}

// ConnectSoapURL applies equality check predicate on the "connect_soap_url" field. It's identical to ConnectSoapURLEQ.
func ConnectSoapURL(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldConnectSoapURL), v))
	})
}

// ConnectTimeout applies equality check predicate on the "connect_timeout" field. It's identical to ConnectTimeoutEQ.
func ConnectTimeout(v int) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldConnectTimeout), v))
	})
}

// AccessAccountNbr applies equality check predicate on the "access_account_nbr" field. It's identical to AccessAccountNbrEQ.
func AccessAccountNbr(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccessAccountNbr), v))
	})
}

// AccessMeterNumber applies equality check predicate on the "access_meter_number" field. It's identical to AccessMeterNumberEQ.
func AccessMeterNumber(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccessMeterNumber), v))
	})
}

// AccessUserKey applies equality check predicate on the "access_user_key" field. It's identical to AccessUserKeyEQ.
func AccessUserKey(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccessUserKey), v))
	})
}

// AccessUserPwd applies equality check predicate on the "access_user_pwd" field. It's identical to AccessUserPwdEQ.
func AccessUserPwd(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccessUserPwd), v))
	})
}

// LabelImageType applies equality check predicate on the "label_image_type" field. It's identical to LabelImageTypeEQ.
func LabelImageType(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLabelImageType), v))
	})
}

// DefaultDropoffType applies equality check predicate on the "default_dropoff_type" field. It's identical to DefaultDropoffTypeEQ.
func DefaultDropoffType(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDefaultDropoffType), v))
	})
}

// DefaultPackagingType applies equality check predicate on the "default_packaging_type" field. It's identical to DefaultPackagingTypeEQ.
func DefaultPackagingType(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDefaultPackagingType), v))
	})
}

// TemplateShipment applies equality check predicate on the "template_shipment" field. It's identical to TemplateShipmentEQ.
func TemplateShipment(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTemplateShipment), v))
	})
}

// TemplateSubscription applies equality check predicate on the "template_subscription" field. It's identical to TemplateSubscriptionEQ.
func TemplateSubscription(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTemplateSubscription), v))
	})
}

// RateEstimateTemplate applies equality check predicate on the "rate_estimate_template" field. It's identical to RateEstimateTemplateEQ.
func RateEstimateTemplate(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRateEstimateTemplate), v))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.ShipmentGatewayFedex {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.ShipmentGatewayFedex {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), v))
	})
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.ShipmentGatewayFedex {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.ShipmentGatewayFedex {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateTime), v))
	})
}

// StringRefEQ applies the EQ predicate on the "string_ref" field.
func StringRefEQ(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStringRef), v))
	})
}

// StringRefNEQ applies the NEQ predicate on the "string_ref" field.
func StringRefNEQ(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStringRef), v))
	})
}

// StringRefIn applies the In predicate on the "string_ref" field.
func StringRefIn(vs ...string) predicate.ShipmentGatewayFedex {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStringRef), v...))
	})
}

// StringRefNotIn applies the NotIn predicate on the "string_ref" field.
func StringRefNotIn(vs ...string) predicate.ShipmentGatewayFedex {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStringRef), v...))
	})
}

// StringRefGT applies the GT predicate on the "string_ref" field.
func StringRefGT(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStringRef), v))
	})
}

// StringRefGTE applies the GTE predicate on the "string_ref" field.
func StringRefGTE(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStringRef), v))
	})
}

// StringRefLT applies the LT predicate on the "string_ref" field.
func StringRefLT(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStringRef), v))
	})
}

// StringRefLTE applies the LTE predicate on the "string_ref" field.
func StringRefLTE(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStringRef), v))
	})
}

// StringRefContains applies the Contains predicate on the "string_ref" field.
func StringRefContains(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStringRef), v))
	})
}

// StringRefHasPrefix applies the HasPrefix predicate on the "string_ref" field.
func StringRefHasPrefix(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStringRef), v))
	})
}

// StringRefHasSuffix applies the HasSuffix predicate on the "string_ref" field.
func StringRefHasSuffix(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStringRef), v))
	})
}

// StringRefIsNil applies the IsNil predicate on the "string_ref" field.
func StringRefIsNil() predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStringRef)))
	})
}

// StringRefNotNil applies the NotNil predicate on the "string_ref" field.
func StringRefNotNil() predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStringRef)))
	})
}

// StringRefEqualFold applies the EqualFold predicate on the "string_ref" field.
func StringRefEqualFold(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStringRef), v))
	})
}

// StringRefContainsFold applies the ContainsFold predicate on the "string_ref" field.
func StringRefContainsFold(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStringRef), v))
	})
}

// ConnectURLEQ applies the EQ predicate on the "connect_url" field.
func ConnectURLEQ(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldConnectURL), v))
	})
}

// ConnectURLNEQ applies the NEQ predicate on the "connect_url" field.
func ConnectURLNEQ(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldConnectURL), v))
	})
}

// ConnectURLIn applies the In predicate on the "connect_url" field.
func ConnectURLIn(vs ...string) predicate.ShipmentGatewayFedex {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldConnectURL), v...))
	})
}

// ConnectURLNotIn applies the NotIn predicate on the "connect_url" field.
func ConnectURLNotIn(vs ...string) predicate.ShipmentGatewayFedex {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldConnectURL), v...))
	})
}

// ConnectURLGT applies the GT predicate on the "connect_url" field.
func ConnectURLGT(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldConnectURL), v))
	})
}

// ConnectURLGTE applies the GTE predicate on the "connect_url" field.
func ConnectURLGTE(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldConnectURL), v))
	})
}

// ConnectURLLT applies the LT predicate on the "connect_url" field.
func ConnectURLLT(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldConnectURL), v))
	})
}

// ConnectURLLTE applies the LTE predicate on the "connect_url" field.
func ConnectURLLTE(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldConnectURL), v))
	})
}

// ConnectURLContains applies the Contains predicate on the "connect_url" field.
func ConnectURLContains(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldConnectURL), v))
	})
}

// ConnectURLHasPrefix applies the HasPrefix predicate on the "connect_url" field.
func ConnectURLHasPrefix(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldConnectURL), v))
	})
}

// ConnectURLHasSuffix applies the HasSuffix predicate on the "connect_url" field.
func ConnectURLHasSuffix(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldConnectURL), v))
	})
}

// ConnectURLIsNil applies the IsNil predicate on the "connect_url" field.
func ConnectURLIsNil() predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldConnectURL)))
	})
}

// ConnectURLNotNil applies the NotNil predicate on the "connect_url" field.
func ConnectURLNotNil() predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldConnectURL)))
	})
}

// ConnectURLEqualFold applies the EqualFold predicate on the "connect_url" field.
func ConnectURLEqualFold(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldConnectURL), v))
	})
}

// ConnectURLContainsFold applies the ContainsFold predicate on the "connect_url" field.
func ConnectURLContainsFold(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldConnectURL), v))
	})
}

// ConnectSoapURLEQ applies the EQ predicate on the "connect_soap_url" field.
func ConnectSoapURLEQ(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldConnectSoapURL), v))
	})
}

// ConnectSoapURLNEQ applies the NEQ predicate on the "connect_soap_url" field.
func ConnectSoapURLNEQ(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldConnectSoapURL), v))
	})
}

// ConnectSoapURLIn applies the In predicate on the "connect_soap_url" field.
func ConnectSoapURLIn(vs ...string) predicate.ShipmentGatewayFedex {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldConnectSoapURL), v...))
	})
}

// ConnectSoapURLNotIn applies the NotIn predicate on the "connect_soap_url" field.
func ConnectSoapURLNotIn(vs ...string) predicate.ShipmentGatewayFedex {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldConnectSoapURL), v...))
	})
}

// ConnectSoapURLGT applies the GT predicate on the "connect_soap_url" field.
func ConnectSoapURLGT(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldConnectSoapURL), v))
	})
}

// ConnectSoapURLGTE applies the GTE predicate on the "connect_soap_url" field.
func ConnectSoapURLGTE(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldConnectSoapURL), v))
	})
}

// ConnectSoapURLLT applies the LT predicate on the "connect_soap_url" field.
func ConnectSoapURLLT(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldConnectSoapURL), v))
	})
}

// ConnectSoapURLLTE applies the LTE predicate on the "connect_soap_url" field.
func ConnectSoapURLLTE(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldConnectSoapURL), v))
	})
}

// ConnectSoapURLContains applies the Contains predicate on the "connect_soap_url" field.
func ConnectSoapURLContains(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldConnectSoapURL), v))
	})
}

// ConnectSoapURLHasPrefix applies the HasPrefix predicate on the "connect_soap_url" field.
func ConnectSoapURLHasPrefix(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldConnectSoapURL), v))
	})
}

// ConnectSoapURLHasSuffix applies the HasSuffix predicate on the "connect_soap_url" field.
func ConnectSoapURLHasSuffix(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldConnectSoapURL), v))
	})
}

// ConnectSoapURLIsNil applies the IsNil predicate on the "connect_soap_url" field.
func ConnectSoapURLIsNil() predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldConnectSoapURL)))
	})
}

// ConnectSoapURLNotNil applies the NotNil predicate on the "connect_soap_url" field.
func ConnectSoapURLNotNil() predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldConnectSoapURL)))
	})
}

// ConnectSoapURLEqualFold applies the EqualFold predicate on the "connect_soap_url" field.
func ConnectSoapURLEqualFold(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldConnectSoapURL), v))
	})
}

// ConnectSoapURLContainsFold applies the ContainsFold predicate on the "connect_soap_url" field.
func ConnectSoapURLContainsFold(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldConnectSoapURL), v))
	})
}

// ConnectTimeoutEQ applies the EQ predicate on the "connect_timeout" field.
func ConnectTimeoutEQ(v int) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldConnectTimeout), v))
	})
}

// ConnectTimeoutNEQ applies the NEQ predicate on the "connect_timeout" field.
func ConnectTimeoutNEQ(v int) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldConnectTimeout), v))
	})
}

// ConnectTimeoutIn applies the In predicate on the "connect_timeout" field.
func ConnectTimeoutIn(vs ...int) predicate.ShipmentGatewayFedex {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldConnectTimeout), v...))
	})
}

// ConnectTimeoutNotIn applies the NotIn predicate on the "connect_timeout" field.
func ConnectTimeoutNotIn(vs ...int) predicate.ShipmentGatewayFedex {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldConnectTimeout), v...))
	})
}

// ConnectTimeoutGT applies the GT predicate on the "connect_timeout" field.
func ConnectTimeoutGT(v int) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldConnectTimeout), v))
	})
}

// ConnectTimeoutGTE applies the GTE predicate on the "connect_timeout" field.
func ConnectTimeoutGTE(v int) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldConnectTimeout), v))
	})
}

// ConnectTimeoutLT applies the LT predicate on the "connect_timeout" field.
func ConnectTimeoutLT(v int) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldConnectTimeout), v))
	})
}

// ConnectTimeoutLTE applies the LTE predicate on the "connect_timeout" field.
func ConnectTimeoutLTE(v int) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldConnectTimeout), v))
	})
}

// ConnectTimeoutIsNil applies the IsNil predicate on the "connect_timeout" field.
func ConnectTimeoutIsNil() predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldConnectTimeout)))
	})
}

// ConnectTimeoutNotNil applies the NotNil predicate on the "connect_timeout" field.
func ConnectTimeoutNotNil() predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldConnectTimeout)))
	})
}

// AccessAccountNbrEQ applies the EQ predicate on the "access_account_nbr" field.
func AccessAccountNbrEQ(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccessAccountNbr), v))
	})
}

// AccessAccountNbrNEQ applies the NEQ predicate on the "access_account_nbr" field.
func AccessAccountNbrNEQ(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAccessAccountNbr), v))
	})
}

// AccessAccountNbrIn applies the In predicate on the "access_account_nbr" field.
func AccessAccountNbrIn(vs ...string) predicate.ShipmentGatewayFedex {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAccessAccountNbr), v...))
	})
}

// AccessAccountNbrNotIn applies the NotIn predicate on the "access_account_nbr" field.
func AccessAccountNbrNotIn(vs ...string) predicate.ShipmentGatewayFedex {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAccessAccountNbr), v...))
	})
}

// AccessAccountNbrGT applies the GT predicate on the "access_account_nbr" field.
func AccessAccountNbrGT(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAccessAccountNbr), v))
	})
}

// AccessAccountNbrGTE applies the GTE predicate on the "access_account_nbr" field.
func AccessAccountNbrGTE(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAccessAccountNbr), v))
	})
}

// AccessAccountNbrLT applies the LT predicate on the "access_account_nbr" field.
func AccessAccountNbrLT(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAccessAccountNbr), v))
	})
}

// AccessAccountNbrLTE applies the LTE predicate on the "access_account_nbr" field.
func AccessAccountNbrLTE(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAccessAccountNbr), v))
	})
}

// AccessAccountNbrContains applies the Contains predicate on the "access_account_nbr" field.
func AccessAccountNbrContains(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAccessAccountNbr), v))
	})
}

// AccessAccountNbrHasPrefix applies the HasPrefix predicate on the "access_account_nbr" field.
func AccessAccountNbrHasPrefix(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAccessAccountNbr), v))
	})
}

// AccessAccountNbrHasSuffix applies the HasSuffix predicate on the "access_account_nbr" field.
func AccessAccountNbrHasSuffix(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAccessAccountNbr), v))
	})
}

// AccessAccountNbrIsNil applies the IsNil predicate on the "access_account_nbr" field.
func AccessAccountNbrIsNil() predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAccessAccountNbr)))
	})
}

// AccessAccountNbrNotNil applies the NotNil predicate on the "access_account_nbr" field.
func AccessAccountNbrNotNil() predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAccessAccountNbr)))
	})
}

// AccessAccountNbrEqualFold applies the EqualFold predicate on the "access_account_nbr" field.
func AccessAccountNbrEqualFold(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAccessAccountNbr), v))
	})
}

// AccessAccountNbrContainsFold applies the ContainsFold predicate on the "access_account_nbr" field.
func AccessAccountNbrContainsFold(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAccessAccountNbr), v))
	})
}

// AccessMeterNumberEQ applies the EQ predicate on the "access_meter_number" field.
func AccessMeterNumberEQ(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccessMeterNumber), v))
	})
}

// AccessMeterNumberNEQ applies the NEQ predicate on the "access_meter_number" field.
func AccessMeterNumberNEQ(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAccessMeterNumber), v))
	})
}

// AccessMeterNumberIn applies the In predicate on the "access_meter_number" field.
func AccessMeterNumberIn(vs ...string) predicate.ShipmentGatewayFedex {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAccessMeterNumber), v...))
	})
}

// AccessMeterNumberNotIn applies the NotIn predicate on the "access_meter_number" field.
func AccessMeterNumberNotIn(vs ...string) predicate.ShipmentGatewayFedex {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAccessMeterNumber), v...))
	})
}

// AccessMeterNumberGT applies the GT predicate on the "access_meter_number" field.
func AccessMeterNumberGT(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAccessMeterNumber), v))
	})
}

// AccessMeterNumberGTE applies the GTE predicate on the "access_meter_number" field.
func AccessMeterNumberGTE(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAccessMeterNumber), v))
	})
}

// AccessMeterNumberLT applies the LT predicate on the "access_meter_number" field.
func AccessMeterNumberLT(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAccessMeterNumber), v))
	})
}

// AccessMeterNumberLTE applies the LTE predicate on the "access_meter_number" field.
func AccessMeterNumberLTE(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAccessMeterNumber), v))
	})
}

// AccessMeterNumberContains applies the Contains predicate on the "access_meter_number" field.
func AccessMeterNumberContains(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAccessMeterNumber), v))
	})
}

// AccessMeterNumberHasPrefix applies the HasPrefix predicate on the "access_meter_number" field.
func AccessMeterNumberHasPrefix(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAccessMeterNumber), v))
	})
}

// AccessMeterNumberHasSuffix applies the HasSuffix predicate on the "access_meter_number" field.
func AccessMeterNumberHasSuffix(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAccessMeterNumber), v))
	})
}

// AccessMeterNumberIsNil applies the IsNil predicate on the "access_meter_number" field.
func AccessMeterNumberIsNil() predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAccessMeterNumber)))
	})
}

// AccessMeterNumberNotNil applies the NotNil predicate on the "access_meter_number" field.
func AccessMeterNumberNotNil() predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAccessMeterNumber)))
	})
}

// AccessMeterNumberEqualFold applies the EqualFold predicate on the "access_meter_number" field.
func AccessMeterNumberEqualFold(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAccessMeterNumber), v))
	})
}

// AccessMeterNumberContainsFold applies the ContainsFold predicate on the "access_meter_number" field.
func AccessMeterNumberContainsFold(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAccessMeterNumber), v))
	})
}

// AccessUserKeyEQ applies the EQ predicate on the "access_user_key" field.
func AccessUserKeyEQ(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccessUserKey), v))
	})
}

// AccessUserKeyNEQ applies the NEQ predicate on the "access_user_key" field.
func AccessUserKeyNEQ(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAccessUserKey), v))
	})
}

// AccessUserKeyIn applies the In predicate on the "access_user_key" field.
func AccessUserKeyIn(vs ...string) predicate.ShipmentGatewayFedex {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAccessUserKey), v...))
	})
}

// AccessUserKeyNotIn applies the NotIn predicate on the "access_user_key" field.
func AccessUserKeyNotIn(vs ...string) predicate.ShipmentGatewayFedex {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAccessUserKey), v...))
	})
}

// AccessUserKeyGT applies the GT predicate on the "access_user_key" field.
func AccessUserKeyGT(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAccessUserKey), v))
	})
}

// AccessUserKeyGTE applies the GTE predicate on the "access_user_key" field.
func AccessUserKeyGTE(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAccessUserKey), v))
	})
}

// AccessUserKeyLT applies the LT predicate on the "access_user_key" field.
func AccessUserKeyLT(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAccessUserKey), v))
	})
}

// AccessUserKeyLTE applies the LTE predicate on the "access_user_key" field.
func AccessUserKeyLTE(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAccessUserKey), v))
	})
}

// AccessUserKeyContains applies the Contains predicate on the "access_user_key" field.
func AccessUserKeyContains(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAccessUserKey), v))
	})
}

// AccessUserKeyHasPrefix applies the HasPrefix predicate on the "access_user_key" field.
func AccessUserKeyHasPrefix(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAccessUserKey), v))
	})
}

// AccessUserKeyHasSuffix applies the HasSuffix predicate on the "access_user_key" field.
func AccessUserKeyHasSuffix(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAccessUserKey), v))
	})
}

// AccessUserKeyIsNil applies the IsNil predicate on the "access_user_key" field.
func AccessUserKeyIsNil() predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAccessUserKey)))
	})
}

// AccessUserKeyNotNil applies the NotNil predicate on the "access_user_key" field.
func AccessUserKeyNotNil() predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAccessUserKey)))
	})
}

// AccessUserKeyEqualFold applies the EqualFold predicate on the "access_user_key" field.
func AccessUserKeyEqualFold(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAccessUserKey), v))
	})
}

// AccessUserKeyContainsFold applies the ContainsFold predicate on the "access_user_key" field.
func AccessUserKeyContainsFold(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAccessUserKey), v))
	})
}

// AccessUserPwdEQ applies the EQ predicate on the "access_user_pwd" field.
func AccessUserPwdEQ(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccessUserPwd), v))
	})
}

// AccessUserPwdNEQ applies the NEQ predicate on the "access_user_pwd" field.
func AccessUserPwdNEQ(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAccessUserPwd), v))
	})
}

// AccessUserPwdIn applies the In predicate on the "access_user_pwd" field.
func AccessUserPwdIn(vs ...string) predicate.ShipmentGatewayFedex {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAccessUserPwd), v...))
	})
}

// AccessUserPwdNotIn applies the NotIn predicate on the "access_user_pwd" field.
func AccessUserPwdNotIn(vs ...string) predicate.ShipmentGatewayFedex {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAccessUserPwd), v...))
	})
}

// AccessUserPwdGT applies the GT predicate on the "access_user_pwd" field.
func AccessUserPwdGT(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAccessUserPwd), v))
	})
}

// AccessUserPwdGTE applies the GTE predicate on the "access_user_pwd" field.
func AccessUserPwdGTE(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAccessUserPwd), v))
	})
}

// AccessUserPwdLT applies the LT predicate on the "access_user_pwd" field.
func AccessUserPwdLT(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAccessUserPwd), v))
	})
}

// AccessUserPwdLTE applies the LTE predicate on the "access_user_pwd" field.
func AccessUserPwdLTE(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAccessUserPwd), v))
	})
}

// AccessUserPwdContains applies the Contains predicate on the "access_user_pwd" field.
func AccessUserPwdContains(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAccessUserPwd), v))
	})
}

// AccessUserPwdHasPrefix applies the HasPrefix predicate on the "access_user_pwd" field.
func AccessUserPwdHasPrefix(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAccessUserPwd), v))
	})
}

// AccessUserPwdHasSuffix applies the HasSuffix predicate on the "access_user_pwd" field.
func AccessUserPwdHasSuffix(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAccessUserPwd), v))
	})
}

// AccessUserPwdIsNil applies the IsNil predicate on the "access_user_pwd" field.
func AccessUserPwdIsNil() predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAccessUserPwd)))
	})
}

// AccessUserPwdNotNil applies the NotNil predicate on the "access_user_pwd" field.
func AccessUserPwdNotNil() predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAccessUserPwd)))
	})
}

// AccessUserPwdEqualFold applies the EqualFold predicate on the "access_user_pwd" field.
func AccessUserPwdEqualFold(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAccessUserPwd), v))
	})
}

// AccessUserPwdContainsFold applies the ContainsFold predicate on the "access_user_pwd" field.
func AccessUserPwdContainsFold(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAccessUserPwd), v))
	})
}

// LabelImageTypeEQ applies the EQ predicate on the "label_image_type" field.
func LabelImageTypeEQ(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLabelImageType), v))
	})
}

// LabelImageTypeNEQ applies the NEQ predicate on the "label_image_type" field.
func LabelImageTypeNEQ(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLabelImageType), v))
	})
}

// LabelImageTypeIn applies the In predicate on the "label_image_type" field.
func LabelImageTypeIn(vs ...string) predicate.ShipmentGatewayFedex {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLabelImageType), v...))
	})
}

// LabelImageTypeNotIn applies the NotIn predicate on the "label_image_type" field.
func LabelImageTypeNotIn(vs ...string) predicate.ShipmentGatewayFedex {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLabelImageType), v...))
	})
}

// LabelImageTypeGT applies the GT predicate on the "label_image_type" field.
func LabelImageTypeGT(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLabelImageType), v))
	})
}

// LabelImageTypeGTE applies the GTE predicate on the "label_image_type" field.
func LabelImageTypeGTE(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLabelImageType), v))
	})
}

// LabelImageTypeLT applies the LT predicate on the "label_image_type" field.
func LabelImageTypeLT(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLabelImageType), v))
	})
}

// LabelImageTypeLTE applies the LTE predicate on the "label_image_type" field.
func LabelImageTypeLTE(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLabelImageType), v))
	})
}

// LabelImageTypeContains applies the Contains predicate on the "label_image_type" field.
func LabelImageTypeContains(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLabelImageType), v))
	})
}

// LabelImageTypeHasPrefix applies the HasPrefix predicate on the "label_image_type" field.
func LabelImageTypeHasPrefix(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLabelImageType), v))
	})
}

// LabelImageTypeHasSuffix applies the HasSuffix predicate on the "label_image_type" field.
func LabelImageTypeHasSuffix(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLabelImageType), v))
	})
}

// LabelImageTypeIsNil applies the IsNil predicate on the "label_image_type" field.
func LabelImageTypeIsNil() predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLabelImageType)))
	})
}

// LabelImageTypeNotNil applies the NotNil predicate on the "label_image_type" field.
func LabelImageTypeNotNil() predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLabelImageType)))
	})
}

// LabelImageTypeEqualFold applies the EqualFold predicate on the "label_image_type" field.
func LabelImageTypeEqualFold(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLabelImageType), v))
	})
}

// LabelImageTypeContainsFold applies the ContainsFold predicate on the "label_image_type" field.
func LabelImageTypeContainsFold(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLabelImageType), v))
	})
}

// DefaultDropoffTypeEQ applies the EQ predicate on the "default_dropoff_type" field.
func DefaultDropoffTypeEQ(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDefaultDropoffType), v))
	})
}

// DefaultDropoffTypeNEQ applies the NEQ predicate on the "default_dropoff_type" field.
func DefaultDropoffTypeNEQ(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDefaultDropoffType), v))
	})
}

// DefaultDropoffTypeIn applies the In predicate on the "default_dropoff_type" field.
func DefaultDropoffTypeIn(vs ...string) predicate.ShipmentGatewayFedex {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDefaultDropoffType), v...))
	})
}

// DefaultDropoffTypeNotIn applies the NotIn predicate on the "default_dropoff_type" field.
func DefaultDropoffTypeNotIn(vs ...string) predicate.ShipmentGatewayFedex {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDefaultDropoffType), v...))
	})
}

// DefaultDropoffTypeGT applies the GT predicate on the "default_dropoff_type" field.
func DefaultDropoffTypeGT(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDefaultDropoffType), v))
	})
}

// DefaultDropoffTypeGTE applies the GTE predicate on the "default_dropoff_type" field.
func DefaultDropoffTypeGTE(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDefaultDropoffType), v))
	})
}

// DefaultDropoffTypeLT applies the LT predicate on the "default_dropoff_type" field.
func DefaultDropoffTypeLT(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDefaultDropoffType), v))
	})
}

// DefaultDropoffTypeLTE applies the LTE predicate on the "default_dropoff_type" field.
func DefaultDropoffTypeLTE(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDefaultDropoffType), v))
	})
}

// DefaultDropoffTypeContains applies the Contains predicate on the "default_dropoff_type" field.
func DefaultDropoffTypeContains(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDefaultDropoffType), v))
	})
}

// DefaultDropoffTypeHasPrefix applies the HasPrefix predicate on the "default_dropoff_type" field.
func DefaultDropoffTypeHasPrefix(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDefaultDropoffType), v))
	})
}

// DefaultDropoffTypeHasSuffix applies the HasSuffix predicate on the "default_dropoff_type" field.
func DefaultDropoffTypeHasSuffix(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDefaultDropoffType), v))
	})
}

// DefaultDropoffTypeIsNil applies the IsNil predicate on the "default_dropoff_type" field.
func DefaultDropoffTypeIsNil() predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDefaultDropoffType)))
	})
}

// DefaultDropoffTypeNotNil applies the NotNil predicate on the "default_dropoff_type" field.
func DefaultDropoffTypeNotNil() predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDefaultDropoffType)))
	})
}

// DefaultDropoffTypeEqualFold applies the EqualFold predicate on the "default_dropoff_type" field.
func DefaultDropoffTypeEqualFold(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDefaultDropoffType), v))
	})
}

// DefaultDropoffTypeContainsFold applies the ContainsFold predicate on the "default_dropoff_type" field.
func DefaultDropoffTypeContainsFold(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDefaultDropoffType), v))
	})
}

// DefaultPackagingTypeEQ applies the EQ predicate on the "default_packaging_type" field.
func DefaultPackagingTypeEQ(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDefaultPackagingType), v))
	})
}

// DefaultPackagingTypeNEQ applies the NEQ predicate on the "default_packaging_type" field.
func DefaultPackagingTypeNEQ(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDefaultPackagingType), v))
	})
}

// DefaultPackagingTypeIn applies the In predicate on the "default_packaging_type" field.
func DefaultPackagingTypeIn(vs ...string) predicate.ShipmentGatewayFedex {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDefaultPackagingType), v...))
	})
}

// DefaultPackagingTypeNotIn applies the NotIn predicate on the "default_packaging_type" field.
func DefaultPackagingTypeNotIn(vs ...string) predicate.ShipmentGatewayFedex {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDefaultPackagingType), v...))
	})
}

// DefaultPackagingTypeGT applies the GT predicate on the "default_packaging_type" field.
func DefaultPackagingTypeGT(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDefaultPackagingType), v))
	})
}

// DefaultPackagingTypeGTE applies the GTE predicate on the "default_packaging_type" field.
func DefaultPackagingTypeGTE(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDefaultPackagingType), v))
	})
}

// DefaultPackagingTypeLT applies the LT predicate on the "default_packaging_type" field.
func DefaultPackagingTypeLT(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDefaultPackagingType), v))
	})
}

// DefaultPackagingTypeLTE applies the LTE predicate on the "default_packaging_type" field.
func DefaultPackagingTypeLTE(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDefaultPackagingType), v))
	})
}

// DefaultPackagingTypeContains applies the Contains predicate on the "default_packaging_type" field.
func DefaultPackagingTypeContains(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDefaultPackagingType), v))
	})
}

// DefaultPackagingTypeHasPrefix applies the HasPrefix predicate on the "default_packaging_type" field.
func DefaultPackagingTypeHasPrefix(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDefaultPackagingType), v))
	})
}

// DefaultPackagingTypeHasSuffix applies the HasSuffix predicate on the "default_packaging_type" field.
func DefaultPackagingTypeHasSuffix(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDefaultPackagingType), v))
	})
}

// DefaultPackagingTypeIsNil applies the IsNil predicate on the "default_packaging_type" field.
func DefaultPackagingTypeIsNil() predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDefaultPackagingType)))
	})
}

// DefaultPackagingTypeNotNil applies the NotNil predicate on the "default_packaging_type" field.
func DefaultPackagingTypeNotNil() predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDefaultPackagingType)))
	})
}

// DefaultPackagingTypeEqualFold applies the EqualFold predicate on the "default_packaging_type" field.
func DefaultPackagingTypeEqualFold(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDefaultPackagingType), v))
	})
}

// DefaultPackagingTypeContainsFold applies the ContainsFold predicate on the "default_packaging_type" field.
func DefaultPackagingTypeContainsFold(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDefaultPackagingType), v))
	})
}

// TemplateShipmentEQ applies the EQ predicate on the "template_shipment" field.
func TemplateShipmentEQ(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTemplateShipment), v))
	})
}

// TemplateShipmentNEQ applies the NEQ predicate on the "template_shipment" field.
func TemplateShipmentNEQ(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTemplateShipment), v))
	})
}

// TemplateShipmentIn applies the In predicate on the "template_shipment" field.
func TemplateShipmentIn(vs ...string) predicate.ShipmentGatewayFedex {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTemplateShipment), v...))
	})
}

// TemplateShipmentNotIn applies the NotIn predicate on the "template_shipment" field.
func TemplateShipmentNotIn(vs ...string) predicate.ShipmentGatewayFedex {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTemplateShipment), v...))
	})
}

// TemplateShipmentGT applies the GT predicate on the "template_shipment" field.
func TemplateShipmentGT(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTemplateShipment), v))
	})
}

// TemplateShipmentGTE applies the GTE predicate on the "template_shipment" field.
func TemplateShipmentGTE(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTemplateShipment), v))
	})
}

// TemplateShipmentLT applies the LT predicate on the "template_shipment" field.
func TemplateShipmentLT(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTemplateShipment), v))
	})
}

// TemplateShipmentLTE applies the LTE predicate on the "template_shipment" field.
func TemplateShipmentLTE(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTemplateShipment), v))
	})
}

// TemplateShipmentContains applies the Contains predicate on the "template_shipment" field.
func TemplateShipmentContains(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTemplateShipment), v))
	})
}

// TemplateShipmentHasPrefix applies the HasPrefix predicate on the "template_shipment" field.
func TemplateShipmentHasPrefix(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTemplateShipment), v))
	})
}

// TemplateShipmentHasSuffix applies the HasSuffix predicate on the "template_shipment" field.
func TemplateShipmentHasSuffix(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTemplateShipment), v))
	})
}

// TemplateShipmentIsNil applies the IsNil predicate on the "template_shipment" field.
func TemplateShipmentIsNil() predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTemplateShipment)))
	})
}

// TemplateShipmentNotNil applies the NotNil predicate on the "template_shipment" field.
func TemplateShipmentNotNil() predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTemplateShipment)))
	})
}

// TemplateShipmentEqualFold applies the EqualFold predicate on the "template_shipment" field.
func TemplateShipmentEqualFold(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTemplateShipment), v))
	})
}

// TemplateShipmentContainsFold applies the ContainsFold predicate on the "template_shipment" field.
func TemplateShipmentContainsFold(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTemplateShipment), v))
	})
}

// TemplateSubscriptionEQ applies the EQ predicate on the "template_subscription" field.
func TemplateSubscriptionEQ(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTemplateSubscription), v))
	})
}

// TemplateSubscriptionNEQ applies the NEQ predicate on the "template_subscription" field.
func TemplateSubscriptionNEQ(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTemplateSubscription), v))
	})
}

// TemplateSubscriptionIn applies the In predicate on the "template_subscription" field.
func TemplateSubscriptionIn(vs ...string) predicate.ShipmentGatewayFedex {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTemplateSubscription), v...))
	})
}

// TemplateSubscriptionNotIn applies the NotIn predicate on the "template_subscription" field.
func TemplateSubscriptionNotIn(vs ...string) predicate.ShipmentGatewayFedex {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTemplateSubscription), v...))
	})
}

// TemplateSubscriptionGT applies the GT predicate on the "template_subscription" field.
func TemplateSubscriptionGT(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTemplateSubscription), v))
	})
}

// TemplateSubscriptionGTE applies the GTE predicate on the "template_subscription" field.
func TemplateSubscriptionGTE(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTemplateSubscription), v))
	})
}

// TemplateSubscriptionLT applies the LT predicate on the "template_subscription" field.
func TemplateSubscriptionLT(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTemplateSubscription), v))
	})
}

// TemplateSubscriptionLTE applies the LTE predicate on the "template_subscription" field.
func TemplateSubscriptionLTE(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTemplateSubscription), v))
	})
}

// TemplateSubscriptionContains applies the Contains predicate on the "template_subscription" field.
func TemplateSubscriptionContains(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTemplateSubscription), v))
	})
}

// TemplateSubscriptionHasPrefix applies the HasPrefix predicate on the "template_subscription" field.
func TemplateSubscriptionHasPrefix(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTemplateSubscription), v))
	})
}

// TemplateSubscriptionHasSuffix applies the HasSuffix predicate on the "template_subscription" field.
func TemplateSubscriptionHasSuffix(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTemplateSubscription), v))
	})
}

// TemplateSubscriptionIsNil applies the IsNil predicate on the "template_subscription" field.
func TemplateSubscriptionIsNil() predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTemplateSubscription)))
	})
}

// TemplateSubscriptionNotNil applies the NotNil predicate on the "template_subscription" field.
func TemplateSubscriptionNotNil() predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTemplateSubscription)))
	})
}

// TemplateSubscriptionEqualFold applies the EqualFold predicate on the "template_subscription" field.
func TemplateSubscriptionEqualFold(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTemplateSubscription), v))
	})
}

// TemplateSubscriptionContainsFold applies the ContainsFold predicate on the "template_subscription" field.
func TemplateSubscriptionContainsFold(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTemplateSubscription), v))
	})
}

// RateEstimateTemplateEQ applies the EQ predicate on the "rate_estimate_template" field.
func RateEstimateTemplateEQ(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRateEstimateTemplate), v))
	})
}

// RateEstimateTemplateNEQ applies the NEQ predicate on the "rate_estimate_template" field.
func RateEstimateTemplateNEQ(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRateEstimateTemplate), v))
	})
}

// RateEstimateTemplateIn applies the In predicate on the "rate_estimate_template" field.
func RateEstimateTemplateIn(vs ...string) predicate.ShipmentGatewayFedex {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRateEstimateTemplate), v...))
	})
}

// RateEstimateTemplateNotIn applies the NotIn predicate on the "rate_estimate_template" field.
func RateEstimateTemplateNotIn(vs ...string) predicate.ShipmentGatewayFedex {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRateEstimateTemplate), v...))
	})
}

// RateEstimateTemplateGT applies the GT predicate on the "rate_estimate_template" field.
func RateEstimateTemplateGT(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRateEstimateTemplate), v))
	})
}

// RateEstimateTemplateGTE applies the GTE predicate on the "rate_estimate_template" field.
func RateEstimateTemplateGTE(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRateEstimateTemplate), v))
	})
}

// RateEstimateTemplateLT applies the LT predicate on the "rate_estimate_template" field.
func RateEstimateTemplateLT(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRateEstimateTemplate), v))
	})
}

// RateEstimateTemplateLTE applies the LTE predicate on the "rate_estimate_template" field.
func RateEstimateTemplateLTE(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRateEstimateTemplate), v))
	})
}

// RateEstimateTemplateContains applies the Contains predicate on the "rate_estimate_template" field.
func RateEstimateTemplateContains(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRateEstimateTemplate), v))
	})
}

// RateEstimateTemplateHasPrefix applies the HasPrefix predicate on the "rate_estimate_template" field.
func RateEstimateTemplateHasPrefix(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRateEstimateTemplate), v))
	})
}

// RateEstimateTemplateHasSuffix applies the HasSuffix predicate on the "rate_estimate_template" field.
func RateEstimateTemplateHasSuffix(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRateEstimateTemplate), v))
	})
}

// RateEstimateTemplateIsNil applies the IsNil predicate on the "rate_estimate_template" field.
func RateEstimateTemplateIsNil() predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRateEstimateTemplate)))
	})
}

// RateEstimateTemplateNotNil applies the NotNil predicate on the "rate_estimate_template" field.
func RateEstimateTemplateNotNil() predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRateEstimateTemplate)))
	})
}

// RateEstimateTemplateEqualFold applies the EqualFold predicate on the "rate_estimate_template" field.
func RateEstimateTemplateEqualFold(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRateEstimateTemplate), v))
	})
}

// RateEstimateTemplateContainsFold applies the ContainsFold predicate on the "rate_estimate_template" field.
func RateEstimateTemplateContainsFold(v string) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRateEstimateTemplate), v))
	})
}

// HasShipmentGatewayConfig applies the HasEdge predicate on the "shipment_gateway_config" edge.
func HasShipmentGatewayConfig() predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ShipmentGatewayConfigTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, ShipmentGatewayConfigTable, ShipmentGatewayConfigColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasShipmentGatewayConfigWith applies the HasEdge predicate on the "shipment_gateway_config" edge with a given conditions (other predicates).
func HasShipmentGatewayConfigWith(preds ...predicate.ShipmentGatewayConfig) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ShipmentGatewayConfigInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, ShipmentGatewayConfigTable, ShipmentGatewayConfigColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ShipmentGatewayFedex) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ShipmentGatewayFedex) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ShipmentGatewayFedex) predicate.ShipmentGatewayFedex {
	return predicate.ShipmentGatewayFedex(func(s *sql.Selector) {
		p(s.Not())
	})
}
