// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/shipmentgatewayconfig"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/shipmentgatewayfedex"
)

// ShipmentGatewayFedexCreate is the builder for creating a ShipmentGatewayFedex entity.
type ShipmentGatewayFedexCreate struct {
	config
	mutation *ShipmentGatewayFedexMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (sgfc *ShipmentGatewayFedexCreate) SetCreateTime(t time.Time) *ShipmentGatewayFedexCreate {
	sgfc.mutation.SetCreateTime(t)
	return sgfc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (sgfc *ShipmentGatewayFedexCreate) SetNillableCreateTime(t *time.Time) *ShipmentGatewayFedexCreate {
	if t != nil {
		sgfc.SetCreateTime(*t)
	}
	return sgfc
}

// SetUpdateTime sets the "update_time" field.
func (sgfc *ShipmentGatewayFedexCreate) SetUpdateTime(t time.Time) *ShipmentGatewayFedexCreate {
	sgfc.mutation.SetUpdateTime(t)
	return sgfc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (sgfc *ShipmentGatewayFedexCreate) SetNillableUpdateTime(t *time.Time) *ShipmentGatewayFedexCreate {
	if t != nil {
		sgfc.SetUpdateTime(*t)
	}
	return sgfc
}

// SetStringRef sets the "string_ref" field.
func (sgfc *ShipmentGatewayFedexCreate) SetStringRef(s string) *ShipmentGatewayFedexCreate {
	sgfc.mutation.SetStringRef(s)
	return sgfc
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (sgfc *ShipmentGatewayFedexCreate) SetNillableStringRef(s *string) *ShipmentGatewayFedexCreate {
	if s != nil {
		sgfc.SetStringRef(*s)
	}
	return sgfc
}

// SetConnectURL sets the "connect_url" field.
func (sgfc *ShipmentGatewayFedexCreate) SetConnectURL(s string) *ShipmentGatewayFedexCreate {
	sgfc.mutation.SetConnectURL(s)
	return sgfc
}

// SetNillableConnectURL sets the "connect_url" field if the given value is not nil.
func (sgfc *ShipmentGatewayFedexCreate) SetNillableConnectURL(s *string) *ShipmentGatewayFedexCreate {
	if s != nil {
		sgfc.SetConnectURL(*s)
	}
	return sgfc
}

// SetConnectSoapURL sets the "connect_soap_url" field.
func (sgfc *ShipmentGatewayFedexCreate) SetConnectSoapURL(s string) *ShipmentGatewayFedexCreate {
	sgfc.mutation.SetConnectSoapURL(s)
	return sgfc
}

// SetNillableConnectSoapURL sets the "connect_soap_url" field if the given value is not nil.
func (sgfc *ShipmentGatewayFedexCreate) SetNillableConnectSoapURL(s *string) *ShipmentGatewayFedexCreate {
	if s != nil {
		sgfc.SetConnectSoapURL(*s)
	}
	return sgfc
}

// SetConnectTimeout sets the "connect_timeout" field.
func (sgfc *ShipmentGatewayFedexCreate) SetConnectTimeout(i int) *ShipmentGatewayFedexCreate {
	sgfc.mutation.SetConnectTimeout(i)
	return sgfc
}

// SetNillableConnectTimeout sets the "connect_timeout" field if the given value is not nil.
func (sgfc *ShipmentGatewayFedexCreate) SetNillableConnectTimeout(i *int) *ShipmentGatewayFedexCreate {
	if i != nil {
		sgfc.SetConnectTimeout(*i)
	}
	return sgfc
}

// SetAccessAccountNbr sets the "access_account_nbr" field.
func (sgfc *ShipmentGatewayFedexCreate) SetAccessAccountNbr(s string) *ShipmentGatewayFedexCreate {
	sgfc.mutation.SetAccessAccountNbr(s)
	return sgfc
}

// SetNillableAccessAccountNbr sets the "access_account_nbr" field if the given value is not nil.
func (sgfc *ShipmentGatewayFedexCreate) SetNillableAccessAccountNbr(s *string) *ShipmentGatewayFedexCreate {
	if s != nil {
		sgfc.SetAccessAccountNbr(*s)
	}
	return sgfc
}

// SetAccessMeterNumber sets the "access_meter_number" field.
func (sgfc *ShipmentGatewayFedexCreate) SetAccessMeterNumber(s string) *ShipmentGatewayFedexCreate {
	sgfc.mutation.SetAccessMeterNumber(s)
	return sgfc
}

// SetNillableAccessMeterNumber sets the "access_meter_number" field if the given value is not nil.
func (sgfc *ShipmentGatewayFedexCreate) SetNillableAccessMeterNumber(s *string) *ShipmentGatewayFedexCreate {
	if s != nil {
		sgfc.SetAccessMeterNumber(*s)
	}
	return sgfc
}

// SetAccessUserKey sets the "access_user_key" field.
func (sgfc *ShipmentGatewayFedexCreate) SetAccessUserKey(s string) *ShipmentGatewayFedexCreate {
	sgfc.mutation.SetAccessUserKey(s)
	return sgfc
}

// SetNillableAccessUserKey sets the "access_user_key" field if the given value is not nil.
func (sgfc *ShipmentGatewayFedexCreate) SetNillableAccessUserKey(s *string) *ShipmentGatewayFedexCreate {
	if s != nil {
		sgfc.SetAccessUserKey(*s)
	}
	return sgfc
}

// SetAccessUserPwd sets the "access_user_pwd" field.
func (sgfc *ShipmentGatewayFedexCreate) SetAccessUserPwd(s string) *ShipmentGatewayFedexCreate {
	sgfc.mutation.SetAccessUserPwd(s)
	return sgfc
}

// SetNillableAccessUserPwd sets the "access_user_pwd" field if the given value is not nil.
func (sgfc *ShipmentGatewayFedexCreate) SetNillableAccessUserPwd(s *string) *ShipmentGatewayFedexCreate {
	if s != nil {
		sgfc.SetAccessUserPwd(*s)
	}
	return sgfc
}

// SetLabelImageType sets the "label_image_type" field.
func (sgfc *ShipmentGatewayFedexCreate) SetLabelImageType(s string) *ShipmentGatewayFedexCreate {
	sgfc.mutation.SetLabelImageType(s)
	return sgfc
}

// SetNillableLabelImageType sets the "label_image_type" field if the given value is not nil.
func (sgfc *ShipmentGatewayFedexCreate) SetNillableLabelImageType(s *string) *ShipmentGatewayFedexCreate {
	if s != nil {
		sgfc.SetLabelImageType(*s)
	}
	return sgfc
}

// SetDefaultDropoffType sets the "default_dropoff_type" field.
func (sgfc *ShipmentGatewayFedexCreate) SetDefaultDropoffType(s string) *ShipmentGatewayFedexCreate {
	sgfc.mutation.SetDefaultDropoffType(s)
	return sgfc
}

// SetNillableDefaultDropoffType sets the "default_dropoff_type" field if the given value is not nil.
func (sgfc *ShipmentGatewayFedexCreate) SetNillableDefaultDropoffType(s *string) *ShipmentGatewayFedexCreate {
	if s != nil {
		sgfc.SetDefaultDropoffType(*s)
	}
	return sgfc
}

// SetDefaultPackagingType sets the "default_packaging_type" field.
func (sgfc *ShipmentGatewayFedexCreate) SetDefaultPackagingType(s string) *ShipmentGatewayFedexCreate {
	sgfc.mutation.SetDefaultPackagingType(s)
	return sgfc
}

// SetNillableDefaultPackagingType sets the "default_packaging_type" field if the given value is not nil.
func (sgfc *ShipmentGatewayFedexCreate) SetNillableDefaultPackagingType(s *string) *ShipmentGatewayFedexCreate {
	if s != nil {
		sgfc.SetDefaultPackagingType(*s)
	}
	return sgfc
}

// SetTemplateShipment sets the "template_shipment" field.
func (sgfc *ShipmentGatewayFedexCreate) SetTemplateShipment(s string) *ShipmentGatewayFedexCreate {
	sgfc.mutation.SetTemplateShipment(s)
	return sgfc
}

// SetNillableTemplateShipment sets the "template_shipment" field if the given value is not nil.
func (sgfc *ShipmentGatewayFedexCreate) SetNillableTemplateShipment(s *string) *ShipmentGatewayFedexCreate {
	if s != nil {
		sgfc.SetTemplateShipment(*s)
	}
	return sgfc
}

// SetTemplateSubscription sets the "template_subscription" field.
func (sgfc *ShipmentGatewayFedexCreate) SetTemplateSubscription(s string) *ShipmentGatewayFedexCreate {
	sgfc.mutation.SetTemplateSubscription(s)
	return sgfc
}

// SetNillableTemplateSubscription sets the "template_subscription" field if the given value is not nil.
func (sgfc *ShipmentGatewayFedexCreate) SetNillableTemplateSubscription(s *string) *ShipmentGatewayFedexCreate {
	if s != nil {
		sgfc.SetTemplateSubscription(*s)
	}
	return sgfc
}

// SetRateEstimateTemplate sets the "rate_estimate_template" field.
func (sgfc *ShipmentGatewayFedexCreate) SetRateEstimateTemplate(s string) *ShipmentGatewayFedexCreate {
	sgfc.mutation.SetRateEstimateTemplate(s)
	return sgfc
}

// SetNillableRateEstimateTemplate sets the "rate_estimate_template" field if the given value is not nil.
func (sgfc *ShipmentGatewayFedexCreate) SetNillableRateEstimateTemplate(s *string) *ShipmentGatewayFedexCreate {
	if s != nil {
		sgfc.SetRateEstimateTemplate(*s)
	}
	return sgfc
}

// SetShipmentGatewayConfigID sets the "shipment_gateway_config" edge to the ShipmentGatewayConfig entity by ID.
func (sgfc *ShipmentGatewayFedexCreate) SetShipmentGatewayConfigID(id int) *ShipmentGatewayFedexCreate {
	sgfc.mutation.SetShipmentGatewayConfigID(id)
	return sgfc
}

// SetNillableShipmentGatewayConfigID sets the "shipment_gateway_config" edge to the ShipmentGatewayConfig entity by ID if the given value is not nil.
func (sgfc *ShipmentGatewayFedexCreate) SetNillableShipmentGatewayConfigID(id *int) *ShipmentGatewayFedexCreate {
	if id != nil {
		sgfc = sgfc.SetShipmentGatewayConfigID(*id)
	}
	return sgfc
}

// SetShipmentGatewayConfig sets the "shipment_gateway_config" edge to the ShipmentGatewayConfig entity.
func (sgfc *ShipmentGatewayFedexCreate) SetShipmentGatewayConfig(s *ShipmentGatewayConfig) *ShipmentGatewayFedexCreate {
	return sgfc.SetShipmentGatewayConfigID(s.ID)
}

// Mutation returns the ShipmentGatewayFedexMutation object of the builder.
func (sgfc *ShipmentGatewayFedexCreate) Mutation() *ShipmentGatewayFedexMutation {
	return sgfc.mutation
}

// Save creates the ShipmentGatewayFedex in the database.
func (sgfc *ShipmentGatewayFedexCreate) Save(ctx context.Context) (*ShipmentGatewayFedex, error) {
	var (
		err  error
		node *ShipmentGatewayFedex
	)
	sgfc.defaults()
	if len(sgfc.hooks) == 0 {
		if err = sgfc.check(); err != nil {
			return nil, err
		}
		node, err = sgfc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ShipmentGatewayFedexMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sgfc.check(); err != nil {
				return nil, err
			}
			sgfc.mutation = mutation
			if node, err = sgfc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(sgfc.hooks) - 1; i >= 0; i-- {
			mut = sgfc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sgfc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sgfc *ShipmentGatewayFedexCreate) SaveX(ctx context.Context) *ShipmentGatewayFedex {
	v, err := sgfc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (sgfc *ShipmentGatewayFedexCreate) defaults() {
	if _, ok := sgfc.mutation.CreateTime(); !ok {
		v := shipmentgatewayfedex.DefaultCreateTime()
		sgfc.mutation.SetCreateTime(v)
	}
	if _, ok := sgfc.mutation.UpdateTime(); !ok {
		v := shipmentgatewayfedex.DefaultUpdateTime()
		sgfc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sgfc *ShipmentGatewayFedexCreate) check() error {
	if _, ok := sgfc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New("ent: missing required field \"create_time\"")}
	}
	if _, ok := sgfc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New("ent: missing required field \"update_time\"")}
	}
	return nil
}

func (sgfc *ShipmentGatewayFedexCreate) sqlSave(ctx context.Context) (*ShipmentGatewayFedex, error) {
	_node, _spec := sgfc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sgfc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (sgfc *ShipmentGatewayFedexCreate) createSpec() (*ShipmentGatewayFedex, *sqlgraph.CreateSpec) {
	var (
		_node = &ShipmentGatewayFedex{config: sgfc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: shipmentgatewayfedex.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: shipmentgatewayfedex.FieldID,
			},
		}
	)
	if value, ok := sgfc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: shipmentgatewayfedex.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := sgfc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: shipmentgatewayfedex.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := sgfc.mutation.StringRef(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewayfedex.FieldStringRef,
		})
		_node.StringRef = value
	}
	if value, ok := sgfc.mutation.ConnectURL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewayfedex.FieldConnectURL,
		})
		_node.ConnectURL = value
	}
	if value, ok := sgfc.mutation.ConnectSoapURL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewayfedex.FieldConnectSoapURL,
		})
		_node.ConnectSoapURL = value
	}
	if value, ok := sgfc.mutation.ConnectTimeout(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shipmentgatewayfedex.FieldConnectTimeout,
		})
		_node.ConnectTimeout = value
	}
	if value, ok := sgfc.mutation.AccessAccountNbr(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewayfedex.FieldAccessAccountNbr,
		})
		_node.AccessAccountNbr = value
	}
	if value, ok := sgfc.mutation.AccessMeterNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewayfedex.FieldAccessMeterNumber,
		})
		_node.AccessMeterNumber = value
	}
	if value, ok := sgfc.mutation.AccessUserKey(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewayfedex.FieldAccessUserKey,
		})
		_node.AccessUserKey = value
	}
	if value, ok := sgfc.mutation.AccessUserPwd(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewayfedex.FieldAccessUserPwd,
		})
		_node.AccessUserPwd = value
	}
	if value, ok := sgfc.mutation.LabelImageType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewayfedex.FieldLabelImageType,
		})
		_node.LabelImageType = value
	}
	if value, ok := sgfc.mutation.DefaultDropoffType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewayfedex.FieldDefaultDropoffType,
		})
		_node.DefaultDropoffType = value
	}
	if value, ok := sgfc.mutation.DefaultPackagingType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewayfedex.FieldDefaultPackagingType,
		})
		_node.DefaultPackagingType = value
	}
	if value, ok := sgfc.mutation.TemplateShipment(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewayfedex.FieldTemplateShipment,
		})
		_node.TemplateShipment = value
	}
	if value, ok := sgfc.mutation.TemplateSubscription(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewayfedex.FieldTemplateSubscription,
		})
		_node.TemplateSubscription = value
	}
	if value, ok := sgfc.mutation.RateEstimateTemplate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewayfedex.FieldRateEstimateTemplate,
		})
		_node.RateEstimateTemplate = value
	}
	if nodes := sgfc.mutation.ShipmentGatewayConfigIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   shipmentgatewayfedex.ShipmentGatewayConfigTable,
			Columns: []string{shipmentgatewayfedex.ShipmentGatewayConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipmentgatewayconfig.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.shipment_gateway_config_shipment_gateway_fedex = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ShipmentGatewayFedexCreateBulk is the builder for creating many ShipmentGatewayFedex entities in bulk.
type ShipmentGatewayFedexCreateBulk struct {
	config
	builders []*ShipmentGatewayFedexCreate
}

// Save creates the ShipmentGatewayFedex entities in the database.
func (sgfcb *ShipmentGatewayFedexCreateBulk) Save(ctx context.Context) ([]*ShipmentGatewayFedex, error) {
	specs := make([]*sqlgraph.CreateSpec, len(sgfcb.builders))
	nodes := make([]*ShipmentGatewayFedex, len(sgfcb.builders))
	mutators := make([]Mutator, len(sgfcb.builders))
	for i := range sgfcb.builders {
		func(i int, root context.Context) {
			builder := sgfcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ShipmentGatewayFedexMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sgfcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sgfcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sgfcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sgfcb *ShipmentGatewayFedexCreateBulk) SaveX(ctx context.Context) []*ShipmentGatewayFedex {
	v, err := sgfcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
