// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/predicate"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/shipmentgatewayconfig"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/shipmentgatewayfedex"
)

// ShipmentGatewayFedexUpdate is the builder for updating ShipmentGatewayFedex entities.
type ShipmentGatewayFedexUpdate struct {
	config
	hooks    []Hook
	mutation *ShipmentGatewayFedexMutation
}

// Where adds a new predicate for the ShipmentGatewayFedexUpdate builder.
func (sgfu *ShipmentGatewayFedexUpdate) Where(ps ...predicate.ShipmentGatewayFedex) *ShipmentGatewayFedexUpdate {
	sgfu.mutation.predicates = append(sgfu.mutation.predicates, ps...)
	return sgfu
}

// SetStringRef sets the "string_ref" field.
func (sgfu *ShipmentGatewayFedexUpdate) SetStringRef(s string) *ShipmentGatewayFedexUpdate {
	sgfu.mutation.SetStringRef(s)
	return sgfu
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (sgfu *ShipmentGatewayFedexUpdate) SetNillableStringRef(s *string) *ShipmentGatewayFedexUpdate {
	if s != nil {
		sgfu.SetStringRef(*s)
	}
	return sgfu
}

// ClearStringRef clears the value of the "string_ref" field.
func (sgfu *ShipmentGatewayFedexUpdate) ClearStringRef() *ShipmentGatewayFedexUpdate {
	sgfu.mutation.ClearStringRef()
	return sgfu
}

// SetConnectURL sets the "connect_url" field.
func (sgfu *ShipmentGatewayFedexUpdate) SetConnectURL(s string) *ShipmentGatewayFedexUpdate {
	sgfu.mutation.SetConnectURL(s)
	return sgfu
}

// SetNillableConnectURL sets the "connect_url" field if the given value is not nil.
func (sgfu *ShipmentGatewayFedexUpdate) SetNillableConnectURL(s *string) *ShipmentGatewayFedexUpdate {
	if s != nil {
		sgfu.SetConnectURL(*s)
	}
	return sgfu
}

// ClearConnectURL clears the value of the "connect_url" field.
func (sgfu *ShipmentGatewayFedexUpdate) ClearConnectURL() *ShipmentGatewayFedexUpdate {
	sgfu.mutation.ClearConnectURL()
	return sgfu
}

// SetConnectSoapURL sets the "connect_soap_url" field.
func (sgfu *ShipmentGatewayFedexUpdate) SetConnectSoapURL(s string) *ShipmentGatewayFedexUpdate {
	sgfu.mutation.SetConnectSoapURL(s)
	return sgfu
}

// SetNillableConnectSoapURL sets the "connect_soap_url" field if the given value is not nil.
func (sgfu *ShipmentGatewayFedexUpdate) SetNillableConnectSoapURL(s *string) *ShipmentGatewayFedexUpdate {
	if s != nil {
		sgfu.SetConnectSoapURL(*s)
	}
	return sgfu
}

// ClearConnectSoapURL clears the value of the "connect_soap_url" field.
func (sgfu *ShipmentGatewayFedexUpdate) ClearConnectSoapURL() *ShipmentGatewayFedexUpdate {
	sgfu.mutation.ClearConnectSoapURL()
	return sgfu
}

// SetConnectTimeout sets the "connect_timeout" field.
func (sgfu *ShipmentGatewayFedexUpdate) SetConnectTimeout(i int) *ShipmentGatewayFedexUpdate {
	sgfu.mutation.ResetConnectTimeout()
	sgfu.mutation.SetConnectTimeout(i)
	return sgfu
}

// SetNillableConnectTimeout sets the "connect_timeout" field if the given value is not nil.
func (sgfu *ShipmentGatewayFedexUpdate) SetNillableConnectTimeout(i *int) *ShipmentGatewayFedexUpdate {
	if i != nil {
		sgfu.SetConnectTimeout(*i)
	}
	return sgfu
}

// AddConnectTimeout adds i to the "connect_timeout" field.
func (sgfu *ShipmentGatewayFedexUpdate) AddConnectTimeout(i int) *ShipmentGatewayFedexUpdate {
	sgfu.mutation.AddConnectTimeout(i)
	return sgfu
}

// ClearConnectTimeout clears the value of the "connect_timeout" field.
func (sgfu *ShipmentGatewayFedexUpdate) ClearConnectTimeout() *ShipmentGatewayFedexUpdate {
	sgfu.mutation.ClearConnectTimeout()
	return sgfu
}

// SetAccessAccountNbr sets the "access_account_nbr" field.
func (sgfu *ShipmentGatewayFedexUpdate) SetAccessAccountNbr(s string) *ShipmentGatewayFedexUpdate {
	sgfu.mutation.SetAccessAccountNbr(s)
	return sgfu
}

// SetNillableAccessAccountNbr sets the "access_account_nbr" field if the given value is not nil.
func (sgfu *ShipmentGatewayFedexUpdate) SetNillableAccessAccountNbr(s *string) *ShipmentGatewayFedexUpdate {
	if s != nil {
		sgfu.SetAccessAccountNbr(*s)
	}
	return sgfu
}

// ClearAccessAccountNbr clears the value of the "access_account_nbr" field.
func (sgfu *ShipmentGatewayFedexUpdate) ClearAccessAccountNbr() *ShipmentGatewayFedexUpdate {
	sgfu.mutation.ClearAccessAccountNbr()
	return sgfu
}

// SetAccessMeterNumber sets the "access_meter_number" field.
func (sgfu *ShipmentGatewayFedexUpdate) SetAccessMeterNumber(s string) *ShipmentGatewayFedexUpdate {
	sgfu.mutation.SetAccessMeterNumber(s)
	return sgfu
}

// SetNillableAccessMeterNumber sets the "access_meter_number" field if the given value is not nil.
func (sgfu *ShipmentGatewayFedexUpdate) SetNillableAccessMeterNumber(s *string) *ShipmentGatewayFedexUpdate {
	if s != nil {
		sgfu.SetAccessMeterNumber(*s)
	}
	return sgfu
}

// ClearAccessMeterNumber clears the value of the "access_meter_number" field.
func (sgfu *ShipmentGatewayFedexUpdate) ClearAccessMeterNumber() *ShipmentGatewayFedexUpdate {
	sgfu.mutation.ClearAccessMeterNumber()
	return sgfu
}

// SetAccessUserKey sets the "access_user_key" field.
func (sgfu *ShipmentGatewayFedexUpdate) SetAccessUserKey(s string) *ShipmentGatewayFedexUpdate {
	sgfu.mutation.SetAccessUserKey(s)
	return sgfu
}

// SetNillableAccessUserKey sets the "access_user_key" field if the given value is not nil.
func (sgfu *ShipmentGatewayFedexUpdate) SetNillableAccessUserKey(s *string) *ShipmentGatewayFedexUpdate {
	if s != nil {
		sgfu.SetAccessUserKey(*s)
	}
	return sgfu
}

// ClearAccessUserKey clears the value of the "access_user_key" field.
func (sgfu *ShipmentGatewayFedexUpdate) ClearAccessUserKey() *ShipmentGatewayFedexUpdate {
	sgfu.mutation.ClearAccessUserKey()
	return sgfu
}

// SetAccessUserPwd sets the "access_user_pwd" field.
func (sgfu *ShipmentGatewayFedexUpdate) SetAccessUserPwd(s string) *ShipmentGatewayFedexUpdate {
	sgfu.mutation.SetAccessUserPwd(s)
	return sgfu
}

// SetNillableAccessUserPwd sets the "access_user_pwd" field if the given value is not nil.
func (sgfu *ShipmentGatewayFedexUpdate) SetNillableAccessUserPwd(s *string) *ShipmentGatewayFedexUpdate {
	if s != nil {
		sgfu.SetAccessUserPwd(*s)
	}
	return sgfu
}

// ClearAccessUserPwd clears the value of the "access_user_pwd" field.
func (sgfu *ShipmentGatewayFedexUpdate) ClearAccessUserPwd() *ShipmentGatewayFedexUpdate {
	sgfu.mutation.ClearAccessUserPwd()
	return sgfu
}

// SetLabelImageType sets the "label_image_type" field.
func (sgfu *ShipmentGatewayFedexUpdate) SetLabelImageType(s string) *ShipmentGatewayFedexUpdate {
	sgfu.mutation.SetLabelImageType(s)
	return sgfu
}

// SetNillableLabelImageType sets the "label_image_type" field if the given value is not nil.
func (sgfu *ShipmentGatewayFedexUpdate) SetNillableLabelImageType(s *string) *ShipmentGatewayFedexUpdate {
	if s != nil {
		sgfu.SetLabelImageType(*s)
	}
	return sgfu
}

// ClearLabelImageType clears the value of the "label_image_type" field.
func (sgfu *ShipmentGatewayFedexUpdate) ClearLabelImageType() *ShipmentGatewayFedexUpdate {
	sgfu.mutation.ClearLabelImageType()
	return sgfu
}

// SetDefaultDropoffType sets the "default_dropoff_type" field.
func (sgfu *ShipmentGatewayFedexUpdate) SetDefaultDropoffType(s string) *ShipmentGatewayFedexUpdate {
	sgfu.mutation.SetDefaultDropoffType(s)
	return sgfu
}

// SetNillableDefaultDropoffType sets the "default_dropoff_type" field if the given value is not nil.
func (sgfu *ShipmentGatewayFedexUpdate) SetNillableDefaultDropoffType(s *string) *ShipmentGatewayFedexUpdate {
	if s != nil {
		sgfu.SetDefaultDropoffType(*s)
	}
	return sgfu
}

// ClearDefaultDropoffType clears the value of the "default_dropoff_type" field.
func (sgfu *ShipmentGatewayFedexUpdate) ClearDefaultDropoffType() *ShipmentGatewayFedexUpdate {
	sgfu.mutation.ClearDefaultDropoffType()
	return sgfu
}

// SetDefaultPackagingType sets the "default_packaging_type" field.
func (sgfu *ShipmentGatewayFedexUpdate) SetDefaultPackagingType(s string) *ShipmentGatewayFedexUpdate {
	sgfu.mutation.SetDefaultPackagingType(s)
	return sgfu
}

// SetNillableDefaultPackagingType sets the "default_packaging_type" field if the given value is not nil.
func (sgfu *ShipmentGatewayFedexUpdate) SetNillableDefaultPackagingType(s *string) *ShipmentGatewayFedexUpdate {
	if s != nil {
		sgfu.SetDefaultPackagingType(*s)
	}
	return sgfu
}

// ClearDefaultPackagingType clears the value of the "default_packaging_type" field.
func (sgfu *ShipmentGatewayFedexUpdate) ClearDefaultPackagingType() *ShipmentGatewayFedexUpdate {
	sgfu.mutation.ClearDefaultPackagingType()
	return sgfu
}

// SetTemplateShipment sets the "template_shipment" field.
func (sgfu *ShipmentGatewayFedexUpdate) SetTemplateShipment(s string) *ShipmentGatewayFedexUpdate {
	sgfu.mutation.SetTemplateShipment(s)
	return sgfu
}

// SetNillableTemplateShipment sets the "template_shipment" field if the given value is not nil.
func (sgfu *ShipmentGatewayFedexUpdate) SetNillableTemplateShipment(s *string) *ShipmentGatewayFedexUpdate {
	if s != nil {
		sgfu.SetTemplateShipment(*s)
	}
	return sgfu
}

// ClearTemplateShipment clears the value of the "template_shipment" field.
func (sgfu *ShipmentGatewayFedexUpdate) ClearTemplateShipment() *ShipmentGatewayFedexUpdate {
	sgfu.mutation.ClearTemplateShipment()
	return sgfu
}

// SetTemplateSubscription sets the "template_subscription" field.
func (sgfu *ShipmentGatewayFedexUpdate) SetTemplateSubscription(s string) *ShipmentGatewayFedexUpdate {
	sgfu.mutation.SetTemplateSubscription(s)
	return sgfu
}

// SetNillableTemplateSubscription sets the "template_subscription" field if the given value is not nil.
func (sgfu *ShipmentGatewayFedexUpdate) SetNillableTemplateSubscription(s *string) *ShipmentGatewayFedexUpdate {
	if s != nil {
		sgfu.SetTemplateSubscription(*s)
	}
	return sgfu
}

// ClearTemplateSubscription clears the value of the "template_subscription" field.
func (sgfu *ShipmentGatewayFedexUpdate) ClearTemplateSubscription() *ShipmentGatewayFedexUpdate {
	sgfu.mutation.ClearTemplateSubscription()
	return sgfu
}

// SetRateEstimateTemplate sets the "rate_estimate_template" field.
func (sgfu *ShipmentGatewayFedexUpdate) SetRateEstimateTemplate(s string) *ShipmentGatewayFedexUpdate {
	sgfu.mutation.SetRateEstimateTemplate(s)
	return sgfu
}

// SetNillableRateEstimateTemplate sets the "rate_estimate_template" field if the given value is not nil.
func (sgfu *ShipmentGatewayFedexUpdate) SetNillableRateEstimateTemplate(s *string) *ShipmentGatewayFedexUpdate {
	if s != nil {
		sgfu.SetRateEstimateTemplate(*s)
	}
	return sgfu
}

// ClearRateEstimateTemplate clears the value of the "rate_estimate_template" field.
func (sgfu *ShipmentGatewayFedexUpdate) ClearRateEstimateTemplate() *ShipmentGatewayFedexUpdate {
	sgfu.mutation.ClearRateEstimateTemplate()
	return sgfu
}

// SetShipmentGatewayConfigID sets the "shipment_gateway_config" edge to the ShipmentGatewayConfig entity by ID.
func (sgfu *ShipmentGatewayFedexUpdate) SetShipmentGatewayConfigID(id int) *ShipmentGatewayFedexUpdate {
	sgfu.mutation.SetShipmentGatewayConfigID(id)
	return sgfu
}

// SetNillableShipmentGatewayConfigID sets the "shipment_gateway_config" edge to the ShipmentGatewayConfig entity by ID if the given value is not nil.
func (sgfu *ShipmentGatewayFedexUpdate) SetNillableShipmentGatewayConfigID(id *int) *ShipmentGatewayFedexUpdate {
	if id != nil {
		sgfu = sgfu.SetShipmentGatewayConfigID(*id)
	}
	return sgfu
}

// SetShipmentGatewayConfig sets the "shipment_gateway_config" edge to the ShipmentGatewayConfig entity.
func (sgfu *ShipmentGatewayFedexUpdate) SetShipmentGatewayConfig(s *ShipmentGatewayConfig) *ShipmentGatewayFedexUpdate {
	return sgfu.SetShipmentGatewayConfigID(s.ID)
}

// Mutation returns the ShipmentGatewayFedexMutation object of the builder.
func (sgfu *ShipmentGatewayFedexUpdate) Mutation() *ShipmentGatewayFedexMutation {
	return sgfu.mutation
}

// ClearShipmentGatewayConfig clears the "shipment_gateway_config" edge to the ShipmentGatewayConfig entity.
func (sgfu *ShipmentGatewayFedexUpdate) ClearShipmentGatewayConfig() *ShipmentGatewayFedexUpdate {
	sgfu.mutation.ClearShipmentGatewayConfig()
	return sgfu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sgfu *ShipmentGatewayFedexUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	sgfu.defaults()
	if len(sgfu.hooks) == 0 {
		affected, err = sgfu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ShipmentGatewayFedexMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			sgfu.mutation = mutation
			affected, err = sgfu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(sgfu.hooks) - 1; i >= 0; i-- {
			mut = sgfu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sgfu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (sgfu *ShipmentGatewayFedexUpdate) SaveX(ctx context.Context) int {
	affected, err := sgfu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sgfu *ShipmentGatewayFedexUpdate) Exec(ctx context.Context) error {
	_, err := sgfu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sgfu *ShipmentGatewayFedexUpdate) ExecX(ctx context.Context) {
	if err := sgfu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sgfu *ShipmentGatewayFedexUpdate) defaults() {
	if _, ok := sgfu.mutation.UpdateTime(); !ok {
		v := shipmentgatewayfedex.UpdateDefaultUpdateTime()
		sgfu.mutation.SetUpdateTime(v)
	}
}

func (sgfu *ShipmentGatewayFedexUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   shipmentgatewayfedex.Table,
			Columns: shipmentgatewayfedex.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: shipmentgatewayfedex.FieldID,
			},
		},
	}
	if ps := sgfu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sgfu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: shipmentgatewayfedex.FieldUpdateTime,
		})
	}
	if value, ok := sgfu.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewayfedex.FieldStringRef,
		})
	}
	if sgfu.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmentgatewayfedex.FieldStringRef,
		})
	}
	if value, ok := sgfu.mutation.ConnectURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewayfedex.FieldConnectURL,
		})
	}
	if sgfu.mutation.ConnectURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmentgatewayfedex.FieldConnectURL,
		})
	}
	if value, ok := sgfu.mutation.ConnectSoapURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewayfedex.FieldConnectSoapURL,
		})
	}
	if sgfu.mutation.ConnectSoapURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmentgatewayfedex.FieldConnectSoapURL,
		})
	}
	if value, ok := sgfu.mutation.ConnectTimeout(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shipmentgatewayfedex.FieldConnectTimeout,
		})
	}
	if value, ok := sgfu.mutation.AddedConnectTimeout(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shipmentgatewayfedex.FieldConnectTimeout,
		})
	}
	if sgfu.mutation.ConnectTimeoutCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: shipmentgatewayfedex.FieldConnectTimeout,
		})
	}
	if value, ok := sgfu.mutation.AccessAccountNbr(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewayfedex.FieldAccessAccountNbr,
		})
	}
	if sgfu.mutation.AccessAccountNbrCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmentgatewayfedex.FieldAccessAccountNbr,
		})
	}
	if value, ok := sgfu.mutation.AccessMeterNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewayfedex.FieldAccessMeterNumber,
		})
	}
	if sgfu.mutation.AccessMeterNumberCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmentgatewayfedex.FieldAccessMeterNumber,
		})
	}
	if value, ok := sgfu.mutation.AccessUserKey(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewayfedex.FieldAccessUserKey,
		})
	}
	if sgfu.mutation.AccessUserKeyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmentgatewayfedex.FieldAccessUserKey,
		})
	}
	if value, ok := sgfu.mutation.AccessUserPwd(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewayfedex.FieldAccessUserPwd,
		})
	}
	if sgfu.mutation.AccessUserPwdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmentgatewayfedex.FieldAccessUserPwd,
		})
	}
	if value, ok := sgfu.mutation.LabelImageType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewayfedex.FieldLabelImageType,
		})
	}
	if sgfu.mutation.LabelImageTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmentgatewayfedex.FieldLabelImageType,
		})
	}
	if value, ok := sgfu.mutation.DefaultDropoffType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewayfedex.FieldDefaultDropoffType,
		})
	}
	if sgfu.mutation.DefaultDropoffTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmentgatewayfedex.FieldDefaultDropoffType,
		})
	}
	if value, ok := sgfu.mutation.DefaultPackagingType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewayfedex.FieldDefaultPackagingType,
		})
	}
	if sgfu.mutation.DefaultPackagingTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmentgatewayfedex.FieldDefaultPackagingType,
		})
	}
	if value, ok := sgfu.mutation.TemplateShipment(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewayfedex.FieldTemplateShipment,
		})
	}
	if sgfu.mutation.TemplateShipmentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmentgatewayfedex.FieldTemplateShipment,
		})
	}
	if value, ok := sgfu.mutation.TemplateSubscription(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewayfedex.FieldTemplateSubscription,
		})
	}
	if sgfu.mutation.TemplateSubscriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmentgatewayfedex.FieldTemplateSubscription,
		})
	}
	if value, ok := sgfu.mutation.RateEstimateTemplate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewayfedex.FieldRateEstimateTemplate,
		})
	}
	if sgfu.mutation.RateEstimateTemplateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmentgatewayfedex.FieldRateEstimateTemplate,
		})
	}
	if sgfu.mutation.ShipmentGatewayConfigCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   shipmentgatewayfedex.ShipmentGatewayConfigTable,
			Columns: []string{shipmentgatewayfedex.ShipmentGatewayConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipmentgatewayconfig.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sgfu.mutation.ShipmentGatewayConfigIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   shipmentgatewayfedex.ShipmentGatewayConfigTable,
			Columns: []string{shipmentgatewayfedex.ShipmentGatewayConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipmentgatewayconfig.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sgfu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shipmentgatewayfedex.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ShipmentGatewayFedexUpdateOne is the builder for updating a single ShipmentGatewayFedex entity.
type ShipmentGatewayFedexUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ShipmentGatewayFedexMutation
}

// SetStringRef sets the "string_ref" field.
func (sgfuo *ShipmentGatewayFedexUpdateOne) SetStringRef(s string) *ShipmentGatewayFedexUpdateOne {
	sgfuo.mutation.SetStringRef(s)
	return sgfuo
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (sgfuo *ShipmentGatewayFedexUpdateOne) SetNillableStringRef(s *string) *ShipmentGatewayFedexUpdateOne {
	if s != nil {
		sgfuo.SetStringRef(*s)
	}
	return sgfuo
}

// ClearStringRef clears the value of the "string_ref" field.
func (sgfuo *ShipmentGatewayFedexUpdateOne) ClearStringRef() *ShipmentGatewayFedexUpdateOne {
	sgfuo.mutation.ClearStringRef()
	return sgfuo
}

// SetConnectURL sets the "connect_url" field.
func (sgfuo *ShipmentGatewayFedexUpdateOne) SetConnectURL(s string) *ShipmentGatewayFedexUpdateOne {
	sgfuo.mutation.SetConnectURL(s)
	return sgfuo
}

// SetNillableConnectURL sets the "connect_url" field if the given value is not nil.
func (sgfuo *ShipmentGatewayFedexUpdateOne) SetNillableConnectURL(s *string) *ShipmentGatewayFedexUpdateOne {
	if s != nil {
		sgfuo.SetConnectURL(*s)
	}
	return sgfuo
}

// ClearConnectURL clears the value of the "connect_url" field.
func (sgfuo *ShipmentGatewayFedexUpdateOne) ClearConnectURL() *ShipmentGatewayFedexUpdateOne {
	sgfuo.mutation.ClearConnectURL()
	return sgfuo
}

// SetConnectSoapURL sets the "connect_soap_url" field.
func (sgfuo *ShipmentGatewayFedexUpdateOne) SetConnectSoapURL(s string) *ShipmentGatewayFedexUpdateOne {
	sgfuo.mutation.SetConnectSoapURL(s)
	return sgfuo
}

// SetNillableConnectSoapURL sets the "connect_soap_url" field if the given value is not nil.
func (sgfuo *ShipmentGatewayFedexUpdateOne) SetNillableConnectSoapURL(s *string) *ShipmentGatewayFedexUpdateOne {
	if s != nil {
		sgfuo.SetConnectSoapURL(*s)
	}
	return sgfuo
}

// ClearConnectSoapURL clears the value of the "connect_soap_url" field.
func (sgfuo *ShipmentGatewayFedexUpdateOne) ClearConnectSoapURL() *ShipmentGatewayFedexUpdateOne {
	sgfuo.mutation.ClearConnectSoapURL()
	return sgfuo
}

// SetConnectTimeout sets the "connect_timeout" field.
func (sgfuo *ShipmentGatewayFedexUpdateOne) SetConnectTimeout(i int) *ShipmentGatewayFedexUpdateOne {
	sgfuo.mutation.ResetConnectTimeout()
	sgfuo.mutation.SetConnectTimeout(i)
	return sgfuo
}

// SetNillableConnectTimeout sets the "connect_timeout" field if the given value is not nil.
func (sgfuo *ShipmentGatewayFedexUpdateOne) SetNillableConnectTimeout(i *int) *ShipmentGatewayFedexUpdateOne {
	if i != nil {
		sgfuo.SetConnectTimeout(*i)
	}
	return sgfuo
}

// AddConnectTimeout adds i to the "connect_timeout" field.
func (sgfuo *ShipmentGatewayFedexUpdateOne) AddConnectTimeout(i int) *ShipmentGatewayFedexUpdateOne {
	sgfuo.mutation.AddConnectTimeout(i)
	return sgfuo
}

// ClearConnectTimeout clears the value of the "connect_timeout" field.
func (sgfuo *ShipmentGatewayFedexUpdateOne) ClearConnectTimeout() *ShipmentGatewayFedexUpdateOne {
	sgfuo.mutation.ClearConnectTimeout()
	return sgfuo
}

// SetAccessAccountNbr sets the "access_account_nbr" field.
func (sgfuo *ShipmentGatewayFedexUpdateOne) SetAccessAccountNbr(s string) *ShipmentGatewayFedexUpdateOne {
	sgfuo.mutation.SetAccessAccountNbr(s)
	return sgfuo
}

// SetNillableAccessAccountNbr sets the "access_account_nbr" field if the given value is not nil.
func (sgfuo *ShipmentGatewayFedexUpdateOne) SetNillableAccessAccountNbr(s *string) *ShipmentGatewayFedexUpdateOne {
	if s != nil {
		sgfuo.SetAccessAccountNbr(*s)
	}
	return sgfuo
}

// ClearAccessAccountNbr clears the value of the "access_account_nbr" field.
func (sgfuo *ShipmentGatewayFedexUpdateOne) ClearAccessAccountNbr() *ShipmentGatewayFedexUpdateOne {
	sgfuo.mutation.ClearAccessAccountNbr()
	return sgfuo
}

// SetAccessMeterNumber sets the "access_meter_number" field.
func (sgfuo *ShipmentGatewayFedexUpdateOne) SetAccessMeterNumber(s string) *ShipmentGatewayFedexUpdateOne {
	sgfuo.mutation.SetAccessMeterNumber(s)
	return sgfuo
}

// SetNillableAccessMeterNumber sets the "access_meter_number" field if the given value is not nil.
func (sgfuo *ShipmentGatewayFedexUpdateOne) SetNillableAccessMeterNumber(s *string) *ShipmentGatewayFedexUpdateOne {
	if s != nil {
		sgfuo.SetAccessMeterNumber(*s)
	}
	return sgfuo
}

// ClearAccessMeterNumber clears the value of the "access_meter_number" field.
func (sgfuo *ShipmentGatewayFedexUpdateOne) ClearAccessMeterNumber() *ShipmentGatewayFedexUpdateOne {
	sgfuo.mutation.ClearAccessMeterNumber()
	return sgfuo
}

// SetAccessUserKey sets the "access_user_key" field.
func (sgfuo *ShipmentGatewayFedexUpdateOne) SetAccessUserKey(s string) *ShipmentGatewayFedexUpdateOne {
	sgfuo.mutation.SetAccessUserKey(s)
	return sgfuo
}

// SetNillableAccessUserKey sets the "access_user_key" field if the given value is not nil.
func (sgfuo *ShipmentGatewayFedexUpdateOne) SetNillableAccessUserKey(s *string) *ShipmentGatewayFedexUpdateOne {
	if s != nil {
		sgfuo.SetAccessUserKey(*s)
	}
	return sgfuo
}

// ClearAccessUserKey clears the value of the "access_user_key" field.
func (sgfuo *ShipmentGatewayFedexUpdateOne) ClearAccessUserKey() *ShipmentGatewayFedexUpdateOne {
	sgfuo.mutation.ClearAccessUserKey()
	return sgfuo
}

// SetAccessUserPwd sets the "access_user_pwd" field.
func (sgfuo *ShipmentGatewayFedexUpdateOne) SetAccessUserPwd(s string) *ShipmentGatewayFedexUpdateOne {
	sgfuo.mutation.SetAccessUserPwd(s)
	return sgfuo
}

// SetNillableAccessUserPwd sets the "access_user_pwd" field if the given value is not nil.
func (sgfuo *ShipmentGatewayFedexUpdateOne) SetNillableAccessUserPwd(s *string) *ShipmentGatewayFedexUpdateOne {
	if s != nil {
		sgfuo.SetAccessUserPwd(*s)
	}
	return sgfuo
}

// ClearAccessUserPwd clears the value of the "access_user_pwd" field.
func (sgfuo *ShipmentGatewayFedexUpdateOne) ClearAccessUserPwd() *ShipmentGatewayFedexUpdateOne {
	sgfuo.mutation.ClearAccessUserPwd()
	return sgfuo
}

// SetLabelImageType sets the "label_image_type" field.
func (sgfuo *ShipmentGatewayFedexUpdateOne) SetLabelImageType(s string) *ShipmentGatewayFedexUpdateOne {
	sgfuo.mutation.SetLabelImageType(s)
	return sgfuo
}

// SetNillableLabelImageType sets the "label_image_type" field if the given value is not nil.
func (sgfuo *ShipmentGatewayFedexUpdateOne) SetNillableLabelImageType(s *string) *ShipmentGatewayFedexUpdateOne {
	if s != nil {
		sgfuo.SetLabelImageType(*s)
	}
	return sgfuo
}

// ClearLabelImageType clears the value of the "label_image_type" field.
func (sgfuo *ShipmentGatewayFedexUpdateOne) ClearLabelImageType() *ShipmentGatewayFedexUpdateOne {
	sgfuo.mutation.ClearLabelImageType()
	return sgfuo
}

// SetDefaultDropoffType sets the "default_dropoff_type" field.
func (sgfuo *ShipmentGatewayFedexUpdateOne) SetDefaultDropoffType(s string) *ShipmentGatewayFedexUpdateOne {
	sgfuo.mutation.SetDefaultDropoffType(s)
	return sgfuo
}

// SetNillableDefaultDropoffType sets the "default_dropoff_type" field if the given value is not nil.
func (sgfuo *ShipmentGatewayFedexUpdateOne) SetNillableDefaultDropoffType(s *string) *ShipmentGatewayFedexUpdateOne {
	if s != nil {
		sgfuo.SetDefaultDropoffType(*s)
	}
	return sgfuo
}

// ClearDefaultDropoffType clears the value of the "default_dropoff_type" field.
func (sgfuo *ShipmentGatewayFedexUpdateOne) ClearDefaultDropoffType() *ShipmentGatewayFedexUpdateOne {
	sgfuo.mutation.ClearDefaultDropoffType()
	return sgfuo
}

// SetDefaultPackagingType sets the "default_packaging_type" field.
func (sgfuo *ShipmentGatewayFedexUpdateOne) SetDefaultPackagingType(s string) *ShipmentGatewayFedexUpdateOne {
	sgfuo.mutation.SetDefaultPackagingType(s)
	return sgfuo
}

// SetNillableDefaultPackagingType sets the "default_packaging_type" field if the given value is not nil.
func (sgfuo *ShipmentGatewayFedexUpdateOne) SetNillableDefaultPackagingType(s *string) *ShipmentGatewayFedexUpdateOne {
	if s != nil {
		sgfuo.SetDefaultPackagingType(*s)
	}
	return sgfuo
}

// ClearDefaultPackagingType clears the value of the "default_packaging_type" field.
func (sgfuo *ShipmentGatewayFedexUpdateOne) ClearDefaultPackagingType() *ShipmentGatewayFedexUpdateOne {
	sgfuo.mutation.ClearDefaultPackagingType()
	return sgfuo
}

// SetTemplateShipment sets the "template_shipment" field.
func (sgfuo *ShipmentGatewayFedexUpdateOne) SetTemplateShipment(s string) *ShipmentGatewayFedexUpdateOne {
	sgfuo.mutation.SetTemplateShipment(s)
	return sgfuo
}

// SetNillableTemplateShipment sets the "template_shipment" field if the given value is not nil.
func (sgfuo *ShipmentGatewayFedexUpdateOne) SetNillableTemplateShipment(s *string) *ShipmentGatewayFedexUpdateOne {
	if s != nil {
		sgfuo.SetTemplateShipment(*s)
	}
	return sgfuo
}

// ClearTemplateShipment clears the value of the "template_shipment" field.
func (sgfuo *ShipmentGatewayFedexUpdateOne) ClearTemplateShipment() *ShipmentGatewayFedexUpdateOne {
	sgfuo.mutation.ClearTemplateShipment()
	return sgfuo
}

// SetTemplateSubscription sets the "template_subscription" field.
func (sgfuo *ShipmentGatewayFedexUpdateOne) SetTemplateSubscription(s string) *ShipmentGatewayFedexUpdateOne {
	sgfuo.mutation.SetTemplateSubscription(s)
	return sgfuo
}

// SetNillableTemplateSubscription sets the "template_subscription" field if the given value is not nil.
func (sgfuo *ShipmentGatewayFedexUpdateOne) SetNillableTemplateSubscription(s *string) *ShipmentGatewayFedexUpdateOne {
	if s != nil {
		sgfuo.SetTemplateSubscription(*s)
	}
	return sgfuo
}

// ClearTemplateSubscription clears the value of the "template_subscription" field.
func (sgfuo *ShipmentGatewayFedexUpdateOne) ClearTemplateSubscription() *ShipmentGatewayFedexUpdateOne {
	sgfuo.mutation.ClearTemplateSubscription()
	return sgfuo
}

// SetRateEstimateTemplate sets the "rate_estimate_template" field.
func (sgfuo *ShipmentGatewayFedexUpdateOne) SetRateEstimateTemplate(s string) *ShipmentGatewayFedexUpdateOne {
	sgfuo.mutation.SetRateEstimateTemplate(s)
	return sgfuo
}

// SetNillableRateEstimateTemplate sets the "rate_estimate_template" field if the given value is not nil.
func (sgfuo *ShipmentGatewayFedexUpdateOne) SetNillableRateEstimateTemplate(s *string) *ShipmentGatewayFedexUpdateOne {
	if s != nil {
		sgfuo.SetRateEstimateTemplate(*s)
	}
	return sgfuo
}

// ClearRateEstimateTemplate clears the value of the "rate_estimate_template" field.
func (sgfuo *ShipmentGatewayFedexUpdateOne) ClearRateEstimateTemplate() *ShipmentGatewayFedexUpdateOne {
	sgfuo.mutation.ClearRateEstimateTemplate()
	return sgfuo
}

// SetShipmentGatewayConfigID sets the "shipment_gateway_config" edge to the ShipmentGatewayConfig entity by ID.
func (sgfuo *ShipmentGatewayFedexUpdateOne) SetShipmentGatewayConfigID(id int) *ShipmentGatewayFedexUpdateOne {
	sgfuo.mutation.SetShipmentGatewayConfigID(id)
	return sgfuo
}

// SetNillableShipmentGatewayConfigID sets the "shipment_gateway_config" edge to the ShipmentGatewayConfig entity by ID if the given value is not nil.
func (sgfuo *ShipmentGatewayFedexUpdateOne) SetNillableShipmentGatewayConfigID(id *int) *ShipmentGatewayFedexUpdateOne {
	if id != nil {
		sgfuo = sgfuo.SetShipmentGatewayConfigID(*id)
	}
	return sgfuo
}

// SetShipmentGatewayConfig sets the "shipment_gateway_config" edge to the ShipmentGatewayConfig entity.
func (sgfuo *ShipmentGatewayFedexUpdateOne) SetShipmentGatewayConfig(s *ShipmentGatewayConfig) *ShipmentGatewayFedexUpdateOne {
	return sgfuo.SetShipmentGatewayConfigID(s.ID)
}

// Mutation returns the ShipmentGatewayFedexMutation object of the builder.
func (sgfuo *ShipmentGatewayFedexUpdateOne) Mutation() *ShipmentGatewayFedexMutation {
	return sgfuo.mutation
}

// ClearShipmentGatewayConfig clears the "shipment_gateway_config" edge to the ShipmentGatewayConfig entity.
func (sgfuo *ShipmentGatewayFedexUpdateOne) ClearShipmentGatewayConfig() *ShipmentGatewayFedexUpdateOne {
	sgfuo.mutation.ClearShipmentGatewayConfig()
	return sgfuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sgfuo *ShipmentGatewayFedexUpdateOne) Select(field string, fields ...string) *ShipmentGatewayFedexUpdateOne {
	sgfuo.fields = append([]string{field}, fields...)
	return sgfuo
}

// Save executes the query and returns the updated ShipmentGatewayFedex entity.
func (sgfuo *ShipmentGatewayFedexUpdateOne) Save(ctx context.Context) (*ShipmentGatewayFedex, error) {
	var (
		err  error
		node *ShipmentGatewayFedex
	)
	sgfuo.defaults()
	if len(sgfuo.hooks) == 0 {
		node, err = sgfuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ShipmentGatewayFedexMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			sgfuo.mutation = mutation
			node, err = sgfuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(sgfuo.hooks) - 1; i >= 0; i-- {
			mut = sgfuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sgfuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (sgfuo *ShipmentGatewayFedexUpdateOne) SaveX(ctx context.Context) *ShipmentGatewayFedex {
	node, err := sgfuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sgfuo *ShipmentGatewayFedexUpdateOne) Exec(ctx context.Context) error {
	_, err := sgfuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sgfuo *ShipmentGatewayFedexUpdateOne) ExecX(ctx context.Context) {
	if err := sgfuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sgfuo *ShipmentGatewayFedexUpdateOne) defaults() {
	if _, ok := sgfuo.mutation.UpdateTime(); !ok {
		v := shipmentgatewayfedex.UpdateDefaultUpdateTime()
		sgfuo.mutation.SetUpdateTime(v)
	}
}

func (sgfuo *ShipmentGatewayFedexUpdateOne) sqlSave(ctx context.Context) (_node *ShipmentGatewayFedex, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   shipmentgatewayfedex.Table,
			Columns: shipmentgatewayfedex.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: shipmentgatewayfedex.FieldID,
			},
		},
	}
	id, ok := sgfuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ShipmentGatewayFedex.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := sgfuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, shipmentgatewayfedex.FieldID)
		for _, f := range fields {
			if !shipmentgatewayfedex.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != shipmentgatewayfedex.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sgfuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sgfuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: shipmentgatewayfedex.FieldUpdateTime,
		})
	}
	if value, ok := sgfuo.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewayfedex.FieldStringRef,
		})
	}
	if sgfuo.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmentgatewayfedex.FieldStringRef,
		})
	}
	if value, ok := sgfuo.mutation.ConnectURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewayfedex.FieldConnectURL,
		})
	}
	if sgfuo.mutation.ConnectURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmentgatewayfedex.FieldConnectURL,
		})
	}
	if value, ok := sgfuo.mutation.ConnectSoapURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewayfedex.FieldConnectSoapURL,
		})
	}
	if sgfuo.mutation.ConnectSoapURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmentgatewayfedex.FieldConnectSoapURL,
		})
	}
	if value, ok := sgfuo.mutation.ConnectTimeout(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shipmentgatewayfedex.FieldConnectTimeout,
		})
	}
	if value, ok := sgfuo.mutation.AddedConnectTimeout(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shipmentgatewayfedex.FieldConnectTimeout,
		})
	}
	if sgfuo.mutation.ConnectTimeoutCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: shipmentgatewayfedex.FieldConnectTimeout,
		})
	}
	if value, ok := sgfuo.mutation.AccessAccountNbr(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewayfedex.FieldAccessAccountNbr,
		})
	}
	if sgfuo.mutation.AccessAccountNbrCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmentgatewayfedex.FieldAccessAccountNbr,
		})
	}
	if value, ok := sgfuo.mutation.AccessMeterNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewayfedex.FieldAccessMeterNumber,
		})
	}
	if sgfuo.mutation.AccessMeterNumberCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmentgatewayfedex.FieldAccessMeterNumber,
		})
	}
	if value, ok := sgfuo.mutation.AccessUserKey(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewayfedex.FieldAccessUserKey,
		})
	}
	if sgfuo.mutation.AccessUserKeyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmentgatewayfedex.FieldAccessUserKey,
		})
	}
	if value, ok := sgfuo.mutation.AccessUserPwd(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewayfedex.FieldAccessUserPwd,
		})
	}
	if sgfuo.mutation.AccessUserPwdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmentgatewayfedex.FieldAccessUserPwd,
		})
	}
	if value, ok := sgfuo.mutation.LabelImageType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewayfedex.FieldLabelImageType,
		})
	}
	if sgfuo.mutation.LabelImageTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmentgatewayfedex.FieldLabelImageType,
		})
	}
	if value, ok := sgfuo.mutation.DefaultDropoffType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewayfedex.FieldDefaultDropoffType,
		})
	}
	if sgfuo.mutation.DefaultDropoffTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmentgatewayfedex.FieldDefaultDropoffType,
		})
	}
	if value, ok := sgfuo.mutation.DefaultPackagingType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewayfedex.FieldDefaultPackagingType,
		})
	}
	if sgfuo.mutation.DefaultPackagingTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmentgatewayfedex.FieldDefaultPackagingType,
		})
	}
	if value, ok := sgfuo.mutation.TemplateShipment(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewayfedex.FieldTemplateShipment,
		})
	}
	if sgfuo.mutation.TemplateShipmentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmentgatewayfedex.FieldTemplateShipment,
		})
	}
	if value, ok := sgfuo.mutation.TemplateSubscription(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewayfedex.FieldTemplateSubscription,
		})
	}
	if sgfuo.mutation.TemplateSubscriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmentgatewayfedex.FieldTemplateSubscription,
		})
	}
	if value, ok := sgfuo.mutation.RateEstimateTemplate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewayfedex.FieldRateEstimateTemplate,
		})
	}
	if sgfuo.mutation.RateEstimateTemplateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmentgatewayfedex.FieldRateEstimateTemplate,
		})
	}
	if sgfuo.mutation.ShipmentGatewayConfigCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   shipmentgatewayfedex.ShipmentGatewayConfigTable,
			Columns: []string{shipmentgatewayfedex.ShipmentGatewayConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipmentgatewayconfig.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sgfuo.mutation.ShipmentGatewayConfigIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   shipmentgatewayfedex.ShipmentGatewayConfigTable,
			Columns: []string{shipmentgatewayfedex.ShipmentGatewayConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipmentgatewayconfig.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ShipmentGatewayFedex{config: sgfuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sgfuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shipmentgatewayfedex.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
