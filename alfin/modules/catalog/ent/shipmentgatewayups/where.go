// Code generated by entc, DO NOT EDIT.

package shipmentgatewayups

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// StringRef applies equality check predicate on the "string_ref" field. It's identical to StringRefEQ.
func StringRef(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStringRef), v))
	})
}

// ConnectURL applies equality check predicate on the "connect_url" field. It's identical to ConnectURLEQ.
func ConnectURL(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldConnectURL), v))
	})
}

// ConnectTimeout applies equality check predicate on the "connect_timeout" field. It's identical to ConnectTimeoutEQ.
func ConnectTimeout(v int) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldConnectTimeout), v))
	})
}

// ShipperNumber applies equality check predicate on the "shipper_number" field. It's identical to ShipperNumberEQ.
func ShipperNumber(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShipperNumber), v))
	})
}

// BillShipperAccountNumber applies equality check predicate on the "bill_shipper_account_number" field. It's identical to BillShipperAccountNumberEQ.
func BillShipperAccountNumber(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBillShipperAccountNumber), v))
	})
}

// AccessLicenseNumber applies equality check predicate on the "access_license_number" field. It's identical to AccessLicenseNumberEQ.
func AccessLicenseNumber(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccessLicenseNumber), v))
	})
}

// AccessUserID applies equality check predicate on the "access_user_id" field. It's identical to AccessUserIDEQ.
func AccessUserID(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccessUserID), v))
	})
}

// AccessPassword applies equality check predicate on the "access_password" field. It's identical to AccessPasswordEQ.
func AccessPassword(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccessPassword), v))
	})
}

// SaveCertInfo applies equality check predicate on the "save_cert_info" field. It's identical to SaveCertInfoEQ.
func SaveCertInfo(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSaveCertInfo), v))
	})
}

// SaveCertPath applies equality check predicate on the "save_cert_path" field. It's identical to SaveCertPathEQ.
func SaveCertPath(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSaveCertPath), v))
	})
}

// ShipperPickupType applies equality check predicate on the "shipper_pickup_type" field. It's identical to ShipperPickupTypeEQ.
func ShipperPickupType(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShipperPickupType), v))
	})
}

// CustomerClassification applies equality check predicate on the "customer_classification" field. It's identical to CustomerClassificationEQ.
func CustomerClassification(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCustomerClassification), v))
	})
}

// MaxEstimateWeight applies equality check predicate on the "max_estimate_weight" field. It's identical to MaxEstimateWeightEQ.
func MaxEstimateWeight(v float64) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMaxEstimateWeight), v))
	})
}

// MinEstimateWeight applies equality check predicate on the "min_estimate_weight" field. It's identical to MinEstimateWeightEQ.
func MinEstimateWeight(v float64) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMinEstimateWeight), v))
	})
}

// CodAllowCod applies equality check predicate on the "cod_allow_cod" field. It's identical to CodAllowCodEQ.
func CodAllowCod(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCodAllowCod), v))
	})
}

// CodSurchargeAmount applies equality check predicate on the "cod_surcharge_amount" field. It's identical to CodSurchargeAmountEQ.
func CodSurchargeAmount(v float64) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCodSurchargeAmount), v))
	})
}

// CodSurchargeCurrencyUomID applies equality check predicate on the "cod_surcharge_currency_uom_id" field. It's identical to CodSurchargeCurrencyUomIDEQ.
func CodSurchargeCurrencyUomID(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCodSurchargeCurrencyUomID), v))
	})
}

// CodSurchargeApplyToPackage applies equality check predicate on the "cod_surcharge_apply_to_package" field. It's identical to CodSurchargeApplyToPackageEQ.
func CodSurchargeApplyToPackage(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCodSurchargeApplyToPackage), v))
	})
}

// CodFundsCode applies equality check predicate on the "cod_funds_code" field. It's identical to CodFundsCodeEQ.
func CodFundsCode(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCodFundsCode), v))
	})
}

// DefaultReturnLabelMemo applies equality check predicate on the "default_return_label_memo" field. It's identical to DefaultReturnLabelMemoEQ.
func DefaultReturnLabelMemo(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDefaultReturnLabelMemo), v))
	})
}

// DefaultReturnLabelSubject applies equality check predicate on the "default_return_label_subject" field. It's identical to DefaultReturnLabelSubjectEQ.
func DefaultReturnLabelSubject(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDefaultReturnLabelSubject), v))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.ShipmentGatewayUps {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.ShipmentGatewayUps {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), v))
	})
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.ShipmentGatewayUps {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.ShipmentGatewayUps {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateTime), v))
	})
}

// StringRefEQ applies the EQ predicate on the "string_ref" field.
func StringRefEQ(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStringRef), v))
	})
}

// StringRefNEQ applies the NEQ predicate on the "string_ref" field.
func StringRefNEQ(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStringRef), v))
	})
}

// StringRefIn applies the In predicate on the "string_ref" field.
func StringRefIn(vs ...string) predicate.ShipmentGatewayUps {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStringRef), v...))
	})
}

// StringRefNotIn applies the NotIn predicate on the "string_ref" field.
func StringRefNotIn(vs ...string) predicate.ShipmentGatewayUps {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStringRef), v...))
	})
}

// StringRefGT applies the GT predicate on the "string_ref" field.
func StringRefGT(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStringRef), v))
	})
}

// StringRefGTE applies the GTE predicate on the "string_ref" field.
func StringRefGTE(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStringRef), v))
	})
}

// StringRefLT applies the LT predicate on the "string_ref" field.
func StringRefLT(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStringRef), v))
	})
}

// StringRefLTE applies the LTE predicate on the "string_ref" field.
func StringRefLTE(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStringRef), v))
	})
}

// StringRefContains applies the Contains predicate on the "string_ref" field.
func StringRefContains(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStringRef), v))
	})
}

// StringRefHasPrefix applies the HasPrefix predicate on the "string_ref" field.
func StringRefHasPrefix(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStringRef), v))
	})
}

// StringRefHasSuffix applies the HasSuffix predicate on the "string_ref" field.
func StringRefHasSuffix(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStringRef), v))
	})
}

// StringRefIsNil applies the IsNil predicate on the "string_ref" field.
func StringRefIsNil() predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStringRef)))
	})
}

// StringRefNotNil applies the NotNil predicate on the "string_ref" field.
func StringRefNotNil() predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStringRef)))
	})
}

// StringRefEqualFold applies the EqualFold predicate on the "string_ref" field.
func StringRefEqualFold(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStringRef), v))
	})
}

// StringRefContainsFold applies the ContainsFold predicate on the "string_ref" field.
func StringRefContainsFold(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStringRef), v))
	})
}

// ConnectURLEQ applies the EQ predicate on the "connect_url" field.
func ConnectURLEQ(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldConnectURL), v))
	})
}

// ConnectURLNEQ applies the NEQ predicate on the "connect_url" field.
func ConnectURLNEQ(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldConnectURL), v))
	})
}

// ConnectURLIn applies the In predicate on the "connect_url" field.
func ConnectURLIn(vs ...string) predicate.ShipmentGatewayUps {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldConnectURL), v...))
	})
}

// ConnectURLNotIn applies the NotIn predicate on the "connect_url" field.
func ConnectURLNotIn(vs ...string) predicate.ShipmentGatewayUps {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldConnectURL), v...))
	})
}

// ConnectURLGT applies the GT predicate on the "connect_url" field.
func ConnectURLGT(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldConnectURL), v))
	})
}

// ConnectURLGTE applies the GTE predicate on the "connect_url" field.
func ConnectURLGTE(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldConnectURL), v))
	})
}

// ConnectURLLT applies the LT predicate on the "connect_url" field.
func ConnectURLLT(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldConnectURL), v))
	})
}

// ConnectURLLTE applies the LTE predicate on the "connect_url" field.
func ConnectURLLTE(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldConnectURL), v))
	})
}

// ConnectURLContains applies the Contains predicate on the "connect_url" field.
func ConnectURLContains(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldConnectURL), v))
	})
}

// ConnectURLHasPrefix applies the HasPrefix predicate on the "connect_url" field.
func ConnectURLHasPrefix(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldConnectURL), v))
	})
}

// ConnectURLHasSuffix applies the HasSuffix predicate on the "connect_url" field.
func ConnectURLHasSuffix(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldConnectURL), v))
	})
}

// ConnectURLIsNil applies the IsNil predicate on the "connect_url" field.
func ConnectURLIsNil() predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldConnectURL)))
	})
}

// ConnectURLNotNil applies the NotNil predicate on the "connect_url" field.
func ConnectURLNotNil() predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldConnectURL)))
	})
}

// ConnectURLEqualFold applies the EqualFold predicate on the "connect_url" field.
func ConnectURLEqualFold(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldConnectURL), v))
	})
}

// ConnectURLContainsFold applies the ContainsFold predicate on the "connect_url" field.
func ConnectURLContainsFold(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldConnectURL), v))
	})
}

// ConnectTimeoutEQ applies the EQ predicate on the "connect_timeout" field.
func ConnectTimeoutEQ(v int) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldConnectTimeout), v))
	})
}

// ConnectTimeoutNEQ applies the NEQ predicate on the "connect_timeout" field.
func ConnectTimeoutNEQ(v int) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldConnectTimeout), v))
	})
}

// ConnectTimeoutIn applies the In predicate on the "connect_timeout" field.
func ConnectTimeoutIn(vs ...int) predicate.ShipmentGatewayUps {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldConnectTimeout), v...))
	})
}

// ConnectTimeoutNotIn applies the NotIn predicate on the "connect_timeout" field.
func ConnectTimeoutNotIn(vs ...int) predicate.ShipmentGatewayUps {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldConnectTimeout), v...))
	})
}

// ConnectTimeoutGT applies the GT predicate on the "connect_timeout" field.
func ConnectTimeoutGT(v int) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldConnectTimeout), v))
	})
}

// ConnectTimeoutGTE applies the GTE predicate on the "connect_timeout" field.
func ConnectTimeoutGTE(v int) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldConnectTimeout), v))
	})
}

// ConnectTimeoutLT applies the LT predicate on the "connect_timeout" field.
func ConnectTimeoutLT(v int) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldConnectTimeout), v))
	})
}

// ConnectTimeoutLTE applies the LTE predicate on the "connect_timeout" field.
func ConnectTimeoutLTE(v int) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldConnectTimeout), v))
	})
}

// ConnectTimeoutIsNil applies the IsNil predicate on the "connect_timeout" field.
func ConnectTimeoutIsNil() predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldConnectTimeout)))
	})
}

// ConnectTimeoutNotNil applies the NotNil predicate on the "connect_timeout" field.
func ConnectTimeoutNotNil() predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldConnectTimeout)))
	})
}

// ShipperNumberEQ applies the EQ predicate on the "shipper_number" field.
func ShipperNumberEQ(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShipperNumber), v))
	})
}

// ShipperNumberNEQ applies the NEQ predicate on the "shipper_number" field.
func ShipperNumberNEQ(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShipperNumber), v))
	})
}

// ShipperNumberIn applies the In predicate on the "shipper_number" field.
func ShipperNumberIn(vs ...string) predicate.ShipmentGatewayUps {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldShipperNumber), v...))
	})
}

// ShipperNumberNotIn applies the NotIn predicate on the "shipper_number" field.
func ShipperNumberNotIn(vs ...string) predicate.ShipmentGatewayUps {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldShipperNumber), v...))
	})
}

// ShipperNumberGT applies the GT predicate on the "shipper_number" field.
func ShipperNumberGT(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShipperNumber), v))
	})
}

// ShipperNumberGTE applies the GTE predicate on the "shipper_number" field.
func ShipperNumberGTE(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShipperNumber), v))
	})
}

// ShipperNumberLT applies the LT predicate on the "shipper_number" field.
func ShipperNumberLT(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShipperNumber), v))
	})
}

// ShipperNumberLTE applies the LTE predicate on the "shipper_number" field.
func ShipperNumberLTE(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShipperNumber), v))
	})
}

// ShipperNumberContains applies the Contains predicate on the "shipper_number" field.
func ShipperNumberContains(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldShipperNumber), v))
	})
}

// ShipperNumberHasPrefix applies the HasPrefix predicate on the "shipper_number" field.
func ShipperNumberHasPrefix(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldShipperNumber), v))
	})
}

// ShipperNumberHasSuffix applies the HasSuffix predicate on the "shipper_number" field.
func ShipperNumberHasSuffix(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldShipperNumber), v))
	})
}

// ShipperNumberIsNil applies the IsNil predicate on the "shipper_number" field.
func ShipperNumberIsNil() predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldShipperNumber)))
	})
}

// ShipperNumberNotNil applies the NotNil predicate on the "shipper_number" field.
func ShipperNumberNotNil() predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldShipperNumber)))
	})
}

// ShipperNumberEqualFold applies the EqualFold predicate on the "shipper_number" field.
func ShipperNumberEqualFold(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldShipperNumber), v))
	})
}

// ShipperNumberContainsFold applies the ContainsFold predicate on the "shipper_number" field.
func ShipperNumberContainsFold(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldShipperNumber), v))
	})
}

// BillShipperAccountNumberEQ applies the EQ predicate on the "bill_shipper_account_number" field.
func BillShipperAccountNumberEQ(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBillShipperAccountNumber), v))
	})
}

// BillShipperAccountNumberNEQ applies the NEQ predicate on the "bill_shipper_account_number" field.
func BillShipperAccountNumberNEQ(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBillShipperAccountNumber), v))
	})
}

// BillShipperAccountNumberIn applies the In predicate on the "bill_shipper_account_number" field.
func BillShipperAccountNumberIn(vs ...string) predicate.ShipmentGatewayUps {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBillShipperAccountNumber), v...))
	})
}

// BillShipperAccountNumberNotIn applies the NotIn predicate on the "bill_shipper_account_number" field.
func BillShipperAccountNumberNotIn(vs ...string) predicate.ShipmentGatewayUps {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBillShipperAccountNumber), v...))
	})
}

// BillShipperAccountNumberGT applies the GT predicate on the "bill_shipper_account_number" field.
func BillShipperAccountNumberGT(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBillShipperAccountNumber), v))
	})
}

// BillShipperAccountNumberGTE applies the GTE predicate on the "bill_shipper_account_number" field.
func BillShipperAccountNumberGTE(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBillShipperAccountNumber), v))
	})
}

// BillShipperAccountNumberLT applies the LT predicate on the "bill_shipper_account_number" field.
func BillShipperAccountNumberLT(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBillShipperAccountNumber), v))
	})
}

// BillShipperAccountNumberLTE applies the LTE predicate on the "bill_shipper_account_number" field.
func BillShipperAccountNumberLTE(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBillShipperAccountNumber), v))
	})
}

// BillShipperAccountNumberContains applies the Contains predicate on the "bill_shipper_account_number" field.
func BillShipperAccountNumberContains(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBillShipperAccountNumber), v))
	})
}

// BillShipperAccountNumberHasPrefix applies the HasPrefix predicate on the "bill_shipper_account_number" field.
func BillShipperAccountNumberHasPrefix(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBillShipperAccountNumber), v))
	})
}

// BillShipperAccountNumberHasSuffix applies the HasSuffix predicate on the "bill_shipper_account_number" field.
func BillShipperAccountNumberHasSuffix(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBillShipperAccountNumber), v))
	})
}

// BillShipperAccountNumberIsNil applies the IsNil predicate on the "bill_shipper_account_number" field.
func BillShipperAccountNumberIsNil() predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldBillShipperAccountNumber)))
	})
}

// BillShipperAccountNumberNotNil applies the NotNil predicate on the "bill_shipper_account_number" field.
func BillShipperAccountNumberNotNil() predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldBillShipperAccountNumber)))
	})
}

// BillShipperAccountNumberEqualFold applies the EqualFold predicate on the "bill_shipper_account_number" field.
func BillShipperAccountNumberEqualFold(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBillShipperAccountNumber), v))
	})
}

// BillShipperAccountNumberContainsFold applies the ContainsFold predicate on the "bill_shipper_account_number" field.
func BillShipperAccountNumberContainsFold(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBillShipperAccountNumber), v))
	})
}

// AccessLicenseNumberEQ applies the EQ predicate on the "access_license_number" field.
func AccessLicenseNumberEQ(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccessLicenseNumber), v))
	})
}

// AccessLicenseNumberNEQ applies the NEQ predicate on the "access_license_number" field.
func AccessLicenseNumberNEQ(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAccessLicenseNumber), v))
	})
}

// AccessLicenseNumberIn applies the In predicate on the "access_license_number" field.
func AccessLicenseNumberIn(vs ...string) predicate.ShipmentGatewayUps {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAccessLicenseNumber), v...))
	})
}

// AccessLicenseNumberNotIn applies the NotIn predicate on the "access_license_number" field.
func AccessLicenseNumberNotIn(vs ...string) predicate.ShipmentGatewayUps {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAccessLicenseNumber), v...))
	})
}

// AccessLicenseNumberGT applies the GT predicate on the "access_license_number" field.
func AccessLicenseNumberGT(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAccessLicenseNumber), v))
	})
}

// AccessLicenseNumberGTE applies the GTE predicate on the "access_license_number" field.
func AccessLicenseNumberGTE(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAccessLicenseNumber), v))
	})
}

// AccessLicenseNumberLT applies the LT predicate on the "access_license_number" field.
func AccessLicenseNumberLT(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAccessLicenseNumber), v))
	})
}

// AccessLicenseNumberLTE applies the LTE predicate on the "access_license_number" field.
func AccessLicenseNumberLTE(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAccessLicenseNumber), v))
	})
}

// AccessLicenseNumberContains applies the Contains predicate on the "access_license_number" field.
func AccessLicenseNumberContains(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAccessLicenseNumber), v))
	})
}

// AccessLicenseNumberHasPrefix applies the HasPrefix predicate on the "access_license_number" field.
func AccessLicenseNumberHasPrefix(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAccessLicenseNumber), v))
	})
}

// AccessLicenseNumberHasSuffix applies the HasSuffix predicate on the "access_license_number" field.
func AccessLicenseNumberHasSuffix(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAccessLicenseNumber), v))
	})
}

// AccessLicenseNumberIsNil applies the IsNil predicate on the "access_license_number" field.
func AccessLicenseNumberIsNil() predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAccessLicenseNumber)))
	})
}

// AccessLicenseNumberNotNil applies the NotNil predicate on the "access_license_number" field.
func AccessLicenseNumberNotNil() predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAccessLicenseNumber)))
	})
}

// AccessLicenseNumberEqualFold applies the EqualFold predicate on the "access_license_number" field.
func AccessLicenseNumberEqualFold(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAccessLicenseNumber), v))
	})
}

// AccessLicenseNumberContainsFold applies the ContainsFold predicate on the "access_license_number" field.
func AccessLicenseNumberContainsFold(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAccessLicenseNumber), v))
	})
}

// AccessUserIDEQ applies the EQ predicate on the "access_user_id" field.
func AccessUserIDEQ(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccessUserID), v))
	})
}

// AccessUserIDNEQ applies the NEQ predicate on the "access_user_id" field.
func AccessUserIDNEQ(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAccessUserID), v))
	})
}

// AccessUserIDIn applies the In predicate on the "access_user_id" field.
func AccessUserIDIn(vs ...string) predicate.ShipmentGatewayUps {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAccessUserID), v...))
	})
}

// AccessUserIDNotIn applies the NotIn predicate on the "access_user_id" field.
func AccessUserIDNotIn(vs ...string) predicate.ShipmentGatewayUps {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAccessUserID), v...))
	})
}

// AccessUserIDGT applies the GT predicate on the "access_user_id" field.
func AccessUserIDGT(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAccessUserID), v))
	})
}

// AccessUserIDGTE applies the GTE predicate on the "access_user_id" field.
func AccessUserIDGTE(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAccessUserID), v))
	})
}

// AccessUserIDLT applies the LT predicate on the "access_user_id" field.
func AccessUserIDLT(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAccessUserID), v))
	})
}

// AccessUserIDLTE applies the LTE predicate on the "access_user_id" field.
func AccessUserIDLTE(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAccessUserID), v))
	})
}

// AccessUserIDContains applies the Contains predicate on the "access_user_id" field.
func AccessUserIDContains(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAccessUserID), v))
	})
}

// AccessUserIDHasPrefix applies the HasPrefix predicate on the "access_user_id" field.
func AccessUserIDHasPrefix(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAccessUserID), v))
	})
}

// AccessUserIDHasSuffix applies the HasSuffix predicate on the "access_user_id" field.
func AccessUserIDHasSuffix(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAccessUserID), v))
	})
}

// AccessUserIDIsNil applies the IsNil predicate on the "access_user_id" field.
func AccessUserIDIsNil() predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAccessUserID)))
	})
}

// AccessUserIDNotNil applies the NotNil predicate on the "access_user_id" field.
func AccessUserIDNotNil() predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAccessUserID)))
	})
}

// AccessUserIDEqualFold applies the EqualFold predicate on the "access_user_id" field.
func AccessUserIDEqualFold(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAccessUserID), v))
	})
}

// AccessUserIDContainsFold applies the ContainsFold predicate on the "access_user_id" field.
func AccessUserIDContainsFold(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAccessUserID), v))
	})
}

// AccessPasswordEQ applies the EQ predicate on the "access_password" field.
func AccessPasswordEQ(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccessPassword), v))
	})
}

// AccessPasswordNEQ applies the NEQ predicate on the "access_password" field.
func AccessPasswordNEQ(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAccessPassword), v))
	})
}

// AccessPasswordIn applies the In predicate on the "access_password" field.
func AccessPasswordIn(vs ...string) predicate.ShipmentGatewayUps {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAccessPassword), v...))
	})
}

// AccessPasswordNotIn applies the NotIn predicate on the "access_password" field.
func AccessPasswordNotIn(vs ...string) predicate.ShipmentGatewayUps {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAccessPassword), v...))
	})
}

// AccessPasswordGT applies the GT predicate on the "access_password" field.
func AccessPasswordGT(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAccessPassword), v))
	})
}

// AccessPasswordGTE applies the GTE predicate on the "access_password" field.
func AccessPasswordGTE(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAccessPassword), v))
	})
}

// AccessPasswordLT applies the LT predicate on the "access_password" field.
func AccessPasswordLT(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAccessPassword), v))
	})
}

// AccessPasswordLTE applies the LTE predicate on the "access_password" field.
func AccessPasswordLTE(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAccessPassword), v))
	})
}

// AccessPasswordContains applies the Contains predicate on the "access_password" field.
func AccessPasswordContains(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAccessPassword), v))
	})
}

// AccessPasswordHasPrefix applies the HasPrefix predicate on the "access_password" field.
func AccessPasswordHasPrefix(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAccessPassword), v))
	})
}

// AccessPasswordHasSuffix applies the HasSuffix predicate on the "access_password" field.
func AccessPasswordHasSuffix(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAccessPassword), v))
	})
}

// AccessPasswordIsNil applies the IsNil predicate on the "access_password" field.
func AccessPasswordIsNil() predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAccessPassword)))
	})
}

// AccessPasswordNotNil applies the NotNil predicate on the "access_password" field.
func AccessPasswordNotNil() predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAccessPassword)))
	})
}

// AccessPasswordEqualFold applies the EqualFold predicate on the "access_password" field.
func AccessPasswordEqualFold(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAccessPassword), v))
	})
}

// AccessPasswordContainsFold applies the ContainsFold predicate on the "access_password" field.
func AccessPasswordContainsFold(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAccessPassword), v))
	})
}

// SaveCertInfoEQ applies the EQ predicate on the "save_cert_info" field.
func SaveCertInfoEQ(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSaveCertInfo), v))
	})
}

// SaveCertInfoNEQ applies the NEQ predicate on the "save_cert_info" field.
func SaveCertInfoNEQ(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSaveCertInfo), v))
	})
}

// SaveCertInfoIn applies the In predicate on the "save_cert_info" field.
func SaveCertInfoIn(vs ...string) predicate.ShipmentGatewayUps {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSaveCertInfo), v...))
	})
}

// SaveCertInfoNotIn applies the NotIn predicate on the "save_cert_info" field.
func SaveCertInfoNotIn(vs ...string) predicate.ShipmentGatewayUps {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSaveCertInfo), v...))
	})
}

// SaveCertInfoGT applies the GT predicate on the "save_cert_info" field.
func SaveCertInfoGT(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSaveCertInfo), v))
	})
}

// SaveCertInfoGTE applies the GTE predicate on the "save_cert_info" field.
func SaveCertInfoGTE(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSaveCertInfo), v))
	})
}

// SaveCertInfoLT applies the LT predicate on the "save_cert_info" field.
func SaveCertInfoLT(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSaveCertInfo), v))
	})
}

// SaveCertInfoLTE applies the LTE predicate on the "save_cert_info" field.
func SaveCertInfoLTE(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSaveCertInfo), v))
	})
}

// SaveCertInfoContains applies the Contains predicate on the "save_cert_info" field.
func SaveCertInfoContains(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSaveCertInfo), v))
	})
}

// SaveCertInfoHasPrefix applies the HasPrefix predicate on the "save_cert_info" field.
func SaveCertInfoHasPrefix(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSaveCertInfo), v))
	})
}

// SaveCertInfoHasSuffix applies the HasSuffix predicate on the "save_cert_info" field.
func SaveCertInfoHasSuffix(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSaveCertInfo), v))
	})
}

// SaveCertInfoIsNil applies the IsNil predicate on the "save_cert_info" field.
func SaveCertInfoIsNil() predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSaveCertInfo)))
	})
}

// SaveCertInfoNotNil applies the NotNil predicate on the "save_cert_info" field.
func SaveCertInfoNotNil() predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSaveCertInfo)))
	})
}

// SaveCertInfoEqualFold applies the EqualFold predicate on the "save_cert_info" field.
func SaveCertInfoEqualFold(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSaveCertInfo), v))
	})
}

// SaveCertInfoContainsFold applies the ContainsFold predicate on the "save_cert_info" field.
func SaveCertInfoContainsFold(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSaveCertInfo), v))
	})
}

// SaveCertPathEQ applies the EQ predicate on the "save_cert_path" field.
func SaveCertPathEQ(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSaveCertPath), v))
	})
}

// SaveCertPathNEQ applies the NEQ predicate on the "save_cert_path" field.
func SaveCertPathNEQ(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSaveCertPath), v))
	})
}

// SaveCertPathIn applies the In predicate on the "save_cert_path" field.
func SaveCertPathIn(vs ...string) predicate.ShipmentGatewayUps {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSaveCertPath), v...))
	})
}

// SaveCertPathNotIn applies the NotIn predicate on the "save_cert_path" field.
func SaveCertPathNotIn(vs ...string) predicate.ShipmentGatewayUps {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSaveCertPath), v...))
	})
}

// SaveCertPathGT applies the GT predicate on the "save_cert_path" field.
func SaveCertPathGT(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSaveCertPath), v))
	})
}

// SaveCertPathGTE applies the GTE predicate on the "save_cert_path" field.
func SaveCertPathGTE(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSaveCertPath), v))
	})
}

// SaveCertPathLT applies the LT predicate on the "save_cert_path" field.
func SaveCertPathLT(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSaveCertPath), v))
	})
}

// SaveCertPathLTE applies the LTE predicate on the "save_cert_path" field.
func SaveCertPathLTE(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSaveCertPath), v))
	})
}

// SaveCertPathContains applies the Contains predicate on the "save_cert_path" field.
func SaveCertPathContains(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSaveCertPath), v))
	})
}

// SaveCertPathHasPrefix applies the HasPrefix predicate on the "save_cert_path" field.
func SaveCertPathHasPrefix(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSaveCertPath), v))
	})
}

// SaveCertPathHasSuffix applies the HasSuffix predicate on the "save_cert_path" field.
func SaveCertPathHasSuffix(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSaveCertPath), v))
	})
}

// SaveCertPathIsNil applies the IsNil predicate on the "save_cert_path" field.
func SaveCertPathIsNil() predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSaveCertPath)))
	})
}

// SaveCertPathNotNil applies the NotNil predicate on the "save_cert_path" field.
func SaveCertPathNotNil() predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSaveCertPath)))
	})
}

// SaveCertPathEqualFold applies the EqualFold predicate on the "save_cert_path" field.
func SaveCertPathEqualFold(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSaveCertPath), v))
	})
}

// SaveCertPathContainsFold applies the ContainsFold predicate on the "save_cert_path" field.
func SaveCertPathContainsFold(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSaveCertPath), v))
	})
}

// ShipperPickupTypeEQ applies the EQ predicate on the "shipper_pickup_type" field.
func ShipperPickupTypeEQ(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShipperPickupType), v))
	})
}

// ShipperPickupTypeNEQ applies the NEQ predicate on the "shipper_pickup_type" field.
func ShipperPickupTypeNEQ(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShipperPickupType), v))
	})
}

// ShipperPickupTypeIn applies the In predicate on the "shipper_pickup_type" field.
func ShipperPickupTypeIn(vs ...string) predicate.ShipmentGatewayUps {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldShipperPickupType), v...))
	})
}

// ShipperPickupTypeNotIn applies the NotIn predicate on the "shipper_pickup_type" field.
func ShipperPickupTypeNotIn(vs ...string) predicate.ShipmentGatewayUps {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldShipperPickupType), v...))
	})
}

// ShipperPickupTypeGT applies the GT predicate on the "shipper_pickup_type" field.
func ShipperPickupTypeGT(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShipperPickupType), v))
	})
}

// ShipperPickupTypeGTE applies the GTE predicate on the "shipper_pickup_type" field.
func ShipperPickupTypeGTE(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShipperPickupType), v))
	})
}

// ShipperPickupTypeLT applies the LT predicate on the "shipper_pickup_type" field.
func ShipperPickupTypeLT(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShipperPickupType), v))
	})
}

// ShipperPickupTypeLTE applies the LTE predicate on the "shipper_pickup_type" field.
func ShipperPickupTypeLTE(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShipperPickupType), v))
	})
}

// ShipperPickupTypeContains applies the Contains predicate on the "shipper_pickup_type" field.
func ShipperPickupTypeContains(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldShipperPickupType), v))
	})
}

// ShipperPickupTypeHasPrefix applies the HasPrefix predicate on the "shipper_pickup_type" field.
func ShipperPickupTypeHasPrefix(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldShipperPickupType), v))
	})
}

// ShipperPickupTypeHasSuffix applies the HasSuffix predicate on the "shipper_pickup_type" field.
func ShipperPickupTypeHasSuffix(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldShipperPickupType), v))
	})
}

// ShipperPickupTypeIsNil applies the IsNil predicate on the "shipper_pickup_type" field.
func ShipperPickupTypeIsNil() predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldShipperPickupType)))
	})
}

// ShipperPickupTypeNotNil applies the NotNil predicate on the "shipper_pickup_type" field.
func ShipperPickupTypeNotNil() predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldShipperPickupType)))
	})
}

// ShipperPickupTypeEqualFold applies the EqualFold predicate on the "shipper_pickup_type" field.
func ShipperPickupTypeEqualFold(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldShipperPickupType), v))
	})
}

// ShipperPickupTypeContainsFold applies the ContainsFold predicate on the "shipper_pickup_type" field.
func ShipperPickupTypeContainsFold(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldShipperPickupType), v))
	})
}

// CustomerClassificationEQ applies the EQ predicate on the "customer_classification" field.
func CustomerClassificationEQ(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCustomerClassification), v))
	})
}

// CustomerClassificationNEQ applies the NEQ predicate on the "customer_classification" field.
func CustomerClassificationNEQ(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCustomerClassification), v))
	})
}

// CustomerClassificationIn applies the In predicate on the "customer_classification" field.
func CustomerClassificationIn(vs ...string) predicate.ShipmentGatewayUps {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCustomerClassification), v...))
	})
}

// CustomerClassificationNotIn applies the NotIn predicate on the "customer_classification" field.
func CustomerClassificationNotIn(vs ...string) predicate.ShipmentGatewayUps {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCustomerClassification), v...))
	})
}

// CustomerClassificationGT applies the GT predicate on the "customer_classification" field.
func CustomerClassificationGT(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCustomerClassification), v))
	})
}

// CustomerClassificationGTE applies the GTE predicate on the "customer_classification" field.
func CustomerClassificationGTE(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCustomerClassification), v))
	})
}

// CustomerClassificationLT applies the LT predicate on the "customer_classification" field.
func CustomerClassificationLT(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCustomerClassification), v))
	})
}

// CustomerClassificationLTE applies the LTE predicate on the "customer_classification" field.
func CustomerClassificationLTE(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCustomerClassification), v))
	})
}

// CustomerClassificationContains applies the Contains predicate on the "customer_classification" field.
func CustomerClassificationContains(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCustomerClassification), v))
	})
}

// CustomerClassificationHasPrefix applies the HasPrefix predicate on the "customer_classification" field.
func CustomerClassificationHasPrefix(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCustomerClassification), v))
	})
}

// CustomerClassificationHasSuffix applies the HasSuffix predicate on the "customer_classification" field.
func CustomerClassificationHasSuffix(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCustomerClassification), v))
	})
}

// CustomerClassificationIsNil applies the IsNil predicate on the "customer_classification" field.
func CustomerClassificationIsNil() predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCustomerClassification)))
	})
}

// CustomerClassificationNotNil applies the NotNil predicate on the "customer_classification" field.
func CustomerClassificationNotNil() predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCustomerClassification)))
	})
}

// CustomerClassificationEqualFold applies the EqualFold predicate on the "customer_classification" field.
func CustomerClassificationEqualFold(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCustomerClassification), v))
	})
}

// CustomerClassificationContainsFold applies the ContainsFold predicate on the "customer_classification" field.
func CustomerClassificationContainsFold(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCustomerClassification), v))
	})
}

// MaxEstimateWeightEQ applies the EQ predicate on the "max_estimate_weight" field.
func MaxEstimateWeightEQ(v float64) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMaxEstimateWeight), v))
	})
}

// MaxEstimateWeightNEQ applies the NEQ predicate on the "max_estimate_weight" field.
func MaxEstimateWeightNEQ(v float64) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMaxEstimateWeight), v))
	})
}

// MaxEstimateWeightIn applies the In predicate on the "max_estimate_weight" field.
func MaxEstimateWeightIn(vs ...float64) predicate.ShipmentGatewayUps {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMaxEstimateWeight), v...))
	})
}

// MaxEstimateWeightNotIn applies the NotIn predicate on the "max_estimate_weight" field.
func MaxEstimateWeightNotIn(vs ...float64) predicate.ShipmentGatewayUps {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMaxEstimateWeight), v...))
	})
}

// MaxEstimateWeightGT applies the GT predicate on the "max_estimate_weight" field.
func MaxEstimateWeightGT(v float64) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMaxEstimateWeight), v))
	})
}

// MaxEstimateWeightGTE applies the GTE predicate on the "max_estimate_weight" field.
func MaxEstimateWeightGTE(v float64) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMaxEstimateWeight), v))
	})
}

// MaxEstimateWeightLT applies the LT predicate on the "max_estimate_weight" field.
func MaxEstimateWeightLT(v float64) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMaxEstimateWeight), v))
	})
}

// MaxEstimateWeightLTE applies the LTE predicate on the "max_estimate_weight" field.
func MaxEstimateWeightLTE(v float64) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMaxEstimateWeight), v))
	})
}

// MaxEstimateWeightIsNil applies the IsNil predicate on the "max_estimate_weight" field.
func MaxEstimateWeightIsNil() predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMaxEstimateWeight)))
	})
}

// MaxEstimateWeightNotNil applies the NotNil predicate on the "max_estimate_weight" field.
func MaxEstimateWeightNotNil() predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMaxEstimateWeight)))
	})
}

// MinEstimateWeightEQ applies the EQ predicate on the "min_estimate_weight" field.
func MinEstimateWeightEQ(v float64) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMinEstimateWeight), v))
	})
}

// MinEstimateWeightNEQ applies the NEQ predicate on the "min_estimate_weight" field.
func MinEstimateWeightNEQ(v float64) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMinEstimateWeight), v))
	})
}

// MinEstimateWeightIn applies the In predicate on the "min_estimate_weight" field.
func MinEstimateWeightIn(vs ...float64) predicate.ShipmentGatewayUps {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMinEstimateWeight), v...))
	})
}

// MinEstimateWeightNotIn applies the NotIn predicate on the "min_estimate_weight" field.
func MinEstimateWeightNotIn(vs ...float64) predicate.ShipmentGatewayUps {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMinEstimateWeight), v...))
	})
}

// MinEstimateWeightGT applies the GT predicate on the "min_estimate_weight" field.
func MinEstimateWeightGT(v float64) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMinEstimateWeight), v))
	})
}

// MinEstimateWeightGTE applies the GTE predicate on the "min_estimate_weight" field.
func MinEstimateWeightGTE(v float64) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMinEstimateWeight), v))
	})
}

// MinEstimateWeightLT applies the LT predicate on the "min_estimate_weight" field.
func MinEstimateWeightLT(v float64) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMinEstimateWeight), v))
	})
}

// MinEstimateWeightLTE applies the LTE predicate on the "min_estimate_weight" field.
func MinEstimateWeightLTE(v float64) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMinEstimateWeight), v))
	})
}

// MinEstimateWeightIsNil applies the IsNil predicate on the "min_estimate_weight" field.
func MinEstimateWeightIsNil() predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMinEstimateWeight)))
	})
}

// MinEstimateWeightNotNil applies the NotNil predicate on the "min_estimate_weight" field.
func MinEstimateWeightNotNil() predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMinEstimateWeight)))
	})
}

// CodAllowCodEQ applies the EQ predicate on the "cod_allow_cod" field.
func CodAllowCodEQ(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCodAllowCod), v))
	})
}

// CodAllowCodNEQ applies the NEQ predicate on the "cod_allow_cod" field.
func CodAllowCodNEQ(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCodAllowCod), v))
	})
}

// CodAllowCodIn applies the In predicate on the "cod_allow_cod" field.
func CodAllowCodIn(vs ...string) predicate.ShipmentGatewayUps {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCodAllowCod), v...))
	})
}

// CodAllowCodNotIn applies the NotIn predicate on the "cod_allow_cod" field.
func CodAllowCodNotIn(vs ...string) predicate.ShipmentGatewayUps {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCodAllowCod), v...))
	})
}

// CodAllowCodGT applies the GT predicate on the "cod_allow_cod" field.
func CodAllowCodGT(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCodAllowCod), v))
	})
}

// CodAllowCodGTE applies the GTE predicate on the "cod_allow_cod" field.
func CodAllowCodGTE(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCodAllowCod), v))
	})
}

// CodAllowCodLT applies the LT predicate on the "cod_allow_cod" field.
func CodAllowCodLT(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCodAllowCod), v))
	})
}

// CodAllowCodLTE applies the LTE predicate on the "cod_allow_cod" field.
func CodAllowCodLTE(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCodAllowCod), v))
	})
}

// CodAllowCodContains applies the Contains predicate on the "cod_allow_cod" field.
func CodAllowCodContains(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCodAllowCod), v))
	})
}

// CodAllowCodHasPrefix applies the HasPrefix predicate on the "cod_allow_cod" field.
func CodAllowCodHasPrefix(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCodAllowCod), v))
	})
}

// CodAllowCodHasSuffix applies the HasSuffix predicate on the "cod_allow_cod" field.
func CodAllowCodHasSuffix(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCodAllowCod), v))
	})
}

// CodAllowCodIsNil applies the IsNil predicate on the "cod_allow_cod" field.
func CodAllowCodIsNil() predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCodAllowCod)))
	})
}

// CodAllowCodNotNil applies the NotNil predicate on the "cod_allow_cod" field.
func CodAllowCodNotNil() predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCodAllowCod)))
	})
}

// CodAllowCodEqualFold applies the EqualFold predicate on the "cod_allow_cod" field.
func CodAllowCodEqualFold(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCodAllowCod), v))
	})
}

// CodAllowCodContainsFold applies the ContainsFold predicate on the "cod_allow_cod" field.
func CodAllowCodContainsFold(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCodAllowCod), v))
	})
}

// CodSurchargeAmountEQ applies the EQ predicate on the "cod_surcharge_amount" field.
func CodSurchargeAmountEQ(v float64) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCodSurchargeAmount), v))
	})
}

// CodSurchargeAmountNEQ applies the NEQ predicate on the "cod_surcharge_amount" field.
func CodSurchargeAmountNEQ(v float64) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCodSurchargeAmount), v))
	})
}

// CodSurchargeAmountIn applies the In predicate on the "cod_surcharge_amount" field.
func CodSurchargeAmountIn(vs ...float64) predicate.ShipmentGatewayUps {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCodSurchargeAmount), v...))
	})
}

// CodSurchargeAmountNotIn applies the NotIn predicate on the "cod_surcharge_amount" field.
func CodSurchargeAmountNotIn(vs ...float64) predicate.ShipmentGatewayUps {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCodSurchargeAmount), v...))
	})
}

// CodSurchargeAmountGT applies the GT predicate on the "cod_surcharge_amount" field.
func CodSurchargeAmountGT(v float64) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCodSurchargeAmount), v))
	})
}

// CodSurchargeAmountGTE applies the GTE predicate on the "cod_surcharge_amount" field.
func CodSurchargeAmountGTE(v float64) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCodSurchargeAmount), v))
	})
}

// CodSurchargeAmountLT applies the LT predicate on the "cod_surcharge_amount" field.
func CodSurchargeAmountLT(v float64) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCodSurchargeAmount), v))
	})
}

// CodSurchargeAmountLTE applies the LTE predicate on the "cod_surcharge_amount" field.
func CodSurchargeAmountLTE(v float64) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCodSurchargeAmount), v))
	})
}

// CodSurchargeAmountIsNil applies the IsNil predicate on the "cod_surcharge_amount" field.
func CodSurchargeAmountIsNil() predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCodSurchargeAmount)))
	})
}

// CodSurchargeAmountNotNil applies the NotNil predicate on the "cod_surcharge_amount" field.
func CodSurchargeAmountNotNil() predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCodSurchargeAmount)))
	})
}

// CodSurchargeCurrencyUomIDEQ applies the EQ predicate on the "cod_surcharge_currency_uom_id" field.
func CodSurchargeCurrencyUomIDEQ(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCodSurchargeCurrencyUomID), v))
	})
}

// CodSurchargeCurrencyUomIDNEQ applies the NEQ predicate on the "cod_surcharge_currency_uom_id" field.
func CodSurchargeCurrencyUomIDNEQ(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCodSurchargeCurrencyUomID), v))
	})
}

// CodSurchargeCurrencyUomIDIn applies the In predicate on the "cod_surcharge_currency_uom_id" field.
func CodSurchargeCurrencyUomIDIn(vs ...string) predicate.ShipmentGatewayUps {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCodSurchargeCurrencyUomID), v...))
	})
}

// CodSurchargeCurrencyUomIDNotIn applies the NotIn predicate on the "cod_surcharge_currency_uom_id" field.
func CodSurchargeCurrencyUomIDNotIn(vs ...string) predicate.ShipmentGatewayUps {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCodSurchargeCurrencyUomID), v...))
	})
}

// CodSurchargeCurrencyUomIDGT applies the GT predicate on the "cod_surcharge_currency_uom_id" field.
func CodSurchargeCurrencyUomIDGT(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCodSurchargeCurrencyUomID), v))
	})
}

// CodSurchargeCurrencyUomIDGTE applies the GTE predicate on the "cod_surcharge_currency_uom_id" field.
func CodSurchargeCurrencyUomIDGTE(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCodSurchargeCurrencyUomID), v))
	})
}

// CodSurchargeCurrencyUomIDLT applies the LT predicate on the "cod_surcharge_currency_uom_id" field.
func CodSurchargeCurrencyUomIDLT(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCodSurchargeCurrencyUomID), v))
	})
}

// CodSurchargeCurrencyUomIDLTE applies the LTE predicate on the "cod_surcharge_currency_uom_id" field.
func CodSurchargeCurrencyUomIDLTE(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCodSurchargeCurrencyUomID), v))
	})
}

// CodSurchargeCurrencyUomIDContains applies the Contains predicate on the "cod_surcharge_currency_uom_id" field.
func CodSurchargeCurrencyUomIDContains(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCodSurchargeCurrencyUomID), v))
	})
}

// CodSurchargeCurrencyUomIDHasPrefix applies the HasPrefix predicate on the "cod_surcharge_currency_uom_id" field.
func CodSurchargeCurrencyUomIDHasPrefix(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCodSurchargeCurrencyUomID), v))
	})
}

// CodSurchargeCurrencyUomIDHasSuffix applies the HasSuffix predicate on the "cod_surcharge_currency_uom_id" field.
func CodSurchargeCurrencyUomIDHasSuffix(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCodSurchargeCurrencyUomID), v))
	})
}

// CodSurchargeCurrencyUomIDIsNil applies the IsNil predicate on the "cod_surcharge_currency_uom_id" field.
func CodSurchargeCurrencyUomIDIsNil() predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCodSurchargeCurrencyUomID)))
	})
}

// CodSurchargeCurrencyUomIDNotNil applies the NotNil predicate on the "cod_surcharge_currency_uom_id" field.
func CodSurchargeCurrencyUomIDNotNil() predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCodSurchargeCurrencyUomID)))
	})
}

// CodSurchargeCurrencyUomIDEqualFold applies the EqualFold predicate on the "cod_surcharge_currency_uom_id" field.
func CodSurchargeCurrencyUomIDEqualFold(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCodSurchargeCurrencyUomID), v))
	})
}

// CodSurchargeCurrencyUomIDContainsFold applies the ContainsFold predicate on the "cod_surcharge_currency_uom_id" field.
func CodSurchargeCurrencyUomIDContainsFold(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCodSurchargeCurrencyUomID), v))
	})
}

// CodSurchargeApplyToPackageEQ applies the EQ predicate on the "cod_surcharge_apply_to_package" field.
func CodSurchargeApplyToPackageEQ(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCodSurchargeApplyToPackage), v))
	})
}

// CodSurchargeApplyToPackageNEQ applies the NEQ predicate on the "cod_surcharge_apply_to_package" field.
func CodSurchargeApplyToPackageNEQ(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCodSurchargeApplyToPackage), v))
	})
}

// CodSurchargeApplyToPackageIn applies the In predicate on the "cod_surcharge_apply_to_package" field.
func CodSurchargeApplyToPackageIn(vs ...string) predicate.ShipmentGatewayUps {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCodSurchargeApplyToPackage), v...))
	})
}

// CodSurchargeApplyToPackageNotIn applies the NotIn predicate on the "cod_surcharge_apply_to_package" field.
func CodSurchargeApplyToPackageNotIn(vs ...string) predicate.ShipmentGatewayUps {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCodSurchargeApplyToPackage), v...))
	})
}

// CodSurchargeApplyToPackageGT applies the GT predicate on the "cod_surcharge_apply_to_package" field.
func CodSurchargeApplyToPackageGT(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCodSurchargeApplyToPackage), v))
	})
}

// CodSurchargeApplyToPackageGTE applies the GTE predicate on the "cod_surcharge_apply_to_package" field.
func CodSurchargeApplyToPackageGTE(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCodSurchargeApplyToPackage), v))
	})
}

// CodSurchargeApplyToPackageLT applies the LT predicate on the "cod_surcharge_apply_to_package" field.
func CodSurchargeApplyToPackageLT(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCodSurchargeApplyToPackage), v))
	})
}

// CodSurchargeApplyToPackageLTE applies the LTE predicate on the "cod_surcharge_apply_to_package" field.
func CodSurchargeApplyToPackageLTE(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCodSurchargeApplyToPackage), v))
	})
}

// CodSurchargeApplyToPackageContains applies the Contains predicate on the "cod_surcharge_apply_to_package" field.
func CodSurchargeApplyToPackageContains(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCodSurchargeApplyToPackage), v))
	})
}

// CodSurchargeApplyToPackageHasPrefix applies the HasPrefix predicate on the "cod_surcharge_apply_to_package" field.
func CodSurchargeApplyToPackageHasPrefix(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCodSurchargeApplyToPackage), v))
	})
}

// CodSurchargeApplyToPackageHasSuffix applies the HasSuffix predicate on the "cod_surcharge_apply_to_package" field.
func CodSurchargeApplyToPackageHasSuffix(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCodSurchargeApplyToPackage), v))
	})
}

// CodSurchargeApplyToPackageIsNil applies the IsNil predicate on the "cod_surcharge_apply_to_package" field.
func CodSurchargeApplyToPackageIsNil() predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCodSurchargeApplyToPackage)))
	})
}

// CodSurchargeApplyToPackageNotNil applies the NotNil predicate on the "cod_surcharge_apply_to_package" field.
func CodSurchargeApplyToPackageNotNil() predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCodSurchargeApplyToPackage)))
	})
}

// CodSurchargeApplyToPackageEqualFold applies the EqualFold predicate on the "cod_surcharge_apply_to_package" field.
func CodSurchargeApplyToPackageEqualFold(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCodSurchargeApplyToPackage), v))
	})
}

// CodSurchargeApplyToPackageContainsFold applies the ContainsFold predicate on the "cod_surcharge_apply_to_package" field.
func CodSurchargeApplyToPackageContainsFold(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCodSurchargeApplyToPackage), v))
	})
}

// CodFundsCodeEQ applies the EQ predicate on the "cod_funds_code" field.
func CodFundsCodeEQ(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCodFundsCode), v))
	})
}

// CodFundsCodeNEQ applies the NEQ predicate on the "cod_funds_code" field.
func CodFundsCodeNEQ(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCodFundsCode), v))
	})
}

// CodFundsCodeIn applies the In predicate on the "cod_funds_code" field.
func CodFundsCodeIn(vs ...string) predicate.ShipmentGatewayUps {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCodFundsCode), v...))
	})
}

// CodFundsCodeNotIn applies the NotIn predicate on the "cod_funds_code" field.
func CodFundsCodeNotIn(vs ...string) predicate.ShipmentGatewayUps {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCodFundsCode), v...))
	})
}

// CodFundsCodeGT applies the GT predicate on the "cod_funds_code" field.
func CodFundsCodeGT(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCodFundsCode), v))
	})
}

// CodFundsCodeGTE applies the GTE predicate on the "cod_funds_code" field.
func CodFundsCodeGTE(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCodFundsCode), v))
	})
}

// CodFundsCodeLT applies the LT predicate on the "cod_funds_code" field.
func CodFundsCodeLT(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCodFundsCode), v))
	})
}

// CodFundsCodeLTE applies the LTE predicate on the "cod_funds_code" field.
func CodFundsCodeLTE(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCodFundsCode), v))
	})
}

// CodFundsCodeContains applies the Contains predicate on the "cod_funds_code" field.
func CodFundsCodeContains(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCodFundsCode), v))
	})
}

// CodFundsCodeHasPrefix applies the HasPrefix predicate on the "cod_funds_code" field.
func CodFundsCodeHasPrefix(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCodFundsCode), v))
	})
}

// CodFundsCodeHasSuffix applies the HasSuffix predicate on the "cod_funds_code" field.
func CodFundsCodeHasSuffix(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCodFundsCode), v))
	})
}

// CodFundsCodeIsNil applies the IsNil predicate on the "cod_funds_code" field.
func CodFundsCodeIsNil() predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCodFundsCode)))
	})
}

// CodFundsCodeNotNil applies the NotNil predicate on the "cod_funds_code" field.
func CodFundsCodeNotNil() predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCodFundsCode)))
	})
}

// CodFundsCodeEqualFold applies the EqualFold predicate on the "cod_funds_code" field.
func CodFundsCodeEqualFold(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCodFundsCode), v))
	})
}

// CodFundsCodeContainsFold applies the ContainsFold predicate on the "cod_funds_code" field.
func CodFundsCodeContainsFold(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCodFundsCode), v))
	})
}

// DefaultReturnLabelMemoEQ applies the EQ predicate on the "default_return_label_memo" field.
func DefaultReturnLabelMemoEQ(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDefaultReturnLabelMemo), v))
	})
}

// DefaultReturnLabelMemoNEQ applies the NEQ predicate on the "default_return_label_memo" field.
func DefaultReturnLabelMemoNEQ(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDefaultReturnLabelMemo), v))
	})
}

// DefaultReturnLabelMemoIn applies the In predicate on the "default_return_label_memo" field.
func DefaultReturnLabelMemoIn(vs ...string) predicate.ShipmentGatewayUps {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDefaultReturnLabelMemo), v...))
	})
}

// DefaultReturnLabelMemoNotIn applies the NotIn predicate on the "default_return_label_memo" field.
func DefaultReturnLabelMemoNotIn(vs ...string) predicate.ShipmentGatewayUps {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDefaultReturnLabelMemo), v...))
	})
}

// DefaultReturnLabelMemoGT applies the GT predicate on the "default_return_label_memo" field.
func DefaultReturnLabelMemoGT(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDefaultReturnLabelMemo), v))
	})
}

// DefaultReturnLabelMemoGTE applies the GTE predicate on the "default_return_label_memo" field.
func DefaultReturnLabelMemoGTE(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDefaultReturnLabelMemo), v))
	})
}

// DefaultReturnLabelMemoLT applies the LT predicate on the "default_return_label_memo" field.
func DefaultReturnLabelMemoLT(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDefaultReturnLabelMemo), v))
	})
}

// DefaultReturnLabelMemoLTE applies the LTE predicate on the "default_return_label_memo" field.
func DefaultReturnLabelMemoLTE(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDefaultReturnLabelMemo), v))
	})
}

// DefaultReturnLabelMemoContains applies the Contains predicate on the "default_return_label_memo" field.
func DefaultReturnLabelMemoContains(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDefaultReturnLabelMemo), v))
	})
}

// DefaultReturnLabelMemoHasPrefix applies the HasPrefix predicate on the "default_return_label_memo" field.
func DefaultReturnLabelMemoHasPrefix(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDefaultReturnLabelMemo), v))
	})
}

// DefaultReturnLabelMemoHasSuffix applies the HasSuffix predicate on the "default_return_label_memo" field.
func DefaultReturnLabelMemoHasSuffix(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDefaultReturnLabelMemo), v))
	})
}

// DefaultReturnLabelMemoIsNil applies the IsNil predicate on the "default_return_label_memo" field.
func DefaultReturnLabelMemoIsNil() predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDefaultReturnLabelMemo)))
	})
}

// DefaultReturnLabelMemoNotNil applies the NotNil predicate on the "default_return_label_memo" field.
func DefaultReturnLabelMemoNotNil() predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDefaultReturnLabelMemo)))
	})
}

// DefaultReturnLabelMemoEqualFold applies the EqualFold predicate on the "default_return_label_memo" field.
func DefaultReturnLabelMemoEqualFold(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDefaultReturnLabelMemo), v))
	})
}

// DefaultReturnLabelMemoContainsFold applies the ContainsFold predicate on the "default_return_label_memo" field.
func DefaultReturnLabelMemoContainsFold(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDefaultReturnLabelMemo), v))
	})
}

// DefaultReturnLabelSubjectEQ applies the EQ predicate on the "default_return_label_subject" field.
func DefaultReturnLabelSubjectEQ(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDefaultReturnLabelSubject), v))
	})
}

// DefaultReturnLabelSubjectNEQ applies the NEQ predicate on the "default_return_label_subject" field.
func DefaultReturnLabelSubjectNEQ(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDefaultReturnLabelSubject), v))
	})
}

// DefaultReturnLabelSubjectIn applies the In predicate on the "default_return_label_subject" field.
func DefaultReturnLabelSubjectIn(vs ...string) predicate.ShipmentGatewayUps {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDefaultReturnLabelSubject), v...))
	})
}

// DefaultReturnLabelSubjectNotIn applies the NotIn predicate on the "default_return_label_subject" field.
func DefaultReturnLabelSubjectNotIn(vs ...string) predicate.ShipmentGatewayUps {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDefaultReturnLabelSubject), v...))
	})
}

// DefaultReturnLabelSubjectGT applies the GT predicate on the "default_return_label_subject" field.
func DefaultReturnLabelSubjectGT(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDefaultReturnLabelSubject), v))
	})
}

// DefaultReturnLabelSubjectGTE applies the GTE predicate on the "default_return_label_subject" field.
func DefaultReturnLabelSubjectGTE(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDefaultReturnLabelSubject), v))
	})
}

// DefaultReturnLabelSubjectLT applies the LT predicate on the "default_return_label_subject" field.
func DefaultReturnLabelSubjectLT(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDefaultReturnLabelSubject), v))
	})
}

// DefaultReturnLabelSubjectLTE applies the LTE predicate on the "default_return_label_subject" field.
func DefaultReturnLabelSubjectLTE(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDefaultReturnLabelSubject), v))
	})
}

// DefaultReturnLabelSubjectContains applies the Contains predicate on the "default_return_label_subject" field.
func DefaultReturnLabelSubjectContains(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDefaultReturnLabelSubject), v))
	})
}

// DefaultReturnLabelSubjectHasPrefix applies the HasPrefix predicate on the "default_return_label_subject" field.
func DefaultReturnLabelSubjectHasPrefix(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDefaultReturnLabelSubject), v))
	})
}

// DefaultReturnLabelSubjectHasSuffix applies the HasSuffix predicate on the "default_return_label_subject" field.
func DefaultReturnLabelSubjectHasSuffix(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDefaultReturnLabelSubject), v))
	})
}

// DefaultReturnLabelSubjectIsNil applies the IsNil predicate on the "default_return_label_subject" field.
func DefaultReturnLabelSubjectIsNil() predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDefaultReturnLabelSubject)))
	})
}

// DefaultReturnLabelSubjectNotNil applies the NotNil predicate on the "default_return_label_subject" field.
func DefaultReturnLabelSubjectNotNil() predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDefaultReturnLabelSubject)))
	})
}

// DefaultReturnLabelSubjectEqualFold applies the EqualFold predicate on the "default_return_label_subject" field.
func DefaultReturnLabelSubjectEqualFold(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDefaultReturnLabelSubject), v))
	})
}

// DefaultReturnLabelSubjectContainsFold applies the ContainsFold predicate on the "default_return_label_subject" field.
func DefaultReturnLabelSubjectContainsFold(v string) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDefaultReturnLabelSubject), v))
	})
}

// HasShipmentGatewayConfig applies the HasEdge predicate on the "shipment_gateway_config" edge.
func HasShipmentGatewayConfig() predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ShipmentGatewayConfigTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, ShipmentGatewayConfigTable, ShipmentGatewayConfigColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasShipmentGatewayConfigWith applies the HasEdge predicate on the "shipment_gateway_config" edge with a given conditions (other predicates).
func HasShipmentGatewayConfigWith(preds ...predicate.ShipmentGatewayConfig) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ShipmentGatewayConfigInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, ShipmentGatewayConfigTable, ShipmentGatewayConfigColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ShipmentGatewayUps) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ShipmentGatewayUps) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ShipmentGatewayUps) predicate.ShipmentGatewayUps {
	return predicate.ShipmentGatewayUps(func(s *sql.Selector) {
		p(s.Not())
	})
}
