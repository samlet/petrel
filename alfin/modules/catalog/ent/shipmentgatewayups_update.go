// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/predicate"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/shipmentgatewayconfig"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/shipmentgatewayups"
)

// ShipmentGatewayUpsUpdate is the builder for updating ShipmentGatewayUps entities.
type ShipmentGatewayUpsUpdate struct {
	config
	hooks    []Hook
	mutation *ShipmentGatewayUpsMutation
}

// Where adds a new predicate for the ShipmentGatewayUpsUpdate builder.
func (sguu *ShipmentGatewayUpsUpdate) Where(ps ...predicate.ShipmentGatewayUps) *ShipmentGatewayUpsUpdate {
	sguu.mutation.predicates = append(sguu.mutation.predicates, ps...)
	return sguu
}

// SetStringRef sets the "string_ref" field.
func (sguu *ShipmentGatewayUpsUpdate) SetStringRef(s string) *ShipmentGatewayUpsUpdate {
	sguu.mutation.SetStringRef(s)
	return sguu
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (sguu *ShipmentGatewayUpsUpdate) SetNillableStringRef(s *string) *ShipmentGatewayUpsUpdate {
	if s != nil {
		sguu.SetStringRef(*s)
	}
	return sguu
}

// ClearStringRef clears the value of the "string_ref" field.
func (sguu *ShipmentGatewayUpsUpdate) ClearStringRef() *ShipmentGatewayUpsUpdate {
	sguu.mutation.ClearStringRef()
	return sguu
}

// SetConnectURL sets the "connect_url" field.
func (sguu *ShipmentGatewayUpsUpdate) SetConnectURL(s string) *ShipmentGatewayUpsUpdate {
	sguu.mutation.SetConnectURL(s)
	return sguu
}

// SetNillableConnectURL sets the "connect_url" field if the given value is not nil.
func (sguu *ShipmentGatewayUpsUpdate) SetNillableConnectURL(s *string) *ShipmentGatewayUpsUpdate {
	if s != nil {
		sguu.SetConnectURL(*s)
	}
	return sguu
}

// ClearConnectURL clears the value of the "connect_url" field.
func (sguu *ShipmentGatewayUpsUpdate) ClearConnectURL() *ShipmentGatewayUpsUpdate {
	sguu.mutation.ClearConnectURL()
	return sguu
}

// SetConnectTimeout sets the "connect_timeout" field.
func (sguu *ShipmentGatewayUpsUpdate) SetConnectTimeout(i int) *ShipmentGatewayUpsUpdate {
	sguu.mutation.ResetConnectTimeout()
	sguu.mutation.SetConnectTimeout(i)
	return sguu
}

// SetNillableConnectTimeout sets the "connect_timeout" field if the given value is not nil.
func (sguu *ShipmentGatewayUpsUpdate) SetNillableConnectTimeout(i *int) *ShipmentGatewayUpsUpdate {
	if i != nil {
		sguu.SetConnectTimeout(*i)
	}
	return sguu
}

// AddConnectTimeout adds i to the "connect_timeout" field.
func (sguu *ShipmentGatewayUpsUpdate) AddConnectTimeout(i int) *ShipmentGatewayUpsUpdate {
	sguu.mutation.AddConnectTimeout(i)
	return sguu
}

// ClearConnectTimeout clears the value of the "connect_timeout" field.
func (sguu *ShipmentGatewayUpsUpdate) ClearConnectTimeout() *ShipmentGatewayUpsUpdate {
	sguu.mutation.ClearConnectTimeout()
	return sguu
}

// SetShipperNumber sets the "shipper_number" field.
func (sguu *ShipmentGatewayUpsUpdate) SetShipperNumber(s string) *ShipmentGatewayUpsUpdate {
	sguu.mutation.SetShipperNumber(s)
	return sguu
}

// SetNillableShipperNumber sets the "shipper_number" field if the given value is not nil.
func (sguu *ShipmentGatewayUpsUpdate) SetNillableShipperNumber(s *string) *ShipmentGatewayUpsUpdate {
	if s != nil {
		sguu.SetShipperNumber(*s)
	}
	return sguu
}

// ClearShipperNumber clears the value of the "shipper_number" field.
func (sguu *ShipmentGatewayUpsUpdate) ClearShipperNumber() *ShipmentGatewayUpsUpdate {
	sguu.mutation.ClearShipperNumber()
	return sguu
}

// SetBillShipperAccountNumber sets the "bill_shipper_account_number" field.
func (sguu *ShipmentGatewayUpsUpdate) SetBillShipperAccountNumber(s string) *ShipmentGatewayUpsUpdate {
	sguu.mutation.SetBillShipperAccountNumber(s)
	return sguu
}

// SetNillableBillShipperAccountNumber sets the "bill_shipper_account_number" field if the given value is not nil.
func (sguu *ShipmentGatewayUpsUpdate) SetNillableBillShipperAccountNumber(s *string) *ShipmentGatewayUpsUpdate {
	if s != nil {
		sguu.SetBillShipperAccountNumber(*s)
	}
	return sguu
}

// ClearBillShipperAccountNumber clears the value of the "bill_shipper_account_number" field.
func (sguu *ShipmentGatewayUpsUpdate) ClearBillShipperAccountNumber() *ShipmentGatewayUpsUpdate {
	sguu.mutation.ClearBillShipperAccountNumber()
	return sguu
}

// SetAccessLicenseNumber sets the "access_license_number" field.
func (sguu *ShipmentGatewayUpsUpdate) SetAccessLicenseNumber(s string) *ShipmentGatewayUpsUpdate {
	sguu.mutation.SetAccessLicenseNumber(s)
	return sguu
}

// SetNillableAccessLicenseNumber sets the "access_license_number" field if the given value is not nil.
func (sguu *ShipmentGatewayUpsUpdate) SetNillableAccessLicenseNumber(s *string) *ShipmentGatewayUpsUpdate {
	if s != nil {
		sguu.SetAccessLicenseNumber(*s)
	}
	return sguu
}

// ClearAccessLicenseNumber clears the value of the "access_license_number" field.
func (sguu *ShipmentGatewayUpsUpdate) ClearAccessLicenseNumber() *ShipmentGatewayUpsUpdate {
	sguu.mutation.ClearAccessLicenseNumber()
	return sguu
}

// SetAccessUserID sets the "access_user_id" field.
func (sguu *ShipmentGatewayUpsUpdate) SetAccessUserID(s string) *ShipmentGatewayUpsUpdate {
	sguu.mutation.SetAccessUserID(s)
	return sguu
}

// SetNillableAccessUserID sets the "access_user_id" field if the given value is not nil.
func (sguu *ShipmentGatewayUpsUpdate) SetNillableAccessUserID(s *string) *ShipmentGatewayUpsUpdate {
	if s != nil {
		sguu.SetAccessUserID(*s)
	}
	return sguu
}

// ClearAccessUserID clears the value of the "access_user_id" field.
func (sguu *ShipmentGatewayUpsUpdate) ClearAccessUserID() *ShipmentGatewayUpsUpdate {
	sguu.mutation.ClearAccessUserID()
	return sguu
}

// SetAccessPassword sets the "access_password" field.
func (sguu *ShipmentGatewayUpsUpdate) SetAccessPassword(s string) *ShipmentGatewayUpsUpdate {
	sguu.mutation.SetAccessPassword(s)
	return sguu
}

// SetNillableAccessPassword sets the "access_password" field if the given value is not nil.
func (sguu *ShipmentGatewayUpsUpdate) SetNillableAccessPassword(s *string) *ShipmentGatewayUpsUpdate {
	if s != nil {
		sguu.SetAccessPassword(*s)
	}
	return sguu
}

// ClearAccessPassword clears the value of the "access_password" field.
func (sguu *ShipmentGatewayUpsUpdate) ClearAccessPassword() *ShipmentGatewayUpsUpdate {
	sguu.mutation.ClearAccessPassword()
	return sguu
}

// SetSaveCertInfo sets the "save_cert_info" field.
func (sguu *ShipmentGatewayUpsUpdate) SetSaveCertInfo(s string) *ShipmentGatewayUpsUpdate {
	sguu.mutation.SetSaveCertInfo(s)
	return sguu
}

// SetNillableSaveCertInfo sets the "save_cert_info" field if the given value is not nil.
func (sguu *ShipmentGatewayUpsUpdate) SetNillableSaveCertInfo(s *string) *ShipmentGatewayUpsUpdate {
	if s != nil {
		sguu.SetSaveCertInfo(*s)
	}
	return sguu
}

// ClearSaveCertInfo clears the value of the "save_cert_info" field.
func (sguu *ShipmentGatewayUpsUpdate) ClearSaveCertInfo() *ShipmentGatewayUpsUpdate {
	sguu.mutation.ClearSaveCertInfo()
	return sguu
}

// SetSaveCertPath sets the "save_cert_path" field.
func (sguu *ShipmentGatewayUpsUpdate) SetSaveCertPath(s string) *ShipmentGatewayUpsUpdate {
	sguu.mutation.SetSaveCertPath(s)
	return sguu
}

// SetNillableSaveCertPath sets the "save_cert_path" field if the given value is not nil.
func (sguu *ShipmentGatewayUpsUpdate) SetNillableSaveCertPath(s *string) *ShipmentGatewayUpsUpdate {
	if s != nil {
		sguu.SetSaveCertPath(*s)
	}
	return sguu
}

// ClearSaveCertPath clears the value of the "save_cert_path" field.
func (sguu *ShipmentGatewayUpsUpdate) ClearSaveCertPath() *ShipmentGatewayUpsUpdate {
	sguu.mutation.ClearSaveCertPath()
	return sguu
}

// SetShipperPickupType sets the "shipper_pickup_type" field.
func (sguu *ShipmentGatewayUpsUpdate) SetShipperPickupType(s string) *ShipmentGatewayUpsUpdate {
	sguu.mutation.SetShipperPickupType(s)
	return sguu
}

// SetNillableShipperPickupType sets the "shipper_pickup_type" field if the given value is not nil.
func (sguu *ShipmentGatewayUpsUpdate) SetNillableShipperPickupType(s *string) *ShipmentGatewayUpsUpdate {
	if s != nil {
		sguu.SetShipperPickupType(*s)
	}
	return sguu
}

// ClearShipperPickupType clears the value of the "shipper_pickup_type" field.
func (sguu *ShipmentGatewayUpsUpdate) ClearShipperPickupType() *ShipmentGatewayUpsUpdate {
	sguu.mutation.ClearShipperPickupType()
	return sguu
}

// SetCustomerClassification sets the "customer_classification" field.
func (sguu *ShipmentGatewayUpsUpdate) SetCustomerClassification(s string) *ShipmentGatewayUpsUpdate {
	sguu.mutation.SetCustomerClassification(s)
	return sguu
}

// SetNillableCustomerClassification sets the "customer_classification" field if the given value is not nil.
func (sguu *ShipmentGatewayUpsUpdate) SetNillableCustomerClassification(s *string) *ShipmentGatewayUpsUpdate {
	if s != nil {
		sguu.SetCustomerClassification(*s)
	}
	return sguu
}

// ClearCustomerClassification clears the value of the "customer_classification" field.
func (sguu *ShipmentGatewayUpsUpdate) ClearCustomerClassification() *ShipmentGatewayUpsUpdate {
	sguu.mutation.ClearCustomerClassification()
	return sguu
}

// SetMaxEstimateWeight sets the "max_estimate_weight" field.
func (sguu *ShipmentGatewayUpsUpdate) SetMaxEstimateWeight(f float64) *ShipmentGatewayUpsUpdate {
	sguu.mutation.ResetMaxEstimateWeight()
	sguu.mutation.SetMaxEstimateWeight(f)
	return sguu
}

// SetNillableMaxEstimateWeight sets the "max_estimate_weight" field if the given value is not nil.
func (sguu *ShipmentGatewayUpsUpdate) SetNillableMaxEstimateWeight(f *float64) *ShipmentGatewayUpsUpdate {
	if f != nil {
		sguu.SetMaxEstimateWeight(*f)
	}
	return sguu
}

// AddMaxEstimateWeight adds f to the "max_estimate_weight" field.
func (sguu *ShipmentGatewayUpsUpdate) AddMaxEstimateWeight(f float64) *ShipmentGatewayUpsUpdate {
	sguu.mutation.AddMaxEstimateWeight(f)
	return sguu
}

// ClearMaxEstimateWeight clears the value of the "max_estimate_weight" field.
func (sguu *ShipmentGatewayUpsUpdate) ClearMaxEstimateWeight() *ShipmentGatewayUpsUpdate {
	sguu.mutation.ClearMaxEstimateWeight()
	return sguu
}

// SetMinEstimateWeight sets the "min_estimate_weight" field.
func (sguu *ShipmentGatewayUpsUpdate) SetMinEstimateWeight(f float64) *ShipmentGatewayUpsUpdate {
	sguu.mutation.ResetMinEstimateWeight()
	sguu.mutation.SetMinEstimateWeight(f)
	return sguu
}

// SetNillableMinEstimateWeight sets the "min_estimate_weight" field if the given value is not nil.
func (sguu *ShipmentGatewayUpsUpdate) SetNillableMinEstimateWeight(f *float64) *ShipmentGatewayUpsUpdate {
	if f != nil {
		sguu.SetMinEstimateWeight(*f)
	}
	return sguu
}

// AddMinEstimateWeight adds f to the "min_estimate_weight" field.
func (sguu *ShipmentGatewayUpsUpdate) AddMinEstimateWeight(f float64) *ShipmentGatewayUpsUpdate {
	sguu.mutation.AddMinEstimateWeight(f)
	return sguu
}

// ClearMinEstimateWeight clears the value of the "min_estimate_weight" field.
func (sguu *ShipmentGatewayUpsUpdate) ClearMinEstimateWeight() *ShipmentGatewayUpsUpdate {
	sguu.mutation.ClearMinEstimateWeight()
	return sguu
}

// SetCodAllowCod sets the "cod_allow_cod" field.
func (sguu *ShipmentGatewayUpsUpdate) SetCodAllowCod(s string) *ShipmentGatewayUpsUpdate {
	sguu.mutation.SetCodAllowCod(s)
	return sguu
}

// SetNillableCodAllowCod sets the "cod_allow_cod" field if the given value is not nil.
func (sguu *ShipmentGatewayUpsUpdate) SetNillableCodAllowCod(s *string) *ShipmentGatewayUpsUpdate {
	if s != nil {
		sguu.SetCodAllowCod(*s)
	}
	return sguu
}

// ClearCodAllowCod clears the value of the "cod_allow_cod" field.
func (sguu *ShipmentGatewayUpsUpdate) ClearCodAllowCod() *ShipmentGatewayUpsUpdate {
	sguu.mutation.ClearCodAllowCod()
	return sguu
}

// SetCodSurchargeAmount sets the "cod_surcharge_amount" field.
func (sguu *ShipmentGatewayUpsUpdate) SetCodSurchargeAmount(f float64) *ShipmentGatewayUpsUpdate {
	sguu.mutation.ResetCodSurchargeAmount()
	sguu.mutation.SetCodSurchargeAmount(f)
	return sguu
}

// SetNillableCodSurchargeAmount sets the "cod_surcharge_amount" field if the given value is not nil.
func (sguu *ShipmentGatewayUpsUpdate) SetNillableCodSurchargeAmount(f *float64) *ShipmentGatewayUpsUpdate {
	if f != nil {
		sguu.SetCodSurchargeAmount(*f)
	}
	return sguu
}

// AddCodSurchargeAmount adds f to the "cod_surcharge_amount" field.
func (sguu *ShipmentGatewayUpsUpdate) AddCodSurchargeAmount(f float64) *ShipmentGatewayUpsUpdate {
	sguu.mutation.AddCodSurchargeAmount(f)
	return sguu
}

// ClearCodSurchargeAmount clears the value of the "cod_surcharge_amount" field.
func (sguu *ShipmentGatewayUpsUpdate) ClearCodSurchargeAmount() *ShipmentGatewayUpsUpdate {
	sguu.mutation.ClearCodSurchargeAmount()
	return sguu
}

// SetCodSurchargeCurrencyUomID sets the "cod_surcharge_currency_uom_id" field.
func (sguu *ShipmentGatewayUpsUpdate) SetCodSurchargeCurrencyUomID(s string) *ShipmentGatewayUpsUpdate {
	sguu.mutation.SetCodSurchargeCurrencyUomID(s)
	return sguu
}

// SetNillableCodSurchargeCurrencyUomID sets the "cod_surcharge_currency_uom_id" field if the given value is not nil.
func (sguu *ShipmentGatewayUpsUpdate) SetNillableCodSurchargeCurrencyUomID(s *string) *ShipmentGatewayUpsUpdate {
	if s != nil {
		sguu.SetCodSurchargeCurrencyUomID(*s)
	}
	return sguu
}

// ClearCodSurchargeCurrencyUomID clears the value of the "cod_surcharge_currency_uom_id" field.
func (sguu *ShipmentGatewayUpsUpdate) ClearCodSurchargeCurrencyUomID() *ShipmentGatewayUpsUpdate {
	sguu.mutation.ClearCodSurchargeCurrencyUomID()
	return sguu
}

// SetCodSurchargeApplyToPackage sets the "cod_surcharge_apply_to_package" field.
func (sguu *ShipmentGatewayUpsUpdate) SetCodSurchargeApplyToPackage(s string) *ShipmentGatewayUpsUpdate {
	sguu.mutation.SetCodSurchargeApplyToPackage(s)
	return sguu
}

// SetNillableCodSurchargeApplyToPackage sets the "cod_surcharge_apply_to_package" field if the given value is not nil.
func (sguu *ShipmentGatewayUpsUpdate) SetNillableCodSurchargeApplyToPackage(s *string) *ShipmentGatewayUpsUpdate {
	if s != nil {
		sguu.SetCodSurchargeApplyToPackage(*s)
	}
	return sguu
}

// ClearCodSurchargeApplyToPackage clears the value of the "cod_surcharge_apply_to_package" field.
func (sguu *ShipmentGatewayUpsUpdate) ClearCodSurchargeApplyToPackage() *ShipmentGatewayUpsUpdate {
	sguu.mutation.ClearCodSurchargeApplyToPackage()
	return sguu
}

// SetCodFundsCode sets the "cod_funds_code" field.
func (sguu *ShipmentGatewayUpsUpdate) SetCodFundsCode(s string) *ShipmentGatewayUpsUpdate {
	sguu.mutation.SetCodFundsCode(s)
	return sguu
}

// SetNillableCodFundsCode sets the "cod_funds_code" field if the given value is not nil.
func (sguu *ShipmentGatewayUpsUpdate) SetNillableCodFundsCode(s *string) *ShipmentGatewayUpsUpdate {
	if s != nil {
		sguu.SetCodFundsCode(*s)
	}
	return sguu
}

// ClearCodFundsCode clears the value of the "cod_funds_code" field.
func (sguu *ShipmentGatewayUpsUpdate) ClearCodFundsCode() *ShipmentGatewayUpsUpdate {
	sguu.mutation.ClearCodFundsCode()
	return sguu
}

// SetDefaultReturnLabelMemo sets the "default_return_label_memo" field.
func (sguu *ShipmentGatewayUpsUpdate) SetDefaultReturnLabelMemo(s string) *ShipmentGatewayUpsUpdate {
	sguu.mutation.SetDefaultReturnLabelMemo(s)
	return sguu
}

// SetNillableDefaultReturnLabelMemo sets the "default_return_label_memo" field if the given value is not nil.
func (sguu *ShipmentGatewayUpsUpdate) SetNillableDefaultReturnLabelMemo(s *string) *ShipmentGatewayUpsUpdate {
	if s != nil {
		sguu.SetDefaultReturnLabelMemo(*s)
	}
	return sguu
}

// ClearDefaultReturnLabelMemo clears the value of the "default_return_label_memo" field.
func (sguu *ShipmentGatewayUpsUpdate) ClearDefaultReturnLabelMemo() *ShipmentGatewayUpsUpdate {
	sguu.mutation.ClearDefaultReturnLabelMemo()
	return sguu
}

// SetDefaultReturnLabelSubject sets the "default_return_label_subject" field.
func (sguu *ShipmentGatewayUpsUpdate) SetDefaultReturnLabelSubject(s string) *ShipmentGatewayUpsUpdate {
	sguu.mutation.SetDefaultReturnLabelSubject(s)
	return sguu
}

// SetNillableDefaultReturnLabelSubject sets the "default_return_label_subject" field if the given value is not nil.
func (sguu *ShipmentGatewayUpsUpdate) SetNillableDefaultReturnLabelSubject(s *string) *ShipmentGatewayUpsUpdate {
	if s != nil {
		sguu.SetDefaultReturnLabelSubject(*s)
	}
	return sguu
}

// ClearDefaultReturnLabelSubject clears the value of the "default_return_label_subject" field.
func (sguu *ShipmentGatewayUpsUpdate) ClearDefaultReturnLabelSubject() *ShipmentGatewayUpsUpdate {
	sguu.mutation.ClearDefaultReturnLabelSubject()
	return sguu
}

// SetShipmentGatewayConfigID sets the "shipment_gateway_config" edge to the ShipmentGatewayConfig entity by ID.
func (sguu *ShipmentGatewayUpsUpdate) SetShipmentGatewayConfigID(id int) *ShipmentGatewayUpsUpdate {
	sguu.mutation.SetShipmentGatewayConfigID(id)
	return sguu
}

// SetNillableShipmentGatewayConfigID sets the "shipment_gateway_config" edge to the ShipmentGatewayConfig entity by ID if the given value is not nil.
func (sguu *ShipmentGatewayUpsUpdate) SetNillableShipmentGatewayConfigID(id *int) *ShipmentGatewayUpsUpdate {
	if id != nil {
		sguu = sguu.SetShipmentGatewayConfigID(*id)
	}
	return sguu
}

// SetShipmentGatewayConfig sets the "shipment_gateway_config" edge to the ShipmentGatewayConfig entity.
func (sguu *ShipmentGatewayUpsUpdate) SetShipmentGatewayConfig(s *ShipmentGatewayConfig) *ShipmentGatewayUpsUpdate {
	return sguu.SetShipmentGatewayConfigID(s.ID)
}

// Mutation returns the ShipmentGatewayUpsMutation object of the builder.
func (sguu *ShipmentGatewayUpsUpdate) Mutation() *ShipmentGatewayUpsMutation {
	return sguu.mutation
}

// ClearShipmentGatewayConfig clears the "shipment_gateway_config" edge to the ShipmentGatewayConfig entity.
func (sguu *ShipmentGatewayUpsUpdate) ClearShipmentGatewayConfig() *ShipmentGatewayUpsUpdate {
	sguu.mutation.ClearShipmentGatewayConfig()
	return sguu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sguu *ShipmentGatewayUpsUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	sguu.defaults()
	if len(sguu.hooks) == 0 {
		affected, err = sguu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ShipmentGatewayUpsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			sguu.mutation = mutation
			affected, err = sguu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(sguu.hooks) - 1; i >= 0; i-- {
			mut = sguu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sguu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (sguu *ShipmentGatewayUpsUpdate) SaveX(ctx context.Context) int {
	affected, err := sguu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sguu *ShipmentGatewayUpsUpdate) Exec(ctx context.Context) error {
	_, err := sguu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sguu *ShipmentGatewayUpsUpdate) ExecX(ctx context.Context) {
	if err := sguu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sguu *ShipmentGatewayUpsUpdate) defaults() {
	if _, ok := sguu.mutation.UpdateTime(); !ok {
		v := shipmentgatewayups.UpdateDefaultUpdateTime()
		sguu.mutation.SetUpdateTime(v)
	}
}

func (sguu *ShipmentGatewayUpsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   shipmentgatewayups.Table,
			Columns: shipmentgatewayups.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: shipmentgatewayups.FieldID,
			},
		},
	}
	if ps := sguu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sguu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: shipmentgatewayups.FieldUpdateTime,
		})
	}
	if value, ok := sguu.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewayups.FieldStringRef,
		})
	}
	if sguu.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmentgatewayups.FieldStringRef,
		})
	}
	if value, ok := sguu.mutation.ConnectURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewayups.FieldConnectURL,
		})
	}
	if sguu.mutation.ConnectURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmentgatewayups.FieldConnectURL,
		})
	}
	if value, ok := sguu.mutation.ConnectTimeout(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shipmentgatewayups.FieldConnectTimeout,
		})
	}
	if value, ok := sguu.mutation.AddedConnectTimeout(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shipmentgatewayups.FieldConnectTimeout,
		})
	}
	if sguu.mutation.ConnectTimeoutCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: shipmentgatewayups.FieldConnectTimeout,
		})
	}
	if value, ok := sguu.mutation.ShipperNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewayups.FieldShipperNumber,
		})
	}
	if sguu.mutation.ShipperNumberCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmentgatewayups.FieldShipperNumber,
		})
	}
	if value, ok := sguu.mutation.BillShipperAccountNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewayups.FieldBillShipperAccountNumber,
		})
	}
	if sguu.mutation.BillShipperAccountNumberCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmentgatewayups.FieldBillShipperAccountNumber,
		})
	}
	if value, ok := sguu.mutation.AccessLicenseNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewayups.FieldAccessLicenseNumber,
		})
	}
	if sguu.mutation.AccessLicenseNumberCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmentgatewayups.FieldAccessLicenseNumber,
		})
	}
	if value, ok := sguu.mutation.AccessUserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewayups.FieldAccessUserID,
		})
	}
	if sguu.mutation.AccessUserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmentgatewayups.FieldAccessUserID,
		})
	}
	if value, ok := sguu.mutation.AccessPassword(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewayups.FieldAccessPassword,
		})
	}
	if sguu.mutation.AccessPasswordCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmentgatewayups.FieldAccessPassword,
		})
	}
	if value, ok := sguu.mutation.SaveCertInfo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewayups.FieldSaveCertInfo,
		})
	}
	if sguu.mutation.SaveCertInfoCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmentgatewayups.FieldSaveCertInfo,
		})
	}
	if value, ok := sguu.mutation.SaveCertPath(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewayups.FieldSaveCertPath,
		})
	}
	if sguu.mutation.SaveCertPathCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmentgatewayups.FieldSaveCertPath,
		})
	}
	if value, ok := sguu.mutation.ShipperPickupType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewayups.FieldShipperPickupType,
		})
	}
	if sguu.mutation.ShipperPickupTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmentgatewayups.FieldShipperPickupType,
		})
	}
	if value, ok := sguu.mutation.CustomerClassification(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewayups.FieldCustomerClassification,
		})
	}
	if sguu.mutation.CustomerClassificationCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmentgatewayups.FieldCustomerClassification,
		})
	}
	if value, ok := sguu.mutation.MaxEstimateWeight(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: shipmentgatewayups.FieldMaxEstimateWeight,
		})
	}
	if value, ok := sguu.mutation.AddedMaxEstimateWeight(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: shipmentgatewayups.FieldMaxEstimateWeight,
		})
	}
	if sguu.mutation.MaxEstimateWeightCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: shipmentgatewayups.FieldMaxEstimateWeight,
		})
	}
	if value, ok := sguu.mutation.MinEstimateWeight(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: shipmentgatewayups.FieldMinEstimateWeight,
		})
	}
	if value, ok := sguu.mutation.AddedMinEstimateWeight(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: shipmentgatewayups.FieldMinEstimateWeight,
		})
	}
	if sguu.mutation.MinEstimateWeightCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: shipmentgatewayups.FieldMinEstimateWeight,
		})
	}
	if value, ok := sguu.mutation.CodAllowCod(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewayups.FieldCodAllowCod,
		})
	}
	if sguu.mutation.CodAllowCodCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmentgatewayups.FieldCodAllowCod,
		})
	}
	if value, ok := sguu.mutation.CodSurchargeAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: shipmentgatewayups.FieldCodSurchargeAmount,
		})
	}
	if value, ok := sguu.mutation.AddedCodSurchargeAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: shipmentgatewayups.FieldCodSurchargeAmount,
		})
	}
	if sguu.mutation.CodSurchargeAmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: shipmentgatewayups.FieldCodSurchargeAmount,
		})
	}
	if value, ok := sguu.mutation.CodSurchargeCurrencyUomID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewayups.FieldCodSurchargeCurrencyUomID,
		})
	}
	if sguu.mutation.CodSurchargeCurrencyUomIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmentgatewayups.FieldCodSurchargeCurrencyUomID,
		})
	}
	if value, ok := sguu.mutation.CodSurchargeApplyToPackage(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewayups.FieldCodSurchargeApplyToPackage,
		})
	}
	if sguu.mutation.CodSurchargeApplyToPackageCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmentgatewayups.FieldCodSurchargeApplyToPackage,
		})
	}
	if value, ok := sguu.mutation.CodFundsCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewayups.FieldCodFundsCode,
		})
	}
	if sguu.mutation.CodFundsCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmentgatewayups.FieldCodFundsCode,
		})
	}
	if value, ok := sguu.mutation.DefaultReturnLabelMemo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewayups.FieldDefaultReturnLabelMemo,
		})
	}
	if sguu.mutation.DefaultReturnLabelMemoCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmentgatewayups.FieldDefaultReturnLabelMemo,
		})
	}
	if value, ok := sguu.mutation.DefaultReturnLabelSubject(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewayups.FieldDefaultReturnLabelSubject,
		})
	}
	if sguu.mutation.DefaultReturnLabelSubjectCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmentgatewayups.FieldDefaultReturnLabelSubject,
		})
	}
	if sguu.mutation.ShipmentGatewayConfigCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   shipmentgatewayups.ShipmentGatewayConfigTable,
			Columns: []string{shipmentgatewayups.ShipmentGatewayConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipmentgatewayconfig.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sguu.mutation.ShipmentGatewayConfigIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   shipmentgatewayups.ShipmentGatewayConfigTable,
			Columns: []string{shipmentgatewayups.ShipmentGatewayConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipmentgatewayconfig.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sguu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shipmentgatewayups.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ShipmentGatewayUpsUpdateOne is the builder for updating a single ShipmentGatewayUps entity.
type ShipmentGatewayUpsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ShipmentGatewayUpsMutation
}

// SetStringRef sets the "string_ref" field.
func (sguuo *ShipmentGatewayUpsUpdateOne) SetStringRef(s string) *ShipmentGatewayUpsUpdateOne {
	sguuo.mutation.SetStringRef(s)
	return sguuo
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (sguuo *ShipmentGatewayUpsUpdateOne) SetNillableStringRef(s *string) *ShipmentGatewayUpsUpdateOne {
	if s != nil {
		sguuo.SetStringRef(*s)
	}
	return sguuo
}

// ClearStringRef clears the value of the "string_ref" field.
func (sguuo *ShipmentGatewayUpsUpdateOne) ClearStringRef() *ShipmentGatewayUpsUpdateOne {
	sguuo.mutation.ClearStringRef()
	return sguuo
}

// SetConnectURL sets the "connect_url" field.
func (sguuo *ShipmentGatewayUpsUpdateOne) SetConnectURL(s string) *ShipmentGatewayUpsUpdateOne {
	sguuo.mutation.SetConnectURL(s)
	return sguuo
}

// SetNillableConnectURL sets the "connect_url" field if the given value is not nil.
func (sguuo *ShipmentGatewayUpsUpdateOne) SetNillableConnectURL(s *string) *ShipmentGatewayUpsUpdateOne {
	if s != nil {
		sguuo.SetConnectURL(*s)
	}
	return sguuo
}

// ClearConnectURL clears the value of the "connect_url" field.
func (sguuo *ShipmentGatewayUpsUpdateOne) ClearConnectURL() *ShipmentGatewayUpsUpdateOne {
	sguuo.mutation.ClearConnectURL()
	return sguuo
}

// SetConnectTimeout sets the "connect_timeout" field.
func (sguuo *ShipmentGatewayUpsUpdateOne) SetConnectTimeout(i int) *ShipmentGatewayUpsUpdateOne {
	sguuo.mutation.ResetConnectTimeout()
	sguuo.mutation.SetConnectTimeout(i)
	return sguuo
}

// SetNillableConnectTimeout sets the "connect_timeout" field if the given value is not nil.
func (sguuo *ShipmentGatewayUpsUpdateOne) SetNillableConnectTimeout(i *int) *ShipmentGatewayUpsUpdateOne {
	if i != nil {
		sguuo.SetConnectTimeout(*i)
	}
	return sguuo
}

// AddConnectTimeout adds i to the "connect_timeout" field.
func (sguuo *ShipmentGatewayUpsUpdateOne) AddConnectTimeout(i int) *ShipmentGatewayUpsUpdateOne {
	sguuo.mutation.AddConnectTimeout(i)
	return sguuo
}

// ClearConnectTimeout clears the value of the "connect_timeout" field.
func (sguuo *ShipmentGatewayUpsUpdateOne) ClearConnectTimeout() *ShipmentGatewayUpsUpdateOne {
	sguuo.mutation.ClearConnectTimeout()
	return sguuo
}

// SetShipperNumber sets the "shipper_number" field.
func (sguuo *ShipmentGatewayUpsUpdateOne) SetShipperNumber(s string) *ShipmentGatewayUpsUpdateOne {
	sguuo.mutation.SetShipperNumber(s)
	return sguuo
}

// SetNillableShipperNumber sets the "shipper_number" field if the given value is not nil.
func (sguuo *ShipmentGatewayUpsUpdateOne) SetNillableShipperNumber(s *string) *ShipmentGatewayUpsUpdateOne {
	if s != nil {
		sguuo.SetShipperNumber(*s)
	}
	return sguuo
}

// ClearShipperNumber clears the value of the "shipper_number" field.
func (sguuo *ShipmentGatewayUpsUpdateOne) ClearShipperNumber() *ShipmentGatewayUpsUpdateOne {
	sguuo.mutation.ClearShipperNumber()
	return sguuo
}

// SetBillShipperAccountNumber sets the "bill_shipper_account_number" field.
func (sguuo *ShipmentGatewayUpsUpdateOne) SetBillShipperAccountNumber(s string) *ShipmentGatewayUpsUpdateOne {
	sguuo.mutation.SetBillShipperAccountNumber(s)
	return sguuo
}

// SetNillableBillShipperAccountNumber sets the "bill_shipper_account_number" field if the given value is not nil.
func (sguuo *ShipmentGatewayUpsUpdateOne) SetNillableBillShipperAccountNumber(s *string) *ShipmentGatewayUpsUpdateOne {
	if s != nil {
		sguuo.SetBillShipperAccountNumber(*s)
	}
	return sguuo
}

// ClearBillShipperAccountNumber clears the value of the "bill_shipper_account_number" field.
func (sguuo *ShipmentGatewayUpsUpdateOne) ClearBillShipperAccountNumber() *ShipmentGatewayUpsUpdateOne {
	sguuo.mutation.ClearBillShipperAccountNumber()
	return sguuo
}

// SetAccessLicenseNumber sets the "access_license_number" field.
func (sguuo *ShipmentGatewayUpsUpdateOne) SetAccessLicenseNumber(s string) *ShipmentGatewayUpsUpdateOne {
	sguuo.mutation.SetAccessLicenseNumber(s)
	return sguuo
}

// SetNillableAccessLicenseNumber sets the "access_license_number" field if the given value is not nil.
func (sguuo *ShipmentGatewayUpsUpdateOne) SetNillableAccessLicenseNumber(s *string) *ShipmentGatewayUpsUpdateOne {
	if s != nil {
		sguuo.SetAccessLicenseNumber(*s)
	}
	return sguuo
}

// ClearAccessLicenseNumber clears the value of the "access_license_number" field.
func (sguuo *ShipmentGatewayUpsUpdateOne) ClearAccessLicenseNumber() *ShipmentGatewayUpsUpdateOne {
	sguuo.mutation.ClearAccessLicenseNumber()
	return sguuo
}

// SetAccessUserID sets the "access_user_id" field.
func (sguuo *ShipmentGatewayUpsUpdateOne) SetAccessUserID(s string) *ShipmentGatewayUpsUpdateOne {
	sguuo.mutation.SetAccessUserID(s)
	return sguuo
}

// SetNillableAccessUserID sets the "access_user_id" field if the given value is not nil.
func (sguuo *ShipmentGatewayUpsUpdateOne) SetNillableAccessUserID(s *string) *ShipmentGatewayUpsUpdateOne {
	if s != nil {
		sguuo.SetAccessUserID(*s)
	}
	return sguuo
}

// ClearAccessUserID clears the value of the "access_user_id" field.
func (sguuo *ShipmentGatewayUpsUpdateOne) ClearAccessUserID() *ShipmentGatewayUpsUpdateOne {
	sguuo.mutation.ClearAccessUserID()
	return sguuo
}

// SetAccessPassword sets the "access_password" field.
func (sguuo *ShipmentGatewayUpsUpdateOne) SetAccessPassword(s string) *ShipmentGatewayUpsUpdateOne {
	sguuo.mutation.SetAccessPassword(s)
	return sguuo
}

// SetNillableAccessPassword sets the "access_password" field if the given value is not nil.
func (sguuo *ShipmentGatewayUpsUpdateOne) SetNillableAccessPassword(s *string) *ShipmentGatewayUpsUpdateOne {
	if s != nil {
		sguuo.SetAccessPassword(*s)
	}
	return sguuo
}

// ClearAccessPassword clears the value of the "access_password" field.
func (sguuo *ShipmentGatewayUpsUpdateOne) ClearAccessPassword() *ShipmentGatewayUpsUpdateOne {
	sguuo.mutation.ClearAccessPassword()
	return sguuo
}

// SetSaveCertInfo sets the "save_cert_info" field.
func (sguuo *ShipmentGatewayUpsUpdateOne) SetSaveCertInfo(s string) *ShipmentGatewayUpsUpdateOne {
	sguuo.mutation.SetSaveCertInfo(s)
	return sguuo
}

// SetNillableSaveCertInfo sets the "save_cert_info" field if the given value is not nil.
func (sguuo *ShipmentGatewayUpsUpdateOne) SetNillableSaveCertInfo(s *string) *ShipmentGatewayUpsUpdateOne {
	if s != nil {
		sguuo.SetSaveCertInfo(*s)
	}
	return sguuo
}

// ClearSaveCertInfo clears the value of the "save_cert_info" field.
func (sguuo *ShipmentGatewayUpsUpdateOne) ClearSaveCertInfo() *ShipmentGatewayUpsUpdateOne {
	sguuo.mutation.ClearSaveCertInfo()
	return sguuo
}

// SetSaveCertPath sets the "save_cert_path" field.
func (sguuo *ShipmentGatewayUpsUpdateOne) SetSaveCertPath(s string) *ShipmentGatewayUpsUpdateOne {
	sguuo.mutation.SetSaveCertPath(s)
	return sguuo
}

// SetNillableSaveCertPath sets the "save_cert_path" field if the given value is not nil.
func (sguuo *ShipmentGatewayUpsUpdateOne) SetNillableSaveCertPath(s *string) *ShipmentGatewayUpsUpdateOne {
	if s != nil {
		sguuo.SetSaveCertPath(*s)
	}
	return sguuo
}

// ClearSaveCertPath clears the value of the "save_cert_path" field.
func (sguuo *ShipmentGatewayUpsUpdateOne) ClearSaveCertPath() *ShipmentGatewayUpsUpdateOne {
	sguuo.mutation.ClearSaveCertPath()
	return sguuo
}

// SetShipperPickupType sets the "shipper_pickup_type" field.
func (sguuo *ShipmentGatewayUpsUpdateOne) SetShipperPickupType(s string) *ShipmentGatewayUpsUpdateOne {
	sguuo.mutation.SetShipperPickupType(s)
	return sguuo
}

// SetNillableShipperPickupType sets the "shipper_pickup_type" field if the given value is not nil.
func (sguuo *ShipmentGatewayUpsUpdateOne) SetNillableShipperPickupType(s *string) *ShipmentGatewayUpsUpdateOne {
	if s != nil {
		sguuo.SetShipperPickupType(*s)
	}
	return sguuo
}

// ClearShipperPickupType clears the value of the "shipper_pickup_type" field.
func (sguuo *ShipmentGatewayUpsUpdateOne) ClearShipperPickupType() *ShipmentGatewayUpsUpdateOne {
	sguuo.mutation.ClearShipperPickupType()
	return sguuo
}

// SetCustomerClassification sets the "customer_classification" field.
func (sguuo *ShipmentGatewayUpsUpdateOne) SetCustomerClassification(s string) *ShipmentGatewayUpsUpdateOne {
	sguuo.mutation.SetCustomerClassification(s)
	return sguuo
}

// SetNillableCustomerClassification sets the "customer_classification" field if the given value is not nil.
func (sguuo *ShipmentGatewayUpsUpdateOne) SetNillableCustomerClassification(s *string) *ShipmentGatewayUpsUpdateOne {
	if s != nil {
		sguuo.SetCustomerClassification(*s)
	}
	return sguuo
}

// ClearCustomerClassification clears the value of the "customer_classification" field.
func (sguuo *ShipmentGatewayUpsUpdateOne) ClearCustomerClassification() *ShipmentGatewayUpsUpdateOne {
	sguuo.mutation.ClearCustomerClassification()
	return sguuo
}

// SetMaxEstimateWeight sets the "max_estimate_weight" field.
func (sguuo *ShipmentGatewayUpsUpdateOne) SetMaxEstimateWeight(f float64) *ShipmentGatewayUpsUpdateOne {
	sguuo.mutation.ResetMaxEstimateWeight()
	sguuo.mutation.SetMaxEstimateWeight(f)
	return sguuo
}

// SetNillableMaxEstimateWeight sets the "max_estimate_weight" field if the given value is not nil.
func (sguuo *ShipmentGatewayUpsUpdateOne) SetNillableMaxEstimateWeight(f *float64) *ShipmentGatewayUpsUpdateOne {
	if f != nil {
		sguuo.SetMaxEstimateWeight(*f)
	}
	return sguuo
}

// AddMaxEstimateWeight adds f to the "max_estimate_weight" field.
func (sguuo *ShipmentGatewayUpsUpdateOne) AddMaxEstimateWeight(f float64) *ShipmentGatewayUpsUpdateOne {
	sguuo.mutation.AddMaxEstimateWeight(f)
	return sguuo
}

// ClearMaxEstimateWeight clears the value of the "max_estimate_weight" field.
func (sguuo *ShipmentGatewayUpsUpdateOne) ClearMaxEstimateWeight() *ShipmentGatewayUpsUpdateOne {
	sguuo.mutation.ClearMaxEstimateWeight()
	return sguuo
}

// SetMinEstimateWeight sets the "min_estimate_weight" field.
func (sguuo *ShipmentGatewayUpsUpdateOne) SetMinEstimateWeight(f float64) *ShipmentGatewayUpsUpdateOne {
	sguuo.mutation.ResetMinEstimateWeight()
	sguuo.mutation.SetMinEstimateWeight(f)
	return sguuo
}

// SetNillableMinEstimateWeight sets the "min_estimate_weight" field if the given value is not nil.
func (sguuo *ShipmentGatewayUpsUpdateOne) SetNillableMinEstimateWeight(f *float64) *ShipmentGatewayUpsUpdateOne {
	if f != nil {
		sguuo.SetMinEstimateWeight(*f)
	}
	return sguuo
}

// AddMinEstimateWeight adds f to the "min_estimate_weight" field.
func (sguuo *ShipmentGatewayUpsUpdateOne) AddMinEstimateWeight(f float64) *ShipmentGatewayUpsUpdateOne {
	sguuo.mutation.AddMinEstimateWeight(f)
	return sguuo
}

// ClearMinEstimateWeight clears the value of the "min_estimate_weight" field.
func (sguuo *ShipmentGatewayUpsUpdateOne) ClearMinEstimateWeight() *ShipmentGatewayUpsUpdateOne {
	sguuo.mutation.ClearMinEstimateWeight()
	return sguuo
}

// SetCodAllowCod sets the "cod_allow_cod" field.
func (sguuo *ShipmentGatewayUpsUpdateOne) SetCodAllowCod(s string) *ShipmentGatewayUpsUpdateOne {
	sguuo.mutation.SetCodAllowCod(s)
	return sguuo
}

// SetNillableCodAllowCod sets the "cod_allow_cod" field if the given value is not nil.
func (sguuo *ShipmentGatewayUpsUpdateOne) SetNillableCodAllowCod(s *string) *ShipmentGatewayUpsUpdateOne {
	if s != nil {
		sguuo.SetCodAllowCod(*s)
	}
	return sguuo
}

// ClearCodAllowCod clears the value of the "cod_allow_cod" field.
func (sguuo *ShipmentGatewayUpsUpdateOne) ClearCodAllowCod() *ShipmentGatewayUpsUpdateOne {
	sguuo.mutation.ClearCodAllowCod()
	return sguuo
}

// SetCodSurchargeAmount sets the "cod_surcharge_amount" field.
func (sguuo *ShipmentGatewayUpsUpdateOne) SetCodSurchargeAmount(f float64) *ShipmentGatewayUpsUpdateOne {
	sguuo.mutation.ResetCodSurchargeAmount()
	sguuo.mutation.SetCodSurchargeAmount(f)
	return sguuo
}

// SetNillableCodSurchargeAmount sets the "cod_surcharge_amount" field if the given value is not nil.
func (sguuo *ShipmentGatewayUpsUpdateOne) SetNillableCodSurchargeAmount(f *float64) *ShipmentGatewayUpsUpdateOne {
	if f != nil {
		sguuo.SetCodSurchargeAmount(*f)
	}
	return sguuo
}

// AddCodSurchargeAmount adds f to the "cod_surcharge_amount" field.
func (sguuo *ShipmentGatewayUpsUpdateOne) AddCodSurchargeAmount(f float64) *ShipmentGatewayUpsUpdateOne {
	sguuo.mutation.AddCodSurchargeAmount(f)
	return sguuo
}

// ClearCodSurchargeAmount clears the value of the "cod_surcharge_amount" field.
func (sguuo *ShipmentGatewayUpsUpdateOne) ClearCodSurchargeAmount() *ShipmentGatewayUpsUpdateOne {
	sguuo.mutation.ClearCodSurchargeAmount()
	return sguuo
}

// SetCodSurchargeCurrencyUomID sets the "cod_surcharge_currency_uom_id" field.
func (sguuo *ShipmentGatewayUpsUpdateOne) SetCodSurchargeCurrencyUomID(s string) *ShipmentGatewayUpsUpdateOne {
	sguuo.mutation.SetCodSurchargeCurrencyUomID(s)
	return sguuo
}

// SetNillableCodSurchargeCurrencyUomID sets the "cod_surcharge_currency_uom_id" field if the given value is not nil.
func (sguuo *ShipmentGatewayUpsUpdateOne) SetNillableCodSurchargeCurrencyUomID(s *string) *ShipmentGatewayUpsUpdateOne {
	if s != nil {
		sguuo.SetCodSurchargeCurrencyUomID(*s)
	}
	return sguuo
}

// ClearCodSurchargeCurrencyUomID clears the value of the "cod_surcharge_currency_uom_id" field.
func (sguuo *ShipmentGatewayUpsUpdateOne) ClearCodSurchargeCurrencyUomID() *ShipmentGatewayUpsUpdateOne {
	sguuo.mutation.ClearCodSurchargeCurrencyUomID()
	return sguuo
}

// SetCodSurchargeApplyToPackage sets the "cod_surcharge_apply_to_package" field.
func (sguuo *ShipmentGatewayUpsUpdateOne) SetCodSurchargeApplyToPackage(s string) *ShipmentGatewayUpsUpdateOne {
	sguuo.mutation.SetCodSurchargeApplyToPackage(s)
	return sguuo
}

// SetNillableCodSurchargeApplyToPackage sets the "cod_surcharge_apply_to_package" field if the given value is not nil.
func (sguuo *ShipmentGatewayUpsUpdateOne) SetNillableCodSurchargeApplyToPackage(s *string) *ShipmentGatewayUpsUpdateOne {
	if s != nil {
		sguuo.SetCodSurchargeApplyToPackage(*s)
	}
	return sguuo
}

// ClearCodSurchargeApplyToPackage clears the value of the "cod_surcharge_apply_to_package" field.
func (sguuo *ShipmentGatewayUpsUpdateOne) ClearCodSurchargeApplyToPackage() *ShipmentGatewayUpsUpdateOne {
	sguuo.mutation.ClearCodSurchargeApplyToPackage()
	return sguuo
}

// SetCodFundsCode sets the "cod_funds_code" field.
func (sguuo *ShipmentGatewayUpsUpdateOne) SetCodFundsCode(s string) *ShipmentGatewayUpsUpdateOne {
	sguuo.mutation.SetCodFundsCode(s)
	return sguuo
}

// SetNillableCodFundsCode sets the "cod_funds_code" field if the given value is not nil.
func (sguuo *ShipmentGatewayUpsUpdateOne) SetNillableCodFundsCode(s *string) *ShipmentGatewayUpsUpdateOne {
	if s != nil {
		sguuo.SetCodFundsCode(*s)
	}
	return sguuo
}

// ClearCodFundsCode clears the value of the "cod_funds_code" field.
func (sguuo *ShipmentGatewayUpsUpdateOne) ClearCodFundsCode() *ShipmentGatewayUpsUpdateOne {
	sguuo.mutation.ClearCodFundsCode()
	return sguuo
}

// SetDefaultReturnLabelMemo sets the "default_return_label_memo" field.
func (sguuo *ShipmentGatewayUpsUpdateOne) SetDefaultReturnLabelMemo(s string) *ShipmentGatewayUpsUpdateOne {
	sguuo.mutation.SetDefaultReturnLabelMemo(s)
	return sguuo
}

// SetNillableDefaultReturnLabelMemo sets the "default_return_label_memo" field if the given value is not nil.
func (sguuo *ShipmentGatewayUpsUpdateOne) SetNillableDefaultReturnLabelMemo(s *string) *ShipmentGatewayUpsUpdateOne {
	if s != nil {
		sguuo.SetDefaultReturnLabelMemo(*s)
	}
	return sguuo
}

// ClearDefaultReturnLabelMemo clears the value of the "default_return_label_memo" field.
func (sguuo *ShipmentGatewayUpsUpdateOne) ClearDefaultReturnLabelMemo() *ShipmentGatewayUpsUpdateOne {
	sguuo.mutation.ClearDefaultReturnLabelMemo()
	return sguuo
}

// SetDefaultReturnLabelSubject sets the "default_return_label_subject" field.
func (sguuo *ShipmentGatewayUpsUpdateOne) SetDefaultReturnLabelSubject(s string) *ShipmentGatewayUpsUpdateOne {
	sguuo.mutation.SetDefaultReturnLabelSubject(s)
	return sguuo
}

// SetNillableDefaultReturnLabelSubject sets the "default_return_label_subject" field if the given value is not nil.
func (sguuo *ShipmentGatewayUpsUpdateOne) SetNillableDefaultReturnLabelSubject(s *string) *ShipmentGatewayUpsUpdateOne {
	if s != nil {
		sguuo.SetDefaultReturnLabelSubject(*s)
	}
	return sguuo
}

// ClearDefaultReturnLabelSubject clears the value of the "default_return_label_subject" field.
func (sguuo *ShipmentGatewayUpsUpdateOne) ClearDefaultReturnLabelSubject() *ShipmentGatewayUpsUpdateOne {
	sguuo.mutation.ClearDefaultReturnLabelSubject()
	return sguuo
}

// SetShipmentGatewayConfigID sets the "shipment_gateway_config" edge to the ShipmentGatewayConfig entity by ID.
func (sguuo *ShipmentGatewayUpsUpdateOne) SetShipmentGatewayConfigID(id int) *ShipmentGatewayUpsUpdateOne {
	sguuo.mutation.SetShipmentGatewayConfigID(id)
	return sguuo
}

// SetNillableShipmentGatewayConfigID sets the "shipment_gateway_config" edge to the ShipmentGatewayConfig entity by ID if the given value is not nil.
func (sguuo *ShipmentGatewayUpsUpdateOne) SetNillableShipmentGatewayConfigID(id *int) *ShipmentGatewayUpsUpdateOne {
	if id != nil {
		sguuo = sguuo.SetShipmentGatewayConfigID(*id)
	}
	return sguuo
}

// SetShipmentGatewayConfig sets the "shipment_gateway_config" edge to the ShipmentGatewayConfig entity.
func (sguuo *ShipmentGatewayUpsUpdateOne) SetShipmentGatewayConfig(s *ShipmentGatewayConfig) *ShipmentGatewayUpsUpdateOne {
	return sguuo.SetShipmentGatewayConfigID(s.ID)
}

// Mutation returns the ShipmentGatewayUpsMutation object of the builder.
func (sguuo *ShipmentGatewayUpsUpdateOne) Mutation() *ShipmentGatewayUpsMutation {
	return sguuo.mutation
}

// ClearShipmentGatewayConfig clears the "shipment_gateway_config" edge to the ShipmentGatewayConfig entity.
func (sguuo *ShipmentGatewayUpsUpdateOne) ClearShipmentGatewayConfig() *ShipmentGatewayUpsUpdateOne {
	sguuo.mutation.ClearShipmentGatewayConfig()
	return sguuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sguuo *ShipmentGatewayUpsUpdateOne) Select(field string, fields ...string) *ShipmentGatewayUpsUpdateOne {
	sguuo.fields = append([]string{field}, fields...)
	return sguuo
}

// Save executes the query and returns the updated ShipmentGatewayUps entity.
func (sguuo *ShipmentGatewayUpsUpdateOne) Save(ctx context.Context) (*ShipmentGatewayUps, error) {
	var (
		err  error
		node *ShipmentGatewayUps
	)
	sguuo.defaults()
	if len(sguuo.hooks) == 0 {
		node, err = sguuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ShipmentGatewayUpsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			sguuo.mutation = mutation
			node, err = sguuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(sguuo.hooks) - 1; i >= 0; i-- {
			mut = sguuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sguuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (sguuo *ShipmentGatewayUpsUpdateOne) SaveX(ctx context.Context) *ShipmentGatewayUps {
	node, err := sguuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sguuo *ShipmentGatewayUpsUpdateOne) Exec(ctx context.Context) error {
	_, err := sguuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sguuo *ShipmentGatewayUpsUpdateOne) ExecX(ctx context.Context) {
	if err := sguuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sguuo *ShipmentGatewayUpsUpdateOne) defaults() {
	if _, ok := sguuo.mutation.UpdateTime(); !ok {
		v := shipmentgatewayups.UpdateDefaultUpdateTime()
		sguuo.mutation.SetUpdateTime(v)
	}
}

func (sguuo *ShipmentGatewayUpsUpdateOne) sqlSave(ctx context.Context) (_node *ShipmentGatewayUps, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   shipmentgatewayups.Table,
			Columns: shipmentgatewayups.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: shipmentgatewayups.FieldID,
			},
		},
	}
	id, ok := sguuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ShipmentGatewayUps.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := sguuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, shipmentgatewayups.FieldID)
		for _, f := range fields {
			if !shipmentgatewayups.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != shipmentgatewayups.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sguuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sguuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: shipmentgatewayups.FieldUpdateTime,
		})
	}
	if value, ok := sguuo.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewayups.FieldStringRef,
		})
	}
	if sguuo.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmentgatewayups.FieldStringRef,
		})
	}
	if value, ok := sguuo.mutation.ConnectURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewayups.FieldConnectURL,
		})
	}
	if sguuo.mutation.ConnectURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmentgatewayups.FieldConnectURL,
		})
	}
	if value, ok := sguuo.mutation.ConnectTimeout(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shipmentgatewayups.FieldConnectTimeout,
		})
	}
	if value, ok := sguuo.mutation.AddedConnectTimeout(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shipmentgatewayups.FieldConnectTimeout,
		})
	}
	if sguuo.mutation.ConnectTimeoutCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: shipmentgatewayups.FieldConnectTimeout,
		})
	}
	if value, ok := sguuo.mutation.ShipperNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewayups.FieldShipperNumber,
		})
	}
	if sguuo.mutation.ShipperNumberCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmentgatewayups.FieldShipperNumber,
		})
	}
	if value, ok := sguuo.mutation.BillShipperAccountNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewayups.FieldBillShipperAccountNumber,
		})
	}
	if sguuo.mutation.BillShipperAccountNumberCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmentgatewayups.FieldBillShipperAccountNumber,
		})
	}
	if value, ok := sguuo.mutation.AccessLicenseNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewayups.FieldAccessLicenseNumber,
		})
	}
	if sguuo.mutation.AccessLicenseNumberCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmentgatewayups.FieldAccessLicenseNumber,
		})
	}
	if value, ok := sguuo.mutation.AccessUserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewayups.FieldAccessUserID,
		})
	}
	if sguuo.mutation.AccessUserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmentgatewayups.FieldAccessUserID,
		})
	}
	if value, ok := sguuo.mutation.AccessPassword(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewayups.FieldAccessPassword,
		})
	}
	if sguuo.mutation.AccessPasswordCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmentgatewayups.FieldAccessPassword,
		})
	}
	if value, ok := sguuo.mutation.SaveCertInfo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewayups.FieldSaveCertInfo,
		})
	}
	if sguuo.mutation.SaveCertInfoCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmentgatewayups.FieldSaveCertInfo,
		})
	}
	if value, ok := sguuo.mutation.SaveCertPath(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewayups.FieldSaveCertPath,
		})
	}
	if sguuo.mutation.SaveCertPathCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmentgatewayups.FieldSaveCertPath,
		})
	}
	if value, ok := sguuo.mutation.ShipperPickupType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewayups.FieldShipperPickupType,
		})
	}
	if sguuo.mutation.ShipperPickupTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmentgatewayups.FieldShipperPickupType,
		})
	}
	if value, ok := sguuo.mutation.CustomerClassification(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewayups.FieldCustomerClassification,
		})
	}
	if sguuo.mutation.CustomerClassificationCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmentgatewayups.FieldCustomerClassification,
		})
	}
	if value, ok := sguuo.mutation.MaxEstimateWeight(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: shipmentgatewayups.FieldMaxEstimateWeight,
		})
	}
	if value, ok := sguuo.mutation.AddedMaxEstimateWeight(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: shipmentgatewayups.FieldMaxEstimateWeight,
		})
	}
	if sguuo.mutation.MaxEstimateWeightCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: shipmentgatewayups.FieldMaxEstimateWeight,
		})
	}
	if value, ok := sguuo.mutation.MinEstimateWeight(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: shipmentgatewayups.FieldMinEstimateWeight,
		})
	}
	if value, ok := sguuo.mutation.AddedMinEstimateWeight(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: shipmentgatewayups.FieldMinEstimateWeight,
		})
	}
	if sguuo.mutation.MinEstimateWeightCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: shipmentgatewayups.FieldMinEstimateWeight,
		})
	}
	if value, ok := sguuo.mutation.CodAllowCod(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewayups.FieldCodAllowCod,
		})
	}
	if sguuo.mutation.CodAllowCodCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmentgatewayups.FieldCodAllowCod,
		})
	}
	if value, ok := sguuo.mutation.CodSurchargeAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: shipmentgatewayups.FieldCodSurchargeAmount,
		})
	}
	if value, ok := sguuo.mutation.AddedCodSurchargeAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: shipmentgatewayups.FieldCodSurchargeAmount,
		})
	}
	if sguuo.mutation.CodSurchargeAmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: shipmentgatewayups.FieldCodSurchargeAmount,
		})
	}
	if value, ok := sguuo.mutation.CodSurchargeCurrencyUomID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewayups.FieldCodSurchargeCurrencyUomID,
		})
	}
	if sguuo.mutation.CodSurchargeCurrencyUomIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmentgatewayups.FieldCodSurchargeCurrencyUomID,
		})
	}
	if value, ok := sguuo.mutation.CodSurchargeApplyToPackage(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewayups.FieldCodSurchargeApplyToPackage,
		})
	}
	if sguuo.mutation.CodSurchargeApplyToPackageCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmentgatewayups.FieldCodSurchargeApplyToPackage,
		})
	}
	if value, ok := sguuo.mutation.CodFundsCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewayups.FieldCodFundsCode,
		})
	}
	if sguuo.mutation.CodFundsCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmentgatewayups.FieldCodFundsCode,
		})
	}
	if value, ok := sguuo.mutation.DefaultReturnLabelMemo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewayups.FieldDefaultReturnLabelMemo,
		})
	}
	if sguuo.mutation.DefaultReturnLabelMemoCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmentgatewayups.FieldDefaultReturnLabelMemo,
		})
	}
	if value, ok := sguuo.mutation.DefaultReturnLabelSubject(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewayups.FieldDefaultReturnLabelSubject,
		})
	}
	if sguuo.mutation.DefaultReturnLabelSubjectCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmentgatewayups.FieldDefaultReturnLabelSubject,
		})
	}
	if sguuo.mutation.ShipmentGatewayConfigCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   shipmentgatewayups.ShipmentGatewayConfigTable,
			Columns: []string{shipmentgatewayups.ShipmentGatewayConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipmentgatewayconfig.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sguuo.mutation.ShipmentGatewayConfigIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   shipmentgatewayups.ShipmentGatewayConfigTable,
			Columns: []string{shipmentgatewayups.ShipmentGatewayConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipmentgatewayconfig.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ShipmentGatewayUps{config: sguuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sguuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shipmentgatewayups.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
