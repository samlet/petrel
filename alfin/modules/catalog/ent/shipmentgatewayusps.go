// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/shipmentgatewayconfig"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/shipmentgatewayusps"
)

// ShipmentGatewayUsps is the model entity for the ShipmentGatewayUsps schema.
type ShipmentGatewayUsps struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// StringRef holds the value of the "string_ref" field.
	StringRef string `json:"string_ref,omitempty"`
	// ConnectURL holds the value of the "connect_url" field.
	ConnectURL string `json:"connect_url,omitempty"`
	// ConnectURLLabels holds the value of the "connect_url_labels" field.
	ConnectURLLabels string `json:"connect_url_labels,omitempty"`
	// ConnectTimeout holds the value of the "connect_timeout" field.
	ConnectTimeout int `json:"connect_timeout,omitempty"`
	// AccessUserID holds the value of the "access_user_id" field.
	AccessUserID string `json:"access_user_id,omitempty"`
	// AccessPassword holds the value of the "access_password" field.
	AccessPassword string `json:"access_password,omitempty"`
	// MaxEstimateWeight holds the value of the "max_estimate_weight" field.
	MaxEstimateWeight int `json:"max_estimate_weight,omitempty"`
	// Test holds the value of the "test" field.
	Test string `json:"test,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ShipmentGatewayUspsQuery when eager-loading is set.
	Edges                                         ShipmentGatewayUspsEdges `json:"edges"`
	shipment_gateway_config_shipment_gateway_usps *int
}

// ShipmentGatewayUspsEdges holds the relations/edges for other nodes in the graph.
type ShipmentGatewayUspsEdges struct {
	// ShipmentGatewayConfig holds the value of the shipment_gateway_config edge.
	ShipmentGatewayConfig *ShipmentGatewayConfig `json:"shipment_gateway_config,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ShipmentGatewayConfigOrErr returns the ShipmentGatewayConfig value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ShipmentGatewayUspsEdges) ShipmentGatewayConfigOrErr() (*ShipmentGatewayConfig, error) {
	if e.loadedTypes[0] {
		if e.ShipmentGatewayConfig == nil {
			// The edge shipment_gateway_config was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: shipmentgatewayconfig.Label}
		}
		return e.ShipmentGatewayConfig, nil
	}
	return nil, &NotLoadedError{edge: "shipment_gateway_config"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ShipmentGatewayUsps) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case shipmentgatewayusps.FieldID, shipmentgatewayusps.FieldConnectTimeout, shipmentgatewayusps.FieldMaxEstimateWeight:
			values[i] = new(sql.NullInt64)
		case shipmentgatewayusps.FieldStringRef, shipmentgatewayusps.FieldConnectURL, shipmentgatewayusps.FieldConnectURLLabels, shipmentgatewayusps.FieldAccessUserID, shipmentgatewayusps.FieldAccessPassword, shipmentgatewayusps.FieldTest:
			values[i] = new(sql.NullString)
		case shipmentgatewayusps.FieldCreateTime, shipmentgatewayusps.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case shipmentgatewayusps.ForeignKeys[0]: // shipment_gateway_config_shipment_gateway_usps
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ShipmentGatewayUsps", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ShipmentGatewayUsps fields.
func (sgu *ShipmentGatewayUsps) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case shipmentgatewayusps.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sgu.ID = int(value.Int64)
		case shipmentgatewayusps.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				sgu.CreateTime = value.Time
			}
		case shipmentgatewayusps.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				sgu.UpdateTime = value.Time
			}
		case shipmentgatewayusps.FieldStringRef:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field string_ref", values[i])
			} else if value.Valid {
				sgu.StringRef = value.String
			}
		case shipmentgatewayusps.FieldConnectURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field connect_url", values[i])
			} else if value.Valid {
				sgu.ConnectURL = value.String
			}
		case shipmentgatewayusps.FieldConnectURLLabels:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field connect_url_labels", values[i])
			} else if value.Valid {
				sgu.ConnectURLLabels = value.String
			}
		case shipmentgatewayusps.FieldConnectTimeout:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field connect_timeout", values[i])
			} else if value.Valid {
				sgu.ConnectTimeout = int(value.Int64)
			}
		case shipmentgatewayusps.FieldAccessUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field access_user_id", values[i])
			} else if value.Valid {
				sgu.AccessUserID = value.String
			}
		case shipmentgatewayusps.FieldAccessPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field access_password", values[i])
			} else if value.Valid {
				sgu.AccessPassword = value.String
			}
		case shipmentgatewayusps.FieldMaxEstimateWeight:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field max_estimate_weight", values[i])
			} else if value.Valid {
				sgu.MaxEstimateWeight = int(value.Int64)
			}
		case shipmentgatewayusps.FieldTest:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field test", values[i])
			} else if value.Valid {
				sgu.Test = value.String
			}
		case shipmentgatewayusps.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field shipment_gateway_config_shipment_gateway_usps", value)
			} else if value.Valid {
				sgu.shipment_gateway_config_shipment_gateway_usps = new(int)
				*sgu.shipment_gateway_config_shipment_gateway_usps = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryShipmentGatewayConfig queries the "shipment_gateway_config" edge of the ShipmentGatewayUsps entity.
func (sgu *ShipmentGatewayUsps) QueryShipmentGatewayConfig() *ShipmentGatewayConfigQuery {
	return (&ShipmentGatewayUspsClient{config: sgu.config}).QueryShipmentGatewayConfig(sgu)
}

// Update returns a builder for updating this ShipmentGatewayUsps.
// Note that you need to call ShipmentGatewayUsps.Unwrap() before calling this method if this ShipmentGatewayUsps
// was returned from a transaction, and the transaction was committed or rolled back.
func (sgu *ShipmentGatewayUsps) Update() *ShipmentGatewayUspsUpdateOne {
	return (&ShipmentGatewayUspsClient{config: sgu.config}).UpdateOne(sgu)
}

// Unwrap unwraps the ShipmentGatewayUsps entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sgu *ShipmentGatewayUsps) Unwrap() *ShipmentGatewayUsps {
	tx, ok := sgu.config.driver.(*txDriver)
	if !ok {
		panic("ent: ShipmentGatewayUsps is not a transactional entity")
	}
	sgu.config.driver = tx.drv
	return sgu
}

// String implements the fmt.Stringer.
func (sgu *ShipmentGatewayUsps) String() string {
	var builder strings.Builder
	builder.WriteString("ShipmentGatewayUsps(")
	builder.WriteString(fmt.Sprintf("id=%v", sgu.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(sgu.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(sgu.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", string_ref=")
	builder.WriteString(sgu.StringRef)
	builder.WriteString(", connect_url=")
	builder.WriteString(sgu.ConnectURL)
	builder.WriteString(", connect_url_labels=")
	builder.WriteString(sgu.ConnectURLLabels)
	builder.WriteString(", connect_timeout=")
	builder.WriteString(fmt.Sprintf("%v", sgu.ConnectTimeout))
	builder.WriteString(", access_user_id=")
	builder.WriteString(sgu.AccessUserID)
	builder.WriteString(", access_password=")
	builder.WriteString(sgu.AccessPassword)
	builder.WriteString(", max_estimate_weight=")
	builder.WriteString(fmt.Sprintf("%v", sgu.MaxEstimateWeight))
	builder.WriteString(", test=")
	builder.WriteString(sgu.Test)
	builder.WriteByte(')')
	return builder.String()
}

// ShipmentGatewayUspsSlice is a parsable slice of ShipmentGatewayUsps.
type ShipmentGatewayUspsSlice []*ShipmentGatewayUsps

func (sgu ShipmentGatewayUspsSlice) config(cfg config) {
	for _i := range sgu {
		sgu[_i].config = cfg
	}
}
