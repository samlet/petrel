// Code generated by entc, DO NOT EDIT.

package shipmentgatewayusps

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// StringRef applies equality check predicate on the "string_ref" field. It's identical to StringRefEQ.
func StringRef(v string) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStringRef), v))
	})
}

// ConnectURL applies equality check predicate on the "connect_url" field. It's identical to ConnectURLEQ.
func ConnectURL(v string) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldConnectURL), v))
	})
}

// ConnectURLLabels applies equality check predicate on the "connect_url_labels" field. It's identical to ConnectURLLabelsEQ.
func ConnectURLLabels(v string) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldConnectURLLabels), v))
	})
}

// ConnectTimeout applies equality check predicate on the "connect_timeout" field. It's identical to ConnectTimeoutEQ.
func ConnectTimeout(v int) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldConnectTimeout), v))
	})
}

// AccessUserID applies equality check predicate on the "access_user_id" field. It's identical to AccessUserIDEQ.
func AccessUserID(v string) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccessUserID), v))
	})
}

// AccessPassword applies equality check predicate on the "access_password" field. It's identical to AccessPasswordEQ.
func AccessPassword(v string) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccessPassword), v))
	})
}

// MaxEstimateWeight applies equality check predicate on the "max_estimate_weight" field. It's identical to MaxEstimateWeightEQ.
func MaxEstimateWeight(v int) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMaxEstimateWeight), v))
	})
}

// Test applies equality check predicate on the "test" field. It's identical to TestEQ.
func Test(v string) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTest), v))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.ShipmentGatewayUsps {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.ShipmentGatewayUsps {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), v))
	})
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.ShipmentGatewayUsps {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.ShipmentGatewayUsps {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateTime), v))
	})
}

// StringRefEQ applies the EQ predicate on the "string_ref" field.
func StringRefEQ(v string) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStringRef), v))
	})
}

// StringRefNEQ applies the NEQ predicate on the "string_ref" field.
func StringRefNEQ(v string) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStringRef), v))
	})
}

// StringRefIn applies the In predicate on the "string_ref" field.
func StringRefIn(vs ...string) predicate.ShipmentGatewayUsps {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStringRef), v...))
	})
}

// StringRefNotIn applies the NotIn predicate on the "string_ref" field.
func StringRefNotIn(vs ...string) predicate.ShipmentGatewayUsps {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStringRef), v...))
	})
}

// StringRefGT applies the GT predicate on the "string_ref" field.
func StringRefGT(v string) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStringRef), v))
	})
}

// StringRefGTE applies the GTE predicate on the "string_ref" field.
func StringRefGTE(v string) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStringRef), v))
	})
}

// StringRefLT applies the LT predicate on the "string_ref" field.
func StringRefLT(v string) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStringRef), v))
	})
}

// StringRefLTE applies the LTE predicate on the "string_ref" field.
func StringRefLTE(v string) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStringRef), v))
	})
}

// StringRefContains applies the Contains predicate on the "string_ref" field.
func StringRefContains(v string) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStringRef), v))
	})
}

// StringRefHasPrefix applies the HasPrefix predicate on the "string_ref" field.
func StringRefHasPrefix(v string) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStringRef), v))
	})
}

// StringRefHasSuffix applies the HasSuffix predicate on the "string_ref" field.
func StringRefHasSuffix(v string) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStringRef), v))
	})
}

// StringRefIsNil applies the IsNil predicate on the "string_ref" field.
func StringRefIsNil() predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStringRef)))
	})
}

// StringRefNotNil applies the NotNil predicate on the "string_ref" field.
func StringRefNotNil() predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStringRef)))
	})
}

// StringRefEqualFold applies the EqualFold predicate on the "string_ref" field.
func StringRefEqualFold(v string) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStringRef), v))
	})
}

// StringRefContainsFold applies the ContainsFold predicate on the "string_ref" field.
func StringRefContainsFold(v string) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStringRef), v))
	})
}

// ConnectURLEQ applies the EQ predicate on the "connect_url" field.
func ConnectURLEQ(v string) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldConnectURL), v))
	})
}

// ConnectURLNEQ applies the NEQ predicate on the "connect_url" field.
func ConnectURLNEQ(v string) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldConnectURL), v))
	})
}

// ConnectURLIn applies the In predicate on the "connect_url" field.
func ConnectURLIn(vs ...string) predicate.ShipmentGatewayUsps {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldConnectURL), v...))
	})
}

// ConnectURLNotIn applies the NotIn predicate on the "connect_url" field.
func ConnectURLNotIn(vs ...string) predicate.ShipmentGatewayUsps {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldConnectURL), v...))
	})
}

// ConnectURLGT applies the GT predicate on the "connect_url" field.
func ConnectURLGT(v string) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldConnectURL), v))
	})
}

// ConnectURLGTE applies the GTE predicate on the "connect_url" field.
func ConnectURLGTE(v string) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldConnectURL), v))
	})
}

// ConnectURLLT applies the LT predicate on the "connect_url" field.
func ConnectURLLT(v string) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldConnectURL), v))
	})
}

// ConnectURLLTE applies the LTE predicate on the "connect_url" field.
func ConnectURLLTE(v string) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldConnectURL), v))
	})
}

// ConnectURLContains applies the Contains predicate on the "connect_url" field.
func ConnectURLContains(v string) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldConnectURL), v))
	})
}

// ConnectURLHasPrefix applies the HasPrefix predicate on the "connect_url" field.
func ConnectURLHasPrefix(v string) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldConnectURL), v))
	})
}

// ConnectURLHasSuffix applies the HasSuffix predicate on the "connect_url" field.
func ConnectURLHasSuffix(v string) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldConnectURL), v))
	})
}

// ConnectURLIsNil applies the IsNil predicate on the "connect_url" field.
func ConnectURLIsNil() predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldConnectURL)))
	})
}

// ConnectURLNotNil applies the NotNil predicate on the "connect_url" field.
func ConnectURLNotNil() predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldConnectURL)))
	})
}

// ConnectURLEqualFold applies the EqualFold predicate on the "connect_url" field.
func ConnectURLEqualFold(v string) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldConnectURL), v))
	})
}

// ConnectURLContainsFold applies the ContainsFold predicate on the "connect_url" field.
func ConnectURLContainsFold(v string) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldConnectURL), v))
	})
}

// ConnectURLLabelsEQ applies the EQ predicate on the "connect_url_labels" field.
func ConnectURLLabelsEQ(v string) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldConnectURLLabels), v))
	})
}

// ConnectURLLabelsNEQ applies the NEQ predicate on the "connect_url_labels" field.
func ConnectURLLabelsNEQ(v string) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldConnectURLLabels), v))
	})
}

// ConnectURLLabelsIn applies the In predicate on the "connect_url_labels" field.
func ConnectURLLabelsIn(vs ...string) predicate.ShipmentGatewayUsps {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldConnectURLLabels), v...))
	})
}

// ConnectURLLabelsNotIn applies the NotIn predicate on the "connect_url_labels" field.
func ConnectURLLabelsNotIn(vs ...string) predicate.ShipmentGatewayUsps {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldConnectURLLabels), v...))
	})
}

// ConnectURLLabelsGT applies the GT predicate on the "connect_url_labels" field.
func ConnectURLLabelsGT(v string) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldConnectURLLabels), v))
	})
}

// ConnectURLLabelsGTE applies the GTE predicate on the "connect_url_labels" field.
func ConnectURLLabelsGTE(v string) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldConnectURLLabels), v))
	})
}

// ConnectURLLabelsLT applies the LT predicate on the "connect_url_labels" field.
func ConnectURLLabelsLT(v string) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldConnectURLLabels), v))
	})
}

// ConnectURLLabelsLTE applies the LTE predicate on the "connect_url_labels" field.
func ConnectURLLabelsLTE(v string) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldConnectURLLabels), v))
	})
}

// ConnectURLLabelsContains applies the Contains predicate on the "connect_url_labels" field.
func ConnectURLLabelsContains(v string) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldConnectURLLabels), v))
	})
}

// ConnectURLLabelsHasPrefix applies the HasPrefix predicate on the "connect_url_labels" field.
func ConnectURLLabelsHasPrefix(v string) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldConnectURLLabels), v))
	})
}

// ConnectURLLabelsHasSuffix applies the HasSuffix predicate on the "connect_url_labels" field.
func ConnectURLLabelsHasSuffix(v string) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldConnectURLLabels), v))
	})
}

// ConnectURLLabelsIsNil applies the IsNil predicate on the "connect_url_labels" field.
func ConnectURLLabelsIsNil() predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldConnectURLLabels)))
	})
}

// ConnectURLLabelsNotNil applies the NotNil predicate on the "connect_url_labels" field.
func ConnectURLLabelsNotNil() predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldConnectURLLabels)))
	})
}

// ConnectURLLabelsEqualFold applies the EqualFold predicate on the "connect_url_labels" field.
func ConnectURLLabelsEqualFold(v string) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldConnectURLLabels), v))
	})
}

// ConnectURLLabelsContainsFold applies the ContainsFold predicate on the "connect_url_labels" field.
func ConnectURLLabelsContainsFold(v string) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldConnectURLLabels), v))
	})
}

// ConnectTimeoutEQ applies the EQ predicate on the "connect_timeout" field.
func ConnectTimeoutEQ(v int) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldConnectTimeout), v))
	})
}

// ConnectTimeoutNEQ applies the NEQ predicate on the "connect_timeout" field.
func ConnectTimeoutNEQ(v int) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldConnectTimeout), v))
	})
}

// ConnectTimeoutIn applies the In predicate on the "connect_timeout" field.
func ConnectTimeoutIn(vs ...int) predicate.ShipmentGatewayUsps {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldConnectTimeout), v...))
	})
}

// ConnectTimeoutNotIn applies the NotIn predicate on the "connect_timeout" field.
func ConnectTimeoutNotIn(vs ...int) predicate.ShipmentGatewayUsps {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldConnectTimeout), v...))
	})
}

// ConnectTimeoutGT applies the GT predicate on the "connect_timeout" field.
func ConnectTimeoutGT(v int) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldConnectTimeout), v))
	})
}

// ConnectTimeoutGTE applies the GTE predicate on the "connect_timeout" field.
func ConnectTimeoutGTE(v int) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldConnectTimeout), v))
	})
}

// ConnectTimeoutLT applies the LT predicate on the "connect_timeout" field.
func ConnectTimeoutLT(v int) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldConnectTimeout), v))
	})
}

// ConnectTimeoutLTE applies the LTE predicate on the "connect_timeout" field.
func ConnectTimeoutLTE(v int) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldConnectTimeout), v))
	})
}

// ConnectTimeoutIsNil applies the IsNil predicate on the "connect_timeout" field.
func ConnectTimeoutIsNil() predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldConnectTimeout)))
	})
}

// ConnectTimeoutNotNil applies the NotNil predicate on the "connect_timeout" field.
func ConnectTimeoutNotNil() predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldConnectTimeout)))
	})
}

// AccessUserIDEQ applies the EQ predicate on the "access_user_id" field.
func AccessUserIDEQ(v string) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccessUserID), v))
	})
}

// AccessUserIDNEQ applies the NEQ predicate on the "access_user_id" field.
func AccessUserIDNEQ(v string) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAccessUserID), v))
	})
}

// AccessUserIDIn applies the In predicate on the "access_user_id" field.
func AccessUserIDIn(vs ...string) predicate.ShipmentGatewayUsps {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAccessUserID), v...))
	})
}

// AccessUserIDNotIn applies the NotIn predicate on the "access_user_id" field.
func AccessUserIDNotIn(vs ...string) predicate.ShipmentGatewayUsps {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAccessUserID), v...))
	})
}

// AccessUserIDGT applies the GT predicate on the "access_user_id" field.
func AccessUserIDGT(v string) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAccessUserID), v))
	})
}

// AccessUserIDGTE applies the GTE predicate on the "access_user_id" field.
func AccessUserIDGTE(v string) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAccessUserID), v))
	})
}

// AccessUserIDLT applies the LT predicate on the "access_user_id" field.
func AccessUserIDLT(v string) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAccessUserID), v))
	})
}

// AccessUserIDLTE applies the LTE predicate on the "access_user_id" field.
func AccessUserIDLTE(v string) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAccessUserID), v))
	})
}

// AccessUserIDContains applies the Contains predicate on the "access_user_id" field.
func AccessUserIDContains(v string) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAccessUserID), v))
	})
}

// AccessUserIDHasPrefix applies the HasPrefix predicate on the "access_user_id" field.
func AccessUserIDHasPrefix(v string) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAccessUserID), v))
	})
}

// AccessUserIDHasSuffix applies the HasSuffix predicate on the "access_user_id" field.
func AccessUserIDHasSuffix(v string) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAccessUserID), v))
	})
}

// AccessUserIDIsNil applies the IsNil predicate on the "access_user_id" field.
func AccessUserIDIsNil() predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAccessUserID)))
	})
}

// AccessUserIDNotNil applies the NotNil predicate on the "access_user_id" field.
func AccessUserIDNotNil() predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAccessUserID)))
	})
}

// AccessUserIDEqualFold applies the EqualFold predicate on the "access_user_id" field.
func AccessUserIDEqualFold(v string) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAccessUserID), v))
	})
}

// AccessUserIDContainsFold applies the ContainsFold predicate on the "access_user_id" field.
func AccessUserIDContainsFold(v string) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAccessUserID), v))
	})
}

// AccessPasswordEQ applies the EQ predicate on the "access_password" field.
func AccessPasswordEQ(v string) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccessPassword), v))
	})
}

// AccessPasswordNEQ applies the NEQ predicate on the "access_password" field.
func AccessPasswordNEQ(v string) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAccessPassword), v))
	})
}

// AccessPasswordIn applies the In predicate on the "access_password" field.
func AccessPasswordIn(vs ...string) predicate.ShipmentGatewayUsps {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAccessPassword), v...))
	})
}

// AccessPasswordNotIn applies the NotIn predicate on the "access_password" field.
func AccessPasswordNotIn(vs ...string) predicate.ShipmentGatewayUsps {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAccessPassword), v...))
	})
}

// AccessPasswordGT applies the GT predicate on the "access_password" field.
func AccessPasswordGT(v string) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAccessPassword), v))
	})
}

// AccessPasswordGTE applies the GTE predicate on the "access_password" field.
func AccessPasswordGTE(v string) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAccessPassword), v))
	})
}

// AccessPasswordLT applies the LT predicate on the "access_password" field.
func AccessPasswordLT(v string) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAccessPassword), v))
	})
}

// AccessPasswordLTE applies the LTE predicate on the "access_password" field.
func AccessPasswordLTE(v string) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAccessPassword), v))
	})
}

// AccessPasswordContains applies the Contains predicate on the "access_password" field.
func AccessPasswordContains(v string) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAccessPassword), v))
	})
}

// AccessPasswordHasPrefix applies the HasPrefix predicate on the "access_password" field.
func AccessPasswordHasPrefix(v string) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAccessPassword), v))
	})
}

// AccessPasswordHasSuffix applies the HasSuffix predicate on the "access_password" field.
func AccessPasswordHasSuffix(v string) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAccessPassword), v))
	})
}

// AccessPasswordIsNil applies the IsNil predicate on the "access_password" field.
func AccessPasswordIsNil() predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAccessPassword)))
	})
}

// AccessPasswordNotNil applies the NotNil predicate on the "access_password" field.
func AccessPasswordNotNil() predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAccessPassword)))
	})
}

// AccessPasswordEqualFold applies the EqualFold predicate on the "access_password" field.
func AccessPasswordEqualFold(v string) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAccessPassword), v))
	})
}

// AccessPasswordContainsFold applies the ContainsFold predicate on the "access_password" field.
func AccessPasswordContainsFold(v string) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAccessPassword), v))
	})
}

// MaxEstimateWeightEQ applies the EQ predicate on the "max_estimate_weight" field.
func MaxEstimateWeightEQ(v int) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMaxEstimateWeight), v))
	})
}

// MaxEstimateWeightNEQ applies the NEQ predicate on the "max_estimate_weight" field.
func MaxEstimateWeightNEQ(v int) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMaxEstimateWeight), v))
	})
}

// MaxEstimateWeightIn applies the In predicate on the "max_estimate_weight" field.
func MaxEstimateWeightIn(vs ...int) predicate.ShipmentGatewayUsps {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMaxEstimateWeight), v...))
	})
}

// MaxEstimateWeightNotIn applies the NotIn predicate on the "max_estimate_weight" field.
func MaxEstimateWeightNotIn(vs ...int) predicate.ShipmentGatewayUsps {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMaxEstimateWeight), v...))
	})
}

// MaxEstimateWeightGT applies the GT predicate on the "max_estimate_weight" field.
func MaxEstimateWeightGT(v int) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMaxEstimateWeight), v))
	})
}

// MaxEstimateWeightGTE applies the GTE predicate on the "max_estimate_weight" field.
func MaxEstimateWeightGTE(v int) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMaxEstimateWeight), v))
	})
}

// MaxEstimateWeightLT applies the LT predicate on the "max_estimate_weight" field.
func MaxEstimateWeightLT(v int) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMaxEstimateWeight), v))
	})
}

// MaxEstimateWeightLTE applies the LTE predicate on the "max_estimate_weight" field.
func MaxEstimateWeightLTE(v int) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMaxEstimateWeight), v))
	})
}

// MaxEstimateWeightIsNil applies the IsNil predicate on the "max_estimate_weight" field.
func MaxEstimateWeightIsNil() predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMaxEstimateWeight)))
	})
}

// MaxEstimateWeightNotNil applies the NotNil predicate on the "max_estimate_weight" field.
func MaxEstimateWeightNotNil() predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMaxEstimateWeight)))
	})
}

// TestEQ applies the EQ predicate on the "test" field.
func TestEQ(v string) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTest), v))
	})
}

// TestNEQ applies the NEQ predicate on the "test" field.
func TestNEQ(v string) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTest), v))
	})
}

// TestIn applies the In predicate on the "test" field.
func TestIn(vs ...string) predicate.ShipmentGatewayUsps {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTest), v...))
	})
}

// TestNotIn applies the NotIn predicate on the "test" field.
func TestNotIn(vs ...string) predicate.ShipmentGatewayUsps {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTest), v...))
	})
}

// TestGT applies the GT predicate on the "test" field.
func TestGT(v string) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTest), v))
	})
}

// TestGTE applies the GTE predicate on the "test" field.
func TestGTE(v string) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTest), v))
	})
}

// TestLT applies the LT predicate on the "test" field.
func TestLT(v string) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTest), v))
	})
}

// TestLTE applies the LTE predicate on the "test" field.
func TestLTE(v string) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTest), v))
	})
}

// TestContains applies the Contains predicate on the "test" field.
func TestContains(v string) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTest), v))
	})
}

// TestHasPrefix applies the HasPrefix predicate on the "test" field.
func TestHasPrefix(v string) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTest), v))
	})
}

// TestHasSuffix applies the HasSuffix predicate on the "test" field.
func TestHasSuffix(v string) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTest), v))
	})
}

// TestIsNil applies the IsNil predicate on the "test" field.
func TestIsNil() predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTest)))
	})
}

// TestNotNil applies the NotNil predicate on the "test" field.
func TestNotNil() predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTest)))
	})
}

// TestEqualFold applies the EqualFold predicate on the "test" field.
func TestEqualFold(v string) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTest), v))
	})
}

// TestContainsFold applies the ContainsFold predicate on the "test" field.
func TestContainsFold(v string) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTest), v))
	})
}

// HasShipmentGatewayConfig applies the HasEdge predicate on the "shipment_gateway_config" edge.
func HasShipmentGatewayConfig() predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ShipmentGatewayConfigTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, ShipmentGatewayConfigTable, ShipmentGatewayConfigColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasShipmentGatewayConfigWith applies the HasEdge predicate on the "shipment_gateway_config" edge with a given conditions (other predicates).
func HasShipmentGatewayConfigWith(preds ...predicate.ShipmentGatewayConfig) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ShipmentGatewayConfigInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, ShipmentGatewayConfigTable, ShipmentGatewayConfigColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ShipmentGatewayUsps) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ShipmentGatewayUsps) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ShipmentGatewayUsps) predicate.ShipmentGatewayUsps {
	return predicate.ShipmentGatewayUsps(func(s *sql.Selector) {
		p(s.Not())
	})
}
