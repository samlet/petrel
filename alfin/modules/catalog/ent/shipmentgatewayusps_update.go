// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/predicate"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/shipmentgatewayconfig"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/shipmentgatewayusps"
)

// ShipmentGatewayUspsUpdate is the builder for updating ShipmentGatewayUsps entities.
type ShipmentGatewayUspsUpdate struct {
	config
	hooks    []Hook
	mutation *ShipmentGatewayUspsMutation
}

// Where adds a new predicate for the ShipmentGatewayUspsUpdate builder.
func (sguu *ShipmentGatewayUspsUpdate) Where(ps ...predicate.ShipmentGatewayUsps) *ShipmentGatewayUspsUpdate {
	sguu.mutation.predicates = append(sguu.mutation.predicates, ps...)
	return sguu
}

// SetStringRef sets the "string_ref" field.
func (sguu *ShipmentGatewayUspsUpdate) SetStringRef(s string) *ShipmentGatewayUspsUpdate {
	sguu.mutation.SetStringRef(s)
	return sguu
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (sguu *ShipmentGatewayUspsUpdate) SetNillableStringRef(s *string) *ShipmentGatewayUspsUpdate {
	if s != nil {
		sguu.SetStringRef(*s)
	}
	return sguu
}

// ClearStringRef clears the value of the "string_ref" field.
func (sguu *ShipmentGatewayUspsUpdate) ClearStringRef() *ShipmentGatewayUspsUpdate {
	sguu.mutation.ClearStringRef()
	return sguu
}

// SetConnectURL sets the "connect_url" field.
func (sguu *ShipmentGatewayUspsUpdate) SetConnectURL(s string) *ShipmentGatewayUspsUpdate {
	sguu.mutation.SetConnectURL(s)
	return sguu
}

// SetNillableConnectURL sets the "connect_url" field if the given value is not nil.
func (sguu *ShipmentGatewayUspsUpdate) SetNillableConnectURL(s *string) *ShipmentGatewayUspsUpdate {
	if s != nil {
		sguu.SetConnectURL(*s)
	}
	return sguu
}

// ClearConnectURL clears the value of the "connect_url" field.
func (sguu *ShipmentGatewayUspsUpdate) ClearConnectURL() *ShipmentGatewayUspsUpdate {
	sguu.mutation.ClearConnectURL()
	return sguu
}

// SetConnectURLLabels sets the "connect_url_labels" field.
func (sguu *ShipmentGatewayUspsUpdate) SetConnectURLLabels(s string) *ShipmentGatewayUspsUpdate {
	sguu.mutation.SetConnectURLLabels(s)
	return sguu
}

// SetNillableConnectURLLabels sets the "connect_url_labels" field if the given value is not nil.
func (sguu *ShipmentGatewayUspsUpdate) SetNillableConnectURLLabels(s *string) *ShipmentGatewayUspsUpdate {
	if s != nil {
		sguu.SetConnectURLLabels(*s)
	}
	return sguu
}

// ClearConnectURLLabels clears the value of the "connect_url_labels" field.
func (sguu *ShipmentGatewayUspsUpdate) ClearConnectURLLabels() *ShipmentGatewayUspsUpdate {
	sguu.mutation.ClearConnectURLLabels()
	return sguu
}

// SetConnectTimeout sets the "connect_timeout" field.
func (sguu *ShipmentGatewayUspsUpdate) SetConnectTimeout(i int) *ShipmentGatewayUspsUpdate {
	sguu.mutation.ResetConnectTimeout()
	sguu.mutation.SetConnectTimeout(i)
	return sguu
}

// SetNillableConnectTimeout sets the "connect_timeout" field if the given value is not nil.
func (sguu *ShipmentGatewayUspsUpdate) SetNillableConnectTimeout(i *int) *ShipmentGatewayUspsUpdate {
	if i != nil {
		sguu.SetConnectTimeout(*i)
	}
	return sguu
}

// AddConnectTimeout adds i to the "connect_timeout" field.
func (sguu *ShipmentGatewayUspsUpdate) AddConnectTimeout(i int) *ShipmentGatewayUspsUpdate {
	sguu.mutation.AddConnectTimeout(i)
	return sguu
}

// ClearConnectTimeout clears the value of the "connect_timeout" field.
func (sguu *ShipmentGatewayUspsUpdate) ClearConnectTimeout() *ShipmentGatewayUspsUpdate {
	sguu.mutation.ClearConnectTimeout()
	return sguu
}

// SetAccessUserID sets the "access_user_id" field.
func (sguu *ShipmentGatewayUspsUpdate) SetAccessUserID(s string) *ShipmentGatewayUspsUpdate {
	sguu.mutation.SetAccessUserID(s)
	return sguu
}

// SetNillableAccessUserID sets the "access_user_id" field if the given value is not nil.
func (sguu *ShipmentGatewayUspsUpdate) SetNillableAccessUserID(s *string) *ShipmentGatewayUspsUpdate {
	if s != nil {
		sguu.SetAccessUserID(*s)
	}
	return sguu
}

// ClearAccessUserID clears the value of the "access_user_id" field.
func (sguu *ShipmentGatewayUspsUpdate) ClearAccessUserID() *ShipmentGatewayUspsUpdate {
	sguu.mutation.ClearAccessUserID()
	return sguu
}

// SetAccessPassword sets the "access_password" field.
func (sguu *ShipmentGatewayUspsUpdate) SetAccessPassword(s string) *ShipmentGatewayUspsUpdate {
	sguu.mutation.SetAccessPassword(s)
	return sguu
}

// SetNillableAccessPassword sets the "access_password" field if the given value is not nil.
func (sguu *ShipmentGatewayUspsUpdate) SetNillableAccessPassword(s *string) *ShipmentGatewayUspsUpdate {
	if s != nil {
		sguu.SetAccessPassword(*s)
	}
	return sguu
}

// ClearAccessPassword clears the value of the "access_password" field.
func (sguu *ShipmentGatewayUspsUpdate) ClearAccessPassword() *ShipmentGatewayUspsUpdate {
	sguu.mutation.ClearAccessPassword()
	return sguu
}

// SetMaxEstimateWeight sets the "max_estimate_weight" field.
func (sguu *ShipmentGatewayUspsUpdate) SetMaxEstimateWeight(i int) *ShipmentGatewayUspsUpdate {
	sguu.mutation.ResetMaxEstimateWeight()
	sguu.mutation.SetMaxEstimateWeight(i)
	return sguu
}

// SetNillableMaxEstimateWeight sets the "max_estimate_weight" field if the given value is not nil.
func (sguu *ShipmentGatewayUspsUpdate) SetNillableMaxEstimateWeight(i *int) *ShipmentGatewayUspsUpdate {
	if i != nil {
		sguu.SetMaxEstimateWeight(*i)
	}
	return sguu
}

// AddMaxEstimateWeight adds i to the "max_estimate_weight" field.
func (sguu *ShipmentGatewayUspsUpdate) AddMaxEstimateWeight(i int) *ShipmentGatewayUspsUpdate {
	sguu.mutation.AddMaxEstimateWeight(i)
	return sguu
}

// ClearMaxEstimateWeight clears the value of the "max_estimate_weight" field.
func (sguu *ShipmentGatewayUspsUpdate) ClearMaxEstimateWeight() *ShipmentGatewayUspsUpdate {
	sguu.mutation.ClearMaxEstimateWeight()
	return sguu
}

// SetTest sets the "test" field.
func (sguu *ShipmentGatewayUspsUpdate) SetTest(s string) *ShipmentGatewayUspsUpdate {
	sguu.mutation.SetTest(s)
	return sguu
}

// SetNillableTest sets the "test" field if the given value is not nil.
func (sguu *ShipmentGatewayUspsUpdate) SetNillableTest(s *string) *ShipmentGatewayUspsUpdate {
	if s != nil {
		sguu.SetTest(*s)
	}
	return sguu
}

// ClearTest clears the value of the "test" field.
func (sguu *ShipmentGatewayUspsUpdate) ClearTest() *ShipmentGatewayUspsUpdate {
	sguu.mutation.ClearTest()
	return sguu
}

// SetShipmentGatewayConfigID sets the "shipment_gateway_config" edge to the ShipmentGatewayConfig entity by ID.
func (sguu *ShipmentGatewayUspsUpdate) SetShipmentGatewayConfigID(id int) *ShipmentGatewayUspsUpdate {
	sguu.mutation.SetShipmentGatewayConfigID(id)
	return sguu
}

// SetNillableShipmentGatewayConfigID sets the "shipment_gateway_config" edge to the ShipmentGatewayConfig entity by ID if the given value is not nil.
func (sguu *ShipmentGatewayUspsUpdate) SetNillableShipmentGatewayConfigID(id *int) *ShipmentGatewayUspsUpdate {
	if id != nil {
		sguu = sguu.SetShipmentGatewayConfigID(*id)
	}
	return sguu
}

// SetShipmentGatewayConfig sets the "shipment_gateway_config" edge to the ShipmentGatewayConfig entity.
func (sguu *ShipmentGatewayUspsUpdate) SetShipmentGatewayConfig(s *ShipmentGatewayConfig) *ShipmentGatewayUspsUpdate {
	return sguu.SetShipmentGatewayConfigID(s.ID)
}

// Mutation returns the ShipmentGatewayUspsMutation object of the builder.
func (sguu *ShipmentGatewayUspsUpdate) Mutation() *ShipmentGatewayUspsMutation {
	return sguu.mutation
}

// ClearShipmentGatewayConfig clears the "shipment_gateway_config" edge to the ShipmentGatewayConfig entity.
func (sguu *ShipmentGatewayUspsUpdate) ClearShipmentGatewayConfig() *ShipmentGatewayUspsUpdate {
	sguu.mutation.ClearShipmentGatewayConfig()
	return sguu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sguu *ShipmentGatewayUspsUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	sguu.defaults()
	if len(sguu.hooks) == 0 {
		affected, err = sguu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ShipmentGatewayUspsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			sguu.mutation = mutation
			affected, err = sguu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(sguu.hooks) - 1; i >= 0; i-- {
			mut = sguu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sguu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (sguu *ShipmentGatewayUspsUpdate) SaveX(ctx context.Context) int {
	affected, err := sguu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sguu *ShipmentGatewayUspsUpdate) Exec(ctx context.Context) error {
	_, err := sguu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sguu *ShipmentGatewayUspsUpdate) ExecX(ctx context.Context) {
	if err := sguu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sguu *ShipmentGatewayUspsUpdate) defaults() {
	if _, ok := sguu.mutation.UpdateTime(); !ok {
		v := shipmentgatewayusps.UpdateDefaultUpdateTime()
		sguu.mutation.SetUpdateTime(v)
	}
}

func (sguu *ShipmentGatewayUspsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   shipmentgatewayusps.Table,
			Columns: shipmentgatewayusps.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: shipmentgatewayusps.FieldID,
			},
		},
	}
	if ps := sguu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sguu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: shipmentgatewayusps.FieldUpdateTime,
		})
	}
	if value, ok := sguu.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewayusps.FieldStringRef,
		})
	}
	if sguu.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmentgatewayusps.FieldStringRef,
		})
	}
	if value, ok := sguu.mutation.ConnectURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewayusps.FieldConnectURL,
		})
	}
	if sguu.mutation.ConnectURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmentgatewayusps.FieldConnectURL,
		})
	}
	if value, ok := sguu.mutation.ConnectURLLabels(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewayusps.FieldConnectURLLabels,
		})
	}
	if sguu.mutation.ConnectURLLabelsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmentgatewayusps.FieldConnectURLLabels,
		})
	}
	if value, ok := sguu.mutation.ConnectTimeout(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shipmentgatewayusps.FieldConnectTimeout,
		})
	}
	if value, ok := sguu.mutation.AddedConnectTimeout(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shipmentgatewayusps.FieldConnectTimeout,
		})
	}
	if sguu.mutation.ConnectTimeoutCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: shipmentgatewayusps.FieldConnectTimeout,
		})
	}
	if value, ok := sguu.mutation.AccessUserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewayusps.FieldAccessUserID,
		})
	}
	if sguu.mutation.AccessUserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmentgatewayusps.FieldAccessUserID,
		})
	}
	if value, ok := sguu.mutation.AccessPassword(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewayusps.FieldAccessPassword,
		})
	}
	if sguu.mutation.AccessPasswordCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmentgatewayusps.FieldAccessPassword,
		})
	}
	if value, ok := sguu.mutation.MaxEstimateWeight(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shipmentgatewayusps.FieldMaxEstimateWeight,
		})
	}
	if value, ok := sguu.mutation.AddedMaxEstimateWeight(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shipmentgatewayusps.FieldMaxEstimateWeight,
		})
	}
	if sguu.mutation.MaxEstimateWeightCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: shipmentgatewayusps.FieldMaxEstimateWeight,
		})
	}
	if value, ok := sguu.mutation.Test(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewayusps.FieldTest,
		})
	}
	if sguu.mutation.TestCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmentgatewayusps.FieldTest,
		})
	}
	if sguu.mutation.ShipmentGatewayConfigCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   shipmentgatewayusps.ShipmentGatewayConfigTable,
			Columns: []string{shipmentgatewayusps.ShipmentGatewayConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipmentgatewayconfig.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sguu.mutation.ShipmentGatewayConfigIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   shipmentgatewayusps.ShipmentGatewayConfigTable,
			Columns: []string{shipmentgatewayusps.ShipmentGatewayConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipmentgatewayconfig.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sguu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shipmentgatewayusps.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ShipmentGatewayUspsUpdateOne is the builder for updating a single ShipmentGatewayUsps entity.
type ShipmentGatewayUspsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ShipmentGatewayUspsMutation
}

// SetStringRef sets the "string_ref" field.
func (sguuo *ShipmentGatewayUspsUpdateOne) SetStringRef(s string) *ShipmentGatewayUspsUpdateOne {
	sguuo.mutation.SetStringRef(s)
	return sguuo
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (sguuo *ShipmentGatewayUspsUpdateOne) SetNillableStringRef(s *string) *ShipmentGatewayUspsUpdateOne {
	if s != nil {
		sguuo.SetStringRef(*s)
	}
	return sguuo
}

// ClearStringRef clears the value of the "string_ref" field.
func (sguuo *ShipmentGatewayUspsUpdateOne) ClearStringRef() *ShipmentGatewayUspsUpdateOne {
	sguuo.mutation.ClearStringRef()
	return sguuo
}

// SetConnectURL sets the "connect_url" field.
func (sguuo *ShipmentGatewayUspsUpdateOne) SetConnectURL(s string) *ShipmentGatewayUspsUpdateOne {
	sguuo.mutation.SetConnectURL(s)
	return sguuo
}

// SetNillableConnectURL sets the "connect_url" field if the given value is not nil.
func (sguuo *ShipmentGatewayUspsUpdateOne) SetNillableConnectURL(s *string) *ShipmentGatewayUspsUpdateOne {
	if s != nil {
		sguuo.SetConnectURL(*s)
	}
	return sguuo
}

// ClearConnectURL clears the value of the "connect_url" field.
func (sguuo *ShipmentGatewayUspsUpdateOne) ClearConnectURL() *ShipmentGatewayUspsUpdateOne {
	sguuo.mutation.ClearConnectURL()
	return sguuo
}

// SetConnectURLLabels sets the "connect_url_labels" field.
func (sguuo *ShipmentGatewayUspsUpdateOne) SetConnectURLLabels(s string) *ShipmentGatewayUspsUpdateOne {
	sguuo.mutation.SetConnectURLLabels(s)
	return sguuo
}

// SetNillableConnectURLLabels sets the "connect_url_labels" field if the given value is not nil.
func (sguuo *ShipmentGatewayUspsUpdateOne) SetNillableConnectURLLabels(s *string) *ShipmentGatewayUspsUpdateOne {
	if s != nil {
		sguuo.SetConnectURLLabels(*s)
	}
	return sguuo
}

// ClearConnectURLLabels clears the value of the "connect_url_labels" field.
func (sguuo *ShipmentGatewayUspsUpdateOne) ClearConnectURLLabels() *ShipmentGatewayUspsUpdateOne {
	sguuo.mutation.ClearConnectURLLabels()
	return sguuo
}

// SetConnectTimeout sets the "connect_timeout" field.
func (sguuo *ShipmentGatewayUspsUpdateOne) SetConnectTimeout(i int) *ShipmentGatewayUspsUpdateOne {
	sguuo.mutation.ResetConnectTimeout()
	sguuo.mutation.SetConnectTimeout(i)
	return sguuo
}

// SetNillableConnectTimeout sets the "connect_timeout" field if the given value is not nil.
func (sguuo *ShipmentGatewayUspsUpdateOne) SetNillableConnectTimeout(i *int) *ShipmentGatewayUspsUpdateOne {
	if i != nil {
		sguuo.SetConnectTimeout(*i)
	}
	return sguuo
}

// AddConnectTimeout adds i to the "connect_timeout" field.
func (sguuo *ShipmentGatewayUspsUpdateOne) AddConnectTimeout(i int) *ShipmentGatewayUspsUpdateOne {
	sguuo.mutation.AddConnectTimeout(i)
	return sguuo
}

// ClearConnectTimeout clears the value of the "connect_timeout" field.
func (sguuo *ShipmentGatewayUspsUpdateOne) ClearConnectTimeout() *ShipmentGatewayUspsUpdateOne {
	sguuo.mutation.ClearConnectTimeout()
	return sguuo
}

// SetAccessUserID sets the "access_user_id" field.
func (sguuo *ShipmentGatewayUspsUpdateOne) SetAccessUserID(s string) *ShipmentGatewayUspsUpdateOne {
	sguuo.mutation.SetAccessUserID(s)
	return sguuo
}

// SetNillableAccessUserID sets the "access_user_id" field if the given value is not nil.
func (sguuo *ShipmentGatewayUspsUpdateOne) SetNillableAccessUserID(s *string) *ShipmentGatewayUspsUpdateOne {
	if s != nil {
		sguuo.SetAccessUserID(*s)
	}
	return sguuo
}

// ClearAccessUserID clears the value of the "access_user_id" field.
func (sguuo *ShipmentGatewayUspsUpdateOne) ClearAccessUserID() *ShipmentGatewayUspsUpdateOne {
	sguuo.mutation.ClearAccessUserID()
	return sguuo
}

// SetAccessPassword sets the "access_password" field.
func (sguuo *ShipmentGatewayUspsUpdateOne) SetAccessPassword(s string) *ShipmentGatewayUspsUpdateOne {
	sguuo.mutation.SetAccessPassword(s)
	return sguuo
}

// SetNillableAccessPassword sets the "access_password" field if the given value is not nil.
func (sguuo *ShipmentGatewayUspsUpdateOne) SetNillableAccessPassword(s *string) *ShipmentGatewayUspsUpdateOne {
	if s != nil {
		sguuo.SetAccessPassword(*s)
	}
	return sguuo
}

// ClearAccessPassword clears the value of the "access_password" field.
func (sguuo *ShipmentGatewayUspsUpdateOne) ClearAccessPassword() *ShipmentGatewayUspsUpdateOne {
	sguuo.mutation.ClearAccessPassword()
	return sguuo
}

// SetMaxEstimateWeight sets the "max_estimate_weight" field.
func (sguuo *ShipmentGatewayUspsUpdateOne) SetMaxEstimateWeight(i int) *ShipmentGatewayUspsUpdateOne {
	sguuo.mutation.ResetMaxEstimateWeight()
	sguuo.mutation.SetMaxEstimateWeight(i)
	return sguuo
}

// SetNillableMaxEstimateWeight sets the "max_estimate_weight" field if the given value is not nil.
func (sguuo *ShipmentGatewayUspsUpdateOne) SetNillableMaxEstimateWeight(i *int) *ShipmentGatewayUspsUpdateOne {
	if i != nil {
		sguuo.SetMaxEstimateWeight(*i)
	}
	return sguuo
}

// AddMaxEstimateWeight adds i to the "max_estimate_weight" field.
func (sguuo *ShipmentGatewayUspsUpdateOne) AddMaxEstimateWeight(i int) *ShipmentGatewayUspsUpdateOne {
	sguuo.mutation.AddMaxEstimateWeight(i)
	return sguuo
}

// ClearMaxEstimateWeight clears the value of the "max_estimate_weight" field.
func (sguuo *ShipmentGatewayUspsUpdateOne) ClearMaxEstimateWeight() *ShipmentGatewayUspsUpdateOne {
	sguuo.mutation.ClearMaxEstimateWeight()
	return sguuo
}

// SetTest sets the "test" field.
func (sguuo *ShipmentGatewayUspsUpdateOne) SetTest(s string) *ShipmentGatewayUspsUpdateOne {
	sguuo.mutation.SetTest(s)
	return sguuo
}

// SetNillableTest sets the "test" field if the given value is not nil.
func (sguuo *ShipmentGatewayUspsUpdateOne) SetNillableTest(s *string) *ShipmentGatewayUspsUpdateOne {
	if s != nil {
		sguuo.SetTest(*s)
	}
	return sguuo
}

// ClearTest clears the value of the "test" field.
func (sguuo *ShipmentGatewayUspsUpdateOne) ClearTest() *ShipmentGatewayUspsUpdateOne {
	sguuo.mutation.ClearTest()
	return sguuo
}

// SetShipmentGatewayConfigID sets the "shipment_gateway_config" edge to the ShipmentGatewayConfig entity by ID.
func (sguuo *ShipmentGatewayUspsUpdateOne) SetShipmentGatewayConfigID(id int) *ShipmentGatewayUspsUpdateOne {
	sguuo.mutation.SetShipmentGatewayConfigID(id)
	return sguuo
}

// SetNillableShipmentGatewayConfigID sets the "shipment_gateway_config" edge to the ShipmentGatewayConfig entity by ID if the given value is not nil.
func (sguuo *ShipmentGatewayUspsUpdateOne) SetNillableShipmentGatewayConfigID(id *int) *ShipmentGatewayUspsUpdateOne {
	if id != nil {
		sguuo = sguuo.SetShipmentGatewayConfigID(*id)
	}
	return sguuo
}

// SetShipmentGatewayConfig sets the "shipment_gateway_config" edge to the ShipmentGatewayConfig entity.
func (sguuo *ShipmentGatewayUspsUpdateOne) SetShipmentGatewayConfig(s *ShipmentGatewayConfig) *ShipmentGatewayUspsUpdateOne {
	return sguuo.SetShipmentGatewayConfigID(s.ID)
}

// Mutation returns the ShipmentGatewayUspsMutation object of the builder.
func (sguuo *ShipmentGatewayUspsUpdateOne) Mutation() *ShipmentGatewayUspsMutation {
	return sguuo.mutation
}

// ClearShipmentGatewayConfig clears the "shipment_gateway_config" edge to the ShipmentGatewayConfig entity.
func (sguuo *ShipmentGatewayUspsUpdateOne) ClearShipmentGatewayConfig() *ShipmentGatewayUspsUpdateOne {
	sguuo.mutation.ClearShipmentGatewayConfig()
	return sguuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sguuo *ShipmentGatewayUspsUpdateOne) Select(field string, fields ...string) *ShipmentGatewayUspsUpdateOne {
	sguuo.fields = append([]string{field}, fields...)
	return sguuo
}

// Save executes the query and returns the updated ShipmentGatewayUsps entity.
func (sguuo *ShipmentGatewayUspsUpdateOne) Save(ctx context.Context) (*ShipmentGatewayUsps, error) {
	var (
		err  error
		node *ShipmentGatewayUsps
	)
	sguuo.defaults()
	if len(sguuo.hooks) == 0 {
		node, err = sguuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ShipmentGatewayUspsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			sguuo.mutation = mutation
			node, err = sguuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(sguuo.hooks) - 1; i >= 0; i-- {
			mut = sguuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sguuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (sguuo *ShipmentGatewayUspsUpdateOne) SaveX(ctx context.Context) *ShipmentGatewayUsps {
	node, err := sguuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sguuo *ShipmentGatewayUspsUpdateOne) Exec(ctx context.Context) error {
	_, err := sguuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sguuo *ShipmentGatewayUspsUpdateOne) ExecX(ctx context.Context) {
	if err := sguuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sguuo *ShipmentGatewayUspsUpdateOne) defaults() {
	if _, ok := sguuo.mutation.UpdateTime(); !ok {
		v := shipmentgatewayusps.UpdateDefaultUpdateTime()
		sguuo.mutation.SetUpdateTime(v)
	}
}

func (sguuo *ShipmentGatewayUspsUpdateOne) sqlSave(ctx context.Context) (_node *ShipmentGatewayUsps, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   shipmentgatewayusps.Table,
			Columns: shipmentgatewayusps.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: shipmentgatewayusps.FieldID,
			},
		},
	}
	id, ok := sguuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ShipmentGatewayUsps.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := sguuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, shipmentgatewayusps.FieldID)
		for _, f := range fields {
			if !shipmentgatewayusps.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != shipmentgatewayusps.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sguuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sguuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: shipmentgatewayusps.FieldUpdateTime,
		})
	}
	if value, ok := sguuo.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewayusps.FieldStringRef,
		})
	}
	if sguuo.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmentgatewayusps.FieldStringRef,
		})
	}
	if value, ok := sguuo.mutation.ConnectURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewayusps.FieldConnectURL,
		})
	}
	if sguuo.mutation.ConnectURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmentgatewayusps.FieldConnectURL,
		})
	}
	if value, ok := sguuo.mutation.ConnectURLLabels(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewayusps.FieldConnectURLLabels,
		})
	}
	if sguuo.mutation.ConnectURLLabelsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmentgatewayusps.FieldConnectURLLabels,
		})
	}
	if value, ok := sguuo.mutation.ConnectTimeout(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shipmentgatewayusps.FieldConnectTimeout,
		})
	}
	if value, ok := sguuo.mutation.AddedConnectTimeout(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shipmentgatewayusps.FieldConnectTimeout,
		})
	}
	if sguuo.mutation.ConnectTimeoutCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: shipmentgatewayusps.FieldConnectTimeout,
		})
	}
	if value, ok := sguuo.mutation.AccessUserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewayusps.FieldAccessUserID,
		})
	}
	if sguuo.mutation.AccessUserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmentgatewayusps.FieldAccessUserID,
		})
	}
	if value, ok := sguuo.mutation.AccessPassword(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewayusps.FieldAccessPassword,
		})
	}
	if sguuo.mutation.AccessPasswordCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmentgatewayusps.FieldAccessPassword,
		})
	}
	if value, ok := sguuo.mutation.MaxEstimateWeight(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shipmentgatewayusps.FieldMaxEstimateWeight,
		})
	}
	if value, ok := sguuo.mutation.AddedMaxEstimateWeight(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shipmentgatewayusps.FieldMaxEstimateWeight,
		})
	}
	if sguuo.mutation.MaxEstimateWeightCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: shipmentgatewayusps.FieldMaxEstimateWeight,
		})
	}
	if value, ok := sguuo.mutation.Test(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentgatewayusps.FieldTest,
		})
	}
	if sguuo.mutation.TestCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmentgatewayusps.FieldTest,
		})
	}
	if sguuo.mutation.ShipmentGatewayConfigCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   shipmentgatewayusps.ShipmentGatewayConfigTable,
			Columns: []string{shipmentgatewayusps.ShipmentGatewayConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipmentgatewayconfig.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sguuo.mutation.ShipmentGatewayConfigIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   shipmentgatewayusps.ShipmentGatewayConfigTable,
			Columns: []string{shipmentgatewayusps.ShipmentGatewayConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipmentgatewayconfig.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ShipmentGatewayUsps{config: sguuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sguuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shipmentgatewayusps.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
