// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/shipmenttype"
)

// ShipmentTypeCreate is the builder for creating a ShipmentType entity.
type ShipmentTypeCreate struct {
	config
	mutation *ShipmentTypeMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (stc *ShipmentTypeCreate) SetCreateTime(t time.Time) *ShipmentTypeCreate {
	stc.mutation.SetCreateTime(t)
	return stc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (stc *ShipmentTypeCreate) SetNillableCreateTime(t *time.Time) *ShipmentTypeCreate {
	if t != nil {
		stc.SetCreateTime(*t)
	}
	return stc
}

// SetUpdateTime sets the "update_time" field.
func (stc *ShipmentTypeCreate) SetUpdateTime(t time.Time) *ShipmentTypeCreate {
	stc.mutation.SetUpdateTime(t)
	return stc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (stc *ShipmentTypeCreate) SetNillableUpdateTime(t *time.Time) *ShipmentTypeCreate {
	if t != nil {
		stc.SetUpdateTime(*t)
	}
	return stc
}

// SetStringRef sets the "string_ref" field.
func (stc *ShipmentTypeCreate) SetStringRef(s string) *ShipmentTypeCreate {
	stc.mutation.SetStringRef(s)
	return stc
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (stc *ShipmentTypeCreate) SetNillableStringRef(s *string) *ShipmentTypeCreate {
	if s != nil {
		stc.SetStringRef(*s)
	}
	return stc
}

// SetHasTable sets the "has_table" field.
func (stc *ShipmentTypeCreate) SetHasTable(st shipmenttype.HasTable) *ShipmentTypeCreate {
	stc.mutation.SetHasTable(st)
	return stc
}

// SetNillableHasTable sets the "has_table" field if the given value is not nil.
func (stc *ShipmentTypeCreate) SetNillableHasTable(st *shipmenttype.HasTable) *ShipmentTypeCreate {
	if st != nil {
		stc.SetHasTable(*st)
	}
	return stc
}

// SetDescription sets the "description" field.
func (stc *ShipmentTypeCreate) SetDescription(s string) *ShipmentTypeCreate {
	stc.mutation.SetDescription(s)
	return stc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (stc *ShipmentTypeCreate) SetNillableDescription(s *string) *ShipmentTypeCreate {
	if s != nil {
		stc.SetDescription(*s)
	}
	return stc
}

// SetParentID sets the "parent" edge to the ShipmentType entity by ID.
func (stc *ShipmentTypeCreate) SetParentID(id int) *ShipmentTypeCreate {
	stc.mutation.SetParentID(id)
	return stc
}

// SetNillableParentID sets the "parent" edge to the ShipmentType entity by ID if the given value is not nil.
func (stc *ShipmentTypeCreate) SetNillableParentID(id *int) *ShipmentTypeCreate {
	if id != nil {
		stc = stc.SetParentID(*id)
	}
	return stc
}

// SetParent sets the "parent" edge to the ShipmentType entity.
func (stc *ShipmentTypeCreate) SetParent(s *ShipmentType) *ShipmentTypeCreate {
	return stc.SetParentID(s.ID)
}

// AddChildIDs adds the "children" edge to the ShipmentType entity by IDs.
func (stc *ShipmentTypeCreate) AddChildIDs(ids ...int) *ShipmentTypeCreate {
	stc.mutation.AddChildIDs(ids...)
	return stc
}

// AddChildren adds the "children" edges to the ShipmentType entity.
func (stc *ShipmentTypeCreate) AddChildren(s ...*ShipmentType) *ShipmentTypeCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return stc.AddChildIDs(ids...)
}

// AddChildShipmentTypeIDs adds the "child_shipment_types" edge to the ShipmentType entity by IDs.
func (stc *ShipmentTypeCreate) AddChildShipmentTypeIDs(ids ...int) *ShipmentTypeCreate {
	stc.mutation.AddChildShipmentTypeIDs(ids...)
	return stc
}

// AddChildShipmentTypes adds the "child_shipment_types" edges to the ShipmentType entity.
func (stc *ShipmentTypeCreate) AddChildShipmentTypes(s ...*ShipmentType) *ShipmentTypeCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return stc.AddChildShipmentTypeIDs(ids...)
}

// Mutation returns the ShipmentTypeMutation object of the builder.
func (stc *ShipmentTypeCreate) Mutation() *ShipmentTypeMutation {
	return stc.mutation
}

// Save creates the ShipmentType in the database.
func (stc *ShipmentTypeCreate) Save(ctx context.Context) (*ShipmentType, error) {
	var (
		err  error
		node *ShipmentType
	)
	stc.defaults()
	if len(stc.hooks) == 0 {
		if err = stc.check(); err != nil {
			return nil, err
		}
		node, err = stc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ShipmentTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = stc.check(); err != nil {
				return nil, err
			}
			stc.mutation = mutation
			if node, err = stc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(stc.hooks) - 1; i >= 0; i-- {
			mut = stc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, stc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (stc *ShipmentTypeCreate) SaveX(ctx context.Context) *ShipmentType {
	v, err := stc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (stc *ShipmentTypeCreate) defaults() {
	if _, ok := stc.mutation.CreateTime(); !ok {
		v := shipmenttype.DefaultCreateTime()
		stc.mutation.SetCreateTime(v)
	}
	if _, ok := stc.mutation.UpdateTime(); !ok {
		v := shipmenttype.DefaultUpdateTime()
		stc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (stc *ShipmentTypeCreate) check() error {
	if _, ok := stc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New("ent: missing required field \"create_time\"")}
	}
	if _, ok := stc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New("ent: missing required field \"update_time\"")}
	}
	if v, ok := stc.mutation.HasTable(); ok {
		if err := shipmenttype.HasTableValidator(v); err != nil {
			return &ValidationError{Name: "has_table", err: fmt.Errorf("ent: validator failed for field \"has_table\": %w", err)}
		}
	}
	return nil
}

func (stc *ShipmentTypeCreate) sqlSave(ctx context.Context) (*ShipmentType, error) {
	_node, _spec := stc.createSpec()
	if err := sqlgraph.CreateNode(ctx, stc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (stc *ShipmentTypeCreate) createSpec() (*ShipmentType, *sqlgraph.CreateSpec) {
	var (
		_node = &ShipmentType{config: stc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: shipmenttype.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: shipmenttype.FieldID,
			},
		}
	)
	if value, ok := stc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: shipmenttype.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := stc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: shipmenttype.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := stc.mutation.StringRef(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmenttype.FieldStringRef,
		})
		_node.StringRef = value
	}
	if value, ok := stc.mutation.HasTable(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: shipmenttype.FieldHasTable,
		})
		_node.HasTable = value
	}
	if value, ok := stc.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmenttype.FieldDescription,
		})
		_node.Description = value
	}
	if nodes := stc.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shipmenttype.ParentTable,
			Columns: []string{shipmenttype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipmenttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.shipment_type_children = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := stc.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shipmenttype.ChildrenTable,
			Columns: []string{shipmenttype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipmenttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := stc.mutation.ChildShipmentTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   shipmenttype.ChildShipmentTypesTable,
			Columns: shipmenttype.ChildShipmentTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipmenttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ShipmentTypeCreateBulk is the builder for creating many ShipmentType entities in bulk.
type ShipmentTypeCreateBulk struct {
	config
	builders []*ShipmentTypeCreate
}

// Save creates the ShipmentType entities in the database.
func (stcb *ShipmentTypeCreateBulk) Save(ctx context.Context) ([]*ShipmentType, error) {
	specs := make([]*sqlgraph.CreateSpec, len(stcb.builders))
	nodes := make([]*ShipmentType, len(stcb.builders))
	mutators := make([]Mutator, len(stcb.builders))
	for i := range stcb.builders {
		func(i int, root context.Context) {
			builder := stcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ShipmentTypeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, stcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, stcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, stcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (stcb *ShipmentTypeCreateBulk) SaveX(ctx context.Context) []*ShipmentType {
	v, err := stcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
