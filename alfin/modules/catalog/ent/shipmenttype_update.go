// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/predicate"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/shipmenttype"
)

// ShipmentTypeUpdate is the builder for updating ShipmentType entities.
type ShipmentTypeUpdate struct {
	config
	hooks    []Hook
	mutation *ShipmentTypeMutation
}

// Where adds a new predicate for the ShipmentTypeUpdate builder.
func (stu *ShipmentTypeUpdate) Where(ps ...predicate.ShipmentType) *ShipmentTypeUpdate {
	stu.mutation.predicates = append(stu.mutation.predicates, ps...)
	return stu
}

// SetStringRef sets the "string_ref" field.
func (stu *ShipmentTypeUpdate) SetStringRef(s string) *ShipmentTypeUpdate {
	stu.mutation.SetStringRef(s)
	return stu
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (stu *ShipmentTypeUpdate) SetNillableStringRef(s *string) *ShipmentTypeUpdate {
	if s != nil {
		stu.SetStringRef(*s)
	}
	return stu
}

// ClearStringRef clears the value of the "string_ref" field.
func (stu *ShipmentTypeUpdate) ClearStringRef() *ShipmentTypeUpdate {
	stu.mutation.ClearStringRef()
	return stu
}

// SetHasTable sets the "has_table" field.
func (stu *ShipmentTypeUpdate) SetHasTable(st shipmenttype.HasTable) *ShipmentTypeUpdate {
	stu.mutation.SetHasTable(st)
	return stu
}

// SetNillableHasTable sets the "has_table" field if the given value is not nil.
func (stu *ShipmentTypeUpdate) SetNillableHasTable(st *shipmenttype.HasTable) *ShipmentTypeUpdate {
	if st != nil {
		stu.SetHasTable(*st)
	}
	return stu
}

// ClearHasTable clears the value of the "has_table" field.
func (stu *ShipmentTypeUpdate) ClearHasTable() *ShipmentTypeUpdate {
	stu.mutation.ClearHasTable()
	return stu
}

// SetDescription sets the "description" field.
func (stu *ShipmentTypeUpdate) SetDescription(s string) *ShipmentTypeUpdate {
	stu.mutation.SetDescription(s)
	return stu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (stu *ShipmentTypeUpdate) SetNillableDescription(s *string) *ShipmentTypeUpdate {
	if s != nil {
		stu.SetDescription(*s)
	}
	return stu
}

// ClearDescription clears the value of the "description" field.
func (stu *ShipmentTypeUpdate) ClearDescription() *ShipmentTypeUpdate {
	stu.mutation.ClearDescription()
	return stu
}

// SetParentID sets the "parent" edge to the ShipmentType entity by ID.
func (stu *ShipmentTypeUpdate) SetParentID(id int) *ShipmentTypeUpdate {
	stu.mutation.SetParentID(id)
	return stu
}

// SetNillableParentID sets the "parent" edge to the ShipmentType entity by ID if the given value is not nil.
func (stu *ShipmentTypeUpdate) SetNillableParentID(id *int) *ShipmentTypeUpdate {
	if id != nil {
		stu = stu.SetParentID(*id)
	}
	return stu
}

// SetParent sets the "parent" edge to the ShipmentType entity.
func (stu *ShipmentTypeUpdate) SetParent(s *ShipmentType) *ShipmentTypeUpdate {
	return stu.SetParentID(s.ID)
}

// AddChildIDs adds the "children" edge to the ShipmentType entity by IDs.
func (stu *ShipmentTypeUpdate) AddChildIDs(ids ...int) *ShipmentTypeUpdate {
	stu.mutation.AddChildIDs(ids...)
	return stu
}

// AddChildren adds the "children" edges to the ShipmentType entity.
func (stu *ShipmentTypeUpdate) AddChildren(s ...*ShipmentType) *ShipmentTypeUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return stu.AddChildIDs(ids...)
}

// AddChildShipmentTypeIDs adds the "child_shipment_types" edge to the ShipmentType entity by IDs.
func (stu *ShipmentTypeUpdate) AddChildShipmentTypeIDs(ids ...int) *ShipmentTypeUpdate {
	stu.mutation.AddChildShipmentTypeIDs(ids...)
	return stu
}

// AddChildShipmentTypes adds the "child_shipment_types" edges to the ShipmentType entity.
func (stu *ShipmentTypeUpdate) AddChildShipmentTypes(s ...*ShipmentType) *ShipmentTypeUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return stu.AddChildShipmentTypeIDs(ids...)
}

// Mutation returns the ShipmentTypeMutation object of the builder.
func (stu *ShipmentTypeUpdate) Mutation() *ShipmentTypeMutation {
	return stu.mutation
}

// ClearParent clears the "parent" edge to the ShipmentType entity.
func (stu *ShipmentTypeUpdate) ClearParent() *ShipmentTypeUpdate {
	stu.mutation.ClearParent()
	return stu
}

// ClearChildren clears all "children" edges to the ShipmentType entity.
func (stu *ShipmentTypeUpdate) ClearChildren() *ShipmentTypeUpdate {
	stu.mutation.ClearChildren()
	return stu
}

// RemoveChildIDs removes the "children" edge to ShipmentType entities by IDs.
func (stu *ShipmentTypeUpdate) RemoveChildIDs(ids ...int) *ShipmentTypeUpdate {
	stu.mutation.RemoveChildIDs(ids...)
	return stu
}

// RemoveChildren removes "children" edges to ShipmentType entities.
func (stu *ShipmentTypeUpdate) RemoveChildren(s ...*ShipmentType) *ShipmentTypeUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return stu.RemoveChildIDs(ids...)
}

// ClearChildShipmentTypes clears all "child_shipment_types" edges to the ShipmentType entity.
func (stu *ShipmentTypeUpdate) ClearChildShipmentTypes() *ShipmentTypeUpdate {
	stu.mutation.ClearChildShipmentTypes()
	return stu
}

// RemoveChildShipmentTypeIDs removes the "child_shipment_types" edge to ShipmentType entities by IDs.
func (stu *ShipmentTypeUpdate) RemoveChildShipmentTypeIDs(ids ...int) *ShipmentTypeUpdate {
	stu.mutation.RemoveChildShipmentTypeIDs(ids...)
	return stu
}

// RemoveChildShipmentTypes removes "child_shipment_types" edges to ShipmentType entities.
func (stu *ShipmentTypeUpdate) RemoveChildShipmentTypes(s ...*ShipmentType) *ShipmentTypeUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return stu.RemoveChildShipmentTypeIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (stu *ShipmentTypeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	stu.defaults()
	if len(stu.hooks) == 0 {
		if err = stu.check(); err != nil {
			return 0, err
		}
		affected, err = stu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ShipmentTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = stu.check(); err != nil {
				return 0, err
			}
			stu.mutation = mutation
			affected, err = stu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(stu.hooks) - 1; i >= 0; i-- {
			mut = stu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, stu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (stu *ShipmentTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := stu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (stu *ShipmentTypeUpdate) Exec(ctx context.Context) error {
	_, err := stu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stu *ShipmentTypeUpdate) ExecX(ctx context.Context) {
	if err := stu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (stu *ShipmentTypeUpdate) defaults() {
	if _, ok := stu.mutation.UpdateTime(); !ok {
		v := shipmenttype.UpdateDefaultUpdateTime()
		stu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (stu *ShipmentTypeUpdate) check() error {
	if v, ok := stu.mutation.HasTable(); ok {
		if err := shipmenttype.HasTableValidator(v); err != nil {
			return &ValidationError{Name: "has_table", err: fmt.Errorf("ent: validator failed for field \"has_table\": %w", err)}
		}
	}
	return nil
}

func (stu *ShipmentTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   shipmenttype.Table,
			Columns: shipmenttype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: shipmenttype.FieldID,
			},
		},
	}
	if ps := stu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := stu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: shipmenttype.FieldUpdateTime,
		})
	}
	if value, ok := stu.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmenttype.FieldStringRef,
		})
	}
	if stu.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmenttype.FieldStringRef,
		})
	}
	if value, ok := stu.mutation.HasTable(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: shipmenttype.FieldHasTable,
		})
	}
	if stu.mutation.HasTableCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: shipmenttype.FieldHasTable,
		})
	}
	if value, ok := stu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmenttype.FieldDescription,
		})
	}
	if stu.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmenttype.FieldDescription,
		})
	}
	if stu.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shipmenttype.ParentTable,
			Columns: []string{shipmenttype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipmenttype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stu.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shipmenttype.ParentTable,
			Columns: []string{shipmenttype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipmenttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if stu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shipmenttype.ChildrenTable,
			Columns: []string{shipmenttype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipmenttype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stu.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !stu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shipmenttype.ChildrenTable,
			Columns: []string{shipmenttype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipmenttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stu.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shipmenttype.ChildrenTable,
			Columns: []string{shipmenttype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipmenttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if stu.mutation.ChildShipmentTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   shipmenttype.ChildShipmentTypesTable,
			Columns: shipmenttype.ChildShipmentTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipmenttype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stu.mutation.RemovedChildShipmentTypesIDs(); len(nodes) > 0 && !stu.mutation.ChildShipmentTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   shipmenttype.ChildShipmentTypesTable,
			Columns: shipmenttype.ChildShipmentTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipmenttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stu.mutation.ChildShipmentTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   shipmenttype.ChildShipmentTypesTable,
			Columns: shipmenttype.ChildShipmentTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipmenttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, stu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shipmenttype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ShipmentTypeUpdateOne is the builder for updating a single ShipmentType entity.
type ShipmentTypeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ShipmentTypeMutation
}

// SetStringRef sets the "string_ref" field.
func (stuo *ShipmentTypeUpdateOne) SetStringRef(s string) *ShipmentTypeUpdateOne {
	stuo.mutation.SetStringRef(s)
	return stuo
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (stuo *ShipmentTypeUpdateOne) SetNillableStringRef(s *string) *ShipmentTypeUpdateOne {
	if s != nil {
		stuo.SetStringRef(*s)
	}
	return stuo
}

// ClearStringRef clears the value of the "string_ref" field.
func (stuo *ShipmentTypeUpdateOne) ClearStringRef() *ShipmentTypeUpdateOne {
	stuo.mutation.ClearStringRef()
	return stuo
}

// SetHasTable sets the "has_table" field.
func (stuo *ShipmentTypeUpdateOne) SetHasTable(st shipmenttype.HasTable) *ShipmentTypeUpdateOne {
	stuo.mutation.SetHasTable(st)
	return stuo
}

// SetNillableHasTable sets the "has_table" field if the given value is not nil.
func (stuo *ShipmentTypeUpdateOne) SetNillableHasTable(st *shipmenttype.HasTable) *ShipmentTypeUpdateOne {
	if st != nil {
		stuo.SetHasTable(*st)
	}
	return stuo
}

// ClearHasTable clears the value of the "has_table" field.
func (stuo *ShipmentTypeUpdateOne) ClearHasTable() *ShipmentTypeUpdateOne {
	stuo.mutation.ClearHasTable()
	return stuo
}

// SetDescription sets the "description" field.
func (stuo *ShipmentTypeUpdateOne) SetDescription(s string) *ShipmentTypeUpdateOne {
	stuo.mutation.SetDescription(s)
	return stuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (stuo *ShipmentTypeUpdateOne) SetNillableDescription(s *string) *ShipmentTypeUpdateOne {
	if s != nil {
		stuo.SetDescription(*s)
	}
	return stuo
}

// ClearDescription clears the value of the "description" field.
func (stuo *ShipmentTypeUpdateOne) ClearDescription() *ShipmentTypeUpdateOne {
	stuo.mutation.ClearDescription()
	return stuo
}

// SetParentID sets the "parent" edge to the ShipmentType entity by ID.
func (stuo *ShipmentTypeUpdateOne) SetParentID(id int) *ShipmentTypeUpdateOne {
	stuo.mutation.SetParentID(id)
	return stuo
}

// SetNillableParentID sets the "parent" edge to the ShipmentType entity by ID if the given value is not nil.
func (stuo *ShipmentTypeUpdateOne) SetNillableParentID(id *int) *ShipmentTypeUpdateOne {
	if id != nil {
		stuo = stuo.SetParentID(*id)
	}
	return stuo
}

// SetParent sets the "parent" edge to the ShipmentType entity.
func (stuo *ShipmentTypeUpdateOne) SetParent(s *ShipmentType) *ShipmentTypeUpdateOne {
	return stuo.SetParentID(s.ID)
}

// AddChildIDs adds the "children" edge to the ShipmentType entity by IDs.
func (stuo *ShipmentTypeUpdateOne) AddChildIDs(ids ...int) *ShipmentTypeUpdateOne {
	stuo.mutation.AddChildIDs(ids...)
	return stuo
}

// AddChildren adds the "children" edges to the ShipmentType entity.
func (stuo *ShipmentTypeUpdateOne) AddChildren(s ...*ShipmentType) *ShipmentTypeUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return stuo.AddChildIDs(ids...)
}

// AddChildShipmentTypeIDs adds the "child_shipment_types" edge to the ShipmentType entity by IDs.
func (stuo *ShipmentTypeUpdateOne) AddChildShipmentTypeIDs(ids ...int) *ShipmentTypeUpdateOne {
	stuo.mutation.AddChildShipmentTypeIDs(ids...)
	return stuo
}

// AddChildShipmentTypes adds the "child_shipment_types" edges to the ShipmentType entity.
func (stuo *ShipmentTypeUpdateOne) AddChildShipmentTypes(s ...*ShipmentType) *ShipmentTypeUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return stuo.AddChildShipmentTypeIDs(ids...)
}

// Mutation returns the ShipmentTypeMutation object of the builder.
func (stuo *ShipmentTypeUpdateOne) Mutation() *ShipmentTypeMutation {
	return stuo.mutation
}

// ClearParent clears the "parent" edge to the ShipmentType entity.
func (stuo *ShipmentTypeUpdateOne) ClearParent() *ShipmentTypeUpdateOne {
	stuo.mutation.ClearParent()
	return stuo
}

// ClearChildren clears all "children" edges to the ShipmentType entity.
func (stuo *ShipmentTypeUpdateOne) ClearChildren() *ShipmentTypeUpdateOne {
	stuo.mutation.ClearChildren()
	return stuo
}

// RemoveChildIDs removes the "children" edge to ShipmentType entities by IDs.
func (stuo *ShipmentTypeUpdateOne) RemoveChildIDs(ids ...int) *ShipmentTypeUpdateOne {
	stuo.mutation.RemoveChildIDs(ids...)
	return stuo
}

// RemoveChildren removes "children" edges to ShipmentType entities.
func (stuo *ShipmentTypeUpdateOne) RemoveChildren(s ...*ShipmentType) *ShipmentTypeUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return stuo.RemoveChildIDs(ids...)
}

// ClearChildShipmentTypes clears all "child_shipment_types" edges to the ShipmentType entity.
func (stuo *ShipmentTypeUpdateOne) ClearChildShipmentTypes() *ShipmentTypeUpdateOne {
	stuo.mutation.ClearChildShipmentTypes()
	return stuo
}

// RemoveChildShipmentTypeIDs removes the "child_shipment_types" edge to ShipmentType entities by IDs.
func (stuo *ShipmentTypeUpdateOne) RemoveChildShipmentTypeIDs(ids ...int) *ShipmentTypeUpdateOne {
	stuo.mutation.RemoveChildShipmentTypeIDs(ids...)
	return stuo
}

// RemoveChildShipmentTypes removes "child_shipment_types" edges to ShipmentType entities.
func (stuo *ShipmentTypeUpdateOne) RemoveChildShipmentTypes(s ...*ShipmentType) *ShipmentTypeUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return stuo.RemoveChildShipmentTypeIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (stuo *ShipmentTypeUpdateOne) Select(field string, fields ...string) *ShipmentTypeUpdateOne {
	stuo.fields = append([]string{field}, fields...)
	return stuo
}

// Save executes the query and returns the updated ShipmentType entity.
func (stuo *ShipmentTypeUpdateOne) Save(ctx context.Context) (*ShipmentType, error) {
	var (
		err  error
		node *ShipmentType
	)
	stuo.defaults()
	if len(stuo.hooks) == 0 {
		if err = stuo.check(); err != nil {
			return nil, err
		}
		node, err = stuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ShipmentTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = stuo.check(); err != nil {
				return nil, err
			}
			stuo.mutation = mutation
			node, err = stuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(stuo.hooks) - 1; i >= 0; i-- {
			mut = stuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, stuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (stuo *ShipmentTypeUpdateOne) SaveX(ctx context.Context) *ShipmentType {
	node, err := stuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (stuo *ShipmentTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := stuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stuo *ShipmentTypeUpdateOne) ExecX(ctx context.Context) {
	if err := stuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (stuo *ShipmentTypeUpdateOne) defaults() {
	if _, ok := stuo.mutation.UpdateTime(); !ok {
		v := shipmenttype.UpdateDefaultUpdateTime()
		stuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (stuo *ShipmentTypeUpdateOne) check() error {
	if v, ok := stuo.mutation.HasTable(); ok {
		if err := shipmenttype.HasTableValidator(v); err != nil {
			return &ValidationError{Name: "has_table", err: fmt.Errorf("ent: validator failed for field \"has_table\": %w", err)}
		}
	}
	return nil
}

func (stuo *ShipmentTypeUpdateOne) sqlSave(ctx context.Context) (_node *ShipmentType, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   shipmenttype.Table,
			Columns: shipmenttype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: shipmenttype.FieldID,
			},
		},
	}
	id, ok := stuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ShipmentType.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := stuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, shipmenttype.FieldID)
		for _, f := range fields {
			if !shipmenttype.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != shipmenttype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := stuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := stuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: shipmenttype.FieldUpdateTime,
		})
	}
	if value, ok := stuo.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmenttype.FieldStringRef,
		})
	}
	if stuo.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmenttype.FieldStringRef,
		})
	}
	if value, ok := stuo.mutation.HasTable(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: shipmenttype.FieldHasTable,
		})
	}
	if stuo.mutation.HasTableCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: shipmenttype.FieldHasTable,
		})
	}
	if value, ok := stuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmenttype.FieldDescription,
		})
	}
	if stuo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmenttype.FieldDescription,
		})
	}
	if stuo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shipmenttype.ParentTable,
			Columns: []string{shipmenttype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipmenttype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stuo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shipmenttype.ParentTable,
			Columns: []string{shipmenttype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipmenttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if stuo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shipmenttype.ChildrenTable,
			Columns: []string{shipmenttype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipmenttype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stuo.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !stuo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shipmenttype.ChildrenTable,
			Columns: []string{shipmenttype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipmenttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stuo.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shipmenttype.ChildrenTable,
			Columns: []string{shipmenttype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipmenttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if stuo.mutation.ChildShipmentTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   shipmenttype.ChildShipmentTypesTable,
			Columns: shipmenttype.ChildShipmentTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipmenttype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stuo.mutation.RemovedChildShipmentTypesIDs(); len(nodes) > 0 && !stuo.mutation.ChildShipmentTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   shipmenttype.ChildShipmentTypesTable,
			Columns: shipmenttype.ChildShipmentTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipmenttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stuo.mutation.ChildShipmentTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   shipmenttype.ChildShipmentTypesTable,
			Columns: shipmenttype.ChildShipmentTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipmenttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ShipmentType{config: stuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, stuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shipmenttype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
