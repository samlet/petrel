// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/statusitem"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/statustype"
)

// StatusItem is the model entity for the StatusItem schema.
type StatusItem struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// StringRef holds the value of the "string_ref" field.
	StringRef string `json:"string_ref,omitempty"`
	// StatusCode holds the value of the "status_code" field.
	StatusCode string `json:"status_code,omitempty"`
	// SequenceID holds the value of the "sequence_id" field.
	SequenceID int `json:"sequence_id,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the StatusItemQuery when eager-loading is set.
	Edges                    StatusItemEdges `json:"edges"`
	status_type_status_items *int
}

// StatusItemEdges holds the relations/edges for other nodes in the graph.
type StatusItemEdges struct {
	// StatusType holds the value of the status_type edge.
	StatusType *StatusType `json:"status_type,omitempty"`
	// OrderHeaders holds the value of the order_headers edge.
	OrderHeaders []*OrderHeader `json:"order_headers,omitempty"`
	// SyncOrderHeaders holds the value of the sync_order_headers edge.
	SyncOrderHeaders []*OrderHeader `json:"sync_order_headers,omitempty"`
	// OrderItems holds the value of the order_items edge.
	OrderItems []*OrderItem `json:"order_items,omitempty"`
	// SyncOrderItems holds the value of the sync_order_items edge.
	SyncOrderItems []*OrderItem `json:"sync_order_items,omitempty"`
	// OrderPaymentPreferences holds the value of the order_payment_preferences edge.
	OrderPaymentPreferences []*OrderPaymentPreference `json:"order_payment_preferences,omitempty"`
	// OrderStatuses holds the value of the order_statuses edge.
	OrderStatuses []*OrderStatus `json:"order_statuses,omitempty"`
	// ProductReviews holds the value of the product_reviews edge.
	ProductReviews []*ProductReview `json:"product_reviews,omitempty"`
	// HeaderApprovedProductStores holds the value of the header_approved_product_stores edge.
	HeaderApprovedProductStores []*ProductStore `json:"header_approved_product_stores,omitempty"`
	// ItemApprovedProductStores holds the value of the item_approved_product_stores edge.
	ItemApprovedProductStores []*ProductStore `json:"item_approved_product_stores,omitempty"`
	// DigitalItemApprovedProductStores holds the value of the digital_item_approved_product_stores edge.
	DigitalItemApprovedProductStores []*ProductStore `json:"digital_item_approved_product_stores,omitempty"`
	// HeaderDeclinedProductStores holds the value of the header_declined_product_stores edge.
	HeaderDeclinedProductStores []*ProductStore `json:"header_declined_product_stores,omitempty"`
	// ItemDeclinedProductStores holds the value of the item_declined_product_stores edge.
	ItemDeclinedProductStores []*ProductStore `json:"item_declined_product_stores,omitempty"`
	// HeaderCancelProductStores holds the value of the header_cancel_product_stores edge.
	HeaderCancelProductStores []*ProductStore `json:"header_cancel_product_stores,omitempty"`
	// ItemCancelProductStores holds the value of the item_cancel_product_stores edge.
	ItemCancelProductStores []*ProductStore `json:"item_cancel_product_stores,omitempty"`
	// MainStatusValidChanges holds the value of the main_status_valid_changes edge.
	MainStatusValidChanges []*StatusValidChange `json:"main_status_valid_changes,omitempty"`
	// ToStatusValidChanges holds the value of the to_status_valid_changes edge.
	ToStatusValidChanges []*StatusValidChange `json:"to_status_valid_changes,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [17]bool
}

// StatusTypeOrErr returns the StatusType value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StatusItemEdges) StatusTypeOrErr() (*StatusType, error) {
	if e.loadedTypes[0] {
		if e.StatusType == nil {
			// The edge status_type was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: statustype.Label}
		}
		return e.StatusType, nil
	}
	return nil, &NotLoadedError{edge: "status_type"}
}

// OrderHeadersOrErr returns the OrderHeaders value or an error if the edge
// was not loaded in eager-loading.
func (e StatusItemEdges) OrderHeadersOrErr() ([]*OrderHeader, error) {
	if e.loadedTypes[1] {
		return e.OrderHeaders, nil
	}
	return nil, &NotLoadedError{edge: "order_headers"}
}

// SyncOrderHeadersOrErr returns the SyncOrderHeaders value or an error if the edge
// was not loaded in eager-loading.
func (e StatusItemEdges) SyncOrderHeadersOrErr() ([]*OrderHeader, error) {
	if e.loadedTypes[2] {
		return e.SyncOrderHeaders, nil
	}
	return nil, &NotLoadedError{edge: "sync_order_headers"}
}

// OrderItemsOrErr returns the OrderItems value or an error if the edge
// was not loaded in eager-loading.
func (e StatusItemEdges) OrderItemsOrErr() ([]*OrderItem, error) {
	if e.loadedTypes[3] {
		return e.OrderItems, nil
	}
	return nil, &NotLoadedError{edge: "order_items"}
}

// SyncOrderItemsOrErr returns the SyncOrderItems value or an error if the edge
// was not loaded in eager-loading.
func (e StatusItemEdges) SyncOrderItemsOrErr() ([]*OrderItem, error) {
	if e.loadedTypes[4] {
		return e.SyncOrderItems, nil
	}
	return nil, &NotLoadedError{edge: "sync_order_items"}
}

// OrderPaymentPreferencesOrErr returns the OrderPaymentPreferences value or an error if the edge
// was not loaded in eager-loading.
func (e StatusItemEdges) OrderPaymentPreferencesOrErr() ([]*OrderPaymentPreference, error) {
	if e.loadedTypes[5] {
		return e.OrderPaymentPreferences, nil
	}
	return nil, &NotLoadedError{edge: "order_payment_preferences"}
}

// OrderStatusesOrErr returns the OrderStatuses value or an error if the edge
// was not loaded in eager-loading.
func (e StatusItemEdges) OrderStatusesOrErr() ([]*OrderStatus, error) {
	if e.loadedTypes[6] {
		return e.OrderStatuses, nil
	}
	return nil, &NotLoadedError{edge: "order_statuses"}
}

// ProductReviewsOrErr returns the ProductReviews value or an error if the edge
// was not loaded in eager-loading.
func (e StatusItemEdges) ProductReviewsOrErr() ([]*ProductReview, error) {
	if e.loadedTypes[7] {
		return e.ProductReviews, nil
	}
	return nil, &NotLoadedError{edge: "product_reviews"}
}

// HeaderApprovedProductStoresOrErr returns the HeaderApprovedProductStores value or an error if the edge
// was not loaded in eager-loading.
func (e StatusItemEdges) HeaderApprovedProductStoresOrErr() ([]*ProductStore, error) {
	if e.loadedTypes[8] {
		return e.HeaderApprovedProductStores, nil
	}
	return nil, &NotLoadedError{edge: "header_approved_product_stores"}
}

// ItemApprovedProductStoresOrErr returns the ItemApprovedProductStores value or an error if the edge
// was not loaded in eager-loading.
func (e StatusItemEdges) ItemApprovedProductStoresOrErr() ([]*ProductStore, error) {
	if e.loadedTypes[9] {
		return e.ItemApprovedProductStores, nil
	}
	return nil, &NotLoadedError{edge: "item_approved_product_stores"}
}

// DigitalItemApprovedProductStoresOrErr returns the DigitalItemApprovedProductStores value or an error if the edge
// was not loaded in eager-loading.
func (e StatusItemEdges) DigitalItemApprovedProductStoresOrErr() ([]*ProductStore, error) {
	if e.loadedTypes[10] {
		return e.DigitalItemApprovedProductStores, nil
	}
	return nil, &NotLoadedError{edge: "digital_item_approved_product_stores"}
}

// HeaderDeclinedProductStoresOrErr returns the HeaderDeclinedProductStores value or an error if the edge
// was not loaded in eager-loading.
func (e StatusItemEdges) HeaderDeclinedProductStoresOrErr() ([]*ProductStore, error) {
	if e.loadedTypes[11] {
		return e.HeaderDeclinedProductStores, nil
	}
	return nil, &NotLoadedError{edge: "header_declined_product_stores"}
}

// ItemDeclinedProductStoresOrErr returns the ItemDeclinedProductStores value or an error if the edge
// was not loaded in eager-loading.
func (e StatusItemEdges) ItemDeclinedProductStoresOrErr() ([]*ProductStore, error) {
	if e.loadedTypes[12] {
		return e.ItemDeclinedProductStores, nil
	}
	return nil, &NotLoadedError{edge: "item_declined_product_stores"}
}

// HeaderCancelProductStoresOrErr returns the HeaderCancelProductStores value or an error if the edge
// was not loaded in eager-loading.
func (e StatusItemEdges) HeaderCancelProductStoresOrErr() ([]*ProductStore, error) {
	if e.loadedTypes[13] {
		return e.HeaderCancelProductStores, nil
	}
	return nil, &NotLoadedError{edge: "header_cancel_product_stores"}
}

// ItemCancelProductStoresOrErr returns the ItemCancelProductStores value or an error if the edge
// was not loaded in eager-loading.
func (e StatusItemEdges) ItemCancelProductStoresOrErr() ([]*ProductStore, error) {
	if e.loadedTypes[14] {
		return e.ItemCancelProductStores, nil
	}
	return nil, &NotLoadedError{edge: "item_cancel_product_stores"}
}

// MainStatusValidChangesOrErr returns the MainStatusValidChanges value or an error if the edge
// was not loaded in eager-loading.
func (e StatusItemEdges) MainStatusValidChangesOrErr() ([]*StatusValidChange, error) {
	if e.loadedTypes[15] {
		return e.MainStatusValidChanges, nil
	}
	return nil, &NotLoadedError{edge: "main_status_valid_changes"}
}

// ToStatusValidChangesOrErr returns the ToStatusValidChanges value or an error if the edge
// was not loaded in eager-loading.
func (e StatusItemEdges) ToStatusValidChangesOrErr() ([]*StatusValidChange, error) {
	if e.loadedTypes[16] {
		return e.ToStatusValidChanges, nil
	}
	return nil, &NotLoadedError{edge: "to_status_valid_changes"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*StatusItem) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case statusitem.FieldID, statusitem.FieldSequenceID:
			values[i] = new(sql.NullInt64)
		case statusitem.FieldStringRef, statusitem.FieldStatusCode, statusitem.FieldDescription:
			values[i] = new(sql.NullString)
		case statusitem.FieldCreateTime, statusitem.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case statusitem.ForeignKeys[0]: // status_type_status_items
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type StatusItem", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the StatusItem fields.
func (si *StatusItem) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case statusitem.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			si.ID = int(value.Int64)
		case statusitem.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				si.CreateTime = value.Time
			}
		case statusitem.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				si.UpdateTime = value.Time
			}
		case statusitem.FieldStringRef:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field string_ref", values[i])
			} else if value.Valid {
				si.StringRef = value.String
			}
		case statusitem.FieldStatusCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status_code", values[i])
			} else if value.Valid {
				si.StatusCode = value.String
			}
		case statusitem.FieldSequenceID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sequence_id", values[i])
			} else if value.Valid {
				si.SequenceID = int(value.Int64)
			}
		case statusitem.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				si.Description = value.String
			}
		case statusitem.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field status_type_status_items", value)
			} else if value.Valid {
				si.status_type_status_items = new(int)
				*si.status_type_status_items = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryStatusType queries the "status_type" edge of the StatusItem entity.
func (si *StatusItem) QueryStatusType() *StatusTypeQuery {
	return (&StatusItemClient{config: si.config}).QueryStatusType(si)
}

// QueryOrderHeaders queries the "order_headers" edge of the StatusItem entity.
func (si *StatusItem) QueryOrderHeaders() *OrderHeaderQuery {
	return (&StatusItemClient{config: si.config}).QueryOrderHeaders(si)
}

// QuerySyncOrderHeaders queries the "sync_order_headers" edge of the StatusItem entity.
func (si *StatusItem) QuerySyncOrderHeaders() *OrderHeaderQuery {
	return (&StatusItemClient{config: si.config}).QuerySyncOrderHeaders(si)
}

// QueryOrderItems queries the "order_items" edge of the StatusItem entity.
func (si *StatusItem) QueryOrderItems() *OrderItemQuery {
	return (&StatusItemClient{config: si.config}).QueryOrderItems(si)
}

// QuerySyncOrderItems queries the "sync_order_items" edge of the StatusItem entity.
func (si *StatusItem) QuerySyncOrderItems() *OrderItemQuery {
	return (&StatusItemClient{config: si.config}).QuerySyncOrderItems(si)
}

// QueryOrderPaymentPreferences queries the "order_payment_preferences" edge of the StatusItem entity.
func (si *StatusItem) QueryOrderPaymentPreferences() *OrderPaymentPreferenceQuery {
	return (&StatusItemClient{config: si.config}).QueryOrderPaymentPreferences(si)
}

// QueryOrderStatuses queries the "order_statuses" edge of the StatusItem entity.
func (si *StatusItem) QueryOrderStatuses() *OrderStatusQuery {
	return (&StatusItemClient{config: si.config}).QueryOrderStatuses(si)
}

// QueryProductReviews queries the "product_reviews" edge of the StatusItem entity.
func (si *StatusItem) QueryProductReviews() *ProductReviewQuery {
	return (&StatusItemClient{config: si.config}).QueryProductReviews(si)
}

// QueryHeaderApprovedProductStores queries the "header_approved_product_stores" edge of the StatusItem entity.
func (si *StatusItem) QueryHeaderApprovedProductStores() *ProductStoreQuery {
	return (&StatusItemClient{config: si.config}).QueryHeaderApprovedProductStores(si)
}

// QueryItemApprovedProductStores queries the "item_approved_product_stores" edge of the StatusItem entity.
func (si *StatusItem) QueryItemApprovedProductStores() *ProductStoreQuery {
	return (&StatusItemClient{config: si.config}).QueryItemApprovedProductStores(si)
}

// QueryDigitalItemApprovedProductStores queries the "digital_item_approved_product_stores" edge of the StatusItem entity.
func (si *StatusItem) QueryDigitalItemApprovedProductStores() *ProductStoreQuery {
	return (&StatusItemClient{config: si.config}).QueryDigitalItemApprovedProductStores(si)
}

// QueryHeaderDeclinedProductStores queries the "header_declined_product_stores" edge of the StatusItem entity.
func (si *StatusItem) QueryHeaderDeclinedProductStores() *ProductStoreQuery {
	return (&StatusItemClient{config: si.config}).QueryHeaderDeclinedProductStores(si)
}

// QueryItemDeclinedProductStores queries the "item_declined_product_stores" edge of the StatusItem entity.
func (si *StatusItem) QueryItemDeclinedProductStores() *ProductStoreQuery {
	return (&StatusItemClient{config: si.config}).QueryItemDeclinedProductStores(si)
}

// QueryHeaderCancelProductStores queries the "header_cancel_product_stores" edge of the StatusItem entity.
func (si *StatusItem) QueryHeaderCancelProductStores() *ProductStoreQuery {
	return (&StatusItemClient{config: si.config}).QueryHeaderCancelProductStores(si)
}

// QueryItemCancelProductStores queries the "item_cancel_product_stores" edge of the StatusItem entity.
func (si *StatusItem) QueryItemCancelProductStores() *ProductStoreQuery {
	return (&StatusItemClient{config: si.config}).QueryItemCancelProductStores(si)
}

// QueryMainStatusValidChanges queries the "main_status_valid_changes" edge of the StatusItem entity.
func (si *StatusItem) QueryMainStatusValidChanges() *StatusValidChangeQuery {
	return (&StatusItemClient{config: si.config}).QueryMainStatusValidChanges(si)
}

// QueryToStatusValidChanges queries the "to_status_valid_changes" edge of the StatusItem entity.
func (si *StatusItem) QueryToStatusValidChanges() *StatusValidChangeQuery {
	return (&StatusItemClient{config: si.config}).QueryToStatusValidChanges(si)
}

// Update returns a builder for updating this StatusItem.
// Note that you need to call StatusItem.Unwrap() before calling this method if this StatusItem
// was returned from a transaction, and the transaction was committed or rolled back.
func (si *StatusItem) Update() *StatusItemUpdateOne {
	return (&StatusItemClient{config: si.config}).UpdateOne(si)
}

// Unwrap unwraps the StatusItem entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (si *StatusItem) Unwrap() *StatusItem {
	tx, ok := si.config.driver.(*txDriver)
	if !ok {
		panic("ent: StatusItem is not a transactional entity")
	}
	si.config.driver = tx.drv
	return si
}

// String implements the fmt.Stringer.
func (si *StatusItem) String() string {
	var builder strings.Builder
	builder.WriteString("StatusItem(")
	builder.WriteString(fmt.Sprintf("id=%v", si.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(si.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(si.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", string_ref=")
	builder.WriteString(si.StringRef)
	builder.WriteString(", status_code=")
	builder.WriteString(si.StatusCode)
	builder.WriteString(", sequence_id=")
	builder.WriteString(fmt.Sprintf("%v", si.SequenceID))
	builder.WriteString(", description=")
	builder.WriteString(si.Description)
	builder.WriteByte(')')
	return builder.String()
}

// StatusItems is a parsable slice of StatusItem.
type StatusItems []*StatusItem

func (si StatusItems) config(cfg config) {
	for _i := range si {
		si[_i].config = cfg
	}
}
