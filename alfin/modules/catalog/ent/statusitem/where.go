// Code generated by entc, DO NOT EDIT.

package statusitem

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// StringRef applies equality check predicate on the "string_ref" field. It's identical to StringRefEQ.
func StringRef(v string) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStringRef), v))
	})
}

// StatusCode applies equality check predicate on the "status_code" field. It's identical to StatusCodeEQ.
func StatusCode(v string) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatusCode), v))
	})
}

// SequenceID applies equality check predicate on the "sequence_id" field. It's identical to SequenceIDEQ.
func SequenceID(v int) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSequenceID), v))
	})
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.StatusItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StatusItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.StatusItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StatusItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), v))
	})
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.StatusItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StatusItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.StatusItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StatusItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateTime), v))
	})
}

// StringRefEQ applies the EQ predicate on the "string_ref" field.
func StringRefEQ(v string) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStringRef), v))
	})
}

// StringRefNEQ applies the NEQ predicate on the "string_ref" field.
func StringRefNEQ(v string) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStringRef), v))
	})
}

// StringRefIn applies the In predicate on the "string_ref" field.
func StringRefIn(vs ...string) predicate.StatusItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StatusItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStringRef), v...))
	})
}

// StringRefNotIn applies the NotIn predicate on the "string_ref" field.
func StringRefNotIn(vs ...string) predicate.StatusItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StatusItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStringRef), v...))
	})
}

// StringRefGT applies the GT predicate on the "string_ref" field.
func StringRefGT(v string) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStringRef), v))
	})
}

// StringRefGTE applies the GTE predicate on the "string_ref" field.
func StringRefGTE(v string) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStringRef), v))
	})
}

// StringRefLT applies the LT predicate on the "string_ref" field.
func StringRefLT(v string) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStringRef), v))
	})
}

// StringRefLTE applies the LTE predicate on the "string_ref" field.
func StringRefLTE(v string) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStringRef), v))
	})
}

// StringRefContains applies the Contains predicate on the "string_ref" field.
func StringRefContains(v string) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStringRef), v))
	})
}

// StringRefHasPrefix applies the HasPrefix predicate on the "string_ref" field.
func StringRefHasPrefix(v string) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStringRef), v))
	})
}

// StringRefHasSuffix applies the HasSuffix predicate on the "string_ref" field.
func StringRefHasSuffix(v string) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStringRef), v))
	})
}

// StringRefIsNil applies the IsNil predicate on the "string_ref" field.
func StringRefIsNil() predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStringRef)))
	})
}

// StringRefNotNil applies the NotNil predicate on the "string_ref" field.
func StringRefNotNil() predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStringRef)))
	})
}

// StringRefEqualFold applies the EqualFold predicate on the "string_ref" field.
func StringRefEqualFold(v string) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStringRef), v))
	})
}

// StringRefContainsFold applies the ContainsFold predicate on the "string_ref" field.
func StringRefContainsFold(v string) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStringRef), v))
	})
}

// StatusCodeEQ applies the EQ predicate on the "status_code" field.
func StatusCodeEQ(v string) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatusCode), v))
	})
}

// StatusCodeNEQ applies the NEQ predicate on the "status_code" field.
func StatusCodeNEQ(v string) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatusCode), v))
	})
}

// StatusCodeIn applies the In predicate on the "status_code" field.
func StatusCodeIn(vs ...string) predicate.StatusItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StatusItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStatusCode), v...))
	})
}

// StatusCodeNotIn applies the NotIn predicate on the "status_code" field.
func StatusCodeNotIn(vs ...string) predicate.StatusItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StatusItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStatusCode), v...))
	})
}

// StatusCodeGT applies the GT predicate on the "status_code" field.
func StatusCodeGT(v string) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatusCode), v))
	})
}

// StatusCodeGTE applies the GTE predicate on the "status_code" field.
func StatusCodeGTE(v string) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatusCode), v))
	})
}

// StatusCodeLT applies the LT predicate on the "status_code" field.
func StatusCodeLT(v string) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatusCode), v))
	})
}

// StatusCodeLTE applies the LTE predicate on the "status_code" field.
func StatusCodeLTE(v string) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatusCode), v))
	})
}

// StatusCodeContains applies the Contains predicate on the "status_code" field.
func StatusCodeContains(v string) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStatusCode), v))
	})
}

// StatusCodeHasPrefix applies the HasPrefix predicate on the "status_code" field.
func StatusCodeHasPrefix(v string) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStatusCode), v))
	})
}

// StatusCodeHasSuffix applies the HasSuffix predicate on the "status_code" field.
func StatusCodeHasSuffix(v string) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStatusCode), v))
	})
}

// StatusCodeIsNil applies the IsNil predicate on the "status_code" field.
func StatusCodeIsNil() predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStatusCode)))
	})
}

// StatusCodeNotNil applies the NotNil predicate on the "status_code" field.
func StatusCodeNotNil() predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStatusCode)))
	})
}

// StatusCodeEqualFold applies the EqualFold predicate on the "status_code" field.
func StatusCodeEqualFold(v string) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStatusCode), v))
	})
}

// StatusCodeContainsFold applies the ContainsFold predicate on the "status_code" field.
func StatusCodeContainsFold(v string) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStatusCode), v))
	})
}

// SequenceIDEQ applies the EQ predicate on the "sequence_id" field.
func SequenceIDEQ(v int) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSequenceID), v))
	})
}

// SequenceIDNEQ applies the NEQ predicate on the "sequence_id" field.
func SequenceIDNEQ(v int) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSequenceID), v))
	})
}

// SequenceIDIn applies the In predicate on the "sequence_id" field.
func SequenceIDIn(vs ...int) predicate.StatusItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StatusItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSequenceID), v...))
	})
}

// SequenceIDNotIn applies the NotIn predicate on the "sequence_id" field.
func SequenceIDNotIn(vs ...int) predicate.StatusItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StatusItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSequenceID), v...))
	})
}

// SequenceIDGT applies the GT predicate on the "sequence_id" field.
func SequenceIDGT(v int) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSequenceID), v))
	})
}

// SequenceIDGTE applies the GTE predicate on the "sequence_id" field.
func SequenceIDGTE(v int) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSequenceID), v))
	})
}

// SequenceIDLT applies the LT predicate on the "sequence_id" field.
func SequenceIDLT(v int) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSequenceID), v))
	})
}

// SequenceIDLTE applies the LTE predicate on the "sequence_id" field.
func SequenceIDLTE(v int) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSequenceID), v))
	})
}

// SequenceIDIsNil applies the IsNil predicate on the "sequence_id" field.
func SequenceIDIsNil() predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSequenceID)))
	})
}

// SequenceIDNotNil applies the NotNil predicate on the "sequence_id" field.
func SequenceIDNotNil() predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSequenceID)))
	})
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDescription), v))
	})
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.StatusItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StatusItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDescription), v...))
	})
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.StatusItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StatusItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDescription), v...))
	})
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDescription), v))
	})
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDescription), v))
	})
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDescription), v))
	})
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDescription), v))
	})
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDescription), v))
	})
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDescription), v))
	})
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDescription), v))
	})
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDescription)))
	})
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDescription)))
	})
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDescription), v))
	})
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDescription), v))
	})
}

// HasStatusType applies the HasEdge predicate on the "status_type" edge.
func HasStatusType() predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StatusTypeTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, StatusTypeTable, StatusTypeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStatusTypeWith applies the HasEdge predicate on the "status_type" edge with a given conditions (other predicates).
func HasStatusTypeWith(preds ...predicate.StatusType) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StatusTypeInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, StatusTypeTable, StatusTypeColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrderHeaders applies the HasEdge predicate on the "order_headers" edge.
func HasOrderHeaders() predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderHeadersTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrderHeadersTable, OrderHeadersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderHeadersWith applies the HasEdge predicate on the "order_headers" edge with a given conditions (other predicates).
func HasOrderHeadersWith(preds ...predicate.OrderHeader) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderHeadersInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrderHeadersTable, OrderHeadersColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSyncOrderHeaders applies the HasEdge predicate on the "sync_order_headers" edge.
func HasSyncOrderHeaders() predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SyncOrderHeadersTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SyncOrderHeadersTable, SyncOrderHeadersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSyncOrderHeadersWith applies the HasEdge predicate on the "sync_order_headers" edge with a given conditions (other predicates).
func HasSyncOrderHeadersWith(preds ...predicate.OrderHeader) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SyncOrderHeadersInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SyncOrderHeadersTable, SyncOrderHeadersColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrderItems applies the HasEdge predicate on the "order_items" edge.
func HasOrderItems() predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderItemsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrderItemsTable, OrderItemsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderItemsWith applies the HasEdge predicate on the "order_items" edge with a given conditions (other predicates).
func HasOrderItemsWith(preds ...predicate.OrderItem) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderItemsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrderItemsTable, OrderItemsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSyncOrderItems applies the HasEdge predicate on the "sync_order_items" edge.
func HasSyncOrderItems() predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SyncOrderItemsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SyncOrderItemsTable, SyncOrderItemsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSyncOrderItemsWith applies the HasEdge predicate on the "sync_order_items" edge with a given conditions (other predicates).
func HasSyncOrderItemsWith(preds ...predicate.OrderItem) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SyncOrderItemsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SyncOrderItemsTable, SyncOrderItemsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrderPaymentPreferences applies the HasEdge predicate on the "order_payment_preferences" edge.
func HasOrderPaymentPreferences() predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderPaymentPreferencesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrderPaymentPreferencesTable, OrderPaymentPreferencesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderPaymentPreferencesWith applies the HasEdge predicate on the "order_payment_preferences" edge with a given conditions (other predicates).
func HasOrderPaymentPreferencesWith(preds ...predicate.OrderPaymentPreference) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderPaymentPreferencesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrderPaymentPreferencesTable, OrderPaymentPreferencesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrderStatuses applies the HasEdge predicate on the "order_statuses" edge.
func HasOrderStatuses() predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderStatusesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrderStatusesTable, OrderStatusesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderStatusesWith applies the HasEdge predicate on the "order_statuses" edge with a given conditions (other predicates).
func HasOrderStatusesWith(preds ...predicate.OrderStatus) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderStatusesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrderStatusesTable, OrderStatusesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProductReviews applies the HasEdge predicate on the "product_reviews" edge.
func HasProductReviews() predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProductReviewsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ProductReviewsTable, ProductReviewsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProductReviewsWith applies the HasEdge predicate on the "product_reviews" edge with a given conditions (other predicates).
func HasProductReviewsWith(preds ...predicate.ProductReview) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProductReviewsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ProductReviewsTable, ProductReviewsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasHeaderApprovedProductStores applies the HasEdge predicate on the "header_approved_product_stores" edge.
func HasHeaderApprovedProductStores() predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(HeaderApprovedProductStoresTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, HeaderApprovedProductStoresTable, HeaderApprovedProductStoresColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHeaderApprovedProductStoresWith applies the HasEdge predicate on the "header_approved_product_stores" edge with a given conditions (other predicates).
func HasHeaderApprovedProductStoresWith(preds ...predicate.ProductStore) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(HeaderApprovedProductStoresInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, HeaderApprovedProductStoresTable, HeaderApprovedProductStoresColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasItemApprovedProductStores applies the HasEdge predicate on the "item_approved_product_stores" edge.
func HasItemApprovedProductStores() predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ItemApprovedProductStoresTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ItemApprovedProductStoresTable, ItemApprovedProductStoresColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasItemApprovedProductStoresWith applies the HasEdge predicate on the "item_approved_product_stores" edge with a given conditions (other predicates).
func HasItemApprovedProductStoresWith(preds ...predicate.ProductStore) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ItemApprovedProductStoresInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ItemApprovedProductStoresTable, ItemApprovedProductStoresColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDigitalItemApprovedProductStores applies the HasEdge predicate on the "digital_item_approved_product_stores" edge.
func HasDigitalItemApprovedProductStores() predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DigitalItemApprovedProductStoresTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DigitalItemApprovedProductStoresTable, DigitalItemApprovedProductStoresColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDigitalItemApprovedProductStoresWith applies the HasEdge predicate on the "digital_item_approved_product_stores" edge with a given conditions (other predicates).
func HasDigitalItemApprovedProductStoresWith(preds ...predicate.ProductStore) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DigitalItemApprovedProductStoresInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DigitalItemApprovedProductStoresTable, DigitalItemApprovedProductStoresColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasHeaderDeclinedProductStores applies the HasEdge predicate on the "header_declined_product_stores" edge.
func HasHeaderDeclinedProductStores() predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(HeaderDeclinedProductStoresTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, HeaderDeclinedProductStoresTable, HeaderDeclinedProductStoresColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHeaderDeclinedProductStoresWith applies the HasEdge predicate on the "header_declined_product_stores" edge with a given conditions (other predicates).
func HasHeaderDeclinedProductStoresWith(preds ...predicate.ProductStore) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(HeaderDeclinedProductStoresInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, HeaderDeclinedProductStoresTable, HeaderDeclinedProductStoresColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasItemDeclinedProductStores applies the HasEdge predicate on the "item_declined_product_stores" edge.
func HasItemDeclinedProductStores() predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ItemDeclinedProductStoresTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ItemDeclinedProductStoresTable, ItemDeclinedProductStoresColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasItemDeclinedProductStoresWith applies the HasEdge predicate on the "item_declined_product_stores" edge with a given conditions (other predicates).
func HasItemDeclinedProductStoresWith(preds ...predicate.ProductStore) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ItemDeclinedProductStoresInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ItemDeclinedProductStoresTable, ItemDeclinedProductStoresColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasHeaderCancelProductStores applies the HasEdge predicate on the "header_cancel_product_stores" edge.
func HasHeaderCancelProductStores() predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(HeaderCancelProductStoresTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, HeaderCancelProductStoresTable, HeaderCancelProductStoresColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHeaderCancelProductStoresWith applies the HasEdge predicate on the "header_cancel_product_stores" edge with a given conditions (other predicates).
func HasHeaderCancelProductStoresWith(preds ...predicate.ProductStore) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(HeaderCancelProductStoresInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, HeaderCancelProductStoresTable, HeaderCancelProductStoresColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasItemCancelProductStores applies the HasEdge predicate on the "item_cancel_product_stores" edge.
func HasItemCancelProductStores() predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ItemCancelProductStoresTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ItemCancelProductStoresTable, ItemCancelProductStoresColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasItemCancelProductStoresWith applies the HasEdge predicate on the "item_cancel_product_stores" edge with a given conditions (other predicates).
func HasItemCancelProductStoresWith(preds ...predicate.ProductStore) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ItemCancelProductStoresInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ItemCancelProductStoresTable, ItemCancelProductStoresColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMainStatusValidChanges applies the HasEdge predicate on the "main_status_valid_changes" edge.
func HasMainStatusValidChanges() predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MainStatusValidChangesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MainStatusValidChangesTable, MainStatusValidChangesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMainStatusValidChangesWith applies the HasEdge predicate on the "main_status_valid_changes" edge with a given conditions (other predicates).
func HasMainStatusValidChangesWith(preds ...predicate.StatusValidChange) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MainStatusValidChangesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MainStatusValidChangesTable, MainStatusValidChangesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasToStatusValidChanges applies the HasEdge predicate on the "to_status_valid_changes" edge.
func HasToStatusValidChanges() predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ToStatusValidChangesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ToStatusValidChangesTable, ToStatusValidChangesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasToStatusValidChangesWith applies the HasEdge predicate on the "to_status_valid_changes" edge with a given conditions (other predicates).
func HasToStatusValidChangesWith(preds ...predicate.StatusValidChange) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ToStatusValidChangesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ToStatusValidChangesTable, ToStatusValidChangesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.StatusItem) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.StatusItem) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.StatusItem) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		p(s.Not())
	})
}
