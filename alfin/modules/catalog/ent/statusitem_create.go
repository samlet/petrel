// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/orderheader"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/orderitem"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/orderpaymentpreference"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/orderstatus"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productreview"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productstore"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/statusitem"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/statustype"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/statusvalidchange"
)

// StatusItemCreate is the builder for creating a StatusItem entity.
type StatusItemCreate struct {
	config
	mutation *StatusItemMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (sic *StatusItemCreate) SetCreateTime(t time.Time) *StatusItemCreate {
	sic.mutation.SetCreateTime(t)
	return sic
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (sic *StatusItemCreate) SetNillableCreateTime(t *time.Time) *StatusItemCreate {
	if t != nil {
		sic.SetCreateTime(*t)
	}
	return sic
}

// SetUpdateTime sets the "update_time" field.
func (sic *StatusItemCreate) SetUpdateTime(t time.Time) *StatusItemCreate {
	sic.mutation.SetUpdateTime(t)
	return sic
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (sic *StatusItemCreate) SetNillableUpdateTime(t *time.Time) *StatusItemCreate {
	if t != nil {
		sic.SetUpdateTime(*t)
	}
	return sic
}

// SetStringRef sets the "string_ref" field.
func (sic *StatusItemCreate) SetStringRef(s string) *StatusItemCreate {
	sic.mutation.SetStringRef(s)
	return sic
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (sic *StatusItemCreate) SetNillableStringRef(s *string) *StatusItemCreate {
	if s != nil {
		sic.SetStringRef(*s)
	}
	return sic
}

// SetStatusCode sets the "status_code" field.
func (sic *StatusItemCreate) SetStatusCode(s string) *StatusItemCreate {
	sic.mutation.SetStatusCode(s)
	return sic
}

// SetNillableStatusCode sets the "status_code" field if the given value is not nil.
func (sic *StatusItemCreate) SetNillableStatusCode(s *string) *StatusItemCreate {
	if s != nil {
		sic.SetStatusCode(*s)
	}
	return sic
}

// SetSequenceID sets the "sequence_id" field.
func (sic *StatusItemCreate) SetSequenceID(i int) *StatusItemCreate {
	sic.mutation.SetSequenceID(i)
	return sic
}

// SetNillableSequenceID sets the "sequence_id" field if the given value is not nil.
func (sic *StatusItemCreate) SetNillableSequenceID(i *int) *StatusItemCreate {
	if i != nil {
		sic.SetSequenceID(*i)
	}
	return sic
}

// SetDescription sets the "description" field.
func (sic *StatusItemCreate) SetDescription(s string) *StatusItemCreate {
	sic.mutation.SetDescription(s)
	return sic
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (sic *StatusItemCreate) SetNillableDescription(s *string) *StatusItemCreate {
	if s != nil {
		sic.SetDescription(*s)
	}
	return sic
}

// SetStatusTypeID sets the "status_type" edge to the StatusType entity by ID.
func (sic *StatusItemCreate) SetStatusTypeID(id int) *StatusItemCreate {
	sic.mutation.SetStatusTypeID(id)
	return sic
}

// SetNillableStatusTypeID sets the "status_type" edge to the StatusType entity by ID if the given value is not nil.
func (sic *StatusItemCreate) SetNillableStatusTypeID(id *int) *StatusItemCreate {
	if id != nil {
		sic = sic.SetStatusTypeID(*id)
	}
	return sic
}

// SetStatusType sets the "status_type" edge to the StatusType entity.
func (sic *StatusItemCreate) SetStatusType(s *StatusType) *StatusItemCreate {
	return sic.SetStatusTypeID(s.ID)
}

// AddOrderHeaderIDs adds the "order_headers" edge to the OrderHeader entity by IDs.
func (sic *StatusItemCreate) AddOrderHeaderIDs(ids ...int) *StatusItemCreate {
	sic.mutation.AddOrderHeaderIDs(ids...)
	return sic
}

// AddOrderHeaders adds the "order_headers" edges to the OrderHeader entity.
func (sic *StatusItemCreate) AddOrderHeaders(o ...*OrderHeader) *StatusItemCreate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return sic.AddOrderHeaderIDs(ids...)
}

// AddSyncOrderHeaderIDs adds the "sync_order_headers" edge to the OrderHeader entity by IDs.
func (sic *StatusItemCreate) AddSyncOrderHeaderIDs(ids ...int) *StatusItemCreate {
	sic.mutation.AddSyncOrderHeaderIDs(ids...)
	return sic
}

// AddSyncOrderHeaders adds the "sync_order_headers" edges to the OrderHeader entity.
func (sic *StatusItemCreate) AddSyncOrderHeaders(o ...*OrderHeader) *StatusItemCreate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return sic.AddSyncOrderHeaderIDs(ids...)
}

// AddOrderItemIDs adds the "order_items" edge to the OrderItem entity by IDs.
func (sic *StatusItemCreate) AddOrderItemIDs(ids ...int) *StatusItemCreate {
	sic.mutation.AddOrderItemIDs(ids...)
	return sic
}

// AddOrderItems adds the "order_items" edges to the OrderItem entity.
func (sic *StatusItemCreate) AddOrderItems(o ...*OrderItem) *StatusItemCreate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return sic.AddOrderItemIDs(ids...)
}

// AddSyncOrderItemIDs adds the "sync_order_items" edge to the OrderItem entity by IDs.
func (sic *StatusItemCreate) AddSyncOrderItemIDs(ids ...int) *StatusItemCreate {
	sic.mutation.AddSyncOrderItemIDs(ids...)
	return sic
}

// AddSyncOrderItems adds the "sync_order_items" edges to the OrderItem entity.
func (sic *StatusItemCreate) AddSyncOrderItems(o ...*OrderItem) *StatusItemCreate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return sic.AddSyncOrderItemIDs(ids...)
}

// AddOrderPaymentPreferenceIDs adds the "order_payment_preferences" edge to the OrderPaymentPreference entity by IDs.
func (sic *StatusItemCreate) AddOrderPaymentPreferenceIDs(ids ...int) *StatusItemCreate {
	sic.mutation.AddOrderPaymentPreferenceIDs(ids...)
	return sic
}

// AddOrderPaymentPreferences adds the "order_payment_preferences" edges to the OrderPaymentPreference entity.
func (sic *StatusItemCreate) AddOrderPaymentPreferences(o ...*OrderPaymentPreference) *StatusItemCreate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return sic.AddOrderPaymentPreferenceIDs(ids...)
}

// AddOrderStatusIDs adds the "order_statuses" edge to the OrderStatus entity by IDs.
func (sic *StatusItemCreate) AddOrderStatusIDs(ids ...int) *StatusItemCreate {
	sic.mutation.AddOrderStatusIDs(ids...)
	return sic
}

// AddOrderStatuses adds the "order_statuses" edges to the OrderStatus entity.
func (sic *StatusItemCreate) AddOrderStatuses(o ...*OrderStatus) *StatusItemCreate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return sic.AddOrderStatusIDs(ids...)
}

// AddProductReviewIDs adds the "product_reviews" edge to the ProductReview entity by IDs.
func (sic *StatusItemCreate) AddProductReviewIDs(ids ...int) *StatusItemCreate {
	sic.mutation.AddProductReviewIDs(ids...)
	return sic
}

// AddProductReviews adds the "product_reviews" edges to the ProductReview entity.
func (sic *StatusItemCreate) AddProductReviews(p ...*ProductReview) *StatusItemCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return sic.AddProductReviewIDs(ids...)
}

// AddHeaderApprovedProductStoreIDs adds the "header_approved_product_stores" edge to the ProductStore entity by IDs.
func (sic *StatusItemCreate) AddHeaderApprovedProductStoreIDs(ids ...int) *StatusItemCreate {
	sic.mutation.AddHeaderApprovedProductStoreIDs(ids...)
	return sic
}

// AddHeaderApprovedProductStores adds the "header_approved_product_stores" edges to the ProductStore entity.
func (sic *StatusItemCreate) AddHeaderApprovedProductStores(p ...*ProductStore) *StatusItemCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return sic.AddHeaderApprovedProductStoreIDs(ids...)
}

// AddItemApprovedProductStoreIDs adds the "item_approved_product_stores" edge to the ProductStore entity by IDs.
func (sic *StatusItemCreate) AddItemApprovedProductStoreIDs(ids ...int) *StatusItemCreate {
	sic.mutation.AddItemApprovedProductStoreIDs(ids...)
	return sic
}

// AddItemApprovedProductStores adds the "item_approved_product_stores" edges to the ProductStore entity.
func (sic *StatusItemCreate) AddItemApprovedProductStores(p ...*ProductStore) *StatusItemCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return sic.AddItemApprovedProductStoreIDs(ids...)
}

// AddDigitalItemApprovedProductStoreIDs adds the "digital_item_approved_product_stores" edge to the ProductStore entity by IDs.
func (sic *StatusItemCreate) AddDigitalItemApprovedProductStoreIDs(ids ...int) *StatusItemCreate {
	sic.mutation.AddDigitalItemApprovedProductStoreIDs(ids...)
	return sic
}

// AddDigitalItemApprovedProductStores adds the "digital_item_approved_product_stores" edges to the ProductStore entity.
func (sic *StatusItemCreate) AddDigitalItemApprovedProductStores(p ...*ProductStore) *StatusItemCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return sic.AddDigitalItemApprovedProductStoreIDs(ids...)
}

// AddHeaderDeclinedProductStoreIDs adds the "header_declined_product_stores" edge to the ProductStore entity by IDs.
func (sic *StatusItemCreate) AddHeaderDeclinedProductStoreIDs(ids ...int) *StatusItemCreate {
	sic.mutation.AddHeaderDeclinedProductStoreIDs(ids...)
	return sic
}

// AddHeaderDeclinedProductStores adds the "header_declined_product_stores" edges to the ProductStore entity.
func (sic *StatusItemCreate) AddHeaderDeclinedProductStores(p ...*ProductStore) *StatusItemCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return sic.AddHeaderDeclinedProductStoreIDs(ids...)
}

// AddItemDeclinedProductStoreIDs adds the "item_declined_product_stores" edge to the ProductStore entity by IDs.
func (sic *StatusItemCreate) AddItemDeclinedProductStoreIDs(ids ...int) *StatusItemCreate {
	sic.mutation.AddItemDeclinedProductStoreIDs(ids...)
	return sic
}

// AddItemDeclinedProductStores adds the "item_declined_product_stores" edges to the ProductStore entity.
func (sic *StatusItemCreate) AddItemDeclinedProductStores(p ...*ProductStore) *StatusItemCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return sic.AddItemDeclinedProductStoreIDs(ids...)
}

// AddHeaderCancelProductStoreIDs adds the "header_cancel_product_stores" edge to the ProductStore entity by IDs.
func (sic *StatusItemCreate) AddHeaderCancelProductStoreIDs(ids ...int) *StatusItemCreate {
	sic.mutation.AddHeaderCancelProductStoreIDs(ids...)
	return sic
}

// AddHeaderCancelProductStores adds the "header_cancel_product_stores" edges to the ProductStore entity.
func (sic *StatusItemCreate) AddHeaderCancelProductStores(p ...*ProductStore) *StatusItemCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return sic.AddHeaderCancelProductStoreIDs(ids...)
}

// AddItemCancelProductStoreIDs adds the "item_cancel_product_stores" edge to the ProductStore entity by IDs.
func (sic *StatusItemCreate) AddItemCancelProductStoreIDs(ids ...int) *StatusItemCreate {
	sic.mutation.AddItemCancelProductStoreIDs(ids...)
	return sic
}

// AddItemCancelProductStores adds the "item_cancel_product_stores" edges to the ProductStore entity.
func (sic *StatusItemCreate) AddItemCancelProductStores(p ...*ProductStore) *StatusItemCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return sic.AddItemCancelProductStoreIDs(ids...)
}

// AddMainStatusValidChangeIDs adds the "main_status_valid_changes" edge to the StatusValidChange entity by IDs.
func (sic *StatusItemCreate) AddMainStatusValidChangeIDs(ids ...int) *StatusItemCreate {
	sic.mutation.AddMainStatusValidChangeIDs(ids...)
	return sic
}

// AddMainStatusValidChanges adds the "main_status_valid_changes" edges to the StatusValidChange entity.
func (sic *StatusItemCreate) AddMainStatusValidChanges(s ...*StatusValidChange) *StatusItemCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sic.AddMainStatusValidChangeIDs(ids...)
}

// AddToStatusValidChangeIDs adds the "to_status_valid_changes" edge to the StatusValidChange entity by IDs.
func (sic *StatusItemCreate) AddToStatusValidChangeIDs(ids ...int) *StatusItemCreate {
	sic.mutation.AddToStatusValidChangeIDs(ids...)
	return sic
}

// AddToStatusValidChanges adds the "to_status_valid_changes" edges to the StatusValidChange entity.
func (sic *StatusItemCreate) AddToStatusValidChanges(s ...*StatusValidChange) *StatusItemCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sic.AddToStatusValidChangeIDs(ids...)
}

// Mutation returns the StatusItemMutation object of the builder.
func (sic *StatusItemCreate) Mutation() *StatusItemMutation {
	return sic.mutation
}

// Save creates the StatusItem in the database.
func (sic *StatusItemCreate) Save(ctx context.Context) (*StatusItem, error) {
	var (
		err  error
		node *StatusItem
	)
	sic.defaults()
	if len(sic.hooks) == 0 {
		if err = sic.check(); err != nil {
			return nil, err
		}
		node, err = sic.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StatusItemMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sic.check(); err != nil {
				return nil, err
			}
			sic.mutation = mutation
			if node, err = sic.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(sic.hooks) - 1; i >= 0; i-- {
			mut = sic.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sic.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sic *StatusItemCreate) SaveX(ctx context.Context) *StatusItem {
	v, err := sic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (sic *StatusItemCreate) defaults() {
	if _, ok := sic.mutation.CreateTime(); !ok {
		v := statusitem.DefaultCreateTime()
		sic.mutation.SetCreateTime(v)
	}
	if _, ok := sic.mutation.UpdateTime(); !ok {
		v := statusitem.DefaultUpdateTime()
		sic.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sic *StatusItemCreate) check() error {
	if _, ok := sic.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New("ent: missing required field \"create_time\"")}
	}
	if _, ok := sic.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New("ent: missing required field \"update_time\"")}
	}
	return nil
}

func (sic *StatusItemCreate) sqlSave(ctx context.Context) (*StatusItem, error) {
	_node, _spec := sic.createSpec()
	if err := sqlgraph.CreateNode(ctx, sic.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (sic *StatusItemCreate) createSpec() (*StatusItem, *sqlgraph.CreateSpec) {
	var (
		_node = &StatusItem{config: sic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: statusitem.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: statusitem.FieldID,
			},
		}
	)
	if value, ok := sic.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: statusitem.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := sic.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: statusitem.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := sic.mutation.StringRef(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: statusitem.FieldStringRef,
		})
		_node.StringRef = value
	}
	if value, ok := sic.mutation.StatusCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: statusitem.FieldStatusCode,
		})
		_node.StatusCode = value
	}
	if value, ok := sic.mutation.SequenceID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: statusitem.FieldSequenceID,
		})
		_node.SequenceID = value
	}
	if value, ok := sic.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: statusitem.FieldDescription,
		})
		_node.Description = value
	}
	if nodes := sic.mutation.StatusTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   statusitem.StatusTypeTable,
			Columns: []string{statusitem.StatusTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statustype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.status_type_status_items = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sic.mutation.OrderHeadersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.OrderHeadersTable,
			Columns: []string{statusitem.OrderHeadersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderheader.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sic.mutation.SyncOrderHeadersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.SyncOrderHeadersTable,
			Columns: []string{statusitem.SyncOrderHeadersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderheader.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sic.mutation.OrderItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.OrderItemsTable,
			Columns: []string{statusitem.OrderItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sic.mutation.SyncOrderItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.SyncOrderItemsTable,
			Columns: []string{statusitem.SyncOrderItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sic.mutation.OrderPaymentPreferencesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.OrderPaymentPreferencesTable,
			Columns: []string{statusitem.OrderPaymentPreferencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderpaymentpreference.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sic.mutation.OrderStatusesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.OrderStatusesTable,
			Columns: []string{statusitem.OrderStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderstatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sic.mutation.ProductReviewsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.ProductReviewsTable,
			Columns: []string{statusitem.ProductReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productreview.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sic.mutation.HeaderApprovedProductStoresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.HeaderApprovedProductStoresTable,
			Columns: []string{statusitem.HeaderApprovedProductStoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productstore.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sic.mutation.ItemApprovedProductStoresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.ItemApprovedProductStoresTable,
			Columns: []string{statusitem.ItemApprovedProductStoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productstore.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sic.mutation.DigitalItemApprovedProductStoresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.DigitalItemApprovedProductStoresTable,
			Columns: []string{statusitem.DigitalItemApprovedProductStoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productstore.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sic.mutation.HeaderDeclinedProductStoresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.HeaderDeclinedProductStoresTable,
			Columns: []string{statusitem.HeaderDeclinedProductStoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productstore.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sic.mutation.ItemDeclinedProductStoresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.ItemDeclinedProductStoresTable,
			Columns: []string{statusitem.ItemDeclinedProductStoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productstore.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sic.mutation.HeaderCancelProductStoresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.HeaderCancelProductStoresTable,
			Columns: []string{statusitem.HeaderCancelProductStoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productstore.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sic.mutation.ItemCancelProductStoresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.ItemCancelProductStoresTable,
			Columns: []string{statusitem.ItemCancelProductStoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productstore.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sic.mutation.MainStatusValidChangesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.MainStatusValidChangesTable,
			Columns: []string{statusitem.MainStatusValidChangesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusvalidchange.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sic.mutation.ToStatusValidChangesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.ToStatusValidChangesTable,
			Columns: []string{statusitem.ToStatusValidChangesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusvalidchange.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// StatusItemCreateBulk is the builder for creating many StatusItem entities in bulk.
type StatusItemCreateBulk struct {
	config
	builders []*StatusItemCreate
}

// Save creates the StatusItem entities in the database.
func (sicb *StatusItemCreateBulk) Save(ctx context.Context) ([]*StatusItem, error) {
	specs := make([]*sqlgraph.CreateSpec, len(sicb.builders))
	nodes := make([]*StatusItem, len(sicb.builders))
	mutators := make([]Mutator, len(sicb.builders))
	for i := range sicb.builders {
		func(i int, root context.Context) {
			builder := sicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*StatusItemMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sicb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sicb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sicb *StatusItemCreateBulk) SaveX(ctx context.Context) []*StatusItem {
	v, err := sicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
