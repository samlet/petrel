// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/orderheader"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/orderitem"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/orderpaymentpreference"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/orderstatus"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/predicate"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productreview"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productstore"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/statusitem"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/statustype"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/statusvalidchange"
)

// StatusItemQuery is the builder for querying StatusItem entities.
type StatusItemQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.StatusItem
	// eager-loading edges.
	withStatusType                       *StatusTypeQuery
	withOrderHeaders                     *OrderHeaderQuery
	withSyncOrderHeaders                 *OrderHeaderQuery
	withOrderItems                       *OrderItemQuery
	withSyncOrderItems                   *OrderItemQuery
	withOrderPaymentPreferences          *OrderPaymentPreferenceQuery
	withOrderStatuses                    *OrderStatusQuery
	withProductReviews                   *ProductReviewQuery
	withHeaderApprovedProductStores      *ProductStoreQuery
	withItemApprovedProductStores        *ProductStoreQuery
	withDigitalItemApprovedProductStores *ProductStoreQuery
	withHeaderDeclinedProductStores      *ProductStoreQuery
	withItemDeclinedProductStores        *ProductStoreQuery
	withHeaderCancelProductStores        *ProductStoreQuery
	withItemCancelProductStores          *ProductStoreQuery
	withMainStatusValidChanges           *StatusValidChangeQuery
	withToStatusValidChanges             *StatusValidChangeQuery
	withFKs                              bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the StatusItemQuery builder.
func (siq *StatusItemQuery) Where(ps ...predicate.StatusItem) *StatusItemQuery {
	siq.predicates = append(siq.predicates, ps...)
	return siq
}

// Limit adds a limit step to the query.
func (siq *StatusItemQuery) Limit(limit int) *StatusItemQuery {
	siq.limit = &limit
	return siq
}

// Offset adds an offset step to the query.
func (siq *StatusItemQuery) Offset(offset int) *StatusItemQuery {
	siq.offset = &offset
	return siq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (siq *StatusItemQuery) Unique(unique bool) *StatusItemQuery {
	siq.unique = &unique
	return siq
}

// Order adds an order step to the query.
func (siq *StatusItemQuery) Order(o ...OrderFunc) *StatusItemQuery {
	siq.order = append(siq.order, o...)
	return siq
}

// QueryStatusType chains the current query on the "status_type" edge.
func (siq *StatusItemQuery) QueryStatusType() *StatusTypeQuery {
	query := &StatusTypeQuery{config: siq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := siq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := siq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(statusitem.Table, statusitem.FieldID, selector),
			sqlgraph.To(statustype.Table, statustype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, statusitem.StatusTypeTable, statusitem.StatusTypeColumn),
		)
		fromU = sqlgraph.SetNeighbors(siq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOrderHeaders chains the current query on the "order_headers" edge.
func (siq *StatusItemQuery) QueryOrderHeaders() *OrderHeaderQuery {
	query := &OrderHeaderQuery{config: siq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := siq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := siq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(statusitem.Table, statusitem.FieldID, selector),
			sqlgraph.To(orderheader.Table, orderheader.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, statusitem.OrderHeadersTable, statusitem.OrderHeadersColumn),
		)
		fromU = sqlgraph.SetNeighbors(siq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySyncOrderHeaders chains the current query on the "sync_order_headers" edge.
func (siq *StatusItemQuery) QuerySyncOrderHeaders() *OrderHeaderQuery {
	query := &OrderHeaderQuery{config: siq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := siq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := siq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(statusitem.Table, statusitem.FieldID, selector),
			sqlgraph.To(orderheader.Table, orderheader.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, statusitem.SyncOrderHeadersTable, statusitem.SyncOrderHeadersColumn),
		)
		fromU = sqlgraph.SetNeighbors(siq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOrderItems chains the current query on the "order_items" edge.
func (siq *StatusItemQuery) QueryOrderItems() *OrderItemQuery {
	query := &OrderItemQuery{config: siq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := siq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := siq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(statusitem.Table, statusitem.FieldID, selector),
			sqlgraph.To(orderitem.Table, orderitem.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, statusitem.OrderItemsTable, statusitem.OrderItemsColumn),
		)
		fromU = sqlgraph.SetNeighbors(siq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySyncOrderItems chains the current query on the "sync_order_items" edge.
func (siq *StatusItemQuery) QuerySyncOrderItems() *OrderItemQuery {
	query := &OrderItemQuery{config: siq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := siq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := siq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(statusitem.Table, statusitem.FieldID, selector),
			sqlgraph.To(orderitem.Table, orderitem.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, statusitem.SyncOrderItemsTable, statusitem.SyncOrderItemsColumn),
		)
		fromU = sqlgraph.SetNeighbors(siq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOrderPaymentPreferences chains the current query on the "order_payment_preferences" edge.
func (siq *StatusItemQuery) QueryOrderPaymentPreferences() *OrderPaymentPreferenceQuery {
	query := &OrderPaymentPreferenceQuery{config: siq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := siq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := siq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(statusitem.Table, statusitem.FieldID, selector),
			sqlgraph.To(orderpaymentpreference.Table, orderpaymentpreference.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, statusitem.OrderPaymentPreferencesTable, statusitem.OrderPaymentPreferencesColumn),
		)
		fromU = sqlgraph.SetNeighbors(siq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOrderStatuses chains the current query on the "order_statuses" edge.
func (siq *StatusItemQuery) QueryOrderStatuses() *OrderStatusQuery {
	query := &OrderStatusQuery{config: siq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := siq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := siq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(statusitem.Table, statusitem.FieldID, selector),
			sqlgraph.To(orderstatus.Table, orderstatus.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, statusitem.OrderStatusesTable, statusitem.OrderStatusesColumn),
		)
		fromU = sqlgraph.SetNeighbors(siq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProductReviews chains the current query on the "product_reviews" edge.
func (siq *StatusItemQuery) QueryProductReviews() *ProductReviewQuery {
	query := &ProductReviewQuery{config: siq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := siq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := siq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(statusitem.Table, statusitem.FieldID, selector),
			sqlgraph.To(productreview.Table, productreview.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, statusitem.ProductReviewsTable, statusitem.ProductReviewsColumn),
		)
		fromU = sqlgraph.SetNeighbors(siq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryHeaderApprovedProductStores chains the current query on the "header_approved_product_stores" edge.
func (siq *StatusItemQuery) QueryHeaderApprovedProductStores() *ProductStoreQuery {
	query := &ProductStoreQuery{config: siq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := siq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := siq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(statusitem.Table, statusitem.FieldID, selector),
			sqlgraph.To(productstore.Table, productstore.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, statusitem.HeaderApprovedProductStoresTable, statusitem.HeaderApprovedProductStoresColumn),
		)
		fromU = sqlgraph.SetNeighbors(siq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryItemApprovedProductStores chains the current query on the "item_approved_product_stores" edge.
func (siq *StatusItemQuery) QueryItemApprovedProductStores() *ProductStoreQuery {
	query := &ProductStoreQuery{config: siq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := siq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := siq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(statusitem.Table, statusitem.FieldID, selector),
			sqlgraph.To(productstore.Table, productstore.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, statusitem.ItemApprovedProductStoresTable, statusitem.ItemApprovedProductStoresColumn),
		)
		fromU = sqlgraph.SetNeighbors(siq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDigitalItemApprovedProductStores chains the current query on the "digital_item_approved_product_stores" edge.
func (siq *StatusItemQuery) QueryDigitalItemApprovedProductStores() *ProductStoreQuery {
	query := &ProductStoreQuery{config: siq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := siq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := siq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(statusitem.Table, statusitem.FieldID, selector),
			sqlgraph.To(productstore.Table, productstore.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, statusitem.DigitalItemApprovedProductStoresTable, statusitem.DigitalItemApprovedProductStoresColumn),
		)
		fromU = sqlgraph.SetNeighbors(siq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryHeaderDeclinedProductStores chains the current query on the "header_declined_product_stores" edge.
func (siq *StatusItemQuery) QueryHeaderDeclinedProductStores() *ProductStoreQuery {
	query := &ProductStoreQuery{config: siq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := siq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := siq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(statusitem.Table, statusitem.FieldID, selector),
			sqlgraph.To(productstore.Table, productstore.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, statusitem.HeaderDeclinedProductStoresTable, statusitem.HeaderDeclinedProductStoresColumn),
		)
		fromU = sqlgraph.SetNeighbors(siq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryItemDeclinedProductStores chains the current query on the "item_declined_product_stores" edge.
func (siq *StatusItemQuery) QueryItemDeclinedProductStores() *ProductStoreQuery {
	query := &ProductStoreQuery{config: siq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := siq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := siq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(statusitem.Table, statusitem.FieldID, selector),
			sqlgraph.To(productstore.Table, productstore.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, statusitem.ItemDeclinedProductStoresTable, statusitem.ItemDeclinedProductStoresColumn),
		)
		fromU = sqlgraph.SetNeighbors(siq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryHeaderCancelProductStores chains the current query on the "header_cancel_product_stores" edge.
func (siq *StatusItemQuery) QueryHeaderCancelProductStores() *ProductStoreQuery {
	query := &ProductStoreQuery{config: siq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := siq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := siq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(statusitem.Table, statusitem.FieldID, selector),
			sqlgraph.To(productstore.Table, productstore.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, statusitem.HeaderCancelProductStoresTable, statusitem.HeaderCancelProductStoresColumn),
		)
		fromU = sqlgraph.SetNeighbors(siq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryItemCancelProductStores chains the current query on the "item_cancel_product_stores" edge.
func (siq *StatusItemQuery) QueryItemCancelProductStores() *ProductStoreQuery {
	query := &ProductStoreQuery{config: siq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := siq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := siq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(statusitem.Table, statusitem.FieldID, selector),
			sqlgraph.To(productstore.Table, productstore.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, statusitem.ItemCancelProductStoresTable, statusitem.ItemCancelProductStoresColumn),
		)
		fromU = sqlgraph.SetNeighbors(siq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMainStatusValidChanges chains the current query on the "main_status_valid_changes" edge.
func (siq *StatusItemQuery) QueryMainStatusValidChanges() *StatusValidChangeQuery {
	query := &StatusValidChangeQuery{config: siq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := siq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := siq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(statusitem.Table, statusitem.FieldID, selector),
			sqlgraph.To(statusvalidchange.Table, statusvalidchange.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, statusitem.MainStatusValidChangesTable, statusitem.MainStatusValidChangesColumn),
		)
		fromU = sqlgraph.SetNeighbors(siq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryToStatusValidChanges chains the current query on the "to_status_valid_changes" edge.
func (siq *StatusItemQuery) QueryToStatusValidChanges() *StatusValidChangeQuery {
	query := &StatusValidChangeQuery{config: siq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := siq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := siq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(statusitem.Table, statusitem.FieldID, selector),
			sqlgraph.To(statusvalidchange.Table, statusvalidchange.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, statusitem.ToStatusValidChangesTable, statusitem.ToStatusValidChangesColumn),
		)
		fromU = sqlgraph.SetNeighbors(siq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first StatusItem entity from the query.
// Returns a *NotFoundError when no StatusItem was found.
func (siq *StatusItemQuery) First(ctx context.Context) (*StatusItem, error) {
	nodes, err := siq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{statusitem.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (siq *StatusItemQuery) FirstX(ctx context.Context) *StatusItem {
	node, err := siq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first StatusItem ID from the query.
// Returns a *NotFoundError when no StatusItem ID was found.
func (siq *StatusItemQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = siq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{statusitem.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (siq *StatusItemQuery) FirstIDX(ctx context.Context) int {
	id, err := siq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single StatusItem entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one StatusItem entity is not found.
// Returns a *NotFoundError when no StatusItem entities are found.
func (siq *StatusItemQuery) Only(ctx context.Context) (*StatusItem, error) {
	nodes, err := siq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{statusitem.Label}
	default:
		return nil, &NotSingularError{statusitem.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (siq *StatusItemQuery) OnlyX(ctx context.Context) *StatusItem {
	node, err := siq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only StatusItem ID in the query.
// Returns a *NotSingularError when exactly one StatusItem ID is not found.
// Returns a *NotFoundError when no entities are found.
func (siq *StatusItemQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = siq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{statusitem.Label}
	default:
		err = &NotSingularError{statusitem.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (siq *StatusItemQuery) OnlyIDX(ctx context.Context) int {
	id, err := siq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of StatusItems.
func (siq *StatusItemQuery) All(ctx context.Context) ([]*StatusItem, error) {
	if err := siq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return siq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (siq *StatusItemQuery) AllX(ctx context.Context) []*StatusItem {
	nodes, err := siq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of StatusItem IDs.
func (siq *StatusItemQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := siq.Select(statusitem.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (siq *StatusItemQuery) IDsX(ctx context.Context) []int {
	ids, err := siq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (siq *StatusItemQuery) Count(ctx context.Context) (int, error) {
	if err := siq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return siq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (siq *StatusItemQuery) CountX(ctx context.Context) int {
	count, err := siq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (siq *StatusItemQuery) Exist(ctx context.Context) (bool, error) {
	if err := siq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return siq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (siq *StatusItemQuery) ExistX(ctx context.Context) bool {
	exist, err := siq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the StatusItemQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (siq *StatusItemQuery) Clone() *StatusItemQuery {
	if siq == nil {
		return nil
	}
	return &StatusItemQuery{
		config:                               siq.config,
		limit:                                siq.limit,
		offset:                               siq.offset,
		order:                                append([]OrderFunc{}, siq.order...),
		predicates:                           append([]predicate.StatusItem{}, siq.predicates...),
		withStatusType:                       siq.withStatusType.Clone(),
		withOrderHeaders:                     siq.withOrderHeaders.Clone(),
		withSyncOrderHeaders:                 siq.withSyncOrderHeaders.Clone(),
		withOrderItems:                       siq.withOrderItems.Clone(),
		withSyncOrderItems:                   siq.withSyncOrderItems.Clone(),
		withOrderPaymentPreferences:          siq.withOrderPaymentPreferences.Clone(),
		withOrderStatuses:                    siq.withOrderStatuses.Clone(),
		withProductReviews:                   siq.withProductReviews.Clone(),
		withHeaderApprovedProductStores:      siq.withHeaderApprovedProductStores.Clone(),
		withItemApprovedProductStores:        siq.withItemApprovedProductStores.Clone(),
		withDigitalItemApprovedProductStores: siq.withDigitalItemApprovedProductStores.Clone(),
		withHeaderDeclinedProductStores:      siq.withHeaderDeclinedProductStores.Clone(),
		withItemDeclinedProductStores:        siq.withItemDeclinedProductStores.Clone(),
		withHeaderCancelProductStores:        siq.withHeaderCancelProductStores.Clone(),
		withItemCancelProductStores:          siq.withItemCancelProductStores.Clone(),
		withMainStatusValidChanges:           siq.withMainStatusValidChanges.Clone(),
		withToStatusValidChanges:             siq.withToStatusValidChanges.Clone(),
		// clone intermediate query.
		sql:  siq.sql.Clone(),
		path: siq.path,
	}
}

// WithStatusType tells the query-builder to eager-load the nodes that are connected to
// the "status_type" edge. The optional arguments are used to configure the query builder of the edge.
func (siq *StatusItemQuery) WithStatusType(opts ...func(*StatusTypeQuery)) *StatusItemQuery {
	query := &StatusTypeQuery{config: siq.config}
	for _, opt := range opts {
		opt(query)
	}
	siq.withStatusType = query
	return siq
}

// WithOrderHeaders tells the query-builder to eager-load the nodes that are connected to
// the "order_headers" edge. The optional arguments are used to configure the query builder of the edge.
func (siq *StatusItemQuery) WithOrderHeaders(opts ...func(*OrderHeaderQuery)) *StatusItemQuery {
	query := &OrderHeaderQuery{config: siq.config}
	for _, opt := range opts {
		opt(query)
	}
	siq.withOrderHeaders = query
	return siq
}

// WithSyncOrderHeaders tells the query-builder to eager-load the nodes that are connected to
// the "sync_order_headers" edge. The optional arguments are used to configure the query builder of the edge.
func (siq *StatusItemQuery) WithSyncOrderHeaders(opts ...func(*OrderHeaderQuery)) *StatusItemQuery {
	query := &OrderHeaderQuery{config: siq.config}
	for _, opt := range opts {
		opt(query)
	}
	siq.withSyncOrderHeaders = query
	return siq
}

// WithOrderItems tells the query-builder to eager-load the nodes that are connected to
// the "order_items" edge. The optional arguments are used to configure the query builder of the edge.
func (siq *StatusItemQuery) WithOrderItems(opts ...func(*OrderItemQuery)) *StatusItemQuery {
	query := &OrderItemQuery{config: siq.config}
	for _, opt := range opts {
		opt(query)
	}
	siq.withOrderItems = query
	return siq
}

// WithSyncOrderItems tells the query-builder to eager-load the nodes that are connected to
// the "sync_order_items" edge. The optional arguments are used to configure the query builder of the edge.
func (siq *StatusItemQuery) WithSyncOrderItems(opts ...func(*OrderItemQuery)) *StatusItemQuery {
	query := &OrderItemQuery{config: siq.config}
	for _, opt := range opts {
		opt(query)
	}
	siq.withSyncOrderItems = query
	return siq
}

// WithOrderPaymentPreferences tells the query-builder to eager-load the nodes that are connected to
// the "order_payment_preferences" edge. The optional arguments are used to configure the query builder of the edge.
func (siq *StatusItemQuery) WithOrderPaymentPreferences(opts ...func(*OrderPaymentPreferenceQuery)) *StatusItemQuery {
	query := &OrderPaymentPreferenceQuery{config: siq.config}
	for _, opt := range opts {
		opt(query)
	}
	siq.withOrderPaymentPreferences = query
	return siq
}

// WithOrderStatuses tells the query-builder to eager-load the nodes that are connected to
// the "order_statuses" edge. The optional arguments are used to configure the query builder of the edge.
func (siq *StatusItemQuery) WithOrderStatuses(opts ...func(*OrderStatusQuery)) *StatusItemQuery {
	query := &OrderStatusQuery{config: siq.config}
	for _, opt := range opts {
		opt(query)
	}
	siq.withOrderStatuses = query
	return siq
}

// WithProductReviews tells the query-builder to eager-load the nodes that are connected to
// the "product_reviews" edge. The optional arguments are used to configure the query builder of the edge.
func (siq *StatusItemQuery) WithProductReviews(opts ...func(*ProductReviewQuery)) *StatusItemQuery {
	query := &ProductReviewQuery{config: siq.config}
	for _, opt := range opts {
		opt(query)
	}
	siq.withProductReviews = query
	return siq
}

// WithHeaderApprovedProductStores tells the query-builder to eager-load the nodes that are connected to
// the "header_approved_product_stores" edge. The optional arguments are used to configure the query builder of the edge.
func (siq *StatusItemQuery) WithHeaderApprovedProductStores(opts ...func(*ProductStoreQuery)) *StatusItemQuery {
	query := &ProductStoreQuery{config: siq.config}
	for _, opt := range opts {
		opt(query)
	}
	siq.withHeaderApprovedProductStores = query
	return siq
}

// WithItemApprovedProductStores tells the query-builder to eager-load the nodes that are connected to
// the "item_approved_product_stores" edge. The optional arguments are used to configure the query builder of the edge.
func (siq *StatusItemQuery) WithItemApprovedProductStores(opts ...func(*ProductStoreQuery)) *StatusItemQuery {
	query := &ProductStoreQuery{config: siq.config}
	for _, opt := range opts {
		opt(query)
	}
	siq.withItemApprovedProductStores = query
	return siq
}

// WithDigitalItemApprovedProductStores tells the query-builder to eager-load the nodes that are connected to
// the "digital_item_approved_product_stores" edge. The optional arguments are used to configure the query builder of the edge.
func (siq *StatusItemQuery) WithDigitalItemApprovedProductStores(opts ...func(*ProductStoreQuery)) *StatusItemQuery {
	query := &ProductStoreQuery{config: siq.config}
	for _, opt := range opts {
		opt(query)
	}
	siq.withDigitalItemApprovedProductStores = query
	return siq
}

// WithHeaderDeclinedProductStores tells the query-builder to eager-load the nodes that are connected to
// the "header_declined_product_stores" edge. The optional arguments are used to configure the query builder of the edge.
func (siq *StatusItemQuery) WithHeaderDeclinedProductStores(opts ...func(*ProductStoreQuery)) *StatusItemQuery {
	query := &ProductStoreQuery{config: siq.config}
	for _, opt := range opts {
		opt(query)
	}
	siq.withHeaderDeclinedProductStores = query
	return siq
}

// WithItemDeclinedProductStores tells the query-builder to eager-load the nodes that are connected to
// the "item_declined_product_stores" edge. The optional arguments are used to configure the query builder of the edge.
func (siq *StatusItemQuery) WithItemDeclinedProductStores(opts ...func(*ProductStoreQuery)) *StatusItemQuery {
	query := &ProductStoreQuery{config: siq.config}
	for _, opt := range opts {
		opt(query)
	}
	siq.withItemDeclinedProductStores = query
	return siq
}

// WithHeaderCancelProductStores tells the query-builder to eager-load the nodes that are connected to
// the "header_cancel_product_stores" edge. The optional arguments are used to configure the query builder of the edge.
func (siq *StatusItemQuery) WithHeaderCancelProductStores(opts ...func(*ProductStoreQuery)) *StatusItemQuery {
	query := &ProductStoreQuery{config: siq.config}
	for _, opt := range opts {
		opt(query)
	}
	siq.withHeaderCancelProductStores = query
	return siq
}

// WithItemCancelProductStores tells the query-builder to eager-load the nodes that are connected to
// the "item_cancel_product_stores" edge. The optional arguments are used to configure the query builder of the edge.
func (siq *StatusItemQuery) WithItemCancelProductStores(opts ...func(*ProductStoreQuery)) *StatusItemQuery {
	query := &ProductStoreQuery{config: siq.config}
	for _, opt := range opts {
		opt(query)
	}
	siq.withItemCancelProductStores = query
	return siq
}

// WithMainStatusValidChanges tells the query-builder to eager-load the nodes that are connected to
// the "main_status_valid_changes" edge. The optional arguments are used to configure the query builder of the edge.
func (siq *StatusItemQuery) WithMainStatusValidChanges(opts ...func(*StatusValidChangeQuery)) *StatusItemQuery {
	query := &StatusValidChangeQuery{config: siq.config}
	for _, opt := range opts {
		opt(query)
	}
	siq.withMainStatusValidChanges = query
	return siq
}

// WithToStatusValidChanges tells the query-builder to eager-load the nodes that are connected to
// the "to_status_valid_changes" edge. The optional arguments are used to configure the query builder of the edge.
func (siq *StatusItemQuery) WithToStatusValidChanges(opts ...func(*StatusValidChangeQuery)) *StatusItemQuery {
	query := &StatusValidChangeQuery{config: siq.config}
	for _, opt := range opts {
		opt(query)
	}
	siq.withToStatusValidChanges = query
	return siq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.StatusItem.Query().
//		GroupBy(statusitem.FieldCreateTime).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (siq *StatusItemQuery) GroupBy(field string, fields ...string) *StatusItemGroupBy {
	group := &StatusItemGroupBy{config: siq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := siq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return siq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//	}
//
//	client.StatusItem.Query().
//		Select(statusitem.FieldCreateTime).
//		Scan(ctx, &v)
//
func (siq *StatusItemQuery) Select(field string, fields ...string) *StatusItemSelect {
	siq.fields = append([]string{field}, fields...)
	return &StatusItemSelect{StatusItemQuery: siq}
}

func (siq *StatusItemQuery) prepareQuery(ctx context.Context) error {
	for _, f := range siq.fields {
		if !statusitem.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if siq.path != nil {
		prev, err := siq.path(ctx)
		if err != nil {
			return err
		}
		siq.sql = prev
	}
	return nil
}

func (siq *StatusItemQuery) sqlAll(ctx context.Context) ([]*StatusItem, error) {
	var (
		nodes       = []*StatusItem{}
		withFKs     = siq.withFKs
		_spec       = siq.querySpec()
		loadedTypes = [17]bool{
			siq.withStatusType != nil,
			siq.withOrderHeaders != nil,
			siq.withSyncOrderHeaders != nil,
			siq.withOrderItems != nil,
			siq.withSyncOrderItems != nil,
			siq.withOrderPaymentPreferences != nil,
			siq.withOrderStatuses != nil,
			siq.withProductReviews != nil,
			siq.withHeaderApprovedProductStores != nil,
			siq.withItemApprovedProductStores != nil,
			siq.withDigitalItemApprovedProductStores != nil,
			siq.withHeaderDeclinedProductStores != nil,
			siq.withItemDeclinedProductStores != nil,
			siq.withHeaderCancelProductStores != nil,
			siq.withItemCancelProductStores != nil,
			siq.withMainStatusValidChanges != nil,
			siq.withToStatusValidChanges != nil,
		}
	)
	if siq.withStatusType != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, statusitem.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &StatusItem{config: siq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, siq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := siq.withStatusType; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*StatusItem)
		for i := range nodes {
			if nodes[i].status_type_status_items == nil {
				continue
			}
			fk := *nodes[i].status_type_status_items
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(statustype.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "status_type_status_items" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.StatusType = n
			}
		}
	}

	if query := siq.withOrderHeaders; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*StatusItem)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.OrderHeaders = []*OrderHeader{}
		}
		query.withFKs = true
		query.Where(predicate.OrderHeader(func(s *sql.Selector) {
			s.Where(sql.InValues(statusitem.OrderHeadersColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.status_item_order_headers
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "status_item_order_headers" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "status_item_order_headers" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.OrderHeaders = append(node.Edges.OrderHeaders, n)
		}
	}

	if query := siq.withSyncOrderHeaders; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*StatusItem)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.SyncOrderHeaders = []*OrderHeader{}
		}
		query.withFKs = true
		query.Where(predicate.OrderHeader(func(s *sql.Selector) {
			s.Where(sql.InValues(statusitem.SyncOrderHeadersColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.status_item_sync_order_headers
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "status_item_sync_order_headers" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "status_item_sync_order_headers" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.SyncOrderHeaders = append(node.Edges.SyncOrderHeaders, n)
		}
	}

	if query := siq.withOrderItems; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*StatusItem)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.OrderItems = []*OrderItem{}
		}
		query.withFKs = true
		query.Where(predicate.OrderItem(func(s *sql.Selector) {
			s.Where(sql.InValues(statusitem.OrderItemsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.status_item_order_items
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "status_item_order_items" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "status_item_order_items" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.OrderItems = append(node.Edges.OrderItems, n)
		}
	}

	if query := siq.withSyncOrderItems; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*StatusItem)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.SyncOrderItems = []*OrderItem{}
		}
		query.withFKs = true
		query.Where(predicate.OrderItem(func(s *sql.Selector) {
			s.Where(sql.InValues(statusitem.SyncOrderItemsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.status_item_sync_order_items
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "status_item_sync_order_items" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "status_item_sync_order_items" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.SyncOrderItems = append(node.Edges.SyncOrderItems, n)
		}
	}

	if query := siq.withOrderPaymentPreferences; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*StatusItem)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.OrderPaymentPreferences = []*OrderPaymentPreference{}
		}
		query.withFKs = true
		query.Where(predicate.OrderPaymentPreference(func(s *sql.Selector) {
			s.Where(sql.InValues(statusitem.OrderPaymentPreferencesColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.status_item_order_payment_preferences
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "status_item_order_payment_preferences" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "status_item_order_payment_preferences" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.OrderPaymentPreferences = append(node.Edges.OrderPaymentPreferences, n)
		}
	}

	if query := siq.withOrderStatuses; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*StatusItem)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.OrderStatuses = []*OrderStatus{}
		}
		query.withFKs = true
		query.Where(predicate.OrderStatus(func(s *sql.Selector) {
			s.Where(sql.InValues(statusitem.OrderStatusesColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.status_item_order_statuses
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "status_item_order_statuses" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "status_item_order_statuses" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.OrderStatuses = append(node.Edges.OrderStatuses, n)
		}
	}

	if query := siq.withProductReviews; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*StatusItem)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.ProductReviews = []*ProductReview{}
		}
		query.withFKs = true
		query.Where(predicate.ProductReview(func(s *sql.Selector) {
			s.Where(sql.InValues(statusitem.ProductReviewsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.status_item_product_reviews
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "status_item_product_reviews" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "status_item_product_reviews" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.ProductReviews = append(node.Edges.ProductReviews, n)
		}
	}

	if query := siq.withHeaderApprovedProductStores; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*StatusItem)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.HeaderApprovedProductStores = []*ProductStore{}
		}
		query.withFKs = true
		query.Where(predicate.ProductStore(func(s *sql.Selector) {
			s.Where(sql.InValues(statusitem.HeaderApprovedProductStoresColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.status_item_header_approved_product_stores
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "status_item_header_approved_product_stores" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "status_item_header_approved_product_stores" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.HeaderApprovedProductStores = append(node.Edges.HeaderApprovedProductStores, n)
		}
	}

	if query := siq.withItemApprovedProductStores; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*StatusItem)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.ItemApprovedProductStores = []*ProductStore{}
		}
		query.withFKs = true
		query.Where(predicate.ProductStore(func(s *sql.Selector) {
			s.Where(sql.InValues(statusitem.ItemApprovedProductStoresColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.status_item_item_approved_product_stores
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "status_item_item_approved_product_stores" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "status_item_item_approved_product_stores" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.ItemApprovedProductStores = append(node.Edges.ItemApprovedProductStores, n)
		}
	}

	if query := siq.withDigitalItemApprovedProductStores; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*StatusItem)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.DigitalItemApprovedProductStores = []*ProductStore{}
		}
		query.withFKs = true
		query.Where(predicate.ProductStore(func(s *sql.Selector) {
			s.Where(sql.InValues(statusitem.DigitalItemApprovedProductStoresColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.status_item_digital_item_approved_product_stores
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "status_item_digital_item_approved_product_stores" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "status_item_digital_item_approved_product_stores" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.DigitalItemApprovedProductStores = append(node.Edges.DigitalItemApprovedProductStores, n)
		}
	}

	if query := siq.withHeaderDeclinedProductStores; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*StatusItem)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.HeaderDeclinedProductStores = []*ProductStore{}
		}
		query.withFKs = true
		query.Where(predicate.ProductStore(func(s *sql.Selector) {
			s.Where(sql.InValues(statusitem.HeaderDeclinedProductStoresColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.status_item_header_declined_product_stores
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "status_item_header_declined_product_stores" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "status_item_header_declined_product_stores" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.HeaderDeclinedProductStores = append(node.Edges.HeaderDeclinedProductStores, n)
		}
	}

	if query := siq.withItemDeclinedProductStores; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*StatusItem)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.ItemDeclinedProductStores = []*ProductStore{}
		}
		query.withFKs = true
		query.Where(predicate.ProductStore(func(s *sql.Selector) {
			s.Where(sql.InValues(statusitem.ItemDeclinedProductStoresColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.status_item_item_declined_product_stores
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "status_item_item_declined_product_stores" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "status_item_item_declined_product_stores" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.ItemDeclinedProductStores = append(node.Edges.ItemDeclinedProductStores, n)
		}
	}

	if query := siq.withHeaderCancelProductStores; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*StatusItem)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.HeaderCancelProductStores = []*ProductStore{}
		}
		query.withFKs = true
		query.Where(predicate.ProductStore(func(s *sql.Selector) {
			s.Where(sql.InValues(statusitem.HeaderCancelProductStoresColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.status_item_header_cancel_product_stores
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "status_item_header_cancel_product_stores" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "status_item_header_cancel_product_stores" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.HeaderCancelProductStores = append(node.Edges.HeaderCancelProductStores, n)
		}
	}

	if query := siq.withItemCancelProductStores; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*StatusItem)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.ItemCancelProductStores = []*ProductStore{}
		}
		query.withFKs = true
		query.Where(predicate.ProductStore(func(s *sql.Selector) {
			s.Where(sql.InValues(statusitem.ItemCancelProductStoresColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.status_item_item_cancel_product_stores
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "status_item_item_cancel_product_stores" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "status_item_item_cancel_product_stores" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.ItemCancelProductStores = append(node.Edges.ItemCancelProductStores, n)
		}
	}

	if query := siq.withMainStatusValidChanges; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*StatusItem)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.MainStatusValidChanges = []*StatusValidChange{}
		}
		query.withFKs = true
		query.Where(predicate.StatusValidChange(func(s *sql.Selector) {
			s.Where(sql.InValues(statusitem.MainStatusValidChangesColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.status_item_main_status_valid_changes
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "status_item_main_status_valid_changes" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "status_item_main_status_valid_changes" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.MainStatusValidChanges = append(node.Edges.MainStatusValidChanges, n)
		}
	}

	if query := siq.withToStatusValidChanges; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*StatusItem)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.ToStatusValidChanges = []*StatusValidChange{}
		}
		query.withFKs = true
		query.Where(predicate.StatusValidChange(func(s *sql.Selector) {
			s.Where(sql.InValues(statusitem.ToStatusValidChangesColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.status_item_to_status_valid_changes
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "status_item_to_status_valid_changes" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "status_item_to_status_valid_changes" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.ToStatusValidChanges = append(node.Edges.ToStatusValidChanges, n)
		}
	}

	return nodes, nil
}

func (siq *StatusItemQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := siq.querySpec()
	return sqlgraph.CountNodes(ctx, siq.driver, _spec)
}

func (siq *StatusItemQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := siq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (siq *StatusItemQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   statusitem.Table,
			Columns: statusitem.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: statusitem.FieldID,
			},
		},
		From:   siq.sql,
		Unique: true,
	}
	if unique := siq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := siq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, statusitem.FieldID)
		for i := range fields {
			if fields[i] != statusitem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := siq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := siq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := siq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := siq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (siq *StatusItemQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(siq.driver.Dialect())
	t1 := builder.Table(statusitem.Table)
	columns := siq.fields
	if len(columns) == 0 {
		columns = statusitem.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if siq.sql != nil {
		selector = siq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	for _, p := range siq.predicates {
		p(selector)
	}
	for _, p := range siq.order {
		p(selector)
	}
	if offset := siq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := siq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// StatusItemGroupBy is the group-by builder for StatusItem entities.
type StatusItemGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (sigb *StatusItemGroupBy) Aggregate(fns ...AggregateFunc) *StatusItemGroupBy {
	sigb.fns = append(sigb.fns, fns...)
	return sigb
}

// Scan applies the group-by query and scans the result into the given value.
func (sigb *StatusItemGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := sigb.path(ctx)
	if err != nil {
		return err
	}
	sigb.sql = query
	return sigb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (sigb *StatusItemGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := sigb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (sigb *StatusItemGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(sigb.fields) > 1 {
		return nil, errors.New("ent: StatusItemGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := sigb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (sigb *StatusItemGroupBy) StringsX(ctx context.Context) []string {
	v, err := sigb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (sigb *StatusItemGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = sigb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{statusitem.Label}
	default:
		err = fmt.Errorf("ent: StatusItemGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (sigb *StatusItemGroupBy) StringX(ctx context.Context) string {
	v, err := sigb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (sigb *StatusItemGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(sigb.fields) > 1 {
		return nil, errors.New("ent: StatusItemGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := sigb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (sigb *StatusItemGroupBy) IntsX(ctx context.Context) []int {
	v, err := sigb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (sigb *StatusItemGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = sigb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{statusitem.Label}
	default:
		err = fmt.Errorf("ent: StatusItemGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (sigb *StatusItemGroupBy) IntX(ctx context.Context) int {
	v, err := sigb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (sigb *StatusItemGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(sigb.fields) > 1 {
		return nil, errors.New("ent: StatusItemGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := sigb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (sigb *StatusItemGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := sigb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (sigb *StatusItemGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = sigb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{statusitem.Label}
	default:
		err = fmt.Errorf("ent: StatusItemGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (sigb *StatusItemGroupBy) Float64X(ctx context.Context) float64 {
	v, err := sigb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (sigb *StatusItemGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(sigb.fields) > 1 {
		return nil, errors.New("ent: StatusItemGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := sigb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (sigb *StatusItemGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := sigb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (sigb *StatusItemGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = sigb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{statusitem.Label}
	default:
		err = fmt.Errorf("ent: StatusItemGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (sigb *StatusItemGroupBy) BoolX(ctx context.Context) bool {
	v, err := sigb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (sigb *StatusItemGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range sigb.fields {
		if !statusitem.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := sigb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sigb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (sigb *StatusItemGroupBy) sqlQuery() *sql.Selector {
	selector := sigb.sql.Select()
	aggregation := make([]string, 0, len(sigb.fns))
	for _, fn := range sigb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(sigb.fields)+len(sigb.fns))
		for _, f := range sigb.fields {
			columns = append(columns, selector.C(f))
		}
		for _, c := range aggregation {
			columns = append(columns, c)
		}
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(sigb.fields...)...)
}

// StatusItemSelect is the builder for selecting fields of StatusItem entities.
type StatusItemSelect struct {
	*StatusItemQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (sis *StatusItemSelect) Scan(ctx context.Context, v interface{}) error {
	if err := sis.prepareQuery(ctx); err != nil {
		return err
	}
	sis.sql = sis.StatusItemQuery.sqlQuery(ctx)
	return sis.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (sis *StatusItemSelect) ScanX(ctx context.Context, v interface{}) {
	if err := sis.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (sis *StatusItemSelect) Strings(ctx context.Context) ([]string, error) {
	if len(sis.fields) > 1 {
		return nil, errors.New("ent: StatusItemSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := sis.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (sis *StatusItemSelect) StringsX(ctx context.Context) []string {
	v, err := sis.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (sis *StatusItemSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = sis.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{statusitem.Label}
	default:
		err = fmt.Errorf("ent: StatusItemSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (sis *StatusItemSelect) StringX(ctx context.Context) string {
	v, err := sis.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (sis *StatusItemSelect) Ints(ctx context.Context) ([]int, error) {
	if len(sis.fields) > 1 {
		return nil, errors.New("ent: StatusItemSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := sis.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (sis *StatusItemSelect) IntsX(ctx context.Context) []int {
	v, err := sis.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (sis *StatusItemSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = sis.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{statusitem.Label}
	default:
		err = fmt.Errorf("ent: StatusItemSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (sis *StatusItemSelect) IntX(ctx context.Context) int {
	v, err := sis.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (sis *StatusItemSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(sis.fields) > 1 {
		return nil, errors.New("ent: StatusItemSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := sis.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (sis *StatusItemSelect) Float64sX(ctx context.Context) []float64 {
	v, err := sis.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (sis *StatusItemSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = sis.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{statusitem.Label}
	default:
		err = fmt.Errorf("ent: StatusItemSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (sis *StatusItemSelect) Float64X(ctx context.Context) float64 {
	v, err := sis.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (sis *StatusItemSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(sis.fields) > 1 {
		return nil, errors.New("ent: StatusItemSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := sis.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (sis *StatusItemSelect) BoolsX(ctx context.Context) []bool {
	v, err := sis.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (sis *StatusItemSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = sis.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{statusitem.Label}
	default:
		err = fmt.Errorf("ent: StatusItemSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (sis *StatusItemSelect) BoolX(ctx context.Context) bool {
	v, err := sis.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (sis *StatusItemSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := sis.sql.Query()
	if err := sis.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
