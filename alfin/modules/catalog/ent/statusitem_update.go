// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/orderheader"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/orderitem"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/orderpaymentpreference"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/orderstatus"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/predicate"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productreview"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/productstore"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/statusitem"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/statustype"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/statusvalidchange"
)

// StatusItemUpdate is the builder for updating StatusItem entities.
type StatusItemUpdate struct {
	config
	hooks    []Hook
	mutation *StatusItemMutation
}

// Where adds a new predicate for the StatusItemUpdate builder.
func (siu *StatusItemUpdate) Where(ps ...predicate.StatusItem) *StatusItemUpdate {
	siu.mutation.predicates = append(siu.mutation.predicates, ps...)
	return siu
}

// SetStringRef sets the "string_ref" field.
func (siu *StatusItemUpdate) SetStringRef(s string) *StatusItemUpdate {
	siu.mutation.SetStringRef(s)
	return siu
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (siu *StatusItemUpdate) SetNillableStringRef(s *string) *StatusItemUpdate {
	if s != nil {
		siu.SetStringRef(*s)
	}
	return siu
}

// ClearStringRef clears the value of the "string_ref" field.
func (siu *StatusItemUpdate) ClearStringRef() *StatusItemUpdate {
	siu.mutation.ClearStringRef()
	return siu
}

// SetStatusCode sets the "status_code" field.
func (siu *StatusItemUpdate) SetStatusCode(s string) *StatusItemUpdate {
	siu.mutation.SetStatusCode(s)
	return siu
}

// SetNillableStatusCode sets the "status_code" field if the given value is not nil.
func (siu *StatusItemUpdate) SetNillableStatusCode(s *string) *StatusItemUpdate {
	if s != nil {
		siu.SetStatusCode(*s)
	}
	return siu
}

// ClearStatusCode clears the value of the "status_code" field.
func (siu *StatusItemUpdate) ClearStatusCode() *StatusItemUpdate {
	siu.mutation.ClearStatusCode()
	return siu
}

// SetSequenceID sets the "sequence_id" field.
func (siu *StatusItemUpdate) SetSequenceID(i int) *StatusItemUpdate {
	siu.mutation.ResetSequenceID()
	siu.mutation.SetSequenceID(i)
	return siu
}

// SetNillableSequenceID sets the "sequence_id" field if the given value is not nil.
func (siu *StatusItemUpdate) SetNillableSequenceID(i *int) *StatusItemUpdate {
	if i != nil {
		siu.SetSequenceID(*i)
	}
	return siu
}

// AddSequenceID adds i to the "sequence_id" field.
func (siu *StatusItemUpdate) AddSequenceID(i int) *StatusItemUpdate {
	siu.mutation.AddSequenceID(i)
	return siu
}

// ClearSequenceID clears the value of the "sequence_id" field.
func (siu *StatusItemUpdate) ClearSequenceID() *StatusItemUpdate {
	siu.mutation.ClearSequenceID()
	return siu
}

// SetDescription sets the "description" field.
func (siu *StatusItemUpdate) SetDescription(s string) *StatusItemUpdate {
	siu.mutation.SetDescription(s)
	return siu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (siu *StatusItemUpdate) SetNillableDescription(s *string) *StatusItemUpdate {
	if s != nil {
		siu.SetDescription(*s)
	}
	return siu
}

// ClearDescription clears the value of the "description" field.
func (siu *StatusItemUpdate) ClearDescription() *StatusItemUpdate {
	siu.mutation.ClearDescription()
	return siu
}

// SetStatusTypeID sets the "status_type" edge to the StatusType entity by ID.
func (siu *StatusItemUpdate) SetStatusTypeID(id int) *StatusItemUpdate {
	siu.mutation.SetStatusTypeID(id)
	return siu
}

// SetNillableStatusTypeID sets the "status_type" edge to the StatusType entity by ID if the given value is not nil.
func (siu *StatusItemUpdate) SetNillableStatusTypeID(id *int) *StatusItemUpdate {
	if id != nil {
		siu = siu.SetStatusTypeID(*id)
	}
	return siu
}

// SetStatusType sets the "status_type" edge to the StatusType entity.
func (siu *StatusItemUpdate) SetStatusType(s *StatusType) *StatusItemUpdate {
	return siu.SetStatusTypeID(s.ID)
}

// AddOrderHeaderIDs adds the "order_headers" edge to the OrderHeader entity by IDs.
func (siu *StatusItemUpdate) AddOrderHeaderIDs(ids ...int) *StatusItemUpdate {
	siu.mutation.AddOrderHeaderIDs(ids...)
	return siu
}

// AddOrderHeaders adds the "order_headers" edges to the OrderHeader entity.
func (siu *StatusItemUpdate) AddOrderHeaders(o ...*OrderHeader) *StatusItemUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return siu.AddOrderHeaderIDs(ids...)
}

// AddSyncOrderHeaderIDs adds the "sync_order_headers" edge to the OrderHeader entity by IDs.
func (siu *StatusItemUpdate) AddSyncOrderHeaderIDs(ids ...int) *StatusItemUpdate {
	siu.mutation.AddSyncOrderHeaderIDs(ids...)
	return siu
}

// AddSyncOrderHeaders adds the "sync_order_headers" edges to the OrderHeader entity.
func (siu *StatusItemUpdate) AddSyncOrderHeaders(o ...*OrderHeader) *StatusItemUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return siu.AddSyncOrderHeaderIDs(ids...)
}

// AddOrderItemIDs adds the "order_items" edge to the OrderItem entity by IDs.
func (siu *StatusItemUpdate) AddOrderItemIDs(ids ...int) *StatusItemUpdate {
	siu.mutation.AddOrderItemIDs(ids...)
	return siu
}

// AddOrderItems adds the "order_items" edges to the OrderItem entity.
func (siu *StatusItemUpdate) AddOrderItems(o ...*OrderItem) *StatusItemUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return siu.AddOrderItemIDs(ids...)
}

// AddSyncOrderItemIDs adds the "sync_order_items" edge to the OrderItem entity by IDs.
func (siu *StatusItemUpdate) AddSyncOrderItemIDs(ids ...int) *StatusItemUpdate {
	siu.mutation.AddSyncOrderItemIDs(ids...)
	return siu
}

// AddSyncOrderItems adds the "sync_order_items" edges to the OrderItem entity.
func (siu *StatusItemUpdate) AddSyncOrderItems(o ...*OrderItem) *StatusItemUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return siu.AddSyncOrderItemIDs(ids...)
}

// AddOrderPaymentPreferenceIDs adds the "order_payment_preferences" edge to the OrderPaymentPreference entity by IDs.
func (siu *StatusItemUpdate) AddOrderPaymentPreferenceIDs(ids ...int) *StatusItemUpdate {
	siu.mutation.AddOrderPaymentPreferenceIDs(ids...)
	return siu
}

// AddOrderPaymentPreferences adds the "order_payment_preferences" edges to the OrderPaymentPreference entity.
func (siu *StatusItemUpdate) AddOrderPaymentPreferences(o ...*OrderPaymentPreference) *StatusItemUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return siu.AddOrderPaymentPreferenceIDs(ids...)
}

// AddOrderStatusIDs adds the "order_statuses" edge to the OrderStatus entity by IDs.
func (siu *StatusItemUpdate) AddOrderStatusIDs(ids ...int) *StatusItemUpdate {
	siu.mutation.AddOrderStatusIDs(ids...)
	return siu
}

// AddOrderStatuses adds the "order_statuses" edges to the OrderStatus entity.
func (siu *StatusItemUpdate) AddOrderStatuses(o ...*OrderStatus) *StatusItemUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return siu.AddOrderStatusIDs(ids...)
}

// AddProductReviewIDs adds the "product_reviews" edge to the ProductReview entity by IDs.
func (siu *StatusItemUpdate) AddProductReviewIDs(ids ...int) *StatusItemUpdate {
	siu.mutation.AddProductReviewIDs(ids...)
	return siu
}

// AddProductReviews adds the "product_reviews" edges to the ProductReview entity.
func (siu *StatusItemUpdate) AddProductReviews(p ...*ProductReview) *StatusItemUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return siu.AddProductReviewIDs(ids...)
}

// AddHeaderApprovedProductStoreIDs adds the "header_approved_product_stores" edge to the ProductStore entity by IDs.
func (siu *StatusItemUpdate) AddHeaderApprovedProductStoreIDs(ids ...int) *StatusItemUpdate {
	siu.mutation.AddHeaderApprovedProductStoreIDs(ids...)
	return siu
}

// AddHeaderApprovedProductStores adds the "header_approved_product_stores" edges to the ProductStore entity.
func (siu *StatusItemUpdate) AddHeaderApprovedProductStores(p ...*ProductStore) *StatusItemUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return siu.AddHeaderApprovedProductStoreIDs(ids...)
}

// AddItemApprovedProductStoreIDs adds the "item_approved_product_stores" edge to the ProductStore entity by IDs.
func (siu *StatusItemUpdate) AddItemApprovedProductStoreIDs(ids ...int) *StatusItemUpdate {
	siu.mutation.AddItemApprovedProductStoreIDs(ids...)
	return siu
}

// AddItemApprovedProductStores adds the "item_approved_product_stores" edges to the ProductStore entity.
func (siu *StatusItemUpdate) AddItemApprovedProductStores(p ...*ProductStore) *StatusItemUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return siu.AddItemApprovedProductStoreIDs(ids...)
}

// AddDigitalItemApprovedProductStoreIDs adds the "digital_item_approved_product_stores" edge to the ProductStore entity by IDs.
func (siu *StatusItemUpdate) AddDigitalItemApprovedProductStoreIDs(ids ...int) *StatusItemUpdate {
	siu.mutation.AddDigitalItemApprovedProductStoreIDs(ids...)
	return siu
}

// AddDigitalItemApprovedProductStores adds the "digital_item_approved_product_stores" edges to the ProductStore entity.
func (siu *StatusItemUpdate) AddDigitalItemApprovedProductStores(p ...*ProductStore) *StatusItemUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return siu.AddDigitalItemApprovedProductStoreIDs(ids...)
}

// AddHeaderDeclinedProductStoreIDs adds the "header_declined_product_stores" edge to the ProductStore entity by IDs.
func (siu *StatusItemUpdate) AddHeaderDeclinedProductStoreIDs(ids ...int) *StatusItemUpdate {
	siu.mutation.AddHeaderDeclinedProductStoreIDs(ids...)
	return siu
}

// AddHeaderDeclinedProductStores adds the "header_declined_product_stores" edges to the ProductStore entity.
func (siu *StatusItemUpdate) AddHeaderDeclinedProductStores(p ...*ProductStore) *StatusItemUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return siu.AddHeaderDeclinedProductStoreIDs(ids...)
}

// AddItemDeclinedProductStoreIDs adds the "item_declined_product_stores" edge to the ProductStore entity by IDs.
func (siu *StatusItemUpdate) AddItemDeclinedProductStoreIDs(ids ...int) *StatusItemUpdate {
	siu.mutation.AddItemDeclinedProductStoreIDs(ids...)
	return siu
}

// AddItemDeclinedProductStores adds the "item_declined_product_stores" edges to the ProductStore entity.
func (siu *StatusItemUpdate) AddItemDeclinedProductStores(p ...*ProductStore) *StatusItemUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return siu.AddItemDeclinedProductStoreIDs(ids...)
}

// AddHeaderCancelProductStoreIDs adds the "header_cancel_product_stores" edge to the ProductStore entity by IDs.
func (siu *StatusItemUpdate) AddHeaderCancelProductStoreIDs(ids ...int) *StatusItemUpdate {
	siu.mutation.AddHeaderCancelProductStoreIDs(ids...)
	return siu
}

// AddHeaderCancelProductStores adds the "header_cancel_product_stores" edges to the ProductStore entity.
func (siu *StatusItemUpdate) AddHeaderCancelProductStores(p ...*ProductStore) *StatusItemUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return siu.AddHeaderCancelProductStoreIDs(ids...)
}

// AddItemCancelProductStoreIDs adds the "item_cancel_product_stores" edge to the ProductStore entity by IDs.
func (siu *StatusItemUpdate) AddItemCancelProductStoreIDs(ids ...int) *StatusItemUpdate {
	siu.mutation.AddItemCancelProductStoreIDs(ids...)
	return siu
}

// AddItemCancelProductStores adds the "item_cancel_product_stores" edges to the ProductStore entity.
func (siu *StatusItemUpdate) AddItemCancelProductStores(p ...*ProductStore) *StatusItemUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return siu.AddItemCancelProductStoreIDs(ids...)
}

// AddMainStatusValidChangeIDs adds the "main_status_valid_changes" edge to the StatusValidChange entity by IDs.
func (siu *StatusItemUpdate) AddMainStatusValidChangeIDs(ids ...int) *StatusItemUpdate {
	siu.mutation.AddMainStatusValidChangeIDs(ids...)
	return siu
}

// AddMainStatusValidChanges adds the "main_status_valid_changes" edges to the StatusValidChange entity.
func (siu *StatusItemUpdate) AddMainStatusValidChanges(s ...*StatusValidChange) *StatusItemUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return siu.AddMainStatusValidChangeIDs(ids...)
}

// AddToStatusValidChangeIDs adds the "to_status_valid_changes" edge to the StatusValidChange entity by IDs.
func (siu *StatusItemUpdate) AddToStatusValidChangeIDs(ids ...int) *StatusItemUpdate {
	siu.mutation.AddToStatusValidChangeIDs(ids...)
	return siu
}

// AddToStatusValidChanges adds the "to_status_valid_changes" edges to the StatusValidChange entity.
func (siu *StatusItemUpdate) AddToStatusValidChanges(s ...*StatusValidChange) *StatusItemUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return siu.AddToStatusValidChangeIDs(ids...)
}

// Mutation returns the StatusItemMutation object of the builder.
func (siu *StatusItemUpdate) Mutation() *StatusItemMutation {
	return siu.mutation
}

// ClearStatusType clears the "status_type" edge to the StatusType entity.
func (siu *StatusItemUpdate) ClearStatusType() *StatusItemUpdate {
	siu.mutation.ClearStatusType()
	return siu
}

// ClearOrderHeaders clears all "order_headers" edges to the OrderHeader entity.
func (siu *StatusItemUpdate) ClearOrderHeaders() *StatusItemUpdate {
	siu.mutation.ClearOrderHeaders()
	return siu
}

// RemoveOrderHeaderIDs removes the "order_headers" edge to OrderHeader entities by IDs.
func (siu *StatusItemUpdate) RemoveOrderHeaderIDs(ids ...int) *StatusItemUpdate {
	siu.mutation.RemoveOrderHeaderIDs(ids...)
	return siu
}

// RemoveOrderHeaders removes "order_headers" edges to OrderHeader entities.
func (siu *StatusItemUpdate) RemoveOrderHeaders(o ...*OrderHeader) *StatusItemUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return siu.RemoveOrderHeaderIDs(ids...)
}

// ClearSyncOrderHeaders clears all "sync_order_headers" edges to the OrderHeader entity.
func (siu *StatusItemUpdate) ClearSyncOrderHeaders() *StatusItemUpdate {
	siu.mutation.ClearSyncOrderHeaders()
	return siu
}

// RemoveSyncOrderHeaderIDs removes the "sync_order_headers" edge to OrderHeader entities by IDs.
func (siu *StatusItemUpdate) RemoveSyncOrderHeaderIDs(ids ...int) *StatusItemUpdate {
	siu.mutation.RemoveSyncOrderHeaderIDs(ids...)
	return siu
}

// RemoveSyncOrderHeaders removes "sync_order_headers" edges to OrderHeader entities.
func (siu *StatusItemUpdate) RemoveSyncOrderHeaders(o ...*OrderHeader) *StatusItemUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return siu.RemoveSyncOrderHeaderIDs(ids...)
}

// ClearOrderItems clears all "order_items" edges to the OrderItem entity.
func (siu *StatusItemUpdate) ClearOrderItems() *StatusItemUpdate {
	siu.mutation.ClearOrderItems()
	return siu
}

// RemoveOrderItemIDs removes the "order_items" edge to OrderItem entities by IDs.
func (siu *StatusItemUpdate) RemoveOrderItemIDs(ids ...int) *StatusItemUpdate {
	siu.mutation.RemoveOrderItemIDs(ids...)
	return siu
}

// RemoveOrderItems removes "order_items" edges to OrderItem entities.
func (siu *StatusItemUpdate) RemoveOrderItems(o ...*OrderItem) *StatusItemUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return siu.RemoveOrderItemIDs(ids...)
}

// ClearSyncOrderItems clears all "sync_order_items" edges to the OrderItem entity.
func (siu *StatusItemUpdate) ClearSyncOrderItems() *StatusItemUpdate {
	siu.mutation.ClearSyncOrderItems()
	return siu
}

// RemoveSyncOrderItemIDs removes the "sync_order_items" edge to OrderItem entities by IDs.
func (siu *StatusItemUpdate) RemoveSyncOrderItemIDs(ids ...int) *StatusItemUpdate {
	siu.mutation.RemoveSyncOrderItemIDs(ids...)
	return siu
}

// RemoveSyncOrderItems removes "sync_order_items" edges to OrderItem entities.
func (siu *StatusItemUpdate) RemoveSyncOrderItems(o ...*OrderItem) *StatusItemUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return siu.RemoveSyncOrderItemIDs(ids...)
}

// ClearOrderPaymentPreferences clears all "order_payment_preferences" edges to the OrderPaymentPreference entity.
func (siu *StatusItemUpdate) ClearOrderPaymentPreferences() *StatusItemUpdate {
	siu.mutation.ClearOrderPaymentPreferences()
	return siu
}

// RemoveOrderPaymentPreferenceIDs removes the "order_payment_preferences" edge to OrderPaymentPreference entities by IDs.
func (siu *StatusItemUpdate) RemoveOrderPaymentPreferenceIDs(ids ...int) *StatusItemUpdate {
	siu.mutation.RemoveOrderPaymentPreferenceIDs(ids...)
	return siu
}

// RemoveOrderPaymentPreferences removes "order_payment_preferences" edges to OrderPaymentPreference entities.
func (siu *StatusItemUpdate) RemoveOrderPaymentPreferences(o ...*OrderPaymentPreference) *StatusItemUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return siu.RemoveOrderPaymentPreferenceIDs(ids...)
}

// ClearOrderStatuses clears all "order_statuses" edges to the OrderStatus entity.
func (siu *StatusItemUpdate) ClearOrderStatuses() *StatusItemUpdate {
	siu.mutation.ClearOrderStatuses()
	return siu
}

// RemoveOrderStatusIDs removes the "order_statuses" edge to OrderStatus entities by IDs.
func (siu *StatusItemUpdate) RemoveOrderStatusIDs(ids ...int) *StatusItemUpdate {
	siu.mutation.RemoveOrderStatusIDs(ids...)
	return siu
}

// RemoveOrderStatuses removes "order_statuses" edges to OrderStatus entities.
func (siu *StatusItemUpdate) RemoveOrderStatuses(o ...*OrderStatus) *StatusItemUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return siu.RemoveOrderStatusIDs(ids...)
}

// ClearProductReviews clears all "product_reviews" edges to the ProductReview entity.
func (siu *StatusItemUpdate) ClearProductReviews() *StatusItemUpdate {
	siu.mutation.ClearProductReviews()
	return siu
}

// RemoveProductReviewIDs removes the "product_reviews" edge to ProductReview entities by IDs.
func (siu *StatusItemUpdate) RemoveProductReviewIDs(ids ...int) *StatusItemUpdate {
	siu.mutation.RemoveProductReviewIDs(ids...)
	return siu
}

// RemoveProductReviews removes "product_reviews" edges to ProductReview entities.
func (siu *StatusItemUpdate) RemoveProductReviews(p ...*ProductReview) *StatusItemUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return siu.RemoveProductReviewIDs(ids...)
}

// ClearHeaderApprovedProductStores clears all "header_approved_product_stores" edges to the ProductStore entity.
func (siu *StatusItemUpdate) ClearHeaderApprovedProductStores() *StatusItemUpdate {
	siu.mutation.ClearHeaderApprovedProductStores()
	return siu
}

// RemoveHeaderApprovedProductStoreIDs removes the "header_approved_product_stores" edge to ProductStore entities by IDs.
func (siu *StatusItemUpdate) RemoveHeaderApprovedProductStoreIDs(ids ...int) *StatusItemUpdate {
	siu.mutation.RemoveHeaderApprovedProductStoreIDs(ids...)
	return siu
}

// RemoveHeaderApprovedProductStores removes "header_approved_product_stores" edges to ProductStore entities.
func (siu *StatusItemUpdate) RemoveHeaderApprovedProductStores(p ...*ProductStore) *StatusItemUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return siu.RemoveHeaderApprovedProductStoreIDs(ids...)
}

// ClearItemApprovedProductStores clears all "item_approved_product_stores" edges to the ProductStore entity.
func (siu *StatusItemUpdate) ClearItemApprovedProductStores() *StatusItemUpdate {
	siu.mutation.ClearItemApprovedProductStores()
	return siu
}

// RemoveItemApprovedProductStoreIDs removes the "item_approved_product_stores" edge to ProductStore entities by IDs.
func (siu *StatusItemUpdate) RemoveItemApprovedProductStoreIDs(ids ...int) *StatusItemUpdate {
	siu.mutation.RemoveItemApprovedProductStoreIDs(ids...)
	return siu
}

// RemoveItemApprovedProductStores removes "item_approved_product_stores" edges to ProductStore entities.
func (siu *StatusItemUpdate) RemoveItemApprovedProductStores(p ...*ProductStore) *StatusItemUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return siu.RemoveItemApprovedProductStoreIDs(ids...)
}

// ClearDigitalItemApprovedProductStores clears all "digital_item_approved_product_stores" edges to the ProductStore entity.
func (siu *StatusItemUpdate) ClearDigitalItemApprovedProductStores() *StatusItemUpdate {
	siu.mutation.ClearDigitalItemApprovedProductStores()
	return siu
}

// RemoveDigitalItemApprovedProductStoreIDs removes the "digital_item_approved_product_stores" edge to ProductStore entities by IDs.
func (siu *StatusItemUpdate) RemoveDigitalItemApprovedProductStoreIDs(ids ...int) *StatusItemUpdate {
	siu.mutation.RemoveDigitalItemApprovedProductStoreIDs(ids...)
	return siu
}

// RemoveDigitalItemApprovedProductStores removes "digital_item_approved_product_stores" edges to ProductStore entities.
func (siu *StatusItemUpdate) RemoveDigitalItemApprovedProductStores(p ...*ProductStore) *StatusItemUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return siu.RemoveDigitalItemApprovedProductStoreIDs(ids...)
}

// ClearHeaderDeclinedProductStores clears all "header_declined_product_stores" edges to the ProductStore entity.
func (siu *StatusItemUpdate) ClearHeaderDeclinedProductStores() *StatusItemUpdate {
	siu.mutation.ClearHeaderDeclinedProductStores()
	return siu
}

// RemoveHeaderDeclinedProductStoreIDs removes the "header_declined_product_stores" edge to ProductStore entities by IDs.
func (siu *StatusItemUpdate) RemoveHeaderDeclinedProductStoreIDs(ids ...int) *StatusItemUpdate {
	siu.mutation.RemoveHeaderDeclinedProductStoreIDs(ids...)
	return siu
}

// RemoveHeaderDeclinedProductStores removes "header_declined_product_stores" edges to ProductStore entities.
func (siu *StatusItemUpdate) RemoveHeaderDeclinedProductStores(p ...*ProductStore) *StatusItemUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return siu.RemoveHeaderDeclinedProductStoreIDs(ids...)
}

// ClearItemDeclinedProductStores clears all "item_declined_product_stores" edges to the ProductStore entity.
func (siu *StatusItemUpdate) ClearItemDeclinedProductStores() *StatusItemUpdate {
	siu.mutation.ClearItemDeclinedProductStores()
	return siu
}

// RemoveItemDeclinedProductStoreIDs removes the "item_declined_product_stores" edge to ProductStore entities by IDs.
func (siu *StatusItemUpdate) RemoveItemDeclinedProductStoreIDs(ids ...int) *StatusItemUpdate {
	siu.mutation.RemoveItemDeclinedProductStoreIDs(ids...)
	return siu
}

// RemoveItemDeclinedProductStores removes "item_declined_product_stores" edges to ProductStore entities.
func (siu *StatusItemUpdate) RemoveItemDeclinedProductStores(p ...*ProductStore) *StatusItemUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return siu.RemoveItemDeclinedProductStoreIDs(ids...)
}

// ClearHeaderCancelProductStores clears all "header_cancel_product_stores" edges to the ProductStore entity.
func (siu *StatusItemUpdate) ClearHeaderCancelProductStores() *StatusItemUpdate {
	siu.mutation.ClearHeaderCancelProductStores()
	return siu
}

// RemoveHeaderCancelProductStoreIDs removes the "header_cancel_product_stores" edge to ProductStore entities by IDs.
func (siu *StatusItemUpdate) RemoveHeaderCancelProductStoreIDs(ids ...int) *StatusItemUpdate {
	siu.mutation.RemoveHeaderCancelProductStoreIDs(ids...)
	return siu
}

// RemoveHeaderCancelProductStores removes "header_cancel_product_stores" edges to ProductStore entities.
func (siu *StatusItemUpdate) RemoveHeaderCancelProductStores(p ...*ProductStore) *StatusItemUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return siu.RemoveHeaderCancelProductStoreIDs(ids...)
}

// ClearItemCancelProductStores clears all "item_cancel_product_stores" edges to the ProductStore entity.
func (siu *StatusItemUpdate) ClearItemCancelProductStores() *StatusItemUpdate {
	siu.mutation.ClearItemCancelProductStores()
	return siu
}

// RemoveItemCancelProductStoreIDs removes the "item_cancel_product_stores" edge to ProductStore entities by IDs.
func (siu *StatusItemUpdate) RemoveItemCancelProductStoreIDs(ids ...int) *StatusItemUpdate {
	siu.mutation.RemoveItemCancelProductStoreIDs(ids...)
	return siu
}

// RemoveItemCancelProductStores removes "item_cancel_product_stores" edges to ProductStore entities.
func (siu *StatusItemUpdate) RemoveItemCancelProductStores(p ...*ProductStore) *StatusItemUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return siu.RemoveItemCancelProductStoreIDs(ids...)
}

// ClearMainStatusValidChanges clears all "main_status_valid_changes" edges to the StatusValidChange entity.
func (siu *StatusItemUpdate) ClearMainStatusValidChanges() *StatusItemUpdate {
	siu.mutation.ClearMainStatusValidChanges()
	return siu
}

// RemoveMainStatusValidChangeIDs removes the "main_status_valid_changes" edge to StatusValidChange entities by IDs.
func (siu *StatusItemUpdate) RemoveMainStatusValidChangeIDs(ids ...int) *StatusItemUpdate {
	siu.mutation.RemoveMainStatusValidChangeIDs(ids...)
	return siu
}

// RemoveMainStatusValidChanges removes "main_status_valid_changes" edges to StatusValidChange entities.
func (siu *StatusItemUpdate) RemoveMainStatusValidChanges(s ...*StatusValidChange) *StatusItemUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return siu.RemoveMainStatusValidChangeIDs(ids...)
}

// ClearToStatusValidChanges clears all "to_status_valid_changes" edges to the StatusValidChange entity.
func (siu *StatusItemUpdate) ClearToStatusValidChanges() *StatusItemUpdate {
	siu.mutation.ClearToStatusValidChanges()
	return siu
}

// RemoveToStatusValidChangeIDs removes the "to_status_valid_changes" edge to StatusValidChange entities by IDs.
func (siu *StatusItemUpdate) RemoveToStatusValidChangeIDs(ids ...int) *StatusItemUpdate {
	siu.mutation.RemoveToStatusValidChangeIDs(ids...)
	return siu
}

// RemoveToStatusValidChanges removes "to_status_valid_changes" edges to StatusValidChange entities.
func (siu *StatusItemUpdate) RemoveToStatusValidChanges(s ...*StatusValidChange) *StatusItemUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return siu.RemoveToStatusValidChangeIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (siu *StatusItemUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	siu.defaults()
	if len(siu.hooks) == 0 {
		affected, err = siu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StatusItemMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			siu.mutation = mutation
			affected, err = siu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(siu.hooks) - 1; i >= 0; i-- {
			mut = siu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, siu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (siu *StatusItemUpdate) SaveX(ctx context.Context) int {
	affected, err := siu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (siu *StatusItemUpdate) Exec(ctx context.Context) error {
	_, err := siu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (siu *StatusItemUpdate) ExecX(ctx context.Context) {
	if err := siu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (siu *StatusItemUpdate) defaults() {
	if _, ok := siu.mutation.UpdateTime(); !ok {
		v := statusitem.UpdateDefaultUpdateTime()
		siu.mutation.SetUpdateTime(v)
	}
}

func (siu *StatusItemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   statusitem.Table,
			Columns: statusitem.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: statusitem.FieldID,
			},
		},
	}
	if ps := siu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := siu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: statusitem.FieldUpdateTime,
		})
	}
	if value, ok := siu.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: statusitem.FieldStringRef,
		})
	}
	if siu.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: statusitem.FieldStringRef,
		})
	}
	if value, ok := siu.mutation.StatusCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: statusitem.FieldStatusCode,
		})
	}
	if siu.mutation.StatusCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: statusitem.FieldStatusCode,
		})
	}
	if value, ok := siu.mutation.SequenceID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: statusitem.FieldSequenceID,
		})
	}
	if value, ok := siu.mutation.AddedSequenceID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: statusitem.FieldSequenceID,
		})
	}
	if siu.mutation.SequenceIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: statusitem.FieldSequenceID,
		})
	}
	if value, ok := siu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: statusitem.FieldDescription,
		})
	}
	if siu.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: statusitem.FieldDescription,
		})
	}
	if siu.mutation.StatusTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   statusitem.StatusTypeTable,
			Columns: []string{statusitem.StatusTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statustype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siu.mutation.StatusTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   statusitem.StatusTypeTable,
			Columns: []string{statusitem.StatusTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statustype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if siu.mutation.OrderHeadersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.OrderHeadersTable,
			Columns: []string{statusitem.OrderHeadersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderheader.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siu.mutation.RemovedOrderHeadersIDs(); len(nodes) > 0 && !siu.mutation.OrderHeadersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.OrderHeadersTable,
			Columns: []string{statusitem.OrderHeadersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderheader.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siu.mutation.OrderHeadersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.OrderHeadersTable,
			Columns: []string{statusitem.OrderHeadersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderheader.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if siu.mutation.SyncOrderHeadersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.SyncOrderHeadersTable,
			Columns: []string{statusitem.SyncOrderHeadersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderheader.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siu.mutation.RemovedSyncOrderHeadersIDs(); len(nodes) > 0 && !siu.mutation.SyncOrderHeadersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.SyncOrderHeadersTable,
			Columns: []string{statusitem.SyncOrderHeadersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderheader.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siu.mutation.SyncOrderHeadersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.SyncOrderHeadersTable,
			Columns: []string{statusitem.SyncOrderHeadersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderheader.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if siu.mutation.OrderItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.OrderItemsTable,
			Columns: []string{statusitem.OrderItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitem.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siu.mutation.RemovedOrderItemsIDs(); len(nodes) > 0 && !siu.mutation.OrderItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.OrderItemsTable,
			Columns: []string{statusitem.OrderItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siu.mutation.OrderItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.OrderItemsTable,
			Columns: []string{statusitem.OrderItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if siu.mutation.SyncOrderItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.SyncOrderItemsTable,
			Columns: []string{statusitem.SyncOrderItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitem.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siu.mutation.RemovedSyncOrderItemsIDs(); len(nodes) > 0 && !siu.mutation.SyncOrderItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.SyncOrderItemsTable,
			Columns: []string{statusitem.SyncOrderItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siu.mutation.SyncOrderItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.SyncOrderItemsTable,
			Columns: []string{statusitem.SyncOrderItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if siu.mutation.OrderPaymentPreferencesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.OrderPaymentPreferencesTable,
			Columns: []string{statusitem.OrderPaymentPreferencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderpaymentpreference.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siu.mutation.RemovedOrderPaymentPreferencesIDs(); len(nodes) > 0 && !siu.mutation.OrderPaymentPreferencesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.OrderPaymentPreferencesTable,
			Columns: []string{statusitem.OrderPaymentPreferencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderpaymentpreference.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siu.mutation.OrderPaymentPreferencesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.OrderPaymentPreferencesTable,
			Columns: []string{statusitem.OrderPaymentPreferencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderpaymentpreference.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if siu.mutation.OrderStatusesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.OrderStatusesTable,
			Columns: []string{statusitem.OrderStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderstatus.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siu.mutation.RemovedOrderStatusesIDs(); len(nodes) > 0 && !siu.mutation.OrderStatusesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.OrderStatusesTable,
			Columns: []string{statusitem.OrderStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderstatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siu.mutation.OrderStatusesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.OrderStatusesTable,
			Columns: []string{statusitem.OrderStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderstatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if siu.mutation.ProductReviewsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.ProductReviewsTable,
			Columns: []string{statusitem.ProductReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productreview.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siu.mutation.RemovedProductReviewsIDs(); len(nodes) > 0 && !siu.mutation.ProductReviewsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.ProductReviewsTable,
			Columns: []string{statusitem.ProductReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productreview.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siu.mutation.ProductReviewsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.ProductReviewsTable,
			Columns: []string{statusitem.ProductReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productreview.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if siu.mutation.HeaderApprovedProductStoresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.HeaderApprovedProductStoresTable,
			Columns: []string{statusitem.HeaderApprovedProductStoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productstore.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siu.mutation.RemovedHeaderApprovedProductStoresIDs(); len(nodes) > 0 && !siu.mutation.HeaderApprovedProductStoresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.HeaderApprovedProductStoresTable,
			Columns: []string{statusitem.HeaderApprovedProductStoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productstore.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siu.mutation.HeaderApprovedProductStoresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.HeaderApprovedProductStoresTable,
			Columns: []string{statusitem.HeaderApprovedProductStoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productstore.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if siu.mutation.ItemApprovedProductStoresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.ItemApprovedProductStoresTable,
			Columns: []string{statusitem.ItemApprovedProductStoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productstore.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siu.mutation.RemovedItemApprovedProductStoresIDs(); len(nodes) > 0 && !siu.mutation.ItemApprovedProductStoresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.ItemApprovedProductStoresTable,
			Columns: []string{statusitem.ItemApprovedProductStoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productstore.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siu.mutation.ItemApprovedProductStoresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.ItemApprovedProductStoresTable,
			Columns: []string{statusitem.ItemApprovedProductStoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productstore.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if siu.mutation.DigitalItemApprovedProductStoresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.DigitalItemApprovedProductStoresTable,
			Columns: []string{statusitem.DigitalItemApprovedProductStoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productstore.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siu.mutation.RemovedDigitalItemApprovedProductStoresIDs(); len(nodes) > 0 && !siu.mutation.DigitalItemApprovedProductStoresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.DigitalItemApprovedProductStoresTable,
			Columns: []string{statusitem.DigitalItemApprovedProductStoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productstore.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siu.mutation.DigitalItemApprovedProductStoresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.DigitalItemApprovedProductStoresTable,
			Columns: []string{statusitem.DigitalItemApprovedProductStoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productstore.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if siu.mutation.HeaderDeclinedProductStoresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.HeaderDeclinedProductStoresTable,
			Columns: []string{statusitem.HeaderDeclinedProductStoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productstore.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siu.mutation.RemovedHeaderDeclinedProductStoresIDs(); len(nodes) > 0 && !siu.mutation.HeaderDeclinedProductStoresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.HeaderDeclinedProductStoresTable,
			Columns: []string{statusitem.HeaderDeclinedProductStoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productstore.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siu.mutation.HeaderDeclinedProductStoresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.HeaderDeclinedProductStoresTable,
			Columns: []string{statusitem.HeaderDeclinedProductStoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productstore.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if siu.mutation.ItemDeclinedProductStoresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.ItemDeclinedProductStoresTable,
			Columns: []string{statusitem.ItemDeclinedProductStoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productstore.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siu.mutation.RemovedItemDeclinedProductStoresIDs(); len(nodes) > 0 && !siu.mutation.ItemDeclinedProductStoresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.ItemDeclinedProductStoresTable,
			Columns: []string{statusitem.ItemDeclinedProductStoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productstore.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siu.mutation.ItemDeclinedProductStoresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.ItemDeclinedProductStoresTable,
			Columns: []string{statusitem.ItemDeclinedProductStoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productstore.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if siu.mutation.HeaderCancelProductStoresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.HeaderCancelProductStoresTable,
			Columns: []string{statusitem.HeaderCancelProductStoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productstore.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siu.mutation.RemovedHeaderCancelProductStoresIDs(); len(nodes) > 0 && !siu.mutation.HeaderCancelProductStoresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.HeaderCancelProductStoresTable,
			Columns: []string{statusitem.HeaderCancelProductStoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productstore.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siu.mutation.HeaderCancelProductStoresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.HeaderCancelProductStoresTable,
			Columns: []string{statusitem.HeaderCancelProductStoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productstore.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if siu.mutation.ItemCancelProductStoresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.ItemCancelProductStoresTable,
			Columns: []string{statusitem.ItemCancelProductStoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productstore.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siu.mutation.RemovedItemCancelProductStoresIDs(); len(nodes) > 0 && !siu.mutation.ItemCancelProductStoresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.ItemCancelProductStoresTable,
			Columns: []string{statusitem.ItemCancelProductStoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productstore.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siu.mutation.ItemCancelProductStoresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.ItemCancelProductStoresTable,
			Columns: []string{statusitem.ItemCancelProductStoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productstore.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if siu.mutation.MainStatusValidChangesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.MainStatusValidChangesTable,
			Columns: []string{statusitem.MainStatusValidChangesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusvalidchange.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siu.mutation.RemovedMainStatusValidChangesIDs(); len(nodes) > 0 && !siu.mutation.MainStatusValidChangesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.MainStatusValidChangesTable,
			Columns: []string{statusitem.MainStatusValidChangesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusvalidchange.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siu.mutation.MainStatusValidChangesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.MainStatusValidChangesTable,
			Columns: []string{statusitem.MainStatusValidChangesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusvalidchange.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if siu.mutation.ToStatusValidChangesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.ToStatusValidChangesTable,
			Columns: []string{statusitem.ToStatusValidChangesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusvalidchange.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siu.mutation.RemovedToStatusValidChangesIDs(); len(nodes) > 0 && !siu.mutation.ToStatusValidChangesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.ToStatusValidChangesTable,
			Columns: []string{statusitem.ToStatusValidChangesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusvalidchange.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siu.mutation.ToStatusValidChangesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.ToStatusValidChangesTable,
			Columns: []string{statusitem.ToStatusValidChangesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusvalidchange.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, siu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{statusitem.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// StatusItemUpdateOne is the builder for updating a single StatusItem entity.
type StatusItemUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StatusItemMutation
}

// SetStringRef sets the "string_ref" field.
func (siuo *StatusItemUpdateOne) SetStringRef(s string) *StatusItemUpdateOne {
	siuo.mutation.SetStringRef(s)
	return siuo
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (siuo *StatusItemUpdateOne) SetNillableStringRef(s *string) *StatusItemUpdateOne {
	if s != nil {
		siuo.SetStringRef(*s)
	}
	return siuo
}

// ClearStringRef clears the value of the "string_ref" field.
func (siuo *StatusItemUpdateOne) ClearStringRef() *StatusItemUpdateOne {
	siuo.mutation.ClearStringRef()
	return siuo
}

// SetStatusCode sets the "status_code" field.
func (siuo *StatusItemUpdateOne) SetStatusCode(s string) *StatusItemUpdateOne {
	siuo.mutation.SetStatusCode(s)
	return siuo
}

// SetNillableStatusCode sets the "status_code" field if the given value is not nil.
func (siuo *StatusItemUpdateOne) SetNillableStatusCode(s *string) *StatusItemUpdateOne {
	if s != nil {
		siuo.SetStatusCode(*s)
	}
	return siuo
}

// ClearStatusCode clears the value of the "status_code" field.
func (siuo *StatusItemUpdateOne) ClearStatusCode() *StatusItemUpdateOne {
	siuo.mutation.ClearStatusCode()
	return siuo
}

// SetSequenceID sets the "sequence_id" field.
func (siuo *StatusItemUpdateOne) SetSequenceID(i int) *StatusItemUpdateOne {
	siuo.mutation.ResetSequenceID()
	siuo.mutation.SetSequenceID(i)
	return siuo
}

// SetNillableSequenceID sets the "sequence_id" field if the given value is not nil.
func (siuo *StatusItemUpdateOne) SetNillableSequenceID(i *int) *StatusItemUpdateOne {
	if i != nil {
		siuo.SetSequenceID(*i)
	}
	return siuo
}

// AddSequenceID adds i to the "sequence_id" field.
func (siuo *StatusItemUpdateOne) AddSequenceID(i int) *StatusItemUpdateOne {
	siuo.mutation.AddSequenceID(i)
	return siuo
}

// ClearSequenceID clears the value of the "sequence_id" field.
func (siuo *StatusItemUpdateOne) ClearSequenceID() *StatusItemUpdateOne {
	siuo.mutation.ClearSequenceID()
	return siuo
}

// SetDescription sets the "description" field.
func (siuo *StatusItemUpdateOne) SetDescription(s string) *StatusItemUpdateOne {
	siuo.mutation.SetDescription(s)
	return siuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (siuo *StatusItemUpdateOne) SetNillableDescription(s *string) *StatusItemUpdateOne {
	if s != nil {
		siuo.SetDescription(*s)
	}
	return siuo
}

// ClearDescription clears the value of the "description" field.
func (siuo *StatusItemUpdateOne) ClearDescription() *StatusItemUpdateOne {
	siuo.mutation.ClearDescription()
	return siuo
}

// SetStatusTypeID sets the "status_type" edge to the StatusType entity by ID.
func (siuo *StatusItemUpdateOne) SetStatusTypeID(id int) *StatusItemUpdateOne {
	siuo.mutation.SetStatusTypeID(id)
	return siuo
}

// SetNillableStatusTypeID sets the "status_type" edge to the StatusType entity by ID if the given value is not nil.
func (siuo *StatusItemUpdateOne) SetNillableStatusTypeID(id *int) *StatusItemUpdateOne {
	if id != nil {
		siuo = siuo.SetStatusTypeID(*id)
	}
	return siuo
}

// SetStatusType sets the "status_type" edge to the StatusType entity.
func (siuo *StatusItemUpdateOne) SetStatusType(s *StatusType) *StatusItemUpdateOne {
	return siuo.SetStatusTypeID(s.ID)
}

// AddOrderHeaderIDs adds the "order_headers" edge to the OrderHeader entity by IDs.
func (siuo *StatusItemUpdateOne) AddOrderHeaderIDs(ids ...int) *StatusItemUpdateOne {
	siuo.mutation.AddOrderHeaderIDs(ids...)
	return siuo
}

// AddOrderHeaders adds the "order_headers" edges to the OrderHeader entity.
func (siuo *StatusItemUpdateOne) AddOrderHeaders(o ...*OrderHeader) *StatusItemUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return siuo.AddOrderHeaderIDs(ids...)
}

// AddSyncOrderHeaderIDs adds the "sync_order_headers" edge to the OrderHeader entity by IDs.
func (siuo *StatusItemUpdateOne) AddSyncOrderHeaderIDs(ids ...int) *StatusItemUpdateOne {
	siuo.mutation.AddSyncOrderHeaderIDs(ids...)
	return siuo
}

// AddSyncOrderHeaders adds the "sync_order_headers" edges to the OrderHeader entity.
func (siuo *StatusItemUpdateOne) AddSyncOrderHeaders(o ...*OrderHeader) *StatusItemUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return siuo.AddSyncOrderHeaderIDs(ids...)
}

// AddOrderItemIDs adds the "order_items" edge to the OrderItem entity by IDs.
func (siuo *StatusItemUpdateOne) AddOrderItemIDs(ids ...int) *StatusItemUpdateOne {
	siuo.mutation.AddOrderItemIDs(ids...)
	return siuo
}

// AddOrderItems adds the "order_items" edges to the OrderItem entity.
func (siuo *StatusItemUpdateOne) AddOrderItems(o ...*OrderItem) *StatusItemUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return siuo.AddOrderItemIDs(ids...)
}

// AddSyncOrderItemIDs adds the "sync_order_items" edge to the OrderItem entity by IDs.
func (siuo *StatusItemUpdateOne) AddSyncOrderItemIDs(ids ...int) *StatusItemUpdateOne {
	siuo.mutation.AddSyncOrderItemIDs(ids...)
	return siuo
}

// AddSyncOrderItems adds the "sync_order_items" edges to the OrderItem entity.
func (siuo *StatusItemUpdateOne) AddSyncOrderItems(o ...*OrderItem) *StatusItemUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return siuo.AddSyncOrderItemIDs(ids...)
}

// AddOrderPaymentPreferenceIDs adds the "order_payment_preferences" edge to the OrderPaymentPreference entity by IDs.
func (siuo *StatusItemUpdateOne) AddOrderPaymentPreferenceIDs(ids ...int) *StatusItemUpdateOne {
	siuo.mutation.AddOrderPaymentPreferenceIDs(ids...)
	return siuo
}

// AddOrderPaymentPreferences adds the "order_payment_preferences" edges to the OrderPaymentPreference entity.
func (siuo *StatusItemUpdateOne) AddOrderPaymentPreferences(o ...*OrderPaymentPreference) *StatusItemUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return siuo.AddOrderPaymentPreferenceIDs(ids...)
}

// AddOrderStatusIDs adds the "order_statuses" edge to the OrderStatus entity by IDs.
func (siuo *StatusItemUpdateOne) AddOrderStatusIDs(ids ...int) *StatusItemUpdateOne {
	siuo.mutation.AddOrderStatusIDs(ids...)
	return siuo
}

// AddOrderStatuses adds the "order_statuses" edges to the OrderStatus entity.
func (siuo *StatusItemUpdateOne) AddOrderStatuses(o ...*OrderStatus) *StatusItemUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return siuo.AddOrderStatusIDs(ids...)
}

// AddProductReviewIDs adds the "product_reviews" edge to the ProductReview entity by IDs.
func (siuo *StatusItemUpdateOne) AddProductReviewIDs(ids ...int) *StatusItemUpdateOne {
	siuo.mutation.AddProductReviewIDs(ids...)
	return siuo
}

// AddProductReviews adds the "product_reviews" edges to the ProductReview entity.
func (siuo *StatusItemUpdateOne) AddProductReviews(p ...*ProductReview) *StatusItemUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return siuo.AddProductReviewIDs(ids...)
}

// AddHeaderApprovedProductStoreIDs adds the "header_approved_product_stores" edge to the ProductStore entity by IDs.
func (siuo *StatusItemUpdateOne) AddHeaderApprovedProductStoreIDs(ids ...int) *StatusItemUpdateOne {
	siuo.mutation.AddHeaderApprovedProductStoreIDs(ids...)
	return siuo
}

// AddHeaderApprovedProductStores adds the "header_approved_product_stores" edges to the ProductStore entity.
func (siuo *StatusItemUpdateOne) AddHeaderApprovedProductStores(p ...*ProductStore) *StatusItemUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return siuo.AddHeaderApprovedProductStoreIDs(ids...)
}

// AddItemApprovedProductStoreIDs adds the "item_approved_product_stores" edge to the ProductStore entity by IDs.
func (siuo *StatusItemUpdateOne) AddItemApprovedProductStoreIDs(ids ...int) *StatusItemUpdateOne {
	siuo.mutation.AddItemApprovedProductStoreIDs(ids...)
	return siuo
}

// AddItemApprovedProductStores adds the "item_approved_product_stores" edges to the ProductStore entity.
func (siuo *StatusItemUpdateOne) AddItemApprovedProductStores(p ...*ProductStore) *StatusItemUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return siuo.AddItemApprovedProductStoreIDs(ids...)
}

// AddDigitalItemApprovedProductStoreIDs adds the "digital_item_approved_product_stores" edge to the ProductStore entity by IDs.
func (siuo *StatusItemUpdateOne) AddDigitalItemApprovedProductStoreIDs(ids ...int) *StatusItemUpdateOne {
	siuo.mutation.AddDigitalItemApprovedProductStoreIDs(ids...)
	return siuo
}

// AddDigitalItemApprovedProductStores adds the "digital_item_approved_product_stores" edges to the ProductStore entity.
func (siuo *StatusItemUpdateOne) AddDigitalItemApprovedProductStores(p ...*ProductStore) *StatusItemUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return siuo.AddDigitalItemApprovedProductStoreIDs(ids...)
}

// AddHeaderDeclinedProductStoreIDs adds the "header_declined_product_stores" edge to the ProductStore entity by IDs.
func (siuo *StatusItemUpdateOne) AddHeaderDeclinedProductStoreIDs(ids ...int) *StatusItemUpdateOne {
	siuo.mutation.AddHeaderDeclinedProductStoreIDs(ids...)
	return siuo
}

// AddHeaderDeclinedProductStores adds the "header_declined_product_stores" edges to the ProductStore entity.
func (siuo *StatusItemUpdateOne) AddHeaderDeclinedProductStores(p ...*ProductStore) *StatusItemUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return siuo.AddHeaderDeclinedProductStoreIDs(ids...)
}

// AddItemDeclinedProductStoreIDs adds the "item_declined_product_stores" edge to the ProductStore entity by IDs.
func (siuo *StatusItemUpdateOne) AddItemDeclinedProductStoreIDs(ids ...int) *StatusItemUpdateOne {
	siuo.mutation.AddItemDeclinedProductStoreIDs(ids...)
	return siuo
}

// AddItemDeclinedProductStores adds the "item_declined_product_stores" edges to the ProductStore entity.
func (siuo *StatusItemUpdateOne) AddItemDeclinedProductStores(p ...*ProductStore) *StatusItemUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return siuo.AddItemDeclinedProductStoreIDs(ids...)
}

// AddHeaderCancelProductStoreIDs adds the "header_cancel_product_stores" edge to the ProductStore entity by IDs.
func (siuo *StatusItemUpdateOne) AddHeaderCancelProductStoreIDs(ids ...int) *StatusItemUpdateOne {
	siuo.mutation.AddHeaderCancelProductStoreIDs(ids...)
	return siuo
}

// AddHeaderCancelProductStores adds the "header_cancel_product_stores" edges to the ProductStore entity.
func (siuo *StatusItemUpdateOne) AddHeaderCancelProductStores(p ...*ProductStore) *StatusItemUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return siuo.AddHeaderCancelProductStoreIDs(ids...)
}

// AddItemCancelProductStoreIDs adds the "item_cancel_product_stores" edge to the ProductStore entity by IDs.
func (siuo *StatusItemUpdateOne) AddItemCancelProductStoreIDs(ids ...int) *StatusItemUpdateOne {
	siuo.mutation.AddItemCancelProductStoreIDs(ids...)
	return siuo
}

// AddItemCancelProductStores adds the "item_cancel_product_stores" edges to the ProductStore entity.
func (siuo *StatusItemUpdateOne) AddItemCancelProductStores(p ...*ProductStore) *StatusItemUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return siuo.AddItemCancelProductStoreIDs(ids...)
}

// AddMainStatusValidChangeIDs adds the "main_status_valid_changes" edge to the StatusValidChange entity by IDs.
func (siuo *StatusItemUpdateOne) AddMainStatusValidChangeIDs(ids ...int) *StatusItemUpdateOne {
	siuo.mutation.AddMainStatusValidChangeIDs(ids...)
	return siuo
}

// AddMainStatusValidChanges adds the "main_status_valid_changes" edges to the StatusValidChange entity.
func (siuo *StatusItemUpdateOne) AddMainStatusValidChanges(s ...*StatusValidChange) *StatusItemUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return siuo.AddMainStatusValidChangeIDs(ids...)
}

// AddToStatusValidChangeIDs adds the "to_status_valid_changes" edge to the StatusValidChange entity by IDs.
func (siuo *StatusItemUpdateOne) AddToStatusValidChangeIDs(ids ...int) *StatusItemUpdateOne {
	siuo.mutation.AddToStatusValidChangeIDs(ids...)
	return siuo
}

// AddToStatusValidChanges adds the "to_status_valid_changes" edges to the StatusValidChange entity.
func (siuo *StatusItemUpdateOne) AddToStatusValidChanges(s ...*StatusValidChange) *StatusItemUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return siuo.AddToStatusValidChangeIDs(ids...)
}

// Mutation returns the StatusItemMutation object of the builder.
func (siuo *StatusItemUpdateOne) Mutation() *StatusItemMutation {
	return siuo.mutation
}

// ClearStatusType clears the "status_type" edge to the StatusType entity.
func (siuo *StatusItemUpdateOne) ClearStatusType() *StatusItemUpdateOne {
	siuo.mutation.ClearStatusType()
	return siuo
}

// ClearOrderHeaders clears all "order_headers" edges to the OrderHeader entity.
func (siuo *StatusItemUpdateOne) ClearOrderHeaders() *StatusItemUpdateOne {
	siuo.mutation.ClearOrderHeaders()
	return siuo
}

// RemoveOrderHeaderIDs removes the "order_headers" edge to OrderHeader entities by IDs.
func (siuo *StatusItemUpdateOne) RemoveOrderHeaderIDs(ids ...int) *StatusItemUpdateOne {
	siuo.mutation.RemoveOrderHeaderIDs(ids...)
	return siuo
}

// RemoveOrderHeaders removes "order_headers" edges to OrderHeader entities.
func (siuo *StatusItemUpdateOne) RemoveOrderHeaders(o ...*OrderHeader) *StatusItemUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return siuo.RemoveOrderHeaderIDs(ids...)
}

// ClearSyncOrderHeaders clears all "sync_order_headers" edges to the OrderHeader entity.
func (siuo *StatusItemUpdateOne) ClearSyncOrderHeaders() *StatusItemUpdateOne {
	siuo.mutation.ClearSyncOrderHeaders()
	return siuo
}

// RemoveSyncOrderHeaderIDs removes the "sync_order_headers" edge to OrderHeader entities by IDs.
func (siuo *StatusItemUpdateOne) RemoveSyncOrderHeaderIDs(ids ...int) *StatusItemUpdateOne {
	siuo.mutation.RemoveSyncOrderHeaderIDs(ids...)
	return siuo
}

// RemoveSyncOrderHeaders removes "sync_order_headers" edges to OrderHeader entities.
func (siuo *StatusItemUpdateOne) RemoveSyncOrderHeaders(o ...*OrderHeader) *StatusItemUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return siuo.RemoveSyncOrderHeaderIDs(ids...)
}

// ClearOrderItems clears all "order_items" edges to the OrderItem entity.
func (siuo *StatusItemUpdateOne) ClearOrderItems() *StatusItemUpdateOne {
	siuo.mutation.ClearOrderItems()
	return siuo
}

// RemoveOrderItemIDs removes the "order_items" edge to OrderItem entities by IDs.
func (siuo *StatusItemUpdateOne) RemoveOrderItemIDs(ids ...int) *StatusItemUpdateOne {
	siuo.mutation.RemoveOrderItemIDs(ids...)
	return siuo
}

// RemoveOrderItems removes "order_items" edges to OrderItem entities.
func (siuo *StatusItemUpdateOne) RemoveOrderItems(o ...*OrderItem) *StatusItemUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return siuo.RemoveOrderItemIDs(ids...)
}

// ClearSyncOrderItems clears all "sync_order_items" edges to the OrderItem entity.
func (siuo *StatusItemUpdateOne) ClearSyncOrderItems() *StatusItemUpdateOne {
	siuo.mutation.ClearSyncOrderItems()
	return siuo
}

// RemoveSyncOrderItemIDs removes the "sync_order_items" edge to OrderItem entities by IDs.
func (siuo *StatusItemUpdateOne) RemoveSyncOrderItemIDs(ids ...int) *StatusItemUpdateOne {
	siuo.mutation.RemoveSyncOrderItemIDs(ids...)
	return siuo
}

// RemoveSyncOrderItems removes "sync_order_items" edges to OrderItem entities.
func (siuo *StatusItemUpdateOne) RemoveSyncOrderItems(o ...*OrderItem) *StatusItemUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return siuo.RemoveSyncOrderItemIDs(ids...)
}

// ClearOrderPaymentPreferences clears all "order_payment_preferences" edges to the OrderPaymentPreference entity.
func (siuo *StatusItemUpdateOne) ClearOrderPaymentPreferences() *StatusItemUpdateOne {
	siuo.mutation.ClearOrderPaymentPreferences()
	return siuo
}

// RemoveOrderPaymentPreferenceIDs removes the "order_payment_preferences" edge to OrderPaymentPreference entities by IDs.
func (siuo *StatusItemUpdateOne) RemoveOrderPaymentPreferenceIDs(ids ...int) *StatusItemUpdateOne {
	siuo.mutation.RemoveOrderPaymentPreferenceIDs(ids...)
	return siuo
}

// RemoveOrderPaymentPreferences removes "order_payment_preferences" edges to OrderPaymentPreference entities.
func (siuo *StatusItemUpdateOne) RemoveOrderPaymentPreferences(o ...*OrderPaymentPreference) *StatusItemUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return siuo.RemoveOrderPaymentPreferenceIDs(ids...)
}

// ClearOrderStatuses clears all "order_statuses" edges to the OrderStatus entity.
func (siuo *StatusItemUpdateOne) ClearOrderStatuses() *StatusItemUpdateOne {
	siuo.mutation.ClearOrderStatuses()
	return siuo
}

// RemoveOrderStatusIDs removes the "order_statuses" edge to OrderStatus entities by IDs.
func (siuo *StatusItemUpdateOne) RemoveOrderStatusIDs(ids ...int) *StatusItemUpdateOne {
	siuo.mutation.RemoveOrderStatusIDs(ids...)
	return siuo
}

// RemoveOrderStatuses removes "order_statuses" edges to OrderStatus entities.
func (siuo *StatusItemUpdateOne) RemoveOrderStatuses(o ...*OrderStatus) *StatusItemUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return siuo.RemoveOrderStatusIDs(ids...)
}

// ClearProductReviews clears all "product_reviews" edges to the ProductReview entity.
func (siuo *StatusItemUpdateOne) ClearProductReviews() *StatusItemUpdateOne {
	siuo.mutation.ClearProductReviews()
	return siuo
}

// RemoveProductReviewIDs removes the "product_reviews" edge to ProductReview entities by IDs.
func (siuo *StatusItemUpdateOne) RemoveProductReviewIDs(ids ...int) *StatusItemUpdateOne {
	siuo.mutation.RemoveProductReviewIDs(ids...)
	return siuo
}

// RemoveProductReviews removes "product_reviews" edges to ProductReview entities.
func (siuo *StatusItemUpdateOne) RemoveProductReviews(p ...*ProductReview) *StatusItemUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return siuo.RemoveProductReviewIDs(ids...)
}

// ClearHeaderApprovedProductStores clears all "header_approved_product_stores" edges to the ProductStore entity.
func (siuo *StatusItemUpdateOne) ClearHeaderApprovedProductStores() *StatusItemUpdateOne {
	siuo.mutation.ClearHeaderApprovedProductStores()
	return siuo
}

// RemoveHeaderApprovedProductStoreIDs removes the "header_approved_product_stores" edge to ProductStore entities by IDs.
func (siuo *StatusItemUpdateOne) RemoveHeaderApprovedProductStoreIDs(ids ...int) *StatusItemUpdateOne {
	siuo.mutation.RemoveHeaderApprovedProductStoreIDs(ids...)
	return siuo
}

// RemoveHeaderApprovedProductStores removes "header_approved_product_stores" edges to ProductStore entities.
func (siuo *StatusItemUpdateOne) RemoveHeaderApprovedProductStores(p ...*ProductStore) *StatusItemUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return siuo.RemoveHeaderApprovedProductStoreIDs(ids...)
}

// ClearItemApprovedProductStores clears all "item_approved_product_stores" edges to the ProductStore entity.
func (siuo *StatusItemUpdateOne) ClearItemApprovedProductStores() *StatusItemUpdateOne {
	siuo.mutation.ClearItemApprovedProductStores()
	return siuo
}

// RemoveItemApprovedProductStoreIDs removes the "item_approved_product_stores" edge to ProductStore entities by IDs.
func (siuo *StatusItemUpdateOne) RemoveItemApprovedProductStoreIDs(ids ...int) *StatusItemUpdateOne {
	siuo.mutation.RemoveItemApprovedProductStoreIDs(ids...)
	return siuo
}

// RemoveItemApprovedProductStores removes "item_approved_product_stores" edges to ProductStore entities.
func (siuo *StatusItemUpdateOne) RemoveItemApprovedProductStores(p ...*ProductStore) *StatusItemUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return siuo.RemoveItemApprovedProductStoreIDs(ids...)
}

// ClearDigitalItemApprovedProductStores clears all "digital_item_approved_product_stores" edges to the ProductStore entity.
func (siuo *StatusItemUpdateOne) ClearDigitalItemApprovedProductStores() *StatusItemUpdateOne {
	siuo.mutation.ClearDigitalItemApprovedProductStores()
	return siuo
}

// RemoveDigitalItemApprovedProductStoreIDs removes the "digital_item_approved_product_stores" edge to ProductStore entities by IDs.
func (siuo *StatusItemUpdateOne) RemoveDigitalItemApprovedProductStoreIDs(ids ...int) *StatusItemUpdateOne {
	siuo.mutation.RemoveDigitalItemApprovedProductStoreIDs(ids...)
	return siuo
}

// RemoveDigitalItemApprovedProductStores removes "digital_item_approved_product_stores" edges to ProductStore entities.
func (siuo *StatusItemUpdateOne) RemoveDigitalItemApprovedProductStores(p ...*ProductStore) *StatusItemUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return siuo.RemoveDigitalItemApprovedProductStoreIDs(ids...)
}

// ClearHeaderDeclinedProductStores clears all "header_declined_product_stores" edges to the ProductStore entity.
func (siuo *StatusItemUpdateOne) ClearHeaderDeclinedProductStores() *StatusItemUpdateOne {
	siuo.mutation.ClearHeaderDeclinedProductStores()
	return siuo
}

// RemoveHeaderDeclinedProductStoreIDs removes the "header_declined_product_stores" edge to ProductStore entities by IDs.
func (siuo *StatusItemUpdateOne) RemoveHeaderDeclinedProductStoreIDs(ids ...int) *StatusItemUpdateOne {
	siuo.mutation.RemoveHeaderDeclinedProductStoreIDs(ids...)
	return siuo
}

// RemoveHeaderDeclinedProductStores removes "header_declined_product_stores" edges to ProductStore entities.
func (siuo *StatusItemUpdateOne) RemoveHeaderDeclinedProductStores(p ...*ProductStore) *StatusItemUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return siuo.RemoveHeaderDeclinedProductStoreIDs(ids...)
}

// ClearItemDeclinedProductStores clears all "item_declined_product_stores" edges to the ProductStore entity.
func (siuo *StatusItemUpdateOne) ClearItemDeclinedProductStores() *StatusItemUpdateOne {
	siuo.mutation.ClearItemDeclinedProductStores()
	return siuo
}

// RemoveItemDeclinedProductStoreIDs removes the "item_declined_product_stores" edge to ProductStore entities by IDs.
func (siuo *StatusItemUpdateOne) RemoveItemDeclinedProductStoreIDs(ids ...int) *StatusItemUpdateOne {
	siuo.mutation.RemoveItemDeclinedProductStoreIDs(ids...)
	return siuo
}

// RemoveItemDeclinedProductStores removes "item_declined_product_stores" edges to ProductStore entities.
func (siuo *StatusItemUpdateOne) RemoveItemDeclinedProductStores(p ...*ProductStore) *StatusItemUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return siuo.RemoveItemDeclinedProductStoreIDs(ids...)
}

// ClearHeaderCancelProductStores clears all "header_cancel_product_stores" edges to the ProductStore entity.
func (siuo *StatusItemUpdateOne) ClearHeaderCancelProductStores() *StatusItemUpdateOne {
	siuo.mutation.ClearHeaderCancelProductStores()
	return siuo
}

// RemoveHeaderCancelProductStoreIDs removes the "header_cancel_product_stores" edge to ProductStore entities by IDs.
func (siuo *StatusItemUpdateOne) RemoveHeaderCancelProductStoreIDs(ids ...int) *StatusItemUpdateOne {
	siuo.mutation.RemoveHeaderCancelProductStoreIDs(ids...)
	return siuo
}

// RemoveHeaderCancelProductStores removes "header_cancel_product_stores" edges to ProductStore entities.
func (siuo *StatusItemUpdateOne) RemoveHeaderCancelProductStores(p ...*ProductStore) *StatusItemUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return siuo.RemoveHeaderCancelProductStoreIDs(ids...)
}

// ClearItemCancelProductStores clears all "item_cancel_product_stores" edges to the ProductStore entity.
func (siuo *StatusItemUpdateOne) ClearItemCancelProductStores() *StatusItemUpdateOne {
	siuo.mutation.ClearItemCancelProductStores()
	return siuo
}

// RemoveItemCancelProductStoreIDs removes the "item_cancel_product_stores" edge to ProductStore entities by IDs.
func (siuo *StatusItemUpdateOne) RemoveItemCancelProductStoreIDs(ids ...int) *StatusItemUpdateOne {
	siuo.mutation.RemoveItemCancelProductStoreIDs(ids...)
	return siuo
}

// RemoveItemCancelProductStores removes "item_cancel_product_stores" edges to ProductStore entities.
func (siuo *StatusItemUpdateOne) RemoveItemCancelProductStores(p ...*ProductStore) *StatusItemUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return siuo.RemoveItemCancelProductStoreIDs(ids...)
}

// ClearMainStatusValidChanges clears all "main_status_valid_changes" edges to the StatusValidChange entity.
func (siuo *StatusItemUpdateOne) ClearMainStatusValidChanges() *StatusItemUpdateOne {
	siuo.mutation.ClearMainStatusValidChanges()
	return siuo
}

// RemoveMainStatusValidChangeIDs removes the "main_status_valid_changes" edge to StatusValidChange entities by IDs.
func (siuo *StatusItemUpdateOne) RemoveMainStatusValidChangeIDs(ids ...int) *StatusItemUpdateOne {
	siuo.mutation.RemoveMainStatusValidChangeIDs(ids...)
	return siuo
}

// RemoveMainStatusValidChanges removes "main_status_valid_changes" edges to StatusValidChange entities.
func (siuo *StatusItemUpdateOne) RemoveMainStatusValidChanges(s ...*StatusValidChange) *StatusItemUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return siuo.RemoveMainStatusValidChangeIDs(ids...)
}

// ClearToStatusValidChanges clears all "to_status_valid_changes" edges to the StatusValidChange entity.
func (siuo *StatusItemUpdateOne) ClearToStatusValidChanges() *StatusItemUpdateOne {
	siuo.mutation.ClearToStatusValidChanges()
	return siuo
}

// RemoveToStatusValidChangeIDs removes the "to_status_valid_changes" edge to StatusValidChange entities by IDs.
func (siuo *StatusItemUpdateOne) RemoveToStatusValidChangeIDs(ids ...int) *StatusItemUpdateOne {
	siuo.mutation.RemoveToStatusValidChangeIDs(ids...)
	return siuo
}

// RemoveToStatusValidChanges removes "to_status_valid_changes" edges to StatusValidChange entities.
func (siuo *StatusItemUpdateOne) RemoveToStatusValidChanges(s ...*StatusValidChange) *StatusItemUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return siuo.RemoveToStatusValidChangeIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (siuo *StatusItemUpdateOne) Select(field string, fields ...string) *StatusItemUpdateOne {
	siuo.fields = append([]string{field}, fields...)
	return siuo
}

// Save executes the query and returns the updated StatusItem entity.
func (siuo *StatusItemUpdateOne) Save(ctx context.Context) (*StatusItem, error) {
	var (
		err  error
		node *StatusItem
	)
	siuo.defaults()
	if len(siuo.hooks) == 0 {
		node, err = siuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StatusItemMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			siuo.mutation = mutation
			node, err = siuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(siuo.hooks) - 1; i >= 0; i-- {
			mut = siuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, siuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (siuo *StatusItemUpdateOne) SaveX(ctx context.Context) *StatusItem {
	node, err := siuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (siuo *StatusItemUpdateOne) Exec(ctx context.Context) error {
	_, err := siuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (siuo *StatusItemUpdateOne) ExecX(ctx context.Context) {
	if err := siuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (siuo *StatusItemUpdateOne) defaults() {
	if _, ok := siuo.mutation.UpdateTime(); !ok {
		v := statusitem.UpdateDefaultUpdateTime()
		siuo.mutation.SetUpdateTime(v)
	}
}

func (siuo *StatusItemUpdateOne) sqlSave(ctx context.Context) (_node *StatusItem, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   statusitem.Table,
			Columns: statusitem.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: statusitem.FieldID,
			},
		},
	}
	id, ok := siuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing StatusItem.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := siuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, statusitem.FieldID)
		for _, f := range fields {
			if !statusitem.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != statusitem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := siuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := siuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: statusitem.FieldUpdateTime,
		})
	}
	if value, ok := siuo.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: statusitem.FieldStringRef,
		})
	}
	if siuo.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: statusitem.FieldStringRef,
		})
	}
	if value, ok := siuo.mutation.StatusCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: statusitem.FieldStatusCode,
		})
	}
	if siuo.mutation.StatusCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: statusitem.FieldStatusCode,
		})
	}
	if value, ok := siuo.mutation.SequenceID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: statusitem.FieldSequenceID,
		})
	}
	if value, ok := siuo.mutation.AddedSequenceID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: statusitem.FieldSequenceID,
		})
	}
	if siuo.mutation.SequenceIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: statusitem.FieldSequenceID,
		})
	}
	if value, ok := siuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: statusitem.FieldDescription,
		})
	}
	if siuo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: statusitem.FieldDescription,
		})
	}
	if siuo.mutation.StatusTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   statusitem.StatusTypeTable,
			Columns: []string{statusitem.StatusTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statustype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siuo.mutation.StatusTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   statusitem.StatusTypeTable,
			Columns: []string{statusitem.StatusTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statustype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if siuo.mutation.OrderHeadersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.OrderHeadersTable,
			Columns: []string{statusitem.OrderHeadersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderheader.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siuo.mutation.RemovedOrderHeadersIDs(); len(nodes) > 0 && !siuo.mutation.OrderHeadersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.OrderHeadersTable,
			Columns: []string{statusitem.OrderHeadersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderheader.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siuo.mutation.OrderHeadersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.OrderHeadersTable,
			Columns: []string{statusitem.OrderHeadersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderheader.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if siuo.mutation.SyncOrderHeadersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.SyncOrderHeadersTable,
			Columns: []string{statusitem.SyncOrderHeadersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderheader.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siuo.mutation.RemovedSyncOrderHeadersIDs(); len(nodes) > 0 && !siuo.mutation.SyncOrderHeadersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.SyncOrderHeadersTable,
			Columns: []string{statusitem.SyncOrderHeadersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderheader.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siuo.mutation.SyncOrderHeadersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.SyncOrderHeadersTable,
			Columns: []string{statusitem.SyncOrderHeadersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderheader.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if siuo.mutation.OrderItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.OrderItemsTable,
			Columns: []string{statusitem.OrderItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitem.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siuo.mutation.RemovedOrderItemsIDs(); len(nodes) > 0 && !siuo.mutation.OrderItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.OrderItemsTable,
			Columns: []string{statusitem.OrderItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siuo.mutation.OrderItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.OrderItemsTable,
			Columns: []string{statusitem.OrderItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if siuo.mutation.SyncOrderItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.SyncOrderItemsTable,
			Columns: []string{statusitem.SyncOrderItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitem.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siuo.mutation.RemovedSyncOrderItemsIDs(); len(nodes) > 0 && !siuo.mutation.SyncOrderItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.SyncOrderItemsTable,
			Columns: []string{statusitem.SyncOrderItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siuo.mutation.SyncOrderItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.SyncOrderItemsTable,
			Columns: []string{statusitem.SyncOrderItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if siuo.mutation.OrderPaymentPreferencesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.OrderPaymentPreferencesTable,
			Columns: []string{statusitem.OrderPaymentPreferencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderpaymentpreference.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siuo.mutation.RemovedOrderPaymentPreferencesIDs(); len(nodes) > 0 && !siuo.mutation.OrderPaymentPreferencesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.OrderPaymentPreferencesTable,
			Columns: []string{statusitem.OrderPaymentPreferencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderpaymentpreference.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siuo.mutation.OrderPaymentPreferencesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.OrderPaymentPreferencesTable,
			Columns: []string{statusitem.OrderPaymentPreferencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderpaymentpreference.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if siuo.mutation.OrderStatusesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.OrderStatusesTable,
			Columns: []string{statusitem.OrderStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderstatus.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siuo.mutation.RemovedOrderStatusesIDs(); len(nodes) > 0 && !siuo.mutation.OrderStatusesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.OrderStatusesTable,
			Columns: []string{statusitem.OrderStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderstatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siuo.mutation.OrderStatusesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.OrderStatusesTable,
			Columns: []string{statusitem.OrderStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderstatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if siuo.mutation.ProductReviewsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.ProductReviewsTable,
			Columns: []string{statusitem.ProductReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productreview.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siuo.mutation.RemovedProductReviewsIDs(); len(nodes) > 0 && !siuo.mutation.ProductReviewsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.ProductReviewsTable,
			Columns: []string{statusitem.ProductReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productreview.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siuo.mutation.ProductReviewsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.ProductReviewsTable,
			Columns: []string{statusitem.ProductReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productreview.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if siuo.mutation.HeaderApprovedProductStoresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.HeaderApprovedProductStoresTable,
			Columns: []string{statusitem.HeaderApprovedProductStoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productstore.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siuo.mutation.RemovedHeaderApprovedProductStoresIDs(); len(nodes) > 0 && !siuo.mutation.HeaderApprovedProductStoresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.HeaderApprovedProductStoresTable,
			Columns: []string{statusitem.HeaderApprovedProductStoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productstore.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siuo.mutation.HeaderApprovedProductStoresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.HeaderApprovedProductStoresTable,
			Columns: []string{statusitem.HeaderApprovedProductStoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productstore.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if siuo.mutation.ItemApprovedProductStoresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.ItemApprovedProductStoresTable,
			Columns: []string{statusitem.ItemApprovedProductStoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productstore.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siuo.mutation.RemovedItemApprovedProductStoresIDs(); len(nodes) > 0 && !siuo.mutation.ItemApprovedProductStoresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.ItemApprovedProductStoresTable,
			Columns: []string{statusitem.ItemApprovedProductStoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productstore.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siuo.mutation.ItemApprovedProductStoresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.ItemApprovedProductStoresTable,
			Columns: []string{statusitem.ItemApprovedProductStoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productstore.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if siuo.mutation.DigitalItemApprovedProductStoresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.DigitalItemApprovedProductStoresTable,
			Columns: []string{statusitem.DigitalItemApprovedProductStoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productstore.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siuo.mutation.RemovedDigitalItemApprovedProductStoresIDs(); len(nodes) > 0 && !siuo.mutation.DigitalItemApprovedProductStoresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.DigitalItemApprovedProductStoresTable,
			Columns: []string{statusitem.DigitalItemApprovedProductStoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productstore.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siuo.mutation.DigitalItemApprovedProductStoresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.DigitalItemApprovedProductStoresTable,
			Columns: []string{statusitem.DigitalItemApprovedProductStoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productstore.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if siuo.mutation.HeaderDeclinedProductStoresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.HeaderDeclinedProductStoresTable,
			Columns: []string{statusitem.HeaderDeclinedProductStoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productstore.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siuo.mutation.RemovedHeaderDeclinedProductStoresIDs(); len(nodes) > 0 && !siuo.mutation.HeaderDeclinedProductStoresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.HeaderDeclinedProductStoresTable,
			Columns: []string{statusitem.HeaderDeclinedProductStoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productstore.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siuo.mutation.HeaderDeclinedProductStoresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.HeaderDeclinedProductStoresTable,
			Columns: []string{statusitem.HeaderDeclinedProductStoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productstore.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if siuo.mutation.ItemDeclinedProductStoresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.ItemDeclinedProductStoresTable,
			Columns: []string{statusitem.ItemDeclinedProductStoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productstore.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siuo.mutation.RemovedItemDeclinedProductStoresIDs(); len(nodes) > 0 && !siuo.mutation.ItemDeclinedProductStoresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.ItemDeclinedProductStoresTable,
			Columns: []string{statusitem.ItemDeclinedProductStoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productstore.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siuo.mutation.ItemDeclinedProductStoresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.ItemDeclinedProductStoresTable,
			Columns: []string{statusitem.ItemDeclinedProductStoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productstore.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if siuo.mutation.HeaderCancelProductStoresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.HeaderCancelProductStoresTable,
			Columns: []string{statusitem.HeaderCancelProductStoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productstore.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siuo.mutation.RemovedHeaderCancelProductStoresIDs(); len(nodes) > 0 && !siuo.mutation.HeaderCancelProductStoresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.HeaderCancelProductStoresTable,
			Columns: []string{statusitem.HeaderCancelProductStoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productstore.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siuo.mutation.HeaderCancelProductStoresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.HeaderCancelProductStoresTable,
			Columns: []string{statusitem.HeaderCancelProductStoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productstore.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if siuo.mutation.ItemCancelProductStoresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.ItemCancelProductStoresTable,
			Columns: []string{statusitem.ItemCancelProductStoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productstore.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siuo.mutation.RemovedItemCancelProductStoresIDs(); len(nodes) > 0 && !siuo.mutation.ItemCancelProductStoresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.ItemCancelProductStoresTable,
			Columns: []string{statusitem.ItemCancelProductStoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productstore.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siuo.mutation.ItemCancelProductStoresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.ItemCancelProductStoresTable,
			Columns: []string{statusitem.ItemCancelProductStoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productstore.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if siuo.mutation.MainStatusValidChangesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.MainStatusValidChangesTable,
			Columns: []string{statusitem.MainStatusValidChangesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusvalidchange.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siuo.mutation.RemovedMainStatusValidChangesIDs(); len(nodes) > 0 && !siuo.mutation.MainStatusValidChangesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.MainStatusValidChangesTable,
			Columns: []string{statusitem.MainStatusValidChangesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusvalidchange.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siuo.mutation.MainStatusValidChangesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.MainStatusValidChangesTable,
			Columns: []string{statusitem.MainStatusValidChangesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusvalidchange.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if siuo.mutation.ToStatusValidChangesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.ToStatusValidChangesTable,
			Columns: []string{statusitem.ToStatusValidChangesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusvalidchange.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siuo.mutation.RemovedToStatusValidChangesIDs(); len(nodes) > 0 && !siuo.mutation.ToStatusValidChangesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.ToStatusValidChangesTable,
			Columns: []string{statusitem.ToStatusValidChangesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusvalidchange.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siuo.mutation.ToStatusValidChangesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.ToStatusValidChangesTable,
			Columns: []string{statusitem.ToStatusValidChangesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusvalidchange.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &StatusItem{config: siuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, siuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{statusitem.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
