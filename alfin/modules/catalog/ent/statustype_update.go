// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/predicate"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/statusitem"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/statustype"
)

// StatusTypeUpdate is the builder for updating StatusType entities.
type StatusTypeUpdate struct {
	config
	hooks    []Hook
	mutation *StatusTypeMutation
}

// Where adds a new predicate for the StatusTypeUpdate builder.
func (stu *StatusTypeUpdate) Where(ps ...predicate.StatusType) *StatusTypeUpdate {
	stu.mutation.predicates = append(stu.mutation.predicates, ps...)
	return stu
}

// SetStringRef sets the "string_ref" field.
func (stu *StatusTypeUpdate) SetStringRef(s string) *StatusTypeUpdate {
	stu.mutation.SetStringRef(s)
	return stu
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (stu *StatusTypeUpdate) SetNillableStringRef(s *string) *StatusTypeUpdate {
	if s != nil {
		stu.SetStringRef(*s)
	}
	return stu
}

// ClearStringRef clears the value of the "string_ref" field.
func (stu *StatusTypeUpdate) ClearStringRef() *StatusTypeUpdate {
	stu.mutation.ClearStringRef()
	return stu
}

// SetHasTable sets the "has_table" field.
func (stu *StatusTypeUpdate) SetHasTable(st statustype.HasTable) *StatusTypeUpdate {
	stu.mutation.SetHasTable(st)
	return stu
}

// SetNillableHasTable sets the "has_table" field if the given value is not nil.
func (stu *StatusTypeUpdate) SetNillableHasTable(st *statustype.HasTable) *StatusTypeUpdate {
	if st != nil {
		stu.SetHasTable(*st)
	}
	return stu
}

// ClearHasTable clears the value of the "has_table" field.
func (stu *StatusTypeUpdate) ClearHasTable() *StatusTypeUpdate {
	stu.mutation.ClearHasTable()
	return stu
}

// SetDescription sets the "description" field.
func (stu *StatusTypeUpdate) SetDescription(s string) *StatusTypeUpdate {
	stu.mutation.SetDescription(s)
	return stu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (stu *StatusTypeUpdate) SetNillableDescription(s *string) *StatusTypeUpdate {
	if s != nil {
		stu.SetDescription(*s)
	}
	return stu
}

// ClearDescription clears the value of the "description" field.
func (stu *StatusTypeUpdate) ClearDescription() *StatusTypeUpdate {
	stu.mutation.ClearDescription()
	return stu
}

// SetParentID sets the "parent" edge to the StatusType entity by ID.
func (stu *StatusTypeUpdate) SetParentID(id int) *StatusTypeUpdate {
	stu.mutation.SetParentID(id)
	return stu
}

// SetNillableParentID sets the "parent" edge to the StatusType entity by ID if the given value is not nil.
func (stu *StatusTypeUpdate) SetNillableParentID(id *int) *StatusTypeUpdate {
	if id != nil {
		stu = stu.SetParentID(*id)
	}
	return stu
}

// SetParent sets the "parent" edge to the StatusType entity.
func (stu *StatusTypeUpdate) SetParent(s *StatusType) *StatusTypeUpdate {
	return stu.SetParentID(s.ID)
}

// AddChildIDs adds the "children" edge to the StatusType entity by IDs.
func (stu *StatusTypeUpdate) AddChildIDs(ids ...int) *StatusTypeUpdate {
	stu.mutation.AddChildIDs(ids...)
	return stu
}

// AddChildren adds the "children" edges to the StatusType entity.
func (stu *StatusTypeUpdate) AddChildren(s ...*StatusType) *StatusTypeUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return stu.AddChildIDs(ids...)
}

// AddStatusItemIDs adds the "status_items" edge to the StatusItem entity by IDs.
func (stu *StatusTypeUpdate) AddStatusItemIDs(ids ...int) *StatusTypeUpdate {
	stu.mutation.AddStatusItemIDs(ids...)
	return stu
}

// AddStatusItems adds the "status_items" edges to the StatusItem entity.
func (stu *StatusTypeUpdate) AddStatusItems(s ...*StatusItem) *StatusTypeUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return stu.AddStatusItemIDs(ids...)
}

// AddChildStatusTypeIDs adds the "child_status_types" edge to the StatusType entity by IDs.
func (stu *StatusTypeUpdate) AddChildStatusTypeIDs(ids ...int) *StatusTypeUpdate {
	stu.mutation.AddChildStatusTypeIDs(ids...)
	return stu
}

// AddChildStatusTypes adds the "child_status_types" edges to the StatusType entity.
func (stu *StatusTypeUpdate) AddChildStatusTypes(s ...*StatusType) *StatusTypeUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return stu.AddChildStatusTypeIDs(ids...)
}

// Mutation returns the StatusTypeMutation object of the builder.
func (stu *StatusTypeUpdate) Mutation() *StatusTypeMutation {
	return stu.mutation
}

// ClearParent clears the "parent" edge to the StatusType entity.
func (stu *StatusTypeUpdate) ClearParent() *StatusTypeUpdate {
	stu.mutation.ClearParent()
	return stu
}

// ClearChildren clears all "children" edges to the StatusType entity.
func (stu *StatusTypeUpdate) ClearChildren() *StatusTypeUpdate {
	stu.mutation.ClearChildren()
	return stu
}

// RemoveChildIDs removes the "children" edge to StatusType entities by IDs.
func (stu *StatusTypeUpdate) RemoveChildIDs(ids ...int) *StatusTypeUpdate {
	stu.mutation.RemoveChildIDs(ids...)
	return stu
}

// RemoveChildren removes "children" edges to StatusType entities.
func (stu *StatusTypeUpdate) RemoveChildren(s ...*StatusType) *StatusTypeUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return stu.RemoveChildIDs(ids...)
}

// ClearStatusItems clears all "status_items" edges to the StatusItem entity.
func (stu *StatusTypeUpdate) ClearStatusItems() *StatusTypeUpdate {
	stu.mutation.ClearStatusItems()
	return stu
}

// RemoveStatusItemIDs removes the "status_items" edge to StatusItem entities by IDs.
func (stu *StatusTypeUpdate) RemoveStatusItemIDs(ids ...int) *StatusTypeUpdate {
	stu.mutation.RemoveStatusItemIDs(ids...)
	return stu
}

// RemoveStatusItems removes "status_items" edges to StatusItem entities.
func (stu *StatusTypeUpdate) RemoveStatusItems(s ...*StatusItem) *StatusTypeUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return stu.RemoveStatusItemIDs(ids...)
}

// ClearChildStatusTypes clears all "child_status_types" edges to the StatusType entity.
func (stu *StatusTypeUpdate) ClearChildStatusTypes() *StatusTypeUpdate {
	stu.mutation.ClearChildStatusTypes()
	return stu
}

// RemoveChildStatusTypeIDs removes the "child_status_types" edge to StatusType entities by IDs.
func (stu *StatusTypeUpdate) RemoveChildStatusTypeIDs(ids ...int) *StatusTypeUpdate {
	stu.mutation.RemoveChildStatusTypeIDs(ids...)
	return stu
}

// RemoveChildStatusTypes removes "child_status_types" edges to StatusType entities.
func (stu *StatusTypeUpdate) RemoveChildStatusTypes(s ...*StatusType) *StatusTypeUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return stu.RemoveChildStatusTypeIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (stu *StatusTypeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	stu.defaults()
	if len(stu.hooks) == 0 {
		if err = stu.check(); err != nil {
			return 0, err
		}
		affected, err = stu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StatusTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = stu.check(); err != nil {
				return 0, err
			}
			stu.mutation = mutation
			affected, err = stu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(stu.hooks) - 1; i >= 0; i-- {
			mut = stu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, stu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (stu *StatusTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := stu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (stu *StatusTypeUpdate) Exec(ctx context.Context) error {
	_, err := stu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stu *StatusTypeUpdate) ExecX(ctx context.Context) {
	if err := stu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (stu *StatusTypeUpdate) defaults() {
	if _, ok := stu.mutation.UpdateTime(); !ok {
		v := statustype.UpdateDefaultUpdateTime()
		stu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (stu *StatusTypeUpdate) check() error {
	if v, ok := stu.mutation.HasTable(); ok {
		if err := statustype.HasTableValidator(v); err != nil {
			return &ValidationError{Name: "has_table", err: fmt.Errorf("ent: validator failed for field \"has_table\": %w", err)}
		}
	}
	return nil
}

func (stu *StatusTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   statustype.Table,
			Columns: statustype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: statustype.FieldID,
			},
		},
	}
	if ps := stu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := stu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: statustype.FieldUpdateTime,
		})
	}
	if value, ok := stu.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: statustype.FieldStringRef,
		})
	}
	if stu.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: statustype.FieldStringRef,
		})
	}
	if value, ok := stu.mutation.HasTable(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: statustype.FieldHasTable,
		})
	}
	if stu.mutation.HasTableCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: statustype.FieldHasTable,
		})
	}
	if value, ok := stu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: statustype.FieldDescription,
		})
	}
	if stu.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: statustype.FieldDescription,
		})
	}
	if stu.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   statustype.ParentTable,
			Columns: []string{statustype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statustype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stu.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   statustype.ParentTable,
			Columns: []string{statustype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statustype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if stu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statustype.ChildrenTable,
			Columns: []string{statustype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statustype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stu.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !stu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statustype.ChildrenTable,
			Columns: []string{statustype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statustype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stu.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statustype.ChildrenTable,
			Columns: []string{statustype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statustype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if stu.mutation.StatusItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statustype.StatusItemsTable,
			Columns: []string{statustype.StatusItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusitem.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stu.mutation.RemovedStatusItemsIDs(); len(nodes) > 0 && !stu.mutation.StatusItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statustype.StatusItemsTable,
			Columns: []string{statustype.StatusItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stu.mutation.StatusItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statustype.StatusItemsTable,
			Columns: []string{statustype.StatusItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if stu.mutation.ChildStatusTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   statustype.ChildStatusTypesTable,
			Columns: statustype.ChildStatusTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statustype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stu.mutation.RemovedChildStatusTypesIDs(); len(nodes) > 0 && !stu.mutation.ChildStatusTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   statustype.ChildStatusTypesTable,
			Columns: statustype.ChildStatusTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statustype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stu.mutation.ChildStatusTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   statustype.ChildStatusTypesTable,
			Columns: statustype.ChildStatusTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statustype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, stu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{statustype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// StatusTypeUpdateOne is the builder for updating a single StatusType entity.
type StatusTypeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StatusTypeMutation
}

// SetStringRef sets the "string_ref" field.
func (stuo *StatusTypeUpdateOne) SetStringRef(s string) *StatusTypeUpdateOne {
	stuo.mutation.SetStringRef(s)
	return stuo
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (stuo *StatusTypeUpdateOne) SetNillableStringRef(s *string) *StatusTypeUpdateOne {
	if s != nil {
		stuo.SetStringRef(*s)
	}
	return stuo
}

// ClearStringRef clears the value of the "string_ref" field.
func (stuo *StatusTypeUpdateOne) ClearStringRef() *StatusTypeUpdateOne {
	stuo.mutation.ClearStringRef()
	return stuo
}

// SetHasTable sets the "has_table" field.
func (stuo *StatusTypeUpdateOne) SetHasTable(st statustype.HasTable) *StatusTypeUpdateOne {
	stuo.mutation.SetHasTable(st)
	return stuo
}

// SetNillableHasTable sets the "has_table" field if the given value is not nil.
func (stuo *StatusTypeUpdateOne) SetNillableHasTable(st *statustype.HasTable) *StatusTypeUpdateOne {
	if st != nil {
		stuo.SetHasTable(*st)
	}
	return stuo
}

// ClearHasTable clears the value of the "has_table" field.
func (stuo *StatusTypeUpdateOne) ClearHasTable() *StatusTypeUpdateOne {
	stuo.mutation.ClearHasTable()
	return stuo
}

// SetDescription sets the "description" field.
func (stuo *StatusTypeUpdateOne) SetDescription(s string) *StatusTypeUpdateOne {
	stuo.mutation.SetDescription(s)
	return stuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (stuo *StatusTypeUpdateOne) SetNillableDescription(s *string) *StatusTypeUpdateOne {
	if s != nil {
		stuo.SetDescription(*s)
	}
	return stuo
}

// ClearDescription clears the value of the "description" field.
func (stuo *StatusTypeUpdateOne) ClearDescription() *StatusTypeUpdateOne {
	stuo.mutation.ClearDescription()
	return stuo
}

// SetParentID sets the "parent" edge to the StatusType entity by ID.
func (stuo *StatusTypeUpdateOne) SetParentID(id int) *StatusTypeUpdateOne {
	stuo.mutation.SetParentID(id)
	return stuo
}

// SetNillableParentID sets the "parent" edge to the StatusType entity by ID if the given value is not nil.
func (stuo *StatusTypeUpdateOne) SetNillableParentID(id *int) *StatusTypeUpdateOne {
	if id != nil {
		stuo = stuo.SetParentID(*id)
	}
	return stuo
}

// SetParent sets the "parent" edge to the StatusType entity.
func (stuo *StatusTypeUpdateOne) SetParent(s *StatusType) *StatusTypeUpdateOne {
	return stuo.SetParentID(s.ID)
}

// AddChildIDs adds the "children" edge to the StatusType entity by IDs.
func (stuo *StatusTypeUpdateOne) AddChildIDs(ids ...int) *StatusTypeUpdateOne {
	stuo.mutation.AddChildIDs(ids...)
	return stuo
}

// AddChildren adds the "children" edges to the StatusType entity.
func (stuo *StatusTypeUpdateOne) AddChildren(s ...*StatusType) *StatusTypeUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return stuo.AddChildIDs(ids...)
}

// AddStatusItemIDs adds the "status_items" edge to the StatusItem entity by IDs.
func (stuo *StatusTypeUpdateOne) AddStatusItemIDs(ids ...int) *StatusTypeUpdateOne {
	stuo.mutation.AddStatusItemIDs(ids...)
	return stuo
}

// AddStatusItems adds the "status_items" edges to the StatusItem entity.
func (stuo *StatusTypeUpdateOne) AddStatusItems(s ...*StatusItem) *StatusTypeUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return stuo.AddStatusItemIDs(ids...)
}

// AddChildStatusTypeIDs adds the "child_status_types" edge to the StatusType entity by IDs.
func (stuo *StatusTypeUpdateOne) AddChildStatusTypeIDs(ids ...int) *StatusTypeUpdateOne {
	stuo.mutation.AddChildStatusTypeIDs(ids...)
	return stuo
}

// AddChildStatusTypes adds the "child_status_types" edges to the StatusType entity.
func (stuo *StatusTypeUpdateOne) AddChildStatusTypes(s ...*StatusType) *StatusTypeUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return stuo.AddChildStatusTypeIDs(ids...)
}

// Mutation returns the StatusTypeMutation object of the builder.
func (stuo *StatusTypeUpdateOne) Mutation() *StatusTypeMutation {
	return stuo.mutation
}

// ClearParent clears the "parent" edge to the StatusType entity.
func (stuo *StatusTypeUpdateOne) ClearParent() *StatusTypeUpdateOne {
	stuo.mutation.ClearParent()
	return stuo
}

// ClearChildren clears all "children" edges to the StatusType entity.
func (stuo *StatusTypeUpdateOne) ClearChildren() *StatusTypeUpdateOne {
	stuo.mutation.ClearChildren()
	return stuo
}

// RemoveChildIDs removes the "children" edge to StatusType entities by IDs.
func (stuo *StatusTypeUpdateOne) RemoveChildIDs(ids ...int) *StatusTypeUpdateOne {
	stuo.mutation.RemoveChildIDs(ids...)
	return stuo
}

// RemoveChildren removes "children" edges to StatusType entities.
func (stuo *StatusTypeUpdateOne) RemoveChildren(s ...*StatusType) *StatusTypeUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return stuo.RemoveChildIDs(ids...)
}

// ClearStatusItems clears all "status_items" edges to the StatusItem entity.
func (stuo *StatusTypeUpdateOne) ClearStatusItems() *StatusTypeUpdateOne {
	stuo.mutation.ClearStatusItems()
	return stuo
}

// RemoveStatusItemIDs removes the "status_items" edge to StatusItem entities by IDs.
func (stuo *StatusTypeUpdateOne) RemoveStatusItemIDs(ids ...int) *StatusTypeUpdateOne {
	stuo.mutation.RemoveStatusItemIDs(ids...)
	return stuo
}

// RemoveStatusItems removes "status_items" edges to StatusItem entities.
func (stuo *StatusTypeUpdateOne) RemoveStatusItems(s ...*StatusItem) *StatusTypeUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return stuo.RemoveStatusItemIDs(ids...)
}

// ClearChildStatusTypes clears all "child_status_types" edges to the StatusType entity.
func (stuo *StatusTypeUpdateOne) ClearChildStatusTypes() *StatusTypeUpdateOne {
	stuo.mutation.ClearChildStatusTypes()
	return stuo
}

// RemoveChildStatusTypeIDs removes the "child_status_types" edge to StatusType entities by IDs.
func (stuo *StatusTypeUpdateOne) RemoveChildStatusTypeIDs(ids ...int) *StatusTypeUpdateOne {
	stuo.mutation.RemoveChildStatusTypeIDs(ids...)
	return stuo
}

// RemoveChildStatusTypes removes "child_status_types" edges to StatusType entities.
func (stuo *StatusTypeUpdateOne) RemoveChildStatusTypes(s ...*StatusType) *StatusTypeUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return stuo.RemoveChildStatusTypeIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (stuo *StatusTypeUpdateOne) Select(field string, fields ...string) *StatusTypeUpdateOne {
	stuo.fields = append([]string{field}, fields...)
	return stuo
}

// Save executes the query and returns the updated StatusType entity.
func (stuo *StatusTypeUpdateOne) Save(ctx context.Context) (*StatusType, error) {
	var (
		err  error
		node *StatusType
	)
	stuo.defaults()
	if len(stuo.hooks) == 0 {
		if err = stuo.check(); err != nil {
			return nil, err
		}
		node, err = stuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StatusTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = stuo.check(); err != nil {
				return nil, err
			}
			stuo.mutation = mutation
			node, err = stuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(stuo.hooks) - 1; i >= 0; i-- {
			mut = stuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, stuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (stuo *StatusTypeUpdateOne) SaveX(ctx context.Context) *StatusType {
	node, err := stuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (stuo *StatusTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := stuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stuo *StatusTypeUpdateOne) ExecX(ctx context.Context) {
	if err := stuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (stuo *StatusTypeUpdateOne) defaults() {
	if _, ok := stuo.mutation.UpdateTime(); !ok {
		v := statustype.UpdateDefaultUpdateTime()
		stuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (stuo *StatusTypeUpdateOne) check() error {
	if v, ok := stuo.mutation.HasTable(); ok {
		if err := statustype.HasTableValidator(v); err != nil {
			return &ValidationError{Name: "has_table", err: fmt.Errorf("ent: validator failed for field \"has_table\": %w", err)}
		}
	}
	return nil
}

func (stuo *StatusTypeUpdateOne) sqlSave(ctx context.Context) (_node *StatusType, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   statustype.Table,
			Columns: statustype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: statustype.FieldID,
			},
		},
	}
	id, ok := stuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing StatusType.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := stuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, statustype.FieldID)
		for _, f := range fields {
			if !statustype.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != statustype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := stuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := stuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: statustype.FieldUpdateTime,
		})
	}
	if value, ok := stuo.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: statustype.FieldStringRef,
		})
	}
	if stuo.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: statustype.FieldStringRef,
		})
	}
	if value, ok := stuo.mutation.HasTable(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: statustype.FieldHasTable,
		})
	}
	if stuo.mutation.HasTableCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: statustype.FieldHasTable,
		})
	}
	if value, ok := stuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: statustype.FieldDescription,
		})
	}
	if stuo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: statustype.FieldDescription,
		})
	}
	if stuo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   statustype.ParentTable,
			Columns: []string{statustype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statustype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stuo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   statustype.ParentTable,
			Columns: []string{statustype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statustype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if stuo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statustype.ChildrenTable,
			Columns: []string{statustype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statustype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stuo.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !stuo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statustype.ChildrenTable,
			Columns: []string{statustype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statustype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stuo.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statustype.ChildrenTable,
			Columns: []string{statustype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statustype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if stuo.mutation.StatusItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statustype.StatusItemsTable,
			Columns: []string{statustype.StatusItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusitem.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stuo.mutation.RemovedStatusItemsIDs(); len(nodes) > 0 && !stuo.mutation.StatusItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statustype.StatusItemsTable,
			Columns: []string{statustype.StatusItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stuo.mutation.StatusItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statustype.StatusItemsTable,
			Columns: []string{statustype.StatusItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if stuo.mutation.ChildStatusTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   statustype.ChildStatusTypesTable,
			Columns: statustype.ChildStatusTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statustype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stuo.mutation.RemovedChildStatusTypesIDs(); len(nodes) > 0 && !stuo.mutation.ChildStatusTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   statustype.ChildStatusTypesTable,
			Columns: statustype.ChildStatusTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statustype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stuo.mutation.ChildStatusTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   statustype.ChildStatusTypesTable,
			Columns: statustype.ChildStatusTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statustype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &StatusType{config: stuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, stuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{statustype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
