// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/statusitem"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/statusvalidchange"
)

// StatusValidChangeCreate is the builder for creating a StatusValidChange entity.
type StatusValidChangeCreate struct {
	config
	mutation *StatusValidChangeMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (svcc *StatusValidChangeCreate) SetCreateTime(t time.Time) *StatusValidChangeCreate {
	svcc.mutation.SetCreateTime(t)
	return svcc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (svcc *StatusValidChangeCreate) SetNillableCreateTime(t *time.Time) *StatusValidChangeCreate {
	if t != nil {
		svcc.SetCreateTime(*t)
	}
	return svcc
}

// SetUpdateTime sets the "update_time" field.
func (svcc *StatusValidChangeCreate) SetUpdateTime(t time.Time) *StatusValidChangeCreate {
	svcc.mutation.SetUpdateTime(t)
	return svcc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (svcc *StatusValidChangeCreate) SetNillableUpdateTime(t *time.Time) *StatusValidChangeCreate {
	if t != nil {
		svcc.SetUpdateTime(*t)
	}
	return svcc
}

// SetStringRef sets the "string_ref" field.
func (svcc *StatusValidChangeCreate) SetStringRef(s string) *StatusValidChangeCreate {
	svcc.mutation.SetStringRef(s)
	return svcc
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (svcc *StatusValidChangeCreate) SetNillableStringRef(s *string) *StatusValidChangeCreate {
	if s != nil {
		svcc.SetStringRef(*s)
	}
	return svcc
}

// SetConditionExpression sets the "condition_expression" field.
func (svcc *StatusValidChangeCreate) SetConditionExpression(s string) *StatusValidChangeCreate {
	svcc.mutation.SetConditionExpression(s)
	return svcc
}

// SetNillableConditionExpression sets the "condition_expression" field if the given value is not nil.
func (svcc *StatusValidChangeCreate) SetNillableConditionExpression(s *string) *StatusValidChangeCreate {
	if s != nil {
		svcc.SetConditionExpression(*s)
	}
	return svcc
}

// SetTransitionName sets the "transition_name" field.
func (svcc *StatusValidChangeCreate) SetTransitionName(s string) *StatusValidChangeCreate {
	svcc.mutation.SetTransitionName(s)
	return svcc
}

// SetNillableTransitionName sets the "transition_name" field if the given value is not nil.
func (svcc *StatusValidChangeCreate) SetNillableTransitionName(s *string) *StatusValidChangeCreate {
	if s != nil {
		svcc.SetTransitionName(*s)
	}
	return svcc
}

// SetMainStatusItemID sets the "main_status_item" edge to the StatusItem entity by ID.
func (svcc *StatusValidChangeCreate) SetMainStatusItemID(id int) *StatusValidChangeCreate {
	svcc.mutation.SetMainStatusItemID(id)
	return svcc
}

// SetNillableMainStatusItemID sets the "main_status_item" edge to the StatusItem entity by ID if the given value is not nil.
func (svcc *StatusValidChangeCreate) SetNillableMainStatusItemID(id *int) *StatusValidChangeCreate {
	if id != nil {
		svcc = svcc.SetMainStatusItemID(*id)
	}
	return svcc
}

// SetMainStatusItem sets the "main_status_item" edge to the StatusItem entity.
func (svcc *StatusValidChangeCreate) SetMainStatusItem(s *StatusItem) *StatusValidChangeCreate {
	return svcc.SetMainStatusItemID(s.ID)
}

// SetToStatusItemID sets the "to_status_item" edge to the StatusItem entity by ID.
func (svcc *StatusValidChangeCreate) SetToStatusItemID(id int) *StatusValidChangeCreate {
	svcc.mutation.SetToStatusItemID(id)
	return svcc
}

// SetNillableToStatusItemID sets the "to_status_item" edge to the StatusItem entity by ID if the given value is not nil.
func (svcc *StatusValidChangeCreate) SetNillableToStatusItemID(id *int) *StatusValidChangeCreate {
	if id != nil {
		svcc = svcc.SetToStatusItemID(*id)
	}
	return svcc
}

// SetToStatusItem sets the "to_status_item" edge to the StatusItem entity.
func (svcc *StatusValidChangeCreate) SetToStatusItem(s *StatusItem) *StatusValidChangeCreate {
	return svcc.SetToStatusItemID(s.ID)
}

// Mutation returns the StatusValidChangeMutation object of the builder.
func (svcc *StatusValidChangeCreate) Mutation() *StatusValidChangeMutation {
	return svcc.mutation
}

// Save creates the StatusValidChange in the database.
func (svcc *StatusValidChangeCreate) Save(ctx context.Context) (*StatusValidChange, error) {
	var (
		err  error
		node *StatusValidChange
	)
	svcc.defaults()
	if len(svcc.hooks) == 0 {
		if err = svcc.check(); err != nil {
			return nil, err
		}
		node, err = svcc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StatusValidChangeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = svcc.check(); err != nil {
				return nil, err
			}
			svcc.mutation = mutation
			if node, err = svcc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(svcc.hooks) - 1; i >= 0; i-- {
			mut = svcc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, svcc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (svcc *StatusValidChangeCreate) SaveX(ctx context.Context) *StatusValidChange {
	v, err := svcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (svcc *StatusValidChangeCreate) defaults() {
	if _, ok := svcc.mutation.CreateTime(); !ok {
		v := statusvalidchange.DefaultCreateTime()
		svcc.mutation.SetCreateTime(v)
	}
	if _, ok := svcc.mutation.UpdateTime(); !ok {
		v := statusvalidchange.DefaultUpdateTime()
		svcc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (svcc *StatusValidChangeCreate) check() error {
	if _, ok := svcc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New("ent: missing required field \"create_time\"")}
	}
	if _, ok := svcc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New("ent: missing required field \"update_time\"")}
	}
	return nil
}

func (svcc *StatusValidChangeCreate) sqlSave(ctx context.Context) (*StatusValidChange, error) {
	_node, _spec := svcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, svcc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (svcc *StatusValidChangeCreate) createSpec() (*StatusValidChange, *sqlgraph.CreateSpec) {
	var (
		_node = &StatusValidChange{config: svcc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: statusvalidchange.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: statusvalidchange.FieldID,
			},
		}
	)
	if value, ok := svcc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: statusvalidchange.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := svcc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: statusvalidchange.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := svcc.mutation.StringRef(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: statusvalidchange.FieldStringRef,
		})
		_node.StringRef = value
	}
	if value, ok := svcc.mutation.ConditionExpression(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: statusvalidchange.FieldConditionExpression,
		})
		_node.ConditionExpression = value
	}
	if value, ok := svcc.mutation.TransitionName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: statusvalidchange.FieldTransitionName,
		})
		_node.TransitionName = value
	}
	if nodes := svcc.mutation.MainStatusItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   statusvalidchange.MainStatusItemTable,
			Columns: []string{statusvalidchange.MainStatusItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.status_item_main_status_valid_changes = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := svcc.mutation.ToStatusItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   statusvalidchange.ToStatusItemTable,
			Columns: []string{statusvalidchange.ToStatusItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.status_item_to_status_valid_changes = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// StatusValidChangeCreateBulk is the builder for creating many StatusValidChange entities in bulk.
type StatusValidChangeCreateBulk struct {
	config
	builders []*StatusValidChangeCreate
}

// Save creates the StatusValidChange entities in the database.
func (svccb *StatusValidChangeCreateBulk) Save(ctx context.Context) ([]*StatusValidChange, error) {
	specs := make([]*sqlgraph.CreateSpec, len(svccb.builders))
	nodes := make([]*StatusValidChange, len(svccb.builders))
	mutators := make([]Mutator, len(svccb.builders))
	for i := range svccb.builders {
		func(i int, root context.Context) {
			builder := svccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*StatusValidChangeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, svccb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, svccb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, svccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (svccb *StatusValidChangeCreateBulk) SaveX(ctx context.Context) []*StatusValidChange {
	v, err := svccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
