// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/subscriptiontype"
)

// SubscriptionType is the model entity for the SubscriptionType schema.
type SubscriptionType struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// StringRef holds the value of the "string_ref" field.
	StringRef string `json:"string_ref,omitempty"`
	// HasTable holds the value of the "has_table" field.
	HasTable subscriptiontype.HasTable `json:"has_table,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SubscriptionTypeQuery when eager-loading is set.
	Edges                      SubscriptionTypeEdges `json:"edges"`
	subscription_type_children *int
}

// SubscriptionTypeEdges holds the relations/edges for other nodes in the graph.
type SubscriptionTypeEdges struct {
	// Parent holds the value of the parent edge.
	Parent *SubscriptionType `json:"parent,omitempty"`
	// Children holds the value of the children edge.
	Children []*SubscriptionType `json:"children,omitempty"`
	// ChildSubscriptionTypes holds the value of the child_subscription_types edge.
	ChildSubscriptionTypes []*SubscriptionType `json:"child_subscription_types,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// ParentOrErr returns the Parent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SubscriptionTypeEdges) ParentOrErr() (*SubscriptionType, error) {
	if e.loadedTypes[0] {
		if e.Parent == nil {
			// The edge parent was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: subscriptiontype.Label}
		}
		return e.Parent, nil
	}
	return nil, &NotLoadedError{edge: "parent"}
}

// ChildrenOrErr returns the Children value or an error if the edge
// was not loaded in eager-loading.
func (e SubscriptionTypeEdges) ChildrenOrErr() ([]*SubscriptionType, error) {
	if e.loadedTypes[1] {
		return e.Children, nil
	}
	return nil, &NotLoadedError{edge: "children"}
}

// ChildSubscriptionTypesOrErr returns the ChildSubscriptionTypes value or an error if the edge
// was not loaded in eager-loading.
func (e SubscriptionTypeEdges) ChildSubscriptionTypesOrErr() ([]*SubscriptionType, error) {
	if e.loadedTypes[2] {
		return e.ChildSubscriptionTypes, nil
	}
	return nil, &NotLoadedError{edge: "child_subscription_types"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SubscriptionType) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case subscriptiontype.FieldID:
			values[i] = new(sql.NullInt64)
		case subscriptiontype.FieldStringRef, subscriptiontype.FieldHasTable, subscriptiontype.FieldDescription:
			values[i] = new(sql.NullString)
		case subscriptiontype.FieldCreateTime, subscriptiontype.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case subscriptiontype.ForeignKeys[0]: // subscription_type_children
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type SubscriptionType", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SubscriptionType fields.
func (st *SubscriptionType) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case subscriptiontype.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			st.ID = int(value.Int64)
		case subscriptiontype.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				st.CreateTime = value.Time
			}
		case subscriptiontype.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				st.UpdateTime = value.Time
			}
		case subscriptiontype.FieldStringRef:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field string_ref", values[i])
			} else if value.Valid {
				st.StringRef = value.String
			}
		case subscriptiontype.FieldHasTable:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field has_table", values[i])
			} else if value.Valid {
				st.HasTable = subscriptiontype.HasTable(value.String)
			}
		case subscriptiontype.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				st.Description = value.String
			}
		case subscriptiontype.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field subscription_type_children", value)
			} else if value.Valid {
				st.subscription_type_children = new(int)
				*st.subscription_type_children = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryParent queries the "parent" edge of the SubscriptionType entity.
func (st *SubscriptionType) QueryParent() *SubscriptionTypeQuery {
	return (&SubscriptionTypeClient{config: st.config}).QueryParent(st)
}

// QueryChildren queries the "children" edge of the SubscriptionType entity.
func (st *SubscriptionType) QueryChildren() *SubscriptionTypeQuery {
	return (&SubscriptionTypeClient{config: st.config}).QueryChildren(st)
}

// QueryChildSubscriptionTypes queries the "child_subscription_types" edge of the SubscriptionType entity.
func (st *SubscriptionType) QueryChildSubscriptionTypes() *SubscriptionTypeQuery {
	return (&SubscriptionTypeClient{config: st.config}).QueryChildSubscriptionTypes(st)
}

// Update returns a builder for updating this SubscriptionType.
// Note that you need to call SubscriptionType.Unwrap() before calling this method if this SubscriptionType
// was returned from a transaction, and the transaction was committed or rolled back.
func (st *SubscriptionType) Update() *SubscriptionTypeUpdateOne {
	return (&SubscriptionTypeClient{config: st.config}).UpdateOne(st)
}

// Unwrap unwraps the SubscriptionType entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (st *SubscriptionType) Unwrap() *SubscriptionType {
	tx, ok := st.config.driver.(*txDriver)
	if !ok {
		panic("ent: SubscriptionType is not a transactional entity")
	}
	st.config.driver = tx.drv
	return st
}

// String implements the fmt.Stringer.
func (st *SubscriptionType) String() string {
	var builder strings.Builder
	builder.WriteString("SubscriptionType(")
	builder.WriteString(fmt.Sprintf("id=%v", st.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(st.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(st.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", string_ref=")
	builder.WriteString(st.StringRef)
	builder.WriteString(", has_table=")
	builder.WriteString(fmt.Sprintf("%v", st.HasTable))
	builder.WriteString(", description=")
	builder.WriteString(st.Description)
	builder.WriteByte(')')
	return builder.String()
}

// SubscriptionTypes is a parsable slice of SubscriptionType.
type SubscriptionTypes []*SubscriptionType

func (st SubscriptionTypes) config(cfg config) {
	for _i := range st {
		st[_i].config = cfg
	}
}
