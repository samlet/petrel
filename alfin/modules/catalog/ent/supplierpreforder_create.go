// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/supplierpreforder"
)

// SupplierPrefOrderCreate is the builder for creating a SupplierPrefOrder entity.
type SupplierPrefOrderCreate struct {
	config
	mutation *SupplierPrefOrderMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (spoc *SupplierPrefOrderCreate) SetCreateTime(t time.Time) *SupplierPrefOrderCreate {
	spoc.mutation.SetCreateTime(t)
	return spoc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (spoc *SupplierPrefOrderCreate) SetNillableCreateTime(t *time.Time) *SupplierPrefOrderCreate {
	if t != nil {
		spoc.SetCreateTime(*t)
	}
	return spoc
}

// SetUpdateTime sets the "update_time" field.
func (spoc *SupplierPrefOrderCreate) SetUpdateTime(t time.Time) *SupplierPrefOrderCreate {
	spoc.mutation.SetUpdateTime(t)
	return spoc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (spoc *SupplierPrefOrderCreate) SetNillableUpdateTime(t *time.Time) *SupplierPrefOrderCreate {
	if t != nil {
		spoc.SetUpdateTime(*t)
	}
	return spoc
}

// SetStringRef sets the "string_ref" field.
func (spoc *SupplierPrefOrderCreate) SetStringRef(s string) *SupplierPrefOrderCreate {
	spoc.mutation.SetStringRef(s)
	return spoc
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (spoc *SupplierPrefOrderCreate) SetNillableStringRef(s *string) *SupplierPrefOrderCreate {
	if s != nil {
		spoc.SetStringRef(*s)
	}
	return spoc
}

// SetDescription sets the "description" field.
func (spoc *SupplierPrefOrderCreate) SetDescription(s string) *SupplierPrefOrderCreate {
	spoc.mutation.SetDescription(s)
	return spoc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (spoc *SupplierPrefOrderCreate) SetNillableDescription(s *string) *SupplierPrefOrderCreate {
	if s != nil {
		spoc.SetDescription(*s)
	}
	return spoc
}

// Mutation returns the SupplierPrefOrderMutation object of the builder.
func (spoc *SupplierPrefOrderCreate) Mutation() *SupplierPrefOrderMutation {
	return spoc.mutation
}

// Save creates the SupplierPrefOrder in the database.
func (spoc *SupplierPrefOrderCreate) Save(ctx context.Context) (*SupplierPrefOrder, error) {
	var (
		err  error
		node *SupplierPrefOrder
	)
	spoc.defaults()
	if len(spoc.hooks) == 0 {
		if err = spoc.check(); err != nil {
			return nil, err
		}
		node, err = spoc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SupplierPrefOrderMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = spoc.check(); err != nil {
				return nil, err
			}
			spoc.mutation = mutation
			if node, err = spoc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(spoc.hooks) - 1; i >= 0; i-- {
			mut = spoc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, spoc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (spoc *SupplierPrefOrderCreate) SaveX(ctx context.Context) *SupplierPrefOrder {
	v, err := spoc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (spoc *SupplierPrefOrderCreate) defaults() {
	if _, ok := spoc.mutation.CreateTime(); !ok {
		v := supplierpreforder.DefaultCreateTime()
		spoc.mutation.SetCreateTime(v)
	}
	if _, ok := spoc.mutation.UpdateTime(); !ok {
		v := supplierpreforder.DefaultUpdateTime()
		spoc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (spoc *SupplierPrefOrderCreate) check() error {
	if _, ok := spoc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New("ent: missing required field \"create_time\"")}
	}
	if _, ok := spoc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New("ent: missing required field \"update_time\"")}
	}
	return nil
}

func (spoc *SupplierPrefOrderCreate) sqlSave(ctx context.Context) (*SupplierPrefOrder, error) {
	_node, _spec := spoc.createSpec()
	if err := sqlgraph.CreateNode(ctx, spoc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (spoc *SupplierPrefOrderCreate) createSpec() (*SupplierPrefOrder, *sqlgraph.CreateSpec) {
	var (
		_node = &SupplierPrefOrder{config: spoc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: supplierpreforder.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: supplierpreforder.FieldID,
			},
		}
	)
	if value, ok := spoc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: supplierpreforder.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := spoc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: supplierpreforder.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := spoc.mutation.StringRef(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: supplierpreforder.FieldStringRef,
		})
		_node.StringRef = value
	}
	if value, ok := spoc.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: supplierpreforder.FieldDescription,
		})
		_node.Description = value
	}
	return _node, _spec
}

// SupplierPrefOrderCreateBulk is the builder for creating many SupplierPrefOrder entities in bulk.
type SupplierPrefOrderCreateBulk struct {
	config
	builders []*SupplierPrefOrderCreate
}

// Save creates the SupplierPrefOrder entities in the database.
func (spocb *SupplierPrefOrderCreateBulk) Save(ctx context.Context) ([]*SupplierPrefOrder, error) {
	specs := make([]*sqlgraph.CreateSpec, len(spocb.builders))
	nodes := make([]*SupplierPrefOrder, len(spocb.builders))
	mutators := make([]Mutator, len(spocb.builders))
	for i := range spocb.builders {
		func(i int, root context.Context) {
			builder := spocb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SupplierPrefOrderMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, spocb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, spocb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, spocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (spocb *SupplierPrefOrderCreateBulk) SaveX(ctx context.Context) []*SupplierPrefOrder {
	v, err := spocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
