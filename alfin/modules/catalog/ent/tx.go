// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"sync"

	"entgo.io/ent/dialect"
)

// Tx is a transactional client that is created by calling Client.Tx().
type Tx struct {
	config
	// ContentAssocType is the client for interacting with the ContentAssocType builders.
	ContentAssocType *ContentAssocTypeClient
	// ContentType is the client for interacting with the ContentType builders.
	ContentType *ContentTypeClient
	// CostComponentType is the client for interacting with the CostComponentType builders.
	CostComponentType *CostComponentTypeClient
	// CustomMethod is the client for interacting with the CustomMethod builders.
	CustomMethod *CustomMethodClient
	// CustomMethodType is the client for interacting with the CustomMethodType builders.
	CustomMethodType *CustomMethodTypeClient
	// Enumeration is the client for interacting with the Enumeration builders.
	Enumeration *EnumerationClient
	// EnumerationType is the client for interacting with the EnumerationType builders.
	EnumerationType *EnumerationTypeClient
	// FacilityAssocType is the client for interacting with the FacilityAssocType builders.
	FacilityAssocType *FacilityAssocTypeClient
	// FacilityGroup is the client for interacting with the FacilityGroup builders.
	FacilityGroup *FacilityGroupClient
	// FacilityGroupType is the client for interacting with the FacilityGroupType builders.
	FacilityGroupType *FacilityGroupTypeClient
	// FacilityType is the client for interacting with the FacilityType builders.
	FacilityType *FacilityTypeClient
	// GoodIdentificationType is the client for interacting with the GoodIdentificationType builders.
	GoodIdentificationType *GoodIdentificationTypeClient
	// InventoryItemDetail is the client for interacting with the InventoryItemDetail builders.
	InventoryItemDetail *InventoryItemDetailClient
	// InventoryItemType is the client for interacting with the InventoryItemType builders.
	InventoryItemType *InventoryItemTypeClient
	// OrderAdjustment is the client for interacting with the OrderAdjustment builders.
	OrderAdjustment *OrderAdjustmentClient
	// OrderContactMech is the client for interacting with the OrderContactMech builders.
	OrderContactMech *OrderContactMechClient
	// OrderHeader is the client for interacting with the OrderHeader builders.
	OrderHeader *OrderHeaderClient
	// OrderItem is the client for interacting with the OrderItem builders.
	OrderItem *OrderItemClient
	// OrderItemShipGroup is the client for interacting with the OrderItemShipGroup builders.
	OrderItemShipGroup *OrderItemShipGroupClient
	// OrderItemShipGroupAssoc is the client for interacting with the OrderItemShipGroupAssoc builders.
	OrderItemShipGroupAssoc *OrderItemShipGroupAssocClient
	// OrderItemShipGrpInvRes is the client for interacting with the OrderItemShipGrpInvRes builders.
	OrderItemShipGrpInvRes *OrderItemShipGrpInvResClient
	// OrderPaymentPreference is the client for interacting with the OrderPaymentPreference builders.
	OrderPaymentPreference *OrderPaymentPreferenceClient
	// OrderRole is the client for interacting with the OrderRole builders.
	OrderRole *OrderRoleClient
	// OrderStatus is the client for interacting with the OrderStatus builders.
	OrderStatus *OrderStatusClient
	// ProdCatalogCategoryType is the client for interacting with the ProdCatalogCategoryType builders.
	ProdCatalogCategoryType *ProdCatalogCategoryTypeClient
	// ProdConfItemContentType is the client for interacting with the ProdConfItemContentType builders.
	ProdConfItemContentType *ProdConfItemContentTypeClient
	// Product is the client for interacting with the Product builders.
	Product *ProductClient
	// ProductAssoc is the client for interacting with the ProductAssoc builders.
	ProductAssoc *ProductAssocClient
	// ProductAssocType is the client for interacting with the ProductAssocType builders.
	ProductAssocType *ProductAssocTypeClient
	// ProductCategory is the client for interacting with the ProductCategory builders.
	ProductCategory *ProductCategoryClient
	// ProductCategoryContentType is the client for interacting with the ProductCategoryContentType builders.
	ProductCategoryContentType *ProductCategoryContentTypeClient
	// ProductCategoryType is the client for interacting with the ProductCategoryType builders.
	ProductCategoryType *ProductCategoryTypeClient
	// ProductConfigItem is the client for interacting with the ProductConfigItem builders.
	ProductConfigItem *ProductConfigItemClient
	// ProductContentType is the client for interacting with the ProductContentType builders.
	ProductContentType *ProductContentTypeClient
	// ProductFeature is the client for interacting with the ProductFeature builders.
	ProductFeature *ProductFeatureClient
	// ProductFeatureApplType is the client for interacting with the ProductFeatureApplType builders.
	ProductFeatureApplType *ProductFeatureApplTypeClient
	// ProductFeatureCategory is the client for interacting with the ProductFeatureCategory builders.
	ProductFeatureCategory *ProductFeatureCategoryClient
	// ProductFeatureIactnType is the client for interacting with the ProductFeatureIactnType builders.
	ProductFeatureIactnType *ProductFeatureIactnTypeClient
	// ProductFeatureType is the client for interacting with the ProductFeatureType builders.
	ProductFeatureType *ProductFeatureTypeClient
	// ProductMaintType is the client for interacting with the ProductMaintType builders.
	ProductMaintType *ProductMaintTypeClient
	// ProductMeterType is the client for interacting with the ProductMeterType builders.
	ProductMeterType *ProductMeterTypeClient
	// ProductPrice is the client for interacting with the ProductPrice builders.
	ProductPrice *ProductPriceClient
	// ProductPriceActionType is the client for interacting with the ProductPriceActionType builders.
	ProductPriceActionType *ProductPriceActionTypeClient
	// ProductPricePurpose is the client for interacting with the ProductPricePurpose builders.
	ProductPricePurpose *ProductPricePurposeClient
	// ProductPriceType is the client for interacting with the ProductPriceType builders.
	ProductPriceType *ProductPriceTypeClient
	// ProductReview is the client for interacting with the ProductReview builders.
	ProductReview *ProductReviewClient
	// ProductStore is the client for interacting with the ProductStore builders.
	ProductStore *ProductStoreClient
	// ProductStoreGroup is the client for interacting with the ProductStoreGroup builders.
	ProductStoreGroup *ProductStoreGroupClient
	// ProductType is the client for interacting with the ProductType builders.
	ProductType *ProductTypeClient
	// QuantityBreakType is the client for interacting with the QuantityBreakType builders.
	QuantityBreakType *QuantityBreakTypeClient
	// RejectionReason is the client for interacting with the RejectionReason builders.
	RejectionReason *RejectionReasonClient
	// RoleType is the client for interacting with the RoleType builders.
	RoleType *RoleTypeClient
	// ShipmentContactMechType is the client for interacting with the ShipmentContactMechType builders.
	ShipmentContactMechType *ShipmentContactMechTypeClient
	// ShipmentGatewayConfig is the client for interacting with the ShipmentGatewayConfig builders.
	ShipmentGatewayConfig *ShipmentGatewayConfigClient
	// ShipmentGatewayConfigType is the client for interacting with the ShipmentGatewayConfigType builders.
	ShipmentGatewayConfigType *ShipmentGatewayConfigTypeClient
	// ShipmentGatewayDhl is the client for interacting with the ShipmentGatewayDhl builders.
	ShipmentGatewayDhl *ShipmentGatewayDhlClient
	// ShipmentGatewayFedex is the client for interacting with the ShipmentGatewayFedex builders.
	ShipmentGatewayFedex *ShipmentGatewayFedexClient
	// ShipmentGatewayUps is the client for interacting with the ShipmentGatewayUps builders.
	ShipmentGatewayUps *ShipmentGatewayUpsClient
	// ShipmentGatewayUsps is the client for interacting with the ShipmentGatewayUsps builders.
	ShipmentGatewayUsps *ShipmentGatewayUspsClient
	// ShipmentType is the client for interacting with the ShipmentType builders.
	ShipmentType *ShipmentTypeClient
	// StatusItem is the client for interacting with the StatusItem builders.
	StatusItem *StatusItemClient
	// StatusType is the client for interacting with the StatusType builders.
	StatusType *StatusTypeClient
	// StatusValidChange is the client for interacting with the StatusValidChange builders.
	StatusValidChange *StatusValidChangeClient
	// SubscriptionType is the client for interacting with the SubscriptionType builders.
	SubscriptionType *SubscriptionTypeClient
	// SupplierPrefOrder is the client for interacting with the SupplierPrefOrder builders.
	SupplierPrefOrder *SupplierPrefOrderClient
	// VarianceReason is the client for interacting with the VarianceReason builders.
	VarianceReason *VarianceReasonClient

	// lazily loaded.
	client     *Client
	clientOnce sync.Once

	// completion callbacks.
	mu         sync.Mutex
	onCommit   []CommitHook
	onRollback []RollbackHook

	// ctx lives for the life of the transaction. It is
	// the same context used by the underlying connection.
	ctx context.Context
}

type (
	// Committer is the interface that wraps the Committer method.
	Committer interface {
		Commit(context.Context, *Tx) error
	}

	// The CommitFunc type is an adapter to allow the use of ordinary
	// function as a Committer. If f is a function with the appropriate
	// signature, CommitFunc(f) is a Committer that calls f.
	CommitFunc func(context.Context, *Tx) error

	// CommitHook defines the "commit middleware". A function that gets a Committer
	// and returns a Committer. For example:
	//
	//	hook := func(next ent.Committer) ent.Committer {
	//		return ent.CommitFunc(func(context.Context, tx *ent.Tx) error {
	//			// Do some stuff before.
	//			if err := next.Commit(ctx, tx); err != nil {
	//				return err
	//			}
	//			// Do some stuff after.
	//			return nil
	//		})
	//	}
	//
	CommitHook func(Committer) Committer
)

// Commit calls f(ctx, m).
func (f CommitFunc) Commit(ctx context.Context, tx *Tx) error {
	return f(ctx, tx)
}

// Commit commits the transaction.
func (tx *Tx) Commit() error {
	txDriver := tx.config.driver.(*txDriver)
	var fn Committer = CommitFunc(func(context.Context, *Tx) error {
		return txDriver.tx.Commit()
	})
	tx.mu.Lock()
	hooks := append([]CommitHook(nil), tx.onCommit...)
	tx.mu.Unlock()
	for i := len(hooks) - 1; i >= 0; i-- {
		fn = hooks[i](fn)
	}
	return fn.Commit(tx.ctx, tx)
}

// OnCommit adds a hook to call on commit.
func (tx *Tx) OnCommit(f CommitHook) {
	tx.mu.Lock()
	defer tx.mu.Unlock()
	tx.onCommit = append(tx.onCommit, f)
}

type (
	// Rollbacker is the interface that wraps the Rollbacker method.
	Rollbacker interface {
		Rollback(context.Context, *Tx) error
	}

	// The RollbackFunc type is an adapter to allow the use of ordinary
	// function as a Rollbacker. If f is a function with the appropriate
	// signature, RollbackFunc(f) is a Rollbacker that calls f.
	RollbackFunc func(context.Context, *Tx) error

	// RollbackHook defines the "rollback middleware". A function that gets a Rollbacker
	// and returns a Rollbacker. For example:
	//
	//	hook := func(next ent.Rollbacker) ent.Rollbacker {
	//		return ent.RollbackFunc(func(context.Context, tx *ent.Tx) error {
	//			// Do some stuff before.
	//			if err := next.Rollback(ctx, tx); err != nil {
	//				return err
	//			}
	//			// Do some stuff after.
	//			return nil
	//		})
	//	}
	//
	RollbackHook func(Rollbacker) Rollbacker
)

// Rollback calls f(ctx, m).
func (f RollbackFunc) Rollback(ctx context.Context, tx *Tx) error {
	return f(ctx, tx)
}

// Rollback rollbacks the transaction.
func (tx *Tx) Rollback() error {
	txDriver := tx.config.driver.(*txDriver)
	var fn Rollbacker = RollbackFunc(func(context.Context, *Tx) error {
		return txDriver.tx.Rollback()
	})
	tx.mu.Lock()
	hooks := append([]RollbackHook(nil), tx.onRollback...)
	tx.mu.Unlock()
	for i := len(hooks) - 1; i >= 0; i-- {
		fn = hooks[i](fn)
	}
	return fn.Rollback(tx.ctx, tx)
}

// OnRollback adds a hook to call on rollback.
func (tx *Tx) OnRollback(f RollbackHook) {
	tx.mu.Lock()
	defer tx.mu.Unlock()
	tx.onRollback = append(tx.onRollback, f)
}

// Client returns a Client that binds to current transaction.
func (tx *Tx) Client() *Client {
	tx.clientOnce.Do(func() {
		tx.client = &Client{config: tx.config}
		tx.client.init()
	})
	return tx.client
}

func (tx *Tx) init() {
	tx.ContentAssocType = NewContentAssocTypeClient(tx.config)
	tx.ContentType = NewContentTypeClient(tx.config)
	tx.CostComponentType = NewCostComponentTypeClient(tx.config)
	tx.CustomMethod = NewCustomMethodClient(tx.config)
	tx.CustomMethodType = NewCustomMethodTypeClient(tx.config)
	tx.Enumeration = NewEnumerationClient(tx.config)
	tx.EnumerationType = NewEnumerationTypeClient(tx.config)
	tx.FacilityAssocType = NewFacilityAssocTypeClient(tx.config)
	tx.FacilityGroup = NewFacilityGroupClient(tx.config)
	tx.FacilityGroupType = NewFacilityGroupTypeClient(tx.config)
	tx.FacilityType = NewFacilityTypeClient(tx.config)
	tx.GoodIdentificationType = NewGoodIdentificationTypeClient(tx.config)
	tx.InventoryItemDetail = NewInventoryItemDetailClient(tx.config)
	tx.InventoryItemType = NewInventoryItemTypeClient(tx.config)
	tx.OrderAdjustment = NewOrderAdjustmentClient(tx.config)
	tx.OrderContactMech = NewOrderContactMechClient(tx.config)
	tx.OrderHeader = NewOrderHeaderClient(tx.config)
	tx.OrderItem = NewOrderItemClient(tx.config)
	tx.OrderItemShipGroup = NewOrderItemShipGroupClient(tx.config)
	tx.OrderItemShipGroupAssoc = NewOrderItemShipGroupAssocClient(tx.config)
	tx.OrderItemShipGrpInvRes = NewOrderItemShipGrpInvResClient(tx.config)
	tx.OrderPaymentPreference = NewOrderPaymentPreferenceClient(tx.config)
	tx.OrderRole = NewOrderRoleClient(tx.config)
	tx.OrderStatus = NewOrderStatusClient(tx.config)
	tx.ProdCatalogCategoryType = NewProdCatalogCategoryTypeClient(tx.config)
	tx.ProdConfItemContentType = NewProdConfItemContentTypeClient(tx.config)
	tx.Product = NewProductClient(tx.config)
	tx.ProductAssoc = NewProductAssocClient(tx.config)
	tx.ProductAssocType = NewProductAssocTypeClient(tx.config)
	tx.ProductCategory = NewProductCategoryClient(tx.config)
	tx.ProductCategoryContentType = NewProductCategoryContentTypeClient(tx.config)
	tx.ProductCategoryType = NewProductCategoryTypeClient(tx.config)
	tx.ProductConfigItem = NewProductConfigItemClient(tx.config)
	tx.ProductContentType = NewProductContentTypeClient(tx.config)
	tx.ProductFeature = NewProductFeatureClient(tx.config)
	tx.ProductFeatureApplType = NewProductFeatureApplTypeClient(tx.config)
	tx.ProductFeatureCategory = NewProductFeatureCategoryClient(tx.config)
	tx.ProductFeatureIactnType = NewProductFeatureIactnTypeClient(tx.config)
	tx.ProductFeatureType = NewProductFeatureTypeClient(tx.config)
	tx.ProductMaintType = NewProductMaintTypeClient(tx.config)
	tx.ProductMeterType = NewProductMeterTypeClient(tx.config)
	tx.ProductPrice = NewProductPriceClient(tx.config)
	tx.ProductPriceActionType = NewProductPriceActionTypeClient(tx.config)
	tx.ProductPricePurpose = NewProductPricePurposeClient(tx.config)
	tx.ProductPriceType = NewProductPriceTypeClient(tx.config)
	tx.ProductReview = NewProductReviewClient(tx.config)
	tx.ProductStore = NewProductStoreClient(tx.config)
	tx.ProductStoreGroup = NewProductStoreGroupClient(tx.config)
	tx.ProductType = NewProductTypeClient(tx.config)
	tx.QuantityBreakType = NewQuantityBreakTypeClient(tx.config)
	tx.RejectionReason = NewRejectionReasonClient(tx.config)
	tx.RoleType = NewRoleTypeClient(tx.config)
	tx.ShipmentContactMechType = NewShipmentContactMechTypeClient(tx.config)
	tx.ShipmentGatewayConfig = NewShipmentGatewayConfigClient(tx.config)
	tx.ShipmentGatewayConfigType = NewShipmentGatewayConfigTypeClient(tx.config)
	tx.ShipmentGatewayDhl = NewShipmentGatewayDhlClient(tx.config)
	tx.ShipmentGatewayFedex = NewShipmentGatewayFedexClient(tx.config)
	tx.ShipmentGatewayUps = NewShipmentGatewayUpsClient(tx.config)
	tx.ShipmentGatewayUsps = NewShipmentGatewayUspsClient(tx.config)
	tx.ShipmentType = NewShipmentTypeClient(tx.config)
	tx.StatusItem = NewStatusItemClient(tx.config)
	tx.StatusType = NewStatusTypeClient(tx.config)
	tx.StatusValidChange = NewStatusValidChangeClient(tx.config)
	tx.SubscriptionType = NewSubscriptionTypeClient(tx.config)
	tx.SupplierPrefOrder = NewSupplierPrefOrderClient(tx.config)
	tx.VarianceReason = NewVarianceReasonClient(tx.config)
}

// txDriver wraps the given dialect.Tx with a nop dialect.Driver implementation.
// The idea is to support transactions without adding any extra code to the builders.
// When a builder calls to driver.Tx(), it gets the same dialect.Tx instance.
// Commit and Rollback are nop for the internal builders and the user must call one
// of them in order to commit or rollback the transaction.
//
// If a closed transaction is embedded in one of the generated entities, and the entity
// applies a query, for example: ContentAssocType.QueryXXX(), the query will be executed
// through the driver which created this transaction.
//
// Note that txDriver is not goroutine safe.
type txDriver struct {
	// the driver we started the transaction from.
	drv dialect.Driver
	// tx is the underlying transaction.
	tx dialect.Tx
}

// newTx creates a new transactional driver.
func newTx(ctx context.Context, drv dialect.Driver) (*txDriver, error) {
	tx, err := drv.Tx(ctx)
	if err != nil {
		return nil, err
	}
	return &txDriver{tx: tx, drv: drv}, nil
}

// Tx returns the transaction wrapper (txDriver) to avoid Commit or Rollback calls
// from the internal builders. Should be called only by the internal builders.
func (tx *txDriver) Tx(context.Context) (dialect.Tx, error) { return tx, nil }

// Dialect returns the dialect of the driver we started the transaction from.
func (tx *txDriver) Dialect() string { return tx.drv.Dialect() }

// Close is a nop close.
func (*txDriver) Close() error { return nil }

// Commit is a nop commit for the internal builders.
// User must call `Tx.Commit` in order to commit the transaction.
func (*txDriver) Commit() error { return nil }

// Rollback is a nop rollback for the internal builders.
// User must call `Tx.Rollback` in order to rollback the transaction.
func (*txDriver) Rollback() error { return nil }

// Exec calls tx.Exec.
func (tx *txDriver) Exec(ctx context.Context, query string, args, v interface{}) error {
	return tx.tx.Exec(ctx, query, args, v)
}

// Query calls tx.Query.
func (tx *txDriver) Query(ctx context.Context, query string, args, v interface{}) error {
	return tx.tx.Query(ctx, query, args, v)
}

var _ dialect.Driver = (*txDriver)(nil)
