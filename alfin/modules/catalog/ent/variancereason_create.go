// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/variancereason"
)

// VarianceReasonCreate is the builder for creating a VarianceReason entity.
type VarianceReasonCreate struct {
	config
	mutation *VarianceReasonMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (vrc *VarianceReasonCreate) SetCreateTime(t time.Time) *VarianceReasonCreate {
	vrc.mutation.SetCreateTime(t)
	return vrc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (vrc *VarianceReasonCreate) SetNillableCreateTime(t *time.Time) *VarianceReasonCreate {
	if t != nil {
		vrc.SetCreateTime(*t)
	}
	return vrc
}

// SetUpdateTime sets the "update_time" field.
func (vrc *VarianceReasonCreate) SetUpdateTime(t time.Time) *VarianceReasonCreate {
	vrc.mutation.SetUpdateTime(t)
	return vrc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (vrc *VarianceReasonCreate) SetNillableUpdateTime(t *time.Time) *VarianceReasonCreate {
	if t != nil {
		vrc.SetUpdateTime(*t)
	}
	return vrc
}

// SetStringRef sets the "string_ref" field.
func (vrc *VarianceReasonCreate) SetStringRef(s string) *VarianceReasonCreate {
	vrc.mutation.SetStringRef(s)
	return vrc
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (vrc *VarianceReasonCreate) SetNillableStringRef(s *string) *VarianceReasonCreate {
	if s != nil {
		vrc.SetStringRef(*s)
	}
	return vrc
}

// SetDescription sets the "description" field.
func (vrc *VarianceReasonCreate) SetDescription(s string) *VarianceReasonCreate {
	vrc.mutation.SetDescription(s)
	return vrc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (vrc *VarianceReasonCreate) SetNillableDescription(s *string) *VarianceReasonCreate {
	if s != nil {
		vrc.SetDescription(*s)
	}
	return vrc
}

// Mutation returns the VarianceReasonMutation object of the builder.
func (vrc *VarianceReasonCreate) Mutation() *VarianceReasonMutation {
	return vrc.mutation
}

// Save creates the VarianceReason in the database.
func (vrc *VarianceReasonCreate) Save(ctx context.Context) (*VarianceReason, error) {
	var (
		err  error
		node *VarianceReason
	)
	vrc.defaults()
	if len(vrc.hooks) == 0 {
		if err = vrc.check(); err != nil {
			return nil, err
		}
		node, err = vrc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VarianceReasonMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = vrc.check(); err != nil {
				return nil, err
			}
			vrc.mutation = mutation
			if node, err = vrc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(vrc.hooks) - 1; i >= 0; i-- {
			mut = vrc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, vrc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (vrc *VarianceReasonCreate) SaveX(ctx context.Context) *VarianceReason {
	v, err := vrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (vrc *VarianceReasonCreate) defaults() {
	if _, ok := vrc.mutation.CreateTime(); !ok {
		v := variancereason.DefaultCreateTime()
		vrc.mutation.SetCreateTime(v)
	}
	if _, ok := vrc.mutation.UpdateTime(); !ok {
		v := variancereason.DefaultUpdateTime()
		vrc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vrc *VarianceReasonCreate) check() error {
	if _, ok := vrc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New("ent: missing required field \"create_time\"")}
	}
	if _, ok := vrc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New("ent: missing required field \"update_time\"")}
	}
	return nil
}

func (vrc *VarianceReasonCreate) sqlSave(ctx context.Context) (*VarianceReason, error) {
	_node, _spec := vrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vrc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (vrc *VarianceReasonCreate) createSpec() (*VarianceReason, *sqlgraph.CreateSpec) {
	var (
		_node = &VarianceReason{config: vrc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: variancereason.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: variancereason.FieldID,
			},
		}
	)
	if value, ok := vrc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: variancereason.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := vrc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: variancereason.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := vrc.mutation.StringRef(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: variancereason.FieldStringRef,
		})
		_node.StringRef = value
	}
	if value, ok := vrc.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: variancereason.FieldDescription,
		})
		_node.Description = value
	}
	return _node, _spec
}

// VarianceReasonCreateBulk is the builder for creating many VarianceReason entities in bulk.
type VarianceReasonCreateBulk struct {
	config
	builders []*VarianceReasonCreate
}

// Save creates the VarianceReason entities in the database.
func (vrcb *VarianceReasonCreateBulk) Save(ctx context.Context) ([]*VarianceReason, error) {
	specs := make([]*sqlgraph.CreateSpec, len(vrcb.builders))
	nodes := make([]*VarianceReason, len(vrcb.builders))
	mutators := make([]Mutator, len(vrcb.builders))
	for i := range vrcb.builders {
		func(i int, root context.Context) {
			builder := vrcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VarianceReasonMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vrcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vrcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vrcb *VarianceReasonCreateBulk) SaveX(ctx context.Context) []*VarianceReason {
	v, err := vrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
