// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/predicate"
	"github.com/samlet/petrel/alfin/modules/catalog/ent/variancereason"
)

// VarianceReasonUpdate is the builder for updating VarianceReason entities.
type VarianceReasonUpdate struct {
	config
	hooks    []Hook
	mutation *VarianceReasonMutation
}

// Where adds a new predicate for the VarianceReasonUpdate builder.
func (vru *VarianceReasonUpdate) Where(ps ...predicate.VarianceReason) *VarianceReasonUpdate {
	vru.mutation.predicates = append(vru.mutation.predicates, ps...)
	return vru
}

// SetStringRef sets the "string_ref" field.
func (vru *VarianceReasonUpdate) SetStringRef(s string) *VarianceReasonUpdate {
	vru.mutation.SetStringRef(s)
	return vru
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (vru *VarianceReasonUpdate) SetNillableStringRef(s *string) *VarianceReasonUpdate {
	if s != nil {
		vru.SetStringRef(*s)
	}
	return vru
}

// ClearStringRef clears the value of the "string_ref" field.
func (vru *VarianceReasonUpdate) ClearStringRef() *VarianceReasonUpdate {
	vru.mutation.ClearStringRef()
	return vru
}

// SetDescription sets the "description" field.
func (vru *VarianceReasonUpdate) SetDescription(s string) *VarianceReasonUpdate {
	vru.mutation.SetDescription(s)
	return vru
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (vru *VarianceReasonUpdate) SetNillableDescription(s *string) *VarianceReasonUpdate {
	if s != nil {
		vru.SetDescription(*s)
	}
	return vru
}

// ClearDescription clears the value of the "description" field.
func (vru *VarianceReasonUpdate) ClearDescription() *VarianceReasonUpdate {
	vru.mutation.ClearDescription()
	return vru
}

// Mutation returns the VarianceReasonMutation object of the builder.
func (vru *VarianceReasonUpdate) Mutation() *VarianceReasonMutation {
	return vru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vru *VarianceReasonUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	vru.defaults()
	if len(vru.hooks) == 0 {
		affected, err = vru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VarianceReasonMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			vru.mutation = mutation
			affected, err = vru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(vru.hooks) - 1; i >= 0; i-- {
			mut = vru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, vru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (vru *VarianceReasonUpdate) SaveX(ctx context.Context) int {
	affected, err := vru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vru *VarianceReasonUpdate) Exec(ctx context.Context) error {
	_, err := vru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vru *VarianceReasonUpdate) ExecX(ctx context.Context) {
	if err := vru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vru *VarianceReasonUpdate) defaults() {
	if _, ok := vru.mutation.UpdateTime(); !ok {
		v := variancereason.UpdateDefaultUpdateTime()
		vru.mutation.SetUpdateTime(v)
	}
}

func (vru *VarianceReasonUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   variancereason.Table,
			Columns: variancereason.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: variancereason.FieldID,
			},
		},
	}
	if ps := vru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vru.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: variancereason.FieldUpdateTime,
		})
	}
	if value, ok := vru.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: variancereason.FieldStringRef,
		})
	}
	if vru.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: variancereason.FieldStringRef,
		})
	}
	if value, ok := vru.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: variancereason.FieldDescription,
		})
	}
	if vru.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: variancereason.FieldDescription,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{variancereason.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// VarianceReasonUpdateOne is the builder for updating a single VarianceReason entity.
type VarianceReasonUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VarianceReasonMutation
}

// SetStringRef sets the "string_ref" field.
func (vruo *VarianceReasonUpdateOne) SetStringRef(s string) *VarianceReasonUpdateOne {
	vruo.mutation.SetStringRef(s)
	return vruo
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (vruo *VarianceReasonUpdateOne) SetNillableStringRef(s *string) *VarianceReasonUpdateOne {
	if s != nil {
		vruo.SetStringRef(*s)
	}
	return vruo
}

// ClearStringRef clears the value of the "string_ref" field.
func (vruo *VarianceReasonUpdateOne) ClearStringRef() *VarianceReasonUpdateOne {
	vruo.mutation.ClearStringRef()
	return vruo
}

// SetDescription sets the "description" field.
func (vruo *VarianceReasonUpdateOne) SetDescription(s string) *VarianceReasonUpdateOne {
	vruo.mutation.SetDescription(s)
	return vruo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (vruo *VarianceReasonUpdateOne) SetNillableDescription(s *string) *VarianceReasonUpdateOne {
	if s != nil {
		vruo.SetDescription(*s)
	}
	return vruo
}

// ClearDescription clears the value of the "description" field.
func (vruo *VarianceReasonUpdateOne) ClearDescription() *VarianceReasonUpdateOne {
	vruo.mutation.ClearDescription()
	return vruo
}

// Mutation returns the VarianceReasonMutation object of the builder.
func (vruo *VarianceReasonUpdateOne) Mutation() *VarianceReasonMutation {
	return vruo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vruo *VarianceReasonUpdateOne) Select(field string, fields ...string) *VarianceReasonUpdateOne {
	vruo.fields = append([]string{field}, fields...)
	return vruo
}

// Save executes the query and returns the updated VarianceReason entity.
func (vruo *VarianceReasonUpdateOne) Save(ctx context.Context) (*VarianceReason, error) {
	var (
		err  error
		node *VarianceReason
	)
	vruo.defaults()
	if len(vruo.hooks) == 0 {
		node, err = vruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VarianceReasonMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			vruo.mutation = mutation
			node, err = vruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(vruo.hooks) - 1; i >= 0; i-- {
			mut = vruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, vruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (vruo *VarianceReasonUpdateOne) SaveX(ctx context.Context) *VarianceReason {
	node, err := vruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vruo *VarianceReasonUpdateOne) Exec(ctx context.Context) error {
	_, err := vruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vruo *VarianceReasonUpdateOne) ExecX(ctx context.Context) {
	if err := vruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vruo *VarianceReasonUpdateOne) defaults() {
	if _, ok := vruo.mutation.UpdateTime(); !ok {
		v := variancereason.UpdateDefaultUpdateTime()
		vruo.mutation.SetUpdateTime(v)
	}
}

func (vruo *VarianceReasonUpdateOne) sqlSave(ctx context.Context) (_node *VarianceReason, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   variancereason.Table,
			Columns: variancereason.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: variancereason.FieldID,
			},
		},
	}
	id, ok := vruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing VarianceReason.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := vruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, variancereason.FieldID)
		for _, f := range fields {
			if !variancereason.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != variancereason.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vruo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: variancereason.FieldUpdateTime,
		})
	}
	if value, ok := vruo.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: variancereason.FieldStringRef,
		})
	}
	if vruo.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: variancereason.FieldStringRef,
		})
	}
	if value, ok := vruo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: variancereason.FieldDescription,
		})
	}
	if vruo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: variancereason.FieldDescription,
		})
	}
	_node = &VarianceReason{config: vruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{variancereason.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
