// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/migrate"

	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/itemissuance"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/ordercontactmech"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/orderheader"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/orderitem"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/orderitempriceinfo"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/orderitemshipgroup"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/orderitemshipgroupassoc"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/orderrole"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/orderstatus"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/payment"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/shipment"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/shipmentitem"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// ItemIssuance is the client for interacting with the ItemIssuance builders.
	ItemIssuance *ItemIssuanceClient
	// OrderContactMech is the client for interacting with the OrderContactMech builders.
	OrderContactMech *OrderContactMechClient
	// OrderHeader is the client for interacting with the OrderHeader builders.
	OrderHeader *OrderHeaderClient
	// OrderItem is the client for interacting with the OrderItem builders.
	OrderItem *OrderItemClient
	// OrderItemPriceInfo is the client for interacting with the OrderItemPriceInfo builders.
	OrderItemPriceInfo *OrderItemPriceInfoClient
	// OrderItemShipGroup is the client for interacting with the OrderItemShipGroup builders.
	OrderItemShipGroup *OrderItemShipGroupClient
	// OrderItemShipGroupAssoc is the client for interacting with the OrderItemShipGroupAssoc builders.
	OrderItemShipGroupAssoc *OrderItemShipGroupAssocClient
	// OrderRole is the client for interacting with the OrderRole builders.
	OrderRole *OrderRoleClient
	// OrderStatus is the client for interacting with the OrderStatus builders.
	OrderStatus *OrderStatusClient
	// Payment is the client for interacting with the Payment builders.
	Payment *PaymentClient
	// Shipment is the client for interacting with the Shipment builders.
	Shipment *ShipmentClient
	// ShipmentItem is the client for interacting with the ShipmentItem builders.
	ShipmentItem *ShipmentItemClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.ItemIssuance = NewItemIssuanceClient(c.config)
	c.OrderContactMech = NewOrderContactMechClient(c.config)
	c.OrderHeader = NewOrderHeaderClient(c.config)
	c.OrderItem = NewOrderItemClient(c.config)
	c.OrderItemPriceInfo = NewOrderItemPriceInfoClient(c.config)
	c.OrderItemShipGroup = NewOrderItemShipGroupClient(c.config)
	c.OrderItemShipGroupAssoc = NewOrderItemShipGroupAssocClient(c.config)
	c.OrderRole = NewOrderRoleClient(c.config)
	c.OrderStatus = NewOrderStatusClient(c.config)
	c.Payment = NewPaymentClient(c.config)
	c.Shipment = NewShipmentClient(c.config)
	c.ShipmentItem = NewShipmentItemClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                     ctx,
		config:                  cfg,
		ItemIssuance:            NewItemIssuanceClient(cfg),
		OrderContactMech:        NewOrderContactMechClient(cfg),
		OrderHeader:             NewOrderHeaderClient(cfg),
		OrderItem:               NewOrderItemClient(cfg),
		OrderItemPriceInfo:      NewOrderItemPriceInfoClient(cfg),
		OrderItemShipGroup:      NewOrderItemShipGroupClient(cfg),
		OrderItemShipGroupAssoc: NewOrderItemShipGroupAssocClient(cfg),
		OrderRole:               NewOrderRoleClient(cfg),
		OrderStatus:             NewOrderStatusClient(cfg),
		Payment:                 NewPaymentClient(cfg),
		Shipment:                NewShipmentClient(cfg),
		ShipmentItem:            NewShipmentItemClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		config:                  cfg,
		ItemIssuance:            NewItemIssuanceClient(cfg),
		OrderContactMech:        NewOrderContactMechClient(cfg),
		OrderHeader:             NewOrderHeaderClient(cfg),
		OrderItem:               NewOrderItemClient(cfg),
		OrderItemPriceInfo:      NewOrderItemPriceInfoClient(cfg),
		OrderItemShipGroup:      NewOrderItemShipGroupClient(cfg),
		OrderItemShipGroupAssoc: NewOrderItemShipGroupAssocClient(cfg),
		OrderRole:               NewOrderRoleClient(cfg),
		OrderStatus:             NewOrderStatusClient(cfg),
		Payment:                 NewPaymentClient(cfg),
		Shipment:                NewShipmentClient(cfg),
		ShipmentItem:            NewShipmentItemClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		ItemIssuance.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.ItemIssuance.Use(hooks...)
	c.OrderContactMech.Use(hooks...)
	c.OrderHeader.Use(hooks...)
	c.OrderItem.Use(hooks...)
	c.OrderItemPriceInfo.Use(hooks...)
	c.OrderItemShipGroup.Use(hooks...)
	c.OrderItemShipGroupAssoc.Use(hooks...)
	c.OrderRole.Use(hooks...)
	c.OrderStatus.Use(hooks...)
	c.Payment.Use(hooks...)
	c.Shipment.Use(hooks...)
	c.ShipmentItem.Use(hooks...)
}

// ItemIssuanceClient is a client for the ItemIssuance schema.
type ItemIssuanceClient struct {
	config
}

// NewItemIssuanceClient returns a client for the ItemIssuance from the given config.
func NewItemIssuanceClient(c config) *ItemIssuanceClient {
	return &ItemIssuanceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `itemissuance.Hooks(f(g(h())))`.
func (c *ItemIssuanceClient) Use(hooks ...Hook) {
	c.hooks.ItemIssuance = append(c.hooks.ItemIssuance, hooks...)
}

// Create returns a create builder for ItemIssuance.
func (c *ItemIssuanceClient) Create() *ItemIssuanceCreate {
	mutation := newItemIssuanceMutation(c.config, OpCreate)
	return &ItemIssuanceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ItemIssuance entities.
func (c *ItemIssuanceClient) CreateBulk(builders ...*ItemIssuanceCreate) *ItemIssuanceCreateBulk {
	return &ItemIssuanceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ItemIssuance.
func (c *ItemIssuanceClient) Update() *ItemIssuanceUpdate {
	mutation := newItemIssuanceMutation(c.config, OpUpdate)
	return &ItemIssuanceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ItemIssuanceClient) UpdateOne(ii *ItemIssuance) *ItemIssuanceUpdateOne {
	mutation := newItemIssuanceMutation(c.config, OpUpdateOne, withItemIssuance(ii))
	return &ItemIssuanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ItemIssuanceClient) UpdateOneID(id int) *ItemIssuanceUpdateOne {
	mutation := newItemIssuanceMutation(c.config, OpUpdateOne, withItemIssuanceID(id))
	return &ItemIssuanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ItemIssuance.
func (c *ItemIssuanceClient) Delete() *ItemIssuanceDelete {
	mutation := newItemIssuanceMutation(c.config, OpDelete)
	return &ItemIssuanceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ItemIssuanceClient) DeleteOne(ii *ItemIssuance) *ItemIssuanceDeleteOne {
	return c.DeleteOneID(ii.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ItemIssuanceClient) DeleteOneID(id int) *ItemIssuanceDeleteOne {
	builder := c.Delete().Where(itemissuance.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ItemIssuanceDeleteOne{builder}
}

// Query returns a query builder for ItemIssuance.
func (c *ItemIssuanceClient) Query() *ItemIssuanceQuery {
	return &ItemIssuanceQuery{
		config: c.config,
	}
}

// Get returns a ItemIssuance entity by its id.
func (c *ItemIssuanceClient) Get(ctx context.Context, id int) (*ItemIssuance, error) {
	return c.Query().Where(itemissuance.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ItemIssuanceClient) GetX(ctx context.Context, id int) *ItemIssuance {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryShipment queries the shipment edge of a ItemIssuance.
func (c *ItemIssuanceClient) QueryShipment(ii *ItemIssuance) *ShipmentQuery {
	query := &ShipmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ii.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(itemissuance.Table, itemissuance.FieldID, id),
			sqlgraph.To(shipment.Table, shipment.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, itemissuance.ShipmentTable, itemissuance.ShipmentColumn),
		)
		fromV = sqlgraph.Neighbors(ii.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryShipmentItem queries the shipment_item edge of a ItemIssuance.
func (c *ItemIssuanceClient) QueryShipmentItem(ii *ItemIssuance) *ShipmentItemQuery {
	query := &ShipmentItemQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ii.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(itemissuance.Table, itemissuance.FieldID, id),
			sqlgraph.To(shipmentitem.Table, shipmentitem.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, itemissuance.ShipmentItemTable, itemissuance.ShipmentItemColumn),
		)
		fromV = sqlgraph.Neighbors(ii.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrderHeader queries the order_header edge of a ItemIssuance.
func (c *ItemIssuanceClient) QueryOrderHeader(ii *ItemIssuance) *OrderHeaderQuery {
	query := &OrderHeaderQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ii.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(itemissuance.Table, itemissuance.FieldID, id),
			sqlgraph.To(orderheader.Table, orderheader.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, itemissuance.OrderHeaderTable, itemissuance.OrderHeaderColumn),
		)
		fromV = sqlgraph.Neighbors(ii.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrderItem queries the order_item edge of a ItemIssuance.
func (c *ItemIssuanceClient) QueryOrderItem(ii *ItemIssuance) *OrderItemQuery {
	query := &OrderItemQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ii.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(itemissuance.Table, itemissuance.FieldID, id),
			sqlgraph.To(orderitem.Table, orderitem.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, itemissuance.OrderItemTable, itemissuance.OrderItemColumn),
		)
		fromV = sqlgraph.Neighbors(ii.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ItemIssuanceClient) Hooks() []Hook {
	return c.hooks.ItemIssuance
}

// OrderContactMechClient is a client for the OrderContactMech schema.
type OrderContactMechClient struct {
	config
}

// NewOrderContactMechClient returns a client for the OrderContactMech from the given config.
func NewOrderContactMechClient(c config) *OrderContactMechClient {
	return &OrderContactMechClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `ordercontactmech.Hooks(f(g(h())))`.
func (c *OrderContactMechClient) Use(hooks ...Hook) {
	c.hooks.OrderContactMech = append(c.hooks.OrderContactMech, hooks...)
}

// Create returns a create builder for OrderContactMech.
func (c *OrderContactMechClient) Create() *OrderContactMechCreate {
	mutation := newOrderContactMechMutation(c.config, OpCreate)
	return &OrderContactMechCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OrderContactMech entities.
func (c *OrderContactMechClient) CreateBulk(builders ...*OrderContactMechCreate) *OrderContactMechCreateBulk {
	return &OrderContactMechCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OrderContactMech.
func (c *OrderContactMechClient) Update() *OrderContactMechUpdate {
	mutation := newOrderContactMechMutation(c.config, OpUpdate)
	return &OrderContactMechUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrderContactMechClient) UpdateOne(ocm *OrderContactMech) *OrderContactMechUpdateOne {
	mutation := newOrderContactMechMutation(c.config, OpUpdateOne, withOrderContactMech(ocm))
	return &OrderContactMechUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrderContactMechClient) UpdateOneID(id int) *OrderContactMechUpdateOne {
	mutation := newOrderContactMechMutation(c.config, OpUpdateOne, withOrderContactMechID(id))
	return &OrderContactMechUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OrderContactMech.
func (c *OrderContactMechClient) Delete() *OrderContactMechDelete {
	mutation := newOrderContactMechMutation(c.config, OpDelete)
	return &OrderContactMechDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *OrderContactMechClient) DeleteOne(ocm *OrderContactMech) *OrderContactMechDeleteOne {
	return c.DeleteOneID(ocm.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *OrderContactMechClient) DeleteOneID(id int) *OrderContactMechDeleteOne {
	builder := c.Delete().Where(ordercontactmech.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrderContactMechDeleteOne{builder}
}

// Query returns a query builder for OrderContactMech.
func (c *OrderContactMechClient) Query() *OrderContactMechQuery {
	return &OrderContactMechQuery{
		config: c.config,
	}
}

// Get returns a OrderContactMech entity by its id.
func (c *OrderContactMechClient) Get(ctx context.Context, id int) (*OrderContactMech, error) {
	return c.Query().Where(ordercontactmech.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrderContactMechClient) GetX(ctx context.Context, id int) *OrderContactMech {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOrderHeader queries the order_header edge of a OrderContactMech.
func (c *OrderContactMechClient) QueryOrderHeader(ocm *OrderContactMech) *OrderHeaderQuery {
	query := &OrderHeaderQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ocm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(ordercontactmech.Table, ordercontactmech.FieldID, id),
			sqlgraph.To(orderheader.Table, orderheader.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ordercontactmech.OrderHeaderTable, ordercontactmech.OrderHeaderColumn),
		)
		fromV = sqlgraph.Neighbors(ocm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OrderContactMechClient) Hooks() []Hook {
	return c.hooks.OrderContactMech
}

// OrderHeaderClient is a client for the OrderHeader schema.
type OrderHeaderClient struct {
	config
}

// NewOrderHeaderClient returns a client for the OrderHeader from the given config.
func NewOrderHeaderClient(c config) *OrderHeaderClient {
	return &OrderHeaderClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `orderheader.Hooks(f(g(h())))`.
func (c *OrderHeaderClient) Use(hooks ...Hook) {
	c.hooks.OrderHeader = append(c.hooks.OrderHeader, hooks...)
}

// Create returns a create builder for OrderHeader.
func (c *OrderHeaderClient) Create() *OrderHeaderCreate {
	mutation := newOrderHeaderMutation(c.config, OpCreate)
	return &OrderHeaderCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OrderHeader entities.
func (c *OrderHeaderClient) CreateBulk(builders ...*OrderHeaderCreate) *OrderHeaderCreateBulk {
	return &OrderHeaderCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OrderHeader.
func (c *OrderHeaderClient) Update() *OrderHeaderUpdate {
	mutation := newOrderHeaderMutation(c.config, OpUpdate)
	return &OrderHeaderUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrderHeaderClient) UpdateOne(oh *OrderHeader) *OrderHeaderUpdateOne {
	mutation := newOrderHeaderMutation(c.config, OpUpdateOne, withOrderHeader(oh))
	return &OrderHeaderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrderHeaderClient) UpdateOneID(id int) *OrderHeaderUpdateOne {
	mutation := newOrderHeaderMutation(c.config, OpUpdateOne, withOrderHeaderID(id))
	return &OrderHeaderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OrderHeader.
func (c *OrderHeaderClient) Delete() *OrderHeaderDelete {
	mutation := newOrderHeaderMutation(c.config, OpDelete)
	return &OrderHeaderDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *OrderHeaderClient) DeleteOne(oh *OrderHeader) *OrderHeaderDeleteOne {
	return c.DeleteOneID(oh.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *OrderHeaderClient) DeleteOneID(id int) *OrderHeaderDeleteOne {
	builder := c.Delete().Where(orderheader.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrderHeaderDeleteOne{builder}
}

// Query returns a query builder for OrderHeader.
func (c *OrderHeaderClient) Query() *OrderHeaderQuery {
	return &OrderHeaderQuery{
		config: c.config,
	}
}

// Get returns a OrderHeader entity by its id.
func (c *OrderHeaderClient) Get(ctx context.Context, id int) (*OrderHeader, error) {
	return c.Query().Where(orderheader.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrderHeaderClient) GetX(ctx context.Context, id int) *OrderHeader {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryItemIssuances queries the item_issuances edge of a OrderHeader.
func (c *OrderHeaderClient) QueryItemIssuances(oh *OrderHeader) *ItemIssuanceQuery {
	query := &ItemIssuanceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := oh.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderheader.Table, orderheader.FieldID, id),
			sqlgraph.To(itemissuance.Table, itemissuance.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, orderheader.ItemIssuancesTable, orderheader.ItemIssuancesColumn),
		)
		fromV = sqlgraph.Neighbors(oh.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrderContactMeches queries the order_contact_meches edge of a OrderHeader.
func (c *OrderHeaderClient) QueryOrderContactMeches(oh *OrderHeader) *OrderContactMechQuery {
	query := &OrderContactMechQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := oh.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderheader.Table, orderheader.FieldID, id),
			sqlgraph.To(ordercontactmech.Table, ordercontactmech.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, orderheader.OrderContactMechesTable, orderheader.OrderContactMechesColumn),
		)
		fromV = sqlgraph.Neighbors(oh.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrderItems queries the order_items edge of a OrderHeader.
func (c *OrderHeaderClient) QueryOrderItems(oh *OrderHeader) *OrderItemQuery {
	query := &OrderItemQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := oh.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderheader.Table, orderheader.FieldID, id),
			sqlgraph.To(orderitem.Table, orderitem.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, orderheader.OrderItemsTable, orderheader.OrderItemsColumn),
		)
		fromV = sqlgraph.Neighbors(oh.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrderItemPriceInfos queries the order_item_price_infos edge of a OrderHeader.
func (c *OrderHeaderClient) QueryOrderItemPriceInfos(oh *OrderHeader) *OrderItemPriceInfoQuery {
	query := &OrderItemPriceInfoQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := oh.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderheader.Table, orderheader.FieldID, id),
			sqlgraph.To(orderitempriceinfo.Table, orderitempriceinfo.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, orderheader.OrderItemPriceInfosTable, orderheader.OrderItemPriceInfosColumn),
		)
		fromV = sqlgraph.Neighbors(oh.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrderItemShipGroups queries the order_item_ship_groups edge of a OrderHeader.
func (c *OrderHeaderClient) QueryOrderItemShipGroups(oh *OrderHeader) *OrderItemShipGroupQuery {
	query := &OrderItemShipGroupQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := oh.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderheader.Table, orderheader.FieldID, id),
			sqlgraph.To(orderitemshipgroup.Table, orderitemshipgroup.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, orderheader.OrderItemShipGroupsTable, orderheader.OrderItemShipGroupsColumn),
		)
		fromV = sqlgraph.Neighbors(oh.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrderItemShipGroupAssocs queries the order_item_ship_group_assocs edge of a OrderHeader.
func (c *OrderHeaderClient) QueryOrderItemShipGroupAssocs(oh *OrderHeader) *OrderItemShipGroupAssocQuery {
	query := &OrderItemShipGroupAssocQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := oh.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderheader.Table, orderheader.FieldID, id),
			sqlgraph.To(orderitemshipgroupassoc.Table, orderitemshipgroupassoc.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, orderheader.OrderItemShipGroupAssocsTable, orderheader.OrderItemShipGroupAssocsColumn),
		)
		fromV = sqlgraph.Neighbors(oh.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrderRoles queries the order_roles edge of a OrderHeader.
func (c *OrderHeaderClient) QueryOrderRoles(oh *OrderHeader) *OrderRoleQuery {
	query := &OrderRoleQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := oh.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderheader.Table, orderheader.FieldID, id),
			sqlgraph.To(orderrole.Table, orderrole.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, orderheader.OrderRolesTable, orderheader.OrderRolesColumn),
		)
		fromV = sqlgraph.Neighbors(oh.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrderStatuses queries the order_statuses edge of a OrderHeader.
func (c *OrderHeaderClient) QueryOrderStatuses(oh *OrderHeader) *OrderStatusQuery {
	query := &OrderStatusQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := oh.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderheader.Table, orderheader.FieldID, id),
			sqlgraph.To(orderstatus.Table, orderstatus.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, orderheader.OrderStatusesTable, orderheader.OrderStatusesColumn),
		)
		fromV = sqlgraph.Neighbors(oh.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPrimaryShipments queries the primary_shipments edge of a OrderHeader.
func (c *OrderHeaderClient) QueryPrimaryShipments(oh *OrderHeader) *ShipmentQuery {
	query := &ShipmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := oh.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderheader.Table, orderheader.FieldID, id),
			sqlgraph.To(shipment.Table, shipment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, orderheader.PrimaryShipmentsTable, orderheader.PrimaryShipmentsColumn),
		)
		fromV = sqlgraph.Neighbors(oh.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OrderHeaderClient) Hooks() []Hook {
	return c.hooks.OrderHeader
}

// OrderItemClient is a client for the OrderItem schema.
type OrderItemClient struct {
	config
}

// NewOrderItemClient returns a client for the OrderItem from the given config.
func NewOrderItemClient(c config) *OrderItemClient {
	return &OrderItemClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `orderitem.Hooks(f(g(h())))`.
func (c *OrderItemClient) Use(hooks ...Hook) {
	c.hooks.OrderItem = append(c.hooks.OrderItem, hooks...)
}

// Create returns a create builder for OrderItem.
func (c *OrderItemClient) Create() *OrderItemCreate {
	mutation := newOrderItemMutation(c.config, OpCreate)
	return &OrderItemCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OrderItem entities.
func (c *OrderItemClient) CreateBulk(builders ...*OrderItemCreate) *OrderItemCreateBulk {
	return &OrderItemCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OrderItem.
func (c *OrderItemClient) Update() *OrderItemUpdate {
	mutation := newOrderItemMutation(c.config, OpUpdate)
	return &OrderItemUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrderItemClient) UpdateOne(oi *OrderItem) *OrderItemUpdateOne {
	mutation := newOrderItemMutation(c.config, OpUpdateOne, withOrderItem(oi))
	return &OrderItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrderItemClient) UpdateOneID(id int) *OrderItemUpdateOne {
	mutation := newOrderItemMutation(c.config, OpUpdateOne, withOrderItemID(id))
	return &OrderItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OrderItem.
func (c *OrderItemClient) Delete() *OrderItemDelete {
	mutation := newOrderItemMutation(c.config, OpDelete)
	return &OrderItemDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *OrderItemClient) DeleteOne(oi *OrderItem) *OrderItemDeleteOne {
	return c.DeleteOneID(oi.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *OrderItemClient) DeleteOneID(id int) *OrderItemDeleteOne {
	builder := c.Delete().Where(orderitem.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrderItemDeleteOne{builder}
}

// Query returns a query builder for OrderItem.
func (c *OrderItemClient) Query() *OrderItemQuery {
	return &OrderItemQuery{
		config: c.config,
	}
}

// Get returns a OrderItem entity by its id.
func (c *OrderItemClient) Get(ctx context.Context, id int) (*OrderItem, error) {
	return c.Query().Where(orderitem.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrderItemClient) GetX(ctx context.Context, id int) *OrderItem {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOrderHeader queries the order_header edge of a OrderItem.
func (c *OrderItemClient) QueryOrderHeader(oi *OrderItem) *OrderHeaderQuery {
	query := &OrderHeaderQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := oi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderitem.Table, orderitem.FieldID, id),
			sqlgraph.To(orderheader.Table, orderheader.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, orderitem.OrderHeaderTable, orderitem.OrderHeaderColumn),
		)
		fromV = sqlgraph.Neighbors(oi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryItemIssuances queries the item_issuances edge of a OrderItem.
func (c *OrderItemClient) QueryItemIssuances(oi *OrderItem) *ItemIssuanceQuery {
	query := &ItemIssuanceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := oi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderitem.Table, orderitem.FieldID, id),
			sqlgraph.To(itemissuance.Table, itemissuance.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, orderitem.ItemIssuancesTable, orderitem.ItemIssuancesColumn),
		)
		fromV = sqlgraph.Neighbors(oi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrderItemPriceInfos queries the order_item_price_infos edge of a OrderItem.
func (c *OrderItemClient) QueryOrderItemPriceInfos(oi *OrderItem) *OrderItemPriceInfoQuery {
	query := &OrderItemPriceInfoQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := oi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderitem.Table, orderitem.FieldID, id),
			sqlgraph.To(orderitempriceinfo.Table, orderitempriceinfo.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, orderitem.OrderItemPriceInfosTable, orderitem.OrderItemPriceInfosColumn),
		)
		fromV = sqlgraph.Neighbors(oi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrderItemShipGroupAssocs queries the order_item_ship_group_assocs edge of a OrderItem.
func (c *OrderItemClient) QueryOrderItemShipGroupAssocs(oi *OrderItem) *OrderItemShipGroupAssocQuery {
	query := &OrderItemShipGroupAssocQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := oi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderitem.Table, orderitem.FieldID, id),
			sqlgraph.To(orderitemshipgroupassoc.Table, orderitemshipgroupassoc.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, orderitem.OrderItemShipGroupAssocsTable, orderitem.OrderItemShipGroupAssocsColumn),
		)
		fromV = sqlgraph.Neighbors(oi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrderStatuses queries the order_statuses edge of a OrderItem.
func (c *OrderItemClient) QueryOrderStatuses(oi *OrderItem) *OrderStatusQuery {
	query := &OrderStatusQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := oi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderitem.Table, orderitem.FieldID, id),
			sqlgraph.To(orderstatus.Table, orderstatus.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, orderitem.OrderStatusesTable, orderitem.OrderStatusesColumn),
		)
		fromV = sqlgraph.Neighbors(oi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OrderItemClient) Hooks() []Hook {
	return c.hooks.OrderItem
}

// OrderItemPriceInfoClient is a client for the OrderItemPriceInfo schema.
type OrderItemPriceInfoClient struct {
	config
}

// NewOrderItemPriceInfoClient returns a client for the OrderItemPriceInfo from the given config.
func NewOrderItemPriceInfoClient(c config) *OrderItemPriceInfoClient {
	return &OrderItemPriceInfoClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `orderitempriceinfo.Hooks(f(g(h())))`.
func (c *OrderItemPriceInfoClient) Use(hooks ...Hook) {
	c.hooks.OrderItemPriceInfo = append(c.hooks.OrderItemPriceInfo, hooks...)
}

// Create returns a create builder for OrderItemPriceInfo.
func (c *OrderItemPriceInfoClient) Create() *OrderItemPriceInfoCreate {
	mutation := newOrderItemPriceInfoMutation(c.config, OpCreate)
	return &OrderItemPriceInfoCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OrderItemPriceInfo entities.
func (c *OrderItemPriceInfoClient) CreateBulk(builders ...*OrderItemPriceInfoCreate) *OrderItemPriceInfoCreateBulk {
	return &OrderItemPriceInfoCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OrderItemPriceInfo.
func (c *OrderItemPriceInfoClient) Update() *OrderItemPriceInfoUpdate {
	mutation := newOrderItemPriceInfoMutation(c.config, OpUpdate)
	return &OrderItemPriceInfoUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrderItemPriceInfoClient) UpdateOne(oipi *OrderItemPriceInfo) *OrderItemPriceInfoUpdateOne {
	mutation := newOrderItemPriceInfoMutation(c.config, OpUpdateOne, withOrderItemPriceInfo(oipi))
	return &OrderItemPriceInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrderItemPriceInfoClient) UpdateOneID(id int) *OrderItemPriceInfoUpdateOne {
	mutation := newOrderItemPriceInfoMutation(c.config, OpUpdateOne, withOrderItemPriceInfoID(id))
	return &OrderItemPriceInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OrderItemPriceInfo.
func (c *OrderItemPriceInfoClient) Delete() *OrderItemPriceInfoDelete {
	mutation := newOrderItemPriceInfoMutation(c.config, OpDelete)
	return &OrderItemPriceInfoDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *OrderItemPriceInfoClient) DeleteOne(oipi *OrderItemPriceInfo) *OrderItemPriceInfoDeleteOne {
	return c.DeleteOneID(oipi.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *OrderItemPriceInfoClient) DeleteOneID(id int) *OrderItemPriceInfoDeleteOne {
	builder := c.Delete().Where(orderitempriceinfo.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrderItemPriceInfoDeleteOne{builder}
}

// Query returns a query builder for OrderItemPriceInfo.
func (c *OrderItemPriceInfoClient) Query() *OrderItemPriceInfoQuery {
	return &OrderItemPriceInfoQuery{
		config: c.config,
	}
}

// Get returns a OrderItemPriceInfo entity by its id.
func (c *OrderItemPriceInfoClient) Get(ctx context.Context, id int) (*OrderItemPriceInfo, error) {
	return c.Query().Where(orderitempriceinfo.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrderItemPriceInfoClient) GetX(ctx context.Context, id int) *OrderItemPriceInfo {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOrderHeader queries the order_header edge of a OrderItemPriceInfo.
func (c *OrderItemPriceInfoClient) QueryOrderHeader(oipi *OrderItemPriceInfo) *OrderHeaderQuery {
	query := &OrderHeaderQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := oipi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderitempriceinfo.Table, orderitempriceinfo.FieldID, id),
			sqlgraph.To(orderheader.Table, orderheader.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, orderitempriceinfo.OrderHeaderTable, orderitempriceinfo.OrderHeaderColumn),
		)
		fromV = sqlgraph.Neighbors(oipi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrderItem queries the order_item edge of a OrderItemPriceInfo.
func (c *OrderItemPriceInfoClient) QueryOrderItem(oipi *OrderItemPriceInfo) *OrderItemQuery {
	query := &OrderItemQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := oipi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderitempriceinfo.Table, orderitempriceinfo.FieldID, id),
			sqlgraph.To(orderitem.Table, orderitem.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, orderitempriceinfo.OrderItemTable, orderitempriceinfo.OrderItemColumn),
		)
		fromV = sqlgraph.Neighbors(oipi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OrderItemPriceInfoClient) Hooks() []Hook {
	return c.hooks.OrderItemPriceInfo
}

// OrderItemShipGroupClient is a client for the OrderItemShipGroup schema.
type OrderItemShipGroupClient struct {
	config
}

// NewOrderItemShipGroupClient returns a client for the OrderItemShipGroup from the given config.
func NewOrderItemShipGroupClient(c config) *OrderItemShipGroupClient {
	return &OrderItemShipGroupClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `orderitemshipgroup.Hooks(f(g(h())))`.
func (c *OrderItemShipGroupClient) Use(hooks ...Hook) {
	c.hooks.OrderItemShipGroup = append(c.hooks.OrderItemShipGroup, hooks...)
}

// Create returns a create builder for OrderItemShipGroup.
func (c *OrderItemShipGroupClient) Create() *OrderItemShipGroupCreate {
	mutation := newOrderItemShipGroupMutation(c.config, OpCreate)
	return &OrderItemShipGroupCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OrderItemShipGroup entities.
func (c *OrderItemShipGroupClient) CreateBulk(builders ...*OrderItemShipGroupCreate) *OrderItemShipGroupCreateBulk {
	return &OrderItemShipGroupCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OrderItemShipGroup.
func (c *OrderItemShipGroupClient) Update() *OrderItemShipGroupUpdate {
	mutation := newOrderItemShipGroupMutation(c.config, OpUpdate)
	return &OrderItemShipGroupUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrderItemShipGroupClient) UpdateOne(oisg *OrderItemShipGroup) *OrderItemShipGroupUpdateOne {
	mutation := newOrderItemShipGroupMutation(c.config, OpUpdateOne, withOrderItemShipGroup(oisg))
	return &OrderItemShipGroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrderItemShipGroupClient) UpdateOneID(id int) *OrderItemShipGroupUpdateOne {
	mutation := newOrderItemShipGroupMutation(c.config, OpUpdateOne, withOrderItemShipGroupID(id))
	return &OrderItemShipGroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OrderItemShipGroup.
func (c *OrderItemShipGroupClient) Delete() *OrderItemShipGroupDelete {
	mutation := newOrderItemShipGroupMutation(c.config, OpDelete)
	return &OrderItemShipGroupDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *OrderItemShipGroupClient) DeleteOne(oisg *OrderItemShipGroup) *OrderItemShipGroupDeleteOne {
	return c.DeleteOneID(oisg.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *OrderItemShipGroupClient) DeleteOneID(id int) *OrderItemShipGroupDeleteOne {
	builder := c.Delete().Where(orderitemshipgroup.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrderItemShipGroupDeleteOne{builder}
}

// Query returns a query builder for OrderItemShipGroup.
func (c *OrderItemShipGroupClient) Query() *OrderItemShipGroupQuery {
	return &OrderItemShipGroupQuery{
		config: c.config,
	}
}

// Get returns a OrderItemShipGroup entity by its id.
func (c *OrderItemShipGroupClient) Get(ctx context.Context, id int) (*OrderItemShipGroup, error) {
	return c.Query().Where(orderitemshipgroup.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrderItemShipGroupClient) GetX(ctx context.Context, id int) *OrderItemShipGroup {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOrderHeader queries the order_header edge of a OrderItemShipGroup.
func (c *OrderItemShipGroupClient) QueryOrderHeader(oisg *OrderItemShipGroup) *OrderHeaderQuery {
	query := &OrderHeaderQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := oisg.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderitemshipgroup.Table, orderitemshipgroup.FieldID, id),
			sqlgraph.To(orderheader.Table, orderheader.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, orderitemshipgroup.OrderHeaderTable, orderitemshipgroup.OrderHeaderColumn),
		)
		fromV = sqlgraph.Neighbors(oisg.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrderItemShipGroupAssocs queries the order_item_ship_group_assocs edge of a OrderItemShipGroup.
func (c *OrderItemShipGroupClient) QueryOrderItemShipGroupAssocs(oisg *OrderItemShipGroup) *OrderItemShipGroupAssocQuery {
	query := &OrderItemShipGroupAssocQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := oisg.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderitemshipgroup.Table, orderitemshipgroup.FieldID, id),
			sqlgraph.To(orderitemshipgroupassoc.Table, orderitemshipgroupassoc.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, orderitemshipgroup.OrderItemShipGroupAssocsTable, orderitemshipgroup.OrderItemShipGroupAssocsColumn),
		)
		fromV = sqlgraph.Neighbors(oisg.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPrimaryShipments queries the primary_shipments edge of a OrderItemShipGroup.
func (c *OrderItemShipGroupClient) QueryPrimaryShipments(oisg *OrderItemShipGroup) *ShipmentQuery {
	query := &ShipmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := oisg.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderitemshipgroup.Table, orderitemshipgroup.FieldID, id),
			sqlgraph.To(shipment.Table, shipment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, orderitemshipgroup.PrimaryShipmentsTable, orderitemshipgroup.PrimaryShipmentsColumn),
		)
		fromV = sqlgraph.Neighbors(oisg.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OrderItemShipGroupClient) Hooks() []Hook {
	return c.hooks.OrderItemShipGroup
}

// OrderItemShipGroupAssocClient is a client for the OrderItemShipGroupAssoc schema.
type OrderItemShipGroupAssocClient struct {
	config
}

// NewOrderItemShipGroupAssocClient returns a client for the OrderItemShipGroupAssoc from the given config.
func NewOrderItemShipGroupAssocClient(c config) *OrderItemShipGroupAssocClient {
	return &OrderItemShipGroupAssocClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `orderitemshipgroupassoc.Hooks(f(g(h())))`.
func (c *OrderItemShipGroupAssocClient) Use(hooks ...Hook) {
	c.hooks.OrderItemShipGroupAssoc = append(c.hooks.OrderItemShipGroupAssoc, hooks...)
}

// Create returns a create builder for OrderItemShipGroupAssoc.
func (c *OrderItemShipGroupAssocClient) Create() *OrderItemShipGroupAssocCreate {
	mutation := newOrderItemShipGroupAssocMutation(c.config, OpCreate)
	return &OrderItemShipGroupAssocCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OrderItemShipGroupAssoc entities.
func (c *OrderItemShipGroupAssocClient) CreateBulk(builders ...*OrderItemShipGroupAssocCreate) *OrderItemShipGroupAssocCreateBulk {
	return &OrderItemShipGroupAssocCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OrderItemShipGroupAssoc.
func (c *OrderItemShipGroupAssocClient) Update() *OrderItemShipGroupAssocUpdate {
	mutation := newOrderItemShipGroupAssocMutation(c.config, OpUpdate)
	return &OrderItemShipGroupAssocUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrderItemShipGroupAssocClient) UpdateOne(oisga *OrderItemShipGroupAssoc) *OrderItemShipGroupAssocUpdateOne {
	mutation := newOrderItemShipGroupAssocMutation(c.config, OpUpdateOne, withOrderItemShipGroupAssoc(oisga))
	return &OrderItemShipGroupAssocUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrderItemShipGroupAssocClient) UpdateOneID(id int) *OrderItemShipGroupAssocUpdateOne {
	mutation := newOrderItemShipGroupAssocMutation(c.config, OpUpdateOne, withOrderItemShipGroupAssocID(id))
	return &OrderItemShipGroupAssocUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OrderItemShipGroupAssoc.
func (c *OrderItemShipGroupAssocClient) Delete() *OrderItemShipGroupAssocDelete {
	mutation := newOrderItemShipGroupAssocMutation(c.config, OpDelete)
	return &OrderItemShipGroupAssocDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *OrderItemShipGroupAssocClient) DeleteOne(oisga *OrderItemShipGroupAssoc) *OrderItemShipGroupAssocDeleteOne {
	return c.DeleteOneID(oisga.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *OrderItemShipGroupAssocClient) DeleteOneID(id int) *OrderItemShipGroupAssocDeleteOne {
	builder := c.Delete().Where(orderitemshipgroupassoc.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrderItemShipGroupAssocDeleteOne{builder}
}

// Query returns a query builder for OrderItemShipGroupAssoc.
func (c *OrderItemShipGroupAssocClient) Query() *OrderItemShipGroupAssocQuery {
	return &OrderItemShipGroupAssocQuery{
		config: c.config,
	}
}

// Get returns a OrderItemShipGroupAssoc entity by its id.
func (c *OrderItemShipGroupAssocClient) Get(ctx context.Context, id int) (*OrderItemShipGroupAssoc, error) {
	return c.Query().Where(orderitemshipgroupassoc.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrderItemShipGroupAssocClient) GetX(ctx context.Context, id int) *OrderItemShipGroupAssoc {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOrderHeader queries the order_header edge of a OrderItemShipGroupAssoc.
func (c *OrderItemShipGroupAssocClient) QueryOrderHeader(oisga *OrderItemShipGroupAssoc) *OrderHeaderQuery {
	query := &OrderHeaderQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := oisga.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderitemshipgroupassoc.Table, orderitemshipgroupassoc.FieldID, id),
			sqlgraph.To(orderheader.Table, orderheader.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, orderitemshipgroupassoc.OrderHeaderTable, orderitemshipgroupassoc.OrderHeaderColumn),
		)
		fromV = sqlgraph.Neighbors(oisga.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrderItem queries the order_item edge of a OrderItemShipGroupAssoc.
func (c *OrderItemShipGroupAssocClient) QueryOrderItem(oisga *OrderItemShipGroupAssoc) *OrderItemQuery {
	query := &OrderItemQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := oisga.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderitemshipgroupassoc.Table, orderitemshipgroupassoc.FieldID, id),
			sqlgraph.To(orderitem.Table, orderitem.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, orderitemshipgroupassoc.OrderItemTable, orderitemshipgroupassoc.OrderItemColumn),
		)
		fromV = sqlgraph.Neighbors(oisga.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrderItemShipGroup queries the order_item_ship_group edge of a OrderItemShipGroupAssoc.
func (c *OrderItemShipGroupAssocClient) QueryOrderItemShipGroup(oisga *OrderItemShipGroupAssoc) *OrderItemShipGroupQuery {
	query := &OrderItemShipGroupQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := oisga.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderitemshipgroupassoc.Table, orderitemshipgroupassoc.FieldID, id),
			sqlgraph.To(orderitemshipgroup.Table, orderitemshipgroup.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, orderitemshipgroupassoc.OrderItemShipGroupTable, orderitemshipgroupassoc.OrderItemShipGroupColumn),
		)
		fromV = sqlgraph.Neighbors(oisga.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OrderItemShipGroupAssocClient) Hooks() []Hook {
	return c.hooks.OrderItemShipGroupAssoc
}

// OrderRoleClient is a client for the OrderRole schema.
type OrderRoleClient struct {
	config
}

// NewOrderRoleClient returns a client for the OrderRole from the given config.
func NewOrderRoleClient(c config) *OrderRoleClient {
	return &OrderRoleClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `orderrole.Hooks(f(g(h())))`.
func (c *OrderRoleClient) Use(hooks ...Hook) {
	c.hooks.OrderRole = append(c.hooks.OrderRole, hooks...)
}

// Create returns a create builder for OrderRole.
func (c *OrderRoleClient) Create() *OrderRoleCreate {
	mutation := newOrderRoleMutation(c.config, OpCreate)
	return &OrderRoleCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OrderRole entities.
func (c *OrderRoleClient) CreateBulk(builders ...*OrderRoleCreate) *OrderRoleCreateBulk {
	return &OrderRoleCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OrderRole.
func (c *OrderRoleClient) Update() *OrderRoleUpdate {
	mutation := newOrderRoleMutation(c.config, OpUpdate)
	return &OrderRoleUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrderRoleClient) UpdateOne(or *OrderRole) *OrderRoleUpdateOne {
	mutation := newOrderRoleMutation(c.config, OpUpdateOne, withOrderRole(or))
	return &OrderRoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrderRoleClient) UpdateOneID(id int) *OrderRoleUpdateOne {
	mutation := newOrderRoleMutation(c.config, OpUpdateOne, withOrderRoleID(id))
	return &OrderRoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OrderRole.
func (c *OrderRoleClient) Delete() *OrderRoleDelete {
	mutation := newOrderRoleMutation(c.config, OpDelete)
	return &OrderRoleDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *OrderRoleClient) DeleteOne(or *OrderRole) *OrderRoleDeleteOne {
	return c.DeleteOneID(or.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *OrderRoleClient) DeleteOneID(id int) *OrderRoleDeleteOne {
	builder := c.Delete().Where(orderrole.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrderRoleDeleteOne{builder}
}

// Query returns a query builder for OrderRole.
func (c *OrderRoleClient) Query() *OrderRoleQuery {
	return &OrderRoleQuery{
		config: c.config,
	}
}

// Get returns a OrderRole entity by its id.
func (c *OrderRoleClient) Get(ctx context.Context, id int) (*OrderRole, error) {
	return c.Query().Where(orderrole.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrderRoleClient) GetX(ctx context.Context, id int) *OrderRole {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOrderHeader queries the order_header edge of a OrderRole.
func (c *OrderRoleClient) QueryOrderHeader(or *OrderRole) *OrderHeaderQuery {
	query := &OrderHeaderQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := or.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderrole.Table, orderrole.FieldID, id),
			sqlgraph.To(orderheader.Table, orderheader.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, orderrole.OrderHeaderTable, orderrole.OrderHeaderColumn),
		)
		fromV = sqlgraph.Neighbors(or.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrderItems queries the order_items edge of a OrderRole.
func (c *OrderRoleClient) QueryOrderItems(or *OrderRole) *OrderItemQuery {
	query := &OrderItemQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := or.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderrole.Table, orderrole.FieldID, id),
			sqlgraph.To(orderitem.Table, orderitem.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, orderrole.OrderItemsTable, orderrole.OrderItemsColumn),
		)
		fromV = sqlgraph.Neighbors(or.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OrderRoleClient) Hooks() []Hook {
	return c.hooks.OrderRole
}

// OrderStatusClient is a client for the OrderStatus schema.
type OrderStatusClient struct {
	config
}

// NewOrderStatusClient returns a client for the OrderStatus from the given config.
func NewOrderStatusClient(c config) *OrderStatusClient {
	return &OrderStatusClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `orderstatus.Hooks(f(g(h())))`.
func (c *OrderStatusClient) Use(hooks ...Hook) {
	c.hooks.OrderStatus = append(c.hooks.OrderStatus, hooks...)
}

// Create returns a create builder for OrderStatus.
func (c *OrderStatusClient) Create() *OrderStatusCreate {
	mutation := newOrderStatusMutation(c.config, OpCreate)
	return &OrderStatusCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OrderStatus entities.
func (c *OrderStatusClient) CreateBulk(builders ...*OrderStatusCreate) *OrderStatusCreateBulk {
	return &OrderStatusCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OrderStatus.
func (c *OrderStatusClient) Update() *OrderStatusUpdate {
	mutation := newOrderStatusMutation(c.config, OpUpdate)
	return &OrderStatusUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrderStatusClient) UpdateOne(os *OrderStatus) *OrderStatusUpdateOne {
	mutation := newOrderStatusMutation(c.config, OpUpdateOne, withOrderStatus(os))
	return &OrderStatusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrderStatusClient) UpdateOneID(id int) *OrderStatusUpdateOne {
	mutation := newOrderStatusMutation(c.config, OpUpdateOne, withOrderStatusID(id))
	return &OrderStatusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OrderStatus.
func (c *OrderStatusClient) Delete() *OrderStatusDelete {
	mutation := newOrderStatusMutation(c.config, OpDelete)
	return &OrderStatusDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *OrderStatusClient) DeleteOne(os *OrderStatus) *OrderStatusDeleteOne {
	return c.DeleteOneID(os.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *OrderStatusClient) DeleteOneID(id int) *OrderStatusDeleteOne {
	builder := c.Delete().Where(orderstatus.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrderStatusDeleteOne{builder}
}

// Query returns a query builder for OrderStatus.
func (c *OrderStatusClient) Query() *OrderStatusQuery {
	return &OrderStatusQuery{
		config: c.config,
	}
}

// Get returns a OrderStatus entity by its id.
func (c *OrderStatusClient) Get(ctx context.Context, id int) (*OrderStatus, error) {
	return c.Query().Where(orderstatus.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrderStatusClient) GetX(ctx context.Context, id int) *OrderStatus {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOrderHeader queries the order_header edge of a OrderStatus.
func (c *OrderStatusClient) QueryOrderHeader(os *OrderStatus) *OrderHeaderQuery {
	query := &OrderHeaderQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := os.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderstatus.Table, orderstatus.FieldID, id),
			sqlgraph.To(orderheader.Table, orderheader.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, orderstatus.OrderHeaderTable, orderstatus.OrderHeaderColumn),
		)
		fromV = sqlgraph.Neighbors(os.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrderItem queries the order_item edge of a OrderStatus.
func (c *OrderStatusClient) QueryOrderItem(os *OrderStatus) *OrderItemQuery {
	query := &OrderItemQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := os.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderstatus.Table, orderstatus.FieldID, id),
			sqlgraph.To(orderitem.Table, orderitem.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, orderstatus.OrderItemTable, orderstatus.OrderItemColumn),
		)
		fromV = sqlgraph.Neighbors(os.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OrderStatusClient) Hooks() []Hook {
	return c.hooks.OrderStatus
}

// PaymentClient is a client for the Payment schema.
type PaymentClient struct {
	config
}

// NewPaymentClient returns a client for the Payment from the given config.
func NewPaymentClient(c config) *PaymentClient {
	return &PaymentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `payment.Hooks(f(g(h())))`.
func (c *PaymentClient) Use(hooks ...Hook) {
	c.hooks.Payment = append(c.hooks.Payment, hooks...)
}

// Create returns a create builder for Payment.
func (c *PaymentClient) Create() *PaymentCreate {
	mutation := newPaymentMutation(c.config, OpCreate)
	return &PaymentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Payment entities.
func (c *PaymentClient) CreateBulk(builders ...*PaymentCreate) *PaymentCreateBulk {
	return &PaymentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Payment.
func (c *PaymentClient) Update() *PaymentUpdate {
	mutation := newPaymentMutation(c.config, OpUpdate)
	return &PaymentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PaymentClient) UpdateOne(pa *Payment) *PaymentUpdateOne {
	mutation := newPaymentMutation(c.config, OpUpdateOne, withPayment(pa))
	return &PaymentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PaymentClient) UpdateOneID(id int) *PaymentUpdateOne {
	mutation := newPaymentMutation(c.config, OpUpdateOne, withPaymentID(id))
	return &PaymentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Payment.
func (c *PaymentClient) Delete() *PaymentDelete {
	mutation := newPaymentMutation(c.config, OpDelete)
	return &PaymentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PaymentClient) DeleteOne(pa *Payment) *PaymentDeleteOne {
	return c.DeleteOneID(pa.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PaymentClient) DeleteOneID(id int) *PaymentDeleteOne {
	builder := c.Delete().Where(payment.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PaymentDeleteOne{builder}
}

// Query returns a query builder for Payment.
func (c *PaymentClient) Query() *PaymentQuery {
	return &PaymentQuery{
		config: c.config,
	}
}

// Get returns a Payment entity by its id.
func (c *PaymentClient) Get(ctx context.Context, id int) (*Payment, error) {
	return c.Query().Where(payment.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PaymentClient) GetX(ctx context.Context, id int) *Payment {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PaymentClient) Hooks() []Hook {
	return c.hooks.Payment
}

// ShipmentClient is a client for the Shipment schema.
type ShipmentClient struct {
	config
}

// NewShipmentClient returns a client for the Shipment from the given config.
func NewShipmentClient(c config) *ShipmentClient {
	return &ShipmentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `shipment.Hooks(f(g(h())))`.
func (c *ShipmentClient) Use(hooks ...Hook) {
	c.hooks.Shipment = append(c.hooks.Shipment, hooks...)
}

// Create returns a create builder for Shipment.
func (c *ShipmentClient) Create() *ShipmentCreate {
	mutation := newShipmentMutation(c.config, OpCreate)
	return &ShipmentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Shipment entities.
func (c *ShipmentClient) CreateBulk(builders ...*ShipmentCreate) *ShipmentCreateBulk {
	return &ShipmentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Shipment.
func (c *ShipmentClient) Update() *ShipmentUpdate {
	mutation := newShipmentMutation(c.config, OpUpdate)
	return &ShipmentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ShipmentClient) UpdateOne(s *Shipment) *ShipmentUpdateOne {
	mutation := newShipmentMutation(c.config, OpUpdateOne, withShipment(s))
	return &ShipmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ShipmentClient) UpdateOneID(id int) *ShipmentUpdateOne {
	mutation := newShipmentMutation(c.config, OpUpdateOne, withShipmentID(id))
	return &ShipmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Shipment.
func (c *ShipmentClient) Delete() *ShipmentDelete {
	mutation := newShipmentMutation(c.config, OpDelete)
	return &ShipmentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ShipmentClient) DeleteOne(s *Shipment) *ShipmentDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ShipmentClient) DeleteOneID(id int) *ShipmentDeleteOne {
	builder := c.Delete().Where(shipment.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ShipmentDeleteOne{builder}
}

// Query returns a query builder for Shipment.
func (c *ShipmentClient) Query() *ShipmentQuery {
	return &ShipmentQuery{
		config: c.config,
	}
}

// Get returns a Shipment entity by its id.
func (c *ShipmentClient) Get(ctx context.Context, id int) (*Shipment, error) {
	return c.Query().Where(shipment.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ShipmentClient) GetX(ctx context.Context, id int) *Shipment {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPrimaryOrderHeader queries the primary_order_header edge of a Shipment.
func (c *ShipmentClient) QueryPrimaryOrderHeader(s *Shipment) *OrderHeaderQuery {
	query := &OrderHeaderQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(shipment.Table, shipment.FieldID, id),
			sqlgraph.To(orderheader.Table, orderheader.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, shipment.PrimaryOrderHeaderTable, shipment.PrimaryOrderHeaderColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPrimaryOrderItemShipGroup queries the primary_order_item_ship_group edge of a Shipment.
func (c *ShipmentClient) QueryPrimaryOrderItemShipGroup(s *Shipment) *OrderItemShipGroupQuery {
	query := &OrderItemShipGroupQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(shipment.Table, shipment.FieldID, id),
			sqlgraph.To(orderitemshipgroup.Table, orderitemshipgroup.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, shipment.PrimaryOrderItemShipGroupTable, shipment.PrimaryOrderItemShipGroupColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryItemIssuances queries the item_issuances edge of a Shipment.
func (c *ShipmentClient) QueryItemIssuances(s *Shipment) *ItemIssuanceQuery {
	query := &ItemIssuanceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(shipment.Table, shipment.FieldID, id),
			sqlgraph.To(itemissuance.Table, itemissuance.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, shipment.ItemIssuancesTable, shipment.ItemIssuancesColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryShipmentItems queries the shipment_items edge of a Shipment.
func (c *ShipmentClient) QueryShipmentItems(s *Shipment) *ShipmentItemQuery {
	query := &ShipmentItemQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(shipment.Table, shipment.FieldID, id),
			sqlgraph.To(shipmentitem.Table, shipmentitem.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, shipment.ShipmentItemsTable, shipment.ShipmentItemsColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ShipmentClient) Hooks() []Hook {
	return c.hooks.Shipment
}

// ShipmentItemClient is a client for the ShipmentItem schema.
type ShipmentItemClient struct {
	config
}

// NewShipmentItemClient returns a client for the ShipmentItem from the given config.
func NewShipmentItemClient(c config) *ShipmentItemClient {
	return &ShipmentItemClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `shipmentitem.Hooks(f(g(h())))`.
func (c *ShipmentItemClient) Use(hooks ...Hook) {
	c.hooks.ShipmentItem = append(c.hooks.ShipmentItem, hooks...)
}

// Create returns a create builder for ShipmentItem.
func (c *ShipmentItemClient) Create() *ShipmentItemCreate {
	mutation := newShipmentItemMutation(c.config, OpCreate)
	return &ShipmentItemCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ShipmentItem entities.
func (c *ShipmentItemClient) CreateBulk(builders ...*ShipmentItemCreate) *ShipmentItemCreateBulk {
	return &ShipmentItemCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ShipmentItem.
func (c *ShipmentItemClient) Update() *ShipmentItemUpdate {
	mutation := newShipmentItemMutation(c.config, OpUpdate)
	return &ShipmentItemUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ShipmentItemClient) UpdateOne(si *ShipmentItem) *ShipmentItemUpdateOne {
	mutation := newShipmentItemMutation(c.config, OpUpdateOne, withShipmentItem(si))
	return &ShipmentItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ShipmentItemClient) UpdateOneID(id int) *ShipmentItemUpdateOne {
	mutation := newShipmentItemMutation(c.config, OpUpdateOne, withShipmentItemID(id))
	return &ShipmentItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ShipmentItem.
func (c *ShipmentItemClient) Delete() *ShipmentItemDelete {
	mutation := newShipmentItemMutation(c.config, OpDelete)
	return &ShipmentItemDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ShipmentItemClient) DeleteOne(si *ShipmentItem) *ShipmentItemDeleteOne {
	return c.DeleteOneID(si.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ShipmentItemClient) DeleteOneID(id int) *ShipmentItemDeleteOne {
	builder := c.Delete().Where(shipmentitem.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ShipmentItemDeleteOne{builder}
}

// Query returns a query builder for ShipmentItem.
func (c *ShipmentItemClient) Query() *ShipmentItemQuery {
	return &ShipmentItemQuery{
		config: c.config,
	}
}

// Get returns a ShipmentItem entity by its id.
func (c *ShipmentItemClient) Get(ctx context.Context, id int) (*ShipmentItem, error) {
	return c.Query().Where(shipmentitem.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ShipmentItemClient) GetX(ctx context.Context, id int) *ShipmentItem {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryShipment queries the shipment edge of a ShipmentItem.
func (c *ShipmentItemClient) QueryShipment(si *ShipmentItem) *ShipmentQuery {
	query := &ShipmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := si.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(shipmentitem.Table, shipmentitem.FieldID, id),
			sqlgraph.To(shipment.Table, shipment.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, shipmentitem.ShipmentTable, shipmentitem.ShipmentColumn),
		)
		fromV = sqlgraph.Neighbors(si.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryItemIssuances queries the item_issuances edge of a ShipmentItem.
func (c *ShipmentItemClient) QueryItemIssuances(si *ShipmentItem) *ItemIssuanceQuery {
	query := &ItemIssuanceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := si.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(shipmentitem.Table, shipmentitem.FieldID, id),
			sqlgraph.To(itemissuance.Table, itemissuance.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, shipmentitem.ItemIssuancesTable, shipmentitem.ItemIssuancesColumn),
		)
		fromV = sqlgraph.Neighbors(si.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ShipmentItemClient) Hooks() []Hook {
	return c.hooks.ShipmentItem
}
