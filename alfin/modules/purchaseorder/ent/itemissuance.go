// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/itemissuance"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/orderheader"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/orderitem"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/shipment"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/shipmentitem"
)

// ItemIssuance is the model entity for the ItemIssuance schema.
type ItemIssuance struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// OrderItemSeqID holds the value of the "order_item_seq_id" field.
	OrderItemSeqID int `json:"order_item_seq_id,omitempty"`
	// ShipGroupSeqID holds the value of the "ship_group_seq_id" field.
	ShipGroupSeqID int `json:"ship_group_seq_id,omitempty"`
	// InventoryItemID holds the value of the "inventory_item_id" field.
	InventoryItemID int `json:"inventory_item_id,omitempty"`
	// ShipmentItemSeqID holds the value of the "shipment_item_seq_id" field.
	ShipmentItemSeqID int `json:"shipment_item_seq_id,omitempty"`
	// FixedAssetID holds the value of the "fixed_asset_id" field.
	FixedAssetID int `json:"fixed_asset_id,omitempty"`
	// MaintHistSeqID holds the value of the "maint_hist_seq_id" field.
	MaintHistSeqID int `json:"maint_hist_seq_id,omitempty"`
	// IssuedDateTime holds the value of the "issued_date_time" field.
	IssuedDateTime time.Time `json:"issued_date_time,omitempty"`
	// IssuedByUserLoginID holds the value of the "issued_by_user_login_id" field.
	IssuedByUserLoginID string `json:"issued_by_user_login_id,omitempty"`
	// Quantity holds the value of the "quantity" field.
	Quantity float64 `json:"quantity,omitempty"`
	// CancelQuantity holds the value of the "cancel_quantity" field.
	CancelQuantity float64 `json:"cancel_quantity,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ItemIssuanceQuery when eager-loading is set.
	Edges                        ItemIssuanceEdges `json:"edges"`
	order_header_item_issuances  *int
	order_item_item_issuances    *int
	shipment_item_issuances      *int
	shipment_item_item_issuances *int
}

// ItemIssuanceEdges holds the relations/edges for other nodes in the graph.
type ItemIssuanceEdges struct {
	// Shipment holds the value of the shipment edge.
	Shipment *Shipment `json:"shipment,omitempty"`
	// ShipmentItem holds the value of the shipment_item edge.
	ShipmentItem *ShipmentItem `json:"shipment_item,omitempty"`
	// OrderHeader holds the value of the order_header edge.
	OrderHeader *OrderHeader `json:"order_header,omitempty"`
	// OrderItem holds the value of the order_item edge.
	OrderItem *OrderItem `json:"order_item,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// ShipmentOrErr returns the Shipment value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ItemIssuanceEdges) ShipmentOrErr() (*Shipment, error) {
	if e.loadedTypes[0] {
		if e.Shipment == nil {
			// The edge shipment was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: shipment.Label}
		}
		return e.Shipment, nil
	}
	return nil, &NotLoadedError{edge: "shipment"}
}

// ShipmentItemOrErr returns the ShipmentItem value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ItemIssuanceEdges) ShipmentItemOrErr() (*ShipmentItem, error) {
	if e.loadedTypes[1] {
		if e.ShipmentItem == nil {
			// The edge shipment_item was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: shipmentitem.Label}
		}
		return e.ShipmentItem, nil
	}
	return nil, &NotLoadedError{edge: "shipment_item"}
}

// OrderHeaderOrErr returns the OrderHeader value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ItemIssuanceEdges) OrderHeaderOrErr() (*OrderHeader, error) {
	if e.loadedTypes[2] {
		if e.OrderHeader == nil {
			// The edge order_header was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: orderheader.Label}
		}
		return e.OrderHeader, nil
	}
	return nil, &NotLoadedError{edge: "order_header"}
}

// OrderItemOrErr returns the OrderItem value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ItemIssuanceEdges) OrderItemOrErr() (*OrderItem, error) {
	if e.loadedTypes[3] {
		if e.OrderItem == nil {
			// The edge order_item was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: orderitem.Label}
		}
		return e.OrderItem, nil
	}
	return nil, &NotLoadedError{edge: "order_item"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ItemIssuance) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case itemissuance.FieldQuantity, itemissuance.FieldCancelQuantity:
			values[i] = new(sql.NullFloat64)
		case itemissuance.FieldID, itemissuance.FieldOrderItemSeqID, itemissuance.FieldShipGroupSeqID, itemissuance.FieldInventoryItemID, itemissuance.FieldShipmentItemSeqID, itemissuance.FieldFixedAssetID, itemissuance.FieldMaintHistSeqID:
			values[i] = new(sql.NullInt64)
		case itemissuance.FieldIssuedByUserLoginID:
			values[i] = new(sql.NullString)
		case itemissuance.FieldCreateTime, itemissuance.FieldUpdateTime, itemissuance.FieldIssuedDateTime:
			values[i] = new(sql.NullTime)
		case itemissuance.ForeignKeys[0]: // order_header_item_issuances
			values[i] = new(sql.NullInt64)
		case itemissuance.ForeignKeys[1]: // order_item_item_issuances
			values[i] = new(sql.NullInt64)
		case itemissuance.ForeignKeys[2]: // shipment_item_issuances
			values[i] = new(sql.NullInt64)
		case itemissuance.ForeignKeys[3]: // shipment_item_item_issuances
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ItemIssuance", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ItemIssuance fields.
func (ii *ItemIssuance) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case itemissuance.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ii.ID = int(value.Int64)
		case itemissuance.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				ii.CreateTime = value.Time
			}
		case itemissuance.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				ii.UpdateTime = value.Time
			}
		case itemissuance.FieldOrderItemSeqID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order_item_seq_id", values[i])
			} else if value.Valid {
				ii.OrderItemSeqID = int(value.Int64)
			}
		case itemissuance.FieldShipGroupSeqID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ship_group_seq_id", values[i])
			} else if value.Valid {
				ii.ShipGroupSeqID = int(value.Int64)
			}
		case itemissuance.FieldInventoryItemID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field inventory_item_id", values[i])
			} else if value.Valid {
				ii.InventoryItemID = int(value.Int64)
			}
		case itemissuance.FieldShipmentItemSeqID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field shipment_item_seq_id", values[i])
			} else if value.Valid {
				ii.ShipmentItemSeqID = int(value.Int64)
			}
		case itemissuance.FieldFixedAssetID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field fixed_asset_id", values[i])
			} else if value.Valid {
				ii.FixedAssetID = int(value.Int64)
			}
		case itemissuance.FieldMaintHistSeqID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field maint_hist_seq_id", values[i])
			} else if value.Valid {
				ii.MaintHistSeqID = int(value.Int64)
			}
		case itemissuance.FieldIssuedDateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field issued_date_time", values[i])
			} else if value.Valid {
				ii.IssuedDateTime = value.Time
			}
		case itemissuance.FieldIssuedByUserLoginID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field issued_by_user_login_id", values[i])
			} else if value.Valid {
				ii.IssuedByUserLoginID = value.String
			}
		case itemissuance.FieldQuantity:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field quantity", values[i])
			} else if value.Valid {
				ii.Quantity = value.Float64
			}
		case itemissuance.FieldCancelQuantity:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field cancel_quantity", values[i])
			} else if value.Valid {
				ii.CancelQuantity = value.Float64
			}
		case itemissuance.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field order_header_item_issuances", value)
			} else if value.Valid {
				ii.order_header_item_issuances = new(int)
				*ii.order_header_item_issuances = int(value.Int64)
			}
		case itemissuance.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field order_item_item_issuances", value)
			} else if value.Valid {
				ii.order_item_item_issuances = new(int)
				*ii.order_item_item_issuances = int(value.Int64)
			}
		case itemissuance.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field shipment_item_issuances", value)
			} else if value.Valid {
				ii.shipment_item_issuances = new(int)
				*ii.shipment_item_issuances = int(value.Int64)
			}
		case itemissuance.ForeignKeys[3]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field shipment_item_item_issuances", value)
			} else if value.Valid {
				ii.shipment_item_item_issuances = new(int)
				*ii.shipment_item_item_issuances = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryShipment queries the "shipment" edge of the ItemIssuance entity.
func (ii *ItemIssuance) QueryShipment() *ShipmentQuery {
	return (&ItemIssuanceClient{config: ii.config}).QueryShipment(ii)
}

// QueryShipmentItem queries the "shipment_item" edge of the ItemIssuance entity.
func (ii *ItemIssuance) QueryShipmentItem() *ShipmentItemQuery {
	return (&ItemIssuanceClient{config: ii.config}).QueryShipmentItem(ii)
}

// QueryOrderHeader queries the "order_header" edge of the ItemIssuance entity.
func (ii *ItemIssuance) QueryOrderHeader() *OrderHeaderQuery {
	return (&ItemIssuanceClient{config: ii.config}).QueryOrderHeader(ii)
}

// QueryOrderItem queries the "order_item" edge of the ItemIssuance entity.
func (ii *ItemIssuance) QueryOrderItem() *OrderItemQuery {
	return (&ItemIssuanceClient{config: ii.config}).QueryOrderItem(ii)
}

// Update returns a builder for updating this ItemIssuance.
// Note that you need to call ItemIssuance.Unwrap() before calling this method if this ItemIssuance
// was returned from a transaction, and the transaction was committed or rolled back.
func (ii *ItemIssuance) Update() *ItemIssuanceUpdateOne {
	return (&ItemIssuanceClient{config: ii.config}).UpdateOne(ii)
}

// Unwrap unwraps the ItemIssuance entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ii *ItemIssuance) Unwrap() *ItemIssuance {
	tx, ok := ii.config.driver.(*txDriver)
	if !ok {
		panic("ent: ItemIssuance is not a transactional entity")
	}
	ii.config.driver = tx.drv
	return ii
}

// String implements the fmt.Stringer.
func (ii *ItemIssuance) String() string {
	var builder strings.Builder
	builder.WriteString("ItemIssuance(")
	builder.WriteString(fmt.Sprintf("id=%v", ii.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(ii.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(ii.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", order_item_seq_id=")
	builder.WriteString(fmt.Sprintf("%v", ii.OrderItemSeqID))
	builder.WriteString(", ship_group_seq_id=")
	builder.WriteString(fmt.Sprintf("%v", ii.ShipGroupSeqID))
	builder.WriteString(", inventory_item_id=")
	builder.WriteString(fmt.Sprintf("%v", ii.InventoryItemID))
	builder.WriteString(", shipment_item_seq_id=")
	builder.WriteString(fmt.Sprintf("%v", ii.ShipmentItemSeqID))
	builder.WriteString(", fixed_asset_id=")
	builder.WriteString(fmt.Sprintf("%v", ii.FixedAssetID))
	builder.WriteString(", maint_hist_seq_id=")
	builder.WriteString(fmt.Sprintf("%v", ii.MaintHistSeqID))
	builder.WriteString(", issued_date_time=")
	builder.WriteString(ii.IssuedDateTime.Format(time.ANSIC))
	builder.WriteString(", issued_by_user_login_id=")
	builder.WriteString(ii.IssuedByUserLoginID)
	builder.WriteString(", quantity=")
	builder.WriteString(fmt.Sprintf("%v", ii.Quantity))
	builder.WriteString(", cancel_quantity=")
	builder.WriteString(fmt.Sprintf("%v", ii.CancelQuantity))
	builder.WriteByte(')')
	return builder.String()
}

// ItemIssuances is a parsable slice of ItemIssuance.
type ItemIssuances []*ItemIssuance

func (ii ItemIssuances) config(cfg config) {
	for _i := range ii {
		ii[_i].config = cfg
	}
}
