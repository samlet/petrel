// Code generated by entc, DO NOT EDIT.

package itemissuance

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// OrderItemSeqID applies equality check predicate on the "order_item_seq_id" field. It's identical to OrderItemSeqIDEQ.
func OrderItemSeqID(v int) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderItemSeqID), v))
	})
}

// ShipGroupSeqID applies equality check predicate on the "ship_group_seq_id" field. It's identical to ShipGroupSeqIDEQ.
func ShipGroupSeqID(v int) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShipGroupSeqID), v))
	})
}

// InventoryItemID applies equality check predicate on the "inventory_item_id" field. It's identical to InventoryItemIDEQ.
func InventoryItemID(v int) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInventoryItemID), v))
	})
}

// ShipmentItemSeqID applies equality check predicate on the "shipment_item_seq_id" field. It's identical to ShipmentItemSeqIDEQ.
func ShipmentItemSeqID(v int) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShipmentItemSeqID), v))
	})
}

// FixedAssetID applies equality check predicate on the "fixed_asset_id" field. It's identical to FixedAssetIDEQ.
func FixedAssetID(v int) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFixedAssetID), v))
	})
}

// MaintHistSeqID applies equality check predicate on the "maint_hist_seq_id" field. It's identical to MaintHistSeqIDEQ.
func MaintHistSeqID(v int) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMaintHistSeqID), v))
	})
}

// IssuedDateTime applies equality check predicate on the "issued_date_time" field. It's identical to IssuedDateTimeEQ.
func IssuedDateTime(v time.Time) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIssuedDateTime), v))
	})
}

// IssuedByUserLoginID applies equality check predicate on the "issued_by_user_login_id" field. It's identical to IssuedByUserLoginIDEQ.
func IssuedByUserLoginID(v string) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIssuedByUserLoginID), v))
	})
}

// Quantity applies equality check predicate on the "quantity" field. It's identical to QuantityEQ.
func Quantity(v float64) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQuantity), v))
	})
}

// CancelQuantity applies equality check predicate on the "cancel_quantity" field. It's identical to CancelQuantityEQ.
func CancelQuantity(v float64) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCancelQuantity), v))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.ItemIssuance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ItemIssuance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.ItemIssuance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ItemIssuance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), v))
	})
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.ItemIssuance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ItemIssuance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.ItemIssuance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ItemIssuance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateTime), v))
	})
}

// OrderItemSeqIDEQ applies the EQ predicate on the "order_item_seq_id" field.
func OrderItemSeqIDEQ(v int) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderItemSeqID), v))
	})
}

// OrderItemSeqIDNEQ applies the NEQ predicate on the "order_item_seq_id" field.
func OrderItemSeqIDNEQ(v int) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOrderItemSeqID), v))
	})
}

// OrderItemSeqIDIn applies the In predicate on the "order_item_seq_id" field.
func OrderItemSeqIDIn(vs ...int) predicate.ItemIssuance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ItemIssuance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOrderItemSeqID), v...))
	})
}

// OrderItemSeqIDNotIn applies the NotIn predicate on the "order_item_seq_id" field.
func OrderItemSeqIDNotIn(vs ...int) predicate.ItemIssuance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ItemIssuance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOrderItemSeqID), v...))
	})
}

// OrderItemSeqIDGT applies the GT predicate on the "order_item_seq_id" field.
func OrderItemSeqIDGT(v int) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOrderItemSeqID), v))
	})
}

// OrderItemSeqIDGTE applies the GTE predicate on the "order_item_seq_id" field.
func OrderItemSeqIDGTE(v int) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOrderItemSeqID), v))
	})
}

// OrderItemSeqIDLT applies the LT predicate on the "order_item_seq_id" field.
func OrderItemSeqIDLT(v int) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOrderItemSeqID), v))
	})
}

// OrderItemSeqIDLTE applies the LTE predicate on the "order_item_seq_id" field.
func OrderItemSeqIDLTE(v int) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOrderItemSeqID), v))
	})
}

// OrderItemSeqIDIsNil applies the IsNil predicate on the "order_item_seq_id" field.
func OrderItemSeqIDIsNil() predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOrderItemSeqID)))
	})
}

// OrderItemSeqIDNotNil applies the NotNil predicate on the "order_item_seq_id" field.
func OrderItemSeqIDNotNil() predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOrderItemSeqID)))
	})
}

// ShipGroupSeqIDEQ applies the EQ predicate on the "ship_group_seq_id" field.
func ShipGroupSeqIDEQ(v int) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShipGroupSeqID), v))
	})
}

// ShipGroupSeqIDNEQ applies the NEQ predicate on the "ship_group_seq_id" field.
func ShipGroupSeqIDNEQ(v int) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShipGroupSeqID), v))
	})
}

// ShipGroupSeqIDIn applies the In predicate on the "ship_group_seq_id" field.
func ShipGroupSeqIDIn(vs ...int) predicate.ItemIssuance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ItemIssuance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldShipGroupSeqID), v...))
	})
}

// ShipGroupSeqIDNotIn applies the NotIn predicate on the "ship_group_seq_id" field.
func ShipGroupSeqIDNotIn(vs ...int) predicate.ItemIssuance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ItemIssuance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldShipGroupSeqID), v...))
	})
}

// ShipGroupSeqIDGT applies the GT predicate on the "ship_group_seq_id" field.
func ShipGroupSeqIDGT(v int) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShipGroupSeqID), v))
	})
}

// ShipGroupSeqIDGTE applies the GTE predicate on the "ship_group_seq_id" field.
func ShipGroupSeqIDGTE(v int) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShipGroupSeqID), v))
	})
}

// ShipGroupSeqIDLT applies the LT predicate on the "ship_group_seq_id" field.
func ShipGroupSeqIDLT(v int) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShipGroupSeqID), v))
	})
}

// ShipGroupSeqIDLTE applies the LTE predicate on the "ship_group_seq_id" field.
func ShipGroupSeqIDLTE(v int) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShipGroupSeqID), v))
	})
}

// ShipGroupSeqIDIsNil applies the IsNil predicate on the "ship_group_seq_id" field.
func ShipGroupSeqIDIsNil() predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldShipGroupSeqID)))
	})
}

// ShipGroupSeqIDNotNil applies the NotNil predicate on the "ship_group_seq_id" field.
func ShipGroupSeqIDNotNil() predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldShipGroupSeqID)))
	})
}

// InventoryItemIDEQ applies the EQ predicate on the "inventory_item_id" field.
func InventoryItemIDEQ(v int) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInventoryItemID), v))
	})
}

// InventoryItemIDNEQ applies the NEQ predicate on the "inventory_item_id" field.
func InventoryItemIDNEQ(v int) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldInventoryItemID), v))
	})
}

// InventoryItemIDIn applies the In predicate on the "inventory_item_id" field.
func InventoryItemIDIn(vs ...int) predicate.ItemIssuance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ItemIssuance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldInventoryItemID), v...))
	})
}

// InventoryItemIDNotIn applies the NotIn predicate on the "inventory_item_id" field.
func InventoryItemIDNotIn(vs ...int) predicate.ItemIssuance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ItemIssuance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldInventoryItemID), v...))
	})
}

// InventoryItemIDGT applies the GT predicate on the "inventory_item_id" field.
func InventoryItemIDGT(v int) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldInventoryItemID), v))
	})
}

// InventoryItemIDGTE applies the GTE predicate on the "inventory_item_id" field.
func InventoryItemIDGTE(v int) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldInventoryItemID), v))
	})
}

// InventoryItemIDLT applies the LT predicate on the "inventory_item_id" field.
func InventoryItemIDLT(v int) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldInventoryItemID), v))
	})
}

// InventoryItemIDLTE applies the LTE predicate on the "inventory_item_id" field.
func InventoryItemIDLTE(v int) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldInventoryItemID), v))
	})
}

// InventoryItemIDIsNil applies the IsNil predicate on the "inventory_item_id" field.
func InventoryItemIDIsNil() predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldInventoryItemID)))
	})
}

// InventoryItemIDNotNil applies the NotNil predicate on the "inventory_item_id" field.
func InventoryItemIDNotNil() predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldInventoryItemID)))
	})
}

// ShipmentItemSeqIDEQ applies the EQ predicate on the "shipment_item_seq_id" field.
func ShipmentItemSeqIDEQ(v int) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShipmentItemSeqID), v))
	})
}

// ShipmentItemSeqIDNEQ applies the NEQ predicate on the "shipment_item_seq_id" field.
func ShipmentItemSeqIDNEQ(v int) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShipmentItemSeqID), v))
	})
}

// ShipmentItemSeqIDIn applies the In predicate on the "shipment_item_seq_id" field.
func ShipmentItemSeqIDIn(vs ...int) predicate.ItemIssuance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ItemIssuance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldShipmentItemSeqID), v...))
	})
}

// ShipmentItemSeqIDNotIn applies the NotIn predicate on the "shipment_item_seq_id" field.
func ShipmentItemSeqIDNotIn(vs ...int) predicate.ItemIssuance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ItemIssuance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldShipmentItemSeqID), v...))
	})
}

// ShipmentItemSeqIDGT applies the GT predicate on the "shipment_item_seq_id" field.
func ShipmentItemSeqIDGT(v int) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShipmentItemSeqID), v))
	})
}

// ShipmentItemSeqIDGTE applies the GTE predicate on the "shipment_item_seq_id" field.
func ShipmentItemSeqIDGTE(v int) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShipmentItemSeqID), v))
	})
}

// ShipmentItemSeqIDLT applies the LT predicate on the "shipment_item_seq_id" field.
func ShipmentItemSeqIDLT(v int) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShipmentItemSeqID), v))
	})
}

// ShipmentItemSeqIDLTE applies the LTE predicate on the "shipment_item_seq_id" field.
func ShipmentItemSeqIDLTE(v int) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShipmentItemSeqID), v))
	})
}

// ShipmentItemSeqIDIsNil applies the IsNil predicate on the "shipment_item_seq_id" field.
func ShipmentItemSeqIDIsNil() predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldShipmentItemSeqID)))
	})
}

// ShipmentItemSeqIDNotNil applies the NotNil predicate on the "shipment_item_seq_id" field.
func ShipmentItemSeqIDNotNil() predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldShipmentItemSeqID)))
	})
}

// FixedAssetIDEQ applies the EQ predicate on the "fixed_asset_id" field.
func FixedAssetIDEQ(v int) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFixedAssetID), v))
	})
}

// FixedAssetIDNEQ applies the NEQ predicate on the "fixed_asset_id" field.
func FixedAssetIDNEQ(v int) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFixedAssetID), v))
	})
}

// FixedAssetIDIn applies the In predicate on the "fixed_asset_id" field.
func FixedAssetIDIn(vs ...int) predicate.ItemIssuance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ItemIssuance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFixedAssetID), v...))
	})
}

// FixedAssetIDNotIn applies the NotIn predicate on the "fixed_asset_id" field.
func FixedAssetIDNotIn(vs ...int) predicate.ItemIssuance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ItemIssuance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFixedAssetID), v...))
	})
}

// FixedAssetIDGT applies the GT predicate on the "fixed_asset_id" field.
func FixedAssetIDGT(v int) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFixedAssetID), v))
	})
}

// FixedAssetIDGTE applies the GTE predicate on the "fixed_asset_id" field.
func FixedAssetIDGTE(v int) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFixedAssetID), v))
	})
}

// FixedAssetIDLT applies the LT predicate on the "fixed_asset_id" field.
func FixedAssetIDLT(v int) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFixedAssetID), v))
	})
}

// FixedAssetIDLTE applies the LTE predicate on the "fixed_asset_id" field.
func FixedAssetIDLTE(v int) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFixedAssetID), v))
	})
}

// FixedAssetIDIsNil applies the IsNil predicate on the "fixed_asset_id" field.
func FixedAssetIDIsNil() predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFixedAssetID)))
	})
}

// FixedAssetIDNotNil applies the NotNil predicate on the "fixed_asset_id" field.
func FixedAssetIDNotNil() predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFixedAssetID)))
	})
}

// MaintHistSeqIDEQ applies the EQ predicate on the "maint_hist_seq_id" field.
func MaintHistSeqIDEQ(v int) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMaintHistSeqID), v))
	})
}

// MaintHistSeqIDNEQ applies the NEQ predicate on the "maint_hist_seq_id" field.
func MaintHistSeqIDNEQ(v int) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMaintHistSeqID), v))
	})
}

// MaintHistSeqIDIn applies the In predicate on the "maint_hist_seq_id" field.
func MaintHistSeqIDIn(vs ...int) predicate.ItemIssuance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ItemIssuance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMaintHistSeqID), v...))
	})
}

// MaintHistSeqIDNotIn applies the NotIn predicate on the "maint_hist_seq_id" field.
func MaintHistSeqIDNotIn(vs ...int) predicate.ItemIssuance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ItemIssuance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMaintHistSeqID), v...))
	})
}

// MaintHistSeqIDGT applies the GT predicate on the "maint_hist_seq_id" field.
func MaintHistSeqIDGT(v int) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMaintHistSeqID), v))
	})
}

// MaintHistSeqIDGTE applies the GTE predicate on the "maint_hist_seq_id" field.
func MaintHistSeqIDGTE(v int) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMaintHistSeqID), v))
	})
}

// MaintHistSeqIDLT applies the LT predicate on the "maint_hist_seq_id" field.
func MaintHistSeqIDLT(v int) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMaintHistSeqID), v))
	})
}

// MaintHistSeqIDLTE applies the LTE predicate on the "maint_hist_seq_id" field.
func MaintHistSeqIDLTE(v int) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMaintHistSeqID), v))
	})
}

// MaintHistSeqIDIsNil applies the IsNil predicate on the "maint_hist_seq_id" field.
func MaintHistSeqIDIsNil() predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMaintHistSeqID)))
	})
}

// MaintHistSeqIDNotNil applies the NotNil predicate on the "maint_hist_seq_id" field.
func MaintHistSeqIDNotNil() predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMaintHistSeqID)))
	})
}

// IssuedDateTimeEQ applies the EQ predicate on the "issued_date_time" field.
func IssuedDateTimeEQ(v time.Time) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIssuedDateTime), v))
	})
}

// IssuedDateTimeNEQ applies the NEQ predicate on the "issued_date_time" field.
func IssuedDateTimeNEQ(v time.Time) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIssuedDateTime), v))
	})
}

// IssuedDateTimeIn applies the In predicate on the "issued_date_time" field.
func IssuedDateTimeIn(vs ...time.Time) predicate.ItemIssuance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ItemIssuance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIssuedDateTime), v...))
	})
}

// IssuedDateTimeNotIn applies the NotIn predicate on the "issued_date_time" field.
func IssuedDateTimeNotIn(vs ...time.Time) predicate.ItemIssuance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ItemIssuance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIssuedDateTime), v...))
	})
}

// IssuedDateTimeGT applies the GT predicate on the "issued_date_time" field.
func IssuedDateTimeGT(v time.Time) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIssuedDateTime), v))
	})
}

// IssuedDateTimeGTE applies the GTE predicate on the "issued_date_time" field.
func IssuedDateTimeGTE(v time.Time) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIssuedDateTime), v))
	})
}

// IssuedDateTimeLT applies the LT predicate on the "issued_date_time" field.
func IssuedDateTimeLT(v time.Time) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIssuedDateTime), v))
	})
}

// IssuedDateTimeLTE applies the LTE predicate on the "issued_date_time" field.
func IssuedDateTimeLTE(v time.Time) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIssuedDateTime), v))
	})
}

// IssuedDateTimeIsNil applies the IsNil predicate on the "issued_date_time" field.
func IssuedDateTimeIsNil() predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldIssuedDateTime)))
	})
}

// IssuedDateTimeNotNil applies the NotNil predicate on the "issued_date_time" field.
func IssuedDateTimeNotNil() predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldIssuedDateTime)))
	})
}

// IssuedByUserLoginIDEQ applies the EQ predicate on the "issued_by_user_login_id" field.
func IssuedByUserLoginIDEQ(v string) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIssuedByUserLoginID), v))
	})
}

// IssuedByUserLoginIDNEQ applies the NEQ predicate on the "issued_by_user_login_id" field.
func IssuedByUserLoginIDNEQ(v string) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIssuedByUserLoginID), v))
	})
}

// IssuedByUserLoginIDIn applies the In predicate on the "issued_by_user_login_id" field.
func IssuedByUserLoginIDIn(vs ...string) predicate.ItemIssuance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ItemIssuance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIssuedByUserLoginID), v...))
	})
}

// IssuedByUserLoginIDNotIn applies the NotIn predicate on the "issued_by_user_login_id" field.
func IssuedByUserLoginIDNotIn(vs ...string) predicate.ItemIssuance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ItemIssuance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIssuedByUserLoginID), v...))
	})
}

// IssuedByUserLoginIDGT applies the GT predicate on the "issued_by_user_login_id" field.
func IssuedByUserLoginIDGT(v string) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIssuedByUserLoginID), v))
	})
}

// IssuedByUserLoginIDGTE applies the GTE predicate on the "issued_by_user_login_id" field.
func IssuedByUserLoginIDGTE(v string) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIssuedByUserLoginID), v))
	})
}

// IssuedByUserLoginIDLT applies the LT predicate on the "issued_by_user_login_id" field.
func IssuedByUserLoginIDLT(v string) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIssuedByUserLoginID), v))
	})
}

// IssuedByUserLoginIDLTE applies the LTE predicate on the "issued_by_user_login_id" field.
func IssuedByUserLoginIDLTE(v string) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIssuedByUserLoginID), v))
	})
}

// IssuedByUserLoginIDContains applies the Contains predicate on the "issued_by_user_login_id" field.
func IssuedByUserLoginIDContains(v string) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldIssuedByUserLoginID), v))
	})
}

// IssuedByUserLoginIDHasPrefix applies the HasPrefix predicate on the "issued_by_user_login_id" field.
func IssuedByUserLoginIDHasPrefix(v string) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldIssuedByUserLoginID), v))
	})
}

// IssuedByUserLoginIDHasSuffix applies the HasSuffix predicate on the "issued_by_user_login_id" field.
func IssuedByUserLoginIDHasSuffix(v string) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldIssuedByUserLoginID), v))
	})
}

// IssuedByUserLoginIDIsNil applies the IsNil predicate on the "issued_by_user_login_id" field.
func IssuedByUserLoginIDIsNil() predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldIssuedByUserLoginID)))
	})
}

// IssuedByUserLoginIDNotNil applies the NotNil predicate on the "issued_by_user_login_id" field.
func IssuedByUserLoginIDNotNil() predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldIssuedByUserLoginID)))
	})
}

// IssuedByUserLoginIDEqualFold applies the EqualFold predicate on the "issued_by_user_login_id" field.
func IssuedByUserLoginIDEqualFold(v string) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldIssuedByUserLoginID), v))
	})
}

// IssuedByUserLoginIDContainsFold applies the ContainsFold predicate on the "issued_by_user_login_id" field.
func IssuedByUserLoginIDContainsFold(v string) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldIssuedByUserLoginID), v))
	})
}

// QuantityEQ applies the EQ predicate on the "quantity" field.
func QuantityEQ(v float64) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQuantity), v))
	})
}

// QuantityNEQ applies the NEQ predicate on the "quantity" field.
func QuantityNEQ(v float64) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldQuantity), v))
	})
}

// QuantityIn applies the In predicate on the "quantity" field.
func QuantityIn(vs ...float64) predicate.ItemIssuance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ItemIssuance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldQuantity), v...))
	})
}

// QuantityNotIn applies the NotIn predicate on the "quantity" field.
func QuantityNotIn(vs ...float64) predicate.ItemIssuance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ItemIssuance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldQuantity), v...))
	})
}

// QuantityGT applies the GT predicate on the "quantity" field.
func QuantityGT(v float64) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldQuantity), v))
	})
}

// QuantityGTE applies the GTE predicate on the "quantity" field.
func QuantityGTE(v float64) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldQuantity), v))
	})
}

// QuantityLT applies the LT predicate on the "quantity" field.
func QuantityLT(v float64) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldQuantity), v))
	})
}

// QuantityLTE applies the LTE predicate on the "quantity" field.
func QuantityLTE(v float64) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldQuantity), v))
	})
}

// QuantityIsNil applies the IsNil predicate on the "quantity" field.
func QuantityIsNil() predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldQuantity)))
	})
}

// QuantityNotNil applies the NotNil predicate on the "quantity" field.
func QuantityNotNil() predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldQuantity)))
	})
}

// CancelQuantityEQ applies the EQ predicate on the "cancel_quantity" field.
func CancelQuantityEQ(v float64) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCancelQuantity), v))
	})
}

// CancelQuantityNEQ applies the NEQ predicate on the "cancel_quantity" field.
func CancelQuantityNEQ(v float64) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCancelQuantity), v))
	})
}

// CancelQuantityIn applies the In predicate on the "cancel_quantity" field.
func CancelQuantityIn(vs ...float64) predicate.ItemIssuance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ItemIssuance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCancelQuantity), v...))
	})
}

// CancelQuantityNotIn applies the NotIn predicate on the "cancel_quantity" field.
func CancelQuantityNotIn(vs ...float64) predicate.ItemIssuance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ItemIssuance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCancelQuantity), v...))
	})
}

// CancelQuantityGT applies the GT predicate on the "cancel_quantity" field.
func CancelQuantityGT(v float64) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCancelQuantity), v))
	})
}

// CancelQuantityGTE applies the GTE predicate on the "cancel_quantity" field.
func CancelQuantityGTE(v float64) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCancelQuantity), v))
	})
}

// CancelQuantityLT applies the LT predicate on the "cancel_quantity" field.
func CancelQuantityLT(v float64) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCancelQuantity), v))
	})
}

// CancelQuantityLTE applies the LTE predicate on the "cancel_quantity" field.
func CancelQuantityLTE(v float64) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCancelQuantity), v))
	})
}

// CancelQuantityIsNil applies the IsNil predicate on the "cancel_quantity" field.
func CancelQuantityIsNil() predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCancelQuantity)))
	})
}

// CancelQuantityNotNil applies the NotNil predicate on the "cancel_quantity" field.
func CancelQuantityNotNil() predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCancelQuantity)))
	})
}

// HasShipment applies the HasEdge predicate on the "shipment" edge.
func HasShipment() predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ShipmentTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ShipmentTable, ShipmentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasShipmentWith applies the HasEdge predicate on the "shipment" edge with a given conditions (other predicates).
func HasShipmentWith(preds ...predicate.Shipment) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ShipmentInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ShipmentTable, ShipmentColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasShipmentItem applies the HasEdge predicate on the "shipment_item" edge.
func HasShipmentItem() predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ShipmentItemTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ShipmentItemTable, ShipmentItemColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasShipmentItemWith applies the HasEdge predicate on the "shipment_item" edge with a given conditions (other predicates).
func HasShipmentItemWith(preds ...predicate.ShipmentItem) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ShipmentItemInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ShipmentItemTable, ShipmentItemColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrderHeader applies the HasEdge predicate on the "order_header" edge.
func HasOrderHeader() predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderHeaderTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OrderHeaderTable, OrderHeaderColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderHeaderWith applies the HasEdge predicate on the "order_header" edge with a given conditions (other predicates).
func HasOrderHeaderWith(preds ...predicate.OrderHeader) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderHeaderInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OrderHeaderTable, OrderHeaderColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrderItem applies the HasEdge predicate on the "order_item" edge.
func HasOrderItem() predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderItemTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OrderItemTable, OrderItemColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderItemWith applies the HasEdge predicate on the "order_item" edge with a given conditions (other predicates).
func HasOrderItemWith(preds ...predicate.OrderItem) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderItemInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OrderItemTable, OrderItemColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ItemIssuance) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ItemIssuance) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ItemIssuance) predicate.ItemIssuance {
	return predicate.ItemIssuance(func(s *sql.Selector) {
		p(s.Not())
	})
}
