// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/itemissuance"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/orderheader"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/orderitem"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/shipment"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/shipmentitem"
)

// ItemIssuanceCreate is the builder for creating a ItemIssuance entity.
type ItemIssuanceCreate struct {
	config
	mutation *ItemIssuanceMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (iic *ItemIssuanceCreate) SetCreateTime(t time.Time) *ItemIssuanceCreate {
	iic.mutation.SetCreateTime(t)
	return iic
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (iic *ItemIssuanceCreate) SetNillableCreateTime(t *time.Time) *ItemIssuanceCreate {
	if t != nil {
		iic.SetCreateTime(*t)
	}
	return iic
}

// SetUpdateTime sets the "update_time" field.
func (iic *ItemIssuanceCreate) SetUpdateTime(t time.Time) *ItemIssuanceCreate {
	iic.mutation.SetUpdateTime(t)
	return iic
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (iic *ItemIssuanceCreate) SetNillableUpdateTime(t *time.Time) *ItemIssuanceCreate {
	if t != nil {
		iic.SetUpdateTime(*t)
	}
	return iic
}

// SetOrderItemSeqID sets the "order_item_seq_id" field.
func (iic *ItemIssuanceCreate) SetOrderItemSeqID(i int) *ItemIssuanceCreate {
	iic.mutation.SetOrderItemSeqID(i)
	return iic
}

// SetNillableOrderItemSeqID sets the "order_item_seq_id" field if the given value is not nil.
func (iic *ItemIssuanceCreate) SetNillableOrderItemSeqID(i *int) *ItemIssuanceCreate {
	if i != nil {
		iic.SetOrderItemSeqID(*i)
	}
	return iic
}

// SetShipGroupSeqID sets the "ship_group_seq_id" field.
func (iic *ItemIssuanceCreate) SetShipGroupSeqID(i int) *ItemIssuanceCreate {
	iic.mutation.SetShipGroupSeqID(i)
	return iic
}

// SetNillableShipGroupSeqID sets the "ship_group_seq_id" field if the given value is not nil.
func (iic *ItemIssuanceCreate) SetNillableShipGroupSeqID(i *int) *ItemIssuanceCreate {
	if i != nil {
		iic.SetShipGroupSeqID(*i)
	}
	return iic
}

// SetInventoryItemID sets the "inventory_item_id" field.
func (iic *ItemIssuanceCreate) SetInventoryItemID(i int) *ItemIssuanceCreate {
	iic.mutation.SetInventoryItemID(i)
	return iic
}

// SetNillableInventoryItemID sets the "inventory_item_id" field if the given value is not nil.
func (iic *ItemIssuanceCreate) SetNillableInventoryItemID(i *int) *ItemIssuanceCreate {
	if i != nil {
		iic.SetInventoryItemID(*i)
	}
	return iic
}

// SetShipmentItemSeqID sets the "shipment_item_seq_id" field.
func (iic *ItemIssuanceCreate) SetShipmentItemSeqID(i int) *ItemIssuanceCreate {
	iic.mutation.SetShipmentItemSeqID(i)
	return iic
}

// SetNillableShipmentItemSeqID sets the "shipment_item_seq_id" field if the given value is not nil.
func (iic *ItemIssuanceCreate) SetNillableShipmentItemSeqID(i *int) *ItemIssuanceCreate {
	if i != nil {
		iic.SetShipmentItemSeqID(*i)
	}
	return iic
}

// SetFixedAssetID sets the "fixed_asset_id" field.
func (iic *ItemIssuanceCreate) SetFixedAssetID(i int) *ItemIssuanceCreate {
	iic.mutation.SetFixedAssetID(i)
	return iic
}

// SetNillableFixedAssetID sets the "fixed_asset_id" field if the given value is not nil.
func (iic *ItemIssuanceCreate) SetNillableFixedAssetID(i *int) *ItemIssuanceCreate {
	if i != nil {
		iic.SetFixedAssetID(*i)
	}
	return iic
}

// SetMaintHistSeqID sets the "maint_hist_seq_id" field.
func (iic *ItemIssuanceCreate) SetMaintHistSeqID(i int) *ItemIssuanceCreate {
	iic.mutation.SetMaintHistSeqID(i)
	return iic
}

// SetNillableMaintHistSeqID sets the "maint_hist_seq_id" field if the given value is not nil.
func (iic *ItemIssuanceCreate) SetNillableMaintHistSeqID(i *int) *ItemIssuanceCreate {
	if i != nil {
		iic.SetMaintHistSeqID(*i)
	}
	return iic
}

// SetIssuedDateTime sets the "issued_date_time" field.
func (iic *ItemIssuanceCreate) SetIssuedDateTime(t time.Time) *ItemIssuanceCreate {
	iic.mutation.SetIssuedDateTime(t)
	return iic
}

// SetNillableIssuedDateTime sets the "issued_date_time" field if the given value is not nil.
func (iic *ItemIssuanceCreate) SetNillableIssuedDateTime(t *time.Time) *ItemIssuanceCreate {
	if t != nil {
		iic.SetIssuedDateTime(*t)
	}
	return iic
}

// SetIssuedByUserLoginID sets the "issued_by_user_login_id" field.
func (iic *ItemIssuanceCreate) SetIssuedByUserLoginID(s string) *ItemIssuanceCreate {
	iic.mutation.SetIssuedByUserLoginID(s)
	return iic
}

// SetNillableIssuedByUserLoginID sets the "issued_by_user_login_id" field if the given value is not nil.
func (iic *ItemIssuanceCreate) SetNillableIssuedByUserLoginID(s *string) *ItemIssuanceCreate {
	if s != nil {
		iic.SetIssuedByUserLoginID(*s)
	}
	return iic
}

// SetQuantity sets the "quantity" field.
func (iic *ItemIssuanceCreate) SetQuantity(f float64) *ItemIssuanceCreate {
	iic.mutation.SetQuantity(f)
	return iic
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (iic *ItemIssuanceCreate) SetNillableQuantity(f *float64) *ItemIssuanceCreate {
	if f != nil {
		iic.SetQuantity(*f)
	}
	return iic
}

// SetCancelQuantity sets the "cancel_quantity" field.
func (iic *ItemIssuanceCreate) SetCancelQuantity(f float64) *ItemIssuanceCreate {
	iic.mutation.SetCancelQuantity(f)
	return iic
}

// SetNillableCancelQuantity sets the "cancel_quantity" field if the given value is not nil.
func (iic *ItemIssuanceCreate) SetNillableCancelQuantity(f *float64) *ItemIssuanceCreate {
	if f != nil {
		iic.SetCancelQuantity(*f)
	}
	return iic
}

// SetShipmentID sets the "shipment" edge to the Shipment entity by ID.
func (iic *ItemIssuanceCreate) SetShipmentID(id int) *ItemIssuanceCreate {
	iic.mutation.SetShipmentID(id)
	return iic
}

// SetNillableShipmentID sets the "shipment" edge to the Shipment entity by ID if the given value is not nil.
func (iic *ItemIssuanceCreate) SetNillableShipmentID(id *int) *ItemIssuanceCreate {
	if id != nil {
		iic = iic.SetShipmentID(*id)
	}
	return iic
}

// SetShipment sets the "shipment" edge to the Shipment entity.
func (iic *ItemIssuanceCreate) SetShipment(s *Shipment) *ItemIssuanceCreate {
	return iic.SetShipmentID(s.ID)
}

// SetShipmentItemID sets the "shipment_item" edge to the ShipmentItem entity by ID.
func (iic *ItemIssuanceCreate) SetShipmentItemID(id int) *ItemIssuanceCreate {
	iic.mutation.SetShipmentItemID(id)
	return iic
}

// SetNillableShipmentItemID sets the "shipment_item" edge to the ShipmentItem entity by ID if the given value is not nil.
func (iic *ItemIssuanceCreate) SetNillableShipmentItemID(id *int) *ItemIssuanceCreate {
	if id != nil {
		iic = iic.SetShipmentItemID(*id)
	}
	return iic
}

// SetShipmentItem sets the "shipment_item" edge to the ShipmentItem entity.
func (iic *ItemIssuanceCreate) SetShipmentItem(s *ShipmentItem) *ItemIssuanceCreate {
	return iic.SetShipmentItemID(s.ID)
}

// SetOrderHeaderID sets the "order_header" edge to the OrderHeader entity by ID.
func (iic *ItemIssuanceCreate) SetOrderHeaderID(id int) *ItemIssuanceCreate {
	iic.mutation.SetOrderHeaderID(id)
	return iic
}

// SetNillableOrderHeaderID sets the "order_header" edge to the OrderHeader entity by ID if the given value is not nil.
func (iic *ItemIssuanceCreate) SetNillableOrderHeaderID(id *int) *ItemIssuanceCreate {
	if id != nil {
		iic = iic.SetOrderHeaderID(*id)
	}
	return iic
}

// SetOrderHeader sets the "order_header" edge to the OrderHeader entity.
func (iic *ItemIssuanceCreate) SetOrderHeader(o *OrderHeader) *ItemIssuanceCreate {
	return iic.SetOrderHeaderID(o.ID)
}

// SetOrderItemID sets the "order_item" edge to the OrderItem entity by ID.
func (iic *ItemIssuanceCreate) SetOrderItemID(id int) *ItemIssuanceCreate {
	iic.mutation.SetOrderItemID(id)
	return iic
}

// SetNillableOrderItemID sets the "order_item" edge to the OrderItem entity by ID if the given value is not nil.
func (iic *ItemIssuanceCreate) SetNillableOrderItemID(id *int) *ItemIssuanceCreate {
	if id != nil {
		iic = iic.SetOrderItemID(*id)
	}
	return iic
}

// SetOrderItem sets the "order_item" edge to the OrderItem entity.
func (iic *ItemIssuanceCreate) SetOrderItem(o *OrderItem) *ItemIssuanceCreate {
	return iic.SetOrderItemID(o.ID)
}

// Mutation returns the ItemIssuanceMutation object of the builder.
func (iic *ItemIssuanceCreate) Mutation() *ItemIssuanceMutation {
	return iic.mutation
}

// Save creates the ItemIssuance in the database.
func (iic *ItemIssuanceCreate) Save(ctx context.Context) (*ItemIssuance, error) {
	var (
		err  error
		node *ItemIssuance
	)
	iic.defaults()
	if len(iic.hooks) == 0 {
		if err = iic.check(); err != nil {
			return nil, err
		}
		node, err = iic.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ItemIssuanceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = iic.check(); err != nil {
				return nil, err
			}
			iic.mutation = mutation
			node, err = iic.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(iic.hooks) - 1; i >= 0; i-- {
			mut = iic.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, iic.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (iic *ItemIssuanceCreate) SaveX(ctx context.Context) *ItemIssuance {
	v, err := iic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (iic *ItemIssuanceCreate) defaults() {
	if _, ok := iic.mutation.CreateTime(); !ok {
		v := itemissuance.DefaultCreateTime()
		iic.mutation.SetCreateTime(v)
	}
	if _, ok := iic.mutation.UpdateTime(); !ok {
		v := itemissuance.DefaultUpdateTime()
		iic.mutation.SetUpdateTime(v)
	}
	if _, ok := iic.mutation.IssuedDateTime(); !ok {
		v := itemissuance.DefaultIssuedDateTime()
		iic.mutation.SetIssuedDateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iic *ItemIssuanceCreate) check() error {
	if _, ok := iic.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New("ent: missing required field \"create_time\"")}
	}
	if _, ok := iic.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New("ent: missing required field \"update_time\"")}
	}
	return nil
}

func (iic *ItemIssuanceCreate) sqlSave(ctx context.Context) (*ItemIssuance, error) {
	_node, _spec := iic.createSpec()
	if err := sqlgraph.CreateNode(ctx, iic.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (iic *ItemIssuanceCreate) createSpec() (*ItemIssuance, *sqlgraph.CreateSpec) {
	var (
		_node = &ItemIssuance{config: iic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: itemissuance.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: itemissuance.FieldID,
			},
		}
	)
	if value, ok := iic.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: itemissuance.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := iic.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: itemissuance.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := iic.mutation.OrderItemSeqID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: itemissuance.FieldOrderItemSeqID,
		})
		_node.OrderItemSeqID = value
	}
	if value, ok := iic.mutation.ShipGroupSeqID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: itemissuance.FieldShipGroupSeqID,
		})
		_node.ShipGroupSeqID = value
	}
	if value, ok := iic.mutation.InventoryItemID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: itemissuance.FieldInventoryItemID,
		})
		_node.InventoryItemID = value
	}
	if value, ok := iic.mutation.ShipmentItemSeqID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: itemissuance.FieldShipmentItemSeqID,
		})
		_node.ShipmentItemSeqID = value
	}
	if value, ok := iic.mutation.FixedAssetID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: itemissuance.FieldFixedAssetID,
		})
		_node.FixedAssetID = value
	}
	if value, ok := iic.mutation.MaintHistSeqID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: itemissuance.FieldMaintHistSeqID,
		})
		_node.MaintHistSeqID = value
	}
	if value, ok := iic.mutation.IssuedDateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: itemissuance.FieldIssuedDateTime,
		})
		_node.IssuedDateTime = value
	}
	if value, ok := iic.mutation.IssuedByUserLoginID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: itemissuance.FieldIssuedByUserLoginID,
		})
		_node.IssuedByUserLoginID = value
	}
	if value, ok := iic.mutation.Quantity(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: itemissuance.FieldQuantity,
		})
		_node.Quantity = value
	}
	if value, ok := iic.mutation.CancelQuantity(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: itemissuance.FieldCancelQuantity,
		})
		_node.CancelQuantity = value
	}
	if nodes := iic.mutation.ShipmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   itemissuance.ShipmentTable,
			Columns: []string{itemissuance.ShipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.shipment_item_issuances = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := iic.mutation.ShipmentItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   itemissuance.ShipmentItemTable,
			Columns: []string{itemissuance.ShipmentItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipmentitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.shipment_item_item_issuances = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := iic.mutation.OrderHeaderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   itemissuance.OrderHeaderTable,
			Columns: []string{itemissuance.OrderHeaderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderheader.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.order_header_item_issuances = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := iic.mutation.OrderItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   itemissuance.OrderItemTable,
			Columns: []string{itemissuance.OrderItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.order_item_item_issuances = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ItemIssuanceCreateBulk is the builder for creating many ItemIssuance entities in bulk.
type ItemIssuanceCreateBulk struct {
	config
	builders []*ItemIssuanceCreate
}

// Save creates the ItemIssuance entities in the database.
func (iicb *ItemIssuanceCreateBulk) Save(ctx context.Context) ([]*ItemIssuance, error) {
	specs := make([]*sqlgraph.CreateSpec, len(iicb.builders))
	nodes := make([]*ItemIssuance, len(iicb.builders))
	mutators := make([]Mutator, len(iicb.builders))
	for i := range iicb.builders {
		func(i int, root context.Context) {
			builder := iicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ItemIssuanceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, iicb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, iicb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, iicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (iicb *ItemIssuanceCreateBulk) SaveX(ctx context.Context) []*ItemIssuance {
	v, err := iicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
