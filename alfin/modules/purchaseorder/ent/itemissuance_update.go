// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/itemissuance"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/orderheader"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/orderitem"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/predicate"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/shipment"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/shipmentitem"
)

// ItemIssuanceUpdate is the builder for updating ItemIssuance entities.
type ItemIssuanceUpdate struct {
	config
	hooks    []Hook
	mutation *ItemIssuanceMutation
}

// Where adds a new predicate for the ItemIssuanceUpdate builder.
func (iiu *ItemIssuanceUpdate) Where(ps ...predicate.ItemIssuance) *ItemIssuanceUpdate {
	iiu.mutation.predicates = append(iiu.mutation.predicates, ps...)
	return iiu
}

// SetOrderItemSeqID sets the "order_item_seq_id" field.
func (iiu *ItemIssuanceUpdate) SetOrderItemSeqID(i int) *ItemIssuanceUpdate {
	iiu.mutation.ResetOrderItemSeqID()
	iiu.mutation.SetOrderItemSeqID(i)
	return iiu
}

// SetNillableOrderItemSeqID sets the "order_item_seq_id" field if the given value is not nil.
func (iiu *ItemIssuanceUpdate) SetNillableOrderItemSeqID(i *int) *ItemIssuanceUpdate {
	if i != nil {
		iiu.SetOrderItemSeqID(*i)
	}
	return iiu
}

// AddOrderItemSeqID adds i to the "order_item_seq_id" field.
func (iiu *ItemIssuanceUpdate) AddOrderItemSeqID(i int) *ItemIssuanceUpdate {
	iiu.mutation.AddOrderItemSeqID(i)
	return iiu
}

// ClearOrderItemSeqID clears the value of the "order_item_seq_id" field.
func (iiu *ItemIssuanceUpdate) ClearOrderItemSeqID() *ItemIssuanceUpdate {
	iiu.mutation.ClearOrderItemSeqID()
	return iiu
}

// SetShipGroupSeqID sets the "ship_group_seq_id" field.
func (iiu *ItemIssuanceUpdate) SetShipGroupSeqID(i int) *ItemIssuanceUpdate {
	iiu.mutation.ResetShipGroupSeqID()
	iiu.mutation.SetShipGroupSeqID(i)
	return iiu
}

// SetNillableShipGroupSeqID sets the "ship_group_seq_id" field if the given value is not nil.
func (iiu *ItemIssuanceUpdate) SetNillableShipGroupSeqID(i *int) *ItemIssuanceUpdate {
	if i != nil {
		iiu.SetShipGroupSeqID(*i)
	}
	return iiu
}

// AddShipGroupSeqID adds i to the "ship_group_seq_id" field.
func (iiu *ItemIssuanceUpdate) AddShipGroupSeqID(i int) *ItemIssuanceUpdate {
	iiu.mutation.AddShipGroupSeqID(i)
	return iiu
}

// ClearShipGroupSeqID clears the value of the "ship_group_seq_id" field.
func (iiu *ItemIssuanceUpdate) ClearShipGroupSeqID() *ItemIssuanceUpdate {
	iiu.mutation.ClearShipGroupSeqID()
	return iiu
}

// SetInventoryItemID sets the "inventory_item_id" field.
func (iiu *ItemIssuanceUpdate) SetInventoryItemID(i int) *ItemIssuanceUpdate {
	iiu.mutation.ResetInventoryItemID()
	iiu.mutation.SetInventoryItemID(i)
	return iiu
}

// SetNillableInventoryItemID sets the "inventory_item_id" field if the given value is not nil.
func (iiu *ItemIssuanceUpdate) SetNillableInventoryItemID(i *int) *ItemIssuanceUpdate {
	if i != nil {
		iiu.SetInventoryItemID(*i)
	}
	return iiu
}

// AddInventoryItemID adds i to the "inventory_item_id" field.
func (iiu *ItemIssuanceUpdate) AddInventoryItemID(i int) *ItemIssuanceUpdate {
	iiu.mutation.AddInventoryItemID(i)
	return iiu
}

// ClearInventoryItemID clears the value of the "inventory_item_id" field.
func (iiu *ItemIssuanceUpdate) ClearInventoryItemID() *ItemIssuanceUpdate {
	iiu.mutation.ClearInventoryItemID()
	return iiu
}

// SetShipmentItemSeqID sets the "shipment_item_seq_id" field.
func (iiu *ItemIssuanceUpdate) SetShipmentItemSeqID(i int) *ItemIssuanceUpdate {
	iiu.mutation.ResetShipmentItemSeqID()
	iiu.mutation.SetShipmentItemSeqID(i)
	return iiu
}

// SetNillableShipmentItemSeqID sets the "shipment_item_seq_id" field if the given value is not nil.
func (iiu *ItemIssuanceUpdate) SetNillableShipmentItemSeqID(i *int) *ItemIssuanceUpdate {
	if i != nil {
		iiu.SetShipmentItemSeqID(*i)
	}
	return iiu
}

// AddShipmentItemSeqID adds i to the "shipment_item_seq_id" field.
func (iiu *ItemIssuanceUpdate) AddShipmentItemSeqID(i int) *ItemIssuanceUpdate {
	iiu.mutation.AddShipmentItemSeqID(i)
	return iiu
}

// ClearShipmentItemSeqID clears the value of the "shipment_item_seq_id" field.
func (iiu *ItemIssuanceUpdate) ClearShipmentItemSeqID() *ItemIssuanceUpdate {
	iiu.mutation.ClearShipmentItemSeqID()
	return iiu
}

// SetFixedAssetID sets the "fixed_asset_id" field.
func (iiu *ItemIssuanceUpdate) SetFixedAssetID(i int) *ItemIssuanceUpdate {
	iiu.mutation.ResetFixedAssetID()
	iiu.mutation.SetFixedAssetID(i)
	return iiu
}

// SetNillableFixedAssetID sets the "fixed_asset_id" field if the given value is not nil.
func (iiu *ItemIssuanceUpdate) SetNillableFixedAssetID(i *int) *ItemIssuanceUpdate {
	if i != nil {
		iiu.SetFixedAssetID(*i)
	}
	return iiu
}

// AddFixedAssetID adds i to the "fixed_asset_id" field.
func (iiu *ItemIssuanceUpdate) AddFixedAssetID(i int) *ItemIssuanceUpdate {
	iiu.mutation.AddFixedAssetID(i)
	return iiu
}

// ClearFixedAssetID clears the value of the "fixed_asset_id" field.
func (iiu *ItemIssuanceUpdate) ClearFixedAssetID() *ItemIssuanceUpdate {
	iiu.mutation.ClearFixedAssetID()
	return iiu
}

// SetMaintHistSeqID sets the "maint_hist_seq_id" field.
func (iiu *ItemIssuanceUpdate) SetMaintHistSeqID(i int) *ItemIssuanceUpdate {
	iiu.mutation.ResetMaintHistSeqID()
	iiu.mutation.SetMaintHistSeqID(i)
	return iiu
}

// SetNillableMaintHistSeqID sets the "maint_hist_seq_id" field if the given value is not nil.
func (iiu *ItemIssuanceUpdate) SetNillableMaintHistSeqID(i *int) *ItemIssuanceUpdate {
	if i != nil {
		iiu.SetMaintHistSeqID(*i)
	}
	return iiu
}

// AddMaintHistSeqID adds i to the "maint_hist_seq_id" field.
func (iiu *ItemIssuanceUpdate) AddMaintHistSeqID(i int) *ItemIssuanceUpdate {
	iiu.mutation.AddMaintHistSeqID(i)
	return iiu
}

// ClearMaintHistSeqID clears the value of the "maint_hist_seq_id" field.
func (iiu *ItemIssuanceUpdate) ClearMaintHistSeqID() *ItemIssuanceUpdate {
	iiu.mutation.ClearMaintHistSeqID()
	return iiu
}

// SetIssuedDateTime sets the "issued_date_time" field.
func (iiu *ItemIssuanceUpdate) SetIssuedDateTime(t time.Time) *ItemIssuanceUpdate {
	iiu.mutation.SetIssuedDateTime(t)
	return iiu
}

// SetNillableIssuedDateTime sets the "issued_date_time" field if the given value is not nil.
func (iiu *ItemIssuanceUpdate) SetNillableIssuedDateTime(t *time.Time) *ItemIssuanceUpdate {
	if t != nil {
		iiu.SetIssuedDateTime(*t)
	}
	return iiu
}

// ClearIssuedDateTime clears the value of the "issued_date_time" field.
func (iiu *ItemIssuanceUpdate) ClearIssuedDateTime() *ItemIssuanceUpdate {
	iiu.mutation.ClearIssuedDateTime()
	return iiu
}

// SetIssuedByUserLoginID sets the "issued_by_user_login_id" field.
func (iiu *ItemIssuanceUpdate) SetIssuedByUserLoginID(s string) *ItemIssuanceUpdate {
	iiu.mutation.SetIssuedByUserLoginID(s)
	return iiu
}

// SetNillableIssuedByUserLoginID sets the "issued_by_user_login_id" field if the given value is not nil.
func (iiu *ItemIssuanceUpdate) SetNillableIssuedByUserLoginID(s *string) *ItemIssuanceUpdate {
	if s != nil {
		iiu.SetIssuedByUserLoginID(*s)
	}
	return iiu
}

// ClearIssuedByUserLoginID clears the value of the "issued_by_user_login_id" field.
func (iiu *ItemIssuanceUpdate) ClearIssuedByUserLoginID() *ItemIssuanceUpdate {
	iiu.mutation.ClearIssuedByUserLoginID()
	return iiu
}

// SetQuantity sets the "quantity" field.
func (iiu *ItemIssuanceUpdate) SetQuantity(f float64) *ItemIssuanceUpdate {
	iiu.mutation.ResetQuantity()
	iiu.mutation.SetQuantity(f)
	return iiu
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (iiu *ItemIssuanceUpdate) SetNillableQuantity(f *float64) *ItemIssuanceUpdate {
	if f != nil {
		iiu.SetQuantity(*f)
	}
	return iiu
}

// AddQuantity adds f to the "quantity" field.
func (iiu *ItemIssuanceUpdate) AddQuantity(f float64) *ItemIssuanceUpdate {
	iiu.mutation.AddQuantity(f)
	return iiu
}

// ClearQuantity clears the value of the "quantity" field.
func (iiu *ItemIssuanceUpdate) ClearQuantity() *ItemIssuanceUpdate {
	iiu.mutation.ClearQuantity()
	return iiu
}

// SetCancelQuantity sets the "cancel_quantity" field.
func (iiu *ItemIssuanceUpdate) SetCancelQuantity(f float64) *ItemIssuanceUpdate {
	iiu.mutation.ResetCancelQuantity()
	iiu.mutation.SetCancelQuantity(f)
	return iiu
}

// SetNillableCancelQuantity sets the "cancel_quantity" field if the given value is not nil.
func (iiu *ItemIssuanceUpdate) SetNillableCancelQuantity(f *float64) *ItemIssuanceUpdate {
	if f != nil {
		iiu.SetCancelQuantity(*f)
	}
	return iiu
}

// AddCancelQuantity adds f to the "cancel_quantity" field.
func (iiu *ItemIssuanceUpdate) AddCancelQuantity(f float64) *ItemIssuanceUpdate {
	iiu.mutation.AddCancelQuantity(f)
	return iiu
}

// ClearCancelQuantity clears the value of the "cancel_quantity" field.
func (iiu *ItemIssuanceUpdate) ClearCancelQuantity() *ItemIssuanceUpdate {
	iiu.mutation.ClearCancelQuantity()
	return iiu
}

// SetShipmentID sets the "shipment" edge to the Shipment entity by ID.
func (iiu *ItemIssuanceUpdate) SetShipmentID(id int) *ItemIssuanceUpdate {
	iiu.mutation.SetShipmentID(id)
	return iiu
}

// SetNillableShipmentID sets the "shipment" edge to the Shipment entity by ID if the given value is not nil.
func (iiu *ItemIssuanceUpdate) SetNillableShipmentID(id *int) *ItemIssuanceUpdate {
	if id != nil {
		iiu = iiu.SetShipmentID(*id)
	}
	return iiu
}

// SetShipment sets the "shipment" edge to the Shipment entity.
func (iiu *ItemIssuanceUpdate) SetShipment(s *Shipment) *ItemIssuanceUpdate {
	return iiu.SetShipmentID(s.ID)
}

// SetShipmentItemID sets the "shipment_item" edge to the ShipmentItem entity by ID.
func (iiu *ItemIssuanceUpdate) SetShipmentItemID(id int) *ItemIssuanceUpdate {
	iiu.mutation.SetShipmentItemID(id)
	return iiu
}

// SetNillableShipmentItemID sets the "shipment_item" edge to the ShipmentItem entity by ID if the given value is not nil.
func (iiu *ItemIssuanceUpdate) SetNillableShipmentItemID(id *int) *ItemIssuanceUpdate {
	if id != nil {
		iiu = iiu.SetShipmentItemID(*id)
	}
	return iiu
}

// SetShipmentItem sets the "shipment_item" edge to the ShipmentItem entity.
func (iiu *ItemIssuanceUpdate) SetShipmentItem(s *ShipmentItem) *ItemIssuanceUpdate {
	return iiu.SetShipmentItemID(s.ID)
}

// SetOrderHeaderID sets the "order_header" edge to the OrderHeader entity by ID.
func (iiu *ItemIssuanceUpdate) SetOrderHeaderID(id int) *ItemIssuanceUpdate {
	iiu.mutation.SetOrderHeaderID(id)
	return iiu
}

// SetNillableOrderHeaderID sets the "order_header" edge to the OrderHeader entity by ID if the given value is not nil.
func (iiu *ItemIssuanceUpdate) SetNillableOrderHeaderID(id *int) *ItemIssuanceUpdate {
	if id != nil {
		iiu = iiu.SetOrderHeaderID(*id)
	}
	return iiu
}

// SetOrderHeader sets the "order_header" edge to the OrderHeader entity.
func (iiu *ItemIssuanceUpdate) SetOrderHeader(o *OrderHeader) *ItemIssuanceUpdate {
	return iiu.SetOrderHeaderID(o.ID)
}

// SetOrderItemID sets the "order_item" edge to the OrderItem entity by ID.
func (iiu *ItemIssuanceUpdate) SetOrderItemID(id int) *ItemIssuanceUpdate {
	iiu.mutation.SetOrderItemID(id)
	return iiu
}

// SetNillableOrderItemID sets the "order_item" edge to the OrderItem entity by ID if the given value is not nil.
func (iiu *ItemIssuanceUpdate) SetNillableOrderItemID(id *int) *ItemIssuanceUpdate {
	if id != nil {
		iiu = iiu.SetOrderItemID(*id)
	}
	return iiu
}

// SetOrderItem sets the "order_item" edge to the OrderItem entity.
func (iiu *ItemIssuanceUpdate) SetOrderItem(o *OrderItem) *ItemIssuanceUpdate {
	return iiu.SetOrderItemID(o.ID)
}

// Mutation returns the ItemIssuanceMutation object of the builder.
func (iiu *ItemIssuanceUpdate) Mutation() *ItemIssuanceMutation {
	return iiu.mutation
}

// ClearShipment clears the "shipment" edge to the Shipment entity.
func (iiu *ItemIssuanceUpdate) ClearShipment() *ItemIssuanceUpdate {
	iiu.mutation.ClearShipment()
	return iiu
}

// ClearShipmentItem clears the "shipment_item" edge to the ShipmentItem entity.
func (iiu *ItemIssuanceUpdate) ClearShipmentItem() *ItemIssuanceUpdate {
	iiu.mutation.ClearShipmentItem()
	return iiu
}

// ClearOrderHeader clears the "order_header" edge to the OrderHeader entity.
func (iiu *ItemIssuanceUpdate) ClearOrderHeader() *ItemIssuanceUpdate {
	iiu.mutation.ClearOrderHeader()
	return iiu
}

// ClearOrderItem clears the "order_item" edge to the OrderItem entity.
func (iiu *ItemIssuanceUpdate) ClearOrderItem() *ItemIssuanceUpdate {
	iiu.mutation.ClearOrderItem()
	return iiu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iiu *ItemIssuanceUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	iiu.defaults()
	if len(iiu.hooks) == 0 {
		affected, err = iiu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ItemIssuanceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			iiu.mutation = mutation
			affected, err = iiu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(iiu.hooks) - 1; i >= 0; i-- {
			mut = iiu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, iiu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (iiu *ItemIssuanceUpdate) SaveX(ctx context.Context) int {
	affected, err := iiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iiu *ItemIssuanceUpdate) Exec(ctx context.Context) error {
	_, err := iiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iiu *ItemIssuanceUpdate) ExecX(ctx context.Context) {
	if err := iiu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iiu *ItemIssuanceUpdate) defaults() {
	if _, ok := iiu.mutation.UpdateTime(); !ok {
		v := itemissuance.UpdateDefaultUpdateTime()
		iiu.mutation.SetUpdateTime(v)
	}
}

func (iiu *ItemIssuanceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   itemissuance.Table,
			Columns: itemissuance.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: itemissuance.FieldID,
			},
		},
	}
	if ps := iiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iiu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: itemissuance.FieldUpdateTime,
		})
	}
	if value, ok := iiu.mutation.OrderItemSeqID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: itemissuance.FieldOrderItemSeqID,
		})
	}
	if value, ok := iiu.mutation.AddedOrderItemSeqID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: itemissuance.FieldOrderItemSeqID,
		})
	}
	if iiu.mutation.OrderItemSeqIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: itemissuance.FieldOrderItemSeqID,
		})
	}
	if value, ok := iiu.mutation.ShipGroupSeqID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: itemissuance.FieldShipGroupSeqID,
		})
	}
	if value, ok := iiu.mutation.AddedShipGroupSeqID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: itemissuance.FieldShipGroupSeqID,
		})
	}
	if iiu.mutation.ShipGroupSeqIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: itemissuance.FieldShipGroupSeqID,
		})
	}
	if value, ok := iiu.mutation.InventoryItemID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: itemissuance.FieldInventoryItemID,
		})
	}
	if value, ok := iiu.mutation.AddedInventoryItemID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: itemissuance.FieldInventoryItemID,
		})
	}
	if iiu.mutation.InventoryItemIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: itemissuance.FieldInventoryItemID,
		})
	}
	if value, ok := iiu.mutation.ShipmentItemSeqID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: itemissuance.FieldShipmentItemSeqID,
		})
	}
	if value, ok := iiu.mutation.AddedShipmentItemSeqID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: itemissuance.FieldShipmentItemSeqID,
		})
	}
	if iiu.mutation.ShipmentItemSeqIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: itemissuance.FieldShipmentItemSeqID,
		})
	}
	if value, ok := iiu.mutation.FixedAssetID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: itemissuance.FieldFixedAssetID,
		})
	}
	if value, ok := iiu.mutation.AddedFixedAssetID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: itemissuance.FieldFixedAssetID,
		})
	}
	if iiu.mutation.FixedAssetIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: itemissuance.FieldFixedAssetID,
		})
	}
	if value, ok := iiu.mutation.MaintHistSeqID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: itemissuance.FieldMaintHistSeqID,
		})
	}
	if value, ok := iiu.mutation.AddedMaintHistSeqID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: itemissuance.FieldMaintHistSeqID,
		})
	}
	if iiu.mutation.MaintHistSeqIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: itemissuance.FieldMaintHistSeqID,
		})
	}
	if value, ok := iiu.mutation.IssuedDateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: itemissuance.FieldIssuedDateTime,
		})
	}
	if iiu.mutation.IssuedDateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: itemissuance.FieldIssuedDateTime,
		})
	}
	if value, ok := iiu.mutation.IssuedByUserLoginID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: itemissuance.FieldIssuedByUserLoginID,
		})
	}
	if iiu.mutation.IssuedByUserLoginIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: itemissuance.FieldIssuedByUserLoginID,
		})
	}
	if value, ok := iiu.mutation.Quantity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: itemissuance.FieldQuantity,
		})
	}
	if value, ok := iiu.mutation.AddedQuantity(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: itemissuance.FieldQuantity,
		})
	}
	if iiu.mutation.QuantityCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: itemissuance.FieldQuantity,
		})
	}
	if value, ok := iiu.mutation.CancelQuantity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: itemissuance.FieldCancelQuantity,
		})
	}
	if value, ok := iiu.mutation.AddedCancelQuantity(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: itemissuance.FieldCancelQuantity,
		})
	}
	if iiu.mutation.CancelQuantityCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: itemissuance.FieldCancelQuantity,
		})
	}
	if iiu.mutation.ShipmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   itemissuance.ShipmentTable,
			Columns: []string{itemissuance.ShipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iiu.mutation.ShipmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   itemissuance.ShipmentTable,
			Columns: []string{itemissuance.ShipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iiu.mutation.ShipmentItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   itemissuance.ShipmentItemTable,
			Columns: []string{itemissuance.ShipmentItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipmentitem.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iiu.mutation.ShipmentItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   itemissuance.ShipmentItemTable,
			Columns: []string{itemissuance.ShipmentItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipmentitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iiu.mutation.OrderHeaderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   itemissuance.OrderHeaderTable,
			Columns: []string{itemissuance.OrderHeaderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderheader.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iiu.mutation.OrderHeaderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   itemissuance.OrderHeaderTable,
			Columns: []string{itemissuance.OrderHeaderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderheader.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iiu.mutation.OrderItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   itemissuance.OrderItemTable,
			Columns: []string{itemissuance.OrderItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitem.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iiu.mutation.OrderItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   itemissuance.OrderItemTable,
			Columns: []string{itemissuance.OrderItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{itemissuance.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ItemIssuanceUpdateOne is the builder for updating a single ItemIssuance entity.
type ItemIssuanceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ItemIssuanceMutation
}

// SetOrderItemSeqID sets the "order_item_seq_id" field.
func (iiuo *ItemIssuanceUpdateOne) SetOrderItemSeqID(i int) *ItemIssuanceUpdateOne {
	iiuo.mutation.ResetOrderItemSeqID()
	iiuo.mutation.SetOrderItemSeqID(i)
	return iiuo
}

// SetNillableOrderItemSeqID sets the "order_item_seq_id" field if the given value is not nil.
func (iiuo *ItemIssuanceUpdateOne) SetNillableOrderItemSeqID(i *int) *ItemIssuanceUpdateOne {
	if i != nil {
		iiuo.SetOrderItemSeqID(*i)
	}
	return iiuo
}

// AddOrderItemSeqID adds i to the "order_item_seq_id" field.
func (iiuo *ItemIssuanceUpdateOne) AddOrderItemSeqID(i int) *ItemIssuanceUpdateOne {
	iiuo.mutation.AddOrderItemSeqID(i)
	return iiuo
}

// ClearOrderItemSeqID clears the value of the "order_item_seq_id" field.
func (iiuo *ItemIssuanceUpdateOne) ClearOrderItemSeqID() *ItemIssuanceUpdateOne {
	iiuo.mutation.ClearOrderItemSeqID()
	return iiuo
}

// SetShipGroupSeqID sets the "ship_group_seq_id" field.
func (iiuo *ItemIssuanceUpdateOne) SetShipGroupSeqID(i int) *ItemIssuanceUpdateOne {
	iiuo.mutation.ResetShipGroupSeqID()
	iiuo.mutation.SetShipGroupSeqID(i)
	return iiuo
}

// SetNillableShipGroupSeqID sets the "ship_group_seq_id" field if the given value is not nil.
func (iiuo *ItemIssuanceUpdateOne) SetNillableShipGroupSeqID(i *int) *ItemIssuanceUpdateOne {
	if i != nil {
		iiuo.SetShipGroupSeqID(*i)
	}
	return iiuo
}

// AddShipGroupSeqID adds i to the "ship_group_seq_id" field.
func (iiuo *ItemIssuanceUpdateOne) AddShipGroupSeqID(i int) *ItemIssuanceUpdateOne {
	iiuo.mutation.AddShipGroupSeqID(i)
	return iiuo
}

// ClearShipGroupSeqID clears the value of the "ship_group_seq_id" field.
func (iiuo *ItemIssuanceUpdateOne) ClearShipGroupSeqID() *ItemIssuanceUpdateOne {
	iiuo.mutation.ClearShipGroupSeqID()
	return iiuo
}

// SetInventoryItemID sets the "inventory_item_id" field.
func (iiuo *ItemIssuanceUpdateOne) SetInventoryItemID(i int) *ItemIssuanceUpdateOne {
	iiuo.mutation.ResetInventoryItemID()
	iiuo.mutation.SetInventoryItemID(i)
	return iiuo
}

// SetNillableInventoryItemID sets the "inventory_item_id" field if the given value is not nil.
func (iiuo *ItemIssuanceUpdateOne) SetNillableInventoryItemID(i *int) *ItemIssuanceUpdateOne {
	if i != nil {
		iiuo.SetInventoryItemID(*i)
	}
	return iiuo
}

// AddInventoryItemID adds i to the "inventory_item_id" field.
func (iiuo *ItemIssuanceUpdateOne) AddInventoryItemID(i int) *ItemIssuanceUpdateOne {
	iiuo.mutation.AddInventoryItemID(i)
	return iiuo
}

// ClearInventoryItemID clears the value of the "inventory_item_id" field.
func (iiuo *ItemIssuanceUpdateOne) ClearInventoryItemID() *ItemIssuanceUpdateOne {
	iiuo.mutation.ClearInventoryItemID()
	return iiuo
}

// SetShipmentItemSeqID sets the "shipment_item_seq_id" field.
func (iiuo *ItemIssuanceUpdateOne) SetShipmentItemSeqID(i int) *ItemIssuanceUpdateOne {
	iiuo.mutation.ResetShipmentItemSeqID()
	iiuo.mutation.SetShipmentItemSeqID(i)
	return iiuo
}

// SetNillableShipmentItemSeqID sets the "shipment_item_seq_id" field if the given value is not nil.
func (iiuo *ItemIssuanceUpdateOne) SetNillableShipmentItemSeqID(i *int) *ItemIssuanceUpdateOne {
	if i != nil {
		iiuo.SetShipmentItemSeqID(*i)
	}
	return iiuo
}

// AddShipmentItemSeqID adds i to the "shipment_item_seq_id" field.
func (iiuo *ItemIssuanceUpdateOne) AddShipmentItemSeqID(i int) *ItemIssuanceUpdateOne {
	iiuo.mutation.AddShipmentItemSeqID(i)
	return iiuo
}

// ClearShipmentItemSeqID clears the value of the "shipment_item_seq_id" field.
func (iiuo *ItemIssuanceUpdateOne) ClearShipmentItemSeqID() *ItemIssuanceUpdateOne {
	iiuo.mutation.ClearShipmentItemSeqID()
	return iiuo
}

// SetFixedAssetID sets the "fixed_asset_id" field.
func (iiuo *ItemIssuanceUpdateOne) SetFixedAssetID(i int) *ItemIssuanceUpdateOne {
	iiuo.mutation.ResetFixedAssetID()
	iiuo.mutation.SetFixedAssetID(i)
	return iiuo
}

// SetNillableFixedAssetID sets the "fixed_asset_id" field if the given value is not nil.
func (iiuo *ItemIssuanceUpdateOne) SetNillableFixedAssetID(i *int) *ItemIssuanceUpdateOne {
	if i != nil {
		iiuo.SetFixedAssetID(*i)
	}
	return iiuo
}

// AddFixedAssetID adds i to the "fixed_asset_id" field.
func (iiuo *ItemIssuanceUpdateOne) AddFixedAssetID(i int) *ItemIssuanceUpdateOne {
	iiuo.mutation.AddFixedAssetID(i)
	return iiuo
}

// ClearFixedAssetID clears the value of the "fixed_asset_id" field.
func (iiuo *ItemIssuanceUpdateOne) ClearFixedAssetID() *ItemIssuanceUpdateOne {
	iiuo.mutation.ClearFixedAssetID()
	return iiuo
}

// SetMaintHistSeqID sets the "maint_hist_seq_id" field.
func (iiuo *ItemIssuanceUpdateOne) SetMaintHistSeqID(i int) *ItemIssuanceUpdateOne {
	iiuo.mutation.ResetMaintHistSeqID()
	iiuo.mutation.SetMaintHistSeqID(i)
	return iiuo
}

// SetNillableMaintHistSeqID sets the "maint_hist_seq_id" field if the given value is not nil.
func (iiuo *ItemIssuanceUpdateOne) SetNillableMaintHistSeqID(i *int) *ItemIssuanceUpdateOne {
	if i != nil {
		iiuo.SetMaintHistSeqID(*i)
	}
	return iiuo
}

// AddMaintHistSeqID adds i to the "maint_hist_seq_id" field.
func (iiuo *ItemIssuanceUpdateOne) AddMaintHistSeqID(i int) *ItemIssuanceUpdateOne {
	iiuo.mutation.AddMaintHistSeqID(i)
	return iiuo
}

// ClearMaintHistSeqID clears the value of the "maint_hist_seq_id" field.
func (iiuo *ItemIssuanceUpdateOne) ClearMaintHistSeqID() *ItemIssuanceUpdateOne {
	iiuo.mutation.ClearMaintHistSeqID()
	return iiuo
}

// SetIssuedDateTime sets the "issued_date_time" field.
func (iiuo *ItemIssuanceUpdateOne) SetIssuedDateTime(t time.Time) *ItemIssuanceUpdateOne {
	iiuo.mutation.SetIssuedDateTime(t)
	return iiuo
}

// SetNillableIssuedDateTime sets the "issued_date_time" field if the given value is not nil.
func (iiuo *ItemIssuanceUpdateOne) SetNillableIssuedDateTime(t *time.Time) *ItemIssuanceUpdateOne {
	if t != nil {
		iiuo.SetIssuedDateTime(*t)
	}
	return iiuo
}

// ClearIssuedDateTime clears the value of the "issued_date_time" field.
func (iiuo *ItemIssuanceUpdateOne) ClearIssuedDateTime() *ItemIssuanceUpdateOne {
	iiuo.mutation.ClearIssuedDateTime()
	return iiuo
}

// SetIssuedByUserLoginID sets the "issued_by_user_login_id" field.
func (iiuo *ItemIssuanceUpdateOne) SetIssuedByUserLoginID(s string) *ItemIssuanceUpdateOne {
	iiuo.mutation.SetIssuedByUserLoginID(s)
	return iiuo
}

// SetNillableIssuedByUserLoginID sets the "issued_by_user_login_id" field if the given value is not nil.
func (iiuo *ItemIssuanceUpdateOne) SetNillableIssuedByUserLoginID(s *string) *ItemIssuanceUpdateOne {
	if s != nil {
		iiuo.SetIssuedByUserLoginID(*s)
	}
	return iiuo
}

// ClearIssuedByUserLoginID clears the value of the "issued_by_user_login_id" field.
func (iiuo *ItemIssuanceUpdateOne) ClearIssuedByUserLoginID() *ItemIssuanceUpdateOne {
	iiuo.mutation.ClearIssuedByUserLoginID()
	return iiuo
}

// SetQuantity sets the "quantity" field.
func (iiuo *ItemIssuanceUpdateOne) SetQuantity(f float64) *ItemIssuanceUpdateOne {
	iiuo.mutation.ResetQuantity()
	iiuo.mutation.SetQuantity(f)
	return iiuo
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (iiuo *ItemIssuanceUpdateOne) SetNillableQuantity(f *float64) *ItemIssuanceUpdateOne {
	if f != nil {
		iiuo.SetQuantity(*f)
	}
	return iiuo
}

// AddQuantity adds f to the "quantity" field.
func (iiuo *ItemIssuanceUpdateOne) AddQuantity(f float64) *ItemIssuanceUpdateOne {
	iiuo.mutation.AddQuantity(f)
	return iiuo
}

// ClearQuantity clears the value of the "quantity" field.
func (iiuo *ItemIssuanceUpdateOne) ClearQuantity() *ItemIssuanceUpdateOne {
	iiuo.mutation.ClearQuantity()
	return iiuo
}

// SetCancelQuantity sets the "cancel_quantity" field.
func (iiuo *ItemIssuanceUpdateOne) SetCancelQuantity(f float64) *ItemIssuanceUpdateOne {
	iiuo.mutation.ResetCancelQuantity()
	iiuo.mutation.SetCancelQuantity(f)
	return iiuo
}

// SetNillableCancelQuantity sets the "cancel_quantity" field if the given value is not nil.
func (iiuo *ItemIssuanceUpdateOne) SetNillableCancelQuantity(f *float64) *ItemIssuanceUpdateOne {
	if f != nil {
		iiuo.SetCancelQuantity(*f)
	}
	return iiuo
}

// AddCancelQuantity adds f to the "cancel_quantity" field.
func (iiuo *ItemIssuanceUpdateOne) AddCancelQuantity(f float64) *ItemIssuanceUpdateOne {
	iiuo.mutation.AddCancelQuantity(f)
	return iiuo
}

// ClearCancelQuantity clears the value of the "cancel_quantity" field.
func (iiuo *ItemIssuanceUpdateOne) ClearCancelQuantity() *ItemIssuanceUpdateOne {
	iiuo.mutation.ClearCancelQuantity()
	return iiuo
}

// SetShipmentID sets the "shipment" edge to the Shipment entity by ID.
func (iiuo *ItemIssuanceUpdateOne) SetShipmentID(id int) *ItemIssuanceUpdateOne {
	iiuo.mutation.SetShipmentID(id)
	return iiuo
}

// SetNillableShipmentID sets the "shipment" edge to the Shipment entity by ID if the given value is not nil.
func (iiuo *ItemIssuanceUpdateOne) SetNillableShipmentID(id *int) *ItemIssuanceUpdateOne {
	if id != nil {
		iiuo = iiuo.SetShipmentID(*id)
	}
	return iiuo
}

// SetShipment sets the "shipment" edge to the Shipment entity.
func (iiuo *ItemIssuanceUpdateOne) SetShipment(s *Shipment) *ItemIssuanceUpdateOne {
	return iiuo.SetShipmentID(s.ID)
}

// SetShipmentItemID sets the "shipment_item" edge to the ShipmentItem entity by ID.
func (iiuo *ItemIssuanceUpdateOne) SetShipmentItemID(id int) *ItemIssuanceUpdateOne {
	iiuo.mutation.SetShipmentItemID(id)
	return iiuo
}

// SetNillableShipmentItemID sets the "shipment_item" edge to the ShipmentItem entity by ID if the given value is not nil.
func (iiuo *ItemIssuanceUpdateOne) SetNillableShipmentItemID(id *int) *ItemIssuanceUpdateOne {
	if id != nil {
		iiuo = iiuo.SetShipmentItemID(*id)
	}
	return iiuo
}

// SetShipmentItem sets the "shipment_item" edge to the ShipmentItem entity.
func (iiuo *ItemIssuanceUpdateOne) SetShipmentItem(s *ShipmentItem) *ItemIssuanceUpdateOne {
	return iiuo.SetShipmentItemID(s.ID)
}

// SetOrderHeaderID sets the "order_header" edge to the OrderHeader entity by ID.
func (iiuo *ItemIssuanceUpdateOne) SetOrderHeaderID(id int) *ItemIssuanceUpdateOne {
	iiuo.mutation.SetOrderHeaderID(id)
	return iiuo
}

// SetNillableOrderHeaderID sets the "order_header" edge to the OrderHeader entity by ID if the given value is not nil.
func (iiuo *ItemIssuanceUpdateOne) SetNillableOrderHeaderID(id *int) *ItemIssuanceUpdateOne {
	if id != nil {
		iiuo = iiuo.SetOrderHeaderID(*id)
	}
	return iiuo
}

// SetOrderHeader sets the "order_header" edge to the OrderHeader entity.
func (iiuo *ItemIssuanceUpdateOne) SetOrderHeader(o *OrderHeader) *ItemIssuanceUpdateOne {
	return iiuo.SetOrderHeaderID(o.ID)
}

// SetOrderItemID sets the "order_item" edge to the OrderItem entity by ID.
func (iiuo *ItemIssuanceUpdateOne) SetOrderItemID(id int) *ItemIssuanceUpdateOne {
	iiuo.mutation.SetOrderItemID(id)
	return iiuo
}

// SetNillableOrderItemID sets the "order_item" edge to the OrderItem entity by ID if the given value is not nil.
func (iiuo *ItemIssuanceUpdateOne) SetNillableOrderItemID(id *int) *ItemIssuanceUpdateOne {
	if id != nil {
		iiuo = iiuo.SetOrderItemID(*id)
	}
	return iiuo
}

// SetOrderItem sets the "order_item" edge to the OrderItem entity.
func (iiuo *ItemIssuanceUpdateOne) SetOrderItem(o *OrderItem) *ItemIssuanceUpdateOne {
	return iiuo.SetOrderItemID(o.ID)
}

// Mutation returns the ItemIssuanceMutation object of the builder.
func (iiuo *ItemIssuanceUpdateOne) Mutation() *ItemIssuanceMutation {
	return iiuo.mutation
}

// ClearShipment clears the "shipment" edge to the Shipment entity.
func (iiuo *ItemIssuanceUpdateOne) ClearShipment() *ItemIssuanceUpdateOne {
	iiuo.mutation.ClearShipment()
	return iiuo
}

// ClearShipmentItem clears the "shipment_item" edge to the ShipmentItem entity.
func (iiuo *ItemIssuanceUpdateOne) ClearShipmentItem() *ItemIssuanceUpdateOne {
	iiuo.mutation.ClearShipmentItem()
	return iiuo
}

// ClearOrderHeader clears the "order_header" edge to the OrderHeader entity.
func (iiuo *ItemIssuanceUpdateOne) ClearOrderHeader() *ItemIssuanceUpdateOne {
	iiuo.mutation.ClearOrderHeader()
	return iiuo
}

// ClearOrderItem clears the "order_item" edge to the OrderItem entity.
func (iiuo *ItemIssuanceUpdateOne) ClearOrderItem() *ItemIssuanceUpdateOne {
	iiuo.mutation.ClearOrderItem()
	return iiuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iiuo *ItemIssuanceUpdateOne) Select(field string, fields ...string) *ItemIssuanceUpdateOne {
	iiuo.fields = append([]string{field}, fields...)
	return iiuo
}

// Save executes the query and returns the updated ItemIssuance entity.
func (iiuo *ItemIssuanceUpdateOne) Save(ctx context.Context) (*ItemIssuance, error) {
	var (
		err  error
		node *ItemIssuance
	)
	iiuo.defaults()
	if len(iiuo.hooks) == 0 {
		node, err = iiuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ItemIssuanceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			iiuo.mutation = mutation
			node, err = iiuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(iiuo.hooks) - 1; i >= 0; i-- {
			mut = iiuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, iiuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (iiuo *ItemIssuanceUpdateOne) SaveX(ctx context.Context) *ItemIssuance {
	node, err := iiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iiuo *ItemIssuanceUpdateOne) Exec(ctx context.Context) error {
	_, err := iiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iiuo *ItemIssuanceUpdateOne) ExecX(ctx context.Context) {
	if err := iiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iiuo *ItemIssuanceUpdateOne) defaults() {
	if _, ok := iiuo.mutation.UpdateTime(); !ok {
		v := itemissuance.UpdateDefaultUpdateTime()
		iiuo.mutation.SetUpdateTime(v)
	}
}

func (iiuo *ItemIssuanceUpdateOne) sqlSave(ctx context.Context) (_node *ItemIssuance, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   itemissuance.Table,
			Columns: itemissuance.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: itemissuance.FieldID,
			},
		},
	}
	id, ok := iiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ItemIssuance.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := iiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, itemissuance.FieldID)
		for _, f := range fields {
			if !itemissuance.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != itemissuance.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iiuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: itemissuance.FieldUpdateTime,
		})
	}
	if value, ok := iiuo.mutation.OrderItemSeqID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: itemissuance.FieldOrderItemSeqID,
		})
	}
	if value, ok := iiuo.mutation.AddedOrderItemSeqID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: itemissuance.FieldOrderItemSeqID,
		})
	}
	if iiuo.mutation.OrderItemSeqIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: itemissuance.FieldOrderItemSeqID,
		})
	}
	if value, ok := iiuo.mutation.ShipGroupSeqID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: itemissuance.FieldShipGroupSeqID,
		})
	}
	if value, ok := iiuo.mutation.AddedShipGroupSeqID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: itemissuance.FieldShipGroupSeqID,
		})
	}
	if iiuo.mutation.ShipGroupSeqIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: itemissuance.FieldShipGroupSeqID,
		})
	}
	if value, ok := iiuo.mutation.InventoryItemID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: itemissuance.FieldInventoryItemID,
		})
	}
	if value, ok := iiuo.mutation.AddedInventoryItemID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: itemissuance.FieldInventoryItemID,
		})
	}
	if iiuo.mutation.InventoryItemIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: itemissuance.FieldInventoryItemID,
		})
	}
	if value, ok := iiuo.mutation.ShipmentItemSeqID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: itemissuance.FieldShipmentItemSeqID,
		})
	}
	if value, ok := iiuo.mutation.AddedShipmentItemSeqID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: itemissuance.FieldShipmentItemSeqID,
		})
	}
	if iiuo.mutation.ShipmentItemSeqIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: itemissuance.FieldShipmentItemSeqID,
		})
	}
	if value, ok := iiuo.mutation.FixedAssetID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: itemissuance.FieldFixedAssetID,
		})
	}
	if value, ok := iiuo.mutation.AddedFixedAssetID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: itemissuance.FieldFixedAssetID,
		})
	}
	if iiuo.mutation.FixedAssetIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: itemissuance.FieldFixedAssetID,
		})
	}
	if value, ok := iiuo.mutation.MaintHistSeqID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: itemissuance.FieldMaintHistSeqID,
		})
	}
	if value, ok := iiuo.mutation.AddedMaintHistSeqID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: itemissuance.FieldMaintHistSeqID,
		})
	}
	if iiuo.mutation.MaintHistSeqIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: itemissuance.FieldMaintHistSeqID,
		})
	}
	if value, ok := iiuo.mutation.IssuedDateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: itemissuance.FieldIssuedDateTime,
		})
	}
	if iiuo.mutation.IssuedDateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: itemissuance.FieldIssuedDateTime,
		})
	}
	if value, ok := iiuo.mutation.IssuedByUserLoginID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: itemissuance.FieldIssuedByUserLoginID,
		})
	}
	if iiuo.mutation.IssuedByUserLoginIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: itemissuance.FieldIssuedByUserLoginID,
		})
	}
	if value, ok := iiuo.mutation.Quantity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: itemissuance.FieldQuantity,
		})
	}
	if value, ok := iiuo.mutation.AddedQuantity(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: itemissuance.FieldQuantity,
		})
	}
	if iiuo.mutation.QuantityCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: itemissuance.FieldQuantity,
		})
	}
	if value, ok := iiuo.mutation.CancelQuantity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: itemissuance.FieldCancelQuantity,
		})
	}
	if value, ok := iiuo.mutation.AddedCancelQuantity(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: itemissuance.FieldCancelQuantity,
		})
	}
	if iiuo.mutation.CancelQuantityCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: itemissuance.FieldCancelQuantity,
		})
	}
	if iiuo.mutation.ShipmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   itemissuance.ShipmentTable,
			Columns: []string{itemissuance.ShipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iiuo.mutation.ShipmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   itemissuance.ShipmentTable,
			Columns: []string{itemissuance.ShipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iiuo.mutation.ShipmentItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   itemissuance.ShipmentItemTable,
			Columns: []string{itemissuance.ShipmentItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipmentitem.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iiuo.mutation.ShipmentItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   itemissuance.ShipmentItemTable,
			Columns: []string{itemissuance.ShipmentItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipmentitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iiuo.mutation.OrderHeaderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   itemissuance.OrderHeaderTable,
			Columns: []string{itemissuance.OrderHeaderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderheader.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iiuo.mutation.OrderHeaderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   itemissuance.OrderHeaderTable,
			Columns: []string{itemissuance.OrderHeaderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderheader.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iiuo.mutation.OrderItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   itemissuance.OrderItemTable,
			Columns: []string{itemissuance.OrderItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitem.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iiuo.mutation.OrderItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   itemissuance.OrderItemTable,
			Columns: []string{itemissuance.OrderItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ItemIssuance{config: iiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{itemissuance.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
