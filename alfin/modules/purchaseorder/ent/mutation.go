// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"
	"time"

	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/itemissuance"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/ordercontactmech"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/orderheader"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/orderitem"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/orderitempriceinfo"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/orderitemshipgroup"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/orderitemshipgroupassoc"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/orderrole"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/orderstatus"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/payment"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/predicate"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/shipment"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/shipmentitem"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeItemIssuance            = "ItemIssuance"
	TypeOrderContactMech        = "OrderContactMech"
	TypeOrderHeader             = "OrderHeader"
	TypeOrderItem               = "OrderItem"
	TypeOrderItemPriceInfo      = "OrderItemPriceInfo"
	TypeOrderItemShipGroup      = "OrderItemShipGroup"
	TypeOrderItemShipGroupAssoc = "OrderItemShipGroupAssoc"
	TypeOrderRole               = "OrderRole"
	TypeOrderStatus             = "OrderStatus"
	TypePayment                 = "Payment"
	TypeShipment                = "Shipment"
	TypeShipmentItem            = "ShipmentItem"
)

// ItemIssuanceMutation represents an operation that mutates the ItemIssuance nodes in the graph.
type ItemIssuanceMutation struct {
	config
	op                      Op
	typ                     string
	id                      *int
	create_time             *time.Time
	update_time             *time.Time
	order_item_seq_id       *int
	addorder_item_seq_id    *int
	ship_group_seq_id       *int
	addship_group_seq_id    *int
	inventory_item_id       *int
	addinventory_item_id    *int
	shipment_item_seq_id    *int
	addshipment_item_seq_id *int
	fixed_asset_id          *int
	addfixed_asset_id       *int
	maint_hist_seq_id       *int
	addmaint_hist_seq_id    *int
	issued_date_time        *time.Time
	issued_by_user_login_id *string
	quantity                *float64
	addquantity             *float64
	cancel_quantity         *float64
	addcancel_quantity      *float64
	clearedFields           map[string]struct{}
	shipment                *int
	clearedshipment         bool
	shipment_item           *int
	clearedshipment_item    bool
	order_header            *int
	clearedorder_header     bool
	order_item              *int
	clearedorder_item       bool
	done                    bool
	oldValue                func(context.Context) (*ItemIssuance, error)
	predicates              []predicate.ItemIssuance
}

var _ ent.Mutation = (*ItemIssuanceMutation)(nil)

// itemissuanceOption allows management of the mutation configuration using functional options.
type itemissuanceOption func(*ItemIssuanceMutation)

// newItemIssuanceMutation creates new mutation for the ItemIssuance entity.
func newItemIssuanceMutation(c config, op Op, opts ...itemissuanceOption) *ItemIssuanceMutation {
	m := &ItemIssuanceMutation{
		config:        c,
		op:            op,
		typ:           TypeItemIssuance,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withItemIssuanceID sets the ID field of the mutation.
func withItemIssuanceID(id int) itemissuanceOption {
	return func(m *ItemIssuanceMutation) {
		var (
			err   error
			once  sync.Once
			value *ItemIssuance
		)
		m.oldValue = func(ctx context.Context) (*ItemIssuance, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ItemIssuance.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withItemIssuance sets the old ItemIssuance of the mutation.
func withItemIssuance(node *ItemIssuance) itemissuanceOption {
	return func(m *ItemIssuanceMutation) {
		m.oldValue = func(context.Context) (*ItemIssuance, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ItemIssuanceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ItemIssuanceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *ItemIssuanceMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreateTime sets the "create_time" field.
func (m *ItemIssuanceMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *ItemIssuanceMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the ItemIssuance entity.
// If the ItemIssuance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemIssuanceMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *ItemIssuanceMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *ItemIssuanceMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *ItemIssuanceMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the ItemIssuance entity.
// If the ItemIssuance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemIssuanceMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *ItemIssuanceMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetOrderItemSeqID sets the "order_item_seq_id" field.
func (m *ItemIssuanceMutation) SetOrderItemSeqID(i int) {
	m.order_item_seq_id = &i
	m.addorder_item_seq_id = nil
}

// OrderItemSeqID returns the value of the "order_item_seq_id" field in the mutation.
func (m *ItemIssuanceMutation) OrderItemSeqID() (r int, exists bool) {
	v := m.order_item_seq_id
	if v == nil {
		return
	}
	return *v, true
}

// OldOrderItemSeqID returns the old "order_item_seq_id" field's value of the ItemIssuance entity.
// If the ItemIssuance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemIssuanceMutation) OldOrderItemSeqID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldOrderItemSeqID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldOrderItemSeqID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrderItemSeqID: %w", err)
	}
	return oldValue.OrderItemSeqID, nil
}

// AddOrderItemSeqID adds i to the "order_item_seq_id" field.
func (m *ItemIssuanceMutation) AddOrderItemSeqID(i int) {
	if m.addorder_item_seq_id != nil {
		*m.addorder_item_seq_id += i
	} else {
		m.addorder_item_seq_id = &i
	}
}

// AddedOrderItemSeqID returns the value that was added to the "order_item_seq_id" field in this mutation.
func (m *ItemIssuanceMutation) AddedOrderItemSeqID() (r int, exists bool) {
	v := m.addorder_item_seq_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearOrderItemSeqID clears the value of the "order_item_seq_id" field.
func (m *ItemIssuanceMutation) ClearOrderItemSeqID() {
	m.order_item_seq_id = nil
	m.addorder_item_seq_id = nil
	m.clearedFields[itemissuance.FieldOrderItemSeqID] = struct{}{}
}

// OrderItemSeqIDCleared returns if the "order_item_seq_id" field was cleared in this mutation.
func (m *ItemIssuanceMutation) OrderItemSeqIDCleared() bool {
	_, ok := m.clearedFields[itemissuance.FieldOrderItemSeqID]
	return ok
}

// ResetOrderItemSeqID resets all changes to the "order_item_seq_id" field.
func (m *ItemIssuanceMutation) ResetOrderItemSeqID() {
	m.order_item_seq_id = nil
	m.addorder_item_seq_id = nil
	delete(m.clearedFields, itemissuance.FieldOrderItemSeqID)
}

// SetShipGroupSeqID sets the "ship_group_seq_id" field.
func (m *ItemIssuanceMutation) SetShipGroupSeqID(i int) {
	m.ship_group_seq_id = &i
	m.addship_group_seq_id = nil
}

// ShipGroupSeqID returns the value of the "ship_group_seq_id" field in the mutation.
func (m *ItemIssuanceMutation) ShipGroupSeqID() (r int, exists bool) {
	v := m.ship_group_seq_id
	if v == nil {
		return
	}
	return *v, true
}

// OldShipGroupSeqID returns the old "ship_group_seq_id" field's value of the ItemIssuance entity.
// If the ItemIssuance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemIssuanceMutation) OldShipGroupSeqID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldShipGroupSeqID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldShipGroupSeqID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShipGroupSeqID: %w", err)
	}
	return oldValue.ShipGroupSeqID, nil
}

// AddShipGroupSeqID adds i to the "ship_group_seq_id" field.
func (m *ItemIssuanceMutation) AddShipGroupSeqID(i int) {
	if m.addship_group_seq_id != nil {
		*m.addship_group_seq_id += i
	} else {
		m.addship_group_seq_id = &i
	}
}

// AddedShipGroupSeqID returns the value that was added to the "ship_group_seq_id" field in this mutation.
func (m *ItemIssuanceMutation) AddedShipGroupSeqID() (r int, exists bool) {
	v := m.addship_group_seq_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearShipGroupSeqID clears the value of the "ship_group_seq_id" field.
func (m *ItemIssuanceMutation) ClearShipGroupSeqID() {
	m.ship_group_seq_id = nil
	m.addship_group_seq_id = nil
	m.clearedFields[itemissuance.FieldShipGroupSeqID] = struct{}{}
}

// ShipGroupSeqIDCleared returns if the "ship_group_seq_id" field was cleared in this mutation.
func (m *ItemIssuanceMutation) ShipGroupSeqIDCleared() bool {
	_, ok := m.clearedFields[itemissuance.FieldShipGroupSeqID]
	return ok
}

// ResetShipGroupSeqID resets all changes to the "ship_group_seq_id" field.
func (m *ItemIssuanceMutation) ResetShipGroupSeqID() {
	m.ship_group_seq_id = nil
	m.addship_group_seq_id = nil
	delete(m.clearedFields, itemissuance.FieldShipGroupSeqID)
}

// SetInventoryItemID sets the "inventory_item_id" field.
func (m *ItemIssuanceMutation) SetInventoryItemID(i int) {
	m.inventory_item_id = &i
	m.addinventory_item_id = nil
}

// InventoryItemID returns the value of the "inventory_item_id" field in the mutation.
func (m *ItemIssuanceMutation) InventoryItemID() (r int, exists bool) {
	v := m.inventory_item_id
	if v == nil {
		return
	}
	return *v, true
}

// OldInventoryItemID returns the old "inventory_item_id" field's value of the ItemIssuance entity.
// If the ItemIssuance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemIssuanceMutation) OldInventoryItemID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldInventoryItemID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldInventoryItemID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInventoryItemID: %w", err)
	}
	return oldValue.InventoryItemID, nil
}

// AddInventoryItemID adds i to the "inventory_item_id" field.
func (m *ItemIssuanceMutation) AddInventoryItemID(i int) {
	if m.addinventory_item_id != nil {
		*m.addinventory_item_id += i
	} else {
		m.addinventory_item_id = &i
	}
}

// AddedInventoryItemID returns the value that was added to the "inventory_item_id" field in this mutation.
func (m *ItemIssuanceMutation) AddedInventoryItemID() (r int, exists bool) {
	v := m.addinventory_item_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearInventoryItemID clears the value of the "inventory_item_id" field.
func (m *ItemIssuanceMutation) ClearInventoryItemID() {
	m.inventory_item_id = nil
	m.addinventory_item_id = nil
	m.clearedFields[itemissuance.FieldInventoryItemID] = struct{}{}
}

// InventoryItemIDCleared returns if the "inventory_item_id" field was cleared in this mutation.
func (m *ItemIssuanceMutation) InventoryItemIDCleared() bool {
	_, ok := m.clearedFields[itemissuance.FieldInventoryItemID]
	return ok
}

// ResetInventoryItemID resets all changes to the "inventory_item_id" field.
func (m *ItemIssuanceMutation) ResetInventoryItemID() {
	m.inventory_item_id = nil
	m.addinventory_item_id = nil
	delete(m.clearedFields, itemissuance.FieldInventoryItemID)
}

// SetShipmentItemSeqID sets the "shipment_item_seq_id" field.
func (m *ItemIssuanceMutation) SetShipmentItemSeqID(i int) {
	m.shipment_item_seq_id = &i
	m.addshipment_item_seq_id = nil
}

// ShipmentItemSeqID returns the value of the "shipment_item_seq_id" field in the mutation.
func (m *ItemIssuanceMutation) ShipmentItemSeqID() (r int, exists bool) {
	v := m.shipment_item_seq_id
	if v == nil {
		return
	}
	return *v, true
}

// OldShipmentItemSeqID returns the old "shipment_item_seq_id" field's value of the ItemIssuance entity.
// If the ItemIssuance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemIssuanceMutation) OldShipmentItemSeqID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldShipmentItemSeqID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldShipmentItemSeqID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShipmentItemSeqID: %w", err)
	}
	return oldValue.ShipmentItemSeqID, nil
}

// AddShipmentItemSeqID adds i to the "shipment_item_seq_id" field.
func (m *ItemIssuanceMutation) AddShipmentItemSeqID(i int) {
	if m.addshipment_item_seq_id != nil {
		*m.addshipment_item_seq_id += i
	} else {
		m.addshipment_item_seq_id = &i
	}
}

// AddedShipmentItemSeqID returns the value that was added to the "shipment_item_seq_id" field in this mutation.
func (m *ItemIssuanceMutation) AddedShipmentItemSeqID() (r int, exists bool) {
	v := m.addshipment_item_seq_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearShipmentItemSeqID clears the value of the "shipment_item_seq_id" field.
func (m *ItemIssuanceMutation) ClearShipmentItemSeqID() {
	m.shipment_item_seq_id = nil
	m.addshipment_item_seq_id = nil
	m.clearedFields[itemissuance.FieldShipmentItemSeqID] = struct{}{}
}

// ShipmentItemSeqIDCleared returns if the "shipment_item_seq_id" field was cleared in this mutation.
func (m *ItemIssuanceMutation) ShipmentItemSeqIDCleared() bool {
	_, ok := m.clearedFields[itemissuance.FieldShipmentItemSeqID]
	return ok
}

// ResetShipmentItemSeqID resets all changes to the "shipment_item_seq_id" field.
func (m *ItemIssuanceMutation) ResetShipmentItemSeqID() {
	m.shipment_item_seq_id = nil
	m.addshipment_item_seq_id = nil
	delete(m.clearedFields, itemissuance.FieldShipmentItemSeqID)
}

// SetFixedAssetID sets the "fixed_asset_id" field.
func (m *ItemIssuanceMutation) SetFixedAssetID(i int) {
	m.fixed_asset_id = &i
	m.addfixed_asset_id = nil
}

// FixedAssetID returns the value of the "fixed_asset_id" field in the mutation.
func (m *ItemIssuanceMutation) FixedAssetID() (r int, exists bool) {
	v := m.fixed_asset_id
	if v == nil {
		return
	}
	return *v, true
}

// OldFixedAssetID returns the old "fixed_asset_id" field's value of the ItemIssuance entity.
// If the ItemIssuance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemIssuanceMutation) OldFixedAssetID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldFixedAssetID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldFixedAssetID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFixedAssetID: %w", err)
	}
	return oldValue.FixedAssetID, nil
}

// AddFixedAssetID adds i to the "fixed_asset_id" field.
func (m *ItemIssuanceMutation) AddFixedAssetID(i int) {
	if m.addfixed_asset_id != nil {
		*m.addfixed_asset_id += i
	} else {
		m.addfixed_asset_id = &i
	}
}

// AddedFixedAssetID returns the value that was added to the "fixed_asset_id" field in this mutation.
func (m *ItemIssuanceMutation) AddedFixedAssetID() (r int, exists bool) {
	v := m.addfixed_asset_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearFixedAssetID clears the value of the "fixed_asset_id" field.
func (m *ItemIssuanceMutation) ClearFixedAssetID() {
	m.fixed_asset_id = nil
	m.addfixed_asset_id = nil
	m.clearedFields[itemissuance.FieldFixedAssetID] = struct{}{}
}

// FixedAssetIDCleared returns if the "fixed_asset_id" field was cleared in this mutation.
func (m *ItemIssuanceMutation) FixedAssetIDCleared() bool {
	_, ok := m.clearedFields[itemissuance.FieldFixedAssetID]
	return ok
}

// ResetFixedAssetID resets all changes to the "fixed_asset_id" field.
func (m *ItemIssuanceMutation) ResetFixedAssetID() {
	m.fixed_asset_id = nil
	m.addfixed_asset_id = nil
	delete(m.clearedFields, itemissuance.FieldFixedAssetID)
}

// SetMaintHistSeqID sets the "maint_hist_seq_id" field.
func (m *ItemIssuanceMutation) SetMaintHistSeqID(i int) {
	m.maint_hist_seq_id = &i
	m.addmaint_hist_seq_id = nil
}

// MaintHistSeqID returns the value of the "maint_hist_seq_id" field in the mutation.
func (m *ItemIssuanceMutation) MaintHistSeqID() (r int, exists bool) {
	v := m.maint_hist_seq_id
	if v == nil {
		return
	}
	return *v, true
}

// OldMaintHistSeqID returns the old "maint_hist_seq_id" field's value of the ItemIssuance entity.
// If the ItemIssuance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemIssuanceMutation) OldMaintHistSeqID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldMaintHistSeqID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldMaintHistSeqID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMaintHistSeqID: %w", err)
	}
	return oldValue.MaintHistSeqID, nil
}

// AddMaintHistSeqID adds i to the "maint_hist_seq_id" field.
func (m *ItemIssuanceMutation) AddMaintHistSeqID(i int) {
	if m.addmaint_hist_seq_id != nil {
		*m.addmaint_hist_seq_id += i
	} else {
		m.addmaint_hist_seq_id = &i
	}
}

// AddedMaintHistSeqID returns the value that was added to the "maint_hist_seq_id" field in this mutation.
func (m *ItemIssuanceMutation) AddedMaintHistSeqID() (r int, exists bool) {
	v := m.addmaint_hist_seq_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearMaintHistSeqID clears the value of the "maint_hist_seq_id" field.
func (m *ItemIssuanceMutation) ClearMaintHistSeqID() {
	m.maint_hist_seq_id = nil
	m.addmaint_hist_seq_id = nil
	m.clearedFields[itemissuance.FieldMaintHistSeqID] = struct{}{}
}

// MaintHistSeqIDCleared returns if the "maint_hist_seq_id" field was cleared in this mutation.
func (m *ItemIssuanceMutation) MaintHistSeqIDCleared() bool {
	_, ok := m.clearedFields[itemissuance.FieldMaintHistSeqID]
	return ok
}

// ResetMaintHistSeqID resets all changes to the "maint_hist_seq_id" field.
func (m *ItemIssuanceMutation) ResetMaintHistSeqID() {
	m.maint_hist_seq_id = nil
	m.addmaint_hist_seq_id = nil
	delete(m.clearedFields, itemissuance.FieldMaintHistSeqID)
}

// SetIssuedDateTime sets the "issued_date_time" field.
func (m *ItemIssuanceMutation) SetIssuedDateTime(t time.Time) {
	m.issued_date_time = &t
}

// IssuedDateTime returns the value of the "issued_date_time" field in the mutation.
func (m *ItemIssuanceMutation) IssuedDateTime() (r time.Time, exists bool) {
	v := m.issued_date_time
	if v == nil {
		return
	}
	return *v, true
}

// OldIssuedDateTime returns the old "issued_date_time" field's value of the ItemIssuance entity.
// If the ItemIssuance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemIssuanceMutation) OldIssuedDateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldIssuedDateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldIssuedDateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIssuedDateTime: %w", err)
	}
	return oldValue.IssuedDateTime, nil
}

// ClearIssuedDateTime clears the value of the "issued_date_time" field.
func (m *ItemIssuanceMutation) ClearIssuedDateTime() {
	m.issued_date_time = nil
	m.clearedFields[itemissuance.FieldIssuedDateTime] = struct{}{}
}

// IssuedDateTimeCleared returns if the "issued_date_time" field was cleared in this mutation.
func (m *ItemIssuanceMutation) IssuedDateTimeCleared() bool {
	_, ok := m.clearedFields[itemissuance.FieldIssuedDateTime]
	return ok
}

// ResetIssuedDateTime resets all changes to the "issued_date_time" field.
func (m *ItemIssuanceMutation) ResetIssuedDateTime() {
	m.issued_date_time = nil
	delete(m.clearedFields, itemissuance.FieldIssuedDateTime)
}

// SetIssuedByUserLoginID sets the "issued_by_user_login_id" field.
func (m *ItemIssuanceMutation) SetIssuedByUserLoginID(s string) {
	m.issued_by_user_login_id = &s
}

// IssuedByUserLoginID returns the value of the "issued_by_user_login_id" field in the mutation.
func (m *ItemIssuanceMutation) IssuedByUserLoginID() (r string, exists bool) {
	v := m.issued_by_user_login_id
	if v == nil {
		return
	}
	return *v, true
}

// OldIssuedByUserLoginID returns the old "issued_by_user_login_id" field's value of the ItemIssuance entity.
// If the ItemIssuance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemIssuanceMutation) OldIssuedByUserLoginID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldIssuedByUserLoginID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldIssuedByUserLoginID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIssuedByUserLoginID: %w", err)
	}
	return oldValue.IssuedByUserLoginID, nil
}

// ClearIssuedByUserLoginID clears the value of the "issued_by_user_login_id" field.
func (m *ItemIssuanceMutation) ClearIssuedByUserLoginID() {
	m.issued_by_user_login_id = nil
	m.clearedFields[itemissuance.FieldIssuedByUserLoginID] = struct{}{}
}

// IssuedByUserLoginIDCleared returns if the "issued_by_user_login_id" field was cleared in this mutation.
func (m *ItemIssuanceMutation) IssuedByUserLoginIDCleared() bool {
	_, ok := m.clearedFields[itemissuance.FieldIssuedByUserLoginID]
	return ok
}

// ResetIssuedByUserLoginID resets all changes to the "issued_by_user_login_id" field.
func (m *ItemIssuanceMutation) ResetIssuedByUserLoginID() {
	m.issued_by_user_login_id = nil
	delete(m.clearedFields, itemissuance.FieldIssuedByUserLoginID)
}

// SetQuantity sets the "quantity" field.
func (m *ItemIssuanceMutation) SetQuantity(f float64) {
	m.quantity = &f
	m.addquantity = nil
}

// Quantity returns the value of the "quantity" field in the mutation.
func (m *ItemIssuanceMutation) Quantity() (r float64, exists bool) {
	v := m.quantity
	if v == nil {
		return
	}
	return *v, true
}

// OldQuantity returns the old "quantity" field's value of the ItemIssuance entity.
// If the ItemIssuance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemIssuanceMutation) OldQuantity(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldQuantity is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldQuantity requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldQuantity: %w", err)
	}
	return oldValue.Quantity, nil
}

// AddQuantity adds f to the "quantity" field.
func (m *ItemIssuanceMutation) AddQuantity(f float64) {
	if m.addquantity != nil {
		*m.addquantity += f
	} else {
		m.addquantity = &f
	}
}

// AddedQuantity returns the value that was added to the "quantity" field in this mutation.
func (m *ItemIssuanceMutation) AddedQuantity() (r float64, exists bool) {
	v := m.addquantity
	if v == nil {
		return
	}
	return *v, true
}

// ClearQuantity clears the value of the "quantity" field.
func (m *ItemIssuanceMutation) ClearQuantity() {
	m.quantity = nil
	m.addquantity = nil
	m.clearedFields[itemissuance.FieldQuantity] = struct{}{}
}

// QuantityCleared returns if the "quantity" field was cleared in this mutation.
func (m *ItemIssuanceMutation) QuantityCleared() bool {
	_, ok := m.clearedFields[itemissuance.FieldQuantity]
	return ok
}

// ResetQuantity resets all changes to the "quantity" field.
func (m *ItemIssuanceMutation) ResetQuantity() {
	m.quantity = nil
	m.addquantity = nil
	delete(m.clearedFields, itemissuance.FieldQuantity)
}

// SetCancelQuantity sets the "cancel_quantity" field.
func (m *ItemIssuanceMutation) SetCancelQuantity(f float64) {
	m.cancel_quantity = &f
	m.addcancel_quantity = nil
}

// CancelQuantity returns the value of the "cancel_quantity" field in the mutation.
func (m *ItemIssuanceMutation) CancelQuantity() (r float64, exists bool) {
	v := m.cancel_quantity
	if v == nil {
		return
	}
	return *v, true
}

// OldCancelQuantity returns the old "cancel_quantity" field's value of the ItemIssuance entity.
// If the ItemIssuance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemIssuanceMutation) OldCancelQuantity(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCancelQuantity is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCancelQuantity requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCancelQuantity: %w", err)
	}
	return oldValue.CancelQuantity, nil
}

// AddCancelQuantity adds f to the "cancel_quantity" field.
func (m *ItemIssuanceMutation) AddCancelQuantity(f float64) {
	if m.addcancel_quantity != nil {
		*m.addcancel_quantity += f
	} else {
		m.addcancel_quantity = &f
	}
}

// AddedCancelQuantity returns the value that was added to the "cancel_quantity" field in this mutation.
func (m *ItemIssuanceMutation) AddedCancelQuantity() (r float64, exists bool) {
	v := m.addcancel_quantity
	if v == nil {
		return
	}
	return *v, true
}

// ClearCancelQuantity clears the value of the "cancel_quantity" field.
func (m *ItemIssuanceMutation) ClearCancelQuantity() {
	m.cancel_quantity = nil
	m.addcancel_quantity = nil
	m.clearedFields[itemissuance.FieldCancelQuantity] = struct{}{}
}

// CancelQuantityCleared returns if the "cancel_quantity" field was cleared in this mutation.
func (m *ItemIssuanceMutation) CancelQuantityCleared() bool {
	_, ok := m.clearedFields[itemissuance.FieldCancelQuantity]
	return ok
}

// ResetCancelQuantity resets all changes to the "cancel_quantity" field.
func (m *ItemIssuanceMutation) ResetCancelQuantity() {
	m.cancel_quantity = nil
	m.addcancel_quantity = nil
	delete(m.clearedFields, itemissuance.FieldCancelQuantity)
}

// SetShipmentID sets the "shipment" edge to the Shipment entity by id.
func (m *ItemIssuanceMutation) SetShipmentID(id int) {
	m.shipment = &id
}

// ClearShipment clears the "shipment" edge to the Shipment entity.
func (m *ItemIssuanceMutation) ClearShipment() {
	m.clearedshipment = true
}

// ShipmentCleared reports if the "shipment" edge to the Shipment entity was cleared.
func (m *ItemIssuanceMutation) ShipmentCleared() bool {
	return m.clearedshipment
}

// ShipmentID returns the "shipment" edge ID in the mutation.
func (m *ItemIssuanceMutation) ShipmentID() (id int, exists bool) {
	if m.shipment != nil {
		return *m.shipment, true
	}
	return
}

// ShipmentIDs returns the "shipment" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ShipmentID instead. It exists only for internal usage by the builders.
func (m *ItemIssuanceMutation) ShipmentIDs() (ids []int) {
	if id := m.shipment; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetShipment resets all changes to the "shipment" edge.
func (m *ItemIssuanceMutation) ResetShipment() {
	m.shipment = nil
	m.clearedshipment = false
}

// SetShipmentItemID sets the "shipment_item" edge to the ShipmentItem entity by id.
func (m *ItemIssuanceMutation) SetShipmentItemID(id int) {
	m.shipment_item = &id
}

// ClearShipmentItem clears the "shipment_item" edge to the ShipmentItem entity.
func (m *ItemIssuanceMutation) ClearShipmentItem() {
	m.clearedshipment_item = true
}

// ShipmentItemCleared reports if the "shipment_item" edge to the ShipmentItem entity was cleared.
func (m *ItemIssuanceMutation) ShipmentItemCleared() bool {
	return m.clearedshipment_item
}

// ShipmentItemID returns the "shipment_item" edge ID in the mutation.
func (m *ItemIssuanceMutation) ShipmentItemID() (id int, exists bool) {
	if m.shipment_item != nil {
		return *m.shipment_item, true
	}
	return
}

// ShipmentItemIDs returns the "shipment_item" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ShipmentItemID instead. It exists only for internal usage by the builders.
func (m *ItemIssuanceMutation) ShipmentItemIDs() (ids []int) {
	if id := m.shipment_item; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetShipmentItem resets all changes to the "shipment_item" edge.
func (m *ItemIssuanceMutation) ResetShipmentItem() {
	m.shipment_item = nil
	m.clearedshipment_item = false
}

// SetOrderHeaderID sets the "order_header" edge to the OrderHeader entity by id.
func (m *ItemIssuanceMutation) SetOrderHeaderID(id int) {
	m.order_header = &id
}

// ClearOrderHeader clears the "order_header" edge to the OrderHeader entity.
func (m *ItemIssuanceMutation) ClearOrderHeader() {
	m.clearedorder_header = true
}

// OrderHeaderCleared reports if the "order_header" edge to the OrderHeader entity was cleared.
func (m *ItemIssuanceMutation) OrderHeaderCleared() bool {
	return m.clearedorder_header
}

// OrderHeaderID returns the "order_header" edge ID in the mutation.
func (m *ItemIssuanceMutation) OrderHeaderID() (id int, exists bool) {
	if m.order_header != nil {
		return *m.order_header, true
	}
	return
}

// OrderHeaderIDs returns the "order_header" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OrderHeaderID instead. It exists only for internal usage by the builders.
func (m *ItemIssuanceMutation) OrderHeaderIDs() (ids []int) {
	if id := m.order_header; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOrderHeader resets all changes to the "order_header" edge.
func (m *ItemIssuanceMutation) ResetOrderHeader() {
	m.order_header = nil
	m.clearedorder_header = false
}

// SetOrderItemID sets the "order_item" edge to the OrderItem entity by id.
func (m *ItemIssuanceMutation) SetOrderItemID(id int) {
	m.order_item = &id
}

// ClearOrderItem clears the "order_item" edge to the OrderItem entity.
func (m *ItemIssuanceMutation) ClearOrderItem() {
	m.clearedorder_item = true
}

// OrderItemCleared reports if the "order_item" edge to the OrderItem entity was cleared.
func (m *ItemIssuanceMutation) OrderItemCleared() bool {
	return m.clearedorder_item
}

// OrderItemID returns the "order_item" edge ID in the mutation.
func (m *ItemIssuanceMutation) OrderItemID() (id int, exists bool) {
	if m.order_item != nil {
		return *m.order_item, true
	}
	return
}

// OrderItemIDs returns the "order_item" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OrderItemID instead. It exists only for internal usage by the builders.
func (m *ItemIssuanceMutation) OrderItemIDs() (ids []int) {
	if id := m.order_item; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOrderItem resets all changes to the "order_item" edge.
func (m *ItemIssuanceMutation) ResetOrderItem() {
	m.order_item = nil
	m.clearedorder_item = false
}

// Op returns the operation name.
func (m *ItemIssuanceMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (ItemIssuance).
func (m *ItemIssuanceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ItemIssuanceMutation) Fields() []string {
	fields := make([]string, 0, 12)
	if m.create_time != nil {
		fields = append(fields, itemissuance.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, itemissuance.FieldUpdateTime)
	}
	if m.order_item_seq_id != nil {
		fields = append(fields, itemissuance.FieldOrderItemSeqID)
	}
	if m.ship_group_seq_id != nil {
		fields = append(fields, itemissuance.FieldShipGroupSeqID)
	}
	if m.inventory_item_id != nil {
		fields = append(fields, itemissuance.FieldInventoryItemID)
	}
	if m.shipment_item_seq_id != nil {
		fields = append(fields, itemissuance.FieldShipmentItemSeqID)
	}
	if m.fixed_asset_id != nil {
		fields = append(fields, itemissuance.FieldFixedAssetID)
	}
	if m.maint_hist_seq_id != nil {
		fields = append(fields, itemissuance.FieldMaintHistSeqID)
	}
	if m.issued_date_time != nil {
		fields = append(fields, itemissuance.FieldIssuedDateTime)
	}
	if m.issued_by_user_login_id != nil {
		fields = append(fields, itemissuance.FieldIssuedByUserLoginID)
	}
	if m.quantity != nil {
		fields = append(fields, itemissuance.FieldQuantity)
	}
	if m.cancel_quantity != nil {
		fields = append(fields, itemissuance.FieldCancelQuantity)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ItemIssuanceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case itemissuance.FieldCreateTime:
		return m.CreateTime()
	case itemissuance.FieldUpdateTime:
		return m.UpdateTime()
	case itemissuance.FieldOrderItemSeqID:
		return m.OrderItemSeqID()
	case itemissuance.FieldShipGroupSeqID:
		return m.ShipGroupSeqID()
	case itemissuance.FieldInventoryItemID:
		return m.InventoryItemID()
	case itemissuance.FieldShipmentItemSeqID:
		return m.ShipmentItemSeqID()
	case itemissuance.FieldFixedAssetID:
		return m.FixedAssetID()
	case itemissuance.FieldMaintHistSeqID:
		return m.MaintHistSeqID()
	case itemissuance.FieldIssuedDateTime:
		return m.IssuedDateTime()
	case itemissuance.FieldIssuedByUserLoginID:
		return m.IssuedByUserLoginID()
	case itemissuance.FieldQuantity:
		return m.Quantity()
	case itemissuance.FieldCancelQuantity:
		return m.CancelQuantity()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ItemIssuanceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case itemissuance.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case itemissuance.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case itemissuance.FieldOrderItemSeqID:
		return m.OldOrderItemSeqID(ctx)
	case itemissuance.FieldShipGroupSeqID:
		return m.OldShipGroupSeqID(ctx)
	case itemissuance.FieldInventoryItemID:
		return m.OldInventoryItemID(ctx)
	case itemissuance.FieldShipmentItemSeqID:
		return m.OldShipmentItemSeqID(ctx)
	case itemissuance.FieldFixedAssetID:
		return m.OldFixedAssetID(ctx)
	case itemissuance.FieldMaintHistSeqID:
		return m.OldMaintHistSeqID(ctx)
	case itemissuance.FieldIssuedDateTime:
		return m.OldIssuedDateTime(ctx)
	case itemissuance.FieldIssuedByUserLoginID:
		return m.OldIssuedByUserLoginID(ctx)
	case itemissuance.FieldQuantity:
		return m.OldQuantity(ctx)
	case itemissuance.FieldCancelQuantity:
		return m.OldCancelQuantity(ctx)
	}
	return nil, fmt.Errorf("unknown ItemIssuance field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ItemIssuanceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case itemissuance.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case itemissuance.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case itemissuance.FieldOrderItemSeqID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrderItemSeqID(v)
		return nil
	case itemissuance.FieldShipGroupSeqID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShipGroupSeqID(v)
		return nil
	case itemissuance.FieldInventoryItemID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInventoryItemID(v)
		return nil
	case itemissuance.FieldShipmentItemSeqID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShipmentItemSeqID(v)
		return nil
	case itemissuance.FieldFixedAssetID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFixedAssetID(v)
		return nil
	case itemissuance.FieldMaintHistSeqID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMaintHistSeqID(v)
		return nil
	case itemissuance.FieldIssuedDateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIssuedDateTime(v)
		return nil
	case itemissuance.FieldIssuedByUserLoginID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIssuedByUserLoginID(v)
		return nil
	case itemissuance.FieldQuantity:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetQuantity(v)
		return nil
	case itemissuance.FieldCancelQuantity:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCancelQuantity(v)
		return nil
	}
	return fmt.Errorf("unknown ItemIssuance field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ItemIssuanceMutation) AddedFields() []string {
	var fields []string
	if m.addorder_item_seq_id != nil {
		fields = append(fields, itemissuance.FieldOrderItemSeqID)
	}
	if m.addship_group_seq_id != nil {
		fields = append(fields, itemissuance.FieldShipGroupSeqID)
	}
	if m.addinventory_item_id != nil {
		fields = append(fields, itemissuance.FieldInventoryItemID)
	}
	if m.addshipment_item_seq_id != nil {
		fields = append(fields, itemissuance.FieldShipmentItemSeqID)
	}
	if m.addfixed_asset_id != nil {
		fields = append(fields, itemissuance.FieldFixedAssetID)
	}
	if m.addmaint_hist_seq_id != nil {
		fields = append(fields, itemissuance.FieldMaintHistSeqID)
	}
	if m.addquantity != nil {
		fields = append(fields, itemissuance.FieldQuantity)
	}
	if m.addcancel_quantity != nil {
		fields = append(fields, itemissuance.FieldCancelQuantity)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ItemIssuanceMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case itemissuance.FieldOrderItemSeqID:
		return m.AddedOrderItemSeqID()
	case itemissuance.FieldShipGroupSeqID:
		return m.AddedShipGroupSeqID()
	case itemissuance.FieldInventoryItemID:
		return m.AddedInventoryItemID()
	case itemissuance.FieldShipmentItemSeqID:
		return m.AddedShipmentItemSeqID()
	case itemissuance.FieldFixedAssetID:
		return m.AddedFixedAssetID()
	case itemissuance.FieldMaintHistSeqID:
		return m.AddedMaintHistSeqID()
	case itemissuance.FieldQuantity:
		return m.AddedQuantity()
	case itemissuance.FieldCancelQuantity:
		return m.AddedCancelQuantity()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ItemIssuanceMutation) AddField(name string, value ent.Value) error {
	switch name {
	case itemissuance.FieldOrderItemSeqID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOrderItemSeqID(v)
		return nil
	case itemissuance.FieldShipGroupSeqID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddShipGroupSeqID(v)
		return nil
	case itemissuance.FieldInventoryItemID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddInventoryItemID(v)
		return nil
	case itemissuance.FieldShipmentItemSeqID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddShipmentItemSeqID(v)
		return nil
	case itemissuance.FieldFixedAssetID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddFixedAssetID(v)
		return nil
	case itemissuance.FieldMaintHistSeqID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMaintHistSeqID(v)
		return nil
	case itemissuance.FieldQuantity:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddQuantity(v)
		return nil
	case itemissuance.FieldCancelQuantity:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCancelQuantity(v)
		return nil
	}
	return fmt.Errorf("unknown ItemIssuance numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ItemIssuanceMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(itemissuance.FieldOrderItemSeqID) {
		fields = append(fields, itemissuance.FieldOrderItemSeqID)
	}
	if m.FieldCleared(itemissuance.FieldShipGroupSeqID) {
		fields = append(fields, itemissuance.FieldShipGroupSeqID)
	}
	if m.FieldCleared(itemissuance.FieldInventoryItemID) {
		fields = append(fields, itemissuance.FieldInventoryItemID)
	}
	if m.FieldCleared(itemissuance.FieldShipmentItemSeqID) {
		fields = append(fields, itemissuance.FieldShipmentItemSeqID)
	}
	if m.FieldCleared(itemissuance.FieldFixedAssetID) {
		fields = append(fields, itemissuance.FieldFixedAssetID)
	}
	if m.FieldCleared(itemissuance.FieldMaintHistSeqID) {
		fields = append(fields, itemissuance.FieldMaintHistSeqID)
	}
	if m.FieldCleared(itemissuance.FieldIssuedDateTime) {
		fields = append(fields, itemissuance.FieldIssuedDateTime)
	}
	if m.FieldCleared(itemissuance.FieldIssuedByUserLoginID) {
		fields = append(fields, itemissuance.FieldIssuedByUserLoginID)
	}
	if m.FieldCleared(itemissuance.FieldQuantity) {
		fields = append(fields, itemissuance.FieldQuantity)
	}
	if m.FieldCleared(itemissuance.FieldCancelQuantity) {
		fields = append(fields, itemissuance.FieldCancelQuantity)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ItemIssuanceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ItemIssuanceMutation) ClearField(name string) error {
	switch name {
	case itemissuance.FieldOrderItemSeqID:
		m.ClearOrderItemSeqID()
		return nil
	case itemissuance.FieldShipGroupSeqID:
		m.ClearShipGroupSeqID()
		return nil
	case itemissuance.FieldInventoryItemID:
		m.ClearInventoryItemID()
		return nil
	case itemissuance.FieldShipmentItemSeqID:
		m.ClearShipmentItemSeqID()
		return nil
	case itemissuance.FieldFixedAssetID:
		m.ClearFixedAssetID()
		return nil
	case itemissuance.FieldMaintHistSeqID:
		m.ClearMaintHistSeqID()
		return nil
	case itemissuance.FieldIssuedDateTime:
		m.ClearIssuedDateTime()
		return nil
	case itemissuance.FieldIssuedByUserLoginID:
		m.ClearIssuedByUserLoginID()
		return nil
	case itemissuance.FieldQuantity:
		m.ClearQuantity()
		return nil
	case itemissuance.FieldCancelQuantity:
		m.ClearCancelQuantity()
		return nil
	}
	return fmt.Errorf("unknown ItemIssuance nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ItemIssuanceMutation) ResetField(name string) error {
	switch name {
	case itemissuance.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case itemissuance.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case itemissuance.FieldOrderItemSeqID:
		m.ResetOrderItemSeqID()
		return nil
	case itemissuance.FieldShipGroupSeqID:
		m.ResetShipGroupSeqID()
		return nil
	case itemissuance.FieldInventoryItemID:
		m.ResetInventoryItemID()
		return nil
	case itemissuance.FieldShipmentItemSeqID:
		m.ResetShipmentItemSeqID()
		return nil
	case itemissuance.FieldFixedAssetID:
		m.ResetFixedAssetID()
		return nil
	case itemissuance.FieldMaintHistSeqID:
		m.ResetMaintHistSeqID()
		return nil
	case itemissuance.FieldIssuedDateTime:
		m.ResetIssuedDateTime()
		return nil
	case itemissuance.FieldIssuedByUserLoginID:
		m.ResetIssuedByUserLoginID()
		return nil
	case itemissuance.FieldQuantity:
		m.ResetQuantity()
		return nil
	case itemissuance.FieldCancelQuantity:
		m.ResetCancelQuantity()
		return nil
	}
	return fmt.Errorf("unknown ItemIssuance field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ItemIssuanceMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.shipment != nil {
		edges = append(edges, itemissuance.EdgeShipment)
	}
	if m.shipment_item != nil {
		edges = append(edges, itemissuance.EdgeShipmentItem)
	}
	if m.order_header != nil {
		edges = append(edges, itemissuance.EdgeOrderHeader)
	}
	if m.order_item != nil {
		edges = append(edges, itemissuance.EdgeOrderItem)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ItemIssuanceMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case itemissuance.EdgeShipment:
		if id := m.shipment; id != nil {
			return []ent.Value{*id}
		}
	case itemissuance.EdgeShipmentItem:
		if id := m.shipment_item; id != nil {
			return []ent.Value{*id}
		}
	case itemissuance.EdgeOrderHeader:
		if id := m.order_header; id != nil {
			return []ent.Value{*id}
		}
	case itemissuance.EdgeOrderItem:
		if id := m.order_item; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ItemIssuanceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ItemIssuanceMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ItemIssuanceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedshipment {
		edges = append(edges, itemissuance.EdgeShipment)
	}
	if m.clearedshipment_item {
		edges = append(edges, itemissuance.EdgeShipmentItem)
	}
	if m.clearedorder_header {
		edges = append(edges, itemissuance.EdgeOrderHeader)
	}
	if m.clearedorder_item {
		edges = append(edges, itemissuance.EdgeOrderItem)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ItemIssuanceMutation) EdgeCleared(name string) bool {
	switch name {
	case itemissuance.EdgeShipment:
		return m.clearedshipment
	case itemissuance.EdgeShipmentItem:
		return m.clearedshipment_item
	case itemissuance.EdgeOrderHeader:
		return m.clearedorder_header
	case itemissuance.EdgeOrderItem:
		return m.clearedorder_item
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ItemIssuanceMutation) ClearEdge(name string) error {
	switch name {
	case itemissuance.EdgeShipment:
		m.ClearShipment()
		return nil
	case itemissuance.EdgeShipmentItem:
		m.ClearShipmentItem()
		return nil
	case itemissuance.EdgeOrderHeader:
		m.ClearOrderHeader()
		return nil
	case itemissuance.EdgeOrderItem:
		m.ClearOrderItem()
		return nil
	}
	return fmt.Errorf("unknown ItemIssuance unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ItemIssuanceMutation) ResetEdge(name string) error {
	switch name {
	case itemissuance.EdgeShipment:
		m.ResetShipment()
		return nil
	case itemissuance.EdgeShipmentItem:
		m.ResetShipmentItem()
		return nil
	case itemissuance.EdgeOrderHeader:
		m.ResetOrderHeader()
		return nil
	case itemissuance.EdgeOrderItem:
		m.ResetOrderItem()
		return nil
	}
	return fmt.Errorf("unknown ItemIssuance edge %s", name)
}

// OrderContactMechMutation represents an operation that mutates the OrderContactMech nodes in the graph.
type OrderContactMechMutation struct {
	config
	op                              Op
	typ                             string
	id                              *int
	create_time                     *time.Time
	update_time                     *time.Time
	contact_mech_purpose_type_id    *int
	addcontact_mech_purpose_type_id *int
	contact_mech_id                 *int
	addcontact_mech_id              *int
	clearedFields                   map[string]struct{}
	order_header                    *int
	clearedorder_header             bool
	done                            bool
	oldValue                        func(context.Context) (*OrderContactMech, error)
	predicates                      []predicate.OrderContactMech
}

var _ ent.Mutation = (*OrderContactMechMutation)(nil)

// ordercontactmechOption allows management of the mutation configuration using functional options.
type ordercontactmechOption func(*OrderContactMechMutation)

// newOrderContactMechMutation creates new mutation for the OrderContactMech entity.
func newOrderContactMechMutation(c config, op Op, opts ...ordercontactmechOption) *OrderContactMechMutation {
	m := &OrderContactMechMutation{
		config:        c,
		op:            op,
		typ:           TypeOrderContactMech,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withOrderContactMechID sets the ID field of the mutation.
func withOrderContactMechID(id int) ordercontactmechOption {
	return func(m *OrderContactMechMutation) {
		var (
			err   error
			once  sync.Once
			value *OrderContactMech
		)
		m.oldValue = func(ctx context.Context) (*OrderContactMech, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().OrderContactMech.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withOrderContactMech sets the old OrderContactMech of the mutation.
func withOrderContactMech(node *OrderContactMech) ordercontactmechOption {
	return func(m *OrderContactMechMutation) {
		m.oldValue = func(context.Context) (*OrderContactMech, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m OrderContactMechMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m OrderContactMechMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *OrderContactMechMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreateTime sets the "create_time" field.
func (m *OrderContactMechMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *OrderContactMechMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the OrderContactMech entity.
// If the OrderContactMech object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderContactMechMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *OrderContactMechMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *OrderContactMechMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *OrderContactMechMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the OrderContactMech entity.
// If the OrderContactMech object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderContactMechMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *OrderContactMechMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetContactMechPurposeTypeID sets the "contact_mech_purpose_type_id" field.
func (m *OrderContactMechMutation) SetContactMechPurposeTypeID(i int) {
	m.contact_mech_purpose_type_id = &i
	m.addcontact_mech_purpose_type_id = nil
}

// ContactMechPurposeTypeID returns the value of the "contact_mech_purpose_type_id" field in the mutation.
func (m *OrderContactMechMutation) ContactMechPurposeTypeID() (r int, exists bool) {
	v := m.contact_mech_purpose_type_id
	if v == nil {
		return
	}
	return *v, true
}

// OldContactMechPurposeTypeID returns the old "contact_mech_purpose_type_id" field's value of the OrderContactMech entity.
// If the OrderContactMech object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderContactMechMutation) OldContactMechPurposeTypeID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldContactMechPurposeTypeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldContactMechPurposeTypeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContactMechPurposeTypeID: %w", err)
	}
	return oldValue.ContactMechPurposeTypeID, nil
}

// AddContactMechPurposeTypeID adds i to the "contact_mech_purpose_type_id" field.
func (m *OrderContactMechMutation) AddContactMechPurposeTypeID(i int) {
	if m.addcontact_mech_purpose_type_id != nil {
		*m.addcontact_mech_purpose_type_id += i
	} else {
		m.addcontact_mech_purpose_type_id = &i
	}
}

// AddedContactMechPurposeTypeID returns the value that was added to the "contact_mech_purpose_type_id" field in this mutation.
func (m *OrderContactMechMutation) AddedContactMechPurposeTypeID() (r int, exists bool) {
	v := m.addcontact_mech_purpose_type_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetContactMechPurposeTypeID resets all changes to the "contact_mech_purpose_type_id" field.
func (m *OrderContactMechMutation) ResetContactMechPurposeTypeID() {
	m.contact_mech_purpose_type_id = nil
	m.addcontact_mech_purpose_type_id = nil
}

// SetContactMechID sets the "contact_mech_id" field.
func (m *OrderContactMechMutation) SetContactMechID(i int) {
	m.contact_mech_id = &i
	m.addcontact_mech_id = nil
}

// ContactMechID returns the value of the "contact_mech_id" field in the mutation.
func (m *OrderContactMechMutation) ContactMechID() (r int, exists bool) {
	v := m.contact_mech_id
	if v == nil {
		return
	}
	return *v, true
}

// OldContactMechID returns the old "contact_mech_id" field's value of the OrderContactMech entity.
// If the OrderContactMech object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderContactMechMutation) OldContactMechID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldContactMechID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldContactMechID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContactMechID: %w", err)
	}
	return oldValue.ContactMechID, nil
}

// AddContactMechID adds i to the "contact_mech_id" field.
func (m *OrderContactMechMutation) AddContactMechID(i int) {
	if m.addcontact_mech_id != nil {
		*m.addcontact_mech_id += i
	} else {
		m.addcontact_mech_id = &i
	}
}

// AddedContactMechID returns the value that was added to the "contact_mech_id" field in this mutation.
func (m *OrderContactMechMutation) AddedContactMechID() (r int, exists bool) {
	v := m.addcontact_mech_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetContactMechID resets all changes to the "contact_mech_id" field.
func (m *OrderContactMechMutation) ResetContactMechID() {
	m.contact_mech_id = nil
	m.addcontact_mech_id = nil
}

// SetOrderHeaderID sets the "order_header" edge to the OrderHeader entity by id.
func (m *OrderContactMechMutation) SetOrderHeaderID(id int) {
	m.order_header = &id
}

// ClearOrderHeader clears the "order_header" edge to the OrderHeader entity.
func (m *OrderContactMechMutation) ClearOrderHeader() {
	m.clearedorder_header = true
}

// OrderHeaderCleared reports if the "order_header" edge to the OrderHeader entity was cleared.
func (m *OrderContactMechMutation) OrderHeaderCleared() bool {
	return m.clearedorder_header
}

// OrderHeaderID returns the "order_header" edge ID in the mutation.
func (m *OrderContactMechMutation) OrderHeaderID() (id int, exists bool) {
	if m.order_header != nil {
		return *m.order_header, true
	}
	return
}

// OrderHeaderIDs returns the "order_header" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OrderHeaderID instead. It exists only for internal usage by the builders.
func (m *OrderContactMechMutation) OrderHeaderIDs() (ids []int) {
	if id := m.order_header; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOrderHeader resets all changes to the "order_header" edge.
func (m *OrderContactMechMutation) ResetOrderHeader() {
	m.order_header = nil
	m.clearedorder_header = false
}

// Op returns the operation name.
func (m *OrderContactMechMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (OrderContactMech).
func (m *OrderContactMechMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *OrderContactMechMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.create_time != nil {
		fields = append(fields, ordercontactmech.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, ordercontactmech.FieldUpdateTime)
	}
	if m.contact_mech_purpose_type_id != nil {
		fields = append(fields, ordercontactmech.FieldContactMechPurposeTypeID)
	}
	if m.contact_mech_id != nil {
		fields = append(fields, ordercontactmech.FieldContactMechID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *OrderContactMechMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case ordercontactmech.FieldCreateTime:
		return m.CreateTime()
	case ordercontactmech.FieldUpdateTime:
		return m.UpdateTime()
	case ordercontactmech.FieldContactMechPurposeTypeID:
		return m.ContactMechPurposeTypeID()
	case ordercontactmech.FieldContactMechID:
		return m.ContactMechID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *OrderContactMechMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case ordercontactmech.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case ordercontactmech.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case ordercontactmech.FieldContactMechPurposeTypeID:
		return m.OldContactMechPurposeTypeID(ctx)
	case ordercontactmech.FieldContactMechID:
		return m.OldContactMechID(ctx)
	}
	return nil, fmt.Errorf("unknown OrderContactMech field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrderContactMechMutation) SetField(name string, value ent.Value) error {
	switch name {
	case ordercontactmech.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case ordercontactmech.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case ordercontactmech.FieldContactMechPurposeTypeID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContactMechPurposeTypeID(v)
		return nil
	case ordercontactmech.FieldContactMechID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContactMechID(v)
		return nil
	}
	return fmt.Errorf("unknown OrderContactMech field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *OrderContactMechMutation) AddedFields() []string {
	var fields []string
	if m.addcontact_mech_purpose_type_id != nil {
		fields = append(fields, ordercontactmech.FieldContactMechPurposeTypeID)
	}
	if m.addcontact_mech_id != nil {
		fields = append(fields, ordercontactmech.FieldContactMechID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *OrderContactMechMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case ordercontactmech.FieldContactMechPurposeTypeID:
		return m.AddedContactMechPurposeTypeID()
	case ordercontactmech.FieldContactMechID:
		return m.AddedContactMechID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrderContactMechMutation) AddField(name string, value ent.Value) error {
	switch name {
	case ordercontactmech.FieldContactMechPurposeTypeID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddContactMechPurposeTypeID(v)
		return nil
	case ordercontactmech.FieldContactMechID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddContactMechID(v)
		return nil
	}
	return fmt.Errorf("unknown OrderContactMech numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *OrderContactMechMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *OrderContactMechMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *OrderContactMechMutation) ClearField(name string) error {
	return fmt.Errorf("unknown OrderContactMech nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *OrderContactMechMutation) ResetField(name string) error {
	switch name {
	case ordercontactmech.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case ordercontactmech.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case ordercontactmech.FieldContactMechPurposeTypeID:
		m.ResetContactMechPurposeTypeID()
		return nil
	case ordercontactmech.FieldContactMechID:
		m.ResetContactMechID()
		return nil
	}
	return fmt.Errorf("unknown OrderContactMech field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *OrderContactMechMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.order_header != nil {
		edges = append(edges, ordercontactmech.EdgeOrderHeader)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *OrderContactMechMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case ordercontactmech.EdgeOrderHeader:
		if id := m.order_header; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *OrderContactMechMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *OrderContactMechMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *OrderContactMechMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedorder_header {
		edges = append(edges, ordercontactmech.EdgeOrderHeader)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *OrderContactMechMutation) EdgeCleared(name string) bool {
	switch name {
	case ordercontactmech.EdgeOrderHeader:
		return m.clearedorder_header
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *OrderContactMechMutation) ClearEdge(name string) error {
	switch name {
	case ordercontactmech.EdgeOrderHeader:
		m.ClearOrderHeader()
		return nil
	}
	return fmt.Errorf("unknown OrderContactMech unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *OrderContactMechMutation) ResetEdge(name string) error {
	switch name {
	case ordercontactmech.EdgeOrderHeader:
		m.ResetOrderHeader()
		return nil
	}
	return fmt.Errorf("unknown OrderContactMech edge %s", name)
}

// OrderHeaderMutation represents an operation that mutates the OrderHeader nodes in the graph.
type OrderHeaderMutation struct {
	config
	op                                  Op
	typ                                 string
	id                                  *int
	create_time                         *time.Time
	update_time                         *time.Time
	order_type_id                       *int
	addorder_type_id                    *int
	order_name                          *string
	external_id                         *int
	addexternal_id                      *int
	sales_channel_enum_id               *int
	addsales_channel_enum_id            *int
	order_date                          *time.Time
	priority                            *orderheader.Priority
	entry_date                          *time.Time
	pick_sheet_printed_date             *time.Time
	visit_id                            *int
	addvisit_id                         *int
	status_id                           *int
	addstatus_id                        *int
	created_by                          *string
	first_attempt_order_id              *int
	addfirst_attempt_order_id           *int
	currency_uom                        *int
	addcurrency_uom                     *int
	sync_status_id                      *int
	addsync_status_id                   *int
	billing_account_id                  *int
	addbilling_account_id               *int
	origin_facility_id                  *int
	addorigin_facility_id               *int
	web_site_id                         *int
	addweb_site_id                      *int
	product_store_id                    *int
	addproduct_store_id                 *int
	agreement_id                        *int
	addagreement_id                     *int
	terminal_id                         *string
	transaction_id                      *string
	auto_order_shopping_list_id         *int
	addauto_order_shopping_list_id      *int
	needs_inventory_issuance            *orderheader.NeedsInventoryIssuance
	is_rush_order                       *orderheader.IsRushOrder
	internal_code                       *string
	remaining_sub_total                 *float64
	addremaining_sub_total              *float64
	grand_total                         *float64
	addgrand_total                      *float64
	is_viewed                           *orderheader.IsViewed
	invoice_per_shipment                *orderheader.InvoicePerShipment
	clearedFields                       map[string]struct{}
	item_issuances                      map[int]struct{}
	removeditem_issuances               map[int]struct{}
	cleareditem_issuances               bool
	order_contact_meches                map[int]struct{}
	removedorder_contact_meches         map[int]struct{}
	clearedorder_contact_meches         bool
	order_items                         map[int]struct{}
	removedorder_items                  map[int]struct{}
	clearedorder_items                  bool
	order_item_price_infos              map[int]struct{}
	removedorder_item_price_infos       map[int]struct{}
	clearedorder_item_price_infos       bool
	order_item_ship_groups              map[int]struct{}
	removedorder_item_ship_groups       map[int]struct{}
	clearedorder_item_ship_groups       bool
	order_item_ship_group_assocs        map[int]struct{}
	removedorder_item_ship_group_assocs map[int]struct{}
	clearedorder_item_ship_group_assocs bool
	order_roles                         map[int]struct{}
	removedorder_roles                  map[int]struct{}
	clearedorder_roles                  bool
	order_statuses                      map[int]struct{}
	removedorder_statuses               map[int]struct{}
	clearedorder_statuses               bool
	primary_shipments                   map[int]struct{}
	removedprimary_shipments            map[int]struct{}
	clearedprimary_shipments            bool
	done                                bool
	oldValue                            func(context.Context) (*OrderHeader, error)
	predicates                          []predicate.OrderHeader
}

var _ ent.Mutation = (*OrderHeaderMutation)(nil)

// orderheaderOption allows management of the mutation configuration using functional options.
type orderheaderOption func(*OrderHeaderMutation)

// newOrderHeaderMutation creates new mutation for the OrderHeader entity.
func newOrderHeaderMutation(c config, op Op, opts ...orderheaderOption) *OrderHeaderMutation {
	m := &OrderHeaderMutation{
		config:        c,
		op:            op,
		typ:           TypeOrderHeader,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withOrderHeaderID sets the ID field of the mutation.
func withOrderHeaderID(id int) orderheaderOption {
	return func(m *OrderHeaderMutation) {
		var (
			err   error
			once  sync.Once
			value *OrderHeader
		)
		m.oldValue = func(ctx context.Context) (*OrderHeader, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().OrderHeader.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withOrderHeader sets the old OrderHeader of the mutation.
func withOrderHeader(node *OrderHeader) orderheaderOption {
	return func(m *OrderHeaderMutation) {
		m.oldValue = func(context.Context) (*OrderHeader, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m OrderHeaderMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m OrderHeaderMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *OrderHeaderMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreateTime sets the "create_time" field.
func (m *OrderHeaderMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *OrderHeaderMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the OrderHeader entity.
// If the OrderHeader object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderHeaderMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *OrderHeaderMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *OrderHeaderMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *OrderHeaderMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the OrderHeader entity.
// If the OrderHeader object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderHeaderMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *OrderHeaderMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetOrderTypeID sets the "order_type_id" field.
func (m *OrderHeaderMutation) SetOrderTypeID(i int) {
	m.order_type_id = &i
	m.addorder_type_id = nil
}

// OrderTypeID returns the value of the "order_type_id" field in the mutation.
func (m *OrderHeaderMutation) OrderTypeID() (r int, exists bool) {
	v := m.order_type_id
	if v == nil {
		return
	}
	return *v, true
}

// OldOrderTypeID returns the old "order_type_id" field's value of the OrderHeader entity.
// If the OrderHeader object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderHeaderMutation) OldOrderTypeID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldOrderTypeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldOrderTypeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrderTypeID: %w", err)
	}
	return oldValue.OrderTypeID, nil
}

// AddOrderTypeID adds i to the "order_type_id" field.
func (m *OrderHeaderMutation) AddOrderTypeID(i int) {
	if m.addorder_type_id != nil {
		*m.addorder_type_id += i
	} else {
		m.addorder_type_id = &i
	}
}

// AddedOrderTypeID returns the value that was added to the "order_type_id" field in this mutation.
func (m *OrderHeaderMutation) AddedOrderTypeID() (r int, exists bool) {
	v := m.addorder_type_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearOrderTypeID clears the value of the "order_type_id" field.
func (m *OrderHeaderMutation) ClearOrderTypeID() {
	m.order_type_id = nil
	m.addorder_type_id = nil
	m.clearedFields[orderheader.FieldOrderTypeID] = struct{}{}
}

// OrderTypeIDCleared returns if the "order_type_id" field was cleared in this mutation.
func (m *OrderHeaderMutation) OrderTypeIDCleared() bool {
	_, ok := m.clearedFields[orderheader.FieldOrderTypeID]
	return ok
}

// ResetOrderTypeID resets all changes to the "order_type_id" field.
func (m *OrderHeaderMutation) ResetOrderTypeID() {
	m.order_type_id = nil
	m.addorder_type_id = nil
	delete(m.clearedFields, orderheader.FieldOrderTypeID)
}

// SetOrderName sets the "order_name" field.
func (m *OrderHeaderMutation) SetOrderName(s string) {
	m.order_name = &s
}

// OrderName returns the value of the "order_name" field in the mutation.
func (m *OrderHeaderMutation) OrderName() (r string, exists bool) {
	v := m.order_name
	if v == nil {
		return
	}
	return *v, true
}

// OldOrderName returns the old "order_name" field's value of the OrderHeader entity.
// If the OrderHeader object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderHeaderMutation) OldOrderName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldOrderName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldOrderName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrderName: %w", err)
	}
	return oldValue.OrderName, nil
}

// ClearOrderName clears the value of the "order_name" field.
func (m *OrderHeaderMutation) ClearOrderName() {
	m.order_name = nil
	m.clearedFields[orderheader.FieldOrderName] = struct{}{}
}

// OrderNameCleared returns if the "order_name" field was cleared in this mutation.
func (m *OrderHeaderMutation) OrderNameCleared() bool {
	_, ok := m.clearedFields[orderheader.FieldOrderName]
	return ok
}

// ResetOrderName resets all changes to the "order_name" field.
func (m *OrderHeaderMutation) ResetOrderName() {
	m.order_name = nil
	delete(m.clearedFields, orderheader.FieldOrderName)
}

// SetExternalID sets the "external_id" field.
func (m *OrderHeaderMutation) SetExternalID(i int) {
	m.external_id = &i
	m.addexternal_id = nil
}

// ExternalID returns the value of the "external_id" field in the mutation.
func (m *OrderHeaderMutation) ExternalID() (r int, exists bool) {
	v := m.external_id
	if v == nil {
		return
	}
	return *v, true
}

// OldExternalID returns the old "external_id" field's value of the OrderHeader entity.
// If the OrderHeader object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderHeaderMutation) OldExternalID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldExternalID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldExternalID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExternalID: %w", err)
	}
	return oldValue.ExternalID, nil
}

// AddExternalID adds i to the "external_id" field.
func (m *OrderHeaderMutation) AddExternalID(i int) {
	if m.addexternal_id != nil {
		*m.addexternal_id += i
	} else {
		m.addexternal_id = &i
	}
}

// AddedExternalID returns the value that was added to the "external_id" field in this mutation.
func (m *OrderHeaderMutation) AddedExternalID() (r int, exists bool) {
	v := m.addexternal_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearExternalID clears the value of the "external_id" field.
func (m *OrderHeaderMutation) ClearExternalID() {
	m.external_id = nil
	m.addexternal_id = nil
	m.clearedFields[orderheader.FieldExternalID] = struct{}{}
}

// ExternalIDCleared returns if the "external_id" field was cleared in this mutation.
func (m *OrderHeaderMutation) ExternalIDCleared() bool {
	_, ok := m.clearedFields[orderheader.FieldExternalID]
	return ok
}

// ResetExternalID resets all changes to the "external_id" field.
func (m *OrderHeaderMutation) ResetExternalID() {
	m.external_id = nil
	m.addexternal_id = nil
	delete(m.clearedFields, orderheader.FieldExternalID)
}

// SetSalesChannelEnumID sets the "sales_channel_enum_id" field.
func (m *OrderHeaderMutation) SetSalesChannelEnumID(i int) {
	m.sales_channel_enum_id = &i
	m.addsales_channel_enum_id = nil
}

// SalesChannelEnumID returns the value of the "sales_channel_enum_id" field in the mutation.
func (m *OrderHeaderMutation) SalesChannelEnumID() (r int, exists bool) {
	v := m.sales_channel_enum_id
	if v == nil {
		return
	}
	return *v, true
}

// OldSalesChannelEnumID returns the old "sales_channel_enum_id" field's value of the OrderHeader entity.
// If the OrderHeader object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderHeaderMutation) OldSalesChannelEnumID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSalesChannelEnumID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSalesChannelEnumID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSalesChannelEnumID: %w", err)
	}
	return oldValue.SalesChannelEnumID, nil
}

// AddSalesChannelEnumID adds i to the "sales_channel_enum_id" field.
func (m *OrderHeaderMutation) AddSalesChannelEnumID(i int) {
	if m.addsales_channel_enum_id != nil {
		*m.addsales_channel_enum_id += i
	} else {
		m.addsales_channel_enum_id = &i
	}
}

// AddedSalesChannelEnumID returns the value that was added to the "sales_channel_enum_id" field in this mutation.
func (m *OrderHeaderMutation) AddedSalesChannelEnumID() (r int, exists bool) {
	v := m.addsales_channel_enum_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearSalesChannelEnumID clears the value of the "sales_channel_enum_id" field.
func (m *OrderHeaderMutation) ClearSalesChannelEnumID() {
	m.sales_channel_enum_id = nil
	m.addsales_channel_enum_id = nil
	m.clearedFields[orderheader.FieldSalesChannelEnumID] = struct{}{}
}

// SalesChannelEnumIDCleared returns if the "sales_channel_enum_id" field was cleared in this mutation.
func (m *OrderHeaderMutation) SalesChannelEnumIDCleared() bool {
	_, ok := m.clearedFields[orderheader.FieldSalesChannelEnumID]
	return ok
}

// ResetSalesChannelEnumID resets all changes to the "sales_channel_enum_id" field.
func (m *OrderHeaderMutation) ResetSalesChannelEnumID() {
	m.sales_channel_enum_id = nil
	m.addsales_channel_enum_id = nil
	delete(m.clearedFields, orderheader.FieldSalesChannelEnumID)
}

// SetOrderDate sets the "order_date" field.
func (m *OrderHeaderMutation) SetOrderDate(t time.Time) {
	m.order_date = &t
}

// OrderDate returns the value of the "order_date" field in the mutation.
func (m *OrderHeaderMutation) OrderDate() (r time.Time, exists bool) {
	v := m.order_date
	if v == nil {
		return
	}
	return *v, true
}

// OldOrderDate returns the old "order_date" field's value of the OrderHeader entity.
// If the OrderHeader object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderHeaderMutation) OldOrderDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldOrderDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldOrderDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrderDate: %w", err)
	}
	return oldValue.OrderDate, nil
}

// ClearOrderDate clears the value of the "order_date" field.
func (m *OrderHeaderMutation) ClearOrderDate() {
	m.order_date = nil
	m.clearedFields[orderheader.FieldOrderDate] = struct{}{}
}

// OrderDateCleared returns if the "order_date" field was cleared in this mutation.
func (m *OrderHeaderMutation) OrderDateCleared() bool {
	_, ok := m.clearedFields[orderheader.FieldOrderDate]
	return ok
}

// ResetOrderDate resets all changes to the "order_date" field.
func (m *OrderHeaderMutation) ResetOrderDate() {
	m.order_date = nil
	delete(m.clearedFields, orderheader.FieldOrderDate)
}

// SetPriority sets the "priority" field.
func (m *OrderHeaderMutation) SetPriority(o orderheader.Priority) {
	m.priority = &o
}

// Priority returns the value of the "priority" field in the mutation.
func (m *OrderHeaderMutation) Priority() (r orderheader.Priority, exists bool) {
	v := m.priority
	if v == nil {
		return
	}
	return *v, true
}

// OldPriority returns the old "priority" field's value of the OrderHeader entity.
// If the OrderHeader object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderHeaderMutation) OldPriority(ctx context.Context) (v orderheader.Priority, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPriority is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPriority requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPriority: %w", err)
	}
	return oldValue.Priority, nil
}

// ClearPriority clears the value of the "priority" field.
func (m *OrderHeaderMutation) ClearPriority() {
	m.priority = nil
	m.clearedFields[orderheader.FieldPriority] = struct{}{}
}

// PriorityCleared returns if the "priority" field was cleared in this mutation.
func (m *OrderHeaderMutation) PriorityCleared() bool {
	_, ok := m.clearedFields[orderheader.FieldPriority]
	return ok
}

// ResetPriority resets all changes to the "priority" field.
func (m *OrderHeaderMutation) ResetPriority() {
	m.priority = nil
	delete(m.clearedFields, orderheader.FieldPriority)
}

// SetEntryDate sets the "entry_date" field.
func (m *OrderHeaderMutation) SetEntryDate(t time.Time) {
	m.entry_date = &t
}

// EntryDate returns the value of the "entry_date" field in the mutation.
func (m *OrderHeaderMutation) EntryDate() (r time.Time, exists bool) {
	v := m.entry_date
	if v == nil {
		return
	}
	return *v, true
}

// OldEntryDate returns the old "entry_date" field's value of the OrderHeader entity.
// If the OrderHeader object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderHeaderMutation) OldEntryDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEntryDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEntryDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEntryDate: %w", err)
	}
	return oldValue.EntryDate, nil
}

// ClearEntryDate clears the value of the "entry_date" field.
func (m *OrderHeaderMutation) ClearEntryDate() {
	m.entry_date = nil
	m.clearedFields[orderheader.FieldEntryDate] = struct{}{}
}

// EntryDateCleared returns if the "entry_date" field was cleared in this mutation.
func (m *OrderHeaderMutation) EntryDateCleared() bool {
	_, ok := m.clearedFields[orderheader.FieldEntryDate]
	return ok
}

// ResetEntryDate resets all changes to the "entry_date" field.
func (m *OrderHeaderMutation) ResetEntryDate() {
	m.entry_date = nil
	delete(m.clearedFields, orderheader.FieldEntryDate)
}

// SetPickSheetPrintedDate sets the "pick_sheet_printed_date" field.
func (m *OrderHeaderMutation) SetPickSheetPrintedDate(t time.Time) {
	m.pick_sheet_printed_date = &t
}

// PickSheetPrintedDate returns the value of the "pick_sheet_printed_date" field in the mutation.
func (m *OrderHeaderMutation) PickSheetPrintedDate() (r time.Time, exists bool) {
	v := m.pick_sheet_printed_date
	if v == nil {
		return
	}
	return *v, true
}

// OldPickSheetPrintedDate returns the old "pick_sheet_printed_date" field's value of the OrderHeader entity.
// If the OrderHeader object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderHeaderMutation) OldPickSheetPrintedDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPickSheetPrintedDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPickSheetPrintedDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPickSheetPrintedDate: %w", err)
	}
	return oldValue.PickSheetPrintedDate, nil
}

// ClearPickSheetPrintedDate clears the value of the "pick_sheet_printed_date" field.
func (m *OrderHeaderMutation) ClearPickSheetPrintedDate() {
	m.pick_sheet_printed_date = nil
	m.clearedFields[orderheader.FieldPickSheetPrintedDate] = struct{}{}
}

// PickSheetPrintedDateCleared returns if the "pick_sheet_printed_date" field was cleared in this mutation.
func (m *OrderHeaderMutation) PickSheetPrintedDateCleared() bool {
	_, ok := m.clearedFields[orderheader.FieldPickSheetPrintedDate]
	return ok
}

// ResetPickSheetPrintedDate resets all changes to the "pick_sheet_printed_date" field.
func (m *OrderHeaderMutation) ResetPickSheetPrintedDate() {
	m.pick_sheet_printed_date = nil
	delete(m.clearedFields, orderheader.FieldPickSheetPrintedDate)
}

// SetVisitID sets the "visit_id" field.
func (m *OrderHeaderMutation) SetVisitID(i int) {
	m.visit_id = &i
	m.addvisit_id = nil
}

// VisitID returns the value of the "visit_id" field in the mutation.
func (m *OrderHeaderMutation) VisitID() (r int, exists bool) {
	v := m.visit_id
	if v == nil {
		return
	}
	return *v, true
}

// OldVisitID returns the old "visit_id" field's value of the OrderHeader entity.
// If the OrderHeader object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderHeaderMutation) OldVisitID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldVisitID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldVisitID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVisitID: %w", err)
	}
	return oldValue.VisitID, nil
}

// AddVisitID adds i to the "visit_id" field.
func (m *OrderHeaderMutation) AddVisitID(i int) {
	if m.addvisit_id != nil {
		*m.addvisit_id += i
	} else {
		m.addvisit_id = &i
	}
}

// AddedVisitID returns the value that was added to the "visit_id" field in this mutation.
func (m *OrderHeaderMutation) AddedVisitID() (r int, exists bool) {
	v := m.addvisit_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearVisitID clears the value of the "visit_id" field.
func (m *OrderHeaderMutation) ClearVisitID() {
	m.visit_id = nil
	m.addvisit_id = nil
	m.clearedFields[orderheader.FieldVisitID] = struct{}{}
}

// VisitIDCleared returns if the "visit_id" field was cleared in this mutation.
func (m *OrderHeaderMutation) VisitIDCleared() bool {
	_, ok := m.clearedFields[orderheader.FieldVisitID]
	return ok
}

// ResetVisitID resets all changes to the "visit_id" field.
func (m *OrderHeaderMutation) ResetVisitID() {
	m.visit_id = nil
	m.addvisit_id = nil
	delete(m.clearedFields, orderheader.FieldVisitID)
}

// SetStatusID sets the "status_id" field.
func (m *OrderHeaderMutation) SetStatusID(i int) {
	m.status_id = &i
	m.addstatus_id = nil
}

// StatusID returns the value of the "status_id" field in the mutation.
func (m *OrderHeaderMutation) StatusID() (r int, exists bool) {
	v := m.status_id
	if v == nil {
		return
	}
	return *v, true
}

// OldStatusID returns the old "status_id" field's value of the OrderHeader entity.
// If the OrderHeader object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderHeaderMutation) OldStatusID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldStatusID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldStatusID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatusID: %w", err)
	}
	return oldValue.StatusID, nil
}

// AddStatusID adds i to the "status_id" field.
func (m *OrderHeaderMutation) AddStatusID(i int) {
	if m.addstatus_id != nil {
		*m.addstatus_id += i
	} else {
		m.addstatus_id = &i
	}
}

// AddedStatusID returns the value that was added to the "status_id" field in this mutation.
func (m *OrderHeaderMutation) AddedStatusID() (r int, exists bool) {
	v := m.addstatus_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearStatusID clears the value of the "status_id" field.
func (m *OrderHeaderMutation) ClearStatusID() {
	m.status_id = nil
	m.addstatus_id = nil
	m.clearedFields[orderheader.FieldStatusID] = struct{}{}
}

// StatusIDCleared returns if the "status_id" field was cleared in this mutation.
func (m *OrderHeaderMutation) StatusIDCleared() bool {
	_, ok := m.clearedFields[orderheader.FieldStatusID]
	return ok
}

// ResetStatusID resets all changes to the "status_id" field.
func (m *OrderHeaderMutation) ResetStatusID() {
	m.status_id = nil
	m.addstatus_id = nil
	delete(m.clearedFields, orderheader.FieldStatusID)
}

// SetCreatedBy sets the "created_by" field.
func (m *OrderHeaderMutation) SetCreatedBy(s string) {
	m.created_by = &s
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *OrderHeaderMutation) CreatedBy() (r string, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the OrderHeader entity.
// If the OrderHeader object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderHeaderMutation) OldCreatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *OrderHeaderMutation) ClearCreatedBy() {
	m.created_by = nil
	m.clearedFields[orderheader.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *OrderHeaderMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[orderheader.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *OrderHeaderMutation) ResetCreatedBy() {
	m.created_by = nil
	delete(m.clearedFields, orderheader.FieldCreatedBy)
}

// SetFirstAttemptOrderID sets the "first_attempt_order_id" field.
func (m *OrderHeaderMutation) SetFirstAttemptOrderID(i int) {
	m.first_attempt_order_id = &i
	m.addfirst_attempt_order_id = nil
}

// FirstAttemptOrderID returns the value of the "first_attempt_order_id" field in the mutation.
func (m *OrderHeaderMutation) FirstAttemptOrderID() (r int, exists bool) {
	v := m.first_attempt_order_id
	if v == nil {
		return
	}
	return *v, true
}

// OldFirstAttemptOrderID returns the old "first_attempt_order_id" field's value of the OrderHeader entity.
// If the OrderHeader object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderHeaderMutation) OldFirstAttemptOrderID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldFirstAttemptOrderID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldFirstAttemptOrderID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFirstAttemptOrderID: %w", err)
	}
	return oldValue.FirstAttemptOrderID, nil
}

// AddFirstAttemptOrderID adds i to the "first_attempt_order_id" field.
func (m *OrderHeaderMutation) AddFirstAttemptOrderID(i int) {
	if m.addfirst_attempt_order_id != nil {
		*m.addfirst_attempt_order_id += i
	} else {
		m.addfirst_attempt_order_id = &i
	}
}

// AddedFirstAttemptOrderID returns the value that was added to the "first_attempt_order_id" field in this mutation.
func (m *OrderHeaderMutation) AddedFirstAttemptOrderID() (r int, exists bool) {
	v := m.addfirst_attempt_order_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearFirstAttemptOrderID clears the value of the "first_attempt_order_id" field.
func (m *OrderHeaderMutation) ClearFirstAttemptOrderID() {
	m.first_attempt_order_id = nil
	m.addfirst_attempt_order_id = nil
	m.clearedFields[orderheader.FieldFirstAttemptOrderID] = struct{}{}
}

// FirstAttemptOrderIDCleared returns if the "first_attempt_order_id" field was cleared in this mutation.
func (m *OrderHeaderMutation) FirstAttemptOrderIDCleared() bool {
	_, ok := m.clearedFields[orderheader.FieldFirstAttemptOrderID]
	return ok
}

// ResetFirstAttemptOrderID resets all changes to the "first_attempt_order_id" field.
func (m *OrderHeaderMutation) ResetFirstAttemptOrderID() {
	m.first_attempt_order_id = nil
	m.addfirst_attempt_order_id = nil
	delete(m.clearedFields, orderheader.FieldFirstAttemptOrderID)
}

// SetCurrencyUom sets the "currency_uom" field.
func (m *OrderHeaderMutation) SetCurrencyUom(i int) {
	m.currency_uom = &i
	m.addcurrency_uom = nil
}

// CurrencyUom returns the value of the "currency_uom" field in the mutation.
func (m *OrderHeaderMutation) CurrencyUom() (r int, exists bool) {
	v := m.currency_uom
	if v == nil {
		return
	}
	return *v, true
}

// OldCurrencyUom returns the old "currency_uom" field's value of the OrderHeader entity.
// If the OrderHeader object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderHeaderMutation) OldCurrencyUom(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCurrencyUom is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCurrencyUom requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCurrencyUom: %w", err)
	}
	return oldValue.CurrencyUom, nil
}

// AddCurrencyUom adds i to the "currency_uom" field.
func (m *OrderHeaderMutation) AddCurrencyUom(i int) {
	if m.addcurrency_uom != nil {
		*m.addcurrency_uom += i
	} else {
		m.addcurrency_uom = &i
	}
}

// AddedCurrencyUom returns the value that was added to the "currency_uom" field in this mutation.
func (m *OrderHeaderMutation) AddedCurrencyUom() (r int, exists bool) {
	v := m.addcurrency_uom
	if v == nil {
		return
	}
	return *v, true
}

// ClearCurrencyUom clears the value of the "currency_uom" field.
func (m *OrderHeaderMutation) ClearCurrencyUom() {
	m.currency_uom = nil
	m.addcurrency_uom = nil
	m.clearedFields[orderheader.FieldCurrencyUom] = struct{}{}
}

// CurrencyUomCleared returns if the "currency_uom" field was cleared in this mutation.
func (m *OrderHeaderMutation) CurrencyUomCleared() bool {
	_, ok := m.clearedFields[orderheader.FieldCurrencyUom]
	return ok
}

// ResetCurrencyUom resets all changes to the "currency_uom" field.
func (m *OrderHeaderMutation) ResetCurrencyUom() {
	m.currency_uom = nil
	m.addcurrency_uom = nil
	delete(m.clearedFields, orderheader.FieldCurrencyUom)
}

// SetSyncStatusID sets the "sync_status_id" field.
func (m *OrderHeaderMutation) SetSyncStatusID(i int) {
	m.sync_status_id = &i
	m.addsync_status_id = nil
}

// SyncStatusID returns the value of the "sync_status_id" field in the mutation.
func (m *OrderHeaderMutation) SyncStatusID() (r int, exists bool) {
	v := m.sync_status_id
	if v == nil {
		return
	}
	return *v, true
}

// OldSyncStatusID returns the old "sync_status_id" field's value of the OrderHeader entity.
// If the OrderHeader object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderHeaderMutation) OldSyncStatusID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSyncStatusID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSyncStatusID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSyncStatusID: %w", err)
	}
	return oldValue.SyncStatusID, nil
}

// AddSyncStatusID adds i to the "sync_status_id" field.
func (m *OrderHeaderMutation) AddSyncStatusID(i int) {
	if m.addsync_status_id != nil {
		*m.addsync_status_id += i
	} else {
		m.addsync_status_id = &i
	}
}

// AddedSyncStatusID returns the value that was added to the "sync_status_id" field in this mutation.
func (m *OrderHeaderMutation) AddedSyncStatusID() (r int, exists bool) {
	v := m.addsync_status_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearSyncStatusID clears the value of the "sync_status_id" field.
func (m *OrderHeaderMutation) ClearSyncStatusID() {
	m.sync_status_id = nil
	m.addsync_status_id = nil
	m.clearedFields[orderheader.FieldSyncStatusID] = struct{}{}
}

// SyncStatusIDCleared returns if the "sync_status_id" field was cleared in this mutation.
func (m *OrderHeaderMutation) SyncStatusIDCleared() bool {
	_, ok := m.clearedFields[orderheader.FieldSyncStatusID]
	return ok
}

// ResetSyncStatusID resets all changes to the "sync_status_id" field.
func (m *OrderHeaderMutation) ResetSyncStatusID() {
	m.sync_status_id = nil
	m.addsync_status_id = nil
	delete(m.clearedFields, orderheader.FieldSyncStatusID)
}

// SetBillingAccountID sets the "billing_account_id" field.
func (m *OrderHeaderMutation) SetBillingAccountID(i int) {
	m.billing_account_id = &i
	m.addbilling_account_id = nil
}

// BillingAccountID returns the value of the "billing_account_id" field in the mutation.
func (m *OrderHeaderMutation) BillingAccountID() (r int, exists bool) {
	v := m.billing_account_id
	if v == nil {
		return
	}
	return *v, true
}

// OldBillingAccountID returns the old "billing_account_id" field's value of the OrderHeader entity.
// If the OrderHeader object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderHeaderMutation) OldBillingAccountID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldBillingAccountID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldBillingAccountID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBillingAccountID: %w", err)
	}
	return oldValue.BillingAccountID, nil
}

// AddBillingAccountID adds i to the "billing_account_id" field.
func (m *OrderHeaderMutation) AddBillingAccountID(i int) {
	if m.addbilling_account_id != nil {
		*m.addbilling_account_id += i
	} else {
		m.addbilling_account_id = &i
	}
}

// AddedBillingAccountID returns the value that was added to the "billing_account_id" field in this mutation.
func (m *OrderHeaderMutation) AddedBillingAccountID() (r int, exists bool) {
	v := m.addbilling_account_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearBillingAccountID clears the value of the "billing_account_id" field.
func (m *OrderHeaderMutation) ClearBillingAccountID() {
	m.billing_account_id = nil
	m.addbilling_account_id = nil
	m.clearedFields[orderheader.FieldBillingAccountID] = struct{}{}
}

// BillingAccountIDCleared returns if the "billing_account_id" field was cleared in this mutation.
func (m *OrderHeaderMutation) BillingAccountIDCleared() bool {
	_, ok := m.clearedFields[orderheader.FieldBillingAccountID]
	return ok
}

// ResetBillingAccountID resets all changes to the "billing_account_id" field.
func (m *OrderHeaderMutation) ResetBillingAccountID() {
	m.billing_account_id = nil
	m.addbilling_account_id = nil
	delete(m.clearedFields, orderheader.FieldBillingAccountID)
}

// SetOriginFacilityID sets the "origin_facility_id" field.
func (m *OrderHeaderMutation) SetOriginFacilityID(i int) {
	m.origin_facility_id = &i
	m.addorigin_facility_id = nil
}

// OriginFacilityID returns the value of the "origin_facility_id" field in the mutation.
func (m *OrderHeaderMutation) OriginFacilityID() (r int, exists bool) {
	v := m.origin_facility_id
	if v == nil {
		return
	}
	return *v, true
}

// OldOriginFacilityID returns the old "origin_facility_id" field's value of the OrderHeader entity.
// If the OrderHeader object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderHeaderMutation) OldOriginFacilityID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldOriginFacilityID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldOriginFacilityID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOriginFacilityID: %w", err)
	}
	return oldValue.OriginFacilityID, nil
}

// AddOriginFacilityID adds i to the "origin_facility_id" field.
func (m *OrderHeaderMutation) AddOriginFacilityID(i int) {
	if m.addorigin_facility_id != nil {
		*m.addorigin_facility_id += i
	} else {
		m.addorigin_facility_id = &i
	}
}

// AddedOriginFacilityID returns the value that was added to the "origin_facility_id" field in this mutation.
func (m *OrderHeaderMutation) AddedOriginFacilityID() (r int, exists bool) {
	v := m.addorigin_facility_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearOriginFacilityID clears the value of the "origin_facility_id" field.
func (m *OrderHeaderMutation) ClearOriginFacilityID() {
	m.origin_facility_id = nil
	m.addorigin_facility_id = nil
	m.clearedFields[orderheader.FieldOriginFacilityID] = struct{}{}
}

// OriginFacilityIDCleared returns if the "origin_facility_id" field was cleared in this mutation.
func (m *OrderHeaderMutation) OriginFacilityIDCleared() bool {
	_, ok := m.clearedFields[orderheader.FieldOriginFacilityID]
	return ok
}

// ResetOriginFacilityID resets all changes to the "origin_facility_id" field.
func (m *OrderHeaderMutation) ResetOriginFacilityID() {
	m.origin_facility_id = nil
	m.addorigin_facility_id = nil
	delete(m.clearedFields, orderheader.FieldOriginFacilityID)
}

// SetWebSiteID sets the "web_site_id" field.
func (m *OrderHeaderMutation) SetWebSiteID(i int) {
	m.web_site_id = &i
	m.addweb_site_id = nil
}

// WebSiteID returns the value of the "web_site_id" field in the mutation.
func (m *OrderHeaderMutation) WebSiteID() (r int, exists bool) {
	v := m.web_site_id
	if v == nil {
		return
	}
	return *v, true
}

// OldWebSiteID returns the old "web_site_id" field's value of the OrderHeader entity.
// If the OrderHeader object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderHeaderMutation) OldWebSiteID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldWebSiteID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldWebSiteID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWebSiteID: %w", err)
	}
	return oldValue.WebSiteID, nil
}

// AddWebSiteID adds i to the "web_site_id" field.
func (m *OrderHeaderMutation) AddWebSiteID(i int) {
	if m.addweb_site_id != nil {
		*m.addweb_site_id += i
	} else {
		m.addweb_site_id = &i
	}
}

// AddedWebSiteID returns the value that was added to the "web_site_id" field in this mutation.
func (m *OrderHeaderMutation) AddedWebSiteID() (r int, exists bool) {
	v := m.addweb_site_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearWebSiteID clears the value of the "web_site_id" field.
func (m *OrderHeaderMutation) ClearWebSiteID() {
	m.web_site_id = nil
	m.addweb_site_id = nil
	m.clearedFields[orderheader.FieldWebSiteID] = struct{}{}
}

// WebSiteIDCleared returns if the "web_site_id" field was cleared in this mutation.
func (m *OrderHeaderMutation) WebSiteIDCleared() bool {
	_, ok := m.clearedFields[orderheader.FieldWebSiteID]
	return ok
}

// ResetWebSiteID resets all changes to the "web_site_id" field.
func (m *OrderHeaderMutation) ResetWebSiteID() {
	m.web_site_id = nil
	m.addweb_site_id = nil
	delete(m.clearedFields, orderheader.FieldWebSiteID)
}

// SetProductStoreID sets the "product_store_id" field.
func (m *OrderHeaderMutation) SetProductStoreID(i int) {
	m.product_store_id = &i
	m.addproduct_store_id = nil
}

// ProductStoreID returns the value of the "product_store_id" field in the mutation.
func (m *OrderHeaderMutation) ProductStoreID() (r int, exists bool) {
	v := m.product_store_id
	if v == nil {
		return
	}
	return *v, true
}

// OldProductStoreID returns the old "product_store_id" field's value of the OrderHeader entity.
// If the OrderHeader object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderHeaderMutation) OldProductStoreID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldProductStoreID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldProductStoreID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProductStoreID: %w", err)
	}
	return oldValue.ProductStoreID, nil
}

// AddProductStoreID adds i to the "product_store_id" field.
func (m *OrderHeaderMutation) AddProductStoreID(i int) {
	if m.addproduct_store_id != nil {
		*m.addproduct_store_id += i
	} else {
		m.addproduct_store_id = &i
	}
}

// AddedProductStoreID returns the value that was added to the "product_store_id" field in this mutation.
func (m *OrderHeaderMutation) AddedProductStoreID() (r int, exists bool) {
	v := m.addproduct_store_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearProductStoreID clears the value of the "product_store_id" field.
func (m *OrderHeaderMutation) ClearProductStoreID() {
	m.product_store_id = nil
	m.addproduct_store_id = nil
	m.clearedFields[orderheader.FieldProductStoreID] = struct{}{}
}

// ProductStoreIDCleared returns if the "product_store_id" field was cleared in this mutation.
func (m *OrderHeaderMutation) ProductStoreIDCleared() bool {
	_, ok := m.clearedFields[orderheader.FieldProductStoreID]
	return ok
}

// ResetProductStoreID resets all changes to the "product_store_id" field.
func (m *OrderHeaderMutation) ResetProductStoreID() {
	m.product_store_id = nil
	m.addproduct_store_id = nil
	delete(m.clearedFields, orderheader.FieldProductStoreID)
}

// SetAgreementID sets the "agreement_id" field.
func (m *OrderHeaderMutation) SetAgreementID(i int) {
	m.agreement_id = &i
	m.addagreement_id = nil
}

// AgreementID returns the value of the "agreement_id" field in the mutation.
func (m *OrderHeaderMutation) AgreementID() (r int, exists bool) {
	v := m.agreement_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAgreementID returns the old "agreement_id" field's value of the OrderHeader entity.
// If the OrderHeader object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderHeaderMutation) OldAgreementID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAgreementID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAgreementID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAgreementID: %w", err)
	}
	return oldValue.AgreementID, nil
}

// AddAgreementID adds i to the "agreement_id" field.
func (m *OrderHeaderMutation) AddAgreementID(i int) {
	if m.addagreement_id != nil {
		*m.addagreement_id += i
	} else {
		m.addagreement_id = &i
	}
}

// AddedAgreementID returns the value that was added to the "agreement_id" field in this mutation.
func (m *OrderHeaderMutation) AddedAgreementID() (r int, exists bool) {
	v := m.addagreement_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearAgreementID clears the value of the "agreement_id" field.
func (m *OrderHeaderMutation) ClearAgreementID() {
	m.agreement_id = nil
	m.addagreement_id = nil
	m.clearedFields[orderheader.FieldAgreementID] = struct{}{}
}

// AgreementIDCleared returns if the "agreement_id" field was cleared in this mutation.
func (m *OrderHeaderMutation) AgreementIDCleared() bool {
	_, ok := m.clearedFields[orderheader.FieldAgreementID]
	return ok
}

// ResetAgreementID resets all changes to the "agreement_id" field.
func (m *OrderHeaderMutation) ResetAgreementID() {
	m.agreement_id = nil
	m.addagreement_id = nil
	delete(m.clearedFields, orderheader.FieldAgreementID)
}

// SetTerminalID sets the "terminal_id" field.
func (m *OrderHeaderMutation) SetTerminalID(s string) {
	m.terminal_id = &s
}

// TerminalID returns the value of the "terminal_id" field in the mutation.
func (m *OrderHeaderMutation) TerminalID() (r string, exists bool) {
	v := m.terminal_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTerminalID returns the old "terminal_id" field's value of the OrderHeader entity.
// If the OrderHeader object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderHeaderMutation) OldTerminalID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTerminalID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTerminalID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTerminalID: %w", err)
	}
	return oldValue.TerminalID, nil
}

// ClearTerminalID clears the value of the "terminal_id" field.
func (m *OrderHeaderMutation) ClearTerminalID() {
	m.terminal_id = nil
	m.clearedFields[orderheader.FieldTerminalID] = struct{}{}
}

// TerminalIDCleared returns if the "terminal_id" field was cleared in this mutation.
func (m *OrderHeaderMutation) TerminalIDCleared() bool {
	_, ok := m.clearedFields[orderheader.FieldTerminalID]
	return ok
}

// ResetTerminalID resets all changes to the "terminal_id" field.
func (m *OrderHeaderMutation) ResetTerminalID() {
	m.terminal_id = nil
	delete(m.clearedFields, orderheader.FieldTerminalID)
}

// SetTransactionID sets the "transaction_id" field.
func (m *OrderHeaderMutation) SetTransactionID(s string) {
	m.transaction_id = &s
}

// TransactionID returns the value of the "transaction_id" field in the mutation.
func (m *OrderHeaderMutation) TransactionID() (r string, exists bool) {
	v := m.transaction_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTransactionID returns the old "transaction_id" field's value of the OrderHeader entity.
// If the OrderHeader object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderHeaderMutation) OldTransactionID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTransactionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTransactionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTransactionID: %w", err)
	}
	return oldValue.TransactionID, nil
}

// ClearTransactionID clears the value of the "transaction_id" field.
func (m *OrderHeaderMutation) ClearTransactionID() {
	m.transaction_id = nil
	m.clearedFields[orderheader.FieldTransactionID] = struct{}{}
}

// TransactionIDCleared returns if the "transaction_id" field was cleared in this mutation.
func (m *OrderHeaderMutation) TransactionIDCleared() bool {
	_, ok := m.clearedFields[orderheader.FieldTransactionID]
	return ok
}

// ResetTransactionID resets all changes to the "transaction_id" field.
func (m *OrderHeaderMutation) ResetTransactionID() {
	m.transaction_id = nil
	delete(m.clearedFields, orderheader.FieldTransactionID)
}

// SetAutoOrderShoppingListID sets the "auto_order_shopping_list_id" field.
func (m *OrderHeaderMutation) SetAutoOrderShoppingListID(i int) {
	m.auto_order_shopping_list_id = &i
	m.addauto_order_shopping_list_id = nil
}

// AutoOrderShoppingListID returns the value of the "auto_order_shopping_list_id" field in the mutation.
func (m *OrderHeaderMutation) AutoOrderShoppingListID() (r int, exists bool) {
	v := m.auto_order_shopping_list_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAutoOrderShoppingListID returns the old "auto_order_shopping_list_id" field's value of the OrderHeader entity.
// If the OrderHeader object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderHeaderMutation) OldAutoOrderShoppingListID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAutoOrderShoppingListID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAutoOrderShoppingListID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAutoOrderShoppingListID: %w", err)
	}
	return oldValue.AutoOrderShoppingListID, nil
}

// AddAutoOrderShoppingListID adds i to the "auto_order_shopping_list_id" field.
func (m *OrderHeaderMutation) AddAutoOrderShoppingListID(i int) {
	if m.addauto_order_shopping_list_id != nil {
		*m.addauto_order_shopping_list_id += i
	} else {
		m.addauto_order_shopping_list_id = &i
	}
}

// AddedAutoOrderShoppingListID returns the value that was added to the "auto_order_shopping_list_id" field in this mutation.
func (m *OrderHeaderMutation) AddedAutoOrderShoppingListID() (r int, exists bool) {
	v := m.addauto_order_shopping_list_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearAutoOrderShoppingListID clears the value of the "auto_order_shopping_list_id" field.
func (m *OrderHeaderMutation) ClearAutoOrderShoppingListID() {
	m.auto_order_shopping_list_id = nil
	m.addauto_order_shopping_list_id = nil
	m.clearedFields[orderheader.FieldAutoOrderShoppingListID] = struct{}{}
}

// AutoOrderShoppingListIDCleared returns if the "auto_order_shopping_list_id" field was cleared in this mutation.
func (m *OrderHeaderMutation) AutoOrderShoppingListIDCleared() bool {
	_, ok := m.clearedFields[orderheader.FieldAutoOrderShoppingListID]
	return ok
}

// ResetAutoOrderShoppingListID resets all changes to the "auto_order_shopping_list_id" field.
func (m *OrderHeaderMutation) ResetAutoOrderShoppingListID() {
	m.auto_order_shopping_list_id = nil
	m.addauto_order_shopping_list_id = nil
	delete(m.clearedFields, orderheader.FieldAutoOrderShoppingListID)
}

// SetNeedsInventoryIssuance sets the "needs_inventory_issuance" field.
func (m *OrderHeaderMutation) SetNeedsInventoryIssuance(oii orderheader.NeedsInventoryIssuance) {
	m.needs_inventory_issuance = &oii
}

// NeedsInventoryIssuance returns the value of the "needs_inventory_issuance" field in the mutation.
func (m *OrderHeaderMutation) NeedsInventoryIssuance() (r orderheader.NeedsInventoryIssuance, exists bool) {
	v := m.needs_inventory_issuance
	if v == nil {
		return
	}
	return *v, true
}

// OldNeedsInventoryIssuance returns the old "needs_inventory_issuance" field's value of the OrderHeader entity.
// If the OrderHeader object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderHeaderMutation) OldNeedsInventoryIssuance(ctx context.Context) (v orderheader.NeedsInventoryIssuance, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldNeedsInventoryIssuance is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldNeedsInventoryIssuance requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNeedsInventoryIssuance: %w", err)
	}
	return oldValue.NeedsInventoryIssuance, nil
}

// ClearNeedsInventoryIssuance clears the value of the "needs_inventory_issuance" field.
func (m *OrderHeaderMutation) ClearNeedsInventoryIssuance() {
	m.needs_inventory_issuance = nil
	m.clearedFields[orderheader.FieldNeedsInventoryIssuance] = struct{}{}
}

// NeedsInventoryIssuanceCleared returns if the "needs_inventory_issuance" field was cleared in this mutation.
func (m *OrderHeaderMutation) NeedsInventoryIssuanceCleared() bool {
	_, ok := m.clearedFields[orderheader.FieldNeedsInventoryIssuance]
	return ok
}

// ResetNeedsInventoryIssuance resets all changes to the "needs_inventory_issuance" field.
func (m *OrderHeaderMutation) ResetNeedsInventoryIssuance() {
	m.needs_inventory_issuance = nil
	delete(m.clearedFields, orderheader.FieldNeedsInventoryIssuance)
}

// SetIsRushOrder sets the "is_rush_order" field.
func (m *OrderHeaderMutation) SetIsRushOrder(oro orderheader.IsRushOrder) {
	m.is_rush_order = &oro
}

// IsRushOrder returns the value of the "is_rush_order" field in the mutation.
func (m *OrderHeaderMutation) IsRushOrder() (r orderheader.IsRushOrder, exists bool) {
	v := m.is_rush_order
	if v == nil {
		return
	}
	return *v, true
}

// OldIsRushOrder returns the old "is_rush_order" field's value of the OrderHeader entity.
// If the OrderHeader object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderHeaderMutation) OldIsRushOrder(ctx context.Context) (v orderheader.IsRushOrder, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldIsRushOrder is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldIsRushOrder requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsRushOrder: %w", err)
	}
	return oldValue.IsRushOrder, nil
}

// ClearIsRushOrder clears the value of the "is_rush_order" field.
func (m *OrderHeaderMutation) ClearIsRushOrder() {
	m.is_rush_order = nil
	m.clearedFields[orderheader.FieldIsRushOrder] = struct{}{}
}

// IsRushOrderCleared returns if the "is_rush_order" field was cleared in this mutation.
func (m *OrderHeaderMutation) IsRushOrderCleared() bool {
	_, ok := m.clearedFields[orderheader.FieldIsRushOrder]
	return ok
}

// ResetIsRushOrder resets all changes to the "is_rush_order" field.
func (m *OrderHeaderMutation) ResetIsRushOrder() {
	m.is_rush_order = nil
	delete(m.clearedFields, orderheader.FieldIsRushOrder)
}

// SetInternalCode sets the "internal_code" field.
func (m *OrderHeaderMutation) SetInternalCode(s string) {
	m.internal_code = &s
}

// InternalCode returns the value of the "internal_code" field in the mutation.
func (m *OrderHeaderMutation) InternalCode() (r string, exists bool) {
	v := m.internal_code
	if v == nil {
		return
	}
	return *v, true
}

// OldInternalCode returns the old "internal_code" field's value of the OrderHeader entity.
// If the OrderHeader object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderHeaderMutation) OldInternalCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldInternalCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldInternalCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInternalCode: %w", err)
	}
	return oldValue.InternalCode, nil
}

// ClearInternalCode clears the value of the "internal_code" field.
func (m *OrderHeaderMutation) ClearInternalCode() {
	m.internal_code = nil
	m.clearedFields[orderheader.FieldInternalCode] = struct{}{}
}

// InternalCodeCleared returns if the "internal_code" field was cleared in this mutation.
func (m *OrderHeaderMutation) InternalCodeCleared() bool {
	_, ok := m.clearedFields[orderheader.FieldInternalCode]
	return ok
}

// ResetInternalCode resets all changes to the "internal_code" field.
func (m *OrderHeaderMutation) ResetInternalCode() {
	m.internal_code = nil
	delete(m.clearedFields, orderheader.FieldInternalCode)
}

// SetRemainingSubTotal sets the "remaining_sub_total" field.
func (m *OrderHeaderMutation) SetRemainingSubTotal(f float64) {
	m.remaining_sub_total = &f
	m.addremaining_sub_total = nil
}

// RemainingSubTotal returns the value of the "remaining_sub_total" field in the mutation.
func (m *OrderHeaderMutation) RemainingSubTotal() (r float64, exists bool) {
	v := m.remaining_sub_total
	if v == nil {
		return
	}
	return *v, true
}

// OldRemainingSubTotal returns the old "remaining_sub_total" field's value of the OrderHeader entity.
// If the OrderHeader object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderHeaderMutation) OldRemainingSubTotal(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRemainingSubTotal is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRemainingSubTotal requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemainingSubTotal: %w", err)
	}
	return oldValue.RemainingSubTotal, nil
}

// AddRemainingSubTotal adds f to the "remaining_sub_total" field.
func (m *OrderHeaderMutation) AddRemainingSubTotal(f float64) {
	if m.addremaining_sub_total != nil {
		*m.addremaining_sub_total += f
	} else {
		m.addremaining_sub_total = &f
	}
}

// AddedRemainingSubTotal returns the value that was added to the "remaining_sub_total" field in this mutation.
func (m *OrderHeaderMutation) AddedRemainingSubTotal() (r float64, exists bool) {
	v := m.addremaining_sub_total
	if v == nil {
		return
	}
	return *v, true
}

// ClearRemainingSubTotal clears the value of the "remaining_sub_total" field.
func (m *OrderHeaderMutation) ClearRemainingSubTotal() {
	m.remaining_sub_total = nil
	m.addremaining_sub_total = nil
	m.clearedFields[orderheader.FieldRemainingSubTotal] = struct{}{}
}

// RemainingSubTotalCleared returns if the "remaining_sub_total" field was cleared in this mutation.
func (m *OrderHeaderMutation) RemainingSubTotalCleared() bool {
	_, ok := m.clearedFields[orderheader.FieldRemainingSubTotal]
	return ok
}

// ResetRemainingSubTotal resets all changes to the "remaining_sub_total" field.
func (m *OrderHeaderMutation) ResetRemainingSubTotal() {
	m.remaining_sub_total = nil
	m.addremaining_sub_total = nil
	delete(m.clearedFields, orderheader.FieldRemainingSubTotal)
}

// SetGrandTotal sets the "grand_total" field.
func (m *OrderHeaderMutation) SetGrandTotal(f float64) {
	m.grand_total = &f
	m.addgrand_total = nil
}

// GrandTotal returns the value of the "grand_total" field in the mutation.
func (m *OrderHeaderMutation) GrandTotal() (r float64, exists bool) {
	v := m.grand_total
	if v == nil {
		return
	}
	return *v, true
}

// OldGrandTotal returns the old "grand_total" field's value of the OrderHeader entity.
// If the OrderHeader object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderHeaderMutation) OldGrandTotal(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldGrandTotal is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldGrandTotal requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGrandTotal: %w", err)
	}
	return oldValue.GrandTotal, nil
}

// AddGrandTotal adds f to the "grand_total" field.
func (m *OrderHeaderMutation) AddGrandTotal(f float64) {
	if m.addgrand_total != nil {
		*m.addgrand_total += f
	} else {
		m.addgrand_total = &f
	}
}

// AddedGrandTotal returns the value that was added to the "grand_total" field in this mutation.
func (m *OrderHeaderMutation) AddedGrandTotal() (r float64, exists bool) {
	v := m.addgrand_total
	if v == nil {
		return
	}
	return *v, true
}

// ClearGrandTotal clears the value of the "grand_total" field.
func (m *OrderHeaderMutation) ClearGrandTotal() {
	m.grand_total = nil
	m.addgrand_total = nil
	m.clearedFields[orderheader.FieldGrandTotal] = struct{}{}
}

// GrandTotalCleared returns if the "grand_total" field was cleared in this mutation.
func (m *OrderHeaderMutation) GrandTotalCleared() bool {
	_, ok := m.clearedFields[orderheader.FieldGrandTotal]
	return ok
}

// ResetGrandTotal resets all changes to the "grand_total" field.
func (m *OrderHeaderMutation) ResetGrandTotal() {
	m.grand_total = nil
	m.addgrand_total = nil
	delete(m.clearedFields, orderheader.FieldGrandTotal)
}

// SetIsViewed sets the "is_viewed" field.
func (m *OrderHeaderMutation) SetIsViewed(ov orderheader.IsViewed) {
	m.is_viewed = &ov
}

// IsViewed returns the value of the "is_viewed" field in the mutation.
func (m *OrderHeaderMutation) IsViewed() (r orderheader.IsViewed, exists bool) {
	v := m.is_viewed
	if v == nil {
		return
	}
	return *v, true
}

// OldIsViewed returns the old "is_viewed" field's value of the OrderHeader entity.
// If the OrderHeader object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderHeaderMutation) OldIsViewed(ctx context.Context) (v orderheader.IsViewed, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldIsViewed is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldIsViewed requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsViewed: %w", err)
	}
	return oldValue.IsViewed, nil
}

// ClearIsViewed clears the value of the "is_viewed" field.
func (m *OrderHeaderMutation) ClearIsViewed() {
	m.is_viewed = nil
	m.clearedFields[orderheader.FieldIsViewed] = struct{}{}
}

// IsViewedCleared returns if the "is_viewed" field was cleared in this mutation.
func (m *OrderHeaderMutation) IsViewedCleared() bool {
	_, ok := m.clearedFields[orderheader.FieldIsViewed]
	return ok
}

// ResetIsViewed resets all changes to the "is_viewed" field.
func (m *OrderHeaderMutation) ResetIsViewed() {
	m.is_viewed = nil
	delete(m.clearedFields, orderheader.FieldIsViewed)
}

// SetInvoicePerShipment sets the "invoice_per_shipment" field.
func (m *OrderHeaderMutation) SetInvoicePerShipment(ops orderheader.InvoicePerShipment) {
	m.invoice_per_shipment = &ops
}

// InvoicePerShipment returns the value of the "invoice_per_shipment" field in the mutation.
func (m *OrderHeaderMutation) InvoicePerShipment() (r orderheader.InvoicePerShipment, exists bool) {
	v := m.invoice_per_shipment
	if v == nil {
		return
	}
	return *v, true
}

// OldInvoicePerShipment returns the old "invoice_per_shipment" field's value of the OrderHeader entity.
// If the OrderHeader object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderHeaderMutation) OldInvoicePerShipment(ctx context.Context) (v orderheader.InvoicePerShipment, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldInvoicePerShipment is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldInvoicePerShipment requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInvoicePerShipment: %w", err)
	}
	return oldValue.InvoicePerShipment, nil
}

// ClearInvoicePerShipment clears the value of the "invoice_per_shipment" field.
func (m *OrderHeaderMutation) ClearInvoicePerShipment() {
	m.invoice_per_shipment = nil
	m.clearedFields[orderheader.FieldInvoicePerShipment] = struct{}{}
}

// InvoicePerShipmentCleared returns if the "invoice_per_shipment" field was cleared in this mutation.
func (m *OrderHeaderMutation) InvoicePerShipmentCleared() bool {
	_, ok := m.clearedFields[orderheader.FieldInvoicePerShipment]
	return ok
}

// ResetInvoicePerShipment resets all changes to the "invoice_per_shipment" field.
func (m *OrderHeaderMutation) ResetInvoicePerShipment() {
	m.invoice_per_shipment = nil
	delete(m.clearedFields, orderheader.FieldInvoicePerShipment)
}

// AddItemIssuanceIDs adds the "item_issuances" edge to the ItemIssuance entity by ids.
func (m *OrderHeaderMutation) AddItemIssuanceIDs(ids ...int) {
	if m.item_issuances == nil {
		m.item_issuances = make(map[int]struct{})
	}
	for i := range ids {
		m.item_issuances[ids[i]] = struct{}{}
	}
}

// ClearItemIssuances clears the "item_issuances" edge to the ItemIssuance entity.
func (m *OrderHeaderMutation) ClearItemIssuances() {
	m.cleareditem_issuances = true
}

// ItemIssuancesCleared reports if the "item_issuances" edge to the ItemIssuance entity was cleared.
func (m *OrderHeaderMutation) ItemIssuancesCleared() bool {
	return m.cleareditem_issuances
}

// RemoveItemIssuanceIDs removes the "item_issuances" edge to the ItemIssuance entity by IDs.
func (m *OrderHeaderMutation) RemoveItemIssuanceIDs(ids ...int) {
	if m.removeditem_issuances == nil {
		m.removeditem_issuances = make(map[int]struct{})
	}
	for i := range ids {
		m.removeditem_issuances[ids[i]] = struct{}{}
	}
}

// RemovedItemIssuances returns the removed IDs of the "item_issuances" edge to the ItemIssuance entity.
func (m *OrderHeaderMutation) RemovedItemIssuancesIDs() (ids []int) {
	for id := range m.removeditem_issuances {
		ids = append(ids, id)
	}
	return
}

// ItemIssuancesIDs returns the "item_issuances" edge IDs in the mutation.
func (m *OrderHeaderMutation) ItemIssuancesIDs() (ids []int) {
	for id := range m.item_issuances {
		ids = append(ids, id)
	}
	return
}

// ResetItemIssuances resets all changes to the "item_issuances" edge.
func (m *OrderHeaderMutation) ResetItemIssuances() {
	m.item_issuances = nil
	m.cleareditem_issuances = false
	m.removeditem_issuances = nil
}

// AddOrderContactMechIDs adds the "order_contact_meches" edge to the OrderContactMech entity by ids.
func (m *OrderHeaderMutation) AddOrderContactMechIDs(ids ...int) {
	if m.order_contact_meches == nil {
		m.order_contact_meches = make(map[int]struct{})
	}
	for i := range ids {
		m.order_contact_meches[ids[i]] = struct{}{}
	}
}

// ClearOrderContactMeches clears the "order_contact_meches" edge to the OrderContactMech entity.
func (m *OrderHeaderMutation) ClearOrderContactMeches() {
	m.clearedorder_contact_meches = true
}

// OrderContactMechesCleared reports if the "order_contact_meches" edge to the OrderContactMech entity was cleared.
func (m *OrderHeaderMutation) OrderContactMechesCleared() bool {
	return m.clearedorder_contact_meches
}

// RemoveOrderContactMechIDs removes the "order_contact_meches" edge to the OrderContactMech entity by IDs.
func (m *OrderHeaderMutation) RemoveOrderContactMechIDs(ids ...int) {
	if m.removedorder_contact_meches == nil {
		m.removedorder_contact_meches = make(map[int]struct{})
	}
	for i := range ids {
		m.removedorder_contact_meches[ids[i]] = struct{}{}
	}
}

// RemovedOrderContactMeches returns the removed IDs of the "order_contact_meches" edge to the OrderContactMech entity.
func (m *OrderHeaderMutation) RemovedOrderContactMechesIDs() (ids []int) {
	for id := range m.removedorder_contact_meches {
		ids = append(ids, id)
	}
	return
}

// OrderContactMechesIDs returns the "order_contact_meches" edge IDs in the mutation.
func (m *OrderHeaderMutation) OrderContactMechesIDs() (ids []int) {
	for id := range m.order_contact_meches {
		ids = append(ids, id)
	}
	return
}

// ResetOrderContactMeches resets all changes to the "order_contact_meches" edge.
func (m *OrderHeaderMutation) ResetOrderContactMeches() {
	m.order_contact_meches = nil
	m.clearedorder_contact_meches = false
	m.removedorder_contact_meches = nil
}

// AddOrderItemIDs adds the "order_items" edge to the OrderItem entity by ids.
func (m *OrderHeaderMutation) AddOrderItemIDs(ids ...int) {
	if m.order_items == nil {
		m.order_items = make(map[int]struct{})
	}
	for i := range ids {
		m.order_items[ids[i]] = struct{}{}
	}
}

// ClearOrderItems clears the "order_items" edge to the OrderItem entity.
func (m *OrderHeaderMutation) ClearOrderItems() {
	m.clearedorder_items = true
}

// OrderItemsCleared reports if the "order_items" edge to the OrderItem entity was cleared.
func (m *OrderHeaderMutation) OrderItemsCleared() bool {
	return m.clearedorder_items
}

// RemoveOrderItemIDs removes the "order_items" edge to the OrderItem entity by IDs.
func (m *OrderHeaderMutation) RemoveOrderItemIDs(ids ...int) {
	if m.removedorder_items == nil {
		m.removedorder_items = make(map[int]struct{})
	}
	for i := range ids {
		m.removedorder_items[ids[i]] = struct{}{}
	}
}

// RemovedOrderItems returns the removed IDs of the "order_items" edge to the OrderItem entity.
func (m *OrderHeaderMutation) RemovedOrderItemsIDs() (ids []int) {
	for id := range m.removedorder_items {
		ids = append(ids, id)
	}
	return
}

// OrderItemsIDs returns the "order_items" edge IDs in the mutation.
func (m *OrderHeaderMutation) OrderItemsIDs() (ids []int) {
	for id := range m.order_items {
		ids = append(ids, id)
	}
	return
}

// ResetOrderItems resets all changes to the "order_items" edge.
func (m *OrderHeaderMutation) ResetOrderItems() {
	m.order_items = nil
	m.clearedorder_items = false
	m.removedorder_items = nil
}

// AddOrderItemPriceInfoIDs adds the "order_item_price_infos" edge to the OrderItemPriceInfo entity by ids.
func (m *OrderHeaderMutation) AddOrderItemPriceInfoIDs(ids ...int) {
	if m.order_item_price_infos == nil {
		m.order_item_price_infos = make(map[int]struct{})
	}
	for i := range ids {
		m.order_item_price_infos[ids[i]] = struct{}{}
	}
}

// ClearOrderItemPriceInfos clears the "order_item_price_infos" edge to the OrderItemPriceInfo entity.
func (m *OrderHeaderMutation) ClearOrderItemPriceInfos() {
	m.clearedorder_item_price_infos = true
}

// OrderItemPriceInfosCleared reports if the "order_item_price_infos" edge to the OrderItemPriceInfo entity was cleared.
func (m *OrderHeaderMutation) OrderItemPriceInfosCleared() bool {
	return m.clearedorder_item_price_infos
}

// RemoveOrderItemPriceInfoIDs removes the "order_item_price_infos" edge to the OrderItemPriceInfo entity by IDs.
func (m *OrderHeaderMutation) RemoveOrderItemPriceInfoIDs(ids ...int) {
	if m.removedorder_item_price_infos == nil {
		m.removedorder_item_price_infos = make(map[int]struct{})
	}
	for i := range ids {
		m.removedorder_item_price_infos[ids[i]] = struct{}{}
	}
}

// RemovedOrderItemPriceInfos returns the removed IDs of the "order_item_price_infos" edge to the OrderItemPriceInfo entity.
func (m *OrderHeaderMutation) RemovedOrderItemPriceInfosIDs() (ids []int) {
	for id := range m.removedorder_item_price_infos {
		ids = append(ids, id)
	}
	return
}

// OrderItemPriceInfosIDs returns the "order_item_price_infos" edge IDs in the mutation.
func (m *OrderHeaderMutation) OrderItemPriceInfosIDs() (ids []int) {
	for id := range m.order_item_price_infos {
		ids = append(ids, id)
	}
	return
}

// ResetOrderItemPriceInfos resets all changes to the "order_item_price_infos" edge.
func (m *OrderHeaderMutation) ResetOrderItemPriceInfos() {
	m.order_item_price_infos = nil
	m.clearedorder_item_price_infos = false
	m.removedorder_item_price_infos = nil
}

// AddOrderItemShipGroupIDs adds the "order_item_ship_groups" edge to the OrderItemShipGroup entity by ids.
func (m *OrderHeaderMutation) AddOrderItemShipGroupIDs(ids ...int) {
	if m.order_item_ship_groups == nil {
		m.order_item_ship_groups = make(map[int]struct{})
	}
	for i := range ids {
		m.order_item_ship_groups[ids[i]] = struct{}{}
	}
}

// ClearOrderItemShipGroups clears the "order_item_ship_groups" edge to the OrderItemShipGroup entity.
func (m *OrderHeaderMutation) ClearOrderItemShipGroups() {
	m.clearedorder_item_ship_groups = true
}

// OrderItemShipGroupsCleared reports if the "order_item_ship_groups" edge to the OrderItemShipGroup entity was cleared.
func (m *OrderHeaderMutation) OrderItemShipGroupsCleared() bool {
	return m.clearedorder_item_ship_groups
}

// RemoveOrderItemShipGroupIDs removes the "order_item_ship_groups" edge to the OrderItemShipGroup entity by IDs.
func (m *OrderHeaderMutation) RemoveOrderItemShipGroupIDs(ids ...int) {
	if m.removedorder_item_ship_groups == nil {
		m.removedorder_item_ship_groups = make(map[int]struct{})
	}
	for i := range ids {
		m.removedorder_item_ship_groups[ids[i]] = struct{}{}
	}
}

// RemovedOrderItemShipGroups returns the removed IDs of the "order_item_ship_groups" edge to the OrderItemShipGroup entity.
func (m *OrderHeaderMutation) RemovedOrderItemShipGroupsIDs() (ids []int) {
	for id := range m.removedorder_item_ship_groups {
		ids = append(ids, id)
	}
	return
}

// OrderItemShipGroupsIDs returns the "order_item_ship_groups" edge IDs in the mutation.
func (m *OrderHeaderMutation) OrderItemShipGroupsIDs() (ids []int) {
	for id := range m.order_item_ship_groups {
		ids = append(ids, id)
	}
	return
}

// ResetOrderItemShipGroups resets all changes to the "order_item_ship_groups" edge.
func (m *OrderHeaderMutation) ResetOrderItemShipGroups() {
	m.order_item_ship_groups = nil
	m.clearedorder_item_ship_groups = false
	m.removedorder_item_ship_groups = nil
}

// AddOrderItemShipGroupAssocIDs adds the "order_item_ship_group_assocs" edge to the OrderItemShipGroupAssoc entity by ids.
func (m *OrderHeaderMutation) AddOrderItemShipGroupAssocIDs(ids ...int) {
	if m.order_item_ship_group_assocs == nil {
		m.order_item_ship_group_assocs = make(map[int]struct{})
	}
	for i := range ids {
		m.order_item_ship_group_assocs[ids[i]] = struct{}{}
	}
}

// ClearOrderItemShipGroupAssocs clears the "order_item_ship_group_assocs" edge to the OrderItemShipGroupAssoc entity.
func (m *OrderHeaderMutation) ClearOrderItemShipGroupAssocs() {
	m.clearedorder_item_ship_group_assocs = true
}

// OrderItemShipGroupAssocsCleared reports if the "order_item_ship_group_assocs" edge to the OrderItemShipGroupAssoc entity was cleared.
func (m *OrderHeaderMutation) OrderItemShipGroupAssocsCleared() bool {
	return m.clearedorder_item_ship_group_assocs
}

// RemoveOrderItemShipGroupAssocIDs removes the "order_item_ship_group_assocs" edge to the OrderItemShipGroupAssoc entity by IDs.
func (m *OrderHeaderMutation) RemoveOrderItemShipGroupAssocIDs(ids ...int) {
	if m.removedorder_item_ship_group_assocs == nil {
		m.removedorder_item_ship_group_assocs = make(map[int]struct{})
	}
	for i := range ids {
		m.removedorder_item_ship_group_assocs[ids[i]] = struct{}{}
	}
}

// RemovedOrderItemShipGroupAssocs returns the removed IDs of the "order_item_ship_group_assocs" edge to the OrderItemShipGroupAssoc entity.
func (m *OrderHeaderMutation) RemovedOrderItemShipGroupAssocsIDs() (ids []int) {
	for id := range m.removedorder_item_ship_group_assocs {
		ids = append(ids, id)
	}
	return
}

// OrderItemShipGroupAssocsIDs returns the "order_item_ship_group_assocs" edge IDs in the mutation.
func (m *OrderHeaderMutation) OrderItemShipGroupAssocsIDs() (ids []int) {
	for id := range m.order_item_ship_group_assocs {
		ids = append(ids, id)
	}
	return
}

// ResetOrderItemShipGroupAssocs resets all changes to the "order_item_ship_group_assocs" edge.
func (m *OrderHeaderMutation) ResetOrderItemShipGroupAssocs() {
	m.order_item_ship_group_assocs = nil
	m.clearedorder_item_ship_group_assocs = false
	m.removedorder_item_ship_group_assocs = nil
}

// AddOrderRoleIDs adds the "order_roles" edge to the OrderRole entity by ids.
func (m *OrderHeaderMutation) AddOrderRoleIDs(ids ...int) {
	if m.order_roles == nil {
		m.order_roles = make(map[int]struct{})
	}
	for i := range ids {
		m.order_roles[ids[i]] = struct{}{}
	}
}

// ClearOrderRoles clears the "order_roles" edge to the OrderRole entity.
func (m *OrderHeaderMutation) ClearOrderRoles() {
	m.clearedorder_roles = true
}

// OrderRolesCleared reports if the "order_roles" edge to the OrderRole entity was cleared.
func (m *OrderHeaderMutation) OrderRolesCleared() bool {
	return m.clearedorder_roles
}

// RemoveOrderRoleIDs removes the "order_roles" edge to the OrderRole entity by IDs.
func (m *OrderHeaderMutation) RemoveOrderRoleIDs(ids ...int) {
	if m.removedorder_roles == nil {
		m.removedorder_roles = make(map[int]struct{})
	}
	for i := range ids {
		m.removedorder_roles[ids[i]] = struct{}{}
	}
}

// RemovedOrderRoles returns the removed IDs of the "order_roles" edge to the OrderRole entity.
func (m *OrderHeaderMutation) RemovedOrderRolesIDs() (ids []int) {
	for id := range m.removedorder_roles {
		ids = append(ids, id)
	}
	return
}

// OrderRolesIDs returns the "order_roles" edge IDs in the mutation.
func (m *OrderHeaderMutation) OrderRolesIDs() (ids []int) {
	for id := range m.order_roles {
		ids = append(ids, id)
	}
	return
}

// ResetOrderRoles resets all changes to the "order_roles" edge.
func (m *OrderHeaderMutation) ResetOrderRoles() {
	m.order_roles = nil
	m.clearedorder_roles = false
	m.removedorder_roles = nil
}

// AddOrderStatusIDs adds the "order_statuses" edge to the OrderStatus entity by ids.
func (m *OrderHeaderMutation) AddOrderStatusIDs(ids ...int) {
	if m.order_statuses == nil {
		m.order_statuses = make(map[int]struct{})
	}
	for i := range ids {
		m.order_statuses[ids[i]] = struct{}{}
	}
}

// ClearOrderStatuses clears the "order_statuses" edge to the OrderStatus entity.
func (m *OrderHeaderMutation) ClearOrderStatuses() {
	m.clearedorder_statuses = true
}

// OrderStatusesCleared reports if the "order_statuses" edge to the OrderStatus entity was cleared.
func (m *OrderHeaderMutation) OrderStatusesCleared() bool {
	return m.clearedorder_statuses
}

// RemoveOrderStatusIDs removes the "order_statuses" edge to the OrderStatus entity by IDs.
func (m *OrderHeaderMutation) RemoveOrderStatusIDs(ids ...int) {
	if m.removedorder_statuses == nil {
		m.removedorder_statuses = make(map[int]struct{})
	}
	for i := range ids {
		m.removedorder_statuses[ids[i]] = struct{}{}
	}
}

// RemovedOrderStatuses returns the removed IDs of the "order_statuses" edge to the OrderStatus entity.
func (m *OrderHeaderMutation) RemovedOrderStatusesIDs() (ids []int) {
	for id := range m.removedorder_statuses {
		ids = append(ids, id)
	}
	return
}

// OrderStatusesIDs returns the "order_statuses" edge IDs in the mutation.
func (m *OrderHeaderMutation) OrderStatusesIDs() (ids []int) {
	for id := range m.order_statuses {
		ids = append(ids, id)
	}
	return
}

// ResetOrderStatuses resets all changes to the "order_statuses" edge.
func (m *OrderHeaderMutation) ResetOrderStatuses() {
	m.order_statuses = nil
	m.clearedorder_statuses = false
	m.removedorder_statuses = nil
}

// AddPrimaryShipmentIDs adds the "primary_shipments" edge to the Shipment entity by ids.
func (m *OrderHeaderMutation) AddPrimaryShipmentIDs(ids ...int) {
	if m.primary_shipments == nil {
		m.primary_shipments = make(map[int]struct{})
	}
	for i := range ids {
		m.primary_shipments[ids[i]] = struct{}{}
	}
}

// ClearPrimaryShipments clears the "primary_shipments" edge to the Shipment entity.
func (m *OrderHeaderMutation) ClearPrimaryShipments() {
	m.clearedprimary_shipments = true
}

// PrimaryShipmentsCleared reports if the "primary_shipments" edge to the Shipment entity was cleared.
func (m *OrderHeaderMutation) PrimaryShipmentsCleared() bool {
	return m.clearedprimary_shipments
}

// RemovePrimaryShipmentIDs removes the "primary_shipments" edge to the Shipment entity by IDs.
func (m *OrderHeaderMutation) RemovePrimaryShipmentIDs(ids ...int) {
	if m.removedprimary_shipments == nil {
		m.removedprimary_shipments = make(map[int]struct{})
	}
	for i := range ids {
		m.removedprimary_shipments[ids[i]] = struct{}{}
	}
}

// RemovedPrimaryShipments returns the removed IDs of the "primary_shipments" edge to the Shipment entity.
func (m *OrderHeaderMutation) RemovedPrimaryShipmentsIDs() (ids []int) {
	for id := range m.removedprimary_shipments {
		ids = append(ids, id)
	}
	return
}

// PrimaryShipmentsIDs returns the "primary_shipments" edge IDs in the mutation.
func (m *OrderHeaderMutation) PrimaryShipmentsIDs() (ids []int) {
	for id := range m.primary_shipments {
		ids = append(ids, id)
	}
	return
}

// ResetPrimaryShipments resets all changes to the "primary_shipments" edge.
func (m *OrderHeaderMutation) ResetPrimaryShipments() {
	m.primary_shipments = nil
	m.clearedprimary_shipments = false
	m.removedprimary_shipments = nil
}

// Op returns the operation name.
func (m *OrderHeaderMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (OrderHeader).
func (m *OrderHeaderMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *OrderHeaderMutation) Fields() []string {
	fields := make([]string, 0, 31)
	if m.create_time != nil {
		fields = append(fields, orderheader.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, orderheader.FieldUpdateTime)
	}
	if m.order_type_id != nil {
		fields = append(fields, orderheader.FieldOrderTypeID)
	}
	if m.order_name != nil {
		fields = append(fields, orderheader.FieldOrderName)
	}
	if m.external_id != nil {
		fields = append(fields, orderheader.FieldExternalID)
	}
	if m.sales_channel_enum_id != nil {
		fields = append(fields, orderheader.FieldSalesChannelEnumID)
	}
	if m.order_date != nil {
		fields = append(fields, orderheader.FieldOrderDate)
	}
	if m.priority != nil {
		fields = append(fields, orderheader.FieldPriority)
	}
	if m.entry_date != nil {
		fields = append(fields, orderheader.FieldEntryDate)
	}
	if m.pick_sheet_printed_date != nil {
		fields = append(fields, orderheader.FieldPickSheetPrintedDate)
	}
	if m.visit_id != nil {
		fields = append(fields, orderheader.FieldVisitID)
	}
	if m.status_id != nil {
		fields = append(fields, orderheader.FieldStatusID)
	}
	if m.created_by != nil {
		fields = append(fields, orderheader.FieldCreatedBy)
	}
	if m.first_attempt_order_id != nil {
		fields = append(fields, orderheader.FieldFirstAttemptOrderID)
	}
	if m.currency_uom != nil {
		fields = append(fields, orderheader.FieldCurrencyUom)
	}
	if m.sync_status_id != nil {
		fields = append(fields, orderheader.FieldSyncStatusID)
	}
	if m.billing_account_id != nil {
		fields = append(fields, orderheader.FieldBillingAccountID)
	}
	if m.origin_facility_id != nil {
		fields = append(fields, orderheader.FieldOriginFacilityID)
	}
	if m.web_site_id != nil {
		fields = append(fields, orderheader.FieldWebSiteID)
	}
	if m.product_store_id != nil {
		fields = append(fields, orderheader.FieldProductStoreID)
	}
	if m.agreement_id != nil {
		fields = append(fields, orderheader.FieldAgreementID)
	}
	if m.terminal_id != nil {
		fields = append(fields, orderheader.FieldTerminalID)
	}
	if m.transaction_id != nil {
		fields = append(fields, orderheader.FieldTransactionID)
	}
	if m.auto_order_shopping_list_id != nil {
		fields = append(fields, orderheader.FieldAutoOrderShoppingListID)
	}
	if m.needs_inventory_issuance != nil {
		fields = append(fields, orderheader.FieldNeedsInventoryIssuance)
	}
	if m.is_rush_order != nil {
		fields = append(fields, orderheader.FieldIsRushOrder)
	}
	if m.internal_code != nil {
		fields = append(fields, orderheader.FieldInternalCode)
	}
	if m.remaining_sub_total != nil {
		fields = append(fields, orderheader.FieldRemainingSubTotal)
	}
	if m.grand_total != nil {
		fields = append(fields, orderheader.FieldGrandTotal)
	}
	if m.is_viewed != nil {
		fields = append(fields, orderheader.FieldIsViewed)
	}
	if m.invoice_per_shipment != nil {
		fields = append(fields, orderheader.FieldInvoicePerShipment)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *OrderHeaderMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case orderheader.FieldCreateTime:
		return m.CreateTime()
	case orderheader.FieldUpdateTime:
		return m.UpdateTime()
	case orderheader.FieldOrderTypeID:
		return m.OrderTypeID()
	case orderheader.FieldOrderName:
		return m.OrderName()
	case orderheader.FieldExternalID:
		return m.ExternalID()
	case orderheader.FieldSalesChannelEnumID:
		return m.SalesChannelEnumID()
	case orderheader.FieldOrderDate:
		return m.OrderDate()
	case orderheader.FieldPriority:
		return m.Priority()
	case orderheader.FieldEntryDate:
		return m.EntryDate()
	case orderheader.FieldPickSheetPrintedDate:
		return m.PickSheetPrintedDate()
	case orderheader.FieldVisitID:
		return m.VisitID()
	case orderheader.FieldStatusID:
		return m.StatusID()
	case orderheader.FieldCreatedBy:
		return m.CreatedBy()
	case orderheader.FieldFirstAttemptOrderID:
		return m.FirstAttemptOrderID()
	case orderheader.FieldCurrencyUom:
		return m.CurrencyUom()
	case orderheader.FieldSyncStatusID:
		return m.SyncStatusID()
	case orderheader.FieldBillingAccountID:
		return m.BillingAccountID()
	case orderheader.FieldOriginFacilityID:
		return m.OriginFacilityID()
	case orderheader.FieldWebSiteID:
		return m.WebSiteID()
	case orderheader.FieldProductStoreID:
		return m.ProductStoreID()
	case orderheader.FieldAgreementID:
		return m.AgreementID()
	case orderheader.FieldTerminalID:
		return m.TerminalID()
	case orderheader.FieldTransactionID:
		return m.TransactionID()
	case orderheader.FieldAutoOrderShoppingListID:
		return m.AutoOrderShoppingListID()
	case orderheader.FieldNeedsInventoryIssuance:
		return m.NeedsInventoryIssuance()
	case orderheader.FieldIsRushOrder:
		return m.IsRushOrder()
	case orderheader.FieldInternalCode:
		return m.InternalCode()
	case orderheader.FieldRemainingSubTotal:
		return m.RemainingSubTotal()
	case orderheader.FieldGrandTotal:
		return m.GrandTotal()
	case orderheader.FieldIsViewed:
		return m.IsViewed()
	case orderheader.FieldInvoicePerShipment:
		return m.InvoicePerShipment()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *OrderHeaderMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case orderheader.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case orderheader.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case orderheader.FieldOrderTypeID:
		return m.OldOrderTypeID(ctx)
	case orderheader.FieldOrderName:
		return m.OldOrderName(ctx)
	case orderheader.FieldExternalID:
		return m.OldExternalID(ctx)
	case orderheader.FieldSalesChannelEnumID:
		return m.OldSalesChannelEnumID(ctx)
	case orderheader.FieldOrderDate:
		return m.OldOrderDate(ctx)
	case orderheader.FieldPriority:
		return m.OldPriority(ctx)
	case orderheader.FieldEntryDate:
		return m.OldEntryDate(ctx)
	case orderheader.FieldPickSheetPrintedDate:
		return m.OldPickSheetPrintedDate(ctx)
	case orderheader.FieldVisitID:
		return m.OldVisitID(ctx)
	case orderheader.FieldStatusID:
		return m.OldStatusID(ctx)
	case orderheader.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case orderheader.FieldFirstAttemptOrderID:
		return m.OldFirstAttemptOrderID(ctx)
	case orderheader.FieldCurrencyUom:
		return m.OldCurrencyUom(ctx)
	case orderheader.FieldSyncStatusID:
		return m.OldSyncStatusID(ctx)
	case orderheader.FieldBillingAccountID:
		return m.OldBillingAccountID(ctx)
	case orderheader.FieldOriginFacilityID:
		return m.OldOriginFacilityID(ctx)
	case orderheader.FieldWebSiteID:
		return m.OldWebSiteID(ctx)
	case orderheader.FieldProductStoreID:
		return m.OldProductStoreID(ctx)
	case orderheader.FieldAgreementID:
		return m.OldAgreementID(ctx)
	case orderheader.FieldTerminalID:
		return m.OldTerminalID(ctx)
	case orderheader.FieldTransactionID:
		return m.OldTransactionID(ctx)
	case orderheader.FieldAutoOrderShoppingListID:
		return m.OldAutoOrderShoppingListID(ctx)
	case orderheader.FieldNeedsInventoryIssuance:
		return m.OldNeedsInventoryIssuance(ctx)
	case orderheader.FieldIsRushOrder:
		return m.OldIsRushOrder(ctx)
	case orderheader.FieldInternalCode:
		return m.OldInternalCode(ctx)
	case orderheader.FieldRemainingSubTotal:
		return m.OldRemainingSubTotal(ctx)
	case orderheader.FieldGrandTotal:
		return m.OldGrandTotal(ctx)
	case orderheader.FieldIsViewed:
		return m.OldIsViewed(ctx)
	case orderheader.FieldInvoicePerShipment:
		return m.OldInvoicePerShipment(ctx)
	}
	return nil, fmt.Errorf("unknown OrderHeader field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrderHeaderMutation) SetField(name string, value ent.Value) error {
	switch name {
	case orderheader.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case orderheader.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case orderheader.FieldOrderTypeID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrderTypeID(v)
		return nil
	case orderheader.FieldOrderName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrderName(v)
		return nil
	case orderheader.FieldExternalID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExternalID(v)
		return nil
	case orderheader.FieldSalesChannelEnumID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSalesChannelEnumID(v)
		return nil
	case orderheader.FieldOrderDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrderDate(v)
		return nil
	case orderheader.FieldPriority:
		v, ok := value.(orderheader.Priority)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPriority(v)
		return nil
	case orderheader.FieldEntryDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEntryDate(v)
		return nil
	case orderheader.FieldPickSheetPrintedDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPickSheetPrintedDate(v)
		return nil
	case orderheader.FieldVisitID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVisitID(v)
		return nil
	case orderheader.FieldStatusID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatusID(v)
		return nil
	case orderheader.FieldCreatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case orderheader.FieldFirstAttemptOrderID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFirstAttemptOrderID(v)
		return nil
	case orderheader.FieldCurrencyUom:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCurrencyUom(v)
		return nil
	case orderheader.FieldSyncStatusID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSyncStatusID(v)
		return nil
	case orderheader.FieldBillingAccountID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBillingAccountID(v)
		return nil
	case orderheader.FieldOriginFacilityID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOriginFacilityID(v)
		return nil
	case orderheader.FieldWebSiteID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWebSiteID(v)
		return nil
	case orderheader.FieldProductStoreID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProductStoreID(v)
		return nil
	case orderheader.FieldAgreementID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAgreementID(v)
		return nil
	case orderheader.FieldTerminalID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTerminalID(v)
		return nil
	case orderheader.FieldTransactionID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTransactionID(v)
		return nil
	case orderheader.FieldAutoOrderShoppingListID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAutoOrderShoppingListID(v)
		return nil
	case orderheader.FieldNeedsInventoryIssuance:
		v, ok := value.(orderheader.NeedsInventoryIssuance)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNeedsInventoryIssuance(v)
		return nil
	case orderheader.FieldIsRushOrder:
		v, ok := value.(orderheader.IsRushOrder)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsRushOrder(v)
		return nil
	case orderheader.FieldInternalCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInternalCode(v)
		return nil
	case orderheader.FieldRemainingSubTotal:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemainingSubTotal(v)
		return nil
	case orderheader.FieldGrandTotal:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGrandTotal(v)
		return nil
	case orderheader.FieldIsViewed:
		v, ok := value.(orderheader.IsViewed)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsViewed(v)
		return nil
	case orderheader.FieldInvoicePerShipment:
		v, ok := value.(orderheader.InvoicePerShipment)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInvoicePerShipment(v)
		return nil
	}
	return fmt.Errorf("unknown OrderHeader field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *OrderHeaderMutation) AddedFields() []string {
	var fields []string
	if m.addorder_type_id != nil {
		fields = append(fields, orderheader.FieldOrderTypeID)
	}
	if m.addexternal_id != nil {
		fields = append(fields, orderheader.FieldExternalID)
	}
	if m.addsales_channel_enum_id != nil {
		fields = append(fields, orderheader.FieldSalesChannelEnumID)
	}
	if m.addvisit_id != nil {
		fields = append(fields, orderheader.FieldVisitID)
	}
	if m.addstatus_id != nil {
		fields = append(fields, orderheader.FieldStatusID)
	}
	if m.addfirst_attempt_order_id != nil {
		fields = append(fields, orderheader.FieldFirstAttemptOrderID)
	}
	if m.addcurrency_uom != nil {
		fields = append(fields, orderheader.FieldCurrencyUom)
	}
	if m.addsync_status_id != nil {
		fields = append(fields, orderheader.FieldSyncStatusID)
	}
	if m.addbilling_account_id != nil {
		fields = append(fields, orderheader.FieldBillingAccountID)
	}
	if m.addorigin_facility_id != nil {
		fields = append(fields, orderheader.FieldOriginFacilityID)
	}
	if m.addweb_site_id != nil {
		fields = append(fields, orderheader.FieldWebSiteID)
	}
	if m.addproduct_store_id != nil {
		fields = append(fields, orderheader.FieldProductStoreID)
	}
	if m.addagreement_id != nil {
		fields = append(fields, orderheader.FieldAgreementID)
	}
	if m.addauto_order_shopping_list_id != nil {
		fields = append(fields, orderheader.FieldAutoOrderShoppingListID)
	}
	if m.addremaining_sub_total != nil {
		fields = append(fields, orderheader.FieldRemainingSubTotal)
	}
	if m.addgrand_total != nil {
		fields = append(fields, orderheader.FieldGrandTotal)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *OrderHeaderMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case orderheader.FieldOrderTypeID:
		return m.AddedOrderTypeID()
	case orderheader.FieldExternalID:
		return m.AddedExternalID()
	case orderheader.FieldSalesChannelEnumID:
		return m.AddedSalesChannelEnumID()
	case orderheader.FieldVisitID:
		return m.AddedVisitID()
	case orderheader.FieldStatusID:
		return m.AddedStatusID()
	case orderheader.FieldFirstAttemptOrderID:
		return m.AddedFirstAttemptOrderID()
	case orderheader.FieldCurrencyUom:
		return m.AddedCurrencyUom()
	case orderheader.FieldSyncStatusID:
		return m.AddedSyncStatusID()
	case orderheader.FieldBillingAccountID:
		return m.AddedBillingAccountID()
	case orderheader.FieldOriginFacilityID:
		return m.AddedOriginFacilityID()
	case orderheader.FieldWebSiteID:
		return m.AddedWebSiteID()
	case orderheader.FieldProductStoreID:
		return m.AddedProductStoreID()
	case orderheader.FieldAgreementID:
		return m.AddedAgreementID()
	case orderheader.FieldAutoOrderShoppingListID:
		return m.AddedAutoOrderShoppingListID()
	case orderheader.FieldRemainingSubTotal:
		return m.AddedRemainingSubTotal()
	case orderheader.FieldGrandTotal:
		return m.AddedGrandTotal()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrderHeaderMutation) AddField(name string, value ent.Value) error {
	switch name {
	case orderheader.FieldOrderTypeID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOrderTypeID(v)
		return nil
	case orderheader.FieldExternalID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddExternalID(v)
		return nil
	case orderheader.FieldSalesChannelEnumID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSalesChannelEnumID(v)
		return nil
	case orderheader.FieldVisitID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddVisitID(v)
		return nil
	case orderheader.FieldStatusID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatusID(v)
		return nil
	case orderheader.FieldFirstAttemptOrderID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddFirstAttemptOrderID(v)
		return nil
	case orderheader.FieldCurrencyUom:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCurrencyUom(v)
		return nil
	case orderheader.FieldSyncStatusID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSyncStatusID(v)
		return nil
	case orderheader.FieldBillingAccountID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddBillingAccountID(v)
		return nil
	case orderheader.FieldOriginFacilityID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOriginFacilityID(v)
		return nil
	case orderheader.FieldWebSiteID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddWebSiteID(v)
		return nil
	case orderheader.FieldProductStoreID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddProductStoreID(v)
		return nil
	case orderheader.FieldAgreementID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAgreementID(v)
		return nil
	case orderheader.FieldAutoOrderShoppingListID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAutoOrderShoppingListID(v)
		return nil
	case orderheader.FieldRemainingSubTotal:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRemainingSubTotal(v)
		return nil
	case orderheader.FieldGrandTotal:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddGrandTotal(v)
		return nil
	}
	return fmt.Errorf("unknown OrderHeader numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *OrderHeaderMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(orderheader.FieldOrderTypeID) {
		fields = append(fields, orderheader.FieldOrderTypeID)
	}
	if m.FieldCleared(orderheader.FieldOrderName) {
		fields = append(fields, orderheader.FieldOrderName)
	}
	if m.FieldCleared(orderheader.FieldExternalID) {
		fields = append(fields, orderheader.FieldExternalID)
	}
	if m.FieldCleared(orderheader.FieldSalesChannelEnumID) {
		fields = append(fields, orderheader.FieldSalesChannelEnumID)
	}
	if m.FieldCleared(orderheader.FieldOrderDate) {
		fields = append(fields, orderheader.FieldOrderDate)
	}
	if m.FieldCleared(orderheader.FieldPriority) {
		fields = append(fields, orderheader.FieldPriority)
	}
	if m.FieldCleared(orderheader.FieldEntryDate) {
		fields = append(fields, orderheader.FieldEntryDate)
	}
	if m.FieldCleared(orderheader.FieldPickSheetPrintedDate) {
		fields = append(fields, orderheader.FieldPickSheetPrintedDate)
	}
	if m.FieldCleared(orderheader.FieldVisitID) {
		fields = append(fields, orderheader.FieldVisitID)
	}
	if m.FieldCleared(orderheader.FieldStatusID) {
		fields = append(fields, orderheader.FieldStatusID)
	}
	if m.FieldCleared(orderheader.FieldCreatedBy) {
		fields = append(fields, orderheader.FieldCreatedBy)
	}
	if m.FieldCleared(orderheader.FieldFirstAttemptOrderID) {
		fields = append(fields, orderheader.FieldFirstAttemptOrderID)
	}
	if m.FieldCleared(orderheader.FieldCurrencyUom) {
		fields = append(fields, orderheader.FieldCurrencyUom)
	}
	if m.FieldCleared(orderheader.FieldSyncStatusID) {
		fields = append(fields, orderheader.FieldSyncStatusID)
	}
	if m.FieldCleared(orderheader.FieldBillingAccountID) {
		fields = append(fields, orderheader.FieldBillingAccountID)
	}
	if m.FieldCleared(orderheader.FieldOriginFacilityID) {
		fields = append(fields, orderheader.FieldOriginFacilityID)
	}
	if m.FieldCleared(orderheader.FieldWebSiteID) {
		fields = append(fields, orderheader.FieldWebSiteID)
	}
	if m.FieldCleared(orderheader.FieldProductStoreID) {
		fields = append(fields, orderheader.FieldProductStoreID)
	}
	if m.FieldCleared(orderheader.FieldAgreementID) {
		fields = append(fields, orderheader.FieldAgreementID)
	}
	if m.FieldCleared(orderheader.FieldTerminalID) {
		fields = append(fields, orderheader.FieldTerminalID)
	}
	if m.FieldCleared(orderheader.FieldTransactionID) {
		fields = append(fields, orderheader.FieldTransactionID)
	}
	if m.FieldCleared(orderheader.FieldAutoOrderShoppingListID) {
		fields = append(fields, orderheader.FieldAutoOrderShoppingListID)
	}
	if m.FieldCleared(orderheader.FieldNeedsInventoryIssuance) {
		fields = append(fields, orderheader.FieldNeedsInventoryIssuance)
	}
	if m.FieldCleared(orderheader.FieldIsRushOrder) {
		fields = append(fields, orderheader.FieldIsRushOrder)
	}
	if m.FieldCleared(orderheader.FieldInternalCode) {
		fields = append(fields, orderheader.FieldInternalCode)
	}
	if m.FieldCleared(orderheader.FieldRemainingSubTotal) {
		fields = append(fields, orderheader.FieldRemainingSubTotal)
	}
	if m.FieldCleared(orderheader.FieldGrandTotal) {
		fields = append(fields, orderheader.FieldGrandTotal)
	}
	if m.FieldCleared(orderheader.FieldIsViewed) {
		fields = append(fields, orderheader.FieldIsViewed)
	}
	if m.FieldCleared(orderheader.FieldInvoicePerShipment) {
		fields = append(fields, orderheader.FieldInvoicePerShipment)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *OrderHeaderMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *OrderHeaderMutation) ClearField(name string) error {
	switch name {
	case orderheader.FieldOrderTypeID:
		m.ClearOrderTypeID()
		return nil
	case orderheader.FieldOrderName:
		m.ClearOrderName()
		return nil
	case orderheader.FieldExternalID:
		m.ClearExternalID()
		return nil
	case orderheader.FieldSalesChannelEnumID:
		m.ClearSalesChannelEnumID()
		return nil
	case orderheader.FieldOrderDate:
		m.ClearOrderDate()
		return nil
	case orderheader.FieldPriority:
		m.ClearPriority()
		return nil
	case orderheader.FieldEntryDate:
		m.ClearEntryDate()
		return nil
	case orderheader.FieldPickSheetPrintedDate:
		m.ClearPickSheetPrintedDate()
		return nil
	case orderheader.FieldVisitID:
		m.ClearVisitID()
		return nil
	case orderheader.FieldStatusID:
		m.ClearStatusID()
		return nil
	case orderheader.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	case orderheader.FieldFirstAttemptOrderID:
		m.ClearFirstAttemptOrderID()
		return nil
	case orderheader.FieldCurrencyUom:
		m.ClearCurrencyUom()
		return nil
	case orderheader.FieldSyncStatusID:
		m.ClearSyncStatusID()
		return nil
	case orderheader.FieldBillingAccountID:
		m.ClearBillingAccountID()
		return nil
	case orderheader.FieldOriginFacilityID:
		m.ClearOriginFacilityID()
		return nil
	case orderheader.FieldWebSiteID:
		m.ClearWebSiteID()
		return nil
	case orderheader.FieldProductStoreID:
		m.ClearProductStoreID()
		return nil
	case orderheader.FieldAgreementID:
		m.ClearAgreementID()
		return nil
	case orderheader.FieldTerminalID:
		m.ClearTerminalID()
		return nil
	case orderheader.FieldTransactionID:
		m.ClearTransactionID()
		return nil
	case orderheader.FieldAutoOrderShoppingListID:
		m.ClearAutoOrderShoppingListID()
		return nil
	case orderheader.FieldNeedsInventoryIssuance:
		m.ClearNeedsInventoryIssuance()
		return nil
	case orderheader.FieldIsRushOrder:
		m.ClearIsRushOrder()
		return nil
	case orderheader.FieldInternalCode:
		m.ClearInternalCode()
		return nil
	case orderheader.FieldRemainingSubTotal:
		m.ClearRemainingSubTotal()
		return nil
	case orderheader.FieldGrandTotal:
		m.ClearGrandTotal()
		return nil
	case orderheader.FieldIsViewed:
		m.ClearIsViewed()
		return nil
	case orderheader.FieldInvoicePerShipment:
		m.ClearInvoicePerShipment()
		return nil
	}
	return fmt.Errorf("unknown OrderHeader nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *OrderHeaderMutation) ResetField(name string) error {
	switch name {
	case orderheader.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case orderheader.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case orderheader.FieldOrderTypeID:
		m.ResetOrderTypeID()
		return nil
	case orderheader.FieldOrderName:
		m.ResetOrderName()
		return nil
	case orderheader.FieldExternalID:
		m.ResetExternalID()
		return nil
	case orderheader.FieldSalesChannelEnumID:
		m.ResetSalesChannelEnumID()
		return nil
	case orderheader.FieldOrderDate:
		m.ResetOrderDate()
		return nil
	case orderheader.FieldPriority:
		m.ResetPriority()
		return nil
	case orderheader.FieldEntryDate:
		m.ResetEntryDate()
		return nil
	case orderheader.FieldPickSheetPrintedDate:
		m.ResetPickSheetPrintedDate()
		return nil
	case orderheader.FieldVisitID:
		m.ResetVisitID()
		return nil
	case orderheader.FieldStatusID:
		m.ResetStatusID()
		return nil
	case orderheader.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case orderheader.FieldFirstAttemptOrderID:
		m.ResetFirstAttemptOrderID()
		return nil
	case orderheader.FieldCurrencyUom:
		m.ResetCurrencyUom()
		return nil
	case orderheader.FieldSyncStatusID:
		m.ResetSyncStatusID()
		return nil
	case orderheader.FieldBillingAccountID:
		m.ResetBillingAccountID()
		return nil
	case orderheader.FieldOriginFacilityID:
		m.ResetOriginFacilityID()
		return nil
	case orderheader.FieldWebSiteID:
		m.ResetWebSiteID()
		return nil
	case orderheader.FieldProductStoreID:
		m.ResetProductStoreID()
		return nil
	case orderheader.FieldAgreementID:
		m.ResetAgreementID()
		return nil
	case orderheader.FieldTerminalID:
		m.ResetTerminalID()
		return nil
	case orderheader.FieldTransactionID:
		m.ResetTransactionID()
		return nil
	case orderheader.FieldAutoOrderShoppingListID:
		m.ResetAutoOrderShoppingListID()
		return nil
	case orderheader.FieldNeedsInventoryIssuance:
		m.ResetNeedsInventoryIssuance()
		return nil
	case orderheader.FieldIsRushOrder:
		m.ResetIsRushOrder()
		return nil
	case orderheader.FieldInternalCode:
		m.ResetInternalCode()
		return nil
	case orderheader.FieldRemainingSubTotal:
		m.ResetRemainingSubTotal()
		return nil
	case orderheader.FieldGrandTotal:
		m.ResetGrandTotal()
		return nil
	case orderheader.FieldIsViewed:
		m.ResetIsViewed()
		return nil
	case orderheader.FieldInvoicePerShipment:
		m.ResetInvoicePerShipment()
		return nil
	}
	return fmt.Errorf("unknown OrderHeader field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *OrderHeaderMutation) AddedEdges() []string {
	edges := make([]string, 0, 9)
	if m.item_issuances != nil {
		edges = append(edges, orderheader.EdgeItemIssuances)
	}
	if m.order_contact_meches != nil {
		edges = append(edges, orderheader.EdgeOrderContactMeches)
	}
	if m.order_items != nil {
		edges = append(edges, orderheader.EdgeOrderItems)
	}
	if m.order_item_price_infos != nil {
		edges = append(edges, orderheader.EdgeOrderItemPriceInfos)
	}
	if m.order_item_ship_groups != nil {
		edges = append(edges, orderheader.EdgeOrderItemShipGroups)
	}
	if m.order_item_ship_group_assocs != nil {
		edges = append(edges, orderheader.EdgeOrderItemShipGroupAssocs)
	}
	if m.order_roles != nil {
		edges = append(edges, orderheader.EdgeOrderRoles)
	}
	if m.order_statuses != nil {
		edges = append(edges, orderheader.EdgeOrderStatuses)
	}
	if m.primary_shipments != nil {
		edges = append(edges, orderheader.EdgePrimaryShipments)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *OrderHeaderMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case orderheader.EdgeItemIssuances:
		ids := make([]ent.Value, 0, len(m.item_issuances))
		for id := range m.item_issuances {
			ids = append(ids, id)
		}
		return ids
	case orderheader.EdgeOrderContactMeches:
		ids := make([]ent.Value, 0, len(m.order_contact_meches))
		for id := range m.order_contact_meches {
			ids = append(ids, id)
		}
		return ids
	case orderheader.EdgeOrderItems:
		ids := make([]ent.Value, 0, len(m.order_items))
		for id := range m.order_items {
			ids = append(ids, id)
		}
		return ids
	case orderheader.EdgeOrderItemPriceInfos:
		ids := make([]ent.Value, 0, len(m.order_item_price_infos))
		for id := range m.order_item_price_infos {
			ids = append(ids, id)
		}
		return ids
	case orderheader.EdgeOrderItemShipGroups:
		ids := make([]ent.Value, 0, len(m.order_item_ship_groups))
		for id := range m.order_item_ship_groups {
			ids = append(ids, id)
		}
		return ids
	case orderheader.EdgeOrderItemShipGroupAssocs:
		ids := make([]ent.Value, 0, len(m.order_item_ship_group_assocs))
		for id := range m.order_item_ship_group_assocs {
			ids = append(ids, id)
		}
		return ids
	case orderheader.EdgeOrderRoles:
		ids := make([]ent.Value, 0, len(m.order_roles))
		for id := range m.order_roles {
			ids = append(ids, id)
		}
		return ids
	case orderheader.EdgeOrderStatuses:
		ids := make([]ent.Value, 0, len(m.order_statuses))
		for id := range m.order_statuses {
			ids = append(ids, id)
		}
		return ids
	case orderheader.EdgePrimaryShipments:
		ids := make([]ent.Value, 0, len(m.primary_shipments))
		for id := range m.primary_shipments {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *OrderHeaderMutation) RemovedEdges() []string {
	edges := make([]string, 0, 9)
	if m.removeditem_issuances != nil {
		edges = append(edges, orderheader.EdgeItemIssuances)
	}
	if m.removedorder_contact_meches != nil {
		edges = append(edges, orderheader.EdgeOrderContactMeches)
	}
	if m.removedorder_items != nil {
		edges = append(edges, orderheader.EdgeOrderItems)
	}
	if m.removedorder_item_price_infos != nil {
		edges = append(edges, orderheader.EdgeOrderItemPriceInfos)
	}
	if m.removedorder_item_ship_groups != nil {
		edges = append(edges, orderheader.EdgeOrderItemShipGroups)
	}
	if m.removedorder_item_ship_group_assocs != nil {
		edges = append(edges, orderheader.EdgeOrderItemShipGroupAssocs)
	}
	if m.removedorder_roles != nil {
		edges = append(edges, orderheader.EdgeOrderRoles)
	}
	if m.removedorder_statuses != nil {
		edges = append(edges, orderheader.EdgeOrderStatuses)
	}
	if m.removedprimary_shipments != nil {
		edges = append(edges, orderheader.EdgePrimaryShipments)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *OrderHeaderMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case orderheader.EdgeItemIssuances:
		ids := make([]ent.Value, 0, len(m.removeditem_issuances))
		for id := range m.removeditem_issuances {
			ids = append(ids, id)
		}
		return ids
	case orderheader.EdgeOrderContactMeches:
		ids := make([]ent.Value, 0, len(m.removedorder_contact_meches))
		for id := range m.removedorder_contact_meches {
			ids = append(ids, id)
		}
		return ids
	case orderheader.EdgeOrderItems:
		ids := make([]ent.Value, 0, len(m.removedorder_items))
		for id := range m.removedorder_items {
			ids = append(ids, id)
		}
		return ids
	case orderheader.EdgeOrderItemPriceInfos:
		ids := make([]ent.Value, 0, len(m.removedorder_item_price_infos))
		for id := range m.removedorder_item_price_infos {
			ids = append(ids, id)
		}
		return ids
	case orderheader.EdgeOrderItemShipGroups:
		ids := make([]ent.Value, 0, len(m.removedorder_item_ship_groups))
		for id := range m.removedorder_item_ship_groups {
			ids = append(ids, id)
		}
		return ids
	case orderheader.EdgeOrderItemShipGroupAssocs:
		ids := make([]ent.Value, 0, len(m.removedorder_item_ship_group_assocs))
		for id := range m.removedorder_item_ship_group_assocs {
			ids = append(ids, id)
		}
		return ids
	case orderheader.EdgeOrderRoles:
		ids := make([]ent.Value, 0, len(m.removedorder_roles))
		for id := range m.removedorder_roles {
			ids = append(ids, id)
		}
		return ids
	case orderheader.EdgeOrderStatuses:
		ids := make([]ent.Value, 0, len(m.removedorder_statuses))
		for id := range m.removedorder_statuses {
			ids = append(ids, id)
		}
		return ids
	case orderheader.EdgePrimaryShipments:
		ids := make([]ent.Value, 0, len(m.removedprimary_shipments))
		for id := range m.removedprimary_shipments {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *OrderHeaderMutation) ClearedEdges() []string {
	edges := make([]string, 0, 9)
	if m.cleareditem_issuances {
		edges = append(edges, orderheader.EdgeItemIssuances)
	}
	if m.clearedorder_contact_meches {
		edges = append(edges, orderheader.EdgeOrderContactMeches)
	}
	if m.clearedorder_items {
		edges = append(edges, orderheader.EdgeOrderItems)
	}
	if m.clearedorder_item_price_infos {
		edges = append(edges, orderheader.EdgeOrderItemPriceInfos)
	}
	if m.clearedorder_item_ship_groups {
		edges = append(edges, orderheader.EdgeOrderItemShipGroups)
	}
	if m.clearedorder_item_ship_group_assocs {
		edges = append(edges, orderheader.EdgeOrderItemShipGroupAssocs)
	}
	if m.clearedorder_roles {
		edges = append(edges, orderheader.EdgeOrderRoles)
	}
	if m.clearedorder_statuses {
		edges = append(edges, orderheader.EdgeOrderStatuses)
	}
	if m.clearedprimary_shipments {
		edges = append(edges, orderheader.EdgePrimaryShipments)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *OrderHeaderMutation) EdgeCleared(name string) bool {
	switch name {
	case orderheader.EdgeItemIssuances:
		return m.cleareditem_issuances
	case orderheader.EdgeOrderContactMeches:
		return m.clearedorder_contact_meches
	case orderheader.EdgeOrderItems:
		return m.clearedorder_items
	case orderheader.EdgeOrderItemPriceInfos:
		return m.clearedorder_item_price_infos
	case orderheader.EdgeOrderItemShipGroups:
		return m.clearedorder_item_ship_groups
	case orderheader.EdgeOrderItemShipGroupAssocs:
		return m.clearedorder_item_ship_group_assocs
	case orderheader.EdgeOrderRoles:
		return m.clearedorder_roles
	case orderheader.EdgeOrderStatuses:
		return m.clearedorder_statuses
	case orderheader.EdgePrimaryShipments:
		return m.clearedprimary_shipments
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *OrderHeaderMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown OrderHeader unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *OrderHeaderMutation) ResetEdge(name string) error {
	switch name {
	case orderheader.EdgeItemIssuances:
		m.ResetItemIssuances()
		return nil
	case orderheader.EdgeOrderContactMeches:
		m.ResetOrderContactMeches()
		return nil
	case orderheader.EdgeOrderItems:
		m.ResetOrderItems()
		return nil
	case orderheader.EdgeOrderItemPriceInfos:
		m.ResetOrderItemPriceInfos()
		return nil
	case orderheader.EdgeOrderItemShipGroups:
		m.ResetOrderItemShipGroups()
		return nil
	case orderheader.EdgeOrderItemShipGroupAssocs:
		m.ResetOrderItemShipGroupAssocs()
		return nil
	case orderheader.EdgeOrderRoles:
		m.ResetOrderRoles()
		return nil
	case orderheader.EdgeOrderStatuses:
		m.ResetOrderStatuses()
		return nil
	case orderheader.EdgePrimaryShipments:
		m.ResetPrimaryShipments()
		return nil
	}
	return fmt.Errorf("unknown OrderHeader edge %s", name)
}

// OrderItemMutation represents an operation that mutates the OrderItem nodes in the graph.
type OrderItemMutation struct {
	config
	op                                  Op
	typ                                 string
	id                                  *int
	create_time                         *time.Time
	update_time                         *time.Time
	order_item_seq_id                   *int
	addorder_item_seq_id                *int
	external_id                         *int
	addexternal_id                      *int
	order_item_type_id                  *int
	addorder_item_type_id               *int
	order_item_group_seq_id             *int
	addorder_item_group_seq_id          *int
	is_item_group_primary               *orderitem.IsItemGroupPrimary
	from_inventory_item_id              *int
	addfrom_inventory_item_id           *int
	budget_id                           *int
	addbudget_id                        *int
	budget_item_seq_id                  *int
	addbudget_item_seq_id               *int
	product_id                          *int
	addproduct_id                       *int
	supplier_product_id                 *string
	product_feature_id                  *int
	addproduct_feature_id               *int
	prod_catalog_id                     *int
	addprod_catalog_id                  *int
	product_category_id                 *int
	addproduct_category_id              *int
	is_promo                            *orderitem.IsPromo
	quote_id                            *int
	addquote_id                         *int
	quote_item_seq_id                   *int
	addquote_item_seq_id                *int
	shopping_list_id                    *int
	addshopping_list_id                 *int
	shopping_list_item_seq_id           *int
	addshopping_list_item_seq_id        *int
	subscription_id                     *int
	addsubscription_id                  *int
	deployment_id                       *int
	adddeployment_id                    *int
	quantity                            *float64
	addquantity                         *float64
	cancel_quantity                     *float64
	addcancel_quantity                  *float64
	selected_amount                     *float64
	addselected_amount                  *float64
	unit_price                          *float64
	addunit_price                       *float64
	unit_list_price                     *float64
	addunit_list_price                  *float64
	unit_average_cost                   *float64
	addunit_average_cost                *float64
	unit_recurring_price                *float64
	addunit_recurring_price             *float64
	is_modified_price                   *orderitem.IsModifiedPrice
	recurring_freq_uom_id               *int
	addrecurring_freq_uom_id            *int
	item_description                    *string
	comments                            *string
	corresponding_po_id                 *int
	addcorresponding_po_id              *int
	status_id                           *int
	addstatus_id                        *int
	sync_status_id                      *int
	addsync_status_id                   *int
	estimated_ship_date                 *time.Time
	estimated_delivery_date             *time.Time
	auto_cancel_date                    *time.Time
	dont_cancel_set_date                *time.Time
	dont_cancel_set_user_login          *string
	ship_before_date                    *time.Time
	ship_after_date                     *time.Time
	reserve_after_date                  *time.Time
	cancel_back_order_date              *time.Time
	override_gl_account_id              *int
	addoverride_gl_account_id           *int
	sales_opportunity_id                *int
	addsales_opportunity_id             *int
	change_by_user_login_id             *string
	clearedFields                       map[string]struct{}
	order_header                        *int
	clearedorder_header                 bool
	item_issuances                      map[int]struct{}
	removeditem_issuances               map[int]struct{}
	cleareditem_issuances               bool
	order_item_price_infos              map[int]struct{}
	removedorder_item_price_infos       map[int]struct{}
	clearedorder_item_price_infos       bool
	order_item_ship_group_assocs        map[int]struct{}
	removedorder_item_ship_group_assocs map[int]struct{}
	clearedorder_item_ship_group_assocs bool
	order_statuses                      map[int]struct{}
	removedorder_statuses               map[int]struct{}
	clearedorder_statuses               bool
	done                                bool
	oldValue                            func(context.Context) (*OrderItem, error)
	predicates                          []predicate.OrderItem
}

var _ ent.Mutation = (*OrderItemMutation)(nil)

// orderitemOption allows management of the mutation configuration using functional options.
type orderitemOption func(*OrderItemMutation)

// newOrderItemMutation creates new mutation for the OrderItem entity.
func newOrderItemMutation(c config, op Op, opts ...orderitemOption) *OrderItemMutation {
	m := &OrderItemMutation{
		config:        c,
		op:            op,
		typ:           TypeOrderItem,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withOrderItemID sets the ID field of the mutation.
func withOrderItemID(id int) orderitemOption {
	return func(m *OrderItemMutation) {
		var (
			err   error
			once  sync.Once
			value *OrderItem
		)
		m.oldValue = func(ctx context.Context) (*OrderItem, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().OrderItem.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withOrderItem sets the old OrderItem of the mutation.
func withOrderItem(node *OrderItem) orderitemOption {
	return func(m *OrderItemMutation) {
		m.oldValue = func(context.Context) (*OrderItem, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m OrderItemMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m OrderItemMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *OrderItemMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreateTime sets the "create_time" field.
func (m *OrderItemMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *OrderItemMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the OrderItem entity.
// If the OrderItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderItemMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *OrderItemMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *OrderItemMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *OrderItemMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the OrderItem entity.
// If the OrderItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderItemMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *OrderItemMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetOrderItemSeqID sets the "order_item_seq_id" field.
func (m *OrderItemMutation) SetOrderItemSeqID(i int) {
	m.order_item_seq_id = &i
	m.addorder_item_seq_id = nil
}

// OrderItemSeqID returns the value of the "order_item_seq_id" field in the mutation.
func (m *OrderItemMutation) OrderItemSeqID() (r int, exists bool) {
	v := m.order_item_seq_id
	if v == nil {
		return
	}
	return *v, true
}

// OldOrderItemSeqID returns the old "order_item_seq_id" field's value of the OrderItem entity.
// If the OrderItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderItemMutation) OldOrderItemSeqID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldOrderItemSeqID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldOrderItemSeqID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrderItemSeqID: %w", err)
	}
	return oldValue.OrderItemSeqID, nil
}

// AddOrderItemSeqID adds i to the "order_item_seq_id" field.
func (m *OrderItemMutation) AddOrderItemSeqID(i int) {
	if m.addorder_item_seq_id != nil {
		*m.addorder_item_seq_id += i
	} else {
		m.addorder_item_seq_id = &i
	}
}

// AddedOrderItemSeqID returns the value that was added to the "order_item_seq_id" field in this mutation.
func (m *OrderItemMutation) AddedOrderItemSeqID() (r int, exists bool) {
	v := m.addorder_item_seq_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetOrderItemSeqID resets all changes to the "order_item_seq_id" field.
func (m *OrderItemMutation) ResetOrderItemSeqID() {
	m.order_item_seq_id = nil
	m.addorder_item_seq_id = nil
}

// SetExternalID sets the "external_id" field.
func (m *OrderItemMutation) SetExternalID(i int) {
	m.external_id = &i
	m.addexternal_id = nil
}

// ExternalID returns the value of the "external_id" field in the mutation.
func (m *OrderItemMutation) ExternalID() (r int, exists bool) {
	v := m.external_id
	if v == nil {
		return
	}
	return *v, true
}

// OldExternalID returns the old "external_id" field's value of the OrderItem entity.
// If the OrderItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderItemMutation) OldExternalID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldExternalID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldExternalID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExternalID: %w", err)
	}
	return oldValue.ExternalID, nil
}

// AddExternalID adds i to the "external_id" field.
func (m *OrderItemMutation) AddExternalID(i int) {
	if m.addexternal_id != nil {
		*m.addexternal_id += i
	} else {
		m.addexternal_id = &i
	}
}

// AddedExternalID returns the value that was added to the "external_id" field in this mutation.
func (m *OrderItemMutation) AddedExternalID() (r int, exists bool) {
	v := m.addexternal_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearExternalID clears the value of the "external_id" field.
func (m *OrderItemMutation) ClearExternalID() {
	m.external_id = nil
	m.addexternal_id = nil
	m.clearedFields[orderitem.FieldExternalID] = struct{}{}
}

// ExternalIDCleared returns if the "external_id" field was cleared in this mutation.
func (m *OrderItemMutation) ExternalIDCleared() bool {
	_, ok := m.clearedFields[orderitem.FieldExternalID]
	return ok
}

// ResetExternalID resets all changes to the "external_id" field.
func (m *OrderItemMutation) ResetExternalID() {
	m.external_id = nil
	m.addexternal_id = nil
	delete(m.clearedFields, orderitem.FieldExternalID)
}

// SetOrderItemTypeID sets the "order_item_type_id" field.
func (m *OrderItemMutation) SetOrderItemTypeID(i int) {
	m.order_item_type_id = &i
	m.addorder_item_type_id = nil
}

// OrderItemTypeID returns the value of the "order_item_type_id" field in the mutation.
func (m *OrderItemMutation) OrderItemTypeID() (r int, exists bool) {
	v := m.order_item_type_id
	if v == nil {
		return
	}
	return *v, true
}

// OldOrderItemTypeID returns the old "order_item_type_id" field's value of the OrderItem entity.
// If the OrderItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderItemMutation) OldOrderItemTypeID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldOrderItemTypeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldOrderItemTypeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrderItemTypeID: %w", err)
	}
	return oldValue.OrderItemTypeID, nil
}

// AddOrderItemTypeID adds i to the "order_item_type_id" field.
func (m *OrderItemMutation) AddOrderItemTypeID(i int) {
	if m.addorder_item_type_id != nil {
		*m.addorder_item_type_id += i
	} else {
		m.addorder_item_type_id = &i
	}
}

// AddedOrderItemTypeID returns the value that was added to the "order_item_type_id" field in this mutation.
func (m *OrderItemMutation) AddedOrderItemTypeID() (r int, exists bool) {
	v := m.addorder_item_type_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearOrderItemTypeID clears the value of the "order_item_type_id" field.
func (m *OrderItemMutation) ClearOrderItemTypeID() {
	m.order_item_type_id = nil
	m.addorder_item_type_id = nil
	m.clearedFields[orderitem.FieldOrderItemTypeID] = struct{}{}
}

// OrderItemTypeIDCleared returns if the "order_item_type_id" field was cleared in this mutation.
func (m *OrderItemMutation) OrderItemTypeIDCleared() bool {
	_, ok := m.clearedFields[orderitem.FieldOrderItemTypeID]
	return ok
}

// ResetOrderItemTypeID resets all changes to the "order_item_type_id" field.
func (m *OrderItemMutation) ResetOrderItemTypeID() {
	m.order_item_type_id = nil
	m.addorder_item_type_id = nil
	delete(m.clearedFields, orderitem.FieldOrderItemTypeID)
}

// SetOrderItemGroupSeqID sets the "order_item_group_seq_id" field.
func (m *OrderItemMutation) SetOrderItemGroupSeqID(i int) {
	m.order_item_group_seq_id = &i
	m.addorder_item_group_seq_id = nil
}

// OrderItemGroupSeqID returns the value of the "order_item_group_seq_id" field in the mutation.
func (m *OrderItemMutation) OrderItemGroupSeqID() (r int, exists bool) {
	v := m.order_item_group_seq_id
	if v == nil {
		return
	}
	return *v, true
}

// OldOrderItemGroupSeqID returns the old "order_item_group_seq_id" field's value of the OrderItem entity.
// If the OrderItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderItemMutation) OldOrderItemGroupSeqID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldOrderItemGroupSeqID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldOrderItemGroupSeqID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrderItemGroupSeqID: %w", err)
	}
	return oldValue.OrderItemGroupSeqID, nil
}

// AddOrderItemGroupSeqID adds i to the "order_item_group_seq_id" field.
func (m *OrderItemMutation) AddOrderItemGroupSeqID(i int) {
	if m.addorder_item_group_seq_id != nil {
		*m.addorder_item_group_seq_id += i
	} else {
		m.addorder_item_group_seq_id = &i
	}
}

// AddedOrderItemGroupSeqID returns the value that was added to the "order_item_group_seq_id" field in this mutation.
func (m *OrderItemMutation) AddedOrderItemGroupSeqID() (r int, exists bool) {
	v := m.addorder_item_group_seq_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearOrderItemGroupSeqID clears the value of the "order_item_group_seq_id" field.
func (m *OrderItemMutation) ClearOrderItemGroupSeqID() {
	m.order_item_group_seq_id = nil
	m.addorder_item_group_seq_id = nil
	m.clearedFields[orderitem.FieldOrderItemGroupSeqID] = struct{}{}
}

// OrderItemGroupSeqIDCleared returns if the "order_item_group_seq_id" field was cleared in this mutation.
func (m *OrderItemMutation) OrderItemGroupSeqIDCleared() bool {
	_, ok := m.clearedFields[orderitem.FieldOrderItemGroupSeqID]
	return ok
}

// ResetOrderItemGroupSeqID resets all changes to the "order_item_group_seq_id" field.
func (m *OrderItemMutation) ResetOrderItemGroupSeqID() {
	m.order_item_group_seq_id = nil
	m.addorder_item_group_seq_id = nil
	delete(m.clearedFields, orderitem.FieldOrderItemGroupSeqID)
}

// SetIsItemGroupPrimary sets the "is_item_group_primary" field.
func (m *OrderItemMutation) SetIsItemGroupPrimary(oigp orderitem.IsItemGroupPrimary) {
	m.is_item_group_primary = &oigp
}

// IsItemGroupPrimary returns the value of the "is_item_group_primary" field in the mutation.
func (m *OrderItemMutation) IsItemGroupPrimary() (r orderitem.IsItemGroupPrimary, exists bool) {
	v := m.is_item_group_primary
	if v == nil {
		return
	}
	return *v, true
}

// OldIsItemGroupPrimary returns the old "is_item_group_primary" field's value of the OrderItem entity.
// If the OrderItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderItemMutation) OldIsItemGroupPrimary(ctx context.Context) (v orderitem.IsItemGroupPrimary, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldIsItemGroupPrimary is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldIsItemGroupPrimary requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsItemGroupPrimary: %w", err)
	}
	return oldValue.IsItemGroupPrimary, nil
}

// ClearIsItemGroupPrimary clears the value of the "is_item_group_primary" field.
func (m *OrderItemMutation) ClearIsItemGroupPrimary() {
	m.is_item_group_primary = nil
	m.clearedFields[orderitem.FieldIsItemGroupPrimary] = struct{}{}
}

// IsItemGroupPrimaryCleared returns if the "is_item_group_primary" field was cleared in this mutation.
func (m *OrderItemMutation) IsItemGroupPrimaryCleared() bool {
	_, ok := m.clearedFields[orderitem.FieldIsItemGroupPrimary]
	return ok
}

// ResetIsItemGroupPrimary resets all changes to the "is_item_group_primary" field.
func (m *OrderItemMutation) ResetIsItemGroupPrimary() {
	m.is_item_group_primary = nil
	delete(m.clearedFields, orderitem.FieldIsItemGroupPrimary)
}

// SetFromInventoryItemID sets the "from_inventory_item_id" field.
func (m *OrderItemMutation) SetFromInventoryItemID(i int) {
	m.from_inventory_item_id = &i
	m.addfrom_inventory_item_id = nil
}

// FromInventoryItemID returns the value of the "from_inventory_item_id" field in the mutation.
func (m *OrderItemMutation) FromInventoryItemID() (r int, exists bool) {
	v := m.from_inventory_item_id
	if v == nil {
		return
	}
	return *v, true
}

// OldFromInventoryItemID returns the old "from_inventory_item_id" field's value of the OrderItem entity.
// If the OrderItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderItemMutation) OldFromInventoryItemID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldFromInventoryItemID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldFromInventoryItemID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFromInventoryItemID: %w", err)
	}
	return oldValue.FromInventoryItemID, nil
}

// AddFromInventoryItemID adds i to the "from_inventory_item_id" field.
func (m *OrderItemMutation) AddFromInventoryItemID(i int) {
	if m.addfrom_inventory_item_id != nil {
		*m.addfrom_inventory_item_id += i
	} else {
		m.addfrom_inventory_item_id = &i
	}
}

// AddedFromInventoryItemID returns the value that was added to the "from_inventory_item_id" field in this mutation.
func (m *OrderItemMutation) AddedFromInventoryItemID() (r int, exists bool) {
	v := m.addfrom_inventory_item_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearFromInventoryItemID clears the value of the "from_inventory_item_id" field.
func (m *OrderItemMutation) ClearFromInventoryItemID() {
	m.from_inventory_item_id = nil
	m.addfrom_inventory_item_id = nil
	m.clearedFields[orderitem.FieldFromInventoryItemID] = struct{}{}
}

// FromInventoryItemIDCleared returns if the "from_inventory_item_id" field was cleared in this mutation.
func (m *OrderItemMutation) FromInventoryItemIDCleared() bool {
	_, ok := m.clearedFields[orderitem.FieldFromInventoryItemID]
	return ok
}

// ResetFromInventoryItemID resets all changes to the "from_inventory_item_id" field.
func (m *OrderItemMutation) ResetFromInventoryItemID() {
	m.from_inventory_item_id = nil
	m.addfrom_inventory_item_id = nil
	delete(m.clearedFields, orderitem.FieldFromInventoryItemID)
}

// SetBudgetID sets the "budget_id" field.
func (m *OrderItemMutation) SetBudgetID(i int) {
	m.budget_id = &i
	m.addbudget_id = nil
}

// BudgetID returns the value of the "budget_id" field in the mutation.
func (m *OrderItemMutation) BudgetID() (r int, exists bool) {
	v := m.budget_id
	if v == nil {
		return
	}
	return *v, true
}

// OldBudgetID returns the old "budget_id" field's value of the OrderItem entity.
// If the OrderItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderItemMutation) OldBudgetID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldBudgetID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldBudgetID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBudgetID: %w", err)
	}
	return oldValue.BudgetID, nil
}

// AddBudgetID adds i to the "budget_id" field.
func (m *OrderItemMutation) AddBudgetID(i int) {
	if m.addbudget_id != nil {
		*m.addbudget_id += i
	} else {
		m.addbudget_id = &i
	}
}

// AddedBudgetID returns the value that was added to the "budget_id" field in this mutation.
func (m *OrderItemMutation) AddedBudgetID() (r int, exists bool) {
	v := m.addbudget_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearBudgetID clears the value of the "budget_id" field.
func (m *OrderItemMutation) ClearBudgetID() {
	m.budget_id = nil
	m.addbudget_id = nil
	m.clearedFields[orderitem.FieldBudgetID] = struct{}{}
}

// BudgetIDCleared returns if the "budget_id" field was cleared in this mutation.
func (m *OrderItemMutation) BudgetIDCleared() bool {
	_, ok := m.clearedFields[orderitem.FieldBudgetID]
	return ok
}

// ResetBudgetID resets all changes to the "budget_id" field.
func (m *OrderItemMutation) ResetBudgetID() {
	m.budget_id = nil
	m.addbudget_id = nil
	delete(m.clearedFields, orderitem.FieldBudgetID)
}

// SetBudgetItemSeqID sets the "budget_item_seq_id" field.
func (m *OrderItemMutation) SetBudgetItemSeqID(i int) {
	m.budget_item_seq_id = &i
	m.addbudget_item_seq_id = nil
}

// BudgetItemSeqID returns the value of the "budget_item_seq_id" field in the mutation.
func (m *OrderItemMutation) BudgetItemSeqID() (r int, exists bool) {
	v := m.budget_item_seq_id
	if v == nil {
		return
	}
	return *v, true
}

// OldBudgetItemSeqID returns the old "budget_item_seq_id" field's value of the OrderItem entity.
// If the OrderItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderItemMutation) OldBudgetItemSeqID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldBudgetItemSeqID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldBudgetItemSeqID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBudgetItemSeqID: %w", err)
	}
	return oldValue.BudgetItemSeqID, nil
}

// AddBudgetItemSeqID adds i to the "budget_item_seq_id" field.
func (m *OrderItemMutation) AddBudgetItemSeqID(i int) {
	if m.addbudget_item_seq_id != nil {
		*m.addbudget_item_seq_id += i
	} else {
		m.addbudget_item_seq_id = &i
	}
}

// AddedBudgetItemSeqID returns the value that was added to the "budget_item_seq_id" field in this mutation.
func (m *OrderItemMutation) AddedBudgetItemSeqID() (r int, exists bool) {
	v := m.addbudget_item_seq_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearBudgetItemSeqID clears the value of the "budget_item_seq_id" field.
func (m *OrderItemMutation) ClearBudgetItemSeqID() {
	m.budget_item_seq_id = nil
	m.addbudget_item_seq_id = nil
	m.clearedFields[orderitem.FieldBudgetItemSeqID] = struct{}{}
}

// BudgetItemSeqIDCleared returns if the "budget_item_seq_id" field was cleared in this mutation.
func (m *OrderItemMutation) BudgetItemSeqIDCleared() bool {
	_, ok := m.clearedFields[orderitem.FieldBudgetItemSeqID]
	return ok
}

// ResetBudgetItemSeqID resets all changes to the "budget_item_seq_id" field.
func (m *OrderItemMutation) ResetBudgetItemSeqID() {
	m.budget_item_seq_id = nil
	m.addbudget_item_seq_id = nil
	delete(m.clearedFields, orderitem.FieldBudgetItemSeqID)
}

// SetProductID sets the "product_id" field.
func (m *OrderItemMutation) SetProductID(i int) {
	m.product_id = &i
	m.addproduct_id = nil
}

// ProductID returns the value of the "product_id" field in the mutation.
func (m *OrderItemMutation) ProductID() (r int, exists bool) {
	v := m.product_id
	if v == nil {
		return
	}
	return *v, true
}

// OldProductID returns the old "product_id" field's value of the OrderItem entity.
// If the OrderItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderItemMutation) OldProductID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldProductID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldProductID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProductID: %w", err)
	}
	return oldValue.ProductID, nil
}

// AddProductID adds i to the "product_id" field.
func (m *OrderItemMutation) AddProductID(i int) {
	if m.addproduct_id != nil {
		*m.addproduct_id += i
	} else {
		m.addproduct_id = &i
	}
}

// AddedProductID returns the value that was added to the "product_id" field in this mutation.
func (m *OrderItemMutation) AddedProductID() (r int, exists bool) {
	v := m.addproduct_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearProductID clears the value of the "product_id" field.
func (m *OrderItemMutation) ClearProductID() {
	m.product_id = nil
	m.addproduct_id = nil
	m.clearedFields[orderitem.FieldProductID] = struct{}{}
}

// ProductIDCleared returns if the "product_id" field was cleared in this mutation.
func (m *OrderItemMutation) ProductIDCleared() bool {
	_, ok := m.clearedFields[orderitem.FieldProductID]
	return ok
}

// ResetProductID resets all changes to the "product_id" field.
func (m *OrderItemMutation) ResetProductID() {
	m.product_id = nil
	m.addproduct_id = nil
	delete(m.clearedFields, orderitem.FieldProductID)
}

// SetSupplierProductID sets the "supplier_product_id" field.
func (m *OrderItemMutation) SetSupplierProductID(s string) {
	m.supplier_product_id = &s
}

// SupplierProductID returns the value of the "supplier_product_id" field in the mutation.
func (m *OrderItemMutation) SupplierProductID() (r string, exists bool) {
	v := m.supplier_product_id
	if v == nil {
		return
	}
	return *v, true
}

// OldSupplierProductID returns the old "supplier_product_id" field's value of the OrderItem entity.
// If the OrderItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderItemMutation) OldSupplierProductID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSupplierProductID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSupplierProductID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSupplierProductID: %w", err)
	}
	return oldValue.SupplierProductID, nil
}

// ClearSupplierProductID clears the value of the "supplier_product_id" field.
func (m *OrderItemMutation) ClearSupplierProductID() {
	m.supplier_product_id = nil
	m.clearedFields[orderitem.FieldSupplierProductID] = struct{}{}
}

// SupplierProductIDCleared returns if the "supplier_product_id" field was cleared in this mutation.
func (m *OrderItemMutation) SupplierProductIDCleared() bool {
	_, ok := m.clearedFields[orderitem.FieldSupplierProductID]
	return ok
}

// ResetSupplierProductID resets all changes to the "supplier_product_id" field.
func (m *OrderItemMutation) ResetSupplierProductID() {
	m.supplier_product_id = nil
	delete(m.clearedFields, orderitem.FieldSupplierProductID)
}

// SetProductFeatureID sets the "product_feature_id" field.
func (m *OrderItemMutation) SetProductFeatureID(i int) {
	m.product_feature_id = &i
	m.addproduct_feature_id = nil
}

// ProductFeatureID returns the value of the "product_feature_id" field in the mutation.
func (m *OrderItemMutation) ProductFeatureID() (r int, exists bool) {
	v := m.product_feature_id
	if v == nil {
		return
	}
	return *v, true
}

// OldProductFeatureID returns the old "product_feature_id" field's value of the OrderItem entity.
// If the OrderItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderItemMutation) OldProductFeatureID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldProductFeatureID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldProductFeatureID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProductFeatureID: %w", err)
	}
	return oldValue.ProductFeatureID, nil
}

// AddProductFeatureID adds i to the "product_feature_id" field.
func (m *OrderItemMutation) AddProductFeatureID(i int) {
	if m.addproduct_feature_id != nil {
		*m.addproduct_feature_id += i
	} else {
		m.addproduct_feature_id = &i
	}
}

// AddedProductFeatureID returns the value that was added to the "product_feature_id" field in this mutation.
func (m *OrderItemMutation) AddedProductFeatureID() (r int, exists bool) {
	v := m.addproduct_feature_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearProductFeatureID clears the value of the "product_feature_id" field.
func (m *OrderItemMutation) ClearProductFeatureID() {
	m.product_feature_id = nil
	m.addproduct_feature_id = nil
	m.clearedFields[orderitem.FieldProductFeatureID] = struct{}{}
}

// ProductFeatureIDCleared returns if the "product_feature_id" field was cleared in this mutation.
func (m *OrderItemMutation) ProductFeatureIDCleared() bool {
	_, ok := m.clearedFields[orderitem.FieldProductFeatureID]
	return ok
}

// ResetProductFeatureID resets all changes to the "product_feature_id" field.
func (m *OrderItemMutation) ResetProductFeatureID() {
	m.product_feature_id = nil
	m.addproduct_feature_id = nil
	delete(m.clearedFields, orderitem.FieldProductFeatureID)
}

// SetProdCatalogID sets the "prod_catalog_id" field.
func (m *OrderItemMutation) SetProdCatalogID(i int) {
	m.prod_catalog_id = &i
	m.addprod_catalog_id = nil
}

// ProdCatalogID returns the value of the "prod_catalog_id" field in the mutation.
func (m *OrderItemMutation) ProdCatalogID() (r int, exists bool) {
	v := m.prod_catalog_id
	if v == nil {
		return
	}
	return *v, true
}

// OldProdCatalogID returns the old "prod_catalog_id" field's value of the OrderItem entity.
// If the OrderItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderItemMutation) OldProdCatalogID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldProdCatalogID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldProdCatalogID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProdCatalogID: %w", err)
	}
	return oldValue.ProdCatalogID, nil
}

// AddProdCatalogID adds i to the "prod_catalog_id" field.
func (m *OrderItemMutation) AddProdCatalogID(i int) {
	if m.addprod_catalog_id != nil {
		*m.addprod_catalog_id += i
	} else {
		m.addprod_catalog_id = &i
	}
}

// AddedProdCatalogID returns the value that was added to the "prod_catalog_id" field in this mutation.
func (m *OrderItemMutation) AddedProdCatalogID() (r int, exists bool) {
	v := m.addprod_catalog_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearProdCatalogID clears the value of the "prod_catalog_id" field.
func (m *OrderItemMutation) ClearProdCatalogID() {
	m.prod_catalog_id = nil
	m.addprod_catalog_id = nil
	m.clearedFields[orderitem.FieldProdCatalogID] = struct{}{}
}

// ProdCatalogIDCleared returns if the "prod_catalog_id" field was cleared in this mutation.
func (m *OrderItemMutation) ProdCatalogIDCleared() bool {
	_, ok := m.clearedFields[orderitem.FieldProdCatalogID]
	return ok
}

// ResetProdCatalogID resets all changes to the "prod_catalog_id" field.
func (m *OrderItemMutation) ResetProdCatalogID() {
	m.prod_catalog_id = nil
	m.addprod_catalog_id = nil
	delete(m.clearedFields, orderitem.FieldProdCatalogID)
}

// SetProductCategoryID sets the "product_category_id" field.
func (m *OrderItemMutation) SetProductCategoryID(i int) {
	m.product_category_id = &i
	m.addproduct_category_id = nil
}

// ProductCategoryID returns the value of the "product_category_id" field in the mutation.
func (m *OrderItemMutation) ProductCategoryID() (r int, exists bool) {
	v := m.product_category_id
	if v == nil {
		return
	}
	return *v, true
}

// OldProductCategoryID returns the old "product_category_id" field's value of the OrderItem entity.
// If the OrderItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderItemMutation) OldProductCategoryID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldProductCategoryID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldProductCategoryID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProductCategoryID: %w", err)
	}
	return oldValue.ProductCategoryID, nil
}

// AddProductCategoryID adds i to the "product_category_id" field.
func (m *OrderItemMutation) AddProductCategoryID(i int) {
	if m.addproduct_category_id != nil {
		*m.addproduct_category_id += i
	} else {
		m.addproduct_category_id = &i
	}
}

// AddedProductCategoryID returns the value that was added to the "product_category_id" field in this mutation.
func (m *OrderItemMutation) AddedProductCategoryID() (r int, exists bool) {
	v := m.addproduct_category_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearProductCategoryID clears the value of the "product_category_id" field.
func (m *OrderItemMutation) ClearProductCategoryID() {
	m.product_category_id = nil
	m.addproduct_category_id = nil
	m.clearedFields[orderitem.FieldProductCategoryID] = struct{}{}
}

// ProductCategoryIDCleared returns if the "product_category_id" field was cleared in this mutation.
func (m *OrderItemMutation) ProductCategoryIDCleared() bool {
	_, ok := m.clearedFields[orderitem.FieldProductCategoryID]
	return ok
}

// ResetProductCategoryID resets all changes to the "product_category_id" field.
func (m *OrderItemMutation) ResetProductCategoryID() {
	m.product_category_id = nil
	m.addproduct_category_id = nil
	delete(m.clearedFields, orderitem.FieldProductCategoryID)
}

// SetIsPromo sets the "is_promo" field.
func (m *OrderItemMutation) SetIsPromo(op orderitem.IsPromo) {
	m.is_promo = &op
}

// IsPromo returns the value of the "is_promo" field in the mutation.
func (m *OrderItemMutation) IsPromo() (r orderitem.IsPromo, exists bool) {
	v := m.is_promo
	if v == nil {
		return
	}
	return *v, true
}

// OldIsPromo returns the old "is_promo" field's value of the OrderItem entity.
// If the OrderItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderItemMutation) OldIsPromo(ctx context.Context) (v orderitem.IsPromo, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldIsPromo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldIsPromo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsPromo: %w", err)
	}
	return oldValue.IsPromo, nil
}

// ClearIsPromo clears the value of the "is_promo" field.
func (m *OrderItemMutation) ClearIsPromo() {
	m.is_promo = nil
	m.clearedFields[orderitem.FieldIsPromo] = struct{}{}
}

// IsPromoCleared returns if the "is_promo" field was cleared in this mutation.
func (m *OrderItemMutation) IsPromoCleared() bool {
	_, ok := m.clearedFields[orderitem.FieldIsPromo]
	return ok
}

// ResetIsPromo resets all changes to the "is_promo" field.
func (m *OrderItemMutation) ResetIsPromo() {
	m.is_promo = nil
	delete(m.clearedFields, orderitem.FieldIsPromo)
}

// SetQuoteID sets the "quote_id" field.
func (m *OrderItemMutation) SetQuoteID(i int) {
	m.quote_id = &i
	m.addquote_id = nil
}

// QuoteID returns the value of the "quote_id" field in the mutation.
func (m *OrderItemMutation) QuoteID() (r int, exists bool) {
	v := m.quote_id
	if v == nil {
		return
	}
	return *v, true
}

// OldQuoteID returns the old "quote_id" field's value of the OrderItem entity.
// If the OrderItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderItemMutation) OldQuoteID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldQuoteID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldQuoteID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldQuoteID: %w", err)
	}
	return oldValue.QuoteID, nil
}

// AddQuoteID adds i to the "quote_id" field.
func (m *OrderItemMutation) AddQuoteID(i int) {
	if m.addquote_id != nil {
		*m.addquote_id += i
	} else {
		m.addquote_id = &i
	}
}

// AddedQuoteID returns the value that was added to the "quote_id" field in this mutation.
func (m *OrderItemMutation) AddedQuoteID() (r int, exists bool) {
	v := m.addquote_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearQuoteID clears the value of the "quote_id" field.
func (m *OrderItemMutation) ClearQuoteID() {
	m.quote_id = nil
	m.addquote_id = nil
	m.clearedFields[orderitem.FieldQuoteID] = struct{}{}
}

// QuoteIDCleared returns if the "quote_id" field was cleared in this mutation.
func (m *OrderItemMutation) QuoteIDCleared() bool {
	_, ok := m.clearedFields[orderitem.FieldQuoteID]
	return ok
}

// ResetQuoteID resets all changes to the "quote_id" field.
func (m *OrderItemMutation) ResetQuoteID() {
	m.quote_id = nil
	m.addquote_id = nil
	delete(m.clearedFields, orderitem.FieldQuoteID)
}

// SetQuoteItemSeqID sets the "quote_item_seq_id" field.
func (m *OrderItemMutation) SetQuoteItemSeqID(i int) {
	m.quote_item_seq_id = &i
	m.addquote_item_seq_id = nil
}

// QuoteItemSeqID returns the value of the "quote_item_seq_id" field in the mutation.
func (m *OrderItemMutation) QuoteItemSeqID() (r int, exists bool) {
	v := m.quote_item_seq_id
	if v == nil {
		return
	}
	return *v, true
}

// OldQuoteItemSeqID returns the old "quote_item_seq_id" field's value of the OrderItem entity.
// If the OrderItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderItemMutation) OldQuoteItemSeqID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldQuoteItemSeqID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldQuoteItemSeqID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldQuoteItemSeqID: %w", err)
	}
	return oldValue.QuoteItemSeqID, nil
}

// AddQuoteItemSeqID adds i to the "quote_item_seq_id" field.
func (m *OrderItemMutation) AddQuoteItemSeqID(i int) {
	if m.addquote_item_seq_id != nil {
		*m.addquote_item_seq_id += i
	} else {
		m.addquote_item_seq_id = &i
	}
}

// AddedQuoteItemSeqID returns the value that was added to the "quote_item_seq_id" field in this mutation.
func (m *OrderItemMutation) AddedQuoteItemSeqID() (r int, exists bool) {
	v := m.addquote_item_seq_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearQuoteItemSeqID clears the value of the "quote_item_seq_id" field.
func (m *OrderItemMutation) ClearQuoteItemSeqID() {
	m.quote_item_seq_id = nil
	m.addquote_item_seq_id = nil
	m.clearedFields[orderitem.FieldQuoteItemSeqID] = struct{}{}
}

// QuoteItemSeqIDCleared returns if the "quote_item_seq_id" field was cleared in this mutation.
func (m *OrderItemMutation) QuoteItemSeqIDCleared() bool {
	_, ok := m.clearedFields[orderitem.FieldQuoteItemSeqID]
	return ok
}

// ResetQuoteItemSeqID resets all changes to the "quote_item_seq_id" field.
func (m *OrderItemMutation) ResetQuoteItemSeqID() {
	m.quote_item_seq_id = nil
	m.addquote_item_seq_id = nil
	delete(m.clearedFields, orderitem.FieldQuoteItemSeqID)
}

// SetShoppingListID sets the "shopping_list_id" field.
func (m *OrderItemMutation) SetShoppingListID(i int) {
	m.shopping_list_id = &i
	m.addshopping_list_id = nil
}

// ShoppingListID returns the value of the "shopping_list_id" field in the mutation.
func (m *OrderItemMutation) ShoppingListID() (r int, exists bool) {
	v := m.shopping_list_id
	if v == nil {
		return
	}
	return *v, true
}

// OldShoppingListID returns the old "shopping_list_id" field's value of the OrderItem entity.
// If the OrderItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderItemMutation) OldShoppingListID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldShoppingListID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldShoppingListID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShoppingListID: %w", err)
	}
	return oldValue.ShoppingListID, nil
}

// AddShoppingListID adds i to the "shopping_list_id" field.
func (m *OrderItemMutation) AddShoppingListID(i int) {
	if m.addshopping_list_id != nil {
		*m.addshopping_list_id += i
	} else {
		m.addshopping_list_id = &i
	}
}

// AddedShoppingListID returns the value that was added to the "shopping_list_id" field in this mutation.
func (m *OrderItemMutation) AddedShoppingListID() (r int, exists bool) {
	v := m.addshopping_list_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearShoppingListID clears the value of the "shopping_list_id" field.
func (m *OrderItemMutation) ClearShoppingListID() {
	m.shopping_list_id = nil
	m.addshopping_list_id = nil
	m.clearedFields[orderitem.FieldShoppingListID] = struct{}{}
}

// ShoppingListIDCleared returns if the "shopping_list_id" field was cleared in this mutation.
func (m *OrderItemMutation) ShoppingListIDCleared() bool {
	_, ok := m.clearedFields[orderitem.FieldShoppingListID]
	return ok
}

// ResetShoppingListID resets all changes to the "shopping_list_id" field.
func (m *OrderItemMutation) ResetShoppingListID() {
	m.shopping_list_id = nil
	m.addshopping_list_id = nil
	delete(m.clearedFields, orderitem.FieldShoppingListID)
}

// SetShoppingListItemSeqID sets the "shopping_list_item_seq_id" field.
func (m *OrderItemMutation) SetShoppingListItemSeqID(i int) {
	m.shopping_list_item_seq_id = &i
	m.addshopping_list_item_seq_id = nil
}

// ShoppingListItemSeqID returns the value of the "shopping_list_item_seq_id" field in the mutation.
func (m *OrderItemMutation) ShoppingListItemSeqID() (r int, exists bool) {
	v := m.shopping_list_item_seq_id
	if v == nil {
		return
	}
	return *v, true
}

// OldShoppingListItemSeqID returns the old "shopping_list_item_seq_id" field's value of the OrderItem entity.
// If the OrderItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderItemMutation) OldShoppingListItemSeqID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldShoppingListItemSeqID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldShoppingListItemSeqID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShoppingListItemSeqID: %w", err)
	}
	return oldValue.ShoppingListItemSeqID, nil
}

// AddShoppingListItemSeqID adds i to the "shopping_list_item_seq_id" field.
func (m *OrderItemMutation) AddShoppingListItemSeqID(i int) {
	if m.addshopping_list_item_seq_id != nil {
		*m.addshopping_list_item_seq_id += i
	} else {
		m.addshopping_list_item_seq_id = &i
	}
}

// AddedShoppingListItemSeqID returns the value that was added to the "shopping_list_item_seq_id" field in this mutation.
func (m *OrderItemMutation) AddedShoppingListItemSeqID() (r int, exists bool) {
	v := m.addshopping_list_item_seq_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearShoppingListItemSeqID clears the value of the "shopping_list_item_seq_id" field.
func (m *OrderItemMutation) ClearShoppingListItemSeqID() {
	m.shopping_list_item_seq_id = nil
	m.addshopping_list_item_seq_id = nil
	m.clearedFields[orderitem.FieldShoppingListItemSeqID] = struct{}{}
}

// ShoppingListItemSeqIDCleared returns if the "shopping_list_item_seq_id" field was cleared in this mutation.
func (m *OrderItemMutation) ShoppingListItemSeqIDCleared() bool {
	_, ok := m.clearedFields[orderitem.FieldShoppingListItemSeqID]
	return ok
}

// ResetShoppingListItemSeqID resets all changes to the "shopping_list_item_seq_id" field.
func (m *OrderItemMutation) ResetShoppingListItemSeqID() {
	m.shopping_list_item_seq_id = nil
	m.addshopping_list_item_seq_id = nil
	delete(m.clearedFields, orderitem.FieldShoppingListItemSeqID)
}

// SetSubscriptionID sets the "subscription_id" field.
func (m *OrderItemMutation) SetSubscriptionID(i int) {
	m.subscription_id = &i
	m.addsubscription_id = nil
}

// SubscriptionID returns the value of the "subscription_id" field in the mutation.
func (m *OrderItemMutation) SubscriptionID() (r int, exists bool) {
	v := m.subscription_id
	if v == nil {
		return
	}
	return *v, true
}

// OldSubscriptionID returns the old "subscription_id" field's value of the OrderItem entity.
// If the OrderItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderItemMutation) OldSubscriptionID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSubscriptionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSubscriptionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSubscriptionID: %w", err)
	}
	return oldValue.SubscriptionID, nil
}

// AddSubscriptionID adds i to the "subscription_id" field.
func (m *OrderItemMutation) AddSubscriptionID(i int) {
	if m.addsubscription_id != nil {
		*m.addsubscription_id += i
	} else {
		m.addsubscription_id = &i
	}
}

// AddedSubscriptionID returns the value that was added to the "subscription_id" field in this mutation.
func (m *OrderItemMutation) AddedSubscriptionID() (r int, exists bool) {
	v := m.addsubscription_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearSubscriptionID clears the value of the "subscription_id" field.
func (m *OrderItemMutation) ClearSubscriptionID() {
	m.subscription_id = nil
	m.addsubscription_id = nil
	m.clearedFields[orderitem.FieldSubscriptionID] = struct{}{}
}

// SubscriptionIDCleared returns if the "subscription_id" field was cleared in this mutation.
func (m *OrderItemMutation) SubscriptionIDCleared() bool {
	_, ok := m.clearedFields[orderitem.FieldSubscriptionID]
	return ok
}

// ResetSubscriptionID resets all changes to the "subscription_id" field.
func (m *OrderItemMutation) ResetSubscriptionID() {
	m.subscription_id = nil
	m.addsubscription_id = nil
	delete(m.clearedFields, orderitem.FieldSubscriptionID)
}

// SetDeploymentID sets the "deployment_id" field.
func (m *OrderItemMutation) SetDeploymentID(i int) {
	m.deployment_id = &i
	m.adddeployment_id = nil
}

// DeploymentID returns the value of the "deployment_id" field in the mutation.
func (m *OrderItemMutation) DeploymentID() (r int, exists bool) {
	v := m.deployment_id
	if v == nil {
		return
	}
	return *v, true
}

// OldDeploymentID returns the old "deployment_id" field's value of the OrderItem entity.
// If the OrderItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderItemMutation) OldDeploymentID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDeploymentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDeploymentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeploymentID: %w", err)
	}
	return oldValue.DeploymentID, nil
}

// AddDeploymentID adds i to the "deployment_id" field.
func (m *OrderItemMutation) AddDeploymentID(i int) {
	if m.adddeployment_id != nil {
		*m.adddeployment_id += i
	} else {
		m.adddeployment_id = &i
	}
}

// AddedDeploymentID returns the value that was added to the "deployment_id" field in this mutation.
func (m *OrderItemMutation) AddedDeploymentID() (r int, exists bool) {
	v := m.adddeployment_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearDeploymentID clears the value of the "deployment_id" field.
func (m *OrderItemMutation) ClearDeploymentID() {
	m.deployment_id = nil
	m.adddeployment_id = nil
	m.clearedFields[orderitem.FieldDeploymentID] = struct{}{}
}

// DeploymentIDCleared returns if the "deployment_id" field was cleared in this mutation.
func (m *OrderItemMutation) DeploymentIDCleared() bool {
	_, ok := m.clearedFields[orderitem.FieldDeploymentID]
	return ok
}

// ResetDeploymentID resets all changes to the "deployment_id" field.
func (m *OrderItemMutation) ResetDeploymentID() {
	m.deployment_id = nil
	m.adddeployment_id = nil
	delete(m.clearedFields, orderitem.FieldDeploymentID)
}

// SetQuantity sets the "quantity" field.
func (m *OrderItemMutation) SetQuantity(f float64) {
	m.quantity = &f
	m.addquantity = nil
}

// Quantity returns the value of the "quantity" field in the mutation.
func (m *OrderItemMutation) Quantity() (r float64, exists bool) {
	v := m.quantity
	if v == nil {
		return
	}
	return *v, true
}

// OldQuantity returns the old "quantity" field's value of the OrderItem entity.
// If the OrderItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderItemMutation) OldQuantity(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldQuantity is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldQuantity requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldQuantity: %w", err)
	}
	return oldValue.Quantity, nil
}

// AddQuantity adds f to the "quantity" field.
func (m *OrderItemMutation) AddQuantity(f float64) {
	if m.addquantity != nil {
		*m.addquantity += f
	} else {
		m.addquantity = &f
	}
}

// AddedQuantity returns the value that was added to the "quantity" field in this mutation.
func (m *OrderItemMutation) AddedQuantity() (r float64, exists bool) {
	v := m.addquantity
	if v == nil {
		return
	}
	return *v, true
}

// ClearQuantity clears the value of the "quantity" field.
func (m *OrderItemMutation) ClearQuantity() {
	m.quantity = nil
	m.addquantity = nil
	m.clearedFields[orderitem.FieldQuantity] = struct{}{}
}

// QuantityCleared returns if the "quantity" field was cleared in this mutation.
func (m *OrderItemMutation) QuantityCleared() bool {
	_, ok := m.clearedFields[orderitem.FieldQuantity]
	return ok
}

// ResetQuantity resets all changes to the "quantity" field.
func (m *OrderItemMutation) ResetQuantity() {
	m.quantity = nil
	m.addquantity = nil
	delete(m.clearedFields, orderitem.FieldQuantity)
}

// SetCancelQuantity sets the "cancel_quantity" field.
func (m *OrderItemMutation) SetCancelQuantity(f float64) {
	m.cancel_quantity = &f
	m.addcancel_quantity = nil
}

// CancelQuantity returns the value of the "cancel_quantity" field in the mutation.
func (m *OrderItemMutation) CancelQuantity() (r float64, exists bool) {
	v := m.cancel_quantity
	if v == nil {
		return
	}
	return *v, true
}

// OldCancelQuantity returns the old "cancel_quantity" field's value of the OrderItem entity.
// If the OrderItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderItemMutation) OldCancelQuantity(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCancelQuantity is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCancelQuantity requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCancelQuantity: %w", err)
	}
	return oldValue.CancelQuantity, nil
}

// AddCancelQuantity adds f to the "cancel_quantity" field.
func (m *OrderItemMutation) AddCancelQuantity(f float64) {
	if m.addcancel_quantity != nil {
		*m.addcancel_quantity += f
	} else {
		m.addcancel_quantity = &f
	}
}

// AddedCancelQuantity returns the value that was added to the "cancel_quantity" field in this mutation.
func (m *OrderItemMutation) AddedCancelQuantity() (r float64, exists bool) {
	v := m.addcancel_quantity
	if v == nil {
		return
	}
	return *v, true
}

// ClearCancelQuantity clears the value of the "cancel_quantity" field.
func (m *OrderItemMutation) ClearCancelQuantity() {
	m.cancel_quantity = nil
	m.addcancel_quantity = nil
	m.clearedFields[orderitem.FieldCancelQuantity] = struct{}{}
}

// CancelQuantityCleared returns if the "cancel_quantity" field was cleared in this mutation.
func (m *OrderItemMutation) CancelQuantityCleared() bool {
	_, ok := m.clearedFields[orderitem.FieldCancelQuantity]
	return ok
}

// ResetCancelQuantity resets all changes to the "cancel_quantity" field.
func (m *OrderItemMutation) ResetCancelQuantity() {
	m.cancel_quantity = nil
	m.addcancel_quantity = nil
	delete(m.clearedFields, orderitem.FieldCancelQuantity)
}

// SetSelectedAmount sets the "selected_amount" field.
func (m *OrderItemMutation) SetSelectedAmount(f float64) {
	m.selected_amount = &f
	m.addselected_amount = nil
}

// SelectedAmount returns the value of the "selected_amount" field in the mutation.
func (m *OrderItemMutation) SelectedAmount() (r float64, exists bool) {
	v := m.selected_amount
	if v == nil {
		return
	}
	return *v, true
}

// OldSelectedAmount returns the old "selected_amount" field's value of the OrderItem entity.
// If the OrderItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderItemMutation) OldSelectedAmount(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSelectedAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSelectedAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSelectedAmount: %w", err)
	}
	return oldValue.SelectedAmount, nil
}

// AddSelectedAmount adds f to the "selected_amount" field.
func (m *OrderItemMutation) AddSelectedAmount(f float64) {
	if m.addselected_amount != nil {
		*m.addselected_amount += f
	} else {
		m.addselected_amount = &f
	}
}

// AddedSelectedAmount returns the value that was added to the "selected_amount" field in this mutation.
func (m *OrderItemMutation) AddedSelectedAmount() (r float64, exists bool) {
	v := m.addselected_amount
	if v == nil {
		return
	}
	return *v, true
}

// ClearSelectedAmount clears the value of the "selected_amount" field.
func (m *OrderItemMutation) ClearSelectedAmount() {
	m.selected_amount = nil
	m.addselected_amount = nil
	m.clearedFields[orderitem.FieldSelectedAmount] = struct{}{}
}

// SelectedAmountCleared returns if the "selected_amount" field was cleared in this mutation.
func (m *OrderItemMutation) SelectedAmountCleared() bool {
	_, ok := m.clearedFields[orderitem.FieldSelectedAmount]
	return ok
}

// ResetSelectedAmount resets all changes to the "selected_amount" field.
func (m *OrderItemMutation) ResetSelectedAmount() {
	m.selected_amount = nil
	m.addselected_amount = nil
	delete(m.clearedFields, orderitem.FieldSelectedAmount)
}

// SetUnitPrice sets the "unit_price" field.
func (m *OrderItemMutation) SetUnitPrice(f float64) {
	m.unit_price = &f
	m.addunit_price = nil
}

// UnitPrice returns the value of the "unit_price" field in the mutation.
func (m *OrderItemMutation) UnitPrice() (r float64, exists bool) {
	v := m.unit_price
	if v == nil {
		return
	}
	return *v, true
}

// OldUnitPrice returns the old "unit_price" field's value of the OrderItem entity.
// If the OrderItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderItemMutation) OldUnitPrice(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUnitPrice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUnitPrice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUnitPrice: %w", err)
	}
	return oldValue.UnitPrice, nil
}

// AddUnitPrice adds f to the "unit_price" field.
func (m *OrderItemMutation) AddUnitPrice(f float64) {
	if m.addunit_price != nil {
		*m.addunit_price += f
	} else {
		m.addunit_price = &f
	}
}

// AddedUnitPrice returns the value that was added to the "unit_price" field in this mutation.
func (m *OrderItemMutation) AddedUnitPrice() (r float64, exists bool) {
	v := m.addunit_price
	if v == nil {
		return
	}
	return *v, true
}

// ClearUnitPrice clears the value of the "unit_price" field.
func (m *OrderItemMutation) ClearUnitPrice() {
	m.unit_price = nil
	m.addunit_price = nil
	m.clearedFields[orderitem.FieldUnitPrice] = struct{}{}
}

// UnitPriceCleared returns if the "unit_price" field was cleared in this mutation.
func (m *OrderItemMutation) UnitPriceCleared() bool {
	_, ok := m.clearedFields[orderitem.FieldUnitPrice]
	return ok
}

// ResetUnitPrice resets all changes to the "unit_price" field.
func (m *OrderItemMutation) ResetUnitPrice() {
	m.unit_price = nil
	m.addunit_price = nil
	delete(m.clearedFields, orderitem.FieldUnitPrice)
}

// SetUnitListPrice sets the "unit_list_price" field.
func (m *OrderItemMutation) SetUnitListPrice(f float64) {
	m.unit_list_price = &f
	m.addunit_list_price = nil
}

// UnitListPrice returns the value of the "unit_list_price" field in the mutation.
func (m *OrderItemMutation) UnitListPrice() (r float64, exists bool) {
	v := m.unit_list_price
	if v == nil {
		return
	}
	return *v, true
}

// OldUnitListPrice returns the old "unit_list_price" field's value of the OrderItem entity.
// If the OrderItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderItemMutation) OldUnitListPrice(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUnitListPrice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUnitListPrice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUnitListPrice: %w", err)
	}
	return oldValue.UnitListPrice, nil
}

// AddUnitListPrice adds f to the "unit_list_price" field.
func (m *OrderItemMutation) AddUnitListPrice(f float64) {
	if m.addunit_list_price != nil {
		*m.addunit_list_price += f
	} else {
		m.addunit_list_price = &f
	}
}

// AddedUnitListPrice returns the value that was added to the "unit_list_price" field in this mutation.
func (m *OrderItemMutation) AddedUnitListPrice() (r float64, exists bool) {
	v := m.addunit_list_price
	if v == nil {
		return
	}
	return *v, true
}

// ClearUnitListPrice clears the value of the "unit_list_price" field.
func (m *OrderItemMutation) ClearUnitListPrice() {
	m.unit_list_price = nil
	m.addunit_list_price = nil
	m.clearedFields[orderitem.FieldUnitListPrice] = struct{}{}
}

// UnitListPriceCleared returns if the "unit_list_price" field was cleared in this mutation.
func (m *OrderItemMutation) UnitListPriceCleared() bool {
	_, ok := m.clearedFields[orderitem.FieldUnitListPrice]
	return ok
}

// ResetUnitListPrice resets all changes to the "unit_list_price" field.
func (m *OrderItemMutation) ResetUnitListPrice() {
	m.unit_list_price = nil
	m.addunit_list_price = nil
	delete(m.clearedFields, orderitem.FieldUnitListPrice)
}

// SetUnitAverageCost sets the "unit_average_cost" field.
func (m *OrderItemMutation) SetUnitAverageCost(f float64) {
	m.unit_average_cost = &f
	m.addunit_average_cost = nil
}

// UnitAverageCost returns the value of the "unit_average_cost" field in the mutation.
func (m *OrderItemMutation) UnitAverageCost() (r float64, exists bool) {
	v := m.unit_average_cost
	if v == nil {
		return
	}
	return *v, true
}

// OldUnitAverageCost returns the old "unit_average_cost" field's value of the OrderItem entity.
// If the OrderItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderItemMutation) OldUnitAverageCost(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUnitAverageCost is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUnitAverageCost requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUnitAverageCost: %w", err)
	}
	return oldValue.UnitAverageCost, nil
}

// AddUnitAverageCost adds f to the "unit_average_cost" field.
func (m *OrderItemMutation) AddUnitAverageCost(f float64) {
	if m.addunit_average_cost != nil {
		*m.addunit_average_cost += f
	} else {
		m.addunit_average_cost = &f
	}
}

// AddedUnitAverageCost returns the value that was added to the "unit_average_cost" field in this mutation.
func (m *OrderItemMutation) AddedUnitAverageCost() (r float64, exists bool) {
	v := m.addunit_average_cost
	if v == nil {
		return
	}
	return *v, true
}

// ClearUnitAverageCost clears the value of the "unit_average_cost" field.
func (m *OrderItemMutation) ClearUnitAverageCost() {
	m.unit_average_cost = nil
	m.addunit_average_cost = nil
	m.clearedFields[orderitem.FieldUnitAverageCost] = struct{}{}
}

// UnitAverageCostCleared returns if the "unit_average_cost" field was cleared in this mutation.
func (m *OrderItemMutation) UnitAverageCostCleared() bool {
	_, ok := m.clearedFields[orderitem.FieldUnitAverageCost]
	return ok
}

// ResetUnitAverageCost resets all changes to the "unit_average_cost" field.
func (m *OrderItemMutation) ResetUnitAverageCost() {
	m.unit_average_cost = nil
	m.addunit_average_cost = nil
	delete(m.clearedFields, orderitem.FieldUnitAverageCost)
}

// SetUnitRecurringPrice sets the "unit_recurring_price" field.
func (m *OrderItemMutation) SetUnitRecurringPrice(f float64) {
	m.unit_recurring_price = &f
	m.addunit_recurring_price = nil
}

// UnitRecurringPrice returns the value of the "unit_recurring_price" field in the mutation.
func (m *OrderItemMutation) UnitRecurringPrice() (r float64, exists bool) {
	v := m.unit_recurring_price
	if v == nil {
		return
	}
	return *v, true
}

// OldUnitRecurringPrice returns the old "unit_recurring_price" field's value of the OrderItem entity.
// If the OrderItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderItemMutation) OldUnitRecurringPrice(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUnitRecurringPrice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUnitRecurringPrice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUnitRecurringPrice: %w", err)
	}
	return oldValue.UnitRecurringPrice, nil
}

// AddUnitRecurringPrice adds f to the "unit_recurring_price" field.
func (m *OrderItemMutation) AddUnitRecurringPrice(f float64) {
	if m.addunit_recurring_price != nil {
		*m.addunit_recurring_price += f
	} else {
		m.addunit_recurring_price = &f
	}
}

// AddedUnitRecurringPrice returns the value that was added to the "unit_recurring_price" field in this mutation.
func (m *OrderItemMutation) AddedUnitRecurringPrice() (r float64, exists bool) {
	v := m.addunit_recurring_price
	if v == nil {
		return
	}
	return *v, true
}

// ClearUnitRecurringPrice clears the value of the "unit_recurring_price" field.
func (m *OrderItemMutation) ClearUnitRecurringPrice() {
	m.unit_recurring_price = nil
	m.addunit_recurring_price = nil
	m.clearedFields[orderitem.FieldUnitRecurringPrice] = struct{}{}
}

// UnitRecurringPriceCleared returns if the "unit_recurring_price" field was cleared in this mutation.
func (m *OrderItemMutation) UnitRecurringPriceCleared() bool {
	_, ok := m.clearedFields[orderitem.FieldUnitRecurringPrice]
	return ok
}

// ResetUnitRecurringPrice resets all changes to the "unit_recurring_price" field.
func (m *OrderItemMutation) ResetUnitRecurringPrice() {
	m.unit_recurring_price = nil
	m.addunit_recurring_price = nil
	delete(m.clearedFields, orderitem.FieldUnitRecurringPrice)
}

// SetIsModifiedPrice sets the "is_modified_price" field.
func (m *OrderItemMutation) SetIsModifiedPrice(omp orderitem.IsModifiedPrice) {
	m.is_modified_price = &omp
}

// IsModifiedPrice returns the value of the "is_modified_price" field in the mutation.
func (m *OrderItemMutation) IsModifiedPrice() (r orderitem.IsModifiedPrice, exists bool) {
	v := m.is_modified_price
	if v == nil {
		return
	}
	return *v, true
}

// OldIsModifiedPrice returns the old "is_modified_price" field's value of the OrderItem entity.
// If the OrderItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderItemMutation) OldIsModifiedPrice(ctx context.Context) (v orderitem.IsModifiedPrice, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldIsModifiedPrice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldIsModifiedPrice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsModifiedPrice: %w", err)
	}
	return oldValue.IsModifiedPrice, nil
}

// ClearIsModifiedPrice clears the value of the "is_modified_price" field.
func (m *OrderItemMutation) ClearIsModifiedPrice() {
	m.is_modified_price = nil
	m.clearedFields[orderitem.FieldIsModifiedPrice] = struct{}{}
}

// IsModifiedPriceCleared returns if the "is_modified_price" field was cleared in this mutation.
func (m *OrderItemMutation) IsModifiedPriceCleared() bool {
	_, ok := m.clearedFields[orderitem.FieldIsModifiedPrice]
	return ok
}

// ResetIsModifiedPrice resets all changes to the "is_modified_price" field.
func (m *OrderItemMutation) ResetIsModifiedPrice() {
	m.is_modified_price = nil
	delete(m.clearedFields, orderitem.FieldIsModifiedPrice)
}

// SetRecurringFreqUomID sets the "recurring_freq_uom_id" field.
func (m *OrderItemMutation) SetRecurringFreqUomID(i int) {
	m.recurring_freq_uom_id = &i
	m.addrecurring_freq_uom_id = nil
}

// RecurringFreqUomID returns the value of the "recurring_freq_uom_id" field in the mutation.
func (m *OrderItemMutation) RecurringFreqUomID() (r int, exists bool) {
	v := m.recurring_freq_uom_id
	if v == nil {
		return
	}
	return *v, true
}

// OldRecurringFreqUomID returns the old "recurring_freq_uom_id" field's value of the OrderItem entity.
// If the OrderItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderItemMutation) OldRecurringFreqUomID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRecurringFreqUomID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRecurringFreqUomID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRecurringFreqUomID: %w", err)
	}
	return oldValue.RecurringFreqUomID, nil
}

// AddRecurringFreqUomID adds i to the "recurring_freq_uom_id" field.
func (m *OrderItemMutation) AddRecurringFreqUomID(i int) {
	if m.addrecurring_freq_uom_id != nil {
		*m.addrecurring_freq_uom_id += i
	} else {
		m.addrecurring_freq_uom_id = &i
	}
}

// AddedRecurringFreqUomID returns the value that was added to the "recurring_freq_uom_id" field in this mutation.
func (m *OrderItemMutation) AddedRecurringFreqUomID() (r int, exists bool) {
	v := m.addrecurring_freq_uom_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearRecurringFreqUomID clears the value of the "recurring_freq_uom_id" field.
func (m *OrderItemMutation) ClearRecurringFreqUomID() {
	m.recurring_freq_uom_id = nil
	m.addrecurring_freq_uom_id = nil
	m.clearedFields[orderitem.FieldRecurringFreqUomID] = struct{}{}
}

// RecurringFreqUomIDCleared returns if the "recurring_freq_uom_id" field was cleared in this mutation.
func (m *OrderItemMutation) RecurringFreqUomIDCleared() bool {
	_, ok := m.clearedFields[orderitem.FieldRecurringFreqUomID]
	return ok
}

// ResetRecurringFreqUomID resets all changes to the "recurring_freq_uom_id" field.
func (m *OrderItemMutation) ResetRecurringFreqUomID() {
	m.recurring_freq_uom_id = nil
	m.addrecurring_freq_uom_id = nil
	delete(m.clearedFields, orderitem.FieldRecurringFreqUomID)
}

// SetItemDescription sets the "item_description" field.
func (m *OrderItemMutation) SetItemDescription(s string) {
	m.item_description = &s
}

// ItemDescription returns the value of the "item_description" field in the mutation.
func (m *OrderItemMutation) ItemDescription() (r string, exists bool) {
	v := m.item_description
	if v == nil {
		return
	}
	return *v, true
}

// OldItemDescription returns the old "item_description" field's value of the OrderItem entity.
// If the OrderItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderItemMutation) OldItemDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldItemDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldItemDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldItemDescription: %w", err)
	}
	return oldValue.ItemDescription, nil
}

// ClearItemDescription clears the value of the "item_description" field.
func (m *OrderItemMutation) ClearItemDescription() {
	m.item_description = nil
	m.clearedFields[orderitem.FieldItemDescription] = struct{}{}
}

// ItemDescriptionCleared returns if the "item_description" field was cleared in this mutation.
func (m *OrderItemMutation) ItemDescriptionCleared() bool {
	_, ok := m.clearedFields[orderitem.FieldItemDescription]
	return ok
}

// ResetItemDescription resets all changes to the "item_description" field.
func (m *OrderItemMutation) ResetItemDescription() {
	m.item_description = nil
	delete(m.clearedFields, orderitem.FieldItemDescription)
}

// SetComments sets the "comments" field.
func (m *OrderItemMutation) SetComments(s string) {
	m.comments = &s
}

// Comments returns the value of the "comments" field in the mutation.
func (m *OrderItemMutation) Comments() (r string, exists bool) {
	v := m.comments
	if v == nil {
		return
	}
	return *v, true
}

// OldComments returns the old "comments" field's value of the OrderItem entity.
// If the OrderItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderItemMutation) OldComments(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldComments is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldComments requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldComments: %w", err)
	}
	return oldValue.Comments, nil
}

// ClearComments clears the value of the "comments" field.
func (m *OrderItemMutation) ClearComments() {
	m.comments = nil
	m.clearedFields[orderitem.FieldComments] = struct{}{}
}

// CommentsCleared returns if the "comments" field was cleared in this mutation.
func (m *OrderItemMutation) CommentsCleared() bool {
	_, ok := m.clearedFields[orderitem.FieldComments]
	return ok
}

// ResetComments resets all changes to the "comments" field.
func (m *OrderItemMutation) ResetComments() {
	m.comments = nil
	delete(m.clearedFields, orderitem.FieldComments)
}

// SetCorrespondingPoID sets the "corresponding_po_id" field.
func (m *OrderItemMutation) SetCorrespondingPoID(i int) {
	m.corresponding_po_id = &i
	m.addcorresponding_po_id = nil
}

// CorrespondingPoID returns the value of the "corresponding_po_id" field in the mutation.
func (m *OrderItemMutation) CorrespondingPoID() (r int, exists bool) {
	v := m.corresponding_po_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCorrespondingPoID returns the old "corresponding_po_id" field's value of the OrderItem entity.
// If the OrderItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderItemMutation) OldCorrespondingPoID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCorrespondingPoID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCorrespondingPoID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCorrespondingPoID: %w", err)
	}
	return oldValue.CorrespondingPoID, nil
}

// AddCorrespondingPoID adds i to the "corresponding_po_id" field.
func (m *OrderItemMutation) AddCorrespondingPoID(i int) {
	if m.addcorresponding_po_id != nil {
		*m.addcorresponding_po_id += i
	} else {
		m.addcorresponding_po_id = &i
	}
}

// AddedCorrespondingPoID returns the value that was added to the "corresponding_po_id" field in this mutation.
func (m *OrderItemMutation) AddedCorrespondingPoID() (r int, exists bool) {
	v := m.addcorresponding_po_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearCorrespondingPoID clears the value of the "corresponding_po_id" field.
func (m *OrderItemMutation) ClearCorrespondingPoID() {
	m.corresponding_po_id = nil
	m.addcorresponding_po_id = nil
	m.clearedFields[orderitem.FieldCorrespondingPoID] = struct{}{}
}

// CorrespondingPoIDCleared returns if the "corresponding_po_id" field was cleared in this mutation.
func (m *OrderItemMutation) CorrespondingPoIDCleared() bool {
	_, ok := m.clearedFields[orderitem.FieldCorrespondingPoID]
	return ok
}

// ResetCorrespondingPoID resets all changes to the "corresponding_po_id" field.
func (m *OrderItemMutation) ResetCorrespondingPoID() {
	m.corresponding_po_id = nil
	m.addcorresponding_po_id = nil
	delete(m.clearedFields, orderitem.FieldCorrespondingPoID)
}

// SetStatusID sets the "status_id" field.
func (m *OrderItemMutation) SetStatusID(i int) {
	m.status_id = &i
	m.addstatus_id = nil
}

// StatusID returns the value of the "status_id" field in the mutation.
func (m *OrderItemMutation) StatusID() (r int, exists bool) {
	v := m.status_id
	if v == nil {
		return
	}
	return *v, true
}

// OldStatusID returns the old "status_id" field's value of the OrderItem entity.
// If the OrderItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderItemMutation) OldStatusID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldStatusID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldStatusID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatusID: %w", err)
	}
	return oldValue.StatusID, nil
}

// AddStatusID adds i to the "status_id" field.
func (m *OrderItemMutation) AddStatusID(i int) {
	if m.addstatus_id != nil {
		*m.addstatus_id += i
	} else {
		m.addstatus_id = &i
	}
}

// AddedStatusID returns the value that was added to the "status_id" field in this mutation.
func (m *OrderItemMutation) AddedStatusID() (r int, exists bool) {
	v := m.addstatus_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearStatusID clears the value of the "status_id" field.
func (m *OrderItemMutation) ClearStatusID() {
	m.status_id = nil
	m.addstatus_id = nil
	m.clearedFields[orderitem.FieldStatusID] = struct{}{}
}

// StatusIDCleared returns if the "status_id" field was cleared in this mutation.
func (m *OrderItemMutation) StatusIDCleared() bool {
	_, ok := m.clearedFields[orderitem.FieldStatusID]
	return ok
}

// ResetStatusID resets all changes to the "status_id" field.
func (m *OrderItemMutation) ResetStatusID() {
	m.status_id = nil
	m.addstatus_id = nil
	delete(m.clearedFields, orderitem.FieldStatusID)
}

// SetSyncStatusID sets the "sync_status_id" field.
func (m *OrderItemMutation) SetSyncStatusID(i int) {
	m.sync_status_id = &i
	m.addsync_status_id = nil
}

// SyncStatusID returns the value of the "sync_status_id" field in the mutation.
func (m *OrderItemMutation) SyncStatusID() (r int, exists bool) {
	v := m.sync_status_id
	if v == nil {
		return
	}
	return *v, true
}

// OldSyncStatusID returns the old "sync_status_id" field's value of the OrderItem entity.
// If the OrderItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderItemMutation) OldSyncStatusID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSyncStatusID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSyncStatusID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSyncStatusID: %w", err)
	}
	return oldValue.SyncStatusID, nil
}

// AddSyncStatusID adds i to the "sync_status_id" field.
func (m *OrderItemMutation) AddSyncStatusID(i int) {
	if m.addsync_status_id != nil {
		*m.addsync_status_id += i
	} else {
		m.addsync_status_id = &i
	}
}

// AddedSyncStatusID returns the value that was added to the "sync_status_id" field in this mutation.
func (m *OrderItemMutation) AddedSyncStatusID() (r int, exists bool) {
	v := m.addsync_status_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearSyncStatusID clears the value of the "sync_status_id" field.
func (m *OrderItemMutation) ClearSyncStatusID() {
	m.sync_status_id = nil
	m.addsync_status_id = nil
	m.clearedFields[orderitem.FieldSyncStatusID] = struct{}{}
}

// SyncStatusIDCleared returns if the "sync_status_id" field was cleared in this mutation.
func (m *OrderItemMutation) SyncStatusIDCleared() bool {
	_, ok := m.clearedFields[orderitem.FieldSyncStatusID]
	return ok
}

// ResetSyncStatusID resets all changes to the "sync_status_id" field.
func (m *OrderItemMutation) ResetSyncStatusID() {
	m.sync_status_id = nil
	m.addsync_status_id = nil
	delete(m.clearedFields, orderitem.FieldSyncStatusID)
}

// SetEstimatedShipDate sets the "estimated_ship_date" field.
func (m *OrderItemMutation) SetEstimatedShipDate(t time.Time) {
	m.estimated_ship_date = &t
}

// EstimatedShipDate returns the value of the "estimated_ship_date" field in the mutation.
func (m *OrderItemMutation) EstimatedShipDate() (r time.Time, exists bool) {
	v := m.estimated_ship_date
	if v == nil {
		return
	}
	return *v, true
}

// OldEstimatedShipDate returns the old "estimated_ship_date" field's value of the OrderItem entity.
// If the OrderItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderItemMutation) OldEstimatedShipDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEstimatedShipDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEstimatedShipDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEstimatedShipDate: %w", err)
	}
	return oldValue.EstimatedShipDate, nil
}

// ClearEstimatedShipDate clears the value of the "estimated_ship_date" field.
func (m *OrderItemMutation) ClearEstimatedShipDate() {
	m.estimated_ship_date = nil
	m.clearedFields[orderitem.FieldEstimatedShipDate] = struct{}{}
}

// EstimatedShipDateCleared returns if the "estimated_ship_date" field was cleared in this mutation.
func (m *OrderItemMutation) EstimatedShipDateCleared() bool {
	_, ok := m.clearedFields[orderitem.FieldEstimatedShipDate]
	return ok
}

// ResetEstimatedShipDate resets all changes to the "estimated_ship_date" field.
func (m *OrderItemMutation) ResetEstimatedShipDate() {
	m.estimated_ship_date = nil
	delete(m.clearedFields, orderitem.FieldEstimatedShipDate)
}

// SetEstimatedDeliveryDate sets the "estimated_delivery_date" field.
func (m *OrderItemMutation) SetEstimatedDeliveryDate(t time.Time) {
	m.estimated_delivery_date = &t
}

// EstimatedDeliveryDate returns the value of the "estimated_delivery_date" field in the mutation.
func (m *OrderItemMutation) EstimatedDeliveryDate() (r time.Time, exists bool) {
	v := m.estimated_delivery_date
	if v == nil {
		return
	}
	return *v, true
}

// OldEstimatedDeliveryDate returns the old "estimated_delivery_date" field's value of the OrderItem entity.
// If the OrderItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderItemMutation) OldEstimatedDeliveryDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEstimatedDeliveryDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEstimatedDeliveryDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEstimatedDeliveryDate: %w", err)
	}
	return oldValue.EstimatedDeliveryDate, nil
}

// ClearEstimatedDeliveryDate clears the value of the "estimated_delivery_date" field.
func (m *OrderItemMutation) ClearEstimatedDeliveryDate() {
	m.estimated_delivery_date = nil
	m.clearedFields[orderitem.FieldEstimatedDeliveryDate] = struct{}{}
}

// EstimatedDeliveryDateCleared returns if the "estimated_delivery_date" field was cleared in this mutation.
func (m *OrderItemMutation) EstimatedDeliveryDateCleared() bool {
	_, ok := m.clearedFields[orderitem.FieldEstimatedDeliveryDate]
	return ok
}

// ResetEstimatedDeliveryDate resets all changes to the "estimated_delivery_date" field.
func (m *OrderItemMutation) ResetEstimatedDeliveryDate() {
	m.estimated_delivery_date = nil
	delete(m.clearedFields, orderitem.FieldEstimatedDeliveryDate)
}

// SetAutoCancelDate sets the "auto_cancel_date" field.
func (m *OrderItemMutation) SetAutoCancelDate(t time.Time) {
	m.auto_cancel_date = &t
}

// AutoCancelDate returns the value of the "auto_cancel_date" field in the mutation.
func (m *OrderItemMutation) AutoCancelDate() (r time.Time, exists bool) {
	v := m.auto_cancel_date
	if v == nil {
		return
	}
	return *v, true
}

// OldAutoCancelDate returns the old "auto_cancel_date" field's value of the OrderItem entity.
// If the OrderItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderItemMutation) OldAutoCancelDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAutoCancelDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAutoCancelDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAutoCancelDate: %w", err)
	}
	return oldValue.AutoCancelDate, nil
}

// ClearAutoCancelDate clears the value of the "auto_cancel_date" field.
func (m *OrderItemMutation) ClearAutoCancelDate() {
	m.auto_cancel_date = nil
	m.clearedFields[orderitem.FieldAutoCancelDate] = struct{}{}
}

// AutoCancelDateCleared returns if the "auto_cancel_date" field was cleared in this mutation.
func (m *OrderItemMutation) AutoCancelDateCleared() bool {
	_, ok := m.clearedFields[orderitem.FieldAutoCancelDate]
	return ok
}

// ResetAutoCancelDate resets all changes to the "auto_cancel_date" field.
func (m *OrderItemMutation) ResetAutoCancelDate() {
	m.auto_cancel_date = nil
	delete(m.clearedFields, orderitem.FieldAutoCancelDate)
}

// SetDontCancelSetDate sets the "dont_cancel_set_date" field.
func (m *OrderItemMutation) SetDontCancelSetDate(t time.Time) {
	m.dont_cancel_set_date = &t
}

// DontCancelSetDate returns the value of the "dont_cancel_set_date" field in the mutation.
func (m *OrderItemMutation) DontCancelSetDate() (r time.Time, exists bool) {
	v := m.dont_cancel_set_date
	if v == nil {
		return
	}
	return *v, true
}

// OldDontCancelSetDate returns the old "dont_cancel_set_date" field's value of the OrderItem entity.
// If the OrderItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderItemMutation) OldDontCancelSetDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDontCancelSetDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDontCancelSetDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDontCancelSetDate: %w", err)
	}
	return oldValue.DontCancelSetDate, nil
}

// ClearDontCancelSetDate clears the value of the "dont_cancel_set_date" field.
func (m *OrderItemMutation) ClearDontCancelSetDate() {
	m.dont_cancel_set_date = nil
	m.clearedFields[orderitem.FieldDontCancelSetDate] = struct{}{}
}

// DontCancelSetDateCleared returns if the "dont_cancel_set_date" field was cleared in this mutation.
func (m *OrderItemMutation) DontCancelSetDateCleared() bool {
	_, ok := m.clearedFields[orderitem.FieldDontCancelSetDate]
	return ok
}

// ResetDontCancelSetDate resets all changes to the "dont_cancel_set_date" field.
func (m *OrderItemMutation) ResetDontCancelSetDate() {
	m.dont_cancel_set_date = nil
	delete(m.clearedFields, orderitem.FieldDontCancelSetDate)
}

// SetDontCancelSetUserLogin sets the "dont_cancel_set_user_login" field.
func (m *OrderItemMutation) SetDontCancelSetUserLogin(s string) {
	m.dont_cancel_set_user_login = &s
}

// DontCancelSetUserLogin returns the value of the "dont_cancel_set_user_login" field in the mutation.
func (m *OrderItemMutation) DontCancelSetUserLogin() (r string, exists bool) {
	v := m.dont_cancel_set_user_login
	if v == nil {
		return
	}
	return *v, true
}

// OldDontCancelSetUserLogin returns the old "dont_cancel_set_user_login" field's value of the OrderItem entity.
// If the OrderItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderItemMutation) OldDontCancelSetUserLogin(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDontCancelSetUserLogin is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDontCancelSetUserLogin requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDontCancelSetUserLogin: %w", err)
	}
	return oldValue.DontCancelSetUserLogin, nil
}

// ClearDontCancelSetUserLogin clears the value of the "dont_cancel_set_user_login" field.
func (m *OrderItemMutation) ClearDontCancelSetUserLogin() {
	m.dont_cancel_set_user_login = nil
	m.clearedFields[orderitem.FieldDontCancelSetUserLogin] = struct{}{}
}

// DontCancelSetUserLoginCleared returns if the "dont_cancel_set_user_login" field was cleared in this mutation.
func (m *OrderItemMutation) DontCancelSetUserLoginCleared() bool {
	_, ok := m.clearedFields[orderitem.FieldDontCancelSetUserLogin]
	return ok
}

// ResetDontCancelSetUserLogin resets all changes to the "dont_cancel_set_user_login" field.
func (m *OrderItemMutation) ResetDontCancelSetUserLogin() {
	m.dont_cancel_set_user_login = nil
	delete(m.clearedFields, orderitem.FieldDontCancelSetUserLogin)
}

// SetShipBeforeDate sets the "ship_before_date" field.
func (m *OrderItemMutation) SetShipBeforeDate(t time.Time) {
	m.ship_before_date = &t
}

// ShipBeforeDate returns the value of the "ship_before_date" field in the mutation.
func (m *OrderItemMutation) ShipBeforeDate() (r time.Time, exists bool) {
	v := m.ship_before_date
	if v == nil {
		return
	}
	return *v, true
}

// OldShipBeforeDate returns the old "ship_before_date" field's value of the OrderItem entity.
// If the OrderItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderItemMutation) OldShipBeforeDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldShipBeforeDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldShipBeforeDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShipBeforeDate: %w", err)
	}
	return oldValue.ShipBeforeDate, nil
}

// ClearShipBeforeDate clears the value of the "ship_before_date" field.
func (m *OrderItemMutation) ClearShipBeforeDate() {
	m.ship_before_date = nil
	m.clearedFields[orderitem.FieldShipBeforeDate] = struct{}{}
}

// ShipBeforeDateCleared returns if the "ship_before_date" field was cleared in this mutation.
func (m *OrderItemMutation) ShipBeforeDateCleared() bool {
	_, ok := m.clearedFields[orderitem.FieldShipBeforeDate]
	return ok
}

// ResetShipBeforeDate resets all changes to the "ship_before_date" field.
func (m *OrderItemMutation) ResetShipBeforeDate() {
	m.ship_before_date = nil
	delete(m.clearedFields, orderitem.FieldShipBeforeDate)
}

// SetShipAfterDate sets the "ship_after_date" field.
func (m *OrderItemMutation) SetShipAfterDate(t time.Time) {
	m.ship_after_date = &t
}

// ShipAfterDate returns the value of the "ship_after_date" field in the mutation.
func (m *OrderItemMutation) ShipAfterDate() (r time.Time, exists bool) {
	v := m.ship_after_date
	if v == nil {
		return
	}
	return *v, true
}

// OldShipAfterDate returns the old "ship_after_date" field's value of the OrderItem entity.
// If the OrderItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderItemMutation) OldShipAfterDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldShipAfterDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldShipAfterDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShipAfterDate: %w", err)
	}
	return oldValue.ShipAfterDate, nil
}

// ClearShipAfterDate clears the value of the "ship_after_date" field.
func (m *OrderItemMutation) ClearShipAfterDate() {
	m.ship_after_date = nil
	m.clearedFields[orderitem.FieldShipAfterDate] = struct{}{}
}

// ShipAfterDateCleared returns if the "ship_after_date" field was cleared in this mutation.
func (m *OrderItemMutation) ShipAfterDateCleared() bool {
	_, ok := m.clearedFields[orderitem.FieldShipAfterDate]
	return ok
}

// ResetShipAfterDate resets all changes to the "ship_after_date" field.
func (m *OrderItemMutation) ResetShipAfterDate() {
	m.ship_after_date = nil
	delete(m.clearedFields, orderitem.FieldShipAfterDate)
}

// SetReserveAfterDate sets the "reserve_after_date" field.
func (m *OrderItemMutation) SetReserveAfterDate(t time.Time) {
	m.reserve_after_date = &t
}

// ReserveAfterDate returns the value of the "reserve_after_date" field in the mutation.
func (m *OrderItemMutation) ReserveAfterDate() (r time.Time, exists bool) {
	v := m.reserve_after_date
	if v == nil {
		return
	}
	return *v, true
}

// OldReserveAfterDate returns the old "reserve_after_date" field's value of the OrderItem entity.
// If the OrderItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderItemMutation) OldReserveAfterDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldReserveAfterDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldReserveAfterDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReserveAfterDate: %w", err)
	}
	return oldValue.ReserveAfterDate, nil
}

// ClearReserveAfterDate clears the value of the "reserve_after_date" field.
func (m *OrderItemMutation) ClearReserveAfterDate() {
	m.reserve_after_date = nil
	m.clearedFields[orderitem.FieldReserveAfterDate] = struct{}{}
}

// ReserveAfterDateCleared returns if the "reserve_after_date" field was cleared in this mutation.
func (m *OrderItemMutation) ReserveAfterDateCleared() bool {
	_, ok := m.clearedFields[orderitem.FieldReserveAfterDate]
	return ok
}

// ResetReserveAfterDate resets all changes to the "reserve_after_date" field.
func (m *OrderItemMutation) ResetReserveAfterDate() {
	m.reserve_after_date = nil
	delete(m.clearedFields, orderitem.FieldReserveAfterDate)
}

// SetCancelBackOrderDate sets the "cancel_back_order_date" field.
func (m *OrderItemMutation) SetCancelBackOrderDate(t time.Time) {
	m.cancel_back_order_date = &t
}

// CancelBackOrderDate returns the value of the "cancel_back_order_date" field in the mutation.
func (m *OrderItemMutation) CancelBackOrderDate() (r time.Time, exists bool) {
	v := m.cancel_back_order_date
	if v == nil {
		return
	}
	return *v, true
}

// OldCancelBackOrderDate returns the old "cancel_back_order_date" field's value of the OrderItem entity.
// If the OrderItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderItemMutation) OldCancelBackOrderDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCancelBackOrderDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCancelBackOrderDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCancelBackOrderDate: %w", err)
	}
	return oldValue.CancelBackOrderDate, nil
}

// ClearCancelBackOrderDate clears the value of the "cancel_back_order_date" field.
func (m *OrderItemMutation) ClearCancelBackOrderDate() {
	m.cancel_back_order_date = nil
	m.clearedFields[orderitem.FieldCancelBackOrderDate] = struct{}{}
}

// CancelBackOrderDateCleared returns if the "cancel_back_order_date" field was cleared in this mutation.
func (m *OrderItemMutation) CancelBackOrderDateCleared() bool {
	_, ok := m.clearedFields[orderitem.FieldCancelBackOrderDate]
	return ok
}

// ResetCancelBackOrderDate resets all changes to the "cancel_back_order_date" field.
func (m *OrderItemMutation) ResetCancelBackOrderDate() {
	m.cancel_back_order_date = nil
	delete(m.clearedFields, orderitem.FieldCancelBackOrderDate)
}

// SetOverrideGlAccountID sets the "override_gl_account_id" field.
func (m *OrderItemMutation) SetOverrideGlAccountID(i int) {
	m.override_gl_account_id = &i
	m.addoverride_gl_account_id = nil
}

// OverrideGlAccountID returns the value of the "override_gl_account_id" field in the mutation.
func (m *OrderItemMutation) OverrideGlAccountID() (r int, exists bool) {
	v := m.override_gl_account_id
	if v == nil {
		return
	}
	return *v, true
}

// OldOverrideGlAccountID returns the old "override_gl_account_id" field's value of the OrderItem entity.
// If the OrderItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderItemMutation) OldOverrideGlAccountID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldOverrideGlAccountID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldOverrideGlAccountID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOverrideGlAccountID: %w", err)
	}
	return oldValue.OverrideGlAccountID, nil
}

// AddOverrideGlAccountID adds i to the "override_gl_account_id" field.
func (m *OrderItemMutation) AddOverrideGlAccountID(i int) {
	if m.addoverride_gl_account_id != nil {
		*m.addoverride_gl_account_id += i
	} else {
		m.addoverride_gl_account_id = &i
	}
}

// AddedOverrideGlAccountID returns the value that was added to the "override_gl_account_id" field in this mutation.
func (m *OrderItemMutation) AddedOverrideGlAccountID() (r int, exists bool) {
	v := m.addoverride_gl_account_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearOverrideGlAccountID clears the value of the "override_gl_account_id" field.
func (m *OrderItemMutation) ClearOverrideGlAccountID() {
	m.override_gl_account_id = nil
	m.addoverride_gl_account_id = nil
	m.clearedFields[orderitem.FieldOverrideGlAccountID] = struct{}{}
}

// OverrideGlAccountIDCleared returns if the "override_gl_account_id" field was cleared in this mutation.
func (m *OrderItemMutation) OverrideGlAccountIDCleared() bool {
	_, ok := m.clearedFields[orderitem.FieldOverrideGlAccountID]
	return ok
}

// ResetOverrideGlAccountID resets all changes to the "override_gl_account_id" field.
func (m *OrderItemMutation) ResetOverrideGlAccountID() {
	m.override_gl_account_id = nil
	m.addoverride_gl_account_id = nil
	delete(m.clearedFields, orderitem.FieldOverrideGlAccountID)
}

// SetSalesOpportunityID sets the "sales_opportunity_id" field.
func (m *OrderItemMutation) SetSalesOpportunityID(i int) {
	m.sales_opportunity_id = &i
	m.addsales_opportunity_id = nil
}

// SalesOpportunityID returns the value of the "sales_opportunity_id" field in the mutation.
func (m *OrderItemMutation) SalesOpportunityID() (r int, exists bool) {
	v := m.sales_opportunity_id
	if v == nil {
		return
	}
	return *v, true
}

// OldSalesOpportunityID returns the old "sales_opportunity_id" field's value of the OrderItem entity.
// If the OrderItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderItemMutation) OldSalesOpportunityID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSalesOpportunityID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSalesOpportunityID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSalesOpportunityID: %w", err)
	}
	return oldValue.SalesOpportunityID, nil
}

// AddSalesOpportunityID adds i to the "sales_opportunity_id" field.
func (m *OrderItemMutation) AddSalesOpportunityID(i int) {
	if m.addsales_opportunity_id != nil {
		*m.addsales_opportunity_id += i
	} else {
		m.addsales_opportunity_id = &i
	}
}

// AddedSalesOpportunityID returns the value that was added to the "sales_opportunity_id" field in this mutation.
func (m *OrderItemMutation) AddedSalesOpportunityID() (r int, exists bool) {
	v := m.addsales_opportunity_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearSalesOpportunityID clears the value of the "sales_opportunity_id" field.
func (m *OrderItemMutation) ClearSalesOpportunityID() {
	m.sales_opportunity_id = nil
	m.addsales_opportunity_id = nil
	m.clearedFields[orderitem.FieldSalesOpportunityID] = struct{}{}
}

// SalesOpportunityIDCleared returns if the "sales_opportunity_id" field was cleared in this mutation.
func (m *OrderItemMutation) SalesOpportunityIDCleared() bool {
	_, ok := m.clearedFields[orderitem.FieldSalesOpportunityID]
	return ok
}

// ResetSalesOpportunityID resets all changes to the "sales_opportunity_id" field.
func (m *OrderItemMutation) ResetSalesOpportunityID() {
	m.sales_opportunity_id = nil
	m.addsales_opportunity_id = nil
	delete(m.clearedFields, orderitem.FieldSalesOpportunityID)
}

// SetChangeByUserLoginID sets the "change_by_user_login_id" field.
func (m *OrderItemMutation) SetChangeByUserLoginID(s string) {
	m.change_by_user_login_id = &s
}

// ChangeByUserLoginID returns the value of the "change_by_user_login_id" field in the mutation.
func (m *OrderItemMutation) ChangeByUserLoginID() (r string, exists bool) {
	v := m.change_by_user_login_id
	if v == nil {
		return
	}
	return *v, true
}

// OldChangeByUserLoginID returns the old "change_by_user_login_id" field's value of the OrderItem entity.
// If the OrderItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderItemMutation) OldChangeByUserLoginID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldChangeByUserLoginID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldChangeByUserLoginID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChangeByUserLoginID: %w", err)
	}
	return oldValue.ChangeByUserLoginID, nil
}

// ClearChangeByUserLoginID clears the value of the "change_by_user_login_id" field.
func (m *OrderItemMutation) ClearChangeByUserLoginID() {
	m.change_by_user_login_id = nil
	m.clearedFields[orderitem.FieldChangeByUserLoginID] = struct{}{}
}

// ChangeByUserLoginIDCleared returns if the "change_by_user_login_id" field was cleared in this mutation.
func (m *OrderItemMutation) ChangeByUserLoginIDCleared() bool {
	_, ok := m.clearedFields[orderitem.FieldChangeByUserLoginID]
	return ok
}

// ResetChangeByUserLoginID resets all changes to the "change_by_user_login_id" field.
func (m *OrderItemMutation) ResetChangeByUserLoginID() {
	m.change_by_user_login_id = nil
	delete(m.clearedFields, orderitem.FieldChangeByUserLoginID)
}

// SetOrderHeaderID sets the "order_header" edge to the OrderHeader entity by id.
func (m *OrderItemMutation) SetOrderHeaderID(id int) {
	m.order_header = &id
}

// ClearOrderHeader clears the "order_header" edge to the OrderHeader entity.
func (m *OrderItemMutation) ClearOrderHeader() {
	m.clearedorder_header = true
}

// OrderHeaderCleared reports if the "order_header" edge to the OrderHeader entity was cleared.
func (m *OrderItemMutation) OrderHeaderCleared() bool {
	return m.clearedorder_header
}

// OrderHeaderID returns the "order_header" edge ID in the mutation.
func (m *OrderItemMutation) OrderHeaderID() (id int, exists bool) {
	if m.order_header != nil {
		return *m.order_header, true
	}
	return
}

// OrderHeaderIDs returns the "order_header" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OrderHeaderID instead. It exists only for internal usage by the builders.
func (m *OrderItemMutation) OrderHeaderIDs() (ids []int) {
	if id := m.order_header; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOrderHeader resets all changes to the "order_header" edge.
func (m *OrderItemMutation) ResetOrderHeader() {
	m.order_header = nil
	m.clearedorder_header = false
}

// AddItemIssuanceIDs adds the "item_issuances" edge to the ItemIssuance entity by ids.
func (m *OrderItemMutation) AddItemIssuanceIDs(ids ...int) {
	if m.item_issuances == nil {
		m.item_issuances = make(map[int]struct{})
	}
	for i := range ids {
		m.item_issuances[ids[i]] = struct{}{}
	}
}

// ClearItemIssuances clears the "item_issuances" edge to the ItemIssuance entity.
func (m *OrderItemMutation) ClearItemIssuances() {
	m.cleareditem_issuances = true
}

// ItemIssuancesCleared reports if the "item_issuances" edge to the ItemIssuance entity was cleared.
func (m *OrderItemMutation) ItemIssuancesCleared() bool {
	return m.cleareditem_issuances
}

// RemoveItemIssuanceIDs removes the "item_issuances" edge to the ItemIssuance entity by IDs.
func (m *OrderItemMutation) RemoveItemIssuanceIDs(ids ...int) {
	if m.removeditem_issuances == nil {
		m.removeditem_issuances = make(map[int]struct{})
	}
	for i := range ids {
		m.removeditem_issuances[ids[i]] = struct{}{}
	}
}

// RemovedItemIssuances returns the removed IDs of the "item_issuances" edge to the ItemIssuance entity.
func (m *OrderItemMutation) RemovedItemIssuancesIDs() (ids []int) {
	for id := range m.removeditem_issuances {
		ids = append(ids, id)
	}
	return
}

// ItemIssuancesIDs returns the "item_issuances" edge IDs in the mutation.
func (m *OrderItemMutation) ItemIssuancesIDs() (ids []int) {
	for id := range m.item_issuances {
		ids = append(ids, id)
	}
	return
}

// ResetItemIssuances resets all changes to the "item_issuances" edge.
func (m *OrderItemMutation) ResetItemIssuances() {
	m.item_issuances = nil
	m.cleareditem_issuances = false
	m.removeditem_issuances = nil
}

// AddOrderItemPriceInfoIDs adds the "order_item_price_infos" edge to the OrderItemPriceInfo entity by ids.
func (m *OrderItemMutation) AddOrderItemPriceInfoIDs(ids ...int) {
	if m.order_item_price_infos == nil {
		m.order_item_price_infos = make(map[int]struct{})
	}
	for i := range ids {
		m.order_item_price_infos[ids[i]] = struct{}{}
	}
}

// ClearOrderItemPriceInfos clears the "order_item_price_infos" edge to the OrderItemPriceInfo entity.
func (m *OrderItemMutation) ClearOrderItemPriceInfos() {
	m.clearedorder_item_price_infos = true
}

// OrderItemPriceInfosCleared reports if the "order_item_price_infos" edge to the OrderItemPriceInfo entity was cleared.
func (m *OrderItemMutation) OrderItemPriceInfosCleared() bool {
	return m.clearedorder_item_price_infos
}

// RemoveOrderItemPriceInfoIDs removes the "order_item_price_infos" edge to the OrderItemPriceInfo entity by IDs.
func (m *OrderItemMutation) RemoveOrderItemPriceInfoIDs(ids ...int) {
	if m.removedorder_item_price_infos == nil {
		m.removedorder_item_price_infos = make(map[int]struct{})
	}
	for i := range ids {
		m.removedorder_item_price_infos[ids[i]] = struct{}{}
	}
}

// RemovedOrderItemPriceInfos returns the removed IDs of the "order_item_price_infos" edge to the OrderItemPriceInfo entity.
func (m *OrderItemMutation) RemovedOrderItemPriceInfosIDs() (ids []int) {
	for id := range m.removedorder_item_price_infos {
		ids = append(ids, id)
	}
	return
}

// OrderItemPriceInfosIDs returns the "order_item_price_infos" edge IDs in the mutation.
func (m *OrderItemMutation) OrderItemPriceInfosIDs() (ids []int) {
	for id := range m.order_item_price_infos {
		ids = append(ids, id)
	}
	return
}

// ResetOrderItemPriceInfos resets all changes to the "order_item_price_infos" edge.
func (m *OrderItemMutation) ResetOrderItemPriceInfos() {
	m.order_item_price_infos = nil
	m.clearedorder_item_price_infos = false
	m.removedorder_item_price_infos = nil
}

// AddOrderItemShipGroupAssocIDs adds the "order_item_ship_group_assocs" edge to the OrderItemShipGroupAssoc entity by ids.
func (m *OrderItemMutation) AddOrderItemShipGroupAssocIDs(ids ...int) {
	if m.order_item_ship_group_assocs == nil {
		m.order_item_ship_group_assocs = make(map[int]struct{})
	}
	for i := range ids {
		m.order_item_ship_group_assocs[ids[i]] = struct{}{}
	}
}

// ClearOrderItemShipGroupAssocs clears the "order_item_ship_group_assocs" edge to the OrderItemShipGroupAssoc entity.
func (m *OrderItemMutation) ClearOrderItemShipGroupAssocs() {
	m.clearedorder_item_ship_group_assocs = true
}

// OrderItemShipGroupAssocsCleared reports if the "order_item_ship_group_assocs" edge to the OrderItemShipGroupAssoc entity was cleared.
func (m *OrderItemMutation) OrderItemShipGroupAssocsCleared() bool {
	return m.clearedorder_item_ship_group_assocs
}

// RemoveOrderItemShipGroupAssocIDs removes the "order_item_ship_group_assocs" edge to the OrderItemShipGroupAssoc entity by IDs.
func (m *OrderItemMutation) RemoveOrderItemShipGroupAssocIDs(ids ...int) {
	if m.removedorder_item_ship_group_assocs == nil {
		m.removedorder_item_ship_group_assocs = make(map[int]struct{})
	}
	for i := range ids {
		m.removedorder_item_ship_group_assocs[ids[i]] = struct{}{}
	}
}

// RemovedOrderItemShipGroupAssocs returns the removed IDs of the "order_item_ship_group_assocs" edge to the OrderItemShipGroupAssoc entity.
func (m *OrderItemMutation) RemovedOrderItemShipGroupAssocsIDs() (ids []int) {
	for id := range m.removedorder_item_ship_group_assocs {
		ids = append(ids, id)
	}
	return
}

// OrderItemShipGroupAssocsIDs returns the "order_item_ship_group_assocs" edge IDs in the mutation.
func (m *OrderItemMutation) OrderItemShipGroupAssocsIDs() (ids []int) {
	for id := range m.order_item_ship_group_assocs {
		ids = append(ids, id)
	}
	return
}

// ResetOrderItemShipGroupAssocs resets all changes to the "order_item_ship_group_assocs" edge.
func (m *OrderItemMutation) ResetOrderItemShipGroupAssocs() {
	m.order_item_ship_group_assocs = nil
	m.clearedorder_item_ship_group_assocs = false
	m.removedorder_item_ship_group_assocs = nil
}

// AddOrderStatusIDs adds the "order_statuses" edge to the OrderStatus entity by ids.
func (m *OrderItemMutation) AddOrderStatusIDs(ids ...int) {
	if m.order_statuses == nil {
		m.order_statuses = make(map[int]struct{})
	}
	for i := range ids {
		m.order_statuses[ids[i]] = struct{}{}
	}
}

// ClearOrderStatuses clears the "order_statuses" edge to the OrderStatus entity.
func (m *OrderItemMutation) ClearOrderStatuses() {
	m.clearedorder_statuses = true
}

// OrderStatusesCleared reports if the "order_statuses" edge to the OrderStatus entity was cleared.
func (m *OrderItemMutation) OrderStatusesCleared() bool {
	return m.clearedorder_statuses
}

// RemoveOrderStatusIDs removes the "order_statuses" edge to the OrderStatus entity by IDs.
func (m *OrderItemMutation) RemoveOrderStatusIDs(ids ...int) {
	if m.removedorder_statuses == nil {
		m.removedorder_statuses = make(map[int]struct{})
	}
	for i := range ids {
		m.removedorder_statuses[ids[i]] = struct{}{}
	}
}

// RemovedOrderStatuses returns the removed IDs of the "order_statuses" edge to the OrderStatus entity.
func (m *OrderItemMutation) RemovedOrderStatusesIDs() (ids []int) {
	for id := range m.removedorder_statuses {
		ids = append(ids, id)
	}
	return
}

// OrderStatusesIDs returns the "order_statuses" edge IDs in the mutation.
func (m *OrderItemMutation) OrderStatusesIDs() (ids []int) {
	for id := range m.order_statuses {
		ids = append(ids, id)
	}
	return
}

// ResetOrderStatuses resets all changes to the "order_statuses" edge.
func (m *OrderItemMutation) ResetOrderStatuses() {
	m.order_statuses = nil
	m.clearedorder_statuses = false
	m.removedorder_statuses = nil
}

// Op returns the operation name.
func (m *OrderItemMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (OrderItem).
func (m *OrderItemMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *OrderItemMutation) Fields() []string {
	fields := make([]string, 0, 48)
	if m.create_time != nil {
		fields = append(fields, orderitem.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, orderitem.FieldUpdateTime)
	}
	if m.order_item_seq_id != nil {
		fields = append(fields, orderitem.FieldOrderItemSeqID)
	}
	if m.external_id != nil {
		fields = append(fields, orderitem.FieldExternalID)
	}
	if m.order_item_type_id != nil {
		fields = append(fields, orderitem.FieldOrderItemTypeID)
	}
	if m.order_item_group_seq_id != nil {
		fields = append(fields, orderitem.FieldOrderItemGroupSeqID)
	}
	if m.is_item_group_primary != nil {
		fields = append(fields, orderitem.FieldIsItemGroupPrimary)
	}
	if m.from_inventory_item_id != nil {
		fields = append(fields, orderitem.FieldFromInventoryItemID)
	}
	if m.budget_id != nil {
		fields = append(fields, orderitem.FieldBudgetID)
	}
	if m.budget_item_seq_id != nil {
		fields = append(fields, orderitem.FieldBudgetItemSeqID)
	}
	if m.product_id != nil {
		fields = append(fields, orderitem.FieldProductID)
	}
	if m.supplier_product_id != nil {
		fields = append(fields, orderitem.FieldSupplierProductID)
	}
	if m.product_feature_id != nil {
		fields = append(fields, orderitem.FieldProductFeatureID)
	}
	if m.prod_catalog_id != nil {
		fields = append(fields, orderitem.FieldProdCatalogID)
	}
	if m.product_category_id != nil {
		fields = append(fields, orderitem.FieldProductCategoryID)
	}
	if m.is_promo != nil {
		fields = append(fields, orderitem.FieldIsPromo)
	}
	if m.quote_id != nil {
		fields = append(fields, orderitem.FieldQuoteID)
	}
	if m.quote_item_seq_id != nil {
		fields = append(fields, orderitem.FieldQuoteItemSeqID)
	}
	if m.shopping_list_id != nil {
		fields = append(fields, orderitem.FieldShoppingListID)
	}
	if m.shopping_list_item_seq_id != nil {
		fields = append(fields, orderitem.FieldShoppingListItemSeqID)
	}
	if m.subscription_id != nil {
		fields = append(fields, orderitem.FieldSubscriptionID)
	}
	if m.deployment_id != nil {
		fields = append(fields, orderitem.FieldDeploymentID)
	}
	if m.quantity != nil {
		fields = append(fields, orderitem.FieldQuantity)
	}
	if m.cancel_quantity != nil {
		fields = append(fields, orderitem.FieldCancelQuantity)
	}
	if m.selected_amount != nil {
		fields = append(fields, orderitem.FieldSelectedAmount)
	}
	if m.unit_price != nil {
		fields = append(fields, orderitem.FieldUnitPrice)
	}
	if m.unit_list_price != nil {
		fields = append(fields, orderitem.FieldUnitListPrice)
	}
	if m.unit_average_cost != nil {
		fields = append(fields, orderitem.FieldUnitAverageCost)
	}
	if m.unit_recurring_price != nil {
		fields = append(fields, orderitem.FieldUnitRecurringPrice)
	}
	if m.is_modified_price != nil {
		fields = append(fields, orderitem.FieldIsModifiedPrice)
	}
	if m.recurring_freq_uom_id != nil {
		fields = append(fields, orderitem.FieldRecurringFreqUomID)
	}
	if m.item_description != nil {
		fields = append(fields, orderitem.FieldItemDescription)
	}
	if m.comments != nil {
		fields = append(fields, orderitem.FieldComments)
	}
	if m.corresponding_po_id != nil {
		fields = append(fields, orderitem.FieldCorrespondingPoID)
	}
	if m.status_id != nil {
		fields = append(fields, orderitem.FieldStatusID)
	}
	if m.sync_status_id != nil {
		fields = append(fields, orderitem.FieldSyncStatusID)
	}
	if m.estimated_ship_date != nil {
		fields = append(fields, orderitem.FieldEstimatedShipDate)
	}
	if m.estimated_delivery_date != nil {
		fields = append(fields, orderitem.FieldEstimatedDeliveryDate)
	}
	if m.auto_cancel_date != nil {
		fields = append(fields, orderitem.FieldAutoCancelDate)
	}
	if m.dont_cancel_set_date != nil {
		fields = append(fields, orderitem.FieldDontCancelSetDate)
	}
	if m.dont_cancel_set_user_login != nil {
		fields = append(fields, orderitem.FieldDontCancelSetUserLogin)
	}
	if m.ship_before_date != nil {
		fields = append(fields, orderitem.FieldShipBeforeDate)
	}
	if m.ship_after_date != nil {
		fields = append(fields, orderitem.FieldShipAfterDate)
	}
	if m.reserve_after_date != nil {
		fields = append(fields, orderitem.FieldReserveAfterDate)
	}
	if m.cancel_back_order_date != nil {
		fields = append(fields, orderitem.FieldCancelBackOrderDate)
	}
	if m.override_gl_account_id != nil {
		fields = append(fields, orderitem.FieldOverrideGlAccountID)
	}
	if m.sales_opportunity_id != nil {
		fields = append(fields, orderitem.FieldSalesOpportunityID)
	}
	if m.change_by_user_login_id != nil {
		fields = append(fields, orderitem.FieldChangeByUserLoginID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *OrderItemMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case orderitem.FieldCreateTime:
		return m.CreateTime()
	case orderitem.FieldUpdateTime:
		return m.UpdateTime()
	case orderitem.FieldOrderItemSeqID:
		return m.OrderItemSeqID()
	case orderitem.FieldExternalID:
		return m.ExternalID()
	case orderitem.FieldOrderItemTypeID:
		return m.OrderItemTypeID()
	case orderitem.FieldOrderItemGroupSeqID:
		return m.OrderItemGroupSeqID()
	case orderitem.FieldIsItemGroupPrimary:
		return m.IsItemGroupPrimary()
	case orderitem.FieldFromInventoryItemID:
		return m.FromInventoryItemID()
	case orderitem.FieldBudgetID:
		return m.BudgetID()
	case orderitem.FieldBudgetItemSeqID:
		return m.BudgetItemSeqID()
	case orderitem.FieldProductID:
		return m.ProductID()
	case orderitem.FieldSupplierProductID:
		return m.SupplierProductID()
	case orderitem.FieldProductFeatureID:
		return m.ProductFeatureID()
	case orderitem.FieldProdCatalogID:
		return m.ProdCatalogID()
	case orderitem.FieldProductCategoryID:
		return m.ProductCategoryID()
	case orderitem.FieldIsPromo:
		return m.IsPromo()
	case orderitem.FieldQuoteID:
		return m.QuoteID()
	case orderitem.FieldQuoteItemSeqID:
		return m.QuoteItemSeqID()
	case orderitem.FieldShoppingListID:
		return m.ShoppingListID()
	case orderitem.FieldShoppingListItemSeqID:
		return m.ShoppingListItemSeqID()
	case orderitem.FieldSubscriptionID:
		return m.SubscriptionID()
	case orderitem.FieldDeploymentID:
		return m.DeploymentID()
	case orderitem.FieldQuantity:
		return m.Quantity()
	case orderitem.FieldCancelQuantity:
		return m.CancelQuantity()
	case orderitem.FieldSelectedAmount:
		return m.SelectedAmount()
	case orderitem.FieldUnitPrice:
		return m.UnitPrice()
	case orderitem.FieldUnitListPrice:
		return m.UnitListPrice()
	case orderitem.FieldUnitAverageCost:
		return m.UnitAverageCost()
	case orderitem.FieldUnitRecurringPrice:
		return m.UnitRecurringPrice()
	case orderitem.FieldIsModifiedPrice:
		return m.IsModifiedPrice()
	case orderitem.FieldRecurringFreqUomID:
		return m.RecurringFreqUomID()
	case orderitem.FieldItemDescription:
		return m.ItemDescription()
	case orderitem.FieldComments:
		return m.Comments()
	case orderitem.FieldCorrespondingPoID:
		return m.CorrespondingPoID()
	case orderitem.FieldStatusID:
		return m.StatusID()
	case orderitem.FieldSyncStatusID:
		return m.SyncStatusID()
	case orderitem.FieldEstimatedShipDate:
		return m.EstimatedShipDate()
	case orderitem.FieldEstimatedDeliveryDate:
		return m.EstimatedDeliveryDate()
	case orderitem.FieldAutoCancelDate:
		return m.AutoCancelDate()
	case orderitem.FieldDontCancelSetDate:
		return m.DontCancelSetDate()
	case orderitem.FieldDontCancelSetUserLogin:
		return m.DontCancelSetUserLogin()
	case orderitem.FieldShipBeforeDate:
		return m.ShipBeforeDate()
	case orderitem.FieldShipAfterDate:
		return m.ShipAfterDate()
	case orderitem.FieldReserveAfterDate:
		return m.ReserveAfterDate()
	case orderitem.FieldCancelBackOrderDate:
		return m.CancelBackOrderDate()
	case orderitem.FieldOverrideGlAccountID:
		return m.OverrideGlAccountID()
	case orderitem.FieldSalesOpportunityID:
		return m.SalesOpportunityID()
	case orderitem.FieldChangeByUserLoginID:
		return m.ChangeByUserLoginID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *OrderItemMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case orderitem.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case orderitem.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case orderitem.FieldOrderItemSeqID:
		return m.OldOrderItemSeqID(ctx)
	case orderitem.FieldExternalID:
		return m.OldExternalID(ctx)
	case orderitem.FieldOrderItemTypeID:
		return m.OldOrderItemTypeID(ctx)
	case orderitem.FieldOrderItemGroupSeqID:
		return m.OldOrderItemGroupSeqID(ctx)
	case orderitem.FieldIsItemGroupPrimary:
		return m.OldIsItemGroupPrimary(ctx)
	case orderitem.FieldFromInventoryItemID:
		return m.OldFromInventoryItemID(ctx)
	case orderitem.FieldBudgetID:
		return m.OldBudgetID(ctx)
	case orderitem.FieldBudgetItemSeqID:
		return m.OldBudgetItemSeqID(ctx)
	case orderitem.FieldProductID:
		return m.OldProductID(ctx)
	case orderitem.FieldSupplierProductID:
		return m.OldSupplierProductID(ctx)
	case orderitem.FieldProductFeatureID:
		return m.OldProductFeatureID(ctx)
	case orderitem.FieldProdCatalogID:
		return m.OldProdCatalogID(ctx)
	case orderitem.FieldProductCategoryID:
		return m.OldProductCategoryID(ctx)
	case orderitem.FieldIsPromo:
		return m.OldIsPromo(ctx)
	case orderitem.FieldQuoteID:
		return m.OldQuoteID(ctx)
	case orderitem.FieldQuoteItemSeqID:
		return m.OldQuoteItemSeqID(ctx)
	case orderitem.FieldShoppingListID:
		return m.OldShoppingListID(ctx)
	case orderitem.FieldShoppingListItemSeqID:
		return m.OldShoppingListItemSeqID(ctx)
	case orderitem.FieldSubscriptionID:
		return m.OldSubscriptionID(ctx)
	case orderitem.FieldDeploymentID:
		return m.OldDeploymentID(ctx)
	case orderitem.FieldQuantity:
		return m.OldQuantity(ctx)
	case orderitem.FieldCancelQuantity:
		return m.OldCancelQuantity(ctx)
	case orderitem.FieldSelectedAmount:
		return m.OldSelectedAmount(ctx)
	case orderitem.FieldUnitPrice:
		return m.OldUnitPrice(ctx)
	case orderitem.FieldUnitListPrice:
		return m.OldUnitListPrice(ctx)
	case orderitem.FieldUnitAverageCost:
		return m.OldUnitAverageCost(ctx)
	case orderitem.FieldUnitRecurringPrice:
		return m.OldUnitRecurringPrice(ctx)
	case orderitem.FieldIsModifiedPrice:
		return m.OldIsModifiedPrice(ctx)
	case orderitem.FieldRecurringFreqUomID:
		return m.OldRecurringFreqUomID(ctx)
	case orderitem.FieldItemDescription:
		return m.OldItemDescription(ctx)
	case orderitem.FieldComments:
		return m.OldComments(ctx)
	case orderitem.FieldCorrespondingPoID:
		return m.OldCorrespondingPoID(ctx)
	case orderitem.FieldStatusID:
		return m.OldStatusID(ctx)
	case orderitem.FieldSyncStatusID:
		return m.OldSyncStatusID(ctx)
	case orderitem.FieldEstimatedShipDate:
		return m.OldEstimatedShipDate(ctx)
	case orderitem.FieldEstimatedDeliveryDate:
		return m.OldEstimatedDeliveryDate(ctx)
	case orderitem.FieldAutoCancelDate:
		return m.OldAutoCancelDate(ctx)
	case orderitem.FieldDontCancelSetDate:
		return m.OldDontCancelSetDate(ctx)
	case orderitem.FieldDontCancelSetUserLogin:
		return m.OldDontCancelSetUserLogin(ctx)
	case orderitem.FieldShipBeforeDate:
		return m.OldShipBeforeDate(ctx)
	case orderitem.FieldShipAfterDate:
		return m.OldShipAfterDate(ctx)
	case orderitem.FieldReserveAfterDate:
		return m.OldReserveAfterDate(ctx)
	case orderitem.FieldCancelBackOrderDate:
		return m.OldCancelBackOrderDate(ctx)
	case orderitem.FieldOverrideGlAccountID:
		return m.OldOverrideGlAccountID(ctx)
	case orderitem.FieldSalesOpportunityID:
		return m.OldSalesOpportunityID(ctx)
	case orderitem.FieldChangeByUserLoginID:
		return m.OldChangeByUserLoginID(ctx)
	}
	return nil, fmt.Errorf("unknown OrderItem field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrderItemMutation) SetField(name string, value ent.Value) error {
	switch name {
	case orderitem.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case orderitem.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case orderitem.FieldOrderItemSeqID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrderItemSeqID(v)
		return nil
	case orderitem.FieldExternalID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExternalID(v)
		return nil
	case orderitem.FieldOrderItemTypeID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrderItemTypeID(v)
		return nil
	case orderitem.FieldOrderItemGroupSeqID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrderItemGroupSeqID(v)
		return nil
	case orderitem.FieldIsItemGroupPrimary:
		v, ok := value.(orderitem.IsItemGroupPrimary)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsItemGroupPrimary(v)
		return nil
	case orderitem.FieldFromInventoryItemID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFromInventoryItemID(v)
		return nil
	case orderitem.FieldBudgetID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBudgetID(v)
		return nil
	case orderitem.FieldBudgetItemSeqID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBudgetItemSeqID(v)
		return nil
	case orderitem.FieldProductID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProductID(v)
		return nil
	case orderitem.FieldSupplierProductID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSupplierProductID(v)
		return nil
	case orderitem.FieldProductFeatureID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProductFeatureID(v)
		return nil
	case orderitem.FieldProdCatalogID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProdCatalogID(v)
		return nil
	case orderitem.FieldProductCategoryID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProductCategoryID(v)
		return nil
	case orderitem.FieldIsPromo:
		v, ok := value.(orderitem.IsPromo)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsPromo(v)
		return nil
	case orderitem.FieldQuoteID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetQuoteID(v)
		return nil
	case orderitem.FieldQuoteItemSeqID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetQuoteItemSeqID(v)
		return nil
	case orderitem.FieldShoppingListID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShoppingListID(v)
		return nil
	case orderitem.FieldShoppingListItemSeqID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShoppingListItemSeqID(v)
		return nil
	case orderitem.FieldSubscriptionID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSubscriptionID(v)
		return nil
	case orderitem.FieldDeploymentID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeploymentID(v)
		return nil
	case orderitem.FieldQuantity:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetQuantity(v)
		return nil
	case orderitem.FieldCancelQuantity:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCancelQuantity(v)
		return nil
	case orderitem.FieldSelectedAmount:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSelectedAmount(v)
		return nil
	case orderitem.FieldUnitPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUnitPrice(v)
		return nil
	case orderitem.FieldUnitListPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUnitListPrice(v)
		return nil
	case orderitem.FieldUnitAverageCost:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUnitAverageCost(v)
		return nil
	case orderitem.FieldUnitRecurringPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUnitRecurringPrice(v)
		return nil
	case orderitem.FieldIsModifiedPrice:
		v, ok := value.(orderitem.IsModifiedPrice)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsModifiedPrice(v)
		return nil
	case orderitem.FieldRecurringFreqUomID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRecurringFreqUomID(v)
		return nil
	case orderitem.FieldItemDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetItemDescription(v)
		return nil
	case orderitem.FieldComments:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetComments(v)
		return nil
	case orderitem.FieldCorrespondingPoID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCorrespondingPoID(v)
		return nil
	case orderitem.FieldStatusID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatusID(v)
		return nil
	case orderitem.FieldSyncStatusID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSyncStatusID(v)
		return nil
	case orderitem.FieldEstimatedShipDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEstimatedShipDate(v)
		return nil
	case orderitem.FieldEstimatedDeliveryDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEstimatedDeliveryDate(v)
		return nil
	case orderitem.FieldAutoCancelDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAutoCancelDate(v)
		return nil
	case orderitem.FieldDontCancelSetDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDontCancelSetDate(v)
		return nil
	case orderitem.FieldDontCancelSetUserLogin:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDontCancelSetUserLogin(v)
		return nil
	case orderitem.FieldShipBeforeDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShipBeforeDate(v)
		return nil
	case orderitem.FieldShipAfterDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShipAfterDate(v)
		return nil
	case orderitem.FieldReserveAfterDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReserveAfterDate(v)
		return nil
	case orderitem.FieldCancelBackOrderDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCancelBackOrderDate(v)
		return nil
	case orderitem.FieldOverrideGlAccountID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOverrideGlAccountID(v)
		return nil
	case orderitem.FieldSalesOpportunityID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSalesOpportunityID(v)
		return nil
	case orderitem.FieldChangeByUserLoginID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChangeByUserLoginID(v)
		return nil
	}
	return fmt.Errorf("unknown OrderItem field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *OrderItemMutation) AddedFields() []string {
	var fields []string
	if m.addorder_item_seq_id != nil {
		fields = append(fields, orderitem.FieldOrderItemSeqID)
	}
	if m.addexternal_id != nil {
		fields = append(fields, orderitem.FieldExternalID)
	}
	if m.addorder_item_type_id != nil {
		fields = append(fields, orderitem.FieldOrderItemTypeID)
	}
	if m.addorder_item_group_seq_id != nil {
		fields = append(fields, orderitem.FieldOrderItemGroupSeqID)
	}
	if m.addfrom_inventory_item_id != nil {
		fields = append(fields, orderitem.FieldFromInventoryItemID)
	}
	if m.addbudget_id != nil {
		fields = append(fields, orderitem.FieldBudgetID)
	}
	if m.addbudget_item_seq_id != nil {
		fields = append(fields, orderitem.FieldBudgetItemSeqID)
	}
	if m.addproduct_id != nil {
		fields = append(fields, orderitem.FieldProductID)
	}
	if m.addproduct_feature_id != nil {
		fields = append(fields, orderitem.FieldProductFeatureID)
	}
	if m.addprod_catalog_id != nil {
		fields = append(fields, orderitem.FieldProdCatalogID)
	}
	if m.addproduct_category_id != nil {
		fields = append(fields, orderitem.FieldProductCategoryID)
	}
	if m.addquote_id != nil {
		fields = append(fields, orderitem.FieldQuoteID)
	}
	if m.addquote_item_seq_id != nil {
		fields = append(fields, orderitem.FieldQuoteItemSeqID)
	}
	if m.addshopping_list_id != nil {
		fields = append(fields, orderitem.FieldShoppingListID)
	}
	if m.addshopping_list_item_seq_id != nil {
		fields = append(fields, orderitem.FieldShoppingListItemSeqID)
	}
	if m.addsubscription_id != nil {
		fields = append(fields, orderitem.FieldSubscriptionID)
	}
	if m.adddeployment_id != nil {
		fields = append(fields, orderitem.FieldDeploymentID)
	}
	if m.addquantity != nil {
		fields = append(fields, orderitem.FieldQuantity)
	}
	if m.addcancel_quantity != nil {
		fields = append(fields, orderitem.FieldCancelQuantity)
	}
	if m.addselected_amount != nil {
		fields = append(fields, orderitem.FieldSelectedAmount)
	}
	if m.addunit_price != nil {
		fields = append(fields, orderitem.FieldUnitPrice)
	}
	if m.addunit_list_price != nil {
		fields = append(fields, orderitem.FieldUnitListPrice)
	}
	if m.addunit_average_cost != nil {
		fields = append(fields, orderitem.FieldUnitAverageCost)
	}
	if m.addunit_recurring_price != nil {
		fields = append(fields, orderitem.FieldUnitRecurringPrice)
	}
	if m.addrecurring_freq_uom_id != nil {
		fields = append(fields, orderitem.FieldRecurringFreqUomID)
	}
	if m.addcorresponding_po_id != nil {
		fields = append(fields, orderitem.FieldCorrespondingPoID)
	}
	if m.addstatus_id != nil {
		fields = append(fields, orderitem.FieldStatusID)
	}
	if m.addsync_status_id != nil {
		fields = append(fields, orderitem.FieldSyncStatusID)
	}
	if m.addoverride_gl_account_id != nil {
		fields = append(fields, orderitem.FieldOverrideGlAccountID)
	}
	if m.addsales_opportunity_id != nil {
		fields = append(fields, orderitem.FieldSalesOpportunityID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *OrderItemMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case orderitem.FieldOrderItemSeqID:
		return m.AddedOrderItemSeqID()
	case orderitem.FieldExternalID:
		return m.AddedExternalID()
	case orderitem.FieldOrderItemTypeID:
		return m.AddedOrderItemTypeID()
	case orderitem.FieldOrderItemGroupSeqID:
		return m.AddedOrderItemGroupSeqID()
	case orderitem.FieldFromInventoryItemID:
		return m.AddedFromInventoryItemID()
	case orderitem.FieldBudgetID:
		return m.AddedBudgetID()
	case orderitem.FieldBudgetItemSeqID:
		return m.AddedBudgetItemSeqID()
	case orderitem.FieldProductID:
		return m.AddedProductID()
	case orderitem.FieldProductFeatureID:
		return m.AddedProductFeatureID()
	case orderitem.FieldProdCatalogID:
		return m.AddedProdCatalogID()
	case orderitem.FieldProductCategoryID:
		return m.AddedProductCategoryID()
	case orderitem.FieldQuoteID:
		return m.AddedQuoteID()
	case orderitem.FieldQuoteItemSeqID:
		return m.AddedQuoteItemSeqID()
	case orderitem.FieldShoppingListID:
		return m.AddedShoppingListID()
	case orderitem.FieldShoppingListItemSeqID:
		return m.AddedShoppingListItemSeqID()
	case orderitem.FieldSubscriptionID:
		return m.AddedSubscriptionID()
	case orderitem.FieldDeploymentID:
		return m.AddedDeploymentID()
	case orderitem.FieldQuantity:
		return m.AddedQuantity()
	case orderitem.FieldCancelQuantity:
		return m.AddedCancelQuantity()
	case orderitem.FieldSelectedAmount:
		return m.AddedSelectedAmount()
	case orderitem.FieldUnitPrice:
		return m.AddedUnitPrice()
	case orderitem.FieldUnitListPrice:
		return m.AddedUnitListPrice()
	case orderitem.FieldUnitAverageCost:
		return m.AddedUnitAverageCost()
	case orderitem.FieldUnitRecurringPrice:
		return m.AddedUnitRecurringPrice()
	case orderitem.FieldRecurringFreqUomID:
		return m.AddedRecurringFreqUomID()
	case orderitem.FieldCorrespondingPoID:
		return m.AddedCorrespondingPoID()
	case orderitem.FieldStatusID:
		return m.AddedStatusID()
	case orderitem.FieldSyncStatusID:
		return m.AddedSyncStatusID()
	case orderitem.FieldOverrideGlAccountID:
		return m.AddedOverrideGlAccountID()
	case orderitem.FieldSalesOpportunityID:
		return m.AddedSalesOpportunityID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrderItemMutation) AddField(name string, value ent.Value) error {
	switch name {
	case orderitem.FieldOrderItemSeqID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOrderItemSeqID(v)
		return nil
	case orderitem.FieldExternalID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddExternalID(v)
		return nil
	case orderitem.FieldOrderItemTypeID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOrderItemTypeID(v)
		return nil
	case orderitem.FieldOrderItemGroupSeqID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOrderItemGroupSeqID(v)
		return nil
	case orderitem.FieldFromInventoryItemID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddFromInventoryItemID(v)
		return nil
	case orderitem.FieldBudgetID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddBudgetID(v)
		return nil
	case orderitem.FieldBudgetItemSeqID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddBudgetItemSeqID(v)
		return nil
	case orderitem.FieldProductID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddProductID(v)
		return nil
	case orderitem.FieldProductFeatureID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddProductFeatureID(v)
		return nil
	case orderitem.FieldProdCatalogID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddProdCatalogID(v)
		return nil
	case orderitem.FieldProductCategoryID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddProductCategoryID(v)
		return nil
	case orderitem.FieldQuoteID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddQuoteID(v)
		return nil
	case orderitem.FieldQuoteItemSeqID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddQuoteItemSeqID(v)
		return nil
	case orderitem.FieldShoppingListID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddShoppingListID(v)
		return nil
	case orderitem.FieldShoppingListItemSeqID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddShoppingListItemSeqID(v)
		return nil
	case orderitem.FieldSubscriptionID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSubscriptionID(v)
		return nil
	case orderitem.FieldDeploymentID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeploymentID(v)
		return nil
	case orderitem.FieldQuantity:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddQuantity(v)
		return nil
	case orderitem.FieldCancelQuantity:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCancelQuantity(v)
		return nil
	case orderitem.FieldSelectedAmount:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSelectedAmount(v)
		return nil
	case orderitem.FieldUnitPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUnitPrice(v)
		return nil
	case orderitem.FieldUnitListPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUnitListPrice(v)
		return nil
	case orderitem.FieldUnitAverageCost:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUnitAverageCost(v)
		return nil
	case orderitem.FieldUnitRecurringPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUnitRecurringPrice(v)
		return nil
	case orderitem.FieldRecurringFreqUomID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRecurringFreqUomID(v)
		return nil
	case orderitem.FieldCorrespondingPoID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCorrespondingPoID(v)
		return nil
	case orderitem.FieldStatusID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatusID(v)
		return nil
	case orderitem.FieldSyncStatusID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSyncStatusID(v)
		return nil
	case orderitem.FieldOverrideGlAccountID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOverrideGlAccountID(v)
		return nil
	case orderitem.FieldSalesOpportunityID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSalesOpportunityID(v)
		return nil
	}
	return fmt.Errorf("unknown OrderItem numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *OrderItemMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(orderitem.FieldExternalID) {
		fields = append(fields, orderitem.FieldExternalID)
	}
	if m.FieldCleared(orderitem.FieldOrderItemTypeID) {
		fields = append(fields, orderitem.FieldOrderItemTypeID)
	}
	if m.FieldCleared(orderitem.FieldOrderItemGroupSeqID) {
		fields = append(fields, orderitem.FieldOrderItemGroupSeqID)
	}
	if m.FieldCleared(orderitem.FieldIsItemGroupPrimary) {
		fields = append(fields, orderitem.FieldIsItemGroupPrimary)
	}
	if m.FieldCleared(orderitem.FieldFromInventoryItemID) {
		fields = append(fields, orderitem.FieldFromInventoryItemID)
	}
	if m.FieldCleared(orderitem.FieldBudgetID) {
		fields = append(fields, orderitem.FieldBudgetID)
	}
	if m.FieldCleared(orderitem.FieldBudgetItemSeqID) {
		fields = append(fields, orderitem.FieldBudgetItemSeqID)
	}
	if m.FieldCleared(orderitem.FieldProductID) {
		fields = append(fields, orderitem.FieldProductID)
	}
	if m.FieldCleared(orderitem.FieldSupplierProductID) {
		fields = append(fields, orderitem.FieldSupplierProductID)
	}
	if m.FieldCleared(orderitem.FieldProductFeatureID) {
		fields = append(fields, orderitem.FieldProductFeatureID)
	}
	if m.FieldCleared(orderitem.FieldProdCatalogID) {
		fields = append(fields, orderitem.FieldProdCatalogID)
	}
	if m.FieldCleared(orderitem.FieldProductCategoryID) {
		fields = append(fields, orderitem.FieldProductCategoryID)
	}
	if m.FieldCleared(orderitem.FieldIsPromo) {
		fields = append(fields, orderitem.FieldIsPromo)
	}
	if m.FieldCleared(orderitem.FieldQuoteID) {
		fields = append(fields, orderitem.FieldQuoteID)
	}
	if m.FieldCleared(orderitem.FieldQuoteItemSeqID) {
		fields = append(fields, orderitem.FieldQuoteItemSeqID)
	}
	if m.FieldCleared(orderitem.FieldShoppingListID) {
		fields = append(fields, orderitem.FieldShoppingListID)
	}
	if m.FieldCleared(orderitem.FieldShoppingListItemSeqID) {
		fields = append(fields, orderitem.FieldShoppingListItemSeqID)
	}
	if m.FieldCleared(orderitem.FieldSubscriptionID) {
		fields = append(fields, orderitem.FieldSubscriptionID)
	}
	if m.FieldCleared(orderitem.FieldDeploymentID) {
		fields = append(fields, orderitem.FieldDeploymentID)
	}
	if m.FieldCleared(orderitem.FieldQuantity) {
		fields = append(fields, orderitem.FieldQuantity)
	}
	if m.FieldCleared(orderitem.FieldCancelQuantity) {
		fields = append(fields, orderitem.FieldCancelQuantity)
	}
	if m.FieldCleared(orderitem.FieldSelectedAmount) {
		fields = append(fields, orderitem.FieldSelectedAmount)
	}
	if m.FieldCleared(orderitem.FieldUnitPrice) {
		fields = append(fields, orderitem.FieldUnitPrice)
	}
	if m.FieldCleared(orderitem.FieldUnitListPrice) {
		fields = append(fields, orderitem.FieldUnitListPrice)
	}
	if m.FieldCleared(orderitem.FieldUnitAverageCost) {
		fields = append(fields, orderitem.FieldUnitAverageCost)
	}
	if m.FieldCleared(orderitem.FieldUnitRecurringPrice) {
		fields = append(fields, orderitem.FieldUnitRecurringPrice)
	}
	if m.FieldCleared(orderitem.FieldIsModifiedPrice) {
		fields = append(fields, orderitem.FieldIsModifiedPrice)
	}
	if m.FieldCleared(orderitem.FieldRecurringFreqUomID) {
		fields = append(fields, orderitem.FieldRecurringFreqUomID)
	}
	if m.FieldCleared(orderitem.FieldItemDescription) {
		fields = append(fields, orderitem.FieldItemDescription)
	}
	if m.FieldCleared(orderitem.FieldComments) {
		fields = append(fields, orderitem.FieldComments)
	}
	if m.FieldCleared(orderitem.FieldCorrespondingPoID) {
		fields = append(fields, orderitem.FieldCorrespondingPoID)
	}
	if m.FieldCleared(orderitem.FieldStatusID) {
		fields = append(fields, orderitem.FieldStatusID)
	}
	if m.FieldCleared(orderitem.FieldSyncStatusID) {
		fields = append(fields, orderitem.FieldSyncStatusID)
	}
	if m.FieldCleared(orderitem.FieldEstimatedShipDate) {
		fields = append(fields, orderitem.FieldEstimatedShipDate)
	}
	if m.FieldCleared(orderitem.FieldEstimatedDeliveryDate) {
		fields = append(fields, orderitem.FieldEstimatedDeliveryDate)
	}
	if m.FieldCleared(orderitem.FieldAutoCancelDate) {
		fields = append(fields, orderitem.FieldAutoCancelDate)
	}
	if m.FieldCleared(orderitem.FieldDontCancelSetDate) {
		fields = append(fields, orderitem.FieldDontCancelSetDate)
	}
	if m.FieldCleared(orderitem.FieldDontCancelSetUserLogin) {
		fields = append(fields, orderitem.FieldDontCancelSetUserLogin)
	}
	if m.FieldCleared(orderitem.FieldShipBeforeDate) {
		fields = append(fields, orderitem.FieldShipBeforeDate)
	}
	if m.FieldCleared(orderitem.FieldShipAfterDate) {
		fields = append(fields, orderitem.FieldShipAfterDate)
	}
	if m.FieldCleared(orderitem.FieldReserveAfterDate) {
		fields = append(fields, orderitem.FieldReserveAfterDate)
	}
	if m.FieldCleared(orderitem.FieldCancelBackOrderDate) {
		fields = append(fields, orderitem.FieldCancelBackOrderDate)
	}
	if m.FieldCleared(orderitem.FieldOverrideGlAccountID) {
		fields = append(fields, orderitem.FieldOverrideGlAccountID)
	}
	if m.FieldCleared(orderitem.FieldSalesOpportunityID) {
		fields = append(fields, orderitem.FieldSalesOpportunityID)
	}
	if m.FieldCleared(orderitem.FieldChangeByUserLoginID) {
		fields = append(fields, orderitem.FieldChangeByUserLoginID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *OrderItemMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *OrderItemMutation) ClearField(name string) error {
	switch name {
	case orderitem.FieldExternalID:
		m.ClearExternalID()
		return nil
	case orderitem.FieldOrderItemTypeID:
		m.ClearOrderItemTypeID()
		return nil
	case orderitem.FieldOrderItemGroupSeqID:
		m.ClearOrderItemGroupSeqID()
		return nil
	case orderitem.FieldIsItemGroupPrimary:
		m.ClearIsItemGroupPrimary()
		return nil
	case orderitem.FieldFromInventoryItemID:
		m.ClearFromInventoryItemID()
		return nil
	case orderitem.FieldBudgetID:
		m.ClearBudgetID()
		return nil
	case orderitem.FieldBudgetItemSeqID:
		m.ClearBudgetItemSeqID()
		return nil
	case orderitem.FieldProductID:
		m.ClearProductID()
		return nil
	case orderitem.FieldSupplierProductID:
		m.ClearSupplierProductID()
		return nil
	case orderitem.FieldProductFeatureID:
		m.ClearProductFeatureID()
		return nil
	case orderitem.FieldProdCatalogID:
		m.ClearProdCatalogID()
		return nil
	case orderitem.FieldProductCategoryID:
		m.ClearProductCategoryID()
		return nil
	case orderitem.FieldIsPromo:
		m.ClearIsPromo()
		return nil
	case orderitem.FieldQuoteID:
		m.ClearQuoteID()
		return nil
	case orderitem.FieldQuoteItemSeqID:
		m.ClearQuoteItemSeqID()
		return nil
	case orderitem.FieldShoppingListID:
		m.ClearShoppingListID()
		return nil
	case orderitem.FieldShoppingListItemSeqID:
		m.ClearShoppingListItemSeqID()
		return nil
	case orderitem.FieldSubscriptionID:
		m.ClearSubscriptionID()
		return nil
	case orderitem.FieldDeploymentID:
		m.ClearDeploymentID()
		return nil
	case orderitem.FieldQuantity:
		m.ClearQuantity()
		return nil
	case orderitem.FieldCancelQuantity:
		m.ClearCancelQuantity()
		return nil
	case orderitem.FieldSelectedAmount:
		m.ClearSelectedAmount()
		return nil
	case orderitem.FieldUnitPrice:
		m.ClearUnitPrice()
		return nil
	case orderitem.FieldUnitListPrice:
		m.ClearUnitListPrice()
		return nil
	case orderitem.FieldUnitAverageCost:
		m.ClearUnitAverageCost()
		return nil
	case orderitem.FieldUnitRecurringPrice:
		m.ClearUnitRecurringPrice()
		return nil
	case orderitem.FieldIsModifiedPrice:
		m.ClearIsModifiedPrice()
		return nil
	case orderitem.FieldRecurringFreqUomID:
		m.ClearRecurringFreqUomID()
		return nil
	case orderitem.FieldItemDescription:
		m.ClearItemDescription()
		return nil
	case orderitem.FieldComments:
		m.ClearComments()
		return nil
	case orderitem.FieldCorrespondingPoID:
		m.ClearCorrespondingPoID()
		return nil
	case orderitem.FieldStatusID:
		m.ClearStatusID()
		return nil
	case orderitem.FieldSyncStatusID:
		m.ClearSyncStatusID()
		return nil
	case orderitem.FieldEstimatedShipDate:
		m.ClearEstimatedShipDate()
		return nil
	case orderitem.FieldEstimatedDeliveryDate:
		m.ClearEstimatedDeliveryDate()
		return nil
	case orderitem.FieldAutoCancelDate:
		m.ClearAutoCancelDate()
		return nil
	case orderitem.FieldDontCancelSetDate:
		m.ClearDontCancelSetDate()
		return nil
	case orderitem.FieldDontCancelSetUserLogin:
		m.ClearDontCancelSetUserLogin()
		return nil
	case orderitem.FieldShipBeforeDate:
		m.ClearShipBeforeDate()
		return nil
	case orderitem.FieldShipAfterDate:
		m.ClearShipAfterDate()
		return nil
	case orderitem.FieldReserveAfterDate:
		m.ClearReserveAfterDate()
		return nil
	case orderitem.FieldCancelBackOrderDate:
		m.ClearCancelBackOrderDate()
		return nil
	case orderitem.FieldOverrideGlAccountID:
		m.ClearOverrideGlAccountID()
		return nil
	case orderitem.FieldSalesOpportunityID:
		m.ClearSalesOpportunityID()
		return nil
	case orderitem.FieldChangeByUserLoginID:
		m.ClearChangeByUserLoginID()
		return nil
	}
	return fmt.Errorf("unknown OrderItem nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *OrderItemMutation) ResetField(name string) error {
	switch name {
	case orderitem.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case orderitem.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case orderitem.FieldOrderItemSeqID:
		m.ResetOrderItemSeqID()
		return nil
	case orderitem.FieldExternalID:
		m.ResetExternalID()
		return nil
	case orderitem.FieldOrderItemTypeID:
		m.ResetOrderItemTypeID()
		return nil
	case orderitem.FieldOrderItemGroupSeqID:
		m.ResetOrderItemGroupSeqID()
		return nil
	case orderitem.FieldIsItemGroupPrimary:
		m.ResetIsItemGroupPrimary()
		return nil
	case orderitem.FieldFromInventoryItemID:
		m.ResetFromInventoryItemID()
		return nil
	case orderitem.FieldBudgetID:
		m.ResetBudgetID()
		return nil
	case orderitem.FieldBudgetItemSeqID:
		m.ResetBudgetItemSeqID()
		return nil
	case orderitem.FieldProductID:
		m.ResetProductID()
		return nil
	case orderitem.FieldSupplierProductID:
		m.ResetSupplierProductID()
		return nil
	case orderitem.FieldProductFeatureID:
		m.ResetProductFeatureID()
		return nil
	case orderitem.FieldProdCatalogID:
		m.ResetProdCatalogID()
		return nil
	case orderitem.FieldProductCategoryID:
		m.ResetProductCategoryID()
		return nil
	case orderitem.FieldIsPromo:
		m.ResetIsPromo()
		return nil
	case orderitem.FieldQuoteID:
		m.ResetQuoteID()
		return nil
	case orderitem.FieldQuoteItemSeqID:
		m.ResetQuoteItemSeqID()
		return nil
	case orderitem.FieldShoppingListID:
		m.ResetShoppingListID()
		return nil
	case orderitem.FieldShoppingListItemSeqID:
		m.ResetShoppingListItemSeqID()
		return nil
	case orderitem.FieldSubscriptionID:
		m.ResetSubscriptionID()
		return nil
	case orderitem.FieldDeploymentID:
		m.ResetDeploymentID()
		return nil
	case orderitem.FieldQuantity:
		m.ResetQuantity()
		return nil
	case orderitem.FieldCancelQuantity:
		m.ResetCancelQuantity()
		return nil
	case orderitem.FieldSelectedAmount:
		m.ResetSelectedAmount()
		return nil
	case orderitem.FieldUnitPrice:
		m.ResetUnitPrice()
		return nil
	case orderitem.FieldUnitListPrice:
		m.ResetUnitListPrice()
		return nil
	case orderitem.FieldUnitAverageCost:
		m.ResetUnitAverageCost()
		return nil
	case orderitem.FieldUnitRecurringPrice:
		m.ResetUnitRecurringPrice()
		return nil
	case orderitem.FieldIsModifiedPrice:
		m.ResetIsModifiedPrice()
		return nil
	case orderitem.FieldRecurringFreqUomID:
		m.ResetRecurringFreqUomID()
		return nil
	case orderitem.FieldItemDescription:
		m.ResetItemDescription()
		return nil
	case orderitem.FieldComments:
		m.ResetComments()
		return nil
	case orderitem.FieldCorrespondingPoID:
		m.ResetCorrespondingPoID()
		return nil
	case orderitem.FieldStatusID:
		m.ResetStatusID()
		return nil
	case orderitem.FieldSyncStatusID:
		m.ResetSyncStatusID()
		return nil
	case orderitem.FieldEstimatedShipDate:
		m.ResetEstimatedShipDate()
		return nil
	case orderitem.FieldEstimatedDeliveryDate:
		m.ResetEstimatedDeliveryDate()
		return nil
	case orderitem.FieldAutoCancelDate:
		m.ResetAutoCancelDate()
		return nil
	case orderitem.FieldDontCancelSetDate:
		m.ResetDontCancelSetDate()
		return nil
	case orderitem.FieldDontCancelSetUserLogin:
		m.ResetDontCancelSetUserLogin()
		return nil
	case orderitem.FieldShipBeforeDate:
		m.ResetShipBeforeDate()
		return nil
	case orderitem.FieldShipAfterDate:
		m.ResetShipAfterDate()
		return nil
	case orderitem.FieldReserveAfterDate:
		m.ResetReserveAfterDate()
		return nil
	case orderitem.FieldCancelBackOrderDate:
		m.ResetCancelBackOrderDate()
		return nil
	case orderitem.FieldOverrideGlAccountID:
		m.ResetOverrideGlAccountID()
		return nil
	case orderitem.FieldSalesOpportunityID:
		m.ResetSalesOpportunityID()
		return nil
	case orderitem.FieldChangeByUserLoginID:
		m.ResetChangeByUserLoginID()
		return nil
	}
	return fmt.Errorf("unknown OrderItem field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *OrderItemMutation) AddedEdges() []string {
	edges := make([]string, 0, 5)
	if m.order_header != nil {
		edges = append(edges, orderitem.EdgeOrderHeader)
	}
	if m.item_issuances != nil {
		edges = append(edges, orderitem.EdgeItemIssuances)
	}
	if m.order_item_price_infos != nil {
		edges = append(edges, orderitem.EdgeOrderItemPriceInfos)
	}
	if m.order_item_ship_group_assocs != nil {
		edges = append(edges, orderitem.EdgeOrderItemShipGroupAssocs)
	}
	if m.order_statuses != nil {
		edges = append(edges, orderitem.EdgeOrderStatuses)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *OrderItemMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case orderitem.EdgeOrderHeader:
		if id := m.order_header; id != nil {
			return []ent.Value{*id}
		}
	case orderitem.EdgeItemIssuances:
		ids := make([]ent.Value, 0, len(m.item_issuances))
		for id := range m.item_issuances {
			ids = append(ids, id)
		}
		return ids
	case orderitem.EdgeOrderItemPriceInfos:
		ids := make([]ent.Value, 0, len(m.order_item_price_infos))
		for id := range m.order_item_price_infos {
			ids = append(ids, id)
		}
		return ids
	case orderitem.EdgeOrderItemShipGroupAssocs:
		ids := make([]ent.Value, 0, len(m.order_item_ship_group_assocs))
		for id := range m.order_item_ship_group_assocs {
			ids = append(ids, id)
		}
		return ids
	case orderitem.EdgeOrderStatuses:
		ids := make([]ent.Value, 0, len(m.order_statuses))
		for id := range m.order_statuses {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *OrderItemMutation) RemovedEdges() []string {
	edges := make([]string, 0, 5)
	if m.removeditem_issuances != nil {
		edges = append(edges, orderitem.EdgeItemIssuances)
	}
	if m.removedorder_item_price_infos != nil {
		edges = append(edges, orderitem.EdgeOrderItemPriceInfos)
	}
	if m.removedorder_item_ship_group_assocs != nil {
		edges = append(edges, orderitem.EdgeOrderItemShipGroupAssocs)
	}
	if m.removedorder_statuses != nil {
		edges = append(edges, orderitem.EdgeOrderStatuses)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *OrderItemMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case orderitem.EdgeItemIssuances:
		ids := make([]ent.Value, 0, len(m.removeditem_issuances))
		for id := range m.removeditem_issuances {
			ids = append(ids, id)
		}
		return ids
	case orderitem.EdgeOrderItemPriceInfos:
		ids := make([]ent.Value, 0, len(m.removedorder_item_price_infos))
		for id := range m.removedorder_item_price_infos {
			ids = append(ids, id)
		}
		return ids
	case orderitem.EdgeOrderItemShipGroupAssocs:
		ids := make([]ent.Value, 0, len(m.removedorder_item_ship_group_assocs))
		for id := range m.removedorder_item_ship_group_assocs {
			ids = append(ids, id)
		}
		return ids
	case orderitem.EdgeOrderStatuses:
		ids := make([]ent.Value, 0, len(m.removedorder_statuses))
		for id := range m.removedorder_statuses {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *OrderItemMutation) ClearedEdges() []string {
	edges := make([]string, 0, 5)
	if m.clearedorder_header {
		edges = append(edges, orderitem.EdgeOrderHeader)
	}
	if m.cleareditem_issuances {
		edges = append(edges, orderitem.EdgeItemIssuances)
	}
	if m.clearedorder_item_price_infos {
		edges = append(edges, orderitem.EdgeOrderItemPriceInfos)
	}
	if m.clearedorder_item_ship_group_assocs {
		edges = append(edges, orderitem.EdgeOrderItemShipGroupAssocs)
	}
	if m.clearedorder_statuses {
		edges = append(edges, orderitem.EdgeOrderStatuses)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *OrderItemMutation) EdgeCleared(name string) bool {
	switch name {
	case orderitem.EdgeOrderHeader:
		return m.clearedorder_header
	case orderitem.EdgeItemIssuances:
		return m.cleareditem_issuances
	case orderitem.EdgeOrderItemPriceInfos:
		return m.clearedorder_item_price_infos
	case orderitem.EdgeOrderItemShipGroupAssocs:
		return m.clearedorder_item_ship_group_assocs
	case orderitem.EdgeOrderStatuses:
		return m.clearedorder_statuses
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *OrderItemMutation) ClearEdge(name string) error {
	switch name {
	case orderitem.EdgeOrderHeader:
		m.ClearOrderHeader()
		return nil
	}
	return fmt.Errorf("unknown OrderItem unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *OrderItemMutation) ResetEdge(name string) error {
	switch name {
	case orderitem.EdgeOrderHeader:
		m.ResetOrderHeader()
		return nil
	case orderitem.EdgeItemIssuances:
		m.ResetItemIssuances()
		return nil
	case orderitem.EdgeOrderItemPriceInfos:
		m.ResetOrderItemPriceInfos()
		return nil
	case orderitem.EdgeOrderItemShipGroupAssocs:
		m.ResetOrderItemShipGroupAssocs()
		return nil
	case orderitem.EdgeOrderStatuses:
		m.ResetOrderStatuses()
		return nil
	}
	return fmt.Errorf("unknown OrderItem edge %s", name)
}

// OrderItemPriceInfoMutation represents an operation that mutates the OrderItemPriceInfo nodes in the graph.
type OrderItemPriceInfoMutation struct {
	config
	op                             Op
	typ                            string
	id                             *int
	create_time                    *time.Time
	update_time                    *time.Time
	order_item_seq_id              *int
	addorder_item_seq_id           *int
	product_price_rule_id          *int
	addproduct_price_rule_id       *int
	product_price_action_seq_id    *int
	addproduct_price_action_seq_id *int
	modify_amount                  *float64
	addmodify_amount               *float64
	description                    *string
	rate_code                      *string
	clearedFields                  map[string]struct{}
	order_header                   *int
	clearedorder_header            bool
	order_item                     *int
	clearedorder_item              bool
	done                           bool
	oldValue                       func(context.Context) (*OrderItemPriceInfo, error)
	predicates                     []predicate.OrderItemPriceInfo
}

var _ ent.Mutation = (*OrderItemPriceInfoMutation)(nil)

// orderitempriceinfoOption allows management of the mutation configuration using functional options.
type orderitempriceinfoOption func(*OrderItemPriceInfoMutation)

// newOrderItemPriceInfoMutation creates new mutation for the OrderItemPriceInfo entity.
func newOrderItemPriceInfoMutation(c config, op Op, opts ...orderitempriceinfoOption) *OrderItemPriceInfoMutation {
	m := &OrderItemPriceInfoMutation{
		config:        c,
		op:            op,
		typ:           TypeOrderItemPriceInfo,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withOrderItemPriceInfoID sets the ID field of the mutation.
func withOrderItemPriceInfoID(id int) orderitempriceinfoOption {
	return func(m *OrderItemPriceInfoMutation) {
		var (
			err   error
			once  sync.Once
			value *OrderItemPriceInfo
		)
		m.oldValue = func(ctx context.Context) (*OrderItemPriceInfo, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().OrderItemPriceInfo.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withOrderItemPriceInfo sets the old OrderItemPriceInfo of the mutation.
func withOrderItemPriceInfo(node *OrderItemPriceInfo) orderitempriceinfoOption {
	return func(m *OrderItemPriceInfoMutation) {
		m.oldValue = func(context.Context) (*OrderItemPriceInfo, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m OrderItemPriceInfoMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m OrderItemPriceInfoMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *OrderItemPriceInfoMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreateTime sets the "create_time" field.
func (m *OrderItemPriceInfoMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *OrderItemPriceInfoMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the OrderItemPriceInfo entity.
// If the OrderItemPriceInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderItemPriceInfoMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *OrderItemPriceInfoMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *OrderItemPriceInfoMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *OrderItemPriceInfoMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the OrderItemPriceInfo entity.
// If the OrderItemPriceInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderItemPriceInfoMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *OrderItemPriceInfoMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetOrderItemSeqID sets the "order_item_seq_id" field.
func (m *OrderItemPriceInfoMutation) SetOrderItemSeqID(i int) {
	m.order_item_seq_id = &i
	m.addorder_item_seq_id = nil
}

// OrderItemSeqID returns the value of the "order_item_seq_id" field in the mutation.
func (m *OrderItemPriceInfoMutation) OrderItemSeqID() (r int, exists bool) {
	v := m.order_item_seq_id
	if v == nil {
		return
	}
	return *v, true
}

// OldOrderItemSeqID returns the old "order_item_seq_id" field's value of the OrderItemPriceInfo entity.
// If the OrderItemPriceInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderItemPriceInfoMutation) OldOrderItemSeqID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldOrderItemSeqID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldOrderItemSeqID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrderItemSeqID: %w", err)
	}
	return oldValue.OrderItemSeqID, nil
}

// AddOrderItemSeqID adds i to the "order_item_seq_id" field.
func (m *OrderItemPriceInfoMutation) AddOrderItemSeqID(i int) {
	if m.addorder_item_seq_id != nil {
		*m.addorder_item_seq_id += i
	} else {
		m.addorder_item_seq_id = &i
	}
}

// AddedOrderItemSeqID returns the value that was added to the "order_item_seq_id" field in this mutation.
func (m *OrderItemPriceInfoMutation) AddedOrderItemSeqID() (r int, exists bool) {
	v := m.addorder_item_seq_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearOrderItemSeqID clears the value of the "order_item_seq_id" field.
func (m *OrderItemPriceInfoMutation) ClearOrderItemSeqID() {
	m.order_item_seq_id = nil
	m.addorder_item_seq_id = nil
	m.clearedFields[orderitempriceinfo.FieldOrderItemSeqID] = struct{}{}
}

// OrderItemSeqIDCleared returns if the "order_item_seq_id" field was cleared in this mutation.
func (m *OrderItemPriceInfoMutation) OrderItemSeqIDCleared() bool {
	_, ok := m.clearedFields[orderitempriceinfo.FieldOrderItemSeqID]
	return ok
}

// ResetOrderItemSeqID resets all changes to the "order_item_seq_id" field.
func (m *OrderItemPriceInfoMutation) ResetOrderItemSeqID() {
	m.order_item_seq_id = nil
	m.addorder_item_seq_id = nil
	delete(m.clearedFields, orderitempriceinfo.FieldOrderItemSeqID)
}

// SetProductPriceRuleID sets the "product_price_rule_id" field.
func (m *OrderItemPriceInfoMutation) SetProductPriceRuleID(i int) {
	m.product_price_rule_id = &i
	m.addproduct_price_rule_id = nil
}

// ProductPriceRuleID returns the value of the "product_price_rule_id" field in the mutation.
func (m *OrderItemPriceInfoMutation) ProductPriceRuleID() (r int, exists bool) {
	v := m.product_price_rule_id
	if v == nil {
		return
	}
	return *v, true
}

// OldProductPriceRuleID returns the old "product_price_rule_id" field's value of the OrderItemPriceInfo entity.
// If the OrderItemPriceInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderItemPriceInfoMutation) OldProductPriceRuleID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldProductPriceRuleID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldProductPriceRuleID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProductPriceRuleID: %w", err)
	}
	return oldValue.ProductPriceRuleID, nil
}

// AddProductPriceRuleID adds i to the "product_price_rule_id" field.
func (m *OrderItemPriceInfoMutation) AddProductPriceRuleID(i int) {
	if m.addproduct_price_rule_id != nil {
		*m.addproduct_price_rule_id += i
	} else {
		m.addproduct_price_rule_id = &i
	}
}

// AddedProductPriceRuleID returns the value that was added to the "product_price_rule_id" field in this mutation.
func (m *OrderItemPriceInfoMutation) AddedProductPriceRuleID() (r int, exists bool) {
	v := m.addproduct_price_rule_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearProductPriceRuleID clears the value of the "product_price_rule_id" field.
func (m *OrderItemPriceInfoMutation) ClearProductPriceRuleID() {
	m.product_price_rule_id = nil
	m.addproduct_price_rule_id = nil
	m.clearedFields[orderitempriceinfo.FieldProductPriceRuleID] = struct{}{}
}

// ProductPriceRuleIDCleared returns if the "product_price_rule_id" field was cleared in this mutation.
func (m *OrderItemPriceInfoMutation) ProductPriceRuleIDCleared() bool {
	_, ok := m.clearedFields[orderitempriceinfo.FieldProductPriceRuleID]
	return ok
}

// ResetProductPriceRuleID resets all changes to the "product_price_rule_id" field.
func (m *OrderItemPriceInfoMutation) ResetProductPriceRuleID() {
	m.product_price_rule_id = nil
	m.addproduct_price_rule_id = nil
	delete(m.clearedFields, orderitempriceinfo.FieldProductPriceRuleID)
}

// SetProductPriceActionSeqID sets the "product_price_action_seq_id" field.
func (m *OrderItemPriceInfoMutation) SetProductPriceActionSeqID(i int) {
	m.product_price_action_seq_id = &i
	m.addproduct_price_action_seq_id = nil
}

// ProductPriceActionSeqID returns the value of the "product_price_action_seq_id" field in the mutation.
func (m *OrderItemPriceInfoMutation) ProductPriceActionSeqID() (r int, exists bool) {
	v := m.product_price_action_seq_id
	if v == nil {
		return
	}
	return *v, true
}

// OldProductPriceActionSeqID returns the old "product_price_action_seq_id" field's value of the OrderItemPriceInfo entity.
// If the OrderItemPriceInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderItemPriceInfoMutation) OldProductPriceActionSeqID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldProductPriceActionSeqID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldProductPriceActionSeqID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProductPriceActionSeqID: %w", err)
	}
	return oldValue.ProductPriceActionSeqID, nil
}

// AddProductPriceActionSeqID adds i to the "product_price_action_seq_id" field.
func (m *OrderItemPriceInfoMutation) AddProductPriceActionSeqID(i int) {
	if m.addproduct_price_action_seq_id != nil {
		*m.addproduct_price_action_seq_id += i
	} else {
		m.addproduct_price_action_seq_id = &i
	}
}

// AddedProductPriceActionSeqID returns the value that was added to the "product_price_action_seq_id" field in this mutation.
func (m *OrderItemPriceInfoMutation) AddedProductPriceActionSeqID() (r int, exists bool) {
	v := m.addproduct_price_action_seq_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearProductPriceActionSeqID clears the value of the "product_price_action_seq_id" field.
func (m *OrderItemPriceInfoMutation) ClearProductPriceActionSeqID() {
	m.product_price_action_seq_id = nil
	m.addproduct_price_action_seq_id = nil
	m.clearedFields[orderitempriceinfo.FieldProductPriceActionSeqID] = struct{}{}
}

// ProductPriceActionSeqIDCleared returns if the "product_price_action_seq_id" field was cleared in this mutation.
func (m *OrderItemPriceInfoMutation) ProductPriceActionSeqIDCleared() bool {
	_, ok := m.clearedFields[orderitempriceinfo.FieldProductPriceActionSeqID]
	return ok
}

// ResetProductPriceActionSeqID resets all changes to the "product_price_action_seq_id" field.
func (m *OrderItemPriceInfoMutation) ResetProductPriceActionSeqID() {
	m.product_price_action_seq_id = nil
	m.addproduct_price_action_seq_id = nil
	delete(m.clearedFields, orderitempriceinfo.FieldProductPriceActionSeqID)
}

// SetModifyAmount sets the "modify_amount" field.
func (m *OrderItemPriceInfoMutation) SetModifyAmount(f float64) {
	m.modify_amount = &f
	m.addmodify_amount = nil
}

// ModifyAmount returns the value of the "modify_amount" field in the mutation.
func (m *OrderItemPriceInfoMutation) ModifyAmount() (r float64, exists bool) {
	v := m.modify_amount
	if v == nil {
		return
	}
	return *v, true
}

// OldModifyAmount returns the old "modify_amount" field's value of the OrderItemPriceInfo entity.
// If the OrderItemPriceInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderItemPriceInfoMutation) OldModifyAmount(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldModifyAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldModifyAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldModifyAmount: %w", err)
	}
	return oldValue.ModifyAmount, nil
}

// AddModifyAmount adds f to the "modify_amount" field.
func (m *OrderItemPriceInfoMutation) AddModifyAmount(f float64) {
	if m.addmodify_amount != nil {
		*m.addmodify_amount += f
	} else {
		m.addmodify_amount = &f
	}
}

// AddedModifyAmount returns the value that was added to the "modify_amount" field in this mutation.
func (m *OrderItemPriceInfoMutation) AddedModifyAmount() (r float64, exists bool) {
	v := m.addmodify_amount
	if v == nil {
		return
	}
	return *v, true
}

// ClearModifyAmount clears the value of the "modify_amount" field.
func (m *OrderItemPriceInfoMutation) ClearModifyAmount() {
	m.modify_amount = nil
	m.addmodify_amount = nil
	m.clearedFields[orderitempriceinfo.FieldModifyAmount] = struct{}{}
}

// ModifyAmountCleared returns if the "modify_amount" field was cleared in this mutation.
func (m *OrderItemPriceInfoMutation) ModifyAmountCleared() bool {
	_, ok := m.clearedFields[orderitempriceinfo.FieldModifyAmount]
	return ok
}

// ResetModifyAmount resets all changes to the "modify_amount" field.
func (m *OrderItemPriceInfoMutation) ResetModifyAmount() {
	m.modify_amount = nil
	m.addmodify_amount = nil
	delete(m.clearedFields, orderitempriceinfo.FieldModifyAmount)
}

// SetDescription sets the "description" field.
func (m *OrderItemPriceInfoMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *OrderItemPriceInfoMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the OrderItemPriceInfo entity.
// If the OrderItemPriceInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderItemPriceInfoMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *OrderItemPriceInfoMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[orderitempriceinfo.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *OrderItemPriceInfoMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[orderitempriceinfo.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *OrderItemPriceInfoMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, orderitempriceinfo.FieldDescription)
}

// SetRateCode sets the "rate_code" field.
func (m *OrderItemPriceInfoMutation) SetRateCode(s string) {
	m.rate_code = &s
}

// RateCode returns the value of the "rate_code" field in the mutation.
func (m *OrderItemPriceInfoMutation) RateCode() (r string, exists bool) {
	v := m.rate_code
	if v == nil {
		return
	}
	return *v, true
}

// OldRateCode returns the old "rate_code" field's value of the OrderItemPriceInfo entity.
// If the OrderItemPriceInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderItemPriceInfoMutation) OldRateCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRateCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRateCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRateCode: %w", err)
	}
	return oldValue.RateCode, nil
}

// ClearRateCode clears the value of the "rate_code" field.
func (m *OrderItemPriceInfoMutation) ClearRateCode() {
	m.rate_code = nil
	m.clearedFields[orderitempriceinfo.FieldRateCode] = struct{}{}
}

// RateCodeCleared returns if the "rate_code" field was cleared in this mutation.
func (m *OrderItemPriceInfoMutation) RateCodeCleared() bool {
	_, ok := m.clearedFields[orderitempriceinfo.FieldRateCode]
	return ok
}

// ResetRateCode resets all changes to the "rate_code" field.
func (m *OrderItemPriceInfoMutation) ResetRateCode() {
	m.rate_code = nil
	delete(m.clearedFields, orderitempriceinfo.FieldRateCode)
}

// SetOrderHeaderID sets the "order_header" edge to the OrderHeader entity by id.
func (m *OrderItemPriceInfoMutation) SetOrderHeaderID(id int) {
	m.order_header = &id
}

// ClearOrderHeader clears the "order_header" edge to the OrderHeader entity.
func (m *OrderItemPriceInfoMutation) ClearOrderHeader() {
	m.clearedorder_header = true
}

// OrderHeaderCleared reports if the "order_header" edge to the OrderHeader entity was cleared.
func (m *OrderItemPriceInfoMutation) OrderHeaderCleared() bool {
	return m.clearedorder_header
}

// OrderHeaderID returns the "order_header" edge ID in the mutation.
func (m *OrderItemPriceInfoMutation) OrderHeaderID() (id int, exists bool) {
	if m.order_header != nil {
		return *m.order_header, true
	}
	return
}

// OrderHeaderIDs returns the "order_header" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OrderHeaderID instead. It exists only for internal usage by the builders.
func (m *OrderItemPriceInfoMutation) OrderHeaderIDs() (ids []int) {
	if id := m.order_header; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOrderHeader resets all changes to the "order_header" edge.
func (m *OrderItemPriceInfoMutation) ResetOrderHeader() {
	m.order_header = nil
	m.clearedorder_header = false
}

// SetOrderItemID sets the "order_item" edge to the OrderItem entity by id.
func (m *OrderItemPriceInfoMutation) SetOrderItemID(id int) {
	m.order_item = &id
}

// ClearOrderItem clears the "order_item" edge to the OrderItem entity.
func (m *OrderItemPriceInfoMutation) ClearOrderItem() {
	m.clearedorder_item = true
}

// OrderItemCleared reports if the "order_item" edge to the OrderItem entity was cleared.
func (m *OrderItemPriceInfoMutation) OrderItemCleared() bool {
	return m.clearedorder_item
}

// OrderItemID returns the "order_item" edge ID in the mutation.
func (m *OrderItemPriceInfoMutation) OrderItemID() (id int, exists bool) {
	if m.order_item != nil {
		return *m.order_item, true
	}
	return
}

// OrderItemIDs returns the "order_item" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OrderItemID instead. It exists only for internal usage by the builders.
func (m *OrderItemPriceInfoMutation) OrderItemIDs() (ids []int) {
	if id := m.order_item; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOrderItem resets all changes to the "order_item" edge.
func (m *OrderItemPriceInfoMutation) ResetOrderItem() {
	m.order_item = nil
	m.clearedorder_item = false
}

// Op returns the operation name.
func (m *OrderItemPriceInfoMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (OrderItemPriceInfo).
func (m *OrderItemPriceInfoMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *OrderItemPriceInfoMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.create_time != nil {
		fields = append(fields, orderitempriceinfo.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, orderitempriceinfo.FieldUpdateTime)
	}
	if m.order_item_seq_id != nil {
		fields = append(fields, orderitempriceinfo.FieldOrderItemSeqID)
	}
	if m.product_price_rule_id != nil {
		fields = append(fields, orderitempriceinfo.FieldProductPriceRuleID)
	}
	if m.product_price_action_seq_id != nil {
		fields = append(fields, orderitempriceinfo.FieldProductPriceActionSeqID)
	}
	if m.modify_amount != nil {
		fields = append(fields, orderitempriceinfo.FieldModifyAmount)
	}
	if m.description != nil {
		fields = append(fields, orderitempriceinfo.FieldDescription)
	}
	if m.rate_code != nil {
		fields = append(fields, orderitempriceinfo.FieldRateCode)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *OrderItemPriceInfoMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case orderitempriceinfo.FieldCreateTime:
		return m.CreateTime()
	case orderitempriceinfo.FieldUpdateTime:
		return m.UpdateTime()
	case orderitempriceinfo.FieldOrderItemSeqID:
		return m.OrderItemSeqID()
	case orderitempriceinfo.FieldProductPriceRuleID:
		return m.ProductPriceRuleID()
	case orderitempriceinfo.FieldProductPriceActionSeqID:
		return m.ProductPriceActionSeqID()
	case orderitempriceinfo.FieldModifyAmount:
		return m.ModifyAmount()
	case orderitempriceinfo.FieldDescription:
		return m.Description()
	case orderitempriceinfo.FieldRateCode:
		return m.RateCode()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *OrderItemPriceInfoMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case orderitempriceinfo.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case orderitempriceinfo.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case orderitempriceinfo.FieldOrderItemSeqID:
		return m.OldOrderItemSeqID(ctx)
	case orderitempriceinfo.FieldProductPriceRuleID:
		return m.OldProductPriceRuleID(ctx)
	case orderitempriceinfo.FieldProductPriceActionSeqID:
		return m.OldProductPriceActionSeqID(ctx)
	case orderitempriceinfo.FieldModifyAmount:
		return m.OldModifyAmount(ctx)
	case orderitempriceinfo.FieldDescription:
		return m.OldDescription(ctx)
	case orderitempriceinfo.FieldRateCode:
		return m.OldRateCode(ctx)
	}
	return nil, fmt.Errorf("unknown OrderItemPriceInfo field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrderItemPriceInfoMutation) SetField(name string, value ent.Value) error {
	switch name {
	case orderitempriceinfo.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case orderitempriceinfo.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case orderitempriceinfo.FieldOrderItemSeqID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrderItemSeqID(v)
		return nil
	case orderitempriceinfo.FieldProductPriceRuleID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProductPriceRuleID(v)
		return nil
	case orderitempriceinfo.FieldProductPriceActionSeqID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProductPriceActionSeqID(v)
		return nil
	case orderitempriceinfo.FieldModifyAmount:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetModifyAmount(v)
		return nil
	case orderitempriceinfo.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case orderitempriceinfo.FieldRateCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRateCode(v)
		return nil
	}
	return fmt.Errorf("unknown OrderItemPriceInfo field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *OrderItemPriceInfoMutation) AddedFields() []string {
	var fields []string
	if m.addorder_item_seq_id != nil {
		fields = append(fields, orderitempriceinfo.FieldOrderItemSeqID)
	}
	if m.addproduct_price_rule_id != nil {
		fields = append(fields, orderitempriceinfo.FieldProductPriceRuleID)
	}
	if m.addproduct_price_action_seq_id != nil {
		fields = append(fields, orderitempriceinfo.FieldProductPriceActionSeqID)
	}
	if m.addmodify_amount != nil {
		fields = append(fields, orderitempriceinfo.FieldModifyAmount)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *OrderItemPriceInfoMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case orderitempriceinfo.FieldOrderItemSeqID:
		return m.AddedOrderItemSeqID()
	case orderitempriceinfo.FieldProductPriceRuleID:
		return m.AddedProductPriceRuleID()
	case orderitempriceinfo.FieldProductPriceActionSeqID:
		return m.AddedProductPriceActionSeqID()
	case orderitempriceinfo.FieldModifyAmount:
		return m.AddedModifyAmount()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrderItemPriceInfoMutation) AddField(name string, value ent.Value) error {
	switch name {
	case orderitempriceinfo.FieldOrderItemSeqID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOrderItemSeqID(v)
		return nil
	case orderitempriceinfo.FieldProductPriceRuleID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddProductPriceRuleID(v)
		return nil
	case orderitempriceinfo.FieldProductPriceActionSeqID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddProductPriceActionSeqID(v)
		return nil
	case orderitempriceinfo.FieldModifyAmount:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddModifyAmount(v)
		return nil
	}
	return fmt.Errorf("unknown OrderItemPriceInfo numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *OrderItemPriceInfoMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(orderitempriceinfo.FieldOrderItemSeqID) {
		fields = append(fields, orderitempriceinfo.FieldOrderItemSeqID)
	}
	if m.FieldCleared(orderitempriceinfo.FieldProductPriceRuleID) {
		fields = append(fields, orderitempriceinfo.FieldProductPriceRuleID)
	}
	if m.FieldCleared(orderitempriceinfo.FieldProductPriceActionSeqID) {
		fields = append(fields, orderitempriceinfo.FieldProductPriceActionSeqID)
	}
	if m.FieldCleared(orderitempriceinfo.FieldModifyAmount) {
		fields = append(fields, orderitempriceinfo.FieldModifyAmount)
	}
	if m.FieldCleared(orderitempriceinfo.FieldDescription) {
		fields = append(fields, orderitempriceinfo.FieldDescription)
	}
	if m.FieldCleared(orderitempriceinfo.FieldRateCode) {
		fields = append(fields, orderitempriceinfo.FieldRateCode)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *OrderItemPriceInfoMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *OrderItemPriceInfoMutation) ClearField(name string) error {
	switch name {
	case orderitempriceinfo.FieldOrderItemSeqID:
		m.ClearOrderItemSeqID()
		return nil
	case orderitempriceinfo.FieldProductPriceRuleID:
		m.ClearProductPriceRuleID()
		return nil
	case orderitempriceinfo.FieldProductPriceActionSeqID:
		m.ClearProductPriceActionSeqID()
		return nil
	case orderitempriceinfo.FieldModifyAmount:
		m.ClearModifyAmount()
		return nil
	case orderitempriceinfo.FieldDescription:
		m.ClearDescription()
		return nil
	case orderitempriceinfo.FieldRateCode:
		m.ClearRateCode()
		return nil
	}
	return fmt.Errorf("unknown OrderItemPriceInfo nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *OrderItemPriceInfoMutation) ResetField(name string) error {
	switch name {
	case orderitempriceinfo.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case orderitempriceinfo.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case orderitempriceinfo.FieldOrderItemSeqID:
		m.ResetOrderItemSeqID()
		return nil
	case orderitempriceinfo.FieldProductPriceRuleID:
		m.ResetProductPriceRuleID()
		return nil
	case orderitempriceinfo.FieldProductPriceActionSeqID:
		m.ResetProductPriceActionSeqID()
		return nil
	case orderitempriceinfo.FieldModifyAmount:
		m.ResetModifyAmount()
		return nil
	case orderitempriceinfo.FieldDescription:
		m.ResetDescription()
		return nil
	case orderitempriceinfo.FieldRateCode:
		m.ResetRateCode()
		return nil
	}
	return fmt.Errorf("unknown OrderItemPriceInfo field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *OrderItemPriceInfoMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.order_header != nil {
		edges = append(edges, orderitempriceinfo.EdgeOrderHeader)
	}
	if m.order_item != nil {
		edges = append(edges, orderitempriceinfo.EdgeOrderItem)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *OrderItemPriceInfoMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case orderitempriceinfo.EdgeOrderHeader:
		if id := m.order_header; id != nil {
			return []ent.Value{*id}
		}
	case orderitempriceinfo.EdgeOrderItem:
		if id := m.order_item; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *OrderItemPriceInfoMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *OrderItemPriceInfoMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *OrderItemPriceInfoMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedorder_header {
		edges = append(edges, orderitempriceinfo.EdgeOrderHeader)
	}
	if m.clearedorder_item {
		edges = append(edges, orderitempriceinfo.EdgeOrderItem)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *OrderItemPriceInfoMutation) EdgeCleared(name string) bool {
	switch name {
	case orderitempriceinfo.EdgeOrderHeader:
		return m.clearedorder_header
	case orderitempriceinfo.EdgeOrderItem:
		return m.clearedorder_item
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *OrderItemPriceInfoMutation) ClearEdge(name string) error {
	switch name {
	case orderitempriceinfo.EdgeOrderHeader:
		m.ClearOrderHeader()
		return nil
	case orderitempriceinfo.EdgeOrderItem:
		m.ClearOrderItem()
		return nil
	}
	return fmt.Errorf("unknown OrderItemPriceInfo unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *OrderItemPriceInfoMutation) ResetEdge(name string) error {
	switch name {
	case orderitempriceinfo.EdgeOrderHeader:
		m.ResetOrderHeader()
		return nil
	case orderitempriceinfo.EdgeOrderItem:
		m.ResetOrderItem()
		return nil
	}
	return fmt.Errorf("unknown OrderItemPriceInfo edge %s", name)
}

// OrderItemShipGroupMutation represents an operation that mutates the OrderItemShipGroup nodes in the graph.
type OrderItemShipGroupMutation struct {
	config
	op                                  Op
	typ                                 string
	id                                  *int
	create_time                         *time.Time
	update_time                         *time.Time
	ship_group_seq_id                   *int
	addship_group_seq_id                *int
	shipment_method_type_id             *int
	addshipment_method_type_id          *int
	supplier_party_id                   *int
	addsupplier_party_id                *int
	supplier_agreement_id               *int
	addsupplier_agreement_id            *int
	vendor_party_id                     *int
	addvendor_party_id                  *int
	carrier_party_id                    *int
	addcarrier_party_id                 *int
	carrier_role_type_id                *int
	addcarrier_role_type_id             *int
	facility_id                         *int
	addfacility_id                      *int
	contact_mech_id                     *int
	addcontact_mech_id                  *int
	telecom_contact_mech_id             *int
	addtelecom_contact_mech_id          *int
	tracking_number                     *string
	shipping_instructions               *string
	may_split                           *orderitemshipgroup.MaySplit
	gift_message                        *string
	is_gift                             *orderitemshipgroup.IsGift
	ship_after_date                     *time.Time
	ship_by_date                        *time.Time
	estimated_ship_date                 *time.Time
	estimated_delivery_date             *time.Time
	clearedFields                       map[string]struct{}
	order_header                        *int
	clearedorder_header                 bool
	order_item_ship_group_assocs        map[int]struct{}
	removedorder_item_ship_group_assocs map[int]struct{}
	clearedorder_item_ship_group_assocs bool
	primary_shipments                   map[int]struct{}
	removedprimary_shipments            map[int]struct{}
	clearedprimary_shipments            bool
	done                                bool
	oldValue                            func(context.Context) (*OrderItemShipGroup, error)
	predicates                          []predicate.OrderItemShipGroup
}

var _ ent.Mutation = (*OrderItemShipGroupMutation)(nil)

// orderitemshipgroupOption allows management of the mutation configuration using functional options.
type orderitemshipgroupOption func(*OrderItemShipGroupMutation)

// newOrderItemShipGroupMutation creates new mutation for the OrderItemShipGroup entity.
func newOrderItemShipGroupMutation(c config, op Op, opts ...orderitemshipgroupOption) *OrderItemShipGroupMutation {
	m := &OrderItemShipGroupMutation{
		config:        c,
		op:            op,
		typ:           TypeOrderItemShipGroup,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withOrderItemShipGroupID sets the ID field of the mutation.
func withOrderItemShipGroupID(id int) orderitemshipgroupOption {
	return func(m *OrderItemShipGroupMutation) {
		var (
			err   error
			once  sync.Once
			value *OrderItemShipGroup
		)
		m.oldValue = func(ctx context.Context) (*OrderItemShipGroup, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().OrderItemShipGroup.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withOrderItemShipGroup sets the old OrderItemShipGroup of the mutation.
func withOrderItemShipGroup(node *OrderItemShipGroup) orderitemshipgroupOption {
	return func(m *OrderItemShipGroupMutation) {
		m.oldValue = func(context.Context) (*OrderItemShipGroup, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m OrderItemShipGroupMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m OrderItemShipGroupMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *OrderItemShipGroupMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreateTime sets the "create_time" field.
func (m *OrderItemShipGroupMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *OrderItemShipGroupMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the OrderItemShipGroup entity.
// If the OrderItemShipGroup object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderItemShipGroupMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *OrderItemShipGroupMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *OrderItemShipGroupMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *OrderItemShipGroupMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the OrderItemShipGroup entity.
// If the OrderItemShipGroup object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderItemShipGroupMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *OrderItemShipGroupMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetShipGroupSeqID sets the "ship_group_seq_id" field.
func (m *OrderItemShipGroupMutation) SetShipGroupSeqID(i int) {
	m.ship_group_seq_id = &i
	m.addship_group_seq_id = nil
}

// ShipGroupSeqID returns the value of the "ship_group_seq_id" field in the mutation.
func (m *OrderItemShipGroupMutation) ShipGroupSeqID() (r int, exists bool) {
	v := m.ship_group_seq_id
	if v == nil {
		return
	}
	return *v, true
}

// OldShipGroupSeqID returns the old "ship_group_seq_id" field's value of the OrderItemShipGroup entity.
// If the OrderItemShipGroup object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderItemShipGroupMutation) OldShipGroupSeqID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldShipGroupSeqID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldShipGroupSeqID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShipGroupSeqID: %w", err)
	}
	return oldValue.ShipGroupSeqID, nil
}

// AddShipGroupSeqID adds i to the "ship_group_seq_id" field.
func (m *OrderItemShipGroupMutation) AddShipGroupSeqID(i int) {
	if m.addship_group_seq_id != nil {
		*m.addship_group_seq_id += i
	} else {
		m.addship_group_seq_id = &i
	}
}

// AddedShipGroupSeqID returns the value that was added to the "ship_group_seq_id" field in this mutation.
func (m *OrderItemShipGroupMutation) AddedShipGroupSeqID() (r int, exists bool) {
	v := m.addship_group_seq_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetShipGroupSeqID resets all changes to the "ship_group_seq_id" field.
func (m *OrderItemShipGroupMutation) ResetShipGroupSeqID() {
	m.ship_group_seq_id = nil
	m.addship_group_seq_id = nil
}

// SetShipmentMethodTypeID sets the "shipment_method_type_id" field.
func (m *OrderItemShipGroupMutation) SetShipmentMethodTypeID(i int) {
	m.shipment_method_type_id = &i
	m.addshipment_method_type_id = nil
}

// ShipmentMethodTypeID returns the value of the "shipment_method_type_id" field in the mutation.
func (m *OrderItemShipGroupMutation) ShipmentMethodTypeID() (r int, exists bool) {
	v := m.shipment_method_type_id
	if v == nil {
		return
	}
	return *v, true
}

// OldShipmentMethodTypeID returns the old "shipment_method_type_id" field's value of the OrderItemShipGroup entity.
// If the OrderItemShipGroup object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderItemShipGroupMutation) OldShipmentMethodTypeID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldShipmentMethodTypeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldShipmentMethodTypeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShipmentMethodTypeID: %w", err)
	}
	return oldValue.ShipmentMethodTypeID, nil
}

// AddShipmentMethodTypeID adds i to the "shipment_method_type_id" field.
func (m *OrderItemShipGroupMutation) AddShipmentMethodTypeID(i int) {
	if m.addshipment_method_type_id != nil {
		*m.addshipment_method_type_id += i
	} else {
		m.addshipment_method_type_id = &i
	}
}

// AddedShipmentMethodTypeID returns the value that was added to the "shipment_method_type_id" field in this mutation.
func (m *OrderItemShipGroupMutation) AddedShipmentMethodTypeID() (r int, exists bool) {
	v := m.addshipment_method_type_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearShipmentMethodTypeID clears the value of the "shipment_method_type_id" field.
func (m *OrderItemShipGroupMutation) ClearShipmentMethodTypeID() {
	m.shipment_method_type_id = nil
	m.addshipment_method_type_id = nil
	m.clearedFields[orderitemshipgroup.FieldShipmentMethodTypeID] = struct{}{}
}

// ShipmentMethodTypeIDCleared returns if the "shipment_method_type_id" field was cleared in this mutation.
func (m *OrderItemShipGroupMutation) ShipmentMethodTypeIDCleared() bool {
	_, ok := m.clearedFields[orderitemshipgroup.FieldShipmentMethodTypeID]
	return ok
}

// ResetShipmentMethodTypeID resets all changes to the "shipment_method_type_id" field.
func (m *OrderItemShipGroupMutation) ResetShipmentMethodTypeID() {
	m.shipment_method_type_id = nil
	m.addshipment_method_type_id = nil
	delete(m.clearedFields, orderitemshipgroup.FieldShipmentMethodTypeID)
}

// SetSupplierPartyID sets the "supplier_party_id" field.
func (m *OrderItemShipGroupMutation) SetSupplierPartyID(i int) {
	m.supplier_party_id = &i
	m.addsupplier_party_id = nil
}

// SupplierPartyID returns the value of the "supplier_party_id" field in the mutation.
func (m *OrderItemShipGroupMutation) SupplierPartyID() (r int, exists bool) {
	v := m.supplier_party_id
	if v == nil {
		return
	}
	return *v, true
}

// OldSupplierPartyID returns the old "supplier_party_id" field's value of the OrderItemShipGroup entity.
// If the OrderItemShipGroup object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderItemShipGroupMutation) OldSupplierPartyID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSupplierPartyID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSupplierPartyID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSupplierPartyID: %w", err)
	}
	return oldValue.SupplierPartyID, nil
}

// AddSupplierPartyID adds i to the "supplier_party_id" field.
func (m *OrderItemShipGroupMutation) AddSupplierPartyID(i int) {
	if m.addsupplier_party_id != nil {
		*m.addsupplier_party_id += i
	} else {
		m.addsupplier_party_id = &i
	}
}

// AddedSupplierPartyID returns the value that was added to the "supplier_party_id" field in this mutation.
func (m *OrderItemShipGroupMutation) AddedSupplierPartyID() (r int, exists bool) {
	v := m.addsupplier_party_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearSupplierPartyID clears the value of the "supplier_party_id" field.
func (m *OrderItemShipGroupMutation) ClearSupplierPartyID() {
	m.supplier_party_id = nil
	m.addsupplier_party_id = nil
	m.clearedFields[orderitemshipgroup.FieldSupplierPartyID] = struct{}{}
}

// SupplierPartyIDCleared returns if the "supplier_party_id" field was cleared in this mutation.
func (m *OrderItemShipGroupMutation) SupplierPartyIDCleared() bool {
	_, ok := m.clearedFields[orderitemshipgroup.FieldSupplierPartyID]
	return ok
}

// ResetSupplierPartyID resets all changes to the "supplier_party_id" field.
func (m *OrderItemShipGroupMutation) ResetSupplierPartyID() {
	m.supplier_party_id = nil
	m.addsupplier_party_id = nil
	delete(m.clearedFields, orderitemshipgroup.FieldSupplierPartyID)
}

// SetSupplierAgreementID sets the "supplier_agreement_id" field.
func (m *OrderItemShipGroupMutation) SetSupplierAgreementID(i int) {
	m.supplier_agreement_id = &i
	m.addsupplier_agreement_id = nil
}

// SupplierAgreementID returns the value of the "supplier_agreement_id" field in the mutation.
func (m *OrderItemShipGroupMutation) SupplierAgreementID() (r int, exists bool) {
	v := m.supplier_agreement_id
	if v == nil {
		return
	}
	return *v, true
}

// OldSupplierAgreementID returns the old "supplier_agreement_id" field's value of the OrderItemShipGroup entity.
// If the OrderItemShipGroup object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderItemShipGroupMutation) OldSupplierAgreementID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSupplierAgreementID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSupplierAgreementID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSupplierAgreementID: %w", err)
	}
	return oldValue.SupplierAgreementID, nil
}

// AddSupplierAgreementID adds i to the "supplier_agreement_id" field.
func (m *OrderItemShipGroupMutation) AddSupplierAgreementID(i int) {
	if m.addsupplier_agreement_id != nil {
		*m.addsupplier_agreement_id += i
	} else {
		m.addsupplier_agreement_id = &i
	}
}

// AddedSupplierAgreementID returns the value that was added to the "supplier_agreement_id" field in this mutation.
func (m *OrderItemShipGroupMutation) AddedSupplierAgreementID() (r int, exists bool) {
	v := m.addsupplier_agreement_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearSupplierAgreementID clears the value of the "supplier_agreement_id" field.
func (m *OrderItemShipGroupMutation) ClearSupplierAgreementID() {
	m.supplier_agreement_id = nil
	m.addsupplier_agreement_id = nil
	m.clearedFields[orderitemshipgroup.FieldSupplierAgreementID] = struct{}{}
}

// SupplierAgreementIDCleared returns if the "supplier_agreement_id" field was cleared in this mutation.
func (m *OrderItemShipGroupMutation) SupplierAgreementIDCleared() bool {
	_, ok := m.clearedFields[orderitemshipgroup.FieldSupplierAgreementID]
	return ok
}

// ResetSupplierAgreementID resets all changes to the "supplier_agreement_id" field.
func (m *OrderItemShipGroupMutation) ResetSupplierAgreementID() {
	m.supplier_agreement_id = nil
	m.addsupplier_agreement_id = nil
	delete(m.clearedFields, orderitemshipgroup.FieldSupplierAgreementID)
}

// SetVendorPartyID sets the "vendor_party_id" field.
func (m *OrderItemShipGroupMutation) SetVendorPartyID(i int) {
	m.vendor_party_id = &i
	m.addvendor_party_id = nil
}

// VendorPartyID returns the value of the "vendor_party_id" field in the mutation.
func (m *OrderItemShipGroupMutation) VendorPartyID() (r int, exists bool) {
	v := m.vendor_party_id
	if v == nil {
		return
	}
	return *v, true
}

// OldVendorPartyID returns the old "vendor_party_id" field's value of the OrderItemShipGroup entity.
// If the OrderItemShipGroup object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderItemShipGroupMutation) OldVendorPartyID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldVendorPartyID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldVendorPartyID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVendorPartyID: %w", err)
	}
	return oldValue.VendorPartyID, nil
}

// AddVendorPartyID adds i to the "vendor_party_id" field.
func (m *OrderItemShipGroupMutation) AddVendorPartyID(i int) {
	if m.addvendor_party_id != nil {
		*m.addvendor_party_id += i
	} else {
		m.addvendor_party_id = &i
	}
}

// AddedVendorPartyID returns the value that was added to the "vendor_party_id" field in this mutation.
func (m *OrderItemShipGroupMutation) AddedVendorPartyID() (r int, exists bool) {
	v := m.addvendor_party_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearVendorPartyID clears the value of the "vendor_party_id" field.
func (m *OrderItemShipGroupMutation) ClearVendorPartyID() {
	m.vendor_party_id = nil
	m.addvendor_party_id = nil
	m.clearedFields[orderitemshipgroup.FieldVendorPartyID] = struct{}{}
}

// VendorPartyIDCleared returns if the "vendor_party_id" field was cleared in this mutation.
func (m *OrderItemShipGroupMutation) VendorPartyIDCleared() bool {
	_, ok := m.clearedFields[orderitemshipgroup.FieldVendorPartyID]
	return ok
}

// ResetVendorPartyID resets all changes to the "vendor_party_id" field.
func (m *OrderItemShipGroupMutation) ResetVendorPartyID() {
	m.vendor_party_id = nil
	m.addvendor_party_id = nil
	delete(m.clearedFields, orderitemshipgroup.FieldVendorPartyID)
}

// SetCarrierPartyID sets the "carrier_party_id" field.
func (m *OrderItemShipGroupMutation) SetCarrierPartyID(i int) {
	m.carrier_party_id = &i
	m.addcarrier_party_id = nil
}

// CarrierPartyID returns the value of the "carrier_party_id" field in the mutation.
func (m *OrderItemShipGroupMutation) CarrierPartyID() (r int, exists bool) {
	v := m.carrier_party_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCarrierPartyID returns the old "carrier_party_id" field's value of the OrderItemShipGroup entity.
// If the OrderItemShipGroup object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderItemShipGroupMutation) OldCarrierPartyID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCarrierPartyID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCarrierPartyID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCarrierPartyID: %w", err)
	}
	return oldValue.CarrierPartyID, nil
}

// AddCarrierPartyID adds i to the "carrier_party_id" field.
func (m *OrderItemShipGroupMutation) AddCarrierPartyID(i int) {
	if m.addcarrier_party_id != nil {
		*m.addcarrier_party_id += i
	} else {
		m.addcarrier_party_id = &i
	}
}

// AddedCarrierPartyID returns the value that was added to the "carrier_party_id" field in this mutation.
func (m *OrderItemShipGroupMutation) AddedCarrierPartyID() (r int, exists bool) {
	v := m.addcarrier_party_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearCarrierPartyID clears the value of the "carrier_party_id" field.
func (m *OrderItemShipGroupMutation) ClearCarrierPartyID() {
	m.carrier_party_id = nil
	m.addcarrier_party_id = nil
	m.clearedFields[orderitemshipgroup.FieldCarrierPartyID] = struct{}{}
}

// CarrierPartyIDCleared returns if the "carrier_party_id" field was cleared in this mutation.
func (m *OrderItemShipGroupMutation) CarrierPartyIDCleared() bool {
	_, ok := m.clearedFields[orderitemshipgroup.FieldCarrierPartyID]
	return ok
}

// ResetCarrierPartyID resets all changes to the "carrier_party_id" field.
func (m *OrderItemShipGroupMutation) ResetCarrierPartyID() {
	m.carrier_party_id = nil
	m.addcarrier_party_id = nil
	delete(m.clearedFields, orderitemshipgroup.FieldCarrierPartyID)
}

// SetCarrierRoleTypeID sets the "carrier_role_type_id" field.
func (m *OrderItemShipGroupMutation) SetCarrierRoleTypeID(i int) {
	m.carrier_role_type_id = &i
	m.addcarrier_role_type_id = nil
}

// CarrierRoleTypeID returns the value of the "carrier_role_type_id" field in the mutation.
func (m *OrderItemShipGroupMutation) CarrierRoleTypeID() (r int, exists bool) {
	v := m.carrier_role_type_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCarrierRoleTypeID returns the old "carrier_role_type_id" field's value of the OrderItemShipGroup entity.
// If the OrderItemShipGroup object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderItemShipGroupMutation) OldCarrierRoleTypeID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCarrierRoleTypeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCarrierRoleTypeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCarrierRoleTypeID: %w", err)
	}
	return oldValue.CarrierRoleTypeID, nil
}

// AddCarrierRoleTypeID adds i to the "carrier_role_type_id" field.
func (m *OrderItemShipGroupMutation) AddCarrierRoleTypeID(i int) {
	if m.addcarrier_role_type_id != nil {
		*m.addcarrier_role_type_id += i
	} else {
		m.addcarrier_role_type_id = &i
	}
}

// AddedCarrierRoleTypeID returns the value that was added to the "carrier_role_type_id" field in this mutation.
func (m *OrderItemShipGroupMutation) AddedCarrierRoleTypeID() (r int, exists bool) {
	v := m.addcarrier_role_type_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearCarrierRoleTypeID clears the value of the "carrier_role_type_id" field.
func (m *OrderItemShipGroupMutation) ClearCarrierRoleTypeID() {
	m.carrier_role_type_id = nil
	m.addcarrier_role_type_id = nil
	m.clearedFields[orderitemshipgroup.FieldCarrierRoleTypeID] = struct{}{}
}

// CarrierRoleTypeIDCleared returns if the "carrier_role_type_id" field was cleared in this mutation.
func (m *OrderItemShipGroupMutation) CarrierRoleTypeIDCleared() bool {
	_, ok := m.clearedFields[orderitemshipgroup.FieldCarrierRoleTypeID]
	return ok
}

// ResetCarrierRoleTypeID resets all changes to the "carrier_role_type_id" field.
func (m *OrderItemShipGroupMutation) ResetCarrierRoleTypeID() {
	m.carrier_role_type_id = nil
	m.addcarrier_role_type_id = nil
	delete(m.clearedFields, orderitemshipgroup.FieldCarrierRoleTypeID)
}

// SetFacilityID sets the "facility_id" field.
func (m *OrderItemShipGroupMutation) SetFacilityID(i int) {
	m.facility_id = &i
	m.addfacility_id = nil
}

// FacilityID returns the value of the "facility_id" field in the mutation.
func (m *OrderItemShipGroupMutation) FacilityID() (r int, exists bool) {
	v := m.facility_id
	if v == nil {
		return
	}
	return *v, true
}

// OldFacilityID returns the old "facility_id" field's value of the OrderItemShipGroup entity.
// If the OrderItemShipGroup object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderItemShipGroupMutation) OldFacilityID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldFacilityID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldFacilityID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFacilityID: %w", err)
	}
	return oldValue.FacilityID, nil
}

// AddFacilityID adds i to the "facility_id" field.
func (m *OrderItemShipGroupMutation) AddFacilityID(i int) {
	if m.addfacility_id != nil {
		*m.addfacility_id += i
	} else {
		m.addfacility_id = &i
	}
}

// AddedFacilityID returns the value that was added to the "facility_id" field in this mutation.
func (m *OrderItemShipGroupMutation) AddedFacilityID() (r int, exists bool) {
	v := m.addfacility_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearFacilityID clears the value of the "facility_id" field.
func (m *OrderItemShipGroupMutation) ClearFacilityID() {
	m.facility_id = nil
	m.addfacility_id = nil
	m.clearedFields[orderitemshipgroup.FieldFacilityID] = struct{}{}
}

// FacilityIDCleared returns if the "facility_id" field was cleared in this mutation.
func (m *OrderItemShipGroupMutation) FacilityIDCleared() bool {
	_, ok := m.clearedFields[orderitemshipgroup.FieldFacilityID]
	return ok
}

// ResetFacilityID resets all changes to the "facility_id" field.
func (m *OrderItemShipGroupMutation) ResetFacilityID() {
	m.facility_id = nil
	m.addfacility_id = nil
	delete(m.clearedFields, orderitemshipgroup.FieldFacilityID)
}

// SetContactMechID sets the "contact_mech_id" field.
func (m *OrderItemShipGroupMutation) SetContactMechID(i int) {
	m.contact_mech_id = &i
	m.addcontact_mech_id = nil
}

// ContactMechID returns the value of the "contact_mech_id" field in the mutation.
func (m *OrderItemShipGroupMutation) ContactMechID() (r int, exists bool) {
	v := m.contact_mech_id
	if v == nil {
		return
	}
	return *v, true
}

// OldContactMechID returns the old "contact_mech_id" field's value of the OrderItemShipGroup entity.
// If the OrderItemShipGroup object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderItemShipGroupMutation) OldContactMechID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldContactMechID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldContactMechID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContactMechID: %w", err)
	}
	return oldValue.ContactMechID, nil
}

// AddContactMechID adds i to the "contact_mech_id" field.
func (m *OrderItemShipGroupMutation) AddContactMechID(i int) {
	if m.addcontact_mech_id != nil {
		*m.addcontact_mech_id += i
	} else {
		m.addcontact_mech_id = &i
	}
}

// AddedContactMechID returns the value that was added to the "contact_mech_id" field in this mutation.
func (m *OrderItemShipGroupMutation) AddedContactMechID() (r int, exists bool) {
	v := m.addcontact_mech_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearContactMechID clears the value of the "contact_mech_id" field.
func (m *OrderItemShipGroupMutation) ClearContactMechID() {
	m.contact_mech_id = nil
	m.addcontact_mech_id = nil
	m.clearedFields[orderitemshipgroup.FieldContactMechID] = struct{}{}
}

// ContactMechIDCleared returns if the "contact_mech_id" field was cleared in this mutation.
func (m *OrderItemShipGroupMutation) ContactMechIDCleared() bool {
	_, ok := m.clearedFields[orderitemshipgroup.FieldContactMechID]
	return ok
}

// ResetContactMechID resets all changes to the "contact_mech_id" field.
func (m *OrderItemShipGroupMutation) ResetContactMechID() {
	m.contact_mech_id = nil
	m.addcontact_mech_id = nil
	delete(m.clearedFields, orderitemshipgroup.FieldContactMechID)
}

// SetTelecomContactMechID sets the "telecom_contact_mech_id" field.
func (m *OrderItemShipGroupMutation) SetTelecomContactMechID(i int) {
	m.telecom_contact_mech_id = &i
	m.addtelecom_contact_mech_id = nil
}

// TelecomContactMechID returns the value of the "telecom_contact_mech_id" field in the mutation.
func (m *OrderItemShipGroupMutation) TelecomContactMechID() (r int, exists bool) {
	v := m.telecom_contact_mech_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTelecomContactMechID returns the old "telecom_contact_mech_id" field's value of the OrderItemShipGroup entity.
// If the OrderItemShipGroup object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderItemShipGroupMutation) OldTelecomContactMechID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTelecomContactMechID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTelecomContactMechID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTelecomContactMechID: %w", err)
	}
	return oldValue.TelecomContactMechID, nil
}

// AddTelecomContactMechID adds i to the "telecom_contact_mech_id" field.
func (m *OrderItemShipGroupMutation) AddTelecomContactMechID(i int) {
	if m.addtelecom_contact_mech_id != nil {
		*m.addtelecom_contact_mech_id += i
	} else {
		m.addtelecom_contact_mech_id = &i
	}
}

// AddedTelecomContactMechID returns the value that was added to the "telecom_contact_mech_id" field in this mutation.
func (m *OrderItemShipGroupMutation) AddedTelecomContactMechID() (r int, exists bool) {
	v := m.addtelecom_contact_mech_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearTelecomContactMechID clears the value of the "telecom_contact_mech_id" field.
func (m *OrderItemShipGroupMutation) ClearTelecomContactMechID() {
	m.telecom_contact_mech_id = nil
	m.addtelecom_contact_mech_id = nil
	m.clearedFields[orderitemshipgroup.FieldTelecomContactMechID] = struct{}{}
}

// TelecomContactMechIDCleared returns if the "telecom_contact_mech_id" field was cleared in this mutation.
func (m *OrderItemShipGroupMutation) TelecomContactMechIDCleared() bool {
	_, ok := m.clearedFields[orderitemshipgroup.FieldTelecomContactMechID]
	return ok
}

// ResetTelecomContactMechID resets all changes to the "telecom_contact_mech_id" field.
func (m *OrderItemShipGroupMutation) ResetTelecomContactMechID() {
	m.telecom_contact_mech_id = nil
	m.addtelecom_contact_mech_id = nil
	delete(m.clearedFields, orderitemshipgroup.FieldTelecomContactMechID)
}

// SetTrackingNumber sets the "tracking_number" field.
func (m *OrderItemShipGroupMutation) SetTrackingNumber(s string) {
	m.tracking_number = &s
}

// TrackingNumber returns the value of the "tracking_number" field in the mutation.
func (m *OrderItemShipGroupMutation) TrackingNumber() (r string, exists bool) {
	v := m.tracking_number
	if v == nil {
		return
	}
	return *v, true
}

// OldTrackingNumber returns the old "tracking_number" field's value of the OrderItemShipGroup entity.
// If the OrderItemShipGroup object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderItemShipGroupMutation) OldTrackingNumber(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTrackingNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTrackingNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTrackingNumber: %w", err)
	}
	return oldValue.TrackingNumber, nil
}

// ClearTrackingNumber clears the value of the "tracking_number" field.
func (m *OrderItemShipGroupMutation) ClearTrackingNumber() {
	m.tracking_number = nil
	m.clearedFields[orderitemshipgroup.FieldTrackingNumber] = struct{}{}
}

// TrackingNumberCleared returns if the "tracking_number" field was cleared in this mutation.
func (m *OrderItemShipGroupMutation) TrackingNumberCleared() bool {
	_, ok := m.clearedFields[orderitemshipgroup.FieldTrackingNumber]
	return ok
}

// ResetTrackingNumber resets all changes to the "tracking_number" field.
func (m *OrderItemShipGroupMutation) ResetTrackingNumber() {
	m.tracking_number = nil
	delete(m.clearedFields, orderitemshipgroup.FieldTrackingNumber)
}

// SetShippingInstructions sets the "shipping_instructions" field.
func (m *OrderItemShipGroupMutation) SetShippingInstructions(s string) {
	m.shipping_instructions = &s
}

// ShippingInstructions returns the value of the "shipping_instructions" field in the mutation.
func (m *OrderItemShipGroupMutation) ShippingInstructions() (r string, exists bool) {
	v := m.shipping_instructions
	if v == nil {
		return
	}
	return *v, true
}

// OldShippingInstructions returns the old "shipping_instructions" field's value of the OrderItemShipGroup entity.
// If the OrderItemShipGroup object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderItemShipGroupMutation) OldShippingInstructions(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldShippingInstructions is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldShippingInstructions requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShippingInstructions: %w", err)
	}
	return oldValue.ShippingInstructions, nil
}

// ClearShippingInstructions clears the value of the "shipping_instructions" field.
func (m *OrderItemShipGroupMutation) ClearShippingInstructions() {
	m.shipping_instructions = nil
	m.clearedFields[orderitemshipgroup.FieldShippingInstructions] = struct{}{}
}

// ShippingInstructionsCleared returns if the "shipping_instructions" field was cleared in this mutation.
func (m *OrderItemShipGroupMutation) ShippingInstructionsCleared() bool {
	_, ok := m.clearedFields[orderitemshipgroup.FieldShippingInstructions]
	return ok
}

// ResetShippingInstructions resets all changes to the "shipping_instructions" field.
func (m *OrderItemShipGroupMutation) ResetShippingInstructions() {
	m.shipping_instructions = nil
	delete(m.clearedFields, orderitemshipgroup.FieldShippingInstructions)
}

// SetMaySplit sets the "may_split" field.
func (m *OrderItemShipGroupMutation) SetMaySplit(os orderitemshipgroup.MaySplit) {
	m.may_split = &os
}

// MaySplit returns the value of the "may_split" field in the mutation.
func (m *OrderItemShipGroupMutation) MaySplit() (r orderitemshipgroup.MaySplit, exists bool) {
	v := m.may_split
	if v == nil {
		return
	}
	return *v, true
}

// OldMaySplit returns the old "may_split" field's value of the OrderItemShipGroup entity.
// If the OrderItemShipGroup object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderItemShipGroupMutation) OldMaySplit(ctx context.Context) (v orderitemshipgroup.MaySplit, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldMaySplit is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldMaySplit requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMaySplit: %w", err)
	}
	return oldValue.MaySplit, nil
}

// ClearMaySplit clears the value of the "may_split" field.
func (m *OrderItemShipGroupMutation) ClearMaySplit() {
	m.may_split = nil
	m.clearedFields[orderitemshipgroup.FieldMaySplit] = struct{}{}
}

// MaySplitCleared returns if the "may_split" field was cleared in this mutation.
func (m *OrderItemShipGroupMutation) MaySplitCleared() bool {
	_, ok := m.clearedFields[orderitemshipgroup.FieldMaySplit]
	return ok
}

// ResetMaySplit resets all changes to the "may_split" field.
func (m *OrderItemShipGroupMutation) ResetMaySplit() {
	m.may_split = nil
	delete(m.clearedFields, orderitemshipgroup.FieldMaySplit)
}

// SetGiftMessage sets the "gift_message" field.
func (m *OrderItemShipGroupMutation) SetGiftMessage(s string) {
	m.gift_message = &s
}

// GiftMessage returns the value of the "gift_message" field in the mutation.
func (m *OrderItemShipGroupMutation) GiftMessage() (r string, exists bool) {
	v := m.gift_message
	if v == nil {
		return
	}
	return *v, true
}

// OldGiftMessage returns the old "gift_message" field's value of the OrderItemShipGroup entity.
// If the OrderItemShipGroup object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderItemShipGroupMutation) OldGiftMessage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldGiftMessage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldGiftMessage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGiftMessage: %w", err)
	}
	return oldValue.GiftMessage, nil
}

// ClearGiftMessage clears the value of the "gift_message" field.
func (m *OrderItemShipGroupMutation) ClearGiftMessage() {
	m.gift_message = nil
	m.clearedFields[orderitemshipgroup.FieldGiftMessage] = struct{}{}
}

// GiftMessageCleared returns if the "gift_message" field was cleared in this mutation.
func (m *OrderItemShipGroupMutation) GiftMessageCleared() bool {
	_, ok := m.clearedFields[orderitemshipgroup.FieldGiftMessage]
	return ok
}

// ResetGiftMessage resets all changes to the "gift_message" field.
func (m *OrderItemShipGroupMutation) ResetGiftMessage() {
	m.gift_message = nil
	delete(m.clearedFields, orderitemshipgroup.FieldGiftMessage)
}

// SetIsGift sets the "is_gift" field.
func (m *OrderItemShipGroupMutation) SetIsGift(og orderitemshipgroup.IsGift) {
	m.is_gift = &og
}

// IsGift returns the value of the "is_gift" field in the mutation.
func (m *OrderItemShipGroupMutation) IsGift() (r orderitemshipgroup.IsGift, exists bool) {
	v := m.is_gift
	if v == nil {
		return
	}
	return *v, true
}

// OldIsGift returns the old "is_gift" field's value of the OrderItemShipGroup entity.
// If the OrderItemShipGroup object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderItemShipGroupMutation) OldIsGift(ctx context.Context) (v orderitemshipgroup.IsGift, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldIsGift is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldIsGift requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsGift: %w", err)
	}
	return oldValue.IsGift, nil
}

// ClearIsGift clears the value of the "is_gift" field.
func (m *OrderItemShipGroupMutation) ClearIsGift() {
	m.is_gift = nil
	m.clearedFields[orderitemshipgroup.FieldIsGift] = struct{}{}
}

// IsGiftCleared returns if the "is_gift" field was cleared in this mutation.
func (m *OrderItemShipGroupMutation) IsGiftCleared() bool {
	_, ok := m.clearedFields[orderitemshipgroup.FieldIsGift]
	return ok
}

// ResetIsGift resets all changes to the "is_gift" field.
func (m *OrderItemShipGroupMutation) ResetIsGift() {
	m.is_gift = nil
	delete(m.clearedFields, orderitemshipgroup.FieldIsGift)
}

// SetShipAfterDate sets the "ship_after_date" field.
func (m *OrderItemShipGroupMutation) SetShipAfterDate(t time.Time) {
	m.ship_after_date = &t
}

// ShipAfterDate returns the value of the "ship_after_date" field in the mutation.
func (m *OrderItemShipGroupMutation) ShipAfterDate() (r time.Time, exists bool) {
	v := m.ship_after_date
	if v == nil {
		return
	}
	return *v, true
}

// OldShipAfterDate returns the old "ship_after_date" field's value of the OrderItemShipGroup entity.
// If the OrderItemShipGroup object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderItemShipGroupMutation) OldShipAfterDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldShipAfterDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldShipAfterDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShipAfterDate: %w", err)
	}
	return oldValue.ShipAfterDate, nil
}

// ClearShipAfterDate clears the value of the "ship_after_date" field.
func (m *OrderItemShipGroupMutation) ClearShipAfterDate() {
	m.ship_after_date = nil
	m.clearedFields[orderitemshipgroup.FieldShipAfterDate] = struct{}{}
}

// ShipAfterDateCleared returns if the "ship_after_date" field was cleared in this mutation.
func (m *OrderItemShipGroupMutation) ShipAfterDateCleared() bool {
	_, ok := m.clearedFields[orderitemshipgroup.FieldShipAfterDate]
	return ok
}

// ResetShipAfterDate resets all changes to the "ship_after_date" field.
func (m *OrderItemShipGroupMutation) ResetShipAfterDate() {
	m.ship_after_date = nil
	delete(m.clearedFields, orderitemshipgroup.FieldShipAfterDate)
}

// SetShipByDate sets the "ship_by_date" field.
func (m *OrderItemShipGroupMutation) SetShipByDate(t time.Time) {
	m.ship_by_date = &t
}

// ShipByDate returns the value of the "ship_by_date" field in the mutation.
func (m *OrderItemShipGroupMutation) ShipByDate() (r time.Time, exists bool) {
	v := m.ship_by_date
	if v == nil {
		return
	}
	return *v, true
}

// OldShipByDate returns the old "ship_by_date" field's value of the OrderItemShipGroup entity.
// If the OrderItemShipGroup object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderItemShipGroupMutation) OldShipByDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldShipByDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldShipByDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShipByDate: %w", err)
	}
	return oldValue.ShipByDate, nil
}

// ClearShipByDate clears the value of the "ship_by_date" field.
func (m *OrderItemShipGroupMutation) ClearShipByDate() {
	m.ship_by_date = nil
	m.clearedFields[orderitemshipgroup.FieldShipByDate] = struct{}{}
}

// ShipByDateCleared returns if the "ship_by_date" field was cleared in this mutation.
func (m *OrderItemShipGroupMutation) ShipByDateCleared() bool {
	_, ok := m.clearedFields[orderitemshipgroup.FieldShipByDate]
	return ok
}

// ResetShipByDate resets all changes to the "ship_by_date" field.
func (m *OrderItemShipGroupMutation) ResetShipByDate() {
	m.ship_by_date = nil
	delete(m.clearedFields, orderitemshipgroup.FieldShipByDate)
}

// SetEstimatedShipDate sets the "estimated_ship_date" field.
func (m *OrderItemShipGroupMutation) SetEstimatedShipDate(t time.Time) {
	m.estimated_ship_date = &t
}

// EstimatedShipDate returns the value of the "estimated_ship_date" field in the mutation.
func (m *OrderItemShipGroupMutation) EstimatedShipDate() (r time.Time, exists bool) {
	v := m.estimated_ship_date
	if v == nil {
		return
	}
	return *v, true
}

// OldEstimatedShipDate returns the old "estimated_ship_date" field's value of the OrderItemShipGroup entity.
// If the OrderItemShipGroup object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderItemShipGroupMutation) OldEstimatedShipDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEstimatedShipDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEstimatedShipDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEstimatedShipDate: %w", err)
	}
	return oldValue.EstimatedShipDate, nil
}

// ClearEstimatedShipDate clears the value of the "estimated_ship_date" field.
func (m *OrderItemShipGroupMutation) ClearEstimatedShipDate() {
	m.estimated_ship_date = nil
	m.clearedFields[orderitemshipgroup.FieldEstimatedShipDate] = struct{}{}
}

// EstimatedShipDateCleared returns if the "estimated_ship_date" field was cleared in this mutation.
func (m *OrderItemShipGroupMutation) EstimatedShipDateCleared() bool {
	_, ok := m.clearedFields[orderitemshipgroup.FieldEstimatedShipDate]
	return ok
}

// ResetEstimatedShipDate resets all changes to the "estimated_ship_date" field.
func (m *OrderItemShipGroupMutation) ResetEstimatedShipDate() {
	m.estimated_ship_date = nil
	delete(m.clearedFields, orderitemshipgroup.FieldEstimatedShipDate)
}

// SetEstimatedDeliveryDate sets the "estimated_delivery_date" field.
func (m *OrderItemShipGroupMutation) SetEstimatedDeliveryDate(t time.Time) {
	m.estimated_delivery_date = &t
}

// EstimatedDeliveryDate returns the value of the "estimated_delivery_date" field in the mutation.
func (m *OrderItemShipGroupMutation) EstimatedDeliveryDate() (r time.Time, exists bool) {
	v := m.estimated_delivery_date
	if v == nil {
		return
	}
	return *v, true
}

// OldEstimatedDeliveryDate returns the old "estimated_delivery_date" field's value of the OrderItemShipGroup entity.
// If the OrderItemShipGroup object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderItemShipGroupMutation) OldEstimatedDeliveryDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEstimatedDeliveryDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEstimatedDeliveryDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEstimatedDeliveryDate: %w", err)
	}
	return oldValue.EstimatedDeliveryDate, nil
}

// ClearEstimatedDeliveryDate clears the value of the "estimated_delivery_date" field.
func (m *OrderItemShipGroupMutation) ClearEstimatedDeliveryDate() {
	m.estimated_delivery_date = nil
	m.clearedFields[orderitemshipgroup.FieldEstimatedDeliveryDate] = struct{}{}
}

// EstimatedDeliveryDateCleared returns if the "estimated_delivery_date" field was cleared in this mutation.
func (m *OrderItemShipGroupMutation) EstimatedDeliveryDateCleared() bool {
	_, ok := m.clearedFields[orderitemshipgroup.FieldEstimatedDeliveryDate]
	return ok
}

// ResetEstimatedDeliveryDate resets all changes to the "estimated_delivery_date" field.
func (m *OrderItemShipGroupMutation) ResetEstimatedDeliveryDate() {
	m.estimated_delivery_date = nil
	delete(m.clearedFields, orderitemshipgroup.FieldEstimatedDeliveryDate)
}

// SetOrderHeaderID sets the "order_header" edge to the OrderHeader entity by id.
func (m *OrderItemShipGroupMutation) SetOrderHeaderID(id int) {
	m.order_header = &id
}

// ClearOrderHeader clears the "order_header" edge to the OrderHeader entity.
func (m *OrderItemShipGroupMutation) ClearOrderHeader() {
	m.clearedorder_header = true
}

// OrderHeaderCleared reports if the "order_header" edge to the OrderHeader entity was cleared.
func (m *OrderItemShipGroupMutation) OrderHeaderCleared() bool {
	return m.clearedorder_header
}

// OrderHeaderID returns the "order_header" edge ID in the mutation.
func (m *OrderItemShipGroupMutation) OrderHeaderID() (id int, exists bool) {
	if m.order_header != nil {
		return *m.order_header, true
	}
	return
}

// OrderHeaderIDs returns the "order_header" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OrderHeaderID instead. It exists only for internal usage by the builders.
func (m *OrderItemShipGroupMutation) OrderHeaderIDs() (ids []int) {
	if id := m.order_header; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOrderHeader resets all changes to the "order_header" edge.
func (m *OrderItemShipGroupMutation) ResetOrderHeader() {
	m.order_header = nil
	m.clearedorder_header = false
}

// AddOrderItemShipGroupAssocIDs adds the "order_item_ship_group_assocs" edge to the OrderItemShipGroupAssoc entity by ids.
func (m *OrderItemShipGroupMutation) AddOrderItemShipGroupAssocIDs(ids ...int) {
	if m.order_item_ship_group_assocs == nil {
		m.order_item_ship_group_assocs = make(map[int]struct{})
	}
	for i := range ids {
		m.order_item_ship_group_assocs[ids[i]] = struct{}{}
	}
}

// ClearOrderItemShipGroupAssocs clears the "order_item_ship_group_assocs" edge to the OrderItemShipGroupAssoc entity.
func (m *OrderItemShipGroupMutation) ClearOrderItemShipGroupAssocs() {
	m.clearedorder_item_ship_group_assocs = true
}

// OrderItemShipGroupAssocsCleared reports if the "order_item_ship_group_assocs" edge to the OrderItemShipGroupAssoc entity was cleared.
func (m *OrderItemShipGroupMutation) OrderItemShipGroupAssocsCleared() bool {
	return m.clearedorder_item_ship_group_assocs
}

// RemoveOrderItemShipGroupAssocIDs removes the "order_item_ship_group_assocs" edge to the OrderItemShipGroupAssoc entity by IDs.
func (m *OrderItemShipGroupMutation) RemoveOrderItemShipGroupAssocIDs(ids ...int) {
	if m.removedorder_item_ship_group_assocs == nil {
		m.removedorder_item_ship_group_assocs = make(map[int]struct{})
	}
	for i := range ids {
		m.removedorder_item_ship_group_assocs[ids[i]] = struct{}{}
	}
}

// RemovedOrderItemShipGroupAssocs returns the removed IDs of the "order_item_ship_group_assocs" edge to the OrderItemShipGroupAssoc entity.
func (m *OrderItemShipGroupMutation) RemovedOrderItemShipGroupAssocsIDs() (ids []int) {
	for id := range m.removedorder_item_ship_group_assocs {
		ids = append(ids, id)
	}
	return
}

// OrderItemShipGroupAssocsIDs returns the "order_item_ship_group_assocs" edge IDs in the mutation.
func (m *OrderItemShipGroupMutation) OrderItemShipGroupAssocsIDs() (ids []int) {
	for id := range m.order_item_ship_group_assocs {
		ids = append(ids, id)
	}
	return
}

// ResetOrderItemShipGroupAssocs resets all changes to the "order_item_ship_group_assocs" edge.
func (m *OrderItemShipGroupMutation) ResetOrderItemShipGroupAssocs() {
	m.order_item_ship_group_assocs = nil
	m.clearedorder_item_ship_group_assocs = false
	m.removedorder_item_ship_group_assocs = nil
}

// AddPrimaryShipmentIDs adds the "primary_shipments" edge to the Shipment entity by ids.
func (m *OrderItemShipGroupMutation) AddPrimaryShipmentIDs(ids ...int) {
	if m.primary_shipments == nil {
		m.primary_shipments = make(map[int]struct{})
	}
	for i := range ids {
		m.primary_shipments[ids[i]] = struct{}{}
	}
}

// ClearPrimaryShipments clears the "primary_shipments" edge to the Shipment entity.
func (m *OrderItemShipGroupMutation) ClearPrimaryShipments() {
	m.clearedprimary_shipments = true
}

// PrimaryShipmentsCleared reports if the "primary_shipments" edge to the Shipment entity was cleared.
func (m *OrderItemShipGroupMutation) PrimaryShipmentsCleared() bool {
	return m.clearedprimary_shipments
}

// RemovePrimaryShipmentIDs removes the "primary_shipments" edge to the Shipment entity by IDs.
func (m *OrderItemShipGroupMutation) RemovePrimaryShipmentIDs(ids ...int) {
	if m.removedprimary_shipments == nil {
		m.removedprimary_shipments = make(map[int]struct{})
	}
	for i := range ids {
		m.removedprimary_shipments[ids[i]] = struct{}{}
	}
}

// RemovedPrimaryShipments returns the removed IDs of the "primary_shipments" edge to the Shipment entity.
func (m *OrderItemShipGroupMutation) RemovedPrimaryShipmentsIDs() (ids []int) {
	for id := range m.removedprimary_shipments {
		ids = append(ids, id)
	}
	return
}

// PrimaryShipmentsIDs returns the "primary_shipments" edge IDs in the mutation.
func (m *OrderItemShipGroupMutation) PrimaryShipmentsIDs() (ids []int) {
	for id := range m.primary_shipments {
		ids = append(ids, id)
	}
	return
}

// ResetPrimaryShipments resets all changes to the "primary_shipments" edge.
func (m *OrderItemShipGroupMutation) ResetPrimaryShipments() {
	m.primary_shipments = nil
	m.clearedprimary_shipments = false
	m.removedprimary_shipments = nil
}

// Op returns the operation name.
func (m *OrderItemShipGroupMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (OrderItemShipGroup).
func (m *OrderItemShipGroupMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *OrderItemShipGroupMutation) Fields() []string {
	fields := make([]string, 0, 21)
	if m.create_time != nil {
		fields = append(fields, orderitemshipgroup.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, orderitemshipgroup.FieldUpdateTime)
	}
	if m.ship_group_seq_id != nil {
		fields = append(fields, orderitemshipgroup.FieldShipGroupSeqID)
	}
	if m.shipment_method_type_id != nil {
		fields = append(fields, orderitemshipgroup.FieldShipmentMethodTypeID)
	}
	if m.supplier_party_id != nil {
		fields = append(fields, orderitemshipgroup.FieldSupplierPartyID)
	}
	if m.supplier_agreement_id != nil {
		fields = append(fields, orderitemshipgroup.FieldSupplierAgreementID)
	}
	if m.vendor_party_id != nil {
		fields = append(fields, orderitemshipgroup.FieldVendorPartyID)
	}
	if m.carrier_party_id != nil {
		fields = append(fields, orderitemshipgroup.FieldCarrierPartyID)
	}
	if m.carrier_role_type_id != nil {
		fields = append(fields, orderitemshipgroup.FieldCarrierRoleTypeID)
	}
	if m.facility_id != nil {
		fields = append(fields, orderitemshipgroup.FieldFacilityID)
	}
	if m.contact_mech_id != nil {
		fields = append(fields, orderitemshipgroup.FieldContactMechID)
	}
	if m.telecom_contact_mech_id != nil {
		fields = append(fields, orderitemshipgroup.FieldTelecomContactMechID)
	}
	if m.tracking_number != nil {
		fields = append(fields, orderitemshipgroup.FieldTrackingNumber)
	}
	if m.shipping_instructions != nil {
		fields = append(fields, orderitemshipgroup.FieldShippingInstructions)
	}
	if m.may_split != nil {
		fields = append(fields, orderitemshipgroup.FieldMaySplit)
	}
	if m.gift_message != nil {
		fields = append(fields, orderitemshipgroup.FieldGiftMessage)
	}
	if m.is_gift != nil {
		fields = append(fields, orderitemshipgroup.FieldIsGift)
	}
	if m.ship_after_date != nil {
		fields = append(fields, orderitemshipgroup.FieldShipAfterDate)
	}
	if m.ship_by_date != nil {
		fields = append(fields, orderitemshipgroup.FieldShipByDate)
	}
	if m.estimated_ship_date != nil {
		fields = append(fields, orderitemshipgroup.FieldEstimatedShipDate)
	}
	if m.estimated_delivery_date != nil {
		fields = append(fields, orderitemshipgroup.FieldEstimatedDeliveryDate)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *OrderItemShipGroupMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case orderitemshipgroup.FieldCreateTime:
		return m.CreateTime()
	case orderitemshipgroup.FieldUpdateTime:
		return m.UpdateTime()
	case orderitemshipgroup.FieldShipGroupSeqID:
		return m.ShipGroupSeqID()
	case orderitemshipgroup.FieldShipmentMethodTypeID:
		return m.ShipmentMethodTypeID()
	case orderitemshipgroup.FieldSupplierPartyID:
		return m.SupplierPartyID()
	case orderitemshipgroup.FieldSupplierAgreementID:
		return m.SupplierAgreementID()
	case orderitemshipgroup.FieldVendorPartyID:
		return m.VendorPartyID()
	case orderitemshipgroup.FieldCarrierPartyID:
		return m.CarrierPartyID()
	case orderitemshipgroup.FieldCarrierRoleTypeID:
		return m.CarrierRoleTypeID()
	case orderitemshipgroup.FieldFacilityID:
		return m.FacilityID()
	case orderitemshipgroup.FieldContactMechID:
		return m.ContactMechID()
	case orderitemshipgroup.FieldTelecomContactMechID:
		return m.TelecomContactMechID()
	case orderitemshipgroup.FieldTrackingNumber:
		return m.TrackingNumber()
	case orderitemshipgroup.FieldShippingInstructions:
		return m.ShippingInstructions()
	case orderitemshipgroup.FieldMaySplit:
		return m.MaySplit()
	case orderitemshipgroup.FieldGiftMessage:
		return m.GiftMessage()
	case orderitemshipgroup.FieldIsGift:
		return m.IsGift()
	case orderitemshipgroup.FieldShipAfterDate:
		return m.ShipAfterDate()
	case orderitemshipgroup.FieldShipByDate:
		return m.ShipByDate()
	case orderitemshipgroup.FieldEstimatedShipDate:
		return m.EstimatedShipDate()
	case orderitemshipgroup.FieldEstimatedDeliveryDate:
		return m.EstimatedDeliveryDate()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *OrderItemShipGroupMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case orderitemshipgroup.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case orderitemshipgroup.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case orderitemshipgroup.FieldShipGroupSeqID:
		return m.OldShipGroupSeqID(ctx)
	case orderitemshipgroup.FieldShipmentMethodTypeID:
		return m.OldShipmentMethodTypeID(ctx)
	case orderitemshipgroup.FieldSupplierPartyID:
		return m.OldSupplierPartyID(ctx)
	case orderitemshipgroup.FieldSupplierAgreementID:
		return m.OldSupplierAgreementID(ctx)
	case orderitemshipgroup.FieldVendorPartyID:
		return m.OldVendorPartyID(ctx)
	case orderitemshipgroup.FieldCarrierPartyID:
		return m.OldCarrierPartyID(ctx)
	case orderitemshipgroup.FieldCarrierRoleTypeID:
		return m.OldCarrierRoleTypeID(ctx)
	case orderitemshipgroup.FieldFacilityID:
		return m.OldFacilityID(ctx)
	case orderitemshipgroup.FieldContactMechID:
		return m.OldContactMechID(ctx)
	case orderitemshipgroup.FieldTelecomContactMechID:
		return m.OldTelecomContactMechID(ctx)
	case orderitemshipgroup.FieldTrackingNumber:
		return m.OldTrackingNumber(ctx)
	case orderitemshipgroup.FieldShippingInstructions:
		return m.OldShippingInstructions(ctx)
	case orderitemshipgroup.FieldMaySplit:
		return m.OldMaySplit(ctx)
	case orderitemshipgroup.FieldGiftMessage:
		return m.OldGiftMessage(ctx)
	case orderitemshipgroup.FieldIsGift:
		return m.OldIsGift(ctx)
	case orderitemshipgroup.FieldShipAfterDate:
		return m.OldShipAfterDate(ctx)
	case orderitemshipgroup.FieldShipByDate:
		return m.OldShipByDate(ctx)
	case orderitemshipgroup.FieldEstimatedShipDate:
		return m.OldEstimatedShipDate(ctx)
	case orderitemshipgroup.FieldEstimatedDeliveryDate:
		return m.OldEstimatedDeliveryDate(ctx)
	}
	return nil, fmt.Errorf("unknown OrderItemShipGroup field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrderItemShipGroupMutation) SetField(name string, value ent.Value) error {
	switch name {
	case orderitemshipgroup.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case orderitemshipgroup.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case orderitemshipgroup.FieldShipGroupSeqID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShipGroupSeqID(v)
		return nil
	case orderitemshipgroup.FieldShipmentMethodTypeID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShipmentMethodTypeID(v)
		return nil
	case orderitemshipgroup.FieldSupplierPartyID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSupplierPartyID(v)
		return nil
	case orderitemshipgroup.FieldSupplierAgreementID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSupplierAgreementID(v)
		return nil
	case orderitemshipgroup.FieldVendorPartyID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVendorPartyID(v)
		return nil
	case orderitemshipgroup.FieldCarrierPartyID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCarrierPartyID(v)
		return nil
	case orderitemshipgroup.FieldCarrierRoleTypeID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCarrierRoleTypeID(v)
		return nil
	case orderitemshipgroup.FieldFacilityID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFacilityID(v)
		return nil
	case orderitemshipgroup.FieldContactMechID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContactMechID(v)
		return nil
	case orderitemshipgroup.FieldTelecomContactMechID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTelecomContactMechID(v)
		return nil
	case orderitemshipgroup.FieldTrackingNumber:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTrackingNumber(v)
		return nil
	case orderitemshipgroup.FieldShippingInstructions:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShippingInstructions(v)
		return nil
	case orderitemshipgroup.FieldMaySplit:
		v, ok := value.(orderitemshipgroup.MaySplit)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMaySplit(v)
		return nil
	case orderitemshipgroup.FieldGiftMessage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGiftMessage(v)
		return nil
	case orderitemshipgroup.FieldIsGift:
		v, ok := value.(orderitemshipgroup.IsGift)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsGift(v)
		return nil
	case orderitemshipgroup.FieldShipAfterDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShipAfterDate(v)
		return nil
	case orderitemshipgroup.FieldShipByDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShipByDate(v)
		return nil
	case orderitemshipgroup.FieldEstimatedShipDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEstimatedShipDate(v)
		return nil
	case orderitemshipgroup.FieldEstimatedDeliveryDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEstimatedDeliveryDate(v)
		return nil
	}
	return fmt.Errorf("unknown OrderItemShipGroup field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *OrderItemShipGroupMutation) AddedFields() []string {
	var fields []string
	if m.addship_group_seq_id != nil {
		fields = append(fields, orderitemshipgroup.FieldShipGroupSeqID)
	}
	if m.addshipment_method_type_id != nil {
		fields = append(fields, orderitemshipgroup.FieldShipmentMethodTypeID)
	}
	if m.addsupplier_party_id != nil {
		fields = append(fields, orderitemshipgroup.FieldSupplierPartyID)
	}
	if m.addsupplier_agreement_id != nil {
		fields = append(fields, orderitemshipgroup.FieldSupplierAgreementID)
	}
	if m.addvendor_party_id != nil {
		fields = append(fields, orderitemshipgroup.FieldVendorPartyID)
	}
	if m.addcarrier_party_id != nil {
		fields = append(fields, orderitemshipgroup.FieldCarrierPartyID)
	}
	if m.addcarrier_role_type_id != nil {
		fields = append(fields, orderitemshipgroup.FieldCarrierRoleTypeID)
	}
	if m.addfacility_id != nil {
		fields = append(fields, orderitemshipgroup.FieldFacilityID)
	}
	if m.addcontact_mech_id != nil {
		fields = append(fields, orderitemshipgroup.FieldContactMechID)
	}
	if m.addtelecom_contact_mech_id != nil {
		fields = append(fields, orderitemshipgroup.FieldTelecomContactMechID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *OrderItemShipGroupMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case orderitemshipgroup.FieldShipGroupSeqID:
		return m.AddedShipGroupSeqID()
	case orderitemshipgroup.FieldShipmentMethodTypeID:
		return m.AddedShipmentMethodTypeID()
	case orderitemshipgroup.FieldSupplierPartyID:
		return m.AddedSupplierPartyID()
	case orderitemshipgroup.FieldSupplierAgreementID:
		return m.AddedSupplierAgreementID()
	case orderitemshipgroup.FieldVendorPartyID:
		return m.AddedVendorPartyID()
	case orderitemshipgroup.FieldCarrierPartyID:
		return m.AddedCarrierPartyID()
	case orderitemshipgroup.FieldCarrierRoleTypeID:
		return m.AddedCarrierRoleTypeID()
	case orderitemshipgroup.FieldFacilityID:
		return m.AddedFacilityID()
	case orderitemshipgroup.FieldContactMechID:
		return m.AddedContactMechID()
	case orderitemshipgroup.FieldTelecomContactMechID:
		return m.AddedTelecomContactMechID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrderItemShipGroupMutation) AddField(name string, value ent.Value) error {
	switch name {
	case orderitemshipgroup.FieldShipGroupSeqID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddShipGroupSeqID(v)
		return nil
	case orderitemshipgroup.FieldShipmentMethodTypeID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddShipmentMethodTypeID(v)
		return nil
	case orderitemshipgroup.FieldSupplierPartyID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSupplierPartyID(v)
		return nil
	case orderitemshipgroup.FieldSupplierAgreementID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSupplierAgreementID(v)
		return nil
	case orderitemshipgroup.FieldVendorPartyID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddVendorPartyID(v)
		return nil
	case orderitemshipgroup.FieldCarrierPartyID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCarrierPartyID(v)
		return nil
	case orderitemshipgroup.FieldCarrierRoleTypeID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCarrierRoleTypeID(v)
		return nil
	case orderitemshipgroup.FieldFacilityID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddFacilityID(v)
		return nil
	case orderitemshipgroup.FieldContactMechID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddContactMechID(v)
		return nil
	case orderitemshipgroup.FieldTelecomContactMechID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTelecomContactMechID(v)
		return nil
	}
	return fmt.Errorf("unknown OrderItemShipGroup numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *OrderItemShipGroupMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(orderitemshipgroup.FieldShipmentMethodTypeID) {
		fields = append(fields, orderitemshipgroup.FieldShipmentMethodTypeID)
	}
	if m.FieldCleared(orderitemshipgroup.FieldSupplierPartyID) {
		fields = append(fields, orderitemshipgroup.FieldSupplierPartyID)
	}
	if m.FieldCleared(orderitemshipgroup.FieldSupplierAgreementID) {
		fields = append(fields, orderitemshipgroup.FieldSupplierAgreementID)
	}
	if m.FieldCleared(orderitemshipgroup.FieldVendorPartyID) {
		fields = append(fields, orderitemshipgroup.FieldVendorPartyID)
	}
	if m.FieldCleared(orderitemshipgroup.FieldCarrierPartyID) {
		fields = append(fields, orderitemshipgroup.FieldCarrierPartyID)
	}
	if m.FieldCleared(orderitemshipgroup.FieldCarrierRoleTypeID) {
		fields = append(fields, orderitemshipgroup.FieldCarrierRoleTypeID)
	}
	if m.FieldCleared(orderitemshipgroup.FieldFacilityID) {
		fields = append(fields, orderitemshipgroup.FieldFacilityID)
	}
	if m.FieldCleared(orderitemshipgroup.FieldContactMechID) {
		fields = append(fields, orderitemshipgroup.FieldContactMechID)
	}
	if m.FieldCleared(orderitemshipgroup.FieldTelecomContactMechID) {
		fields = append(fields, orderitemshipgroup.FieldTelecomContactMechID)
	}
	if m.FieldCleared(orderitemshipgroup.FieldTrackingNumber) {
		fields = append(fields, orderitemshipgroup.FieldTrackingNumber)
	}
	if m.FieldCleared(orderitemshipgroup.FieldShippingInstructions) {
		fields = append(fields, orderitemshipgroup.FieldShippingInstructions)
	}
	if m.FieldCleared(orderitemshipgroup.FieldMaySplit) {
		fields = append(fields, orderitemshipgroup.FieldMaySplit)
	}
	if m.FieldCleared(orderitemshipgroup.FieldGiftMessage) {
		fields = append(fields, orderitemshipgroup.FieldGiftMessage)
	}
	if m.FieldCleared(orderitemshipgroup.FieldIsGift) {
		fields = append(fields, orderitemshipgroup.FieldIsGift)
	}
	if m.FieldCleared(orderitemshipgroup.FieldShipAfterDate) {
		fields = append(fields, orderitemshipgroup.FieldShipAfterDate)
	}
	if m.FieldCleared(orderitemshipgroup.FieldShipByDate) {
		fields = append(fields, orderitemshipgroup.FieldShipByDate)
	}
	if m.FieldCleared(orderitemshipgroup.FieldEstimatedShipDate) {
		fields = append(fields, orderitemshipgroup.FieldEstimatedShipDate)
	}
	if m.FieldCleared(orderitemshipgroup.FieldEstimatedDeliveryDate) {
		fields = append(fields, orderitemshipgroup.FieldEstimatedDeliveryDate)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *OrderItemShipGroupMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *OrderItemShipGroupMutation) ClearField(name string) error {
	switch name {
	case orderitemshipgroup.FieldShipmentMethodTypeID:
		m.ClearShipmentMethodTypeID()
		return nil
	case orderitemshipgroup.FieldSupplierPartyID:
		m.ClearSupplierPartyID()
		return nil
	case orderitemshipgroup.FieldSupplierAgreementID:
		m.ClearSupplierAgreementID()
		return nil
	case orderitemshipgroup.FieldVendorPartyID:
		m.ClearVendorPartyID()
		return nil
	case orderitemshipgroup.FieldCarrierPartyID:
		m.ClearCarrierPartyID()
		return nil
	case orderitemshipgroup.FieldCarrierRoleTypeID:
		m.ClearCarrierRoleTypeID()
		return nil
	case orderitemshipgroup.FieldFacilityID:
		m.ClearFacilityID()
		return nil
	case orderitemshipgroup.FieldContactMechID:
		m.ClearContactMechID()
		return nil
	case orderitemshipgroup.FieldTelecomContactMechID:
		m.ClearTelecomContactMechID()
		return nil
	case orderitemshipgroup.FieldTrackingNumber:
		m.ClearTrackingNumber()
		return nil
	case orderitemshipgroup.FieldShippingInstructions:
		m.ClearShippingInstructions()
		return nil
	case orderitemshipgroup.FieldMaySplit:
		m.ClearMaySplit()
		return nil
	case orderitemshipgroup.FieldGiftMessage:
		m.ClearGiftMessage()
		return nil
	case orderitemshipgroup.FieldIsGift:
		m.ClearIsGift()
		return nil
	case orderitemshipgroup.FieldShipAfterDate:
		m.ClearShipAfterDate()
		return nil
	case orderitemshipgroup.FieldShipByDate:
		m.ClearShipByDate()
		return nil
	case orderitemshipgroup.FieldEstimatedShipDate:
		m.ClearEstimatedShipDate()
		return nil
	case orderitemshipgroup.FieldEstimatedDeliveryDate:
		m.ClearEstimatedDeliveryDate()
		return nil
	}
	return fmt.Errorf("unknown OrderItemShipGroup nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *OrderItemShipGroupMutation) ResetField(name string) error {
	switch name {
	case orderitemshipgroup.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case orderitemshipgroup.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case orderitemshipgroup.FieldShipGroupSeqID:
		m.ResetShipGroupSeqID()
		return nil
	case orderitemshipgroup.FieldShipmentMethodTypeID:
		m.ResetShipmentMethodTypeID()
		return nil
	case orderitemshipgroup.FieldSupplierPartyID:
		m.ResetSupplierPartyID()
		return nil
	case orderitemshipgroup.FieldSupplierAgreementID:
		m.ResetSupplierAgreementID()
		return nil
	case orderitemshipgroup.FieldVendorPartyID:
		m.ResetVendorPartyID()
		return nil
	case orderitemshipgroup.FieldCarrierPartyID:
		m.ResetCarrierPartyID()
		return nil
	case orderitemshipgroup.FieldCarrierRoleTypeID:
		m.ResetCarrierRoleTypeID()
		return nil
	case orderitemshipgroup.FieldFacilityID:
		m.ResetFacilityID()
		return nil
	case orderitemshipgroup.FieldContactMechID:
		m.ResetContactMechID()
		return nil
	case orderitemshipgroup.FieldTelecomContactMechID:
		m.ResetTelecomContactMechID()
		return nil
	case orderitemshipgroup.FieldTrackingNumber:
		m.ResetTrackingNumber()
		return nil
	case orderitemshipgroup.FieldShippingInstructions:
		m.ResetShippingInstructions()
		return nil
	case orderitemshipgroup.FieldMaySplit:
		m.ResetMaySplit()
		return nil
	case orderitemshipgroup.FieldGiftMessage:
		m.ResetGiftMessage()
		return nil
	case orderitemshipgroup.FieldIsGift:
		m.ResetIsGift()
		return nil
	case orderitemshipgroup.FieldShipAfterDate:
		m.ResetShipAfterDate()
		return nil
	case orderitemshipgroup.FieldShipByDate:
		m.ResetShipByDate()
		return nil
	case orderitemshipgroup.FieldEstimatedShipDate:
		m.ResetEstimatedShipDate()
		return nil
	case orderitemshipgroup.FieldEstimatedDeliveryDate:
		m.ResetEstimatedDeliveryDate()
		return nil
	}
	return fmt.Errorf("unknown OrderItemShipGroup field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *OrderItemShipGroupMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.order_header != nil {
		edges = append(edges, orderitemshipgroup.EdgeOrderHeader)
	}
	if m.order_item_ship_group_assocs != nil {
		edges = append(edges, orderitemshipgroup.EdgeOrderItemShipGroupAssocs)
	}
	if m.primary_shipments != nil {
		edges = append(edges, orderitemshipgroup.EdgePrimaryShipments)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *OrderItemShipGroupMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case orderitemshipgroup.EdgeOrderHeader:
		if id := m.order_header; id != nil {
			return []ent.Value{*id}
		}
	case orderitemshipgroup.EdgeOrderItemShipGroupAssocs:
		ids := make([]ent.Value, 0, len(m.order_item_ship_group_assocs))
		for id := range m.order_item_ship_group_assocs {
			ids = append(ids, id)
		}
		return ids
	case orderitemshipgroup.EdgePrimaryShipments:
		ids := make([]ent.Value, 0, len(m.primary_shipments))
		for id := range m.primary_shipments {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *OrderItemShipGroupMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedorder_item_ship_group_assocs != nil {
		edges = append(edges, orderitemshipgroup.EdgeOrderItemShipGroupAssocs)
	}
	if m.removedprimary_shipments != nil {
		edges = append(edges, orderitemshipgroup.EdgePrimaryShipments)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *OrderItemShipGroupMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case orderitemshipgroup.EdgeOrderItemShipGroupAssocs:
		ids := make([]ent.Value, 0, len(m.removedorder_item_ship_group_assocs))
		for id := range m.removedorder_item_ship_group_assocs {
			ids = append(ids, id)
		}
		return ids
	case orderitemshipgroup.EdgePrimaryShipments:
		ids := make([]ent.Value, 0, len(m.removedprimary_shipments))
		for id := range m.removedprimary_shipments {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *OrderItemShipGroupMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedorder_header {
		edges = append(edges, orderitemshipgroup.EdgeOrderHeader)
	}
	if m.clearedorder_item_ship_group_assocs {
		edges = append(edges, orderitemshipgroup.EdgeOrderItemShipGroupAssocs)
	}
	if m.clearedprimary_shipments {
		edges = append(edges, orderitemshipgroup.EdgePrimaryShipments)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *OrderItemShipGroupMutation) EdgeCleared(name string) bool {
	switch name {
	case orderitemshipgroup.EdgeOrderHeader:
		return m.clearedorder_header
	case orderitemshipgroup.EdgeOrderItemShipGroupAssocs:
		return m.clearedorder_item_ship_group_assocs
	case orderitemshipgroup.EdgePrimaryShipments:
		return m.clearedprimary_shipments
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *OrderItemShipGroupMutation) ClearEdge(name string) error {
	switch name {
	case orderitemshipgroup.EdgeOrderHeader:
		m.ClearOrderHeader()
		return nil
	}
	return fmt.Errorf("unknown OrderItemShipGroup unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *OrderItemShipGroupMutation) ResetEdge(name string) error {
	switch name {
	case orderitemshipgroup.EdgeOrderHeader:
		m.ResetOrderHeader()
		return nil
	case orderitemshipgroup.EdgeOrderItemShipGroupAssocs:
		m.ResetOrderItemShipGroupAssocs()
		return nil
	case orderitemshipgroup.EdgePrimaryShipments:
		m.ResetPrimaryShipments()
		return nil
	}
	return fmt.Errorf("unknown OrderItemShipGroup edge %s", name)
}

// OrderItemShipGroupAssocMutation represents an operation that mutates the OrderItemShipGroupAssoc nodes in the graph.
type OrderItemShipGroupAssocMutation struct {
	config
	op                           Op
	typ                          string
	id                           *int
	create_time                  *time.Time
	update_time                  *time.Time
	order_item_seq_id            *int
	addorder_item_seq_id         *int
	ship_group_seq_id            *int
	addship_group_seq_id         *int
	quantity                     *float64
	addquantity                  *float64
	cancel_quantity              *float64
	addcancel_quantity           *float64
	clearedFields                map[string]struct{}
	order_header                 *int
	clearedorder_header          bool
	order_item                   *int
	clearedorder_item            bool
	order_item_ship_group        *int
	clearedorder_item_ship_group bool
	done                         bool
	oldValue                     func(context.Context) (*OrderItemShipGroupAssoc, error)
	predicates                   []predicate.OrderItemShipGroupAssoc
}

var _ ent.Mutation = (*OrderItemShipGroupAssocMutation)(nil)

// orderitemshipgroupassocOption allows management of the mutation configuration using functional options.
type orderitemshipgroupassocOption func(*OrderItemShipGroupAssocMutation)

// newOrderItemShipGroupAssocMutation creates new mutation for the OrderItemShipGroupAssoc entity.
func newOrderItemShipGroupAssocMutation(c config, op Op, opts ...orderitemshipgroupassocOption) *OrderItemShipGroupAssocMutation {
	m := &OrderItemShipGroupAssocMutation{
		config:        c,
		op:            op,
		typ:           TypeOrderItemShipGroupAssoc,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withOrderItemShipGroupAssocID sets the ID field of the mutation.
func withOrderItemShipGroupAssocID(id int) orderitemshipgroupassocOption {
	return func(m *OrderItemShipGroupAssocMutation) {
		var (
			err   error
			once  sync.Once
			value *OrderItemShipGroupAssoc
		)
		m.oldValue = func(ctx context.Context) (*OrderItemShipGroupAssoc, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().OrderItemShipGroupAssoc.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withOrderItemShipGroupAssoc sets the old OrderItemShipGroupAssoc of the mutation.
func withOrderItemShipGroupAssoc(node *OrderItemShipGroupAssoc) orderitemshipgroupassocOption {
	return func(m *OrderItemShipGroupAssocMutation) {
		m.oldValue = func(context.Context) (*OrderItemShipGroupAssoc, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m OrderItemShipGroupAssocMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m OrderItemShipGroupAssocMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *OrderItemShipGroupAssocMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreateTime sets the "create_time" field.
func (m *OrderItemShipGroupAssocMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *OrderItemShipGroupAssocMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the OrderItemShipGroupAssoc entity.
// If the OrderItemShipGroupAssoc object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderItemShipGroupAssocMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *OrderItemShipGroupAssocMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *OrderItemShipGroupAssocMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *OrderItemShipGroupAssocMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the OrderItemShipGroupAssoc entity.
// If the OrderItemShipGroupAssoc object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderItemShipGroupAssocMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *OrderItemShipGroupAssocMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetOrderItemSeqID sets the "order_item_seq_id" field.
func (m *OrderItemShipGroupAssocMutation) SetOrderItemSeqID(i int) {
	m.order_item_seq_id = &i
	m.addorder_item_seq_id = nil
}

// OrderItemSeqID returns the value of the "order_item_seq_id" field in the mutation.
func (m *OrderItemShipGroupAssocMutation) OrderItemSeqID() (r int, exists bool) {
	v := m.order_item_seq_id
	if v == nil {
		return
	}
	return *v, true
}

// OldOrderItemSeqID returns the old "order_item_seq_id" field's value of the OrderItemShipGroupAssoc entity.
// If the OrderItemShipGroupAssoc object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderItemShipGroupAssocMutation) OldOrderItemSeqID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldOrderItemSeqID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldOrderItemSeqID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrderItemSeqID: %w", err)
	}
	return oldValue.OrderItemSeqID, nil
}

// AddOrderItemSeqID adds i to the "order_item_seq_id" field.
func (m *OrderItemShipGroupAssocMutation) AddOrderItemSeqID(i int) {
	if m.addorder_item_seq_id != nil {
		*m.addorder_item_seq_id += i
	} else {
		m.addorder_item_seq_id = &i
	}
}

// AddedOrderItemSeqID returns the value that was added to the "order_item_seq_id" field in this mutation.
func (m *OrderItemShipGroupAssocMutation) AddedOrderItemSeqID() (r int, exists bool) {
	v := m.addorder_item_seq_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetOrderItemSeqID resets all changes to the "order_item_seq_id" field.
func (m *OrderItemShipGroupAssocMutation) ResetOrderItemSeqID() {
	m.order_item_seq_id = nil
	m.addorder_item_seq_id = nil
}

// SetShipGroupSeqID sets the "ship_group_seq_id" field.
func (m *OrderItemShipGroupAssocMutation) SetShipGroupSeqID(i int) {
	m.ship_group_seq_id = &i
	m.addship_group_seq_id = nil
}

// ShipGroupSeqID returns the value of the "ship_group_seq_id" field in the mutation.
func (m *OrderItemShipGroupAssocMutation) ShipGroupSeqID() (r int, exists bool) {
	v := m.ship_group_seq_id
	if v == nil {
		return
	}
	return *v, true
}

// OldShipGroupSeqID returns the old "ship_group_seq_id" field's value of the OrderItemShipGroupAssoc entity.
// If the OrderItemShipGroupAssoc object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderItemShipGroupAssocMutation) OldShipGroupSeqID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldShipGroupSeqID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldShipGroupSeqID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShipGroupSeqID: %w", err)
	}
	return oldValue.ShipGroupSeqID, nil
}

// AddShipGroupSeqID adds i to the "ship_group_seq_id" field.
func (m *OrderItemShipGroupAssocMutation) AddShipGroupSeqID(i int) {
	if m.addship_group_seq_id != nil {
		*m.addship_group_seq_id += i
	} else {
		m.addship_group_seq_id = &i
	}
}

// AddedShipGroupSeqID returns the value that was added to the "ship_group_seq_id" field in this mutation.
func (m *OrderItemShipGroupAssocMutation) AddedShipGroupSeqID() (r int, exists bool) {
	v := m.addship_group_seq_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetShipGroupSeqID resets all changes to the "ship_group_seq_id" field.
func (m *OrderItemShipGroupAssocMutation) ResetShipGroupSeqID() {
	m.ship_group_seq_id = nil
	m.addship_group_seq_id = nil
}

// SetQuantity sets the "quantity" field.
func (m *OrderItemShipGroupAssocMutation) SetQuantity(f float64) {
	m.quantity = &f
	m.addquantity = nil
}

// Quantity returns the value of the "quantity" field in the mutation.
func (m *OrderItemShipGroupAssocMutation) Quantity() (r float64, exists bool) {
	v := m.quantity
	if v == nil {
		return
	}
	return *v, true
}

// OldQuantity returns the old "quantity" field's value of the OrderItemShipGroupAssoc entity.
// If the OrderItemShipGroupAssoc object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderItemShipGroupAssocMutation) OldQuantity(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldQuantity is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldQuantity requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldQuantity: %w", err)
	}
	return oldValue.Quantity, nil
}

// AddQuantity adds f to the "quantity" field.
func (m *OrderItemShipGroupAssocMutation) AddQuantity(f float64) {
	if m.addquantity != nil {
		*m.addquantity += f
	} else {
		m.addquantity = &f
	}
}

// AddedQuantity returns the value that was added to the "quantity" field in this mutation.
func (m *OrderItemShipGroupAssocMutation) AddedQuantity() (r float64, exists bool) {
	v := m.addquantity
	if v == nil {
		return
	}
	return *v, true
}

// ClearQuantity clears the value of the "quantity" field.
func (m *OrderItemShipGroupAssocMutation) ClearQuantity() {
	m.quantity = nil
	m.addquantity = nil
	m.clearedFields[orderitemshipgroupassoc.FieldQuantity] = struct{}{}
}

// QuantityCleared returns if the "quantity" field was cleared in this mutation.
func (m *OrderItemShipGroupAssocMutation) QuantityCleared() bool {
	_, ok := m.clearedFields[orderitemshipgroupassoc.FieldQuantity]
	return ok
}

// ResetQuantity resets all changes to the "quantity" field.
func (m *OrderItemShipGroupAssocMutation) ResetQuantity() {
	m.quantity = nil
	m.addquantity = nil
	delete(m.clearedFields, orderitemshipgroupassoc.FieldQuantity)
}

// SetCancelQuantity sets the "cancel_quantity" field.
func (m *OrderItemShipGroupAssocMutation) SetCancelQuantity(f float64) {
	m.cancel_quantity = &f
	m.addcancel_quantity = nil
}

// CancelQuantity returns the value of the "cancel_quantity" field in the mutation.
func (m *OrderItemShipGroupAssocMutation) CancelQuantity() (r float64, exists bool) {
	v := m.cancel_quantity
	if v == nil {
		return
	}
	return *v, true
}

// OldCancelQuantity returns the old "cancel_quantity" field's value of the OrderItemShipGroupAssoc entity.
// If the OrderItemShipGroupAssoc object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderItemShipGroupAssocMutation) OldCancelQuantity(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCancelQuantity is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCancelQuantity requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCancelQuantity: %w", err)
	}
	return oldValue.CancelQuantity, nil
}

// AddCancelQuantity adds f to the "cancel_quantity" field.
func (m *OrderItemShipGroupAssocMutation) AddCancelQuantity(f float64) {
	if m.addcancel_quantity != nil {
		*m.addcancel_quantity += f
	} else {
		m.addcancel_quantity = &f
	}
}

// AddedCancelQuantity returns the value that was added to the "cancel_quantity" field in this mutation.
func (m *OrderItemShipGroupAssocMutation) AddedCancelQuantity() (r float64, exists bool) {
	v := m.addcancel_quantity
	if v == nil {
		return
	}
	return *v, true
}

// ClearCancelQuantity clears the value of the "cancel_quantity" field.
func (m *OrderItemShipGroupAssocMutation) ClearCancelQuantity() {
	m.cancel_quantity = nil
	m.addcancel_quantity = nil
	m.clearedFields[orderitemshipgroupassoc.FieldCancelQuantity] = struct{}{}
}

// CancelQuantityCleared returns if the "cancel_quantity" field was cleared in this mutation.
func (m *OrderItemShipGroupAssocMutation) CancelQuantityCleared() bool {
	_, ok := m.clearedFields[orderitemshipgroupassoc.FieldCancelQuantity]
	return ok
}

// ResetCancelQuantity resets all changes to the "cancel_quantity" field.
func (m *OrderItemShipGroupAssocMutation) ResetCancelQuantity() {
	m.cancel_quantity = nil
	m.addcancel_quantity = nil
	delete(m.clearedFields, orderitemshipgroupassoc.FieldCancelQuantity)
}

// SetOrderHeaderID sets the "order_header" edge to the OrderHeader entity by id.
func (m *OrderItemShipGroupAssocMutation) SetOrderHeaderID(id int) {
	m.order_header = &id
}

// ClearOrderHeader clears the "order_header" edge to the OrderHeader entity.
func (m *OrderItemShipGroupAssocMutation) ClearOrderHeader() {
	m.clearedorder_header = true
}

// OrderHeaderCleared reports if the "order_header" edge to the OrderHeader entity was cleared.
func (m *OrderItemShipGroupAssocMutation) OrderHeaderCleared() bool {
	return m.clearedorder_header
}

// OrderHeaderID returns the "order_header" edge ID in the mutation.
func (m *OrderItemShipGroupAssocMutation) OrderHeaderID() (id int, exists bool) {
	if m.order_header != nil {
		return *m.order_header, true
	}
	return
}

// OrderHeaderIDs returns the "order_header" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OrderHeaderID instead. It exists only for internal usage by the builders.
func (m *OrderItemShipGroupAssocMutation) OrderHeaderIDs() (ids []int) {
	if id := m.order_header; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOrderHeader resets all changes to the "order_header" edge.
func (m *OrderItemShipGroupAssocMutation) ResetOrderHeader() {
	m.order_header = nil
	m.clearedorder_header = false
}

// SetOrderItemID sets the "order_item" edge to the OrderItem entity by id.
func (m *OrderItemShipGroupAssocMutation) SetOrderItemID(id int) {
	m.order_item = &id
}

// ClearOrderItem clears the "order_item" edge to the OrderItem entity.
func (m *OrderItemShipGroupAssocMutation) ClearOrderItem() {
	m.clearedorder_item = true
}

// OrderItemCleared reports if the "order_item" edge to the OrderItem entity was cleared.
func (m *OrderItemShipGroupAssocMutation) OrderItemCleared() bool {
	return m.clearedorder_item
}

// OrderItemID returns the "order_item" edge ID in the mutation.
func (m *OrderItemShipGroupAssocMutation) OrderItemID() (id int, exists bool) {
	if m.order_item != nil {
		return *m.order_item, true
	}
	return
}

// OrderItemIDs returns the "order_item" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OrderItemID instead. It exists only for internal usage by the builders.
func (m *OrderItemShipGroupAssocMutation) OrderItemIDs() (ids []int) {
	if id := m.order_item; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOrderItem resets all changes to the "order_item" edge.
func (m *OrderItemShipGroupAssocMutation) ResetOrderItem() {
	m.order_item = nil
	m.clearedorder_item = false
}

// SetOrderItemShipGroupID sets the "order_item_ship_group" edge to the OrderItemShipGroup entity by id.
func (m *OrderItemShipGroupAssocMutation) SetOrderItemShipGroupID(id int) {
	m.order_item_ship_group = &id
}

// ClearOrderItemShipGroup clears the "order_item_ship_group" edge to the OrderItemShipGroup entity.
func (m *OrderItemShipGroupAssocMutation) ClearOrderItemShipGroup() {
	m.clearedorder_item_ship_group = true
}

// OrderItemShipGroupCleared reports if the "order_item_ship_group" edge to the OrderItemShipGroup entity was cleared.
func (m *OrderItemShipGroupAssocMutation) OrderItemShipGroupCleared() bool {
	return m.clearedorder_item_ship_group
}

// OrderItemShipGroupID returns the "order_item_ship_group" edge ID in the mutation.
func (m *OrderItemShipGroupAssocMutation) OrderItemShipGroupID() (id int, exists bool) {
	if m.order_item_ship_group != nil {
		return *m.order_item_ship_group, true
	}
	return
}

// OrderItemShipGroupIDs returns the "order_item_ship_group" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OrderItemShipGroupID instead. It exists only for internal usage by the builders.
func (m *OrderItemShipGroupAssocMutation) OrderItemShipGroupIDs() (ids []int) {
	if id := m.order_item_ship_group; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOrderItemShipGroup resets all changes to the "order_item_ship_group" edge.
func (m *OrderItemShipGroupAssocMutation) ResetOrderItemShipGroup() {
	m.order_item_ship_group = nil
	m.clearedorder_item_ship_group = false
}

// Op returns the operation name.
func (m *OrderItemShipGroupAssocMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (OrderItemShipGroupAssoc).
func (m *OrderItemShipGroupAssocMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *OrderItemShipGroupAssocMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.create_time != nil {
		fields = append(fields, orderitemshipgroupassoc.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, orderitemshipgroupassoc.FieldUpdateTime)
	}
	if m.order_item_seq_id != nil {
		fields = append(fields, orderitemshipgroupassoc.FieldOrderItemSeqID)
	}
	if m.ship_group_seq_id != nil {
		fields = append(fields, orderitemshipgroupassoc.FieldShipGroupSeqID)
	}
	if m.quantity != nil {
		fields = append(fields, orderitemshipgroupassoc.FieldQuantity)
	}
	if m.cancel_quantity != nil {
		fields = append(fields, orderitemshipgroupassoc.FieldCancelQuantity)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *OrderItemShipGroupAssocMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case orderitemshipgroupassoc.FieldCreateTime:
		return m.CreateTime()
	case orderitemshipgroupassoc.FieldUpdateTime:
		return m.UpdateTime()
	case orderitemshipgroupassoc.FieldOrderItemSeqID:
		return m.OrderItemSeqID()
	case orderitemshipgroupassoc.FieldShipGroupSeqID:
		return m.ShipGroupSeqID()
	case orderitemshipgroupassoc.FieldQuantity:
		return m.Quantity()
	case orderitemshipgroupassoc.FieldCancelQuantity:
		return m.CancelQuantity()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *OrderItemShipGroupAssocMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case orderitemshipgroupassoc.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case orderitemshipgroupassoc.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case orderitemshipgroupassoc.FieldOrderItemSeqID:
		return m.OldOrderItemSeqID(ctx)
	case orderitemshipgroupassoc.FieldShipGroupSeqID:
		return m.OldShipGroupSeqID(ctx)
	case orderitemshipgroupassoc.FieldQuantity:
		return m.OldQuantity(ctx)
	case orderitemshipgroupassoc.FieldCancelQuantity:
		return m.OldCancelQuantity(ctx)
	}
	return nil, fmt.Errorf("unknown OrderItemShipGroupAssoc field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrderItemShipGroupAssocMutation) SetField(name string, value ent.Value) error {
	switch name {
	case orderitemshipgroupassoc.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case orderitemshipgroupassoc.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case orderitemshipgroupassoc.FieldOrderItemSeqID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrderItemSeqID(v)
		return nil
	case orderitemshipgroupassoc.FieldShipGroupSeqID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShipGroupSeqID(v)
		return nil
	case orderitemshipgroupassoc.FieldQuantity:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetQuantity(v)
		return nil
	case orderitemshipgroupassoc.FieldCancelQuantity:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCancelQuantity(v)
		return nil
	}
	return fmt.Errorf("unknown OrderItemShipGroupAssoc field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *OrderItemShipGroupAssocMutation) AddedFields() []string {
	var fields []string
	if m.addorder_item_seq_id != nil {
		fields = append(fields, orderitemshipgroupassoc.FieldOrderItemSeqID)
	}
	if m.addship_group_seq_id != nil {
		fields = append(fields, orderitemshipgroupassoc.FieldShipGroupSeqID)
	}
	if m.addquantity != nil {
		fields = append(fields, orderitemshipgroupassoc.FieldQuantity)
	}
	if m.addcancel_quantity != nil {
		fields = append(fields, orderitemshipgroupassoc.FieldCancelQuantity)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *OrderItemShipGroupAssocMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case orderitemshipgroupassoc.FieldOrderItemSeqID:
		return m.AddedOrderItemSeqID()
	case orderitemshipgroupassoc.FieldShipGroupSeqID:
		return m.AddedShipGroupSeqID()
	case orderitemshipgroupassoc.FieldQuantity:
		return m.AddedQuantity()
	case orderitemshipgroupassoc.FieldCancelQuantity:
		return m.AddedCancelQuantity()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrderItemShipGroupAssocMutation) AddField(name string, value ent.Value) error {
	switch name {
	case orderitemshipgroupassoc.FieldOrderItemSeqID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOrderItemSeqID(v)
		return nil
	case orderitemshipgroupassoc.FieldShipGroupSeqID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddShipGroupSeqID(v)
		return nil
	case orderitemshipgroupassoc.FieldQuantity:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddQuantity(v)
		return nil
	case orderitemshipgroupassoc.FieldCancelQuantity:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCancelQuantity(v)
		return nil
	}
	return fmt.Errorf("unknown OrderItemShipGroupAssoc numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *OrderItemShipGroupAssocMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(orderitemshipgroupassoc.FieldQuantity) {
		fields = append(fields, orderitemshipgroupassoc.FieldQuantity)
	}
	if m.FieldCleared(orderitemshipgroupassoc.FieldCancelQuantity) {
		fields = append(fields, orderitemshipgroupassoc.FieldCancelQuantity)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *OrderItemShipGroupAssocMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *OrderItemShipGroupAssocMutation) ClearField(name string) error {
	switch name {
	case orderitemshipgroupassoc.FieldQuantity:
		m.ClearQuantity()
		return nil
	case orderitemshipgroupassoc.FieldCancelQuantity:
		m.ClearCancelQuantity()
		return nil
	}
	return fmt.Errorf("unknown OrderItemShipGroupAssoc nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *OrderItemShipGroupAssocMutation) ResetField(name string) error {
	switch name {
	case orderitemshipgroupassoc.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case orderitemshipgroupassoc.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case orderitemshipgroupassoc.FieldOrderItemSeqID:
		m.ResetOrderItemSeqID()
		return nil
	case orderitemshipgroupassoc.FieldShipGroupSeqID:
		m.ResetShipGroupSeqID()
		return nil
	case orderitemshipgroupassoc.FieldQuantity:
		m.ResetQuantity()
		return nil
	case orderitemshipgroupassoc.FieldCancelQuantity:
		m.ResetCancelQuantity()
		return nil
	}
	return fmt.Errorf("unknown OrderItemShipGroupAssoc field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *OrderItemShipGroupAssocMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.order_header != nil {
		edges = append(edges, orderitemshipgroupassoc.EdgeOrderHeader)
	}
	if m.order_item != nil {
		edges = append(edges, orderitemshipgroupassoc.EdgeOrderItem)
	}
	if m.order_item_ship_group != nil {
		edges = append(edges, orderitemshipgroupassoc.EdgeOrderItemShipGroup)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *OrderItemShipGroupAssocMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case orderitemshipgroupassoc.EdgeOrderHeader:
		if id := m.order_header; id != nil {
			return []ent.Value{*id}
		}
	case orderitemshipgroupassoc.EdgeOrderItem:
		if id := m.order_item; id != nil {
			return []ent.Value{*id}
		}
	case orderitemshipgroupassoc.EdgeOrderItemShipGroup:
		if id := m.order_item_ship_group; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *OrderItemShipGroupAssocMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *OrderItemShipGroupAssocMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *OrderItemShipGroupAssocMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedorder_header {
		edges = append(edges, orderitemshipgroupassoc.EdgeOrderHeader)
	}
	if m.clearedorder_item {
		edges = append(edges, orderitemshipgroupassoc.EdgeOrderItem)
	}
	if m.clearedorder_item_ship_group {
		edges = append(edges, orderitemshipgroupassoc.EdgeOrderItemShipGroup)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *OrderItemShipGroupAssocMutation) EdgeCleared(name string) bool {
	switch name {
	case orderitemshipgroupassoc.EdgeOrderHeader:
		return m.clearedorder_header
	case orderitemshipgroupassoc.EdgeOrderItem:
		return m.clearedorder_item
	case orderitemshipgroupassoc.EdgeOrderItemShipGroup:
		return m.clearedorder_item_ship_group
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *OrderItemShipGroupAssocMutation) ClearEdge(name string) error {
	switch name {
	case orderitemshipgroupassoc.EdgeOrderHeader:
		m.ClearOrderHeader()
		return nil
	case orderitemshipgroupassoc.EdgeOrderItem:
		m.ClearOrderItem()
		return nil
	case orderitemshipgroupassoc.EdgeOrderItemShipGroup:
		m.ClearOrderItemShipGroup()
		return nil
	}
	return fmt.Errorf("unknown OrderItemShipGroupAssoc unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *OrderItemShipGroupAssocMutation) ResetEdge(name string) error {
	switch name {
	case orderitemshipgroupassoc.EdgeOrderHeader:
		m.ResetOrderHeader()
		return nil
	case orderitemshipgroupassoc.EdgeOrderItem:
		m.ResetOrderItem()
		return nil
	case orderitemshipgroupassoc.EdgeOrderItemShipGroup:
		m.ResetOrderItemShipGroup()
		return nil
	}
	return fmt.Errorf("unknown OrderItemShipGroupAssoc edge %s", name)
}

// OrderRoleMutation represents an operation that mutates the OrderRole nodes in the graph.
type OrderRoleMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	create_time         *time.Time
	update_time         *time.Time
	party_id            *int
	addparty_id         *int
	role_type_id        *int
	addrole_type_id     *int
	clearedFields       map[string]struct{}
	order_header        *int
	clearedorder_header bool
	order_items         map[int]struct{}
	removedorder_items  map[int]struct{}
	clearedorder_items  bool
	done                bool
	oldValue            func(context.Context) (*OrderRole, error)
	predicates          []predicate.OrderRole
}

var _ ent.Mutation = (*OrderRoleMutation)(nil)

// orderroleOption allows management of the mutation configuration using functional options.
type orderroleOption func(*OrderRoleMutation)

// newOrderRoleMutation creates new mutation for the OrderRole entity.
func newOrderRoleMutation(c config, op Op, opts ...orderroleOption) *OrderRoleMutation {
	m := &OrderRoleMutation{
		config:        c,
		op:            op,
		typ:           TypeOrderRole,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withOrderRoleID sets the ID field of the mutation.
func withOrderRoleID(id int) orderroleOption {
	return func(m *OrderRoleMutation) {
		var (
			err   error
			once  sync.Once
			value *OrderRole
		)
		m.oldValue = func(ctx context.Context) (*OrderRole, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().OrderRole.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withOrderRole sets the old OrderRole of the mutation.
func withOrderRole(node *OrderRole) orderroleOption {
	return func(m *OrderRoleMutation) {
		m.oldValue = func(context.Context) (*OrderRole, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m OrderRoleMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m OrderRoleMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *OrderRoleMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreateTime sets the "create_time" field.
func (m *OrderRoleMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *OrderRoleMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the OrderRole entity.
// If the OrderRole object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderRoleMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *OrderRoleMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *OrderRoleMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *OrderRoleMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the OrderRole entity.
// If the OrderRole object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderRoleMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *OrderRoleMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetPartyID sets the "party_id" field.
func (m *OrderRoleMutation) SetPartyID(i int) {
	m.party_id = &i
	m.addparty_id = nil
}

// PartyID returns the value of the "party_id" field in the mutation.
func (m *OrderRoleMutation) PartyID() (r int, exists bool) {
	v := m.party_id
	if v == nil {
		return
	}
	return *v, true
}

// OldPartyID returns the old "party_id" field's value of the OrderRole entity.
// If the OrderRole object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderRoleMutation) OldPartyID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPartyID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPartyID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPartyID: %w", err)
	}
	return oldValue.PartyID, nil
}

// AddPartyID adds i to the "party_id" field.
func (m *OrderRoleMutation) AddPartyID(i int) {
	if m.addparty_id != nil {
		*m.addparty_id += i
	} else {
		m.addparty_id = &i
	}
}

// AddedPartyID returns the value that was added to the "party_id" field in this mutation.
func (m *OrderRoleMutation) AddedPartyID() (r int, exists bool) {
	v := m.addparty_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetPartyID resets all changes to the "party_id" field.
func (m *OrderRoleMutation) ResetPartyID() {
	m.party_id = nil
	m.addparty_id = nil
}

// SetRoleTypeID sets the "role_type_id" field.
func (m *OrderRoleMutation) SetRoleTypeID(i int) {
	m.role_type_id = &i
	m.addrole_type_id = nil
}

// RoleTypeID returns the value of the "role_type_id" field in the mutation.
func (m *OrderRoleMutation) RoleTypeID() (r int, exists bool) {
	v := m.role_type_id
	if v == nil {
		return
	}
	return *v, true
}

// OldRoleTypeID returns the old "role_type_id" field's value of the OrderRole entity.
// If the OrderRole object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderRoleMutation) OldRoleTypeID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRoleTypeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRoleTypeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRoleTypeID: %w", err)
	}
	return oldValue.RoleTypeID, nil
}

// AddRoleTypeID adds i to the "role_type_id" field.
func (m *OrderRoleMutation) AddRoleTypeID(i int) {
	if m.addrole_type_id != nil {
		*m.addrole_type_id += i
	} else {
		m.addrole_type_id = &i
	}
}

// AddedRoleTypeID returns the value that was added to the "role_type_id" field in this mutation.
func (m *OrderRoleMutation) AddedRoleTypeID() (r int, exists bool) {
	v := m.addrole_type_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetRoleTypeID resets all changes to the "role_type_id" field.
func (m *OrderRoleMutation) ResetRoleTypeID() {
	m.role_type_id = nil
	m.addrole_type_id = nil
}

// SetOrderHeaderID sets the "order_header" edge to the OrderHeader entity by id.
func (m *OrderRoleMutation) SetOrderHeaderID(id int) {
	m.order_header = &id
}

// ClearOrderHeader clears the "order_header" edge to the OrderHeader entity.
func (m *OrderRoleMutation) ClearOrderHeader() {
	m.clearedorder_header = true
}

// OrderHeaderCleared reports if the "order_header" edge to the OrderHeader entity was cleared.
func (m *OrderRoleMutation) OrderHeaderCleared() bool {
	return m.clearedorder_header
}

// OrderHeaderID returns the "order_header" edge ID in the mutation.
func (m *OrderRoleMutation) OrderHeaderID() (id int, exists bool) {
	if m.order_header != nil {
		return *m.order_header, true
	}
	return
}

// OrderHeaderIDs returns the "order_header" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OrderHeaderID instead. It exists only for internal usage by the builders.
func (m *OrderRoleMutation) OrderHeaderIDs() (ids []int) {
	if id := m.order_header; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOrderHeader resets all changes to the "order_header" edge.
func (m *OrderRoleMutation) ResetOrderHeader() {
	m.order_header = nil
	m.clearedorder_header = false
}

// AddOrderItemIDs adds the "order_items" edge to the OrderItem entity by ids.
func (m *OrderRoleMutation) AddOrderItemIDs(ids ...int) {
	if m.order_items == nil {
		m.order_items = make(map[int]struct{})
	}
	for i := range ids {
		m.order_items[ids[i]] = struct{}{}
	}
}

// ClearOrderItems clears the "order_items" edge to the OrderItem entity.
func (m *OrderRoleMutation) ClearOrderItems() {
	m.clearedorder_items = true
}

// OrderItemsCleared reports if the "order_items" edge to the OrderItem entity was cleared.
func (m *OrderRoleMutation) OrderItemsCleared() bool {
	return m.clearedorder_items
}

// RemoveOrderItemIDs removes the "order_items" edge to the OrderItem entity by IDs.
func (m *OrderRoleMutation) RemoveOrderItemIDs(ids ...int) {
	if m.removedorder_items == nil {
		m.removedorder_items = make(map[int]struct{})
	}
	for i := range ids {
		m.removedorder_items[ids[i]] = struct{}{}
	}
}

// RemovedOrderItems returns the removed IDs of the "order_items" edge to the OrderItem entity.
func (m *OrderRoleMutation) RemovedOrderItemsIDs() (ids []int) {
	for id := range m.removedorder_items {
		ids = append(ids, id)
	}
	return
}

// OrderItemsIDs returns the "order_items" edge IDs in the mutation.
func (m *OrderRoleMutation) OrderItemsIDs() (ids []int) {
	for id := range m.order_items {
		ids = append(ids, id)
	}
	return
}

// ResetOrderItems resets all changes to the "order_items" edge.
func (m *OrderRoleMutation) ResetOrderItems() {
	m.order_items = nil
	m.clearedorder_items = false
	m.removedorder_items = nil
}

// Op returns the operation name.
func (m *OrderRoleMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (OrderRole).
func (m *OrderRoleMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *OrderRoleMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.create_time != nil {
		fields = append(fields, orderrole.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, orderrole.FieldUpdateTime)
	}
	if m.party_id != nil {
		fields = append(fields, orderrole.FieldPartyID)
	}
	if m.role_type_id != nil {
		fields = append(fields, orderrole.FieldRoleTypeID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *OrderRoleMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case orderrole.FieldCreateTime:
		return m.CreateTime()
	case orderrole.FieldUpdateTime:
		return m.UpdateTime()
	case orderrole.FieldPartyID:
		return m.PartyID()
	case orderrole.FieldRoleTypeID:
		return m.RoleTypeID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *OrderRoleMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case orderrole.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case orderrole.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case orderrole.FieldPartyID:
		return m.OldPartyID(ctx)
	case orderrole.FieldRoleTypeID:
		return m.OldRoleTypeID(ctx)
	}
	return nil, fmt.Errorf("unknown OrderRole field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrderRoleMutation) SetField(name string, value ent.Value) error {
	switch name {
	case orderrole.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case orderrole.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case orderrole.FieldPartyID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPartyID(v)
		return nil
	case orderrole.FieldRoleTypeID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRoleTypeID(v)
		return nil
	}
	return fmt.Errorf("unknown OrderRole field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *OrderRoleMutation) AddedFields() []string {
	var fields []string
	if m.addparty_id != nil {
		fields = append(fields, orderrole.FieldPartyID)
	}
	if m.addrole_type_id != nil {
		fields = append(fields, orderrole.FieldRoleTypeID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *OrderRoleMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case orderrole.FieldPartyID:
		return m.AddedPartyID()
	case orderrole.FieldRoleTypeID:
		return m.AddedRoleTypeID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrderRoleMutation) AddField(name string, value ent.Value) error {
	switch name {
	case orderrole.FieldPartyID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPartyID(v)
		return nil
	case orderrole.FieldRoleTypeID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRoleTypeID(v)
		return nil
	}
	return fmt.Errorf("unknown OrderRole numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *OrderRoleMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *OrderRoleMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *OrderRoleMutation) ClearField(name string) error {
	return fmt.Errorf("unknown OrderRole nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *OrderRoleMutation) ResetField(name string) error {
	switch name {
	case orderrole.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case orderrole.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case orderrole.FieldPartyID:
		m.ResetPartyID()
		return nil
	case orderrole.FieldRoleTypeID:
		m.ResetRoleTypeID()
		return nil
	}
	return fmt.Errorf("unknown OrderRole field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *OrderRoleMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.order_header != nil {
		edges = append(edges, orderrole.EdgeOrderHeader)
	}
	if m.order_items != nil {
		edges = append(edges, orderrole.EdgeOrderItems)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *OrderRoleMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case orderrole.EdgeOrderHeader:
		if id := m.order_header; id != nil {
			return []ent.Value{*id}
		}
	case orderrole.EdgeOrderItems:
		ids := make([]ent.Value, 0, len(m.order_items))
		for id := range m.order_items {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *OrderRoleMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedorder_items != nil {
		edges = append(edges, orderrole.EdgeOrderItems)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *OrderRoleMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case orderrole.EdgeOrderItems:
		ids := make([]ent.Value, 0, len(m.removedorder_items))
		for id := range m.removedorder_items {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *OrderRoleMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedorder_header {
		edges = append(edges, orderrole.EdgeOrderHeader)
	}
	if m.clearedorder_items {
		edges = append(edges, orderrole.EdgeOrderItems)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *OrderRoleMutation) EdgeCleared(name string) bool {
	switch name {
	case orderrole.EdgeOrderHeader:
		return m.clearedorder_header
	case orderrole.EdgeOrderItems:
		return m.clearedorder_items
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *OrderRoleMutation) ClearEdge(name string) error {
	switch name {
	case orderrole.EdgeOrderHeader:
		m.ClearOrderHeader()
		return nil
	}
	return fmt.Errorf("unknown OrderRole unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *OrderRoleMutation) ResetEdge(name string) error {
	switch name {
	case orderrole.EdgeOrderHeader:
		m.ResetOrderHeader()
		return nil
	case orderrole.EdgeOrderItems:
		m.ResetOrderItems()
		return nil
	}
	return fmt.Errorf("unknown OrderRole edge %s", name)
}

// OrderStatusMutation represents an operation that mutates the OrderStatus nodes in the graph.
type OrderStatusMutation struct {
	config
	op                             Op
	typ                            string
	id                             *int
	create_time                    *time.Time
	update_time                    *time.Time
	status_id                      *int
	addstatus_id                   *int
	order_item_seq_id              *int
	addorder_item_seq_id           *int
	order_payment_preference_id    *int
	addorder_payment_preference_id *int
	status_datetime                *time.Time
	status_user_login              *string
	change_reason                  *string
	clearedFields                  map[string]struct{}
	order_header                   *int
	clearedorder_header            bool
	order_item                     *int
	clearedorder_item              bool
	done                           bool
	oldValue                       func(context.Context) (*OrderStatus, error)
	predicates                     []predicate.OrderStatus
}

var _ ent.Mutation = (*OrderStatusMutation)(nil)

// orderstatusOption allows management of the mutation configuration using functional options.
type orderstatusOption func(*OrderStatusMutation)

// newOrderStatusMutation creates new mutation for the OrderStatus entity.
func newOrderStatusMutation(c config, op Op, opts ...orderstatusOption) *OrderStatusMutation {
	m := &OrderStatusMutation{
		config:        c,
		op:            op,
		typ:           TypeOrderStatus,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withOrderStatusID sets the ID field of the mutation.
func withOrderStatusID(id int) orderstatusOption {
	return func(m *OrderStatusMutation) {
		var (
			err   error
			once  sync.Once
			value *OrderStatus
		)
		m.oldValue = func(ctx context.Context) (*OrderStatus, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().OrderStatus.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withOrderStatus sets the old OrderStatus of the mutation.
func withOrderStatus(node *OrderStatus) orderstatusOption {
	return func(m *OrderStatusMutation) {
		m.oldValue = func(context.Context) (*OrderStatus, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m OrderStatusMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m OrderStatusMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *OrderStatusMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreateTime sets the "create_time" field.
func (m *OrderStatusMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *OrderStatusMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the OrderStatus entity.
// If the OrderStatus object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderStatusMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *OrderStatusMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *OrderStatusMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *OrderStatusMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the OrderStatus entity.
// If the OrderStatus object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderStatusMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *OrderStatusMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetStatusID sets the "status_id" field.
func (m *OrderStatusMutation) SetStatusID(i int) {
	m.status_id = &i
	m.addstatus_id = nil
}

// StatusID returns the value of the "status_id" field in the mutation.
func (m *OrderStatusMutation) StatusID() (r int, exists bool) {
	v := m.status_id
	if v == nil {
		return
	}
	return *v, true
}

// OldStatusID returns the old "status_id" field's value of the OrderStatus entity.
// If the OrderStatus object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderStatusMutation) OldStatusID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldStatusID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldStatusID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatusID: %w", err)
	}
	return oldValue.StatusID, nil
}

// AddStatusID adds i to the "status_id" field.
func (m *OrderStatusMutation) AddStatusID(i int) {
	if m.addstatus_id != nil {
		*m.addstatus_id += i
	} else {
		m.addstatus_id = &i
	}
}

// AddedStatusID returns the value that was added to the "status_id" field in this mutation.
func (m *OrderStatusMutation) AddedStatusID() (r int, exists bool) {
	v := m.addstatus_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearStatusID clears the value of the "status_id" field.
func (m *OrderStatusMutation) ClearStatusID() {
	m.status_id = nil
	m.addstatus_id = nil
	m.clearedFields[orderstatus.FieldStatusID] = struct{}{}
}

// StatusIDCleared returns if the "status_id" field was cleared in this mutation.
func (m *OrderStatusMutation) StatusIDCleared() bool {
	_, ok := m.clearedFields[orderstatus.FieldStatusID]
	return ok
}

// ResetStatusID resets all changes to the "status_id" field.
func (m *OrderStatusMutation) ResetStatusID() {
	m.status_id = nil
	m.addstatus_id = nil
	delete(m.clearedFields, orderstatus.FieldStatusID)
}

// SetOrderItemSeqID sets the "order_item_seq_id" field.
func (m *OrderStatusMutation) SetOrderItemSeqID(i int) {
	m.order_item_seq_id = &i
	m.addorder_item_seq_id = nil
}

// OrderItemSeqID returns the value of the "order_item_seq_id" field in the mutation.
func (m *OrderStatusMutation) OrderItemSeqID() (r int, exists bool) {
	v := m.order_item_seq_id
	if v == nil {
		return
	}
	return *v, true
}

// OldOrderItemSeqID returns the old "order_item_seq_id" field's value of the OrderStatus entity.
// If the OrderStatus object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderStatusMutation) OldOrderItemSeqID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldOrderItemSeqID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldOrderItemSeqID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrderItemSeqID: %w", err)
	}
	return oldValue.OrderItemSeqID, nil
}

// AddOrderItemSeqID adds i to the "order_item_seq_id" field.
func (m *OrderStatusMutation) AddOrderItemSeqID(i int) {
	if m.addorder_item_seq_id != nil {
		*m.addorder_item_seq_id += i
	} else {
		m.addorder_item_seq_id = &i
	}
}

// AddedOrderItemSeqID returns the value that was added to the "order_item_seq_id" field in this mutation.
func (m *OrderStatusMutation) AddedOrderItemSeqID() (r int, exists bool) {
	v := m.addorder_item_seq_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearOrderItemSeqID clears the value of the "order_item_seq_id" field.
func (m *OrderStatusMutation) ClearOrderItemSeqID() {
	m.order_item_seq_id = nil
	m.addorder_item_seq_id = nil
	m.clearedFields[orderstatus.FieldOrderItemSeqID] = struct{}{}
}

// OrderItemSeqIDCleared returns if the "order_item_seq_id" field was cleared in this mutation.
func (m *OrderStatusMutation) OrderItemSeqIDCleared() bool {
	_, ok := m.clearedFields[orderstatus.FieldOrderItemSeqID]
	return ok
}

// ResetOrderItemSeqID resets all changes to the "order_item_seq_id" field.
func (m *OrderStatusMutation) ResetOrderItemSeqID() {
	m.order_item_seq_id = nil
	m.addorder_item_seq_id = nil
	delete(m.clearedFields, orderstatus.FieldOrderItemSeqID)
}

// SetOrderPaymentPreferenceID sets the "order_payment_preference_id" field.
func (m *OrderStatusMutation) SetOrderPaymentPreferenceID(i int) {
	m.order_payment_preference_id = &i
	m.addorder_payment_preference_id = nil
}

// OrderPaymentPreferenceID returns the value of the "order_payment_preference_id" field in the mutation.
func (m *OrderStatusMutation) OrderPaymentPreferenceID() (r int, exists bool) {
	v := m.order_payment_preference_id
	if v == nil {
		return
	}
	return *v, true
}

// OldOrderPaymentPreferenceID returns the old "order_payment_preference_id" field's value of the OrderStatus entity.
// If the OrderStatus object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderStatusMutation) OldOrderPaymentPreferenceID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldOrderPaymentPreferenceID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldOrderPaymentPreferenceID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrderPaymentPreferenceID: %w", err)
	}
	return oldValue.OrderPaymentPreferenceID, nil
}

// AddOrderPaymentPreferenceID adds i to the "order_payment_preference_id" field.
func (m *OrderStatusMutation) AddOrderPaymentPreferenceID(i int) {
	if m.addorder_payment_preference_id != nil {
		*m.addorder_payment_preference_id += i
	} else {
		m.addorder_payment_preference_id = &i
	}
}

// AddedOrderPaymentPreferenceID returns the value that was added to the "order_payment_preference_id" field in this mutation.
func (m *OrderStatusMutation) AddedOrderPaymentPreferenceID() (r int, exists bool) {
	v := m.addorder_payment_preference_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearOrderPaymentPreferenceID clears the value of the "order_payment_preference_id" field.
func (m *OrderStatusMutation) ClearOrderPaymentPreferenceID() {
	m.order_payment_preference_id = nil
	m.addorder_payment_preference_id = nil
	m.clearedFields[orderstatus.FieldOrderPaymentPreferenceID] = struct{}{}
}

// OrderPaymentPreferenceIDCleared returns if the "order_payment_preference_id" field was cleared in this mutation.
func (m *OrderStatusMutation) OrderPaymentPreferenceIDCleared() bool {
	_, ok := m.clearedFields[orderstatus.FieldOrderPaymentPreferenceID]
	return ok
}

// ResetOrderPaymentPreferenceID resets all changes to the "order_payment_preference_id" field.
func (m *OrderStatusMutation) ResetOrderPaymentPreferenceID() {
	m.order_payment_preference_id = nil
	m.addorder_payment_preference_id = nil
	delete(m.clearedFields, orderstatus.FieldOrderPaymentPreferenceID)
}

// SetStatusDatetime sets the "status_datetime" field.
func (m *OrderStatusMutation) SetStatusDatetime(t time.Time) {
	m.status_datetime = &t
}

// StatusDatetime returns the value of the "status_datetime" field in the mutation.
func (m *OrderStatusMutation) StatusDatetime() (r time.Time, exists bool) {
	v := m.status_datetime
	if v == nil {
		return
	}
	return *v, true
}

// OldStatusDatetime returns the old "status_datetime" field's value of the OrderStatus entity.
// If the OrderStatus object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderStatusMutation) OldStatusDatetime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldStatusDatetime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldStatusDatetime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatusDatetime: %w", err)
	}
	return oldValue.StatusDatetime, nil
}

// ClearStatusDatetime clears the value of the "status_datetime" field.
func (m *OrderStatusMutation) ClearStatusDatetime() {
	m.status_datetime = nil
	m.clearedFields[orderstatus.FieldStatusDatetime] = struct{}{}
}

// StatusDatetimeCleared returns if the "status_datetime" field was cleared in this mutation.
func (m *OrderStatusMutation) StatusDatetimeCleared() bool {
	_, ok := m.clearedFields[orderstatus.FieldStatusDatetime]
	return ok
}

// ResetStatusDatetime resets all changes to the "status_datetime" field.
func (m *OrderStatusMutation) ResetStatusDatetime() {
	m.status_datetime = nil
	delete(m.clearedFields, orderstatus.FieldStatusDatetime)
}

// SetStatusUserLogin sets the "status_user_login" field.
func (m *OrderStatusMutation) SetStatusUserLogin(s string) {
	m.status_user_login = &s
}

// StatusUserLogin returns the value of the "status_user_login" field in the mutation.
func (m *OrderStatusMutation) StatusUserLogin() (r string, exists bool) {
	v := m.status_user_login
	if v == nil {
		return
	}
	return *v, true
}

// OldStatusUserLogin returns the old "status_user_login" field's value of the OrderStatus entity.
// If the OrderStatus object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderStatusMutation) OldStatusUserLogin(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldStatusUserLogin is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldStatusUserLogin requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatusUserLogin: %w", err)
	}
	return oldValue.StatusUserLogin, nil
}

// ClearStatusUserLogin clears the value of the "status_user_login" field.
func (m *OrderStatusMutation) ClearStatusUserLogin() {
	m.status_user_login = nil
	m.clearedFields[orderstatus.FieldStatusUserLogin] = struct{}{}
}

// StatusUserLoginCleared returns if the "status_user_login" field was cleared in this mutation.
func (m *OrderStatusMutation) StatusUserLoginCleared() bool {
	_, ok := m.clearedFields[orderstatus.FieldStatusUserLogin]
	return ok
}

// ResetStatusUserLogin resets all changes to the "status_user_login" field.
func (m *OrderStatusMutation) ResetStatusUserLogin() {
	m.status_user_login = nil
	delete(m.clearedFields, orderstatus.FieldStatusUserLogin)
}

// SetChangeReason sets the "change_reason" field.
func (m *OrderStatusMutation) SetChangeReason(s string) {
	m.change_reason = &s
}

// ChangeReason returns the value of the "change_reason" field in the mutation.
func (m *OrderStatusMutation) ChangeReason() (r string, exists bool) {
	v := m.change_reason
	if v == nil {
		return
	}
	return *v, true
}

// OldChangeReason returns the old "change_reason" field's value of the OrderStatus entity.
// If the OrderStatus object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderStatusMutation) OldChangeReason(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldChangeReason is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldChangeReason requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChangeReason: %w", err)
	}
	return oldValue.ChangeReason, nil
}

// ClearChangeReason clears the value of the "change_reason" field.
func (m *OrderStatusMutation) ClearChangeReason() {
	m.change_reason = nil
	m.clearedFields[orderstatus.FieldChangeReason] = struct{}{}
}

// ChangeReasonCleared returns if the "change_reason" field was cleared in this mutation.
func (m *OrderStatusMutation) ChangeReasonCleared() bool {
	_, ok := m.clearedFields[orderstatus.FieldChangeReason]
	return ok
}

// ResetChangeReason resets all changes to the "change_reason" field.
func (m *OrderStatusMutation) ResetChangeReason() {
	m.change_reason = nil
	delete(m.clearedFields, orderstatus.FieldChangeReason)
}

// SetOrderHeaderID sets the "order_header" edge to the OrderHeader entity by id.
func (m *OrderStatusMutation) SetOrderHeaderID(id int) {
	m.order_header = &id
}

// ClearOrderHeader clears the "order_header" edge to the OrderHeader entity.
func (m *OrderStatusMutation) ClearOrderHeader() {
	m.clearedorder_header = true
}

// OrderHeaderCleared reports if the "order_header" edge to the OrderHeader entity was cleared.
func (m *OrderStatusMutation) OrderHeaderCleared() bool {
	return m.clearedorder_header
}

// OrderHeaderID returns the "order_header" edge ID in the mutation.
func (m *OrderStatusMutation) OrderHeaderID() (id int, exists bool) {
	if m.order_header != nil {
		return *m.order_header, true
	}
	return
}

// OrderHeaderIDs returns the "order_header" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OrderHeaderID instead. It exists only for internal usage by the builders.
func (m *OrderStatusMutation) OrderHeaderIDs() (ids []int) {
	if id := m.order_header; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOrderHeader resets all changes to the "order_header" edge.
func (m *OrderStatusMutation) ResetOrderHeader() {
	m.order_header = nil
	m.clearedorder_header = false
}

// SetOrderItemID sets the "order_item" edge to the OrderItem entity by id.
func (m *OrderStatusMutation) SetOrderItemID(id int) {
	m.order_item = &id
}

// ClearOrderItem clears the "order_item" edge to the OrderItem entity.
func (m *OrderStatusMutation) ClearOrderItem() {
	m.clearedorder_item = true
}

// OrderItemCleared reports if the "order_item" edge to the OrderItem entity was cleared.
func (m *OrderStatusMutation) OrderItemCleared() bool {
	return m.clearedorder_item
}

// OrderItemID returns the "order_item" edge ID in the mutation.
func (m *OrderStatusMutation) OrderItemID() (id int, exists bool) {
	if m.order_item != nil {
		return *m.order_item, true
	}
	return
}

// OrderItemIDs returns the "order_item" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OrderItemID instead. It exists only for internal usage by the builders.
func (m *OrderStatusMutation) OrderItemIDs() (ids []int) {
	if id := m.order_item; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOrderItem resets all changes to the "order_item" edge.
func (m *OrderStatusMutation) ResetOrderItem() {
	m.order_item = nil
	m.clearedorder_item = false
}

// Op returns the operation name.
func (m *OrderStatusMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (OrderStatus).
func (m *OrderStatusMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *OrderStatusMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.create_time != nil {
		fields = append(fields, orderstatus.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, orderstatus.FieldUpdateTime)
	}
	if m.status_id != nil {
		fields = append(fields, orderstatus.FieldStatusID)
	}
	if m.order_item_seq_id != nil {
		fields = append(fields, orderstatus.FieldOrderItemSeqID)
	}
	if m.order_payment_preference_id != nil {
		fields = append(fields, orderstatus.FieldOrderPaymentPreferenceID)
	}
	if m.status_datetime != nil {
		fields = append(fields, orderstatus.FieldStatusDatetime)
	}
	if m.status_user_login != nil {
		fields = append(fields, orderstatus.FieldStatusUserLogin)
	}
	if m.change_reason != nil {
		fields = append(fields, orderstatus.FieldChangeReason)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *OrderStatusMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case orderstatus.FieldCreateTime:
		return m.CreateTime()
	case orderstatus.FieldUpdateTime:
		return m.UpdateTime()
	case orderstatus.FieldStatusID:
		return m.StatusID()
	case orderstatus.FieldOrderItemSeqID:
		return m.OrderItemSeqID()
	case orderstatus.FieldOrderPaymentPreferenceID:
		return m.OrderPaymentPreferenceID()
	case orderstatus.FieldStatusDatetime:
		return m.StatusDatetime()
	case orderstatus.FieldStatusUserLogin:
		return m.StatusUserLogin()
	case orderstatus.FieldChangeReason:
		return m.ChangeReason()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *OrderStatusMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case orderstatus.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case orderstatus.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case orderstatus.FieldStatusID:
		return m.OldStatusID(ctx)
	case orderstatus.FieldOrderItemSeqID:
		return m.OldOrderItemSeqID(ctx)
	case orderstatus.FieldOrderPaymentPreferenceID:
		return m.OldOrderPaymentPreferenceID(ctx)
	case orderstatus.FieldStatusDatetime:
		return m.OldStatusDatetime(ctx)
	case orderstatus.FieldStatusUserLogin:
		return m.OldStatusUserLogin(ctx)
	case orderstatus.FieldChangeReason:
		return m.OldChangeReason(ctx)
	}
	return nil, fmt.Errorf("unknown OrderStatus field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrderStatusMutation) SetField(name string, value ent.Value) error {
	switch name {
	case orderstatus.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case orderstatus.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case orderstatus.FieldStatusID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatusID(v)
		return nil
	case orderstatus.FieldOrderItemSeqID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrderItemSeqID(v)
		return nil
	case orderstatus.FieldOrderPaymentPreferenceID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrderPaymentPreferenceID(v)
		return nil
	case orderstatus.FieldStatusDatetime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatusDatetime(v)
		return nil
	case orderstatus.FieldStatusUserLogin:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatusUserLogin(v)
		return nil
	case orderstatus.FieldChangeReason:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChangeReason(v)
		return nil
	}
	return fmt.Errorf("unknown OrderStatus field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *OrderStatusMutation) AddedFields() []string {
	var fields []string
	if m.addstatus_id != nil {
		fields = append(fields, orderstatus.FieldStatusID)
	}
	if m.addorder_item_seq_id != nil {
		fields = append(fields, orderstatus.FieldOrderItemSeqID)
	}
	if m.addorder_payment_preference_id != nil {
		fields = append(fields, orderstatus.FieldOrderPaymentPreferenceID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *OrderStatusMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case orderstatus.FieldStatusID:
		return m.AddedStatusID()
	case orderstatus.FieldOrderItemSeqID:
		return m.AddedOrderItemSeqID()
	case orderstatus.FieldOrderPaymentPreferenceID:
		return m.AddedOrderPaymentPreferenceID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrderStatusMutation) AddField(name string, value ent.Value) error {
	switch name {
	case orderstatus.FieldStatusID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatusID(v)
		return nil
	case orderstatus.FieldOrderItemSeqID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOrderItemSeqID(v)
		return nil
	case orderstatus.FieldOrderPaymentPreferenceID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOrderPaymentPreferenceID(v)
		return nil
	}
	return fmt.Errorf("unknown OrderStatus numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *OrderStatusMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(orderstatus.FieldStatusID) {
		fields = append(fields, orderstatus.FieldStatusID)
	}
	if m.FieldCleared(orderstatus.FieldOrderItemSeqID) {
		fields = append(fields, orderstatus.FieldOrderItemSeqID)
	}
	if m.FieldCleared(orderstatus.FieldOrderPaymentPreferenceID) {
		fields = append(fields, orderstatus.FieldOrderPaymentPreferenceID)
	}
	if m.FieldCleared(orderstatus.FieldStatusDatetime) {
		fields = append(fields, orderstatus.FieldStatusDatetime)
	}
	if m.FieldCleared(orderstatus.FieldStatusUserLogin) {
		fields = append(fields, orderstatus.FieldStatusUserLogin)
	}
	if m.FieldCleared(orderstatus.FieldChangeReason) {
		fields = append(fields, orderstatus.FieldChangeReason)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *OrderStatusMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *OrderStatusMutation) ClearField(name string) error {
	switch name {
	case orderstatus.FieldStatusID:
		m.ClearStatusID()
		return nil
	case orderstatus.FieldOrderItemSeqID:
		m.ClearOrderItemSeqID()
		return nil
	case orderstatus.FieldOrderPaymentPreferenceID:
		m.ClearOrderPaymentPreferenceID()
		return nil
	case orderstatus.FieldStatusDatetime:
		m.ClearStatusDatetime()
		return nil
	case orderstatus.FieldStatusUserLogin:
		m.ClearStatusUserLogin()
		return nil
	case orderstatus.FieldChangeReason:
		m.ClearChangeReason()
		return nil
	}
	return fmt.Errorf("unknown OrderStatus nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *OrderStatusMutation) ResetField(name string) error {
	switch name {
	case orderstatus.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case orderstatus.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case orderstatus.FieldStatusID:
		m.ResetStatusID()
		return nil
	case orderstatus.FieldOrderItemSeqID:
		m.ResetOrderItemSeqID()
		return nil
	case orderstatus.FieldOrderPaymentPreferenceID:
		m.ResetOrderPaymentPreferenceID()
		return nil
	case orderstatus.FieldStatusDatetime:
		m.ResetStatusDatetime()
		return nil
	case orderstatus.FieldStatusUserLogin:
		m.ResetStatusUserLogin()
		return nil
	case orderstatus.FieldChangeReason:
		m.ResetChangeReason()
		return nil
	}
	return fmt.Errorf("unknown OrderStatus field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *OrderStatusMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.order_header != nil {
		edges = append(edges, orderstatus.EdgeOrderHeader)
	}
	if m.order_item != nil {
		edges = append(edges, orderstatus.EdgeOrderItem)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *OrderStatusMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case orderstatus.EdgeOrderHeader:
		if id := m.order_header; id != nil {
			return []ent.Value{*id}
		}
	case orderstatus.EdgeOrderItem:
		if id := m.order_item; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *OrderStatusMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *OrderStatusMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *OrderStatusMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedorder_header {
		edges = append(edges, orderstatus.EdgeOrderHeader)
	}
	if m.clearedorder_item {
		edges = append(edges, orderstatus.EdgeOrderItem)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *OrderStatusMutation) EdgeCleared(name string) bool {
	switch name {
	case orderstatus.EdgeOrderHeader:
		return m.clearedorder_header
	case orderstatus.EdgeOrderItem:
		return m.clearedorder_item
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *OrderStatusMutation) ClearEdge(name string) error {
	switch name {
	case orderstatus.EdgeOrderHeader:
		m.ClearOrderHeader()
		return nil
	case orderstatus.EdgeOrderItem:
		m.ClearOrderItem()
		return nil
	}
	return fmt.Errorf("unknown OrderStatus unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *OrderStatusMutation) ResetEdge(name string) error {
	switch name {
	case orderstatus.EdgeOrderHeader:
		m.ResetOrderHeader()
		return nil
	case orderstatus.EdgeOrderItem:
		m.ResetOrderItem()
		return nil
	}
	return fmt.Errorf("unknown OrderStatus edge %s", name)
}

// PaymentMutation represents an operation that mutates the Payment nodes in the graph.
type PaymentMutation struct {
	config
	op                             Op
	typ                            string
	id                             *int
	create_time                    *time.Time
	update_time                    *time.Time
	payment_type_id                *int
	addpayment_type_id             *int
	payment_method_type_id         *int
	addpayment_method_type_id      *int
	payment_method_id              *int
	addpayment_method_id           *int
	payment_gateway_response_id    *int
	addpayment_gateway_response_id *int
	payment_preference_id          *int
	addpayment_preference_id       *int
	party_id_from                  *int
	addparty_id_from               *int
	party_id_to                    *int
	addparty_id_to                 *int
	role_type_id_to                *int
	addrole_type_id_to             *int
	status_id                      *int
	addstatus_id                   *int
	effective_date                 *time.Time
	payment_ref_num                *string
	amount                         *float64
	addamount                      *float64
	currency_uom_id                *int
	addcurrency_uom_id             *int
	comments                       *string
	fin_account_trans_id           *int
	addfin_account_trans_id        *int
	override_gl_account_id         *int
	addoverride_gl_account_id      *int
	actual_currency_amount         *float64
	addactual_currency_amount      *float64
	actual_currency_uom_id         *int
	addactual_currency_uom_id      *int
	clearedFields                  map[string]struct{}
	done                           bool
	oldValue                       func(context.Context) (*Payment, error)
	predicates                     []predicate.Payment
}

var _ ent.Mutation = (*PaymentMutation)(nil)

// paymentOption allows management of the mutation configuration using functional options.
type paymentOption func(*PaymentMutation)

// newPaymentMutation creates new mutation for the Payment entity.
func newPaymentMutation(c config, op Op, opts ...paymentOption) *PaymentMutation {
	m := &PaymentMutation{
		config:        c,
		op:            op,
		typ:           TypePayment,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPaymentID sets the ID field of the mutation.
func withPaymentID(id int) paymentOption {
	return func(m *PaymentMutation) {
		var (
			err   error
			once  sync.Once
			value *Payment
		)
		m.oldValue = func(ctx context.Context) (*Payment, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Payment.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPayment sets the old Payment of the mutation.
func withPayment(node *Payment) paymentOption {
	return func(m *PaymentMutation) {
		m.oldValue = func(context.Context) (*Payment, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PaymentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PaymentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *PaymentMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreateTime sets the "create_time" field.
func (m *PaymentMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *PaymentMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *PaymentMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *PaymentMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *PaymentMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *PaymentMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetPaymentTypeID sets the "payment_type_id" field.
func (m *PaymentMutation) SetPaymentTypeID(i int) {
	m.payment_type_id = &i
	m.addpayment_type_id = nil
}

// PaymentTypeID returns the value of the "payment_type_id" field in the mutation.
func (m *PaymentMutation) PaymentTypeID() (r int, exists bool) {
	v := m.payment_type_id
	if v == nil {
		return
	}
	return *v, true
}

// OldPaymentTypeID returns the old "payment_type_id" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldPaymentTypeID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPaymentTypeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPaymentTypeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPaymentTypeID: %w", err)
	}
	return oldValue.PaymentTypeID, nil
}

// AddPaymentTypeID adds i to the "payment_type_id" field.
func (m *PaymentMutation) AddPaymentTypeID(i int) {
	if m.addpayment_type_id != nil {
		*m.addpayment_type_id += i
	} else {
		m.addpayment_type_id = &i
	}
}

// AddedPaymentTypeID returns the value that was added to the "payment_type_id" field in this mutation.
func (m *PaymentMutation) AddedPaymentTypeID() (r int, exists bool) {
	v := m.addpayment_type_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearPaymentTypeID clears the value of the "payment_type_id" field.
func (m *PaymentMutation) ClearPaymentTypeID() {
	m.payment_type_id = nil
	m.addpayment_type_id = nil
	m.clearedFields[payment.FieldPaymentTypeID] = struct{}{}
}

// PaymentTypeIDCleared returns if the "payment_type_id" field was cleared in this mutation.
func (m *PaymentMutation) PaymentTypeIDCleared() bool {
	_, ok := m.clearedFields[payment.FieldPaymentTypeID]
	return ok
}

// ResetPaymentTypeID resets all changes to the "payment_type_id" field.
func (m *PaymentMutation) ResetPaymentTypeID() {
	m.payment_type_id = nil
	m.addpayment_type_id = nil
	delete(m.clearedFields, payment.FieldPaymentTypeID)
}

// SetPaymentMethodTypeID sets the "payment_method_type_id" field.
func (m *PaymentMutation) SetPaymentMethodTypeID(i int) {
	m.payment_method_type_id = &i
	m.addpayment_method_type_id = nil
}

// PaymentMethodTypeID returns the value of the "payment_method_type_id" field in the mutation.
func (m *PaymentMutation) PaymentMethodTypeID() (r int, exists bool) {
	v := m.payment_method_type_id
	if v == nil {
		return
	}
	return *v, true
}

// OldPaymentMethodTypeID returns the old "payment_method_type_id" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldPaymentMethodTypeID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPaymentMethodTypeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPaymentMethodTypeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPaymentMethodTypeID: %w", err)
	}
	return oldValue.PaymentMethodTypeID, nil
}

// AddPaymentMethodTypeID adds i to the "payment_method_type_id" field.
func (m *PaymentMutation) AddPaymentMethodTypeID(i int) {
	if m.addpayment_method_type_id != nil {
		*m.addpayment_method_type_id += i
	} else {
		m.addpayment_method_type_id = &i
	}
}

// AddedPaymentMethodTypeID returns the value that was added to the "payment_method_type_id" field in this mutation.
func (m *PaymentMutation) AddedPaymentMethodTypeID() (r int, exists bool) {
	v := m.addpayment_method_type_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearPaymentMethodTypeID clears the value of the "payment_method_type_id" field.
func (m *PaymentMutation) ClearPaymentMethodTypeID() {
	m.payment_method_type_id = nil
	m.addpayment_method_type_id = nil
	m.clearedFields[payment.FieldPaymentMethodTypeID] = struct{}{}
}

// PaymentMethodTypeIDCleared returns if the "payment_method_type_id" field was cleared in this mutation.
func (m *PaymentMutation) PaymentMethodTypeIDCleared() bool {
	_, ok := m.clearedFields[payment.FieldPaymentMethodTypeID]
	return ok
}

// ResetPaymentMethodTypeID resets all changes to the "payment_method_type_id" field.
func (m *PaymentMutation) ResetPaymentMethodTypeID() {
	m.payment_method_type_id = nil
	m.addpayment_method_type_id = nil
	delete(m.clearedFields, payment.FieldPaymentMethodTypeID)
}

// SetPaymentMethodID sets the "payment_method_id" field.
func (m *PaymentMutation) SetPaymentMethodID(i int) {
	m.payment_method_id = &i
	m.addpayment_method_id = nil
}

// PaymentMethodID returns the value of the "payment_method_id" field in the mutation.
func (m *PaymentMutation) PaymentMethodID() (r int, exists bool) {
	v := m.payment_method_id
	if v == nil {
		return
	}
	return *v, true
}

// OldPaymentMethodID returns the old "payment_method_id" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldPaymentMethodID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPaymentMethodID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPaymentMethodID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPaymentMethodID: %w", err)
	}
	return oldValue.PaymentMethodID, nil
}

// AddPaymentMethodID adds i to the "payment_method_id" field.
func (m *PaymentMutation) AddPaymentMethodID(i int) {
	if m.addpayment_method_id != nil {
		*m.addpayment_method_id += i
	} else {
		m.addpayment_method_id = &i
	}
}

// AddedPaymentMethodID returns the value that was added to the "payment_method_id" field in this mutation.
func (m *PaymentMutation) AddedPaymentMethodID() (r int, exists bool) {
	v := m.addpayment_method_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearPaymentMethodID clears the value of the "payment_method_id" field.
func (m *PaymentMutation) ClearPaymentMethodID() {
	m.payment_method_id = nil
	m.addpayment_method_id = nil
	m.clearedFields[payment.FieldPaymentMethodID] = struct{}{}
}

// PaymentMethodIDCleared returns if the "payment_method_id" field was cleared in this mutation.
func (m *PaymentMutation) PaymentMethodIDCleared() bool {
	_, ok := m.clearedFields[payment.FieldPaymentMethodID]
	return ok
}

// ResetPaymentMethodID resets all changes to the "payment_method_id" field.
func (m *PaymentMutation) ResetPaymentMethodID() {
	m.payment_method_id = nil
	m.addpayment_method_id = nil
	delete(m.clearedFields, payment.FieldPaymentMethodID)
}

// SetPaymentGatewayResponseID sets the "payment_gateway_response_id" field.
func (m *PaymentMutation) SetPaymentGatewayResponseID(i int) {
	m.payment_gateway_response_id = &i
	m.addpayment_gateway_response_id = nil
}

// PaymentGatewayResponseID returns the value of the "payment_gateway_response_id" field in the mutation.
func (m *PaymentMutation) PaymentGatewayResponseID() (r int, exists bool) {
	v := m.payment_gateway_response_id
	if v == nil {
		return
	}
	return *v, true
}

// OldPaymentGatewayResponseID returns the old "payment_gateway_response_id" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldPaymentGatewayResponseID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPaymentGatewayResponseID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPaymentGatewayResponseID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPaymentGatewayResponseID: %w", err)
	}
	return oldValue.PaymentGatewayResponseID, nil
}

// AddPaymentGatewayResponseID adds i to the "payment_gateway_response_id" field.
func (m *PaymentMutation) AddPaymentGatewayResponseID(i int) {
	if m.addpayment_gateway_response_id != nil {
		*m.addpayment_gateway_response_id += i
	} else {
		m.addpayment_gateway_response_id = &i
	}
}

// AddedPaymentGatewayResponseID returns the value that was added to the "payment_gateway_response_id" field in this mutation.
func (m *PaymentMutation) AddedPaymentGatewayResponseID() (r int, exists bool) {
	v := m.addpayment_gateway_response_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearPaymentGatewayResponseID clears the value of the "payment_gateway_response_id" field.
func (m *PaymentMutation) ClearPaymentGatewayResponseID() {
	m.payment_gateway_response_id = nil
	m.addpayment_gateway_response_id = nil
	m.clearedFields[payment.FieldPaymentGatewayResponseID] = struct{}{}
}

// PaymentGatewayResponseIDCleared returns if the "payment_gateway_response_id" field was cleared in this mutation.
func (m *PaymentMutation) PaymentGatewayResponseIDCleared() bool {
	_, ok := m.clearedFields[payment.FieldPaymentGatewayResponseID]
	return ok
}

// ResetPaymentGatewayResponseID resets all changes to the "payment_gateway_response_id" field.
func (m *PaymentMutation) ResetPaymentGatewayResponseID() {
	m.payment_gateway_response_id = nil
	m.addpayment_gateway_response_id = nil
	delete(m.clearedFields, payment.FieldPaymentGatewayResponseID)
}

// SetPaymentPreferenceID sets the "payment_preference_id" field.
func (m *PaymentMutation) SetPaymentPreferenceID(i int) {
	m.payment_preference_id = &i
	m.addpayment_preference_id = nil
}

// PaymentPreferenceID returns the value of the "payment_preference_id" field in the mutation.
func (m *PaymentMutation) PaymentPreferenceID() (r int, exists bool) {
	v := m.payment_preference_id
	if v == nil {
		return
	}
	return *v, true
}

// OldPaymentPreferenceID returns the old "payment_preference_id" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldPaymentPreferenceID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPaymentPreferenceID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPaymentPreferenceID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPaymentPreferenceID: %w", err)
	}
	return oldValue.PaymentPreferenceID, nil
}

// AddPaymentPreferenceID adds i to the "payment_preference_id" field.
func (m *PaymentMutation) AddPaymentPreferenceID(i int) {
	if m.addpayment_preference_id != nil {
		*m.addpayment_preference_id += i
	} else {
		m.addpayment_preference_id = &i
	}
}

// AddedPaymentPreferenceID returns the value that was added to the "payment_preference_id" field in this mutation.
func (m *PaymentMutation) AddedPaymentPreferenceID() (r int, exists bool) {
	v := m.addpayment_preference_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearPaymentPreferenceID clears the value of the "payment_preference_id" field.
func (m *PaymentMutation) ClearPaymentPreferenceID() {
	m.payment_preference_id = nil
	m.addpayment_preference_id = nil
	m.clearedFields[payment.FieldPaymentPreferenceID] = struct{}{}
}

// PaymentPreferenceIDCleared returns if the "payment_preference_id" field was cleared in this mutation.
func (m *PaymentMutation) PaymentPreferenceIDCleared() bool {
	_, ok := m.clearedFields[payment.FieldPaymentPreferenceID]
	return ok
}

// ResetPaymentPreferenceID resets all changes to the "payment_preference_id" field.
func (m *PaymentMutation) ResetPaymentPreferenceID() {
	m.payment_preference_id = nil
	m.addpayment_preference_id = nil
	delete(m.clearedFields, payment.FieldPaymentPreferenceID)
}

// SetPartyIDFrom sets the "party_id_from" field.
func (m *PaymentMutation) SetPartyIDFrom(i int) {
	m.party_id_from = &i
	m.addparty_id_from = nil
}

// PartyIDFrom returns the value of the "party_id_from" field in the mutation.
func (m *PaymentMutation) PartyIDFrom() (r int, exists bool) {
	v := m.party_id_from
	if v == nil {
		return
	}
	return *v, true
}

// OldPartyIDFrom returns the old "party_id_from" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldPartyIDFrom(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPartyIDFrom is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPartyIDFrom requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPartyIDFrom: %w", err)
	}
	return oldValue.PartyIDFrom, nil
}

// AddPartyIDFrom adds i to the "party_id_from" field.
func (m *PaymentMutation) AddPartyIDFrom(i int) {
	if m.addparty_id_from != nil {
		*m.addparty_id_from += i
	} else {
		m.addparty_id_from = &i
	}
}

// AddedPartyIDFrom returns the value that was added to the "party_id_from" field in this mutation.
func (m *PaymentMutation) AddedPartyIDFrom() (r int, exists bool) {
	v := m.addparty_id_from
	if v == nil {
		return
	}
	return *v, true
}

// ClearPartyIDFrom clears the value of the "party_id_from" field.
func (m *PaymentMutation) ClearPartyIDFrom() {
	m.party_id_from = nil
	m.addparty_id_from = nil
	m.clearedFields[payment.FieldPartyIDFrom] = struct{}{}
}

// PartyIDFromCleared returns if the "party_id_from" field was cleared in this mutation.
func (m *PaymentMutation) PartyIDFromCleared() bool {
	_, ok := m.clearedFields[payment.FieldPartyIDFrom]
	return ok
}

// ResetPartyIDFrom resets all changes to the "party_id_from" field.
func (m *PaymentMutation) ResetPartyIDFrom() {
	m.party_id_from = nil
	m.addparty_id_from = nil
	delete(m.clearedFields, payment.FieldPartyIDFrom)
}

// SetPartyIDTo sets the "party_id_to" field.
func (m *PaymentMutation) SetPartyIDTo(i int) {
	m.party_id_to = &i
	m.addparty_id_to = nil
}

// PartyIDTo returns the value of the "party_id_to" field in the mutation.
func (m *PaymentMutation) PartyIDTo() (r int, exists bool) {
	v := m.party_id_to
	if v == nil {
		return
	}
	return *v, true
}

// OldPartyIDTo returns the old "party_id_to" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldPartyIDTo(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPartyIDTo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPartyIDTo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPartyIDTo: %w", err)
	}
	return oldValue.PartyIDTo, nil
}

// AddPartyIDTo adds i to the "party_id_to" field.
func (m *PaymentMutation) AddPartyIDTo(i int) {
	if m.addparty_id_to != nil {
		*m.addparty_id_to += i
	} else {
		m.addparty_id_to = &i
	}
}

// AddedPartyIDTo returns the value that was added to the "party_id_to" field in this mutation.
func (m *PaymentMutation) AddedPartyIDTo() (r int, exists bool) {
	v := m.addparty_id_to
	if v == nil {
		return
	}
	return *v, true
}

// ClearPartyIDTo clears the value of the "party_id_to" field.
func (m *PaymentMutation) ClearPartyIDTo() {
	m.party_id_to = nil
	m.addparty_id_to = nil
	m.clearedFields[payment.FieldPartyIDTo] = struct{}{}
}

// PartyIDToCleared returns if the "party_id_to" field was cleared in this mutation.
func (m *PaymentMutation) PartyIDToCleared() bool {
	_, ok := m.clearedFields[payment.FieldPartyIDTo]
	return ok
}

// ResetPartyIDTo resets all changes to the "party_id_to" field.
func (m *PaymentMutation) ResetPartyIDTo() {
	m.party_id_to = nil
	m.addparty_id_to = nil
	delete(m.clearedFields, payment.FieldPartyIDTo)
}

// SetRoleTypeIDTo sets the "role_type_id_to" field.
func (m *PaymentMutation) SetRoleTypeIDTo(i int) {
	m.role_type_id_to = &i
	m.addrole_type_id_to = nil
}

// RoleTypeIDTo returns the value of the "role_type_id_to" field in the mutation.
func (m *PaymentMutation) RoleTypeIDTo() (r int, exists bool) {
	v := m.role_type_id_to
	if v == nil {
		return
	}
	return *v, true
}

// OldRoleTypeIDTo returns the old "role_type_id_to" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldRoleTypeIDTo(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRoleTypeIDTo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRoleTypeIDTo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRoleTypeIDTo: %w", err)
	}
	return oldValue.RoleTypeIDTo, nil
}

// AddRoleTypeIDTo adds i to the "role_type_id_to" field.
func (m *PaymentMutation) AddRoleTypeIDTo(i int) {
	if m.addrole_type_id_to != nil {
		*m.addrole_type_id_to += i
	} else {
		m.addrole_type_id_to = &i
	}
}

// AddedRoleTypeIDTo returns the value that was added to the "role_type_id_to" field in this mutation.
func (m *PaymentMutation) AddedRoleTypeIDTo() (r int, exists bool) {
	v := m.addrole_type_id_to
	if v == nil {
		return
	}
	return *v, true
}

// ClearRoleTypeIDTo clears the value of the "role_type_id_to" field.
func (m *PaymentMutation) ClearRoleTypeIDTo() {
	m.role_type_id_to = nil
	m.addrole_type_id_to = nil
	m.clearedFields[payment.FieldRoleTypeIDTo] = struct{}{}
}

// RoleTypeIDToCleared returns if the "role_type_id_to" field was cleared in this mutation.
func (m *PaymentMutation) RoleTypeIDToCleared() bool {
	_, ok := m.clearedFields[payment.FieldRoleTypeIDTo]
	return ok
}

// ResetRoleTypeIDTo resets all changes to the "role_type_id_to" field.
func (m *PaymentMutation) ResetRoleTypeIDTo() {
	m.role_type_id_to = nil
	m.addrole_type_id_to = nil
	delete(m.clearedFields, payment.FieldRoleTypeIDTo)
}

// SetStatusID sets the "status_id" field.
func (m *PaymentMutation) SetStatusID(i int) {
	m.status_id = &i
	m.addstatus_id = nil
}

// StatusID returns the value of the "status_id" field in the mutation.
func (m *PaymentMutation) StatusID() (r int, exists bool) {
	v := m.status_id
	if v == nil {
		return
	}
	return *v, true
}

// OldStatusID returns the old "status_id" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldStatusID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldStatusID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldStatusID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatusID: %w", err)
	}
	return oldValue.StatusID, nil
}

// AddStatusID adds i to the "status_id" field.
func (m *PaymentMutation) AddStatusID(i int) {
	if m.addstatus_id != nil {
		*m.addstatus_id += i
	} else {
		m.addstatus_id = &i
	}
}

// AddedStatusID returns the value that was added to the "status_id" field in this mutation.
func (m *PaymentMutation) AddedStatusID() (r int, exists bool) {
	v := m.addstatus_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearStatusID clears the value of the "status_id" field.
func (m *PaymentMutation) ClearStatusID() {
	m.status_id = nil
	m.addstatus_id = nil
	m.clearedFields[payment.FieldStatusID] = struct{}{}
}

// StatusIDCleared returns if the "status_id" field was cleared in this mutation.
func (m *PaymentMutation) StatusIDCleared() bool {
	_, ok := m.clearedFields[payment.FieldStatusID]
	return ok
}

// ResetStatusID resets all changes to the "status_id" field.
func (m *PaymentMutation) ResetStatusID() {
	m.status_id = nil
	m.addstatus_id = nil
	delete(m.clearedFields, payment.FieldStatusID)
}

// SetEffectiveDate sets the "effective_date" field.
func (m *PaymentMutation) SetEffectiveDate(t time.Time) {
	m.effective_date = &t
}

// EffectiveDate returns the value of the "effective_date" field in the mutation.
func (m *PaymentMutation) EffectiveDate() (r time.Time, exists bool) {
	v := m.effective_date
	if v == nil {
		return
	}
	return *v, true
}

// OldEffectiveDate returns the old "effective_date" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldEffectiveDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEffectiveDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEffectiveDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEffectiveDate: %w", err)
	}
	return oldValue.EffectiveDate, nil
}

// ClearEffectiveDate clears the value of the "effective_date" field.
func (m *PaymentMutation) ClearEffectiveDate() {
	m.effective_date = nil
	m.clearedFields[payment.FieldEffectiveDate] = struct{}{}
}

// EffectiveDateCleared returns if the "effective_date" field was cleared in this mutation.
func (m *PaymentMutation) EffectiveDateCleared() bool {
	_, ok := m.clearedFields[payment.FieldEffectiveDate]
	return ok
}

// ResetEffectiveDate resets all changes to the "effective_date" field.
func (m *PaymentMutation) ResetEffectiveDate() {
	m.effective_date = nil
	delete(m.clearedFields, payment.FieldEffectiveDate)
}

// SetPaymentRefNum sets the "payment_ref_num" field.
func (m *PaymentMutation) SetPaymentRefNum(s string) {
	m.payment_ref_num = &s
}

// PaymentRefNum returns the value of the "payment_ref_num" field in the mutation.
func (m *PaymentMutation) PaymentRefNum() (r string, exists bool) {
	v := m.payment_ref_num
	if v == nil {
		return
	}
	return *v, true
}

// OldPaymentRefNum returns the old "payment_ref_num" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldPaymentRefNum(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPaymentRefNum is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPaymentRefNum requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPaymentRefNum: %w", err)
	}
	return oldValue.PaymentRefNum, nil
}

// ClearPaymentRefNum clears the value of the "payment_ref_num" field.
func (m *PaymentMutation) ClearPaymentRefNum() {
	m.payment_ref_num = nil
	m.clearedFields[payment.FieldPaymentRefNum] = struct{}{}
}

// PaymentRefNumCleared returns if the "payment_ref_num" field was cleared in this mutation.
func (m *PaymentMutation) PaymentRefNumCleared() bool {
	_, ok := m.clearedFields[payment.FieldPaymentRefNum]
	return ok
}

// ResetPaymentRefNum resets all changes to the "payment_ref_num" field.
func (m *PaymentMutation) ResetPaymentRefNum() {
	m.payment_ref_num = nil
	delete(m.clearedFields, payment.FieldPaymentRefNum)
}

// SetAmount sets the "amount" field.
func (m *PaymentMutation) SetAmount(f float64) {
	m.amount = &f
	m.addamount = nil
}

// Amount returns the value of the "amount" field in the mutation.
func (m *PaymentMutation) Amount() (r float64, exists bool) {
	v := m.amount
	if v == nil {
		return
	}
	return *v, true
}

// OldAmount returns the old "amount" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldAmount(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmount: %w", err)
	}
	return oldValue.Amount, nil
}

// AddAmount adds f to the "amount" field.
func (m *PaymentMutation) AddAmount(f float64) {
	if m.addamount != nil {
		*m.addamount += f
	} else {
		m.addamount = &f
	}
}

// AddedAmount returns the value that was added to the "amount" field in this mutation.
func (m *PaymentMutation) AddedAmount() (r float64, exists bool) {
	v := m.addamount
	if v == nil {
		return
	}
	return *v, true
}

// ClearAmount clears the value of the "amount" field.
func (m *PaymentMutation) ClearAmount() {
	m.amount = nil
	m.addamount = nil
	m.clearedFields[payment.FieldAmount] = struct{}{}
}

// AmountCleared returns if the "amount" field was cleared in this mutation.
func (m *PaymentMutation) AmountCleared() bool {
	_, ok := m.clearedFields[payment.FieldAmount]
	return ok
}

// ResetAmount resets all changes to the "amount" field.
func (m *PaymentMutation) ResetAmount() {
	m.amount = nil
	m.addamount = nil
	delete(m.clearedFields, payment.FieldAmount)
}

// SetCurrencyUomID sets the "currency_uom_id" field.
func (m *PaymentMutation) SetCurrencyUomID(i int) {
	m.currency_uom_id = &i
	m.addcurrency_uom_id = nil
}

// CurrencyUomID returns the value of the "currency_uom_id" field in the mutation.
func (m *PaymentMutation) CurrencyUomID() (r int, exists bool) {
	v := m.currency_uom_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCurrencyUomID returns the old "currency_uom_id" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldCurrencyUomID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCurrencyUomID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCurrencyUomID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCurrencyUomID: %w", err)
	}
	return oldValue.CurrencyUomID, nil
}

// AddCurrencyUomID adds i to the "currency_uom_id" field.
func (m *PaymentMutation) AddCurrencyUomID(i int) {
	if m.addcurrency_uom_id != nil {
		*m.addcurrency_uom_id += i
	} else {
		m.addcurrency_uom_id = &i
	}
}

// AddedCurrencyUomID returns the value that was added to the "currency_uom_id" field in this mutation.
func (m *PaymentMutation) AddedCurrencyUomID() (r int, exists bool) {
	v := m.addcurrency_uom_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearCurrencyUomID clears the value of the "currency_uom_id" field.
func (m *PaymentMutation) ClearCurrencyUomID() {
	m.currency_uom_id = nil
	m.addcurrency_uom_id = nil
	m.clearedFields[payment.FieldCurrencyUomID] = struct{}{}
}

// CurrencyUomIDCleared returns if the "currency_uom_id" field was cleared in this mutation.
func (m *PaymentMutation) CurrencyUomIDCleared() bool {
	_, ok := m.clearedFields[payment.FieldCurrencyUomID]
	return ok
}

// ResetCurrencyUomID resets all changes to the "currency_uom_id" field.
func (m *PaymentMutation) ResetCurrencyUomID() {
	m.currency_uom_id = nil
	m.addcurrency_uom_id = nil
	delete(m.clearedFields, payment.FieldCurrencyUomID)
}

// SetComments sets the "comments" field.
func (m *PaymentMutation) SetComments(s string) {
	m.comments = &s
}

// Comments returns the value of the "comments" field in the mutation.
func (m *PaymentMutation) Comments() (r string, exists bool) {
	v := m.comments
	if v == nil {
		return
	}
	return *v, true
}

// OldComments returns the old "comments" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldComments(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldComments is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldComments requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldComments: %w", err)
	}
	return oldValue.Comments, nil
}

// ClearComments clears the value of the "comments" field.
func (m *PaymentMutation) ClearComments() {
	m.comments = nil
	m.clearedFields[payment.FieldComments] = struct{}{}
}

// CommentsCleared returns if the "comments" field was cleared in this mutation.
func (m *PaymentMutation) CommentsCleared() bool {
	_, ok := m.clearedFields[payment.FieldComments]
	return ok
}

// ResetComments resets all changes to the "comments" field.
func (m *PaymentMutation) ResetComments() {
	m.comments = nil
	delete(m.clearedFields, payment.FieldComments)
}

// SetFinAccountTransID sets the "fin_account_trans_id" field.
func (m *PaymentMutation) SetFinAccountTransID(i int) {
	m.fin_account_trans_id = &i
	m.addfin_account_trans_id = nil
}

// FinAccountTransID returns the value of the "fin_account_trans_id" field in the mutation.
func (m *PaymentMutation) FinAccountTransID() (r int, exists bool) {
	v := m.fin_account_trans_id
	if v == nil {
		return
	}
	return *v, true
}

// OldFinAccountTransID returns the old "fin_account_trans_id" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldFinAccountTransID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldFinAccountTransID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldFinAccountTransID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFinAccountTransID: %w", err)
	}
	return oldValue.FinAccountTransID, nil
}

// AddFinAccountTransID adds i to the "fin_account_trans_id" field.
func (m *PaymentMutation) AddFinAccountTransID(i int) {
	if m.addfin_account_trans_id != nil {
		*m.addfin_account_trans_id += i
	} else {
		m.addfin_account_trans_id = &i
	}
}

// AddedFinAccountTransID returns the value that was added to the "fin_account_trans_id" field in this mutation.
func (m *PaymentMutation) AddedFinAccountTransID() (r int, exists bool) {
	v := m.addfin_account_trans_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearFinAccountTransID clears the value of the "fin_account_trans_id" field.
func (m *PaymentMutation) ClearFinAccountTransID() {
	m.fin_account_trans_id = nil
	m.addfin_account_trans_id = nil
	m.clearedFields[payment.FieldFinAccountTransID] = struct{}{}
}

// FinAccountTransIDCleared returns if the "fin_account_trans_id" field was cleared in this mutation.
func (m *PaymentMutation) FinAccountTransIDCleared() bool {
	_, ok := m.clearedFields[payment.FieldFinAccountTransID]
	return ok
}

// ResetFinAccountTransID resets all changes to the "fin_account_trans_id" field.
func (m *PaymentMutation) ResetFinAccountTransID() {
	m.fin_account_trans_id = nil
	m.addfin_account_trans_id = nil
	delete(m.clearedFields, payment.FieldFinAccountTransID)
}

// SetOverrideGlAccountID sets the "override_gl_account_id" field.
func (m *PaymentMutation) SetOverrideGlAccountID(i int) {
	m.override_gl_account_id = &i
	m.addoverride_gl_account_id = nil
}

// OverrideGlAccountID returns the value of the "override_gl_account_id" field in the mutation.
func (m *PaymentMutation) OverrideGlAccountID() (r int, exists bool) {
	v := m.override_gl_account_id
	if v == nil {
		return
	}
	return *v, true
}

// OldOverrideGlAccountID returns the old "override_gl_account_id" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldOverrideGlAccountID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldOverrideGlAccountID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldOverrideGlAccountID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOverrideGlAccountID: %w", err)
	}
	return oldValue.OverrideGlAccountID, nil
}

// AddOverrideGlAccountID adds i to the "override_gl_account_id" field.
func (m *PaymentMutation) AddOverrideGlAccountID(i int) {
	if m.addoverride_gl_account_id != nil {
		*m.addoverride_gl_account_id += i
	} else {
		m.addoverride_gl_account_id = &i
	}
}

// AddedOverrideGlAccountID returns the value that was added to the "override_gl_account_id" field in this mutation.
func (m *PaymentMutation) AddedOverrideGlAccountID() (r int, exists bool) {
	v := m.addoverride_gl_account_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearOverrideGlAccountID clears the value of the "override_gl_account_id" field.
func (m *PaymentMutation) ClearOverrideGlAccountID() {
	m.override_gl_account_id = nil
	m.addoverride_gl_account_id = nil
	m.clearedFields[payment.FieldOverrideGlAccountID] = struct{}{}
}

// OverrideGlAccountIDCleared returns if the "override_gl_account_id" field was cleared in this mutation.
func (m *PaymentMutation) OverrideGlAccountIDCleared() bool {
	_, ok := m.clearedFields[payment.FieldOverrideGlAccountID]
	return ok
}

// ResetOverrideGlAccountID resets all changes to the "override_gl_account_id" field.
func (m *PaymentMutation) ResetOverrideGlAccountID() {
	m.override_gl_account_id = nil
	m.addoverride_gl_account_id = nil
	delete(m.clearedFields, payment.FieldOverrideGlAccountID)
}

// SetActualCurrencyAmount sets the "actual_currency_amount" field.
func (m *PaymentMutation) SetActualCurrencyAmount(f float64) {
	m.actual_currency_amount = &f
	m.addactual_currency_amount = nil
}

// ActualCurrencyAmount returns the value of the "actual_currency_amount" field in the mutation.
func (m *PaymentMutation) ActualCurrencyAmount() (r float64, exists bool) {
	v := m.actual_currency_amount
	if v == nil {
		return
	}
	return *v, true
}

// OldActualCurrencyAmount returns the old "actual_currency_amount" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldActualCurrencyAmount(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldActualCurrencyAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldActualCurrencyAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActualCurrencyAmount: %w", err)
	}
	return oldValue.ActualCurrencyAmount, nil
}

// AddActualCurrencyAmount adds f to the "actual_currency_amount" field.
func (m *PaymentMutation) AddActualCurrencyAmount(f float64) {
	if m.addactual_currency_amount != nil {
		*m.addactual_currency_amount += f
	} else {
		m.addactual_currency_amount = &f
	}
}

// AddedActualCurrencyAmount returns the value that was added to the "actual_currency_amount" field in this mutation.
func (m *PaymentMutation) AddedActualCurrencyAmount() (r float64, exists bool) {
	v := m.addactual_currency_amount
	if v == nil {
		return
	}
	return *v, true
}

// ClearActualCurrencyAmount clears the value of the "actual_currency_amount" field.
func (m *PaymentMutation) ClearActualCurrencyAmount() {
	m.actual_currency_amount = nil
	m.addactual_currency_amount = nil
	m.clearedFields[payment.FieldActualCurrencyAmount] = struct{}{}
}

// ActualCurrencyAmountCleared returns if the "actual_currency_amount" field was cleared in this mutation.
func (m *PaymentMutation) ActualCurrencyAmountCleared() bool {
	_, ok := m.clearedFields[payment.FieldActualCurrencyAmount]
	return ok
}

// ResetActualCurrencyAmount resets all changes to the "actual_currency_amount" field.
func (m *PaymentMutation) ResetActualCurrencyAmount() {
	m.actual_currency_amount = nil
	m.addactual_currency_amount = nil
	delete(m.clearedFields, payment.FieldActualCurrencyAmount)
}

// SetActualCurrencyUomID sets the "actual_currency_uom_id" field.
func (m *PaymentMutation) SetActualCurrencyUomID(i int) {
	m.actual_currency_uom_id = &i
	m.addactual_currency_uom_id = nil
}

// ActualCurrencyUomID returns the value of the "actual_currency_uom_id" field in the mutation.
func (m *PaymentMutation) ActualCurrencyUomID() (r int, exists bool) {
	v := m.actual_currency_uom_id
	if v == nil {
		return
	}
	return *v, true
}

// OldActualCurrencyUomID returns the old "actual_currency_uom_id" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldActualCurrencyUomID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldActualCurrencyUomID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldActualCurrencyUomID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActualCurrencyUomID: %w", err)
	}
	return oldValue.ActualCurrencyUomID, nil
}

// AddActualCurrencyUomID adds i to the "actual_currency_uom_id" field.
func (m *PaymentMutation) AddActualCurrencyUomID(i int) {
	if m.addactual_currency_uom_id != nil {
		*m.addactual_currency_uom_id += i
	} else {
		m.addactual_currency_uom_id = &i
	}
}

// AddedActualCurrencyUomID returns the value that was added to the "actual_currency_uom_id" field in this mutation.
func (m *PaymentMutation) AddedActualCurrencyUomID() (r int, exists bool) {
	v := m.addactual_currency_uom_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearActualCurrencyUomID clears the value of the "actual_currency_uom_id" field.
func (m *PaymentMutation) ClearActualCurrencyUomID() {
	m.actual_currency_uom_id = nil
	m.addactual_currency_uom_id = nil
	m.clearedFields[payment.FieldActualCurrencyUomID] = struct{}{}
}

// ActualCurrencyUomIDCleared returns if the "actual_currency_uom_id" field was cleared in this mutation.
func (m *PaymentMutation) ActualCurrencyUomIDCleared() bool {
	_, ok := m.clearedFields[payment.FieldActualCurrencyUomID]
	return ok
}

// ResetActualCurrencyUomID resets all changes to the "actual_currency_uom_id" field.
func (m *PaymentMutation) ResetActualCurrencyUomID() {
	m.actual_currency_uom_id = nil
	m.addactual_currency_uom_id = nil
	delete(m.clearedFields, payment.FieldActualCurrencyUomID)
}

// Op returns the operation name.
func (m *PaymentMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Payment).
func (m *PaymentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PaymentMutation) Fields() []string {
	fields := make([]string, 0, 20)
	if m.create_time != nil {
		fields = append(fields, payment.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, payment.FieldUpdateTime)
	}
	if m.payment_type_id != nil {
		fields = append(fields, payment.FieldPaymentTypeID)
	}
	if m.payment_method_type_id != nil {
		fields = append(fields, payment.FieldPaymentMethodTypeID)
	}
	if m.payment_method_id != nil {
		fields = append(fields, payment.FieldPaymentMethodID)
	}
	if m.payment_gateway_response_id != nil {
		fields = append(fields, payment.FieldPaymentGatewayResponseID)
	}
	if m.payment_preference_id != nil {
		fields = append(fields, payment.FieldPaymentPreferenceID)
	}
	if m.party_id_from != nil {
		fields = append(fields, payment.FieldPartyIDFrom)
	}
	if m.party_id_to != nil {
		fields = append(fields, payment.FieldPartyIDTo)
	}
	if m.role_type_id_to != nil {
		fields = append(fields, payment.FieldRoleTypeIDTo)
	}
	if m.status_id != nil {
		fields = append(fields, payment.FieldStatusID)
	}
	if m.effective_date != nil {
		fields = append(fields, payment.FieldEffectiveDate)
	}
	if m.payment_ref_num != nil {
		fields = append(fields, payment.FieldPaymentRefNum)
	}
	if m.amount != nil {
		fields = append(fields, payment.FieldAmount)
	}
	if m.currency_uom_id != nil {
		fields = append(fields, payment.FieldCurrencyUomID)
	}
	if m.comments != nil {
		fields = append(fields, payment.FieldComments)
	}
	if m.fin_account_trans_id != nil {
		fields = append(fields, payment.FieldFinAccountTransID)
	}
	if m.override_gl_account_id != nil {
		fields = append(fields, payment.FieldOverrideGlAccountID)
	}
	if m.actual_currency_amount != nil {
		fields = append(fields, payment.FieldActualCurrencyAmount)
	}
	if m.actual_currency_uom_id != nil {
		fields = append(fields, payment.FieldActualCurrencyUomID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PaymentMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case payment.FieldCreateTime:
		return m.CreateTime()
	case payment.FieldUpdateTime:
		return m.UpdateTime()
	case payment.FieldPaymentTypeID:
		return m.PaymentTypeID()
	case payment.FieldPaymentMethodTypeID:
		return m.PaymentMethodTypeID()
	case payment.FieldPaymentMethodID:
		return m.PaymentMethodID()
	case payment.FieldPaymentGatewayResponseID:
		return m.PaymentGatewayResponseID()
	case payment.FieldPaymentPreferenceID:
		return m.PaymentPreferenceID()
	case payment.FieldPartyIDFrom:
		return m.PartyIDFrom()
	case payment.FieldPartyIDTo:
		return m.PartyIDTo()
	case payment.FieldRoleTypeIDTo:
		return m.RoleTypeIDTo()
	case payment.FieldStatusID:
		return m.StatusID()
	case payment.FieldEffectiveDate:
		return m.EffectiveDate()
	case payment.FieldPaymentRefNum:
		return m.PaymentRefNum()
	case payment.FieldAmount:
		return m.Amount()
	case payment.FieldCurrencyUomID:
		return m.CurrencyUomID()
	case payment.FieldComments:
		return m.Comments()
	case payment.FieldFinAccountTransID:
		return m.FinAccountTransID()
	case payment.FieldOverrideGlAccountID:
		return m.OverrideGlAccountID()
	case payment.FieldActualCurrencyAmount:
		return m.ActualCurrencyAmount()
	case payment.FieldActualCurrencyUomID:
		return m.ActualCurrencyUomID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PaymentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case payment.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case payment.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case payment.FieldPaymentTypeID:
		return m.OldPaymentTypeID(ctx)
	case payment.FieldPaymentMethodTypeID:
		return m.OldPaymentMethodTypeID(ctx)
	case payment.FieldPaymentMethodID:
		return m.OldPaymentMethodID(ctx)
	case payment.FieldPaymentGatewayResponseID:
		return m.OldPaymentGatewayResponseID(ctx)
	case payment.FieldPaymentPreferenceID:
		return m.OldPaymentPreferenceID(ctx)
	case payment.FieldPartyIDFrom:
		return m.OldPartyIDFrom(ctx)
	case payment.FieldPartyIDTo:
		return m.OldPartyIDTo(ctx)
	case payment.FieldRoleTypeIDTo:
		return m.OldRoleTypeIDTo(ctx)
	case payment.FieldStatusID:
		return m.OldStatusID(ctx)
	case payment.FieldEffectiveDate:
		return m.OldEffectiveDate(ctx)
	case payment.FieldPaymentRefNum:
		return m.OldPaymentRefNum(ctx)
	case payment.FieldAmount:
		return m.OldAmount(ctx)
	case payment.FieldCurrencyUomID:
		return m.OldCurrencyUomID(ctx)
	case payment.FieldComments:
		return m.OldComments(ctx)
	case payment.FieldFinAccountTransID:
		return m.OldFinAccountTransID(ctx)
	case payment.FieldOverrideGlAccountID:
		return m.OldOverrideGlAccountID(ctx)
	case payment.FieldActualCurrencyAmount:
		return m.OldActualCurrencyAmount(ctx)
	case payment.FieldActualCurrencyUomID:
		return m.OldActualCurrencyUomID(ctx)
	}
	return nil, fmt.Errorf("unknown Payment field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PaymentMutation) SetField(name string, value ent.Value) error {
	switch name {
	case payment.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case payment.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case payment.FieldPaymentTypeID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPaymentTypeID(v)
		return nil
	case payment.FieldPaymentMethodTypeID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPaymentMethodTypeID(v)
		return nil
	case payment.FieldPaymentMethodID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPaymentMethodID(v)
		return nil
	case payment.FieldPaymentGatewayResponseID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPaymentGatewayResponseID(v)
		return nil
	case payment.FieldPaymentPreferenceID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPaymentPreferenceID(v)
		return nil
	case payment.FieldPartyIDFrom:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPartyIDFrom(v)
		return nil
	case payment.FieldPartyIDTo:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPartyIDTo(v)
		return nil
	case payment.FieldRoleTypeIDTo:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRoleTypeIDTo(v)
		return nil
	case payment.FieldStatusID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatusID(v)
		return nil
	case payment.FieldEffectiveDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEffectiveDate(v)
		return nil
	case payment.FieldPaymentRefNum:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPaymentRefNum(v)
		return nil
	case payment.FieldAmount:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmount(v)
		return nil
	case payment.FieldCurrencyUomID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCurrencyUomID(v)
		return nil
	case payment.FieldComments:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetComments(v)
		return nil
	case payment.FieldFinAccountTransID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFinAccountTransID(v)
		return nil
	case payment.FieldOverrideGlAccountID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOverrideGlAccountID(v)
		return nil
	case payment.FieldActualCurrencyAmount:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActualCurrencyAmount(v)
		return nil
	case payment.FieldActualCurrencyUomID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActualCurrencyUomID(v)
		return nil
	}
	return fmt.Errorf("unknown Payment field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PaymentMutation) AddedFields() []string {
	var fields []string
	if m.addpayment_type_id != nil {
		fields = append(fields, payment.FieldPaymentTypeID)
	}
	if m.addpayment_method_type_id != nil {
		fields = append(fields, payment.FieldPaymentMethodTypeID)
	}
	if m.addpayment_method_id != nil {
		fields = append(fields, payment.FieldPaymentMethodID)
	}
	if m.addpayment_gateway_response_id != nil {
		fields = append(fields, payment.FieldPaymentGatewayResponseID)
	}
	if m.addpayment_preference_id != nil {
		fields = append(fields, payment.FieldPaymentPreferenceID)
	}
	if m.addparty_id_from != nil {
		fields = append(fields, payment.FieldPartyIDFrom)
	}
	if m.addparty_id_to != nil {
		fields = append(fields, payment.FieldPartyIDTo)
	}
	if m.addrole_type_id_to != nil {
		fields = append(fields, payment.FieldRoleTypeIDTo)
	}
	if m.addstatus_id != nil {
		fields = append(fields, payment.FieldStatusID)
	}
	if m.addamount != nil {
		fields = append(fields, payment.FieldAmount)
	}
	if m.addcurrency_uom_id != nil {
		fields = append(fields, payment.FieldCurrencyUomID)
	}
	if m.addfin_account_trans_id != nil {
		fields = append(fields, payment.FieldFinAccountTransID)
	}
	if m.addoverride_gl_account_id != nil {
		fields = append(fields, payment.FieldOverrideGlAccountID)
	}
	if m.addactual_currency_amount != nil {
		fields = append(fields, payment.FieldActualCurrencyAmount)
	}
	if m.addactual_currency_uom_id != nil {
		fields = append(fields, payment.FieldActualCurrencyUomID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PaymentMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case payment.FieldPaymentTypeID:
		return m.AddedPaymentTypeID()
	case payment.FieldPaymentMethodTypeID:
		return m.AddedPaymentMethodTypeID()
	case payment.FieldPaymentMethodID:
		return m.AddedPaymentMethodID()
	case payment.FieldPaymentGatewayResponseID:
		return m.AddedPaymentGatewayResponseID()
	case payment.FieldPaymentPreferenceID:
		return m.AddedPaymentPreferenceID()
	case payment.FieldPartyIDFrom:
		return m.AddedPartyIDFrom()
	case payment.FieldPartyIDTo:
		return m.AddedPartyIDTo()
	case payment.FieldRoleTypeIDTo:
		return m.AddedRoleTypeIDTo()
	case payment.FieldStatusID:
		return m.AddedStatusID()
	case payment.FieldAmount:
		return m.AddedAmount()
	case payment.FieldCurrencyUomID:
		return m.AddedCurrencyUomID()
	case payment.FieldFinAccountTransID:
		return m.AddedFinAccountTransID()
	case payment.FieldOverrideGlAccountID:
		return m.AddedOverrideGlAccountID()
	case payment.FieldActualCurrencyAmount:
		return m.AddedActualCurrencyAmount()
	case payment.FieldActualCurrencyUomID:
		return m.AddedActualCurrencyUomID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PaymentMutation) AddField(name string, value ent.Value) error {
	switch name {
	case payment.FieldPaymentTypeID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPaymentTypeID(v)
		return nil
	case payment.FieldPaymentMethodTypeID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPaymentMethodTypeID(v)
		return nil
	case payment.FieldPaymentMethodID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPaymentMethodID(v)
		return nil
	case payment.FieldPaymentGatewayResponseID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPaymentGatewayResponseID(v)
		return nil
	case payment.FieldPaymentPreferenceID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPaymentPreferenceID(v)
		return nil
	case payment.FieldPartyIDFrom:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPartyIDFrom(v)
		return nil
	case payment.FieldPartyIDTo:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPartyIDTo(v)
		return nil
	case payment.FieldRoleTypeIDTo:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRoleTypeIDTo(v)
		return nil
	case payment.FieldStatusID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatusID(v)
		return nil
	case payment.FieldAmount:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAmount(v)
		return nil
	case payment.FieldCurrencyUomID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCurrencyUomID(v)
		return nil
	case payment.FieldFinAccountTransID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddFinAccountTransID(v)
		return nil
	case payment.FieldOverrideGlAccountID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOverrideGlAccountID(v)
		return nil
	case payment.FieldActualCurrencyAmount:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddActualCurrencyAmount(v)
		return nil
	case payment.FieldActualCurrencyUomID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddActualCurrencyUomID(v)
		return nil
	}
	return fmt.Errorf("unknown Payment numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PaymentMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(payment.FieldPaymentTypeID) {
		fields = append(fields, payment.FieldPaymentTypeID)
	}
	if m.FieldCleared(payment.FieldPaymentMethodTypeID) {
		fields = append(fields, payment.FieldPaymentMethodTypeID)
	}
	if m.FieldCleared(payment.FieldPaymentMethodID) {
		fields = append(fields, payment.FieldPaymentMethodID)
	}
	if m.FieldCleared(payment.FieldPaymentGatewayResponseID) {
		fields = append(fields, payment.FieldPaymentGatewayResponseID)
	}
	if m.FieldCleared(payment.FieldPaymentPreferenceID) {
		fields = append(fields, payment.FieldPaymentPreferenceID)
	}
	if m.FieldCleared(payment.FieldPartyIDFrom) {
		fields = append(fields, payment.FieldPartyIDFrom)
	}
	if m.FieldCleared(payment.FieldPartyIDTo) {
		fields = append(fields, payment.FieldPartyIDTo)
	}
	if m.FieldCleared(payment.FieldRoleTypeIDTo) {
		fields = append(fields, payment.FieldRoleTypeIDTo)
	}
	if m.FieldCleared(payment.FieldStatusID) {
		fields = append(fields, payment.FieldStatusID)
	}
	if m.FieldCleared(payment.FieldEffectiveDate) {
		fields = append(fields, payment.FieldEffectiveDate)
	}
	if m.FieldCleared(payment.FieldPaymentRefNum) {
		fields = append(fields, payment.FieldPaymentRefNum)
	}
	if m.FieldCleared(payment.FieldAmount) {
		fields = append(fields, payment.FieldAmount)
	}
	if m.FieldCleared(payment.FieldCurrencyUomID) {
		fields = append(fields, payment.FieldCurrencyUomID)
	}
	if m.FieldCleared(payment.FieldComments) {
		fields = append(fields, payment.FieldComments)
	}
	if m.FieldCleared(payment.FieldFinAccountTransID) {
		fields = append(fields, payment.FieldFinAccountTransID)
	}
	if m.FieldCleared(payment.FieldOverrideGlAccountID) {
		fields = append(fields, payment.FieldOverrideGlAccountID)
	}
	if m.FieldCleared(payment.FieldActualCurrencyAmount) {
		fields = append(fields, payment.FieldActualCurrencyAmount)
	}
	if m.FieldCleared(payment.FieldActualCurrencyUomID) {
		fields = append(fields, payment.FieldActualCurrencyUomID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PaymentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PaymentMutation) ClearField(name string) error {
	switch name {
	case payment.FieldPaymentTypeID:
		m.ClearPaymentTypeID()
		return nil
	case payment.FieldPaymentMethodTypeID:
		m.ClearPaymentMethodTypeID()
		return nil
	case payment.FieldPaymentMethodID:
		m.ClearPaymentMethodID()
		return nil
	case payment.FieldPaymentGatewayResponseID:
		m.ClearPaymentGatewayResponseID()
		return nil
	case payment.FieldPaymentPreferenceID:
		m.ClearPaymentPreferenceID()
		return nil
	case payment.FieldPartyIDFrom:
		m.ClearPartyIDFrom()
		return nil
	case payment.FieldPartyIDTo:
		m.ClearPartyIDTo()
		return nil
	case payment.FieldRoleTypeIDTo:
		m.ClearRoleTypeIDTo()
		return nil
	case payment.FieldStatusID:
		m.ClearStatusID()
		return nil
	case payment.FieldEffectiveDate:
		m.ClearEffectiveDate()
		return nil
	case payment.FieldPaymentRefNum:
		m.ClearPaymentRefNum()
		return nil
	case payment.FieldAmount:
		m.ClearAmount()
		return nil
	case payment.FieldCurrencyUomID:
		m.ClearCurrencyUomID()
		return nil
	case payment.FieldComments:
		m.ClearComments()
		return nil
	case payment.FieldFinAccountTransID:
		m.ClearFinAccountTransID()
		return nil
	case payment.FieldOverrideGlAccountID:
		m.ClearOverrideGlAccountID()
		return nil
	case payment.FieldActualCurrencyAmount:
		m.ClearActualCurrencyAmount()
		return nil
	case payment.FieldActualCurrencyUomID:
		m.ClearActualCurrencyUomID()
		return nil
	}
	return fmt.Errorf("unknown Payment nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PaymentMutation) ResetField(name string) error {
	switch name {
	case payment.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case payment.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case payment.FieldPaymentTypeID:
		m.ResetPaymentTypeID()
		return nil
	case payment.FieldPaymentMethodTypeID:
		m.ResetPaymentMethodTypeID()
		return nil
	case payment.FieldPaymentMethodID:
		m.ResetPaymentMethodID()
		return nil
	case payment.FieldPaymentGatewayResponseID:
		m.ResetPaymentGatewayResponseID()
		return nil
	case payment.FieldPaymentPreferenceID:
		m.ResetPaymentPreferenceID()
		return nil
	case payment.FieldPartyIDFrom:
		m.ResetPartyIDFrom()
		return nil
	case payment.FieldPartyIDTo:
		m.ResetPartyIDTo()
		return nil
	case payment.FieldRoleTypeIDTo:
		m.ResetRoleTypeIDTo()
		return nil
	case payment.FieldStatusID:
		m.ResetStatusID()
		return nil
	case payment.FieldEffectiveDate:
		m.ResetEffectiveDate()
		return nil
	case payment.FieldPaymentRefNum:
		m.ResetPaymentRefNum()
		return nil
	case payment.FieldAmount:
		m.ResetAmount()
		return nil
	case payment.FieldCurrencyUomID:
		m.ResetCurrencyUomID()
		return nil
	case payment.FieldComments:
		m.ResetComments()
		return nil
	case payment.FieldFinAccountTransID:
		m.ResetFinAccountTransID()
		return nil
	case payment.FieldOverrideGlAccountID:
		m.ResetOverrideGlAccountID()
		return nil
	case payment.FieldActualCurrencyAmount:
		m.ResetActualCurrencyAmount()
		return nil
	case payment.FieldActualCurrencyUomID:
		m.ResetActualCurrencyUomID()
		return nil
	}
	return fmt.Errorf("unknown Payment field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PaymentMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PaymentMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PaymentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PaymentMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PaymentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PaymentMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PaymentMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Payment unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PaymentMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Payment edge %s", name)
}

// ShipmentMutation represents an operation that mutates the Shipment nodes in the graph.
type ShipmentMutation struct {
	config
	op                                   Op
	typ                                  string
	id                                   *int
	create_time                          *time.Time
	update_time                          *time.Time
	shipment_type_id                     *int
	addshipment_type_id                  *int
	status_id                            *int
	addstatus_id                         *int
	primary_return_id                    *int
	addprimary_return_id                 *int
	primary_ship_group_seq_id            *int
	addprimary_ship_group_seq_id         *int
	picklist_bin_id                      *int
	addpicklist_bin_id                   *int
	estimated_ready_date                 *time.Time
	estimated_ship_date                  *time.Time
	estimated_ship_work_eff_id           *int
	addestimated_ship_work_eff_id        *int
	estimated_arrival_date               *time.Time
	estimated_arrival_work_eff_id        *int
	addestimated_arrival_work_eff_id     *int
	latest_cancel_date                   *time.Time
	estimated_ship_cost                  *float64
	addestimated_ship_cost               *float64
	currency_uom_id                      *int
	addcurrency_uom_id                   *int
	handling_instructions                *string
	origin_facility_id                   *int
	addorigin_facility_id                *int
	destination_facility_id              *int
	adddestination_facility_id           *int
	origin_contact_mech_id               *int
	addorigin_contact_mech_id            *int
	origin_telecom_number_id             *int
	addorigin_telecom_number_id          *int
	destination_contact_mech_id          *int
	adddestination_contact_mech_id       *int
	destination_telecom_number_id        *int
	adddestination_telecom_number_id     *int
	party_id_to                          *int
	addparty_id_to                       *int
	party_id_from                        *int
	addparty_id_from                     *int
	additional_shipping_charge           *float64
	addadditional_shipping_charge        *float64
	addtl_shipping_charge_desc           *string
	created_date                         *time.Time
	created_by_user_login                *string
	last_modified_date                   *time.Time
	last_modified_by_user_login          *string
	clearedFields                        map[string]struct{}
	primary_order_header                 *int
	clearedprimary_order_header          bool
	primary_order_item_ship_group        *int
	clearedprimary_order_item_ship_group bool
	item_issuances                       map[int]struct{}
	removeditem_issuances                map[int]struct{}
	cleareditem_issuances                bool
	shipment_items                       map[int]struct{}
	removedshipment_items                map[int]struct{}
	clearedshipment_items                bool
	done                                 bool
	oldValue                             func(context.Context) (*Shipment, error)
	predicates                           []predicate.Shipment
}

var _ ent.Mutation = (*ShipmentMutation)(nil)

// shipmentOption allows management of the mutation configuration using functional options.
type shipmentOption func(*ShipmentMutation)

// newShipmentMutation creates new mutation for the Shipment entity.
func newShipmentMutation(c config, op Op, opts ...shipmentOption) *ShipmentMutation {
	m := &ShipmentMutation{
		config:        c,
		op:            op,
		typ:           TypeShipment,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withShipmentID sets the ID field of the mutation.
func withShipmentID(id int) shipmentOption {
	return func(m *ShipmentMutation) {
		var (
			err   error
			once  sync.Once
			value *Shipment
		)
		m.oldValue = func(ctx context.Context) (*Shipment, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Shipment.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withShipment sets the old Shipment of the mutation.
func withShipment(node *Shipment) shipmentOption {
	return func(m *ShipmentMutation) {
		m.oldValue = func(context.Context) (*Shipment, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ShipmentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ShipmentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *ShipmentMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreateTime sets the "create_time" field.
func (m *ShipmentMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *ShipmentMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Shipment entity.
// If the Shipment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShipmentMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *ShipmentMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *ShipmentMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *ShipmentMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Shipment entity.
// If the Shipment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShipmentMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *ShipmentMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetShipmentTypeID sets the "shipment_type_id" field.
func (m *ShipmentMutation) SetShipmentTypeID(i int) {
	m.shipment_type_id = &i
	m.addshipment_type_id = nil
}

// ShipmentTypeID returns the value of the "shipment_type_id" field in the mutation.
func (m *ShipmentMutation) ShipmentTypeID() (r int, exists bool) {
	v := m.shipment_type_id
	if v == nil {
		return
	}
	return *v, true
}

// OldShipmentTypeID returns the old "shipment_type_id" field's value of the Shipment entity.
// If the Shipment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShipmentMutation) OldShipmentTypeID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldShipmentTypeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldShipmentTypeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShipmentTypeID: %w", err)
	}
	return oldValue.ShipmentTypeID, nil
}

// AddShipmentTypeID adds i to the "shipment_type_id" field.
func (m *ShipmentMutation) AddShipmentTypeID(i int) {
	if m.addshipment_type_id != nil {
		*m.addshipment_type_id += i
	} else {
		m.addshipment_type_id = &i
	}
}

// AddedShipmentTypeID returns the value that was added to the "shipment_type_id" field in this mutation.
func (m *ShipmentMutation) AddedShipmentTypeID() (r int, exists bool) {
	v := m.addshipment_type_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearShipmentTypeID clears the value of the "shipment_type_id" field.
func (m *ShipmentMutation) ClearShipmentTypeID() {
	m.shipment_type_id = nil
	m.addshipment_type_id = nil
	m.clearedFields[shipment.FieldShipmentTypeID] = struct{}{}
}

// ShipmentTypeIDCleared returns if the "shipment_type_id" field was cleared in this mutation.
func (m *ShipmentMutation) ShipmentTypeIDCleared() bool {
	_, ok := m.clearedFields[shipment.FieldShipmentTypeID]
	return ok
}

// ResetShipmentTypeID resets all changes to the "shipment_type_id" field.
func (m *ShipmentMutation) ResetShipmentTypeID() {
	m.shipment_type_id = nil
	m.addshipment_type_id = nil
	delete(m.clearedFields, shipment.FieldShipmentTypeID)
}

// SetStatusID sets the "status_id" field.
func (m *ShipmentMutation) SetStatusID(i int) {
	m.status_id = &i
	m.addstatus_id = nil
}

// StatusID returns the value of the "status_id" field in the mutation.
func (m *ShipmentMutation) StatusID() (r int, exists bool) {
	v := m.status_id
	if v == nil {
		return
	}
	return *v, true
}

// OldStatusID returns the old "status_id" field's value of the Shipment entity.
// If the Shipment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShipmentMutation) OldStatusID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldStatusID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldStatusID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatusID: %w", err)
	}
	return oldValue.StatusID, nil
}

// AddStatusID adds i to the "status_id" field.
func (m *ShipmentMutation) AddStatusID(i int) {
	if m.addstatus_id != nil {
		*m.addstatus_id += i
	} else {
		m.addstatus_id = &i
	}
}

// AddedStatusID returns the value that was added to the "status_id" field in this mutation.
func (m *ShipmentMutation) AddedStatusID() (r int, exists bool) {
	v := m.addstatus_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearStatusID clears the value of the "status_id" field.
func (m *ShipmentMutation) ClearStatusID() {
	m.status_id = nil
	m.addstatus_id = nil
	m.clearedFields[shipment.FieldStatusID] = struct{}{}
}

// StatusIDCleared returns if the "status_id" field was cleared in this mutation.
func (m *ShipmentMutation) StatusIDCleared() bool {
	_, ok := m.clearedFields[shipment.FieldStatusID]
	return ok
}

// ResetStatusID resets all changes to the "status_id" field.
func (m *ShipmentMutation) ResetStatusID() {
	m.status_id = nil
	m.addstatus_id = nil
	delete(m.clearedFields, shipment.FieldStatusID)
}

// SetPrimaryReturnID sets the "primary_return_id" field.
func (m *ShipmentMutation) SetPrimaryReturnID(i int) {
	m.primary_return_id = &i
	m.addprimary_return_id = nil
}

// PrimaryReturnID returns the value of the "primary_return_id" field in the mutation.
func (m *ShipmentMutation) PrimaryReturnID() (r int, exists bool) {
	v := m.primary_return_id
	if v == nil {
		return
	}
	return *v, true
}

// OldPrimaryReturnID returns the old "primary_return_id" field's value of the Shipment entity.
// If the Shipment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShipmentMutation) OldPrimaryReturnID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPrimaryReturnID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPrimaryReturnID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrimaryReturnID: %w", err)
	}
	return oldValue.PrimaryReturnID, nil
}

// AddPrimaryReturnID adds i to the "primary_return_id" field.
func (m *ShipmentMutation) AddPrimaryReturnID(i int) {
	if m.addprimary_return_id != nil {
		*m.addprimary_return_id += i
	} else {
		m.addprimary_return_id = &i
	}
}

// AddedPrimaryReturnID returns the value that was added to the "primary_return_id" field in this mutation.
func (m *ShipmentMutation) AddedPrimaryReturnID() (r int, exists bool) {
	v := m.addprimary_return_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearPrimaryReturnID clears the value of the "primary_return_id" field.
func (m *ShipmentMutation) ClearPrimaryReturnID() {
	m.primary_return_id = nil
	m.addprimary_return_id = nil
	m.clearedFields[shipment.FieldPrimaryReturnID] = struct{}{}
}

// PrimaryReturnIDCleared returns if the "primary_return_id" field was cleared in this mutation.
func (m *ShipmentMutation) PrimaryReturnIDCleared() bool {
	_, ok := m.clearedFields[shipment.FieldPrimaryReturnID]
	return ok
}

// ResetPrimaryReturnID resets all changes to the "primary_return_id" field.
func (m *ShipmentMutation) ResetPrimaryReturnID() {
	m.primary_return_id = nil
	m.addprimary_return_id = nil
	delete(m.clearedFields, shipment.FieldPrimaryReturnID)
}

// SetPrimaryShipGroupSeqID sets the "primary_ship_group_seq_id" field.
func (m *ShipmentMutation) SetPrimaryShipGroupSeqID(i int) {
	m.primary_ship_group_seq_id = &i
	m.addprimary_ship_group_seq_id = nil
}

// PrimaryShipGroupSeqID returns the value of the "primary_ship_group_seq_id" field in the mutation.
func (m *ShipmentMutation) PrimaryShipGroupSeqID() (r int, exists bool) {
	v := m.primary_ship_group_seq_id
	if v == nil {
		return
	}
	return *v, true
}

// OldPrimaryShipGroupSeqID returns the old "primary_ship_group_seq_id" field's value of the Shipment entity.
// If the Shipment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShipmentMutation) OldPrimaryShipGroupSeqID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPrimaryShipGroupSeqID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPrimaryShipGroupSeqID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrimaryShipGroupSeqID: %w", err)
	}
	return oldValue.PrimaryShipGroupSeqID, nil
}

// AddPrimaryShipGroupSeqID adds i to the "primary_ship_group_seq_id" field.
func (m *ShipmentMutation) AddPrimaryShipGroupSeqID(i int) {
	if m.addprimary_ship_group_seq_id != nil {
		*m.addprimary_ship_group_seq_id += i
	} else {
		m.addprimary_ship_group_seq_id = &i
	}
}

// AddedPrimaryShipGroupSeqID returns the value that was added to the "primary_ship_group_seq_id" field in this mutation.
func (m *ShipmentMutation) AddedPrimaryShipGroupSeqID() (r int, exists bool) {
	v := m.addprimary_ship_group_seq_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearPrimaryShipGroupSeqID clears the value of the "primary_ship_group_seq_id" field.
func (m *ShipmentMutation) ClearPrimaryShipGroupSeqID() {
	m.primary_ship_group_seq_id = nil
	m.addprimary_ship_group_seq_id = nil
	m.clearedFields[shipment.FieldPrimaryShipGroupSeqID] = struct{}{}
}

// PrimaryShipGroupSeqIDCleared returns if the "primary_ship_group_seq_id" field was cleared in this mutation.
func (m *ShipmentMutation) PrimaryShipGroupSeqIDCleared() bool {
	_, ok := m.clearedFields[shipment.FieldPrimaryShipGroupSeqID]
	return ok
}

// ResetPrimaryShipGroupSeqID resets all changes to the "primary_ship_group_seq_id" field.
func (m *ShipmentMutation) ResetPrimaryShipGroupSeqID() {
	m.primary_ship_group_seq_id = nil
	m.addprimary_ship_group_seq_id = nil
	delete(m.clearedFields, shipment.FieldPrimaryShipGroupSeqID)
}

// SetPicklistBinID sets the "picklist_bin_id" field.
func (m *ShipmentMutation) SetPicklistBinID(i int) {
	m.picklist_bin_id = &i
	m.addpicklist_bin_id = nil
}

// PicklistBinID returns the value of the "picklist_bin_id" field in the mutation.
func (m *ShipmentMutation) PicklistBinID() (r int, exists bool) {
	v := m.picklist_bin_id
	if v == nil {
		return
	}
	return *v, true
}

// OldPicklistBinID returns the old "picklist_bin_id" field's value of the Shipment entity.
// If the Shipment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShipmentMutation) OldPicklistBinID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPicklistBinID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPicklistBinID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPicklistBinID: %w", err)
	}
	return oldValue.PicklistBinID, nil
}

// AddPicklistBinID adds i to the "picklist_bin_id" field.
func (m *ShipmentMutation) AddPicklistBinID(i int) {
	if m.addpicklist_bin_id != nil {
		*m.addpicklist_bin_id += i
	} else {
		m.addpicklist_bin_id = &i
	}
}

// AddedPicklistBinID returns the value that was added to the "picklist_bin_id" field in this mutation.
func (m *ShipmentMutation) AddedPicklistBinID() (r int, exists bool) {
	v := m.addpicklist_bin_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearPicklistBinID clears the value of the "picklist_bin_id" field.
func (m *ShipmentMutation) ClearPicklistBinID() {
	m.picklist_bin_id = nil
	m.addpicklist_bin_id = nil
	m.clearedFields[shipment.FieldPicklistBinID] = struct{}{}
}

// PicklistBinIDCleared returns if the "picklist_bin_id" field was cleared in this mutation.
func (m *ShipmentMutation) PicklistBinIDCleared() bool {
	_, ok := m.clearedFields[shipment.FieldPicklistBinID]
	return ok
}

// ResetPicklistBinID resets all changes to the "picklist_bin_id" field.
func (m *ShipmentMutation) ResetPicklistBinID() {
	m.picklist_bin_id = nil
	m.addpicklist_bin_id = nil
	delete(m.clearedFields, shipment.FieldPicklistBinID)
}

// SetEstimatedReadyDate sets the "estimated_ready_date" field.
func (m *ShipmentMutation) SetEstimatedReadyDate(t time.Time) {
	m.estimated_ready_date = &t
}

// EstimatedReadyDate returns the value of the "estimated_ready_date" field in the mutation.
func (m *ShipmentMutation) EstimatedReadyDate() (r time.Time, exists bool) {
	v := m.estimated_ready_date
	if v == nil {
		return
	}
	return *v, true
}

// OldEstimatedReadyDate returns the old "estimated_ready_date" field's value of the Shipment entity.
// If the Shipment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShipmentMutation) OldEstimatedReadyDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEstimatedReadyDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEstimatedReadyDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEstimatedReadyDate: %w", err)
	}
	return oldValue.EstimatedReadyDate, nil
}

// ClearEstimatedReadyDate clears the value of the "estimated_ready_date" field.
func (m *ShipmentMutation) ClearEstimatedReadyDate() {
	m.estimated_ready_date = nil
	m.clearedFields[shipment.FieldEstimatedReadyDate] = struct{}{}
}

// EstimatedReadyDateCleared returns if the "estimated_ready_date" field was cleared in this mutation.
func (m *ShipmentMutation) EstimatedReadyDateCleared() bool {
	_, ok := m.clearedFields[shipment.FieldEstimatedReadyDate]
	return ok
}

// ResetEstimatedReadyDate resets all changes to the "estimated_ready_date" field.
func (m *ShipmentMutation) ResetEstimatedReadyDate() {
	m.estimated_ready_date = nil
	delete(m.clearedFields, shipment.FieldEstimatedReadyDate)
}

// SetEstimatedShipDate sets the "estimated_ship_date" field.
func (m *ShipmentMutation) SetEstimatedShipDate(t time.Time) {
	m.estimated_ship_date = &t
}

// EstimatedShipDate returns the value of the "estimated_ship_date" field in the mutation.
func (m *ShipmentMutation) EstimatedShipDate() (r time.Time, exists bool) {
	v := m.estimated_ship_date
	if v == nil {
		return
	}
	return *v, true
}

// OldEstimatedShipDate returns the old "estimated_ship_date" field's value of the Shipment entity.
// If the Shipment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShipmentMutation) OldEstimatedShipDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEstimatedShipDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEstimatedShipDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEstimatedShipDate: %w", err)
	}
	return oldValue.EstimatedShipDate, nil
}

// ClearEstimatedShipDate clears the value of the "estimated_ship_date" field.
func (m *ShipmentMutation) ClearEstimatedShipDate() {
	m.estimated_ship_date = nil
	m.clearedFields[shipment.FieldEstimatedShipDate] = struct{}{}
}

// EstimatedShipDateCleared returns if the "estimated_ship_date" field was cleared in this mutation.
func (m *ShipmentMutation) EstimatedShipDateCleared() bool {
	_, ok := m.clearedFields[shipment.FieldEstimatedShipDate]
	return ok
}

// ResetEstimatedShipDate resets all changes to the "estimated_ship_date" field.
func (m *ShipmentMutation) ResetEstimatedShipDate() {
	m.estimated_ship_date = nil
	delete(m.clearedFields, shipment.FieldEstimatedShipDate)
}

// SetEstimatedShipWorkEffID sets the "estimated_ship_work_eff_id" field.
func (m *ShipmentMutation) SetEstimatedShipWorkEffID(i int) {
	m.estimated_ship_work_eff_id = &i
	m.addestimated_ship_work_eff_id = nil
}

// EstimatedShipWorkEffID returns the value of the "estimated_ship_work_eff_id" field in the mutation.
func (m *ShipmentMutation) EstimatedShipWorkEffID() (r int, exists bool) {
	v := m.estimated_ship_work_eff_id
	if v == nil {
		return
	}
	return *v, true
}

// OldEstimatedShipWorkEffID returns the old "estimated_ship_work_eff_id" field's value of the Shipment entity.
// If the Shipment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShipmentMutation) OldEstimatedShipWorkEffID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEstimatedShipWorkEffID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEstimatedShipWorkEffID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEstimatedShipWorkEffID: %w", err)
	}
	return oldValue.EstimatedShipWorkEffID, nil
}

// AddEstimatedShipWorkEffID adds i to the "estimated_ship_work_eff_id" field.
func (m *ShipmentMutation) AddEstimatedShipWorkEffID(i int) {
	if m.addestimated_ship_work_eff_id != nil {
		*m.addestimated_ship_work_eff_id += i
	} else {
		m.addestimated_ship_work_eff_id = &i
	}
}

// AddedEstimatedShipWorkEffID returns the value that was added to the "estimated_ship_work_eff_id" field in this mutation.
func (m *ShipmentMutation) AddedEstimatedShipWorkEffID() (r int, exists bool) {
	v := m.addestimated_ship_work_eff_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearEstimatedShipWorkEffID clears the value of the "estimated_ship_work_eff_id" field.
func (m *ShipmentMutation) ClearEstimatedShipWorkEffID() {
	m.estimated_ship_work_eff_id = nil
	m.addestimated_ship_work_eff_id = nil
	m.clearedFields[shipment.FieldEstimatedShipWorkEffID] = struct{}{}
}

// EstimatedShipWorkEffIDCleared returns if the "estimated_ship_work_eff_id" field was cleared in this mutation.
func (m *ShipmentMutation) EstimatedShipWorkEffIDCleared() bool {
	_, ok := m.clearedFields[shipment.FieldEstimatedShipWorkEffID]
	return ok
}

// ResetEstimatedShipWorkEffID resets all changes to the "estimated_ship_work_eff_id" field.
func (m *ShipmentMutation) ResetEstimatedShipWorkEffID() {
	m.estimated_ship_work_eff_id = nil
	m.addestimated_ship_work_eff_id = nil
	delete(m.clearedFields, shipment.FieldEstimatedShipWorkEffID)
}

// SetEstimatedArrivalDate sets the "estimated_arrival_date" field.
func (m *ShipmentMutation) SetEstimatedArrivalDate(t time.Time) {
	m.estimated_arrival_date = &t
}

// EstimatedArrivalDate returns the value of the "estimated_arrival_date" field in the mutation.
func (m *ShipmentMutation) EstimatedArrivalDate() (r time.Time, exists bool) {
	v := m.estimated_arrival_date
	if v == nil {
		return
	}
	return *v, true
}

// OldEstimatedArrivalDate returns the old "estimated_arrival_date" field's value of the Shipment entity.
// If the Shipment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShipmentMutation) OldEstimatedArrivalDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEstimatedArrivalDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEstimatedArrivalDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEstimatedArrivalDate: %w", err)
	}
	return oldValue.EstimatedArrivalDate, nil
}

// ClearEstimatedArrivalDate clears the value of the "estimated_arrival_date" field.
func (m *ShipmentMutation) ClearEstimatedArrivalDate() {
	m.estimated_arrival_date = nil
	m.clearedFields[shipment.FieldEstimatedArrivalDate] = struct{}{}
}

// EstimatedArrivalDateCleared returns if the "estimated_arrival_date" field was cleared in this mutation.
func (m *ShipmentMutation) EstimatedArrivalDateCleared() bool {
	_, ok := m.clearedFields[shipment.FieldEstimatedArrivalDate]
	return ok
}

// ResetEstimatedArrivalDate resets all changes to the "estimated_arrival_date" field.
func (m *ShipmentMutation) ResetEstimatedArrivalDate() {
	m.estimated_arrival_date = nil
	delete(m.clearedFields, shipment.FieldEstimatedArrivalDate)
}

// SetEstimatedArrivalWorkEffID sets the "estimated_arrival_work_eff_id" field.
func (m *ShipmentMutation) SetEstimatedArrivalWorkEffID(i int) {
	m.estimated_arrival_work_eff_id = &i
	m.addestimated_arrival_work_eff_id = nil
}

// EstimatedArrivalWorkEffID returns the value of the "estimated_arrival_work_eff_id" field in the mutation.
func (m *ShipmentMutation) EstimatedArrivalWorkEffID() (r int, exists bool) {
	v := m.estimated_arrival_work_eff_id
	if v == nil {
		return
	}
	return *v, true
}

// OldEstimatedArrivalWorkEffID returns the old "estimated_arrival_work_eff_id" field's value of the Shipment entity.
// If the Shipment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShipmentMutation) OldEstimatedArrivalWorkEffID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEstimatedArrivalWorkEffID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEstimatedArrivalWorkEffID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEstimatedArrivalWorkEffID: %w", err)
	}
	return oldValue.EstimatedArrivalWorkEffID, nil
}

// AddEstimatedArrivalWorkEffID adds i to the "estimated_arrival_work_eff_id" field.
func (m *ShipmentMutation) AddEstimatedArrivalWorkEffID(i int) {
	if m.addestimated_arrival_work_eff_id != nil {
		*m.addestimated_arrival_work_eff_id += i
	} else {
		m.addestimated_arrival_work_eff_id = &i
	}
}

// AddedEstimatedArrivalWorkEffID returns the value that was added to the "estimated_arrival_work_eff_id" field in this mutation.
func (m *ShipmentMutation) AddedEstimatedArrivalWorkEffID() (r int, exists bool) {
	v := m.addestimated_arrival_work_eff_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearEstimatedArrivalWorkEffID clears the value of the "estimated_arrival_work_eff_id" field.
func (m *ShipmentMutation) ClearEstimatedArrivalWorkEffID() {
	m.estimated_arrival_work_eff_id = nil
	m.addestimated_arrival_work_eff_id = nil
	m.clearedFields[shipment.FieldEstimatedArrivalWorkEffID] = struct{}{}
}

// EstimatedArrivalWorkEffIDCleared returns if the "estimated_arrival_work_eff_id" field was cleared in this mutation.
func (m *ShipmentMutation) EstimatedArrivalWorkEffIDCleared() bool {
	_, ok := m.clearedFields[shipment.FieldEstimatedArrivalWorkEffID]
	return ok
}

// ResetEstimatedArrivalWorkEffID resets all changes to the "estimated_arrival_work_eff_id" field.
func (m *ShipmentMutation) ResetEstimatedArrivalWorkEffID() {
	m.estimated_arrival_work_eff_id = nil
	m.addestimated_arrival_work_eff_id = nil
	delete(m.clearedFields, shipment.FieldEstimatedArrivalWorkEffID)
}

// SetLatestCancelDate sets the "latest_cancel_date" field.
func (m *ShipmentMutation) SetLatestCancelDate(t time.Time) {
	m.latest_cancel_date = &t
}

// LatestCancelDate returns the value of the "latest_cancel_date" field in the mutation.
func (m *ShipmentMutation) LatestCancelDate() (r time.Time, exists bool) {
	v := m.latest_cancel_date
	if v == nil {
		return
	}
	return *v, true
}

// OldLatestCancelDate returns the old "latest_cancel_date" field's value of the Shipment entity.
// If the Shipment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShipmentMutation) OldLatestCancelDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldLatestCancelDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldLatestCancelDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLatestCancelDate: %w", err)
	}
	return oldValue.LatestCancelDate, nil
}

// ClearLatestCancelDate clears the value of the "latest_cancel_date" field.
func (m *ShipmentMutation) ClearLatestCancelDate() {
	m.latest_cancel_date = nil
	m.clearedFields[shipment.FieldLatestCancelDate] = struct{}{}
}

// LatestCancelDateCleared returns if the "latest_cancel_date" field was cleared in this mutation.
func (m *ShipmentMutation) LatestCancelDateCleared() bool {
	_, ok := m.clearedFields[shipment.FieldLatestCancelDate]
	return ok
}

// ResetLatestCancelDate resets all changes to the "latest_cancel_date" field.
func (m *ShipmentMutation) ResetLatestCancelDate() {
	m.latest_cancel_date = nil
	delete(m.clearedFields, shipment.FieldLatestCancelDate)
}

// SetEstimatedShipCost sets the "estimated_ship_cost" field.
func (m *ShipmentMutation) SetEstimatedShipCost(f float64) {
	m.estimated_ship_cost = &f
	m.addestimated_ship_cost = nil
}

// EstimatedShipCost returns the value of the "estimated_ship_cost" field in the mutation.
func (m *ShipmentMutation) EstimatedShipCost() (r float64, exists bool) {
	v := m.estimated_ship_cost
	if v == nil {
		return
	}
	return *v, true
}

// OldEstimatedShipCost returns the old "estimated_ship_cost" field's value of the Shipment entity.
// If the Shipment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShipmentMutation) OldEstimatedShipCost(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEstimatedShipCost is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEstimatedShipCost requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEstimatedShipCost: %w", err)
	}
	return oldValue.EstimatedShipCost, nil
}

// AddEstimatedShipCost adds f to the "estimated_ship_cost" field.
func (m *ShipmentMutation) AddEstimatedShipCost(f float64) {
	if m.addestimated_ship_cost != nil {
		*m.addestimated_ship_cost += f
	} else {
		m.addestimated_ship_cost = &f
	}
}

// AddedEstimatedShipCost returns the value that was added to the "estimated_ship_cost" field in this mutation.
func (m *ShipmentMutation) AddedEstimatedShipCost() (r float64, exists bool) {
	v := m.addestimated_ship_cost
	if v == nil {
		return
	}
	return *v, true
}

// ClearEstimatedShipCost clears the value of the "estimated_ship_cost" field.
func (m *ShipmentMutation) ClearEstimatedShipCost() {
	m.estimated_ship_cost = nil
	m.addestimated_ship_cost = nil
	m.clearedFields[shipment.FieldEstimatedShipCost] = struct{}{}
}

// EstimatedShipCostCleared returns if the "estimated_ship_cost" field was cleared in this mutation.
func (m *ShipmentMutation) EstimatedShipCostCleared() bool {
	_, ok := m.clearedFields[shipment.FieldEstimatedShipCost]
	return ok
}

// ResetEstimatedShipCost resets all changes to the "estimated_ship_cost" field.
func (m *ShipmentMutation) ResetEstimatedShipCost() {
	m.estimated_ship_cost = nil
	m.addestimated_ship_cost = nil
	delete(m.clearedFields, shipment.FieldEstimatedShipCost)
}

// SetCurrencyUomID sets the "currency_uom_id" field.
func (m *ShipmentMutation) SetCurrencyUomID(i int) {
	m.currency_uom_id = &i
	m.addcurrency_uom_id = nil
}

// CurrencyUomID returns the value of the "currency_uom_id" field in the mutation.
func (m *ShipmentMutation) CurrencyUomID() (r int, exists bool) {
	v := m.currency_uom_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCurrencyUomID returns the old "currency_uom_id" field's value of the Shipment entity.
// If the Shipment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShipmentMutation) OldCurrencyUomID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCurrencyUomID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCurrencyUomID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCurrencyUomID: %w", err)
	}
	return oldValue.CurrencyUomID, nil
}

// AddCurrencyUomID adds i to the "currency_uom_id" field.
func (m *ShipmentMutation) AddCurrencyUomID(i int) {
	if m.addcurrency_uom_id != nil {
		*m.addcurrency_uom_id += i
	} else {
		m.addcurrency_uom_id = &i
	}
}

// AddedCurrencyUomID returns the value that was added to the "currency_uom_id" field in this mutation.
func (m *ShipmentMutation) AddedCurrencyUomID() (r int, exists bool) {
	v := m.addcurrency_uom_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearCurrencyUomID clears the value of the "currency_uom_id" field.
func (m *ShipmentMutation) ClearCurrencyUomID() {
	m.currency_uom_id = nil
	m.addcurrency_uom_id = nil
	m.clearedFields[shipment.FieldCurrencyUomID] = struct{}{}
}

// CurrencyUomIDCleared returns if the "currency_uom_id" field was cleared in this mutation.
func (m *ShipmentMutation) CurrencyUomIDCleared() bool {
	_, ok := m.clearedFields[shipment.FieldCurrencyUomID]
	return ok
}

// ResetCurrencyUomID resets all changes to the "currency_uom_id" field.
func (m *ShipmentMutation) ResetCurrencyUomID() {
	m.currency_uom_id = nil
	m.addcurrency_uom_id = nil
	delete(m.clearedFields, shipment.FieldCurrencyUomID)
}

// SetHandlingInstructions sets the "handling_instructions" field.
func (m *ShipmentMutation) SetHandlingInstructions(s string) {
	m.handling_instructions = &s
}

// HandlingInstructions returns the value of the "handling_instructions" field in the mutation.
func (m *ShipmentMutation) HandlingInstructions() (r string, exists bool) {
	v := m.handling_instructions
	if v == nil {
		return
	}
	return *v, true
}

// OldHandlingInstructions returns the old "handling_instructions" field's value of the Shipment entity.
// If the Shipment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShipmentMutation) OldHandlingInstructions(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldHandlingInstructions is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldHandlingInstructions requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHandlingInstructions: %w", err)
	}
	return oldValue.HandlingInstructions, nil
}

// ClearHandlingInstructions clears the value of the "handling_instructions" field.
func (m *ShipmentMutation) ClearHandlingInstructions() {
	m.handling_instructions = nil
	m.clearedFields[shipment.FieldHandlingInstructions] = struct{}{}
}

// HandlingInstructionsCleared returns if the "handling_instructions" field was cleared in this mutation.
func (m *ShipmentMutation) HandlingInstructionsCleared() bool {
	_, ok := m.clearedFields[shipment.FieldHandlingInstructions]
	return ok
}

// ResetHandlingInstructions resets all changes to the "handling_instructions" field.
func (m *ShipmentMutation) ResetHandlingInstructions() {
	m.handling_instructions = nil
	delete(m.clearedFields, shipment.FieldHandlingInstructions)
}

// SetOriginFacilityID sets the "origin_facility_id" field.
func (m *ShipmentMutation) SetOriginFacilityID(i int) {
	m.origin_facility_id = &i
	m.addorigin_facility_id = nil
}

// OriginFacilityID returns the value of the "origin_facility_id" field in the mutation.
func (m *ShipmentMutation) OriginFacilityID() (r int, exists bool) {
	v := m.origin_facility_id
	if v == nil {
		return
	}
	return *v, true
}

// OldOriginFacilityID returns the old "origin_facility_id" field's value of the Shipment entity.
// If the Shipment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShipmentMutation) OldOriginFacilityID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldOriginFacilityID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldOriginFacilityID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOriginFacilityID: %w", err)
	}
	return oldValue.OriginFacilityID, nil
}

// AddOriginFacilityID adds i to the "origin_facility_id" field.
func (m *ShipmentMutation) AddOriginFacilityID(i int) {
	if m.addorigin_facility_id != nil {
		*m.addorigin_facility_id += i
	} else {
		m.addorigin_facility_id = &i
	}
}

// AddedOriginFacilityID returns the value that was added to the "origin_facility_id" field in this mutation.
func (m *ShipmentMutation) AddedOriginFacilityID() (r int, exists bool) {
	v := m.addorigin_facility_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearOriginFacilityID clears the value of the "origin_facility_id" field.
func (m *ShipmentMutation) ClearOriginFacilityID() {
	m.origin_facility_id = nil
	m.addorigin_facility_id = nil
	m.clearedFields[shipment.FieldOriginFacilityID] = struct{}{}
}

// OriginFacilityIDCleared returns if the "origin_facility_id" field was cleared in this mutation.
func (m *ShipmentMutation) OriginFacilityIDCleared() bool {
	_, ok := m.clearedFields[shipment.FieldOriginFacilityID]
	return ok
}

// ResetOriginFacilityID resets all changes to the "origin_facility_id" field.
func (m *ShipmentMutation) ResetOriginFacilityID() {
	m.origin_facility_id = nil
	m.addorigin_facility_id = nil
	delete(m.clearedFields, shipment.FieldOriginFacilityID)
}

// SetDestinationFacilityID sets the "destination_facility_id" field.
func (m *ShipmentMutation) SetDestinationFacilityID(i int) {
	m.destination_facility_id = &i
	m.adddestination_facility_id = nil
}

// DestinationFacilityID returns the value of the "destination_facility_id" field in the mutation.
func (m *ShipmentMutation) DestinationFacilityID() (r int, exists bool) {
	v := m.destination_facility_id
	if v == nil {
		return
	}
	return *v, true
}

// OldDestinationFacilityID returns the old "destination_facility_id" field's value of the Shipment entity.
// If the Shipment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShipmentMutation) OldDestinationFacilityID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDestinationFacilityID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDestinationFacilityID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDestinationFacilityID: %w", err)
	}
	return oldValue.DestinationFacilityID, nil
}

// AddDestinationFacilityID adds i to the "destination_facility_id" field.
func (m *ShipmentMutation) AddDestinationFacilityID(i int) {
	if m.adddestination_facility_id != nil {
		*m.adddestination_facility_id += i
	} else {
		m.adddestination_facility_id = &i
	}
}

// AddedDestinationFacilityID returns the value that was added to the "destination_facility_id" field in this mutation.
func (m *ShipmentMutation) AddedDestinationFacilityID() (r int, exists bool) {
	v := m.adddestination_facility_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearDestinationFacilityID clears the value of the "destination_facility_id" field.
func (m *ShipmentMutation) ClearDestinationFacilityID() {
	m.destination_facility_id = nil
	m.adddestination_facility_id = nil
	m.clearedFields[shipment.FieldDestinationFacilityID] = struct{}{}
}

// DestinationFacilityIDCleared returns if the "destination_facility_id" field was cleared in this mutation.
func (m *ShipmentMutation) DestinationFacilityIDCleared() bool {
	_, ok := m.clearedFields[shipment.FieldDestinationFacilityID]
	return ok
}

// ResetDestinationFacilityID resets all changes to the "destination_facility_id" field.
func (m *ShipmentMutation) ResetDestinationFacilityID() {
	m.destination_facility_id = nil
	m.adddestination_facility_id = nil
	delete(m.clearedFields, shipment.FieldDestinationFacilityID)
}

// SetOriginContactMechID sets the "origin_contact_mech_id" field.
func (m *ShipmentMutation) SetOriginContactMechID(i int) {
	m.origin_contact_mech_id = &i
	m.addorigin_contact_mech_id = nil
}

// OriginContactMechID returns the value of the "origin_contact_mech_id" field in the mutation.
func (m *ShipmentMutation) OriginContactMechID() (r int, exists bool) {
	v := m.origin_contact_mech_id
	if v == nil {
		return
	}
	return *v, true
}

// OldOriginContactMechID returns the old "origin_contact_mech_id" field's value of the Shipment entity.
// If the Shipment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShipmentMutation) OldOriginContactMechID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldOriginContactMechID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldOriginContactMechID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOriginContactMechID: %w", err)
	}
	return oldValue.OriginContactMechID, nil
}

// AddOriginContactMechID adds i to the "origin_contact_mech_id" field.
func (m *ShipmentMutation) AddOriginContactMechID(i int) {
	if m.addorigin_contact_mech_id != nil {
		*m.addorigin_contact_mech_id += i
	} else {
		m.addorigin_contact_mech_id = &i
	}
}

// AddedOriginContactMechID returns the value that was added to the "origin_contact_mech_id" field in this mutation.
func (m *ShipmentMutation) AddedOriginContactMechID() (r int, exists bool) {
	v := m.addorigin_contact_mech_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearOriginContactMechID clears the value of the "origin_contact_mech_id" field.
func (m *ShipmentMutation) ClearOriginContactMechID() {
	m.origin_contact_mech_id = nil
	m.addorigin_contact_mech_id = nil
	m.clearedFields[shipment.FieldOriginContactMechID] = struct{}{}
}

// OriginContactMechIDCleared returns if the "origin_contact_mech_id" field was cleared in this mutation.
func (m *ShipmentMutation) OriginContactMechIDCleared() bool {
	_, ok := m.clearedFields[shipment.FieldOriginContactMechID]
	return ok
}

// ResetOriginContactMechID resets all changes to the "origin_contact_mech_id" field.
func (m *ShipmentMutation) ResetOriginContactMechID() {
	m.origin_contact_mech_id = nil
	m.addorigin_contact_mech_id = nil
	delete(m.clearedFields, shipment.FieldOriginContactMechID)
}

// SetOriginTelecomNumberID sets the "origin_telecom_number_id" field.
func (m *ShipmentMutation) SetOriginTelecomNumberID(i int) {
	m.origin_telecom_number_id = &i
	m.addorigin_telecom_number_id = nil
}

// OriginTelecomNumberID returns the value of the "origin_telecom_number_id" field in the mutation.
func (m *ShipmentMutation) OriginTelecomNumberID() (r int, exists bool) {
	v := m.origin_telecom_number_id
	if v == nil {
		return
	}
	return *v, true
}

// OldOriginTelecomNumberID returns the old "origin_telecom_number_id" field's value of the Shipment entity.
// If the Shipment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShipmentMutation) OldOriginTelecomNumberID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldOriginTelecomNumberID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldOriginTelecomNumberID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOriginTelecomNumberID: %w", err)
	}
	return oldValue.OriginTelecomNumberID, nil
}

// AddOriginTelecomNumberID adds i to the "origin_telecom_number_id" field.
func (m *ShipmentMutation) AddOriginTelecomNumberID(i int) {
	if m.addorigin_telecom_number_id != nil {
		*m.addorigin_telecom_number_id += i
	} else {
		m.addorigin_telecom_number_id = &i
	}
}

// AddedOriginTelecomNumberID returns the value that was added to the "origin_telecom_number_id" field in this mutation.
func (m *ShipmentMutation) AddedOriginTelecomNumberID() (r int, exists bool) {
	v := m.addorigin_telecom_number_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearOriginTelecomNumberID clears the value of the "origin_telecom_number_id" field.
func (m *ShipmentMutation) ClearOriginTelecomNumberID() {
	m.origin_telecom_number_id = nil
	m.addorigin_telecom_number_id = nil
	m.clearedFields[shipment.FieldOriginTelecomNumberID] = struct{}{}
}

// OriginTelecomNumberIDCleared returns if the "origin_telecom_number_id" field was cleared in this mutation.
func (m *ShipmentMutation) OriginTelecomNumberIDCleared() bool {
	_, ok := m.clearedFields[shipment.FieldOriginTelecomNumberID]
	return ok
}

// ResetOriginTelecomNumberID resets all changes to the "origin_telecom_number_id" field.
func (m *ShipmentMutation) ResetOriginTelecomNumberID() {
	m.origin_telecom_number_id = nil
	m.addorigin_telecom_number_id = nil
	delete(m.clearedFields, shipment.FieldOriginTelecomNumberID)
}

// SetDestinationContactMechID sets the "destination_contact_mech_id" field.
func (m *ShipmentMutation) SetDestinationContactMechID(i int) {
	m.destination_contact_mech_id = &i
	m.adddestination_contact_mech_id = nil
}

// DestinationContactMechID returns the value of the "destination_contact_mech_id" field in the mutation.
func (m *ShipmentMutation) DestinationContactMechID() (r int, exists bool) {
	v := m.destination_contact_mech_id
	if v == nil {
		return
	}
	return *v, true
}

// OldDestinationContactMechID returns the old "destination_contact_mech_id" field's value of the Shipment entity.
// If the Shipment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShipmentMutation) OldDestinationContactMechID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDestinationContactMechID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDestinationContactMechID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDestinationContactMechID: %w", err)
	}
	return oldValue.DestinationContactMechID, nil
}

// AddDestinationContactMechID adds i to the "destination_contact_mech_id" field.
func (m *ShipmentMutation) AddDestinationContactMechID(i int) {
	if m.adddestination_contact_mech_id != nil {
		*m.adddestination_contact_mech_id += i
	} else {
		m.adddestination_contact_mech_id = &i
	}
}

// AddedDestinationContactMechID returns the value that was added to the "destination_contact_mech_id" field in this mutation.
func (m *ShipmentMutation) AddedDestinationContactMechID() (r int, exists bool) {
	v := m.adddestination_contact_mech_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearDestinationContactMechID clears the value of the "destination_contact_mech_id" field.
func (m *ShipmentMutation) ClearDestinationContactMechID() {
	m.destination_contact_mech_id = nil
	m.adddestination_contact_mech_id = nil
	m.clearedFields[shipment.FieldDestinationContactMechID] = struct{}{}
}

// DestinationContactMechIDCleared returns if the "destination_contact_mech_id" field was cleared in this mutation.
func (m *ShipmentMutation) DestinationContactMechIDCleared() bool {
	_, ok := m.clearedFields[shipment.FieldDestinationContactMechID]
	return ok
}

// ResetDestinationContactMechID resets all changes to the "destination_contact_mech_id" field.
func (m *ShipmentMutation) ResetDestinationContactMechID() {
	m.destination_contact_mech_id = nil
	m.adddestination_contact_mech_id = nil
	delete(m.clearedFields, shipment.FieldDestinationContactMechID)
}

// SetDestinationTelecomNumberID sets the "destination_telecom_number_id" field.
func (m *ShipmentMutation) SetDestinationTelecomNumberID(i int) {
	m.destination_telecom_number_id = &i
	m.adddestination_telecom_number_id = nil
}

// DestinationTelecomNumberID returns the value of the "destination_telecom_number_id" field in the mutation.
func (m *ShipmentMutation) DestinationTelecomNumberID() (r int, exists bool) {
	v := m.destination_telecom_number_id
	if v == nil {
		return
	}
	return *v, true
}

// OldDestinationTelecomNumberID returns the old "destination_telecom_number_id" field's value of the Shipment entity.
// If the Shipment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShipmentMutation) OldDestinationTelecomNumberID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDestinationTelecomNumberID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDestinationTelecomNumberID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDestinationTelecomNumberID: %w", err)
	}
	return oldValue.DestinationTelecomNumberID, nil
}

// AddDestinationTelecomNumberID adds i to the "destination_telecom_number_id" field.
func (m *ShipmentMutation) AddDestinationTelecomNumberID(i int) {
	if m.adddestination_telecom_number_id != nil {
		*m.adddestination_telecom_number_id += i
	} else {
		m.adddestination_telecom_number_id = &i
	}
}

// AddedDestinationTelecomNumberID returns the value that was added to the "destination_telecom_number_id" field in this mutation.
func (m *ShipmentMutation) AddedDestinationTelecomNumberID() (r int, exists bool) {
	v := m.adddestination_telecom_number_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearDestinationTelecomNumberID clears the value of the "destination_telecom_number_id" field.
func (m *ShipmentMutation) ClearDestinationTelecomNumberID() {
	m.destination_telecom_number_id = nil
	m.adddestination_telecom_number_id = nil
	m.clearedFields[shipment.FieldDestinationTelecomNumberID] = struct{}{}
}

// DestinationTelecomNumberIDCleared returns if the "destination_telecom_number_id" field was cleared in this mutation.
func (m *ShipmentMutation) DestinationTelecomNumberIDCleared() bool {
	_, ok := m.clearedFields[shipment.FieldDestinationTelecomNumberID]
	return ok
}

// ResetDestinationTelecomNumberID resets all changes to the "destination_telecom_number_id" field.
func (m *ShipmentMutation) ResetDestinationTelecomNumberID() {
	m.destination_telecom_number_id = nil
	m.adddestination_telecom_number_id = nil
	delete(m.clearedFields, shipment.FieldDestinationTelecomNumberID)
}

// SetPartyIDTo sets the "party_id_to" field.
func (m *ShipmentMutation) SetPartyIDTo(i int) {
	m.party_id_to = &i
	m.addparty_id_to = nil
}

// PartyIDTo returns the value of the "party_id_to" field in the mutation.
func (m *ShipmentMutation) PartyIDTo() (r int, exists bool) {
	v := m.party_id_to
	if v == nil {
		return
	}
	return *v, true
}

// OldPartyIDTo returns the old "party_id_to" field's value of the Shipment entity.
// If the Shipment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShipmentMutation) OldPartyIDTo(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPartyIDTo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPartyIDTo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPartyIDTo: %w", err)
	}
	return oldValue.PartyIDTo, nil
}

// AddPartyIDTo adds i to the "party_id_to" field.
func (m *ShipmentMutation) AddPartyIDTo(i int) {
	if m.addparty_id_to != nil {
		*m.addparty_id_to += i
	} else {
		m.addparty_id_to = &i
	}
}

// AddedPartyIDTo returns the value that was added to the "party_id_to" field in this mutation.
func (m *ShipmentMutation) AddedPartyIDTo() (r int, exists bool) {
	v := m.addparty_id_to
	if v == nil {
		return
	}
	return *v, true
}

// ClearPartyIDTo clears the value of the "party_id_to" field.
func (m *ShipmentMutation) ClearPartyIDTo() {
	m.party_id_to = nil
	m.addparty_id_to = nil
	m.clearedFields[shipment.FieldPartyIDTo] = struct{}{}
}

// PartyIDToCleared returns if the "party_id_to" field was cleared in this mutation.
func (m *ShipmentMutation) PartyIDToCleared() bool {
	_, ok := m.clearedFields[shipment.FieldPartyIDTo]
	return ok
}

// ResetPartyIDTo resets all changes to the "party_id_to" field.
func (m *ShipmentMutation) ResetPartyIDTo() {
	m.party_id_to = nil
	m.addparty_id_to = nil
	delete(m.clearedFields, shipment.FieldPartyIDTo)
}

// SetPartyIDFrom sets the "party_id_from" field.
func (m *ShipmentMutation) SetPartyIDFrom(i int) {
	m.party_id_from = &i
	m.addparty_id_from = nil
}

// PartyIDFrom returns the value of the "party_id_from" field in the mutation.
func (m *ShipmentMutation) PartyIDFrom() (r int, exists bool) {
	v := m.party_id_from
	if v == nil {
		return
	}
	return *v, true
}

// OldPartyIDFrom returns the old "party_id_from" field's value of the Shipment entity.
// If the Shipment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShipmentMutation) OldPartyIDFrom(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPartyIDFrom is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPartyIDFrom requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPartyIDFrom: %w", err)
	}
	return oldValue.PartyIDFrom, nil
}

// AddPartyIDFrom adds i to the "party_id_from" field.
func (m *ShipmentMutation) AddPartyIDFrom(i int) {
	if m.addparty_id_from != nil {
		*m.addparty_id_from += i
	} else {
		m.addparty_id_from = &i
	}
}

// AddedPartyIDFrom returns the value that was added to the "party_id_from" field in this mutation.
func (m *ShipmentMutation) AddedPartyIDFrom() (r int, exists bool) {
	v := m.addparty_id_from
	if v == nil {
		return
	}
	return *v, true
}

// ClearPartyIDFrom clears the value of the "party_id_from" field.
func (m *ShipmentMutation) ClearPartyIDFrom() {
	m.party_id_from = nil
	m.addparty_id_from = nil
	m.clearedFields[shipment.FieldPartyIDFrom] = struct{}{}
}

// PartyIDFromCleared returns if the "party_id_from" field was cleared in this mutation.
func (m *ShipmentMutation) PartyIDFromCleared() bool {
	_, ok := m.clearedFields[shipment.FieldPartyIDFrom]
	return ok
}

// ResetPartyIDFrom resets all changes to the "party_id_from" field.
func (m *ShipmentMutation) ResetPartyIDFrom() {
	m.party_id_from = nil
	m.addparty_id_from = nil
	delete(m.clearedFields, shipment.FieldPartyIDFrom)
}

// SetAdditionalShippingCharge sets the "additional_shipping_charge" field.
func (m *ShipmentMutation) SetAdditionalShippingCharge(f float64) {
	m.additional_shipping_charge = &f
	m.addadditional_shipping_charge = nil
}

// AdditionalShippingCharge returns the value of the "additional_shipping_charge" field in the mutation.
func (m *ShipmentMutation) AdditionalShippingCharge() (r float64, exists bool) {
	v := m.additional_shipping_charge
	if v == nil {
		return
	}
	return *v, true
}

// OldAdditionalShippingCharge returns the old "additional_shipping_charge" field's value of the Shipment entity.
// If the Shipment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShipmentMutation) OldAdditionalShippingCharge(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAdditionalShippingCharge is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAdditionalShippingCharge requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAdditionalShippingCharge: %w", err)
	}
	return oldValue.AdditionalShippingCharge, nil
}

// AddAdditionalShippingCharge adds f to the "additional_shipping_charge" field.
func (m *ShipmentMutation) AddAdditionalShippingCharge(f float64) {
	if m.addadditional_shipping_charge != nil {
		*m.addadditional_shipping_charge += f
	} else {
		m.addadditional_shipping_charge = &f
	}
}

// AddedAdditionalShippingCharge returns the value that was added to the "additional_shipping_charge" field in this mutation.
func (m *ShipmentMutation) AddedAdditionalShippingCharge() (r float64, exists bool) {
	v := m.addadditional_shipping_charge
	if v == nil {
		return
	}
	return *v, true
}

// ClearAdditionalShippingCharge clears the value of the "additional_shipping_charge" field.
func (m *ShipmentMutation) ClearAdditionalShippingCharge() {
	m.additional_shipping_charge = nil
	m.addadditional_shipping_charge = nil
	m.clearedFields[shipment.FieldAdditionalShippingCharge] = struct{}{}
}

// AdditionalShippingChargeCleared returns if the "additional_shipping_charge" field was cleared in this mutation.
func (m *ShipmentMutation) AdditionalShippingChargeCleared() bool {
	_, ok := m.clearedFields[shipment.FieldAdditionalShippingCharge]
	return ok
}

// ResetAdditionalShippingCharge resets all changes to the "additional_shipping_charge" field.
func (m *ShipmentMutation) ResetAdditionalShippingCharge() {
	m.additional_shipping_charge = nil
	m.addadditional_shipping_charge = nil
	delete(m.clearedFields, shipment.FieldAdditionalShippingCharge)
}

// SetAddtlShippingChargeDesc sets the "addtl_shipping_charge_desc" field.
func (m *ShipmentMutation) SetAddtlShippingChargeDesc(s string) {
	m.addtl_shipping_charge_desc = &s
}

// AddtlShippingChargeDesc returns the value of the "addtl_shipping_charge_desc" field in the mutation.
func (m *ShipmentMutation) AddtlShippingChargeDesc() (r string, exists bool) {
	v := m.addtl_shipping_charge_desc
	if v == nil {
		return
	}
	return *v, true
}

// OldAddtlShippingChargeDesc returns the old "addtl_shipping_charge_desc" field's value of the Shipment entity.
// If the Shipment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShipmentMutation) OldAddtlShippingChargeDesc(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAddtlShippingChargeDesc is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAddtlShippingChargeDesc requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddtlShippingChargeDesc: %w", err)
	}
	return oldValue.AddtlShippingChargeDesc, nil
}

// ClearAddtlShippingChargeDesc clears the value of the "addtl_shipping_charge_desc" field.
func (m *ShipmentMutation) ClearAddtlShippingChargeDesc() {
	m.addtl_shipping_charge_desc = nil
	m.clearedFields[shipment.FieldAddtlShippingChargeDesc] = struct{}{}
}

// AddtlShippingChargeDescCleared returns if the "addtl_shipping_charge_desc" field was cleared in this mutation.
func (m *ShipmentMutation) AddtlShippingChargeDescCleared() bool {
	_, ok := m.clearedFields[shipment.FieldAddtlShippingChargeDesc]
	return ok
}

// ResetAddtlShippingChargeDesc resets all changes to the "addtl_shipping_charge_desc" field.
func (m *ShipmentMutation) ResetAddtlShippingChargeDesc() {
	m.addtl_shipping_charge_desc = nil
	delete(m.clearedFields, shipment.FieldAddtlShippingChargeDesc)
}

// SetCreatedDate sets the "created_date" field.
func (m *ShipmentMutation) SetCreatedDate(t time.Time) {
	m.created_date = &t
}

// CreatedDate returns the value of the "created_date" field in the mutation.
func (m *ShipmentMutation) CreatedDate() (r time.Time, exists bool) {
	v := m.created_date
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedDate returns the old "created_date" field's value of the Shipment entity.
// If the Shipment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShipmentMutation) OldCreatedDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedDate: %w", err)
	}
	return oldValue.CreatedDate, nil
}

// ClearCreatedDate clears the value of the "created_date" field.
func (m *ShipmentMutation) ClearCreatedDate() {
	m.created_date = nil
	m.clearedFields[shipment.FieldCreatedDate] = struct{}{}
}

// CreatedDateCleared returns if the "created_date" field was cleared in this mutation.
func (m *ShipmentMutation) CreatedDateCleared() bool {
	_, ok := m.clearedFields[shipment.FieldCreatedDate]
	return ok
}

// ResetCreatedDate resets all changes to the "created_date" field.
func (m *ShipmentMutation) ResetCreatedDate() {
	m.created_date = nil
	delete(m.clearedFields, shipment.FieldCreatedDate)
}

// SetCreatedByUserLogin sets the "created_by_user_login" field.
func (m *ShipmentMutation) SetCreatedByUserLogin(s string) {
	m.created_by_user_login = &s
}

// CreatedByUserLogin returns the value of the "created_by_user_login" field in the mutation.
func (m *ShipmentMutation) CreatedByUserLogin() (r string, exists bool) {
	v := m.created_by_user_login
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedByUserLogin returns the old "created_by_user_login" field's value of the Shipment entity.
// If the Shipment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShipmentMutation) OldCreatedByUserLogin(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedByUserLogin is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedByUserLogin requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedByUserLogin: %w", err)
	}
	return oldValue.CreatedByUserLogin, nil
}

// ClearCreatedByUserLogin clears the value of the "created_by_user_login" field.
func (m *ShipmentMutation) ClearCreatedByUserLogin() {
	m.created_by_user_login = nil
	m.clearedFields[shipment.FieldCreatedByUserLogin] = struct{}{}
}

// CreatedByUserLoginCleared returns if the "created_by_user_login" field was cleared in this mutation.
func (m *ShipmentMutation) CreatedByUserLoginCleared() bool {
	_, ok := m.clearedFields[shipment.FieldCreatedByUserLogin]
	return ok
}

// ResetCreatedByUserLogin resets all changes to the "created_by_user_login" field.
func (m *ShipmentMutation) ResetCreatedByUserLogin() {
	m.created_by_user_login = nil
	delete(m.clearedFields, shipment.FieldCreatedByUserLogin)
}

// SetLastModifiedDate sets the "last_modified_date" field.
func (m *ShipmentMutation) SetLastModifiedDate(t time.Time) {
	m.last_modified_date = &t
}

// LastModifiedDate returns the value of the "last_modified_date" field in the mutation.
func (m *ShipmentMutation) LastModifiedDate() (r time.Time, exists bool) {
	v := m.last_modified_date
	if v == nil {
		return
	}
	return *v, true
}

// OldLastModifiedDate returns the old "last_modified_date" field's value of the Shipment entity.
// If the Shipment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShipmentMutation) OldLastModifiedDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldLastModifiedDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldLastModifiedDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastModifiedDate: %w", err)
	}
	return oldValue.LastModifiedDate, nil
}

// ClearLastModifiedDate clears the value of the "last_modified_date" field.
func (m *ShipmentMutation) ClearLastModifiedDate() {
	m.last_modified_date = nil
	m.clearedFields[shipment.FieldLastModifiedDate] = struct{}{}
}

// LastModifiedDateCleared returns if the "last_modified_date" field was cleared in this mutation.
func (m *ShipmentMutation) LastModifiedDateCleared() bool {
	_, ok := m.clearedFields[shipment.FieldLastModifiedDate]
	return ok
}

// ResetLastModifiedDate resets all changes to the "last_modified_date" field.
func (m *ShipmentMutation) ResetLastModifiedDate() {
	m.last_modified_date = nil
	delete(m.clearedFields, shipment.FieldLastModifiedDate)
}

// SetLastModifiedByUserLogin sets the "last_modified_by_user_login" field.
func (m *ShipmentMutation) SetLastModifiedByUserLogin(s string) {
	m.last_modified_by_user_login = &s
}

// LastModifiedByUserLogin returns the value of the "last_modified_by_user_login" field in the mutation.
func (m *ShipmentMutation) LastModifiedByUserLogin() (r string, exists bool) {
	v := m.last_modified_by_user_login
	if v == nil {
		return
	}
	return *v, true
}

// OldLastModifiedByUserLogin returns the old "last_modified_by_user_login" field's value of the Shipment entity.
// If the Shipment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShipmentMutation) OldLastModifiedByUserLogin(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldLastModifiedByUserLogin is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldLastModifiedByUserLogin requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastModifiedByUserLogin: %w", err)
	}
	return oldValue.LastModifiedByUserLogin, nil
}

// ClearLastModifiedByUserLogin clears the value of the "last_modified_by_user_login" field.
func (m *ShipmentMutation) ClearLastModifiedByUserLogin() {
	m.last_modified_by_user_login = nil
	m.clearedFields[shipment.FieldLastModifiedByUserLogin] = struct{}{}
}

// LastModifiedByUserLoginCleared returns if the "last_modified_by_user_login" field was cleared in this mutation.
func (m *ShipmentMutation) LastModifiedByUserLoginCleared() bool {
	_, ok := m.clearedFields[shipment.FieldLastModifiedByUserLogin]
	return ok
}

// ResetLastModifiedByUserLogin resets all changes to the "last_modified_by_user_login" field.
func (m *ShipmentMutation) ResetLastModifiedByUserLogin() {
	m.last_modified_by_user_login = nil
	delete(m.clearedFields, shipment.FieldLastModifiedByUserLogin)
}

// SetPrimaryOrderHeaderID sets the "primary_order_header" edge to the OrderHeader entity by id.
func (m *ShipmentMutation) SetPrimaryOrderHeaderID(id int) {
	m.primary_order_header = &id
}

// ClearPrimaryOrderHeader clears the "primary_order_header" edge to the OrderHeader entity.
func (m *ShipmentMutation) ClearPrimaryOrderHeader() {
	m.clearedprimary_order_header = true
}

// PrimaryOrderHeaderCleared reports if the "primary_order_header" edge to the OrderHeader entity was cleared.
func (m *ShipmentMutation) PrimaryOrderHeaderCleared() bool {
	return m.clearedprimary_order_header
}

// PrimaryOrderHeaderID returns the "primary_order_header" edge ID in the mutation.
func (m *ShipmentMutation) PrimaryOrderHeaderID() (id int, exists bool) {
	if m.primary_order_header != nil {
		return *m.primary_order_header, true
	}
	return
}

// PrimaryOrderHeaderIDs returns the "primary_order_header" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PrimaryOrderHeaderID instead. It exists only for internal usage by the builders.
func (m *ShipmentMutation) PrimaryOrderHeaderIDs() (ids []int) {
	if id := m.primary_order_header; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPrimaryOrderHeader resets all changes to the "primary_order_header" edge.
func (m *ShipmentMutation) ResetPrimaryOrderHeader() {
	m.primary_order_header = nil
	m.clearedprimary_order_header = false
}

// SetPrimaryOrderItemShipGroupID sets the "primary_order_item_ship_group" edge to the OrderItemShipGroup entity by id.
func (m *ShipmentMutation) SetPrimaryOrderItemShipGroupID(id int) {
	m.primary_order_item_ship_group = &id
}

// ClearPrimaryOrderItemShipGroup clears the "primary_order_item_ship_group" edge to the OrderItemShipGroup entity.
func (m *ShipmentMutation) ClearPrimaryOrderItemShipGroup() {
	m.clearedprimary_order_item_ship_group = true
}

// PrimaryOrderItemShipGroupCleared reports if the "primary_order_item_ship_group" edge to the OrderItemShipGroup entity was cleared.
func (m *ShipmentMutation) PrimaryOrderItemShipGroupCleared() bool {
	return m.clearedprimary_order_item_ship_group
}

// PrimaryOrderItemShipGroupID returns the "primary_order_item_ship_group" edge ID in the mutation.
func (m *ShipmentMutation) PrimaryOrderItemShipGroupID() (id int, exists bool) {
	if m.primary_order_item_ship_group != nil {
		return *m.primary_order_item_ship_group, true
	}
	return
}

// PrimaryOrderItemShipGroupIDs returns the "primary_order_item_ship_group" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PrimaryOrderItemShipGroupID instead. It exists only for internal usage by the builders.
func (m *ShipmentMutation) PrimaryOrderItemShipGroupIDs() (ids []int) {
	if id := m.primary_order_item_ship_group; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPrimaryOrderItemShipGroup resets all changes to the "primary_order_item_ship_group" edge.
func (m *ShipmentMutation) ResetPrimaryOrderItemShipGroup() {
	m.primary_order_item_ship_group = nil
	m.clearedprimary_order_item_ship_group = false
}

// AddItemIssuanceIDs adds the "item_issuances" edge to the ItemIssuance entity by ids.
func (m *ShipmentMutation) AddItemIssuanceIDs(ids ...int) {
	if m.item_issuances == nil {
		m.item_issuances = make(map[int]struct{})
	}
	for i := range ids {
		m.item_issuances[ids[i]] = struct{}{}
	}
}

// ClearItemIssuances clears the "item_issuances" edge to the ItemIssuance entity.
func (m *ShipmentMutation) ClearItemIssuances() {
	m.cleareditem_issuances = true
}

// ItemIssuancesCleared reports if the "item_issuances" edge to the ItemIssuance entity was cleared.
func (m *ShipmentMutation) ItemIssuancesCleared() bool {
	return m.cleareditem_issuances
}

// RemoveItemIssuanceIDs removes the "item_issuances" edge to the ItemIssuance entity by IDs.
func (m *ShipmentMutation) RemoveItemIssuanceIDs(ids ...int) {
	if m.removeditem_issuances == nil {
		m.removeditem_issuances = make(map[int]struct{})
	}
	for i := range ids {
		m.removeditem_issuances[ids[i]] = struct{}{}
	}
}

// RemovedItemIssuances returns the removed IDs of the "item_issuances" edge to the ItemIssuance entity.
func (m *ShipmentMutation) RemovedItemIssuancesIDs() (ids []int) {
	for id := range m.removeditem_issuances {
		ids = append(ids, id)
	}
	return
}

// ItemIssuancesIDs returns the "item_issuances" edge IDs in the mutation.
func (m *ShipmentMutation) ItemIssuancesIDs() (ids []int) {
	for id := range m.item_issuances {
		ids = append(ids, id)
	}
	return
}

// ResetItemIssuances resets all changes to the "item_issuances" edge.
func (m *ShipmentMutation) ResetItemIssuances() {
	m.item_issuances = nil
	m.cleareditem_issuances = false
	m.removeditem_issuances = nil
}

// AddShipmentItemIDs adds the "shipment_items" edge to the ShipmentItem entity by ids.
func (m *ShipmentMutation) AddShipmentItemIDs(ids ...int) {
	if m.shipment_items == nil {
		m.shipment_items = make(map[int]struct{})
	}
	for i := range ids {
		m.shipment_items[ids[i]] = struct{}{}
	}
}

// ClearShipmentItems clears the "shipment_items" edge to the ShipmentItem entity.
func (m *ShipmentMutation) ClearShipmentItems() {
	m.clearedshipment_items = true
}

// ShipmentItemsCleared reports if the "shipment_items" edge to the ShipmentItem entity was cleared.
func (m *ShipmentMutation) ShipmentItemsCleared() bool {
	return m.clearedshipment_items
}

// RemoveShipmentItemIDs removes the "shipment_items" edge to the ShipmentItem entity by IDs.
func (m *ShipmentMutation) RemoveShipmentItemIDs(ids ...int) {
	if m.removedshipment_items == nil {
		m.removedshipment_items = make(map[int]struct{})
	}
	for i := range ids {
		m.removedshipment_items[ids[i]] = struct{}{}
	}
}

// RemovedShipmentItems returns the removed IDs of the "shipment_items" edge to the ShipmentItem entity.
func (m *ShipmentMutation) RemovedShipmentItemsIDs() (ids []int) {
	for id := range m.removedshipment_items {
		ids = append(ids, id)
	}
	return
}

// ShipmentItemsIDs returns the "shipment_items" edge IDs in the mutation.
func (m *ShipmentMutation) ShipmentItemsIDs() (ids []int) {
	for id := range m.shipment_items {
		ids = append(ids, id)
	}
	return
}

// ResetShipmentItems resets all changes to the "shipment_items" edge.
func (m *ShipmentMutation) ResetShipmentItems() {
	m.shipment_items = nil
	m.clearedshipment_items = false
	m.removedshipment_items = nil
}

// Op returns the operation name.
func (m *ShipmentMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Shipment).
func (m *ShipmentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ShipmentMutation) Fields() []string {
	fields := make([]string, 0, 30)
	if m.create_time != nil {
		fields = append(fields, shipment.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, shipment.FieldUpdateTime)
	}
	if m.shipment_type_id != nil {
		fields = append(fields, shipment.FieldShipmentTypeID)
	}
	if m.status_id != nil {
		fields = append(fields, shipment.FieldStatusID)
	}
	if m.primary_return_id != nil {
		fields = append(fields, shipment.FieldPrimaryReturnID)
	}
	if m.primary_ship_group_seq_id != nil {
		fields = append(fields, shipment.FieldPrimaryShipGroupSeqID)
	}
	if m.picklist_bin_id != nil {
		fields = append(fields, shipment.FieldPicklistBinID)
	}
	if m.estimated_ready_date != nil {
		fields = append(fields, shipment.FieldEstimatedReadyDate)
	}
	if m.estimated_ship_date != nil {
		fields = append(fields, shipment.FieldEstimatedShipDate)
	}
	if m.estimated_ship_work_eff_id != nil {
		fields = append(fields, shipment.FieldEstimatedShipWorkEffID)
	}
	if m.estimated_arrival_date != nil {
		fields = append(fields, shipment.FieldEstimatedArrivalDate)
	}
	if m.estimated_arrival_work_eff_id != nil {
		fields = append(fields, shipment.FieldEstimatedArrivalWorkEffID)
	}
	if m.latest_cancel_date != nil {
		fields = append(fields, shipment.FieldLatestCancelDate)
	}
	if m.estimated_ship_cost != nil {
		fields = append(fields, shipment.FieldEstimatedShipCost)
	}
	if m.currency_uom_id != nil {
		fields = append(fields, shipment.FieldCurrencyUomID)
	}
	if m.handling_instructions != nil {
		fields = append(fields, shipment.FieldHandlingInstructions)
	}
	if m.origin_facility_id != nil {
		fields = append(fields, shipment.FieldOriginFacilityID)
	}
	if m.destination_facility_id != nil {
		fields = append(fields, shipment.FieldDestinationFacilityID)
	}
	if m.origin_contact_mech_id != nil {
		fields = append(fields, shipment.FieldOriginContactMechID)
	}
	if m.origin_telecom_number_id != nil {
		fields = append(fields, shipment.FieldOriginTelecomNumberID)
	}
	if m.destination_contact_mech_id != nil {
		fields = append(fields, shipment.FieldDestinationContactMechID)
	}
	if m.destination_telecom_number_id != nil {
		fields = append(fields, shipment.FieldDestinationTelecomNumberID)
	}
	if m.party_id_to != nil {
		fields = append(fields, shipment.FieldPartyIDTo)
	}
	if m.party_id_from != nil {
		fields = append(fields, shipment.FieldPartyIDFrom)
	}
	if m.additional_shipping_charge != nil {
		fields = append(fields, shipment.FieldAdditionalShippingCharge)
	}
	if m.addtl_shipping_charge_desc != nil {
		fields = append(fields, shipment.FieldAddtlShippingChargeDesc)
	}
	if m.created_date != nil {
		fields = append(fields, shipment.FieldCreatedDate)
	}
	if m.created_by_user_login != nil {
		fields = append(fields, shipment.FieldCreatedByUserLogin)
	}
	if m.last_modified_date != nil {
		fields = append(fields, shipment.FieldLastModifiedDate)
	}
	if m.last_modified_by_user_login != nil {
		fields = append(fields, shipment.FieldLastModifiedByUserLogin)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ShipmentMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case shipment.FieldCreateTime:
		return m.CreateTime()
	case shipment.FieldUpdateTime:
		return m.UpdateTime()
	case shipment.FieldShipmentTypeID:
		return m.ShipmentTypeID()
	case shipment.FieldStatusID:
		return m.StatusID()
	case shipment.FieldPrimaryReturnID:
		return m.PrimaryReturnID()
	case shipment.FieldPrimaryShipGroupSeqID:
		return m.PrimaryShipGroupSeqID()
	case shipment.FieldPicklistBinID:
		return m.PicklistBinID()
	case shipment.FieldEstimatedReadyDate:
		return m.EstimatedReadyDate()
	case shipment.FieldEstimatedShipDate:
		return m.EstimatedShipDate()
	case shipment.FieldEstimatedShipWorkEffID:
		return m.EstimatedShipWorkEffID()
	case shipment.FieldEstimatedArrivalDate:
		return m.EstimatedArrivalDate()
	case shipment.FieldEstimatedArrivalWorkEffID:
		return m.EstimatedArrivalWorkEffID()
	case shipment.FieldLatestCancelDate:
		return m.LatestCancelDate()
	case shipment.FieldEstimatedShipCost:
		return m.EstimatedShipCost()
	case shipment.FieldCurrencyUomID:
		return m.CurrencyUomID()
	case shipment.FieldHandlingInstructions:
		return m.HandlingInstructions()
	case shipment.FieldOriginFacilityID:
		return m.OriginFacilityID()
	case shipment.FieldDestinationFacilityID:
		return m.DestinationFacilityID()
	case shipment.FieldOriginContactMechID:
		return m.OriginContactMechID()
	case shipment.FieldOriginTelecomNumberID:
		return m.OriginTelecomNumberID()
	case shipment.FieldDestinationContactMechID:
		return m.DestinationContactMechID()
	case shipment.FieldDestinationTelecomNumberID:
		return m.DestinationTelecomNumberID()
	case shipment.FieldPartyIDTo:
		return m.PartyIDTo()
	case shipment.FieldPartyIDFrom:
		return m.PartyIDFrom()
	case shipment.FieldAdditionalShippingCharge:
		return m.AdditionalShippingCharge()
	case shipment.FieldAddtlShippingChargeDesc:
		return m.AddtlShippingChargeDesc()
	case shipment.FieldCreatedDate:
		return m.CreatedDate()
	case shipment.FieldCreatedByUserLogin:
		return m.CreatedByUserLogin()
	case shipment.FieldLastModifiedDate:
		return m.LastModifiedDate()
	case shipment.FieldLastModifiedByUserLogin:
		return m.LastModifiedByUserLogin()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ShipmentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case shipment.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case shipment.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case shipment.FieldShipmentTypeID:
		return m.OldShipmentTypeID(ctx)
	case shipment.FieldStatusID:
		return m.OldStatusID(ctx)
	case shipment.FieldPrimaryReturnID:
		return m.OldPrimaryReturnID(ctx)
	case shipment.FieldPrimaryShipGroupSeqID:
		return m.OldPrimaryShipGroupSeqID(ctx)
	case shipment.FieldPicklistBinID:
		return m.OldPicklistBinID(ctx)
	case shipment.FieldEstimatedReadyDate:
		return m.OldEstimatedReadyDate(ctx)
	case shipment.FieldEstimatedShipDate:
		return m.OldEstimatedShipDate(ctx)
	case shipment.FieldEstimatedShipWorkEffID:
		return m.OldEstimatedShipWorkEffID(ctx)
	case shipment.FieldEstimatedArrivalDate:
		return m.OldEstimatedArrivalDate(ctx)
	case shipment.FieldEstimatedArrivalWorkEffID:
		return m.OldEstimatedArrivalWorkEffID(ctx)
	case shipment.FieldLatestCancelDate:
		return m.OldLatestCancelDate(ctx)
	case shipment.FieldEstimatedShipCost:
		return m.OldEstimatedShipCost(ctx)
	case shipment.FieldCurrencyUomID:
		return m.OldCurrencyUomID(ctx)
	case shipment.FieldHandlingInstructions:
		return m.OldHandlingInstructions(ctx)
	case shipment.FieldOriginFacilityID:
		return m.OldOriginFacilityID(ctx)
	case shipment.FieldDestinationFacilityID:
		return m.OldDestinationFacilityID(ctx)
	case shipment.FieldOriginContactMechID:
		return m.OldOriginContactMechID(ctx)
	case shipment.FieldOriginTelecomNumberID:
		return m.OldOriginTelecomNumberID(ctx)
	case shipment.FieldDestinationContactMechID:
		return m.OldDestinationContactMechID(ctx)
	case shipment.FieldDestinationTelecomNumberID:
		return m.OldDestinationTelecomNumberID(ctx)
	case shipment.FieldPartyIDTo:
		return m.OldPartyIDTo(ctx)
	case shipment.FieldPartyIDFrom:
		return m.OldPartyIDFrom(ctx)
	case shipment.FieldAdditionalShippingCharge:
		return m.OldAdditionalShippingCharge(ctx)
	case shipment.FieldAddtlShippingChargeDesc:
		return m.OldAddtlShippingChargeDesc(ctx)
	case shipment.FieldCreatedDate:
		return m.OldCreatedDate(ctx)
	case shipment.FieldCreatedByUserLogin:
		return m.OldCreatedByUserLogin(ctx)
	case shipment.FieldLastModifiedDate:
		return m.OldLastModifiedDate(ctx)
	case shipment.FieldLastModifiedByUserLogin:
		return m.OldLastModifiedByUserLogin(ctx)
	}
	return nil, fmt.Errorf("unknown Shipment field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ShipmentMutation) SetField(name string, value ent.Value) error {
	switch name {
	case shipment.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case shipment.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case shipment.FieldShipmentTypeID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShipmentTypeID(v)
		return nil
	case shipment.FieldStatusID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatusID(v)
		return nil
	case shipment.FieldPrimaryReturnID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrimaryReturnID(v)
		return nil
	case shipment.FieldPrimaryShipGroupSeqID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrimaryShipGroupSeqID(v)
		return nil
	case shipment.FieldPicklistBinID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPicklistBinID(v)
		return nil
	case shipment.FieldEstimatedReadyDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEstimatedReadyDate(v)
		return nil
	case shipment.FieldEstimatedShipDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEstimatedShipDate(v)
		return nil
	case shipment.FieldEstimatedShipWorkEffID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEstimatedShipWorkEffID(v)
		return nil
	case shipment.FieldEstimatedArrivalDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEstimatedArrivalDate(v)
		return nil
	case shipment.FieldEstimatedArrivalWorkEffID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEstimatedArrivalWorkEffID(v)
		return nil
	case shipment.FieldLatestCancelDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLatestCancelDate(v)
		return nil
	case shipment.FieldEstimatedShipCost:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEstimatedShipCost(v)
		return nil
	case shipment.FieldCurrencyUomID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCurrencyUomID(v)
		return nil
	case shipment.FieldHandlingInstructions:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHandlingInstructions(v)
		return nil
	case shipment.FieldOriginFacilityID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOriginFacilityID(v)
		return nil
	case shipment.FieldDestinationFacilityID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDestinationFacilityID(v)
		return nil
	case shipment.FieldOriginContactMechID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOriginContactMechID(v)
		return nil
	case shipment.FieldOriginTelecomNumberID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOriginTelecomNumberID(v)
		return nil
	case shipment.FieldDestinationContactMechID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDestinationContactMechID(v)
		return nil
	case shipment.FieldDestinationTelecomNumberID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDestinationTelecomNumberID(v)
		return nil
	case shipment.FieldPartyIDTo:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPartyIDTo(v)
		return nil
	case shipment.FieldPartyIDFrom:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPartyIDFrom(v)
		return nil
	case shipment.FieldAdditionalShippingCharge:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAdditionalShippingCharge(v)
		return nil
	case shipment.FieldAddtlShippingChargeDesc:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddtlShippingChargeDesc(v)
		return nil
	case shipment.FieldCreatedDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedDate(v)
		return nil
	case shipment.FieldCreatedByUserLogin:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedByUserLogin(v)
		return nil
	case shipment.FieldLastModifiedDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastModifiedDate(v)
		return nil
	case shipment.FieldLastModifiedByUserLogin:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastModifiedByUserLogin(v)
		return nil
	}
	return fmt.Errorf("unknown Shipment field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ShipmentMutation) AddedFields() []string {
	var fields []string
	if m.addshipment_type_id != nil {
		fields = append(fields, shipment.FieldShipmentTypeID)
	}
	if m.addstatus_id != nil {
		fields = append(fields, shipment.FieldStatusID)
	}
	if m.addprimary_return_id != nil {
		fields = append(fields, shipment.FieldPrimaryReturnID)
	}
	if m.addprimary_ship_group_seq_id != nil {
		fields = append(fields, shipment.FieldPrimaryShipGroupSeqID)
	}
	if m.addpicklist_bin_id != nil {
		fields = append(fields, shipment.FieldPicklistBinID)
	}
	if m.addestimated_ship_work_eff_id != nil {
		fields = append(fields, shipment.FieldEstimatedShipWorkEffID)
	}
	if m.addestimated_arrival_work_eff_id != nil {
		fields = append(fields, shipment.FieldEstimatedArrivalWorkEffID)
	}
	if m.addestimated_ship_cost != nil {
		fields = append(fields, shipment.FieldEstimatedShipCost)
	}
	if m.addcurrency_uom_id != nil {
		fields = append(fields, shipment.FieldCurrencyUomID)
	}
	if m.addorigin_facility_id != nil {
		fields = append(fields, shipment.FieldOriginFacilityID)
	}
	if m.adddestination_facility_id != nil {
		fields = append(fields, shipment.FieldDestinationFacilityID)
	}
	if m.addorigin_contact_mech_id != nil {
		fields = append(fields, shipment.FieldOriginContactMechID)
	}
	if m.addorigin_telecom_number_id != nil {
		fields = append(fields, shipment.FieldOriginTelecomNumberID)
	}
	if m.adddestination_contact_mech_id != nil {
		fields = append(fields, shipment.FieldDestinationContactMechID)
	}
	if m.adddestination_telecom_number_id != nil {
		fields = append(fields, shipment.FieldDestinationTelecomNumberID)
	}
	if m.addparty_id_to != nil {
		fields = append(fields, shipment.FieldPartyIDTo)
	}
	if m.addparty_id_from != nil {
		fields = append(fields, shipment.FieldPartyIDFrom)
	}
	if m.addadditional_shipping_charge != nil {
		fields = append(fields, shipment.FieldAdditionalShippingCharge)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ShipmentMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case shipment.FieldShipmentTypeID:
		return m.AddedShipmentTypeID()
	case shipment.FieldStatusID:
		return m.AddedStatusID()
	case shipment.FieldPrimaryReturnID:
		return m.AddedPrimaryReturnID()
	case shipment.FieldPrimaryShipGroupSeqID:
		return m.AddedPrimaryShipGroupSeqID()
	case shipment.FieldPicklistBinID:
		return m.AddedPicklistBinID()
	case shipment.FieldEstimatedShipWorkEffID:
		return m.AddedEstimatedShipWorkEffID()
	case shipment.FieldEstimatedArrivalWorkEffID:
		return m.AddedEstimatedArrivalWorkEffID()
	case shipment.FieldEstimatedShipCost:
		return m.AddedEstimatedShipCost()
	case shipment.FieldCurrencyUomID:
		return m.AddedCurrencyUomID()
	case shipment.FieldOriginFacilityID:
		return m.AddedOriginFacilityID()
	case shipment.FieldDestinationFacilityID:
		return m.AddedDestinationFacilityID()
	case shipment.FieldOriginContactMechID:
		return m.AddedOriginContactMechID()
	case shipment.FieldOriginTelecomNumberID:
		return m.AddedOriginTelecomNumberID()
	case shipment.FieldDestinationContactMechID:
		return m.AddedDestinationContactMechID()
	case shipment.FieldDestinationTelecomNumberID:
		return m.AddedDestinationTelecomNumberID()
	case shipment.FieldPartyIDTo:
		return m.AddedPartyIDTo()
	case shipment.FieldPartyIDFrom:
		return m.AddedPartyIDFrom()
	case shipment.FieldAdditionalShippingCharge:
		return m.AddedAdditionalShippingCharge()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ShipmentMutation) AddField(name string, value ent.Value) error {
	switch name {
	case shipment.FieldShipmentTypeID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddShipmentTypeID(v)
		return nil
	case shipment.FieldStatusID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatusID(v)
		return nil
	case shipment.FieldPrimaryReturnID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPrimaryReturnID(v)
		return nil
	case shipment.FieldPrimaryShipGroupSeqID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPrimaryShipGroupSeqID(v)
		return nil
	case shipment.FieldPicklistBinID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPicklistBinID(v)
		return nil
	case shipment.FieldEstimatedShipWorkEffID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddEstimatedShipWorkEffID(v)
		return nil
	case shipment.FieldEstimatedArrivalWorkEffID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddEstimatedArrivalWorkEffID(v)
		return nil
	case shipment.FieldEstimatedShipCost:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddEstimatedShipCost(v)
		return nil
	case shipment.FieldCurrencyUomID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCurrencyUomID(v)
		return nil
	case shipment.FieldOriginFacilityID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOriginFacilityID(v)
		return nil
	case shipment.FieldDestinationFacilityID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDestinationFacilityID(v)
		return nil
	case shipment.FieldOriginContactMechID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOriginContactMechID(v)
		return nil
	case shipment.FieldOriginTelecomNumberID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOriginTelecomNumberID(v)
		return nil
	case shipment.FieldDestinationContactMechID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDestinationContactMechID(v)
		return nil
	case shipment.FieldDestinationTelecomNumberID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDestinationTelecomNumberID(v)
		return nil
	case shipment.FieldPartyIDTo:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPartyIDTo(v)
		return nil
	case shipment.FieldPartyIDFrom:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPartyIDFrom(v)
		return nil
	case shipment.FieldAdditionalShippingCharge:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAdditionalShippingCharge(v)
		return nil
	}
	return fmt.Errorf("unknown Shipment numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ShipmentMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(shipment.FieldShipmentTypeID) {
		fields = append(fields, shipment.FieldShipmentTypeID)
	}
	if m.FieldCleared(shipment.FieldStatusID) {
		fields = append(fields, shipment.FieldStatusID)
	}
	if m.FieldCleared(shipment.FieldPrimaryReturnID) {
		fields = append(fields, shipment.FieldPrimaryReturnID)
	}
	if m.FieldCleared(shipment.FieldPrimaryShipGroupSeqID) {
		fields = append(fields, shipment.FieldPrimaryShipGroupSeqID)
	}
	if m.FieldCleared(shipment.FieldPicklistBinID) {
		fields = append(fields, shipment.FieldPicklistBinID)
	}
	if m.FieldCleared(shipment.FieldEstimatedReadyDate) {
		fields = append(fields, shipment.FieldEstimatedReadyDate)
	}
	if m.FieldCleared(shipment.FieldEstimatedShipDate) {
		fields = append(fields, shipment.FieldEstimatedShipDate)
	}
	if m.FieldCleared(shipment.FieldEstimatedShipWorkEffID) {
		fields = append(fields, shipment.FieldEstimatedShipWorkEffID)
	}
	if m.FieldCleared(shipment.FieldEstimatedArrivalDate) {
		fields = append(fields, shipment.FieldEstimatedArrivalDate)
	}
	if m.FieldCleared(shipment.FieldEstimatedArrivalWorkEffID) {
		fields = append(fields, shipment.FieldEstimatedArrivalWorkEffID)
	}
	if m.FieldCleared(shipment.FieldLatestCancelDate) {
		fields = append(fields, shipment.FieldLatestCancelDate)
	}
	if m.FieldCleared(shipment.FieldEstimatedShipCost) {
		fields = append(fields, shipment.FieldEstimatedShipCost)
	}
	if m.FieldCleared(shipment.FieldCurrencyUomID) {
		fields = append(fields, shipment.FieldCurrencyUomID)
	}
	if m.FieldCleared(shipment.FieldHandlingInstructions) {
		fields = append(fields, shipment.FieldHandlingInstructions)
	}
	if m.FieldCleared(shipment.FieldOriginFacilityID) {
		fields = append(fields, shipment.FieldOriginFacilityID)
	}
	if m.FieldCleared(shipment.FieldDestinationFacilityID) {
		fields = append(fields, shipment.FieldDestinationFacilityID)
	}
	if m.FieldCleared(shipment.FieldOriginContactMechID) {
		fields = append(fields, shipment.FieldOriginContactMechID)
	}
	if m.FieldCleared(shipment.FieldOriginTelecomNumberID) {
		fields = append(fields, shipment.FieldOriginTelecomNumberID)
	}
	if m.FieldCleared(shipment.FieldDestinationContactMechID) {
		fields = append(fields, shipment.FieldDestinationContactMechID)
	}
	if m.FieldCleared(shipment.FieldDestinationTelecomNumberID) {
		fields = append(fields, shipment.FieldDestinationTelecomNumberID)
	}
	if m.FieldCleared(shipment.FieldPartyIDTo) {
		fields = append(fields, shipment.FieldPartyIDTo)
	}
	if m.FieldCleared(shipment.FieldPartyIDFrom) {
		fields = append(fields, shipment.FieldPartyIDFrom)
	}
	if m.FieldCleared(shipment.FieldAdditionalShippingCharge) {
		fields = append(fields, shipment.FieldAdditionalShippingCharge)
	}
	if m.FieldCleared(shipment.FieldAddtlShippingChargeDesc) {
		fields = append(fields, shipment.FieldAddtlShippingChargeDesc)
	}
	if m.FieldCleared(shipment.FieldCreatedDate) {
		fields = append(fields, shipment.FieldCreatedDate)
	}
	if m.FieldCleared(shipment.FieldCreatedByUserLogin) {
		fields = append(fields, shipment.FieldCreatedByUserLogin)
	}
	if m.FieldCleared(shipment.FieldLastModifiedDate) {
		fields = append(fields, shipment.FieldLastModifiedDate)
	}
	if m.FieldCleared(shipment.FieldLastModifiedByUserLogin) {
		fields = append(fields, shipment.FieldLastModifiedByUserLogin)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ShipmentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ShipmentMutation) ClearField(name string) error {
	switch name {
	case shipment.FieldShipmentTypeID:
		m.ClearShipmentTypeID()
		return nil
	case shipment.FieldStatusID:
		m.ClearStatusID()
		return nil
	case shipment.FieldPrimaryReturnID:
		m.ClearPrimaryReturnID()
		return nil
	case shipment.FieldPrimaryShipGroupSeqID:
		m.ClearPrimaryShipGroupSeqID()
		return nil
	case shipment.FieldPicklistBinID:
		m.ClearPicklistBinID()
		return nil
	case shipment.FieldEstimatedReadyDate:
		m.ClearEstimatedReadyDate()
		return nil
	case shipment.FieldEstimatedShipDate:
		m.ClearEstimatedShipDate()
		return nil
	case shipment.FieldEstimatedShipWorkEffID:
		m.ClearEstimatedShipWorkEffID()
		return nil
	case shipment.FieldEstimatedArrivalDate:
		m.ClearEstimatedArrivalDate()
		return nil
	case shipment.FieldEstimatedArrivalWorkEffID:
		m.ClearEstimatedArrivalWorkEffID()
		return nil
	case shipment.FieldLatestCancelDate:
		m.ClearLatestCancelDate()
		return nil
	case shipment.FieldEstimatedShipCost:
		m.ClearEstimatedShipCost()
		return nil
	case shipment.FieldCurrencyUomID:
		m.ClearCurrencyUomID()
		return nil
	case shipment.FieldHandlingInstructions:
		m.ClearHandlingInstructions()
		return nil
	case shipment.FieldOriginFacilityID:
		m.ClearOriginFacilityID()
		return nil
	case shipment.FieldDestinationFacilityID:
		m.ClearDestinationFacilityID()
		return nil
	case shipment.FieldOriginContactMechID:
		m.ClearOriginContactMechID()
		return nil
	case shipment.FieldOriginTelecomNumberID:
		m.ClearOriginTelecomNumberID()
		return nil
	case shipment.FieldDestinationContactMechID:
		m.ClearDestinationContactMechID()
		return nil
	case shipment.FieldDestinationTelecomNumberID:
		m.ClearDestinationTelecomNumberID()
		return nil
	case shipment.FieldPartyIDTo:
		m.ClearPartyIDTo()
		return nil
	case shipment.FieldPartyIDFrom:
		m.ClearPartyIDFrom()
		return nil
	case shipment.FieldAdditionalShippingCharge:
		m.ClearAdditionalShippingCharge()
		return nil
	case shipment.FieldAddtlShippingChargeDesc:
		m.ClearAddtlShippingChargeDesc()
		return nil
	case shipment.FieldCreatedDate:
		m.ClearCreatedDate()
		return nil
	case shipment.FieldCreatedByUserLogin:
		m.ClearCreatedByUserLogin()
		return nil
	case shipment.FieldLastModifiedDate:
		m.ClearLastModifiedDate()
		return nil
	case shipment.FieldLastModifiedByUserLogin:
		m.ClearLastModifiedByUserLogin()
		return nil
	}
	return fmt.Errorf("unknown Shipment nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ShipmentMutation) ResetField(name string) error {
	switch name {
	case shipment.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case shipment.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case shipment.FieldShipmentTypeID:
		m.ResetShipmentTypeID()
		return nil
	case shipment.FieldStatusID:
		m.ResetStatusID()
		return nil
	case shipment.FieldPrimaryReturnID:
		m.ResetPrimaryReturnID()
		return nil
	case shipment.FieldPrimaryShipGroupSeqID:
		m.ResetPrimaryShipGroupSeqID()
		return nil
	case shipment.FieldPicklistBinID:
		m.ResetPicklistBinID()
		return nil
	case shipment.FieldEstimatedReadyDate:
		m.ResetEstimatedReadyDate()
		return nil
	case shipment.FieldEstimatedShipDate:
		m.ResetEstimatedShipDate()
		return nil
	case shipment.FieldEstimatedShipWorkEffID:
		m.ResetEstimatedShipWorkEffID()
		return nil
	case shipment.FieldEstimatedArrivalDate:
		m.ResetEstimatedArrivalDate()
		return nil
	case shipment.FieldEstimatedArrivalWorkEffID:
		m.ResetEstimatedArrivalWorkEffID()
		return nil
	case shipment.FieldLatestCancelDate:
		m.ResetLatestCancelDate()
		return nil
	case shipment.FieldEstimatedShipCost:
		m.ResetEstimatedShipCost()
		return nil
	case shipment.FieldCurrencyUomID:
		m.ResetCurrencyUomID()
		return nil
	case shipment.FieldHandlingInstructions:
		m.ResetHandlingInstructions()
		return nil
	case shipment.FieldOriginFacilityID:
		m.ResetOriginFacilityID()
		return nil
	case shipment.FieldDestinationFacilityID:
		m.ResetDestinationFacilityID()
		return nil
	case shipment.FieldOriginContactMechID:
		m.ResetOriginContactMechID()
		return nil
	case shipment.FieldOriginTelecomNumberID:
		m.ResetOriginTelecomNumberID()
		return nil
	case shipment.FieldDestinationContactMechID:
		m.ResetDestinationContactMechID()
		return nil
	case shipment.FieldDestinationTelecomNumberID:
		m.ResetDestinationTelecomNumberID()
		return nil
	case shipment.FieldPartyIDTo:
		m.ResetPartyIDTo()
		return nil
	case shipment.FieldPartyIDFrom:
		m.ResetPartyIDFrom()
		return nil
	case shipment.FieldAdditionalShippingCharge:
		m.ResetAdditionalShippingCharge()
		return nil
	case shipment.FieldAddtlShippingChargeDesc:
		m.ResetAddtlShippingChargeDesc()
		return nil
	case shipment.FieldCreatedDate:
		m.ResetCreatedDate()
		return nil
	case shipment.FieldCreatedByUserLogin:
		m.ResetCreatedByUserLogin()
		return nil
	case shipment.FieldLastModifiedDate:
		m.ResetLastModifiedDate()
		return nil
	case shipment.FieldLastModifiedByUserLogin:
		m.ResetLastModifiedByUserLogin()
		return nil
	}
	return fmt.Errorf("unknown Shipment field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ShipmentMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.primary_order_header != nil {
		edges = append(edges, shipment.EdgePrimaryOrderHeader)
	}
	if m.primary_order_item_ship_group != nil {
		edges = append(edges, shipment.EdgePrimaryOrderItemShipGroup)
	}
	if m.item_issuances != nil {
		edges = append(edges, shipment.EdgeItemIssuances)
	}
	if m.shipment_items != nil {
		edges = append(edges, shipment.EdgeShipmentItems)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ShipmentMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case shipment.EdgePrimaryOrderHeader:
		if id := m.primary_order_header; id != nil {
			return []ent.Value{*id}
		}
	case shipment.EdgePrimaryOrderItemShipGroup:
		if id := m.primary_order_item_ship_group; id != nil {
			return []ent.Value{*id}
		}
	case shipment.EdgeItemIssuances:
		ids := make([]ent.Value, 0, len(m.item_issuances))
		for id := range m.item_issuances {
			ids = append(ids, id)
		}
		return ids
	case shipment.EdgeShipmentItems:
		ids := make([]ent.Value, 0, len(m.shipment_items))
		for id := range m.shipment_items {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ShipmentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removeditem_issuances != nil {
		edges = append(edges, shipment.EdgeItemIssuances)
	}
	if m.removedshipment_items != nil {
		edges = append(edges, shipment.EdgeShipmentItems)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ShipmentMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case shipment.EdgeItemIssuances:
		ids := make([]ent.Value, 0, len(m.removeditem_issuances))
		for id := range m.removeditem_issuances {
			ids = append(ids, id)
		}
		return ids
	case shipment.EdgeShipmentItems:
		ids := make([]ent.Value, 0, len(m.removedshipment_items))
		for id := range m.removedshipment_items {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ShipmentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedprimary_order_header {
		edges = append(edges, shipment.EdgePrimaryOrderHeader)
	}
	if m.clearedprimary_order_item_ship_group {
		edges = append(edges, shipment.EdgePrimaryOrderItemShipGroup)
	}
	if m.cleareditem_issuances {
		edges = append(edges, shipment.EdgeItemIssuances)
	}
	if m.clearedshipment_items {
		edges = append(edges, shipment.EdgeShipmentItems)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ShipmentMutation) EdgeCleared(name string) bool {
	switch name {
	case shipment.EdgePrimaryOrderHeader:
		return m.clearedprimary_order_header
	case shipment.EdgePrimaryOrderItemShipGroup:
		return m.clearedprimary_order_item_ship_group
	case shipment.EdgeItemIssuances:
		return m.cleareditem_issuances
	case shipment.EdgeShipmentItems:
		return m.clearedshipment_items
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ShipmentMutation) ClearEdge(name string) error {
	switch name {
	case shipment.EdgePrimaryOrderHeader:
		m.ClearPrimaryOrderHeader()
		return nil
	case shipment.EdgePrimaryOrderItemShipGroup:
		m.ClearPrimaryOrderItemShipGroup()
		return nil
	}
	return fmt.Errorf("unknown Shipment unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ShipmentMutation) ResetEdge(name string) error {
	switch name {
	case shipment.EdgePrimaryOrderHeader:
		m.ResetPrimaryOrderHeader()
		return nil
	case shipment.EdgePrimaryOrderItemShipGroup:
		m.ResetPrimaryOrderItemShipGroup()
		return nil
	case shipment.EdgeItemIssuances:
		m.ResetItemIssuances()
		return nil
	case shipment.EdgeShipmentItems:
		m.ResetShipmentItems()
		return nil
	}
	return fmt.Errorf("unknown Shipment edge %s", name)
}

// ShipmentItemMutation represents an operation that mutates the ShipmentItem nodes in the graph.
type ShipmentItemMutation struct {
	config
	op                           Op
	typ                          string
	id                           *int
	create_time                  *time.Time
	update_time                  *time.Time
	shipment_item_seq_id         *int
	addshipment_item_seq_id      *int
	product_id                   *int
	addproduct_id                *int
	quantity                     *float64
	addquantity                  *float64
	shipment_content_description *string
	clearedFields                map[string]struct{}
	shipment                     *int
	clearedshipment              bool
	item_issuances               map[int]struct{}
	removeditem_issuances        map[int]struct{}
	cleareditem_issuances        bool
	done                         bool
	oldValue                     func(context.Context) (*ShipmentItem, error)
	predicates                   []predicate.ShipmentItem
}

var _ ent.Mutation = (*ShipmentItemMutation)(nil)

// shipmentitemOption allows management of the mutation configuration using functional options.
type shipmentitemOption func(*ShipmentItemMutation)

// newShipmentItemMutation creates new mutation for the ShipmentItem entity.
func newShipmentItemMutation(c config, op Op, opts ...shipmentitemOption) *ShipmentItemMutation {
	m := &ShipmentItemMutation{
		config:        c,
		op:            op,
		typ:           TypeShipmentItem,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withShipmentItemID sets the ID field of the mutation.
func withShipmentItemID(id int) shipmentitemOption {
	return func(m *ShipmentItemMutation) {
		var (
			err   error
			once  sync.Once
			value *ShipmentItem
		)
		m.oldValue = func(ctx context.Context) (*ShipmentItem, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ShipmentItem.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withShipmentItem sets the old ShipmentItem of the mutation.
func withShipmentItem(node *ShipmentItem) shipmentitemOption {
	return func(m *ShipmentItemMutation) {
		m.oldValue = func(context.Context) (*ShipmentItem, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ShipmentItemMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ShipmentItemMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *ShipmentItemMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreateTime sets the "create_time" field.
func (m *ShipmentItemMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *ShipmentItemMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the ShipmentItem entity.
// If the ShipmentItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShipmentItemMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *ShipmentItemMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *ShipmentItemMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *ShipmentItemMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the ShipmentItem entity.
// If the ShipmentItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShipmentItemMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *ShipmentItemMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetShipmentItemSeqID sets the "shipment_item_seq_id" field.
func (m *ShipmentItemMutation) SetShipmentItemSeqID(i int) {
	m.shipment_item_seq_id = &i
	m.addshipment_item_seq_id = nil
}

// ShipmentItemSeqID returns the value of the "shipment_item_seq_id" field in the mutation.
func (m *ShipmentItemMutation) ShipmentItemSeqID() (r int, exists bool) {
	v := m.shipment_item_seq_id
	if v == nil {
		return
	}
	return *v, true
}

// OldShipmentItemSeqID returns the old "shipment_item_seq_id" field's value of the ShipmentItem entity.
// If the ShipmentItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShipmentItemMutation) OldShipmentItemSeqID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldShipmentItemSeqID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldShipmentItemSeqID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShipmentItemSeqID: %w", err)
	}
	return oldValue.ShipmentItemSeqID, nil
}

// AddShipmentItemSeqID adds i to the "shipment_item_seq_id" field.
func (m *ShipmentItemMutation) AddShipmentItemSeqID(i int) {
	if m.addshipment_item_seq_id != nil {
		*m.addshipment_item_seq_id += i
	} else {
		m.addshipment_item_seq_id = &i
	}
}

// AddedShipmentItemSeqID returns the value that was added to the "shipment_item_seq_id" field in this mutation.
func (m *ShipmentItemMutation) AddedShipmentItemSeqID() (r int, exists bool) {
	v := m.addshipment_item_seq_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetShipmentItemSeqID resets all changes to the "shipment_item_seq_id" field.
func (m *ShipmentItemMutation) ResetShipmentItemSeqID() {
	m.shipment_item_seq_id = nil
	m.addshipment_item_seq_id = nil
}

// SetProductID sets the "product_id" field.
func (m *ShipmentItemMutation) SetProductID(i int) {
	m.product_id = &i
	m.addproduct_id = nil
}

// ProductID returns the value of the "product_id" field in the mutation.
func (m *ShipmentItemMutation) ProductID() (r int, exists bool) {
	v := m.product_id
	if v == nil {
		return
	}
	return *v, true
}

// OldProductID returns the old "product_id" field's value of the ShipmentItem entity.
// If the ShipmentItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShipmentItemMutation) OldProductID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldProductID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldProductID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProductID: %w", err)
	}
	return oldValue.ProductID, nil
}

// AddProductID adds i to the "product_id" field.
func (m *ShipmentItemMutation) AddProductID(i int) {
	if m.addproduct_id != nil {
		*m.addproduct_id += i
	} else {
		m.addproduct_id = &i
	}
}

// AddedProductID returns the value that was added to the "product_id" field in this mutation.
func (m *ShipmentItemMutation) AddedProductID() (r int, exists bool) {
	v := m.addproduct_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearProductID clears the value of the "product_id" field.
func (m *ShipmentItemMutation) ClearProductID() {
	m.product_id = nil
	m.addproduct_id = nil
	m.clearedFields[shipmentitem.FieldProductID] = struct{}{}
}

// ProductIDCleared returns if the "product_id" field was cleared in this mutation.
func (m *ShipmentItemMutation) ProductIDCleared() bool {
	_, ok := m.clearedFields[shipmentitem.FieldProductID]
	return ok
}

// ResetProductID resets all changes to the "product_id" field.
func (m *ShipmentItemMutation) ResetProductID() {
	m.product_id = nil
	m.addproduct_id = nil
	delete(m.clearedFields, shipmentitem.FieldProductID)
}

// SetQuantity sets the "quantity" field.
func (m *ShipmentItemMutation) SetQuantity(f float64) {
	m.quantity = &f
	m.addquantity = nil
}

// Quantity returns the value of the "quantity" field in the mutation.
func (m *ShipmentItemMutation) Quantity() (r float64, exists bool) {
	v := m.quantity
	if v == nil {
		return
	}
	return *v, true
}

// OldQuantity returns the old "quantity" field's value of the ShipmentItem entity.
// If the ShipmentItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShipmentItemMutation) OldQuantity(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldQuantity is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldQuantity requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldQuantity: %w", err)
	}
	return oldValue.Quantity, nil
}

// AddQuantity adds f to the "quantity" field.
func (m *ShipmentItemMutation) AddQuantity(f float64) {
	if m.addquantity != nil {
		*m.addquantity += f
	} else {
		m.addquantity = &f
	}
}

// AddedQuantity returns the value that was added to the "quantity" field in this mutation.
func (m *ShipmentItemMutation) AddedQuantity() (r float64, exists bool) {
	v := m.addquantity
	if v == nil {
		return
	}
	return *v, true
}

// ClearQuantity clears the value of the "quantity" field.
func (m *ShipmentItemMutation) ClearQuantity() {
	m.quantity = nil
	m.addquantity = nil
	m.clearedFields[shipmentitem.FieldQuantity] = struct{}{}
}

// QuantityCleared returns if the "quantity" field was cleared in this mutation.
func (m *ShipmentItemMutation) QuantityCleared() bool {
	_, ok := m.clearedFields[shipmentitem.FieldQuantity]
	return ok
}

// ResetQuantity resets all changes to the "quantity" field.
func (m *ShipmentItemMutation) ResetQuantity() {
	m.quantity = nil
	m.addquantity = nil
	delete(m.clearedFields, shipmentitem.FieldQuantity)
}

// SetShipmentContentDescription sets the "shipment_content_description" field.
func (m *ShipmentItemMutation) SetShipmentContentDescription(s string) {
	m.shipment_content_description = &s
}

// ShipmentContentDescription returns the value of the "shipment_content_description" field in the mutation.
func (m *ShipmentItemMutation) ShipmentContentDescription() (r string, exists bool) {
	v := m.shipment_content_description
	if v == nil {
		return
	}
	return *v, true
}

// OldShipmentContentDescription returns the old "shipment_content_description" field's value of the ShipmentItem entity.
// If the ShipmentItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShipmentItemMutation) OldShipmentContentDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldShipmentContentDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldShipmentContentDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShipmentContentDescription: %w", err)
	}
	return oldValue.ShipmentContentDescription, nil
}

// ClearShipmentContentDescription clears the value of the "shipment_content_description" field.
func (m *ShipmentItemMutation) ClearShipmentContentDescription() {
	m.shipment_content_description = nil
	m.clearedFields[shipmentitem.FieldShipmentContentDescription] = struct{}{}
}

// ShipmentContentDescriptionCleared returns if the "shipment_content_description" field was cleared in this mutation.
func (m *ShipmentItemMutation) ShipmentContentDescriptionCleared() bool {
	_, ok := m.clearedFields[shipmentitem.FieldShipmentContentDescription]
	return ok
}

// ResetShipmentContentDescription resets all changes to the "shipment_content_description" field.
func (m *ShipmentItemMutation) ResetShipmentContentDescription() {
	m.shipment_content_description = nil
	delete(m.clearedFields, shipmentitem.FieldShipmentContentDescription)
}

// SetShipmentID sets the "shipment" edge to the Shipment entity by id.
func (m *ShipmentItemMutation) SetShipmentID(id int) {
	m.shipment = &id
}

// ClearShipment clears the "shipment" edge to the Shipment entity.
func (m *ShipmentItemMutation) ClearShipment() {
	m.clearedshipment = true
}

// ShipmentCleared reports if the "shipment" edge to the Shipment entity was cleared.
func (m *ShipmentItemMutation) ShipmentCleared() bool {
	return m.clearedshipment
}

// ShipmentID returns the "shipment" edge ID in the mutation.
func (m *ShipmentItemMutation) ShipmentID() (id int, exists bool) {
	if m.shipment != nil {
		return *m.shipment, true
	}
	return
}

// ShipmentIDs returns the "shipment" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ShipmentID instead. It exists only for internal usage by the builders.
func (m *ShipmentItemMutation) ShipmentIDs() (ids []int) {
	if id := m.shipment; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetShipment resets all changes to the "shipment" edge.
func (m *ShipmentItemMutation) ResetShipment() {
	m.shipment = nil
	m.clearedshipment = false
}

// AddItemIssuanceIDs adds the "item_issuances" edge to the ItemIssuance entity by ids.
func (m *ShipmentItemMutation) AddItemIssuanceIDs(ids ...int) {
	if m.item_issuances == nil {
		m.item_issuances = make(map[int]struct{})
	}
	for i := range ids {
		m.item_issuances[ids[i]] = struct{}{}
	}
}

// ClearItemIssuances clears the "item_issuances" edge to the ItemIssuance entity.
func (m *ShipmentItemMutation) ClearItemIssuances() {
	m.cleareditem_issuances = true
}

// ItemIssuancesCleared reports if the "item_issuances" edge to the ItemIssuance entity was cleared.
func (m *ShipmentItemMutation) ItemIssuancesCleared() bool {
	return m.cleareditem_issuances
}

// RemoveItemIssuanceIDs removes the "item_issuances" edge to the ItemIssuance entity by IDs.
func (m *ShipmentItemMutation) RemoveItemIssuanceIDs(ids ...int) {
	if m.removeditem_issuances == nil {
		m.removeditem_issuances = make(map[int]struct{})
	}
	for i := range ids {
		m.removeditem_issuances[ids[i]] = struct{}{}
	}
}

// RemovedItemIssuances returns the removed IDs of the "item_issuances" edge to the ItemIssuance entity.
func (m *ShipmentItemMutation) RemovedItemIssuancesIDs() (ids []int) {
	for id := range m.removeditem_issuances {
		ids = append(ids, id)
	}
	return
}

// ItemIssuancesIDs returns the "item_issuances" edge IDs in the mutation.
func (m *ShipmentItemMutation) ItemIssuancesIDs() (ids []int) {
	for id := range m.item_issuances {
		ids = append(ids, id)
	}
	return
}

// ResetItemIssuances resets all changes to the "item_issuances" edge.
func (m *ShipmentItemMutation) ResetItemIssuances() {
	m.item_issuances = nil
	m.cleareditem_issuances = false
	m.removeditem_issuances = nil
}

// Op returns the operation name.
func (m *ShipmentItemMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (ShipmentItem).
func (m *ShipmentItemMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ShipmentItemMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.create_time != nil {
		fields = append(fields, shipmentitem.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, shipmentitem.FieldUpdateTime)
	}
	if m.shipment_item_seq_id != nil {
		fields = append(fields, shipmentitem.FieldShipmentItemSeqID)
	}
	if m.product_id != nil {
		fields = append(fields, shipmentitem.FieldProductID)
	}
	if m.quantity != nil {
		fields = append(fields, shipmentitem.FieldQuantity)
	}
	if m.shipment_content_description != nil {
		fields = append(fields, shipmentitem.FieldShipmentContentDescription)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ShipmentItemMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case shipmentitem.FieldCreateTime:
		return m.CreateTime()
	case shipmentitem.FieldUpdateTime:
		return m.UpdateTime()
	case shipmentitem.FieldShipmentItemSeqID:
		return m.ShipmentItemSeqID()
	case shipmentitem.FieldProductID:
		return m.ProductID()
	case shipmentitem.FieldQuantity:
		return m.Quantity()
	case shipmentitem.FieldShipmentContentDescription:
		return m.ShipmentContentDescription()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ShipmentItemMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case shipmentitem.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case shipmentitem.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case shipmentitem.FieldShipmentItemSeqID:
		return m.OldShipmentItemSeqID(ctx)
	case shipmentitem.FieldProductID:
		return m.OldProductID(ctx)
	case shipmentitem.FieldQuantity:
		return m.OldQuantity(ctx)
	case shipmentitem.FieldShipmentContentDescription:
		return m.OldShipmentContentDescription(ctx)
	}
	return nil, fmt.Errorf("unknown ShipmentItem field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ShipmentItemMutation) SetField(name string, value ent.Value) error {
	switch name {
	case shipmentitem.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case shipmentitem.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case shipmentitem.FieldShipmentItemSeqID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShipmentItemSeqID(v)
		return nil
	case shipmentitem.FieldProductID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProductID(v)
		return nil
	case shipmentitem.FieldQuantity:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetQuantity(v)
		return nil
	case shipmentitem.FieldShipmentContentDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShipmentContentDescription(v)
		return nil
	}
	return fmt.Errorf("unknown ShipmentItem field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ShipmentItemMutation) AddedFields() []string {
	var fields []string
	if m.addshipment_item_seq_id != nil {
		fields = append(fields, shipmentitem.FieldShipmentItemSeqID)
	}
	if m.addproduct_id != nil {
		fields = append(fields, shipmentitem.FieldProductID)
	}
	if m.addquantity != nil {
		fields = append(fields, shipmentitem.FieldQuantity)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ShipmentItemMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case shipmentitem.FieldShipmentItemSeqID:
		return m.AddedShipmentItemSeqID()
	case shipmentitem.FieldProductID:
		return m.AddedProductID()
	case shipmentitem.FieldQuantity:
		return m.AddedQuantity()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ShipmentItemMutation) AddField(name string, value ent.Value) error {
	switch name {
	case shipmentitem.FieldShipmentItemSeqID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddShipmentItemSeqID(v)
		return nil
	case shipmentitem.FieldProductID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddProductID(v)
		return nil
	case shipmentitem.FieldQuantity:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddQuantity(v)
		return nil
	}
	return fmt.Errorf("unknown ShipmentItem numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ShipmentItemMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(shipmentitem.FieldProductID) {
		fields = append(fields, shipmentitem.FieldProductID)
	}
	if m.FieldCleared(shipmentitem.FieldQuantity) {
		fields = append(fields, shipmentitem.FieldQuantity)
	}
	if m.FieldCleared(shipmentitem.FieldShipmentContentDescription) {
		fields = append(fields, shipmentitem.FieldShipmentContentDescription)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ShipmentItemMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ShipmentItemMutation) ClearField(name string) error {
	switch name {
	case shipmentitem.FieldProductID:
		m.ClearProductID()
		return nil
	case shipmentitem.FieldQuantity:
		m.ClearQuantity()
		return nil
	case shipmentitem.FieldShipmentContentDescription:
		m.ClearShipmentContentDescription()
		return nil
	}
	return fmt.Errorf("unknown ShipmentItem nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ShipmentItemMutation) ResetField(name string) error {
	switch name {
	case shipmentitem.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case shipmentitem.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case shipmentitem.FieldShipmentItemSeqID:
		m.ResetShipmentItemSeqID()
		return nil
	case shipmentitem.FieldProductID:
		m.ResetProductID()
		return nil
	case shipmentitem.FieldQuantity:
		m.ResetQuantity()
		return nil
	case shipmentitem.FieldShipmentContentDescription:
		m.ResetShipmentContentDescription()
		return nil
	}
	return fmt.Errorf("unknown ShipmentItem field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ShipmentItemMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.shipment != nil {
		edges = append(edges, shipmentitem.EdgeShipment)
	}
	if m.item_issuances != nil {
		edges = append(edges, shipmentitem.EdgeItemIssuances)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ShipmentItemMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case shipmentitem.EdgeShipment:
		if id := m.shipment; id != nil {
			return []ent.Value{*id}
		}
	case shipmentitem.EdgeItemIssuances:
		ids := make([]ent.Value, 0, len(m.item_issuances))
		for id := range m.item_issuances {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ShipmentItemMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removeditem_issuances != nil {
		edges = append(edges, shipmentitem.EdgeItemIssuances)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ShipmentItemMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case shipmentitem.EdgeItemIssuances:
		ids := make([]ent.Value, 0, len(m.removeditem_issuances))
		for id := range m.removeditem_issuances {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ShipmentItemMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedshipment {
		edges = append(edges, shipmentitem.EdgeShipment)
	}
	if m.cleareditem_issuances {
		edges = append(edges, shipmentitem.EdgeItemIssuances)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ShipmentItemMutation) EdgeCleared(name string) bool {
	switch name {
	case shipmentitem.EdgeShipment:
		return m.clearedshipment
	case shipmentitem.EdgeItemIssuances:
		return m.cleareditem_issuances
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ShipmentItemMutation) ClearEdge(name string) error {
	switch name {
	case shipmentitem.EdgeShipment:
		m.ClearShipment()
		return nil
	}
	return fmt.Errorf("unknown ShipmentItem unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ShipmentItemMutation) ResetEdge(name string) error {
	switch name {
	case shipmentitem.EdgeShipment:
		m.ResetShipment()
		return nil
	case shipmentitem.EdgeItemIssuances:
		m.ResetItemIssuances()
		return nil
	}
	return fmt.Errorf("unknown ShipmentItem edge %s", name)
}
