// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/ordercontactmech"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/orderheader"
)

// OrderContactMech is the model entity for the OrderContactMech schema.
type OrderContactMech struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// ContactMechPurposeTypeID holds the value of the "contact_mech_purpose_type_id" field.
	ContactMechPurposeTypeID int `json:"contact_mech_purpose_type_id,omitempty"`
	// ContactMechID holds the value of the "contact_mech_id" field.
	ContactMechID int `json:"contact_mech_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OrderContactMechQuery when eager-loading is set.
	Edges                             OrderContactMechEdges `json:"edges"`
	order_header_order_contact_meches *int
}

// OrderContactMechEdges holds the relations/edges for other nodes in the graph.
type OrderContactMechEdges struct {
	// OrderHeader holds the value of the order_header edge.
	OrderHeader *OrderHeader `json:"order_header,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OrderHeaderOrErr returns the OrderHeader value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderContactMechEdges) OrderHeaderOrErr() (*OrderHeader, error) {
	if e.loadedTypes[0] {
		if e.OrderHeader == nil {
			// The edge order_header was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: orderheader.Label}
		}
		return e.OrderHeader, nil
	}
	return nil, &NotLoadedError{edge: "order_header"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OrderContactMech) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case ordercontactmech.FieldID, ordercontactmech.FieldContactMechPurposeTypeID, ordercontactmech.FieldContactMechID:
			values[i] = new(sql.NullInt64)
		case ordercontactmech.FieldCreateTime, ordercontactmech.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case ordercontactmech.ForeignKeys[0]: // order_header_order_contact_meches
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type OrderContactMech", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OrderContactMech fields.
func (ocm *OrderContactMech) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case ordercontactmech.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ocm.ID = int(value.Int64)
		case ordercontactmech.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				ocm.CreateTime = value.Time
			}
		case ordercontactmech.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				ocm.UpdateTime = value.Time
			}
		case ordercontactmech.FieldContactMechPurposeTypeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field contact_mech_purpose_type_id", values[i])
			} else if value.Valid {
				ocm.ContactMechPurposeTypeID = int(value.Int64)
			}
		case ordercontactmech.FieldContactMechID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field contact_mech_id", values[i])
			} else if value.Valid {
				ocm.ContactMechID = int(value.Int64)
			}
		case ordercontactmech.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field order_header_order_contact_meches", value)
			} else if value.Valid {
				ocm.order_header_order_contact_meches = new(int)
				*ocm.order_header_order_contact_meches = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryOrderHeader queries the "order_header" edge of the OrderContactMech entity.
func (ocm *OrderContactMech) QueryOrderHeader() *OrderHeaderQuery {
	return (&OrderContactMechClient{config: ocm.config}).QueryOrderHeader(ocm)
}

// Update returns a builder for updating this OrderContactMech.
// Note that you need to call OrderContactMech.Unwrap() before calling this method if this OrderContactMech
// was returned from a transaction, and the transaction was committed or rolled back.
func (ocm *OrderContactMech) Update() *OrderContactMechUpdateOne {
	return (&OrderContactMechClient{config: ocm.config}).UpdateOne(ocm)
}

// Unwrap unwraps the OrderContactMech entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ocm *OrderContactMech) Unwrap() *OrderContactMech {
	tx, ok := ocm.config.driver.(*txDriver)
	if !ok {
		panic("ent: OrderContactMech is not a transactional entity")
	}
	ocm.config.driver = tx.drv
	return ocm
}

// String implements the fmt.Stringer.
func (ocm *OrderContactMech) String() string {
	var builder strings.Builder
	builder.WriteString("OrderContactMech(")
	builder.WriteString(fmt.Sprintf("id=%v", ocm.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(ocm.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(ocm.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", contact_mech_purpose_type_id=")
	builder.WriteString(fmt.Sprintf("%v", ocm.ContactMechPurposeTypeID))
	builder.WriteString(", contact_mech_id=")
	builder.WriteString(fmt.Sprintf("%v", ocm.ContactMechID))
	builder.WriteByte(')')
	return builder.String()
}

// OrderContactMeches is a parsable slice of OrderContactMech.
type OrderContactMeches []*OrderContactMech

func (ocm OrderContactMeches) config(cfg config) {
	for _i := range ocm {
		ocm[_i].config = cfg
	}
}
