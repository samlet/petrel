// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/ordercontactmech"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/orderheader"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/predicate"
)

// OrderContactMechUpdate is the builder for updating OrderContactMech entities.
type OrderContactMechUpdate struct {
	config
	hooks    []Hook
	mutation *OrderContactMechMutation
}

// Where adds a new predicate for the OrderContactMechUpdate builder.
func (ocmu *OrderContactMechUpdate) Where(ps ...predicate.OrderContactMech) *OrderContactMechUpdate {
	ocmu.mutation.predicates = append(ocmu.mutation.predicates, ps...)
	return ocmu
}

// SetContactMechPurposeTypeID sets the "contact_mech_purpose_type_id" field.
func (ocmu *OrderContactMechUpdate) SetContactMechPurposeTypeID(i int) *OrderContactMechUpdate {
	ocmu.mutation.ResetContactMechPurposeTypeID()
	ocmu.mutation.SetContactMechPurposeTypeID(i)
	return ocmu
}

// AddContactMechPurposeTypeID adds i to the "contact_mech_purpose_type_id" field.
func (ocmu *OrderContactMechUpdate) AddContactMechPurposeTypeID(i int) *OrderContactMechUpdate {
	ocmu.mutation.AddContactMechPurposeTypeID(i)
	return ocmu
}

// SetContactMechID sets the "contact_mech_id" field.
func (ocmu *OrderContactMechUpdate) SetContactMechID(i int) *OrderContactMechUpdate {
	ocmu.mutation.ResetContactMechID()
	ocmu.mutation.SetContactMechID(i)
	return ocmu
}

// AddContactMechID adds i to the "contact_mech_id" field.
func (ocmu *OrderContactMechUpdate) AddContactMechID(i int) *OrderContactMechUpdate {
	ocmu.mutation.AddContactMechID(i)
	return ocmu
}

// SetOrderHeaderID sets the "order_header" edge to the OrderHeader entity by ID.
func (ocmu *OrderContactMechUpdate) SetOrderHeaderID(id int) *OrderContactMechUpdate {
	ocmu.mutation.SetOrderHeaderID(id)
	return ocmu
}

// SetNillableOrderHeaderID sets the "order_header" edge to the OrderHeader entity by ID if the given value is not nil.
func (ocmu *OrderContactMechUpdate) SetNillableOrderHeaderID(id *int) *OrderContactMechUpdate {
	if id != nil {
		ocmu = ocmu.SetOrderHeaderID(*id)
	}
	return ocmu
}

// SetOrderHeader sets the "order_header" edge to the OrderHeader entity.
func (ocmu *OrderContactMechUpdate) SetOrderHeader(o *OrderHeader) *OrderContactMechUpdate {
	return ocmu.SetOrderHeaderID(o.ID)
}

// Mutation returns the OrderContactMechMutation object of the builder.
func (ocmu *OrderContactMechUpdate) Mutation() *OrderContactMechMutation {
	return ocmu.mutation
}

// ClearOrderHeader clears the "order_header" edge to the OrderHeader entity.
func (ocmu *OrderContactMechUpdate) ClearOrderHeader() *OrderContactMechUpdate {
	ocmu.mutation.ClearOrderHeader()
	return ocmu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ocmu *OrderContactMechUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	ocmu.defaults()
	if len(ocmu.hooks) == 0 {
		affected, err = ocmu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderContactMechMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ocmu.mutation = mutation
			affected, err = ocmu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ocmu.hooks) - 1; i >= 0; i-- {
			mut = ocmu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ocmu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ocmu *OrderContactMechUpdate) SaveX(ctx context.Context) int {
	affected, err := ocmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ocmu *OrderContactMechUpdate) Exec(ctx context.Context) error {
	_, err := ocmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ocmu *OrderContactMechUpdate) ExecX(ctx context.Context) {
	if err := ocmu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ocmu *OrderContactMechUpdate) defaults() {
	if _, ok := ocmu.mutation.UpdateTime(); !ok {
		v := ordercontactmech.UpdateDefaultUpdateTime()
		ocmu.mutation.SetUpdateTime(v)
	}
}

func (ocmu *OrderContactMechUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   ordercontactmech.Table,
			Columns: ordercontactmech.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: ordercontactmech.FieldID,
			},
		},
	}
	if ps := ocmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ocmu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ordercontactmech.FieldUpdateTime,
		})
	}
	if value, ok := ocmu.mutation.ContactMechPurposeTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: ordercontactmech.FieldContactMechPurposeTypeID,
		})
	}
	if value, ok := ocmu.mutation.AddedContactMechPurposeTypeID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: ordercontactmech.FieldContactMechPurposeTypeID,
		})
	}
	if value, ok := ocmu.mutation.ContactMechID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: ordercontactmech.FieldContactMechID,
		})
	}
	if value, ok := ocmu.mutation.AddedContactMechID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: ordercontactmech.FieldContactMechID,
		})
	}
	if ocmu.mutation.OrderHeaderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ordercontactmech.OrderHeaderTable,
			Columns: []string{ordercontactmech.OrderHeaderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderheader.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ocmu.mutation.OrderHeaderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ordercontactmech.OrderHeaderTable,
			Columns: []string{ordercontactmech.OrderHeaderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderheader.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ocmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ordercontactmech.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// OrderContactMechUpdateOne is the builder for updating a single OrderContactMech entity.
type OrderContactMechUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrderContactMechMutation
}

// SetContactMechPurposeTypeID sets the "contact_mech_purpose_type_id" field.
func (ocmuo *OrderContactMechUpdateOne) SetContactMechPurposeTypeID(i int) *OrderContactMechUpdateOne {
	ocmuo.mutation.ResetContactMechPurposeTypeID()
	ocmuo.mutation.SetContactMechPurposeTypeID(i)
	return ocmuo
}

// AddContactMechPurposeTypeID adds i to the "contact_mech_purpose_type_id" field.
func (ocmuo *OrderContactMechUpdateOne) AddContactMechPurposeTypeID(i int) *OrderContactMechUpdateOne {
	ocmuo.mutation.AddContactMechPurposeTypeID(i)
	return ocmuo
}

// SetContactMechID sets the "contact_mech_id" field.
func (ocmuo *OrderContactMechUpdateOne) SetContactMechID(i int) *OrderContactMechUpdateOne {
	ocmuo.mutation.ResetContactMechID()
	ocmuo.mutation.SetContactMechID(i)
	return ocmuo
}

// AddContactMechID adds i to the "contact_mech_id" field.
func (ocmuo *OrderContactMechUpdateOne) AddContactMechID(i int) *OrderContactMechUpdateOne {
	ocmuo.mutation.AddContactMechID(i)
	return ocmuo
}

// SetOrderHeaderID sets the "order_header" edge to the OrderHeader entity by ID.
func (ocmuo *OrderContactMechUpdateOne) SetOrderHeaderID(id int) *OrderContactMechUpdateOne {
	ocmuo.mutation.SetOrderHeaderID(id)
	return ocmuo
}

// SetNillableOrderHeaderID sets the "order_header" edge to the OrderHeader entity by ID if the given value is not nil.
func (ocmuo *OrderContactMechUpdateOne) SetNillableOrderHeaderID(id *int) *OrderContactMechUpdateOne {
	if id != nil {
		ocmuo = ocmuo.SetOrderHeaderID(*id)
	}
	return ocmuo
}

// SetOrderHeader sets the "order_header" edge to the OrderHeader entity.
func (ocmuo *OrderContactMechUpdateOne) SetOrderHeader(o *OrderHeader) *OrderContactMechUpdateOne {
	return ocmuo.SetOrderHeaderID(o.ID)
}

// Mutation returns the OrderContactMechMutation object of the builder.
func (ocmuo *OrderContactMechUpdateOne) Mutation() *OrderContactMechMutation {
	return ocmuo.mutation
}

// ClearOrderHeader clears the "order_header" edge to the OrderHeader entity.
func (ocmuo *OrderContactMechUpdateOne) ClearOrderHeader() *OrderContactMechUpdateOne {
	ocmuo.mutation.ClearOrderHeader()
	return ocmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ocmuo *OrderContactMechUpdateOne) Select(field string, fields ...string) *OrderContactMechUpdateOne {
	ocmuo.fields = append([]string{field}, fields...)
	return ocmuo
}

// Save executes the query and returns the updated OrderContactMech entity.
func (ocmuo *OrderContactMechUpdateOne) Save(ctx context.Context) (*OrderContactMech, error) {
	var (
		err  error
		node *OrderContactMech
	)
	ocmuo.defaults()
	if len(ocmuo.hooks) == 0 {
		node, err = ocmuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderContactMechMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ocmuo.mutation = mutation
			node, err = ocmuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ocmuo.hooks) - 1; i >= 0; i-- {
			mut = ocmuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ocmuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ocmuo *OrderContactMechUpdateOne) SaveX(ctx context.Context) *OrderContactMech {
	node, err := ocmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ocmuo *OrderContactMechUpdateOne) Exec(ctx context.Context) error {
	_, err := ocmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ocmuo *OrderContactMechUpdateOne) ExecX(ctx context.Context) {
	if err := ocmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ocmuo *OrderContactMechUpdateOne) defaults() {
	if _, ok := ocmuo.mutation.UpdateTime(); !ok {
		v := ordercontactmech.UpdateDefaultUpdateTime()
		ocmuo.mutation.SetUpdateTime(v)
	}
}

func (ocmuo *OrderContactMechUpdateOne) sqlSave(ctx context.Context) (_node *OrderContactMech, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   ordercontactmech.Table,
			Columns: ordercontactmech.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: ordercontactmech.FieldID,
			},
		},
	}
	id, ok := ocmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing OrderContactMech.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := ocmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ordercontactmech.FieldID)
		for _, f := range fields {
			if !ordercontactmech.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != ordercontactmech.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ocmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ocmuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ordercontactmech.FieldUpdateTime,
		})
	}
	if value, ok := ocmuo.mutation.ContactMechPurposeTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: ordercontactmech.FieldContactMechPurposeTypeID,
		})
	}
	if value, ok := ocmuo.mutation.AddedContactMechPurposeTypeID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: ordercontactmech.FieldContactMechPurposeTypeID,
		})
	}
	if value, ok := ocmuo.mutation.ContactMechID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: ordercontactmech.FieldContactMechID,
		})
	}
	if value, ok := ocmuo.mutation.AddedContactMechID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: ordercontactmech.FieldContactMechID,
		})
	}
	if ocmuo.mutation.OrderHeaderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ordercontactmech.OrderHeaderTable,
			Columns: []string{ordercontactmech.OrderHeaderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderheader.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ocmuo.mutation.OrderHeaderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ordercontactmech.OrderHeaderTable,
			Columns: []string{ordercontactmech.OrderHeaderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderheader.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &OrderContactMech{config: ocmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ocmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ordercontactmech.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
