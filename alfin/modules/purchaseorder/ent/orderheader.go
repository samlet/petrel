// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/orderheader"
)

// OrderHeader is the model entity for the OrderHeader schema.
type OrderHeader struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// OrderTypeID holds the value of the "order_type_id" field.
	OrderTypeID int `json:"order_type_id,omitempty"`
	// OrderName holds the value of the "order_name" field.
	OrderName string `json:"order_name,omitempty"`
	// ExternalID holds the value of the "external_id" field.
	ExternalID int `json:"external_id,omitempty"`
	// SalesChannelEnumID holds the value of the "sales_channel_enum_id" field.
	SalesChannelEnumID int `json:"sales_channel_enum_id,omitempty"`
	// OrderDate holds the value of the "order_date" field.
	OrderDate time.Time `json:"order_date,omitempty"`
	// Priority holds the value of the "priority" field.
	Priority orderheader.Priority `json:"priority,omitempty"`
	// EntryDate holds the value of the "entry_date" field.
	EntryDate time.Time `json:"entry_date,omitempty"`
	// PickSheetPrintedDate holds the value of the "pick_sheet_printed_date" field.
	PickSheetPrintedDate time.Time `json:"pick_sheet_printed_date,omitempty"`
	// VisitID holds the value of the "visit_id" field.
	VisitID int `json:"visit_id,omitempty"`
	// StatusID holds the value of the "status_id" field.
	StatusID int `json:"status_id,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// FirstAttemptOrderID holds the value of the "first_attempt_order_id" field.
	FirstAttemptOrderID int `json:"first_attempt_order_id,omitempty"`
	// CurrencyUom holds the value of the "currency_uom" field.
	CurrencyUom int `json:"currency_uom,omitempty"`
	// SyncStatusID holds the value of the "sync_status_id" field.
	SyncStatusID int `json:"sync_status_id,omitempty"`
	// BillingAccountID holds the value of the "billing_account_id" field.
	BillingAccountID int `json:"billing_account_id,omitempty"`
	// OriginFacilityID holds the value of the "origin_facility_id" field.
	OriginFacilityID int `json:"origin_facility_id,omitempty"`
	// WebSiteID holds the value of the "web_site_id" field.
	WebSiteID int `json:"web_site_id,omitempty"`
	// ProductStoreID holds the value of the "product_store_id" field.
	ProductStoreID int `json:"product_store_id,omitempty"`
	// AgreementID holds the value of the "agreement_id" field.
	AgreementID int `json:"agreement_id,omitempty"`
	// TerminalID holds the value of the "terminal_id" field.
	TerminalID string `json:"terminal_id,omitempty"`
	// TransactionID holds the value of the "transaction_id" field.
	TransactionID string `json:"transaction_id,omitempty"`
	// AutoOrderShoppingListID holds the value of the "auto_order_shopping_list_id" field.
	AutoOrderShoppingListID int `json:"auto_order_shopping_list_id,omitempty"`
	// NeedsInventoryIssuance holds the value of the "needs_inventory_issuance" field.
	NeedsInventoryIssuance orderheader.NeedsInventoryIssuance `json:"needs_inventory_issuance,omitempty"`
	// IsRushOrder holds the value of the "is_rush_order" field.
	IsRushOrder orderheader.IsRushOrder `json:"is_rush_order,omitempty"`
	// InternalCode holds the value of the "internal_code" field.
	InternalCode string `json:"internal_code,omitempty"`
	// RemainingSubTotal holds the value of the "remaining_sub_total" field.
	RemainingSubTotal float64 `json:"remaining_sub_total,omitempty"`
	// GrandTotal holds the value of the "grand_total" field.
	GrandTotal float64 `json:"grand_total,omitempty"`
	// IsViewed holds the value of the "is_viewed" field.
	IsViewed orderheader.IsViewed `json:"is_viewed,omitempty"`
	// InvoicePerShipment holds the value of the "invoice_per_shipment" field.
	InvoicePerShipment orderheader.InvoicePerShipment `json:"invoice_per_shipment,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OrderHeaderQuery when eager-loading is set.
	Edges OrderHeaderEdges `json:"edges"`
}

// OrderHeaderEdges holds the relations/edges for other nodes in the graph.
type OrderHeaderEdges struct {
	// ItemIssuances holds the value of the item_issuances edge.
	ItemIssuances []*ItemIssuance `json:"item_issuances,omitempty"`
	// OrderContactMeches holds the value of the order_contact_meches edge.
	OrderContactMeches []*OrderContactMech `json:"order_contact_meches,omitempty"`
	// OrderItems holds the value of the order_items edge.
	OrderItems []*OrderItem `json:"order_items,omitempty"`
	// OrderItemPriceInfos holds the value of the order_item_price_infos edge.
	OrderItemPriceInfos []*OrderItemPriceInfo `json:"order_item_price_infos,omitempty"`
	// OrderItemShipGroups holds the value of the order_item_ship_groups edge.
	OrderItemShipGroups []*OrderItemShipGroup `json:"order_item_ship_groups,omitempty"`
	// OrderItemShipGroupAssocs holds the value of the order_item_ship_group_assocs edge.
	OrderItemShipGroupAssocs []*OrderItemShipGroupAssoc `json:"order_item_ship_group_assocs,omitempty"`
	// OrderRoles holds the value of the order_roles edge.
	OrderRoles []*OrderRole `json:"order_roles,omitempty"`
	// OrderStatuses holds the value of the order_statuses edge.
	OrderStatuses []*OrderStatus `json:"order_statuses,omitempty"`
	// PrimaryShipments holds the value of the primary_shipments edge.
	PrimaryShipments []*Shipment `json:"primary_shipments,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [9]bool
}

// ItemIssuancesOrErr returns the ItemIssuances value or an error if the edge
// was not loaded in eager-loading.
func (e OrderHeaderEdges) ItemIssuancesOrErr() ([]*ItemIssuance, error) {
	if e.loadedTypes[0] {
		return e.ItemIssuances, nil
	}
	return nil, &NotLoadedError{edge: "item_issuances"}
}

// OrderContactMechesOrErr returns the OrderContactMeches value or an error if the edge
// was not loaded in eager-loading.
func (e OrderHeaderEdges) OrderContactMechesOrErr() ([]*OrderContactMech, error) {
	if e.loadedTypes[1] {
		return e.OrderContactMeches, nil
	}
	return nil, &NotLoadedError{edge: "order_contact_meches"}
}

// OrderItemsOrErr returns the OrderItems value or an error if the edge
// was not loaded in eager-loading.
func (e OrderHeaderEdges) OrderItemsOrErr() ([]*OrderItem, error) {
	if e.loadedTypes[2] {
		return e.OrderItems, nil
	}
	return nil, &NotLoadedError{edge: "order_items"}
}

// OrderItemPriceInfosOrErr returns the OrderItemPriceInfos value or an error if the edge
// was not loaded in eager-loading.
func (e OrderHeaderEdges) OrderItemPriceInfosOrErr() ([]*OrderItemPriceInfo, error) {
	if e.loadedTypes[3] {
		return e.OrderItemPriceInfos, nil
	}
	return nil, &NotLoadedError{edge: "order_item_price_infos"}
}

// OrderItemShipGroupsOrErr returns the OrderItemShipGroups value or an error if the edge
// was not loaded in eager-loading.
func (e OrderHeaderEdges) OrderItemShipGroupsOrErr() ([]*OrderItemShipGroup, error) {
	if e.loadedTypes[4] {
		return e.OrderItemShipGroups, nil
	}
	return nil, &NotLoadedError{edge: "order_item_ship_groups"}
}

// OrderItemShipGroupAssocsOrErr returns the OrderItemShipGroupAssocs value or an error if the edge
// was not loaded in eager-loading.
func (e OrderHeaderEdges) OrderItemShipGroupAssocsOrErr() ([]*OrderItemShipGroupAssoc, error) {
	if e.loadedTypes[5] {
		return e.OrderItemShipGroupAssocs, nil
	}
	return nil, &NotLoadedError{edge: "order_item_ship_group_assocs"}
}

// OrderRolesOrErr returns the OrderRoles value or an error if the edge
// was not loaded in eager-loading.
func (e OrderHeaderEdges) OrderRolesOrErr() ([]*OrderRole, error) {
	if e.loadedTypes[6] {
		return e.OrderRoles, nil
	}
	return nil, &NotLoadedError{edge: "order_roles"}
}

// OrderStatusesOrErr returns the OrderStatuses value or an error if the edge
// was not loaded in eager-loading.
func (e OrderHeaderEdges) OrderStatusesOrErr() ([]*OrderStatus, error) {
	if e.loadedTypes[7] {
		return e.OrderStatuses, nil
	}
	return nil, &NotLoadedError{edge: "order_statuses"}
}

// PrimaryShipmentsOrErr returns the PrimaryShipments value or an error if the edge
// was not loaded in eager-loading.
func (e OrderHeaderEdges) PrimaryShipmentsOrErr() ([]*Shipment, error) {
	if e.loadedTypes[8] {
		return e.PrimaryShipments, nil
	}
	return nil, &NotLoadedError{edge: "primary_shipments"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OrderHeader) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case orderheader.FieldRemainingSubTotal, orderheader.FieldGrandTotal:
			values[i] = new(sql.NullFloat64)
		case orderheader.FieldID, orderheader.FieldOrderTypeID, orderheader.FieldExternalID, orderheader.FieldSalesChannelEnumID, orderheader.FieldVisitID, orderheader.FieldStatusID, orderheader.FieldFirstAttemptOrderID, orderheader.FieldCurrencyUom, orderheader.FieldSyncStatusID, orderheader.FieldBillingAccountID, orderheader.FieldOriginFacilityID, orderheader.FieldWebSiteID, orderheader.FieldProductStoreID, orderheader.FieldAgreementID, orderheader.FieldAutoOrderShoppingListID:
			values[i] = new(sql.NullInt64)
		case orderheader.FieldOrderName, orderheader.FieldPriority, orderheader.FieldCreatedBy, orderheader.FieldTerminalID, orderheader.FieldTransactionID, orderheader.FieldNeedsInventoryIssuance, orderheader.FieldIsRushOrder, orderheader.FieldInternalCode, orderheader.FieldIsViewed, orderheader.FieldInvoicePerShipment:
			values[i] = new(sql.NullString)
		case orderheader.FieldCreateTime, orderheader.FieldUpdateTime, orderheader.FieldOrderDate, orderheader.FieldEntryDate, orderheader.FieldPickSheetPrintedDate:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type OrderHeader", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OrderHeader fields.
func (oh *OrderHeader) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case orderheader.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			oh.ID = int(value.Int64)
		case orderheader.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				oh.CreateTime = value.Time
			}
		case orderheader.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				oh.UpdateTime = value.Time
			}
		case orderheader.FieldOrderTypeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order_type_id", values[i])
			} else if value.Valid {
				oh.OrderTypeID = int(value.Int64)
			}
		case orderheader.FieldOrderName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field order_name", values[i])
			} else if value.Valid {
				oh.OrderName = value.String
			}
		case orderheader.FieldExternalID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field external_id", values[i])
			} else if value.Valid {
				oh.ExternalID = int(value.Int64)
			}
		case orderheader.FieldSalesChannelEnumID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sales_channel_enum_id", values[i])
			} else if value.Valid {
				oh.SalesChannelEnumID = int(value.Int64)
			}
		case orderheader.FieldOrderDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field order_date", values[i])
			} else if value.Valid {
				oh.OrderDate = value.Time
			}
		case orderheader.FieldPriority:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field priority", values[i])
			} else if value.Valid {
				oh.Priority = orderheader.Priority(value.String)
			}
		case orderheader.FieldEntryDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field entry_date", values[i])
			} else if value.Valid {
				oh.EntryDate = value.Time
			}
		case orderheader.FieldPickSheetPrintedDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field pick_sheet_printed_date", values[i])
			} else if value.Valid {
				oh.PickSheetPrintedDate = value.Time
			}
		case orderheader.FieldVisitID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field visit_id", values[i])
			} else if value.Valid {
				oh.VisitID = int(value.Int64)
			}
		case orderheader.FieldStatusID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status_id", values[i])
			} else if value.Valid {
				oh.StatusID = int(value.Int64)
			}
		case orderheader.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				oh.CreatedBy = value.String
			}
		case orderheader.FieldFirstAttemptOrderID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field first_attempt_order_id", values[i])
			} else if value.Valid {
				oh.FirstAttemptOrderID = int(value.Int64)
			}
		case orderheader.FieldCurrencyUom:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field currency_uom", values[i])
			} else if value.Valid {
				oh.CurrencyUom = int(value.Int64)
			}
		case orderheader.FieldSyncStatusID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sync_status_id", values[i])
			} else if value.Valid {
				oh.SyncStatusID = int(value.Int64)
			}
		case orderheader.FieldBillingAccountID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field billing_account_id", values[i])
			} else if value.Valid {
				oh.BillingAccountID = int(value.Int64)
			}
		case orderheader.FieldOriginFacilityID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field origin_facility_id", values[i])
			} else if value.Valid {
				oh.OriginFacilityID = int(value.Int64)
			}
		case orderheader.FieldWebSiteID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field web_site_id", values[i])
			} else if value.Valid {
				oh.WebSiteID = int(value.Int64)
			}
		case orderheader.FieldProductStoreID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field product_store_id", values[i])
			} else if value.Valid {
				oh.ProductStoreID = int(value.Int64)
			}
		case orderheader.FieldAgreementID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field agreement_id", values[i])
			} else if value.Valid {
				oh.AgreementID = int(value.Int64)
			}
		case orderheader.FieldTerminalID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field terminal_id", values[i])
			} else if value.Valid {
				oh.TerminalID = value.String
			}
		case orderheader.FieldTransactionID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field transaction_id", values[i])
			} else if value.Valid {
				oh.TransactionID = value.String
			}
		case orderheader.FieldAutoOrderShoppingListID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field auto_order_shopping_list_id", values[i])
			} else if value.Valid {
				oh.AutoOrderShoppingListID = int(value.Int64)
			}
		case orderheader.FieldNeedsInventoryIssuance:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field needs_inventory_issuance", values[i])
			} else if value.Valid {
				oh.NeedsInventoryIssuance = orderheader.NeedsInventoryIssuance(value.String)
			}
		case orderheader.FieldIsRushOrder:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field is_rush_order", values[i])
			} else if value.Valid {
				oh.IsRushOrder = orderheader.IsRushOrder(value.String)
			}
		case orderheader.FieldInternalCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field internal_code", values[i])
			} else if value.Valid {
				oh.InternalCode = value.String
			}
		case orderheader.FieldRemainingSubTotal:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field remaining_sub_total", values[i])
			} else if value.Valid {
				oh.RemainingSubTotal = value.Float64
			}
		case orderheader.FieldGrandTotal:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field grand_total", values[i])
			} else if value.Valid {
				oh.GrandTotal = value.Float64
			}
		case orderheader.FieldIsViewed:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field is_viewed", values[i])
			} else if value.Valid {
				oh.IsViewed = orderheader.IsViewed(value.String)
			}
		case orderheader.FieldInvoicePerShipment:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field invoice_per_shipment", values[i])
			} else if value.Valid {
				oh.InvoicePerShipment = orderheader.InvoicePerShipment(value.String)
			}
		}
	}
	return nil
}

// QueryItemIssuances queries the "item_issuances" edge of the OrderHeader entity.
func (oh *OrderHeader) QueryItemIssuances() *ItemIssuanceQuery {
	return (&OrderHeaderClient{config: oh.config}).QueryItemIssuances(oh)
}

// QueryOrderContactMeches queries the "order_contact_meches" edge of the OrderHeader entity.
func (oh *OrderHeader) QueryOrderContactMeches() *OrderContactMechQuery {
	return (&OrderHeaderClient{config: oh.config}).QueryOrderContactMeches(oh)
}

// QueryOrderItems queries the "order_items" edge of the OrderHeader entity.
func (oh *OrderHeader) QueryOrderItems() *OrderItemQuery {
	return (&OrderHeaderClient{config: oh.config}).QueryOrderItems(oh)
}

// QueryOrderItemPriceInfos queries the "order_item_price_infos" edge of the OrderHeader entity.
func (oh *OrderHeader) QueryOrderItemPriceInfos() *OrderItemPriceInfoQuery {
	return (&OrderHeaderClient{config: oh.config}).QueryOrderItemPriceInfos(oh)
}

// QueryOrderItemShipGroups queries the "order_item_ship_groups" edge of the OrderHeader entity.
func (oh *OrderHeader) QueryOrderItemShipGroups() *OrderItemShipGroupQuery {
	return (&OrderHeaderClient{config: oh.config}).QueryOrderItemShipGroups(oh)
}

// QueryOrderItemShipGroupAssocs queries the "order_item_ship_group_assocs" edge of the OrderHeader entity.
func (oh *OrderHeader) QueryOrderItemShipGroupAssocs() *OrderItemShipGroupAssocQuery {
	return (&OrderHeaderClient{config: oh.config}).QueryOrderItemShipGroupAssocs(oh)
}

// QueryOrderRoles queries the "order_roles" edge of the OrderHeader entity.
func (oh *OrderHeader) QueryOrderRoles() *OrderRoleQuery {
	return (&OrderHeaderClient{config: oh.config}).QueryOrderRoles(oh)
}

// QueryOrderStatuses queries the "order_statuses" edge of the OrderHeader entity.
func (oh *OrderHeader) QueryOrderStatuses() *OrderStatusQuery {
	return (&OrderHeaderClient{config: oh.config}).QueryOrderStatuses(oh)
}

// QueryPrimaryShipments queries the "primary_shipments" edge of the OrderHeader entity.
func (oh *OrderHeader) QueryPrimaryShipments() *ShipmentQuery {
	return (&OrderHeaderClient{config: oh.config}).QueryPrimaryShipments(oh)
}

// Update returns a builder for updating this OrderHeader.
// Note that you need to call OrderHeader.Unwrap() before calling this method if this OrderHeader
// was returned from a transaction, and the transaction was committed or rolled back.
func (oh *OrderHeader) Update() *OrderHeaderUpdateOne {
	return (&OrderHeaderClient{config: oh.config}).UpdateOne(oh)
}

// Unwrap unwraps the OrderHeader entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (oh *OrderHeader) Unwrap() *OrderHeader {
	tx, ok := oh.config.driver.(*txDriver)
	if !ok {
		panic("ent: OrderHeader is not a transactional entity")
	}
	oh.config.driver = tx.drv
	return oh
}

// String implements the fmt.Stringer.
func (oh *OrderHeader) String() string {
	var builder strings.Builder
	builder.WriteString("OrderHeader(")
	builder.WriteString(fmt.Sprintf("id=%v", oh.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(oh.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(oh.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", order_type_id=")
	builder.WriteString(fmt.Sprintf("%v", oh.OrderTypeID))
	builder.WriteString(", order_name=")
	builder.WriteString(oh.OrderName)
	builder.WriteString(", external_id=")
	builder.WriteString(fmt.Sprintf("%v", oh.ExternalID))
	builder.WriteString(", sales_channel_enum_id=")
	builder.WriteString(fmt.Sprintf("%v", oh.SalesChannelEnumID))
	builder.WriteString(", order_date=")
	builder.WriteString(oh.OrderDate.Format(time.ANSIC))
	builder.WriteString(", priority=")
	builder.WriteString(fmt.Sprintf("%v", oh.Priority))
	builder.WriteString(", entry_date=")
	builder.WriteString(oh.EntryDate.Format(time.ANSIC))
	builder.WriteString(", pick_sheet_printed_date=")
	builder.WriteString(oh.PickSheetPrintedDate.Format(time.ANSIC))
	builder.WriteString(", visit_id=")
	builder.WriteString(fmt.Sprintf("%v", oh.VisitID))
	builder.WriteString(", status_id=")
	builder.WriteString(fmt.Sprintf("%v", oh.StatusID))
	builder.WriteString(", created_by=")
	builder.WriteString(oh.CreatedBy)
	builder.WriteString(", first_attempt_order_id=")
	builder.WriteString(fmt.Sprintf("%v", oh.FirstAttemptOrderID))
	builder.WriteString(", currency_uom=")
	builder.WriteString(fmt.Sprintf("%v", oh.CurrencyUom))
	builder.WriteString(", sync_status_id=")
	builder.WriteString(fmt.Sprintf("%v", oh.SyncStatusID))
	builder.WriteString(", billing_account_id=")
	builder.WriteString(fmt.Sprintf("%v", oh.BillingAccountID))
	builder.WriteString(", origin_facility_id=")
	builder.WriteString(fmt.Sprintf("%v", oh.OriginFacilityID))
	builder.WriteString(", web_site_id=")
	builder.WriteString(fmt.Sprintf("%v", oh.WebSiteID))
	builder.WriteString(", product_store_id=")
	builder.WriteString(fmt.Sprintf("%v", oh.ProductStoreID))
	builder.WriteString(", agreement_id=")
	builder.WriteString(fmt.Sprintf("%v", oh.AgreementID))
	builder.WriteString(", terminal_id=")
	builder.WriteString(oh.TerminalID)
	builder.WriteString(", transaction_id=")
	builder.WriteString(oh.TransactionID)
	builder.WriteString(", auto_order_shopping_list_id=")
	builder.WriteString(fmt.Sprintf("%v", oh.AutoOrderShoppingListID))
	builder.WriteString(", needs_inventory_issuance=")
	builder.WriteString(fmt.Sprintf("%v", oh.NeedsInventoryIssuance))
	builder.WriteString(", is_rush_order=")
	builder.WriteString(fmt.Sprintf("%v", oh.IsRushOrder))
	builder.WriteString(", internal_code=")
	builder.WriteString(oh.InternalCode)
	builder.WriteString(", remaining_sub_total=")
	builder.WriteString(fmt.Sprintf("%v", oh.RemainingSubTotal))
	builder.WriteString(", grand_total=")
	builder.WriteString(fmt.Sprintf("%v", oh.GrandTotal))
	builder.WriteString(", is_viewed=")
	builder.WriteString(fmt.Sprintf("%v", oh.IsViewed))
	builder.WriteString(", invoice_per_shipment=")
	builder.WriteString(fmt.Sprintf("%v", oh.InvoicePerShipment))
	builder.WriteByte(')')
	return builder.String()
}

// OrderHeaders is a parsable slice of OrderHeader.
type OrderHeaders []*OrderHeader

func (oh OrderHeaders) config(cfg config) {
	for _i := range oh {
		oh[_i].config = cfg
	}
}
