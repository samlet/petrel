// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/itemissuance"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/ordercontactmech"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/orderheader"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/orderitem"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/orderitempriceinfo"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/orderitemshipgroup"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/orderitemshipgroupassoc"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/orderrole"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/orderstatus"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/shipment"
)

// OrderHeaderCreate is the builder for creating a OrderHeader entity.
type OrderHeaderCreate struct {
	config
	mutation *OrderHeaderMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (ohc *OrderHeaderCreate) SetCreateTime(t time.Time) *OrderHeaderCreate {
	ohc.mutation.SetCreateTime(t)
	return ohc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (ohc *OrderHeaderCreate) SetNillableCreateTime(t *time.Time) *OrderHeaderCreate {
	if t != nil {
		ohc.SetCreateTime(*t)
	}
	return ohc
}

// SetUpdateTime sets the "update_time" field.
func (ohc *OrderHeaderCreate) SetUpdateTime(t time.Time) *OrderHeaderCreate {
	ohc.mutation.SetUpdateTime(t)
	return ohc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (ohc *OrderHeaderCreate) SetNillableUpdateTime(t *time.Time) *OrderHeaderCreate {
	if t != nil {
		ohc.SetUpdateTime(*t)
	}
	return ohc
}

// SetOrderTypeID sets the "order_type_id" field.
func (ohc *OrderHeaderCreate) SetOrderTypeID(i int) *OrderHeaderCreate {
	ohc.mutation.SetOrderTypeID(i)
	return ohc
}

// SetNillableOrderTypeID sets the "order_type_id" field if the given value is not nil.
func (ohc *OrderHeaderCreate) SetNillableOrderTypeID(i *int) *OrderHeaderCreate {
	if i != nil {
		ohc.SetOrderTypeID(*i)
	}
	return ohc
}

// SetOrderName sets the "order_name" field.
func (ohc *OrderHeaderCreate) SetOrderName(s string) *OrderHeaderCreate {
	ohc.mutation.SetOrderName(s)
	return ohc
}

// SetNillableOrderName sets the "order_name" field if the given value is not nil.
func (ohc *OrderHeaderCreate) SetNillableOrderName(s *string) *OrderHeaderCreate {
	if s != nil {
		ohc.SetOrderName(*s)
	}
	return ohc
}

// SetExternalID sets the "external_id" field.
func (ohc *OrderHeaderCreate) SetExternalID(i int) *OrderHeaderCreate {
	ohc.mutation.SetExternalID(i)
	return ohc
}

// SetNillableExternalID sets the "external_id" field if the given value is not nil.
func (ohc *OrderHeaderCreate) SetNillableExternalID(i *int) *OrderHeaderCreate {
	if i != nil {
		ohc.SetExternalID(*i)
	}
	return ohc
}

// SetSalesChannelEnumID sets the "sales_channel_enum_id" field.
func (ohc *OrderHeaderCreate) SetSalesChannelEnumID(i int) *OrderHeaderCreate {
	ohc.mutation.SetSalesChannelEnumID(i)
	return ohc
}

// SetNillableSalesChannelEnumID sets the "sales_channel_enum_id" field if the given value is not nil.
func (ohc *OrderHeaderCreate) SetNillableSalesChannelEnumID(i *int) *OrderHeaderCreate {
	if i != nil {
		ohc.SetSalesChannelEnumID(*i)
	}
	return ohc
}

// SetOrderDate sets the "order_date" field.
func (ohc *OrderHeaderCreate) SetOrderDate(t time.Time) *OrderHeaderCreate {
	ohc.mutation.SetOrderDate(t)
	return ohc
}

// SetNillableOrderDate sets the "order_date" field if the given value is not nil.
func (ohc *OrderHeaderCreate) SetNillableOrderDate(t *time.Time) *OrderHeaderCreate {
	if t != nil {
		ohc.SetOrderDate(*t)
	}
	return ohc
}

// SetPriority sets the "priority" field.
func (ohc *OrderHeaderCreate) SetPriority(o orderheader.Priority) *OrderHeaderCreate {
	ohc.mutation.SetPriority(o)
	return ohc
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (ohc *OrderHeaderCreate) SetNillablePriority(o *orderheader.Priority) *OrderHeaderCreate {
	if o != nil {
		ohc.SetPriority(*o)
	}
	return ohc
}

// SetEntryDate sets the "entry_date" field.
func (ohc *OrderHeaderCreate) SetEntryDate(t time.Time) *OrderHeaderCreate {
	ohc.mutation.SetEntryDate(t)
	return ohc
}

// SetNillableEntryDate sets the "entry_date" field if the given value is not nil.
func (ohc *OrderHeaderCreate) SetNillableEntryDate(t *time.Time) *OrderHeaderCreate {
	if t != nil {
		ohc.SetEntryDate(*t)
	}
	return ohc
}

// SetPickSheetPrintedDate sets the "pick_sheet_printed_date" field.
func (ohc *OrderHeaderCreate) SetPickSheetPrintedDate(t time.Time) *OrderHeaderCreate {
	ohc.mutation.SetPickSheetPrintedDate(t)
	return ohc
}

// SetNillablePickSheetPrintedDate sets the "pick_sheet_printed_date" field if the given value is not nil.
func (ohc *OrderHeaderCreate) SetNillablePickSheetPrintedDate(t *time.Time) *OrderHeaderCreate {
	if t != nil {
		ohc.SetPickSheetPrintedDate(*t)
	}
	return ohc
}

// SetVisitID sets the "visit_id" field.
func (ohc *OrderHeaderCreate) SetVisitID(i int) *OrderHeaderCreate {
	ohc.mutation.SetVisitID(i)
	return ohc
}

// SetNillableVisitID sets the "visit_id" field if the given value is not nil.
func (ohc *OrderHeaderCreate) SetNillableVisitID(i *int) *OrderHeaderCreate {
	if i != nil {
		ohc.SetVisitID(*i)
	}
	return ohc
}

// SetStatusID sets the "status_id" field.
func (ohc *OrderHeaderCreate) SetStatusID(i int) *OrderHeaderCreate {
	ohc.mutation.SetStatusID(i)
	return ohc
}

// SetNillableStatusID sets the "status_id" field if the given value is not nil.
func (ohc *OrderHeaderCreate) SetNillableStatusID(i *int) *OrderHeaderCreate {
	if i != nil {
		ohc.SetStatusID(*i)
	}
	return ohc
}

// SetCreatedBy sets the "created_by" field.
func (ohc *OrderHeaderCreate) SetCreatedBy(s string) *OrderHeaderCreate {
	ohc.mutation.SetCreatedBy(s)
	return ohc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (ohc *OrderHeaderCreate) SetNillableCreatedBy(s *string) *OrderHeaderCreate {
	if s != nil {
		ohc.SetCreatedBy(*s)
	}
	return ohc
}

// SetFirstAttemptOrderID sets the "first_attempt_order_id" field.
func (ohc *OrderHeaderCreate) SetFirstAttemptOrderID(i int) *OrderHeaderCreate {
	ohc.mutation.SetFirstAttemptOrderID(i)
	return ohc
}

// SetNillableFirstAttemptOrderID sets the "first_attempt_order_id" field if the given value is not nil.
func (ohc *OrderHeaderCreate) SetNillableFirstAttemptOrderID(i *int) *OrderHeaderCreate {
	if i != nil {
		ohc.SetFirstAttemptOrderID(*i)
	}
	return ohc
}

// SetCurrencyUom sets the "currency_uom" field.
func (ohc *OrderHeaderCreate) SetCurrencyUom(i int) *OrderHeaderCreate {
	ohc.mutation.SetCurrencyUom(i)
	return ohc
}

// SetNillableCurrencyUom sets the "currency_uom" field if the given value is not nil.
func (ohc *OrderHeaderCreate) SetNillableCurrencyUom(i *int) *OrderHeaderCreate {
	if i != nil {
		ohc.SetCurrencyUom(*i)
	}
	return ohc
}

// SetSyncStatusID sets the "sync_status_id" field.
func (ohc *OrderHeaderCreate) SetSyncStatusID(i int) *OrderHeaderCreate {
	ohc.mutation.SetSyncStatusID(i)
	return ohc
}

// SetNillableSyncStatusID sets the "sync_status_id" field if the given value is not nil.
func (ohc *OrderHeaderCreate) SetNillableSyncStatusID(i *int) *OrderHeaderCreate {
	if i != nil {
		ohc.SetSyncStatusID(*i)
	}
	return ohc
}

// SetBillingAccountID sets the "billing_account_id" field.
func (ohc *OrderHeaderCreate) SetBillingAccountID(i int) *OrderHeaderCreate {
	ohc.mutation.SetBillingAccountID(i)
	return ohc
}

// SetNillableBillingAccountID sets the "billing_account_id" field if the given value is not nil.
func (ohc *OrderHeaderCreate) SetNillableBillingAccountID(i *int) *OrderHeaderCreate {
	if i != nil {
		ohc.SetBillingAccountID(*i)
	}
	return ohc
}

// SetOriginFacilityID sets the "origin_facility_id" field.
func (ohc *OrderHeaderCreate) SetOriginFacilityID(i int) *OrderHeaderCreate {
	ohc.mutation.SetOriginFacilityID(i)
	return ohc
}

// SetNillableOriginFacilityID sets the "origin_facility_id" field if the given value is not nil.
func (ohc *OrderHeaderCreate) SetNillableOriginFacilityID(i *int) *OrderHeaderCreate {
	if i != nil {
		ohc.SetOriginFacilityID(*i)
	}
	return ohc
}

// SetWebSiteID sets the "web_site_id" field.
func (ohc *OrderHeaderCreate) SetWebSiteID(i int) *OrderHeaderCreate {
	ohc.mutation.SetWebSiteID(i)
	return ohc
}

// SetNillableWebSiteID sets the "web_site_id" field if the given value is not nil.
func (ohc *OrderHeaderCreate) SetNillableWebSiteID(i *int) *OrderHeaderCreate {
	if i != nil {
		ohc.SetWebSiteID(*i)
	}
	return ohc
}

// SetProductStoreID sets the "product_store_id" field.
func (ohc *OrderHeaderCreate) SetProductStoreID(i int) *OrderHeaderCreate {
	ohc.mutation.SetProductStoreID(i)
	return ohc
}

// SetNillableProductStoreID sets the "product_store_id" field if the given value is not nil.
func (ohc *OrderHeaderCreate) SetNillableProductStoreID(i *int) *OrderHeaderCreate {
	if i != nil {
		ohc.SetProductStoreID(*i)
	}
	return ohc
}

// SetAgreementID sets the "agreement_id" field.
func (ohc *OrderHeaderCreate) SetAgreementID(i int) *OrderHeaderCreate {
	ohc.mutation.SetAgreementID(i)
	return ohc
}

// SetNillableAgreementID sets the "agreement_id" field if the given value is not nil.
func (ohc *OrderHeaderCreate) SetNillableAgreementID(i *int) *OrderHeaderCreate {
	if i != nil {
		ohc.SetAgreementID(*i)
	}
	return ohc
}

// SetTerminalID sets the "terminal_id" field.
func (ohc *OrderHeaderCreate) SetTerminalID(s string) *OrderHeaderCreate {
	ohc.mutation.SetTerminalID(s)
	return ohc
}

// SetNillableTerminalID sets the "terminal_id" field if the given value is not nil.
func (ohc *OrderHeaderCreate) SetNillableTerminalID(s *string) *OrderHeaderCreate {
	if s != nil {
		ohc.SetTerminalID(*s)
	}
	return ohc
}

// SetTransactionID sets the "transaction_id" field.
func (ohc *OrderHeaderCreate) SetTransactionID(s string) *OrderHeaderCreate {
	ohc.mutation.SetTransactionID(s)
	return ohc
}

// SetNillableTransactionID sets the "transaction_id" field if the given value is not nil.
func (ohc *OrderHeaderCreate) SetNillableTransactionID(s *string) *OrderHeaderCreate {
	if s != nil {
		ohc.SetTransactionID(*s)
	}
	return ohc
}

// SetAutoOrderShoppingListID sets the "auto_order_shopping_list_id" field.
func (ohc *OrderHeaderCreate) SetAutoOrderShoppingListID(i int) *OrderHeaderCreate {
	ohc.mutation.SetAutoOrderShoppingListID(i)
	return ohc
}

// SetNillableAutoOrderShoppingListID sets the "auto_order_shopping_list_id" field if the given value is not nil.
func (ohc *OrderHeaderCreate) SetNillableAutoOrderShoppingListID(i *int) *OrderHeaderCreate {
	if i != nil {
		ohc.SetAutoOrderShoppingListID(*i)
	}
	return ohc
}

// SetNeedsInventoryIssuance sets the "needs_inventory_issuance" field.
func (ohc *OrderHeaderCreate) SetNeedsInventoryIssuance(oii orderheader.NeedsInventoryIssuance) *OrderHeaderCreate {
	ohc.mutation.SetNeedsInventoryIssuance(oii)
	return ohc
}

// SetNillableNeedsInventoryIssuance sets the "needs_inventory_issuance" field if the given value is not nil.
func (ohc *OrderHeaderCreate) SetNillableNeedsInventoryIssuance(oii *orderheader.NeedsInventoryIssuance) *OrderHeaderCreate {
	if oii != nil {
		ohc.SetNeedsInventoryIssuance(*oii)
	}
	return ohc
}

// SetIsRushOrder sets the "is_rush_order" field.
func (ohc *OrderHeaderCreate) SetIsRushOrder(oro orderheader.IsRushOrder) *OrderHeaderCreate {
	ohc.mutation.SetIsRushOrder(oro)
	return ohc
}

// SetNillableIsRushOrder sets the "is_rush_order" field if the given value is not nil.
func (ohc *OrderHeaderCreate) SetNillableIsRushOrder(oro *orderheader.IsRushOrder) *OrderHeaderCreate {
	if oro != nil {
		ohc.SetIsRushOrder(*oro)
	}
	return ohc
}

// SetInternalCode sets the "internal_code" field.
func (ohc *OrderHeaderCreate) SetInternalCode(s string) *OrderHeaderCreate {
	ohc.mutation.SetInternalCode(s)
	return ohc
}

// SetNillableInternalCode sets the "internal_code" field if the given value is not nil.
func (ohc *OrderHeaderCreate) SetNillableInternalCode(s *string) *OrderHeaderCreate {
	if s != nil {
		ohc.SetInternalCode(*s)
	}
	return ohc
}

// SetRemainingSubTotal sets the "remaining_sub_total" field.
func (ohc *OrderHeaderCreate) SetRemainingSubTotal(f float64) *OrderHeaderCreate {
	ohc.mutation.SetRemainingSubTotal(f)
	return ohc
}

// SetNillableRemainingSubTotal sets the "remaining_sub_total" field if the given value is not nil.
func (ohc *OrderHeaderCreate) SetNillableRemainingSubTotal(f *float64) *OrderHeaderCreate {
	if f != nil {
		ohc.SetRemainingSubTotal(*f)
	}
	return ohc
}

// SetGrandTotal sets the "grand_total" field.
func (ohc *OrderHeaderCreate) SetGrandTotal(f float64) *OrderHeaderCreate {
	ohc.mutation.SetGrandTotal(f)
	return ohc
}

// SetNillableGrandTotal sets the "grand_total" field if the given value is not nil.
func (ohc *OrderHeaderCreate) SetNillableGrandTotal(f *float64) *OrderHeaderCreate {
	if f != nil {
		ohc.SetGrandTotal(*f)
	}
	return ohc
}

// SetIsViewed sets the "is_viewed" field.
func (ohc *OrderHeaderCreate) SetIsViewed(ov orderheader.IsViewed) *OrderHeaderCreate {
	ohc.mutation.SetIsViewed(ov)
	return ohc
}

// SetNillableIsViewed sets the "is_viewed" field if the given value is not nil.
func (ohc *OrderHeaderCreate) SetNillableIsViewed(ov *orderheader.IsViewed) *OrderHeaderCreate {
	if ov != nil {
		ohc.SetIsViewed(*ov)
	}
	return ohc
}

// SetInvoicePerShipment sets the "invoice_per_shipment" field.
func (ohc *OrderHeaderCreate) SetInvoicePerShipment(ops orderheader.InvoicePerShipment) *OrderHeaderCreate {
	ohc.mutation.SetInvoicePerShipment(ops)
	return ohc
}

// SetNillableInvoicePerShipment sets the "invoice_per_shipment" field if the given value is not nil.
func (ohc *OrderHeaderCreate) SetNillableInvoicePerShipment(ops *orderheader.InvoicePerShipment) *OrderHeaderCreate {
	if ops != nil {
		ohc.SetInvoicePerShipment(*ops)
	}
	return ohc
}

// AddItemIssuanceIDs adds the "item_issuances" edge to the ItemIssuance entity by IDs.
func (ohc *OrderHeaderCreate) AddItemIssuanceIDs(ids ...int) *OrderHeaderCreate {
	ohc.mutation.AddItemIssuanceIDs(ids...)
	return ohc
}

// AddItemIssuances adds the "item_issuances" edges to the ItemIssuance entity.
func (ohc *OrderHeaderCreate) AddItemIssuances(i ...*ItemIssuance) *OrderHeaderCreate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ohc.AddItemIssuanceIDs(ids...)
}

// AddOrderContactMechIDs adds the "order_contact_meches" edge to the OrderContactMech entity by IDs.
func (ohc *OrderHeaderCreate) AddOrderContactMechIDs(ids ...int) *OrderHeaderCreate {
	ohc.mutation.AddOrderContactMechIDs(ids...)
	return ohc
}

// AddOrderContactMeches adds the "order_contact_meches" edges to the OrderContactMech entity.
func (ohc *OrderHeaderCreate) AddOrderContactMeches(o ...*OrderContactMech) *OrderHeaderCreate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ohc.AddOrderContactMechIDs(ids...)
}

// AddOrderItemIDs adds the "order_items" edge to the OrderItem entity by IDs.
func (ohc *OrderHeaderCreate) AddOrderItemIDs(ids ...int) *OrderHeaderCreate {
	ohc.mutation.AddOrderItemIDs(ids...)
	return ohc
}

// AddOrderItems adds the "order_items" edges to the OrderItem entity.
func (ohc *OrderHeaderCreate) AddOrderItems(o ...*OrderItem) *OrderHeaderCreate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ohc.AddOrderItemIDs(ids...)
}

// AddOrderItemPriceInfoIDs adds the "order_item_price_infos" edge to the OrderItemPriceInfo entity by IDs.
func (ohc *OrderHeaderCreate) AddOrderItemPriceInfoIDs(ids ...int) *OrderHeaderCreate {
	ohc.mutation.AddOrderItemPriceInfoIDs(ids...)
	return ohc
}

// AddOrderItemPriceInfos adds the "order_item_price_infos" edges to the OrderItemPriceInfo entity.
func (ohc *OrderHeaderCreate) AddOrderItemPriceInfos(o ...*OrderItemPriceInfo) *OrderHeaderCreate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ohc.AddOrderItemPriceInfoIDs(ids...)
}

// AddOrderItemShipGroupIDs adds the "order_item_ship_groups" edge to the OrderItemShipGroup entity by IDs.
func (ohc *OrderHeaderCreate) AddOrderItemShipGroupIDs(ids ...int) *OrderHeaderCreate {
	ohc.mutation.AddOrderItemShipGroupIDs(ids...)
	return ohc
}

// AddOrderItemShipGroups adds the "order_item_ship_groups" edges to the OrderItemShipGroup entity.
func (ohc *OrderHeaderCreate) AddOrderItemShipGroups(o ...*OrderItemShipGroup) *OrderHeaderCreate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ohc.AddOrderItemShipGroupIDs(ids...)
}

// AddOrderItemShipGroupAssocIDs adds the "order_item_ship_group_assocs" edge to the OrderItemShipGroupAssoc entity by IDs.
func (ohc *OrderHeaderCreate) AddOrderItemShipGroupAssocIDs(ids ...int) *OrderHeaderCreate {
	ohc.mutation.AddOrderItemShipGroupAssocIDs(ids...)
	return ohc
}

// AddOrderItemShipGroupAssocs adds the "order_item_ship_group_assocs" edges to the OrderItemShipGroupAssoc entity.
func (ohc *OrderHeaderCreate) AddOrderItemShipGroupAssocs(o ...*OrderItemShipGroupAssoc) *OrderHeaderCreate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ohc.AddOrderItemShipGroupAssocIDs(ids...)
}

// AddOrderRoleIDs adds the "order_roles" edge to the OrderRole entity by IDs.
func (ohc *OrderHeaderCreate) AddOrderRoleIDs(ids ...int) *OrderHeaderCreate {
	ohc.mutation.AddOrderRoleIDs(ids...)
	return ohc
}

// AddOrderRoles adds the "order_roles" edges to the OrderRole entity.
func (ohc *OrderHeaderCreate) AddOrderRoles(o ...*OrderRole) *OrderHeaderCreate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ohc.AddOrderRoleIDs(ids...)
}

// AddOrderStatusIDs adds the "order_statuses" edge to the OrderStatus entity by IDs.
func (ohc *OrderHeaderCreate) AddOrderStatusIDs(ids ...int) *OrderHeaderCreate {
	ohc.mutation.AddOrderStatusIDs(ids...)
	return ohc
}

// AddOrderStatuses adds the "order_statuses" edges to the OrderStatus entity.
func (ohc *OrderHeaderCreate) AddOrderStatuses(o ...*OrderStatus) *OrderHeaderCreate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ohc.AddOrderStatusIDs(ids...)
}

// AddPrimaryShipmentIDs adds the "primary_shipments" edge to the Shipment entity by IDs.
func (ohc *OrderHeaderCreate) AddPrimaryShipmentIDs(ids ...int) *OrderHeaderCreate {
	ohc.mutation.AddPrimaryShipmentIDs(ids...)
	return ohc
}

// AddPrimaryShipments adds the "primary_shipments" edges to the Shipment entity.
func (ohc *OrderHeaderCreate) AddPrimaryShipments(s ...*Shipment) *OrderHeaderCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ohc.AddPrimaryShipmentIDs(ids...)
}

// Mutation returns the OrderHeaderMutation object of the builder.
func (ohc *OrderHeaderCreate) Mutation() *OrderHeaderMutation {
	return ohc.mutation
}

// Save creates the OrderHeader in the database.
func (ohc *OrderHeaderCreate) Save(ctx context.Context) (*OrderHeader, error) {
	var (
		err  error
		node *OrderHeader
	)
	ohc.defaults()
	if len(ohc.hooks) == 0 {
		if err = ohc.check(); err != nil {
			return nil, err
		}
		node, err = ohc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderHeaderMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ohc.check(); err != nil {
				return nil, err
			}
			ohc.mutation = mutation
			node, err = ohc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ohc.hooks) - 1; i >= 0; i-- {
			mut = ohc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ohc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ohc *OrderHeaderCreate) SaveX(ctx context.Context) *OrderHeader {
	v, err := ohc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (ohc *OrderHeaderCreate) defaults() {
	if _, ok := ohc.mutation.CreateTime(); !ok {
		v := orderheader.DefaultCreateTime()
		ohc.mutation.SetCreateTime(v)
	}
	if _, ok := ohc.mutation.UpdateTime(); !ok {
		v := orderheader.DefaultUpdateTime()
		ohc.mutation.SetUpdateTime(v)
	}
	if _, ok := ohc.mutation.OrderDate(); !ok {
		v := orderheader.DefaultOrderDate()
		ohc.mutation.SetOrderDate(v)
	}
	if _, ok := ohc.mutation.EntryDate(); !ok {
		v := orderheader.DefaultEntryDate()
		ohc.mutation.SetEntryDate(v)
	}
	if _, ok := ohc.mutation.PickSheetPrintedDate(); !ok {
		v := orderheader.DefaultPickSheetPrintedDate()
		ohc.mutation.SetPickSheetPrintedDate(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ohc *OrderHeaderCreate) check() error {
	if _, ok := ohc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New("ent: missing required field \"create_time\"")}
	}
	if _, ok := ohc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New("ent: missing required field \"update_time\"")}
	}
	if v, ok := ohc.mutation.Priority(); ok {
		if err := orderheader.PriorityValidator(v); err != nil {
			return &ValidationError{Name: "priority", err: fmt.Errorf("ent: validator failed for field \"priority\": %w", err)}
		}
	}
	if v, ok := ohc.mutation.TerminalID(); ok {
		if err := orderheader.TerminalIDValidator(v); err != nil {
			return &ValidationError{Name: "terminal_id", err: fmt.Errorf("ent: validator failed for field \"terminal_id\": %w", err)}
		}
	}
	if v, ok := ohc.mutation.TransactionID(); ok {
		if err := orderheader.TransactionIDValidator(v); err != nil {
			return &ValidationError{Name: "transaction_id", err: fmt.Errorf("ent: validator failed for field \"transaction_id\": %w", err)}
		}
	}
	if v, ok := ohc.mutation.NeedsInventoryIssuance(); ok {
		if err := orderheader.NeedsInventoryIssuanceValidator(v); err != nil {
			return &ValidationError{Name: "needs_inventory_issuance", err: fmt.Errorf("ent: validator failed for field \"needs_inventory_issuance\": %w", err)}
		}
	}
	if v, ok := ohc.mutation.IsRushOrder(); ok {
		if err := orderheader.IsRushOrderValidator(v); err != nil {
			return &ValidationError{Name: "is_rush_order", err: fmt.Errorf("ent: validator failed for field \"is_rush_order\": %w", err)}
		}
	}
	if v, ok := ohc.mutation.InternalCode(); ok {
		if err := orderheader.InternalCodeValidator(v); err != nil {
			return &ValidationError{Name: "internal_code", err: fmt.Errorf("ent: validator failed for field \"internal_code\": %w", err)}
		}
	}
	if v, ok := ohc.mutation.IsViewed(); ok {
		if err := orderheader.IsViewedValidator(v); err != nil {
			return &ValidationError{Name: "is_viewed", err: fmt.Errorf("ent: validator failed for field \"is_viewed\": %w", err)}
		}
	}
	if v, ok := ohc.mutation.InvoicePerShipment(); ok {
		if err := orderheader.InvoicePerShipmentValidator(v); err != nil {
			return &ValidationError{Name: "invoice_per_shipment", err: fmt.Errorf("ent: validator failed for field \"invoice_per_shipment\": %w", err)}
		}
	}
	return nil
}

func (ohc *OrderHeaderCreate) sqlSave(ctx context.Context) (*OrderHeader, error) {
	_node, _spec := ohc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ohc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (ohc *OrderHeaderCreate) createSpec() (*OrderHeader, *sqlgraph.CreateSpec) {
	var (
		_node = &OrderHeader{config: ohc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: orderheader.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: orderheader.FieldID,
			},
		}
	)
	if value, ok := ohc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderheader.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := ohc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderheader.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := ohc.mutation.OrderTypeID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderheader.FieldOrderTypeID,
		})
		_node.OrderTypeID = value
	}
	if value, ok := ohc.mutation.OrderName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderheader.FieldOrderName,
		})
		_node.OrderName = value
	}
	if value, ok := ohc.mutation.ExternalID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderheader.FieldExternalID,
		})
		_node.ExternalID = value
	}
	if value, ok := ohc.mutation.SalesChannelEnumID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderheader.FieldSalesChannelEnumID,
		})
		_node.SalesChannelEnumID = value
	}
	if value, ok := ohc.mutation.OrderDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderheader.FieldOrderDate,
		})
		_node.OrderDate = value
	}
	if value, ok := ohc.mutation.Priority(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: orderheader.FieldPriority,
		})
		_node.Priority = value
	}
	if value, ok := ohc.mutation.EntryDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderheader.FieldEntryDate,
		})
		_node.EntryDate = value
	}
	if value, ok := ohc.mutation.PickSheetPrintedDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderheader.FieldPickSheetPrintedDate,
		})
		_node.PickSheetPrintedDate = value
	}
	if value, ok := ohc.mutation.VisitID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderheader.FieldVisitID,
		})
		_node.VisitID = value
	}
	if value, ok := ohc.mutation.StatusID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderheader.FieldStatusID,
		})
		_node.StatusID = value
	}
	if value, ok := ohc.mutation.CreatedBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderheader.FieldCreatedBy,
		})
		_node.CreatedBy = value
	}
	if value, ok := ohc.mutation.FirstAttemptOrderID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderheader.FieldFirstAttemptOrderID,
		})
		_node.FirstAttemptOrderID = value
	}
	if value, ok := ohc.mutation.CurrencyUom(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderheader.FieldCurrencyUom,
		})
		_node.CurrencyUom = value
	}
	if value, ok := ohc.mutation.SyncStatusID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderheader.FieldSyncStatusID,
		})
		_node.SyncStatusID = value
	}
	if value, ok := ohc.mutation.BillingAccountID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderheader.FieldBillingAccountID,
		})
		_node.BillingAccountID = value
	}
	if value, ok := ohc.mutation.OriginFacilityID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderheader.FieldOriginFacilityID,
		})
		_node.OriginFacilityID = value
	}
	if value, ok := ohc.mutation.WebSiteID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderheader.FieldWebSiteID,
		})
		_node.WebSiteID = value
	}
	if value, ok := ohc.mutation.ProductStoreID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderheader.FieldProductStoreID,
		})
		_node.ProductStoreID = value
	}
	if value, ok := ohc.mutation.AgreementID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderheader.FieldAgreementID,
		})
		_node.AgreementID = value
	}
	if value, ok := ohc.mutation.TerminalID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderheader.FieldTerminalID,
		})
		_node.TerminalID = value
	}
	if value, ok := ohc.mutation.TransactionID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderheader.FieldTransactionID,
		})
		_node.TransactionID = value
	}
	if value, ok := ohc.mutation.AutoOrderShoppingListID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderheader.FieldAutoOrderShoppingListID,
		})
		_node.AutoOrderShoppingListID = value
	}
	if value, ok := ohc.mutation.NeedsInventoryIssuance(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: orderheader.FieldNeedsInventoryIssuance,
		})
		_node.NeedsInventoryIssuance = value
	}
	if value, ok := ohc.mutation.IsRushOrder(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: orderheader.FieldIsRushOrder,
		})
		_node.IsRushOrder = value
	}
	if value, ok := ohc.mutation.InternalCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderheader.FieldInternalCode,
		})
		_node.InternalCode = value
	}
	if value, ok := ohc.mutation.RemainingSubTotal(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderheader.FieldRemainingSubTotal,
		})
		_node.RemainingSubTotal = value
	}
	if value, ok := ohc.mutation.GrandTotal(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderheader.FieldGrandTotal,
		})
		_node.GrandTotal = value
	}
	if value, ok := ohc.mutation.IsViewed(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: orderheader.FieldIsViewed,
		})
		_node.IsViewed = value
	}
	if value, ok := ohc.mutation.InvoicePerShipment(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: orderheader.FieldInvoicePerShipment,
		})
		_node.InvoicePerShipment = value
	}
	if nodes := ohc.mutation.ItemIssuancesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderheader.ItemIssuancesTable,
			Columns: []string{orderheader.ItemIssuancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: itemissuance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ohc.mutation.OrderContactMechesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderheader.OrderContactMechesTable,
			Columns: []string{orderheader.OrderContactMechesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: ordercontactmech.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ohc.mutation.OrderItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderheader.OrderItemsTable,
			Columns: []string{orderheader.OrderItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ohc.mutation.OrderItemPriceInfosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderheader.OrderItemPriceInfosTable,
			Columns: []string{orderheader.OrderItemPriceInfosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitempriceinfo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ohc.mutation.OrderItemShipGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderheader.OrderItemShipGroupsTable,
			Columns: []string{orderheader.OrderItemShipGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitemshipgroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ohc.mutation.OrderItemShipGroupAssocsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderheader.OrderItemShipGroupAssocsTable,
			Columns: []string{orderheader.OrderItemShipGroupAssocsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitemshipgroupassoc.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ohc.mutation.OrderRolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderheader.OrderRolesTable,
			Columns: []string{orderheader.OrderRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderrole.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ohc.mutation.OrderStatusesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderheader.OrderStatusesTable,
			Columns: []string{orderheader.OrderStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderstatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ohc.mutation.PrimaryShipmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderheader.PrimaryShipmentsTable,
			Columns: []string{orderheader.PrimaryShipmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OrderHeaderCreateBulk is the builder for creating many OrderHeader entities in bulk.
type OrderHeaderCreateBulk struct {
	config
	builders []*OrderHeaderCreate
}

// Save creates the OrderHeader entities in the database.
func (ohcb *OrderHeaderCreateBulk) Save(ctx context.Context) ([]*OrderHeader, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ohcb.builders))
	nodes := make([]*OrderHeader, len(ohcb.builders))
	mutators := make([]Mutator, len(ohcb.builders))
	for i := range ohcb.builders {
		func(i int, root context.Context) {
			builder := ohcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrderHeaderMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ohcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ohcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ohcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ohcb *OrderHeaderCreateBulk) SaveX(ctx context.Context) []*OrderHeader {
	v, err := ohcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
