// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/itemissuance"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/ordercontactmech"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/orderheader"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/orderitem"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/orderitempriceinfo"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/orderitemshipgroup"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/orderitemshipgroupassoc"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/orderrole"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/orderstatus"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/predicate"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/shipment"
)

// OrderHeaderQuery is the builder for querying OrderHeader entities.
type OrderHeaderQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.OrderHeader
	// eager-loading edges.
	withItemIssuances            *ItemIssuanceQuery
	withOrderContactMeches       *OrderContactMechQuery
	withOrderItems               *OrderItemQuery
	withOrderItemPriceInfos      *OrderItemPriceInfoQuery
	withOrderItemShipGroups      *OrderItemShipGroupQuery
	withOrderItemShipGroupAssocs *OrderItemShipGroupAssocQuery
	withOrderRoles               *OrderRoleQuery
	withOrderStatuses            *OrderStatusQuery
	withPrimaryShipments         *ShipmentQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the OrderHeaderQuery builder.
func (ohq *OrderHeaderQuery) Where(ps ...predicate.OrderHeader) *OrderHeaderQuery {
	ohq.predicates = append(ohq.predicates, ps...)
	return ohq
}

// Limit adds a limit step to the query.
func (ohq *OrderHeaderQuery) Limit(limit int) *OrderHeaderQuery {
	ohq.limit = &limit
	return ohq
}

// Offset adds an offset step to the query.
func (ohq *OrderHeaderQuery) Offset(offset int) *OrderHeaderQuery {
	ohq.offset = &offset
	return ohq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ohq *OrderHeaderQuery) Unique(unique bool) *OrderHeaderQuery {
	ohq.unique = &unique
	return ohq
}

// Order adds an order step to the query.
func (ohq *OrderHeaderQuery) Order(o ...OrderFunc) *OrderHeaderQuery {
	ohq.order = append(ohq.order, o...)
	return ohq
}

// QueryItemIssuances chains the current query on the "item_issuances" edge.
func (ohq *OrderHeaderQuery) QueryItemIssuances() *ItemIssuanceQuery {
	query := &ItemIssuanceQuery{config: ohq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ohq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ohq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(orderheader.Table, orderheader.FieldID, selector),
			sqlgraph.To(itemissuance.Table, itemissuance.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, orderheader.ItemIssuancesTable, orderheader.ItemIssuancesColumn),
		)
		fromU = sqlgraph.SetNeighbors(ohq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOrderContactMeches chains the current query on the "order_contact_meches" edge.
func (ohq *OrderHeaderQuery) QueryOrderContactMeches() *OrderContactMechQuery {
	query := &OrderContactMechQuery{config: ohq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ohq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ohq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(orderheader.Table, orderheader.FieldID, selector),
			sqlgraph.To(ordercontactmech.Table, ordercontactmech.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, orderheader.OrderContactMechesTable, orderheader.OrderContactMechesColumn),
		)
		fromU = sqlgraph.SetNeighbors(ohq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOrderItems chains the current query on the "order_items" edge.
func (ohq *OrderHeaderQuery) QueryOrderItems() *OrderItemQuery {
	query := &OrderItemQuery{config: ohq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ohq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ohq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(orderheader.Table, orderheader.FieldID, selector),
			sqlgraph.To(orderitem.Table, orderitem.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, orderheader.OrderItemsTable, orderheader.OrderItemsColumn),
		)
		fromU = sqlgraph.SetNeighbors(ohq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOrderItemPriceInfos chains the current query on the "order_item_price_infos" edge.
func (ohq *OrderHeaderQuery) QueryOrderItemPriceInfos() *OrderItemPriceInfoQuery {
	query := &OrderItemPriceInfoQuery{config: ohq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ohq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ohq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(orderheader.Table, orderheader.FieldID, selector),
			sqlgraph.To(orderitempriceinfo.Table, orderitempriceinfo.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, orderheader.OrderItemPriceInfosTable, orderheader.OrderItemPriceInfosColumn),
		)
		fromU = sqlgraph.SetNeighbors(ohq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOrderItemShipGroups chains the current query on the "order_item_ship_groups" edge.
func (ohq *OrderHeaderQuery) QueryOrderItemShipGroups() *OrderItemShipGroupQuery {
	query := &OrderItemShipGroupQuery{config: ohq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ohq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ohq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(orderheader.Table, orderheader.FieldID, selector),
			sqlgraph.To(orderitemshipgroup.Table, orderitemshipgroup.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, orderheader.OrderItemShipGroupsTable, orderheader.OrderItemShipGroupsColumn),
		)
		fromU = sqlgraph.SetNeighbors(ohq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOrderItemShipGroupAssocs chains the current query on the "order_item_ship_group_assocs" edge.
func (ohq *OrderHeaderQuery) QueryOrderItemShipGroupAssocs() *OrderItemShipGroupAssocQuery {
	query := &OrderItemShipGroupAssocQuery{config: ohq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ohq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ohq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(orderheader.Table, orderheader.FieldID, selector),
			sqlgraph.To(orderitemshipgroupassoc.Table, orderitemshipgroupassoc.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, orderheader.OrderItemShipGroupAssocsTable, orderheader.OrderItemShipGroupAssocsColumn),
		)
		fromU = sqlgraph.SetNeighbors(ohq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOrderRoles chains the current query on the "order_roles" edge.
func (ohq *OrderHeaderQuery) QueryOrderRoles() *OrderRoleQuery {
	query := &OrderRoleQuery{config: ohq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ohq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ohq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(orderheader.Table, orderheader.FieldID, selector),
			sqlgraph.To(orderrole.Table, orderrole.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, orderheader.OrderRolesTable, orderheader.OrderRolesColumn),
		)
		fromU = sqlgraph.SetNeighbors(ohq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOrderStatuses chains the current query on the "order_statuses" edge.
func (ohq *OrderHeaderQuery) QueryOrderStatuses() *OrderStatusQuery {
	query := &OrderStatusQuery{config: ohq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ohq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ohq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(orderheader.Table, orderheader.FieldID, selector),
			sqlgraph.To(orderstatus.Table, orderstatus.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, orderheader.OrderStatusesTable, orderheader.OrderStatusesColumn),
		)
		fromU = sqlgraph.SetNeighbors(ohq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPrimaryShipments chains the current query on the "primary_shipments" edge.
func (ohq *OrderHeaderQuery) QueryPrimaryShipments() *ShipmentQuery {
	query := &ShipmentQuery{config: ohq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ohq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ohq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(orderheader.Table, orderheader.FieldID, selector),
			sqlgraph.To(shipment.Table, shipment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, orderheader.PrimaryShipmentsTable, orderheader.PrimaryShipmentsColumn),
		)
		fromU = sqlgraph.SetNeighbors(ohq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first OrderHeader entity from the query.
// Returns a *NotFoundError when no OrderHeader was found.
func (ohq *OrderHeaderQuery) First(ctx context.Context) (*OrderHeader, error) {
	nodes, err := ohq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{orderheader.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ohq *OrderHeaderQuery) FirstX(ctx context.Context) *OrderHeader {
	node, err := ohq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first OrderHeader ID from the query.
// Returns a *NotFoundError when no OrderHeader ID was found.
func (ohq *OrderHeaderQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ohq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{orderheader.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ohq *OrderHeaderQuery) FirstIDX(ctx context.Context) int {
	id, err := ohq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single OrderHeader entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one OrderHeader entity is not found.
// Returns a *NotFoundError when no OrderHeader entities are found.
func (ohq *OrderHeaderQuery) Only(ctx context.Context) (*OrderHeader, error) {
	nodes, err := ohq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{orderheader.Label}
	default:
		return nil, &NotSingularError{orderheader.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ohq *OrderHeaderQuery) OnlyX(ctx context.Context) *OrderHeader {
	node, err := ohq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only OrderHeader ID in the query.
// Returns a *NotSingularError when exactly one OrderHeader ID is not found.
// Returns a *NotFoundError when no entities are found.
func (ohq *OrderHeaderQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ohq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{orderheader.Label}
	default:
		err = &NotSingularError{orderheader.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ohq *OrderHeaderQuery) OnlyIDX(ctx context.Context) int {
	id, err := ohq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of OrderHeaders.
func (ohq *OrderHeaderQuery) All(ctx context.Context) ([]*OrderHeader, error) {
	if err := ohq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return ohq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (ohq *OrderHeaderQuery) AllX(ctx context.Context) []*OrderHeader {
	nodes, err := ohq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of OrderHeader IDs.
func (ohq *OrderHeaderQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := ohq.Select(orderheader.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ohq *OrderHeaderQuery) IDsX(ctx context.Context) []int {
	ids, err := ohq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ohq *OrderHeaderQuery) Count(ctx context.Context) (int, error) {
	if err := ohq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return ohq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (ohq *OrderHeaderQuery) CountX(ctx context.Context) int {
	count, err := ohq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ohq *OrderHeaderQuery) Exist(ctx context.Context) (bool, error) {
	if err := ohq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return ohq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (ohq *OrderHeaderQuery) ExistX(ctx context.Context) bool {
	exist, err := ohq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the OrderHeaderQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ohq *OrderHeaderQuery) Clone() *OrderHeaderQuery {
	if ohq == nil {
		return nil
	}
	return &OrderHeaderQuery{
		config:                       ohq.config,
		limit:                        ohq.limit,
		offset:                       ohq.offset,
		order:                        append([]OrderFunc{}, ohq.order...),
		predicates:                   append([]predicate.OrderHeader{}, ohq.predicates...),
		withItemIssuances:            ohq.withItemIssuances.Clone(),
		withOrderContactMeches:       ohq.withOrderContactMeches.Clone(),
		withOrderItems:               ohq.withOrderItems.Clone(),
		withOrderItemPriceInfos:      ohq.withOrderItemPriceInfos.Clone(),
		withOrderItemShipGroups:      ohq.withOrderItemShipGroups.Clone(),
		withOrderItemShipGroupAssocs: ohq.withOrderItemShipGroupAssocs.Clone(),
		withOrderRoles:               ohq.withOrderRoles.Clone(),
		withOrderStatuses:            ohq.withOrderStatuses.Clone(),
		withPrimaryShipments:         ohq.withPrimaryShipments.Clone(),
		// clone intermediate query.
		sql:  ohq.sql.Clone(),
		path: ohq.path,
	}
}

// WithItemIssuances tells the query-builder to eager-load the nodes that are connected to
// the "item_issuances" edge. The optional arguments are used to configure the query builder of the edge.
func (ohq *OrderHeaderQuery) WithItemIssuances(opts ...func(*ItemIssuanceQuery)) *OrderHeaderQuery {
	query := &ItemIssuanceQuery{config: ohq.config}
	for _, opt := range opts {
		opt(query)
	}
	ohq.withItemIssuances = query
	return ohq
}

// WithOrderContactMeches tells the query-builder to eager-load the nodes that are connected to
// the "order_contact_meches" edge. The optional arguments are used to configure the query builder of the edge.
func (ohq *OrderHeaderQuery) WithOrderContactMeches(opts ...func(*OrderContactMechQuery)) *OrderHeaderQuery {
	query := &OrderContactMechQuery{config: ohq.config}
	for _, opt := range opts {
		opt(query)
	}
	ohq.withOrderContactMeches = query
	return ohq
}

// WithOrderItems tells the query-builder to eager-load the nodes that are connected to
// the "order_items" edge. The optional arguments are used to configure the query builder of the edge.
func (ohq *OrderHeaderQuery) WithOrderItems(opts ...func(*OrderItemQuery)) *OrderHeaderQuery {
	query := &OrderItemQuery{config: ohq.config}
	for _, opt := range opts {
		opt(query)
	}
	ohq.withOrderItems = query
	return ohq
}

// WithOrderItemPriceInfos tells the query-builder to eager-load the nodes that are connected to
// the "order_item_price_infos" edge. The optional arguments are used to configure the query builder of the edge.
func (ohq *OrderHeaderQuery) WithOrderItemPriceInfos(opts ...func(*OrderItemPriceInfoQuery)) *OrderHeaderQuery {
	query := &OrderItemPriceInfoQuery{config: ohq.config}
	for _, opt := range opts {
		opt(query)
	}
	ohq.withOrderItemPriceInfos = query
	return ohq
}

// WithOrderItemShipGroups tells the query-builder to eager-load the nodes that are connected to
// the "order_item_ship_groups" edge. The optional arguments are used to configure the query builder of the edge.
func (ohq *OrderHeaderQuery) WithOrderItemShipGroups(opts ...func(*OrderItemShipGroupQuery)) *OrderHeaderQuery {
	query := &OrderItemShipGroupQuery{config: ohq.config}
	for _, opt := range opts {
		opt(query)
	}
	ohq.withOrderItemShipGroups = query
	return ohq
}

// WithOrderItemShipGroupAssocs tells the query-builder to eager-load the nodes that are connected to
// the "order_item_ship_group_assocs" edge. The optional arguments are used to configure the query builder of the edge.
func (ohq *OrderHeaderQuery) WithOrderItemShipGroupAssocs(opts ...func(*OrderItemShipGroupAssocQuery)) *OrderHeaderQuery {
	query := &OrderItemShipGroupAssocQuery{config: ohq.config}
	for _, opt := range opts {
		opt(query)
	}
	ohq.withOrderItemShipGroupAssocs = query
	return ohq
}

// WithOrderRoles tells the query-builder to eager-load the nodes that are connected to
// the "order_roles" edge. The optional arguments are used to configure the query builder of the edge.
func (ohq *OrderHeaderQuery) WithOrderRoles(opts ...func(*OrderRoleQuery)) *OrderHeaderQuery {
	query := &OrderRoleQuery{config: ohq.config}
	for _, opt := range opts {
		opt(query)
	}
	ohq.withOrderRoles = query
	return ohq
}

// WithOrderStatuses tells the query-builder to eager-load the nodes that are connected to
// the "order_statuses" edge. The optional arguments are used to configure the query builder of the edge.
func (ohq *OrderHeaderQuery) WithOrderStatuses(opts ...func(*OrderStatusQuery)) *OrderHeaderQuery {
	query := &OrderStatusQuery{config: ohq.config}
	for _, opt := range opts {
		opt(query)
	}
	ohq.withOrderStatuses = query
	return ohq
}

// WithPrimaryShipments tells the query-builder to eager-load the nodes that are connected to
// the "primary_shipments" edge. The optional arguments are used to configure the query builder of the edge.
func (ohq *OrderHeaderQuery) WithPrimaryShipments(opts ...func(*ShipmentQuery)) *OrderHeaderQuery {
	query := &ShipmentQuery{config: ohq.config}
	for _, opt := range opts {
		opt(query)
	}
	ohq.withPrimaryShipments = query
	return ohq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.OrderHeader.Query().
//		GroupBy(orderheader.FieldCreateTime).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (ohq *OrderHeaderQuery) GroupBy(field string, fields ...string) *OrderHeaderGroupBy {
	group := &OrderHeaderGroupBy{config: ohq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := ohq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return ohq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//	}
//
//	client.OrderHeader.Query().
//		Select(orderheader.FieldCreateTime).
//		Scan(ctx, &v)
//
func (ohq *OrderHeaderQuery) Select(field string, fields ...string) *OrderHeaderSelect {
	ohq.fields = append([]string{field}, fields...)
	return &OrderHeaderSelect{OrderHeaderQuery: ohq}
}

func (ohq *OrderHeaderQuery) prepareQuery(ctx context.Context) error {
	for _, f := range ohq.fields {
		if !orderheader.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ohq.path != nil {
		prev, err := ohq.path(ctx)
		if err != nil {
			return err
		}
		ohq.sql = prev
	}
	return nil
}

func (ohq *OrderHeaderQuery) sqlAll(ctx context.Context) ([]*OrderHeader, error) {
	var (
		nodes       = []*OrderHeader{}
		_spec       = ohq.querySpec()
		loadedTypes = [9]bool{
			ohq.withItemIssuances != nil,
			ohq.withOrderContactMeches != nil,
			ohq.withOrderItems != nil,
			ohq.withOrderItemPriceInfos != nil,
			ohq.withOrderItemShipGroups != nil,
			ohq.withOrderItemShipGroupAssocs != nil,
			ohq.withOrderRoles != nil,
			ohq.withOrderStatuses != nil,
			ohq.withPrimaryShipments != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &OrderHeader{config: ohq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, ohq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := ohq.withItemIssuances; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*OrderHeader)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.ItemIssuances = []*ItemIssuance{}
		}
		query.withFKs = true
		query.Where(predicate.ItemIssuance(func(s *sql.Selector) {
			s.Where(sql.InValues(orderheader.ItemIssuancesColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.order_header_item_issuances
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "order_header_item_issuances" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "order_header_item_issuances" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.ItemIssuances = append(node.Edges.ItemIssuances, n)
		}
	}

	if query := ohq.withOrderContactMeches; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*OrderHeader)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.OrderContactMeches = []*OrderContactMech{}
		}
		query.withFKs = true
		query.Where(predicate.OrderContactMech(func(s *sql.Selector) {
			s.Where(sql.InValues(orderheader.OrderContactMechesColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.order_header_order_contact_meches
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "order_header_order_contact_meches" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "order_header_order_contact_meches" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.OrderContactMeches = append(node.Edges.OrderContactMeches, n)
		}
	}

	if query := ohq.withOrderItems; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*OrderHeader)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.OrderItems = []*OrderItem{}
		}
		query.withFKs = true
		query.Where(predicate.OrderItem(func(s *sql.Selector) {
			s.Where(sql.InValues(orderheader.OrderItemsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.order_header_order_items
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "order_header_order_items" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "order_header_order_items" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.OrderItems = append(node.Edges.OrderItems, n)
		}
	}

	if query := ohq.withOrderItemPriceInfos; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*OrderHeader)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.OrderItemPriceInfos = []*OrderItemPriceInfo{}
		}
		query.withFKs = true
		query.Where(predicate.OrderItemPriceInfo(func(s *sql.Selector) {
			s.Where(sql.InValues(orderheader.OrderItemPriceInfosColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.order_header_order_item_price_infos
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "order_header_order_item_price_infos" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "order_header_order_item_price_infos" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.OrderItemPriceInfos = append(node.Edges.OrderItemPriceInfos, n)
		}
	}

	if query := ohq.withOrderItemShipGroups; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*OrderHeader)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.OrderItemShipGroups = []*OrderItemShipGroup{}
		}
		query.withFKs = true
		query.Where(predicate.OrderItemShipGroup(func(s *sql.Selector) {
			s.Where(sql.InValues(orderheader.OrderItemShipGroupsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.order_header_order_item_ship_groups
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "order_header_order_item_ship_groups" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "order_header_order_item_ship_groups" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.OrderItemShipGroups = append(node.Edges.OrderItemShipGroups, n)
		}
	}

	if query := ohq.withOrderItemShipGroupAssocs; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*OrderHeader)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.OrderItemShipGroupAssocs = []*OrderItemShipGroupAssoc{}
		}
		query.withFKs = true
		query.Where(predicate.OrderItemShipGroupAssoc(func(s *sql.Selector) {
			s.Where(sql.InValues(orderheader.OrderItemShipGroupAssocsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.order_header_order_item_ship_group_assocs
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "order_header_order_item_ship_group_assocs" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "order_header_order_item_ship_group_assocs" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.OrderItemShipGroupAssocs = append(node.Edges.OrderItemShipGroupAssocs, n)
		}
	}

	if query := ohq.withOrderRoles; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*OrderHeader)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.OrderRoles = []*OrderRole{}
		}
		query.withFKs = true
		query.Where(predicate.OrderRole(func(s *sql.Selector) {
			s.Where(sql.InValues(orderheader.OrderRolesColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.order_header_order_roles
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "order_header_order_roles" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "order_header_order_roles" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.OrderRoles = append(node.Edges.OrderRoles, n)
		}
	}

	if query := ohq.withOrderStatuses; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*OrderHeader)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.OrderStatuses = []*OrderStatus{}
		}
		query.withFKs = true
		query.Where(predicate.OrderStatus(func(s *sql.Selector) {
			s.Where(sql.InValues(orderheader.OrderStatusesColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.order_header_order_statuses
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "order_header_order_statuses" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "order_header_order_statuses" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.OrderStatuses = append(node.Edges.OrderStatuses, n)
		}
	}

	if query := ohq.withPrimaryShipments; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*OrderHeader)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.PrimaryShipments = []*Shipment{}
		}
		query.withFKs = true
		query.Where(predicate.Shipment(func(s *sql.Selector) {
			s.Where(sql.InValues(orderheader.PrimaryShipmentsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.order_header_primary_shipments
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "order_header_primary_shipments" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "order_header_primary_shipments" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.PrimaryShipments = append(node.Edges.PrimaryShipments, n)
		}
	}

	return nodes, nil
}

func (ohq *OrderHeaderQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ohq.querySpec()
	return sqlgraph.CountNodes(ctx, ohq.driver, _spec)
}

func (ohq *OrderHeaderQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := ohq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (ohq *OrderHeaderQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   orderheader.Table,
			Columns: orderheader.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: orderheader.FieldID,
			},
		},
		From:   ohq.sql,
		Unique: true,
	}
	if unique := ohq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := ohq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, orderheader.FieldID)
		for i := range fields {
			if fields[i] != orderheader.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := ohq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ohq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ohq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ohq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ohq *OrderHeaderQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ohq.driver.Dialect())
	t1 := builder.Table(orderheader.Table)
	selector := builder.Select(t1.Columns(orderheader.Columns...)...).From(t1)
	if ohq.sql != nil {
		selector = ohq.sql
		selector.Select(selector.Columns(orderheader.Columns...)...)
	}
	for _, p := range ohq.predicates {
		p(selector)
	}
	for _, p := range ohq.order {
		p(selector)
	}
	if offset := ohq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ohq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// OrderHeaderGroupBy is the group-by builder for OrderHeader entities.
type OrderHeaderGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ohgb *OrderHeaderGroupBy) Aggregate(fns ...AggregateFunc) *OrderHeaderGroupBy {
	ohgb.fns = append(ohgb.fns, fns...)
	return ohgb
}

// Scan applies the group-by query and scans the result into the given value.
func (ohgb *OrderHeaderGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := ohgb.path(ctx)
	if err != nil {
		return err
	}
	ohgb.sql = query
	return ohgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (ohgb *OrderHeaderGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := ohgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (ohgb *OrderHeaderGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(ohgb.fields) > 1 {
		return nil, errors.New("ent: OrderHeaderGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := ohgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (ohgb *OrderHeaderGroupBy) StringsX(ctx context.Context) []string {
	v, err := ohgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (ohgb *OrderHeaderGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = ohgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{orderheader.Label}
	default:
		err = fmt.Errorf("ent: OrderHeaderGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (ohgb *OrderHeaderGroupBy) StringX(ctx context.Context) string {
	v, err := ohgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (ohgb *OrderHeaderGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(ohgb.fields) > 1 {
		return nil, errors.New("ent: OrderHeaderGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := ohgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (ohgb *OrderHeaderGroupBy) IntsX(ctx context.Context) []int {
	v, err := ohgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (ohgb *OrderHeaderGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = ohgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{orderheader.Label}
	default:
		err = fmt.Errorf("ent: OrderHeaderGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (ohgb *OrderHeaderGroupBy) IntX(ctx context.Context) int {
	v, err := ohgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (ohgb *OrderHeaderGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(ohgb.fields) > 1 {
		return nil, errors.New("ent: OrderHeaderGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := ohgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (ohgb *OrderHeaderGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := ohgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (ohgb *OrderHeaderGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = ohgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{orderheader.Label}
	default:
		err = fmt.Errorf("ent: OrderHeaderGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (ohgb *OrderHeaderGroupBy) Float64X(ctx context.Context) float64 {
	v, err := ohgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (ohgb *OrderHeaderGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(ohgb.fields) > 1 {
		return nil, errors.New("ent: OrderHeaderGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := ohgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (ohgb *OrderHeaderGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := ohgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (ohgb *OrderHeaderGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = ohgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{orderheader.Label}
	default:
		err = fmt.Errorf("ent: OrderHeaderGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (ohgb *OrderHeaderGroupBy) BoolX(ctx context.Context) bool {
	v, err := ohgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ohgb *OrderHeaderGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range ohgb.fields {
		if !orderheader.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := ohgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ohgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (ohgb *OrderHeaderGroupBy) sqlQuery() *sql.Selector {
	selector := ohgb.sql
	columns := make([]string, 0, len(ohgb.fields)+len(ohgb.fns))
	columns = append(columns, ohgb.fields...)
	for _, fn := range ohgb.fns {
		columns = append(columns, fn(selector))
	}
	return selector.Select(columns...).GroupBy(ohgb.fields...)
}

// OrderHeaderSelect is the builder for selecting fields of OrderHeader entities.
type OrderHeaderSelect struct {
	*OrderHeaderQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (ohs *OrderHeaderSelect) Scan(ctx context.Context, v interface{}) error {
	if err := ohs.prepareQuery(ctx); err != nil {
		return err
	}
	ohs.sql = ohs.OrderHeaderQuery.sqlQuery(ctx)
	return ohs.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (ohs *OrderHeaderSelect) ScanX(ctx context.Context, v interface{}) {
	if err := ohs.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (ohs *OrderHeaderSelect) Strings(ctx context.Context) ([]string, error) {
	if len(ohs.fields) > 1 {
		return nil, errors.New("ent: OrderHeaderSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := ohs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (ohs *OrderHeaderSelect) StringsX(ctx context.Context) []string {
	v, err := ohs.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (ohs *OrderHeaderSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = ohs.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{orderheader.Label}
	default:
		err = fmt.Errorf("ent: OrderHeaderSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (ohs *OrderHeaderSelect) StringX(ctx context.Context) string {
	v, err := ohs.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (ohs *OrderHeaderSelect) Ints(ctx context.Context) ([]int, error) {
	if len(ohs.fields) > 1 {
		return nil, errors.New("ent: OrderHeaderSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := ohs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (ohs *OrderHeaderSelect) IntsX(ctx context.Context) []int {
	v, err := ohs.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (ohs *OrderHeaderSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = ohs.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{orderheader.Label}
	default:
		err = fmt.Errorf("ent: OrderHeaderSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (ohs *OrderHeaderSelect) IntX(ctx context.Context) int {
	v, err := ohs.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (ohs *OrderHeaderSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(ohs.fields) > 1 {
		return nil, errors.New("ent: OrderHeaderSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := ohs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (ohs *OrderHeaderSelect) Float64sX(ctx context.Context) []float64 {
	v, err := ohs.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (ohs *OrderHeaderSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = ohs.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{orderheader.Label}
	default:
		err = fmt.Errorf("ent: OrderHeaderSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (ohs *OrderHeaderSelect) Float64X(ctx context.Context) float64 {
	v, err := ohs.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (ohs *OrderHeaderSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(ohs.fields) > 1 {
		return nil, errors.New("ent: OrderHeaderSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := ohs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (ohs *OrderHeaderSelect) BoolsX(ctx context.Context) []bool {
	v, err := ohs.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (ohs *OrderHeaderSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = ohs.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{orderheader.Label}
	default:
		err = fmt.Errorf("ent: OrderHeaderSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (ohs *OrderHeaderSelect) BoolX(ctx context.Context) bool {
	v, err := ohs.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ohs *OrderHeaderSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := ohs.sqlQuery().Query()
	if err := ohs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (ohs *OrderHeaderSelect) sqlQuery() sql.Querier {
	selector := ohs.sql
	selector.Select(selector.Columns(ohs.fields...)...)
	return selector
}
