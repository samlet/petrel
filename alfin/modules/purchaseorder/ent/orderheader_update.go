// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/itemissuance"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/ordercontactmech"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/orderheader"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/orderitem"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/orderitempriceinfo"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/orderitemshipgroup"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/orderitemshipgroupassoc"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/orderrole"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/orderstatus"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/predicate"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/shipment"
)

// OrderHeaderUpdate is the builder for updating OrderHeader entities.
type OrderHeaderUpdate struct {
	config
	hooks    []Hook
	mutation *OrderHeaderMutation
}

// Where adds a new predicate for the OrderHeaderUpdate builder.
func (ohu *OrderHeaderUpdate) Where(ps ...predicate.OrderHeader) *OrderHeaderUpdate {
	ohu.mutation.predicates = append(ohu.mutation.predicates, ps...)
	return ohu
}

// SetOrderTypeID sets the "order_type_id" field.
func (ohu *OrderHeaderUpdate) SetOrderTypeID(i int) *OrderHeaderUpdate {
	ohu.mutation.ResetOrderTypeID()
	ohu.mutation.SetOrderTypeID(i)
	return ohu
}

// SetNillableOrderTypeID sets the "order_type_id" field if the given value is not nil.
func (ohu *OrderHeaderUpdate) SetNillableOrderTypeID(i *int) *OrderHeaderUpdate {
	if i != nil {
		ohu.SetOrderTypeID(*i)
	}
	return ohu
}

// AddOrderTypeID adds i to the "order_type_id" field.
func (ohu *OrderHeaderUpdate) AddOrderTypeID(i int) *OrderHeaderUpdate {
	ohu.mutation.AddOrderTypeID(i)
	return ohu
}

// ClearOrderTypeID clears the value of the "order_type_id" field.
func (ohu *OrderHeaderUpdate) ClearOrderTypeID() *OrderHeaderUpdate {
	ohu.mutation.ClearOrderTypeID()
	return ohu
}

// SetOrderName sets the "order_name" field.
func (ohu *OrderHeaderUpdate) SetOrderName(s string) *OrderHeaderUpdate {
	ohu.mutation.SetOrderName(s)
	return ohu
}

// SetNillableOrderName sets the "order_name" field if the given value is not nil.
func (ohu *OrderHeaderUpdate) SetNillableOrderName(s *string) *OrderHeaderUpdate {
	if s != nil {
		ohu.SetOrderName(*s)
	}
	return ohu
}

// ClearOrderName clears the value of the "order_name" field.
func (ohu *OrderHeaderUpdate) ClearOrderName() *OrderHeaderUpdate {
	ohu.mutation.ClearOrderName()
	return ohu
}

// SetExternalID sets the "external_id" field.
func (ohu *OrderHeaderUpdate) SetExternalID(i int) *OrderHeaderUpdate {
	ohu.mutation.ResetExternalID()
	ohu.mutation.SetExternalID(i)
	return ohu
}

// SetNillableExternalID sets the "external_id" field if the given value is not nil.
func (ohu *OrderHeaderUpdate) SetNillableExternalID(i *int) *OrderHeaderUpdate {
	if i != nil {
		ohu.SetExternalID(*i)
	}
	return ohu
}

// AddExternalID adds i to the "external_id" field.
func (ohu *OrderHeaderUpdate) AddExternalID(i int) *OrderHeaderUpdate {
	ohu.mutation.AddExternalID(i)
	return ohu
}

// ClearExternalID clears the value of the "external_id" field.
func (ohu *OrderHeaderUpdate) ClearExternalID() *OrderHeaderUpdate {
	ohu.mutation.ClearExternalID()
	return ohu
}

// SetSalesChannelEnumID sets the "sales_channel_enum_id" field.
func (ohu *OrderHeaderUpdate) SetSalesChannelEnumID(i int) *OrderHeaderUpdate {
	ohu.mutation.ResetSalesChannelEnumID()
	ohu.mutation.SetSalesChannelEnumID(i)
	return ohu
}

// SetNillableSalesChannelEnumID sets the "sales_channel_enum_id" field if the given value is not nil.
func (ohu *OrderHeaderUpdate) SetNillableSalesChannelEnumID(i *int) *OrderHeaderUpdate {
	if i != nil {
		ohu.SetSalesChannelEnumID(*i)
	}
	return ohu
}

// AddSalesChannelEnumID adds i to the "sales_channel_enum_id" field.
func (ohu *OrderHeaderUpdate) AddSalesChannelEnumID(i int) *OrderHeaderUpdate {
	ohu.mutation.AddSalesChannelEnumID(i)
	return ohu
}

// ClearSalesChannelEnumID clears the value of the "sales_channel_enum_id" field.
func (ohu *OrderHeaderUpdate) ClearSalesChannelEnumID() *OrderHeaderUpdate {
	ohu.mutation.ClearSalesChannelEnumID()
	return ohu
}

// SetOrderDate sets the "order_date" field.
func (ohu *OrderHeaderUpdate) SetOrderDate(t time.Time) *OrderHeaderUpdate {
	ohu.mutation.SetOrderDate(t)
	return ohu
}

// SetNillableOrderDate sets the "order_date" field if the given value is not nil.
func (ohu *OrderHeaderUpdate) SetNillableOrderDate(t *time.Time) *OrderHeaderUpdate {
	if t != nil {
		ohu.SetOrderDate(*t)
	}
	return ohu
}

// ClearOrderDate clears the value of the "order_date" field.
func (ohu *OrderHeaderUpdate) ClearOrderDate() *OrderHeaderUpdate {
	ohu.mutation.ClearOrderDate()
	return ohu
}

// SetPriority sets the "priority" field.
func (ohu *OrderHeaderUpdate) SetPriority(o orderheader.Priority) *OrderHeaderUpdate {
	ohu.mutation.SetPriority(o)
	return ohu
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (ohu *OrderHeaderUpdate) SetNillablePriority(o *orderheader.Priority) *OrderHeaderUpdate {
	if o != nil {
		ohu.SetPriority(*o)
	}
	return ohu
}

// ClearPriority clears the value of the "priority" field.
func (ohu *OrderHeaderUpdate) ClearPriority() *OrderHeaderUpdate {
	ohu.mutation.ClearPriority()
	return ohu
}

// SetEntryDate sets the "entry_date" field.
func (ohu *OrderHeaderUpdate) SetEntryDate(t time.Time) *OrderHeaderUpdate {
	ohu.mutation.SetEntryDate(t)
	return ohu
}

// SetNillableEntryDate sets the "entry_date" field if the given value is not nil.
func (ohu *OrderHeaderUpdate) SetNillableEntryDate(t *time.Time) *OrderHeaderUpdate {
	if t != nil {
		ohu.SetEntryDate(*t)
	}
	return ohu
}

// ClearEntryDate clears the value of the "entry_date" field.
func (ohu *OrderHeaderUpdate) ClearEntryDate() *OrderHeaderUpdate {
	ohu.mutation.ClearEntryDate()
	return ohu
}

// SetPickSheetPrintedDate sets the "pick_sheet_printed_date" field.
func (ohu *OrderHeaderUpdate) SetPickSheetPrintedDate(t time.Time) *OrderHeaderUpdate {
	ohu.mutation.SetPickSheetPrintedDate(t)
	return ohu
}

// SetNillablePickSheetPrintedDate sets the "pick_sheet_printed_date" field if the given value is not nil.
func (ohu *OrderHeaderUpdate) SetNillablePickSheetPrintedDate(t *time.Time) *OrderHeaderUpdate {
	if t != nil {
		ohu.SetPickSheetPrintedDate(*t)
	}
	return ohu
}

// ClearPickSheetPrintedDate clears the value of the "pick_sheet_printed_date" field.
func (ohu *OrderHeaderUpdate) ClearPickSheetPrintedDate() *OrderHeaderUpdate {
	ohu.mutation.ClearPickSheetPrintedDate()
	return ohu
}

// SetVisitID sets the "visit_id" field.
func (ohu *OrderHeaderUpdate) SetVisitID(i int) *OrderHeaderUpdate {
	ohu.mutation.ResetVisitID()
	ohu.mutation.SetVisitID(i)
	return ohu
}

// SetNillableVisitID sets the "visit_id" field if the given value is not nil.
func (ohu *OrderHeaderUpdate) SetNillableVisitID(i *int) *OrderHeaderUpdate {
	if i != nil {
		ohu.SetVisitID(*i)
	}
	return ohu
}

// AddVisitID adds i to the "visit_id" field.
func (ohu *OrderHeaderUpdate) AddVisitID(i int) *OrderHeaderUpdate {
	ohu.mutation.AddVisitID(i)
	return ohu
}

// ClearVisitID clears the value of the "visit_id" field.
func (ohu *OrderHeaderUpdate) ClearVisitID() *OrderHeaderUpdate {
	ohu.mutation.ClearVisitID()
	return ohu
}

// SetStatusID sets the "status_id" field.
func (ohu *OrderHeaderUpdate) SetStatusID(i int) *OrderHeaderUpdate {
	ohu.mutation.ResetStatusID()
	ohu.mutation.SetStatusID(i)
	return ohu
}

// SetNillableStatusID sets the "status_id" field if the given value is not nil.
func (ohu *OrderHeaderUpdate) SetNillableStatusID(i *int) *OrderHeaderUpdate {
	if i != nil {
		ohu.SetStatusID(*i)
	}
	return ohu
}

// AddStatusID adds i to the "status_id" field.
func (ohu *OrderHeaderUpdate) AddStatusID(i int) *OrderHeaderUpdate {
	ohu.mutation.AddStatusID(i)
	return ohu
}

// ClearStatusID clears the value of the "status_id" field.
func (ohu *OrderHeaderUpdate) ClearStatusID() *OrderHeaderUpdate {
	ohu.mutation.ClearStatusID()
	return ohu
}

// SetCreatedBy sets the "created_by" field.
func (ohu *OrderHeaderUpdate) SetCreatedBy(s string) *OrderHeaderUpdate {
	ohu.mutation.SetCreatedBy(s)
	return ohu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (ohu *OrderHeaderUpdate) SetNillableCreatedBy(s *string) *OrderHeaderUpdate {
	if s != nil {
		ohu.SetCreatedBy(*s)
	}
	return ohu
}

// ClearCreatedBy clears the value of the "created_by" field.
func (ohu *OrderHeaderUpdate) ClearCreatedBy() *OrderHeaderUpdate {
	ohu.mutation.ClearCreatedBy()
	return ohu
}

// SetFirstAttemptOrderID sets the "first_attempt_order_id" field.
func (ohu *OrderHeaderUpdate) SetFirstAttemptOrderID(i int) *OrderHeaderUpdate {
	ohu.mutation.ResetFirstAttemptOrderID()
	ohu.mutation.SetFirstAttemptOrderID(i)
	return ohu
}

// SetNillableFirstAttemptOrderID sets the "first_attempt_order_id" field if the given value is not nil.
func (ohu *OrderHeaderUpdate) SetNillableFirstAttemptOrderID(i *int) *OrderHeaderUpdate {
	if i != nil {
		ohu.SetFirstAttemptOrderID(*i)
	}
	return ohu
}

// AddFirstAttemptOrderID adds i to the "first_attempt_order_id" field.
func (ohu *OrderHeaderUpdate) AddFirstAttemptOrderID(i int) *OrderHeaderUpdate {
	ohu.mutation.AddFirstAttemptOrderID(i)
	return ohu
}

// ClearFirstAttemptOrderID clears the value of the "first_attempt_order_id" field.
func (ohu *OrderHeaderUpdate) ClearFirstAttemptOrderID() *OrderHeaderUpdate {
	ohu.mutation.ClearFirstAttemptOrderID()
	return ohu
}

// SetCurrencyUom sets the "currency_uom" field.
func (ohu *OrderHeaderUpdate) SetCurrencyUom(i int) *OrderHeaderUpdate {
	ohu.mutation.ResetCurrencyUom()
	ohu.mutation.SetCurrencyUom(i)
	return ohu
}

// SetNillableCurrencyUom sets the "currency_uom" field if the given value is not nil.
func (ohu *OrderHeaderUpdate) SetNillableCurrencyUom(i *int) *OrderHeaderUpdate {
	if i != nil {
		ohu.SetCurrencyUom(*i)
	}
	return ohu
}

// AddCurrencyUom adds i to the "currency_uom" field.
func (ohu *OrderHeaderUpdate) AddCurrencyUom(i int) *OrderHeaderUpdate {
	ohu.mutation.AddCurrencyUom(i)
	return ohu
}

// ClearCurrencyUom clears the value of the "currency_uom" field.
func (ohu *OrderHeaderUpdate) ClearCurrencyUom() *OrderHeaderUpdate {
	ohu.mutation.ClearCurrencyUom()
	return ohu
}

// SetSyncStatusID sets the "sync_status_id" field.
func (ohu *OrderHeaderUpdate) SetSyncStatusID(i int) *OrderHeaderUpdate {
	ohu.mutation.ResetSyncStatusID()
	ohu.mutation.SetSyncStatusID(i)
	return ohu
}

// SetNillableSyncStatusID sets the "sync_status_id" field if the given value is not nil.
func (ohu *OrderHeaderUpdate) SetNillableSyncStatusID(i *int) *OrderHeaderUpdate {
	if i != nil {
		ohu.SetSyncStatusID(*i)
	}
	return ohu
}

// AddSyncStatusID adds i to the "sync_status_id" field.
func (ohu *OrderHeaderUpdate) AddSyncStatusID(i int) *OrderHeaderUpdate {
	ohu.mutation.AddSyncStatusID(i)
	return ohu
}

// ClearSyncStatusID clears the value of the "sync_status_id" field.
func (ohu *OrderHeaderUpdate) ClearSyncStatusID() *OrderHeaderUpdate {
	ohu.mutation.ClearSyncStatusID()
	return ohu
}

// SetBillingAccountID sets the "billing_account_id" field.
func (ohu *OrderHeaderUpdate) SetBillingAccountID(i int) *OrderHeaderUpdate {
	ohu.mutation.ResetBillingAccountID()
	ohu.mutation.SetBillingAccountID(i)
	return ohu
}

// SetNillableBillingAccountID sets the "billing_account_id" field if the given value is not nil.
func (ohu *OrderHeaderUpdate) SetNillableBillingAccountID(i *int) *OrderHeaderUpdate {
	if i != nil {
		ohu.SetBillingAccountID(*i)
	}
	return ohu
}

// AddBillingAccountID adds i to the "billing_account_id" field.
func (ohu *OrderHeaderUpdate) AddBillingAccountID(i int) *OrderHeaderUpdate {
	ohu.mutation.AddBillingAccountID(i)
	return ohu
}

// ClearBillingAccountID clears the value of the "billing_account_id" field.
func (ohu *OrderHeaderUpdate) ClearBillingAccountID() *OrderHeaderUpdate {
	ohu.mutation.ClearBillingAccountID()
	return ohu
}

// SetOriginFacilityID sets the "origin_facility_id" field.
func (ohu *OrderHeaderUpdate) SetOriginFacilityID(i int) *OrderHeaderUpdate {
	ohu.mutation.ResetOriginFacilityID()
	ohu.mutation.SetOriginFacilityID(i)
	return ohu
}

// SetNillableOriginFacilityID sets the "origin_facility_id" field if the given value is not nil.
func (ohu *OrderHeaderUpdate) SetNillableOriginFacilityID(i *int) *OrderHeaderUpdate {
	if i != nil {
		ohu.SetOriginFacilityID(*i)
	}
	return ohu
}

// AddOriginFacilityID adds i to the "origin_facility_id" field.
func (ohu *OrderHeaderUpdate) AddOriginFacilityID(i int) *OrderHeaderUpdate {
	ohu.mutation.AddOriginFacilityID(i)
	return ohu
}

// ClearOriginFacilityID clears the value of the "origin_facility_id" field.
func (ohu *OrderHeaderUpdate) ClearOriginFacilityID() *OrderHeaderUpdate {
	ohu.mutation.ClearOriginFacilityID()
	return ohu
}

// SetWebSiteID sets the "web_site_id" field.
func (ohu *OrderHeaderUpdate) SetWebSiteID(i int) *OrderHeaderUpdate {
	ohu.mutation.ResetWebSiteID()
	ohu.mutation.SetWebSiteID(i)
	return ohu
}

// SetNillableWebSiteID sets the "web_site_id" field if the given value is not nil.
func (ohu *OrderHeaderUpdate) SetNillableWebSiteID(i *int) *OrderHeaderUpdate {
	if i != nil {
		ohu.SetWebSiteID(*i)
	}
	return ohu
}

// AddWebSiteID adds i to the "web_site_id" field.
func (ohu *OrderHeaderUpdate) AddWebSiteID(i int) *OrderHeaderUpdate {
	ohu.mutation.AddWebSiteID(i)
	return ohu
}

// ClearWebSiteID clears the value of the "web_site_id" field.
func (ohu *OrderHeaderUpdate) ClearWebSiteID() *OrderHeaderUpdate {
	ohu.mutation.ClearWebSiteID()
	return ohu
}

// SetProductStoreID sets the "product_store_id" field.
func (ohu *OrderHeaderUpdate) SetProductStoreID(i int) *OrderHeaderUpdate {
	ohu.mutation.ResetProductStoreID()
	ohu.mutation.SetProductStoreID(i)
	return ohu
}

// SetNillableProductStoreID sets the "product_store_id" field if the given value is not nil.
func (ohu *OrderHeaderUpdate) SetNillableProductStoreID(i *int) *OrderHeaderUpdate {
	if i != nil {
		ohu.SetProductStoreID(*i)
	}
	return ohu
}

// AddProductStoreID adds i to the "product_store_id" field.
func (ohu *OrderHeaderUpdate) AddProductStoreID(i int) *OrderHeaderUpdate {
	ohu.mutation.AddProductStoreID(i)
	return ohu
}

// ClearProductStoreID clears the value of the "product_store_id" field.
func (ohu *OrderHeaderUpdate) ClearProductStoreID() *OrderHeaderUpdate {
	ohu.mutation.ClearProductStoreID()
	return ohu
}

// SetAgreementID sets the "agreement_id" field.
func (ohu *OrderHeaderUpdate) SetAgreementID(i int) *OrderHeaderUpdate {
	ohu.mutation.ResetAgreementID()
	ohu.mutation.SetAgreementID(i)
	return ohu
}

// SetNillableAgreementID sets the "agreement_id" field if the given value is not nil.
func (ohu *OrderHeaderUpdate) SetNillableAgreementID(i *int) *OrderHeaderUpdate {
	if i != nil {
		ohu.SetAgreementID(*i)
	}
	return ohu
}

// AddAgreementID adds i to the "agreement_id" field.
func (ohu *OrderHeaderUpdate) AddAgreementID(i int) *OrderHeaderUpdate {
	ohu.mutation.AddAgreementID(i)
	return ohu
}

// ClearAgreementID clears the value of the "agreement_id" field.
func (ohu *OrderHeaderUpdate) ClearAgreementID() *OrderHeaderUpdate {
	ohu.mutation.ClearAgreementID()
	return ohu
}

// SetTerminalID sets the "terminal_id" field.
func (ohu *OrderHeaderUpdate) SetTerminalID(s string) *OrderHeaderUpdate {
	ohu.mutation.SetTerminalID(s)
	return ohu
}

// SetNillableTerminalID sets the "terminal_id" field if the given value is not nil.
func (ohu *OrderHeaderUpdate) SetNillableTerminalID(s *string) *OrderHeaderUpdate {
	if s != nil {
		ohu.SetTerminalID(*s)
	}
	return ohu
}

// ClearTerminalID clears the value of the "terminal_id" field.
func (ohu *OrderHeaderUpdate) ClearTerminalID() *OrderHeaderUpdate {
	ohu.mutation.ClearTerminalID()
	return ohu
}

// SetTransactionID sets the "transaction_id" field.
func (ohu *OrderHeaderUpdate) SetTransactionID(s string) *OrderHeaderUpdate {
	ohu.mutation.SetTransactionID(s)
	return ohu
}

// SetNillableTransactionID sets the "transaction_id" field if the given value is not nil.
func (ohu *OrderHeaderUpdate) SetNillableTransactionID(s *string) *OrderHeaderUpdate {
	if s != nil {
		ohu.SetTransactionID(*s)
	}
	return ohu
}

// ClearTransactionID clears the value of the "transaction_id" field.
func (ohu *OrderHeaderUpdate) ClearTransactionID() *OrderHeaderUpdate {
	ohu.mutation.ClearTransactionID()
	return ohu
}

// SetAutoOrderShoppingListID sets the "auto_order_shopping_list_id" field.
func (ohu *OrderHeaderUpdate) SetAutoOrderShoppingListID(i int) *OrderHeaderUpdate {
	ohu.mutation.ResetAutoOrderShoppingListID()
	ohu.mutation.SetAutoOrderShoppingListID(i)
	return ohu
}

// SetNillableAutoOrderShoppingListID sets the "auto_order_shopping_list_id" field if the given value is not nil.
func (ohu *OrderHeaderUpdate) SetNillableAutoOrderShoppingListID(i *int) *OrderHeaderUpdate {
	if i != nil {
		ohu.SetAutoOrderShoppingListID(*i)
	}
	return ohu
}

// AddAutoOrderShoppingListID adds i to the "auto_order_shopping_list_id" field.
func (ohu *OrderHeaderUpdate) AddAutoOrderShoppingListID(i int) *OrderHeaderUpdate {
	ohu.mutation.AddAutoOrderShoppingListID(i)
	return ohu
}

// ClearAutoOrderShoppingListID clears the value of the "auto_order_shopping_list_id" field.
func (ohu *OrderHeaderUpdate) ClearAutoOrderShoppingListID() *OrderHeaderUpdate {
	ohu.mutation.ClearAutoOrderShoppingListID()
	return ohu
}

// SetNeedsInventoryIssuance sets the "needs_inventory_issuance" field.
func (ohu *OrderHeaderUpdate) SetNeedsInventoryIssuance(oii orderheader.NeedsInventoryIssuance) *OrderHeaderUpdate {
	ohu.mutation.SetNeedsInventoryIssuance(oii)
	return ohu
}

// SetNillableNeedsInventoryIssuance sets the "needs_inventory_issuance" field if the given value is not nil.
func (ohu *OrderHeaderUpdate) SetNillableNeedsInventoryIssuance(oii *orderheader.NeedsInventoryIssuance) *OrderHeaderUpdate {
	if oii != nil {
		ohu.SetNeedsInventoryIssuance(*oii)
	}
	return ohu
}

// ClearNeedsInventoryIssuance clears the value of the "needs_inventory_issuance" field.
func (ohu *OrderHeaderUpdate) ClearNeedsInventoryIssuance() *OrderHeaderUpdate {
	ohu.mutation.ClearNeedsInventoryIssuance()
	return ohu
}

// SetIsRushOrder sets the "is_rush_order" field.
func (ohu *OrderHeaderUpdate) SetIsRushOrder(oro orderheader.IsRushOrder) *OrderHeaderUpdate {
	ohu.mutation.SetIsRushOrder(oro)
	return ohu
}

// SetNillableIsRushOrder sets the "is_rush_order" field if the given value is not nil.
func (ohu *OrderHeaderUpdate) SetNillableIsRushOrder(oro *orderheader.IsRushOrder) *OrderHeaderUpdate {
	if oro != nil {
		ohu.SetIsRushOrder(*oro)
	}
	return ohu
}

// ClearIsRushOrder clears the value of the "is_rush_order" field.
func (ohu *OrderHeaderUpdate) ClearIsRushOrder() *OrderHeaderUpdate {
	ohu.mutation.ClearIsRushOrder()
	return ohu
}

// SetInternalCode sets the "internal_code" field.
func (ohu *OrderHeaderUpdate) SetInternalCode(s string) *OrderHeaderUpdate {
	ohu.mutation.SetInternalCode(s)
	return ohu
}

// SetNillableInternalCode sets the "internal_code" field if the given value is not nil.
func (ohu *OrderHeaderUpdate) SetNillableInternalCode(s *string) *OrderHeaderUpdate {
	if s != nil {
		ohu.SetInternalCode(*s)
	}
	return ohu
}

// ClearInternalCode clears the value of the "internal_code" field.
func (ohu *OrderHeaderUpdate) ClearInternalCode() *OrderHeaderUpdate {
	ohu.mutation.ClearInternalCode()
	return ohu
}

// SetRemainingSubTotal sets the "remaining_sub_total" field.
func (ohu *OrderHeaderUpdate) SetRemainingSubTotal(f float64) *OrderHeaderUpdate {
	ohu.mutation.ResetRemainingSubTotal()
	ohu.mutation.SetRemainingSubTotal(f)
	return ohu
}

// SetNillableRemainingSubTotal sets the "remaining_sub_total" field if the given value is not nil.
func (ohu *OrderHeaderUpdate) SetNillableRemainingSubTotal(f *float64) *OrderHeaderUpdate {
	if f != nil {
		ohu.SetRemainingSubTotal(*f)
	}
	return ohu
}

// AddRemainingSubTotal adds f to the "remaining_sub_total" field.
func (ohu *OrderHeaderUpdate) AddRemainingSubTotal(f float64) *OrderHeaderUpdate {
	ohu.mutation.AddRemainingSubTotal(f)
	return ohu
}

// ClearRemainingSubTotal clears the value of the "remaining_sub_total" field.
func (ohu *OrderHeaderUpdate) ClearRemainingSubTotal() *OrderHeaderUpdate {
	ohu.mutation.ClearRemainingSubTotal()
	return ohu
}

// SetGrandTotal sets the "grand_total" field.
func (ohu *OrderHeaderUpdate) SetGrandTotal(f float64) *OrderHeaderUpdate {
	ohu.mutation.ResetGrandTotal()
	ohu.mutation.SetGrandTotal(f)
	return ohu
}

// SetNillableGrandTotal sets the "grand_total" field if the given value is not nil.
func (ohu *OrderHeaderUpdate) SetNillableGrandTotal(f *float64) *OrderHeaderUpdate {
	if f != nil {
		ohu.SetGrandTotal(*f)
	}
	return ohu
}

// AddGrandTotal adds f to the "grand_total" field.
func (ohu *OrderHeaderUpdate) AddGrandTotal(f float64) *OrderHeaderUpdate {
	ohu.mutation.AddGrandTotal(f)
	return ohu
}

// ClearGrandTotal clears the value of the "grand_total" field.
func (ohu *OrderHeaderUpdate) ClearGrandTotal() *OrderHeaderUpdate {
	ohu.mutation.ClearGrandTotal()
	return ohu
}

// SetIsViewed sets the "is_viewed" field.
func (ohu *OrderHeaderUpdate) SetIsViewed(ov orderheader.IsViewed) *OrderHeaderUpdate {
	ohu.mutation.SetIsViewed(ov)
	return ohu
}

// SetNillableIsViewed sets the "is_viewed" field if the given value is not nil.
func (ohu *OrderHeaderUpdate) SetNillableIsViewed(ov *orderheader.IsViewed) *OrderHeaderUpdate {
	if ov != nil {
		ohu.SetIsViewed(*ov)
	}
	return ohu
}

// ClearIsViewed clears the value of the "is_viewed" field.
func (ohu *OrderHeaderUpdate) ClearIsViewed() *OrderHeaderUpdate {
	ohu.mutation.ClearIsViewed()
	return ohu
}

// SetInvoicePerShipment sets the "invoice_per_shipment" field.
func (ohu *OrderHeaderUpdate) SetInvoicePerShipment(ops orderheader.InvoicePerShipment) *OrderHeaderUpdate {
	ohu.mutation.SetInvoicePerShipment(ops)
	return ohu
}

// SetNillableInvoicePerShipment sets the "invoice_per_shipment" field if the given value is not nil.
func (ohu *OrderHeaderUpdate) SetNillableInvoicePerShipment(ops *orderheader.InvoicePerShipment) *OrderHeaderUpdate {
	if ops != nil {
		ohu.SetInvoicePerShipment(*ops)
	}
	return ohu
}

// ClearInvoicePerShipment clears the value of the "invoice_per_shipment" field.
func (ohu *OrderHeaderUpdate) ClearInvoicePerShipment() *OrderHeaderUpdate {
	ohu.mutation.ClearInvoicePerShipment()
	return ohu
}

// AddItemIssuanceIDs adds the "item_issuances" edge to the ItemIssuance entity by IDs.
func (ohu *OrderHeaderUpdate) AddItemIssuanceIDs(ids ...int) *OrderHeaderUpdate {
	ohu.mutation.AddItemIssuanceIDs(ids...)
	return ohu
}

// AddItemIssuances adds the "item_issuances" edges to the ItemIssuance entity.
func (ohu *OrderHeaderUpdate) AddItemIssuances(i ...*ItemIssuance) *OrderHeaderUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ohu.AddItemIssuanceIDs(ids...)
}

// AddOrderContactMechIDs adds the "order_contact_meches" edge to the OrderContactMech entity by IDs.
func (ohu *OrderHeaderUpdate) AddOrderContactMechIDs(ids ...int) *OrderHeaderUpdate {
	ohu.mutation.AddOrderContactMechIDs(ids...)
	return ohu
}

// AddOrderContactMeches adds the "order_contact_meches" edges to the OrderContactMech entity.
func (ohu *OrderHeaderUpdate) AddOrderContactMeches(o ...*OrderContactMech) *OrderHeaderUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ohu.AddOrderContactMechIDs(ids...)
}

// AddOrderItemIDs adds the "order_items" edge to the OrderItem entity by IDs.
func (ohu *OrderHeaderUpdate) AddOrderItemIDs(ids ...int) *OrderHeaderUpdate {
	ohu.mutation.AddOrderItemIDs(ids...)
	return ohu
}

// AddOrderItems adds the "order_items" edges to the OrderItem entity.
func (ohu *OrderHeaderUpdate) AddOrderItems(o ...*OrderItem) *OrderHeaderUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ohu.AddOrderItemIDs(ids...)
}

// AddOrderItemPriceInfoIDs adds the "order_item_price_infos" edge to the OrderItemPriceInfo entity by IDs.
func (ohu *OrderHeaderUpdate) AddOrderItemPriceInfoIDs(ids ...int) *OrderHeaderUpdate {
	ohu.mutation.AddOrderItemPriceInfoIDs(ids...)
	return ohu
}

// AddOrderItemPriceInfos adds the "order_item_price_infos" edges to the OrderItemPriceInfo entity.
func (ohu *OrderHeaderUpdate) AddOrderItemPriceInfos(o ...*OrderItemPriceInfo) *OrderHeaderUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ohu.AddOrderItemPriceInfoIDs(ids...)
}

// AddOrderItemShipGroupIDs adds the "order_item_ship_groups" edge to the OrderItemShipGroup entity by IDs.
func (ohu *OrderHeaderUpdate) AddOrderItemShipGroupIDs(ids ...int) *OrderHeaderUpdate {
	ohu.mutation.AddOrderItemShipGroupIDs(ids...)
	return ohu
}

// AddOrderItemShipGroups adds the "order_item_ship_groups" edges to the OrderItemShipGroup entity.
func (ohu *OrderHeaderUpdate) AddOrderItemShipGroups(o ...*OrderItemShipGroup) *OrderHeaderUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ohu.AddOrderItemShipGroupIDs(ids...)
}

// AddOrderItemShipGroupAssocIDs adds the "order_item_ship_group_assocs" edge to the OrderItemShipGroupAssoc entity by IDs.
func (ohu *OrderHeaderUpdate) AddOrderItemShipGroupAssocIDs(ids ...int) *OrderHeaderUpdate {
	ohu.mutation.AddOrderItemShipGroupAssocIDs(ids...)
	return ohu
}

// AddOrderItemShipGroupAssocs adds the "order_item_ship_group_assocs" edges to the OrderItemShipGroupAssoc entity.
func (ohu *OrderHeaderUpdate) AddOrderItemShipGroupAssocs(o ...*OrderItemShipGroupAssoc) *OrderHeaderUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ohu.AddOrderItemShipGroupAssocIDs(ids...)
}

// AddOrderRoleIDs adds the "order_roles" edge to the OrderRole entity by IDs.
func (ohu *OrderHeaderUpdate) AddOrderRoleIDs(ids ...int) *OrderHeaderUpdate {
	ohu.mutation.AddOrderRoleIDs(ids...)
	return ohu
}

// AddOrderRoles adds the "order_roles" edges to the OrderRole entity.
func (ohu *OrderHeaderUpdate) AddOrderRoles(o ...*OrderRole) *OrderHeaderUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ohu.AddOrderRoleIDs(ids...)
}

// AddOrderStatusIDs adds the "order_statuses" edge to the OrderStatus entity by IDs.
func (ohu *OrderHeaderUpdate) AddOrderStatusIDs(ids ...int) *OrderHeaderUpdate {
	ohu.mutation.AddOrderStatusIDs(ids...)
	return ohu
}

// AddOrderStatuses adds the "order_statuses" edges to the OrderStatus entity.
func (ohu *OrderHeaderUpdate) AddOrderStatuses(o ...*OrderStatus) *OrderHeaderUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ohu.AddOrderStatusIDs(ids...)
}

// AddPrimaryShipmentIDs adds the "primary_shipments" edge to the Shipment entity by IDs.
func (ohu *OrderHeaderUpdate) AddPrimaryShipmentIDs(ids ...int) *OrderHeaderUpdate {
	ohu.mutation.AddPrimaryShipmentIDs(ids...)
	return ohu
}

// AddPrimaryShipments adds the "primary_shipments" edges to the Shipment entity.
func (ohu *OrderHeaderUpdate) AddPrimaryShipments(s ...*Shipment) *OrderHeaderUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ohu.AddPrimaryShipmentIDs(ids...)
}

// Mutation returns the OrderHeaderMutation object of the builder.
func (ohu *OrderHeaderUpdate) Mutation() *OrderHeaderMutation {
	return ohu.mutation
}

// ClearItemIssuances clears all "item_issuances" edges to the ItemIssuance entity.
func (ohu *OrderHeaderUpdate) ClearItemIssuances() *OrderHeaderUpdate {
	ohu.mutation.ClearItemIssuances()
	return ohu
}

// RemoveItemIssuanceIDs removes the "item_issuances" edge to ItemIssuance entities by IDs.
func (ohu *OrderHeaderUpdate) RemoveItemIssuanceIDs(ids ...int) *OrderHeaderUpdate {
	ohu.mutation.RemoveItemIssuanceIDs(ids...)
	return ohu
}

// RemoveItemIssuances removes "item_issuances" edges to ItemIssuance entities.
func (ohu *OrderHeaderUpdate) RemoveItemIssuances(i ...*ItemIssuance) *OrderHeaderUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ohu.RemoveItemIssuanceIDs(ids...)
}

// ClearOrderContactMeches clears all "order_contact_meches" edges to the OrderContactMech entity.
func (ohu *OrderHeaderUpdate) ClearOrderContactMeches() *OrderHeaderUpdate {
	ohu.mutation.ClearOrderContactMeches()
	return ohu
}

// RemoveOrderContactMechIDs removes the "order_contact_meches" edge to OrderContactMech entities by IDs.
func (ohu *OrderHeaderUpdate) RemoveOrderContactMechIDs(ids ...int) *OrderHeaderUpdate {
	ohu.mutation.RemoveOrderContactMechIDs(ids...)
	return ohu
}

// RemoveOrderContactMeches removes "order_contact_meches" edges to OrderContactMech entities.
func (ohu *OrderHeaderUpdate) RemoveOrderContactMeches(o ...*OrderContactMech) *OrderHeaderUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ohu.RemoveOrderContactMechIDs(ids...)
}

// ClearOrderItems clears all "order_items" edges to the OrderItem entity.
func (ohu *OrderHeaderUpdate) ClearOrderItems() *OrderHeaderUpdate {
	ohu.mutation.ClearOrderItems()
	return ohu
}

// RemoveOrderItemIDs removes the "order_items" edge to OrderItem entities by IDs.
func (ohu *OrderHeaderUpdate) RemoveOrderItemIDs(ids ...int) *OrderHeaderUpdate {
	ohu.mutation.RemoveOrderItemIDs(ids...)
	return ohu
}

// RemoveOrderItems removes "order_items" edges to OrderItem entities.
func (ohu *OrderHeaderUpdate) RemoveOrderItems(o ...*OrderItem) *OrderHeaderUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ohu.RemoveOrderItemIDs(ids...)
}

// ClearOrderItemPriceInfos clears all "order_item_price_infos" edges to the OrderItemPriceInfo entity.
func (ohu *OrderHeaderUpdate) ClearOrderItemPriceInfos() *OrderHeaderUpdate {
	ohu.mutation.ClearOrderItemPriceInfos()
	return ohu
}

// RemoveOrderItemPriceInfoIDs removes the "order_item_price_infos" edge to OrderItemPriceInfo entities by IDs.
func (ohu *OrderHeaderUpdate) RemoveOrderItemPriceInfoIDs(ids ...int) *OrderHeaderUpdate {
	ohu.mutation.RemoveOrderItemPriceInfoIDs(ids...)
	return ohu
}

// RemoveOrderItemPriceInfos removes "order_item_price_infos" edges to OrderItemPriceInfo entities.
func (ohu *OrderHeaderUpdate) RemoveOrderItemPriceInfos(o ...*OrderItemPriceInfo) *OrderHeaderUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ohu.RemoveOrderItemPriceInfoIDs(ids...)
}

// ClearOrderItemShipGroups clears all "order_item_ship_groups" edges to the OrderItemShipGroup entity.
func (ohu *OrderHeaderUpdate) ClearOrderItemShipGroups() *OrderHeaderUpdate {
	ohu.mutation.ClearOrderItemShipGroups()
	return ohu
}

// RemoveOrderItemShipGroupIDs removes the "order_item_ship_groups" edge to OrderItemShipGroup entities by IDs.
func (ohu *OrderHeaderUpdate) RemoveOrderItemShipGroupIDs(ids ...int) *OrderHeaderUpdate {
	ohu.mutation.RemoveOrderItemShipGroupIDs(ids...)
	return ohu
}

// RemoveOrderItemShipGroups removes "order_item_ship_groups" edges to OrderItemShipGroup entities.
func (ohu *OrderHeaderUpdate) RemoveOrderItemShipGroups(o ...*OrderItemShipGroup) *OrderHeaderUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ohu.RemoveOrderItemShipGroupIDs(ids...)
}

// ClearOrderItemShipGroupAssocs clears all "order_item_ship_group_assocs" edges to the OrderItemShipGroupAssoc entity.
func (ohu *OrderHeaderUpdate) ClearOrderItemShipGroupAssocs() *OrderHeaderUpdate {
	ohu.mutation.ClearOrderItemShipGroupAssocs()
	return ohu
}

// RemoveOrderItemShipGroupAssocIDs removes the "order_item_ship_group_assocs" edge to OrderItemShipGroupAssoc entities by IDs.
func (ohu *OrderHeaderUpdate) RemoveOrderItemShipGroupAssocIDs(ids ...int) *OrderHeaderUpdate {
	ohu.mutation.RemoveOrderItemShipGroupAssocIDs(ids...)
	return ohu
}

// RemoveOrderItemShipGroupAssocs removes "order_item_ship_group_assocs" edges to OrderItemShipGroupAssoc entities.
func (ohu *OrderHeaderUpdate) RemoveOrderItemShipGroupAssocs(o ...*OrderItemShipGroupAssoc) *OrderHeaderUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ohu.RemoveOrderItemShipGroupAssocIDs(ids...)
}

// ClearOrderRoles clears all "order_roles" edges to the OrderRole entity.
func (ohu *OrderHeaderUpdate) ClearOrderRoles() *OrderHeaderUpdate {
	ohu.mutation.ClearOrderRoles()
	return ohu
}

// RemoveOrderRoleIDs removes the "order_roles" edge to OrderRole entities by IDs.
func (ohu *OrderHeaderUpdate) RemoveOrderRoleIDs(ids ...int) *OrderHeaderUpdate {
	ohu.mutation.RemoveOrderRoleIDs(ids...)
	return ohu
}

// RemoveOrderRoles removes "order_roles" edges to OrderRole entities.
func (ohu *OrderHeaderUpdate) RemoveOrderRoles(o ...*OrderRole) *OrderHeaderUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ohu.RemoveOrderRoleIDs(ids...)
}

// ClearOrderStatuses clears all "order_statuses" edges to the OrderStatus entity.
func (ohu *OrderHeaderUpdate) ClearOrderStatuses() *OrderHeaderUpdate {
	ohu.mutation.ClearOrderStatuses()
	return ohu
}

// RemoveOrderStatusIDs removes the "order_statuses" edge to OrderStatus entities by IDs.
func (ohu *OrderHeaderUpdate) RemoveOrderStatusIDs(ids ...int) *OrderHeaderUpdate {
	ohu.mutation.RemoveOrderStatusIDs(ids...)
	return ohu
}

// RemoveOrderStatuses removes "order_statuses" edges to OrderStatus entities.
func (ohu *OrderHeaderUpdate) RemoveOrderStatuses(o ...*OrderStatus) *OrderHeaderUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ohu.RemoveOrderStatusIDs(ids...)
}

// ClearPrimaryShipments clears all "primary_shipments" edges to the Shipment entity.
func (ohu *OrderHeaderUpdate) ClearPrimaryShipments() *OrderHeaderUpdate {
	ohu.mutation.ClearPrimaryShipments()
	return ohu
}

// RemovePrimaryShipmentIDs removes the "primary_shipments" edge to Shipment entities by IDs.
func (ohu *OrderHeaderUpdate) RemovePrimaryShipmentIDs(ids ...int) *OrderHeaderUpdate {
	ohu.mutation.RemovePrimaryShipmentIDs(ids...)
	return ohu
}

// RemovePrimaryShipments removes "primary_shipments" edges to Shipment entities.
func (ohu *OrderHeaderUpdate) RemovePrimaryShipments(s ...*Shipment) *OrderHeaderUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ohu.RemovePrimaryShipmentIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ohu *OrderHeaderUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	ohu.defaults()
	if len(ohu.hooks) == 0 {
		if err = ohu.check(); err != nil {
			return 0, err
		}
		affected, err = ohu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderHeaderMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ohu.check(); err != nil {
				return 0, err
			}
			ohu.mutation = mutation
			affected, err = ohu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ohu.hooks) - 1; i >= 0; i-- {
			mut = ohu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ohu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ohu *OrderHeaderUpdate) SaveX(ctx context.Context) int {
	affected, err := ohu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ohu *OrderHeaderUpdate) Exec(ctx context.Context) error {
	_, err := ohu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ohu *OrderHeaderUpdate) ExecX(ctx context.Context) {
	if err := ohu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ohu *OrderHeaderUpdate) defaults() {
	if _, ok := ohu.mutation.UpdateTime(); !ok {
		v := orderheader.UpdateDefaultUpdateTime()
		ohu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ohu *OrderHeaderUpdate) check() error {
	if v, ok := ohu.mutation.Priority(); ok {
		if err := orderheader.PriorityValidator(v); err != nil {
			return &ValidationError{Name: "priority", err: fmt.Errorf("ent: validator failed for field \"priority\": %w", err)}
		}
	}
	if v, ok := ohu.mutation.TerminalID(); ok {
		if err := orderheader.TerminalIDValidator(v); err != nil {
			return &ValidationError{Name: "terminal_id", err: fmt.Errorf("ent: validator failed for field \"terminal_id\": %w", err)}
		}
	}
	if v, ok := ohu.mutation.TransactionID(); ok {
		if err := orderheader.TransactionIDValidator(v); err != nil {
			return &ValidationError{Name: "transaction_id", err: fmt.Errorf("ent: validator failed for field \"transaction_id\": %w", err)}
		}
	}
	if v, ok := ohu.mutation.NeedsInventoryIssuance(); ok {
		if err := orderheader.NeedsInventoryIssuanceValidator(v); err != nil {
			return &ValidationError{Name: "needs_inventory_issuance", err: fmt.Errorf("ent: validator failed for field \"needs_inventory_issuance\": %w", err)}
		}
	}
	if v, ok := ohu.mutation.IsRushOrder(); ok {
		if err := orderheader.IsRushOrderValidator(v); err != nil {
			return &ValidationError{Name: "is_rush_order", err: fmt.Errorf("ent: validator failed for field \"is_rush_order\": %w", err)}
		}
	}
	if v, ok := ohu.mutation.InternalCode(); ok {
		if err := orderheader.InternalCodeValidator(v); err != nil {
			return &ValidationError{Name: "internal_code", err: fmt.Errorf("ent: validator failed for field \"internal_code\": %w", err)}
		}
	}
	if v, ok := ohu.mutation.IsViewed(); ok {
		if err := orderheader.IsViewedValidator(v); err != nil {
			return &ValidationError{Name: "is_viewed", err: fmt.Errorf("ent: validator failed for field \"is_viewed\": %w", err)}
		}
	}
	if v, ok := ohu.mutation.InvoicePerShipment(); ok {
		if err := orderheader.InvoicePerShipmentValidator(v); err != nil {
			return &ValidationError{Name: "invoice_per_shipment", err: fmt.Errorf("ent: validator failed for field \"invoice_per_shipment\": %w", err)}
		}
	}
	return nil
}

func (ohu *OrderHeaderUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   orderheader.Table,
			Columns: orderheader.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: orderheader.FieldID,
			},
		},
	}
	if ps := ohu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ohu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderheader.FieldUpdateTime,
		})
	}
	if value, ok := ohu.mutation.OrderTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderheader.FieldOrderTypeID,
		})
	}
	if value, ok := ohu.mutation.AddedOrderTypeID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderheader.FieldOrderTypeID,
		})
	}
	if ohu.mutation.OrderTypeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderheader.FieldOrderTypeID,
		})
	}
	if value, ok := ohu.mutation.OrderName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderheader.FieldOrderName,
		})
	}
	if ohu.mutation.OrderNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: orderheader.FieldOrderName,
		})
	}
	if value, ok := ohu.mutation.ExternalID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderheader.FieldExternalID,
		})
	}
	if value, ok := ohu.mutation.AddedExternalID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderheader.FieldExternalID,
		})
	}
	if ohu.mutation.ExternalIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderheader.FieldExternalID,
		})
	}
	if value, ok := ohu.mutation.SalesChannelEnumID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderheader.FieldSalesChannelEnumID,
		})
	}
	if value, ok := ohu.mutation.AddedSalesChannelEnumID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderheader.FieldSalesChannelEnumID,
		})
	}
	if ohu.mutation.SalesChannelEnumIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderheader.FieldSalesChannelEnumID,
		})
	}
	if value, ok := ohu.mutation.OrderDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderheader.FieldOrderDate,
		})
	}
	if ohu.mutation.OrderDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: orderheader.FieldOrderDate,
		})
	}
	if value, ok := ohu.mutation.Priority(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: orderheader.FieldPriority,
		})
	}
	if ohu.mutation.PriorityCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: orderheader.FieldPriority,
		})
	}
	if value, ok := ohu.mutation.EntryDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderheader.FieldEntryDate,
		})
	}
	if ohu.mutation.EntryDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: orderheader.FieldEntryDate,
		})
	}
	if value, ok := ohu.mutation.PickSheetPrintedDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderheader.FieldPickSheetPrintedDate,
		})
	}
	if ohu.mutation.PickSheetPrintedDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: orderheader.FieldPickSheetPrintedDate,
		})
	}
	if value, ok := ohu.mutation.VisitID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderheader.FieldVisitID,
		})
	}
	if value, ok := ohu.mutation.AddedVisitID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderheader.FieldVisitID,
		})
	}
	if ohu.mutation.VisitIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderheader.FieldVisitID,
		})
	}
	if value, ok := ohu.mutation.StatusID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderheader.FieldStatusID,
		})
	}
	if value, ok := ohu.mutation.AddedStatusID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderheader.FieldStatusID,
		})
	}
	if ohu.mutation.StatusIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderheader.FieldStatusID,
		})
	}
	if value, ok := ohu.mutation.CreatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderheader.FieldCreatedBy,
		})
	}
	if ohu.mutation.CreatedByCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: orderheader.FieldCreatedBy,
		})
	}
	if value, ok := ohu.mutation.FirstAttemptOrderID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderheader.FieldFirstAttemptOrderID,
		})
	}
	if value, ok := ohu.mutation.AddedFirstAttemptOrderID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderheader.FieldFirstAttemptOrderID,
		})
	}
	if ohu.mutation.FirstAttemptOrderIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderheader.FieldFirstAttemptOrderID,
		})
	}
	if value, ok := ohu.mutation.CurrencyUom(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderheader.FieldCurrencyUom,
		})
	}
	if value, ok := ohu.mutation.AddedCurrencyUom(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderheader.FieldCurrencyUom,
		})
	}
	if ohu.mutation.CurrencyUomCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderheader.FieldCurrencyUom,
		})
	}
	if value, ok := ohu.mutation.SyncStatusID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderheader.FieldSyncStatusID,
		})
	}
	if value, ok := ohu.mutation.AddedSyncStatusID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderheader.FieldSyncStatusID,
		})
	}
	if ohu.mutation.SyncStatusIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderheader.FieldSyncStatusID,
		})
	}
	if value, ok := ohu.mutation.BillingAccountID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderheader.FieldBillingAccountID,
		})
	}
	if value, ok := ohu.mutation.AddedBillingAccountID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderheader.FieldBillingAccountID,
		})
	}
	if ohu.mutation.BillingAccountIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderheader.FieldBillingAccountID,
		})
	}
	if value, ok := ohu.mutation.OriginFacilityID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderheader.FieldOriginFacilityID,
		})
	}
	if value, ok := ohu.mutation.AddedOriginFacilityID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderheader.FieldOriginFacilityID,
		})
	}
	if ohu.mutation.OriginFacilityIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderheader.FieldOriginFacilityID,
		})
	}
	if value, ok := ohu.mutation.WebSiteID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderheader.FieldWebSiteID,
		})
	}
	if value, ok := ohu.mutation.AddedWebSiteID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderheader.FieldWebSiteID,
		})
	}
	if ohu.mutation.WebSiteIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderheader.FieldWebSiteID,
		})
	}
	if value, ok := ohu.mutation.ProductStoreID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderheader.FieldProductStoreID,
		})
	}
	if value, ok := ohu.mutation.AddedProductStoreID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderheader.FieldProductStoreID,
		})
	}
	if ohu.mutation.ProductStoreIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderheader.FieldProductStoreID,
		})
	}
	if value, ok := ohu.mutation.AgreementID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderheader.FieldAgreementID,
		})
	}
	if value, ok := ohu.mutation.AddedAgreementID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderheader.FieldAgreementID,
		})
	}
	if ohu.mutation.AgreementIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderheader.FieldAgreementID,
		})
	}
	if value, ok := ohu.mutation.TerminalID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderheader.FieldTerminalID,
		})
	}
	if ohu.mutation.TerminalIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: orderheader.FieldTerminalID,
		})
	}
	if value, ok := ohu.mutation.TransactionID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderheader.FieldTransactionID,
		})
	}
	if ohu.mutation.TransactionIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: orderheader.FieldTransactionID,
		})
	}
	if value, ok := ohu.mutation.AutoOrderShoppingListID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderheader.FieldAutoOrderShoppingListID,
		})
	}
	if value, ok := ohu.mutation.AddedAutoOrderShoppingListID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderheader.FieldAutoOrderShoppingListID,
		})
	}
	if ohu.mutation.AutoOrderShoppingListIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderheader.FieldAutoOrderShoppingListID,
		})
	}
	if value, ok := ohu.mutation.NeedsInventoryIssuance(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: orderheader.FieldNeedsInventoryIssuance,
		})
	}
	if ohu.mutation.NeedsInventoryIssuanceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: orderheader.FieldNeedsInventoryIssuance,
		})
	}
	if value, ok := ohu.mutation.IsRushOrder(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: orderheader.FieldIsRushOrder,
		})
	}
	if ohu.mutation.IsRushOrderCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: orderheader.FieldIsRushOrder,
		})
	}
	if value, ok := ohu.mutation.InternalCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderheader.FieldInternalCode,
		})
	}
	if ohu.mutation.InternalCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: orderheader.FieldInternalCode,
		})
	}
	if value, ok := ohu.mutation.RemainingSubTotal(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderheader.FieldRemainingSubTotal,
		})
	}
	if value, ok := ohu.mutation.AddedRemainingSubTotal(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderheader.FieldRemainingSubTotal,
		})
	}
	if ohu.mutation.RemainingSubTotalCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: orderheader.FieldRemainingSubTotal,
		})
	}
	if value, ok := ohu.mutation.GrandTotal(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderheader.FieldGrandTotal,
		})
	}
	if value, ok := ohu.mutation.AddedGrandTotal(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderheader.FieldGrandTotal,
		})
	}
	if ohu.mutation.GrandTotalCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: orderheader.FieldGrandTotal,
		})
	}
	if value, ok := ohu.mutation.IsViewed(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: orderheader.FieldIsViewed,
		})
	}
	if ohu.mutation.IsViewedCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: orderheader.FieldIsViewed,
		})
	}
	if value, ok := ohu.mutation.InvoicePerShipment(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: orderheader.FieldInvoicePerShipment,
		})
	}
	if ohu.mutation.InvoicePerShipmentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: orderheader.FieldInvoicePerShipment,
		})
	}
	if ohu.mutation.ItemIssuancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderheader.ItemIssuancesTable,
			Columns: []string{orderheader.ItemIssuancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: itemissuance.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ohu.mutation.RemovedItemIssuancesIDs(); len(nodes) > 0 && !ohu.mutation.ItemIssuancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderheader.ItemIssuancesTable,
			Columns: []string{orderheader.ItemIssuancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: itemissuance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ohu.mutation.ItemIssuancesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderheader.ItemIssuancesTable,
			Columns: []string{orderheader.ItemIssuancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: itemissuance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ohu.mutation.OrderContactMechesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderheader.OrderContactMechesTable,
			Columns: []string{orderheader.OrderContactMechesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: ordercontactmech.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ohu.mutation.RemovedOrderContactMechesIDs(); len(nodes) > 0 && !ohu.mutation.OrderContactMechesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderheader.OrderContactMechesTable,
			Columns: []string{orderheader.OrderContactMechesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: ordercontactmech.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ohu.mutation.OrderContactMechesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderheader.OrderContactMechesTable,
			Columns: []string{orderheader.OrderContactMechesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: ordercontactmech.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ohu.mutation.OrderItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderheader.OrderItemsTable,
			Columns: []string{orderheader.OrderItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitem.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ohu.mutation.RemovedOrderItemsIDs(); len(nodes) > 0 && !ohu.mutation.OrderItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderheader.OrderItemsTable,
			Columns: []string{orderheader.OrderItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ohu.mutation.OrderItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderheader.OrderItemsTable,
			Columns: []string{orderheader.OrderItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ohu.mutation.OrderItemPriceInfosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderheader.OrderItemPriceInfosTable,
			Columns: []string{orderheader.OrderItemPriceInfosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitempriceinfo.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ohu.mutation.RemovedOrderItemPriceInfosIDs(); len(nodes) > 0 && !ohu.mutation.OrderItemPriceInfosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderheader.OrderItemPriceInfosTable,
			Columns: []string{orderheader.OrderItemPriceInfosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitempriceinfo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ohu.mutation.OrderItemPriceInfosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderheader.OrderItemPriceInfosTable,
			Columns: []string{orderheader.OrderItemPriceInfosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitempriceinfo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ohu.mutation.OrderItemShipGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderheader.OrderItemShipGroupsTable,
			Columns: []string{orderheader.OrderItemShipGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitemshipgroup.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ohu.mutation.RemovedOrderItemShipGroupsIDs(); len(nodes) > 0 && !ohu.mutation.OrderItemShipGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderheader.OrderItemShipGroupsTable,
			Columns: []string{orderheader.OrderItemShipGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitemshipgroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ohu.mutation.OrderItemShipGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderheader.OrderItemShipGroupsTable,
			Columns: []string{orderheader.OrderItemShipGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitemshipgroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ohu.mutation.OrderItemShipGroupAssocsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderheader.OrderItemShipGroupAssocsTable,
			Columns: []string{orderheader.OrderItemShipGroupAssocsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitemshipgroupassoc.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ohu.mutation.RemovedOrderItemShipGroupAssocsIDs(); len(nodes) > 0 && !ohu.mutation.OrderItemShipGroupAssocsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderheader.OrderItemShipGroupAssocsTable,
			Columns: []string{orderheader.OrderItemShipGroupAssocsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitemshipgroupassoc.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ohu.mutation.OrderItemShipGroupAssocsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderheader.OrderItemShipGroupAssocsTable,
			Columns: []string{orderheader.OrderItemShipGroupAssocsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitemshipgroupassoc.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ohu.mutation.OrderRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderheader.OrderRolesTable,
			Columns: []string{orderheader.OrderRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderrole.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ohu.mutation.RemovedOrderRolesIDs(); len(nodes) > 0 && !ohu.mutation.OrderRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderheader.OrderRolesTable,
			Columns: []string{orderheader.OrderRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderrole.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ohu.mutation.OrderRolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderheader.OrderRolesTable,
			Columns: []string{orderheader.OrderRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderrole.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ohu.mutation.OrderStatusesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderheader.OrderStatusesTable,
			Columns: []string{orderheader.OrderStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderstatus.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ohu.mutation.RemovedOrderStatusesIDs(); len(nodes) > 0 && !ohu.mutation.OrderStatusesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderheader.OrderStatusesTable,
			Columns: []string{orderheader.OrderStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderstatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ohu.mutation.OrderStatusesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderheader.OrderStatusesTable,
			Columns: []string{orderheader.OrderStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderstatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ohu.mutation.PrimaryShipmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderheader.PrimaryShipmentsTable,
			Columns: []string{orderheader.PrimaryShipmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ohu.mutation.RemovedPrimaryShipmentsIDs(); len(nodes) > 0 && !ohu.mutation.PrimaryShipmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderheader.PrimaryShipmentsTable,
			Columns: []string{orderheader.PrimaryShipmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ohu.mutation.PrimaryShipmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderheader.PrimaryShipmentsTable,
			Columns: []string{orderheader.PrimaryShipmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ohu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderheader.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// OrderHeaderUpdateOne is the builder for updating a single OrderHeader entity.
type OrderHeaderUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrderHeaderMutation
}

// SetOrderTypeID sets the "order_type_id" field.
func (ohuo *OrderHeaderUpdateOne) SetOrderTypeID(i int) *OrderHeaderUpdateOne {
	ohuo.mutation.ResetOrderTypeID()
	ohuo.mutation.SetOrderTypeID(i)
	return ohuo
}

// SetNillableOrderTypeID sets the "order_type_id" field if the given value is not nil.
func (ohuo *OrderHeaderUpdateOne) SetNillableOrderTypeID(i *int) *OrderHeaderUpdateOne {
	if i != nil {
		ohuo.SetOrderTypeID(*i)
	}
	return ohuo
}

// AddOrderTypeID adds i to the "order_type_id" field.
func (ohuo *OrderHeaderUpdateOne) AddOrderTypeID(i int) *OrderHeaderUpdateOne {
	ohuo.mutation.AddOrderTypeID(i)
	return ohuo
}

// ClearOrderTypeID clears the value of the "order_type_id" field.
func (ohuo *OrderHeaderUpdateOne) ClearOrderTypeID() *OrderHeaderUpdateOne {
	ohuo.mutation.ClearOrderTypeID()
	return ohuo
}

// SetOrderName sets the "order_name" field.
func (ohuo *OrderHeaderUpdateOne) SetOrderName(s string) *OrderHeaderUpdateOne {
	ohuo.mutation.SetOrderName(s)
	return ohuo
}

// SetNillableOrderName sets the "order_name" field if the given value is not nil.
func (ohuo *OrderHeaderUpdateOne) SetNillableOrderName(s *string) *OrderHeaderUpdateOne {
	if s != nil {
		ohuo.SetOrderName(*s)
	}
	return ohuo
}

// ClearOrderName clears the value of the "order_name" field.
func (ohuo *OrderHeaderUpdateOne) ClearOrderName() *OrderHeaderUpdateOne {
	ohuo.mutation.ClearOrderName()
	return ohuo
}

// SetExternalID sets the "external_id" field.
func (ohuo *OrderHeaderUpdateOne) SetExternalID(i int) *OrderHeaderUpdateOne {
	ohuo.mutation.ResetExternalID()
	ohuo.mutation.SetExternalID(i)
	return ohuo
}

// SetNillableExternalID sets the "external_id" field if the given value is not nil.
func (ohuo *OrderHeaderUpdateOne) SetNillableExternalID(i *int) *OrderHeaderUpdateOne {
	if i != nil {
		ohuo.SetExternalID(*i)
	}
	return ohuo
}

// AddExternalID adds i to the "external_id" field.
func (ohuo *OrderHeaderUpdateOne) AddExternalID(i int) *OrderHeaderUpdateOne {
	ohuo.mutation.AddExternalID(i)
	return ohuo
}

// ClearExternalID clears the value of the "external_id" field.
func (ohuo *OrderHeaderUpdateOne) ClearExternalID() *OrderHeaderUpdateOne {
	ohuo.mutation.ClearExternalID()
	return ohuo
}

// SetSalesChannelEnumID sets the "sales_channel_enum_id" field.
func (ohuo *OrderHeaderUpdateOne) SetSalesChannelEnumID(i int) *OrderHeaderUpdateOne {
	ohuo.mutation.ResetSalesChannelEnumID()
	ohuo.mutation.SetSalesChannelEnumID(i)
	return ohuo
}

// SetNillableSalesChannelEnumID sets the "sales_channel_enum_id" field if the given value is not nil.
func (ohuo *OrderHeaderUpdateOne) SetNillableSalesChannelEnumID(i *int) *OrderHeaderUpdateOne {
	if i != nil {
		ohuo.SetSalesChannelEnumID(*i)
	}
	return ohuo
}

// AddSalesChannelEnumID adds i to the "sales_channel_enum_id" field.
func (ohuo *OrderHeaderUpdateOne) AddSalesChannelEnumID(i int) *OrderHeaderUpdateOne {
	ohuo.mutation.AddSalesChannelEnumID(i)
	return ohuo
}

// ClearSalesChannelEnumID clears the value of the "sales_channel_enum_id" field.
func (ohuo *OrderHeaderUpdateOne) ClearSalesChannelEnumID() *OrderHeaderUpdateOne {
	ohuo.mutation.ClearSalesChannelEnumID()
	return ohuo
}

// SetOrderDate sets the "order_date" field.
func (ohuo *OrderHeaderUpdateOne) SetOrderDate(t time.Time) *OrderHeaderUpdateOne {
	ohuo.mutation.SetOrderDate(t)
	return ohuo
}

// SetNillableOrderDate sets the "order_date" field if the given value is not nil.
func (ohuo *OrderHeaderUpdateOne) SetNillableOrderDate(t *time.Time) *OrderHeaderUpdateOne {
	if t != nil {
		ohuo.SetOrderDate(*t)
	}
	return ohuo
}

// ClearOrderDate clears the value of the "order_date" field.
func (ohuo *OrderHeaderUpdateOne) ClearOrderDate() *OrderHeaderUpdateOne {
	ohuo.mutation.ClearOrderDate()
	return ohuo
}

// SetPriority sets the "priority" field.
func (ohuo *OrderHeaderUpdateOne) SetPriority(o orderheader.Priority) *OrderHeaderUpdateOne {
	ohuo.mutation.SetPriority(o)
	return ohuo
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (ohuo *OrderHeaderUpdateOne) SetNillablePriority(o *orderheader.Priority) *OrderHeaderUpdateOne {
	if o != nil {
		ohuo.SetPriority(*o)
	}
	return ohuo
}

// ClearPriority clears the value of the "priority" field.
func (ohuo *OrderHeaderUpdateOne) ClearPriority() *OrderHeaderUpdateOne {
	ohuo.mutation.ClearPriority()
	return ohuo
}

// SetEntryDate sets the "entry_date" field.
func (ohuo *OrderHeaderUpdateOne) SetEntryDate(t time.Time) *OrderHeaderUpdateOne {
	ohuo.mutation.SetEntryDate(t)
	return ohuo
}

// SetNillableEntryDate sets the "entry_date" field if the given value is not nil.
func (ohuo *OrderHeaderUpdateOne) SetNillableEntryDate(t *time.Time) *OrderHeaderUpdateOne {
	if t != nil {
		ohuo.SetEntryDate(*t)
	}
	return ohuo
}

// ClearEntryDate clears the value of the "entry_date" field.
func (ohuo *OrderHeaderUpdateOne) ClearEntryDate() *OrderHeaderUpdateOne {
	ohuo.mutation.ClearEntryDate()
	return ohuo
}

// SetPickSheetPrintedDate sets the "pick_sheet_printed_date" field.
func (ohuo *OrderHeaderUpdateOne) SetPickSheetPrintedDate(t time.Time) *OrderHeaderUpdateOne {
	ohuo.mutation.SetPickSheetPrintedDate(t)
	return ohuo
}

// SetNillablePickSheetPrintedDate sets the "pick_sheet_printed_date" field if the given value is not nil.
func (ohuo *OrderHeaderUpdateOne) SetNillablePickSheetPrintedDate(t *time.Time) *OrderHeaderUpdateOne {
	if t != nil {
		ohuo.SetPickSheetPrintedDate(*t)
	}
	return ohuo
}

// ClearPickSheetPrintedDate clears the value of the "pick_sheet_printed_date" field.
func (ohuo *OrderHeaderUpdateOne) ClearPickSheetPrintedDate() *OrderHeaderUpdateOne {
	ohuo.mutation.ClearPickSheetPrintedDate()
	return ohuo
}

// SetVisitID sets the "visit_id" field.
func (ohuo *OrderHeaderUpdateOne) SetVisitID(i int) *OrderHeaderUpdateOne {
	ohuo.mutation.ResetVisitID()
	ohuo.mutation.SetVisitID(i)
	return ohuo
}

// SetNillableVisitID sets the "visit_id" field if the given value is not nil.
func (ohuo *OrderHeaderUpdateOne) SetNillableVisitID(i *int) *OrderHeaderUpdateOne {
	if i != nil {
		ohuo.SetVisitID(*i)
	}
	return ohuo
}

// AddVisitID adds i to the "visit_id" field.
func (ohuo *OrderHeaderUpdateOne) AddVisitID(i int) *OrderHeaderUpdateOne {
	ohuo.mutation.AddVisitID(i)
	return ohuo
}

// ClearVisitID clears the value of the "visit_id" field.
func (ohuo *OrderHeaderUpdateOne) ClearVisitID() *OrderHeaderUpdateOne {
	ohuo.mutation.ClearVisitID()
	return ohuo
}

// SetStatusID sets the "status_id" field.
func (ohuo *OrderHeaderUpdateOne) SetStatusID(i int) *OrderHeaderUpdateOne {
	ohuo.mutation.ResetStatusID()
	ohuo.mutation.SetStatusID(i)
	return ohuo
}

// SetNillableStatusID sets the "status_id" field if the given value is not nil.
func (ohuo *OrderHeaderUpdateOne) SetNillableStatusID(i *int) *OrderHeaderUpdateOne {
	if i != nil {
		ohuo.SetStatusID(*i)
	}
	return ohuo
}

// AddStatusID adds i to the "status_id" field.
func (ohuo *OrderHeaderUpdateOne) AddStatusID(i int) *OrderHeaderUpdateOne {
	ohuo.mutation.AddStatusID(i)
	return ohuo
}

// ClearStatusID clears the value of the "status_id" field.
func (ohuo *OrderHeaderUpdateOne) ClearStatusID() *OrderHeaderUpdateOne {
	ohuo.mutation.ClearStatusID()
	return ohuo
}

// SetCreatedBy sets the "created_by" field.
func (ohuo *OrderHeaderUpdateOne) SetCreatedBy(s string) *OrderHeaderUpdateOne {
	ohuo.mutation.SetCreatedBy(s)
	return ohuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (ohuo *OrderHeaderUpdateOne) SetNillableCreatedBy(s *string) *OrderHeaderUpdateOne {
	if s != nil {
		ohuo.SetCreatedBy(*s)
	}
	return ohuo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (ohuo *OrderHeaderUpdateOne) ClearCreatedBy() *OrderHeaderUpdateOne {
	ohuo.mutation.ClearCreatedBy()
	return ohuo
}

// SetFirstAttemptOrderID sets the "first_attempt_order_id" field.
func (ohuo *OrderHeaderUpdateOne) SetFirstAttemptOrderID(i int) *OrderHeaderUpdateOne {
	ohuo.mutation.ResetFirstAttemptOrderID()
	ohuo.mutation.SetFirstAttemptOrderID(i)
	return ohuo
}

// SetNillableFirstAttemptOrderID sets the "first_attempt_order_id" field if the given value is not nil.
func (ohuo *OrderHeaderUpdateOne) SetNillableFirstAttemptOrderID(i *int) *OrderHeaderUpdateOne {
	if i != nil {
		ohuo.SetFirstAttemptOrderID(*i)
	}
	return ohuo
}

// AddFirstAttemptOrderID adds i to the "first_attempt_order_id" field.
func (ohuo *OrderHeaderUpdateOne) AddFirstAttemptOrderID(i int) *OrderHeaderUpdateOne {
	ohuo.mutation.AddFirstAttemptOrderID(i)
	return ohuo
}

// ClearFirstAttemptOrderID clears the value of the "first_attempt_order_id" field.
func (ohuo *OrderHeaderUpdateOne) ClearFirstAttemptOrderID() *OrderHeaderUpdateOne {
	ohuo.mutation.ClearFirstAttemptOrderID()
	return ohuo
}

// SetCurrencyUom sets the "currency_uom" field.
func (ohuo *OrderHeaderUpdateOne) SetCurrencyUom(i int) *OrderHeaderUpdateOne {
	ohuo.mutation.ResetCurrencyUom()
	ohuo.mutation.SetCurrencyUom(i)
	return ohuo
}

// SetNillableCurrencyUom sets the "currency_uom" field if the given value is not nil.
func (ohuo *OrderHeaderUpdateOne) SetNillableCurrencyUom(i *int) *OrderHeaderUpdateOne {
	if i != nil {
		ohuo.SetCurrencyUom(*i)
	}
	return ohuo
}

// AddCurrencyUom adds i to the "currency_uom" field.
func (ohuo *OrderHeaderUpdateOne) AddCurrencyUom(i int) *OrderHeaderUpdateOne {
	ohuo.mutation.AddCurrencyUom(i)
	return ohuo
}

// ClearCurrencyUom clears the value of the "currency_uom" field.
func (ohuo *OrderHeaderUpdateOne) ClearCurrencyUom() *OrderHeaderUpdateOne {
	ohuo.mutation.ClearCurrencyUom()
	return ohuo
}

// SetSyncStatusID sets the "sync_status_id" field.
func (ohuo *OrderHeaderUpdateOne) SetSyncStatusID(i int) *OrderHeaderUpdateOne {
	ohuo.mutation.ResetSyncStatusID()
	ohuo.mutation.SetSyncStatusID(i)
	return ohuo
}

// SetNillableSyncStatusID sets the "sync_status_id" field if the given value is not nil.
func (ohuo *OrderHeaderUpdateOne) SetNillableSyncStatusID(i *int) *OrderHeaderUpdateOne {
	if i != nil {
		ohuo.SetSyncStatusID(*i)
	}
	return ohuo
}

// AddSyncStatusID adds i to the "sync_status_id" field.
func (ohuo *OrderHeaderUpdateOne) AddSyncStatusID(i int) *OrderHeaderUpdateOne {
	ohuo.mutation.AddSyncStatusID(i)
	return ohuo
}

// ClearSyncStatusID clears the value of the "sync_status_id" field.
func (ohuo *OrderHeaderUpdateOne) ClearSyncStatusID() *OrderHeaderUpdateOne {
	ohuo.mutation.ClearSyncStatusID()
	return ohuo
}

// SetBillingAccountID sets the "billing_account_id" field.
func (ohuo *OrderHeaderUpdateOne) SetBillingAccountID(i int) *OrderHeaderUpdateOne {
	ohuo.mutation.ResetBillingAccountID()
	ohuo.mutation.SetBillingAccountID(i)
	return ohuo
}

// SetNillableBillingAccountID sets the "billing_account_id" field if the given value is not nil.
func (ohuo *OrderHeaderUpdateOne) SetNillableBillingAccountID(i *int) *OrderHeaderUpdateOne {
	if i != nil {
		ohuo.SetBillingAccountID(*i)
	}
	return ohuo
}

// AddBillingAccountID adds i to the "billing_account_id" field.
func (ohuo *OrderHeaderUpdateOne) AddBillingAccountID(i int) *OrderHeaderUpdateOne {
	ohuo.mutation.AddBillingAccountID(i)
	return ohuo
}

// ClearBillingAccountID clears the value of the "billing_account_id" field.
func (ohuo *OrderHeaderUpdateOne) ClearBillingAccountID() *OrderHeaderUpdateOne {
	ohuo.mutation.ClearBillingAccountID()
	return ohuo
}

// SetOriginFacilityID sets the "origin_facility_id" field.
func (ohuo *OrderHeaderUpdateOne) SetOriginFacilityID(i int) *OrderHeaderUpdateOne {
	ohuo.mutation.ResetOriginFacilityID()
	ohuo.mutation.SetOriginFacilityID(i)
	return ohuo
}

// SetNillableOriginFacilityID sets the "origin_facility_id" field if the given value is not nil.
func (ohuo *OrderHeaderUpdateOne) SetNillableOriginFacilityID(i *int) *OrderHeaderUpdateOne {
	if i != nil {
		ohuo.SetOriginFacilityID(*i)
	}
	return ohuo
}

// AddOriginFacilityID adds i to the "origin_facility_id" field.
func (ohuo *OrderHeaderUpdateOne) AddOriginFacilityID(i int) *OrderHeaderUpdateOne {
	ohuo.mutation.AddOriginFacilityID(i)
	return ohuo
}

// ClearOriginFacilityID clears the value of the "origin_facility_id" field.
func (ohuo *OrderHeaderUpdateOne) ClearOriginFacilityID() *OrderHeaderUpdateOne {
	ohuo.mutation.ClearOriginFacilityID()
	return ohuo
}

// SetWebSiteID sets the "web_site_id" field.
func (ohuo *OrderHeaderUpdateOne) SetWebSiteID(i int) *OrderHeaderUpdateOne {
	ohuo.mutation.ResetWebSiteID()
	ohuo.mutation.SetWebSiteID(i)
	return ohuo
}

// SetNillableWebSiteID sets the "web_site_id" field if the given value is not nil.
func (ohuo *OrderHeaderUpdateOne) SetNillableWebSiteID(i *int) *OrderHeaderUpdateOne {
	if i != nil {
		ohuo.SetWebSiteID(*i)
	}
	return ohuo
}

// AddWebSiteID adds i to the "web_site_id" field.
func (ohuo *OrderHeaderUpdateOne) AddWebSiteID(i int) *OrderHeaderUpdateOne {
	ohuo.mutation.AddWebSiteID(i)
	return ohuo
}

// ClearWebSiteID clears the value of the "web_site_id" field.
func (ohuo *OrderHeaderUpdateOne) ClearWebSiteID() *OrderHeaderUpdateOne {
	ohuo.mutation.ClearWebSiteID()
	return ohuo
}

// SetProductStoreID sets the "product_store_id" field.
func (ohuo *OrderHeaderUpdateOne) SetProductStoreID(i int) *OrderHeaderUpdateOne {
	ohuo.mutation.ResetProductStoreID()
	ohuo.mutation.SetProductStoreID(i)
	return ohuo
}

// SetNillableProductStoreID sets the "product_store_id" field if the given value is not nil.
func (ohuo *OrderHeaderUpdateOne) SetNillableProductStoreID(i *int) *OrderHeaderUpdateOne {
	if i != nil {
		ohuo.SetProductStoreID(*i)
	}
	return ohuo
}

// AddProductStoreID adds i to the "product_store_id" field.
func (ohuo *OrderHeaderUpdateOne) AddProductStoreID(i int) *OrderHeaderUpdateOne {
	ohuo.mutation.AddProductStoreID(i)
	return ohuo
}

// ClearProductStoreID clears the value of the "product_store_id" field.
func (ohuo *OrderHeaderUpdateOne) ClearProductStoreID() *OrderHeaderUpdateOne {
	ohuo.mutation.ClearProductStoreID()
	return ohuo
}

// SetAgreementID sets the "agreement_id" field.
func (ohuo *OrderHeaderUpdateOne) SetAgreementID(i int) *OrderHeaderUpdateOne {
	ohuo.mutation.ResetAgreementID()
	ohuo.mutation.SetAgreementID(i)
	return ohuo
}

// SetNillableAgreementID sets the "agreement_id" field if the given value is not nil.
func (ohuo *OrderHeaderUpdateOne) SetNillableAgreementID(i *int) *OrderHeaderUpdateOne {
	if i != nil {
		ohuo.SetAgreementID(*i)
	}
	return ohuo
}

// AddAgreementID adds i to the "agreement_id" field.
func (ohuo *OrderHeaderUpdateOne) AddAgreementID(i int) *OrderHeaderUpdateOne {
	ohuo.mutation.AddAgreementID(i)
	return ohuo
}

// ClearAgreementID clears the value of the "agreement_id" field.
func (ohuo *OrderHeaderUpdateOne) ClearAgreementID() *OrderHeaderUpdateOne {
	ohuo.mutation.ClearAgreementID()
	return ohuo
}

// SetTerminalID sets the "terminal_id" field.
func (ohuo *OrderHeaderUpdateOne) SetTerminalID(s string) *OrderHeaderUpdateOne {
	ohuo.mutation.SetTerminalID(s)
	return ohuo
}

// SetNillableTerminalID sets the "terminal_id" field if the given value is not nil.
func (ohuo *OrderHeaderUpdateOne) SetNillableTerminalID(s *string) *OrderHeaderUpdateOne {
	if s != nil {
		ohuo.SetTerminalID(*s)
	}
	return ohuo
}

// ClearTerminalID clears the value of the "terminal_id" field.
func (ohuo *OrderHeaderUpdateOne) ClearTerminalID() *OrderHeaderUpdateOne {
	ohuo.mutation.ClearTerminalID()
	return ohuo
}

// SetTransactionID sets the "transaction_id" field.
func (ohuo *OrderHeaderUpdateOne) SetTransactionID(s string) *OrderHeaderUpdateOne {
	ohuo.mutation.SetTransactionID(s)
	return ohuo
}

// SetNillableTransactionID sets the "transaction_id" field if the given value is not nil.
func (ohuo *OrderHeaderUpdateOne) SetNillableTransactionID(s *string) *OrderHeaderUpdateOne {
	if s != nil {
		ohuo.SetTransactionID(*s)
	}
	return ohuo
}

// ClearTransactionID clears the value of the "transaction_id" field.
func (ohuo *OrderHeaderUpdateOne) ClearTransactionID() *OrderHeaderUpdateOne {
	ohuo.mutation.ClearTransactionID()
	return ohuo
}

// SetAutoOrderShoppingListID sets the "auto_order_shopping_list_id" field.
func (ohuo *OrderHeaderUpdateOne) SetAutoOrderShoppingListID(i int) *OrderHeaderUpdateOne {
	ohuo.mutation.ResetAutoOrderShoppingListID()
	ohuo.mutation.SetAutoOrderShoppingListID(i)
	return ohuo
}

// SetNillableAutoOrderShoppingListID sets the "auto_order_shopping_list_id" field if the given value is not nil.
func (ohuo *OrderHeaderUpdateOne) SetNillableAutoOrderShoppingListID(i *int) *OrderHeaderUpdateOne {
	if i != nil {
		ohuo.SetAutoOrderShoppingListID(*i)
	}
	return ohuo
}

// AddAutoOrderShoppingListID adds i to the "auto_order_shopping_list_id" field.
func (ohuo *OrderHeaderUpdateOne) AddAutoOrderShoppingListID(i int) *OrderHeaderUpdateOne {
	ohuo.mutation.AddAutoOrderShoppingListID(i)
	return ohuo
}

// ClearAutoOrderShoppingListID clears the value of the "auto_order_shopping_list_id" field.
func (ohuo *OrderHeaderUpdateOne) ClearAutoOrderShoppingListID() *OrderHeaderUpdateOne {
	ohuo.mutation.ClearAutoOrderShoppingListID()
	return ohuo
}

// SetNeedsInventoryIssuance sets the "needs_inventory_issuance" field.
func (ohuo *OrderHeaderUpdateOne) SetNeedsInventoryIssuance(oii orderheader.NeedsInventoryIssuance) *OrderHeaderUpdateOne {
	ohuo.mutation.SetNeedsInventoryIssuance(oii)
	return ohuo
}

// SetNillableNeedsInventoryIssuance sets the "needs_inventory_issuance" field if the given value is not nil.
func (ohuo *OrderHeaderUpdateOne) SetNillableNeedsInventoryIssuance(oii *orderheader.NeedsInventoryIssuance) *OrderHeaderUpdateOne {
	if oii != nil {
		ohuo.SetNeedsInventoryIssuance(*oii)
	}
	return ohuo
}

// ClearNeedsInventoryIssuance clears the value of the "needs_inventory_issuance" field.
func (ohuo *OrderHeaderUpdateOne) ClearNeedsInventoryIssuance() *OrderHeaderUpdateOne {
	ohuo.mutation.ClearNeedsInventoryIssuance()
	return ohuo
}

// SetIsRushOrder sets the "is_rush_order" field.
func (ohuo *OrderHeaderUpdateOne) SetIsRushOrder(oro orderheader.IsRushOrder) *OrderHeaderUpdateOne {
	ohuo.mutation.SetIsRushOrder(oro)
	return ohuo
}

// SetNillableIsRushOrder sets the "is_rush_order" field if the given value is not nil.
func (ohuo *OrderHeaderUpdateOne) SetNillableIsRushOrder(oro *orderheader.IsRushOrder) *OrderHeaderUpdateOne {
	if oro != nil {
		ohuo.SetIsRushOrder(*oro)
	}
	return ohuo
}

// ClearIsRushOrder clears the value of the "is_rush_order" field.
func (ohuo *OrderHeaderUpdateOne) ClearIsRushOrder() *OrderHeaderUpdateOne {
	ohuo.mutation.ClearIsRushOrder()
	return ohuo
}

// SetInternalCode sets the "internal_code" field.
func (ohuo *OrderHeaderUpdateOne) SetInternalCode(s string) *OrderHeaderUpdateOne {
	ohuo.mutation.SetInternalCode(s)
	return ohuo
}

// SetNillableInternalCode sets the "internal_code" field if the given value is not nil.
func (ohuo *OrderHeaderUpdateOne) SetNillableInternalCode(s *string) *OrderHeaderUpdateOne {
	if s != nil {
		ohuo.SetInternalCode(*s)
	}
	return ohuo
}

// ClearInternalCode clears the value of the "internal_code" field.
func (ohuo *OrderHeaderUpdateOne) ClearInternalCode() *OrderHeaderUpdateOne {
	ohuo.mutation.ClearInternalCode()
	return ohuo
}

// SetRemainingSubTotal sets the "remaining_sub_total" field.
func (ohuo *OrderHeaderUpdateOne) SetRemainingSubTotal(f float64) *OrderHeaderUpdateOne {
	ohuo.mutation.ResetRemainingSubTotal()
	ohuo.mutation.SetRemainingSubTotal(f)
	return ohuo
}

// SetNillableRemainingSubTotal sets the "remaining_sub_total" field if the given value is not nil.
func (ohuo *OrderHeaderUpdateOne) SetNillableRemainingSubTotal(f *float64) *OrderHeaderUpdateOne {
	if f != nil {
		ohuo.SetRemainingSubTotal(*f)
	}
	return ohuo
}

// AddRemainingSubTotal adds f to the "remaining_sub_total" field.
func (ohuo *OrderHeaderUpdateOne) AddRemainingSubTotal(f float64) *OrderHeaderUpdateOne {
	ohuo.mutation.AddRemainingSubTotal(f)
	return ohuo
}

// ClearRemainingSubTotal clears the value of the "remaining_sub_total" field.
func (ohuo *OrderHeaderUpdateOne) ClearRemainingSubTotal() *OrderHeaderUpdateOne {
	ohuo.mutation.ClearRemainingSubTotal()
	return ohuo
}

// SetGrandTotal sets the "grand_total" field.
func (ohuo *OrderHeaderUpdateOne) SetGrandTotal(f float64) *OrderHeaderUpdateOne {
	ohuo.mutation.ResetGrandTotal()
	ohuo.mutation.SetGrandTotal(f)
	return ohuo
}

// SetNillableGrandTotal sets the "grand_total" field if the given value is not nil.
func (ohuo *OrderHeaderUpdateOne) SetNillableGrandTotal(f *float64) *OrderHeaderUpdateOne {
	if f != nil {
		ohuo.SetGrandTotal(*f)
	}
	return ohuo
}

// AddGrandTotal adds f to the "grand_total" field.
func (ohuo *OrderHeaderUpdateOne) AddGrandTotal(f float64) *OrderHeaderUpdateOne {
	ohuo.mutation.AddGrandTotal(f)
	return ohuo
}

// ClearGrandTotal clears the value of the "grand_total" field.
func (ohuo *OrderHeaderUpdateOne) ClearGrandTotal() *OrderHeaderUpdateOne {
	ohuo.mutation.ClearGrandTotal()
	return ohuo
}

// SetIsViewed sets the "is_viewed" field.
func (ohuo *OrderHeaderUpdateOne) SetIsViewed(ov orderheader.IsViewed) *OrderHeaderUpdateOne {
	ohuo.mutation.SetIsViewed(ov)
	return ohuo
}

// SetNillableIsViewed sets the "is_viewed" field if the given value is not nil.
func (ohuo *OrderHeaderUpdateOne) SetNillableIsViewed(ov *orderheader.IsViewed) *OrderHeaderUpdateOne {
	if ov != nil {
		ohuo.SetIsViewed(*ov)
	}
	return ohuo
}

// ClearIsViewed clears the value of the "is_viewed" field.
func (ohuo *OrderHeaderUpdateOne) ClearIsViewed() *OrderHeaderUpdateOne {
	ohuo.mutation.ClearIsViewed()
	return ohuo
}

// SetInvoicePerShipment sets the "invoice_per_shipment" field.
func (ohuo *OrderHeaderUpdateOne) SetInvoicePerShipment(ops orderheader.InvoicePerShipment) *OrderHeaderUpdateOne {
	ohuo.mutation.SetInvoicePerShipment(ops)
	return ohuo
}

// SetNillableInvoicePerShipment sets the "invoice_per_shipment" field if the given value is not nil.
func (ohuo *OrderHeaderUpdateOne) SetNillableInvoicePerShipment(ops *orderheader.InvoicePerShipment) *OrderHeaderUpdateOne {
	if ops != nil {
		ohuo.SetInvoicePerShipment(*ops)
	}
	return ohuo
}

// ClearInvoicePerShipment clears the value of the "invoice_per_shipment" field.
func (ohuo *OrderHeaderUpdateOne) ClearInvoicePerShipment() *OrderHeaderUpdateOne {
	ohuo.mutation.ClearInvoicePerShipment()
	return ohuo
}

// AddItemIssuanceIDs adds the "item_issuances" edge to the ItemIssuance entity by IDs.
func (ohuo *OrderHeaderUpdateOne) AddItemIssuanceIDs(ids ...int) *OrderHeaderUpdateOne {
	ohuo.mutation.AddItemIssuanceIDs(ids...)
	return ohuo
}

// AddItemIssuances adds the "item_issuances" edges to the ItemIssuance entity.
func (ohuo *OrderHeaderUpdateOne) AddItemIssuances(i ...*ItemIssuance) *OrderHeaderUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ohuo.AddItemIssuanceIDs(ids...)
}

// AddOrderContactMechIDs adds the "order_contact_meches" edge to the OrderContactMech entity by IDs.
func (ohuo *OrderHeaderUpdateOne) AddOrderContactMechIDs(ids ...int) *OrderHeaderUpdateOne {
	ohuo.mutation.AddOrderContactMechIDs(ids...)
	return ohuo
}

// AddOrderContactMeches adds the "order_contact_meches" edges to the OrderContactMech entity.
func (ohuo *OrderHeaderUpdateOne) AddOrderContactMeches(o ...*OrderContactMech) *OrderHeaderUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ohuo.AddOrderContactMechIDs(ids...)
}

// AddOrderItemIDs adds the "order_items" edge to the OrderItem entity by IDs.
func (ohuo *OrderHeaderUpdateOne) AddOrderItemIDs(ids ...int) *OrderHeaderUpdateOne {
	ohuo.mutation.AddOrderItemIDs(ids...)
	return ohuo
}

// AddOrderItems adds the "order_items" edges to the OrderItem entity.
func (ohuo *OrderHeaderUpdateOne) AddOrderItems(o ...*OrderItem) *OrderHeaderUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ohuo.AddOrderItemIDs(ids...)
}

// AddOrderItemPriceInfoIDs adds the "order_item_price_infos" edge to the OrderItemPriceInfo entity by IDs.
func (ohuo *OrderHeaderUpdateOne) AddOrderItemPriceInfoIDs(ids ...int) *OrderHeaderUpdateOne {
	ohuo.mutation.AddOrderItemPriceInfoIDs(ids...)
	return ohuo
}

// AddOrderItemPriceInfos adds the "order_item_price_infos" edges to the OrderItemPriceInfo entity.
func (ohuo *OrderHeaderUpdateOne) AddOrderItemPriceInfos(o ...*OrderItemPriceInfo) *OrderHeaderUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ohuo.AddOrderItemPriceInfoIDs(ids...)
}

// AddOrderItemShipGroupIDs adds the "order_item_ship_groups" edge to the OrderItemShipGroup entity by IDs.
func (ohuo *OrderHeaderUpdateOne) AddOrderItemShipGroupIDs(ids ...int) *OrderHeaderUpdateOne {
	ohuo.mutation.AddOrderItemShipGroupIDs(ids...)
	return ohuo
}

// AddOrderItemShipGroups adds the "order_item_ship_groups" edges to the OrderItemShipGroup entity.
func (ohuo *OrderHeaderUpdateOne) AddOrderItemShipGroups(o ...*OrderItemShipGroup) *OrderHeaderUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ohuo.AddOrderItemShipGroupIDs(ids...)
}

// AddOrderItemShipGroupAssocIDs adds the "order_item_ship_group_assocs" edge to the OrderItemShipGroupAssoc entity by IDs.
func (ohuo *OrderHeaderUpdateOne) AddOrderItemShipGroupAssocIDs(ids ...int) *OrderHeaderUpdateOne {
	ohuo.mutation.AddOrderItemShipGroupAssocIDs(ids...)
	return ohuo
}

// AddOrderItemShipGroupAssocs adds the "order_item_ship_group_assocs" edges to the OrderItemShipGroupAssoc entity.
func (ohuo *OrderHeaderUpdateOne) AddOrderItemShipGroupAssocs(o ...*OrderItemShipGroupAssoc) *OrderHeaderUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ohuo.AddOrderItemShipGroupAssocIDs(ids...)
}

// AddOrderRoleIDs adds the "order_roles" edge to the OrderRole entity by IDs.
func (ohuo *OrderHeaderUpdateOne) AddOrderRoleIDs(ids ...int) *OrderHeaderUpdateOne {
	ohuo.mutation.AddOrderRoleIDs(ids...)
	return ohuo
}

// AddOrderRoles adds the "order_roles" edges to the OrderRole entity.
func (ohuo *OrderHeaderUpdateOne) AddOrderRoles(o ...*OrderRole) *OrderHeaderUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ohuo.AddOrderRoleIDs(ids...)
}

// AddOrderStatusIDs adds the "order_statuses" edge to the OrderStatus entity by IDs.
func (ohuo *OrderHeaderUpdateOne) AddOrderStatusIDs(ids ...int) *OrderHeaderUpdateOne {
	ohuo.mutation.AddOrderStatusIDs(ids...)
	return ohuo
}

// AddOrderStatuses adds the "order_statuses" edges to the OrderStatus entity.
func (ohuo *OrderHeaderUpdateOne) AddOrderStatuses(o ...*OrderStatus) *OrderHeaderUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ohuo.AddOrderStatusIDs(ids...)
}

// AddPrimaryShipmentIDs adds the "primary_shipments" edge to the Shipment entity by IDs.
func (ohuo *OrderHeaderUpdateOne) AddPrimaryShipmentIDs(ids ...int) *OrderHeaderUpdateOne {
	ohuo.mutation.AddPrimaryShipmentIDs(ids...)
	return ohuo
}

// AddPrimaryShipments adds the "primary_shipments" edges to the Shipment entity.
func (ohuo *OrderHeaderUpdateOne) AddPrimaryShipments(s ...*Shipment) *OrderHeaderUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ohuo.AddPrimaryShipmentIDs(ids...)
}

// Mutation returns the OrderHeaderMutation object of the builder.
func (ohuo *OrderHeaderUpdateOne) Mutation() *OrderHeaderMutation {
	return ohuo.mutation
}

// ClearItemIssuances clears all "item_issuances" edges to the ItemIssuance entity.
func (ohuo *OrderHeaderUpdateOne) ClearItemIssuances() *OrderHeaderUpdateOne {
	ohuo.mutation.ClearItemIssuances()
	return ohuo
}

// RemoveItemIssuanceIDs removes the "item_issuances" edge to ItemIssuance entities by IDs.
func (ohuo *OrderHeaderUpdateOne) RemoveItemIssuanceIDs(ids ...int) *OrderHeaderUpdateOne {
	ohuo.mutation.RemoveItemIssuanceIDs(ids...)
	return ohuo
}

// RemoveItemIssuances removes "item_issuances" edges to ItemIssuance entities.
func (ohuo *OrderHeaderUpdateOne) RemoveItemIssuances(i ...*ItemIssuance) *OrderHeaderUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ohuo.RemoveItemIssuanceIDs(ids...)
}

// ClearOrderContactMeches clears all "order_contact_meches" edges to the OrderContactMech entity.
func (ohuo *OrderHeaderUpdateOne) ClearOrderContactMeches() *OrderHeaderUpdateOne {
	ohuo.mutation.ClearOrderContactMeches()
	return ohuo
}

// RemoveOrderContactMechIDs removes the "order_contact_meches" edge to OrderContactMech entities by IDs.
func (ohuo *OrderHeaderUpdateOne) RemoveOrderContactMechIDs(ids ...int) *OrderHeaderUpdateOne {
	ohuo.mutation.RemoveOrderContactMechIDs(ids...)
	return ohuo
}

// RemoveOrderContactMeches removes "order_contact_meches" edges to OrderContactMech entities.
func (ohuo *OrderHeaderUpdateOne) RemoveOrderContactMeches(o ...*OrderContactMech) *OrderHeaderUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ohuo.RemoveOrderContactMechIDs(ids...)
}

// ClearOrderItems clears all "order_items" edges to the OrderItem entity.
func (ohuo *OrderHeaderUpdateOne) ClearOrderItems() *OrderHeaderUpdateOne {
	ohuo.mutation.ClearOrderItems()
	return ohuo
}

// RemoveOrderItemIDs removes the "order_items" edge to OrderItem entities by IDs.
func (ohuo *OrderHeaderUpdateOne) RemoveOrderItemIDs(ids ...int) *OrderHeaderUpdateOne {
	ohuo.mutation.RemoveOrderItemIDs(ids...)
	return ohuo
}

// RemoveOrderItems removes "order_items" edges to OrderItem entities.
func (ohuo *OrderHeaderUpdateOne) RemoveOrderItems(o ...*OrderItem) *OrderHeaderUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ohuo.RemoveOrderItemIDs(ids...)
}

// ClearOrderItemPriceInfos clears all "order_item_price_infos" edges to the OrderItemPriceInfo entity.
func (ohuo *OrderHeaderUpdateOne) ClearOrderItemPriceInfos() *OrderHeaderUpdateOne {
	ohuo.mutation.ClearOrderItemPriceInfos()
	return ohuo
}

// RemoveOrderItemPriceInfoIDs removes the "order_item_price_infos" edge to OrderItemPriceInfo entities by IDs.
func (ohuo *OrderHeaderUpdateOne) RemoveOrderItemPriceInfoIDs(ids ...int) *OrderHeaderUpdateOne {
	ohuo.mutation.RemoveOrderItemPriceInfoIDs(ids...)
	return ohuo
}

// RemoveOrderItemPriceInfos removes "order_item_price_infos" edges to OrderItemPriceInfo entities.
func (ohuo *OrderHeaderUpdateOne) RemoveOrderItemPriceInfos(o ...*OrderItemPriceInfo) *OrderHeaderUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ohuo.RemoveOrderItemPriceInfoIDs(ids...)
}

// ClearOrderItemShipGroups clears all "order_item_ship_groups" edges to the OrderItemShipGroup entity.
func (ohuo *OrderHeaderUpdateOne) ClearOrderItemShipGroups() *OrderHeaderUpdateOne {
	ohuo.mutation.ClearOrderItemShipGroups()
	return ohuo
}

// RemoveOrderItemShipGroupIDs removes the "order_item_ship_groups" edge to OrderItemShipGroup entities by IDs.
func (ohuo *OrderHeaderUpdateOne) RemoveOrderItemShipGroupIDs(ids ...int) *OrderHeaderUpdateOne {
	ohuo.mutation.RemoveOrderItemShipGroupIDs(ids...)
	return ohuo
}

// RemoveOrderItemShipGroups removes "order_item_ship_groups" edges to OrderItemShipGroup entities.
func (ohuo *OrderHeaderUpdateOne) RemoveOrderItemShipGroups(o ...*OrderItemShipGroup) *OrderHeaderUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ohuo.RemoveOrderItemShipGroupIDs(ids...)
}

// ClearOrderItemShipGroupAssocs clears all "order_item_ship_group_assocs" edges to the OrderItemShipGroupAssoc entity.
func (ohuo *OrderHeaderUpdateOne) ClearOrderItemShipGroupAssocs() *OrderHeaderUpdateOne {
	ohuo.mutation.ClearOrderItemShipGroupAssocs()
	return ohuo
}

// RemoveOrderItemShipGroupAssocIDs removes the "order_item_ship_group_assocs" edge to OrderItemShipGroupAssoc entities by IDs.
func (ohuo *OrderHeaderUpdateOne) RemoveOrderItemShipGroupAssocIDs(ids ...int) *OrderHeaderUpdateOne {
	ohuo.mutation.RemoveOrderItemShipGroupAssocIDs(ids...)
	return ohuo
}

// RemoveOrderItemShipGroupAssocs removes "order_item_ship_group_assocs" edges to OrderItemShipGroupAssoc entities.
func (ohuo *OrderHeaderUpdateOne) RemoveOrderItemShipGroupAssocs(o ...*OrderItemShipGroupAssoc) *OrderHeaderUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ohuo.RemoveOrderItemShipGroupAssocIDs(ids...)
}

// ClearOrderRoles clears all "order_roles" edges to the OrderRole entity.
func (ohuo *OrderHeaderUpdateOne) ClearOrderRoles() *OrderHeaderUpdateOne {
	ohuo.mutation.ClearOrderRoles()
	return ohuo
}

// RemoveOrderRoleIDs removes the "order_roles" edge to OrderRole entities by IDs.
func (ohuo *OrderHeaderUpdateOne) RemoveOrderRoleIDs(ids ...int) *OrderHeaderUpdateOne {
	ohuo.mutation.RemoveOrderRoleIDs(ids...)
	return ohuo
}

// RemoveOrderRoles removes "order_roles" edges to OrderRole entities.
func (ohuo *OrderHeaderUpdateOne) RemoveOrderRoles(o ...*OrderRole) *OrderHeaderUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ohuo.RemoveOrderRoleIDs(ids...)
}

// ClearOrderStatuses clears all "order_statuses" edges to the OrderStatus entity.
func (ohuo *OrderHeaderUpdateOne) ClearOrderStatuses() *OrderHeaderUpdateOne {
	ohuo.mutation.ClearOrderStatuses()
	return ohuo
}

// RemoveOrderStatusIDs removes the "order_statuses" edge to OrderStatus entities by IDs.
func (ohuo *OrderHeaderUpdateOne) RemoveOrderStatusIDs(ids ...int) *OrderHeaderUpdateOne {
	ohuo.mutation.RemoveOrderStatusIDs(ids...)
	return ohuo
}

// RemoveOrderStatuses removes "order_statuses" edges to OrderStatus entities.
func (ohuo *OrderHeaderUpdateOne) RemoveOrderStatuses(o ...*OrderStatus) *OrderHeaderUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ohuo.RemoveOrderStatusIDs(ids...)
}

// ClearPrimaryShipments clears all "primary_shipments" edges to the Shipment entity.
func (ohuo *OrderHeaderUpdateOne) ClearPrimaryShipments() *OrderHeaderUpdateOne {
	ohuo.mutation.ClearPrimaryShipments()
	return ohuo
}

// RemovePrimaryShipmentIDs removes the "primary_shipments" edge to Shipment entities by IDs.
func (ohuo *OrderHeaderUpdateOne) RemovePrimaryShipmentIDs(ids ...int) *OrderHeaderUpdateOne {
	ohuo.mutation.RemovePrimaryShipmentIDs(ids...)
	return ohuo
}

// RemovePrimaryShipments removes "primary_shipments" edges to Shipment entities.
func (ohuo *OrderHeaderUpdateOne) RemovePrimaryShipments(s ...*Shipment) *OrderHeaderUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ohuo.RemovePrimaryShipmentIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ohuo *OrderHeaderUpdateOne) Select(field string, fields ...string) *OrderHeaderUpdateOne {
	ohuo.fields = append([]string{field}, fields...)
	return ohuo
}

// Save executes the query and returns the updated OrderHeader entity.
func (ohuo *OrderHeaderUpdateOne) Save(ctx context.Context) (*OrderHeader, error) {
	var (
		err  error
		node *OrderHeader
	)
	ohuo.defaults()
	if len(ohuo.hooks) == 0 {
		if err = ohuo.check(); err != nil {
			return nil, err
		}
		node, err = ohuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderHeaderMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ohuo.check(); err != nil {
				return nil, err
			}
			ohuo.mutation = mutation
			node, err = ohuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ohuo.hooks) - 1; i >= 0; i-- {
			mut = ohuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ohuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ohuo *OrderHeaderUpdateOne) SaveX(ctx context.Context) *OrderHeader {
	node, err := ohuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ohuo *OrderHeaderUpdateOne) Exec(ctx context.Context) error {
	_, err := ohuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ohuo *OrderHeaderUpdateOne) ExecX(ctx context.Context) {
	if err := ohuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ohuo *OrderHeaderUpdateOne) defaults() {
	if _, ok := ohuo.mutation.UpdateTime(); !ok {
		v := orderheader.UpdateDefaultUpdateTime()
		ohuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ohuo *OrderHeaderUpdateOne) check() error {
	if v, ok := ohuo.mutation.Priority(); ok {
		if err := orderheader.PriorityValidator(v); err != nil {
			return &ValidationError{Name: "priority", err: fmt.Errorf("ent: validator failed for field \"priority\": %w", err)}
		}
	}
	if v, ok := ohuo.mutation.TerminalID(); ok {
		if err := orderheader.TerminalIDValidator(v); err != nil {
			return &ValidationError{Name: "terminal_id", err: fmt.Errorf("ent: validator failed for field \"terminal_id\": %w", err)}
		}
	}
	if v, ok := ohuo.mutation.TransactionID(); ok {
		if err := orderheader.TransactionIDValidator(v); err != nil {
			return &ValidationError{Name: "transaction_id", err: fmt.Errorf("ent: validator failed for field \"transaction_id\": %w", err)}
		}
	}
	if v, ok := ohuo.mutation.NeedsInventoryIssuance(); ok {
		if err := orderheader.NeedsInventoryIssuanceValidator(v); err != nil {
			return &ValidationError{Name: "needs_inventory_issuance", err: fmt.Errorf("ent: validator failed for field \"needs_inventory_issuance\": %w", err)}
		}
	}
	if v, ok := ohuo.mutation.IsRushOrder(); ok {
		if err := orderheader.IsRushOrderValidator(v); err != nil {
			return &ValidationError{Name: "is_rush_order", err: fmt.Errorf("ent: validator failed for field \"is_rush_order\": %w", err)}
		}
	}
	if v, ok := ohuo.mutation.InternalCode(); ok {
		if err := orderheader.InternalCodeValidator(v); err != nil {
			return &ValidationError{Name: "internal_code", err: fmt.Errorf("ent: validator failed for field \"internal_code\": %w", err)}
		}
	}
	if v, ok := ohuo.mutation.IsViewed(); ok {
		if err := orderheader.IsViewedValidator(v); err != nil {
			return &ValidationError{Name: "is_viewed", err: fmt.Errorf("ent: validator failed for field \"is_viewed\": %w", err)}
		}
	}
	if v, ok := ohuo.mutation.InvoicePerShipment(); ok {
		if err := orderheader.InvoicePerShipmentValidator(v); err != nil {
			return &ValidationError{Name: "invoice_per_shipment", err: fmt.Errorf("ent: validator failed for field \"invoice_per_shipment\": %w", err)}
		}
	}
	return nil
}

func (ohuo *OrderHeaderUpdateOne) sqlSave(ctx context.Context) (_node *OrderHeader, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   orderheader.Table,
			Columns: orderheader.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: orderheader.FieldID,
			},
		},
	}
	id, ok := ohuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing OrderHeader.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := ohuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, orderheader.FieldID)
		for _, f := range fields {
			if !orderheader.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != orderheader.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ohuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ohuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderheader.FieldUpdateTime,
		})
	}
	if value, ok := ohuo.mutation.OrderTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderheader.FieldOrderTypeID,
		})
	}
	if value, ok := ohuo.mutation.AddedOrderTypeID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderheader.FieldOrderTypeID,
		})
	}
	if ohuo.mutation.OrderTypeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderheader.FieldOrderTypeID,
		})
	}
	if value, ok := ohuo.mutation.OrderName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderheader.FieldOrderName,
		})
	}
	if ohuo.mutation.OrderNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: orderheader.FieldOrderName,
		})
	}
	if value, ok := ohuo.mutation.ExternalID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderheader.FieldExternalID,
		})
	}
	if value, ok := ohuo.mutation.AddedExternalID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderheader.FieldExternalID,
		})
	}
	if ohuo.mutation.ExternalIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderheader.FieldExternalID,
		})
	}
	if value, ok := ohuo.mutation.SalesChannelEnumID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderheader.FieldSalesChannelEnumID,
		})
	}
	if value, ok := ohuo.mutation.AddedSalesChannelEnumID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderheader.FieldSalesChannelEnumID,
		})
	}
	if ohuo.mutation.SalesChannelEnumIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderheader.FieldSalesChannelEnumID,
		})
	}
	if value, ok := ohuo.mutation.OrderDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderheader.FieldOrderDate,
		})
	}
	if ohuo.mutation.OrderDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: orderheader.FieldOrderDate,
		})
	}
	if value, ok := ohuo.mutation.Priority(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: orderheader.FieldPriority,
		})
	}
	if ohuo.mutation.PriorityCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: orderheader.FieldPriority,
		})
	}
	if value, ok := ohuo.mutation.EntryDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderheader.FieldEntryDate,
		})
	}
	if ohuo.mutation.EntryDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: orderheader.FieldEntryDate,
		})
	}
	if value, ok := ohuo.mutation.PickSheetPrintedDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderheader.FieldPickSheetPrintedDate,
		})
	}
	if ohuo.mutation.PickSheetPrintedDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: orderheader.FieldPickSheetPrintedDate,
		})
	}
	if value, ok := ohuo.mutation.VisitID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderheader.FieldVisitID,
		})
	}
	if value, ok := ohuo.mutation.AddedVisitID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderheader.FieldVisitID,
		})
	}
	if ohuo.mutation.VisitIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderheader.FieldVisitID,
		})
	}
	if value, ok := ohuo.mutation.StatusID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderheader.FieldStatusID,
		})
	}
	if value, ok := ohuo.mutation.AddedStatusID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderheader.FieldStatusID,
		})
	}
	if ohuo.mutation.StatusIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderheader.FieldStatusID,
		})
	}
	if value, ok := ohuo.mutation.CreatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderheader.FieldCreatedBy,
		})
	}
	if ohuo.mutation.CreatedByCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: orderheader.FieldCreatedBy,
		})
	}
	if value, ok := ohuo.mutation.FirstAttemptOrderID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderheader.FieldFirstAttemptOrderID,
		})
	}
	if value, ok := ohuo.mutation.AddedFirstAttemptOrderID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderheader.FieldFirstAttemptOrderID,
		})
	}
	if ohuo.mutation.FirstAttemptOrderIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderheader.FieldFirstAttemptOrderID,
		})
	}
	if value, ok := ohuo.mutation.CurrencyUom(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderheader.FieldCurrencyUom,
		})
	}
	if value, ok := ohuo.mutation.AddedCurrencyUom(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderheader.FieldCurrencyUom,
		})
	}
	if ohuo.mutation.CurrencyUomCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderheader.FieldCurrencyUom,
		})
	}
	if value, ok := ohuo.mutation.SyncStatusID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderheader.FieldSyncStatusID,
		})
	}
	if value, ok := ohuo.mutation.AddedSyncStatusID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderheader.FieldSyncStatusID,
		})
	}
	if ohuo.mutation.SyncStatusIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderheader.FieldSyncStatusID,
		})
	}
	if value, ok := ohuo.mutation.BillingAccountID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderheader.FieldBillingAccountID,
		})
	}
	if value, ok := ohuo.mutation.AddedBillingAccountID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderheader.FieldBillingAccountID,
		})
	}
	if ohuo.mutation.BillingAccountIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderheader.FieldBillingAccountID,
		})
	}
	if value, ok := ohuo.mutation.OriginFacilityID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderheader.FieldOriginFacilityID,
		})
	}
	if value, ok := ohuo.mutation.AddedOriginFacilityID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderheader.FieldOriginFacilityID,
		})
	}
	if ohuo.mutation.OriginFacilityIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderheader.FieldOriginFacilityID,
		})
	}
	if value, ok := ohuo.mutation.WebSiteID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderheader.FieldWebSiteID,
		})
	}
	if value, ok := ohuo.mutation.AddedWebSiteID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderheader.FieldWebSiteID,
		})
	}
	if ohuo.mutation.WebSiteIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderheader.FieldWebSiteID,
		})
	}
	if value, ok := ohuo.mutation.ProductStoreID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderheader.FieldProductStoreID,
		})
	}
	if value, ok := ohuo.mutation.AddedProductStoreID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderheader.FieldProductStoreID,
		})
	}
	if ohuo.mutation.ProductStoreIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderheader.FieldProductStoreID,
		})
	}
	if value, ok := ohuo.mutation.AgreementID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderheader.FieldAgreementID,
		})
	}
	if value, ok := ohuo.mutation.AddedAgreementID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderheader.FieldAgreementID,
		})
	}
	if ohuo.mutation.AgreementIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderheader.FieldAgreementID,
		})
	}
	if value, ok := ohuo.mutation.TerminalID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderheader.FieldTerminalID,
		})
	}
	if ohuo.mutation.TerminalIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: orderheader.FieldTerminalID,
		})
	}
	if value, ok := ohuo.mutation.TransactionID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderheader.FieldTransactionID,
		})
	}
	if ohuo.mutation.TransactionIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: orderheader.FieldTransactionID,
		})
	}
	if value, ok := ohuo.mutation.AutoOrderShoppingListID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderheader.FieldAutoOrderShoppingListID,
		})
	}
	if value, ok := ohuo.mutation.AddedAutoOrderShoppingListID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderheader.FieldAutoOrderShoppingListID,
		})
	}
	if ohuo.mutation.AutoOrderShoppingListIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderheader.FieldAutoOrderShoppingListID,
		})
	}
	if value, ok := ohuo.mutation.NeedsInventoryIssuance(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: orderheader.FieldNeedsInventoryIssuance,
		})
	}
	if ohuo.mutation.NeedsInventoryIssuanceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: orderheader.FieldNeedsInventoryIssuance,
		})
	}
	if value, ok := ohuo.mutation.IsRushOrder(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: orderheader.FieldIsRushOrder,
		})
	}
	if ohuo.mutation.IsRushOrderCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: orderheader.FieldIsRushOrder,
		})
	}
	if value, ok := ohuo.mutation.InternalCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderheader.FieldInternalCode,
		})
	}
	if ohuo.mutation.InternalCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: orderheader.FieldInternalCode,
		})
	}
	if value, ok := ohuo.mutation.RemainingSubTotal(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderheader.FieldRemainingSubTotal,
		})
	}
	if value, ok := ohuo.mutation.AddedRemainingSubTotal(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderheader.FieldRemainingSubTotal,
		})
	}
	if ohuo.mutation.RemainingSubTotalCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: orderheader.FieldRemainingSubTotal,
		})
	}
	if value, ok := ohuo.mutation.GrandTotal(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderheader.FieldGrandTotal,
		})
	}
	if value, ok := ohuo.mutation.AddedGrandTotal(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderheader.FieldGrandTotal,
		})
	}
	if ohuo.mutation.GrandTotalCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: orderheader.FieldGrandTotal,
		})
	}
	if value, ok := ohuo.mutation.IsViewed(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: orderheader.FieldIsViewed,
		})
	}
	if ohuo.mutation.IsViewedCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: orderheader.FieldIsViewed,
		})
	}
	if value, ok := ohuo.mutation.InvoicePerShipment(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: orderheader.FieldInvoicePerShipment,
		})
	}
	if ohuo.mutation.InvoicePerShipmentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: orderheader.FieldInvoicePerShipment,
		})
	}
	if ohuo.mutation.ItemIssuancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderheader.ItemIssuancesTable,
			Columns: []string{orderheader.ItemIssuancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: itemissuance.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ohuo.mutation.RemovedItemIssuancesIDs(); len(nodes) > 0 && !ohuo.mutation.ItemIssuancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderheader.ItemIssuancesTable,
			Columns: []string{orderheader.ItemIssuancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: itemissuance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ohuo.mutation.ItemIssuancesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderheader.ItemIssuancesTable,
			Columns: []string{orderheader.ItemIssuancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: itemissuance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ohuo.mutation.OrderContactMechesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderheader.OrderContactMechesTable,
			Columns: []string{orderheader.OrderContactMechesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: ordercontactmech.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ohuo.mutation.RemovedOrderContactMechesIDs(); len(nodes) > 0 && !ohuo.mutation.OrderContactMechesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderheader.OrderContactMechesTable,
			Columns: []string{orderheader.OrderContactMechesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: ordercontactmech.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ohuo.mutation.OrderContactMechesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderheader.OrderContactMechesTable,
			Columns: []string{orderheader.OrderContactMechesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: ordercontactmech.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ohuo.mutation.OrderItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderheader.OrderItemsTable,
			Columns: []string{orderheader.OrderItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitem.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ohuo.mutation.RemovedOrderItemsIDs(); len(nodes) > 0 && !ohuo.mutation.OrderItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderheader.OrderItemsTable,
			Columns: []string{orderheader.OrderItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ohuo.mutation.OrderItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderheader.OrderItemsTable,
			Columns: []string{orderheader.OrderItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ohuo.mutation.OrderItemPriceInfosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderheader.OrderItemPriceInfosTable,
			Columns: []string{orderheader.OrderItemPriceInfosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitempriceinfo.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ohuo.mutation.RemovedOrderItemPriceInfosIDs(); len(nodes) > 0 && !ohuo.mutation.OrderItemPriceInfosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderheader.OrderItemPriceInfosTable,
			Columns: []string{orderheader.OrderItemPriceInfosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitempriceinfo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ohuo.mutation.OrderItemPriceInfosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderheader.OrderItemPriceInfosTable,
			Columns: []string{orderheader.OrderItemPriceInfosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitempriceinfo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ohuo.mutation.OrderItemShipGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderheader.OrderItemShipGroupsTable,
			Columns: []string{orderheader.OrderItemShipGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitemshipgroup.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ohuo.mutation.RemovedOrderItemShipGroupsIDs(); len(nodes) > 0 && !ohuo.mutation.OrderItemShipGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderheader.OrderItemShipGroupsTable,
			Columns: []string{orderheader.OrderItemShipGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitemshipgroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ohuo.mutation.OrderItemShipGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderheader.OrderItemShipGroupsTable,
			Columns: []string{orderheader.OrderItemShipGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitemshipgroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ohuo.mutation.OrderItemShipGroupAssocsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderheader.OrderItemShipGroupAssocsTable,
			Columns: []string{orderheader.OrderItemShipGroupAssocsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitemshipgroupassoc.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ohuo.mutation.RemovedOrderItemShipGroupAssocsIDs(); len(nodes) > 0 && !ohuo.mutation.OrderItemShipGroupAssocsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderheader.OrderItemShipGroupAssocsTable,
			Columns: []string{orderheader.OrderItemShipGroupAssocsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitemshipgroupassoc.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ohuo.mutation.OrderItemShipGroupAssocsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderheader.OrderItemShipGroupAssocsTable,
			Columns: []string{orderheader.OrderItemShipGroupAssocsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitemshipgroupassoc.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ohuo.mutation.OrderRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderheader.OrderRolesTable,
			Columns: []string{orderheader.OrderRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderrole.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ohuo.mutation.RemovedOrderRolesIDs(); len(nodes) > 0 && !ohuo.mutation.OrderRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderheader.OrderRolesTable,
			Columns: []string{orderheader.OrderRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderrole.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ohuo.mutation.OrderRolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderheader.OrderRolesTable,
			Columns: []string{orderheader.OrderRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderrole.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ohuo.mutation.OrderStatusesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderheader.OrderStatusesTable,
			Columns: []string{orderheader.OrderStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderstatus.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ohuo.mutation.RemovedOrderStatusesIDs(); len(nodes) > 0 && !ohuo.mutation.OrderStatusesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderheader.OrderStatusesTable,
			Columns: []string{orderheader.OrderStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderstatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ohuo.mutation.OrderStatusesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderheader.OrderStatusesTable,
			Columns: []string{orderheader.OrderStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderstatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ohuo.mutation.PrimaryShipmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderheader.PrimaryShipmentsTable,
			Columns: []string{orderheader.PrimaryShipmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ohuo.mutation.RemovedPrimaryShipmentsIDs(); len(nodes) > 0 && !ohuo.mutation.PrimaryShipmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderheader.PrimaryShipmentsTable,
			Columns: []string{orderheader.PrimaryShipmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ohuo.mutation.PrimaryShipmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderheader.PrimaryShipmentsTable,
			Columns: []string{orderheader.PrimaryShipmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &OrderHeader{config: ohuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ohuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderheader.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
