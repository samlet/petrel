// Code generated by entc, DO NOT EDIT.

package orderitem

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// OrderItemSeqID applies equality check predicate on the "order_item_seq_id" field. It's identical to OrderItemSeqIDEQ.
func OrderItemSeqID(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderItemSeqID), v))
	})
}

// ExternalID applies equality check predicate on the "external_id" field. It's identical to ExternalIDEQ.
func ExternalID(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExternalID), v))
	})
}

// OrderItemTypeID applies equality check predicate on the "order_item_type_id" field. It's identical to OrderItemTypeIDEQ.
func OrderItemTypeID(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderItemTypeID), v))
	})
}

// OrderItemGroupSeqID applies equality check predicate on the "order_item_group_seq_id" field. It's identical to OrderItemGroupSeqIDEQ.
func OrderItemGroupSeqID(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderItemGroupSeqID), v))
	})
}

// FromInventoryItemID applies equality check predicate on the "from_inventory_item_id" field. It's identical to FromInventoryItemIDEQ.
func FromInventoryItemID(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFromInventoryItemID), v))
	})
}

// BudgetID applies equality check predicate on the "budget_id" field. It's identical to BudgetIDEQ.
func BudgetID(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBudgetID), v))
	})
}

// BudgetItemSeqID applies equality check predicate on the "budget_item_seq_id" field. It's identical to BudgetItemSeqIDEQ.
func BudgetItemSeqID(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBudgetItemSeqID), v))
	})
}

// ProductID applies equality check predicate on the "product_id" field. It's identical to ProductIDEQ.
func ProductID(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProductID), v))
	})
}

// SupplierProductID applies equality check predicate on the "supplier_product_id" field. It's identical to SupplierProductIDEQ.
func SupplierProductID(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSupplierProductID), v))
	})
}

// ProductFeatureID applies equality check predicate on the "product_feature_id" field. It's identical to ProductFeatureIDEQ.
func ProductFeatureID(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProductFeatureID), v))
	})
}

// ProdCatalogID applies equality check predicate on the "prod_catalog_id" field. It's identical to ProdCatalogIDEQ.
func ProdCatalogID(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProdCatalogID), v))
	})
}

// ProductCategoryID applies equality check predicate on the "product_category_id" field. It's identical to ProductCategoryIDEQ.
func ProductCategoryID(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProductCategoryID), v))
	})
}

// QuoteID applies equality check predicate on the "quote_id" field. It's identical to QuoteIDEQ.
func QuoteID(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQuoteID), v))
	})
}

// QuoteItemSeqID applies equality check predicate on the "quote_item_seq_id" field. It's identical to QuoteItemSeqIDEQ.
func QuoteItemSeqID(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQuoteItemSeqID), v))
	})
}

// ShoppingListID applies equality check predicate on the "shopping_list_id" field. It's identical to ShoppingListIDEQ.
func ShoppingListID(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShoppingListID), v))
	})
}

// ShoppingListItemSeqID applies equality check predicate on the "shopping_list_item_seq_id" field. It's identical to ShoppingListItemSeqIDEQ.
func ShoppingListItemSeqID(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShoppingListItemSeqID), v))
	})
}

// SubscriptionID applies equality check predicate on the "subscription_id" field. It's identical to SubscriptionIDEQ.
func SubscriptionID(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSubscriptionID), v))
	})
}

// DeploymentID applies equality check predicate on the "deployment_id" field. It's identical to DeploymentIDEQ.
func DeploymentID(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeploymentID), v))
	})
}

// Quantity applies equality check predicate on the "quantity" field. It's identical to QuantityEQ.
func Quantity(v float64) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQuantity), v))
	})
}

// CancelQuantity applies equality check predicate on the "cancel_quantity" field. It's identical to CancelQuantityEQ.
func CancelQuantity(v float64) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCancelQuantity), v))
	})
}

// SelectedAmount applies equality check predicate on the "selected_amount" field. It's identical to SelectedAmountEQ.
func SelectedAmount(v float64) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSelectedAmount), v))
	})
}

// UnitPrice applies equality check predicate on the "unit_price" field. It's identical to UnitPriceEQ.
func UnitPrice(v float64) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUnitPrice), v))
	})
}

// UnitListPrice applies equality check predicate on the "unit_list_price" field. It's identical to UnitListPriceEQ.
func UnitListPrice(v float64) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUnitListPrice), v))
	})
}

// UnitAverageCost applies equality check predicate on the "unit_average_cost" field. It's identical to UnitAverageCostEQ.
func UnitAverageCost(v float64) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUnitAverageCost), v))
	})
}

// UnitRecurringPrice applies equality check predicate on the "unit_recurring_price" field. It's identical to UnitRecurringPriceEQ.
func UnitRecurringPrice(v float64) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUnitRecurringPrice), v))
	})
}

// RecurringFreqUomID applies equality check predicate on the "recurring_freq_uom_id" field. It's identical to RecurringFreqUomIDEQ.
func RecurringFreqUomID(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRecurringFreqUomID), v))
	})
}

// ItemDescription applies equality check predicate on the "item_description" field. It's identical to ItemDescriptionEQ.
func ItemDescription(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldItemDescription), v))
	})
}

// Comments applies equality check predicate on the "comments" field. It's identical to CommentsEQ.
func Comments(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldComments), v))
	})
}

// CorrespondingPoID applies equality check predicate on the "corresponding_po_id" field. It's identical to CorrespondingPoIDEQ.
func CorrespondingPoID(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCorrespondingPoID), v))
	})
}

// StatusID applies equality check predicate on the "status_id" field. It's identical to StatusIDEQ.
func StatusID(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatusID), v))
	})
}

// SyncStatusID applies equality check predicate on the "sync_status_id" field. It's identical to SyncStatusIDEQ.
func SyncStatusID(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSyncStatusID), v))
	})
}

// EstimatedShipDate applies equality check predicate on the "estimated_ship_date" field. It's identical to EstimatedShipDateEQ.
func EstimatedShipDate(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEstimatedShipDate), v))
	})
}

// EstimatedDeliveryDate applies equality check predicate on the "estimated_delivery_date" field. It's identical to EstimatedDeliveryDateEQ.
func EstimatedDeliveryDate(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEstimatedDeliveryDate), v))
	})
}

// AutoCancelDate applies equality check predicate on the "auto_cancel_date" field. It's identical to AutoCancelDateEQ.
func AutoCancelDate(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAutoCancelDate), v))
	})
}

// DontCancelSetDate applies equality check predicate on the "dont_cancel_set_date" field. It's identical to DontCancelSetDateEQ.
func DontCancelSetDate(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDontCancelSetDate), v))
	})
}

// DontCancelSetUserLogin applies equality check predicate on the "dont_cancel_set_user_login" field. It's identical to DontCancelSetUserLoginEQ.
func DontCancelSetUserLogin(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDontCancelSetUserLogin), v))
	})
}

// ShipBeforeDate applies equality check predicate on the "ship_before_date" field. It's identical to ShipBeforeDateEQ.
func ShipBeforeDate(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShipBeforeDate), v))
	})
}

// ShipAfterDate applies equality check predicate on the "ship_after_date" field. It's identical to ShipAfterDateEQ.
func ShipAfterDate(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShipAfterDate), v))
	})
}

// ReserveAfterDate applies equality check predicate on the "reserve_after_date" field. It's identical to ReserveAfterDateEQ.
func ReserveAfterDate(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReserveAfterDate), v))
	})
}

// CancelBackOrderDate applies equality check predicate on the "cancel_back_order_date" field. It's identical to CancelBackOrderDateEQ.
func CancelBackOrderDate(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCancelBackOrderDate), v))
	})
}

// OverrideGlAccountID applies equality check predicate on the "override_gl_account_id" field. It's identical to OverrideGlAccountIDEQ.
func OverrideGlAccountID(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOverrideGlAccountID), v))
	})
}

// SalesOpportunityID applies equality check predicate on the "sales_opportunity_id" field. It's identical to SalesOpportunityIDEQ.
func SalesOpportunityID(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSalesOpportunityID), v))
	})
}

// ChangeByUserLoginID applies equality check predicate on the "change_by_user_login_id" field. It's identical to ChangeByUserLoginIDEQ.
func ChangeByUserLoginID(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChangeByUserLoginID), v))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), v))
	})
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateTime), v))
	})
}

// OrderItemSeqIDEQ applies the EQ predicate on the "order_item_seq_id" field.
func OrderItemSeqIDEQ(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderItemSeqID), v))
	})
}

// OrderItemSeqIDNEQ applies the NEQ predicate on the "order_item_seq_id" field.
func OrderItemSeqIDNEQ(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOrderItemSeqID), v))
	})
}

// OrderItemSeqIDIn applies the In predicate on the "order_item_seq_id" field.
func OrderItemSeqIDIn(vs ...int) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOrderItemSeqID), v...))
	})
}

// OrderItemSeqIDNotIn applies the NotIn predicate on the "order_item_seq_id" field.
func OrderItemSeqIDNotIn(vs ...int) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOrderItemSeqID), v...))
	})
}

// OrderItemSeqIDGT applies the GT predicate on the "order_item_seq_id" field.
func OrderItemSeqIDGT(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOrderItemSeqID), v))
	})
}

// OrderItemSeqIDGTE applies the GTE predicate on the "order_item_seq_id" field.
func OrderItemSeqIDGTE(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOrderItemSeqID), v))
	})
}

// OrderItemSeqIDLT applies the LT predicate on the "order_item_seq_id" field.
func OrderItemSeqIDLT(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOrderItemSeqID), v))
	})
}

// OrderItemSeqIDLTE applies the LTE predicate on the "order_item_seq_id" field.
func OrderItemSeqIDLTE(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOrderItemSeqID), v))
	})
}

// ExternalIDEQ applies the EQ predicate on the "external_id" field.
func ExternalIDEQ(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExternalID), v))
	})
}

// ExternalIDNEQ applies the NEQ predicate on the "external_id" field.
func ExternalIDNEQ(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldExternalID), v))
	})
}

// ExternalIDIn applies the In predicate on the "external_id" field.
func ExternalIDIn(vs ...int) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldExternalID), v...))
	})
}

// ExternalIDNotIn applies the NotIn predicate on the "external_id" field.
func ExternalIDNotIn(vs ...int) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldExternalID), v...))
	})
}

// ExternalIDGT applies the GT predicate on the "external_id" field.
func ExternalIDGT(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldExternalID), v))
	})
}

// ExternalIDGTE applies the GTE predicate on the "external_id" field.
func ExternalIDGTE(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldExternalID), v))
	})
}

// ExternalIDLT applies the LT predicate on the "external_id" field.
func ExternalIDLT(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldExternalID), v))
	})
}

// ExternalIDLTE applies the LTE predicate on the "external_id" field.
func ExternalIDLTE(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldExternalID), v))
	})
}

// ExternalIDIsNil applies the IsNil predicate on the "external_id" field.
func ExternalIDIsNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldExternalID)))
	})
}

// ExternalIDNotNil applies the NotNil predicate on the "external_id" field.
func ExternalIDNotNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldExternalID)))
	})
}

// OrderItemTypeIDEQ applies the EQ predicate on the "order_item_type_id" field.
func OrderItemTypeIDEQ(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderItemTypeID), v))
	})
}

// OrderItemTypeIDNEQ applies the NEQ predicate on the "order_item_type_id" field.
func OrderItemTypeIDNEQ(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOrderItemTypeID), v))
	})
}

// OrderItemTypeIDIn applies the In predicate on the "order_item_type_id" field.
func OrderItemTypeIDIn(vs ...int) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOrderItemTypeID), v...))
	})
}

// OrderItemTypeIDNotIn applies the NotIn predicate on the "order_item_type_id" field.
func OrderItemTypeIDNotIn(vs ...int) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOrderItemTypeID), v...))
	})
}

// OrderItemTypeIDGT applies the GT predicate on the "order_item_type_id" field.
func OrderItemTypeIDGT(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOrderItemTypeID), v))
	})
}

// OrderItemTypeIDGTE applies the GTE predicate on the "order_item_type_id" field.
func OrderItemTypeIDGTE(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOrderItemTypeID), v))
	})
}

// OrderItemTypeIDLT applies the LT predicate on the "order_item_type_id" field.
func OrderItemTypeIDLT(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOrderItemTypeID), v))
	})
}

// OrderItemTypeIDLTE applies the LTE predicate on the "order_item_type_id" field.
func OrderItemTypeIDLTE(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOrderItemTypeID), v))
	})
}

// OrderItemTypeIDIsNil applies the IsNil predicate on the "order_item_type_id" field.
func OrderItemTypeIDIsNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOrderItemTypeID)))
	})
}

// OrderItemTypeIDNotNil applies the NotNil predicate on the "order_item_type_id" field.
func OrderItemTypeIDNotNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOrderItemTypeID)))
	})
}

// OrderItemGroupSeqIDEQ applies the EQ predicate on the "order_item_group_seq_id" field.
func OrderItemGroupSeqIDEQ(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderItemGroupSeqID), v))
	})
}

// OrderItemGroupSeqIDNEQ applies the NEQ predicate on the "order_item_group_seq_id" field.
func OrderItemGroupSeqIDNEQ(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOrderItemGroupSeqID), v))
	})
}

// OrderItemGroupSeqIDIn applies the In predicate on the "order_item_group_seq_id" field.
func OrderItemGroupSeqIDIn(vs ...int) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOrderItemGroupSeqID), v...))
	})
}

// OrderItemGroupSeqIDNotIn applies the NotIn predicate on the "order_item_group_seq_id" field.
func OrderItemGroupSeqIDNotIn(vs ...int) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOrderItemGroupSeqID), v...))
	})
}

// OrderItemGroupSeqIDGT applies the GT predicate on the "order_item_group_seq_id" field.
func OrderItemGroupSeqIDGT(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOrderItemGroupSeqID), v))
	})
}

// OrderItemGroupSeqIDGTE applies the GTE predicate on the "order_item_group_seq_id" field.
func OrderItemGroupSeqIDGTE(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOrderItemGroupSeqID), v))
	})
}

// OrderItemGroupSeqIDLT applies the LT predicate on the "order_item_group_seq_id" field.
func OrderItemGroupSeqIDLT(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOrderItemGroupSeqID), v))
	})
}

// OrderItemGroupSeqIDLTE applies the LTE predicate on the "order_item_group_seq_id" field.
func OrderItemGroupSeqIDLTE(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOrderItemGroupSeqID), v))
	})
}

// OrderItemGroupSeqIDIsNil applies the IsNil predicate on the "order_item_group_seq_id" field.
func OrderItemGroupSeqIDIsNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOrderItemGroupSeqID)))
	})
}

// OrderItemGroupSeqIDNotNil applies the NotNil predicate on the "order_item_group_seq_id" field.
func OrderItemGroupSeqIDNotNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOrderItemGroupSeqID)))
	})
}

// IsItemGroupPrimaryEQ applies the EQ predicate on the "is_item_group_primary" field.
func IsItemGroupPrimaryEQ(v IsItemGroupPrimary) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsItemGroupPrimary), v))
	})
}

// IsItemGroupPrimaryNEQ applies the NEQ predicate on the "is_item_group_primary" field.
func IsItemGroupPrimaryNEQ(v IsItemGroupPrimary) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsItemGroupPrimary), v))
	})
}

// IsItemGroupPrimaryIn applies the In predicate on the "is_item_group_primary" field.
func IsItemGroupPrimaryIn(vs ...IsItemGroupPrimary) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIsItemGroupPrimary), v...))
	})
}

// IsItemGroupPrimaryNotIn applies the NotIn predicate on the "is_item_group_primary" field.
func IsItemGroupPrimaryNotIn(vs ...IsItemGroupPrimary) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIsItemGroupPrimary), v...))
	})
}

// IsItemGroupPrimaryIsNil applies the IsNil predicate on the "is_item_group_primary" field.
func IsItemGroupPrimaryIsNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldIsItemGroupPrimary)))
	})
}

// IsItemGroupPrimaryNotNil applies the NotNil predicate on the "is_item_group_primary" field.
func IsItemGroupPrimaryNotNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldIsItemGroupPrimary)))
	})
}

// FromInventoryItemIDEQ applies the EQ predicate on the "from_inventory_item_id" field.
func FromInventoryItemIDEQ(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFromInventoryItemID), v))
	})
}

// FromInventoryItemIDNEQ applies the NEQ predicate on the "from_inventory_item_id" field.
func FromInventoryItemIDNEQ(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFromInventoryItemID), v))
	})
}

// FromInventoryItemIDIn applies the In predicate on the "from_inventory_item_id" field.
func FromInventoryItemIDIn(vs ...int) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFromInventoryItemID), v...))
	})
}

// FromInventoryItemIDNotIn applies the NotIn predicate on the "from_inventory_item_id" field.
func FromInventoryItemIDNotIn(vs ...int) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFromInventoryItemID), v...))
	})
}

// FromInventoryItemIDGT applies the GT predicate on the "from_inventory_item_id" field.
func FromInventoryItemIDGT(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFromInventoryItemID), v))
	})
}

// FromInventoryItemIDGTE applies the GTE predicate on the "from_inventory_item_id" field.
func FromInventoryItemIDGTE(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFromInventoryItemID), v))
	})
}

// FromInventoryItemIDLT applies the LT predicate on the "from_inventory_item_id" field.
func FromInventoryItemIDLT(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFromInventoryItemID), v))
	})
}

// FromInventoryItemIDLTE applies the LTE predicate on the "from_inventory_item_id" field.
func FromInventoryItemIDLTE(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFromInventoryItemID), v))
	})
}

// FromInventoryItemIDIsNil applies the IsNil predicate on the "from_inventory_item_id" field.
func FromInventoryItemIDIsNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFromInventoryItemID)))
	})
}

// FromInventoryItemIDNotNil applies the NotNil predicate on the "from_inventory_item_id" field.
func FromInventoryItemIDNotNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFromInventoryItemID)))
	})
}

// BudgetIDEQ applies the EQ predicate on the "budget_id" field.
func BudgetIDEQ(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBudgetID), v))
	})
}

// BudgetIDNEQ applies the NEQ predicate on the "budget_id" field.
func BudgetIDNEQ(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBudgetID), v))
	})
}

// BudgetIDIn applies the In predicate on the "budget_id" field.
func BudgetIDIn(vs ...int) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBudgetID), v...))
	})
}

// BudgetIDNotIn applies the NotIn predicate on the "budget_id" field.
func BudgetIDNotIn(vs ...int) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBudgetID), v...))
	})
}

// BudgetIDGT applies the GT predicate on the "budget_id" field.
func BudgetIDGT(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBudgetID), v))
	})
}

// BudgetIDGTE applies the GTE predicate on the "budget_id" field.
func BudgetIDGTE(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBudgetID), v))
	})
}

// BudgetIDLT applies the LT predicate on the "budget_id" field.
func BudgetIDLT(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBudgetID), v))
	})
}

// BudgetIDLTE applies the LTE predicate on the "budget_id" field.
func BudgetIDLTE(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBudgetID), v))
	})
}

// BudgetIDIsNil applies the IsNil predicate on the "budget_id" field.
func BudgetIDIsNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldBudgetID)))
	})
}

// BudgetIDNotNil applies the NotNil predicate on the "budget_id" field.
func BudgetIDNotNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldBudgetID)))
	})
}

// BudgetItemSeqIDEQ applies the EQ predicate on the "budget_item_seq_id" field.
func BudgetItemSeqIDEQ(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBudgetItemSeqID), v))
	})
}

// BudgetItemSeqIDNEQ applies the NEQ predicate on the "budget_item_seq_id" field.
func BudgetItemSeqIDNEQ(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBudgetItemSeqID), v))
	})
}

// BudgetItemSeqIDIn applies the In predicate on the "budget_item_seq_id" field.
func BudgetItemSeqIDIn(vs ...int) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBudgetItemSeqID), v...))
	})
}

// BudgetItemSeqIDNotIn applies the NotIn predicate on the "budget_item_seq_id" field.
func BudgetItemSeqIDNotIn(vs ...int) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBudgetItemSeqID), v...))
	})
}

// BudgetItemSeqIDGT applies the GT predicate on the "budget_item_seq_id" field.
func BudgetItemSeqIDGT(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBudgetItemSeqID), v))
	})
}

// BudgetItemSeqIDGTE applies the GTE predicate on the "budget_item_seq_id" field.
func BudgetItemSeqIDGTE(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBudgetItemSeqID), v))
	})
}

// BudgetItemSeqIDLT applies the LT predicate on the "budget_item_seq_id" field.
func BudgetItemSeqIDLT(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBudgetItemSeqID), v))
	})
}

// BudgetItemSeqIDLTE applies the LTE predicate on the "budget_item_seq_id" field.
func BudgetItemSeqIDLTE(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBudgetItemSeqID), v))
	})
}

// BudgetItemSeqIDIsNil applies the IsNil predicate on the "budget_item_seq_id" field.
func BudgetItemSeqIDIsNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldBudgetItemSeqID)))
	})
}

// BudgetItemSeqIDNotNil applies the NotNil predicate on the "budget_item_seq_id" field.
func BudgetItemSeqIDNotNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldBudgetItemSeqID)))
	})
}

// ProductIDEQ applies the EQ predicate on the "product_id" field.
func ProductIDEQ(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProductID), v))
	})
}

// ProductIDNEQ applies the NEQ predicate on the "product_id" field.
func ProductIDNEQ(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProductID), v))
	})
}

// ProductIDIn applies the In predicate on the "product_id" field.
func ProductIDIn(vs ...int) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldProductID), v...))
	})
}

// ProductIDNotIn applies the NotIn predicate on the "product_id" field.
func ProductIDNotIn(vs ...int) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldProductID), v...))
	})
}

// ProductIDGT applies the GT predicate on the "product_id" field.
func ProductIDGT(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProductID), v))
	})
}

// ProductIDGTE applies the GTE predicate on the "product_id" field.
func ProductIDGTE(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProductID), v))
	})
}

// ProductIDLT applies the LT predicate on the "product_id" field.
func ProductIDLT(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProductID), v))
	})
}

// ProductIDLTE applies the LTE predicate on the "product_id" field.
func ProductIDLTE(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProductID), v))
	})
}

// ProductIDIsNil applies the IsNil predicate on the "product_id" field.
func ProductIDIsNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldProductID)))
	})
}

// ProductIDNotNil applies the NotNil predicate on the "product_id" field.
func ProductIDNotNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldProductID)))
	})
}

// SupplierProductIDEQ applies the EQ predicate on the "supplier_product_id" field.
func SupplierProductIDEQ(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSupplierProductID), v))
	})
}

// SupplierProductIDNEQ applies the NEQ predicate on the "supplier_product_id" field.
func SupplierProductIDNEQ(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSupplierProductID), v))
	})
}

// SupplierProductIDIn applies the In predicate on the "supplier_product_id" field.
func SupplierProductIDIn(vs ...string) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSupplierProductID), v...))
	})
}

// SupplierProductIDNotIn applies the NotIn predicate on the "supplier_product_id" field.
func SupplierProductIDNotIn(vs ...string) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSupplierProductID), v...))
	})
}

// SupplierProductIDGT applies the GT predicate on the "supplier_product_id" field.
func SupplierProductIDGT(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSupplierProductID), v))
	})
}

// SupplierProductIDGTE applies the GTE predicate on the "supplier_product_id" field.
func SupplierProductIDGTE(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSupplierProductID), v))
	})
}

// SupplierProductIDLT applies the LT predicate on the "supplier_product_id" field.
func SupplierProductIDLT(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSupplierProductID), v))
	})
}

// SupplierProductIDLTE applies the LTE predicate on the "supplier_product_id" field.
func SupplierProductIDLTE(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSupplierProductID), v))
	})
}

// SupplierProductIDContains applies the Contains predicate on the "supplier_product_id" field.
func SupplierProductIDContains(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSupplierProductID), v))
	})
}

// SupplierProductIDHasPrefix applies the HasPrefix predicate on the "supplier_product_id" field.
func SupplierProductIDHasPrefix(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSupplierProductID), v))
	})
}

// SupplierProductIDHasSuffix applies the HasSuffix predicate on the "supplier_product_id" field.
func SupplierProductIDHasSuffix(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSupplierProductID), v))
	})
}

// SupplierProductIDIsNil applies the IsNil predicate on the "supplier_product_id" field.
func SupplierProductIDIsNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSupplierProductID)))
	})
}

// SupplierProductIDNotNil applies the NotNil predicate on the "supplier_product_id" field.
func SupplierProductIDNotNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSupplierProductID)))
	})
}

// SupplierProductIDEqualFold applies the EqualFold predicate on the "supplier_product_id" field.
func SupplierProductIDEqualFold(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSupplierProductID), v))
	})
}

// SupplierProductIDContainsFold applies the ContainsFold predicate on the "supplier_product_id" field.
func SupplierProductIDContainsFold(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSupplierProductID), v))
	})
}

// ProductFeatureIDEQ applies the EQ predicate on the "product_feature_id" field.
func ProductFeatureIDEQ(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProductFeatureID), v))
	})
}

// ProductFeatureIDNEQ applies the NEQ predicate on the "product_feature_id" field.
func ProductFeatureIDNEQ(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProductFeatureID), v))
	})
}

// ProductFeatureIDIn applies the In predicate on the "product_feature_id" field.
func ProductFeatureIDIn(vs ...int) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldProductFeatureID), v...))
	})
}

// ProductFeatureIDNotIn applies the NotIn predicate on the "product_feature_id" field.
func ProductFeatureIDNotIn(vs ...int) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldProductFeatureID), v...))
	})
}

// ProductFeatureIDGT applies the GT predicate on the "product_feature_id" field.
func ProductFeatureIDGT(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProductFeatureID), v))
	})
}

// ProductFeatureIDGTE applies the GTE predicate on the "product_feature_id" field.
func ProductFeatureIDGTE(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProductFeatureID), v))
	})
}

// ProductFeatureIDLT applies the LT predicate on the "product_feature_id" field.
func ProductFeatureIDLT(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProductFeatureID), v))
	})
}

// ProductFeatureIDLTE applies the LTE predicate on the "product_feature_id" field.
func ProductFeatureIDLTE(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProductFeatureID), v))
	})
}

// ProductFeatureIDIsNil applies the IsNil predicate on the "product_feature_id" field.
func ProductFeatureIDIsNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldProductFeatureID)))
	})
}

// ProductFeatureIDNotNil applies the NotNil predicate on the "product_feature_id" field.
func ProductFeatureIDNotNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldProductFeatureID)))
	})
}

// ProdCatalogIDEQ applies the EQ predicate on the "prod_catalog_id" field.
func ProdCatalogIDEQ(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProdCatalogID), v))
	})
}

// ProdCatalogIDNEQ applies the NEQ predicate on the "prod_catalog_id" field.
func ProdCatalogIDNEQ(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProdCatalogID), v))
	})
}

// ProdCatalogIDIn applies the In predicate on the "prod_catalog_id" field.
func ProdCatalogIDIn(vs ...int) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldProdCatalogID), v...))
	})
}

// ProdCatalogIDNotIn applies the NotIn predicate on the "prod_catalog_id" field.
func ProdCatalogIDNotIn(vs ...int) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldProdCatalogID), v...))
	})
}

// ProdCatalogIDGT applies the GT predicate on the "prod_catalog_id" field.
func ProdCatalogIDGT(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProdCatalogID), v))
	})
}

// ProdCatalogIDGTE applies the GTE predicate on the "prod_catalog_id" field.
func ProdCatalogIDGTE(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProdCatalogID), v))
	})
}

// ProdCatalogIDLT applies the LT predicate on the "prod_catalog_id" field.
func ProdCatalogIDLT(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProdCatalogID), v))
	})
}

// ProdCatalogIDLTE applies the LTE predicate on the "prod_catalog_id" field.
func ProdCatalogIDLTE(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProdCatalogID), v))
	})
}

// ProdCatalogIDIsNil applies the IsNil predicate on the "prod_catalog_id" field.
func ProdCatalogIDIsNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldProdCatalogID)))
	})
}

// ProdCatalogIDNotNil applies the NotNil predicate on the "prod_catalog_id" field.
func ProdCatalogIDNotNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldProdCatalogID)))
	})
}

// ProductCategoryIDEQ applies the EQ predicate on the "product_category_id" field.
func ProductCategoryIDEQ(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProductCategoryID), v))
	})
}

// ProductCategoryIDNEQ applies the NEQ predicate on the "product_category_id" field.
func ProductCategoryIDNEQ(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProductCategoryID), v))
	})
}

// ProductCategoryIDIn applies the In predicate on the "product_category_id" field.
func ProductCategoryIDIn(vs ...int) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldProductCategoryID), v...))
	})
}

// ProductCategoryIDNotIn applies the NotIn predicate on the "product_category_id" field.
func ProductCategoryIDNotIn(vs ...int) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldProductCategoryID), v...))
	})
}

// ProductCategoryIDGT applies the GT predicate on the "product_category_id" field.
func ProductCategoryIDGT(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProductCategoryID), v))
	})
}

// ProductCategoryIDGTE applies the GTE predicate on the "product_category_id" field.
func ProductCategoryIDGTE(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProductCategoryID), v))
	})
}

// ProductCategoryIDLT applies the LT predicate on the "product_category_id" field.
func ProductCategoryIDLT(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProductCategoryID), v))
	})
}

// ProductCategoryIDLTE applies the LTE predicate on the "product_category_id" field.
func ProductCategoryIDLTE(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProductCategoryID), v))
	})
}

// ProductCategoryIDIsNil applies the IsNil predicate on the "product_category_id" field.
func ProductCategoryIDIsNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldProductCategoryID)))
	})
}

// ProductCategoryIDNotNil applies the NotNil predicate on the "product_category_id" field.
func ProductCategoryIDNotNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldProductCategoryID)))
	})
}

// IsPromoEQ applies the EQ predicate on the "is_promo" field.
func IsPromoEQ(v IsPromo) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsPromo), v))
	})
}

// IsPromoNEQ applies the NEQ predicate on the "is_promo" field.
func IsPromoNEQ(v IsPromo) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsPromo), v))
	})
}

// IsPromoIn applies the In predicate on the "is_promo" field.
func IsPromoIn(vs ...IsPromo) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIsPromo), v...))
	})
}

// IsPromoNotIn applies the NotIn predicate on the "is_promo" field.
func IsPromoNotIn(vs ...IsPromo) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIsPromo), v...))
	})
}

// IsPromoIsNil applies the IsNil predicate on the "is_promo" field.
func IsPromoIsNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldIsPromo)))
	})
}

// IsPromoNotNil applies the NotNil predicate on the "is_promo" field.
func IsPromoNotNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldIsPromo)))
	})
}

// QuoteIDEQ applies the EQ predicate on the "quote_id" field.
func QuoteIDEQ(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQuoteID), v))
	})
}

// QuoteIDNEQ applies the NEQ predicate on the "quote_id" field.
func QuoteIDNEQ(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldQuoteID), v))
	})
}

// QuoteIDIn applies the In predicate on the "quote_id" field.
func QuoteIDIn(vs ...int) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldQuoteID), v...))
	})
}

// QuoteIDNotIn applies the NotIn predicate on the "quote_id" field.
func QuoteIDNotIn(vs ...int) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldQuoteID), v...))
	})
}

// QuoteIDGT applies the GT predicate on the "quote_id" field.
func QuoteIDGT(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldQuoteID), v))
	})
}

// QuoteIDGTE applies the GTE predicate on the "quote_id" field.
func QuoteIDGTE(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldQuoteID), v))
	})
}

// QuoteIDLT applies the LT predicate on the "quote_id" field.
func QuoteIDLT(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldQuoteID), v))
	})
}

// QuoteIDLTE applies the LTE predicate on the "quote_id" field.
func QuoteIDLTE(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldQuoteID), v))
	})
}

// QuoteIDIsNil applies the IsNil predicate on the "quote_id" field.
func QuoteIDIsNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldQuoteID)))
	})
}

// QuoteIDNotNil applies the NotNil predicate on the "quote_id" field.
func QuoteIDNotNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldQuoteID)))
	})
}

// QuoteItemSeqIDEQ applies the EQ predicate on the "quote_item_seq_id" field.
func QuoteItemSeqIDEQ(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQuoteItemSeqID), v))
	})
}

// QuoteItemSeqIDNEQ applies the NEQ predicate on the "quote_item_seq_id" field.
func QuoteItemSeqIDNEQ(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldQuoteItemSeqID), v))
	})
}

// QuoteItemSeqIDIn applies the In predicate on the "quote_item_seq_id" field.
func QuoteItemSeqIDIn(vs ...int) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldQuoteItemSeqID), v...))
	})
}

// QuoteItemSeqIDNotIn applies the NotIn predicate on the "quote_item_seq_id" field.
func QuoteItemSeqIDNotIn(vs ...int) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldQuoteItemSeqID), v...))
	})
}

// QuoteItemSeqIDGT applies the GT predicate on the "quote_item_seq_id" field.
func QuoteItemSeqIDGT(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldQuoteItemSeqID), v))
	})
}

// QuoteItemSeqIDGTE applies the GTE predicate on the "quote_item_seq_id" field.
func QuoteItemSeqIDGTE(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldQuoteItemSeqID), v))
	})
}

// QuoteItemSeqIDLT applies the LT predicate on the "quote_item_seq_id" field.
func QuoteItemSeqIDLT(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldQuoteItemSeqID), v))
	})
}

// QuoteItemSeqIDLTE applies the LTE predicate on the "quote_item_seq_id" field.
func QuoteItemSeqIDLTE(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldQuoteItemSeqID), v))
	})
}

// QuoteItemSeqIDIsNil applies the IsNil predicate on the "quote_item_seq_id" field.
func QuoteItemSeqIDIsNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldQuoteItemSeqID)))
	})
}

// QuoteItemSeqIDNotNil applies the NotNil predicate on the "quote_item_seq_id" field.
func QuoteItemSeqIDNotNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldQuoteItemSeqID)))
	})
}

// ShoppingListIDEQ applies the EQ predicate on the "shopping_list_id" field.
func ShoppingListIDEQ(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShoppingListID), v))
	})
}

// ShoppingListIDNEQ applies the NEQ predicate on the "shopping_list_id" field.
func ShoppingListIDNEQ(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShoppingListID), v))
	})
}

// ShoppingListIDIn applies the In predicate on the "shopping_list_id" field.
func ShoppingListIDIn(vs ...int) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldShoppingListID), v...))
	})
}

// ShoppingListIDNotIn applies the NotIn predicate on the "shopping_list_id" field.
func ShoppingListIDNotIn(vs ...int) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldShoppingListID), v...))
	})
}

// ShoppingListIDGT applies the GT predicate on the "shopping_list_id" field.
func ShoppingListIDGT(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShoppingListID), v))
	})
}

// ShoppingListIDGTE applies the GTE predicate on the "shopping_list_id" field.
func ShoppingListIDGTE(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShoppingListID), v))
	})
}

// ShoppingListIDLT applies the LT predicate on the "shopping_list_id" field.
func ShoppingListIDLT(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShoppingListID), v))
	})
}

// ShoppingListIDLTE applies the LTE predicate on the "shopping_list_id" field.
func ShoppingListIDLTE(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShoppingListID), v))
	})
}

// ShoppingListIDIsNil applies the IsNil predicate on the "shopping_list_id" field.
func ShoppingListIDIsNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldShoppingListID)))
	})
}

// ShoppingListIDNotNil applies the NotNil predicate on the "shopping_list_id" field.
func ShoppingListIDNotNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldShoppingListID)))
	})
}

// ShoppingListItemSeqIDEQ applies the EQ predicate on the "shopping_list_item_seq_id" field.
func ShoppingListItemSeqIDEQ(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShoppingListItemSeqID), v))
	})
}

// ShoppingListItemSeqIDNEQ applies the NEQ predicate on the "shopping_list_item_seq_id" field.
func ShoppingListItemSeqIDNEQ(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShoppingListItemSeqID), v))
	})
}

// ShoppingListItemSeqIDIn applies the In predicate on the "shopping_list_item_seq_id" field.
func ShoppingListItemSeqIDIn(vs ...int) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldShoppingListItemSeqID), v...))
	})
}

// ShoppingListItemSeqIDNotIn applies the NotIn predicate on the "shopping_list_item_seq_id" field.
func ShoppingListItemSeqIDNotIn(vs ...int) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldShoppingListItemSeqID), v...))
	})
}

// ShoppingListItemSeqIDGT applies the GT predicate on the "shopping_list_item_seq_id" field.
func ShoppingListItemSeqIDGT(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShoppingListItemSeqID), v))
	})
}

// ShoppingListItemSeqIDGTE applies the GTE predicate on the "shopping_list_item_seq_id" field.
func ShoppingListItemSeqIDGTE(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShoppingListItemSeqID), v))
	})
}

// ShoppingListItemSeqIDLT applies the LT predicate on the "shopping_list_item_seq_id" field.
func ShoppingListItemSeqIDLT(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShoppingListItemSeqID), v))
	})
}

// ShoppingListItemSeqIDLTE applies the LTE predicate on the "shopping_list_item_seq_id" field.
func ShoppingListItemSeqIDLTE(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShoppingListItemSeqID), v))
	})
}

// ShoppingListItemSeqIDIsNil applies the IsNil predicate on the "shopping_list_item_seq_id" field.
func ShoppingListItemSeqIDIsNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldShoppingListItemSeqID)))
	})
}

// ShoppingListItemSeqIDNotNil applies the NotNil predicate on the "shopping_list_item_seq_id" field.
func ShoppingListItemSeqIDNotNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldShoppingListItemSeqID)))
	})
}

// SubscriptionIDEQ applies the EQ predicate on the "subscription_id" field.
func SubscriptionIDEQ(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSubscriptionID), v))
	})
}

// SubscriptionIDNEQ applies the NEQ predicate on the "subscription_id" field.
func SubscriptionIDNEQ(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSubscriptionID), v))
	})
}

// SubscriptionIDIn applies the In predicate on the "subscription_id" field.
func SubscriptionIDIn(vs ...int) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSubscriptionID), v...))
	})
}

// SubscriptionIDNotIn applies the NotIn predicate on the "subscription_id" field.
func SubscriptionIDNotIn(vs ...int) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSubscriptionID), v...))
	})
}

// SubscriptionIDGT applies the GT predicate on the "subscription_id" field.
func SubscriptionIDGT(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSubscriptionID), v))
	})
}

// SubscriptionIDGTE applies the GTE predicate on the "subscription_id" field.
func SubscriptionIDGTE(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSubscriptionID), v))
	})
}

// SubscriptionIDLT applies the LT predicate on the "subscription_id" field.
func SubscriptionIDLT(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSubscriptionID), v))
	})
}

// SubscriptionIDLTE applies the LTE predicate on the "subscription_id" field.
func SubscriptionIDLTE(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSubscriptionID), v))
	})
}

// SubscriptionIDIsNil applies the IsNil predicate on the "subscription_id" field.
func SubscriptionIDIsNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSubscriptionID)))
	})
}

// SubscriptionIDNotNil applies the NotNil predicate on the "subscription_id" field.
func SubscriptionIDNotNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSubscriptionID)))
	})
}

// DeploymentIDEQ applies the EQ predicate on the "deployment_id" field.
func DeploymentIDEQ(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeploymentID), v))
	})
}

// DeploymentIDNEQ applies the NEQ predicate on the "deployment_id" field.
func DeploymentIDNEQ(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeploymentID), v))
	})
}

// DeploymentIDIn applies the In predicate on the "deployment_id" field.
func DeploymentIDIn(vs ...int) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeploymentID), v...))
	})
}

// DeploymentIDNotIn applies the NotIn predicate on the "deployment_id" field.
func DeploymentIDNotIn(vs ...int) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeploymentID), v...))
	})
}

// DeploymentIDGT applies the GT predicate on the "deployment_id" field.
func DeploymentIDGT(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeploymentID), v))
	})
}

// DeploymentIDGTE applies the GTE predicate on the "deployment_id" field.
func DeploymentIDGTE(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeploymentID), v))
	})
}

// DeploymentIDLT applies the LT predicate on the "deployment_id" field.
func DeploymentIDLT(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeploymentID), v))
	})
}

// DeploymentIDLTE applies the LTE predicate on the "deployment_id" field.
func DeploymentIDLTE(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeploymentID), v))
	})
}

// DeploymentIDIsNil applies the IsNil predicate on the "deployment_id" field.
func DeploymentIDIsNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeploymentID)))
	})
}

// DeploymentIDNotNil applies the NotNil predicate on the "deployment_id" field.
func DeploymentIDNotNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeploymentID)))
	})
}

// QuantityEQ applies the EQ predicate on the "quantity" field.
func QuantityEQ(v float64) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQuantity), v))
	})
}

// QuantityNEQ applies the NEQ predicate on the "quantity" field.
func QuantityNEQ(v float64) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldQuantity), v))
	})
}

// QuantityIn applies the In predicate on the "quantity" field.
func QuantityIn(vs ...float64) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldQuantity), v...))
	})
}

// QuantityNotIn applies the NotIn predicate on the "quantity" field.
func QuantityNotIn(vs ...float64) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldQuantity), v...))
	})
}

// QuantityGT applies the GT predicate on the "quantity" field.
func QuantityGT(v float64) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldQuantity), v))
	})
}

// QuantityGTE applies the GTE predicate on the "quantity" field.
func QuantityGTE(v float64) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldQuantity), v))
	})
}

// QuantityLT applies the LT predicate on the "quantity" field.
func QuantityLT(v float64) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldQuantity), v))
	})
}

// QuantityLTE applies the LTE predicate on the "quantity" field.
func QuantityLTE(v float64) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldQuantity), v))
	})
}

// QuantityIsNil applies the IsNil predicate on the "quantity" field.
func QuantityIsNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldQuantity)))
	})
}

// QuantityNotNil applies the NotNil predicate on the "quantity" field.
func QuantityNotNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldQuantity)))
	})
}

// CancelQuantityEQ applies the EQ predicate on the "cancel_quantity" field.
func CancelQuantityEQ(v float64) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCancelQuantity), v))
	})
}

// CancelQuantityNEQ applies the NEQ predicate on the "cancel_quantity" field.
func CancelQuantityNEQ(v float64) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCancelQuantity), v))
	})
}

// CancelQuantityIn applies the In predicate on the "cancel_quantity" field.
func CancelQuantityIn(vs ...float64) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCancelQuantity), v...))
	})
}

// CancelQuantityNotIn applies the NotIn predicate on the "cancel_quantity" field.
func CancelQuantityNotIn(vs ...float64) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCancelQuantity), v...))
	})
}

// CancelQuantityGT applies the GT predicate on the "cancel_quantity" field.
func CancelQuantityGT(v float64) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCancelQuantity), v))
	})
}

// CancelQuantityGTE applies the GTE predicate on the "cancel_quantity" field.
func CancelQuantityGTE(v float64) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCancelQuantity), v))
	})
}

// CancelQuantityLT applies the LT predicate on the "cancel_quantity" field.
func CancelQuantityLT(v float64) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCancelQuantity), v))
	})
}

// CancelQuantityLTE applies the LTE predicate on the "cancel_quantity" field.
func CancelQuantityLTE(v float64) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCancelQuantity), v))
	})
}

// CancelQuantityIsNil applies the IsNil predicate on the "cancel_quantity" field.
func CancelQuantityIsNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCancelQuantity)))
	})
}

// CancelQuantityNotNil applies the NotNil predicate on the "cancel_quantity" field.
func CancelQuantityNotNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCancelQuantity)))
	})
}

// SelectedAmountEQ applies the EQ predicate on the "selected_amount" field.
func SelectedAmountEQ(v float64) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSelectedAmount), v))
	})
}

// SelectedAmountNEQ applies the NEQ predicate on the "selected_amount" field.
func SelectedAmountNEQ(v float64) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSelectedAmount), v))
	})
}

// SelectedAmountIn applies the In predicate on the "selected_amount" field.
func SelectedAmountIn(vs ...float64) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSelectedAmount), v...))
	})
}

// SelectedAmountNotIn applies the NotIn predicate on the "selected_amount" field.
func SelectedAmountNotIn(vs ...float64) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSelectedAmount), v...))
	})
}

// SelectedAmountGT applies the GT predicate on the "selected_amount" field.
func SelectedAmountGT(v float64) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSelectedAmount), v))
	})
}

// SelectedAmountGTE applies the GTE predicate on the "selected_amount" field.
func SelectedAmountGTE(v float64) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSelectedAmount), v))
	})
}

// SelectedAmountLT applies the LT predicate on the "selected_amount" field.
func SelectedAmountLT(v float64) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSelectedAmount), v))
	})
}

// SelectedAmountLTE applies the LTE predicate on the "selected_amount" field.
func SelectedAmountLTE(v float64) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSelectedAmount), v))
	})
}

// SelectedAmountIsNil applies the IsNil predicate on the "selected_amount" field.
func SelectedAmountIsNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSelectedAmount)))
	})
}

// SelectedAmountNotNil applies the NotNil predicate on the "selected_amount" field.
func SelectedAmountNotNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSelectedAmount)))
	})
}

// UnitPriceEQ applies the EQ predicate on the "unit_price" field.
func UnitPriceEQ(v float64) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUnitPrice), v))
	})
}

// UnitPriceNEQ applies the NEQ predicate on the "unit_price" field.
func UnitPriceNEQ(v float64) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUnitPrice), v))
	})
}

// UnitPriceIn applies the In predicate on the "unit_price" field.
func UnitPriceIn(vs ...float64) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUnitPrice), v...))
	})
}

// UnitPriceNotIn applies the NotIn predicate on the "unit_price" field.
func UnitPriceNotIn(vs ...float64) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUnitPrice), v...))
	})
}

// UnitPriceGT applies the GT predicate on the "unit_price" field.
func UnitPriceGT(v float64) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUnitPrice), v))
	})
}

// UnitPriceGTE applies the GTE predicate on the "unit_price" field.
func UnitPriceGTE(v float64) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUnitPrice), v))
	})
}

// UnitPriceLT applies the LT predicate on the "unit_price" field.
func UnitPriceLT(v float64) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUnitPrice), v))
	})
}

// UnitPriceLTE applies the LTE predicate on the "unit_price" field.
func UnitPriceLTE(v float64) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUnitPrice), v))
	})
}

// UnitPriceIsNil applies the IsNil predicate on the "unit_price" field.
func UnitPriceIsNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUnitPrice)))
	})
}

// UnitPriceNotNil applies the NotNil predicate on the "unit_price" field.
func UnitPriceNotNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUnitPrice)))
	})
}

// UnitListPriceEQ applies the EQ predicate on the "unit_list_price" field.
func UnitListPriceEQ(v float64) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUnitListPrice), v))
	})
}

// UnitListPriceNEQ applies the NEQ predicate on the "unit_list_price" field.
func UnitListPriceNEQ(v float64) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUnitListPrice), v))
	})
}

// UnitListPriceIn applies the In predicate on the "unit_list_price" field.
func UnitListPriceIn(vs ...float64) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUnitListPrice), v...))
	})
}

// UnitListPriceNotIn applies the NotIn predicate on the "unit_list_price" field.
func UnitListPriceNotIn(vs ...float64) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUnitListPrice), v...))
	})
}

// UnitListPriceGT applies the GT predicate on the "unit_list_price" field.
func UnitListPriceGT(v float64) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUnitListPrice), v))
	})
}

// UnitListPriceGTE applies the GTE predicate on the "unit_list_price" field.
func UnitListPriceGTE(v float64) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUnitListPrice), v))
	})
}

// UnitListPriceLT applies the LT predicate on the "unit_list_price" field.
func UnitListPriceLT(v float64) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUnitListPrice), v))
	})
}

// UnitListPriceLTE applies the LTE predicate on the "unit_list_price" field.
func UnitListPriceLTE(v float64) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUnitListPrice), v))
	})
}

// UnitListPriceIsNil applies the IsNil predicate on the "unit_list_price" field.
func UnitListPriceIsNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUnitListPrice)))
	})
}

// UnitListPriceNotNil applies the NotNil predicate on the "unit_list_price" field.
func UnitListPriceNotNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUnitListPrice)))
	})
}

// UnitAverageCostEQ applies the EQ predicate on the "unit_average_cost" field.
func UnitAverageCostEQ(v float64) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUnitAverageCost), v))
	})
}

// UnitAverageCostNEQ applies the NEQ predicate on the "unit_average_cost" field.
func UnitAverageCostNEQ(v float64) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUnitAverageCost), v))
	})
}

// UnitAverageCostIn applies the In predicate on the "unit_average_cost" field.
func UnitAverageCostIn(vs ...float64) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUnitAverageCost), v...))
	})
}

// UnitAverageCostNotIn applies the NotIn predicate on the "unit_average_cost" field.
func UnitAverageCostNotIn(vs ...float64) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUnitAverageCost), v...))
	})
}

// UnitAverageCostGT applies the GT predicate on the "unit_average_cost" field.
func UnitAverageCostGT(v float64) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUnitAverageCost), v))
	})
}

// UnitAverageCostGTE applies the GTE predicate on the "unit_average_cost" field.
func UnitAverageCostGTE(v float64) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUnitAverageCost), v))
	})
}

// UnitAverageCostLT applies the LT predicate on the "unit_average_cost" field.
func UnitAverageCostLT(v float64) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUnitAverageCost), v))
	})
}

// UnitAverageCostLTE applies the LTE predicate on the "unit_average_cost" field.
func UnitAverageCostLTE(v float64) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUnitAverageCost), v))
	})
}

// UnitAverageCostIsNil applies the IsNil predicate on the "unit_average_cost" field.
func UnitAverageCostIsNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUnitAverageCost)))
	})
}

// UnitAverageCostNotNil applies the NotNil predicate on the "unit_average_cost" field.
func UnitAverageCostNotNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUnitAverageCost)))
	})
}

// UnitRecurringPriceEQ applies the EQ predicate on the "unit_recurring_price" field.
func UnitRecurringPriceEQ(v float64) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUnitRecurringPrice), v))
	})
}

// UnitRecurringPriceNEQ applies the NEQ predicate on the "unit_recurring_price" field.
func UnitRecurringPriceNEQ(v float64) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUnitRecurringPrice), v))
	})
}

// UnitRecurringPriceIn applies the In predicate on the "unit_recurring_price" field.
func UnitRecurringPriceIn(vs ...float64) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUnitRecurringPrice), v...))
	})
}

// UnitRecurringPriceNotIn applies the NotIn predicate on the "unit_recurring_price" field.
func UnitRecurringPriceNotIn(vs ...float64) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUnitRecurringPrice), v...))
	})
}

// UnitRecurringPriceGT applies the GT predicate on the "unit_recurring_price" field.
func UnitRecurringPriceGT(v float64) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUnitRecurringPrice), v))
	})
}

// UnitRecurringPriceGTE applies the GTE predicate on the "unit_recurring_price" field.
func UnitRecurringPriceGTE(v float64) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUnitRecurringPrice), v))
	})
}

// UnitRecurringPriceLT applies the LT predicate on the "unit_recurring_price" field.
func UnitRecurringPriceLT(v float64) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUnitRecurringPrice), v))
	})
}

// UnitRecurringPriceLTE applies the LTE predicate on the "unit_recurring_price" field.
func UnitRecurringPriceLTE(v float64) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUnitRecurringPrice), v))
	})
}

// UnitRecurringPriceIsNil applies the IsNil predicate on the "unit_recurring_price" field.
func UnitRecurringPriceIsNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUnitRecurringPrice)))
	})
}

// UnitRecurringPriceNotNil applies the NotNil predicate on the "unit_recurring_price" field.
func UnitRecurringPriceNotNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUnitRecurringPrice)))
	})
}

// IsModifiedPriceEQ applies the EQ predicate on the "is_modified_price" field.
func IsModifiedPriceEQ(v IsModifiedPrice) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsModifiedPrice), v))
	})
}

// IsModifiedPriceNEQ applies the NEQ predicate on the "is_modified_price" field.
func IsModifiedPriceNEQ(v IsModifiedPrice) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsModifiedPrice), v))
	})
}

// IsModifiedPriceIn applies the In predicate on the "is_modified_price" field.
func IsModifiedPriceIn(vs ...IsModifiedPrice) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIsModifiedPrice), v...))
	})
}

// IsModifiedPriceNotIn applies the NotIn predicate on the "is_modified_price" field.
func IsModifiedPriceNotIn(vs ...IsModifiedPrice) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIsModifiedPrice), v...))
	})
}

// IsModifiedPriceIsNil applies the IsNil predicate on the "is_modified_price" field.
func IsModifiedPriceIsNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldIsModifiedPrice)))
	})
}

// IsModifiedPriceNotNil applies the NotNil predicate on the "is_modified_price" field.
func IsModifiedPriceNotNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldIsModifiedPrice)))
	})
}

// RecurringFreqUomIDEQ applies the EQ predicate on the "recurring_freq_uom_id" field.
func RecurringFreqUomIDEQ(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRecurringFreqUomID), v))
	})
}

// RecurringFreqUomIDNEQ applies the NEQ predicate on the "recurring_freq_uom_id" field.
func RecurringFreqUomIDNEQ(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRecurringFreqUomID), v))
	})
}

// RecurringFreqUomIDIn applies the In predicate on the "recurring_freq_uom_id" field.
func RecurringFreqUomIDIn(vs ...int) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRecurringFreqUomID), v...))
	})
}

// RecurringFreqUomIDNotIn applies the NotIn predicate on the "recurring_freq_uom_id" field.
func RecurringFreqUomIDNotIn(vs ...int) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRecurringFreqUomID), v...))
	})
}

// RecurringFreqUomIDGT applies the GT predicate on the "recurring_freq_uom_id" field.
func RecurringFreqUomIDGT(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRecurringFreqUomID), v))
	})
}

// RecurringFreqUomIDGTE applies the GTE predicate on the "recurring_freq_uom_id" field.
func RecurringFreqUomIDGTE(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRecurringFreqUomID), v))
	})
}

// RecurringFreqUomIDLT applies the LT predicate on the "recurring_freq_uom_id" field.
func RecurringFreqUomIDLT(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRecurringFreqUomID), v))
	})
}

// RecurringFreqUomIDLTE applies the LTE predicate on the "recurring_freq_uom_id" field.
func RecurringFreqUomIDLTE(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRecurringFreqUomID), v))
	})
}

// RecurringFreqUomIDIsNil applies the IsNil predicate on the "recurring_freq_uom_id" field.
func RecurringFreqUomIDIsNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRecurringFreqUomID)))
	})
}

// RecurringFreqUomIDNotNil applies the NotNil predicate on the "recurring_freq_uom_id" field.
func RecurringFreqUomIDNotNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRecurringFreqUomID)))
	})
}

// ItemDescriptionEQ applies the EQ predicate on the "item_description" field.
func ItemDescriptionEQ(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldItemDescription), v))
	})
}

// ItemDescriptionNEQ applies the NEQ predicate on the "item_description" field.
func ItemDescriptionNEQ(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldItemDescription), v))
	})
}

// ItemDescriptionIn applies the In predicate on the "item_description" field.
func ItemDescriptionIn(vs ...string) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldItemDescription), v...))
	})
}

// ItemDescriptionNotIn applies the NotIn predicate on the "item_description" field.
func ItemDescriptionNotIn(vs ...string) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldItemDescription), v...))
	})
}

// ItemDescriptionGT applies the GT predicate on the "item_description" field.
func ItemDescriptionGT(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldItemDescription), v))
	})
}

// ItemDescriptionGTE applies the GTE predicate on the "item_description" field.
func ItemDescriptionGTE(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldItemDescription), v))
	})
}

// ItemDescriptionLT applies the LT predicate on the "item_description" field.
func ItemDescriptionLT(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldItemDescription), v))
	})
}

// ItemDescriptionLTE applies the LTE predicate on the "item_description" field.
func ItemDescriptionLTE(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldItemDescription), v))
	})
}

// ItemDescriptionContains applies the Contains predicate on the "item_description" field.
func ItemDescriptionContains(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldItemDescription), v))
	})
}

// ItemDescriptionHasPrefix applies the HasPrefix predicate on the "item_description" field.
func ItemDescriptionHasPrefix(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldItemDescription), v))
	})
}

// ItemDescriptionHasSuffix applies the HasSuffix predicate on the "item_description" field.
func ItemDescriptionHasSuffix(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldItemDescription), v))
	})
}

// ItemDescriptionIsNil applies the IsNil predicate on the "item_description" field.
func ItemDescriptionIsNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldItemDescription)))
	})
}

// ItemDescriptionNotNil applies the NotNil predicate on the "item_description" field.
func ItemDescriptionNotNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldItemDescription)))
	})
}

// ItemDescriptionEqualFold applies the EqualFold predicate on the "item_description" field.
func ItemDescriptionEqualFold(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldItemDescription), v))
	})
}

// ItemDescriptionContainsFold applies the ContainsFold predicate on the "item_description" field.
func ItemDescriptionContainsFold(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldItemDescription), v))
	})
}

// CommentsEQ applies the EQ predicate on the "comments" field.
func CommentsEQ(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldComments), v))
	})
}

// CommentsNEQ applies the NEQ predicate on the "comments" field.
func CommentsNEQ(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldComments), v))
	})
}

// CommentsIn applies the In predicate on the "comments" field.
func CommentsIn(vs ...string) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldComments), v...))
	})
}

// CommentsNotIn applies the NotIn predicate on the "comments" field.
func CommentsNotIn(vs ...string) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldComments), v...))
	})
}

// CommentsGT applies the GT predicate on the "comments" field.
func CommentsGT(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldComments), v))
	})
}

// CommentsGTE applies the GTE predicate on the "comments" field.
func CommentsGTE(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldComments), v))
	})
}

// CommentsLT applies the LT predicate on the "comments" field.
func CommentsLT(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldComments), v))
	})
}

// CommentsLTE applies the LTE predicate on the "comments" field.
func CommentsLTE(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldComments), v))
	})
}

// CommentsContains applies the Contains predicate on the "comments" field.
func CommentsContains(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldComments), v))
	})
}

// CommentsHasPrefix applies the HasPrefix predicate on the "comments" field.
func CommentsHasPrefix(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldComments), v))
	})
}

// CommentsHasSuffix applies the HasSuffix predicate on the "comments" field.
func CommentsHasSuffix(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldComments), v))
	})
}

// CommentsIsNil applies the IsNil predicate on the "comments" field.
func CommentsIsNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldComments)))
	})
}

// CommentsNotNil applies the NotNil predicate on the "comments" field.
func CommentsNotNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldComments)))
	})
}

// CommentsEqualFold applies the EqualFold predicate on the "comments" field.
func CommentsEqualFold(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldComments), v))
	})
}

// CommentsContainsFold applies the ContainsFold predicate on the "comments" field.
func CommentsContainsFold(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldComments), v))
	})
}

// CorrespondingPoIDEQ applies the EQ predicate on the "corresponding_po_id" field.
func CorrespondingPoIDEQ(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCorrespondingPoID), v))
	})
}

// CorrespondingPoIDNEQ applies the NEQ predicate on the "corresponding_po_id" field.
func CorrespondingPoIDNEQ(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCorrespondingPoID), v))
	})
}

// CorrespondingPoIDIn applies the In predicate on the "corresponding_po_id" field.
func CorrespondingPoIDIn(vs ...int) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCorrespondingPoID), v...))
	})
}

// CorrespondingPoIDNotIn applies the NotIn predicate on the "corresponding_po_id" field.
func CorrespondingPoIDNotIn(vs ...int) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCorrespondingPoID), v...))
	})
}

// CorrespondingPoIDGT applies the GT predicate on the "corresponding_po_id" field.
func CorrespondingPoIDGT(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCorrespondingPoID), v))
	})
}

// CorrespondingPoIDGTE applies the GTE predicate on the "corresponding_po_id" field.
func CorrespondingPoIDGTE(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCorrespondingPoID), v))
	})
}

// CorrespondingPoIDLT applies the LT predicate on the "corresponding_po_id" field.
func CorrespondingPoIDLT(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCorrespondingPoID), v))
	})
}

// CorrespondingPoIDLTE applies the LTE predicate on the "corresponding_po_id" field.
func CorrespondingPoIDLTE(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCorrespondingPoID), v))
	})
}

// CorrespondingPoIDIsNil applies the IsNil predicate on the "corresponding_po_id" field.
func CorrespondingPoIDIsNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCorrespondingPoID)))
	})
}

// CorrespondingPoIDNotNil applies the NotNil predicate on the "corresponding_po_id" field.
func CorrespondingPoIDNotNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCorrespondingPoID)))
	})
}

// StatusIDEQ applies the EQ predicate on the "status_id" field.
func StatusIDEQ(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatusID), v))
	})
}

// StatusIDNEQ applies the NEQ predicate on the "status_id" field.
func StatusIDNEQ(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatusID), v))
	})
}

// StatusIDIn applies the In predicate on the "status_id" field.
func StatusIDIn(vs ...int) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStatusID), v...))
	})
}

// StatusIDNotIn applies the NotIn predicate on the "status_id" field.
func StatusIDNotIn(vs ...int) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStatusID), v...))
	})
}

// StatusIDGT applies the GT predicate on the "status_id" field.
func StatusIDGT(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatusID), v))
	})
}

// StatusIDGTE applies the GTE predicate on the "status_id" field.
func StatusIDGTE(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatusID), v))
	})
}

// StatusIDLT applies the LT predicate on the "status_id" field.
func StatusIDLT(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatusID), v))
	})
}

// StatusIDLTE applies the LTE predicate on the "status_id" field.
func StatusIDLTE(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatusID), v))
	})
}

// StatusIDIsNil applies the IsNil predicate on the "status_id" field.
func StatusIDIsNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStatusID)))
	})
}

// StatusIDNotNil applies the NotNil predicate on the "status_id" field.
func StatusIDNotNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStatusID)))
	})
}

// SyncStatusIDEQ applies the EQ predicate on the "sync_status_id" field.
func SyncStatusIDEQ(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSyncStatusID), v))
	})
}

// SyncStatusIDNEQ applies the NEQ predicate on the "sync_status_id" field.
func SyncStatusIDNEQ(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSyncStatusID), v))
	})
}

// SyncStatusIDIn applies the In predicate on the "sync_status_id" field.
func SyncStatusIDIn(vs ...int) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSyncStatusID), v...))
	})
}

// SyncStatusIDNotIn applies the NotIn predicate on the "sync_status_id" field.
func SyncStatusIDNotIn(vs ...int) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSyncStatusID), v...))
	})
}

// SyncStatusIDGT applies the GT predicate on the "sync_status_id" field.
func SyncStatusIDGT(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSyncStatusID), v))
	})
}

// SyncStatusIDGTE applies the GTE predicate on the "sync_status_id" field.
func SyncStatusIDGTE(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSyncStatusID), v))
	})
}

// SyncStatusIDLT applies the LT predicate on the "sync_status_id" field.
func SyncStatusIDLT(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSyncStatusID), v))
	})
}

// SyncStatusIDLTE applies the LTE predicate on the "sync_status_id" field.
func SyncStatusIDLTE(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSyncStatusID), v))
	})
}

// SyncStatusIDIsNil applies the IsNil predicate on the "sync_status_id" field.
func SyncStatusIDIsNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSyncStatusID)))
	})
}

// SyncStatusIDNotNil applies the NotNil predicate on the "sync_status_id" field.
func SyncStatusIDNotNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSyncStatusID)))
	})
}

// EstimatedShipDateEQ applies the EQ predicate on the "estimated_ship_date" field.
func EstimatedShipDateEQ(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEstimatedShipDate), v))
	})
}

// EstimatedShipDateNEQ applies the NEQ predicate on the "estimated_ship_date" field.
func EstimatedShipDateNEQ(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEstimatedShipDate), v))
	})
}

// EstimatedShipDateIn applies the In predicate on the "estimated_ship_date" field.
func EstimatedShipDateIn(vs ...time.Time) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEstimatedShipDate), v...))
	})
}

// EstimatedShipDateNotIn applies the NotIn predicate on the "estimated_ship_date" field.
func EstimatedShipDateNotIn(vs ...time.Time) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEstimatedShipDate), v...))
	})
}

// EstimatedShipDateGT applies the GT predicate on the "estimated_ship_date" field.
func EstimatedShipDateGT(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEstimatedShipDate), v))
	})
}

// EstimatedShipDateGTE applies the GTE predicate on the "estimated_ship_date" field.
func EstimatedShipDateGTE(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEstimatedShipDate), v))
	})
}

// EstimatedShipDateLT applies the LT predicate on the "estimated_ship_date" field.
func EstimatedShipDateLT(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEstimatedShipDate), v))
	})
}

// EstimatedShipDateLTE applies the LTE predicate on the "estimated_ship_date" field.
func EstimatedShipDateLTE(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEstimatedShipDate), v))
	})
}

// EstimatedShipDateIsNil applies the IsNil predicate on the "estimated_ship_date" field.
func EstimatedShipDateIsNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldEstimatedShipDate)))
	})
}

// EstimatedShipDateNotNil applies the NotNil predicate on the "estimated_ship_date" field.
func EstimatedShipDateNotNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldEstimatedShipDate)))
	})
}

// EstimatedDeliveryDateEQ applies the EQ predicate on the "estimated_delivery_date" field.
func EstimatedDeliveryDateEQ(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEstimatedDeliveryDate), v))
	})
}

// EstimatedDeliveryDateNEQ applies the NEQ predicate on the "estimated_delivery_date" field.
func EstimatedDeliveryDateNEQ(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEstimatedDeliveryDate), v))
	})
}

// EstimatedDeliveryDateIn applies the In predicate on the "estimated_delivery_date" field.
func EstimatedDeliveryDateIn(vs ...time.Time) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEstimatedDeliveryDate), v...))
	})
}

// EstimatedDeliveryDateNotIn applies the NotIn predicate on the "estimated_delivery_date" field.
func EstimatedDeliveryDateNotIn(vs ...time.Time) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEstimatedDeliveryDate), v...))
	})
}

// EstimatedDeliveryDateGT applies the GT predicate on the "estimated_delivery_date" field.
func EstimatedDeliveryDateGT(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEstimatedDeliveryDate), v))
	})
}

// EstimatedDeliveryDateGTE applies the GTE predicate on the "estimated_delivery_date" field.
func EstimatedDeliveryDateGTE(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEstimatedDeliveryDate), v))
	})
}

// EstimatedDeliveryDateLT applies the LT predicate on the "estimated_delivery_date" field.
func EstimatedDeliveryDateLT(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEstimatedDeliveryDate), v))
	})
}

// EstimatedDeliveryDateLTE applies the LTE predicate on the "estimated_delivery_date" field.
func EstimatedDeliveryDateLTE(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEstimatedDeliveryDate), v))
	})
}

// EstimatedDeliveryDateIsNil applies the IsNil predicate on the "estimated_delivery_date" field.
func EstimatedDeliveryDateIsNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldEstimatedDeliveryDate)))
	})
}

// EstimatedDeliveryDateNotNil applies the NotNil predicate on the "estimated_delivery_date" field.
func EstimatedDeliveryDateNotNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldEstimatedDeliveryDate)))
	})
}

// AutoCancelDateEQ applies the EQ predicate on the "auto_cancel_date" field.
func AutoCancelDateEQ(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAutoCancelDate), v))
	})
}

// AutoCancelDateNEQ applies the NEQ predicate on the "auto_cancel_date" field.
func AutoCancelDateNEQ(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAutoCancelDate), v))
	})
}

// AutoCancelDateIn applies the In predicate on the "auto_cancel_date" field.
func AutoCancelDateIn(vs ...time.Time) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAutoCancelDate), v...))
	})
}

// AutoCancelDateNotIn applies the NotIn predicate on the "auto_cancel_date" field.
func AutoCancelDateNotIn(vs ...time.Time) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAutoCancelDate), v...))
	})
}

// AutoCancelDateGT applies the GT predicate on the "auto_cancel_date" field.
func AutoCancelDateGT(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAutoCancelDate), v))
	})
}

// AutoCancelDateGTE applies the GTE predicate on the "auto_cancel_date" field.
func AutoCancelDateGTE(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAutoCancelDate), v))
	})
}

// AutoCancelDateLT applies the LT predicate on the "auto_cancel_date" field.
func AutoCancelDateLT(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAutoCancelDate), v))
	})
}

// AutoCancelDateLTE applies the LTE predicate on the "auto_cancel_date" field.
func AutoCancelDateLTE(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAutoCancelDate), v))
	})
}

// AutoCancelDateIsNil applies the IsNil predicate on the "auto_cancel_date" field.
func AutoCancelDateIsNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAutoCancelDate)))
	})
}

// AutoCancelDateNotNil applies the NotNil predicate on the "auto_cancel_date" field.
func AutoCancelDateNotNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAutoCancelDate)))
	})
}

// DontCancelSetDateEQ applies the EQ predicate on the "dont_cancel_set_date" field.
func DontCancelSetDateEQ(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDontCancelSetDate), v))
	})
}

// DontCancelSetDateNEQ applies the NEQ predicate on the "dont_cancel_set_date" field.
func DontCancelSetDateNEQ(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDontCancelSetDate), v))
	})
}

// DontCancelSetDateIn applies the In predicate on the "dont_cancel_set_date" field.
func DontCancelSetDateIn(vs ...time.Time) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDontCancelSetDate), v...))
	})
}

// DontCancelSetDateNotIn applies the NotIn predicate on the "dont_cancel_set_date" field.
func DontCancelSetDateNotIn(vs ...time.Time) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDontCancelSetDate), v...))
	})
}

// DontCancelSetDateGT applies the GT predicate on the "dont_cancel_set_date" field.
func DontCancelSetDateGT(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDontCancelSetDate), v))
	})
}

// DontCancelSetDateGTE applies the GTE predicate on the "dont_cancel_set_date" field.
func DontCancelSetDateGTE(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDontCancelSetDate), v))
	})
}

// DontCancelSetDateLT applies the LT predicate on the "dont_cancel_set_date" field.
func DontCancelSetDateLT(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDontCancelSetDate), v))
	})
}

// DontCancelSetDateLTE applies the LTE predicate on the "dont_cancel_set_date" field.
func DontCancelSetDateLTE(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDontCancelSetDate), v))
	})
}

// DontCancelSetDateIsNil applies the IsNil predicate on the "dont_cancel_set_date" field.
func DontCancelSetDateIsNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDontCancelSetDate)))
	})
}

// DontCancelSetDateNotNil applies the NotNil predicate on the "dont_cancel_set_date" field.
func DontCancelSetDateNotNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDontCancelSetDate)))
	})
}

// DontCancelSetUserLoginEQ applies the EQ predicate on the "dont_cancel_set_user_login" field.
func DontCancelSetUserLoginEQ(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDontCancelSetUserLogin), v))
	})
}

// DontCancelSetUserLoginNEQ applies the NEQ predicate on the "dont_cancel_set_user_login" field.
func DontCancelSetUserLoginNEQ(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDontCancelSetUserLogin), v))
	})
}

// DontCancelSetUserLoginIn applies the In predicate on the "dont_cancel_set_user_login" field.
func DontCancelSetUserLoginIn(vs ...string) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDontCancelSetUserLogin), v...))
	})
}

// DontCancelSetUserLoginNotIn applies the NotIn predicate on the "dont_cancel_set_user_login" field.
func DontCancelSetUserLoginNotIn(vs ...string) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDontCancelSetUserLogin), v...))
	})
}

// DontCancelSetUserLoginGT applies the GT predicate on the "dont_cancel_set_user_login" field.
func DontCancelSetUserLoginGT(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDontCancelSetUserLogin), v))
	})
}

// DontCancelSetUserLoginGTE applies the GTE predicate on the "dont_cancel_set_user_login" field.
func DontCancelSetUserLoginGTE(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDontCancelSetUserLogin), v))
	})
}

// DontCancelSetUserLoginLT applies the LT predicate on the "dont_cancel_set_user_login" field.
func DontCancelSetUserLoginLT(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDontCancelSetUserLogin), v))
	})
}

// DontCancelSetUserLoginLTE applies the LTE predicate on the "dont_cancel_set_user_login" field.
func DontCancelSetUserLoginLTE(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDontCancelSetUserLogin), v))
	})
}

// DontCancelSetUserLoginContains applies the Contains predicate on the "dont_cancel_set_user_login" field.
func DontCancelSetUserLoginContains(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDontCancelSetUserLogin), v))
	})
}

// DontCancelSetUserLoginHasPrefix applies the HasPrefix predicate on the "dont_cancel_set_user_login" field.
func DontCancelSetUserLoginHasPrefix(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDontCancelSetUserLogin), v))
	})
}

// DontCancelSetUserLoginHasSuffix applies the HasSuffix predicate on the "dont_cancel_set_user_login" field.
func DontCancelSetUserLoginHasSuffix(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDontCancelSetUserLogin), v))
	})
}

// DontCancelSetUserLoginIsNil applies the IsNil predicate on the "dont_cancel_set_user_login" field.
func DontCancelSetUserLoginIsNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDontCancelSetUserLogin)))
	})
}

// DontCancelSetUserLoginNotNil applies the NotNil predicate on the "dont_cancel_set_user_login" field.
func DontCancelSetUserLoginNotNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDontCancelSetUserLogin)))
	})
}

// DontCancelSetUserLoginEqualFold applies the EqualFold predicate on the "dont_cancel_set_user_login" field.
func DontCancelSetUserLoginEqualFold(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDontCancelSetUserLogin), v))
	})
}

// DontCancelSetUserLoginContainsFold applies the ContainsFold predicate on the "dont_cancel_set_user_login" field.
func DontCancelSetUserLoginContainsFold(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDontCancelSetUserLogin), v))
	})
}

// ShipBeforeDateEQ applies the EQ predicate on the "ship_before_date" field.
func ShipBeforeDateEQ(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShipBeforeDate), v))
	})
}

// ShipBeforeDateNEQ applies the NEQ predicate on the "ship_before_date" field.
func ShipBeforeDateNEQ(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShipBeforeDate), v))
	})
}

// ShipBeforeDateIn applies the In predicate on the "ship_before_date" field.
func ShipBeforeDateIn(vs ...time.Time) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldShipBeforeDate), v...))
	})
}

// ShipBeforeDateNotIn applies the NotIn predicate on the "ship_before_date" field.
func ShipBeforeDateNotIn(vs ...time.Time) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldShipBeforeDate), v...))
	})
}

// ShipBeforeDateGT applies the GT predicate on the "ship_before_date" field.
func ShipBeforeDateGT(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShipBeforeDate), v))
	})
}

// ShipBeforeDateGTE applies the GTE predicate on the "ship_before_date" field.
func ShipBeforeDateGTE(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShipBeforeDate), v))
	})
}

// ShipBeforeDateLT applies the LT predicate on the "ship_before_date" field.
func ShipBeforeDateLT(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShipBeforeDate), v))
	})
}

// ShipBeforeDateLTE applies the LTE predicate on the "ship_before_date" field.
func ShipBeforeDateLTE(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShipBeforeDate), v))
	})
}

// ShipBeforeDateIsNil applies the IsNil predicate on the "ship_before_date" field.
func ShipBeforeDateIsNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldShipBeforeDate)))
	})
}

// ShipBeforeDateNotNil applies the NotNil predicate on the "ship_before_date" field.
func ShipBeforeDateNotNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldShipBeforeDate)))
	})
}

// ShipAfterDateEQ applies the EQ predicate on the "ship_after_date" field.
func ShipAfterDateEQ(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShipAfterDate), v))
	})
}

// ShipAfterDateNEQ applies the NEQ predicate on the "ship_after_date" field.
func ShipAfterDateNEQ(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShipAfterDate), v))
	})
}

// ShipAfterDateIn applies the In predicate on the "ship_after_date" field.
func ShipAfterDateIn(vs ...time.Time) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldShipAfterDate), v...))
	})
}

// ShipAfterDateNotIn applies the NotIn predicate on the "ship_after_date" field.
func ShipAfterDateNotIn(vs ...time.Time) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldShipAfterDate), v...))
	})
}

// ShipAfterDateGT applies the GT predicate on the "ship_after_date" field.
func ShipAfterDateGT(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShipAfterDate), v))
	})
}

// ShipAfterDateGTE applies the GTE predicate on the "ship_after_date" field.
func ShipAfterDateGTE(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShipAfterDate), v))
	})
}

// ShipAfterDateLT applies the LT predicate on the "ship_after_date" field.
func ShipAfterDateLT(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShipAfterDate), v))
	})
}

// ShipAfterDateLTE applies the LTE predicate on the "ship_after_date" field.
func ShipAfterDateLTE(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShipAfterDate), v))
	})
}

// ShipAfterDateIsNil applies the IsNil predicate on the "ship_after_date" field.
func ShipAfterDateIsNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldShipAfterDate)))
	})
}

// ShipAfterDateNotNil applies the NotNil predicate on the "ship_after_date" field.
func ShipAfterDateNotNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldShipAfterDate)))
	})
}

// ReserveAfterDateEQ applies the EQ predicate on the "reserve_after_date" field.
func ReserveAfterDateEQ(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReserveAfterDate), v))
	})
}

// ReserveAfterDateNEQ applies the NEQ predicate on the "reserve_after_date" field.
func ReserveAfterDateNEQ(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReserveAfterDate), v))
	})
}

// ReserveAfterDateIn applies the In predicate on the "reserve_after_date" field.
func ReserveAfterDateIn(vs ...time.Time) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldReserveAfterDate), v...))
	})
}

// ReserveAfterDateNotIn applies the NotIn predicate on the "reserve_after_date" field.
func ReserveAfterDateNotIn(vs ...time.Time) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldReserveAfterDate), v...))
	})
}

// ReserveAfterDateGT applies the GT predicate on the "reserve_after_date" field.
func ReserveAfterDateGT(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldReserveAfterDate), v))
	})
}

// ReserveAfterDateGTE applies the GTE predicate on the "reserve_after_date" field.
func ReserveAfterDateGTE(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldReserveAfterDate), v))
	})
}

// ReserveAfterDateLT applies the LT predicate on the "reserve_after_date" field.
func ReserveAfterDateLT(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldReserveAfterDate), v))
	})
}

// ReserveAfterDateLTE applies the LTE predicate on the "reserve_after_date" field.
func ReserveAfterDateLTE(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldReserveAfterDate), v))
	})
}

// ReserveAfterDateIsNil applies the IsNil predicate on the "reserve_after_date" field.
func ReserveAfterDateIsNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldReserveAfterDate)))
	})
}

// ReserveAfterDateNotNil applies the NotNil predicate on the "reserve_after_date" field.
func ReserveAfterDateNotNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldReserveAfterDate)))
	})
}

// CancelBackOrderDateEQ applies the EQ predicate on the "cancel_back_order_date" field.
func CancelBackOrderDateEQ(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCancelBackOrderDate), v))
	})
}

// CancelBackOrderDateNEQ applies the NEQ predicate on the "cancel_back_order_date" field.
func CancelBackOrderDateNEQ(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCancelBackOrderDate), v))
	})
}

// CancelBackOrderDateIn applies the In predicate on the "cancel_back_order_date" field.
func CancelBackOrderDateIn(vs ...time.Time) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCancelBackOrderDate), v...))
	})
}

// CancelBackOrderDateNotIn applies the NotIn predicate on the "cancel_back_order_date" field.
func CancelBackOrderDateNotIn(vs ...time.Time) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCancelBackOrderDate), v...))
	})
}

// CancelBackOrderDateGT applies the GT predicate on the "cancel_back_order_date" field.
func CancelBackOrderDateGT(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCancelBackOrderDate), v))
	})
}

// CancelBackOrderDateGTE applies the GTE predicate on the "cancel_back_order_date" field.
func CancelBackOrderDateGTE(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCancelBackOrderDate), v))
	})
}

// CancelBackOrderDateLT applies the LT predicate on the "cancel_back_order_date" field.
func CancelBackOrderDateLT(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCancelBackOrderDate), v))
	})
}

// CancelBackOrderDateLTE applies the LTE predicate on the "cancel_back_order_date" field.
func CancelBackOrderDateLTE(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCancelBackOrderDate), v))
	})
}

// CancelBackOrderDateIsNil applies the IsNil predicate on the "cancel_back_order_date" field.
func CancelBackOrderDateIsNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCancelBackOrderDate)))
	})
}

// CancelBackOrderDateNotNil applies the NotNil predicate on the "cancel_back_order_date" field.
func CancelBackOrderDateNotNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCancelBackOrderDate)))
	})
}

// OverrideGlAccountIDEQ applies the EQ predicate on the "override_gl_account_id" field.
func OverrideGlAccountIDEQ(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOverrideGlAccountID), v))
	})
}

// OverrideGlAccountIDNEQ applies the NEQ predicate on the "override_gl_account_id" field.
func OverrideGlAccountIDNEQ(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOverrideGlAccountID), v))
	})
}

// OverrideGlAccountIDIn applies the In predicate on the "override_gl_account_id" field.
func OverrideGlAccountIDIn(vs ...int) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOverrideGlAccountID), v...))
	})
}

// OverrideGlAccountIDNotIn applies the NotIn predicate on the "override_gl_account_id" field.
func OverrideGlAccountIDNotIn(vs ...int) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOverrideGlAccountID), v...))
	})
}

// OverrideGlAccountIDGT applies the GT predicate on the "override_gl_account_id" field.
func OverrideGlAccountIDGT(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOverrideGlAccountID), v))
	})
}

// OverrideGlAccountIDGTE applies the GTE predicate on the "override_gl_account_id" field.
func OverrideGlAccountIDGTE(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOverrideGlAccountID), v))
	})
}

// OverrideGlAccountIDLT applies the LT predicate on the "override_gl_account_id" field.
func OverrideGlAccountIDLT(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOverrideGlAccountID), v))
	})
}

// OverrideGlAccountIDLTE applies the LTE predicate on the "override_gl_account_id" field.
func OverrideGlAccountIDLTE(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOverrideGlAccountID), v))
	})
}

// OverrideGlAccountIDIsNil applies the IsNil predicate on the "override_gl_account_id" field.
func OverrideGlAccountIDIsNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOverrideGlAccountID)))
	})
}

// OverrideGlAccountIDNotNil applies the NotNil predicate on the "override_gl_account_id" field.
func OverrideGlAccountIDNotNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOverrideGlAccountID)))
	})
}

// SalesOpportunityIDEQ applies the EQ predicate on the "sales_opportunity_id" field.
func SalesOpportunityIDEQ(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSalesOpportunityID), v))
	})
}

// SalesOpportunityIDNEQ applies the NEQ predicate on the "sales_opportunity_id" field.
func SalesOpportunityIDNEQ(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSalesOpportunityID), v))
	})
}

// SalesOpportunityIDIn applies the In predicate on the "sales_opportunity_id" field.
func SalesOpportunityIDIn(vs ...int) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSalesOpportunityID), v...))
	})
}

// SalesOpportunityIDNotIn applies the NotIn predicate on the "sales_opportunity_id" field.
func SalesOpportunityIDNotIn(vs ...int) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSalesOpportunityID), v...))
	})
}

// SalesOpportunityIDGT applies the GT predicate on the "sales_opportunity_id" field.
func SalesOpportunityIDGT(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSalesOpportunityID), v))
	})
}

// SalesOpportunityIDGTE applies the GTE predicate on the "sales_opportunity_id" field.
func SalesOpportunityIDGTE(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSalesOpportunityID), v))
	})
}

// SalesOpportunityIDLT applies the LT predicate on the "sales_opportunity_id" field.
func SalesOpportunityIDLT(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSalesOpportunityID), v))
	})
}

// SalesOpportunityIDLTE applies the LTE predicate on the "sales_opportunity_id" field.
func SalesOpportunityIDLTE(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSalesOpportunityID), v))
	})
}

// SalesOpportunityIDIsNil applies the IsNil predicate on the "sales_opportunity_id" field.
func SalesOpportunityIDIsNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSalesOpportunityID)))
	})
}

// SalesOpportunityIDNotNil applies the NotNil predicate on the "sales_opportunity_id" field.
func SalesOpportunityIDNotNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSalesOpportunityID)))
	})
}

// ChangeByUserLoginIDEQ applies the EQ predicate on the "change_by_user_login_id" field.
func ChangeByUserLoginIDEQ(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChangeByUserLoginID), v))
	})
}

// ChangeByUserLoginIDNEQ applies the NEQ predicate on the "change_by_user_login_id" field.
func ChangeByUserLoginIDNEQ(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldChangeByUserLoginID), v))
	})
}

// ChangeByUserLoginIDIn applies the In predicate on the "change_by_user_login_id" field.
func ChangeByUserLoginIDIn(vs ...string) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldChangeByUserLoginID), v...))
	})
}

// ChangeByUserLoginIDNotIn applies the NotIn predicate on the "change_by_user_login_id" field.
func ChangeByUserLoginIDNotIn(vs ...string) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldChangeByUserLoginID), v...))
	})
}

// ChangeByUserLoginIDGT applies the GT predicate on the "change_by_user_login_id" field.
func ChangeByUserLoginIDGT(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldChangeByUserLoginID), v))
	})
}

// ChangeByUserLoginIDGTE applies the GTE predicate on the "change_by_user_login_id" field.
func ChangeByUserLoginIDGTE(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldChangeByUserLoginID), v))
	})
}

// ChangeByUserLoginIDLT applies the LT predicate on the "change_by_user_login_id" field.
func ChangeByUserLoginIDLT(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldChangeByUserLoginID), v))
	})
}

// ChangeByUserLoginIDLTE applies the LTE predicate on the "change_by_user_login_id" field.
func ChangeByUserLoginIDLTE(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldChangeByUserLoginID), v))
	})
}

// ChangeByUserLoginIDContains applies the Contains predicate on the "change_by_user_login_id" field.
func ChangeByUserLoginIDContains(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldChangeByUserLoginID), v))
	})
}

// ChangeByUserLoginIDHasPrefix applies the HasPrefix predicate on the "change_by_user_login_id" field.
func ChangeByUserLoginIDHasPrefix(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldChangeByUserLoginID), v))
	})
}

// ChangeByUserLoginIDHasSuffix applies the HasSuffix predicate on the "change_by_user_login_id" field.
func ChangeByUserLoginIDHasSuffix(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldChangeByUserLoginID), v))
	})
}

// ChangeByUserLoginIDIsNil applies the IsNil predicate on the "change_by_user_login_id" field.
func ChangeByUserLoginIDIsNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldChangeByUserLoginID)))
	})
}

// ChangeByUserLoginIDNotNil applies the NotNil predicate on the "change_by_user_login_id" field.
func ChangeByUserLoginIDNotNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldChangeByUserLoginID)))
	})
}

// ChangeByUserLoginIDEqualFold applies the EqualFold predicate on the "change_by_user_login_id" field.
func ChangeByUserLoginIDEqualFold(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldChangeByUserLoginID), v))
	})
}

// ChangeByUserLoginIDContainsFold applies the ContainsFold predicate on the "change_by_user_login_id" field.
func ChangeByUserLoginIDContainsFold(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldChangeByUserLoginID), v))
	})
}

// HasOrderHeader applies the HasEdge predicate on the "order_header" edge.
func HasOrderHeader() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderHeaderTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OrderHeaderTable, OrderHeaderColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderHeaderWith applies the HasEdge predicate on the "order_header" edge with a given conditions (other predicates).
func HasOrderHeaderWith(preds ...predicate.OrderHeader) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderHeaderInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OrderHeaderTable, OrderHeaderColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasItemIssuances applies the HasEdge predicate on the "item_issuances" edge.
func HasItemIssuances() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ItemIssuancesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ItemIssuancesTable, ItemIssuancesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasItemIssuancesWith applies the HasEdge predicate on the "item_issuances" edge with a given conditions (other predicates).
func HasItemIssuancesWith(preds ...predicate.ItemIssuance) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ItemIssuancesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ItemIssuancesTable, ItemIssuancesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrderItemPriceInfos applies the HasEdge predicate on the "order_item_price_infos" edge.
func HasOrderItemPriceInfos() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderItemPriceInfosTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrderItemPriceInfosTable, OrderItemPriceInfosColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderItemPriceInfosWith applies the HasEdge predicate on the "order_item_price_infos" edge with a given conditions (other predicates).
func HasOrderItemPriceInfosWith(preds ...predicate.OrderItemPriceInfo) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderItemPriceInfosInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrderItemPriceInfosTable, OrderItemPriceInfosColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrderItemShipGroupAssocs applies the HasEdge predicate on the "order_item_ship_group_assocs" edge.
func HasOrderItemShipGroupAssocs() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderItemShipGroupAssocsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrderItemShipGroupAssocsTable, OrderItemShipGroupAssocsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderItemShipGroupAssocsWith applies the HasEdge predicate on the "order_item_ship_group_assocs" edge with a given conditions (other predicates).
func HasOrderItemShipGroupAssocsWith(preds ...predicate.OrderItemShipGroupAssoc) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderItemShipGroupAssocsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrderItemShipGroupAssocsTable, OrderItemShipGroupAssocsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrderStatuses applies the HasEdge predicate on the "order_statuses" edge.
func HasOrderStatuses() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderStatusesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrderStatusesTable, OrderStatusesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderStatusesWith applies the HasEdge predicate on the "order_statuses" edge with a given conditions (other predicates).
func HasOrderStatusesWith(preds ...predicate.OrderStatus) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderStatusesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrderStatusesTable, OrderStatusesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.OrderItem) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.OrderItem) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.OrderItem) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		p(s.Not())
	})
}
