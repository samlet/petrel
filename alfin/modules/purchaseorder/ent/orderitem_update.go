// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/itemissuance"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/orderheader"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/orderitem"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/orderitempriceinfo"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/orderitemshipgroupassoc"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/orderstatus"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/predicate"
)

// OrderItemUpdate is the builder for updating OrderItem entities.
type OrderItemUpdate struct {
	config
	hooks    []Hook
	mutation *OrderItemMutation
}

// Where adds a new predicate for the OrderItemUpdate builder.
func (oiu *OrderItemUpdate) Where(ps ...predicate.OrderItem) *OrderItemUpdate {
	oiu.mutation.predicates = append(oiu.mutation.predicates, ps...)
	return oiu
}

// SetOrderItemSeqID sets the "order_item_seq_id" field.
func (oiu *OrderItemUpdate) SetOrderItemSeqID(i int) *OrderItemUpdate {
	oiu.mutation.ResetOrderItemSeqID()
	oiu.mutation.SetOrderItemSeqID(i)
	return oiu
}

// AddOrderItemSeqID adds i to the "order_item_seq_id" field.
func (oiu *OrderItemUpdate) AddOrderItemSeqID(i int) *OrderItemUpdate {
	oiu.mutation.AddOrderItemSeqID(i)
	return oiu
}

// SetExternalID sets the "external_id" field.
func (oiu *OrderItemUpdate) SetExternalID(i int) *OrderItemUpdate {
	oiu.mutation.ResetExternalID()
	oiu.mutation.SetExternalID(i)
	return oiu
}

// SetNillableExternalID sets the "external_id" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableExternalID(i *int) *OrderItemUpdate {
	if i != nil {
		oiu.SetExternalID(*i)
	}
	return oiu
}

// AddExternalID adds i to the "external_id" field.
func (oiu *OrderItemUpdate) AddExternalID(i int) *OrderItemUpdate {
	oiu.mutation.AddExternalID(i)
	return oiu
}

// ClearExternalID clears the value of the "external_id" field.
func (oiu *OrderItemUpdate) ClearExternalID() *OrderItemUpdate {
	oiu.mutation.ClearExternalID()
	return oiu
}

// SetOrderItemTypeID sets the "order_item_type_id" field.
func (oiu *OrderItemUpdate) SetOrderItemTypeID(i int) *OrderItemUpdate {
	oiu.mutation.ResetOrderItemTypeID()
	oiu.mutation.SetOrderItemTypeID(i)
	return oiu
}

// SetNillableOrderItemTypeID sets the "order_item_type_id" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableOrderItemTypeID(i *int) *OrderItemUpdate {
	if i != nil {
		oiu.SetOrderItemTypeID(*i)
	}
	return oiu
}

// AddOrderItemTypeID adds i to the "order_item_type_id" field.
func (oiu *OrderItemUpdate) AddOrderItemTypeID(i int) *OrderItemUpdate {
	oiu.mutation.AddOrderItemTypeID(i)
	return oiu
}

// ClearOrderItemTypeID clears the value of the "order_item_type_id" field.
func (oiu *OrderItemUpdate) ClearOrderItemTypeID() *OrderItemUpdate {
	oiu.mutation.ClearOrderItemTypeID()
	return oiu
}

// SetOrderItemGroupSeqID sets the "order_item_group_seq_id" field.
func (oiu *OrderItemUpdate) SetOrderItemGroupSeqID(i int) *OrderItemUpdate {
	oiu.mutation.ResetOrderItemGroupSeqID()
	oiu.mutation.SetOrderItemGroupSeqID(i)
	return oiu
}

// SetNillableOrderItemGroupSeqID sets the "order_item_group_seq_id" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableOrderItemGroupSeqID(i *int) *OrderItemUpdate {
	if i != nil {
		oiu.SetOrderItemGroupSeqID(*i)
	}
	return oiu
}

// AddOrderItemGroupSeqID adds i to the "order_item_group_seq_id" field.
func (oiu *OrderItemUpdate) AddOrderItemGroupSeqID(i int) *OrderItemUpdate {
	oiu.mutation.AddOrderItemGroupSeqID(i)
	return oiu
}

// ClearOrderItemGroupSeqID clears the value of the "order_item_group_seq_id" field.
func (oiu *OrderItemUpdate) ClearOrderItemGroupSeqID() *OrderItemUpdate {
	oiu.mutation.ClearOrderItemGroupSeqID()
	return oiu
}

// SetIsItemGroupPrimary sets the "is_item_group_primary" field.
func (oiu *OrderItemUpdate) SetIsItemGroupPrimary(oigp orderitem.IsItemGroupPrimary) *OrderItemUpdate {
	oiu.mutation.SetIsItemGroupPrimary(oigp)
	return oiu
}

// SetNillableIsItemGroupPrimary sets the "is_item_group_primary" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableIsItemGroupPrimary(oigp *orderitem.IsItemGroupPrimary) *OrderItemUpdate {
	if oigp != nil {
		oiu.SetIsItemGroupPrimary(*oigp)
	}
	return oiu
}

// ClearIsItemGroupPrimary clears the value of the "is_item_group_primary" field.
func (oiu *OrderItemUpdate) ClearIsItemGroupPrimary() *OrderItemUpdate {
	oiu.mutation.ClearIsItemGroupPrimary()
	return oiu
}

// SetFromInventoryItemID sets the "from_inventory_item_id" field.
func (oiu *OrderItemUpdate) SetFromInventoryItemID(i int) *OrderItemUpdate {
	oiu.mutation.ResetFromInventoryItemID()
	oiu.mutation.SetFromInventoryItemID(i)
	return oiu
}

// SetNillableFromInventoryItemID sets the "from_inventory_item_id" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableFromInventoryItemID(i *int) *OrderItemUpdate {
	if i != nil {
		oiu.SetFromInventoryItemID(*i)
	}
	return oiu
}

// AddFromInventoryItemID adds i to the "from_inventory_item_id" field.
func (oiu *OrderItemUpdate) AddFromInventoryItemID(i int) *OrderItemUpdate {
	oiu.mutation.AddFromInventoryItemID(i)
	return oiu
}

// ClearFromInventoryItemID clears the value of the "from_inventory_item_id" field.
func (oiu *OrderItemUpdate) ClearFromInventoryItemID() *OrderItemUpdate {
	oiu.mutation.ClearFromInventoryItemID()
	return oiu
}

// SetBudgetID sets the "budget_id" field.
func (oiu *OrderItemUpdate) SetBudgetID(i int) *OrderItemUpdate {
	oiu.mutation.ResetBudgetID()
	oiu.mutation.SetBudgetID(i)
	return oiu
}

// SetNillableBudgetID sets the "budget_id" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableBudgetID(i *int) *OrderItemUpdate {
	if i != nil {
		oiu.SetBudgetID(*i)
	}
	return oiu
}

// AddBudgetID adds i to the "budget_id" field.
func (oiu *OrderItemUpdate) AddBudgetID(i int) *OrderItemUpdate {
	oiu.mutation.AddBudgetID(i)
	return oiu
}

// ClearBudgetID clears the value of the "budget_id" field.
func (oiu *OrderItemUpdate) ClearBudgetID() *OrderItemUpdate {
	oiu.mutation.ClearBudgetID()
	return oiu
}

// SetBudgetItemSeqID sets the "budget_item_seq_id" field.
func (oiu *OrderItemUpdate) SetBudgetItemSeqID(i int) *OrderItemUpdate {
	oiu.mutation.ResetBudgetItemSeqID()
	oiu.mutation.SetBudgetItemSeqID(i)
	return oiu
}

// SetNillableBudgetItemSeqID sets the "budget_item_seq_id" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableBudgetItemSeqID(i *int) *OrderItemUpdate {
	if i != nil {
		oiu.SetBudgetItemSeqID(*i)
	}
	return oiu
}

// AddBudgetItemSeqID adds i to the "budget_item_seq_id" field.
func (oiu *OrderItemUpdate) AddBudgetItemSeqID(i int) *OrderItemUpdate {
	oiu.mutation.AddBudgetItemSeqID(i)
	return oiu
}

// ClearBudgetItemSeqID clears the value of the "budget_item_seq_id" field.
func (oiu *OrderItemUpdate) ClearBudgetItemSeqID() *OrderItemUpdate {
	oiu.mutation.ClearBudgetItemSeqID()
	return oiu
}

// SetProductID sets the "product_id" field.
func (oiu *OrderItemUpdate) SetProductID(i int) *OrderItemUpdate {
	oiu.mutation.ResetProductID()
	oiu.mutation.SetProductID(i)
	return oiu
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableProductID(i *int) *OrderItemUpdate {
	if i != nil {
		oiu.SetProductID(*i)
	}
	return oiu
}

// AddProductID adds i to the "product_id" field.
func (oiu *OrderItemUpdate) AddProductID(i int) *OrderItemUpdate {
	oiu.mutation.AddProductID(i)
	return oiu
}

// ClearProductID clears the value of the "product_id" field.
func (oiu *OrderItemUpdate) ClearProductID() *OrderItemUpdate {
	oiu.mutation.ClearProductID()
	return oiu
}

// SetSupplierProductID sets the "supplier_product_id" field.
func (oiu *OrderItemUpdate) SetSupplierProductID(s string) *OrderItemUpdate {
	oiu.mutation.SetSupplierProductID(s)
	return oiu
}

// SetNillableSupplierProductID sets the "supplier_product_id" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableSupplierProductID(s *string) *OrderItemUpdate {
	if s != nil {
		oiu.SetSupplierProductID(*s)
	}
	return oiu
}

// ClearSupplierProductID clears the value of the "supplier_product_id" field.
func (oiu *OrderItemUpdate) ClearSupplierProductID() *OrderItemUpdate {
	oiu.mutation.ClearSupplierProductID()
	return oiu
}

// SetProductFeatureID sets the "product_feature_id" field.
func (oiu *OrderItemUpdate) SetProductFeatureID(i int) *OrderItemUpdate {
	oiu.mutation.ResetProductFeatureID()
	oiu.mutation.SetProductFeatureID(i)
	return oiu
}

// SetNillableProductFeatureID sets the "product_feature_id" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableProductFeatureID(i *int) *OrderItemUpdate {
	if i != nil {
		oiu.SetProductFeatureID(*i)
	}
	return oiu
}

// AddProductFeatureID adds i to the "product_feature_id" field.
func (oiu *OrderItemUpdate) AddProductFeatureID(i int) *OrderItemUpdate {
	oiu.mutation.AddProductFeatureID(i)
	return oiu
}

// ClearProductFeatureID clears the value of the "product_feature_id" field.
func (oiu *OrderItemUpdate) ClearProductFeatureID() *OrderItemUpdate {
	oiu.mutation.ClearProductFeatureID()
	return oiu
}

// SetProdCatalogID sets the "prod_catalog_id" field.
func (oiu *OrderItemUpdate) SetProdCatalogID(i int) *OrderItemUpdate {
	oiu.mutation.ResetProdCatalogID()
	oiu.mutation.SetProdCatalogID(i)
	return oiu
}

// SetNillableProdCatalogID sets the "prod_catalog_id" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableProdCatalogID(i *int) *OrderItemUpdate {
	if i != nil {
		oiu.SetProdCatalogID(*i)
	}
	return oiu
}

// AddProdCatalogID adds i to the "prod_catalog_id" field.
func (oiu *OrderItemUpdate) AddProdCatalogID(i int) *OrderItemUpdate {
	oiu.mutation.AddProdCatalogID(i)
	return oiu
}

// ClearProdCatalogID clears the value of the "prod_catalog_id" field.
func (oiu *OrderItemUpdate) ClearProdCatalogID() *OrderItemUpdate {
	oiu.mutation.ClearProdCatalogID()
	return oiu
}

// SetProductCategoryID sets the "product_category_id" field.
func (oiu *OrderItemUpdate) SetProductCategoryID(i int) *OrderItemUpdate {
	oiu.mutation.ResetProductCategoryID()
	oiu.mutation.SetProductCategoryID(i)
	return oiu
}

// SetNillableProductCategoryID sets the "product_category_id" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableProductCategoryID(i *int) *OrderItemUpdate {
	if i != nil {
		oiu.SetProductCategoryID(*i)
	}
	return oiu
}

// AddProductCategoryID adds i to the "product_category_id" field.
func (oiu *OrderItemUpdate) AddProductCategoryID(i int) *OrderItemUpdate {
	oiu.mutation.AddProductCategoryID(i)
	return oiu
}

// ClearProductCategoryID clears the value of the "product_category_id" field.
func (oiu *OrderItemUpdate) ClearProductCategoryID() *OrderItemUpdate {
	oiu.mutation.ClearProductCategoryID()
	return oiu
}

// SetIsPromo sets the "is_promo" field.
func (oiu *OrderItemUpdate) SetIsPromo(op orderitem.IsPromo) *OrderItemUpdate {
	oiu.mutation.SetIsPromo(op)
	return oiu
}

// SetNillableIsPromo sets the "is_promo" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableIsPromo(op *orderitem.IsPromo) *OrderItemUpdate {
	if op != nil {
		oiu.SetIsPromo(*op)
	}
	return oiu
}

// ClearIsPromo clears the value of the "is_promo" field.
func (oiu *OrderItemUpdate) ClearIsPromo() *OrderItemUpdate {
	oiu.mutation.ClearIsPromo()
	return oiu
}

// SetQuoteID sets the "quote_id" field.
func (oiu *OrderItemUpdate) SetQuoteID(i int) *OrderItemUpdate {
	oiu.mutation.ResetQuoteID()
	oiu.mutation.SetQuoteID(i)
	return oiu
}

// SetNillableQuoteID sets the "quote_id" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableQuoteID(i *int) *OrderItemUpdate {
	if i != nil {
		oiu.SetQuoteID(*i)
	}
	return oiu
}

// AddQuoteID adds i to the "quote_id" field.
func (oiu *OrderItemUpdate) AddQuoteID(i int) *OrderItemUpdate {
	oiu.mutation.AddQuoteID(i)
	return oiu
}

// ClearQuoteID clears the value of the "quote_id" field.
func (oiu *OrderItemUpdate) ClearQuoteID() *OrderItemUpdate {
	oiu.mutation.ClearQuoteID()
	return oiu
}

// SetQuoteItemSeqID sets the "quote_item_seq_id" field.
func (oiu *OrderItemUpdate) SetQuoteItemSeqID(i int) *OrderItemUpdate {
	oiu.mutation.ResetQuoteItemSeqID()
	oiu.mutation.SetQuoteItemSeqID(i)
	return oiu
}

// SetNillableQuoteItemSeqID sets the "quote_item_seq_id" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableQuoteItemSeqID(i *int) *OrderItemUpdate {
	if i != nil {
		oiu.SetQuoteItemSeqID(*i)
	}
	return oiu
}

// AddQuoteItemSeqID adds i to the "quote_item_seq_id" field.
func (oiu *OrderItemUpdate) AddQuoteItemSeqID(i int) *OrderItemUpdate {
	oiu.mutation.AddQuoteItemSeqID(i)
	return oiu
}

// ClearQuoteItemSeqID clears the value of the "quote_item_seq_id" field.
func (oiu *OrderItemUpdate) ClearQuoteItemSeqID() *OrderItemUpdate {
	oiu.mutation.ClearQuoteItemSeqID()
	return oiu
}

// SetShoppingListID sets the "shopping_list_id" field.
func (oiu *OrderItemUpdate) SetShoppingListID(i int) *OrderItemUpdate {
	oiu.mutation.ResetShoppingListID()
	oiu.mutation.SetShoppingListID(i)
	return oiu
}

// SetNillableShoppingListID sets the "shopping_list_id" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableShoppingListID(i *int) *OrderItemUpdate {
	if i != nil {
		oiu.SetShoppingListID(*i)
	}
	return oiu
}

// AddShoppingListID adds i to the "shopping_list_id" field.
func (oiu *OrderItemUpdate) AddShoppingListID(i int) *OrderItemUpdate {
	oiu.mutation.AddShoppingListID(i)
	return oiu
}

// ClearShoppingListID clears the value of the "shopping_list_id" field.
func (oiu *OrderItemUpdate) ClearShoppingListID() *OrderItemUpdate {
	oiu.mutation.ClearShoppingListID()
	return oiu
}

// SetShoppingListItemSeqID sets the "shopping_list_item_seq_id" field.
func (oiu *OrderItemUpdate) SetShoppingListItemSeqID(i int) *OrderItemUpdate {
	oiu.mutation.ResetShoppingListItemSeqID()
	oiu.mutation.SetShoppingListItemSeqID(i)
	return oiu
}

// SetNillableShoppingListItemSeqID sets the "shopping_list_item_seq_id" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableShoppingListItemSeqID(i *int) *OrderItemUpdate {
	if i != nil {
		oiu.SetShoppingListItemSeqID(*i)
	}
	return oiu
}

// AddShoppingListItemSeqID adds i to the "shopping_list_item_seq_id" field.
func (oiu *OrderItemUpdate) AddShoppingListItemSeqID(i int) *OrderItemUpdate {
	oiu.mutation.AddShoppingListItemSeqID(i)
	return oiu
}

// ClearShoppingListItemSeqID clears the value of the "shopping_list_item_seq_id" field.
func (oiu *OrderItemUpdate) ClearShoppingListItemSeqID() *OrderItemUpdate {
	oiu.mutation.ClearShoppingListItemSeqID()
	return oiu
}

// SetSubscriptionID sets the "subscription_id" field.
func (oiu *OrderItemUpdate) SetSubscriptionID(i int) *OrderItemUpdate {
	oiu.mutation.ResetSubscriptionID()
	oiu.mutation.SetSubscriptionID(i)
	return oiu
}

// SetNillableSubscriptionID sets the "subscription_id" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableSubscriptionID(i *int) *OrderItemUpdate {
	if i != nil {
		oiu.SetSubscriptionID(*i)
	}
	return oiu
}

// AddSubscriptionID adds i to the "subscription_id" field.
func (oiu *OrderItemUpdate) AddSubscriptionID(i int) *OrderItemUpdate {
	oiu.mutation.AddSubscriptionID(i)
	return oiu
}

// ClearSubscriptionID clears the value of the "subscription_id" field.
func (oiu *OrderItemUpdate) ClearSubscriptionID() *OrderItemUpdate {
	oiu.mutation.ClearSubscriptionID()
	return oiu
}

// SetDeploymentID sets the "deployment_id" field.
func (oiu *OrderItemUpdate) SetDeploymentID(i int) *OrderItemUpdate {
	oiu.mutation.ResetDeploymentID()
	oiu.mutation.SetDeploymentID(i)
	return oiu
}

// SetNillableDeploymentID sets the "deployment_id" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableDeploymentID(i *int) *OrderItemUpdate {
	if i != nil {
		oiu.SetDeploymentID(*i)
	}
	return oiu
}

// AddDeploymentID adds i to the "deployment_id" field.
func (oiu *OrderItemUpdate) AddDeploymentID(i int) *OrderItemUpdate {
	oiu.mutation.AddDeploymentID(i)
	return oiu
}

// ClearDeploymentID clears the value of the "deployment_id" field.
func (oiu *OrderItemUpdate) ClearDeploymentID() *OrderItemUpdate {
	oiu.mutation.ClearDeploymentID()
	return oiu
}

// SetQuantity sets the "quantity" field.
func (oiu *OrderItemUpdate) SetQuantity(f float64) *OrderItemUpdate {
	oiu.mutation.ResetQuantity()
	oiu.mutation.SetQuantity(f)
	return oiu
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableQuantity(f *float64) *OrderItemUpdate {
	if f != nil {
		oiu.SetQuantity(*f)
	}
	return oiu
}

// AddQuantity adds f to the "quantity" field.
func (oiu *OrderItemUpdate) AddQuantity(f float64) *OrderItemUpdate {
	oiu.mutation.AddQuantity(f)
	return oiu
}

// ClearQuantity clears the value of the "quantity" field.
func (oiu *OrderItemUpdate) ClearQuantity() *OrderItemUpdate {
	oiu.mutation.ClearQuantity()
	return oiu
}

// SetCancelQuantity sets the "cancel_quantity" field.
func (oiu *OrderItemUpdate) SetCancelQuantity(f float64) *OrderItemUpdate {
	oiu.mutation.ResetCancelQuantity()
	oiu.mutation.SetCancelQuantity(f)
	return oiu
}

// SetNillableCancelQuantity sets the "cancel_quantity" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableCancelQuantity(f *float64) *OrderItemUpdate {
	if f != nil {
		oiu.SetCancelQuantity(*f)
	}
	return oiu
}

// AddCancelQuantity adds f to the "cancel_quantity" field.
func (oiu *OrderItemUpdate) AddCancelQuantity(f float64) *OrderItemUpdate {
	oiu.mutation.AddCancelQuantity(f)
	return oiu
}

// ClearCancelQuantity clears the value of the "cancel_quantity" field.
func (oiu *OrderItemUpdate) ClearCancelQuantity() *OrderItemUpdate {
	oiu.mutation.ClearCancelQuantity()
	return oiu
}

// SetSelectedAmount sets the "selected_amount" field.
func (oiu *OrderItemUpdate) SetSelectedAmount(f float64) *OrderItemUpdate {
	oiu.mutation.ResetSelectedAmount()
	oiu.mutation.SetSelectedAmount(f)
	return oiu
}

// SetNillableSelectedAmount sets the "selected_amount" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableSelectedAmount(f *float64) *OrderItemUpdate {
	if f != nil {
		oiu.SetSelectedAmount(*f)
	}
	return oiu
}

// AddSelectedAmount adds f to the "selected_amount" field.
func (oiu *OrderItemUpdate) AddSelectedAmount(f float64) *OrderItemUpdate {
	oiu.mutation.AddSelectedAmount(f)
	return oiu
}

// ClearSelectedAmount clears the value of the "selected_amount" field.
func (oiu *OrderItemUpdate) ClearSelectedAmount() *OrderItemUpdate {
	oiu.mutation.ClearSelectedAmount()
	return oiu
}

// SetUnitPrice sets the "unit_price" field.
func (oiu *OrderItemUpdate) SetUnitPrice(f float64) *OrderItemUpdate {
	oiu.mutation.ResetUnitPrice()
	oiu.mutation.SetUnitPrice(f)
	return oiu
}

// SetNillableUnitPrice sets the "unit_price" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableUnitPrice(f *float64) *OrderItemUpdate {
	if f != nil {
		oiu.SetUnitPrice(*f)
	}
	return oiu
}

// AddUnitPrice adds f to the "unit_price" field.
func (oiu *OrderItemUpdate) AddUnitPrice(f float64) *OrderItemUpdate {
	oiu.mutation.AddUnitPrice(f)
	return oiu
}

// ClearUnitPrice clears the value of the "unit_price" field.
func (oiu *OrderItemUpdate) ClearUnitPrice() *OrderItemUpdate {
	oiu.mutation.ClearUnitPrice()
	return oiu
}

// SetUnitListPrice sets the "unit_list_price" field.
func (oiu *OrderItemUpdate) SetUnitListPrice(f float64) *OrderItemUpdate {
	oiu.mutation.ResetUnitListPrice()
	oiu.mutation.SetUnitListPrice(f)
	return oiu
}

// SetNillableUnitListPrice sets the "unit_list_price" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableUnitListPrice(f *float64) *OrderItemUpdate {
	if f != nil {
		oiu.SetUnitListPrice(*f)
	}
	return oiu
}

// AddUnitListPrice adds f to the "unit_list_price" field.
func (oiu *OrderItemUpdate) AddUnitListPrice(f float64) *OrderItemUpdate {
	oiu.mutation.AddUnitListPrice(f)
	return oiu
}

// ClearUnitListPrice clears the value of the "unit_list_price" field.
func (oiu *OrderItemUpdate) ClearUnitListPrice() *OrderItemUpdate {
	oiu.mutation.ClearUnitListPrice()
	return oiu
}

// SetUnitAverageCost sets the "unit_average_cost" field.
func (oiu *OrderItemUpdate) SetUnitAverageCost(f float64) *OrderItemUpdate {
	oiu.mutation.ResetUnitAverageCost()
	oiu.mutation.SetUnitAverageCost(f)
	return oiu
}

// SetNillableUnitAverageCost sets the "unit_average_cost" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableUnitAverageCost(f *float64) *OrderItemUpdate {
	if f != nil {
		oiu.SetUnitAverageCost(*f)
	}
	return oiu
}

// AddUnitAverageCost adds f to the "unit_average_cost" field.
func (oiu *OrderItemUpdate) AddUnitAverageCost(f float64) *OrderItemUpdate {
	oiu.mutation.AddUnitAverageCost(f)
	return oiu
}

// ClearUnitAverageCost clears the value of the "unit_average_cost" field.
func (oiu *OrderItemUpdate) ClearUnitAverageCost() *OrderItemUpdate {
	oiu.mutation.ClearUnitAverageCost()
	return oiu
}

// SetUnitRecurringPrice sets the "unit_recurring_price" field.
func (oiu *OrderItemUpdate) SetUnitRecurringPrice(f float64) *OrderItemUpdate {
	oiu.mutation.ResetUnitRecurringPrice()
	oiu.mutation.SetUnitRecurringPrice(f)
	return oiu
}

// SetNillableUnitRecurringPrice sets the "unit_recurring_price" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableUnitRecurringPrice(f *float64) *OrderItemUpdate {
	if f != nil {
		oiu.SetUnitRecurringPrice(*f)
	}
	return oiu
}

// AddUnitRecurringPrice adds f to the "unit_recurring_price" field.
func (oiu *OrderItemUpdate) AddUnitRecurringPrice(f float64) *OrderItemUpdate {
	oiu.mutation.AddUnitRecurringPrice(f)
	return oiu
}

// ClearUnitRecurringPrice clears the value of the "unit_recurring_price" field.
func (oiu *OrderItemUpdate) ClearUnitRecurringPrice() *OrderItemUpdate {
	oiu.mutation.ClearUnitRecurringPrice()
	return oiu
}

// SetIsModifiedPrice sets the "is_modified_price" field.
func (oiu *OrderItemUpdate) SetIsModifiedPrice(omp orderitem.IsModifiedPrice) *OrderItemUpdate {
	oiu.mutation.SetIsModifiedPrice(omp)
	return oiu
}

// SetNillableIsModifiedPrice sets the "is_modified_price" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableIsModifiedPrice(omp *orderitem.IsModifiedPrice) *OrderItemUpdate {
	if omp != nil {
		oiu.SetIsModifiedPrice(*omp)
	}
	return oiu
}

// ClearIsModifiedPrice clears the value of the "is_modified_price" field.
func (oiu *OrderItemUpdate) ClearIsModifiedPrice() *OrderItemUpdate {
	oiu.mutation.ClearIsModifiedPrice()
	return oiu
}

// SetRecurringFreqUomID sets the "recurring_freq_uom_id" field.
func (oiu *OrderItemUpdate) SetRecurringFreqUomID(i int) *OrderItemUpdate {
	oiu.mutation.ResetRecurringFreqUomID()
	oiu.mutation.SetRecurringFreqUomID(i)
	return oiu
}

// SetNillableRecurringFreqUomID sets the "recurring_freq_uom_id" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableRecurringFreqUomID(i *int) *OrderItemUpdate {
	if i != nil {
		oiu.SetRecurringFreqUomID(*i)
	}
	return oiu
}

// AddRecurringFreqUomID adds i to the "recurring_freq_uom_id" field.
func (oiu *OrderItemUpdate) AddRecurringFreqUomID(i int) *OrderItemUpdate {
	oiu.mutation.AddRecurringFreqUomID(i)
	return oiu
}

// ClearRecurringFreqUomID clears the value of the "recurring_freq_uom_id" field.
func (oiu *OrderItemUpdate) ClearRecurringFreqUomID() *OrderItemUpdate {
	oiu.mutation.ClearRecurringFreqUomID()
	return oiu
}

// SetItemDescription sets the "item_description" field.
func (oiu *OrderItemUpdate) SetItemDescription(s string) *OrderItemUpdate {
	oiu.mutation.SetItemDescription(s)
	return oiu
}

// SetNillableItemDescription sets the "item_description" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableItemDescription(s *string) *OrderItemUpdate {
	if s != nil {
		oiu.SetItemDescription(*s)
	}
	return oiu
}

// ClearItemDescription clears the value of the "item_description" field.
func (oiu *OrderItemUpdate) ClearItemDescription() *OrderItemUpdate {
	oiu.mutation.ClearItemDescription()
	return oiu
}

// SetComments sets the "comments" field.
func (oiu *OrderItemUpdate) SetComments(s string) *OrderItemUpdate {
	oiu.mutation.SetComments(s)
	return oiu
}

// SetNillableComments sets the "comments" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableComments(s *string) *OrderItemUpdate {
	if s != nil {
		oiu.SetComments(*s)
	}
	return oiu
}

// ClearComments clears the value of the "comments" field.
func (oiu *OrderItemUpdate) ClearComments() *OrderItemUpdate {
	oiu.mutation.ClearComments()
	return oiu
}

// SetCorrespondingPoID sets the "corresponding_po_id" field.
func (oiu *OrderItemUpdate) SetCorrespondingPoID(i int) *OrderItemUpdate {
	oiu.mutation.ResetCorrespondingPoID()
	oiu.mutation.SetCorrespondingPoID(i)
	return oiu
}

// SetNillableCorrespondingPoID sets the "corresponding_po_id" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableCorrespondingPoID(i *int) *OrderItemUpdate {
	if i != nil {
		oiu.SetCorrespondingPoID(*i)
	}
	return oiu
}

// AddCorrespondingPoID adds i to the "corresponding_po_id" field.
func (oiu *OrderItemUpdate) AddCorrespondingPoID(i int) *OrderItemUpdate {
	oiu.mutation.AddCorrespondingPoID(i)
	return oiu
}

// ClearCorrespondingPoID clears the value of the "corresponding_po_id" field.
func (oiu *OrderItemUpdate) ClearCorrespondingPoID() *OrderItemUpdate {
	oiu.mutation.ClearCorrespondingPoID()
	return oiu
}

// SetStatusID sets the "status_id" field.
func (oiu *OrderItemUpdate) SetStatusID(i int) *OrderItemUpdate {
	oiu.mutation.ResetStatusID()
	oiu.mutation.SetStatusID(i)
	return oiu
}

// SetNillableStatusID sets the "status_id" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableStatusID(i *int) *OrderItemUpdate {
	if i != nil {
		oiu.SetStatusID(*i)
	}
	return oiu
}

// AddStatusID adds i to the "status_id" field.
func (oiu *OrderItemUpdate) AddStatusID(i int) *OrderItemUpdate {
	oiu.mutation.AddStatusID(i)
	return oiu
}

// ClearStatusID clears the value of the "status_id" field.
func (oiu *OrderItemUpdate) ClearStatusID() *OrderItemUpdate {
	oiu.mutation.ClearStatusID()
	return oiu
}

// SetSyncStatusID sets the "sync_status_id" field.
func (oiu *OrderItemUpdate) SetSyncStatusID(i int) *OrderItemUpdate {
	oiu.mutation.ResetSyncStatusID()
	oiu.mutation.SetSyncStatusID(i)
	return oiu
}

// SetNillableSyncStatusID sets the "sync_status_id" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableSyncStatusID(i *int) *OrderItemUpdate {
	if i != nil {
		oiu.SetSyncStatusID(*i)
	}
	return oiu
}

// AddSyncStatusID adds i to the "sync_status_id" field.
func (oiu *OrderItemUpdate) AddSyncStatusID(i int) *OrderItemUpdate {
	oiu.mutation.AddSyncStatusID(i)
	return oiu
}

// ClearSyncStatusID clears the value of the "sync_status_id" field.
func (oiu *OrderItemUpdate) ClearSyncStatusID() *OrderItemUpdate {
	oiu.mutation.ClearSyncStatusID()
	return oiu
}

// SetEstimatedShipDate sets the "estimated_ship_date" field.
func (oiu *OrderItemUpdate) SetEstimatedShipDate(t time.Time) *OrderItemUpdate {
	oiu.mutation.SetEstimatedShipDate(t)
	return oiu
}

// SetNillableEstimatedShipDate sets the "estimated_ship_date" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableEstimatedShipDate(t *time.Time) *OrderItemUpdate {
	if t != nil {
		oiu.SetEstimatedShipDate(*t)
	}
	return oiu
}

// ClearEstimatedShipDate clears the value of the "estimated_ship_date" field.
func (oiu *OrderItemUpdate) ClearEstimatedShipDate() *OrderItemUpdate {
	oiu.mutation.ClearEstimatedShipDate()
	return oiu
}

// SetEstimatedDeliveryDate sets the "estimated_delivery_date" field.
func (oiu *OrderItemUpdate) SetEstimatedDeliveryDate(t time.Time) *OrderItemUpdate {
	oiu.mutation.SetEstimatedDeliveryDate(t)
	return oiu
}

// SetNillableEstimatedDeliveryDate sets the "estimated_delivery_date" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableEstimatedDeliveryDate(t *time.Time) *OrderItemUpdate {
	if t != nil {
		oiu.SetEstimatedDeliveryDate(*t)
	}
	return oiu
}

// ClearEstimatedDeliveryDate clears the value of the "estimated_delivery_date" field.
func (oiu *OrderItemUpdate) ClearEstimatedDeliveryDate() *OrderItemUpdate {
	oiu.mutation.ClearEstimatedDeliveryDate()
	return oiu
}

// SetAutoCancelDate sets the "auto_cancel_date" field.
func (oiu *OrderItemUpdate) SetAutoCancelDate(t time.Time) *OrderItemUpdate {
	oiu.mutation.SetAutoCancelDate(t)
	return oiu
}

// SetNillableAutoCancelDate sets the "auto_cancel_date" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableAutoCancelDate(t *time.Time) *OrderItemUpdate {
	if t != nil {
		oiu.SetAutoCancelDate(*t)
	}
	return oiu
}

// ClearAutoCancelDate clears the value of the "auto_cancel_date" field.
func (oiu *OrderItemUpdate) ClearAutoCancelDate() *OrderItemUpdate {
	oiu.mutation.ClearAutoCancelDate()
	return oiu
}

// SetDontCancelSetDate sets the "dont_cancel_set_date" field.
func (oiu *OrderItemUpdate) SetDontCancelSetDate(t time.Time) *OrderItemUpdate {
	oiu.mutation.SetDontCancelSetDate(t)
	return oiu
}

// SetNillableDontCancelSetDate sets the "dont_cancel_set_date" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableDontCancelSetDate(t *time.Time) *OrderItemUpdate {
	if t != nil {
		oiu.SetDontCancelSetDate(*t)
	}
	return oiu
}

// ClearDontCancelSetDate clears the value of the "dont_cancel_set_date" field.
func (oiu *OrderItemUpdate) ClearDontCancelSetDate() *OrderItemUpdate {
	oiu.mutation.ClearDontCancelSetDate()
	return oiu
}

// SetDontCancelSetUserLogin sets the "dont_cancel_set_user_login" field.
func (oiu *OrderItemUpdate) SetDontCancelSetUserLogin(s string) *OrderItemUpdate {
	oiu.mutation.SetDontCancelSetUserLogin(s)
	return oiu
}

// SetNillableDontCancelSetUserLogin sets the "dont_cancel_set_user_login" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableDontCancelSetUserLogin(s *string) *OrderItemUpdate {
	if s != nil {
		oiu.SetDontCancelSetUserLogin(*s)
	}
	return oiu
}

// ClearDontCancelSetUserLogin clears the value of the "dont_cancel_set_user_login" field.
func (oiu *OrderItemUpdate) ClearDontCancelSetUserLogin() *OrderItemUpdate {
	oiu.mutation.ClearDontCancelSetUserLogin()
	return oiu
}

// SetShipBeforeDate sets the "ship_before_date" field.
func (oiu *OrderItemUpdate) SetShipBeforeDate(t time.Time) *OrderItemUpdate {
	oiu.mutation.SetShipBeforeDate(t)
	return oiu
}

// SetNillableShipBeforeDate sets the "ship_before_date" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableShipBeforeDate(t *time.Time) *OrderItemUpdate {
	if t != nil {
		oiu.SetShipBeforeDate(*t)
	}
	return oiu
}

// ClearShipBeforeDate clears the value of the "ship_before_date" field.
func (oiu *OrderItemUpdate) ClearShipBeforeDate() *OrderItemUpdate {
	oiu.mutation.ClearShipBeforeDate()
	return oiu
}

// SetShipAfterDate sets the "ship_after_date" field.
func (oiu *OrderItemUpdate) SetShipAfterDate(t time.Time) *OrderItemUpdate {
	oiu.mutation.SetShipAfterDate(t)
	return oiu
}

// SetNillableShipAfterDate sets the "ship_after_date" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableShipAfterDate(t *time.Time) *OrderItemUpdate {
	if t != nil {
		oiu.SetShipAfterDate(*t)
	}
	return oiu
}

// ClearShipAfterDate clears the value of the "ship_after_date" field.
func (oiu *OrderItemUpdate) ClearShipAfterDate() *OrderItemUpdate {
	oiu.mutation.ClearShipAfterDate()
	return oiu
}

// SetReserveAfterDate sets the "reserve_after_date" field.
func (oiu *OrderItemUpdate) SetReserveAfterDate(t time.Time) *OrderItemUpdate {
	oiu.mutation.SetReserveAfterDate(t)
	return oiu
}

// SetNillableReserveAfterDate sets the "reserve_after_date" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableReserveAfterDate(t *time.Time) *OrderItemUpdate {
	if t != nil {
		oiu.SetReserveAfterDate(*t)
	}
	return oiu
}

// ClearReserveAfterDate clears the value of the "reserve_after_date" field.
func (oiu *OrderItemUpdate) ClearReserveAfterDate() *OrderItemUpdate {
	oiu.mutation.ClearReserveAfterDate()
	return oiu
}

// SetCancelBackOrderDate sets the "cancel_back_order_date" field.
func (oiu *OrderItemUpdate) SetCancelBackOrderDate(t time.Time) *OrderItemUpdate {
	oiu.mutation.SetCancelBackOrderDate(t)
	return oiu
}

// SetNillableCancelBackOrderDate sets the "cancel_back_order_date" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableCancelBackOrderDate(t *time.Time) *OrderItemUpdate {
	if t != nil {
		oiu.SetCancelBackOrderDate(*t)
	}
	return oiu
}

// ClearCancelBackOrderDate clears the value of the "cancel_back_order_date" field.
func (oiu *OrderItemUpdate) ClearCancelBackOrderDate() *OrderItemUpdate {
	oiu.mutation.ClearCancelBackOrderDate()
	return oiu
}

// SetOverrideGlAccountID sets the "override_gl_account_id" field.
func (oiu *OrderItemUpdate) SetOverrideGlAccountID(i int) *OrderItemUpdate {
	oiu.mutation.ResetOverrideGlAccountID()
	oiu.mutation.SetOverrideGlAccountID(i)
	return oiu
}

// SetNillableOverrideGlAccountID sets the "override_gl_account_id" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableOverrideGlAccountID(i *int) *OrderItemUpdate {
	if i != nil {
		oiu.SetOverrideGlAccountID(*i)
	}
	return oiu
}

// AddOverrideGlAccountID adds i to the "override_gl_account_id" field.
func (oiu *OrderItemUpdate) AddOverrideGlAccountID(i int) *OrderItemUpdate {
	oiu.mutation.AddOverrideGlAccountID(i)
	return oiu
}

// ClearOverrideGlAccountID clears the value of the "override_gl_account_id" field.
func (oiu *OrderItemUpdate) ClearOverrideGlAccountID() *OrderItemUpdate {
	oiu.mutation.ClearOverrideGlAccountID()
	return oiu
}

// SetSalesOpportunityID sets the "sales_opportunity_id" field.
func (oiu *OrderItemUpdate) SetSalesOpportunityID(i int) *OrderItemUpdate {
	oiu.mutation.ResetSalesOpportunityID()
	oiu.mutation.SetSalesOpportunityID(i)
	return oiu
}

// SetNillableSalesOpportunityID sets the "sales_opportunity_id" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableSalesOpportunityID(i *int) *OrderItemUpdate {
	if i != nil {
		oiu.SetSalesOpportunityID(*i)
	}
	return oiu
}

// AddSalesOpportunityID adds i to the "sales_opportunity_id" field.
func (oiu *OrderItemUpdate) AddSalesOpportunityID(i int) *OrderItemUpdate {
	oiu.mutation.AddSalesOpportunityID(i)
	return oiu
}

// ClearSalesOpportunityID clears the value of the "sales_opportunity_id" field.
func (oiu *OrderItemUpdate) ClearSalesOpportunityID() *OrderItemUpdate {
	oiu.mutation.ClearSalesOpportunityID()
	return oiu
}

// SetChangeByUserLoginID sets the "change_by_user_login_id" field.
func (oiu *OrderItemUpdate) SetChangeByUserLoginID(s string) *OrderItemUpdate {
	oiu.mutation.SetChangeByUserLoginID(s)
	return oiu
}

// SetNillableChangeByUserLoginID sets the "change_by_user_login_id" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableChangeByUserLoginID(s *string) *OrderItemUpdate {
	if s != nil {
		oiu.SetChangeByUserLoginID(*s)
	}
	return oiu
}

// ClearChangeByUserLoginID clears the value of the "change_by_user_login_id" field.
func (oiu *OrderItemUpdate) ClearChangeByUserLoginID() *OrderItemUpdate {
	oiu.mutation.ClearChangeByUserLoginID()
	return oiu
}

// SetOrderHeaderID sets the "order_header" edge to the OrderHeader entity by ID.
func (oiu *OrderItemUpdate) SetOrderHeaderID(id int) *OrderItemUpdate {
	oiu.mutation.SetOrderHeaderID(id)
	return oiu
}

// SetNillableOrderHeaderID sets the "order_header" edge to the OrderHeader entity by ID if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableOrderHeaderID(id *int) *OrderItemUpdate {
	if id != nil {
		oiu = oiu.SetOrderHeaderID(*id)
	}
	return oiu
}

// SetOrderHeader sets the "order_header" edge to the OrderHeader entity.
func (oiu *OrderItemUpdate) SetOrderHeader(o *OrderHeader) *OrderItemUpdate {
	return oiu.SetOrderHeaderID(o.ID)
}

// AddItemIssuanceIDs adds the "item_issuances" edge to the ItemIssuance entity by IDs.
func (oiu *OrderItemUpdate) AddItemIssuanceIDs(ids ...int) *OrderItemUpdate {
	oiu.mutation.AddItemIssuanceIDs(ids...)
	return oiu
}

// AddItemIssuances adds the "item_issuances" edges to the ItemIssuance entity.
func (oiu *OrderItemUpdate) AddItemIssuances(i ...*ItemIssuance) *OrderItemUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return oiu.AddItemIssuanceIDs(ids...)
}

// AddOrderItemPriceInfoIDs adds the "order_item_price_infos" edge to the OrderItemPriceInfo entity by IDs.
func (oiu *OrderItemUpdate) AddOrderItemPriceInfoIDs(ids ...int) *OrderItemUpdate {
	oiu.mutation.AddOrderItemPriceInfoIDs(ids...)
	return oiu
}

// AddOrderItemPriceInfos adds the "order_item_price_infos" edges to the OrderItemPriceInfo entity.
func (oiu *OrderItemUpdate) AddOrderItemPriceInfos(o ...*OrderItemPriceInfo) *OrderItemUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oiu.AddOrderItemPriceInfoIDs(ids...)
}

// AddOrderItemShipGroupAssocIDs adds the "order_item_ship_group_assocs" edge to the OrderItemShipGroupAssoc entity by IDs.
func (oiu *OrderItemUpdate) AddOrderItemShipGroupAssocIDs(ids ...int) *OrderItemUpdate {
	oiu.mutation.AddOrderItemShipGroupAssocIDs(ids...)
	return oiu
}

// AddOrderItemShipGroupAssocs adds the "order_item_ship_group_assocs" edges to the OrderItemShipGroupAssoc entity.
func (oiu *OrderItemUpdate) AddOrderItemShipGroupAssocs(o ...*OrderItemShipGroupAssoc) *OrderItemUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oiu.AddOrderItemShipGroupAssocIDs(ids...)
}

// AddOrderStatusIDs adds the "order_statuses" edge to the OrderStatus entity by IDs.
func (oiu *OrderItemUpdate) AddOrderStatusIDs(ids ...int) *OrderItemUpdate {
	oiu.mutation.AddOrderStatusIDs(ids...)
	return oiu
}

// AddOrderStatuses adds the "order_statuses" edges to the OrderStatus entity.
func (oiu *OrderItemUpdate) AddOrderStatuses(o ...*OrderStatus) *OrderItemUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oiu.AddOrderStatusIDs(ids...)
}

// Mutation returns the OrderItemMutation object of the builder.
func (oiu *OrderItemUpdate) Mutation() *OrderItemMutation {
	return oiu.mutation
}

// ClearOrderHeader clears the "order_header" edge to the OrderHeader entity.
func (oiu *OrderItemUpdate) ClearOrderHeader() *OrderItemUpdate {
	oiu.mutation.ClearOrderHeader()
	return oiu
}

// ClearItemIssuances clears all "item_issuances" edges to the ItemIssuance entity.
func (oiu *OrderItemUpdate) ClearItemIssuances() *OrderItemUpdate {
	oiu.mutation.ClearItemIssuances()
	return oiu
}

// RemoveItemIssuanceIDs removes the "item_issuances" edge to ItemIssuance entities by IDs.
func (oiu *OrderItemUpdate) RemoveItemIssuanceIDs(ids ...int) *OrderItemUpdate {
	oiu.mutation.RemoveItemIssuanceIDs(ids...)
	return oiu
}

// RemoveItemIssuances removes "item_issuances" edges to ItemIssuance entities.
func (oiu *OrderItemUpdate) RemoveItemIssuances(i ...*ItemIssuance) *OrderItemUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return oiu.RemoveItemIssuanceIDs(ids...)
}

// ClearOrderItemPriceInfos clears all "order_item_price_infos" edges to the OrderItemPriceInfo entity.
func (oiu *OrderItemUpdate) ClearOrderItemPriceInfos() *OrderItemUpdate {
	oiu.mutation.ClearOrderItemPriceInfos()
	return oiu
}

// RemoveOrderItemPriceInfoIDs removes the "order_item_price_infos" edge to OrderItemPriceInfo entities by IDs.
func (oiu *OrderItemUpdate) RemoveOrderItemPriceInfoIDs(ids ...int) *OrderItemUpdate {
	oiu.mutation.RemoveOrderItemPriceInfoIDs(ids...)
	return oiu
}

// RemoveOrderItemPriceInfos removes "order_item_price_infos" edges to OrderItemPriceInfo entities.
func (oiu *OrderItemUpdate) RemoveOrderItemPriceInfos(o ...*OrderItemPriceInfo) *OrderItemUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oiu.RemoveOrderItemPriceInfoIDs(ids...)
}

// ClearOrderItemShipGroupAssocs clears all "order_item_ship_group_assocs" edges to the OrderItemShipGroupAssoc entity.
func (oiu *OrderItemUpdate) ClearOrderItemShipGroupAssocs() *OrderItemUpdate {
	oiu.mutation.ClearOrderItemShipGroupAssocs()
	return oiu
}

// RemoveOrderItemShipGroupAssocIDs removes the "order_item_ship_group_assocs" edge to OrderItemShipGroupAssoc entities by IDs.
func (oiu *OrderItemUpdate) RemoveOrderItemShipGroupAssocIDs(ids ...int) *OrderItemUpdate {
	oiu.mutation.RemoveOrderItemShipGroupAssocIDs(ids...)
	return oiu
}

// RemoveOrderItemShipGroupAssocs removes "order_item_ship_group_assocs" edges to OrderItemShipGroupAssoc entities.
func (oiu *OrderItemUpdate) RemoveOrderItemShipGroupAssocs(o ...*OrderItemShipGroupAssoc) *OrderItemUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oiu.RemoveOrderItemShipGroupAssocIDs(ids...)
}

// ClearOrderStatuses clears all "order_statuses" edges to the OrderStatus entity.
func (oiu *OrderItemUpdate) ClearOrderStatuses() *OrderItemUpdate {
	oiu.mutation.ClearOrderStatuses()
	return oiu
}

// RemoveOrderStatusIDs removes the "order_statuses" edge to OrderStatus entities by IDs.
func (oiu *OrderItemUpdate) RemoveOrderStatusIDs(ids ...int) *OrderItemUpdate {
	oiu.mutation.RemoveOrderStatusIDs(ids...)
	return oiu
}

// RemoveOrderStatuses removes "order_statuses" edges to OrderStatus entities.
func (oiu *OrderItemUpdate) RemoveOrderStatuses(o ...*OrderStatus) *OrderItemUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oiu.RemoveOrderStatusIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (oiu *OrderItemUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	oiu.defaults()
	if len(oiu.hooks) == 0 {
		if err = oiu.check(); err != nil {
			return 0, err
		}
		affected, err = oiu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderItemMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = oiu.check(); err != nil {
				return 0, err
			}
			oiu.mutation = mutation
			affected, err = oiu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(oiu.hooks) - 1; i >= 0; i-- {
			mut = oiu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, oiu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (oiu *OrderItemUpdate) SaveX(ctx context.Context) int {
	affected, err := oiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (oiu *OrderItemUpdate) Exec(ctx context.Context) error {
	_, err := oiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oiu *OrderItemUpdate) ExecX(ctx context.Context) {
	if err := oiu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oiu *OrderItemUpdate) defaults() {
	if _, ok := oiu.mutation.UpdateTime(); !ok {
		v := orderitem.UpdateDefaultUpdateTime()
		oiu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oiu *OrderItemUpdate) check() error {
	if v, ok := oiu.mutation.IsItemGroupPrimary(); ok {
		if err := orderitem.IsItemGroupPrimaryValidator(v); err != nil {
			return &ValidationError{Name: "is_item_group_primary", err: fmt.Errorf("ent: validator failed for field \"is_item_group_primary\": %w", err)}
		}
	}
	if v, ok := oiu.mutation.SupplierProductID(); ok {
		if err := orderitem.SupplierProductIDValidator(v); err != nil {
			return &ValidationError{Name: "supplier_product_id", err: fmt.Errorf("ent: validator failed for field \"supplier_product_id\": %w", err)}
		}
	}
	if v, ok := oiu.mutation.IsPromo(); ok {
		if err := orderitem.IsPromoValidator(v); err != nil {
			return &ValidationError{Name: "is_promo", err: fmt.Errorf("ent: validator failed for field \"is_promo\": %w", err)}
		}
	}
	if v, ok := oiu.mutation.IsModifiedPrice(); ok {
		if err := orderitem.IsModifiedPriceValidator(v); err != nil {
			return &ValidationError{Name: "is_modified_price", err: fmt.Errorf("ent: validator failed for field \"is_modified_price\": %w", err)}
		}
	}
	return nil
}

func (oiu *OrderItemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   orderitem.Table,
			Columns: orderitem.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: orderitem.FieldID,
			},
		},
	}
	if ps := oiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oiu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderitem.FieldUpdateTime,
		})
	}
	if value, ok := oiu.mutation.OrderItemSeqID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldOrderItemSeqID,
		})
	}
	if value, ok := oiu.mutation.AddedOrderItemSeqID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldOrderItemSeqID,
		})
	}
	if value, ok := oiu.mutation.ExternalID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldExternalID,
		})
	}
	if value, ok := oiu.mutation.AddedExternalID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldExternalID,
		})
	}
	if oiu.mutation.ExternalIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderitem.FieldExternalID,
		})
	}
	if value, ok := oiu.mutation.OrderItemTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldOrderItemTypeID,
		})
	}
	if value, ok := oiu.mutation.AddedOrderItemTypeID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldOrderItemTypeID,
		})
	}
	if oiu.mutation.OrderItemTypeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderitem.FieldOrderItemTypeID,
		})
	}
	if value, ok := oiu.mutation.OrderItemGroupSeqID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldOrderItemGroupSeqID,
		})
	}
	if value, ok := oiu.mutation.AddedOrderItemGroupSeqID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldOrderItemGroupSeqID,
		})
	}
	if oiu.mutation.OrderItemGroupSeqIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderitem.FieldOrderItemGroupSeqID,
		})
	}
	if value, ok := oiu.mutation.IsItemGroupPrimary(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: orderitem.FieldIsItemGroupPrimary,
		})
	}
	if oiu.mutation.IsItemGroupPrimaryCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: orderitem.FieldIsItemGroupPrimary,
		})
	}
	if value, ok := oiu.mutation.FromInventoryItemID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldFromInventoryItemID,
		})
	}
	if value, ok := oiu.mutation.AddedFromInventoryItemID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldFromInventoryItemID,
		})
	}
	if oiu.mutation.FromInventoryItemIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderitem.FieldFromInventoryItemID,
		})
	}
	if value, ok := oiu.mutation.BudgetID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldBudgetID,
		})
	}
	if value, ok := oiu.mutation.AddedBudgetID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldBudgetID,
		})
	}
	if oiu.mutation.BudgetIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderitem.FieldBudgetID,
		})
	}
	if value, ok := oiu.mutation.BudgetItemSeqID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldBudgetItemSeqID,
		})
	}
	if value, ok := oiu.mutation.AddedBudgetItemSeqID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldBudgetItemSeqID,
		})
	}
	if oiu.mutation.BudgetItemSeqIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderitem.FieldBudgetItemSeqID,
		})
	}
	if value, ok := oiu.mutation.ProductID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldProductID,
		})
	}
	if value, ok := oiu.mutation.AddedProductID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldProductID,
		})
	}
	if oiu.mutation.ProductIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderitem.FieldProductID,
		})
	}
	if value, ok := oiu.mutation.SupplierProductID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderitem.FieldSupplierProductID,
		})
	}
	if oiu.mutation.SupplierProductIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: orderitem.FieldSupplierProductID,
		})
	}
	if value, ok := oiu.mutation.ProductFeatureID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldProductFeatureID,
		})
	}
	if value, ok := oiu.mutation.AddedProductFeatureID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldProductFeatureID,
		})
	}
	if oiu.mutation.ProductFeatureIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderitem.FieldProductFeatureID,
		})
	}
	if value, ok := oiu.mutation.ProdCatalogID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldProdCatalogID,
		})
	}
	if value, ok := oiu.mutation.AddedProdCatalogID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldProdCatalogID,
		})
	}
	if oiu.mutation.ProdCatalogIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderitem.FieldProdCatalogID,
		})
	}
	if value, ok := oiu.mutation.ProductCategoryID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldProductCategoryID,
		})
	}
	if value, ok := oiu.mutation.AddedProductCategoryID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldProductCategoryID,
		})
	}
	if oiu.mutation.ProductCategoryIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderitem.FieldProductCategoryID,
		})
	}
	if value, ok := oiu.mutation.IsPromo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: orderitem.FieldIsPromo,
		})
	}
	if oiu.mutation.IsPromoCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: orderitem.FieldIsPromo,
		})
	}
	if value, ok := oiu.mutation.QuoteID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldQuoteID,
		})
	}
	if value, ok := oiu.mutation.AddedQuoteID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldQuoteID,
		})
	}
	if oiu.mutation.QuoteIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderitem.FieldQuoteID,
		})
	}
	if value, ok := oiu.mutation.QuoteItemSeqID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldQuoteItemSeqID,
		})
	}
	if value, ok := oiu.mutation.AddedQuoteItemSeqID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldQuoteItemSeqID,
		})
	}
	if oiu.mutation.QuoteItemSeqIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderitem.FieldQuoteItemSeqID,
		})
	}
	if value, ok := oiu.mutation.ShoppingListID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldShoppingListID,
		})
	}
	if value, ok := oiu.mutation.AddedShoppingListID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldShoppingListID,
		})
	}
	if oiu.mutation.ShoppingListIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderitem.FieldShoppingListID,
		})
	}
	if value, ok := oiu.mutation.ShoppingListItemSeqID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldShoppingListItemSeqID,
		})
	}
	if value, ok := oiu.mutation.AddedShoppingListItemSeqID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldShoppingListItemSeqID,
		})
	}
	if oiu.mutation.ShoppingListItemSeqIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderitem.FieldShoppingListItemSeqID,
		})
	}
	if value, ok := oiu.mutation.SubscriptionID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldSubscriptionID,
		})
	}
	if value, ok := oiu.mutation.AddedSubscriptionID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldSubscriptionID,
		})
	}
	if oiu.mutation.SubscriptionIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderitem.FieldSubscriptionID,
		})
	}
	if value, ok := oiu.mutation.DeploymentID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldDeploymentID,
		})
	}
	if value, ok := oiu.mutation.AddedDeploymentID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldDeploymentID,
		})
	}
	if oiu.mutation.DeploymentIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderitem.FieldDeploymentID,
		})
	}
	if value, ok := oiu.mutation.Quantity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderitem.FieldQuantity,
		})
	}
	if value, ok := oiu.mutation.AddedQuantity(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderitem.FieldQuantity,
		})
	}
	if oiu.mutation.QuantityCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: orderitem.FieldQuantity,
		})
	}
	if value, ok := oiu.mutation.CancelQuantity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderitem.FieldCancelQuantity,
		})
	}
	if value, ok := oiu.mutation.AddedCancelQuantity(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderitem.FieldCancelQuantity,
		})
	}
	if oiu.mutation.CancelQuantityCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: orderitem.FieldCancelQuantity,
		})
	}
	if value, ok := oiu.mutation.SelectedAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderitem.FieldSelectedAmount,
		})
	}
	if value, ok := oiu.mutation.AddedSelectedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderitem.FieldSelectedAmount,
		})
	}
	if oiu.mutation.SelectedAmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: orderitem.FieldSelectedAmount,
		})
	}
	if value, ok := oiu.mutation.UnitPrice(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderitem.FieldUnitPrice,
		})
	}
	if value, ok := oiu.mutation.AddedUnitPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderitem.FieldUnitPrice,
		})
	}
	if oiu.mutation.UnitPriceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: orderitem.FieldUnitPrice,
		})
	}
	if value, ok := oiu.mutation.UnitListPrice(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderitem.FieldUnitListPrice,
		})
	}
	if value, ok := oiu.mutation.AddedUnitListPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderitem.FieldUnitListPrice,
		})
	}
	if oiu.mutation.UnitListPriceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: orderitem.FieldUnitListPrice,
		})
	}
	if value, ok := oiu.mutation.UnitAverageCost(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderitem.FieldUnitAverageCost,
		})
	}
	if value, ok := oiu.mutation.AddedUnitAverageCost(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderitem.FieldUnitAverageCost,
		})
	}
	if oiu.mutation.UnitAverageCostCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: orderitem.FieldUnitAverageCost,
		})
	}
	if value, ok := oiu.mutation.UnitRecurringPrice(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderitem.FieldUnitRecurringPrice,
		})
	}
	if value, ok := oiu.mutation.AddedUnitRecurringPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderitem.FieldUnitRecurringPrice,
		})
	}
	if oiu.mutation.UnitRecurringPriceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: orderitem.FieldUnitRecurringPrice,
		})
	}
	if value, ok := oiu.mutation.IsModifiedPrice(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: orderitem.FieldIsModifiedPrice,
		})
	}
	if oiu.mutation.IsModifiedPriceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: orderitem.FieldIsModifiedPrice,
		})
	}
	if value, ok := oiu.mutation.RecurringFreqUomID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldRecurringFreqUomID,
		})
	}
	if value, ok := oiu.mutation.AddedRecurringFreqUomID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldRecurringFreqUomID,
		})
	}
	if oiu.mutation.RecurringFreqUomIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderitem.FieldRecurringFreqUomID,
		})
	}
	if value, ok := oiu.mutation.ItemDescription(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderitem.FieldItemDescription,
		})
	}
	if oiu.mutation.ItemDescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: orderitem.FieldItemDescription,
		})
	}
	if value, ok := oiu.mutation.Comments(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderitem.FieldComments,
		})
	}
	if oiu.mutation.CommentsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: orderitem.FieldComments,
		})
	}
	if value, ok := oiu.mutation.CorrespondingPoID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldCorrespondingPoID,
		})
	}
	if value, ok := oiu.mutation.AddedCorrespondingPoID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldCorrespondingPoID,
		})
	}
	if oiu.mutation.CorrespondingPoIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderitem.FieldCorrespondingPoID,
		})
	}
	if value, ok := oiu.mutation.StatusID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldStatusID,
		})
	}
	if value, ok := oiu.mutation.AddedStatusID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldStatusID,
		})
	}
	if oiu.mutation.StatusIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderitem.FieldStatusID,
		})
	}
	if value, ok := oiu.mutation.SyncStatusID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldSyncStatusID,
		})
	}
	if value, ok := oiu.mutation.AddedSyncStatusID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldSyncStatusID,
		})
	}
	if oiu.mutation.SyncStatusIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderitem.FieldSyncStatusID,
		})
	}
	if value, ok := oiu.mutation.EstimatedShipDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderitem.FieldEstimatedShipDate,
		})
	}
	if oiu.mutation.EstimatedShipDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: orderitem.FieldEstimatedShipDate,
		})
	}
	if value, ok := oiu.mutation.EstimatedDeliveryDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderitem.FieldEstimatedDeliveryDate,
		})
	}
	if oiu.mutation.EstimatedDeliveryDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: orderitem.FieldEstimatedDeliveryDate,
		})
	}
	if value, ok := oiu.mutation.AutoCancelDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderitem.FieldAutoCancelDate,
		})
	}
	if oiu.mutation.AutoCancelDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: orderitem.FieldAutoCancelDate,
		})
	}
	if value, ok := oiu.mutation.DontCancelSetDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderitem.FieldDontCancelSetDate,
		})
	}
	if oiu.mutation.DontCancelSetDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: orderitem.FieldDontCancelSetDate,
		})
	}
	if value, ok := oiu.mutation.DontCancelSetUserLogin(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderitem.FieldDontCancelSetUserLogin,
		})
	}
	if oiu.mutation.DontCancelSetUserLoginCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: orderitem.FieldDontCancelSetUserLogin,
		})
	}
	if value, ok := oiu.mutation.ShipBeforeDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderitem.FieldShipBeforeDate,
		})
	}
	if oiu.mutation.ShipBeforeDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: orderitem.FieldShipBeforeDate,
		})
	}
	if value, ok := oiu.mutation.ShipAfterDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderitem.FieldShipAfterDate,
		})
	}
	if oiu.mutation.ShipAfterDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: orderitem.FieldShipAfterDate,
		})
	}
	if value, ok := oiu.mutation.ReserveAfterDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderitem.FieldReserveAfterDate,
		})
	}
	if oiu.mutation.ReserveAfterDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: orderitem.FieldReserveAfterDate,
		})
	}
	if value, ok := oiu.mutation.CancelBackOrderDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderitem.FieldCancelBackOrderDate,
		})
	}
	if oiu.mutation.CancelBackOrderDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: orderitem.FieldCancelBackOrderDate,
		})
	}
	if value, ok := oiu.mutation.OverrideGlAccountID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldOverrideGlAccountID,
		})
	}
	if value, ok := oiu.mutation.AddedOverrideGlAccountID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldOverrideGlAccountID,
		})
	}
	if oiu.mutation.OverrideGlAccountIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderitem.FieldOverrideGlAccountID,
		})
	}
	if value, ok := oiu.mutation.SalesOpportunityID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldSalesOpportunityID,
		})
	}
	if value, ok := oiu.mutation.AddedSalesOpportunityID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldSalesOpportunityID,
		})
	}
	if oiu.mutation.SalesOpportunityIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderitem.FieldSalesOpportunityID,
		})
	}
	if value, ok := oiu.mutation.ChangeByUserLoginID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderitem.FieldChangeByUserLoginID,
		})
	}
	if oiu.mutation.ChangeByUserLoginIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: orderitem.FieldChangeByUserLoginID,
		})
	}
	if oiu.mutation.OrderHeaderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderitem.OrderHeaderTable,
			Columns: []string{orderitem.OrderHeaderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderheader.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oiu.mutation.OrderHeaderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderitem.OrderHeaderTable,
			Columns: []string{orderitem.OrderHeaderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderheader.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oiu.mutation.ItemIssuancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderitem.ItemIssuancesTable,
			Columns: []string{orderitem.ItemIssuancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: itemissuance.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oiu.mutation.RemovedItemIssuancesIDs(); len(nodes) > 0 && !oiu.mutation.ItemIssuancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderitem.ItemIssuancesTable,
			Columns: []string{orderitem.ItemIssuancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: itemissuance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oiu.mutation.ItemIssuancesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderitem.ItemIssuancesTable,
			Columns: []string{orderitem.ItemIssuancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: itemissuance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oiu.mutation.OrderItemPriceInfosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderitem.OrderItemPriceInfosTable,
			Columns: []string{orderitem.OrderItemPriceInfosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitempriceinfo.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oiu.mutation.RemovedOrderItemPriceInfosIDs(); len(nodes) > 0 && !oiu.mutation.OrderItemPriceInfosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderitem.OrderItemPriceInfosTable,
			Columns: []string{orderitem.OrderItemPriceInfosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitempriceinfo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oiu.mutation.OrderItemPriceInfosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderitem.OrderItemPriceInfosTable,
			Columns: []string{orderitem.OrderItemPriceInfosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitempriceinfo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oiu.mutation.OrderItemShipGroupAssocsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderitem.OrderItemShipGroupAssocsTable,
			Columns: []string{orderitem.OrderItemShipGroupAssocsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitemshipgroupassoc.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oiu.mutation.RemovedOrderItemShipGroupAssocsIDs(); len(nodes) > 0 && !oiu.mutation.OrderItemShipGroupAssocsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderitem.OrderItemShipGroupAssocsTable,
			Columns: []string{orderitem.OrderItemShipGroupAssocsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitemshipgroupassoc.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oiu.mutation.OrderItemShipGroupAssocsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderitem.OrderItemShipGroupAssocsTable,
			Columns: []string{orderitem.OrderItemShipGroupAssocsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitemshipgroupassoc.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oiu.mutation.OrderStatusesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderitem.OrderStatusesTable,
			Columns: []string{orderitem.OrderStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderstatus.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oiu.mutation.RemovedOrderStatusesIDs(); len(nodes) > 0 && !oiu.mutation.OrderStatusesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderitem.OrderStatusesTable,
			Columns: []string{orderitem.OrderStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderstatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oiu.mutation.OrderStatusesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderitem.OrderStatusesTable,
			Columns: []string{orderitem.OrderStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderstatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, oiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderitem.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// OrderItemUpdateOne is the builder for updating a single OrderItem entity.
type OrderItemUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrderItemMutation
}

// SetOrderItemSeqID sets the "order_item_seq_id" field.
func (oiuo *OrderItemUpdateOne) SetOrderItemSeqID(i int) *OrderItemUpdateOne {
	oiuo.mutation.ResetOrderItemSeqID()
	oiuo.mutation.SetOrderItemSeqID(i)
	return oiuo
}

// AddOrderItemSeqID adds i to the "order_item_seq_id" field.
func (oiuo *OrderItemUpdateOne) AddOrderItemSeqID(i int) *OrderItemUpdateOne {
	oiuo.mutation.AddOrderItemSeqID(i)
	return oiuo
}

// SetExternalID sets the "external_id" field.
func (oiuo *OrderItemUpdateOne) SetExternalID(i int) *OrderItemUpdateOne {
	oiuo.mutation.ResetExternalID()
	oiuo.mutation.SetExternalID(i)
	return oiuo
}

// SetNillableExternalID sets the "external_id" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableExternalID(i *int) *OrderItemUpdateOne {
	if i != nil {
		oiuo.SetExternalID(*i)
	}
	return oiuo
}

// AddExternalID adds i to the "external_id" field.
func (oiuo *OrderItemUpdateOne) AddExternalID(i int) *OrderItemUpdateOne {
	oiuo.mutation.AddExternalID(i)
	return oiuo
}

// ClearExternalID clears the value of the "external_id" field.
func (oiuo *OrderItemUpdateOne) ClearExternalID() *OrderItemUpdateOne {
	oiuo.mutation.ClearExternalID()
	return oiuo
}

// SetOrderItemTypeID sets the "order_item_type_id" field.
func (oiuo *OrderItemUpdateOne) SetOrderItemTypeID(i int) *OrderItemUpdateOne {
	oiuo.mutation.ResetOrderItemTypeID()
	oiuo.mutation.SetOrderItemTypeID(i)
	return oiuo
}

// SetNillableOrderItemTypeID sets the "order_item_type_id" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableOrderItemTypeID(i *int) *OrderItemUpdateOne {
	if i != nil {
		oiuo.SetOrderItemTypeID(*i)
	}
	return oiuo
}

// AddOrderItemTypeID adds i to the "order_item_type_id" field.
func (oiuo *OrderItemUpdateOne) AddOrderItemTypeID(i int) *OrderItemUpdateOne {
	oiuo.mutation.AddOrderItemTypeID(i)
	return oiuo
}

// ClearOrderItemTypeID clears the value of the "order_item_type_id" field.
func (oiuo *OrderItemUpdateOne) ClearOrderItemTypeID() *OrderItemUpdateOne {
	oiuo.mutation.ClearOrderItemTypeID()
	return oiuo
}

// SetOrderItemGroupSeqID sets the "order_item_group_seq_id" field.
func (oiuo *OrderItemUpdateOne) SetOrderItemGroupSeqID(i int) *OrderItemUpdateOne {
	oiuo.mutation.ResetOrderItemGroupSeqID()
	oiuo.mutation.SetOrderItemGroupSeqID(i)
	return oiuo
}

// SetNillableOrderItemGroupSeqID sets the "order_item_group_seq_id" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableOrderItemGroupSeqID(i *int) *OrderItemUpdateOne {
	if i != nil {
		oiuo.SetOrderItemGroupSeqID(*i)
	}
	return oiuo
}

// AddOrderItemGroupSeqID adds i to the "order_item_group_seq_id" field.
func (oiuo *OrderItemUpdateOne) AddOrderItemGroupSeqID(i int) *OrderItemUpdateOne {
	oiuo.mutation.AddOrderItemGroupSeqID(i)
	return oiuo
}

// ClearOrderItemGroupSeqID clears the value of the "order_item_group_seq_id" field.
func (oiuo *OrderItemUpdateOne) ClearOrderItemGroupSeqID() *OrderItemUpdateOne {
	oiuo.mutation.ClearOrderItemGroupSeqID()
	return oiuo
}

// SetIsItemGroupPrimary sets the "is_item_group_primary" field.
func (oiuo *OrderItemUpdateOne) SetIsItemGroupPrimary(oigp orderitem.IsItemGroupPrimary) *OrderItemUpdateOne {
	oiuo.mutation.SetIsItemGroupPrimary(oigp)
	return oiuo
}

// SetNillableIsItemGroupPrimary sets the "is_item_group_primary" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableIsItemGroupPrimary(oigp *orderitem.IsItemGroupPrimary) *OrderItemUpdateOne {
	if oigp != nil {
		oiuo.SetIsItemGroupPrimary(*oigp)
	}
	return oiuo
}

// ClearIsItemGroupPrimary clears the value of the "is_item_group_primary" field.
func (oiuo *OrderItemUpdateOne) ClearIsItemGroupPrimary() *OrderItemUpdateOne {
	oiuo.mutation.ClearIsItemGroupPrimary()
	return oiuo
}

// SetFromInventoryItemID sets the "from_inventory_item_id" field.
func (oiuo *OrderItemUpdateOne) SetFromInventoryItemID(i int) *OrderItemUpdateOne {
	oiuo.mutation.ResetFromInventoryItemID()
	oiuo.mutation.SetFromInventoryItemID(i)
	return oiuo
}

// SetNillableFromInventoryItemID sets the "from_inventory_item_id" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableFromInventoryItemID(i *int) *OrderItemUpdateOne {
	if i != nil {
		oiuo.SetFromInventoryItemID(*i)
	}
	return oiuo
}

// AddFromInventoryItemID adds i to the "from_inventory_item_id" field.
func (oiuo *OrderItemUpdateOne) AddFromInventoryItemID(i int) *OrderItemUpdateOne {
	oiuo.mutation.AddFromInventoryItemID(i)
	return oiuo
}

// ClearFromInventoryItemID clears the value of the "from_inventory_item_id" field.
func (oiuo *OrderItemUpdateOne) ClearFromInventoryItemID() *OrderItemUpdateOne {
	oiuo.mutation.ClearFromInventoryItemID()
	return oiuo
}

// SetBudgetID sets the "budget_id" field.
func (oiuo *OrderItemUpdateOne) SetBudgetID(i int) *OrderItemUpdateOne {
	oiuo.mutation.ResetBudgetID()
	oiuo.mutation.SetBudgetID(i)
	return oiuo
}

// SetNillableBudgetID sets the "budget_id" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableBudgetID(i *int) *OrderItemUpdateOne {
	if i != nil {
		oiuo.SetBudgetID(*i)
	}
	return oiuo
}

// AddBudgetID adds i to the "budget_id" field.
func (oiuo *OrderItemUpdateOne) AddBudgetID(i int) *OrderItemUpdateOne {
	oiuo.mutation.AddBudgetID(i)
	return oiuo
}

// ClearBudgetID clears the value of the "budget_id" field.
func (oiuo *OrderItemUpdateOne) ClearBudgetID() *OrderItemUpdateOne {
	oiuo.mutation.ClearBudgetID()
	return oiuo
}

// SetBudgetItemSeqID sets the "budget_item_seq_id" field.
func (oiuo *OrderItemUpdateOne) SetBudgetItemSeqID(i int) *OrderItemUpdateOne {
	oiuo.mutation.ResetBudgetItemSeqID()
	oiuo.mutation.SetBudgetItemSeqID(i)
	return oiuo
}

// SetNillableBudgetItemSeqID sets the "budget_item_seq_id" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableBudgetItemSeqID(i *int) *OrderItemUpdateOne {
	if i != nil {
		oiuo.SetBudgetItemSeqID(*i)
	}
	return oiuo
}

// AddBudgetItemSeqID adds i to the "budget_item_seq_id" field.
func (oiuo *OrderItemUpdateOne) AddBudgetItemSeqID(i int) *OrderItemUpdateOne {
	oiuo.mutation.AddBudgetItemSeqID(i)
	return oiuo
}

// ClearBudgetItemSeqID clears the value of the "budget_item_seq_id" field.
func (oiuo *OrderItemUpdateOne) ClearBudgetItemSeqID() *OrderItemUpdateOne {
	oiuo.mutation.ClearBudgetItemSeqID()
	return oiuo
}

// SetProductID sets the "product_id" field.
func (oiuo *OrderItemUpdateOne) SetProductID(i int) *OrderItemUpdateOne {
	oiuo.mutation.ResetProductID()
	oiuo.mutation.SetProductID(i)
	return oiuo
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableProductID(i *int) *OrderItemUpdateOne {
	if i != nil {
		oiuo.SetProductID(*i)
	}
	return oiuo
}

// AddProductID adds i to the "product_id" field.
func (oiuo *OrderItemUpdateOne) AddProductID(i int) *OrderItemUpdateOne {
	oiuo.mutation.AddProductID(i)
	return oiuo
}

// ClearProductID clears the value of the "product_id" field.
func (oiuo *OrderItemUpdateOne) ClearProductID() *OrderItemUpdateOne {
	oiuo.mutation.ClearProductID()
	return oiuo
}

// SetSupplierProductID sets the "supplier_product_id" field.
func (oiuo *OrderItemUpdateOne) SetSupplierProductID(s string) *OrderItemUpdateOne {
	oiuo.mutation.SetSupplierProductID(s)
	return oiuo
}

// SetNillableSupplierProductID sets the "supplier_product_id" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableSupplierProductID(s *string) *OrderItemUpdateOne {
	if s != nil {
		oiuo.SetSupplierProductID(*s)
	}
	return oiuo
}

// ClearSupplierProductID clears the value of the "supplier_product_id" field.
func (oiuo *OrderItemUpdateOne) ClearSupplierProductID() *OrderItemUpdateOne {
	oiuo.mutation.ClearSupplierProductID()
	return oiuo
}

// SetProductFeatureID sets the "product_feature_id" field.
func (oiuo *OrderItemUpdateOne) SetProductFeatureID(i int) *OrderItemUpdateOne {
	oiuo.mutation.ResetProductFeatureID()
	oiuo.mutation.SetProductFeatureID(i)
	return oiuo
}

// SetNillableProductFeatureID sets the "product_feature_id" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableProductFeatureID(i *int) *OrderItemUpdateOne {
	if i != nil {
		oiuo.SetProductFeatureID(*i)
	}
	return oiuo
}

// AddProductFeatureID adds i to the "product_feature_id" field.
func (oiuo *OrderItemUpdateOne) AddProductFeatureID(i int) *OrderItemUpdateOne {
	oiuo.mutation.AddProductFeatureID(i)
	return oiuo
}

// ClearProductFeatureID clears the value of the "product_feature_id" field.
func (oiuo *OrderItemUpdateOne) ClearProductFeatureID() *OrderItemUpdateOne {
	oiuo.mutation.ClearProductFeatureID()
	return oiuo
}

// SetProdCatalogID sets the "prod_catalog_id" field.
func (oiuo *OrderItemUpdateOne) SetProdCatalogID(i int) *OrderItemUpdateOne {
	oiuo.mutation.ResetProdCatalogID()
	oiuo.mutation.SetProdCatalogID(i)
	return oiuo
}

// SetNillableProdCatalogID sets the "prod_catalog_id" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableProdCatalogID(i *int) *OrderItemUpdateOne {
	if i != nil {
		oiuo.SetProdCatalogID(*i)
	}
	return oiuo
}

// AddProdCatalogID adds i to the "prod_catalog_id" field.
func (oiuo *OrderItemUpdateOne) AddProdCatalogID(i int) *OrderItemUpdateOne {
	oiuo.mutation.AddProdCatalogID(i)
	return oiuo
}

// ClearProdCatalogID clears the value of the "prod_catalog_id" field.
func (oiuo *OrderItemUpdateOne) ClearProdCatalogID() *OrderItemUpdateOne {
	oiuo.mutation.ClearProdCatalogID()
	return oiuo
}

// SetProductCategoryID sets the "product_category_id" field.
func (oiuo *OrderItemUpdateOne) SetProductCategoryID(i int) *OrderItemUpdateOne {
	oiuo.mutation.ResetProductCategoryID()
	oiuo.mutation.SetProductCategoryID(i)
	return oiuo
}

// SetNillableProductCategoryID sets the "product_category_id" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableProductCategoryID(i *int) *OrderItemUpdateOne {
	if i != nil {
		oiuo.SetProductCategoryID(*i)
	}
	return oiuo
}

// AddProductCategoryID adds i to the "product_category_id" field.
func (oiuo *OrderItemUpdateOne) AddProductCategoryID(i int) *OrderItemUpdateOne {
	oiuo.mutation.AddProductCategoryID(i)
	return oiuo
}

// ClearProductCategoryID clears the value of the "product_category_id" field.
func (oiuo *OrderItemUpdateOne) ClearProductCategoryID() *OrderItemUpdateOne {
	oiuo.mutation.ClearProductCategoryID()
	return oiuo
}

// SetIsPromo sets the "is_promo" field.
func (oiuo *OrderItemUpdateOne) SetIsPromo(op orderitem.IsPromo) *OrderItemUpdateOne {
	oiuo.mutation.SetIsPromo(op)
	return oiuo
}

// SetNillableIsPromo sets the "is_promo" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableIsPromo(op *orderitem.IsPromo) *OrderItemUpdateOne {
	if op != nil {
		oiuo.SetIsPromo(*op)
	}
	return oiuo
}

// ClearIsPromo clears the value of the "is_promo" field.
func (oiuo *OrderItemUpdateOne) ClearIsPromo() *OrderItemUpdateOne {
	oiuo.mutation.ClearIsPromo()
	return oiuo
}

// SetQuoteID sets the "quote_id" field.
func (oiuo *OrderItemUpdateOne) SetQuoteID(i int) *OrderItemUpdateOne {
	oiuo.mutation.ResetQuoteID()
	oiuo.mutation.SetQuoteID(i)
	return oiuo
}

// SetNillableQuoteID sets the "quote_id" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableQuoteID(i *int) *OrderItemUpdateOne {
	if i != nil {
		oiuo.SetQuoteID(*i)
	}
	return oiuo
}

// AddQuoteID adds i to the "quote_id" field.
func (oiuo *OrderItemUpdateOne) AddQuoteID(i int) *OrderItemUpdateOne {
	oiuo.mutation.AddQuoteID(i)
	return oiuo
}

// ClearQuoteID clears the value of the "quote_id" field.
func (oiuo *OrderItemUpdateOne) ClearQuoteID() *OrderItemUpdateOne {
	oiuo.mutation.ClearQuoteID()
	return oiuo
}

// SetQuoteItemSeqID sets the "quote_item_seq_id" field.
func (oiuo *OrderItemUpdateOne) SetQuoteItemSeqID(i int) *OrderItemUpdateOne {
	oiuo.mutation.ResetQuoteItemSeqID()
	oiuo.mutation.SetQuoteItemSeqID(i)
	return oiuo
}

// SetNillableQuoteItemSeqID sets the "quote_item_seq_id" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableQuoteItemSeqID(i *int) *OrderItemUpdateOne {
	if i != nil {
		oiuo.SetQuoteItemSeqID(*i)
	}
	return oiuo
}

// AddQuoteItemSeqID adds i to the "quote_item_seq_id" field.
func (oiuo *OrderItemUpdateOne) AddQuoteItemSeqID(i int) *OrderItemUpdateOne {
	oiuo.mutation.AddQuoteItemSeqID(i)
	return oiuo
}

// ClearQuoteItemSeqID clears the value of the "quote_item_seq_id" field.
func (oiuo *OrderItemUpdateOne) ClearQuoteItemSeqID() *OrderItemUpdateOne {
	oiuo.mutation.ClearQuoteItemSeqID()
	return oiuo
}

// SetShoppingListID sets the "shopping_list_id" field.
func (oiuo *OrderItemUpdateOne) SetShoppingListID(i int) *OrderItemUpdateOne {
	oiuo.mutation.ResetShoppingListID()
	oiuo.mutation.SetShoppingListID(i)
	return oiuo
}

// SetNillableShoppingListID sets the "shopping_list_id" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableShoppingListID(i *int) *OrderItemUpdateOne {
	if i != nil {
		oiuo.SetShoppingListID(*i)
	}
	return oiuo
}

// AddShoppingListID adds i to the "shopping_list_id" field.
func (oiuo *OrderItemUpdateOne) AddShoppingListID(i int) *OrderItemUpdateOne {
	oiuo.mutation.AddShoppingListID(i)
	return oiuo
}

// ClearShoppingListID clears the value of the "shopping_list_id" field.
func (oiuo *OrderItemUpdateOne) ClearShoppingListID() *OrderItemUpdateOne {
	oiuo.mutation.ClearShoppingListID()
	return oiuo
}

// SetShoppingListItemSeqID sets the "shopping_list_item_seq_id" field.
func (oiuo *OrderItemUpdateOne) SetShoppingListItemSeqID(i int) *OrderItemUpdateOne {
	oiuo.mutation.ResetShoppingListItemSeqID()
	oiuo.mutation.SetShoppingListItemSeqID(i)
	return oiuo
}

// SetNillableShoppingListItemSeqID sets the "shopping_list_item_seq_id" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableShoppingListItemSeqID(i *int) *OrderItemUpdateOne {
	if i != nil {
		oiuo.SetShoppingListItemSeqID(*i)
	}
	return oiuo
}

// AddShoppingListItemSeqID adds i to the "shopping_list_item_seq_id" field.
func (oiuo *OrderItemUpdateOne) AddShoppingListItemSeqID(i int) *OrderItemUpdateOne {
	oiuo.mutation.AddShoppingListItemSeqID(i)
	return oiuo
}

// ClearShoppingListItemSeqID clears the value of the "shopping_list_item_seq_id" field.
func (oiuo *OrderItemUpdateOne) ClearShoppingListItemSeqID() *OrderItemUpdateOne {
	oiuo.mutation.ClearShoppingListItemSeqID()
	return oiuo
}

// SetSubscriptionID sets the "subscription_id" field.
func (oiuo *OrderItemUpdateOne) SetSubscriptionID(i int) *OrderItemUpdateOne {
	oiuo.mutation.ResetSubscriptionID()
	oiuo.mutation.SetSubscriptionID(i)
	return oiuo
}

// SetNillableSubscriptionID sets the "subscription_id" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableSubscriptionID(i *int) *OrderItemUpdateOne {
	if i != nil {
		oiuo.SetSubscriptionID(*i)
	}
	return oiuo
}

// AddSubscriptionID adds i to the "subscription_id" field.
func (oiuo *OrderItemUpdateOne) AddSubscriptionID(i int) *OrderItemUpdateOne {
	oiuo.mutation.AddSubscriptionID(i)
	return oiuo
}

// ClearSubscriptionID clears the value of the "subscription_id" field.
func (oiuo *OrderItemUpdateOne) ClearSubscriptionID() *OrderItemUpdateOne {
	oiuo.mutation.ClearSubscriptionID()
	return oiuo
}

// SetDeploymentID sets the "deployment_id" field.
func (oiuo *OrderItemUpdateOne) SetDeploymentID(i int) *OrderItemUpdateOne {
	oiuo.mutation.ResetDeploymentID()
	oiuo.mutation.SetDeploymentID(i)
	return oiuo
}

// SetNillableDeploymentID sets the "deployment_id" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableDeploymentID(i *int) *OrderItemUpdateOne {
	if i != nil {
		oiuo.SetDeploymentID(*i)
	}
	return oiuo
}

// AddDeploymentID adds i to the "deployment_id" field.
func (oiuo *OrderItemUpdateOne) AddDeploymentID(i int) *OrderItemUpdateOne {
	oiuo.mutation.AddDeploymentID(i)
	return oiuo
}

// ClearDeploymentID clears the value of the "deployment_id" field.
func (oiuo *OrderItemUpdateOne) ClearDeploymentID() *OrderItemUpdateOne {
	oiuo.mutation.ClearDeploymentID()
	return oiuo
}

// SetQuantity sets the "quantity" field.
func (oiuo *OrderItemUpdateOne) SetQuantity(f float64) *OrderItemUpdateOne {
	oiuo.mutation.ResetQuantity()
	oiuo.mutation.SetQuantity(f)
	return oiuo
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableQuantity(f *float64) *OrderItemUpdateOne {
	if f != nil {
		oiuo.SetQuantity(*f)
	}
	return oiuo
}

// AddQuantity adds f to the "quantity" field.
func (oiuo *OrderItemUpdateOne) AddQuantity(f float64) *OrderItemUpdateOne {
	oiuo.mutation.AddQuantity(f)
	return oiuo
}

// ClearQuantity clears the value of the "quantity" field.
func (oiuo *OrderItemUpdateOne) ClearQuantity() *OrderItemUpdateOne {
	oiuo.mutation.ClearQuantity()
	return oiuo
}

// SetCancelQuantity sets the "cancel_quantity" field.
func (oiuo *OrderItemUpdateOne) SetCancelQuantity(f float64) *OrderItemUpdateOne {
	oiuo.mutation.ResetCancelQuantity()
	oiuo.mutation.SetCancelQuantity(f)
	return oiuo
}

// SetNillableCancelQuantity sets the "cancel_quantity" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableCancelQuantity(f *float64) *OrderItemUpdateOne {
	if f != nil {
		oiuo.SetCancelQuantity(*f)
	}
	return oiuo
}

// AddCancelQuantity adds f to the "cancel_quantity" field.
func (oiuo *OrderItemUpdateOne) AddCancelQuantity(f float64) *OrderItemUpdateOne {
	oiuo.mutation.AddCancelQuantity(f)
	return oiuo
}

// ClearCancelQuantity clears the value of the "cancel_quantity" field.
func (oiuo *OrderItemUpdateOne) ClearCancelQuantity() *OrderItemUpdateOne {
	oiuo.mutation.ClearCancelQuantity()
	return oiuo
}

// SetSelectedAmount sets the "selected_amount" field.
func (oiuo *OrderItemUpdateOne) SetSelectedAmount(f float64) *OrderItemUpdateOne {
	oiuo.mutation.ResetSelectedAmount()
	oiuo.mutation.SetSelectedAmount(f)
	return oiuo
}

// SetNillableSelectedAmount sets the "selected_amount" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableSelectedAmount(f *float64) *OrderItemUpdateOne {
	if f != nil {
		oiuo.SetSelectedAmount(*f)
	}
	return oiuo
}

// AddSelectedAmount adds f to the "selected_amount" field.
func (oiuo *OrderItemUpdateOne) AddSelectedAmount(f float64) *OrderItemUpdateOne {
	oiuo.mutation.AddSelectedAmount(f)
	return oiuo
}

// ClearSelectedAmount clears the value of the "selected_amount" field.
func (oiuo *OrderItemUpdateOne) ClearSelectedAmount() *OrderItemUpdateOne {
	oiuo.mutation.ClearSelectedAmount()
	return oiuo
}

// SetUnitPrice sets the "unit_price" field.
func (oiuo *OrderItemUpdateOne) SetUnitPrice(f float64) *OrderItemUpdateOne {
	oiuo.mutation.ResetUnitPrice()
	oiuo.mutation.SetUnitPrice(f)
	return oiuo
}

// SetNillableUnitPrice sets the "unit_price" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableUnitPrice(f *float64) *OrderItemUpdateOne {
	if f != nil {
		oiuo.SetUnitPrice(*f)
	}
	return oiuo
}

// AddUnitPrice adds f to the "unit_price" field.
func (oiuo *OrderItemUpdateOne) AddUnitPrice(f float64) *OrderItemUpdateOne {
	oiuo.mutation.AddUnitPrice(f)
	return oiuo
}

// ClearUnitPrice clears the value of the "unit_price" field.
func (oiuo *OrderItemUpdateOne) ClearUnitPrice() *OrderItemUpdateOne {
	oiuo.mutation.ClearUnitPrice()
	return oiuo
}

// SetUnitListPrice sets the "unit_list_price" field.
func (oiuo *OrderItemUpdateOne) SetUnitListPrice(f float64) *OrderItemUpdateOne {
	oiuo.mutation.ResetUnitListPrice()
	oiuo.mutation.SetUnitListPrice(f)
	return oiuo
}

// SetNillableUnitListPrice sets the "unit_list_price" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableUnitListPrice(f *float64) *OrderItemUpdateOne {
	if f != nil {
		oiuo.SetUnitListPrice(*f)
	}
	return oiuo
}

// AddUnitListPrice adds f to the "unit_list_price" field.
func (oiuo *OrderItemUpdateOne) AddUnitListPrice(f float64) *OrderItemUpdateOne {
	oiuo.mutation.AddUnitListPrice(f)
	return oiuo
}

// ClearUnitListPrice clears the value of the "unit_list_price" field.
func (oiuo *OrderItemUpdateOne) ClearUnitListPrice() *OrderItemUpdateOne {
	oiuo.mutation.ClearUnitListPrice()
	return oiuo
}

// SetUnitAverageCost sets the "unit_average_cost" field.
func (oiuo *OrderItemUpdateOne) SetUnitAverageCost(f float64) *OrderItemUpdateOne {
	oiuo.mutation.ResetUnitAverageCost()
	oiuo.mutation.SetUnitAverageCost(f)
	return oiuo
}

// SetNillableUnitAverageCost sets the "unit_average_cost" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableUnitAverageCost(f *float64) *OrderItemUpdateOne {
	if f != nil {
		oiuo.SetUnitAverageCost(*f)
	}
	return oiuo
}

// AddUnitAverageCost adds f to the "unit_average_cost" field.
func (oiuo *OrderItemUpdateOne) AddUnitAverageCost(f float64) *OrderItemUpdateOne {
	oiuo.mutation.AddUnitAverageCost(f)
	return oiuo
}

// ClearUnitAverageCost clears the value of the "unit_average_cost" field.
func (oiuo *OrderItemUpdateOne) ClearUnitAverageCost() *OrderItemUpdateOne {
	oiuo.mutation.ClearUnitAverageCost()
	return oiuo
}

// SetUnitRecurringPrice sets the "unit_recurring_price" field.
func (oiuo *OrderItemUpdateOne) SetUnitRecurringPrice(f float64) *OrderItemUpdateOne {
	oiuo.mutation.ResetUnitRecurringPrice()
	oiuo.mutation.SetUnitRecurringPrice(f)
	return oiuo
}

// SetNillableUnitRecurringPrice sets the "unit_recurring_price" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableUnitRecurringPrice(f *float64) *OrderItemUpdateOne {
	if f != nil {
		oiuo.SetUnitRecurringPrice(*f)
	}
	return oiuo
}

// AddUnitRecurringPrice adds f to the "unit_recurring_price" field.
func (oiuo *OrderItemUpdateOne) AddUnitRecurringPrice(f float64) *OrderItemUpdateOne {
	oiuo.mutation.AddUnitRecurringPrice(f)
	return oiuo
}

// ClearUnitRecurringPrice clears the value of the "unit_recurring_price" field.
func (oiuo *OrderItemUpdateOne) ClearUnitRecurringPrice() *OrderItemUpdateOne {
	oiuo.mutation.ClearUnitRecurringPrice()
	return oiuo
}

// SetIsModifiedPrice sets the "is_modified_price" field.
func (oiuo *OrderItemUpdateOne) SetIsModifiedPrice(omp orderitem.IsModifiedPrice) *OrderItemUpdateOne {
	oiuo.mutation.SetIsModifiedPrice(omp)
	return oiuo
}

// SetNillableIsModifiedPrice sets the "is_modified_price" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableIsModifiedPrice(omp *orderitem.IsModifiedPrice) *OrderItemUpdateOne {
	if omp != nil {
		oiuo.SetIsModifiedPrice(*omp)
	}
	return oiuo
}

// ClearIsModifiedPrice clears the value of the "is_modified_price" field.
func (oiuo *OrderItemUpdateOne) ClearIsModifiedPrice() *OrderItemUpdateOne {
	oiuo.mutation.ClearIsModifiedPrice()
	return oiuo
}

// SetRecurringFreqUomID sets the "recurring_freq_uom_id" field.
func (oiuo *OrderItemUpdateOne) SetRecurringFreqUomID(i int) *OrderItemUpdateOne {
	oiuo.mutation.ResetRecurringFreqUomID()
	oiuo.mutation.SetRecurringFreqUomID(i)
	return oiuo
}

// SetNillableRecurringFreqUomID sets the "recurring_freq_uom_id" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableRecurringFreqUomID(i *int) *OrderItemUpdateOne {
	if i != nil {
		oiuo.SetRecurringFreqUomID(*i)
	}
	return oiuo
}

// AddRecurringFreqUomID adds i to the "recurring_freq_uom_id" field.
func (oiuo *OrderItemUpdateOne) AddRecurringFreqUomID(i int) *OrderItemUpdateOne {
	oiuo.mutation.AddRecurringFreqUomID(i)
	return oiuo
}

// ClearRecurringFreqUomID clears the value of the "recurring_freq_uom_id" field.
func (oiuo *OrderItemUpdateOne) ClearRecurringFreqUomID() *OrderItemUpdateOne {
	oiuo.mutation.ClearRecurringFreqUomID()
	return oiuo
}

// SetItemDescription sets the "item_description" field.
func (oiuo *OrderItemUpdateOne) SetItemDescription(s string) *OrderItemUpdateOne {
	oiuo.mutation.SetItemDescription(s)
	return oiuo
}

// SetNillableItemDescription sets the "item_description" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableItemDescription(s *string) *OrderItemUpdateOne {
	if s != nil {
		oiuo.SetItemDescription(*s)
	}
	return oiuo
}

// ClearItemDescription clears the value of the "item_description" field.
func (oiuo *OrderItemUpdateOne) ClearItemDescription() *OrderItemUpdateOne {
	oiuo.mutation.ClearItemDescription()
	return oiuo
}

// SetComments sets the "comments" field.
func (oiuo *OrderItemUpdateOne) SetComments(s string) *OrderItemUpdateOne {
	oiuo.mutation.SetComments(s)
	return oiuo
}

// SetNillableComments sets the "comments" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableComments(s *string) *OrderItemUpdateOne {
	if s != nil {
		oiuo.SetComments(*s)
	}
	return oiuo
}

// ClearComments clears the value of the "comments" field.
func (oiuo *OrderItemUpdateOne) ClearComments() *OrderItemUpdateOne {
	oiuo.mutation.ClearComments()
	return oiuo
}

// SetCorrespondingPoID sets the "corresponding_po_id" field.
func (oiuo *OrderItemUpdateOne) SetCorrespondingPoID(i int) *OrderItemUpdateOne {
	oiuo.mutation.ResetCorrespondingPoID()
	oiuo.mutation.SetCorrespondingPoID(i)
	return oiuo
}

// SetNillableCorrespondingPoID sets the "corresponding_po_id" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableCorrespondingPoID(i *int) *OrderItemUpdateOne {
	if i != nil {
		oiuo.SetCorrespondingPoID(*i)
	}
	return oiuo
}

// AddCorrespondingPoID adds i to the "corresponding_po_id" field.
func (oiuo *OrderItemUpdateOne) AddCorrespondingPoID(i int) *OrderItemUpdateOne {
	oiuo.mutation.AddCorrespondingPoID(i)
	return oiuo
}

// ClearCorrespondingPoID clears the value of the "corresponding_po_id" field.
func (oiuo *OrderItemUpdateOne) ClearCorrespondingPoID() *OrderItemUpdateOne {
	oiuo.mutation.ClearCorrespondingPoID()
	return oiuo
}

// SetStatusID sets the "status_id" field.
func (oiuo *OrderItemUpdateOne) SetStatusID(i int) *OrderItemUpdateOne {
	oiuo.mutation.ResetStatusID()
	oiuo.mutation.SetStatusID(i)
	return oiuo
}

// SetNillableStatusID sets the "status_id" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableStatusID(i *int) *OrderItemUpdateOne {
	if i != nil {
		oiuo.SetStatusID(*i)
	}
	return oiuo
}

// AddStatusID adds i to the "status_id" field.
func (oiuo *OrderItemUpdateOne) AddStatusID(i int) *OrderItemUpdateOne {
	oiuo.mutation.AddStatusID(i)
	return oiuo
}

// ClearStatusID clears the value of the "status_id" field.
func (oiuo *OrderItemUpdateOne) ClearStatusID() *OrderItemUpdateOne {
	oiuo.mutation.ClearStatusID()
	return oiuo
}

// SetSyncStatusID sets the "sync_status_id" field.
func (oiuo *OrderItemUpdateOne) SetSyncStatusID(i int) *OrderItemUpdateOne {
	oiuo.mutation.ResetSyncStatusID()
	oiuo.mutation.SetSyncStatusID(i)
	return oiuo
}

// SetNillableSyncStatusID sets the "sync_status_id" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableSyncStatusID(i *int) *OrderItemUpdateOne {
	if i != nil {
		oiuo.SetSyncStatusID(*i)
	}
	return oiuo
}

// AddSyncStatusID adds i to the "sync_status_id" field.
func (oiuo *OrderItemUpdateOne) AddSyncStatusID(i int) *OrderItemUpdateOne {
	oiuo.mutation.AddSyncStatusID(i)
	return oiuo
}

// ClearSyncStatusID clears the value of the "sync_status_id" field.
func (oiuo *OrderItemUpdateOne) ClearSyncStatusID() *OrderItemUpdateOne {
	oiuo.mutation.ClearSyncStatusID()
	return oiuo
}

// SetEstimatedShipDate sets the "estimated_ship_date" field.
func (oiuo *OrderItemUpdateOne) SetEstimatedShipDate(t time.Time) *OrderItemUpdateOne {
	oiuo.mutation.SetEstimatedShipDate(t)
	return oiuo
}

// SetNillableEstimatedShipDate sets the "estimated_ship_date" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableEstimatedShipDate(t *time.Time) *OrderItemUpdateOne {
	if t != nil {
		oiuo.SetEstimatedShipDate(*t)
	}
	return oiuo
}

// ClearEstimatedShipDate clears the value of the "estimated_ship_date" field.
func (oiuo *OrderItemUpdateOne) ClearEstimatedShipDate() *OrderItemUpdateOne {
	oiuo.mutation.ClearEstimatedShipDate()
	return oiuo
}

// SetEstimatedDeliveryDate sets the "estimated_delivery_date" field.
func (oiuo *OrderItemUpdateOne) SetEstimatedDeliveryDate(t time.Time) *OrderItemUpdateOne {
	oiuo.mutation.SetEstimatedDeliveryDate(t)
	return oiuo
}

// SetNillableEstimatedDeliveryDate sets the "estimated_delivery_date" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableEstimatedDeliveryDate(t *time.Time) *OrderItemUpdateOne {
	if t != nil {
		oiuo.SetEstimatedDeliveryDate(*t)
	}
	return oiuo
}

// ClearEstimatedDeliveryDate clears the value of the "estimated_delivery_date" field.
func (oiuo *OrderItemUpdateOne) ClearEstimatedDeliveryDate() *OrderItemUpdateOne {
	oiuo.mutation.ClearEstimatedDeliveryDate()
	return oiuo
}

// SetAutoCancelDate sets the "auto_cancel_date" field.
func (oiuo *OrderItemUpdateOne) SetAutoCancelDate(t time.Time) *OrderItemUpdateOne {
	oiuo.mutation.SetAutoCancelDate(t)
	return oiuo
}

// SetNillableAutoCancelDate sets the "auto_cancel_date" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableAutoCancelDate(t *time.Time) *OrderItemUpdateOne {
	if t != nil {
		oiuo.SetAutoCancelDate(*t)
	}
	return oiuo
}

// ClearAutoCancelDate clears the value of the "auto_cancel_date" field.
func (oiuo *OrderItemUpdateOne) ClearAutoCancelDate() *OrderItemUpdateOne {
	oiuo.mutation.ClearAutoCancelDate()
	return oiuo
}

// SetDontCancelSetDate sets the "dont_cancel_set_date" field.
func (oiuo *OrderItemUpdateOne) SetDontCancelSetDate(t time.Time) *OrderItemUpdateOne {
	oiuo.mutation.SetDontCancelSetDate(t)
	return oiuo
}

// SetNillableDontCancelSetDate sets the "dont_cancel_set_date" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableDontCancelSetDate(t *time.Time) *OrderItemUpdateOne {
	if t != nil {
		oiuo.SetDontCancelSetDate(*t)
	}
	return oiuo
}

// ClearDontCancelSetDate clears the value of the "dont_cancel_set_date" field.
func (oiuo *OrderItemUpdateOne) ClearDontCancelSetDate() *OrderItemUpdateOne {
	oiuo.mutation.ClearDontCancelSetDate()
	return oiuo
}

// SetDontCancelSetUserLogin sets the "dont_cancel_set_user_login" field.
func (oiuo *OrderItemUpdateOne) SetDontCancelSetUserLogin(s string) *OrderItemUpdateOne {
	oiuo.mutation.SetDontCancelSetUserLogin(s)
	return oiuo
}

// SetNillableDontCancelSetUserLogin sets the "dont_cancel_set_user_login" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableDontCancelSetUserLogin(s *string) *OrderItemUpdateOne {
	if s != nil {
		oiuo.SetDontCancelSetUserLogin(*s)
	}
	return oiuo
}

// ClearDontCancelSetUserLogin clears the value of the "dont_cancel_set_user_login" field.
func (oiuo *OrderItemUpdateOne) ClearDontCancelSetUserLogin() *OrderItemUpdateOne {
	oiuo.mutation.ClearDontCancelSetUserLogin()
	return oiuo
}

// SetShipBeforeDate sets the "ship_before_date" field.
func (oiuo *OrderItemUpdateOne) SetShipBeforeDate(t time.Time) *OrderItemUpdateOne {
	oiuo.mutation.SetShipBeforeDate(t)
	return oiuo
}

// SetNillableShipBeforeDate sets the "ship_before_date" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableShipBeforeDate(t *time.Time) *OrderItemUpdateOne {
	if t != nil {
		oiuo.SetShipBeforeDate(*t)
	}
	return oiuo
}

// ClearShipBeforeDate clears the value of the "ship_before_date" field.
func (oiuo *OrderItemUpdateOne) ClearShipBeforeDate() *OrderItemUpdateOne {
	oiuo.mutation.ClearShipBeforeDate()
	return oiuo
}

// SetShipAfterDate sets the "ship_after_date" field.
func (oiuo *OrderItemUpdateOne) SetShipAfterDate(t time.Time) *OrderItemUpdateOne {
	oiuo.mutation.SetShipAfterDate(t)
	return oiuo
}

// SetNillableShipAfterDate sets the "ship_after_date" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableShipAfterDate(t *time.Time) *OrderItemUpdateOne {
	if t != nil {
		oiuo.SetShipAfterDate(*t)
	}
	return oiuo
}

// ClearShipAfterDate clears the value of the "ship_after_date" field.
func (oiuo *OrderItemUpdateOne) ClearShipAfterDate() *OrderItemUpdateOne {
	oiuo.mutation.ClearShipAfterDate()
	return oiuo
}

// SetReserveAfterDate sets the "reserve_after_date" field.
func (oiuo *OrderItemUpdateOne) SetReserveAfterDate(t time.Time) *OrderItemUpdateOne {
	oiuo.mutation.SetReserveAfterDate(t)
	return oiuo
}

// SetNillableReserveAfterDate sets the "reserve_after_date" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableReserveAfterDate(t *time.Time) *OrderItemUpdateOne {
	if t != nil {
		oiuo.SetReserveAfterDate(*t)
	}
	return oiuo
}

// ClearReserveAfterDate clears the value of the "reserve_after_date" field.
func (oiuo *OrderItemUpdateOne) ClearReserveAfterDate() *OrderItemUpdateOne {
	oiuo.mutation.ClearReserveAfterDate()
	return oiuo
}

// SetCancelBackOrderDate sets the "cancel_back_order_date" field.
func (oiuo *OrderItemUpdateOne) SetCancelBackOrderDate(t time.Time) *OrderItemUpdateOne {
	oiuo.mutation.SetCancelBackOrderDate(t)
	return oiuo
}

// SetNillableCancelBackOrderDate sets the "cancel_back_order_date" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableCancelBackOrderDate(t *time.Time) *OrderItemUpdateOne {
	if t != nil {
		oiuo.SetCancelBackOrderDate(*t)
	}
	return oiuo
}

// ClearCancelBackOrderDate clears the value of the "cancel_back_order_date" field.
func (oiuo *OrderItemUpdateOne) ClearCancelBackOrderDate() *OrderItemUpdateOne {
	oiuo.mutation.ClearCancelBackOrderDate()
	return oiuo
}

// SetOverrideGlAccountID sets the "override_gl_account_id" field.
func (oiuo *OrderItemUpdateOne) SetOverrideGlAccountID(i int) *OrderItemUpdateOne {
	oiuo.mutation.ResetOverrideGlAccountID()
	oiuo.mutation.SetOverrideGlAccountID(i)
	return oiuo
}

// SetNillableOverrideGlAccountID sets the "override_gl_account_id" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableOverrideGlAccountID(i *int) *OrderItemUpdateOne {
	if i != nil {
		oiuo.SetOverrideGlAccountID(*i)
	}
	return oiuo
}

// AddOverrideGlAccountID adds i to the "override_gl_account_id" field.
func (oiuo *OrderItemUpdateOne) AddOverrideGlAccountID(i int) *OrderItemUpdateOne {
	oiuo.mutation.AddOverrideGlAccountID(i)
	return oiuo
}

// ClearOverrideGlAccountID clears the value of the "override_gl_account_id" field.
func (oiuo *OrderItemUpdateOne) ClearOverrideGlAccountID() *OrderItemUpdateOne {
	oiuo.mutation.ClearOverrideGlAccountID()
	return oiuo
}

// SetSalesOpportunityID sets the "sales_opportunity_id" field.
func (oiuo *OrderItemUpdateOne) SetSalesOpportunityID(i int) *OrderItemUpdateOne {
	oiuo.mutation.ResetSalesOpportunityID()
	oiuo.mutation.SetSalesOpportunityID(i)
	return oiuo
}

// SetNillableSalesOpportunityID sets the "sales_opportunity_id" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableSalesOpportunityID(i *int) *OrderItemUpdateOne {
	if i != nil {
		oiuo.SetSalesOpportunityID(*i)
	}
	return oiuo
}

// AddSalesOpportunityID adds i to the "sales_opportunity_id" field.
func (oiuo *OrderItemUpdateOne) AddSalesOpportunityID(i int) *OrderItemUpdateOne {
	oiuo.mutation.AddSalesOpportunityID(i)
	return oiuo
}

// ClearSalesOpportunityID clears the value of the "sales_opportunity_id" field.
func (oiuo *OrderItemUpdateOne) ClearSalesOpportunityID() *OrderItemUpdateOne {
	oiuo.mutation.ClearSalesOpportunityID()
	return oiuo
}

// SetChangeByUserLoginID sets the "change_by_user_login_id" field.
func (oiuo *OrderItemUpdateOne) SetChangeByUserLoginID(s string) *OrderItemUpdateOne {
	oiuo.mutation.SetChangeByUserLoginID(s)
	return oiuo
}

// SetNillableChangeByUserLoginID sets the "change_by_user_login_id" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableChangeByUserLoginID(s *string) *OrderItemUpdateOne {
	if s != nil {
		oiuo.SetChangeByUserLoginID(*s)
	}
	return oiuo
}

// ClearChangeByUserLoginID clears the value of the "change_by_user_login_id" field.
func (oiuo *OrderItemUpdateOne) ClearChangeByUserLoginID() *OrderItemUpdateOne {
	oiuo.mutation.ClearChangeByUserLoginID()
	return oiuo
}

// SetOrderHeaderID sets the "order_header" edge to the OrderHeader entity by ID.
func (oiuo *OrderItemUpdateOne) SetOrderHeaderID(id int) *OrderItemUpdateOne {
	oiuo.mutation.SetOrderHeaderID(id)
	return oiuo
}

// SetNillableOrderHeaderID sets the "order_header" edge to the OrderHeader entity by ID if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableOrderHeaderID(id *int) *OrderItemUpdateOne {
	if id != nil {
		oiuo = oiuo.SetOrderHeaderID(*id)
	}
	return oiuo
}

// SetOrderHeader sets the "order_header" edge to the OrderHeader entity.
func (oiuo *OrderItemUpdateOne) SetOrderHeader(o *OrderHeader) *OrderItemUpdateOne {
	return oiuo.SetOrderHeaderID(o.ID)
}

// AddItemIssuanceIDs adds the "item_issuances" edge to the ItemIssuance entity by IDs.
func (oiuo *OrderItemUpdateOne) AddItemIssuanceIDs(ids ...int) *OrderItemUpdateOne {
	oiuo.mutation.AddItemIssuanceIDs(ids...)
	return oiuo
}

// AddItemIssuances adds the "item_issuances" edges to the ItemIssuance entity.
func (oiuo *OrderItemUpdateOne) AddItemIssuances(i ...*ItemIssuance) *OrderItemUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return oiuo.AddItemIssuanceIDs(ids...)
}

// AddOrderItemPriceInfoIDs adds the "order_item_price_infos" edge to the OrderItemPriceInfo entity by IDs.
func (oiuo *OrderItemUpdateOne) AddOrderItemPriceInfoIDs(ids ...int) *OrderItemUpdateOne {
	oiuo.mutation.AddOrderItemPriceInfoIDs(ids...)
	return oiuo
}

// AddOrderItemPriceInfos adds the "order_item_price_infos" edges to the OrderItemPriceInfo entity.
func (oiuo *OrderItemUpdateOne) AddOrderItemPriceInfos(o ...*OrderItemPriceInfo) *OrderItemUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oiuo.AddOrderItemPriceInfoIDs(ids...)
}

// AddOrderItemShipGroupAssocIDs adds the "order_item_ship_group_assocs" edge to the OrderItemShipGroupAssoc entity by IDs.
func (oiuo *OrderItemUpdateOne) AddOrderItemShipGroupAssocIDs(ids ...int) *OrderItemUpdateOne {
	oiuo.mutation.AddOrderItemShipGroupAssocIDs(ids...)
	return oiuo
}

// AddOrderItemShipGroupAssocs adds the "order_item_ship_group_assocs" edges to the OrderItemShipGroupAssoc entity.
func (oiuo *OrderItemUpdateOne) AddOrderItemShipGroupAssocs(o ...*OrderItemShipGroupAssoc) *OrderItemUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oiuo.AddOrderItemShipGroupAssocIDs(ids...)
}

// AddOrderStatusIDs adds the "order_statuses" edge to the OrderStatus entity by IDs.
func (oiuo *OrderItemUpdateOne) AddOrderStatusIDs(ids ...int) *OrderItemUpdateOne {
	oiuo.mutation.AddOrderStatusIDs(ids...)
	return oiuo
}

// AddOrderStatuses adds the "order_statuses" edges to the OrderStatus entity.
func (oiuo *OrderItemUpdateOne) AddOrderStatuses(o ...*OrderStatus) *OrderItemUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oiuo.AddOrderStatusIDs(ids...)
}

// Mutation returns the OrderItemMutation object of the builder.
func (oiuo *OrderItemUpdateOne) Mutation() *OrderItemMutation {
	return oiuo.mutation
}

// ClearOrderHeader clears the "order_header" edge to the OrderHeader entity.
func (oiuo *OrderItemUpdateOne) ClearOrderHeader() *OrderItemUpdateOne {
	oiuo.mutation.ClearOrderHeader()
	return oiuo
}

// ClearItemIssuances clears all "item_issuances" edges to the ItemIssuance entity.
func (oiuo *OrderItemUpdateOne) ClearItemIssuances() *OrderItemUpdateOne {
	oiuo.mutation.ClearItemIssuances()
	return oiuo
}

// RemoveItemIssuanceIDs removes the "item_issuances" edge to ItemIssuance entities by IDs.
func (oiuo *OrderItemUpdateOne) RemoveItemIssuanceIDs(ids ...int) *OrderItemUpdateOne {
	oiuo.mutation.RemoveItemIssuanceIDs(ids...)
	return oiuo
}

// RemoveItemIssuances removes "item_issuances" edges to ItemIssuance entities.
func (oiuo *OrderItemUpdateOne) RemoveItemIssuances(i ...*ItemIssuance) *OrderItemUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return oiuo.RemoveItemIssuanceIDs(ids...)
}

// ClearOrderItemPriceInfos clears all "order_item_price_infos" edges to the OrderItemPriceInfo entity.
func (oiuo *OrderItemUpdateOne) ClearOrderItemPriceInfos() *OrderItemUpdateOne {
	oiuo.mutation.ClearOrderItemPriceInfos()
	return oiuo
}

// RemoveOrderItemPriceInfoIDs removes the "order_item_price_infos" edge to OrderItemPriceInfo entities by IDs.
func (oiuo *OrderItemUpdateOne) RemoveOrderItemPriceInfoIDs(ids ...int) *OrderItemUpdateOne {
	oiuo.mutation.RemoveOrderItemPriceInfoIDs(ids...)
	return oiuo
}

// RemoveOrderItemPriceInfos removes "order_item_price_infos" edges to OrderItemPriceInfo entities.
func (oiuo *OrderItemUpdateOne) RemoveOrderItemPriceInfos(o ...*OrderItemPriceInfo) *OrderItemUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oiuo.RemoveOrderItemPriceInfoIDs(ids...)
}

// ClearOrderItemShipGroupAssocs clears all "order_item_ship_group_assocs" edges to the OrderItemShipGroupAssoc entity.
func (oiuo *OrderItemUpdateOne) ClearOrderItemShipGroupAssocs() *OrderItemUpdateOne {
	oiuo.mutation.ClearOrderItemShipGroupAssocs()
	return oiuo
}

// RemoveOrderItemShipGroupAssocIDs removes the "order_item_ship_group_assocs" edge to OrderItemShipGroupAssoc entities by IDs.
func (oiuo *OrderItemUpdateOne) RemoveOrderItemShipGroupAssocIDs(ids ...int) *OrderItemUpdateOne {
	oiuo.mutation.RemoveOrderItemShipGroupAssocIDs(ids...)
	return oiuo
}

// RemoveOrderItemShipGroupAssocs removes "order_item_ship_group_assocs" edges to OrderItemShipGroupAssoc entities.
func (oiuo *OrderItemUpdateOne) RemoveOrderItemShipGroupAssocs(o ...*OrderItemShipGroupAssoc) *OrderItemUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oiuo.RemoveOrderItemShipGroupAssocIDs(ids...)
}

// ClearOrderStatuses clears all "order_statuses" edges to the OrderStatus entity.
func (oiuo *OrderItemUpdateOne) ClearOrderStatuses() *OrderItemUpdateOne {
	oiuo.mutation.ClearOrderStatuses()
	return oiuo
}

// RemoveOrderStatusIDs removes the "order_statuses" edge to OrderStatus entities by IDs.
func (oiuo *OrderItemUpdateOne) RemoveOrderStatusIDs(ids ...int) *OrderItemUpdateOne {
	oiuo.mutation.RemoveOrderStatusIDs(ids...)
	return oiuo
}

// RemoveOrderStatuses removes "order_statuses" edges to OrderStatus entities.
func (oiuo *OrderItemUpdateOne) RemoveOrderStatuses(o ...*OrderStatus) *OrderItemUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oiuo.RemoveOrderStatusIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (oiuo *OrderItemUpdateOne) Select(field string, fields ...string) *OrderItemUpdateOne {
	oiuo.fields = append([]string{field}, fields...)
	return oiuo
}

// Save executes the query and returns the updated OrderItem entity.
func (oiuo *OrderItemUpdateOne) Save(ctx context.Context) (*OrderItem, error) {
	var (
		err  error
		node *OrderItem
	)
	oiuo.defaults()
	if len(oiuo.hooks) == 0 {
		if err = oiuo.check(); err != nil {
			return nil, err
		}
		node, err = oiuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderItemMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = oiuo.check(); err != nil {
				return nil, err
			}
			oiuo.mutation = mutation
			node, err = oiuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(oiuo.hooks) - 1; i >= 0; i-- {
			mut = oiuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, oiuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (oiuo *OrderItemUpdateOne) SaveX(ctx context.Context) *OrderItem {
	node, err := oiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (oiuo *OrderItemUpdateOne) Exec(ctx context.Context) error {
	_, err := oiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oiuo *OrderItemUpdateOne) ExecX(ctx context.Context) {
	if err := oiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oiuo *OrderItemUpdateOne) defaults() {
	if _, ok := oiuo.mutation.UpdateTime(); !ok {
		v := orderitem.UpdateDefaultUpdateTime()
		oiuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oiuo *OrderItemUpdateOne) check() error {
	if v, ok := oiuo.mutation.IsItemGroupPrimary(); ok {
		if err := orderitem.IsItemGroupPrimaryValidator(v); err != nil {
			return &ValidationError{Name: "is_item_group_primary", err: fmt.Errorf("ent: validator failed for field \"is_item_group_primary\": %w", err)}
		}
	}
	if v, ok := oiuo.mutation.SupplierProductID(); ok {
		if err := orderitem.SupplierProductIDValidator(v); err != nil {
			return &ValidationError{Name: "supplier_product_id", err: fmt.Errorf("ent: validator failed for field \"supplier_product_id\": %w", err)}
		}
	}
	if v, ok := oiuo.mutation.IsPromo(); ok {
		if err := orderitem.IsPromoValidator(v); err != nil {
			return &ValidationError{Name: "is_promo", err: fmt.Errorf("ent: validator failed for field \"is_promo\": %w", err)}
		}
	}
	if v, ok := oiuo.mutation.IsModifiedPrice(); ok {
		if err := orderitem.IsModifiedPriceValidator(v); err != nil {
			return &ValidationError{Name: "is_modified_price", err: fmt.Errorf("ent: validator failed for field \"is_modified_price\": %w", err)}
		}
	}
	return nil
}

func (oiuo *OrderItemUpdateOne) sqlSave(ctx context.Context) (_node *OrderItem, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   orderitem.Table,
			Columns: orderitem.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: orderitem.FieldID,
			},
		},
	}
	id, ok := oiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing OrderItem.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := oiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, orderitem.FieldID)
		for _, f := range fields {
			if !orderitem.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != orderitem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := oiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oiuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderitem.FieldUpdateTime,
		})
	}
	if value, ok := oiuo.mutation.OrderItemSeqID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldOrderItemSeqID,
		})
	}
	if value, ok := oiuo.mutation.AddedOrderItemSeqID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldOrderItemSeqID,
		})
	}
	if value, ok := oiuo.mutation.ExternalID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldExternalID,
		})
	}
	if value, ok := oiuo.mutation.AddedExternalID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldExternalID,
		})
	}
	if oiuo.mutation.ExternalIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderitem.FieldExternalID,
		})
	}
	if value, ok := oiuo.mutation.OrderItemTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldOrderItemTypeID,
		})
	}
	if value, ok := oiuo.mutation.AddedOrderItemTypeID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldOrderItemTypeID,
		})
	}
	if oiuo.mutation.OrderItemTypeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderitem.FieldOrderItemTypeID,
		})
	}
	if value, ok := oiuo.mutation.OrderItemGroupSeqID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldOrderItemGroupSeqID,
		})
	}
	if value, ok := oiuo.mutation.AddedOrderItemGroupSeqID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldOrderItemGroupSeqID,
		})
	}
	if oiuo.mutation.OrderItemGroupSeqIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderitem.FieldOrderItemGroupSeqID,
		})
	}
	if value, ok := oiuo.mutation.IsItemGroupPrimary(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: orderitem.FieldIsItemGroupPrimary,
		})
	}
	if oiuo.mutation.IsItemGroupPrimaryCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: orderitem.FieldIsItemGroupPrimary,
		})
	}
	if value, ok := oiuo.mutation.FromInventoryItemID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldFromInventoryItemID,
		})
	}
	if value, ok := oiuo.mutation.AddedFromInventoryItemID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldFromInventoryItemID,
		})
	}
	if oiuo.mutation.FromInventoryItemIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderitem.FieldFromInventoryItemID,
		})
	}
	if value, ok := oiuo.mutation.BudgetID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldBudgetID,
		})
	}
	if value, ok := oiuo.mutation.AddedBudgetID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldBudgetID,
		})
	}
	if oiuo.mutation.BudgetIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderitem.FieldBudgetID,
		})
	}
	if value, ok := oiuo.mutation.BudgetItemSeqID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldBudgetItemSeqID,
		})
	}
	if value, ok := oiuo.mutation.AddedBudgetItemSeqID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldBudgetItemSeqID,
		})
	}
	if oiuo.mutation.BudgetItemSeqIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderitem.FieldBudgetItemSeqID,
		})
	}
	if value, ok := oiuo.mutation.ProductID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldProductID,
		})
	}
	if value, ok := oiuo.mutation.AddedProductID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldProductID,
		})
	}
	if oiuo.mutation.ProductIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderitem.FieldProductID,
		})
	}
	if value, ok := oiuo.mutation.SupplierProductID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderitem.FieldSupplierProductID,
		})
	}
	if oiuo.mutation.SupplierProductIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: orderitem.FieldSupplierProductID,
		})
	}
	if value, ok := oiuo.mutation.ProductFeatureID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldProductFeatureID,
		})
	}
	if value, ok := oiuo.mutation.AddedProductFeatureID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldProductFeatureID,
		})
	}
	if oiuo.mutation.ProductFeatureIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderitem.FieldProductFeatureID,
		})
	}
	if value, ok := oiuo.mutation.ProdCatalogID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldProdCatalogID,
		})
	}
	if value, ok := oiuo.mutation.AddedProdCatalogID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldProdCatalogID,
		})
	}
	if oiuo.mutation.ProdCatalogIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderitem.FieldProdCatalogID,
		})
	}
	if value, ok := oiuo.mutation.ProductCategoryID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldProductCategoryID,
		})
	}
	if value, ok := oiuo.mutation.AddedProductCategoryID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldProductCategoryID,
		})
	}
	if oiuo.mutation.ProductCategoryIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderitem.FieldProductCategoryID,
		})
	}
	if value, ok := oiuo.mutation.IsPromo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: orderitem.FieldIsPromo,
		})
	}
	if oiuo.mutation.IsPromoCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: orderitem.FieldIsPromo,
		})
	}
	if value, ok := oiuo.mutation.QuoteID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldQuoteID,
		})
	}
	if value, ok := oiuo.mutation.AddedQuoteID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldQuoteID,
		})
	}
	if oiuo.mutation.QuoteIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderitem.FieldQuoteID,
		})
	}
	if value, ok := oiuo.mutation.QuoteItemSeqID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldQuoteItemSeqID,
		})
	}
	if value, ok := oiuo.mutation.AddedQuoteItemSeqID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldQuoteItemSeqID,
		})
	}
	if oiuo.mutation.QuoteItemSeqIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderitem.FieldQuoteItemSeqID,
		})
	}
	if value, ok := oiuo.mutation.ShoppingListID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldShoppingListID,
		})
	}
	if value, ok := oiuo.mutation.AddedShoppingListID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldShoppingListID,
		})
	}
	if oiuo.mutation.ShoppingListIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderitem.FieldShoppingListID,
		})
	}
	if value, ok := oiuo.mutation.ShoppingListItemSeqID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldShoppingListItemSeqID,
		})
	}
	if value, ok := oiuo.mutation.AddedShoppingListItemSeqID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldShoppingListItemSeqID,
		})
	}
	if oiuo.mutation.ShoppingListItemSeqIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderitem.FieldShoppingListItemSeqID,
		})
	}
	if value, ok := oiuo.mutation.SubscriptionID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldSubscriptionID,
		})
	}
	if value, ok := oiuo.mutation.AddedSubscriptionID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldSubscriptionID,
		})
	}
	if oiuo.mutation.SubscriptionIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderitem.FieldSubscriptionID,
		})
	}
	if value, ok := oiuo.mutation.DeploymentID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldDeploymentID,
		})
	}
	if value, ok := oiuo.mutation.AddedDeploymentID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldDeploymentID,
		})
	}
	if oiuo.mutation.DeploymentIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderitem.FieldDeploymentID,
		})
	}
	if value, ok := oiuo.mutation.Quantity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderitem.FieldQuantity,
		})
	}
	if value, ok := oiuo.mutation.AddedQuantity(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderitem.FieldQuantity,
		})
	}
	if oiuo.mutation.QuantityCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: orderitem.FieldQuantity,
		})
	}
	if value, ok := oiuo.mutation.CancelQuantity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderitem.FieldCancelQuantity,
		})
	}
	if value, ok := oiuo.mutation.AddedCancelQuantity(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderitem.FieldCancelQuantity,
		})
	}
	if oiuo.mutation.CancelQuantityCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: orderitem.FieldCancelQuantity,
		})
	}
	if value, ok := oiuo.mutation.SelectedAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderitem.FieldSelectedAmount,
		})
	}
	if value, ok := oiuo.mutation.AddedSelectedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderitem.FieldSelectedAmount,
		})
	}
	if oiuo.mutation.SelectedAmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: orderitem.FieldSelectedAmount,
		})
	}
	if value, ok := oiuo.mutation.UnitPrice(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderitem.FieldUnitPrice,
		})
	}
	if value, ok := oiuo.mutation.AddedUnitPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderitem.FieldUnitPrice,
		})
	}
	if oiuo.mutation.UnitPriceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: orderitem.FieldUnitPrice,
		})
	}
	if value, ok := oiuo.mutation.UnitListPrice(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderitem.FieldUnitListPrice,
		})
	}
	if value, ok := oiuo.mutation.AddedUnitListPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderitem.FieldUnitListPrice,
		})
	}
	if oiuo.mutation.UnitListPriceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: orderitem.FieldUnitListPrice,
		})
	}
	if value, ok := oiuo.mutation.UnitAverageCost(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderitem.FieldUnitAverageCost,
		})
	}
	if value, ok := oiuo.mutation.AddedUnitAverageCost(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderitem.FieldUnitAverageCost,
		})
	}
	if oiuo.mutation.UnitAverageCostCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: orderitem.FieldUnitAverageCost,
		})
	}
	if value, ok := oiuo.mutation.UnitRecurringPrice(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderitem.FieldUnitRecurringPrice,
		})
	}
	if value, ok := oiuo.mutation.AddedUnitRecurringPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderitem.FieldUnitRecurringPrice,
		})
	}
	if oiuo.mutation.UnitRecurringPriceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: orderitem.FieldUnitRecurringPrice,
		})
	}
	if value, ok := oiuo.mutation.IsModifiedPrice(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: orderitem.FieldIsModifiedPrice,
		})
	}
	if oiuo.mutation.IsModifiedPriceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: orderitem.FieldIsModifiedPrice,
		})
	}
	if value, ok := oiuo.mutation.RecurringFreqUomID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldRecurringFreqUomID,
		})
	}
	if value, ok := oiuo.mutation.AddedRecurringFreqUomID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldRecurringFreqUomID,
		})
	}
	if oiuo.mutation.RecurringFreqUomIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderitem.FieldRecurringFreqUomID,
		})
	}
	if value, ok := oiuo.mutation.ItemDescription(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderitem.FieldItemDescription,
		})
	}
	if oiuo.mutation.ItemDescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: orderitem.FieldItemDescription,
		})
	}
	if value, ok := oiuo.mutation.Comments(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderitem.FieldComments,
		})
	}
	if oiuo.mutation.CommentsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: orderitem.FieldComments,
		})
	}
	if value, ok := oiuo.mutation.CorrespondingPoID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldCorrespondingPoID,
		})
	}
	if value, ok := oiuo.mutation.AddedCorrespondingPoID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldCorrespondingPoID,
		})
	}
	if oiuo.mutation.CorrespondingPoIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderitem.FieldCorrespondingPoID,
		})
	}
	if value, ok := oiuo.mutation.StatusID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldStatusID,
		})
	}
	if value, ok := oiuo.mutation.AddedStatusID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldStatusID,
		})
	}
	if oiuo.mutation.StatusIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderitem.FieldStatusID,
		})
	}
	if value, ok := oiuo.mutation.SyncStatusID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldSyncStatusID,
		})
	}
	if value, ok := oiuo.mutation.AddedSyncStatusID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldSyncStatusID,
		})
	}
	if oiuo.mutation.SyncStatusIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderitem.FieldSyncStatusID,
		})
	}
	if value, ok := oiuo.mutation.EstimatedShipDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderitem.FieldEstimatedShipDate,
		})
	}
	if oiuo.mutation.EstimatedShipDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: orderitem.FieldEstimatedShipDate,
		})
	}
	if value, ok := oiuo.mutation.EstimatedDeliveryDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderitem.FieldEstimatedDeliveryDate,
		})
	}
	if oiuo.mutation.EstimatedDeliveryDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: orderitem.FieldEstimatedDeliveryDate,
		})
	}
	if value, ok := oiuo.mutation.AutoCancelDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderitem.FieldAutoCancelDate,
		})
	}
	if oiuo.mutation.AutoCancelDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: orderitem.FieldAutoCancelDate,
		})
	}
	if value, ok := oiuo.mutation.DontCancelSetDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderitem.FieldDontCancelSetDate,
		})
	}
	if oiuo.mutation.DontCancelSetDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: orderitem.FieldDontCancelSetDate,
		})
	}
	if value, ok := oiuo.mutation.DontCancelSetUserLogin(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderitem.FieldDontCancelSetUserLogin,
		})
	}
	if oiuo.mutation.DontCancelSetUserLoginCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: orderitem.FieldDontCancelSetUserLogin,
		})
	}
	if value, ok := oiuo.mutation.ShipBeforeDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderitem.FieldShipBeforeDate,
		})
	}
	if oiuo.mutation.ShipBeforeDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: orderitem.FieldShipBeforeDate,
		})
	}
	if value, ok := oiuo.mutation.ShipAfterDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderitem.FieldShipAfterDate,
		})
	}
	if oiuo.mutation.ShipAfterDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: orderitem.FieldShipAfterDate,
		})
	}
	if value, ok := oiuo.mutation.ReserveAfterDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderitem.FieldReserveAfterDate,
		})
	}
	if oiuo.mutation.ReserveAfterDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: orderitem.FieldReserveAfterDate,
		})
	}
	if value, ok := oiuo.mutation.CancelBackOrderDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderitem.FieldCancelBackOrderDate,
		})
	}
	if oiuo.mutation.CancelBackOrderDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: orderitem.FieldCancelBackOrderDate,
		})
	}
	if value, ok := oiuo.mutation.OverrideGlAccountID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldOverrideGlAccountID,
		})
	}
	if value, ok := oiuo.mutation.AddedOverrideGlAccountID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldOverrideGlAccountID,
		})
	}
	if oiuo.mutation.OverrideGlAccountIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderitem.FieldOverrideGlAccountID,
		})
	}
	if value, ok := oiuo.mutation.SalesOpportunityID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldSalesOpportunityID,
		})
	}
	if value, ok := oiuo.mutation.AddedSalesOpportunityID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldSalesOpportunityID,
		})
	}
	if oiuo.mutation.SalesOpportunityIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderitem.FieldSalesOpportunityID,
		})
	}
	if value, ok := oiuo.mutation.ChangeByUserLoginID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderitem.FieldChangeByUserLoginID,
		})
	}
	if oiuo.mutation.ChangeByUserLoginIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: orderitem.FieldChangeByUserLoginID,
		})
	}
	if oiuo.mutation.OrderHeaderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderitem.OrderHeaderTable,
			Columns: []string{orderitem.OrderHeaderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderheader.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oiuo.mutation.OrderHeaderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderitem.OrderHeaderTable,
			Columns: []string{orderitem.OrderHeaderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderheader.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oiuo.mutation.ItemIssuancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderitem.ItemIssuancesTable,
			Columns: []string{orderitem.ItemIssuancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: itemissuance.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oiuo.mutation.RemovedItemIssuancesIDs(); len(nodes) > 0 && !oiuo.mutation.ItemIssuancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderitem.ItemIssuancesTable,
			Columns: []string{orderitem.ItemIssuancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: itemissuance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oiuo.mutation.ItemIssuancesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderitem.ItemIssuancesTable,
			Columns: []string{orderitem.ItemIssuancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: itemissuance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oiuo.mutation.OrderItemPriceInfosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderitem.OrderItemPriceInfosTable,
			Columns: []string{orderitem.OrderItemPriceInfosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitempriceinfo.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oiuo.mutation.RemovedOrderItemPriceInfosIDs(); len(nodes) > 0 && !oiuo.mutation.OrderItemPriceInfosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderitem.OrderItemPriceInfosTable,
			Columns: []string{orderitem.OrderItemPriceInfosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitempriceinfo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oiuo.mutation.OrderItemPriceInfosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderitem.OrderItemPriceInfosTable,
			Columns: []string{orderitem.OrderItemPriceInfosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitempriceinfo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oiuo.mutation.OrderItemShipGroupAssocsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderitem.OrderItemShipGroupAssocsTable,
			Columns: []string{orderitem.OrderItemShipGroupAssocsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitemshipgroupassoc.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oiuo.mutation.RemovedOrderItemShipGroupAssocsIDs(); len(nodes) > 0 && !oiuo.mutation.OrderItemShipGroupAssocsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderitem.OrderItemShipGroupAssocsTable,
			Columns: []string{orderitem.OrderItemShipGroupAssocsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitemshipgroupassoc.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oiuo.mutation.OrderItemShipGroupAssocsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderitem.OrderItemShipGroupAssocsTable,
			Columns: []string{orderitem.OrderItemShipGroupAssocsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitemshipgroupassoc.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oiuo.mutation.OrderStatusesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderitem.OrderStatusesTable,
			Columns: []string{orderitem.OrderStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderstatus.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oiuo.mutation.RemovedOrderStatusesIDs(); len(nodes) > 0 && !oiuo.mutation.OrderStatusesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderitem.OrderStatusesTable,
			Columns: []string{orderitem.OrderStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderstatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oiuo.mutation.OrderStatusesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderitem.OrderStatusesTable,
			Columns: []string{orderitem.OrderStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderstatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &OrderItem{config: oiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, oiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderitem.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
