// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/orderheader"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/orderitem"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/orderitempriceinfo"
)

// OrderItemPriceInfo is the model entity for the OrderItemPriceInfo schema.
type OrderItemPriceInfo struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// OrderItemSeqID holds the value of the "order_item_seq_id" field.
	OrderItemSeqID int `json:"order_item_seq_id,omitempty"`
	// ProductPriceRuleID holds the value of the "product_price_rule_id" field.
	ProductPriceRuleID int `json:"product_price_rule_id,omitempty"`
	// ProductPriceActionSeqID holds the value of the "product_price_action_seq_id" field.
	ProductPriceActionSeqID int `json:"product_price_action_seq_id,omitempty"`
	// ModifyAmount holds the value of the "modify_amount" field.
	ModifyAmount float64 `json:"modify_amount,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// RateCode holds the value of the "rate_code" field.
	RateCode string `json:"rate_code,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OrderItemPriceInfoQuery when eager-loading is set.
	Edges                               OrderItemPriceInfoEdges `json:"edges"`
	order_header_order_item_price_infos *int
	order_item_order_item_price_infos   *int
}

// OrderItemPriceInfoEdges holds the relations/edges for other nodes in the graph.
type OrderItemPriceInfoEdges struct {
	// OrderHeader holds the value of the order_header edge.
	OrderHeader *OrderHeader `json:"order_header,omitempty"`
	// OrderItem holds the value of the order_item edge.
	OrderItem *OrderItem `json:"order_item,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// OrderHeaderOrErr returns the OrderHeader value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderItemPriceInfoEdges) OrderHeaderOrErr() (*OrderHeader, error) {
	if e.loadedTypes[0] {
		if e.OrderHeader == nil {
			// The edge order_header was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: orderheader.Label}
		}
		return e.OrderHeader, nil
	}
	return nil, &NotLoadedError{edge: "order_header"}
}

// OrderItemOrErr returns the OrderItem value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderItemPriceInfoEdges) OrderItemOrErr() (*OrderItem, error) {
	if e.loadedTypes[1] {
		if e.OrderItem == nil {
			// The edge order_item was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: orderitem.Label}
		}
		return e.OrderItem, nil
	}
	return nil, &NotLoadedError{edge: "order_item"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OrderItemPriceInfo) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case orderitempriceinfo.FieldModifyAmount:
			values[i] = new(sql.NullFloat64)
		case orderitempriceinfo.FieldID, orderitempriceinfo.FieldOrderItemSeqID, orderitempriceinfo.FieldProductPriceRuleID, orderitempriceinfo.FieldProductPriceActionSeqID:
			values[i] = new(sql.NullInt64)
		case orderitempriceinfo.FieldDescription, orderitempriceinfo.FieldRateCode:
			values[i] = new(sql.NullString)
		case orderitempriceinfo.FieldCreateTime, orderitempriceinfo.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case orderitempriceinfo.ForeignKeys[0]: // order_header_order_item_price_infos
			values[i] = new(sql.NullInt64)
		case orderitempriceinfo.ForeignKeys[1]: // order_item_order_item_price_infos
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type OrderItemPriceInfo", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OrderItemPriceInfo fields.
func (oipi *OrderItemPriceInfo) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case orderitempriceinfo.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			oipi.ID = int(value.Int64)
		case orderitempriceinfo.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				oipi.CreateTime = value.Time
			}
		case orderitempriceinfo.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				oipi.UpdateTime = value.Time
			}
		case orderitempriceinfo.FieldOrderItemSeqID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order_item_seq_id", values[i])
			} else if value.Valid {
				oipi.OrderItemSeqID = int(value.Int64)
			}
		case orderitempriceinfo.FieldProductPriceRuleID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field product_price_rule_id", values[i])
			} else if value.Valid {
				oipi.ProductPriceRuleID = int(value.Int64)
			}
		case orderitempriceinfo.FieldProductPriceActionSeqID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field product_price_action_seq_id", values[i])
			} else if value.Valid {
				oipi.ProductPriceActionSeqID = int(value.Int64)
			}
		case orderitempriceinfo.FieldModifyAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field modify_amount", values[i])
			} else if value.Valid {
				oipi.ModifyAmount = value.Float64
			}
		case orderitempriceinfo.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				oipi.Description = value.String
			}
		case orderitempriceinfo.FieldRateCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field rate_code", values[i])
			} else if value.Valid {
				oipi.RateCode = value.String
			}
		case orderitempriceinfo.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field order_header_order_item_price_infos", value)
			} else if value.Valid {
				oipi.order_header_order_item_price_infos = new(int)
				*oipi.order_header_order_item_price_infos = int(value.Int64)
			}
		case orderitempriceinfo.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field order_item_order_item_price_infos", value)
			} else if value.Valid {
				oipi.order_item_order_item_price_infos = new(int)
				*oipi.order_item_order_item_price_infos = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryOrderHeader queries the "order_header" edge of the OrderItemPriceInfo entity.
func (oipi *OrderItemPriceInfo) QueryOrderHeader() *OrderHeaderQuery {
	return (&OrderItemPriceInfoClient{config: oipi.config}).QueryOrderHeader(oipi)
}

// QueryOrderItem queries the "order_item" edge of the OrderItemPriceInfo entity.
func (oipi *OrderItemPriceInfo) QueryOrderItem() *OrderItemQuery {
	return (&OrderItemPriceInfoClient{config: oipi.config}).QueryOrderItem(oipi)
}

// Update returns a builder for updating this OrderItemPriceInfo.
// Note that you need to call OrderItemPriceInfo.Unwrap() before calling this method if this OrderItemPriceInfo
// was returned from a transaction, and the transaction was committed or rolled back.
func (oipi *OrderItemPriceInfo) Update() *OrderItemPriceInfoUpdateOne {
	return (&OrderItemPriceInfoClient{config: oipi.config}).UpdateOne(oipi)
}

// Unwrap unwraps the OrderItemPriceInfo entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (oipi *OrderItemPriceInfo) Unwrap() *OrderItemPriceInfo {
	tx, ok := oipi.config.driver.(*txDriver)
	if !ok {
		panic("ent: OrderItemPriceInfo is not a transactional entity")
	}
	oipi.config.driver = tx.drv
	return oipi
}

// String implements the fmt.Stringer.
func (oipi *OrderItemPriceInfo) String() string {
	var builder strings.Builder
	builder.WriteString("OrderItemPriceInfo(")
	builder.WriteString(fmt.Sprintf("id=%v", oipi.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(oipi.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(oipi.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", order_item_seq_id=")
	builder.WriteString(fmt.Sprintf("%v", oipi.OrderItemSeqID))
	builder.WriteString(", product_price_rule_id=")
	builder.WriteString(fmt.Sprintf("%v", oipi.ProductPriceRuleID))
	builder.WriteString(", product_price_action_seq_id=")
	builder.WriteString(fmt.Sprintf("%v", oipi.ProductPriceActionSeqID))
	builder.WriteString(", modify_amount=")
	builder.WriteString(fmt.Sprintf("%v", oipi.ModifyAmount))
	builder.WriteString(", description=")
	builder.WriteString(oipi.Description)
	builder.WriteString(", rate_code=")
	builder.WriteString(oipi.RateCode)
	builder.WriteByte(')')
	return builder.String()
}

// OrderItemPriceInfos is a parsable slice of OrderItemPriceInfo.
type OrderItemPriceInfos []*OrderItemPriceInfo

func (oipi OrderItemPriceInfos) config(cfg config) {
	for _i := range oipi {
		oipi[_i].config = cfg
	}
}
