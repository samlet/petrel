// Code generated by entc, DO NOT EDIT.

package orderitempriceinfo

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.OrderItemPriceInfo {
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.OrderItemPriceInfo {
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.OrderItemPriceInfo {
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.OrderItemPriceInfo {
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.OrderItemPriceInfo {
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.OrderItemPriceInfo {
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.OrderItemPriceInfo {
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.OrderItemPriceInfo {
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.OrderItemPriceInfo {
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.OrderItemPriceInfo {
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.OrderItemPriceInfo {
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// OrderItemSeqID applies equality check predicate on the "order_item_seq_id" field. It's identical to OrderItemSeqIDEQ.
func OrderItemSeqID(v int) predicate.OrderItemPriceInfo {
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderItemSeqID), v))
	})
}

// ProductPriceRuleID applies equality check predicate on the "product_price_rule_id" field. It's identical to ProductPriceRuleIDEQ.
func ProductPriceRuleID(v int) predicate.OrderItemPriceInfo {
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProductPriceRuleID), v))
	})
}

// ProductPriceActionSeqID applies equality check predicate on the "product_price_action_seq_id" field. It's identical to ProductPriceActionSeqIDEQ.
func ProductPriceActionSeqID(v int) predicate.OrderItemPriceInfo {
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProductPriceActionSeqID), v))
	})
}

// ModifyAmount applies equality check predicate on the "modify_amount" field. It's identical to ModifyAmountEQ.
func ModifyAmount(v float64) predicate.OrderItemPriceInfo {
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldModifyAmount), v))
	})
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.OrderItemPriceInfo {
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// RateCode applies equality check predicate on the "rate_code" field. It's identical to RateCodeEQ.
func RateCode(v string) predicate.OrderItemPriceInfo {
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRateCode), v))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.OrderItemPriceInfo {
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.OrderItemPriceInfo {
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.OrderItemPriceInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.OrderItemPriceInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.OrderItemPriceInfo {
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.OrderItemPriceInfo {
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.OrderItemPriceInfo {
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.OrderItemPriceInfo {
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), v))
	})
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.OrderItemPriceInfo {
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.OrderItemPriceInfo {
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.OrderItemPriceInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.OrderItemPriceInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.OrderItemPriceInfo {
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.OrderItemPriceInfo {
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.OrderItemPriceInfo {
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.OrderItemPriceInfo {
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateTime), v))
	})
}

// OrderItemSeqIDEQ applies the EQ predicate on the "order_item_seq_id" field.
func OrderItemSeqIDEQ(v int) predicate.OrderItemPriceInfo {
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderItemSeqID), v))
	})
}

// OrderItemSeqIDNEQ applies the NEQ predicate on the "order_item_seq_id" field.
func OrderItemSeqIDNEQ(v int) predicate.OrderItemPriceInfo {
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOrderItemSeqID), v))
	})
}

// OrderItemSeqIDIn applies the In predicate on the "order_item_seq_id" field.
func OrderItemSeqIDIn(vs ...int) predicate.OrderItemPriceInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOrderItemSeqID), v...))
	})
}

// OrderItemSeqIDNotIn applies the NotIn predicate on the "order_item_seq_id" field.
func OrderItemSeqIDNotIn(vs ...int) predicate.OrderItemPriceInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOrderItemSeqID), v...))
	})
}

// OrderItemSeqIDGT applies the GT predicate on the "order_item_seq_id" field.
func OrderItemSeqIDGT(v int) predicate.OrderItemPriceInfo {
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOrderItemSeqID), v))
	})
}

// OrderItemSeqIDGTE applies the GTE predicate on the "order_item_seq_id" field.
func OrderItemSeqIDGTE(v int) predicate.OrderItemPriceInfo {
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOrderItemSeqID), v))
	})
}

// OrderItemSeqIDLT applies the LT predicate on the "order_item_seq_id" field.
func OrderItemSeqIDLT(v int) predicate.OrderItemPriceInfo {
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOrderItemSeqID), v))
	})
}

// OrderItemSeqIDLTE applies the LTE predicate on the "order_item_seq_id" field.
func OrderItemSeqIDLTE(v int) predicate.OrderItemPriceInfo {
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOrderItemSeqID), v))
	})
}

// OrderItemSeqIDIsNil applies the IsNil predicate on the "order_item_seq_id" field.
func OrderItemSeqIDIsNil() predicate.OrderItemPriceInfo {
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOrderItemSeqID)))
	})
}

// OrderItemSeqIDNotNil applies the NotNil predicate on the "order_item_seq_id" field.
func OrderItemSeqIDNotNil() predicate.OrderItemPriceInfo {
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOrderItemSeqID)))
	})
}

// ProductPriceRuleIDEQ applies the EQ predicate on the "product_price_rule_id" field.
func ProductPriceRuleIDEQ(v int) predicate.OrderItemPriceInfo {
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProductPriceRuleID), v))
	})
}

// ProductPriceRuleIDNEQ applies the NEQ predicate on the "product_price_rule_id" field.
func ProductPriceRuleIDNEQ(v int) predicate.OrderItemPriceInfo {
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProductPriceRuleID), v))
	})
}

// ProductPriceRuleIDIn applies the In predicate on the "product_price_rule_id" field.
func ProductPriceRuleIDIn(vs ...int) predicate.OrderItemPriceInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldProductPriceRuleID), v...))
	})
}

// ProductPriceRuleIDNotIn applies the NotIn predicate on the "product_price_rule_id" field.
func ProductPriceRuleIDNotIn(vs ...int) predicate.OrderItemPriceInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldProductPriceRuleID), v...))
	})
}

// ProductPriceRuleIDGT applies the GT predicate on the "product_price_rule_id" field.
func ProductPriceRuleIDGT(v int) predicate.OrderItemPriceInfo {
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProductPriceRuleID), v))
	})
}

// ProductPriceRuleIDGTE applies the GTE predicate on the "product_price_rule_id" field.
func ProductPriceRuleIDGTE(v int) predicate.OrderItemPriceInfo {
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProductPriceRuleID), v))
	})
}

// ProductPriceRuleIDLT applies the LT predicate on the "product_price_rule_id" field.
func ProductPriceRuleIDLT(v int) predicate.OrderItemPriceInfo {
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProductPriceRuleID), v))
	})
}

// ProductPriceRuleIDLTE applies the LTE predicate on the "product_price_rule_id" field.
func ProductPriceRuleIDLTE(v int) predicate.OrderItemPriceInfo {
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProductPriceRuleID), v))
	})
}

// ProductPriceRuleIDIsNil applies the IsNil predicate on the "product_price_rule_id" field.
func ProductPriceRuleIDIsNil() predicate.OrderItemPriceInfo {
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldProductPriceRuleID)))
	})
}

// ProductPriceRuleIDNotNil applies the NotNil predicate on the "product_price_rule_id" field.
func ProductPriceRuleIDNotNil() predicate.OrderItemPriceInfo {
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldProductPriceRuleID)))
	})
}

// ProductPriceActionSeqIDEQ applies the EQ predicate on the "product_price_action_seq_id" field.
func ProductPriceActionSeqIDEQ(v int) predicate.OrderItemPriceInfo {
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProductPriceActionSeqID), v))
	})
}

// ProductPriceActionSeqIDNEQ applies the NEQ predicate on the "product_price_action_seq_id" field.
func ProductPriceActionSeqIDNEQ(v int) predicate.OrderItemPriceInfo {
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProductPriceActionSeqID), v))
	})
}

// ProductPriceActionSeqIDIn applies the In predicate on the "product_price_action_seq_id" field.
func ProductPriceActionSeqIDIn(vs ...int) predicate.OrderItemPriceInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldProductPriceActionSeqID), v...))
	})
}

// ProductPriceActionSeqIDNotIn applies the NotIn predicate on the "product_price_action_seq_id" field.
func ProductPriceActionSeqIDNotIn(vs ...int) predicate.OrderItemPriceInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldProductPriceActionSeqID), v...))
	})
}

// ProductPriceActionSeqIDGT applies the GT predicate on the "product_price_action_seq_id" field.
func ProductPriceActionSeqIDGT(v int) predicate.OrderItemPriceInfo {
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProductPriceActionSeqID), v))
	})
}

// ProductPriceActionSeqIDGTE applies the GTE predicate on the "product_price_action_seq_id" field.
func ProductPriceActionSeqIDGTE(v int) predicate.OrderItemPriceInfo {
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProductPriceActionSeqID), v))
	})
}

// ProductPriceActionSeqIDLT applies the LT predicate on the "product_price_action_seq_id" field.
func ProductPriceActionSeqIDLT(v int) predicate.OrderItemPriceInfo {
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProductPriceActionSeqID), v))
	})
}

// ProductPriceActionSeqIDLTE applies the LTE predicate on the "product_price_action_seq_id" field.
func ProductPriceActionSeqIDLTE(v int) predicate.OrderItemPriceInfo {
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProductPriceActionSeqID), v))
	})
}

// ProductPriceActionSeqIDIsNil applies the IsNil predicate on the "product_price_action_seq_id" field.
func ProductPriceActionSeqIDIsNil() predicate.OrderItemPriceInfo {
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldProductPriceActionSeqID)))
	})
}

// ProductPriceActionSeqIDNotNil applies the NotNil predicate on the "product_price_action_seq_id" field.
func ProductPriceActionSeqIDNotNil() predicate.OrderItemPriceInfo {
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldProductPriceActionSeqID)))
	})
}

// ModifyAmountEQ applies the EQ predicate on the "modify_amount" field.
func ModifyAmountEQ(v float64) predicate.OrderItemPriceInfo {
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldModifyAmount), v))
	})
}

// ModifyAmountNEQ applies the NEQ predicate on the "modify_amount" field.
func ModifyAmountNEQ(v float64) predicate.OrderItemPriceInfo {
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldModifyAmount), v))
	})
}

// ModifyAmountIn applies the In predicate on the "modify_amount" field.
func ModifyAmountIn(vs ...float64) predicate.OrderItemPriceInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldModifyAmount), v...))
	})
}

// ModifyAmountNotIn applies the NotIn predicate on the "modify_amount" field.
func ModifyAmountNotIn(vs ...float64) predicate.OrderItemPriceInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldModifyAmount), v...))
	})
}

// ModifyAmountGT applies the GT predicate on the "modify_amount" field.
func ModifyAmountGT(v float64) predicate.OrderItemPriceInfo {
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldModifyAmount), v))
	})
}

// ModifyAmountGTE applies the GTE predicate on the "modify_amount" field.
func ModifyAmountGTE(v float64) predicate.OrderItemPriceInfo {
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldModifyAmount), v))
	})
}

// ModifyAmountLT applies the LT predicate on the "modify_amount" field.
func ModifyAmountLT(v float64) predicate.OrderItemPriceInfo {
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldModifyAmount), v))
	})
}

// ModifyAmountLTE applies the LTE predicate on the "modify_amount" field.
func ModifyAmountLTE(v float64) predicate.OrderItemPriceInfo {
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldModifyAmount), v))
	})
}

// ModifyAmountIsNil applies the IsNil predicate on the "modify_amount" field.
func ModifyAmountIsNil() predicate.OrderItemPriceInfo {
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldModifyAmount)))
	})
}

// ModifyAmountNotNil applies the NotNil predicate on the "modify_amount" field.
func ModifyAmountNotNil() predicate.OrderItemPriceInfo {
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldModifyAmount)))
	})
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.OrderItemPriceInfo {
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.OrderItemPriceInfo {
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDescription), v))
	})
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.OrderItemPriceInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDescription), v...))
	})
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.OrderItemPriceInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDescription), v...))
	})
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.OrderItemPriceInfo {
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDescription), v))
	})
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.OrderItemPriceInfo {
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDescription), v))
	})
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.OrderItemPriceInfo {
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDescription), v))
	})
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.OrderItemPriceInfo {
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDescription), v))
	})
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.OrderItemPriceInfo {
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDescription), v))
	})
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.OrderItemPriceInfo {
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDescription), v))
	})
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.OrderItemPriceInfo {
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDescription), v))
	})
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.OrderItemPriceInfo {
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDescription)))
	})
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.OrderItemPriceInfo {
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDescription)))
	})
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.OrderItemPriceInfo {
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDescription), v))
	})
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.OrderItemPriceInfo {
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDescription), v))
	})
}

// RateCodeEQ applies the EQ predicate on the "rate_code" field.
func RateCodeEQ(v string) predicate.OrderItemPriceInfo {
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRateCode), v))
	})
}

// RateCodeNEQ applies the NEQ predicate on the "rate_code" field.
func RateCodeNEQ(v string) predicate.OrderItemPriceInfo {
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRateCode), v))
	})
}

// RateCodeIn applies the In predicate on the "rate_code" field.
func RateCodeIn(vs ...string) predicate.OrderItemPriceInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRateCode), v...))
	})
}

// RateCodeNotIn applies the NotIn predicate on the "rate_code" field.
func RateCodeNotIn(vs ...string) predicate.OrderItemPriceInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRateCode), v...))
	})
}

// RateCodeGT applies the GT predicate on the "rate_code" field.
func RateCodeGT(v string) predicate.OrderItemPriceInfo {
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRateCode), v))
	})
}

// RateCodeGTE applies the GTE predicate on the "rate_code" field.
func RateCodeGTE(v string) predicate.OrderItemPriceInfo {
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRateCode), v))
	})
}

// RateCodeLT applies the LT predicate on the "rate_code" field.
func RateCodeLT(v string) predicate.OrderItemPriceInfo {
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRateCode), v))
	})
}

// RateCodeLTE applies the LTE predicate on the "rate_code" field.
func RateCodeLTE(v string) predicate.OrderItemPriceInfo {
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRateCode), v))
	})
}

// RateCodeContains applies the Contains predicate on the "rate_code" field.
func RateCodeContains(v string) predicate.OrderItemPriceInfo {
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRateCode), v))
	})
}

// RateCodeHasPrefix applies the HasPrefix predicate on the "rate_code" field.
func RateCodeHasPrefix(v string) predicate.OrderItemPriceInfo {
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRateCode), v))
	})
}

// RateCodeHasSuffix applies the HasSuffix predicate on the "rate_code" field.
func RateCodeHasSuffix(v string) predicate.OrderItemPriceInfo {
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRateCode), v))
	})
}

// RateCodeIsNil applies the IsNil predicate on the "rate_code" field.
func RateCodeIsNil() predicate.OrderItemPriceInfo {
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRateCode)))
	})
}

// RateCodeNotNil applies the NotNil predicate on the "rate_code" field.
func RateCodeNotNil() predicate.OrderItemPriceInfo {
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRateCode)))
	})
}

// RateCodeEqualFold applies the EqualFold predicate on the "rate_code" field.
func RateCodeEqualFold(v string) predicate.OrderItemPriceInfo {
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRateCode), v))
	})
}

// RateCodeContainsFold applies the ContainsFold predicate on the "rate_code" field.
func RateCodeContainsFold(v string) predicate.OrderItemPriceInfo {
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRateCode), v))
	})
}

// HasOrderHeader applies the HasEdge predicate on the "order_header" edge.
func HasOrderHeader() predicate.OrderItemPriceInfo {
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderHeaderTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OrderHeaderTable, OrderHeaderColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderHeaderWith applies the HasEdge predicate on the "order_header" edge with a given conditions (other predicates).
func HasOrderHeaderWith(preds ...predicate.OrderHeader) predicate.OrderItemPriceInfo {
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderHeaderInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OrderHeaderTable, OrderHeaderColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrderItem applies the HasEdge predicate on the "order_item" edge.
func HasOrderItem() predicate.OrderItemPriceInfo {
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderItemTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OrderItemTable, OrderItemColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderItemWith applies the HasEdge predicate on the "order_item" edge with a given conditions (other predicates).
func HasOrderItemWith(preds ...predicate.OrderItem) predicate.OrderItemPriceInfo {
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderItemInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OrderItemTable, OrderItemColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.OrderItemPriceInfo) predicate.OrderItemPriceInfo {
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.OrderItemPriceInfo) predicate.OrderItemPriceInfo {
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.OrderItemPriceInfo) predicate.OrderItemPriceInfo {
	return predicate.OrderItemPriceInfo(func(s *sql.Selector) {
		p(s.Not())
	})
}
