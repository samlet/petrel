// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/orderheader"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/orderitem"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/orderitempriceinfo"
)

// OrderItemPriceInfoCreate is the builder for creating a OrderItemPriceInfo entity.
type OrderItemPriceInfoCreate struct {
	config
	mutation *OrderItemPriceInfoMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (oipic *OrderItemPriceInfoCreate) SetCreateTime(t time.Time) *OrderItemPriceInfoCreate {
	oipic.mutation.SetCreateTime(t)
	return oipic
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (oipic *OrderItemPriceInfoCreate) SetNillableCreateTime(t *time.Time) *OrderItemPriceInfoCreate {
	if t != nil {
		oipic.SetCreateTime(*t)
	}
	return oipic
}

// SetUpdateTime sets the "update_time" field.
func (oipic *OrderItemPriceInfoCreate) SetUpdateTime(t time.Time) *OrderItemPriceInfoCreate {
	oipic.mutation.SetUpdateTime(t)
	return oipic
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (oipic *OrderItemPriceInfoCreate) SetNillableUpdateTime(t *time.Time) *OrderItemPriceInfoCreate {
	if t != nil {
		oipic.SetUpdateTime(*t)
	}
	return oipic
}

// SetOrderItemSeqID sets the "order_item_seq_id" field.
func (oipic *OrderItemPriceInfoCreate) SetOrderItemSeqID(i int) *OrderItemPriceInfoCreate {
	oipic.mutation.SetOrderItemSeqID(i)
	return oipic
}

// SetNillableOrderItemSeqID sets the "order_item_seq_id" field if the given value is not nil.
func (oipic *OrderItemPriceInfoCreate) SetNillableOrderItemSeqID(i *int) *OrderItemPriceInfoCreate {
	if i != nil {
		oipic.SetOrderItemSeqID(*i)
	}
	return oipic
}

// SetProductPriceRuleID sets the "product_price_rule_id" field.
func (oipic *OrderItemPriceInfoCreate) SetProductPriceRuleID(i int) *OrderItemPriceInfoCreate {
	oipic.mutation.SetProductPriceRuleID(i)
	return oipic
}

// SetNillableProductPriceRuleID sets the "product_price_rule_id" field if the given value is not nil.
func (oipic *OrderItemPriceInfoCreate) SetNillableProductPriceRuleID(i *int) *OrderItemPriceInfoCreate {
	if i != nil {
		oipic.SetProductPriceRuleID(*i)
	}
	return oipic
}

// SetProductPriceActionSeqID sets the "product_price_action_seq_id" field.
func (oipic *OrderItemPriceInfoCreate) SetProductPriceActionSeqID(i int) *OrderItemPriceInfoCreate {
	oipic.mutation.SetProductPriceActionSeqID(i)
	return oipic
}

// SetNillableProductPriceActionSeqID sets the "product_price_action_seq_id" field if the given value is not nil.
func (oipic *OrderItemPriceInfoCreate) SetNillableProductPriceActionSeqID(i *int) *OrderItemPriceInfoCreate {
	if i != nil {
		oipic.SetProductPriceActionSeqID(*i)
	}
	return oipic
}

// SetModifyAmount sets the "modify_amount" field.
func (oipic *OrderItemPriceInfoCreate) SetModifyAmount(f float64) *OrderItemPriceInfoCreate {
	oipic.mutation.SetModifyAmount(f)
	return oipic
}

// SetNillableModifyAmount sets the "modify_amount" field if the given value is not nil.
func (oipic *OrderItemPriceInfoCreate) SetNillableModifyAmount(f *float64) *OrderItemPriceInfoCreate {
	if f != nil {
		oipic.SetModifyAmount(*f)
	}
	return oipic
}

// SetDescription sets the "description" field.
func (oipic *OrderItemPriceInfoCreate) SetDescription(s string) *OrderItemPriceInfoCreate {
	oipic.mutation.SetDescription(s)
	return oipic
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (oipic *OrderItemPriceInfoCreate) SetNillableDescription(s *string) *OrderItemPriceInfoCreate {
	if s != nil {
		oipic.SetDescription(*s)
	}
	return oipic
}

// SetRateCode sets the "rate_code" field.
func (oipic *OrderItemPriceInfoCreate) SetRateCode(s string) *OrderItemPriceInfoCreate {
	oipic.mutation.SetRateCode(s)
	return oipic
}

// SetNillableRateCode sets the "rate_code" field if the given value is not nil.
func (oipic *OrderItemPriceInfoCreate) SetNillableRateCode(s *string) *OrderItemPriceInfoCreate {
	if s != nil {
		oipic.SetRateCode(*s)
	}
	return oipic
}

// SetOrderHeaderID sets the "order_header" edge to the OrderHeader entity by ID.
func (oipic *OrderItemPriceInfoCreate) SetOrderHeaderID(id int) *OrderItemPriceInfoCreate {
	oipic.mutation.SetOrderHeaderID(id)
	return oipic
}

// SetNillableOrderHeaderID sets the "order_header" edge to the OrderHeader entity by ID if the given value is not nil.
func (oipic *OrderItemPriceInfoCreate) SetNillableOrderHeaderID(id *int) *OrderItemPriceInfoCreate {
	if id != nil {
		oipic = oipic.SetOrderHeaderID(*id)
	}
	return oipic
}

// SetOrderHeader sets the "order_header" edge to the OrderHeader entity.
func (oipic *OrderItemPriceInfoCreate) SetOrderHeader(o *OrderHeader) *OrderItemPriceInfoCreate {
	return oipic.SetOrderHeaderID(o.ID)
}

// SetOrderItemID sets the "order_item" edge to the OrderItem entity by ID.
func (oipic *OrderItemPriceInfoCreate) SetOrderItemID(id int) *OrderItemPriceInfoCreate {
	oipic.mutation.SetOrderItemID(id)
	return oipic
}

// SetNillableOrderItemID sets the "order_item" edge to the OrderItem entity by ID if the given value is not nil.
func (oipic *OrderItemPriceInfoCreate) SetNillableOrderItemID(id *int) *OrderItemPriceInfoCreate {
	if id != nil {
		oipic = oipic.SetOrderItemID(*id)
	}
	return oipic
}

// SetOrderItem sets the "order_item" edge to the OrderItem entity.
func (oipic *OrderItemPriceInfoCreate) SetOrderItem(o *OrderItem) *OrderItemPriceInfoCreate {
	return oipic.SetOrderItemID(o.ID)
}

// Mutation returns the OrderItemPriceInfoMutation object of the builder.
func (oipic *OrderItemPriceInfoCreate) Mutation() *OrderItemPriceInfoMutation {
	return oipic.mutation
}

// Save creates the OrderItemPriceInfo in the database.
func (oipic *OrderItemPriceInfoCreate) Save(ctx context.Context) (*OrderItemPriceInfo, error) {
	var (
		err  error
		node *OrderItemPriceInfo
	)
	oipic.defaults()
	if len(oipic.hooks) == 0 {
		if err = oipic.check(); err != nil {
			return nil, err
		}
		node, err = oipic.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderItemPriceInfoMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = oipic.check(); err != nil {
				return nil, err
			}
			oipic.mutation = mutation
			node, err = oipic.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(oipic.hooks) - 1; i >= 0; i-- {
			mut = oipic.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, oipic.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (oipic *OrderItemPriceInfoCreate) SaveX(ctx context.Context) *OrderItemPriceInfo {
	v, err := oipic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (oipic *OrderItemPriceInfoCreate) defaults() {
	if _, ok := oipic.mutation.CreateTime(); !ok {
		v := orderitempriceinfo.DefaultCreateTime()
		oipic.mutation.SetCreateTime(v)
	}
	if _, ok := oipic.mutation.UpdateTime(); !ok {
		v := orderitempriceinfo.DefaultUpdateTime()
		oipic.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oipic *OrderItemPriceInfoCreate) check() error {
	if _, ok := oipic.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New("ent: missing required field \"create_time\"")}
	}
	if _, ok := oipic.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New("ent: missing required field \"update_time\"")}
	}
	return nil
}

func (oipic *OrderItemPriceInfoCreate) sqlSave(ctx context.Context) (*OrderItemPriceInfo, error) {
	_node, _spec := oipic.createSpec()
	if err := sqlgraph.CreateNode(ctx, oipic.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (oipic *OrderItemPriceInfoCreate) createSpec() (*OrderItemPriceInfo, *sqlgraph.CreateSpec) {
	var (
		_node = &OrderItemPriceInfo{config: oipic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: orderitempriceinfo.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: orderitempriceinfo.FieldID,
			},
		}
	)
	if value, ok := oipic.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderitempriceinfo.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := oipic.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderitempriceinfo.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := oipic.mutation.OrderItemSeqID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitempriceinfo.FieldOrderItemSeqID,
		})
		_node.OrderItemSeqID = value
	}
	if value, ok := oipic.mutation.ProductPriceRuleID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitempriceinfo.FieldProductPriceRuleID,
		})
		_node.ProductPriceRuleID = value
	}
	if value, ok := oipic.mutation.ProductPriceActionSeqID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitempriceinfo.FieldProductPriceActionSeqID,
		})
		_node.ProductPriceActionSeqID = value
	}
	if value, ok := oipic.mutation.ModifyAmount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderitempriceinfo.FieldModifyAmount,
		})
		_node.ModifyAmount = value
	}
	if value, ok := oipic.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderitempriceinfo.FieldDescription,
		})
		_node.Description = value
	}
	if value, ok := oipic.mutation.RateCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderitempriceinfo.FieldRateCode,
		})
		_node.RateCode = value
	}
	if nodes := oipic.mutation.OrderHeaderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderitempriceinfo.OrderHeaderTable,
			Columns: []string{orderitempriceinfo.OrderHeaderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderheader.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.order_header_order_item_price_infos = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oipic.mutation.OrderItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderitempriceinfo.OrderItemTable,
			Columns: []string{orderitempriceinfo.OrderItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.order_item_order_item_price_infos = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OrderItemPriceInfoCreateBulk is the builder for creating many OrderItemPriceInfo entities in bulk.
type OrderItemPriceInfoCreateBulk struct {
	config
	builders []*OrderItemPriceInfoCreate
}

// Save creates the OrderItemPriceInfo entities in the database.
func (oipicb *OrderItemPriceInfoCreateBulk) Save(ctx context.Context) ([]*OrderItemPriceInfo, error) {
	specs := make([]*sqlgraph.CreateSpec, len(oipicb.builders))
	nodes := make([]*OrderItemPriceInfo, len(oipicb.builders))
	mutators := make([]Mutator, len(oipicb.builders))
	for i := range oipicb.builders {
		func(i int, root context.Context) {
			builder := oipicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrderItemPriceInfoMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, oipicb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, oipicb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, oipicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (oipicb *OrderItemPriceInfoCreateBulk) SaveX(ctx context.Context) []*OrderItemPriceInfo {
	v, err := oipicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
