// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/orderheader"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/orderitem"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/orderitempriceinfo"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/predicate"
)

// OrderItemPriceInfoQuery is the builder for querying OrderItemPriceInfo entities.
type OrderItemPriceInfoQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.OrderItemPriceInfo
	// eager-loading edges.
	withOrderHeader *OrderHeaderQuery
	withOrderItem   *OrderItemQuery
	withFKs         bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the OrderItemPriceInfoQuery builder.
func (oipiq *OrderItemPriceInfoQuery) Where(ps ...predicate.OrderItemPriceInfo) *OrderItemPriceInfoQuery {
	oipiq.predicates = append(oipiq.predicates, ps...)
	return oipiq
}

// Limit adds a limit step to the query.
func (oipiq *OrderItemPriceInfoQuery) Limit(limit int) *OrderItemPriceInfoQuery {
	oipiq.limit = &limit
	return oipiq
}

// Offset adds an offset step to the query.
func (oipiq *OrderItemPriceInfoQuery) Offset(offset int) *OrderItemPriceInfoQuery {
	oipiq.offset = &offset
	return oipiq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (oipiq *OrderItemPriceInfoQuery) Unique(unique bool) *OrderItemPriceInfoQuery {
	oipiq.unique = &unique
	return oipiq
}

// Order adds an order step to the query.
func (oipiq *OrderItemPriceInfoQuery) Order(o ...OrderFunc) *OrderItemPriceInfoQuery {
	oipiq.order = append(oipiq.order, o...)
	return oipiq
}

// QueryOrderHeader chains the current query on the "order_header" edge.
func (oipiq *OrderItemPriceInfoQuery) QueryOrderHeader() *OrderHeaderQuery {
	query := &OrderHeaderQuery{config: oipiq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := oipiq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := oipiq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(orderitempriceinfo.Table, orderitempriceinfo.FieldID, selector),
			sqlgraph.To(orderheader.Table, orderheader.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, orderitempriceinfo.OrderHeaderTable, orderitempriceinfo.OrderHeaderColumn),
		)
		fromU = sqlgraph.SetNeighbors(oipiq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOrderItem chains the current query on the "order_item" edge.
func (oipiq *OrderItemPriceInfoQuery) QueryOrderItem() *OrderItemQuery {
	query := &OrderItemQuery{config: oipiq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := oipiq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := oipiq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(orderitempriceinfo.Table, orderitempriceinfo.FieldID, selector),
			sqlgraph.To(orderitem.Table, orderitem.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, orderitempriceinfo.OrderItemTable, orderitempriceinfo.OrderItemColumn),
		)
		fromU = sqlgraph.SetNeighbors(oipiq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first OrderItemPriceInfo entity from the query.
// Returns a *NotFoundError when no OrderItemPriceInfo was found.
func (oipiq *OrderItemPriceInfoQuery) First(ctx context.Context) (*OrderItemPriceInfo, error) {
	nodes, err := oipiq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{orderitempriceinfo.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (oipiq *OrderItemPriceInfoQuery) FirstX(ctx context.Context) *OrderItemPriceInfo {
	node, err := oipiq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first OrderItemPriceInfo ID from the query.
// Returns a *NotFoundError when no OrderItemPriceInfo ID was found.
func (oipiq *OrderItemPriceInfoQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = oipiq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{orderitempriceinfo.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (oipiq *OrderItemPriceInfoQuery) FirstIDX(ctx context.Context) int {
	id, err := oipiq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single OrderItemPriceInfo entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one OrderItemPriceInfo entity is not found.
// Returns a *NotFoundError when no OrderItemPriceInfo entities are found.
func (oipiq *OrderItemPriceInfoQuery) Only(ctx context.Context) (*OrderItemPriceInfo, error) {
	nodes, err := oipiq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{orderitempriceinfo.Label}
	default:
		return nil, &NotSingularError{orderitempriceinfo.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (oipiq *OrderItemPriceInfoQuery) OnlyX(ctx context.Context) *OrderItemPriceInfo {
	node, err := oipiq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only OrderItemPriceInfo ID in the query.
// Returns a *NotSingularError when exactly one OrderItemPriceInfo ID is not found.
// Returns a *NotFoundError when no entities are found.
func (oipiq *OrderItemPriceInfoQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = oipiq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{orderitempriceinfo.Label}
	default:
		err = &NotSingularError{orderitempriceinfo.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (oipiq *OrderItemPriceInfoQuery) OnlyIDX(ctx context.Context) int {
	id, err := oipiq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of OrderItemPriceInfos.
func (oipiq *OrderItemPriceInfoQuery) All(ctx context.Context) ([]*OrderItemPriceInfo, error) {
	if err := oipiq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return oipiq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (oipiq *OrderItemPriceInfoQuery) AllX(ctx context.Context) []*OrderItemPriceInfo {
	nodes, err := oipiq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of OrderItemPriceInfo IDs.
func (oipiq *OrderItemPriceInfoQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := oipiq.Select(orderitempriceinfo.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (oipiq *OrderItemPriceInfoQuery) IDsX(ctx context.Context) []int {
	ids, err := oipiq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (oipiq *OrderItemPriceInfoQuery) Count(ctx context.Context) (int, error) {
	if err := oipiq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return oipiq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (oipiq *OrderItemPriceInfoQuery) CountX(ctx context.Context) int {
	count, err := oipiq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (oipiq *OrderItemPriceInfoQuery) Exist(ctx context.Context) (bool, error) {
	if err := oipiq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return oipiq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (oipiq *OrderItemPriceInfoQuery) ExistX(ctx context.Context) bool {
	exist, err := oipiq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the OrderItemPriceInfoQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (oipiq *OrderItemPriceInfoQuery) Clone() *OrderItemPriceInfoQuery {
	if oipiq == nil {
		return nil
	}
	return &OrderItemPriceInfoQuery{
		config:          oipiq.config,
		limit:           oipiq.limit,
		offset:          oipiq.offset,
		order:           append([]OrderFunc{}, oipiq.order...),
		predicates:      append([]predicate.OrderItemPriceInfo{}, oipiq.predicates...),
		withOrderHeader: oipiq.withOrderHeader.Clone(),
		withOrderItem:   oipiq.withOrderItem.Clone(),
		// clone intermediate query.
		sql:  oipiq.sql.Clone(),
		path: oipiq.path,
	}
}

// WithOrderHeader tells the query-builder to eager-load the nodes that are connected to
// the "order_header" edge. The optional arguments are used to configure the query builder of the edge.
func (oipiq *OrderItemPriceInfoQuery) WithOrderHeader(opts ...func(*OrderHeaderQuery)) *OrderItemPriceInfoQuery {
	query := &OrderHeaderQuery{config: oipiq.config}
	for _, opt := range opts {
		opt(query)
	}
	oipiq.withOrderHeader = query
	return oipiq
}

// WithOrderItem tells the query-builder to eager-load the nodes that are connected to
// the "order_item" edge. The optional arguments are used to configure the query builder of the edge.
func (oipiq *OrderItemPriceInfoQuery) WithOrderItem(opts ...func(*OrderItemQuery)) *OrderItemPriceInfoQuery {
	query := &OrderItemQuery{config: oipiq.config}
	for _, opt := range opts {
		opt(query)
	}
	oipiq.withOrderItem = query
	return oipiq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.OrderItemPriceInfo.Query().
//		GroupBy(orderitempriceinfo.FieldCreateTime).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (oipiq *OrderItemPriceInfoQuery) GroupBy(field string, fields ...string) *OrderItemPriceInfoGroupBy {
	group := &OrderItemPriceInfoGroupBy{config: oipiq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := oipiq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return oipiq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//	}
//
//	client.OrderItemPriceInfo.Query().
//		Select(orderitempriceinfo.FieldCreateTime).
//		Scan(ctx, &v)
//
func (oipiq *OrderItemPriceInfoQuery) Select(field string, fields ...string) *OrderItemPriceInfoSelect {
	oipiq.fields = append([]string{field}, fields...)
	return &OrderItemPriceInfoSelect{OrderItemPriceInfoQuery: oipiq}
}

func (oipiq *OrderItemPriceInfoQuery) prepareQuery(ctx context.Context) error {
	for _, f := range oipiq.fields {
		if !orderitempriceinfo.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if oipiq.path != nil {
		prev, err := oipiq.path(ctx)
		if err != nil {
			return err
		}
		oipiq.sql = prev
	}
	return nil
}

func (oipiq *OrderItemPriceInfoQuery) sqlAll(ctx context.Context) ([]*OrderItemPriceInfo, error) {
	var (
		nodes       = []*OrderItemPriceInfo{}
		withFKs     = oipiq.withFKs
		_spec       = oipiq.querySpec()
		loadedTypes = [2]bool{
			oipiq.withOrderHeader != nil,
			oipiq.withOrderItem != nil,
		}
	)
	if oipiq.withOrderHeader != nil || oipiq.withOrderItem != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, orderitempriceinfo.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &OrderItemPriceInfo{config: oipiq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, oipiq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := oipiq.withOrderHeader; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*OrderItemPriceInfo)
		for i := range nodes {
			if nodes[i].order_header_order_item_price_infos == nil {
				continue
			}
			fk := *nodes[i].order_header_order_item_price_infos
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(orderheader.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "order_header_order_item_price_infos" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.OrderHeader = n
			}
		}
	}

	if query := oipiq.withOrderItem; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*OrderItemPriceInfo)
		for i := range nodes {
			if nodes[i].order_item_order_item_price_infos == nil {
				continue
			}
			fk := *nodes[i].order_item_order_item_price_infos
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(orderitem.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "order_item_order_item_price_infos" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.OrderItem = n
			}
		}
	}

	return nodes, nil
}

func (oipiq *OrderItemPriceInfoQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := oipiq.querySpec()
	return sqlgraph.CountNodes(ctx, oipiq.driver, _spec)
}

func (oipiq *OrderItemPriceInfoQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := oipiq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (oipiq *OrderItemPriceInfoQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   orderitempriceinfo.Table,
			Columns: orderitempriceinfo.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: orderitempriceinfo.FieldID,
			},
		},
		From:   oipiq.sql,
		Unique: true,
	}
	if unique := oipiq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := oipiq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, orderitempriceinfo.FieldID)
		for i := range fields {
			if fields[i] != orderitempriceinfo.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := oipiq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := oipiq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := oipiq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := oipiq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (oipiq *OrderItemPriceInfoQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(oipiq.driver.Dialect())
	t1 := builder.Table(orderitempriceinfo.Table)
	selector := builder.Select(t1.Columns(orderitempriceinfo.Columns...)...).From(t1)
	if oipiq.sql != nil {
		selector = oipiq.sql
		selector.Select(selector.Columns(orderitempriceinfo.Columns...)...)
	}
	for _, p := range oipiq.predicates {
		p(selector)
	}
	for _, p := range oipiq.order {
		p(selector)
	}
	if offset := oipiq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := oipiq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// OrderItemPriceInfoGroupBy is the group-by builder for OrderItemPriceInfo entities.
type OrderItemPriceInfoGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (oipigb *OrderItemPriceInfoGroupBy) Aggregate(fns ...AggregateFunc) *OrderItemPriceInfoGroupBy {
	oipigb.fns = append(oipigb.fns, fns...)
	return oipigb
}

// Scan applies the group-by query and scans the result into the given value.
func (oipigb *OrderItemPriceInfoGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := oipigb.path(ctx)
	if err != nil {
		return err
	}
	oipigb.sql = query
	return oipigb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (oipigb *OrderItemPriceInfoGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := oipigb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (oipigb *OrderItemPriceInfoGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(oipigb.fields) > 1 {
		return nil, errors.New("ent: OrderItemPriceInfoGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := oipigb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (oipigb *OrderItemPriceInfoGroupBy) StringsX(ctx context.Context) []string {
	v, err := oipigb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (oipigb *OrderItemPriceInfoGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = oipigb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{orderitempriceinfo.Label}
	default:
		err = fmt.Errorf("ent: OrderItemPriceInfoGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (oipigb *OrderItemPriceInfoGroupBy) StringX(ctx context.Context) string {
	v, err := oipigb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (oipigb *OrderItemPriceInfoGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(oipigb.fields) > 1 {
		return nil, errors.New("ent: OrderItemPriceInfoGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := oipigb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (oipigb *OrderItemPriceInfoGroupBy) IntsX(ctx context.Context) []int {
	v, err := oipigb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (oipigb *OrderItemPriceInfoGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = oipigb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{orderitempriceinfo.Label}
	default:
		err = fmt.Errorf("ent: OrderItemPriceInfoGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (oipigb *OrderItemPriceInfoGroupBy) IntX(ctx context.Context) int {
	v, err := oipigb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (oipigb *OrderItemPriceInfoGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(oipigb.fields) > 1 {
		return nil, errors.New("ent: OrderItemPriceInfoGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := oipigb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (oipigb *OrderItemPriceInfoGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := oipigb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (oipigb *OrderItemPriceInfoGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = oipigb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{orderitempriceinfo.Label}
	default:
		err = fmt.Errorf("ent: OrderItemPriceInfoGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (oipigb *OrderItemPriceInfoGroupBy) Float64X(ctx context.Context) float64 {
	v, err := oipigb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (oipigb *OrderItemPriceInfoGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(oipigb.fields) > 1 {
		return nil, errors.New("ent: OrderItemPriceInfoGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := oipigb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (oipigb *OrderItemPriceInfoGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := oipigb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (oipigb *OrderItemPriceInfoGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = oipigb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{orderitempriceinfo.Label}
	default:
		err = fmt.Errorf("ent: OrderItemPriceInfoGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (oipigb *OrderItemPriceInfoGroupBy) BoolX(ctx context.Context) bool {
	v, err := oipigb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (oipigb *OrderItemPriceInfoGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range oipigb.fields {
		if !orderitempriceinfo.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := oipigb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := oipigb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (oipigb *OrderItemPriceInfoGroupBy) sqlQuery() *sql.Selector {
	selector := oipigb.sql
	columns := make([]string, 0, len(oipigb.fields)+len(oipigb.fns))
	columns = append(columns, oipigb.fields...)
	for _, fn := range oipigb.fns {
		columns = append(columns, fn(selector))
	}
	return selector.Select(columns...).GroupBy(oipigb.fields...)
}

// OrderItemPriceInfoSelect is the builder for selecting fields of OrderItemPriceInfo entities.
type OrderItemPriceInfoSelect struct {
	*OrderItemPriceInfoQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (oipis *OrderItemPriceInfoSelect) Scan(ctx context.Context, v interface{}) error {
	if err := oipis.prepareQuery(ctx); err != nil {
		return err
	}
	oipis.sql = oipis.OrderItemPriceInfoQuery.sqlQuery(ctx)
	return oipis.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (oipis *OrderItemPriceInfoSelect) ScanX(ctx context.Context, v interface{}) {
	if err := oipis.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (oipis *OrderItemPriceInfoSelect) Strings(ctx context.Context) ([]string, error) {
	if len(oipis.fields) > 1 {
		return nil, errors.New("ent: OrderItemPriceInfoSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := oipis.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (oipis *OrderItemPriceInfoSelect) StringsX(ctx context.Context) []string {
	v, err := oipis.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (oipis *OrderItemPriceInfoSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = oipis.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{orderitempriceinfo.Label}
	default:
		err = fmt.Errorf("ent: OrderItemPriceInfoSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (oipis *OrderItemPriceInfoSelect) StringX(ctx context.Context) string {
	v, err := oipis.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (oipis *OrderItemPriceInfoSelect) Ints(ctx context.Context) ([]int, error) {
	if len(oipis.fields) > 1 {
		return nil, errors.New("ent: OrderItemPriceInfoSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := oipis.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (oipis *OrderItemPriceInfoSelect) IntsX(ctx context.Context) []int {
	v, err := oipis.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (oipis *OrderItemPriceInfoSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = oipis.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{orderitempriceinfo.Label}
	default:
		err = fmt.Errorf("ent: OrderItemPriceInfoSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (oipis *OrderItemPriceInfoSelect) IntX(ctx context.Context) int {
	v, err := oipis.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (oipis *OrderItemPriceInfoSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(oipis.fields) > 1 {
		return nil, errors.New("ent: OrderItemPriceInfoSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := oipis.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (oipis *OrderItemPriceInfoSelect) Float64sX(ctx context.Context) []float64 {
	v, err := oipis.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (oipis *OrderItemPriceInfoSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = oipis.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{orderitempriceinfo.Label}
	default:
		err = fmt.Errorf("ent: OrderItemPriceInfoSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (oipis *OrderItemPriceInfoSelect) Float64X(ctx context.Context) float64 {
	v, err := oipis.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (oipis *OrderItemPriceInfoSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(oipis.fields) > 1 {
		return nil, errors.New("ent: OrderItemPriceInfoSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := oipis.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (oipis *OrderItemPriceInfoSelect) BoolsX(ctx context.Context) []bool {
	v, err := oipis.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (oipis *OrderItemPriceInfoSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = oipis.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{orderitempriceinfo.Label}
	default:
		err = fmt.Errorf("ent: OrderItemPriceInfoSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (oipis *OrderItemPriceInfoSelect) BoolX(ctx context.Context) bool {
	v, err := oipis.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (oipis *OrderItemPriceInfoSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := oipis.sqlQuery().Query()
	if err := oipis.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (oipis *OrderItemPriceInfoSelect) sqlQuery() sql.Querier {
	selector := oipis.sql
	selector.Select(selector.Columns(oipis.fields...)...)
	return selector
}
