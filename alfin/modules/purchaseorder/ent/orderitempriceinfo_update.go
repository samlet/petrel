// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/orderheader"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/orderitem"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/orderitempriceinfo"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/predicate"
)

// OrderItemPriceInfoUpdate is the builder for updating OrderItemPriceInfo entities.
type OrderItemPriceInfoUpdate struct {
	config
	hooks    []Hook
	mutation *OrderItemPriceInfoMutation
}

// Where adds a new predicate for the OrderItemPriceInfoUpdate builder.
func (oipiu *OrderItemPriceInfoUpdate) Where(ps ...predicate.OrderItemPriceInfo) *OrderItemPriceInfoUpdate {
	oipiu.mutation.predicates = append(oipiu.mutation.predicates, ps...)
	return oipiu
}

// SetOrderItemSeqID sets the "order_item_seq_id" field.
func (oipiu *OrderItemPriceInfoUpdate) SetOrderItemSeqID(i int) *OrderItemPriceInfoUpdate {
	oipiu.mutation.ResetOrderItemSeqID()
	oipiu.mutation.SetOrderItemSeqID(i)
	return oipiu
}

// SetNillableOrderItemSeqID sets the "order_item_seq_id" field if the given value is not nil.
func (oipiu *OrderItemPriceInfoUpdate) SetNillableOrderItemSeqID(i *int) *OrderItemPriceInfoUpdate {
	if i != nil {
		oipiu.SetOrderItemSeqID(*i)
	}
	return oipiu
}

// AddOrderItemSeqID adds i to the "order_item_seq_id" field.
func (oipiu *OrderItemPriceInfoUpdate) AddOrderItemSeqID(i int) *OrderItemPriceInfoUpdate {
	oipiu.mutation.AddOrderItemSeqID(i)
	return oipiu
}

// ClearOrderItemSeqID clears the value of the "order_item_seq_id" field.
func (oipiu *OrderItemPriceInfoUpdate) ClearOrderItemSeqID() *OrderItemPriceInfoUpdate {
	oipiu.mutation.ClearOrderItemSeqID()
	return oipiu
}

// SetProductPriceRuleID sets the "product_price_rule_id" field.
func (oipiu *OrderItemPriceInfoUpdate) SetProductPriceRuleID(i int) *OrderItemPriceInfoUpdate {
	oipiu.mutation.ResetProductPriceRuleID()
	oipiu.mutation.SetProductPriceRuleID(i)
	return oipiu
}

// SetNillableProductPriceRuleID sets the "product_price_rule_id" field if the given value is not nil.
func (oipiu *OrderItemPriceInfoUpdate) SetNillableProductPriceRuleID(i *int) *OrderItemPriceInfoUpdate {
	if i != nil {
		oipiu.SetProductPriceRuleID(*i)
	}
	return oipiu
}

// AddProductPriceRuleID adds i to the "product_price_rule_id" field.
func (oipiu *OrderItemPriceInfoUpdate) AddProductPriceRuleID(i int) *OrderItemPriceInfoUpdate {
	oipiu.mutation.AddProductPriceRuleID(i)
	return oipiu
}

// ClearProductPriceRuleID clears the value of the "product_price_rule_id" field.
func (oipiu *OrderItemPriceInfoUpdate) ClearProductPriceRuleID() *OrderItemPriceInfoUpdate {
	oipiu.mutation.ClearProductPriceRuleID()
	return oipiu
}

// SetProductPriceActionSeqID sets the "product_price_action_seq_id" field.
func (oipiu *OrderItemPriceInfoUpdate) SetProductPriceActionSeqID(i int) *OrderItemPriceInfoUpdate {
	oipiu.mutation.ResetProductPriceActionSeqID()
	oipiu.mutation.SetProductPriceActionSeqID(i)
	return oipiu
}

// SetNillableProductPriceActionSeqID sets the "product_price_action_seq_id" field if the given value is not nil.
func (oipiu *OrderItemPriceInfoUpdate) SetNillableProductPriceActionSeqID(i *int) *OrderItemPriceInfoUpdate {
	if i != nil {
		oipiu.SetProductPriceActionSeqID(*i)
	}
	return oipiu
}

// AddProductPriceActionSeqID adds i to the "product_price_action_seq_id" field.
func (oipiu *OrderItemPriceInfoUpdate) AddProductPriceActionSeqID(i int) *OrderItemPriceInfoUpdate {
	oipiu.mutation.AddProductPriceActionSeqID(i)
	return oipiu
}

// ClearProductPriceActionSeqID clears the value of the "product_price_action_seq_id" field.
func (oipiu *OrderItemPriceInfoUpdate) ClearProductPriceActionSeqID() *OrderItemPriceInfoUpdate {
	oipiu.mutation.ClearProductPriceActionSeqID()
	return oipiu
}

// SetModifyAmount sets the "modify_amount" field.
func (oipiu *OrderItemPriceInfoUpdate) SetModifyAmount(f float64) *OrderItemPriceInfoUpdate {
	oipiu.mutation.ResetModifyAmount()
	oipiu.mutation.SetModifyAmount(f)
	return oipiu
}

// SetNillableModifyAmount sets the "modify_amount" field if the given value is not nil.
func (oipiu *OrderItemPriceInfoUpdate) SetNillableModifyAmount(f *float64) *OrderItemPriceInfoUpdate {
	if f != nil {
		oipiu.SetModifyAmount(*f)
	}
	return oipiu
}

// AddModifyAmount adds f to the "modify_amount" field.
func (oipiu *OrderItemPriceInfoUpdate) AddModifyAmount(f float64) *OrderItemPriceInfoUpdate {
	oipiu.mutation.AddModifyAmount(f)
	return oipiu
}

// ClearModifyAmount clears the value of the "modify_amount" field.
func (oipiu *OrderItemPriceInfoUpdate) ClearModifyAmount() *OrderItemPriceInfoUpdate {
	oipiu.mutation.ClearModifyAmount()
	return oipiu
}

// SetDescription sets the "description" field.
func (oipiu *OrderItemPriceInfoUpdate) SetDescription(s string) *OrderItemPriceInfoUpdate {
	oipiu.mutation.SetDescription(s)
	return oipiu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (oipiu *OrderItemPriceInfoUpdate) SetNillableDescription(s *string) *OrderItemPriceInfoUpdate {
	if s != nil {
		oipiu.SetDescription(*s)
	}
	return oipiu
}

// ClearDescription clears the value of the "description" field.
func (oipiu *OrderItemPriceInfoUpdate) ClearDescription() *OrderItemPriceInfoUpdate {
	oipiu.mutation.ClearDescription()
	return oipiu
}

// SetRateCode sets the "rate_code" field.
func (oipiu *OrderItemPriceInfoUpdate) SetRateCode(s string) *OrderItemPriceInfoUpdate {
	oipiu.mutation.SetRateCode(s)
	return oipiu
}

// SetNillableRateCode sets the "rate_code" field if the given value is not nil.
func (oipiu *OrderItemPriceInfoUpdate) SetNillableRateCode(s *string) *OrderItemPriceInfoUpdate {
	if s != nil {
		oipiu.SetRateCode(*s)
	}
	return oipiu
}

// ClearRateCode clears the value of the "rate_code" field.
func (oipiu *OrderItemPriceInfoUpdate) ClearRateCode() *OrderItemPriceInfoUpdate {
	oipiu.mutation.ClearRateCode()
	return oipiu
}

// SetOrderHeaderID sets the "order_header" edge to the OrderHeader entity by ID.
func (oipiu *OrderItemPriceInfoUpdate) SetOrderHeaderID(id int) *OrderItemPriceInfoUpdate {
	oipiu.mutation.SetOrderHeaderID(id)
	return oipiu
}

// SetNillableOrderHeaderID sets the "order_header" edge to the OrderHeader entity by ID if the given value is not nil.
func (oipiu *OrderItemPriceInfoUpdate) SetNillableOrderHeaderID(id *int) *OrderItemPriceInfoUpdate {
	if id != nil {
		oipiu = oipiu.SetOrderHeaderID(*id)
	}
	return oipiu
}

// SetOrderHeader sets the "order_header" edge to the OrderHeader entity.
func (oipiu *OrderItemPriceInfoUpdate) SetOrderHeader(o *OrderHeader) *OrderItemPriceInfoUpdate {
	return oipiu.SetOrderHeaderID(o.ID)
}

// SetOrderItemID sets the "order_item" edge to the OrderItem entity by ID.
func (oipiu *OrderItemPriceInfoUpdate) SetOrderItemID(id int) *OrderItemPriceInfoUpdate {
	oipiu.mutation.SetOrderItemID(id)
	return oipiu
}

// SetNillableOrderItemID sets the "order_item" edge to the OrderItem entity by ID if the given value is not nil.
func (oipiu *OrderItemPriceInfoUpdate) SetNillableOrderItemID(id *int) *OrderItemPriceInfoUpdate {
	if id != nil {
		oipiu = oipiu.SetOrderItemID(*id)
	}
	return oipiu
}

// SetOrderItem sets the "order_item" edge to the OrderItem entity.
func (oipiu *OrderItemPriceInfoUpdate) SetOrderItem(o *OrderItem) *OrderItemPriceInfoUpdate {
	return oipiu.SetOrderItemID(o.ID)
}

// Mutation returns the OrderItemPriceInfoMutation object of the builder.
func (oipiu *OrderItemPriceInfoUpdate) Mutation() *OrderItemPriceInfoMutation {
	return oipiu.mutation
}

// ClearOrderHeader clears the "order_header" edge to the OrderHeader entity.
func (oipiu *OrderItemPriceInfoUpdate) ClearOrderHeader() *OrderItemPriceInfoUpdate {
	oipiu.mutation.ClearOrderHeader()
	return oipiu
}

// ClearOrderItem clears the "order_item" edge to the OrderItem entity.
func (oipiu *OrderItemPriceInfoUpdate) ClearOrderItem() *OrderItemPriceInfoUpdate {
	oipiu.mutation.ClearOrderItem()
	return oipiu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (oipiu *OrderItemPriceInfoUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	oipiu.defaults()
	if len(oipiu.hooks) == 0 {
		affected, err = oipiu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderItemPriceInfoMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			oipiu.mutation = mutation
			affected, err = oipiu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(oipiu.hooks) - 1; i >= 0; i-- {
			mut = oipiu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, oipiu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (oipiu *OrderItemPriceInfoUpdate) SaveX(ctx context.Context) int {
	affected, err := oipiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (oipiu *OrderItemPriceInfoUpdate) Exec(ctx context.Context) error {
	_, err := oipiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oipiu *OrderItemPriceInfoUpdate) ExecX(ctx context.Context) {
	if err := oipiu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oipiu *OrderItemPriceInfoUpdate) defaults() {
	if _, ok := oipiu.mutation.UpdateTime(); !ok {
		v := orderitempriceinfo.UpdateDefaultUpdateTime()
		oipiu.mutation.SetUpdateTime(v)
	}
}

func (oipiu *OrderItemPriceInfoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   orderitempriceinfo.Table,
			Columns: orderitempriceinfo.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: orderitempriceinfo.FieldID,
			},
		},
	}
	if ps := oipiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oipiu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderitempriceinfo.FieldUpdateTime,
		})
	}
	if value, ok := oipiu.mutation.OrderItemSeqID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitempriceinfo.FieldOrderItemSeqID,
		})
	}
	if value, ok := oipiu.mutation.AddedOrderItemSeqID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitempriceinfo.FieldOrderItemSeqID,
		})
	}
	if oipiu.mutation.OrderItemSeqIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderitempriceinfo.FieldOrderItemSeqID,
		})
	}
	if value, ok := oipiu.mutation.ProductPriceRuleID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitempriceinfo.FieldProductPriceRuleID,
		})
	}
	if value, ok := oipiu.mutation.AddedProductPriceRuleID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitempriceinfo.FieldProductPriceRuleID,
		})
	}
	if oipiu.mutation.ProductPriceRuleIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderitempriceinfo.FieldProductPriceRuleID,
		})
	}
	if value, ok := oipiu.mutation.ProductPriceActionSeqID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitempriceinfo.FieldProductPriceActionSeqID,
		})
	}
	if value, ok := oipiu.mutation.AddedProductPriceActionSeqID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitempriceinfo.FieldProductPriceActionSeqID,
		})
	}
	if oipiu.mutation.ProductPriceActionSeqIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderitempriceinfo.FieldProductPriceActionSeqID,
		})
	}
	if value, ok := oipiu.mutation.ModifyAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderitempriceinfo.FieldModifyAmount,
		})
	}
	if value, ok := oipiu.mutation.AddedModifyAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderitempriceinfo.FieldModifyAmount,
		})
	}
	if oipiu.mutation.ModifyAmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: orderitempriceinfo.FieldModifyAmount,
		})
	}
	if value, ok := oipiu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderitempriceinfo.FieldDescription,
		})
	}
	if oipiu.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: orderitempriceinfo.FieldDescription,
		})
	}
	if value, ok := oipiu.mutation.RateCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderitempriceinfo.FieldRateCode,
		})
	}
	if oipiu.mutation.RateCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: orderitempriceinfo.FieldRateCode,
		})
	}
	if oipiu.mutation.OrderHeaderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderitempriceinfo.OrderHeaderTable,
			Columns: []string{orderitempriceinfo.OrderHeaderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderheader.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oipiu.mutation.OrderHeaderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderitempriceinfo.OrderHeaderTable,
			Columns: []string{orderitempriceinfo.OrderHeaderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderheader.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oipiu.mutation.OrderItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderitempriceinfo.OrderItemTable,
			Columns: []string{orderitempriceinfo.OrderItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitem.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oipiu.mutation.OrderItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderitempriceinfo.OrderItemTable,
			Columns: []string{orderitempriceinfo.OrderItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, oipiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderitempriceinfo.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// OrderItemPriceInfoUpdateOne is the builder for updating a single OrderItemPriceInfo entity.
type OrderItemPriceInfoUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrderItemPriceInfoMutation
}

// SetOrderItemSeqID sets the "order_item_seq_id" field.
func (oipiuo *OrderItemPriceInfoUpdateOne) SetOrderItemSeqID(i int) *OrderItemPriceInfoUpdateOne {
	oipiuo.mutation.ResetOrderItemSeqID()
	oipiuo.mutation.SetOrderItemSeqID(i)
	return oipiuo
}

// SetNillableOrderItemSeqID sets the "order_item_seq_id" field if the given value is not nil.
func (oipiuo *OrderItemPriceInfoUpdateOne) SetNillableOrderItemSeqID(i *int) *OrderItemPriceInfoUpdateOne {
	if i != nil {
		oipiuo.SetOrderItemSeqID(*i)
	}
	return oipiuo
}

// AddOrderItemSeqID adds i to the "order_item_seq_id" field.
func (oipiuo *OrderItemPriceInfoUpdateOne) AddOrderItemSeqID(i int) *OrderItemPriceInfoUpdateOne {
	oipiuo.mutation.AddOrderItemSeqID(i)
	return oipiuo
}

// ClearOrderItemSeqID clears the value of the "order_item_seq_id" field.
func (oipiuo *OrderItemPriceInfoUpdateOne) ClearOrderItemSeqID() *OrderItemPriceInfoUpdateOne {
	oipiuo.mutation.ClearOrderItemSeqID()
	return oipiuo
}

// SetProductPriceRuleID sets the "product_price_rule_id" field.
func (oipiuo *OrderItemPriceInfoUpdateOne) SetProductPriceRuleID(i int) *OrderItemPriceInfoUpdateOne {
	oipiuo.mutation.ResetProductPriceRuleID()
	oipiuo.mutation.SetProductPriceRuleID(i)
	return oipiuo
}

// SetNillableProductPriceRuleID sets the "product_price_rule_id" field if the given value is not nil.
func (oipiuo *OrderItemPriceInfoUpdateOne) SetNillableProductPriceRuleID(i *int) *OrderItemPriceInfoUpdateOne {
	if i != nil {
		oipiuo.SetProductPriceRuleID(*i)
	}
	return oipiuo
}

// AddProductPriceRuleID adds i to the "product_price_rule_id" field.
func (oipiuo *OrderItemPriceInfoUpdateOne) AddProductPriceRuleID(i int) *OrderItemPriceInfoUpdateOne {
	oipiuo.mutation.AddProductPriceRuleID(i)
	return oipiuo
}

// ClearProductPriceRuleID clears the value of the "product_price_rule_id" field.
func (oipiuo *OrderItemPriceInfoUpdateOne) ClearProductPriceRuleID() *OrderItemPriceInfoUpdateOne {
	oipiuo.mutation.ClearProductPriceRuleID()
	return oipiuo
}

// SetProductPriceActionSeqID sets the "product_price_action_seq_id" field.
func (oipiuo *OrderItemPriceInfoUpdateOne) SetProductPriceActionSeqID(i int) *OrderItemPriceInfoUpdateOne {
	oipiuo.mutation.ResetProductPriceActionSeqID()
	oipiuo.mutation.SetProductPriceActionSeqID(i)
	return oipiuo
}

// SetNillableProductPriceActionSeqID sets the "product_price_action_seq_id" field if the given value is not nil.
func (oipiuo *OrderItemPriceInfoUpdateOne) SetNillableProductPriceActionSeqID(i *int) *OrderItemPriceInfoUpdateOne {
	if i != nil {
		oipiuo.SetProductPriceActionSeqID(*i)
	}
	return oipiuo
}

// AddProductPriceActionSeqID adds i to the "product_price_action_seq_id" field.
func (oipiuo *OrderItemPriceInfoUpdateOne) AddProductPriceActionSeqID(i int) *OrderItemPriceInfoUpdateOne {
	oipiuo.mutation.AddProductPriceActionSeqID(i)
	return oipiuo
}

// ClearProductPriceActionSeqID clears the value of the "product_price_action_seq_id" field.
func (oipiuo *OrderItemPriceInfoUpdateOne) ClearProductPriceActionSeqID() *OrderItemPriceInfoUpdateOne {
	oipiuo.mutation.ClearProductPriceActionSeqID()
	return oipiuo
}

// SetModifyAmount sets the "modify_amount" field.
func (oipiuo *OrderItemPriceInfoUpdateOne) SetModifyAmount(f float64) *OrderItemPriceInfoUpdateOne {
	oipiuo.mutation.ResetModifyAmount()
	oipiuo.mutation.SetModifyAmount(f)
	return oipiuo
}

// SetNillableModifyAmount sets the "modify_amount" field if the given value is not nil.
func (oipiuo *OrderItemPriceInfoUpdateOne) SetNillableModifyAmount(f *float64) *OrderItemPriceInfoUpdateOne {
	if f != nil {
		oipiuo.SetModifyAmount(*f)
	}
	return oipiuo
}

// AddModifyAmount adds f to the "modify_amount" field.
func (oipiuo *OrderItemPriceInfoUpdateOne) AddModifyAmount(f float64) *OrderItemPriceInfoUpdateOne {
	oipiuo.mutation.AddModifyAmount(f)
	return oipiuo
}

// ClearModifyAmount clears the value of the "modify_amount" field.
func (oipiuo *OrderItemPriceInfoUpdateOne) ClearModifyAmount() *OrderItemPriceInfoUpdateOne {
	oipiuo.mutation.ClearModifyAmount()
	return oipiuo
}

// SetDescription sets the "description" field.
func (oipiuo *OrderItemPriceInfoUpdateOne) SetDescription(s string) *OrderItemPriceInfoUpdateOne {
	oipiuo.mutation.SetDescription(s)
	return oipiuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (oipiuo *OrderItemPriceInfoUpdateOne) SetNillableDescription(s *string) *OrderItemPriceInfoUpdateOne {
	if s != nil {
		oipiuo.SetDescription(*s)
	}
	return oipiuo
}

// ClearDescription clears the value of the "description" field.
func (oipiuo *OrderItemPriceInfoUpdateOne) ClearDescription() *OrderItemPriceInfoUpdateOne {
	oipiuo.mutation.ClearDescription()
	return oipiuo
}

// SetRateCode sets the "rate_code" field.
func (oipiuo *OrderItemPriceInfoUpdateOne) SetRateCode(s string) *OrderItemPriceInfoUpdateOne {
	oipiuo.mutation.SetRateCode(s)
	return oipiuo
}

// SetNillableRateCode sets the "rate_code" field if the given value is not nil.
func (oipiuo *OrderItemPriceInfoUpdateOne) SetNillableRateCode(s *string) *OrderItemPriceInfoUpdateOne {
	if s != nil {
		oipiuo.SetRateCode(*s)
	}
	return oipiuo
}

// ClearRateCode clears the value of the "rate_code" field.
func (oipiuo *OrderItemPriceInfoUpdateOne) ClearRateCode() *OrderItemPriceInfoUpdateOne {
	oipiuo.mutation.ClearRateCode()
	return oipiuo
}

// SetOrderHeaderID sets the "order_header" edge to the OrderHeader entity by ID.
func (oipiuo *OrderItemPriceInfoUpdateOne) SetOrderHeaderID(id int) *OrderItemPriceInfoUpdateOne {
	oipiuo.mutation.SetOrderHeaderID(id)
	return oipiuo
}

// SetNillableOrderHeaderID sets the "order_header" edge to the OrderHeader entity by ID if the given value is not nil.
func (oipiuo *OrderItemPriceInfoUpdateOne) SetNillableOrderHeaderID(id *int) *OrderItemPriceInfoUpdateOne {
	if id != nil {
		oipiuo = oipiuo.SetOrderHeaderID(*id)
	}
	return oipiuo
}

// SetOrderHeader sets the "order_header" edge to the OrderHeader entity.
func (oipiuo *OrderItemPriceInfoUpdateOne) SetOrderHeader(o *OrderHeader) *OrderItemPriceInfoUpdateOne {
	return oipiuo.SetOrderHeaderID(o.ID)
}

// SetOrderItemID sets the "order_item" edge to the OrderItem entity by ID.
func (oipiuo *OrderItemPriceInfoUpdateOne) SetOrderItemID(id int) *OrderItemPriceInfoUpdateOne {
	oipiuo.mutation.SetOrderItemID(id)
	return oipiuo
}

// SetNillableOrderItemID sets the "order_item" edge to the OrderItem entity by ID if the given value is not nil.
func (oipiuo *OrderItemPriceInfoUpdateOne) SetNillableOrderItemID(id *int) *OrderItemPriceInfoUpdateOne {
	if id != nil {
		oipiuo = oipiuo.SetOrderItemID(*id)
	}
	return oipiuo
}

// SetOrderItem sets the "order_item" edge to the OrderItem entity.
func (oipiuo *OrderItemPriceInfoUpdateOne) SetOrderItem(o *OrderItem) *OrderItemPriceInfoUpdateOne {
	return oipiuo.SetOrderItemID(o.ID)
}

// Mutation returns the OrderItemPriceInfoMutation object of the builder.
func (oipiuo *OrderItemPriceInfoUpdateOne) Mutation() *OrderItemPriceInfoMutation {
	return oipiuo.mutation
}

// ClearOrderHeader clears the "order_header" edge to the OrderHeader entity.
func (oipiuo *OrderItemPriceInfoUpdateOne) ClearOrderHeader() *OrderItemPriceInfoUpdateOne {
	oipiuo.mutation.ClearOrderHeader()
	return oipiuo
}

// ClearOrderItem clears the "order_item" edge to the OrderItem entity.
func (oipiuo *OrderItemPriceInfoUpdateOne) ClearOrderItem() *OrderItemPriceInfoUpdateOne {
	oipiuo.mutation.ClearOrderItem()
	return oipiuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (oipiuo *OrderItemPriceInfoUpdateOne) Select(field string, fields ...string) *OrderItemPriceInfoUpdateOne {
	oipiuo.fields = append([]string{field}, fields...)
	return oipiuo
}

// Save executes the query and returns the updated OrderItemPriceInfo entity.
func (oipiuo *OrderItemPriceInfoUpdateOne) Save(ctx context.Context) (*OrderItemPriceInfo, error) {
	var (
		err  error
		node *OrderItemPriceInfo
	)
	oipiuo.defaults()
	if len(oipiuo.hooks) == 0 {
		node, err = oipiuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderItemPriceInfoMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			oipiuo.mutation = mutation
			node, err = oipiuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(oipiuo.hooks) - 1; i >= 0; i-- {
			mut = oipiuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, oipiuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (oipiuo *OrderItemPriceInfoUpdateOne) SaveX(ctx context.Context) *OrderItemPriceInfo {
	node, err := oipiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (oipiuo *OrderItemPriceInfoUpdateOne) Exec(ctx context.Context) error {
	_, err := oipiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oipiuo *OrderItemPriceInfoUpdateOne) ExecX(ctx context.Context) {
	if err := oipiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oipiuo *OrderItemPriceInfoUpdateOne) defaults() {
	if _, ok := oipiuo.mutation.UpdateTime(); !ok {
		v := orderitempriceinfo.UpdateDefaultUpdateTime()
		oipiuo.mutation.SetUpdateTime(v)
	}
}

func (oipiuo *OrderItemPriceInfoUpdateOne) sqlSave(ctx context.Context) (_node *OrderItemPriceInfo, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   orderitempriceinfo.Table,
			Columns: orderitempriceinfo.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: orderitempriceinfo.FieldID,
			},
		},
	}
	id, ok := oipiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing OrderItemPriceInfo.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := oipiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, orderitempriceinfo.FieldID)
		for _, f := range fields {
			if !orderitempriceinfo.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != orderitempriceinfo.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := oipiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oipiuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderitempriceinfo.FieldUpdateTime,
		})
	}
	if value, ok := oipiuo.mutation.OrderItemSeqID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitempriceinfo.FieldOrderItemSeqID,
		})
	}
	if value, ok := oipiuo.mutation.AddedOrderItemSeqID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitempriceinfo.FieldOrderItemSeqID,
		})
	}
	if oipiuo.mutation.OrderItemSeqIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderitempriceinfo.FieldOrderItemSeqID,
		})
	}
	if value, ok := oipiuo.mutation.ProductPriceRuleID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitempriceinfo.FieldProductPriceRuleID,
		})
	}
	if value, ok := oipiuo.mutation.AddedProductPriceRuleID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitempriceinfo.FieldProductPriceRuleID,
		})
	}
	if oipiuo.mutation.ProductPriceRuleIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderitempriceinfo.FieldProductPriceRuleID,
		})
	}
	if value, ok := oipiuo.mutation.ProductPriceActionSeqID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitempriceinfo.FieldProductPriceActionSeqID,
		})
	}
	if value, ok := oipiuo.mutation.AddedProductPriceActionSeqID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitempriceinfo.FieldProductPriceActionSeqID,
		})
	}
	if oipiuo.mutation.ProductPriceActionSeqIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderitempriceinfo.FieldProductPriceActionSeqID,
		})
	}
	if value, ok := oipiuo.mutation.ModifyAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderitempriceinfo.FieldModifyAmount,
		})
	}
	if value, ok := oipiuo.mutation.AddedModifyAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderitempriceinfo.FieldModifyAmount,
		})
	}
	if oipiuo.mutation.ModifyAmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: orderitempriceinfo.FieldModifyAmount,
		})
	}
	if value, ok := oipiuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderitempriceinfo.FieldDescription,
		})
	}
	if oipiuo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: orderitempriceinfo.FieldDescription,
		})
	}
	if value, ok := oipiuo.mutation.RateCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderitempriceinfo.FieldRateCode,
		})
	}
	if oipiuo.mutation.RateCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: orderitempriceinfo.FieldRateCode,
		})
	}
	if oipiuo.mutation.OrderHeaderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderitempriceinfo.OrderHeaderTable,
			Columns: []string{orderitempriceinfo.OrderHeaderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderheader.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oipiuo.mutation.OrderHeaderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderitempriceinfo.OrderHeaderTable,
			Columns: []string{orderitempriceinfo.OrderHeaderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderheader.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oipiuo.mutation.OrderItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderitempriceinfo.OrderItemTable,
			Columns: []string{orderitempriceinfo.OrderItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitem.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oipiuo.mutation.OrderItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderitempriceinfo.OrderItemTable,
			Columns: []string{orderitempriceinfo.OrderItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &OrderItemPriceInfo{config: oipiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, oipiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderitempriceinfo.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
