// Code generated by entc, DO NOT EDIT.

package orderitemshipgroup

import (
	"fmt"
	"time"
)

const (
	// Label holds the string label denoting the orderitemshipgroup type in the database.
	Label = "order_item_ship_group"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldShipGroupSeqID holds the string denoting the ship_group_seq_id field in the database.
	FieldShipGroupSeqID = "ship_group_seq_id"
	// FieldShipmentMethodTypeID holds the string denoting the shipment_method_type_id field in the database.
	FieldShipmentMethodTypeID = "shipment_method_type_id"
	// FieldSupplierPartyID holds the string denoting the supplier_party_id field in the database.
	FieldSupplierPartyID = "supplier_party_id"
	// FieldSupplierAgreementID holds the string denoting the supplier_agreement_id field in the database.
	FieldSupplierAgreementID = "supplier_agreement_id"
	// FieldVendorPartyID holds the string denoting the vendor_party_id field in the database.
	FieldVendorPartyID = "vendor_party_id"
	// FieldCarrierPartyID holds the string denoting the carrier_party_id field in the database.
	FieldCarrierPartyID = "carrier_party_id"
	// FieldCarrierRoleTypeID holds the string denoting the carrier_role_type_id field in the database.
	FieldCarrierRoleTypeID = "carrier_role_type_id"
	// FieldFacilityID holds the string denoting the facility_id field in the database.
	FieldFacilityID = "facility_id"
	// FieldContactMechID holds the string denoting the contact_mech_id field in the database.
	FieldContactMechID = "contact_mech_id"
	// FieldTelecomContactMechID holds the string denoting the telecom_contact_mech_id field in the database.
	FieldTelecomContactMechID = "telecom_contact_mech_id"
	// FieldTrackingNumber holds the string denoting the tracking_number field in the database.
	FieldTrackingNumber = "tracking_number"
	// FieldShippingInstructions holds the string denoting the shipping_instructions field in the database.
	FieldShippingInstructions = "shipping_instructions"
	// FieldMaySplit holds the string denoting the may_split field in the database.
	FieldMaySplit = "may_split"
	// FieldGiftMessage holds the string denoting the gift_message field in the database.
	FieldGiftMessage = "gift_message"
	// FieldIsGift holds the string denoting the is_gift field in the database.
	FieldIsGift = "is_gift"
	// FieldShipAfterDate holds the string denoting the ship_after_date field in the database.
	FieldShipAfterDate = "ship_after_date"
	// FieldShipByDate holds the string denoting the ship_by_date field in the database.
	FieldShipByDate = "ship_by_date"
	// FieldEstimatedShipDate holds the string denoting the estimated_ship_date field in the database.
	FieldEstimatedShipDate = "estimated_ship_date"
	// FieldEstimatedDeliveryDate holds the string denoting the estimated_delivery_date field in the database.
	FieldEstimatedDeliveryDate = "estimated_delivery_date"
	// EdgeOrderHeader holds the string denoting the order_header edge name in mutations.
	EdgeOrderHeader = "order_header"
	// EdgeOrderItemShipGroupAssocs holds the string denoting the order_item_ship_group_assocs edge name in mutations.
	EdgeOrderItemShipGroupAssocs = "order_item_ship_group_assocs"
	// EdgePrimaryShipments holds the string denoting the primary_shipments edge name in mutations.
	EdgePrimaryShipments = "primary_shipments"
	// Table holds the table name of the orderitemshipgroup in the database.
	Table = "order_item_ship_groups"
	// OrderHeaderTable is the table the holds the order_header relation/edge.
	OrderHeaderTable = "order_item_ship_groups"
	// OrderHeaderInverseTable is the table name for the OrderHeader entity.
	// It exists in this package in order to avoid circular dependency with the "orderheader" package.
	OrderHeaderInverseTable = "order_headers"
	// OrderHeaderColumn is the table column denoting the order_header relation/edge.
	OrderHeaderColumn = "order_header_order_item_ship_groups"
	// OrderItemShipGroupAssocsTable is the table the holds the order_item_ship_group_assocs relation/edge.
	OrderItemShipGroupAssocsTable = "order_item_ship_group_assocs"
	// OrderItemShipGroupAssocsInverseTable is the table name for the OrderItemShipGroupAssoc entity.
	// It exists in this package in order to avoid circular dependency with the "orderitemshipgroupassoc" package.
	OrderItemShipGroupAssocsInverseTable = "order_item_ship_group_assocs"
	// OrderItemShipGroupAssocsColumn is the table column denoting the order_item_ship_group_assocs relation/edge.
	OrderItemShipGroupAssocsColumn = "order_item_ship_group_order_item_ship_group_assocs"
	// PrimaryShipmentsTable is the table the holds the primary_shipments relation/edge.
	PrimaryShipmentsTable = "shipments"
	// PrimaryShipmentsInverseTable is the table name for the Shipment entity.
	// It exists in this package in order to avoid circular dependency with the "shipment" package.
	PrimaryShipmentsInverseTable = "shipments"
	// PrimaryShipmentsColumn is the table column denoting the primary_shipments relation/edge.
	PrimaryShipmentsColumn = "order_item_ship_group_primary_shipments"
)

// Columns holds all SQL columns for orderitemshipgroup fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldShipGroupSeqID,
	FieldShipmentMethodTypeID,
	FieldSupplierPartyID,
	FieldSupplierAgreementID,
	FieldVendorPartyID,
	FieldCarrierPartyID,
	FieldCarrierRoleTypeID,
	FieldFacilityID,
	FieldContactMechID,
	FieldTelecomContactMechID,
	FieldTrackingNumber,
	FieldShippingInstructions,
	FieldMaySplit,
	FieldGiftMessage,
	FieldIsGift,
	FieldShipAfterDate,
	FieldShipByDate,
	FieldEstimatedShipDate,
	FieldEstimatedDeliveryDate,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "order_item_ship_groups"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"order_header_order_item_ship_groups",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// DefaultShipAfterDate holds the default value on creation for the "ship_after_date" field.
	DefaultShipAfterDate func() time.Time
	// DefaultShipByDate holds the default value on creation for the "ship_by_date" field.
	DefaultShipByDate func() time.Time
	// DefaultEstimatedShipDate holds the default value on creation for the "estimated_ship_date" field.
	DefaultEstimatedShipDate func() time.Time
	// DefaultEstimatedDeliveryDate holds the default value on creation for the "estimated_delivery_date" field.
	DefaultEstimatedDeliveryDate func() time.Time
)

// MaySplit defines the type for the "may_split" enum field.
type MaySplit string

// MaySplit values.
const (
	MaySplitY MaySplit = "Y"
	MaySplitN MaySplit = "N"
	MaySplit  MaySplit = "-"
)

func (ms MaySplit) String() string {
	return string(ms)
}

// MaySplitValidator is a validator for the "may_split" field enum values. It is called by the builders before save.
func MaySplitValidator(ms MaySplit) error {
	switch ms {
	case MaySplitY, MaySplitN, MaySplit:
		return nil
	default:
		return fmt.Errorf("orderitemshipgroup: invalid enum value for may_split field: %q", ms)
	}
}

// IsGift defines the type for the "is_gift" enum field.
type IsGift string

// IsGift values.
const (
	IsGiftY IsGift = "Y"
	IsGiftN IsGift = "N"
	IsGift  IsGift = "-"
)

func (ig IsGift) String() string {
	return string(ig)
}

// IsGiftValidator is a validator for the "is_gift" field enum values. It is called by the builders before save.
func IsGiftValidator(ig IsGift) error {
	switch ig {
	case IsGiftY, IsGiftN, IsGift:
		return nil
	default:
		return fmt.Errorf("orderitemshipgroup: invalid enum value for is_gift field: %q", ig)
	}
}
