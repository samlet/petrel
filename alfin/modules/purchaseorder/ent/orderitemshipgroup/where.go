// Code generated by entc, DO NOT EDIT.

package orderitemshipgroup

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// ShipGroupSeqID applies equality check predicate on the "ship_group_seq_id" field. It's identical to ShipGroupSeqIDEQ.
func ShipGroupSeqID(v int) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShipGroupSeqID), v))
	})
}

// ShipmentMethodTypeID applies equality check predicate on the "shipment_method_type_id" field. It's identical to ShipmentMethodTypeIDEQ.
func ShipmentMethodTypeID(v int) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShipmentMethodTypeID), v))
	})
}

// SupplierPartyID applies equality check predicate on the "supplier_party_id" field. It's identical to SupplierPartyIDEQ.
func SupplierPartyID(v int) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSupplierPartyID), v))
	})
}

// SupplierAgreementID applies equality check predicate on the "supplier_agreement_id" field. It's identical to SupplierAgreementIDEQ.
func SupplierAgreementID(v int) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSupplierAgreementID), v))
	})
}

// VendorPartyID applies equality check predicate on the "vendor_party_id" field. It's identical to VendorPartyIDEQ.
func VendorPartyID(v int) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVendorPartyID), v))
	})
}

// CarrierPartyID applies equality check predicate on the "carrier_party_id" field. It's identical to CarrierPartyIDEQ.
func CarrierPartyID(v int) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCarrierPartyID), v))
	})
}

// CarrierRoleTypeID applies equality check predicate on the "carrier_role_type_id" field. It's identical to CarrierRoleTypeIDEQ.
func CarrierRoleTypeID(v int) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCarrierRoleTypeID), v))
	})
}

// FacilityID applies equality check predicate on the "facility_id" field. It's identical to FacilityIDEQ.
func FacilityID(v int) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFacilityID), v))
	})
}

// ContactMechID applies equality check predicate on the "contact_mech_id" field. It's identical to ContactMechIDEQ.
func ContactMechID(v int) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldContactMechID), v))
	})
}

// TelecomContactMechID applies equality check predicate on the "telecom_contact_mech_id" field. It's identical to TelecomContactMechIDEQ.
func TelecomContactMechID(v int) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTelecomContactMechID), v))
	})
}

// TrackingNumber applies equality check predicate on the "tracking_number" field. It's identical to TrackingNumberEQ.
func TrackingNumber(v string) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTrackingNumber), v))
	})
}

// ShippingInstructions applies equality check predicate on the "shipping_instructions" field. It's identical to ShippingInstructionsEQ.
func ShippingInstructions(v string) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShippingInstructions), v))
	})
}

// GiftMessage applies equality check predicate on the "gift_message" field. It's identical to GiftMessageEQ.
func GiftMessage(v string) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGiftMessage), v))
	})
}

// ShipAfterDate applies equality check predicate on the "ship_after_date" field. It's identical to ShipAfterDateEQ.
func ShipAfterDate(v time.Time) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShipAfterDate), v))
	})
}

// ShipByDate applies equality check predicate on the "ship_by_date" field. It's identical to ShipByDateEQ.
func ShipByDate(v time.Time) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShipByDate), v))
	})
}

// EstimatedShipDate applies equality check predicate on the "estimated_ship_date" field. It's identical to EstimatedShipDateEQ.
func EstimatedShipDate(v time.Time) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEstimatedShipDate), v))
	})
}

// EstimatedDeliveryDate applies equality check predicate on the "estimated_delivery_date" field. It's identical to EstimatedDeliveryDateEQ.
func EstimatedDeliveryDate(v time.Time) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEstimatedDeliveryDate), v))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.OrderItemShipGroup {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.OrderItemShipGroup {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), v))
	})
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.OrderItemShipGroup {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.OrderItemShipGroup {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateTime), v))
	})
}

// ShipGroupSeqIDEQ applies the EQ predicate on the "ship_group_seq_id" field.
func ShipGroupSeqIDEQ(v int) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShipGroupSeqID), v))
	})
}

// ShipGroupSeqIDNEQ applies the NEQ predicate on the "ship_group_seq_id" field.
func ShipGroupSeqIDNEQ(v int) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShipGroupSeqID), v))
	})
}

// ShipGroupSeqIDIn applies the In predicate on the "ship_group_seq_id" field.
func ShipGroupSeqIDIn(vs ...int) predicate.OrderItemShipGroup {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldShipGroupSeqID), v...))
	})
}

// ShipGroupSeqIDNotIn applies the NotIn predicate on the "ship_group_seq_id" field.
func ShipGroupSeqIDNotIn(vs ...int) predicate.OrderItemShipGroup {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldShipGroupSeqID), v...))
	})
}

// ShipGroupSeqIDGT applies the GT predicate on the "ship_group_seq_id" field.
func ShipGroupSeqIDGT(v int) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShipGroupSeqID), v))
	})
}

// ShipGroupSeqIDGTE applies the GTE predicate on the "ship_group_seq_id" field.
func ShipGroupSeqIDGTE(v int) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShipGroupSeqID), v))
	})
}

// ShipGroupSeqIDLT applies the LT predicate on the "ship_group_seq_id" field.
func ShipGroupSeqIDLT(v int) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShipGroupSeqID), v))
	})
}

// ShipGroupSeqIDLTE applies the LTE predicate on the "ship_group_seq_id" field.
func ShipGroupSeqIDLTE(v int) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShipGroupSeqID), v))
	})
}

// ShipmentMethodTypeIDEQ applies the EQ predicate on the "shipment_method_type_id" field.
func ShipmentMethodTypeIDEQ(v int) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShipmentMethodTypeID), v))
	})
}

// ShipmentMethodTypeIDNEQ applies the NEQ predicate on the "shipment_method_type_id" field.
func ShipmentMethodTypeIDNEQ(v int) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShipmentMethodTypeID), v))
	})
}

// ShipmentMethodTypeIDIn applies the In predicate on the "shipment_method_type_id" field.
func ShipmentMethodTypeIDIn(vs ...int) predicate.OrderItemShipGroup {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldShipmentMethodTypeID), v...))
	})
}

// ShipmentMethodTypeIDNotIn applies the NotIn predicate on the "shipment_method_type_id" field.
func ShipmentMethodTypeIDNotIn(vs ...int) predicate.OrderItemShipGroup {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldShipmentMethodTypeID), v...))
	})
}

// ShipmentMethodTypeIDGT applies the GT predicate on the "shipment_method_type_id" field.
func ShipmentMethodTypeIDGT(v int) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShipmentMethodTypeID), v))
	})
}

// ShipmentMethodTypeIDGTE applies the GTE predicate on the "shipment_method_type_id" field.
func ShipmentMethodTypeIDGTE(v int) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShipmentMethodTypeID), v))
	})
}

// ShipmentMethodTypeIDLT applies the LT predicate on the "shipment_method_type_id" field.
func ShipmentMethodTypeIDLT(v int) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShipmentMethodTypeID), v))
	})
}

// ShipmentMethodTypeIDLTE applies the LTE predicate on the "shipment_method_type_id" field.
func ShipmentMethodTypeIDLTE(v int) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShipmentMethodTypeID), v))
	})
}

// ShipmentMethodTypeIDIsNil applies the IsNil predicate on the "shipment_method_type_id" field.
func ShipmentMethodTypeIDIsNil() predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldShipmentMethodTypeID)))
	})
}

// ShipmentMethodTypeIDNotNil applies the NotNil predicate on the "shipment_method_type_id" field.
func ShipmentMethodTypeIDNotNil() predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldShipmentMethodTypeID)))
	})
}

// SupplierPartyIDEQ applies the EQ predicate on the "supplier_party_id" field.
func SupplierPartyIDEQ(v int) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSupplierPartyID), v))
	})
}

// SupplierPartyIDNEQ applies the NEQ predicate on the "supplier_party_id" field.
func SupplierPartyIDNEQ(v int) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSupplierPartyID), v))
	})
}

// SupplierPartyIDIn applies the In predicate on the "supplier_party_id" field.
func SupplierPartyIDIn(vs ...int) predicate.OrderItemShipGroup {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSupplierPartyID), v...))
	})
}

// SupplierPartyIDNotIn applies the NotIn predicate on the "supplier_party_id" field.
func SupplierPartyIDNotIn(vs ...int) predicate.OrderItemShipGroup {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSupplierPartyID), v...))
	})
}

// SupplierPartyIDGT applies the GT predicate on the "supplier_party_id" field.
func SupplierPartyIDGT(v int) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSupplierPartyID), v))
	})
}

// SupplierPartyIDGTE applies the GTE predicate on the "supplier_party_id" field.
func SupplierPartyIDGTE(v int) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSupplierPartyID), v))
	})
}

// SupplierPartyIDLT applies the LT predicate on the "supplier_party_id" field.
func SupplierPartyIDLT(v int) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSupplierPartyID), v))
	})
}

// SupplierPartyIDLTE applies the LTE predicate on the "supplier_party_id" field.
func SupplierPartyIDLTE(v int) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSupplierPartyID), v))
	})
}

// SupplierPartyIDIsNil applies the IsNil predicate on the "supplier_party_id" field.
func SupplierPartyIDIsNil() predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSupplierPartyID)))
	})
}

// SupplierPartyIDNotNil applies the NotNil predicate on the "supplier_party_id" field.
func SupplierPartyIDNotNil() predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSupplierPartyID)))
	})
}

// SupplierAgreementIDEQ applies the EQ predicate on the "supplier_agreement_id" field.
func SupplierAgreementIDEQ(v int) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSupplierAgreementID), v))
	})
}

// SupplierAgreementIDNEQ applies the NEQ predicate on the "supplier_agreement_id" field.
func SupplierAgreementIDNEQ(v int) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSupplierAgreementID), v))
	})
}

// SupplierAgreementIDIn applies the In predicate on the "supplier_agreement_id" field.
func SupplierAgreementIDIn(vs ...int) predicate.OrderItemShipGroup {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSupplierAgreementID), v...))
	})
}

// SupplierAgreementIDNotIn applies the NotIn predicate on the "supplier_agreement_id" field.
func SupplierAgreementIDNotIn(vs ...int) predicate.OrderItemShipGroup {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSupplierAgreementID), v...))
	})
}

// SupplierAgreementIDGT applies the GT predicate on the "supplier_agreement_id" field.
func SupplierAgreementIDGT(v int) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSupplierAgreementID), v))
	})
}

// SupplierAgreementIDGTE applies the GTE predicate on the "supplier_agreement_id" field.
func SupplierAgreementIDGTE(v int) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSupplierAgreementID), v))
	})
}

// SupplierAgreementIDLT applies the LT predicate on the "supplier_agreement_id" field.
func SupplierAgreementIDLT(v int) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSupplierAgreementID), v))
	})
}

// SupplierAgreementIDLTE applies the LTE predicate on the "supplier_agreement_id" field.
func SupplierAgreementIDLTE(v int) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSupplierAgreementID), v))
	})
}

// SupplierAgreementIDIsNil applies the IsNil predicate on the "supplier_agreement_id" field.
func SupplierAgreementIDIsNil() predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSupplierAgreementID)))
	})
}

// SupplierAgreementIDNotNil applies the NotNil predicate on the "supplier_agreement_id" field.
func SupplierAgreementIDNotNil() predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSupplierAgreementID)))
	})
}

// VendorPartyIDEQ applies the EQ predicate on the "vendor_party_id" field.
func VendorPartyIDEQ(v int) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVendorPartyID), v))
	})
}

// VendorPartyIDNEQ applies the NEQ predicate on the "vendor_party_id" field.
func VendorPartyIDNEQ(v int) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldVendorPartyID), v))
	})
}

// VendorPartyIDIn applies the In predicate on the "vendor_party_id" field.
func VendorPartyIDIn(vs ...int) predicate.OrderItemShipGroup {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldVendorPartyID), v...))
	})
}

// VendorPartyIDNotIn applies the NotIn predicate on the "vendor_party_id" field.
func VendorPartyIDNotIn(vs ...int) predicate.OrderItemShipGroup {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldVendorPartyID), v...))
	})
}

// VendorPartyIDGT applies the GT predicate on the "vendor_party_id" field.
func VendorPartyIDGT(v int) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldVendorPartyID), v))
	})
}

// VendorPartyIDGTE applies the GTE predicate on the "vendor_party_id" field.
func VendorPartyIDGTE(v int) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldVendorPartyID), v))
	})
}

// VendorPartyIDLT applies the LT predicate on the "vendor_party_id" field.
func VendorPartyIDLT(v int) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldVendorPartyID), v))
	})
}

// VendorPartyIDLTE applies the LTE predicate on the "vendor_party_id" field.
func VendorPartyIDLTE(v int) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldVendorPartyID), v))
	})
}

// VendorPartyIDIsNil applies the IsNil predicate on the "vendor_party_id" field.
func VendorPartyIDIsNil() predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldVendorPartyID)))
	})
}

// VendorPartyIDNotNil applies the NotNil predicate on the "vendor_party_id" field.
func VendorPartyIDNotNil() predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldVendorPartyID)))
	})
}

// CarrierPartyIDEQ applies the EQ predicate on the "carrier_party_id" field.
func CarrierPartyIDEQ(v int) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCarrierPartyID), v))
	})
}

// CarrierPartyIDNEQ applies the NEQ predicate on the "carrier_party_id" field.
func CarrierPartyIDNEQ(v int) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCarrierPartyID), v))
	})
}

// CarrierPartyIDIn applies the In predicate on the "carrier_party_id" field.
func CarrierPartyIDIn(vs ...int) predicate.OrderItemShipGroup {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCarrierPartyID), v...))
	})
}

// CarrierPartyIDNotIn applies the NotIn predicate on the "carrier_party_id" field.
func CarrierPartyIDNotIn(vs ...int) predicate.OrderItemShipGroup {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCarrierPartyID), v...))
	})
}

// CarrierPartyIDGT applies the GT predicate on the "carrier_party_id" field.
func CarrierPartyIDGT(v int) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCarrierPartyID), v))
	})
}

// CarrierPartyIDGTE applies the GTE predicate on the "carrier_party_id" field.
func CarrierPartyIDGTE(v int) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCarrierPartyID), v))
	})
}

// CarrierPartyIDLT applies the LT predicate on the "carrier_party_id" field.
func CarrierPartyIDLT(v int) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCarrierPartyID), v))
	})
}

// CarrierPartyIDLTE applies the LTE predicate on the "carrier_party_id" field.
func CarrierPartyIDLTE(v int) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCarrierPartyID), v))
	})
}

// CarrierPartyIDIsNil applies the IsNil predicate on the "carrier_party_id" field.
func CarrierPartyIDIsNil() predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCarrierPartyID)))
	})
}

// CarrierPartyIDNotNil applies the NotNil predicate on the "carrier_party_id" field.
func CarrierPartyIDNotNil() predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCarrierPartyID)))
	})
}

// CarrierRoleTypeIDEQ applies the EQ predicate on the "carrier_role_type_id" field.
func CarrierRoleTypeIDEQ(v int) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCarrierRoleTypeID), v))
	})
}

// CarrierRoleTypeIDNEQ applies the NEQ predicate on the "carrier_role_type_id" field.
func CarrierRoleTypeIDNEQ(v int) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCarrierRoleTypeID), v))
	})
}

// CarrierRoleTypeIDIn applies the In predicate on the "carrier_role_type_id" field.
func CarrierRoleTypeIDIn(vs ...int) predicate.OrderItemShipGroup {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCarrierRoleTypeID), v...))
	})
}

// CarrierRoleTypeIDNotIn applies the NotIn predicate on the "carrier_role_type_id" field.
func CarrierRoleTypeIDNotIn(vs ...int) predicate.OrderItemShipGroup {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCarrierRoleTypeID), v...))
	})
}

// CarrierRoleTypeIDGT applies the GT predicate on the "carrier_role_type_id" field.
func CarrierRoleTypeIDGT(v int) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCarrierRoleTypeID), v))
	})
}

// CarrierRoleTypeIDGTE applies the GTE predicate on the "carrier_role_type_id" field.
func CarrierRoleTypeIDGTE(v int) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCarrierRoleTypeID), v))
	})
}

// CarrierRoleTypeIDLT applies the LT predicate on the "carrier_role_type_id" field.
func CarrierRoleTypeIDLT(v int) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCarrierRoleTypeID), v))
	})
}

// CarrierRoleTypeIDLTE applies the LTE predicate on the "carrier_role_type_id" field.
func CarrierRoleTypeIDLTE(v int) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCarrierRoleTypeID), v))
	})
}

// CarrierRoleTypeIDIsNil applies the IsNil predicate on the "carrier_role_type_id" field.
func CarrierRoleTypeIDIsNil() predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCarrierRoleTypeID)))
	})
}

// CarrierRoleTypeIDNotNil applies the NotNil predicate on the "carrier_role_type_id" field.
func CarrierRoleTypeIDNotNil() predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCarrierRoleTypeID)))
	})
}

// FacilityIDEQ applies the EQ predicate on the "facility_id" field.
func FacilityIDEQ(v int) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFacilityID), v))
	})
}

// FacilityIDNEQ applies the NEQ predicate on the "facility_id" field.
func FacilityIDNEQ(v int) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFacilityID), v))
	})
}

// FacilityIDIn applies the In predicate on the "facility_id" field.
func FacilityIDIn(vs ...int) predicate.OrderItemShipGroup {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFacilityID), v...))
	})
}

// FacilityIDNotIn applies the NotIn predicate on the "facility_id" field.
func FacilityIDNotIn(vs ...int) predicate.OrderItemShipGroup {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFacilityID), v...))
	})
}

// FacilityIDGT applies the GT predicate on the "facility_id" field.
func FacilityIDGT(v int) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFacilityID), v))
	})
}

// FacilityIDGTE applies the GTE predicate on the "facility_id" field.
func FacilityIDGTE(v int) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFacilityID), v))
	})
}

// FacilityIDLT applies the LT predicate on the "facility_id" field.
func FacilityIDLT(v int) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFacilityID), v))
	})
}

// FacilityIDLTE applies the LTE predicate on the "facility_id" field.
func FacilityIDLTE(v int) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFacilityID), v))
	})
}

// FacilityIDIsNil applies the IsNil predicate on the "facility_id" field.
func FacilityIDIsNil() predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFacilityID)))
	})
}

// FacilityIDNotNil applies the NotNil predicate on the "facility_id" field.
func FacilityIDNotNil() predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFacilityID)))
	})
}

// ContactMechIDEQ applies the EQ predicate on the "contact_mech_id" field.
func ContactMechIDEQ(v int) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldContactMechID), v))
	})
}

// ContactMechIDNEQ applies the NEQ predicate on the "contact_mech_id" field.
func ContactMechIDNEQ(v int) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldContactMechID), v))
	})
}

// ContactMechIDIn applies the In predicate on the "contact_mech_id" field.
func ContactMechIDIn(vs ...int) predicate.OrderItemShipGroup {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldContactMechID), v...))
	})
}

// ContactMechIDNotIn applies the NotIn predicate on the "contact_mech_id" field.
func ContactMechIDNotIn(vs ...int) predicate.OrderItemShipGroup {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldContactMechID), v...))
	})
}

// ContactMechIDGT applies the GT predicate on the "contact_mech_id" field.
func ContactMechIDGT(v int) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldContactMechID), v))
	})
}

// ContactMechIDGTE applies the GTE predicate on the "contact_mech_id" field.
func ContactMechIDGTE(v int) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldContactMechID), v))
	})
}

// ContactMechIDLT applies the LT predicate on the "contact_mech_id" field.
func ContactMechIDLT(v int) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldContactMechID), v))
	})
}

// ContactMechIDLTE applies the LTE predicate on the "contact_mech_id" field.
func ContactMechIDLTE(v int) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldContactMechID), v))
	})
}

// ContactMechIDIsNil applies the IsNil predicate on the "contact_mech_id" field.
func ContactMechIDIsNil() predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldContactMechID)))
	})
}

// ContactMechIDNotNil applies the NotNil predicate on the "contact_mech_id" field.
func ContactMechIDNotNil() predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldContactMechID)))
	})
}

// TelecomContactMechIDEQ applies the EQ predicate on the "telecom_contact_mech_id" field.
func TelecomContactMechIDEQ(v int) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTelecomContactMechID), v))
	})
}

// TelecomContactMechIDNEQ applies the NEQ predicate on the "telecom_contact_mech_id" field.
func TelecomContactMechIDNEQ(v int) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTelecomContactMechID), v))
	})
}

// TelecomContactMechIDIn applies the In predicate on the "telecom_contact_mech_id" field.
func TelecomContactMechIDIn(vs ...int) predicate.OrderItemShipGroup {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTelecomContactMechID), v...))
	})
}

// TelecomContactMechIDNotIn applies the NotIn predicate on the "telecom_contact_mech_id" field.
func TelecomContactMechIDNotIn(vs ...int) predicate.OrderItemShipGroup {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTelecomContactMechID), v...))
	})
}

// TelecomContactMechIDGT applies the GT predicate on the "telecom_contact_mech_id" field.
func TelecomContactMechIDGT(v int) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTelecomContactMechID), v))
	})
}

// TelecomContactMechIDGTE applies the GTE predicate on the "telecom_contact_mech_id" field.
func TelecomContactMechIDGTE(v int) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTelecomContactMechID), v))
	})
}

// TelecomContactMechIDLT applies the LT predicate on the "telecom_contact_mech_id" field.
func TelecomContactMechIDLT(v int) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTelecomContactMechID), v))
	})
}

// TelecomContactMechIDLTE applies the LTE predicate on the "telecom_contact_mech_id" field.
func TelecomContactMechIDLTE(v int) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTelecomContactMechID), v))
	})
}

// TelecomContactMechIDIsNil applies the IsNil predicate on the "telecom_contact_mech_id" field.
func TelecomContactMechIDIsNil() predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTelecomContactMechID)))
	})
}

// TelecomContactMechIDNotNil applies the NotNil predicate on the "telecom_contact_mech_id" field.
func TelecomContactMechIDNotNil() predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTelecomContactMechID)))
	})
}

// TrackingNumberEQ applies the EQ predicate on the "tracking_number" field.
func TrackingNumberEQ(v string) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTrackingNumber), v))
	})
}

// TrackingNumberNEQ applies the NEQ predicate on the "tracking_number" field.
func TrackingNumberNEQ(v string) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTrackingNumber), v))
	})
}

// TrackingNumberIn applies the In predicate on the "tracking_number" field.
func TrackingNumberIn(vs ...string) predicate.OrderItemShipGroup {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTrackingNumber), v...))
	})
}

// TrackingNumberNotIn applies the NotIn predicate on the "tracking_number" field.
func TrackingNumberNotIn(vs ...string) predicate.OrderItemShipGroup {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTrackingNumber), v...))
	})
}

// TrackingNumberGT applies the GT predicate on the "tracking_number" field.
func TrackingNumberGT(v string) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTrackingNumber), v))
	})
}

// TrackingNumberGTE applies the GTE predicate on the "tracking_number" field.
func TrackingNumberGTE(v string) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTrackingNumber), v))
	})
}

// TrackingNumberLT applies the LT predicate on the "tracking_number" field.
func TrackingNumberLT(v string) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTrackingNumber), v))
	})
}

// TrackingNumberLTE applies the LTE predicate on the "tracking_number" field.
func TrackingNumberLTE(v string) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTrackingNumber), v))
	})
}

// TrackingNumberContains applies the Contains predicate on the "tracking_number" field.
func TrackingNumberContains(v string) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTrackingNumber), v))
	})
}

// TrackingNumberHasPrefix applies the HasPrefix predicate on the "tracking_number" field.
func TrackingNumberHasPrefix(v string) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTrackingNumber), v))
	})
}

// TrackingNumberHasSuffix applies the HasSuffix predicate on the "tracking_number" field.
func TrackingNumberHasSuffix(v string) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTrackingNumber), v))
	})
}

// TrackingNumberIsNil applies the IsNil predicate on the "tracking_number" field.
func TrackingNumberIsNil() predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTrackingNumber)))
	})
}

// TrackingNumberNotNil applies the NotNil predicate on the "tracking_number" field.
func TrackingNumberNotNil() predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTrackingNumber)))
	})
}

// TrackingNumberEqualFold applies the EqualFold predicate on the "tracking_number" field.
func TrackingNumberEqualFold(v string) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTrackingNumber), v))
	})
}

// TrackingNumberContainsFold applies the ContainsFold predicate on the "tracking_number" field.
func TrackingNumberContainsFold(v string) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTrackingNumber), v))
	})
}

// ShippingInstructionsEQ applies the EQ predicate on the "shipping_instructions" field.
func ShippingInstructionsEQ(v string) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShippingInstructions), v))
	})
}

// ShippingInstructionsNEQ applies the NEQ predicate on the "shipping_instructions" field.
func ShippingInstructionsNEQ(v string) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShippingInstructions), v))
	})
}

// ShippingInstructionsIn applies the In predicate on the "shipping_instructions" field.
func ShippingInstructionsIn(vs ...string) predicate.OrderItemShipGroup {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldShippingInstructions), v...))
	})
}

// ShippingInstructionsNotIn applies the NotIn predicate on the "shipping_instructions" field.
func ShippingInstructionsNotIn(vs ...string) predicate.OrderItemShipGroup {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldShippingInstructions), v...))
	})
}

// ShippingInstructionsGT applies the GT predicate on the "shipping_instructions" field.
func ShippingInstructionsGT(v string) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShippingInstructions), v))
	})
}

// ShippingInstructionsGTE applies the GTE predicate on the "shipping_instructions" field.
func ShippingInstructionsGTE(v string) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShippingInstructions), v))
	})
}

// ShippingInstructionsLT applies the LT predicate on the "shipping_instructions" field.
func ShippingInstructionsLT(v string) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShippingInstructions), v))
	})
}

// ShippingInstructionsLTE applies the LTE predicate on the "shipping_instructions" field.
func ShippingInstructionsLTE(v string) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShippingInstructions), v))
	})
}

// ShippingInstructionsContains applies the Contains predicate on the "shipping_instructions" field.
func ShippingInstructionsContains(v string) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldShippingInstructions), v))
	})
}

// ShippingInstructionsHasPrefix applies the HasPrefix predicate on the "shipping_instructions" field.
func ShippingInstructionsHasPrefix(v string) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldShippingInstructions), v))
	})
}

// ShippingInstructionsHasSuffix applies the HasSuffix predicate on the "shipping_instructions" field.
func ShippingInstructionsHasSuffix(v string) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldShippingInstructions), v))
	})
}

// ShippingInstructionsIsNil applies the IsNil predicate on the "shipping_instructions" field.
func ShippingInstructionsIsNil() predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldShippingInstructions)))
	})
}

// ShippingInstructionsNotNil applies the NotNil predicate on the "shipping_instructions" field.
func ShippingInstructionsNotNil() predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldShippingInstructions)))
	})
}

// ShippingInstructionsEqualFold applies the EqualFold predicate on the "shipping_instructions" field.
func ShippingInstructionsEqualFold(v string) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldShippingInstructions), v))
	})
}

// ShippingInstructionsContainsFold applies the ContainsFold predicate on the "shipping_instructions" field.
func ShippingInstructionsContainsFold(v string) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldShippingInstructions), v))
	})
}

// MaySplitEQ applies the EQ predicate on the "may_split" field.
func MaySplitEQ(v MaySplit) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMaySplit), v))
	})
}

// MaySplitNEQ applies the NEQ predicate on the "may_split" field.
func MaySplitNEQ(v MaySplit) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMaySplit), v))
	})
}

// MaySplitIn applies the In predicate on the "may_split" field.
func MaySplitIn(vs ...MaySplit) predicate.OrderItemShipGroup {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMaySplit), v...))
	})
}

// MaySplitNotIn applies the NotIn predicate on the "may_split" field.
func MaySplitNotIn(vs ...MaySplit) predicate.OrderItemShipGroup {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMaySplit), v...))
	})
}

// MaySplitIsNil applies the IsNil predicate on the "may_split" field.
func MaySplitIsNil() predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMaySplit)))
	})
}

// MaySplitNotNil applies the NotNil predicate on the "may_split" field.
func MaySplitNotNil() predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMaySplit)))
	})
}

// GiftMessageEQ applies the EQ predicate on the "gift_message" field.
func GiftMessageEQ(v string) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGiftMessage), v))
	})
}

// GiftMessageNEQ applies the NEQ predicate on the "gift_message" field.
func GiftMessageNEQ(v string) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGiftMessage), v))
	})
}

// GiftMessageIn applies the In predicate on the "gift_message" field.
func GiftMessageIn(vs ...string) predicate.OrderItemShipGroup {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldGiftMessage), v...))
	})
}

// GiftMessageNotIn applies the NotIn predicate on the "gift_message" field.
func GiftMessageNotIn(vs ...string) predicate.OrderItemShipGroup {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldGiftMessage), v...))
	})
}

// GiftMessageGT applies the GT predicate on the "gift_message" field.
func GiftMessageGT(v string) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGiftMessage), v))
	})
}

// GiftMessageGTE applies the GTE predicate on the "gift_message" field.
func GiftMessageGTE(v string) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGiftMessage), v))
	})
}

// GiftMessageLT applies the LT predicate on the "gift_message" field.
func GiftMessageLT(v string) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGiftMessage), v))
	})
}

// GiftMessageLTE applies the LTE predicate on the "gift_message" field.
func GiftMessageLTE(v string) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGiftMessage), v))
	})
}

// GiftMessageContains applies the Contains predicate on the "gift_message" field.
func GiftMessageContains(v string) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldGiftMessage), v))
	})
}

// GiftMessageHasPrefix applies the HasPrefix predicate on the "gift_message" field.
func GiftMessageHasPrefix(v string) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldGiftMessage), v))
	})
}

// GiftMessageHasSuffix applies the HasSuffix predicate on the "gift_message" field.
func GiftMessageHasSuffix(v string) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldGiftMessage), v))
	})
}

// GiftMessageIsNil applies the IsNil predicate on the "gift_message" field.
func GiftMessageIsNil() predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldGiftMessage)))
	})
}

// GiftMessageNotNil applies the NotNil predicate on the "gift_message" field.
func GiftMessageNotNil() predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldGiftMessage)))
	})
}

// GiftMessageEqualFold applies the EqualFold predicate on the "gift_message" field.
func GiftMessageEqualFold(v string) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldGiftMessage), v))
	})
}

// GiftMessageContainsFold applies the ContainsFold predicate on the "gift_message" field.
func GiftMessageContainsFold(v string) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldGiftMessage), v))
	})
}

// IsGiftEQ applies the EQ predicate on the "is_gift" field.
func IsGiftEQ(v IsGift) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsGift), v))
	})
}

// IsGiftNEQ applies the NEQ predicate on the "is_gift" field.
func IsGiftNEQ(v IsGift) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsGift), v))
	})
}

// IsGiftIn applies the In predicate on the "is_gift" field.
func IsGiftIn(vs ...IsGift) predicate.OrderItemShipGroup {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIsGift), v...))
	})
}

// IsGiftNotIn applies the NotIn predicate on the "is_gift" field.
func IsGiftNotIn(vs ...IsGift) predicate.OrderItemShipGroup {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIsGift), v...))
	})
}

// IsGiftIsNil applies the IsNil predicate on the "is_gift" field.
func IsGiftIsNil() predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldIsGift)))
	})
}

// IsGiftNotNil applies the NotNil predicate on the "is_gift" field.
func IsGiftNotNil() predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldIsGift)))
	})
}

// ShipAfterDateEQ applies the EQ predicate on the "ship_after_date" field.
func ShipAfterDateEQ(v time.Time) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShipAfterDate), v))
	})
}

// ShipAfterDateNEQ applies the NEQ predicate on the "ship_after_date" field.
func ShipAfterDateNEQ(v time.Time) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShipAfterDate), v))
	})
}

// ShipAfterDateIn applies the In predicate on the "ship_after_date" field.
func ShipAfterDateIn(vs ...time.Time) predicate.OrderItemShipGroup {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldShipAfterDate), v...))
	})
}

// ShipAfterDateNotIn applies the NotIn predicate on the "ship_after_date" field.
func ShipAfterDateNotIn(vs ...time.Time) predicate.OrderItemShipGroup {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldShipAfterDate), v...))
	})
}

// ShipAfterDateGT applies the GT predicate on the "ship_after_date" field.
func ShipAfterDateGT(v time.Time) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShipAfterDate), v))
	})
}

// ShipAfterDateGTE applies the GTE predicate on the "ship_after_date" field.
func ShipAfterDateGTE(v time.Time) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShipAfterDate), v))
	})
}

// ShipAfterDateLT applies the LT predicate on the "ship_after_date" field.
func ShipAfterDateLT(v time.Time) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShipAfterDate), v))
	})
}

// ShipAfterDateLTE applies the LTE predicate on the "ship_after_date" field.
func ShipAfterDateLTE(v time.Time) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShipAfterDate), v))
	})
}

// ShipAfterDateIsNil applies the IsNil predicate on the "ship_after_date" field.
func ShipAfterDateIsNil() predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldShipAfterDate)))
	})
}

// ShipAfterDateNotNil applies the NotNil predicate on the "ship_after_date" field.
func ShipAfterDateNotNil() predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldShipAfterDate)))
	})
}

// ShipByDateEQ applies the EQ predicate on the "ship_by_date" field.
func ShipByDateEQ(v time.Time) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShipByDate), v))
	})
}

// ShipByDateNEQ applies the NEQ predicate on the "ship_by_date" field.
func ShipByDateNEQ(v time.Time) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShipByDate), v))
	})
}

// ShipByDateIn applies the In predicate on the "ship_by_date" field.
func ShipByDateIn(vs ...time.Time) predicate.OrderItemShipGroup {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldShipByDate), v...))
	})
}

// ShipByDateNotIn applies the NotIn predicate on the "ship_by_date" field.
func ShipByDateNotIn(vs ...time.Time) predicate.OrderItemShipGroup {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldShipByDate), v...))
	})
}

// ShipByDateGT applies the GT predicate on the "ship_by_date" field.
func ShipByDateGT(v time.Time) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShipByDate), v))
	})
}

// ShipByDateGTE applies the GTE predicate on the "ship_by_date" field.
func ShipByDateGTE(v time.Time) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShipByDate), v))
	})
}

// ShipByDateLT applies the LT predicate on the "ship_by_date" field.
func ShipByDateLT(v time.Time) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShipByDate), v))
	})
}

// ShipByDateLTE applies the LTE predicate on the "ship_by_date" field.
func ShipByDateLTE(v time.Time) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShipByDate), v))
	})
}

// ShipByDateIsNil applies the IsNil predicate on the "ship_by_date" field.
func ShipByDateIsNil() predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldShipByDate)))
	})
}

// ShipByDateNotNil applies the NotNil predicate on the "ship_by_date" field.
func ShipByDateNotNil() predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldShipByDate)))
	})
}

// EstimatedShipDateEQ applies the EQ predicate on the "estimated_ship_date" field.
func EstimatedShipDateEQ(v time.Time) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEstimatedShipDate), v))
	})
}

// EstimatedShipDateNEQ applies the NEQ predicate on the "estimated_ship_date" field.
func EstimatedShipDateNEQ(v time.Time) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEstimatedShipDate), v))
	})
}

// EstimatedShipDateIn applies the In predicate on the "estimated_ship_date" field.
func EstimatedShipDateIn(vs ...time.Time) predicate.OrderItemShipGroup {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEstimatedShipDate), v...))
	})
}

// EstimatedShipDateNotIn applies the NotIn predicate on the "estimated_ship_date" field.
func EstimatedShipDateNotIn(vs ...time.Time) predicate.OrderItemShipGroup {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEstimatedShipDate), v...))
	})
}

// EstimatedShipDateGT applies the GT predicate on the "estimated_ship_date" field.
func EstimatedShipDateGT(v time.Time) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEstimatedShipDate), v))
	})
}

// EstimatedShipDateGTE applies the GTE predicate on the "estimated_ship_date" field.
func EstimatedShipDateGTE(v time.Time) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEstimatedShipDate), v))
	})
}

// EstimatedShipDateLT applies the LT predicate on the "estimated_ship_date" field.
func EstimatedShipDateLT(v time.Time) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEstimatedShipDate), v))
	})
}

// EstimatedShipDateLTE applies the LTE predicate on the "estimated_ship_date" field.
func EstimatedShipDateLTE(v time.Time) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEstimatedShipDate), v))
	})
}

// EstimatedShipDateIsNil applies the IsNil predicate on the "estimated_ship_date" field.
func EstimatedShipDateIsNil() predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldEstimatedShipDate)))
	})
}

// EstimatedShipDateNotNil applies the NotNil predicate on the "estimated_ship_date" field.
func EstimatedShipDateNotNil() predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldEstimatedShipDate)))
	})
}

// EstimatedDeliveryDateEQ applies the EQ predicate on the "estimated_delivery_date" field.
func EstimatedDeliveryDateEQ(v time.Time) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEstimatedDeliveryDate), v))
	})
}

// EstimatedDeliveryDateNEQ applies the NEQ predicate on the "estimated_delivery_date" field.
func EstimatedDeliveryDateNEQ(v time.Time) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEstimatedDeliveryDate), v))
	})
}

// EstimatedDeliveryDateIn applies the In predicate on the "estimated_delivery_date" field.
func EstimatedDeliveryDateIn(vs ...time.Time) predicate.OrderItemShipGroup {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEstimatedDeliveryDate), v...))
	})
}

// EstimatedDeliveryDateNotIn applies the NotIn predicate on the "estimated_delivery_date" field.
func EstimatedDeliveryDateNotIn(vs ...time.Time) predicate.OrderItemShipGroup {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEstimatedDeliveryDate), v...))
	})
}

// EstimatedDeliveryDateGT applies the GT predicate on the "estimated_delivery_date" field.
func EstimatedDeliveryDateGT(v time.Time) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEstimatedDeliveryDate), v))
	})
}

// EstimatedDeliveryDateGTE applies the GTE predicate on the "estimated_delivery_date" field.
func EstimatedDeliveryDateGTE(v time.Time) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEstimatedDeliveryDate), v))
	})
}

// EstimatedDeliveryDateLT applies the LT predicate on the "estimated_delivery_date" field.
func EstimatedDeliveryDateLT(v time.Time) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEstimatedDeliveryDate), v))
	})
}

// EstimatedDeliveryDateLTE applies the LTE predicate on the "estimated_delivery_date" field.
func EstimatedDeliveryDateLTE(v time.Time) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEstimatedDeliveryDate), v))
	})
}

// EstimatedDeliveryDateIsNil applies the IsNil predicate on the "estimated_delivery_date" field.
func EstimatedDeliveryDateIsNil() predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldEstimatedDeliveryDate)))
	})
}

// EstimatedDeliveryDateNotNil applies the NotNil predicate on the "estimated_delivery_date" field.
func EstimatedDeliveryDateNotNil() predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldEstimatedDeliveryDate)))
	})
}

// HasOrderHeader applies the HasEdge predicate on the "order_header" edge.
func HasOrderHeader() predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderHeaderTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OrderHeaderTable, OrderHeaderColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderHeaderWith applies the HasEdge predicate on the "order_header" edge with a given conditions (other predicates).
func HasOrderHeaderWith(preds ...predicate.OrderHeader) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderHeaderInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OrderHeaderTable, OrderHeaderColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrderItemShipGroupAssocs applies the HasEdge predicate on the "order_item_ship_group_assocs" edge.
func HasOrderItemShipGroupAssocs() predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderItemShipGroupAssocsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrderItemShipGroupAssocsTable, OrderItemShipGroupAssocsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderItemShipGroupAssocsWith applies the HasEdge predicate on the "order_item_ship_group_assocs" edge with a given conditions (other predicates).
func HasOrderItemShipGroupAssocsWith(preds ...predicate.OrderItemShipGroupAssoc) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderItemShipGroupAssocsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrderItemShipGroupAssocsTable, OrderItemShipGroupAssocsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPrimaryShipments applies the HasEdge predicate on the "primary_shipments" edge.
func HasPrimaryShipments() predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PrimaryShipmentsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PrimaryShipmentsTable, PrimaryShipmentsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPrimaryShipmentsWith applies the HasEdge predicate on the "primary_shipments" edge with a given conditions (other predicates).
func HasPrimaryShipmentsWith(preds ...predicate.Shipment) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PrimaryShipmentsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PrimaryShipmentsTable, PrimaryShipmentsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.OrderItemShipGroup) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.OrderItemShipGroup) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.OrderItemShipGroup) predicate.OrderItemShipGroup {
	return predicate.OrderItemShipGroup(func(s *sql.Selector) {
		p(s.Not())
	})
}
