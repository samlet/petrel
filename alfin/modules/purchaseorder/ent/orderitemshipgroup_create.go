// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/orderheader"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/orderitemshipgroup"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/orderitemshipgroupassoc"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/shipment"
)

// OrderItemShipGroupCreate is the builder for creating a OrderItemShipGroup entity.
type OrderItemShipGroupCreate struct {
	config
	mutation *OrderItemShipGroupMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (oisgc *OrderItemShipGroupCreate) SetCreateTime(t time.Time) *OrderItemShipGroupCreate {
	oisgc.mutation.SetCreateTime(t)
	return oisgc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (oisgc *OrderItemShipGroupCreate) SetNillableCreateTime(t *time.Time) *OrderItemShipGroupCreate {
	if t != nil {
		oisgc.SetCreateTime(*t)
	}
	return oisgc
}

// SetUpdateTime sets the "update_time" field.
func (oisgc *OrderItemShipGroupCreate) SetUpdateTime(t time.Time) *OrderItemShipGroupCreate {
	oisgc.mutation.SetUpdateTime(t)
	return oisgc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (oisgc *OrderItemShipGroupCreate) SetNillableUpdateTime(t *time.Time) *OrderItemShipGroupCreate {
	if t != nil {
		oisgc.SetUpdateTime(*t)
	}
	return oisgc
}

// SetShipGroupSeqID sets the "ship_group_seq_id" field.
func (oisgc *OrderItemShipGroupCreate) SetShipGroupSeqID(i int) *OrderItemShipGroupCreate {
	oisgc.mutation.SetShipGroupSeqID(i)
	return oisgc
}

// SetShipmentMethodTypeID sets the "shipment_method_type_id" field.
func (oisgc *OrderItemShipGroupCreate) SetShipmentMethodTypeID(i int) *OrderItemShipGroupCreate {
	oisgc.mutation.SetShipmentMethodTypeID(i)
	return oisgc
}

// SetNillableShipmentMethodTypeID sets the "shipment_method_type_id" field if the given value is not nil.
func (oisgc *OrderItemShipGroupCreate) SetNillableShipmentMethodTypeID(i *int) *OrderItemShipGroupCreate {
	if i != nil {
		oisgc.SetShipmentMethodTypeID(*i)
	}
	return oisgc
}

// SetSupplierPartyID sets the "supplier_party_id" field.
func (oisgc *OrderItemShipGroupCreate) SetSupplierPartyID(i int) *OrderItemShipGroupCreate {
	oisgc.mutation.SetSupplierPartyID(i)
	return oisgc
}

// SetNillableSupplierPartyID sets the "supplier_party_id" field if the given value is not nil.
func (oisgc *OrderItemShipGroupCreate) SetNillableSupplierPartyID(i *int) *OrderItemShipGroupCreate {
	if i != nil {
		oisgc.SetSupplierPartyID(*i)
	}
	return oisgc
}

// SetSupplierAgreementID sets the "supplier_agreement_id" field.
func (oisgc *OrderItemShipGroupCreate) SetSupplierAgreementID(i int) *OrderItemShipGroupCreate {
	oisgc.mutation.SetSupplierAgreementID(i)
	return oisgc
}

// SetNillableSupplierAgreementID sets the "supplier_agreement_id" field if the given value is not nil.
func (oisgc *OrderItemShipGroupCreate) SetNillableSupplierAgreementID(i *int) *OrderItemShipGroupCreate {
	if i != nil {
		oisgc.SetSupplierAgreementID(*i)
	}
	return oisgc
}

// SetVendorPartyID sets the "vendor_party_id" field.
func (oisgc *OrderItemShipGroupCreate) SetVendorPartyID(i int) *OrderItemShipGroupCreate {
	oisgc.mutation.SetVendorPartyID(i)
	return oisgc
}

// SetNillableVendorPartyID sets the "vendor_party_id" field if the given value is not nil.
func (oisgc *OrderItemShipGroupCreate) SetNillableVendorPartyID(i *int) *OrderItemShipGroupCreate {
	if i != nil {
		oisgc.SetVendorPartyID(*i)
	}
	return oisgc
}

// SetCarrierPartyID sets the "carrier_party_id" field.
func (oisgc *OrderItemShipGroupCreate) SetCarrierPartyID(i int) *OrderItemShipGroupCreate {
	oisgc.mutation.SetCarrierPartyID(i)
	return oisgc
}

// SetNillableCarrierPartyID sets the "carrier_party_id" field if the given value is not nil.
func (oisgc *OrderItemShipGroupCreate) SetNillableCarrierPartyID(i *int) *OrderItemShipGroupCreate {
	if i != nil {
		oisgc.SetCarrierPartyID(*i)
	}
	return oisgc
}

// SetCarrierRoleTypeID sets the "carrier_role_type_id" field.
func (oisgc *OrderItemShipGroupCreate) SetCarrierRoleTypeID(i int) *OrderItemShipGroupCreate {
	oisgc.mutation.SetCarrierRoleTypeID(i)
	return oisgc
}

// SetNillableCarrierRoleTypeID sets the "carrier_role_type_id" field if the given value is not nil.
func (oisgc *OrderItemShipGroupCreate) SetNillableCarrierRoleTypeID(i *int) *OrderItemShipGroupCreate {
	if i != nil {
		oisgc.SetCarrierRoleTypeID(*i)
	}
	return oisgc
}

// SetFacilityID sets the "facility_id" field.
func (oisgc *OrderItemShipGroupCreate) SetFacilityID(i int) *OrderItemShipGroupCreate {
	oisgc.mutation.SetFacilityID(i)
	return oisgc
}

// SetNillableFacilityID sets the "facility_id" field if the given value is not nil.
func (oisgc *OrderItemShipGroupCreate) SetNillableFacilityID(i *int) *OrderItemShipGroupCreate {
	if i != nil {
		oisgc.SetFacilityID(*i)
	}
	return oisgc
}

// SetContactMechID sets the "contact_mech_id" field.
func (oisgc *OrderItemShipGroupCreate) SetContactMechID(i int) *OrderItemShipGroupCreate {
	oisgc.mutation.SetContactMechID(i)
	return oisgc
}

// SetNillableContactMechID sets the "contact_mech_id" field if the given value is not nil.
func (oisgc *OrderItemShipGroupCreate) SetNillableContactMechID(i *int) *OrderItemShipGroupCreate {
	if i != nil {
		oisgc.SetContactMechID(*i)
	}
	return oisgc
}

// SetTelecomContactMechID sets the "telecom_contact_mech_id" field.
func (oisgc *OrderItemShipGroupCreate) SetTelecomContactMechID(i int) *OrderItemShipGroupCreate {
	oisgc.mutation.SetTelecomContactMechID(i)
	return oisgc
}

// SetNillableTelecomContactMechID sets the "telecom_contact_mech_id" field if the given value is not nil.
func (oisgc *OrderItemShipGroupCreate) SetNillableTelecomContactMechID(i *int) *OrderItemShipGroupCreate {
	if i != nil {
		oisgc.SetTelecomContactMechID(*i)
	}
	return oisgc
}

// SetTrackingNumber sets the "tracking_number" field.
func (oisgc *OrderItemShipGroupCreate) SetTrackingNumber(s string) *OrderItemShipGroupCreate {
	oisgc.mutation.SetTrackingNumber(s)
	return oisgc
}

// SetNillableTrackingNumber sets the "tracking_number" field if the given value is not nil.
func (oisgc *OrderItemShipGroupCreate) SetNillableTrackingNumber(s *string) *OrderItemShipGroupCreate {
	if s != nil {
		oisgc.SetTrackingNumber(*s)
	}
	return oisgc
}

// SetShippingInstructions sets the "shipping_instructions" field.
func (oisgc *OrderItemShipGroupCreate) SetShippingInstructions(s string) *OrderItemShipGroupCreate {
	oisgc.mutation.SetShippingInstructions(s)
	return oisgc
}

// SetNillableShippingInstructions sets the "shipping_instructions" field if the given value is not nil.
func (oisgc *OrderItemShipGroupCreate) SetNillableShippingInstructions(s *string) *OrderItemShipGroupCreate {
	if s != nil {
		oisgc.SetShippingInstructions(*s)
	}
	return oisgc
}

// SetMaySplit sets the "may_split" field.
func (oisgc *OrderItemShipGroupCreate) SetMaySplit(os orderitemshipgroup.MaySplit) *OrderItemShipGroupCreate {
	oisgc.mutation.SetMaySplit(os)
	return oisgc
}

// SetNillableMaySplit sets the "may_split" field if the given value is not nil.
func (oisgc *OrderItemShipGroupCreate) SetNillableMaySplit(os *orderitemshipgroup.MaySplit) *OrderItemShipGroupCreate {
	if os != nil {
		oisgc.SetMaySplit(*os)
	}
	return oisgc
}

// SetGiftMessage sets the "gift_message" field.
func (oisgc *OrderItemShipGroupCreate) SetGiftMessage(s string) *OrderItemShipGroupCreate {
	oisgc.mutation.SetGiftMessage(s)
	return oisgc
}

// SetNillableGiftMessage sets the "gift_message" field if the given value is not nil.
func (oisgc *OrderItemShipGroupCreate) SetNillableGiftMessage(s *string) *OrderItemShipGroupCreate {
	if s != nil {
		oisgc.SetGiftMessage(*s)
	}
	return oisgc
}

// SetIsGift sets the "is_gift" field.
func (oisgc *OrderItemShipGroupCreate) SetIsGift(og orderitemshipgroup.IsGift) *OrderItemShipGroupCreate {
	oisgc.mutation.SetIsGift(og)
	return oisgc
}

// SetNillableIsGift sets the "is_gift" field if the given value is not nil.
func (oisgc *OrderItemShipGroupCreate) SetNillableIsGift(og *orderitemshipgroup.IsGift) *OrderItemShipGroupCreate {
	if og != nil {
		oisgc.SetIsGift(*og)
	}
	return oisgc
}

// SetShipAfterDate sets the "ship_after_date" field.
func (oisgc *OrderItemShipGroupCreate) SetShipAfterDate(t time.Time) *OrderItemShipGroupCreate {
	oisgc.mutation.SetShipAfterDate(t)
	return oisgc
}

// SetNillableShipAfterDate sets the "ship_after_date" field if the given value is not nil.
func (oisgc *OrderItemShipGroupCreate) SetNillableShipAfterDate(t *time.Time) *OrderItemShipGroupCreate {
	if t != nil {
		oisgc.SetShipAfterDate(*t)
	}
	return oisgc
}

// SetShipByDate sets the "ship_by_date" field.
func (oisgc *OrderItemShipGroupCreate) SetShipByDate(t time.Time) *OrderItemShipGroupCreate {
	oisgc.mutation.SetShipByDate(t)
	return oisgc
}

// SetNillableShipByDate sets the "ship_by_date" field if the given value is not nil.
func (oisgc *OrderItemShipGroupCreate) SetNillableShipByDate(t *time.Time) *OrderItemShipGroupCreate {
	if t != nil {
		oisgc.SetShipByDate(*t)
	}
	return oisgc
}

// SetEstimatedShipDate sets the "estimated_ship_date" field.
func (oisgc *OrderItemShipGroupCreate) SetEstimatedShipDate(t time.Time) *OrderItemShipGroupCreate {
	oisgc.mutation.SetEstimatedShipDate(t)
	return oisgc
}

// SetNillableEstimatedShipDate sets the "estimated_ship_date" field if the given value is not nil.
func (oisgc *OrderItemShipGroupCreate) SetNillableEstimatedShipDate(t *time.Time) *OrderItemShipGroupCreate {
	if t != nil {
		oisgc.SetEstimatedShipDate(*t)
	}
	return oisgc
}

// SetEstimatedDeliveryDate sets the "estimated_delivery_date" field.
func (oisgc *OrderItemShipGroupCreate) SetEstimatedDeliveryDate(t time.Time) *OrderItemShipGroupCreate {
	oisgc.mutation.SetEstimatedDeliveryDate(t)
	return oisgc
}

// SetNillableEstimatedDeliveryDate sets the "estimated_delivery_date" field if the given value is not nil.
func (oisgc *OrderItemShipGroupCreate) SetNillableEstimatedDeliveryDate(t *time.Time) *OrderItemShipGroupCreate {
	if t != nil {
		oisgc.SetEstimatedDeliveryDate(*t)
	}
	return oisgc
}

// SetOrderHeaderID sets the "order_header" edge to the OrderHeader entity by ID.
func (oisgc *OrderItemShipGroupCreate) SetOrderHeaderID(id int) *OrderItemShipGroupCreate {
	oisgc.mutation.SetOrderHeaderID(id)
	return oisgc
}

// SetNillableOrderHeaderID sets the "order_header" edge to the OrderHeader entity by ID if the given value is not nil.
func (oisgc *OrderItemShipGroupCreate) SetNillableOrderHeaderID(id *int) *OrderItemShipGroupCreate {
	if id != nil {
		oisgc = oisgc.SetOrderHeaderID(*id)
	}
	return oisgc
}

// SetOrderHeader sets the "order_header" edge to the OrderHeader entity.
func (oisgc *OrderItemShipGroupCreate) SetOrderHeader(o *OrderHeader) *OrderItemShipGroupCreate {
	return oisgc.SetOrderHeaderID(o.ID)
}

// AddOrderItemShipGroupAssocIDs adds the "order_item_ship_group_assocs" edge to the OrderItemShipGroupAssoc entity by IDs.
func (oisgc *OrderItemShipGroupCreate) AddOrderItemShipGroupAssocIDs(ids ...int) *OrderItemShipGroupCreate {
	oisgc.mutation.AddOrderItemShipGroupAssocIDs(ids...)
	return oisgc
}

// AddOrderItemShipGroupAssocs adds the "order_item_ship_group_assocs" edges to the OrderItemShipGroupAssoc entity.
func (oisgc *OrderItemShipGroupCreate) AddOrderItemShipGroupAssocs(o ...*OrderItemShipGroupAssoc) *OrderItemShipGroupCreate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oisgc.AddOrderItemShipGroupAssocIDs(ids...)
}

// AddPrimaryShipmentIDs adds the "primary_shipments" edge to the Shipment entity by IDs.
func (oisgc *OrderItemShipGroupCreate) AddPrimaryShipmentIDs(ids ...int) *OrderItemShipGroupCreate {
	oisgc.mutation.AddPrimaryShipmentIDs(ids...)
	return oisgc
}

// AddPrimaryShipments adds the "primary_shipments" edges to the Shipment entity.
func (oisgc *OrderItemShipGroupCreate) AddPrimaryShipments(s ...*Shipment) *OrderItemShipGroupCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return oisgc.AddPrimaryShipmentIDs(ids...)
}

// Mutation returns the OrderItemShipGroupMutation object of the builder.
func (oisgc *OrderItemShipGroupCreate) Mutation() *OrderItemShipGroupMutation {
	return oisgc.mutation
}

// Save creates the OrderItemShipGroup in the database.
func (oisgc *OrderItemShipGroupCreate) Save(ctx context.Context) (*OrderItemShipGroup, error) {
	var (
		err  error
		node *OrderItemShipGroup
	)
	oisgc.defaults()
	if len(oisgc.hooks) == 0 {
		if err = oisgc.check(); err != nil {
			return nil, err
		}
		node, err = oisgc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderItemShipGroupMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = oisgc.check(); err != nil {
				return nil, err
			}
			oisgc.mutation = mutation
			node, err = oisgc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(oisgc.hooks) - 1; i >= 0; i-- {
			mut = oisgc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, oisgc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (oisgc *OrderItemShipGroupCreate) SaveX(ctx context.Context) *OrderItemShipGroup {
	v, err := oisgc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (oisgc *OrderItemShipGroupCreate) defaults() {
	if _, ok := oisgc.mutation.CreateTime(); !ok {
		v := orderitemshipgroup.DefaultCreateTime()
		oisgc.mutation.SetCreateTime(v)
	}
	if _, ok := oisgc.mutation.UpdateTime(); !ok {
		v := orderitemshipgroup.DefaultUpdateTime()
		oisgc.mutation.SetUpdateTime(v)
	}
	if _, ok := oisgc.mutation.ShipAfterDate(); !ok {
		v := orderitemshipgroup.DefaultShipAfterDate()
		oisgc.mutation.SetShipAfterDate(v)
	}
	if _, ok := oisgc.mutation.ShipByDate(); !ok {
		v := orderitemshipgroup.DefaultShipByDate()
		oisgc.mutation.SetShipByDate(v)
	}
	if _, ok := oisgc.mutation.EstimatedShipDate(); !ok {
		v := orderitemshipgroup.DefaultEstimatedShipDate()
		oisgc.mutation.SetEstimatedShipDate(v)
	}
	if _, ok := oisgc.mutation.EstimatedDeliveryDate(); !ok {
		v := orderitemshipgroup.DefaultEstimatedDeliveryDate()
		oisgc.mutation.SetEstimatedDeliveryDate(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oisgc *OrderItemShipGroupCreate) check() error {
	if _, ok := oisgc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New("ent: missing required field \"create_time\"")}
	}
	if _, ok := oisgc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New("ent: missing required field \"update_time\"")}
	}
	if _, ok := oisgc.mutation.ShipGroupSeqID(); !ok {
		return &ValidationError{Name: "ship_group_seq_id", err: errors.New("ent: missing required field \"ship_group_seq_id\"")}
	}
	if v, ok := oisgc.mutation.MaySplit(); ok {
		if err := orderitemshipgroup.MaySplitValidator(v); err != nil {
			return &ValidationError{Name: "may_split", err: fmt.Errorf("ent: validator failed for field \"may_split\": %w", err)}
		}
	}
	if v, ok := oisgc.mutation.IsGift(); ok {
		if err := orderitemshipgroup.IsGiftValidator(v); err != nil {
			return &ValidationError{Name: "is_gift", err: fmt.Errorf("ent: validator failed for field \"is_gift\": %w", err)}
		}
	}
	return nil
}

func (oisgc *OrderItemShipGroupCreate) sqlSave(ctx context.Context) (*OrderItemShipGroup, error) {
	_node, _spec := oisgc.createSpec()
	if err := sqlgraph.CreateNode(ctx, oisgc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (oisgc *OrderItemShipGroupCreate) createSpec() (*OrderItemShipGroup, *sqlgraph.CreateSpec) {
	var (
		_node = &OrderItemShipGroup{config: oisgc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: orderitemshipgroup.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: orderitemshipgroup.FieldID,
			},
		}
	)
	if value, ok := oisgc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderitemshipgroup.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := oisgc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderitemshipgroup.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := oisgc.mutation.ShipGroupSeqID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitemshipgroup.FieldShipGroupSeqID,
		})
		_node.ShipGroupSeqID = value
	}
	if value, ok := oisgc.mutation.ShipmentMethodTypeID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitemshipgroup.FieldShipmentMethodTypeID,
		})
		_node.ShipmentMethodTypeID = value
	}
	if value, ok := oisgc.mutation.SupplierPartyID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitemshipgroup.FieldSupplierPartyID,
		})
		_node.SupplierPartyID = value
	}
	if value, ok := oisgc.mutation.SupplierAgreementID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitemshipgroup.FieldSupplierAgreementID,
		})
		_node.SupplierAgreementID = value
	}
	if value, ok := oisgc.mutation.VendorPartyID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitemshipgroup.FieldVendorPartyID,
		})
		_node.VendorPartyID = value
	}
	if value, ok := oisgc.mutation.CarrierPartyID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitemshipgroup.FieldCarrierPartyID,
		})
		_node.CarrierPartyID = value
	}
	if value, ok := oisgc.mutation.CarrierRoleTypeID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitemshipgroup.FieldCarrierRoleTypeID,
		})
		_node.CarrierRoleTypeID = value
	}
	if value, ok := oisgc.mutation.FacilityID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitemshipgroup.FieldFacilityID,
		})
		_node.FacilityID = value
	}
	if value, ok := oisgc.mutation.ContactMechID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitemshipgroup.FieldContactMechID,
		})
		_node.ContactMechID = value
	}
	if value, ok := oisgc.mutation.TelecomContactMechID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitemshipgroup.FieldTelecomContactMechID,
		})
		_node.TelecomContactMechID = value
	}
	if value, ok := oisgc.mutation.TrackingNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderitemshipgroup.FieldTrackingNumber,
		})
		_node.TrackingNumber = value
	}
	if value, ok := oisgc.mutation.ShippingInstructions(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderitemshipgroup.FieldShippingInstructions,
		})
		_node.ShippingInstructions = value
	}
	if value, ok := oisgc.mutation.MaySplit(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: orderitemshipgroup.FieldMaySplit,
		})
		_node.MaySplit = value
	}
	if value, ok := oisgc.mutation.GiftMessage(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderitemshipgroup.FieldGiftMessage,
		})
		_node.GiftMessage = value
	}
	if value, ok := oisgc.mutation.IsGift(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: orderitemshipgroup.FieldIsGift,
		})
		_node.IsGift = value
	}
	if value, ok := oisgc.mutation.ShipAfterDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderitemshipgroup.FieldShipAfterDate,
		})
		_node.ShipAfterDate = value
	}
	if value, ok := oisgc.mutation.ShipByDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderitemshipgroup.FieldShipByDate,
		})
		_node.ShipByDate = value
	}
	if value, ok := oisgc.mutation.EstimatedShipDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderitemshipgroup.FieldEstimatedShipDate,
		})
		_node.EstimatedShipDate = value
	}
	if value, ok := oisgc.mutation.EstimatedDeliveryDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderitemshipgroup.FieldEstimatedDeliveryDate,
		})
		_node.EstimatedDeliveryDate = value
	}
	if nodes := oisgc.mutation.OrderHeaderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderitemshipgroup.OrderHeaderTable,
			Columns: []string{orderitemshipgroup.OrderHeaderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderheader.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.order_header_order_item_ship_groups = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oisgc.mutation.OrderItemShipGroupAssocsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderitemshipgroup.OrderItemShipGroupAssocsTable,
			Columns: []string{orderitemshipgroup.OrderItemShipGroupAssocsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitemshipgroupassoc.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oisgc.mutation.PrimaryShipmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderitemshipgroup.PrimaryShipmentsTable,
			Columns: []string{orderitemshipgroup.PrimaryShipmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OrderItemShipGroupCreateBulk is the builder for creating many OrderItemShipGroup entities in bulk.
type OrderItemShipGroupCreateBulk struct {
	config
	builders []*OrderItemShipGroupCreate
}

// Save creates the OrderItemShipGroup entities in the database.
func (oisgcb *OrderItemShipGroupCreateBulk) Save(ctx context.Context) ([]*OrderItemShipGroup, error) {
	specs := make([]*sqlgraph.CreateSpec, len(oisgcb.builders))
	nodes := make([]*OrderItemShipGroup, len(oisgcb.builders))
	mutators := make([]Mutator, len(oisgcb.builders))
	for i := range oisgcb.builders {
		func(i int, root context.Context) {
			builder := oisgcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrderItemShipGroupMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, oisgcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, oisgcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, oisgcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (oisgcb *OrderItemShipGroupCreateBulk) SaveX(ctx context.Context) []*OrderItemShipGroup {
	v, err := oisgcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
