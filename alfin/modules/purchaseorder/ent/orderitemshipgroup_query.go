// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/orderheader"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/orderitemshipgroup"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/orderitemshipgroupassoc"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/predicate"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/shipment"
)

// OrderItemShipGroupQuery is the builder for querying OrderItemShipGroup entities.
type OrderItemShipGroupQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.OrderItemShipGroup
	// eager-loading edges.
	withOrderHeader              *OrderHeaderQuery
	withOrderItemShipGroupAssocs *OrderItemShipGroupAssocQuery
	withPrimaryShipments         *ShipmentQuery
	withFKs                      bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the OrderItemShipGroupQuery builder.
func (oisgq *OrderItemShipGroupQuery) Where(ps ...predicate.OrderItemShipGroup) *OrderItemShipGroupQuery {
	oisgq.predicates = append(oisgq.predicates, ps...)
	return oisgq
}

// Limit adds a limit step to the query.
func (oisgq *OrderItemShipGroupQuery) Limit(limit int) *OrderItemShipGroupQuery {
	oisgq.limit = &limit
	return oisgq
}

// Offset adds an offset step to the query.
func (oisgq *OrderItemShipGroupQuery) Offset(offset int) *OrderItemShipGroupQuery {
	oisgq.offset = &offset
	return oisgq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (oisgq *OrderItemShipGroupQuery) Unique(unique bool) *OrderItemShipGroupQuery {
	oisgq.unique = &unique
	return oisgq
}

// Order adds an order step to the query.
func (oisgq *OrderItemShipGroupQuery) Order(o ...OrderFunc) *OrderItemShipGroupQuery {
	oisgq.order = append(oisgq.order, o...)
	return oisgq
}

// QueryOrderHeader chains the current query on the "order_header" edge.
func (oisgq *OrderItemShipGroupQuery) QueryOrderHeader() *OrderHeaderQuery {
	query := &OrderHeaderQuery{config: oisgq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := oisgq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := oisgq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(orderitemshipgroup.Table, orderitemshipgroup.FieldID, selector),
			sqlgraph.To(orderheader.Table, orderheader.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, orderitemshipgroup.OrderHeaderTable, orderitemshipgroup.OrderHeaderColumn),
		)
		fromU = sqlgraph.SetNeighbors(oisgq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOrderItemShipGroupAssocs chains the current query on the "order_item_ship_group_assocs" edge.
func (oisgq *OrderItemShipGroupQuery) QueryOrderItemShipGroupAssocs() *OrderItemShipGroupAssocQuery {
	query := &OrderItemShipGroupAssocQuery{config: oisgq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := oisgq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := oisgq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(orderitemshipgroup.Table, orderitemshipgroup.FieldID, selector),
			sqlgraph.To(orderitemshipgroupassoc.Table, orderitemshipgroupassoc.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, orderitemshipgroup.OrderItemShipGroupAssocsTable, orderitemshipgroup.OrderItemShipGroupAssocsColumn),
		)
		fromU = sqlgraph.SetNeighbors(oisgq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPrimaryShipments chains the current query on the "primary_shipments" edge.
func (oisgq *OrderItemShipGroupQuery) QueryPrimaryShipments() *ShipmentQuery {
	query := &ShipmentQuery{config: oisgq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := oisgq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := oisgq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(orderitemshipgroup.Table, orderitemshipgroup.FieldID, selector),
			sqlgraph.To(shipment.Table, shipment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, orderitemshipgroup.PrimaryShipmentsTable, orderitemshipgroup.PrimaryShipmentsColumn),
		)
		fromU = sqlgraph.SetNeighbors(oisgq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first OrderItemShipGroup entity from the query.
// Returns a *NotFoundError when no OrderItemShipGroup was found.
func (oisgq *OrderItemShipGroupQuery) First(ctx context.Context) (*OrderItemShipGroup, error) {
	nodes, err := oisgq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{orderitemshipgroup.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (oisgq *OrderItemShipGroupQuery) FirstX(ctx context.Context) *OrderItemShipGroup {
	node, err := oisgq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first OrderItemShipGroup ID from the query.
// Returns a *NotFoundError when no OrderItemShipGroup ID was found.
func (oisgq *OrderItemShipGroupQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = oisgq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{orderitemshipgroup.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (oisgq *OrderItemShipGroupQuery) FirstIDX(ctx context.Context) int {
	id, err := oisgq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single OrderItemShipGroup entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one OrderItemShipGroup entity is not found.
// Returns a *NotFoundError when no OrderItemShipGroup entities are found.
func (oisgq *OrderItemShipGroupQuery) Only(ctx context.Context) (*OrderItemShipGroup, error) {
	nodes, err := oisgq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{orderitemshipgroup.Label}
	default:
		return nil, &NotSingularError{orderitemshipgroup.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (oisgq *OrderItemShipGroupQuery) OnlyX(ctx context.Context) *OrderItemShipGroup {
	node, err := oisgq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only OrderItemShipGroup ID in the query.
// Returns a *NotSingularError when exactly one OrderItemShipGroup ID is not found.
// Returns a *NotFoundError when no entities are found.
func (oisgq *OrderItemShipGroupQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = oisgq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{orderitemshipgroup.Label}
	default:
		err = &NotSingularError{orderitemshipgroup.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (oisgq *OrderItemShipGroupQuery) OnlyIDX(ctx context.Context) int {
	id, err := oisgq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of OrderItemShipGroups.
func (oisgq *OrderItemShipGroupQuery) All(ctx context.Context) ([]*OrderItemShipGroup, error) {
	if err := oisgq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return oisgq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (oisgq *OrderItemShipGroupQuery) AllX(ctx context.Context) []*OrderItemShipGroup {
	nodes, err := oisgq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of OrderItemShipGroup IDs.
func (oisgq *OrderItemShipGroupQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := oisgq.Select(orderitemshipgroup.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (oisgq *OrderItemShipGroupQuery) IDsX(ctx context.Context) []int {
	ids, err := oisgq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (oisgq *OrderItemShipGroupQuery) Count(ctx context.Context) (int, error) {
	if err := oisgq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return oisgq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (oisgq *OrderItemShipGroupQuery) CountX(ctx context.Context) int {
	count, err := oisgq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (oisgq *OrderItemShipGroupQuery) Exist(ctx context.Context) (bool, error) {
	if err := oisgq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return oisgq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (oisgq *OrderItemShipGroupQuery) ExistX(ctx context.Context) bool {
	exist, err := oisgq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the OrderItemShipGroupQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (oisgq *OrderItemShipGroupQuery) Clone() *OrderItemShipGroupQuery {
	if oisgq == nil {
		return nil
	}
	return &OrderItemShipGroupQuery{
		config:                       oisgq.config,
		limit:                        oisgq.limit,
		offset:                       oisgq.offset,
		order:                        append([]OrderFunc{}, oisgq.order...),
		predicates:                   append([]predicate.OrderItemShipGroup{}, oisgq.predicates...),
		withOrderHeader:              oisgq.withOrderHeader.Clone(),
		withOrderItemShipGroupAssocs: oisgq.withOrderItemShipGroupAssocs.Clone(),
		withPrimaryShipments:         oisgq.withPrimaryShipments.Clone(),
		// clone intermediate query.
		sql:  oisgq.sql.Clone(),
		path: oisgq.path,
	}
}

// WithOrderHeader tells the query-builder to eager-load the nodes that are connected to
// the "order_header" edge. The optional arguments are used to configure the query builder of the edge.
func (oisgq *OrderItemShipGroupQuery) WithOrderHeader(opts ...func(*OrderHeaderQuery)) *OrderItemShipGroupQuery {
	query := &OrderHeaderQuery{config: oisgq.config}
	for _, opt := range opts {
		opt(query)
	}
	oisgq.withOrderHeader = query
	return oisgq
}

// WithOrderItemShipGroupAssocs tells the query-builder to eager-load the nodes that are connected to
// the "order_item_ship_group_assocs" edge. The optional arguments are used to configure the query builder of the edge.
func (oisgq *OrderItemShipGroupQuery) WithOrderItemShipGroupAssocs(opts ...func(*OrderItemShipGroupAssocQuery)) *OrderItemShipGroupQuery {
	query := &OrderItemShipGroupAssocQuery{config: oisgq.config}
	for _, opt := range opts {
		opt(query)
	}
	oisgq.withOrderItemShipGroupAssocs = query
	return oisgq
}

// WithPrimaryShipments tells the query-builder to eager-load the nodes that are connected to
// the "primary_shipments" edge. The optional arguments are used to configure the query builder of the edge.
func (oisgq *OrderItemShipGroupQuery) WithPrimaryShipments(opts ...func(*ShipmentQuery)) *OrderItemShipGroupQuery {
	query := &ShipmentQuery{config: oisgq.config}
	for _, opt := range opts {
		opt(query)
	}
	oisgq.withPrimaryShipments = query
	return oisgq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.OrderItemShipGroup.Query().
//		GroupBy(orderitemshipgroup.FieldCreateTime).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (oisgq *OrderItemShipGroupQuery) GroupBy(field string, fields ...string) *OrderItemShipGroupGroupBy {
	group := &OrderItemShipGroupGroupBy{config: oisgq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := oisgq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return oisgq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//	}
//
//	client.OrderItemShipGroup.Query().
//		Select(orderitemshipgroup.FieldCreateTime).
//		Scan(ctx, &v)
//
func (oisgq *OrderItemShipGroupQuery) Select(field string, fields ...string) *OrderItemShipGroupSelect {
	oisgq.fields = append([]string{field}, fields...)
	return &OrderItemShipGroupSelect{OrderItemShipGroupQuery: oisgq}
}

func (oisgq *OrderItemShipGroupQuery) prepareQuery(ctx context.Context) error {
	for _, f := range oisgq.fields {
		if !orderitemshipgroup.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if oisgq.path != nil {
		prev, err := oisgq.path(ctx)
		if err != nil {
			return err
		}
		oisgq.sql = prev
	}
	return nil
}

func (oisgq *OrderItemShipGroupQuery) sqlAll(ctx context.Context) ([]*OrderItemShipGroup, error) {
	var (
		nodes       = []*OrderItemShipGroup{}
		withFKs     = oisgq.withFKs
		_spec       = oisgq.querySpec()
		loadedTypes = [3]bool{
			oisgq.withOrderHeader != nil,
			oisgq.withOrderItemShipGroupAssocs != nil,
			oisgq.withPrimaryShipments != nil,
		}
	)
	if oisgq.withOrderHeader != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, orderitemshipgroup.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &OrderItemShipGroup{config: oisgq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, oisgq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := oisgq.withOrderHeader; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*OrderItemShipGroup)
		for i := range nodes {
			if nodes[i].order_header_order_item_ship_groups == nil {
				continue
			}
			fk := *nodes[i].order_header_order_item_ship_groups
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(orderheader.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "order_header_order_item_ship_groups" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.OrderHeader = n
			}
		}
	}

	if query := oisgq.withOrderItemShipGroupAssocs; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*OrderItemShipGroup)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.OrderItemShipGroupAssocs = []*OrderItemShipGroupAssoc{}
		}
		query.withFKs = true
		query.Where(predicate.OrderItemShipGroupAssoc(func(s *sql.Selector) {
			s.Where(sql.InValues(orderitemshipgroup.OrderItemShipGroupAssocsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.order_item_ship_group_order_item_ship_group_assocs
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "order_item_ship_group_order_item_ship_group_assocs" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "order_item_ship_group_order_item_ship_group_assocs" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.OrderItemShipGroupAssocs = append(node.Edges.OrderItemShipGroupAssocs, n)
		}
	}

	if query := oisgq.withPrimaryShipments; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*OrderItemShipGroup)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.PrimaryShipments = []*Shipment{}
		}
		query.withFKs = true
		query.Where(predicate.Shipment(func(s *sql.Selector) {
			s.Where(sql.InValues(orderitemshipgroup.PrimaryShipmentsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.order_item_ship_group_primary_shipments
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "order_item_ship_group_primary_shipments" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "order_item_ship_group_primary_shipments" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.PrimaryShipments = append(node.Edges.PrimaryShipments, n)
		}
	}

	return nodes, nil
}

func (oisgq *OrderItemShipGroupQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := oisgq.querySpec()
	return sqlgraph.CountNodes(ctx, oisgq.driver, _spec)
}

func (oisgq *OrderItemShipGroupQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := oisgq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (oisgq *OrderItemShipGroupQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   orderitemshipgroup.Table,
			Columns: orderitemshipgroup.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: orderitemshipgroup.FieldID,
			},
		},
		From:   oisgq.sql,
		Unique: true,
	}
	if unique := oisgq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := oisgq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, orderitemshipgroup.FieldID)
		for i := range fields {
			if fields[i] != orderitemshipgroup.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := oisgq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := oisgq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := oisgq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := oisgq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (oisgq *OrderItemShipGroupQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(oisgq.driver.Dialect())
	t1 := builder.Table(orderitemshipgroup.Table)
	selector := builder.Select(t1.Columns(orderitemshipgroup.Columns...)...).From(t1)
	if oisgq.sql != nil {
		selector = oisgq.sql
		selector.Select(selector.Columns(orderitemshipgroup.Columns...)...)
	}
	for _, p := range oisgq.predicates {
		p(selector)
	}
	for _, p := range oisgq.order {
		p(selector)
	}
	if offset := oisgq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := oisgq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// OrderItemShipGroupGroupBy is the group-by builder for OrderItemShipGroup entities.
type OrderItemShipGroupGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (oisggb *OrderItemShipGroupGroupBy) Aggregate(fns ...AggregateFunc) *OrderItemShipGroupGroupBy {
	oisggb.fns = append(oisggb.fns, fns...)
	return oisggb
}

// Scan applies the group-by query and scans the result into the given value.
func (oisggb *OrderItemShipGroupGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := oisggb.path(ctx)
	if err != nil {
		return err
	}
	oisggb.sql = query
	return oisggb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (oisggb *OrderItemShipGroupGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := oisggb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (oisggb *OrderItemShipGroupGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(oisggb.fields) > 1 {
		return nil, errors.New("ent: OrderItemShipGroupGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := oisggb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (oisggb *OrderItemShipGroupGroupBy) StringsX(ctx context.Context) []string {
	v, err := oisggb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (oisggb *OrderItemShipGroupGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = oisggb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{orderitemshipgroup.Label}
	default:
		err = fmt.Errorf("ent: OrderItemShipGroupGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (oisggb *OrderItemShipGroupGroupBy) StringX(ctx context.Context) string {
	v, err := oisggb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (oisggb *OrderItemShipGroupGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(oisggb.fields) > 1 {
		return nil, errors.New("ent: OrderItemShipGroupGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := oisggb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (oisggb *OrderItemShipGroupGroupBy) IntsX(ctx context.Context) []int {
	v, err := oisggb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (oisggb *OrderItemShipGroupGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = oisggb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{orderitemshipgroup.Label}
	default:
		err = fmt.Errorf("ent: OrderItemShipGroupGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (oisggb *OrderItemShipGroupGroupBy) IntX(ctx context.Context) int {
	v, err := oisggb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (oisggb *OrderItemShipGroupGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(oisggb.fields) > 1 {
		return nil, errors.New("ent: OrderItemShipGroupGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := oisggb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (oisggb *OrderItemShipGroupGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := oisggb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (oisggb *OrderItemShipGroupGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = oisggb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{orderitemshipgroup.Label}
	default:
		err = fmt.Errorf("ent: OrderItemShipGroupGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (oisggb *OrderItemShipGroupGroupBy) Float64X(ctx context.Context) float64 {
	v, err := oisggb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (oisggb *OrderItemShipGroupGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(oisggb.fields) > 1 {
		return nil, errors.New("ent: OrderItemShipGroupGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := oisggb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (oisggb *OrderItemShipGroupGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := oisggb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (oisggb *OrderItemShipGroupGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = oisggb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{orderitemshipgroup.Label}
	default:
		err = fmt.Errorf("ent: OrderItemShipGroupGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (oisggb *OrderItemShipGroupGroupBy) BoolX(ctx context.Context) bool {
	v, err := oisggb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (oisggb *OrderItemShipGroupGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range oisggb.fields {
		if !orderitemshipgroup.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := oisggb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := oisggb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (oisggb *OrderItemShipGroupGroupBy) sqlQuery() *sql.Selector {
	selector := oisggb.sql
	columns := make([]string, 0, len(oisggb.fields)+len(oisggb.fns))
	columns = append(columns, oisggb.fields...)
	for _, fn := range oisggb.fns {
		columns = append(columns, fn(selector))
	}
	return selector.Select(columns...).GroupBy(oisggb.fields...)
}

// OrderItemShipGroupSelect is the builder for selecting fields of OrderItemShipGroup entities.
type OrderItemShipGroupSelect struct {
	*OrderItemShipGroupQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (oisgs *OrderItemShipGroupSelect) Scan(ctx context.Context, v interface{}) error {
	if err := oisgs.prepareQuery(ctx); err != nil {
		return err
	}
	oisgs.sql = oisgs.OrderItemShipGroupQuery.sqlQuery(ctx)
	return oisgs.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (oisgs *OrderItemShipGroupSelect) ScanX(ctx context.Context, v interface{}) {
	if err := oisgs.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (oisgs *OrderItemShipGroupSelect) Strings(ctx context.Context) ([]string, error) {
	if len(oisgs.fields) > 1 {
		return nil, errors.New("ent: OrderItemShipGroupSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := oisgs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (oisgs *OrderItemShipGroupSelect) StringsX(ctx context.Context) []string {
	v, err := oisgs.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (oisgs *OrderItemShipGroupSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = oisgs.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{orderitemshipgroup.Label}
	default:
		err = fmt.Errorf("ent: OrderItemShipGroupSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (oisgs *OrderItemShipGroupSelect) StringX(ctx context.Context) string {
	v, err := oisgs.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (oisgs *OrderItemShipGroupSelect) Ints(ctx context.Context) ([]int, error) {
	if len(oisgs.fields) > 1 {
		return nil, errors.New("ent: OrderItemShipGroupSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := oisgs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (oisgs *OrderItemShipGroupSelect) IntsX(ctx context.Context) []int {
	v, err := oisgs.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (oisgs *OrderItemShipGroupSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = oisgs.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{orderitemshipgroup.Label}
	default:
		err = fmt.Errorf("ent: OrderItemShipGroupSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (oisgs *OrderItemShipGroupSelect) IntX(ctx context.Context) int {
	v, err := oisgs.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (oisgs *OrderItemShipGroupSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(oisgs.fields) > 1 {
		return nil, errors.New("ent: OrderItemShipGroupSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := oisgs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (oisgs *OrderItemShipGroupSelect) Float64sX(ctx context.Context) []float64 {
	v, err := oisgs.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (oisgs *OrderItemShipGroupSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = oisgs.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{orderitemshipgroup.Label}
	default:
		err = fmt.Errorf("ent: OrderItemShipGroupSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (oisgs *OrderItemShipGroupSelect) Float64X(ctx context.Context) float64 {
	v, err := oisgs.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (oisgs *OrderItemShipGroupSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(oisgs.fields) > 1 {
		return nil, errors.New("ent: OrderItemShipGroupSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := oisgs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (oisgs *OrderItemShipGroupSelect) BoolsX(ctx context.Context) []bool {
	v, err := oisgs.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (oisgs *OrderItemShipGroupSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = oisgs.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{orderitemshipgroup.Label}
	default:
		err = fmt.Errorf("ent: OrderItemShipGroupSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (oisgs *OrderItemShipGroupSelect) BoolX(ctx context.Context) bool {
	v, err := oisgs.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (oisgs *OrderItemShipGroupSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := oisgs.sqlQuery().Query()
	if err := oisgs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (oisgs *OrderItemShipGroupSelect) sqlQuery() sql.Querier {
	selector := oisgs.sql
	selector.Select(selector.Columns(oisgs.fields...)...)
	return selector
}
