// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/orderheader"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/orderitem"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/orderitemshipgroup"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/orderitemshipgroupassoc"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/predicate"
)

// OrderItemShipGroupAssocUpdate is the builder for updating OrderItemShipGroupAssoc entities.
type OrderItemShipGroupAssocUpdate struct {
	config
	hooks    []Hook
	mutation *OrderItemShipGroupAssocMutation
}

// Where adds a new predicate for the OrderItemShipGroupAssocUpdate builder.
func (oisgau *OrderItemShipGroupAssocUpdate) Where(ps ...predicate.OrderItemShipGroupAssoc) *OrderItemShipGroupAssocUpdate {
	oisgau.mutation.predicates = append(oisgau.mutation.predicates, ps...)
	return oisgau
}

// SetOrderItemSeqID sets the "order_item_seq_id" field.
func (oisgau *OrderItemShipGroupAssocUpdate) SetOrderItemSeqID(i int) *OrderItemShipGroupAssocUpdate {
	oisgau.mutation.ResetOrderItemSeqID()
	oisgau.mutation.SetOrderItemSeqID(i)
	return oisgau
}

// AddOrderItemSeqID adds i to the "order_item_seq_id" field.
func (oisgau *OrderItemShipGroupAssocUpdate) AddOrderItemSeqID(i int) *OrderItemShipGroupAssocUpdate {
	oisgau.mutation.AddOrderItemSeqID(i)
	return oisgau
}

// SetShipGroupSeqID sets the "ship_group_seq_id" field.
func (oisgau *OrderItemShipGroupAssocUpdate) SetShipGroupSeqID(i int) *OrderItemShipGroupAssocUpdate {
	oisgau.mutation.ResetShipGroupSeqID()
	oisgau.mutation.SetShipGroupSeqID(i)
	return oisgau
}

// AddShipGroupSeqID adds i to the "ship_group_seq_id" field.
func (oisgau *OrderItemShipGroupAssocUpdate) AddShipGroupSeqID(i int) *OrderItemShipGroupAssocUpdate {
	oisgau.mutation.AddShipGroupSeqID(i)
	return oisgau
}

// SetQuantity sets the "quantity" field.
func (oisgau *OrderItemShipGroupAssocUpdate) SetQuantity(f float64) *OrderItemShipGroupAssocUpdate {
	oisgau.mutation.ResetQuantity()
	oisgau.mutation.SetQuantity(f)
	return oisgau
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (oisgau *OrderItemShipGroupAssocUpdate) SetNillableQuantity(f *float64) *OrderItemShipGroupAssocUpdate {
	if f != nil {
		oisgau.SetQuantity(*f)
	}
	return oisgau
}

// AddQuantity adds f to the "quantity" field.
func (oisgau *OrderItemShipGroupAssocUpdate) AddQuantity(f float64) *OrderItemShipGroupAssocUpdate {
	oisgau.mutation.AddQuantity(f)
	return oisgau
}

// ClearQuantity clears the value of the "quantity" field.
func (oisgau *OrderItemShipGroupAssocUpdate) ClearQuantity() *OrderItemShipGroupAssocUpdate {
	oisgau.mutation.ClearQuantity()
	return oisgau
}

// SetCancelQuantity sets the "cancel_quantity" field.
func (oisgau *OrderItemShipGroupAssocUpdate) SetCancelQuantity(f float64) *OrderItemShipGroupAssocUpdate {
	oisgau.mutation.ResetCancelQuantity()
	oisgau.mutation.SetCancelQuantity(f)
	return oisgau
}

// SetNillableCancelQuantity sets the "cancel_quantity" field if the given value is not nil.
func (oisgau *OrderItemShipGroupAssocUpdate) SetNillableCancelQuantity(f *float64) *OrderItemShipGroupAssocUpdate {
	if f != nil {
		oisgau.SetCancelQuantity(*f)
	}
	return oisgau
}

// AddCancelQuantity adds f to the "cancel_quantity" field.
func (oisgau *OrderItemShipGroupAssocUpdate) AddCancelQuantity(f float64) *OrderItemShipGroupAssocUpdate {
	oisgau.mutation.AddCancelQuantity(f)
	return oisgau
}

// ClearCancelQuantity clears the value of the "cancel_quantity" field.
func (oisgau *OrderItemShipGroupAssocUpdate) ClearCancelQuantity() *OrderItemShipGroupAssocUpdate {
	oisgau.mutation.ClearCancelQuantity()
	return oisgau
}

// SetOrderHeaderID sets the "order_header" edge to the OrderHeader entity by ID.
func (oisgau *OrderItemShipGroupAssocUpdate) SetOrderHeaderID(id int) *OrderItemShipGroupAssocUpdate {
	oisgau.mutation.SetOrderHeaderID(id)
	return oisgau
}

// SetNillableOrderHeaderID sets the "order_header" edge to the OrderHeader entity by ID if the given value is not nil.
func (oisgau *OrderItemShipGroupAssocUpdate) SetNillableOrderHeaderID(id *int) *OrderItemShipGroupAssocUpdate {
	if id != nil {
		oisgau = oisgau.SetOrderHeaderID(*id)
	}
	return oisgau
}

// SetOrderHeader sets the "order_header" edge to the OrderHeader entity.
func (oisgau *OrderItemShipGroupAssocUpdate) SetOrderHeader(o *OrderHeader) *OrderItemShipGroupAssocUpdate {
	return oisgau.SetOrderHeaderID(o.ID)
}

// SetOrderItemID sets the "order_item" edge to the OrderItem entity by ID.
func (oisgau *OrderItemShipGroupAssocUpdate) SetOrderItemID(id int) *OrderItemShipGroupAssocUpdate {
	oisgau.mutation.SetOrderItemID(id)
	return oisgau
}

// SetNillableOrderItemID sets the "order_item" edge to the OrderItem entity by ID if the given value is not nil.
func (oisgau *OrderItemShipGroupAssocUpdate) SetNillableOrderItemID(id *int) *OrderItemShipGroupAssocUpdate {
	if id != nil {
		oisgau = oisgau.SetOrderItemID(*id)
	}
	return oisgau
}

// SetOrderItem sets the "order_item" edge to the OrderItem entity.
func (oisgau *OrderItemShipGroupAssocUpdate) SetOrderItem(o *OrderItem) *OrderItemShipGroupAssocUpdate {
	return oisgau.SetOrderItemID(o.ID)
}

// SetOrderItemShipGroupID sets the "order_item_ship_group" edge to the OrderItemShipGroup entity by ID.
func (oisgau *OrderItemShipGroupAssocUpdate) SetOrderItemShipGroupID(id int) *OrderItemShipGroupAssocUpdate {
	oisgau.mutation.SetOrderItemShipGroupID(id)
	return oisgau
}

// SetNillableOrderItemShipGroupID sets the "order_item_ship_group" edge to the OrderItemShipGroup entity by ID if the given value is not nil.
func (oisgau *OrderItemShipGroupAssocUpdate) SetNillableOrderItemShipGroupID(id *int) *OrderItemShipGroupAssocUpdate {
	if id != nil {
		oisgau = oisgau.SetOrderItemShipGroupID(*id)
	}
	return oisgau
}

// SetOrderItemShipGroup sets the "order_item_ship_group" edge to the OrderItemShipGroup entity.
func (oisgau *OrderItemShipGroupAssocUpdate) SetOrderItemShipGroup(o *OrderItemShipGroup) *OrderItemShipGroupAssocUpdate {
	return oisgau.SetOrderItemShipGroupID(o.ID)
}

// Mutation returns the OrderItemShipGroupAssocMutation object of the builder.
func (oisgau *OrderItemShipGroupAssocUpdate) Mutation() *OrderItemShipGroupAssocMutation {
	return oisgau.mutation
}

// ClearOrderHeader clears the "order_header" edge to the OrderHeader entity.
func (oisgau *OrderItemShipGroupAssocUpdate) ClearOrderHeader() *OrderItemShipGroupAssocUpdate {
	oisgau.mutation.ClearOrderHeader()
	return oisgau
}

// ClearOrderItem clears the "order_item" edge to the OrderItem entity.
func (oisgau *OrderItemShipGroupAssocUpdate) ClearOrderItem() *OrderItemShipGroupAssocUpdate {
	oisgau.mutation.ClearOrderItem()
	return oisgau
}

// ClearOrderItemShipGroup clears the "order_item_ship_group" edge to the OrderItemShipGroup entity.
func (oisgau *OrderItemShipGroupAssocUpdate) ClearOrderItemShipGroup() *OrderItemShipGroupAssocUpdate {
	oisgau.mutation.ClearOrderItemShipGroup()
	return oisgau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (oisgau *OrderItemShipGroupAssocUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	oisgau.defaults()
	if len(oisgau.hooks) == 0 {
		affected, err = oisgau.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderItemShipGroupAssocMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			oisgau.mutation = mutation
			affected, err = oisgau.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(oisgau.hooks) - 1; i >= 0; i-- {
			mut = oisgau.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, oisgau.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (oisgau *OrderItemShipGroupAssocUpdate) SaveX(ctx context.Context) int {
	affected, err := oisgau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (oisgau *OrderItemShipGroupAssocUpdate) Exec(ctx context.Context) error {
	_, err := oisgau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oisgau *OrderItemShipGroupAssocUpdate) ExecX(ctx context.Context) {
	if err := oisgau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oisgau *OrderItemShipGroupAssocUpdate) defaults() {
	if _, ok := oisgau.mutation.UpdateTime(); !ok {
		v := orderitemshipgroupassoc.UpdateDefaultUpdateTime()
		oisgau.mutation.SetUpdateTime(v)
	}
}

func (oisgau *OrderItemShipGroupAssocUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   orderitemshipgroupassoc.Table,
			Columns: orderitemshipgroupassoc.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: orderitemshipgroupassoc.FieldID,
			},
		},
	}
	if ps := oisgau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oisgau.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderitemshipgroupassoc.FieldUpdateTime,
		})
	}
	if value, ok := oisgau.mutation.OrderItemSeqID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitemshipgroupassoc.FieldOrderItemSeqID,
		})
	}
	if value, ok := oisgau.mutation.AddedOrderItemSeqID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitemshipgroupassoc.FieldOrderItemSeqID,
		})
	}
	if value, ok := oisgau.mutation.ShipGroupSeqID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitemshipgroupassoc.FieldShipGroupSeqID,
		})
	}
	if value, ok := oisgau.mutation.AddedShipGroupSeqID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitemshipgroupassoc.FieldShipGroupSeqID,
		})
	}
	if value, ok := oisgau.mutation.Quantity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderitemshipgroupassoc.FieldQuantity,
		})
	}
	if value, ok := oisgau.mutation.AddedQuantity(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderitemshipgroupassoc.FieldQuantity,
		})
	}
	if oisgau.mutation.QuantityCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: orderitemshipgroupassoc.FieldQuantity,
		})
	}
	if value, ok := oisgau.mutation.CancelQuantity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderitemshipgroupassoc.FieldCancelQuantity,
		})
	}
	if value, ok := oisgau.mutation.AddedCancelQuantity(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderitemshipgroupassoc.FieldCancelQuantity,
		})
	}
	if oisgau.mutation.CancelQuantityCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: orderitemshipgroupassoc.FieldCancelQuantity,
		})
	}
	if oisgau.mutation.OrderHeaderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderitemshipgroupassoc.OrderHeaderTable,
			Columns: []string{orderitemshipgroupassoc.OrderHeaderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderheader.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oisgau.mutation.OrderHeaderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderitemshipgroupassoc.OrderHeaderTable,
			Columns: []string{orderitemshipgroupassoc.OrderHeaderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderheader.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oisgau.mutation.OrderItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderitemshipgroupassoc.OrderItemTable,
			Columns: []string{orderitemshipgroupassoc.OrderItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitem.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oisgau.mutation.OrderItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderitemshipgroupassoc.OrderItemTable,
			Columns: []string{orderitemshipgroupassoc.OrderItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oisgau.mutation.OrderItemShipGroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderitemshipgroupassoc.OrderItemShipGroupTable,
			Columns: []string{orderitemshipgroupassoc.OrderItemShipGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitemshipgroup.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oisgau.mutation.OrderItemShipGroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderitemshipgroupassoc.OrderItemShipGroupTable,
			Columns: []string{orderitemshipgroupassoc.OrderItemShipGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitemshipgroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, oisgau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderitemshipgroupassoc.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// OrderItemShipGroupAssocUpdateOne is the builder for updating a single OrderItemShipGroupAssoc entity.
type OrderItemShipGroupAssocUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrderItemShipGroupAssocMutation
}

// SetOrderItemSeqID sets the "order_item_seq_id" field.
func (oisgauo *OrderItemShipGroupAssocUpdateOne) SetOrderItemSeqID(i int) *OrderItemShipGroupAssocUpdateOne {
	oisgauo.mutation.ResetOrderItemSeqID()
	oisgauo.mutation.SetOrderItemSeqID(i)
	return oisgauo
}

// AddOrderItemSeqID adds i to the "order_item_seq_id" field.
func (oisgauo *OrderItemShipGroupAssocUpdateOne) AddOrderItemSeqID(i int) *OrderItemShipGroupAssocUpdateOne {
	oisgauo.mutation.AddOrderItemSeqID(i)
	return oisgauo
}

// SetShipGroupSeqID sets the "ship_group_seq_id" field.
func (oisgauo *OrderItemShipGroupAssocUpdateOne) SetShipGroupSeqID(i int) *OrderItemShipGroupAssocUpdateOne {
	oisgauo.mutation.ResetShipGroupSeqID()
	oisgauo.mutation.SetShipGroupSeqID(i)
	return oisgauo
}

// AddShipGroupSeqID adds i to the "ship_group_seq_id" field.
func (oisgauo *OrderItemShipGroupAssocUpdateOne) AddShipGroupSeqID(i int) *OrderItemShipGroupAssocUpdateOne {
	oisgauo.mutation.AddShipGroupSeqID(i)
	return oisgauo
}

// SetQuantity sets the "quantity" field.
func (oisgauo *OrderItemShipGroupAssocUpdateOne) SetQuantity(f float64) *OrderItemShipGroupAssocUpdateOne {
	oisgauo.mutation.ResetQuantity()
	oisgauo.mutation.SetQuantity(f)
	return oisgauo
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (oisgauo *OrderItemShipGroupAssocUpdateOne) SetNillableQuantity(f *float64) *OrderItemShipGroupAssocUpdateOne {
	if f != nil {
		oisgauo.SetQuantity(*f)
	}
	return oisgauo
}

// AddQuantity adds f to the "quantity" field.
func (oisgauo *OrderItemShipGroupAssocUpdateOne) AddQuantity(f float64) *OrderItemShipGroupAssocUpdateOne {
	oisgauo.mutation.AddQuantity(f)
	return oisgauo
}

// ClearQuantity clears the value of the "quantity" field.
func (oisgauo *OrderItemShipGroupAssocUpdateOne) ClearQuantity() *OrderItemShipGroupAssocUpdateOne {
	oisgauo.mutation.ClearQuantity()
	return oisgauo
}

// SetCancelQuantity sets the "cancel_quantity" field.
func (oisgauo *OrderItemShipGroupAssocUpdateOne) SetCancelQuantity(f float64) *OrderItemShipGroupAssocUpdateOne {
	oisgauo.mutation.ResetCancelQuantity()
	oisgauo.mutation.SetCancelQuantity(f)
	return oisgauo
}

// SetNillableCancelQuantity sets the "cancel_quantity" field if the given value is not nil.
func (oisgauo *OrderItemShipGroupAssocUpdateOne) SetNillableCancelQuantity(f *float64) *OrderItemShipGroupAssocUpdateOne {
	if f != nil {
		oisgauo.SetCancelQuantity(*f)
	}
	return oisgauo
}

// AddCancelQuantity adds f to the "cancel_quantity" field.
func (oisgauo *OrderItemShipGroupAssocUpdateOne) AddCancelQuantity(f float64) *OrderItemShipGroupAssocUpdateOne {
	oisgauo.mutation.AddCancelQuantity(f)
	return oisgauo
}

// ClearCancelQuantity clears the value of the "cancel_quantity" field.
func (oisgauo *OrderItemShipGroupAssocUpdateOne) ClearCancelQuantity() *OrderItemShipGroupAssocUpdateOne {
	oisgauo.mutation.ClearCancelQuantity()
	return oisgauo
}

// SetOrderHeaderID sets the "order_header" edge to the OrderHeader entity by ID.
func (oisgauo *OrderItemShipGroupAssocUpdateOne) SetOrderHeaderID(id int) *OrderItemShipGroupAssocUpdateOne {
	oisgauo.mutation.SetOrderHeaderID(id)
	return oisgauo
}

// SetNillableOrderHeaderID sets the "order_header" edge to the OrderHeader entity by ID if the given value is not nil.
func (oisgauo *OrderItemShipGroupAssocUpdateOne) SetNillableOrderHeaderID(id *int) *OrderItemShipGroupAssocUpdateOne {
	if id != nil {
		oisgauo = oisgauo.SetOrderHeaderID(*id)
	}
	return oisgauo
}

// SetOrderHeader sets the "order_header" edge to the OrderHeader entity.
func (oisgauo *OrderItemShipGroupAssocUpdateOne) SetOrderHeader(o *OrderHeader) *OrderItemShipGroupAssocUpdateOne {
	return oisgauo.SetOrderHeaderID(o.ID)
}

// SetOrderItemID sets the "order_item" edge to the OrderItem entity by ID.
func (oisgauo *OrderItemShipGroupAssocUpdateOne) SetOrderItemID(id int) *OrderItemShipGroupAssocUpdateOne {
	oisgauo.mutation.SetOrderItemID(id)
	return oisgauo
}

// SetNillableOrderItemID sets the "order_item" edge to the OrderItem entity by ID if the given value is not nil.
func (oisgauo *OrderItemShipGroupAssocUpdateOne) SetNillableOrderItemID(id *int) *OrderItemShipGroupAssocUpdateOne {
	if id != nil {
		oisgauo = oisgauo.SetOrderItemID(*id)
	}
	return oisgauo
}

// SetOrderItem sets the "order_item" edge to the OrderItem entity.
func (oisgauo *OrderItemShipGroupAssocUpdateOne) SetOrderItem(o *OrderItem) *OrderItemShipGroupAssocUpdateOne {
	return oisgauo.SetOrderItemID(o.ID)
}

// SetOrderItemShipGroupID sets the "order_item_ship_group" edge to the OrderItemShipGroup entity by ID.
func (oisgauo *OrderItemShipGroupAssocUpdateOne) SetOrderItemShipGroupID(id int) *OrderItemShipGroupAssocUpdateOne {
	oisgauo.mutation.SetOrderItemShipGroupID(id)
	return oisgauo
}

// SetNillableOrderItemShipGroupID sets the "order_item_ship_group" edge to the OrderItemShipGroup entity by ID if the given value is not nil.
func (oisgauo *OrderItemShipGroupAssocUpdateOne) SetNillableOrderItemShipGroupID(id *int) *OrderItemShipGroupAssocUpdateOne {
	if id != nil {
		oisgauo = oisgauo.SetOrderItemShipGroupID(*id)
	}
	return oisgauo
}

// SetOrderItemShipGroup sets the "order_item_ship_group" edge to the OrderItemShipGroup entity.
func (oisgauo *OrderItemShipGroupAssocUpdateOne) SetOrderItemShipGroup(o *OrderItemShipGroup) *OrderItemShipGroupAssocUpdateOne {
	return oisgauo.SetOrderItemShipGroupID(o.ID)
}

// Mutation returns the OrderItemShipGroupAssocMutation object of the builder.
func (oisgauo *OrderItemShipGroupAssocUpdateOne) Mutation() *OrderItemShipGroupAssocMutation {
	return oisgauo.mutation
}

// ClearOrderHeader clears the "order_header" edge to the OrderHeader entity.
func (oisgauo *OrderItemShipGroupAssocUpdateOne) ClearOrderHeader() *OrderItemShipGroupAssocUpdateOne {
	oisgauo.mutation.ClearOrderHeader()
	return oisgauo
}

// ClearOrderItem clears the "order_item" edge to the OrderItem entity.
func (oisgauo *OrderItemShipGroupAssocUpdateOne) ClearOrderItem() *OrderItemShipGroupAssocUpdateOne {
	oisgauo.mutation.ClearOrderItem()
	return oisgauo
}

// ClearOrderItemShipGroup clears the "order_item_ship_group" edge to the OrderItemShipGroup entity.
func (oisgauo *OrderItemShipGroupAssocUpdateOne) ClearOrderItemShipGroup() *OrderItemShipGroupAssocUpdateOne {
	oisgauo.mutation.ClearOrderItemShipGroup()
	return oisgauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (oisgauo *OrderItemShipGroupAssocUpdateOne) Select(field string, fields ...string) *OrderItemShipGroupAssocUpdateOne {
	oisgauo.fields = append([]string{field}, fields...)
	return oisgauo
}

// Save executes the query and returns the updated OrderItemShipGroupAssoc entity.
func (oisgauo *OrderItemShipGroupAssocUpdateOne) Save(ctx context.Context) (*OrderItemShipGroupAssoc, error) {
	var (
		err  error
		node *OrderItemShipGroupAssoc
	)
	oisgauo.defaults()
	if len(oisgauo.hooks) == 0 {
		node, err = oisgauo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderItemShipGroupAssocMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			oisgauo.mutation = mutation
			node, err = oisgauo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(oisgauo.hooks) - 1; i >= 0; i-- {
			mut = oisgauo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, oisgauo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (oisgauo *OrderItemShipGroupAssocUpdateOne) SaveX(ctx context.Context) *OrderItemShipGroupAssoc {
	node, err := oisgauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (oisgauo *OrderItemShipGroupAssocUpdateOne) Exec(ctx context.Context) error {
	_, err := oisgauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oisgauo *OrderItemShipGroupAssocUpdateOne) ExecX(ctx context.Context) {
	if err := oisgauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oisgauo *OrderItemShipGroupAssocUpdateOne) defaults() {
	if _, ok := oisgauo.mutation.UpdateTime(); !ok {
		v := orderitemshipgroupassoc.UpdateDefaultUpdateTime()
		oisgauo.mutation.SetUpdateTime(v)
	}
}

func (oisgauo *OrderItemShipGroupAssocUpdateOne) sqlSave(ctx context.Context) (_node *OrderItemShipGroupAssoc, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   orderitemshipgroupassoc.Table,
			Columns: orderitemshipgroupassoc.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: orderitemshipgroupassoc.FieldID,
			},
		},
	}
	id, ok := oisgauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing OrderItemShipGroupAssoc.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := oisgauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, orderitemshipgroupassoc.FieldID)
		for _, f := range fields {
			if !orderitemshipgroupassoc.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != orderitemshipgroupassoc.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := oisgauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oisgauo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderitemshipgroupassoc.FieldUpdateTime,
		})
	}
	if value, ok := oisgauo.mutation.OrderItemSeqID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitemshipgroupassoc.FieldOrderItemSeqID,
		})
	}
	if value, ok := oisgauo.mutation.AddedOrderItemSeqID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitemshipgroupassoc.FieldOrderItemSeqID,
		})
	}
	if value, ok := oisgauo.mutation.ShipGroupSeqID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitemshipgroupassoc.FieldShipGroupSeqID,
		})
	}
	if value, ok := oisgauo.mutation.AddedShipGroupSeqID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitemshipgroupassoc.FieldShipGroupSeqID,
		})
	}
	if value, ok := oisgauo.mutation.Quantity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderitemshipgroupassoc.FieldQuantity,
		})
	}
	if value, ok := oisgauo.mutation.AddedQuantity(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderitemshipgroupassoc.FieldQuantity,
		})
	}
	if oisgauo.mutation.QuantityCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: orderitemshipgroupassoc.FieldQuantity,
		})
	}
	if value, ok := oisgauo.mutation.CancelQuantity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderitemshipgroupassoc.FieldCancelQuantity,
		})
	}
	if value, ok := oisgauo.mutation.AddedCancelQuantity(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderitemshipgroupassoc.FieldCancelQuantity,
		})
	}
	if oisgauo.mutation.CancelQuantityCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: orderitemshipgroupassoc.FieldCancelQuantity,
		})
	}
	if oisgauo.mutation.OrderHeaderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderitemshipgroupassoc.OrderHeaderTable,
			Columns: []string{orderitemshipgroupassoc.OrderHeaderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderheader.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oisgauo.mutation.OrderHeaderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderitemshipgroupassoc.OrderHeaderTable,
			Columns: []string{orderitemshipgroupassoc.OrderHeaderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderheader.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oisgauo.mutation.OrderItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderitemshipgroupassoc.OrderItemTable,
			Columns: []string{orderitemshipgroupassoc.OrderItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitem.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oisgauo.mutation.OrderItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderitemshipgroupassoc.OrderItemTable,
			Columns: []string{orderitemshipgroupassoc.OrderItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oisgauo.mutation.OrderItemShipGroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderitemshipgroupassoc.OrderItemShipGroupTable,
			Columns: []string{orderitemshipgroupassoc.OrderItemShipGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitemshipgroup.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oisgauo.mutation.OrderItemShipGroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderitemshipgroupassoc.OrderItemShipGroupTable,
			Columns: []string{orderitemshipgroupassoc.OrderItemShipGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitemshipgroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &OrderItemShipGroupAssoc{config: oisgauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, oisgauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderitemshipgroupassoc.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
