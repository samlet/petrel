// Code generated by entc, DO NOT EDIT.

package orderrole

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.OrderRole {
	return predicate.OrderRole(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.OrderRole {
	return predicate.OrderRole(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.OrderRole {
	return predicate.OrderRole(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.OrderRole {
	return predicate.OrderRole(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.OrderRole {
	return predicate.OrderRole(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.OrderRole {
	return predicate.OrderRole(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.OrderRole {
	return predicate.OrderRole(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.OrderRole {
	return predicate.OrderRole(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.OrderRole {
	return predicate.OrderRole(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.OrderRole {
	return predicate.OrderRole(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.OrderRole {
	return predicate.OrderRole(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// PartyID applies equality check predicate on the "party_id" field. It's identical to PartyIDEQ.
func PartyID(v int) predicate.OrderRole {
	return predicate.OrderRole(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPartyID), v))
	})
}

// RoleTypeID applies equality check predicate on the "role_type_id" field. It's identical to RoleTypeIDEQ.
func RoleTypeID(v int) predicate.OrderRole {
	return predicate.OrderRole(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRoleTypeID), v))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.OrderRole {
	return predicate.OrderRole(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.OrderRole {
	return predicate.OrderRole(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.OrderRole {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderRole(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.OrderRole {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderRole(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.OrderRole {
	return predicate.OrderRole(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.OrderRole {
	return predicate.OrderRole(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.OrderRole {
	return predicate.OrderRole(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.OrderRole {
	return predicate.OrderRole(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), v))
	})
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.OrderRole {
	return predicate.OrderRole(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.OrderRole {
	return predicate.OrderRole(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.OrderRole {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderRole(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.OrderRole {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderRole(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.OrderRole {
	return predicate.OrderRole(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.OrderRole {
	return predicate.OrderRole(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.OrderRole {
	return predicate.OrderRole(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.OrderRole {
	return predicate.OrderRole(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateTime), v))
	})
}

// PartyIDEQ applies the EQ predicate on the "party_id" field.
func PartyIDEQ(v int) predicate.OrderRole {
	return predicate.OrderRole(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPartyID), v))
	})
}

// PartyIDNEQ applies the NEQ predicate on the "party_id" field.
func PartyIDNEQ(v int) predicate.OrderRole {
	return predicate.OrderRole(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPartyID), v))
	})
}

// PartyIDIn applies the In predicate on the "party_id" field.
func PartyIDIn(vs ...int) predicate.OrderRole {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderRole(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPartyID), v...))
	})
}

// PartyIDNotIn applies the NotIn predicate on the "party_id" field.
func PartyIDNotIn(vs ...int) predicate.OrderRole {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderRole(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPartyID), v...))
	})
}

// PartyIDGT applies the GT predicate on the "party_id" field.
func PartyIDGT(v int) predicate.OrderRole {
	return predicate.OrderRole(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPartyID), v))
	})
}

// PartyIDGTE applies the GTE predicate on the "party_id" field.
func PartyIDGTE(v int) predicate.OrderRole {
	return predicate.OrderRole(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPartyID), v))
	})
}

// PartyIDLT applies the LT predicate on the "party_id" field.
func PartyIDLT(v int) predicate.OrderRole {
	return predicate.OrderRole(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPartyID), v))
	})
}

// PartyIDLTE applies the LTE predicate on the "party_id" field.
func PartyIDLTE(v int) predicate.OrderRole {
	return predicate.OrderRole(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPartyID), v))
	})
}

// RoleTypeIDEQ applies the EQ predicate on the "role_type_id" field.
func RoleTypeIDEQ(v int) predicate.OrderRole {
	return predicate.OrderRole(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRoleTypeID), v))
	})
}

// RoleTypeIDNEQ applies the NEQ predicate on the "role_type_id" field.
func RoleTypeIDNEQ(v int) predicate.OrderRole {
	return predicate.OrderRole(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRoleTypeID), v))
	})
}

// RoleTypeIDIn applies the In predicate on the "role_type_id" field.
func RoleTypeIDIn(vs ...int) predicate.OrderRole {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderRole(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRoleTypeID), v...))
	})
}

// RoleTypeIDNotIn applies the NotIn predicate on the "role_type_id" field.
func RoleTypeIDNotIn(vs ...int) predicate.OrderRole {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderRole(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRoleTypeID), v...))
	})
}

// RoleTypeIDGT applies the GT predicate on the "role_type_id" field.
func RoleTypeIDGT(v int) predicate.OrderRole {
	return predicate.OrderRole(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRoleTypeID), v))
	})
}

// RoleTypeIDGTE applies the GTE predicate on the "role_type_id" field.
func RoleTypeIDGTE(v int) predicate.OrderRole {
	return predicate.OrderRole(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRoleTypeID), v))
	})
}

// RoleTypeIDLT applies the LT predicate on the "role_type_id" field.
func RoleTypeIDLT(v int) predicate.OrderRole {
	return predicate.OrderRole(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRoleTypeID), v))
	})
}

// RoleTypeIDLTE applies the LTE predicate on the "role_type_id" field.
func RoleTypeIDLTE(v int) predicate.OrderRole {
	return predicate.OrderRole(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRoleTypeID), v))
	})
}

// HasOrderHeader applies the HasEdge predicate on the "order_header" edge.
func HasOrderHeader() predicate.OrderRole {
	return predicate.OrderRole(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderHeaderTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OrderHeaderTable, OrderHeaderColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderHeaderWith applies the HasEdge predicate on the "order_header" edge with a given conditions (other predicates).
func HasOrderHeaderWith(preds ...predicate.OrderHeader) predicate.OrderRole {
	return predicate.OrderRole(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderHeaderInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OrderHeaderTable, OrderHeaderColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrderItems applies the HasEdge predicate on the "order_items" edge.
func HasOrderItems() predicate.OrderRole {
	return predicate.OrderRole(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderItemsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrderItemsTable, OrderItemsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderItemsWith applies the HasEdge predicate on the "order_items" edge with a given conditions (other predicates).
func HasOrderItemsWith(preds ...predicate.OrderItem) predicate.OrderRole {
	return predicate.OrderRole(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderItemsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrderItemsTable, OrderItemsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.OrderRole) predicate.OrderRole {
	return predicate.OrderRole(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.OrderRole) predicate.OrderRole {
	return predicate.OrderRole(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.OrderRole) predicate.OrderRole {
	return predicate.OrderRole(func(s *sql.Selector) {
		p(s.Not())
	})
}
