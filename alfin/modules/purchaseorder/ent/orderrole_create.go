// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/orderheader"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/orderitem"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/orderrole"
)

// OrderRoleCreate is the builder for creating a OrderRole entity.
type OrderRoleCreate struct {
	config
	mutation *OrderRoleMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (orc *OrderRoleCreate) SetCreateTime(t time.Time) *OrderRoleCreate {
	orc.mutation.SetCreateTime(t)
	return orc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (orc *OrderRoleCreate) SetNillableCreateTime(t *time.Time) *OrderRoleCreate {
	if t != nil {
		orc.SetCreateTime(*t)
	}
	return orc
}

// SetUpdateTime sets the "update_time" field.
func (orc *OrderRoleCreate) SetUpdateTime(t time.Time) *OrderRoleCreate {
	orc.mutation.SetUpdateTime(t)
	return orc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (orc *OrderRoleCreate) SetNillableUpdateTime(t *time.Time) *OrderRoleCreate {
	if t != nil {
		orc.SetUpdateTime(*t)
	}
	return orc
}

// SetPartyID sets the "party_id" field.
func (orc *OrderRoleCreate) SetPartyID(i int) *OrderRoleCreate {
	orc.mutation.SetPartyID(i)
	return orc
}

// SetRoleTypeID sets the "role_type_id" field.
func (orc *OrderRoleCreate) SetRoleTypeID(i int) *OrderRoleCreate {
	orc.mutation.SetRoleTypeID(i)
	return orc
}

// SetOrderHeaderID sets the "order_header" edge to the OrderHeader entity by ID.
func (orc *OrderRoleCreate) SetOrderHeaderID(id int) *OrderRoleCreate {
	orc.mutation.SetOrderHeaderID(id)
	return orc
}

// SetNillableOrderHeaderID sets the "order_header" edge to the OrderHeader entity by ID if the given value is not nil.
func (orc *OrderRoleCreate) SetNillableOrderHeaderID(id *int) *OrderRoleCreate {
	if id != nil {
		orc = orc.SetOrderHeaderID(*id)
	}
	return orc
}

// SetOrderHeader sets the "order_header" edge to the OrderHeader entity.
func (orc *OrderRoleCreate) SetOrderHeader(o *OrderHeader) *OrderRoleCreate {
	return orc.SetOrderHeaderID(o.ID)
}

// AddOrderItemIDs adds the "order_items" edge to the OrderItem entity by IDs.
func (orc *OrderRoleCreate) AddOrderItemIDs(ids ...int) *OrderRoleCreate {
	orc.mutation.AddOrderItemIDs(ids...)
	return orc
}

// AddOrderItems adds the "order_items" edges to the OrderItem entity.
func (orc *OrderRoleCreate) AddOrderItems(o ...*OrderItem) *OrderRoleCreate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return orc.AddOrderItemIDs(ids...)
}

// Mutation returns the OrderRoleMutation object of the builder.
func (orc *OrderRoleCreate) Mutation() *OrderRoleMutation {
	return orc.mutation
}

// Save creates the OrderRole in the database.
func (orc *OrderRoleCreate) Save(ctx context.Context) (*OrderRole, error) {
	var (
		err  error
		node *OrderRole
	)
	orc.defaults()
	if len(orc.hooks) == 0 {
		if err = orc.check(); err != nil {
			return nil, err
		}
		node, err = orc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderRoleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = orc.check(); err != nil {
				return nil, err
			}
			orc.mutation = mutation
			node, err = orc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(orc.hooks) - 1; i >= 0; i-- {
			mut = orc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, orc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (orc *OrderRoleCreate) SaveX(ctx context.Context) *OrderRole {
	v, err := orc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (orc *OrderRoleCreate) defaults() {
	if _, ok := orc.mutation.CreateTime(); !ok {
		v := orderrole.DefaultCreateTime()
		orc.mutation.SetCreateTime(v)
	}
	if _, ok := orc.mutation.UpdateTime(); !ok {
		v := orderrole.DefaultUpdateTime()
		orc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (orc *OrderRoleCreate) check() error {
	if _, ok := orc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New("ent: missing required field \"create_time\"")}
	}
	if _, ok := orc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New("ent: missing required field \"update_time\"")}
	}
	if _, ok := orc.mutation.PartyID(); !ok {
		return &ValidationError{Name: "party_id", err: errors.New("ent: missing required field \"party_id\"")}
	}
	if _, ok := orc.mutation.RoleTypeID(); !ok {
		return &ValidationError{Name: "role_type_id", err: errors.New("ent: missing required field \"role_type_id\"")}
	}
	return nil
}

func (orc *OrderRoleCreate) sqlSave(ctx context.Context) (*OrderRole, error) {
	_node, _spec := orc.createSpec()
	if err := sqlgraph.CreateNode(ctx, orc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (orc *OrderRoleCreate) createSpec() (*OrderRole, *sqlgraph.CreateSpec) {
	var (
		_node = &OrderRole{config: orc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: orderrole.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: orderrole.FieldID,
			},
		}
	)
	if value, ok := orc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderrole.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := orc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderrole.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := orc.mutation.PartyID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderrole.FieldPartyID,
		})
		_node.PartyID = value
	}
	if value, ok := orc.mutation.RoleTypeID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderrole.FieldRoleTypeID,
		})
		_node.RoleTypeID = value
	}
	if nodes := orc.mutation.OrderHeaderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderrole.OrderHeaderTable,
			Columns: []string{orderrole.OrderHeaderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderheader.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.order_header_order_roles = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := orc.mutation.OrderItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderrole.OrderItemsTable,
			Columns: []string{orderrole.OrderItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OrderRoleCreateBulk is the builder for creating many OrderRole entities in bulk.
type OrderRoleCreateBulk struct {
	config
	builders []*OrderRoleCreate
}

// Save creates the OrderRole entities in the database.
func (orcb *OrderRoleCreateBulk) Save(ctx context.Context) ([]*OrderRole, error) {
	specs := make([]*sqlgraph.CreateSpec, len(orcb.builders))
	nodes := make([]*OrderRole, len(orcb.builders))
	mutators := make([]Mutator, len(orcb.builders))
	for i := range orcb.builders {
		func(i int, root context.Context) {
			builder := orcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrderRoleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, orcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, orcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, orcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (orcb *OrderRoleCreateBulk) SaveX(ctx context.Context) []*OrderRole {
	v, err := orcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
