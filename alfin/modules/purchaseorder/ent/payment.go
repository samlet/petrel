// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/payment"
)

// Payment is the model entity for the Payment schema.
type Payment struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// PaymentTypeID holds the value of the "payment_type_id" field.
	PaymentTypeID int `json:"payment_type_id,omitempty"`
	// PaymentMethodTypeID holds the value of the "payment_method_type_id" field.
	PaymentMethodTypeID int `json:"payment_method_type_id,omitempty"`
	// PaymentMethodID holds the value of the "payment_method_id" field.
	PaymentMethodID int `json:"payment_method_id,omitempty"`
	// PaymentGatewayResponseID holds the value of the "payment_gateway_response_id" field.
	PaymentGatewayResponseID int `json:"payment_gateway_response_id,omitempty"`
	// PaymentPreferenceID holds the value of the "payment_preference_id" field.
	PaymentPreferenceID int `json:"payment_preference_id,omitempty"`
	// PartyIDFrom holds the value of the "party_id_from" field.
	PartyIDFrom int `json:"party_id_from,omitempty"`
	// PartyIDTo holds the value of the "party_id_to" field.
	PartyIDTo int `json:"party_id_to,omitempty"`
	// RoleTypeIDTo holds the value of the "role_type_id_to" field.
	RoleTypeIDTo int `json:"role_type_id_to,omitempty"`
	// StatusID holds the value of the "status_id" field.
	StatusID int `json:"status_id,omitempty"`
	// EffectiveDate holds the value of the "effective_date" field.
	EffectiveDate time.Time `json:"effective_date,omitempty"`
	// PaymentRefNum holds the value of the "payment_ref_num" field.
	PaymentRefNum string `json:"payment_ref_num,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount float64 `json:"amount,omitempty"`
	// CurrencyUomID holds the value of the "currency_uom_id" field.
	CurrencyUomID int `json:"currency_uom_id,omitempty"`
	// Comments holds the value of the "comments" field.
	Comments string `json:"comments,omitempty"`
	// FinAccountTransID holds the value of the "fin_account_trans_id" field.
	FinAccountTransID int `json:"fin_account_trans_id,omitempty"`
	// OverrideGlAccountID holds the value of the "override_gl_account_id" field.
	OverrideGlAccountID int `json:"override_gl_account_id,omitempty"`
	// ActualCurrencyAmount holds the value of the "actual_currency_amount" field.
	ActualCurrencyAmount float64 `json:"actual_currency_amount,omitempty"`
	// ActualCurrencyUomID holds the value of the "actual_currency_uom_id" field.
	ActualCurrencyUomID int `json:"actual_currency_uom_id,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Payment) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case payment.FieldAmount, payment.FieldActualCurrencyAmount:
			values[i] = new(sql.NullFloat64)
		case payment.FieldID, payment.FieldPaymentTypeID, payment.FieldPaymentMethodTypeID, payment.FieldPaymentMethodID, payment.FieldPaymentGatewayResponseID, payment.FieldPaymentPreferenceID, payment.FieldPartyIDFrom, payment.FieldPartyIDTo, payment.FieldRoleTypeIDTo, payment.FieldStatusID, payment.FieldCurrencyUomID, payment.FieldFinAccountTransID, payment.FieldOverrideGlAccountID, payment.FieldActualCurrencyUomID:
			values[i] = new(sql.NullInt64)
		case payment.FieldPaymentRefNum, payment.FieldComments:
			values[i] = new(sql.NullString)
		case payment.FieldCreateTime, payment.FieldUpdateTime, payment.FieldEffectiveDate:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Payment", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Payment fields.
func (pa *Payment) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case payment.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pa.ID = int(value.Int64)
		case payment.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				pa.CreateTime = value.Time
			}
		case payment.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				pa.UpdateTime = value.Time
			}
		case payment.FieldPaymentTypeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field payment_type_id", values[i])
			} else if value.Valid {
				pa.PaymentTypeID = int(value.Int64)
			}
		case payment.FieldPaymentMethodTypeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field payment_method_type_id", values[i])
			} else if value.Valid {
				pa.PaymentMethodTypeID = int(value.Int64)
			}
		case payment.FieldPaymentMethodID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field payment_method_id", values[i])
			} else if value.Valid {
				pa.PaymentMethodID = int(value.Int64)
			}
		case payment.FieldPaymentGatewayResponseID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field payment_gateway_response_id", values[i])
			} else if value.Valid {
				pa.PaymentGatewayResponseID = int(value.Int64)
			}
		case payment.FieldPaymentPreferenceID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field payment_preference_id", values[i])
			} else if value.Valid {
				pa.PaymentPreferenceID = int(value.Int64)
			}
		case payment.FieldPartyIDFrom:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field party_id_from", values[i])
			} else if value.Valid {
				pa.PartyIDFrom = int(value.Int64)
			}
		case payment.FieldPartyIDTo:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field party_id_to", values[i])
			} else if value.Valid {
				pa.PartyIDTo = int(value.Int64)
			}
		case payment.FieldRoleTypeIDTo:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field role_type_id_to", values[i])
			} else if value.Valid {
				pa.RoleTypeIDTo = int(value.Int64)
			}
		case payment.FieldStatusID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status_id", values[i])
			} else if value.Valid {
				pa.StatusID = int(value.Int64)
			}
		case payment.FieldEffectiveDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field effective_date", values[i])
			} else if value.Valid {
				pa.EffectiveDate = value.Time
			}
		case payment.FieldPaymentRefNum:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field payment_ref_num", values[i])
			} else if value.Valid {
				pa.PaymentRefNum = value.String
			}
		case payment.FieldAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				pa.Amount = value.Float64
			}
		case payment.FieldCurrencyUomID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field currency_uom_id", values[i])
			} else if value.Valid {
				pa.CurrencyUomID = int(value.Int64)
			}
		case payment.FieldComments:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field comments", values[i])
			} else if value.Valid {
				pa.Comments = value.String
			}
		case payment.FieldFinAccountTransID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field fin_account_trans_id", values[i])
			} else if value.Valid {
				pa.FinAccountTransID = int(value.Int64)
			}
		case payment.FieldOverrideGlAccountID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field override_gl_account_id", values[i])
			} else if value.Valid {
				pa.OverrideGlAccountID = int(value.Int64)
			}
		case payment.FieldActualCurrencyAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field actual_currency_amount", values[i])
			} else if value.Valid {
				pa.ActualCurrencyAmount = value.Float64
			}
		case payment.FieldActualCurrencyUomID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field actual_currency_uom_id", values[i])
			} else if value.Valid {
				pa.ActualCurrencyUomID = int(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Payment.
// Note that you need to call Payment.Unwrap() before calling this method if this Payment
// was returned from a transaction, and the transaction was committed or rolled back.
func (pa *Payment) Update() *PaymentUpdateOne {
	return (&PaymentClient{config: pa.config}).UpdateOne(pa)
}

// Unwrap unwraps the Payment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pa *Payment) Unwrap() *Payment {
	tx, ok := pa.config.driver.(*txDriver)
	if !ok {
		panic("ent: Payment is not a transactional entity")
	}
	pa.config.driver = tx.drv
	return pa
}

// String implements the fmt.Stringer.
func (pa *Payment) String() string {
	var builder strings.Builder
	builder.WriteString("Payment(")
	builder.WriteString(fmt.Sprintf("id=%v", pa.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(pa.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(pa.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", payment_type_id=")
	builder.WriteString(fmt.Sprintf("%v", pa.PaymentTypeID))
	builder.WriteString(", payment_method_type_id=")
	builder.WriteString(fmt.Sprintf("%v", pa.PaymentMethodTypeID))
	builder.WriteString(", payment_method_id=")
	builder.WriteString(fmt.Sprintf("%v", pa.PaymentMethodID))
	builder.WriteString(", payment_gateway_response_id=")
	builder.WriteString(fmt.Sprintf("%v", pa.PaymentGatewayResponseID))
	builder.WriteString(", payment_preference_id=")
	builder.WriteString(fmt.Sprintf("%v", pa.PaymentPreferenceID))
	builder.WriteString(", party_id_from=")
	builder.WriteString(fmt.Sprintf("%v", pa.PartyIDFrom))
	builder.WriteString(", party_id_to=")
	builder.WriteString(fmt.Sprintf("%v", pa.PartyIDTo))
	builder.WriteString(", role_type_id_to=")
	builder.WriteString(fmt.Sprintf("%v", pa.RoleTypeIDTo))
	builder.WriteString(", status_id=")
	builder.WriteString(fmt.Sprintf("%v", pa.StatusID))
	builder.WriteString(", effective_date=")
	builder.WriteString(pa.EffectiveDate.Format(time.ANSIC))
	builder.WriteString(", payment_ref_num=")
	builder.WriteString(pa.PaymentRefNum)
	builder.WriteString(", amount=")
	builder.WriteString(fmt.Sprintf("%v", pa.Amount))
	builder.WriteString(", currency_uom_id=")
	builder.WriteString(fmt.Sprintf("%v", pa.CurrencyUomID))
	builder.WriteString(", comments=")
	builder.WriteString(pa.Comments)
	builder.WriteString(", fin_account_trans_id=")
	builder.WriteString(fmt.Sprintf("%v", pa.FinAccountTransID))
	builder.WriteString(", override_gl_account_id=")
	builder.WriteString(fmt.Sprintf("%v", pa.OverrideGlAccountID))
	builder.WriteString(", actual_currency_amount=")
	builder.WriteString(fmt.Sprintf("%v", pa.ActualCurrencyAmount))
	builder.WriteString(", actual_currency_uom_id=")
	builder.WriteString(fmt.Sprintf("%v", pa.ActualCurrencyUomID))
	builder.WriteByte(')')
	return builder.String()
}

// Payments is a parsable slice of Payment.
type Payments []*Payment

func (pa Payments) config(cfg config) {
	for _i := range pa {
		pa[_i].config = cfg
	}
}
