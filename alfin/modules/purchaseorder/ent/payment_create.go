// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/payment"
)

// PaymentCreate is the builder for creating a Payment entity.
type PaymentCreate struct {
	config
	mutation *PaymentMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (pc *PaymentCreate) SetCreateTime(t time.Time) *PaymentCreate {
	pc.mutation.SetCreateTime(t)
	return pc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (pc *PaymentCreate) SetNillableCreateTime(t *time.Time) *PaymentCreate {
	if t != nil {
		pc.SetCreateTime(*t)
	}
	return pc
}

// SetUpdateTime sets the "update_time" field.
func (pc *PaymentCreate) SetUpdateTime(t time.Time) *PaymentCreate {
	pc.mutation.SetUpdateTime(t)
	return pc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (pc *PaymentCreate) SetNillableUpdateTime(t *time.Time) *PaymentCreate {
	if t != nil {
		pc.SetUpdateTime(*t)
	}
	return pc
}

// SetPaymentTypeID sets the "payment_type_id" field.
func (pc *PaymentCreate) SetPaymentTypeID(i int) *PaymentCreate {
	pc.mutation.SetPaymentTypeID(i)
	return pc
}

// SetNillablePaymentTypeID sets the "payment_type_id" field if the given value is not nil.
func (pc *PaymentCreate) SetNillablePaymentTypeID(i *int) *PaymentCreate {
	if i != nil {
		pc.SetPaymentTypeID(*i)
	}
	return pc
}

// SetPaymentMethodTypeID sets the "payment_method_type_id" field.
func (pc *PaymentCreate) SetPaymentMethodTypeID(i int) *PaymentCreate {
	pc.mutation.SetPaymentMethodTypeID(i)
	return pc
}

// SetNillablePaymentMethodTypeID sets the "payment_method_type_id" field if the given value is not nil.
func (pc *PaymentCreate) SetNillablePaymentMethodTypeID(i *int) *PaymentCreate {
	if i != nil {
		pc.SetPaymentMethodTypeID(*i)
	}
	return pc
}

// SetPaymentMethodID sets the "payment_method_id" field.
func (pc *PaymentCreate) SetPaymentMethodID(i int) *PaymentCreate {
	pc.mutation.SetPaymentMethodID(i)
	return pc
}

// SetNillablePaymentMethodID sets the "payment_method_id" field if the given value is not nil.
func (pc *PaymentCreate) SetNillablePaymentMethodID(i *int) *PaymentCreate {
	if i != nil {
		pc.SetPaymentMethodID(*i)
	}
	return pc
}

// SetPaymentGatewayResponseID sets the "payment_gateway_response_id" field.
func (pc *PaymentCreate) SetPaymentGatewayResponseID(i int) *PaymentCreate {
	pc.mutation.SetPaymentGatewayResponseID(i)
	return pc
}

// SetNillablePaymentGatewayResponseID sets the "payment_gateway_response_id" field if the given value is not nil.
func (pc *PaymentCreate) SetNillablePaymentGatewayResponseID(i *int) *PaymentCreate {
	if i != nil {
		pc.SetPaymentGatewayResponseID(*i)
	}
	return pc
}

// SetPaymentPreferenceID sets the "payment_preference_id" field.
func (pc *PaymentCreate) SetPaymentPreferenceID(i int) *PaymentCreate {
	pc.mutation.SetPaymentPreferenceID(i)
	return pc
}

// SetNillablePaymentPreferenceID sets the "payment_preference_id" field if the given value is not nil.
func (pc *PaymentCreate) SetNillablePaymentPreferenceID(i *int) *PaymentCreate {
	if i != nil {
		pc.SetPaymentPreferenceID(*i)
	}
	return pc
}

// SetPartyIDFrom sets the "party_id_from" field.
func (pc *PaymentCreate) SetPartyIDFrom(i int) *PaymentCreate {
	pc.mutation.SetPartyIDFrom(i)
	return pc
}

// SetNillablePartyIDFrom sets the "party_id_from" field if the given value is not nil.
func (pc *PaymentCreate) SetNillablePartyIDFrom(i *int) *PaymentCreate {
	if i != nil {
		pc.SetPartyIDFrom(*i)
	}
	return pc
}

// SetPartyIDTo sets the "party_id_to" field.
func (pc *PaymentCreate) SetPartyIDTo(i int) *PaymentCreate {
	pc.mutation.SetPartyIDTo(i)
	return pc
}

// SetNillablePartyIDTo sets the "party_id_to" field if the given value is not nil.
func (pc *PaymentCreate) SetNillablePartyIDTo(i *int) *PaymentCreate {
	if i != nil {
		pc.SetPartyIDTo(*i)
	}
	return pc
}

// SetRoleTypeIDTo sets the "role_type_id_to" field.
func (pc *PaymentCreate) SetRoleTypeIDTo(i int) *PaymentCreate {
	pc.mutation.SetRoleTypeIDTo(i)
	return pc
}

// SetNillableRoleTypeIDTo sets the "role_type_id_to" field if the given value is not nil.
func (pc *PaymentCreate) SetNillableRoleTypeIDTo(i *int) *PaymentCreate {
	if i != nil {
		pc.SetRoleTypeIDTo(*i)
	}
	return pc
}

// SetStatusID sets the "status_id" field.
func (pc *PaymentCreate) SetStatusID(i int) *PaymentCreate {
	pc.mutation.SetStatusID(i)
	return pc
}

// SetNillableStatusID sets the "status_id" field if the given value is not nil.
func (pc *PaymentCreate) SetNillableStatusID(i *int) *PaymentCreate {
	if i != nil {
		pc.SetStatusID(*i)
	}
	return pc
}

// SetEffectiveDate sets the "effective_date" field.
func (pc *PaymentCreate) SetEffectiveDate(t time.Time) *PaymentCreate {
	pc.mutation.SetEffectiveDate(t)
	return pc
}

// SetNillableEffectiveDate sets the "effective_date" field if the given value is not nil.
func (pc *PaymentCreate) SetNillableEffectiveDate(t *time.Time) *PaymentCreate {
	if t != nil {
		pc.SetEffectiveDate(*t)
	}
	return pc
}

// SetPaymentRefNum sets the "payment_ref_num" field.
func (pc *PaymentCreate) SetPaymentRefNum(s string) *PaymentCreate {
	pc.mutation.SetPaymentRefNum(s)
	return pc
}

// SetNillablePaymentRefNum sets the "payment_ref_num" field if the given value is not nil.
func (pc *PaymentCreate) SetNillablePaymentRefNum(s *string) *PaymentCreate {
	if s != nil {
		pc.SetPaymentRefNum(*s)
	}
	return pc
}

// SetAmount sets the "amount" field.
func (pc *PaymentCreate) SetAmount(f float64) *PaymentCreate {
	pc.mutation.SetAmount(f)
	return pc
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (pc *PaymentCreate) SetNillableAmount(f *float64) *PaymentCreate {
	if f != nil {
		pc.SetAmount(*f)
	}
	return pc
}

// SetCurrencyUomID sets the "currency_uom_id" field.
func (pc *PaymentCreate) SetCurrencyUomID(i int) *PaymentCreate {
	pc.mutation.SetCurrencyUomID(i)
	return pc
}

// SetNillableCurrencyUomID sets the "currency_uom_id" field if the given value is not nil.
func (pc *PaymentCreate) SetNillableCurrencyUomID(i *int) *PaymentCreate {
	if i != nil {
		pc.SetCurrencyUomID(*i)
	}
	return pc
}

// SetComments sets the "comments" field.
func (pc *PaymentCreate) SetComments(s string) *PaymentCreate {
	pc.mutation.SetComments(s)
	return pc
}

// SetNillableComments sets the "comments" field if the given value is not nil.
func (pc *PaymentCreate) SetNillableComments(s *string) *PaymentCreate {
	if s != nil {
		pc.SetComments(*s)
	}
	return pc
}

// SetFinAccountTransID sets the "fin_account_trans_id" field.
func (pc *PaymentCreate) SetFinAccountTransID(i int) *PaymentCreate {
	pc.mutation.SetFinAccountTransID(i)
	return pc
}

// SetNillableFinAccountTransID sets the "fin_account_trans_id" field if the given value is not nil.
func (pc *PaymentCreate) SetNillableFinAccountTransID(i *int) *PaymentCreate {
	if i != nil {
		pc.SetFinAccountTransID(*i)
	}
	return pc
}

// SetOverrideGlAccountID sets the "override_gl_account_id" field.
func (pc *PaymentCreate) SetOverrideGlAccountID(i int) *PaymentCreate {
	pc.mutation.SetOverrideGlAccountID(i)
	return pc
}

// SetNillableOverrideGlAccountID sets the "override_gl_account_id" field if the given value is not nil.
func (pc *PaymentCreate) SetNillableOverrideGlAccountID(i *int) *PaymentCreate {
	if i != nil {
		pc.SetOverrideGlAccountID(*i)
	}
	return pc
}

// SetActualCurrencyAmount sets the "actual_currency_amount" field.
func (pc *PaymentCreate) SetActualCurrencyAmount(f float64) *PaymentCreate {
	pc.mutation.SetActualCurrencyAmount(f)
	return pc
}

// SetNillableActualCurrencyAmount sets the "actual_currency_amount" field if the given value is not nil.
func (pc *PaymentCreate) SetNillableActualCurrencyAmount(f *float64) *PaymentCreate {
	if f != nil {
		pc.SetActualCurrencyAmount(*f)
	}
	return pc
}

// SetActualCurrencyUomID sets the "actual_currency_uom_id" field.
func (pc *PaymentCreate) SetActualCurrencyUomID(i int) *PaymentCreate {
	pc.mutation.SetActualCurrencyUomID(i)
	return pc
}

// SetNillableActualCurrencyUomID sets the "actual_currency_uom_id" field if the given value is not nil.
func (pc *PaymentCreate) SetNillableActualCurrencyUomID(i *int) *PaymentCreate {
	if i != nil {
		pc.SetActualCurrencyUomID(*i)
	}
	return pc
}

// Mutation returns the PaymentMutation object of the builder.
func (pc *PaymentCreate) Mutation() *PaymentMutation {
	return pc.mutation
}

// Save creates the Payment in the database.
func (pc *PaymentCreate) Save(ctx context.Context) (*Payment, error) {
	var (
		err  error
		node *Payment
	)
	pc.defaults()
	if len(pc.hooks) == 0 {
		if err = pc.check(); err != nil {
			return nil, err
		}
		node, err = pc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PaymentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pc.check(); err != nil {
				return nil, err
			}
			pc.mutation = mutation
			node, err = pc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pc.hooks) - 1; i >= 0; i-- {
			mut = pc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PaymentCreate) SaveX(ctx context.Context) *Payment {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (pc *PaymentCreate) defaults() {
	if _, ok := pc.mutation.CreateTime(); !ok {
		v := payment.DefaultCreateTime()
		pc.mutation.SetCreateTime(v)
	}
	if _, ok := pc.mutation.UpdateTime(); !ok {
		v := payment.DefaultUpdateTime()
		pc.mutation.SetUpdateTime(v)
	}
	if _, ok := pc.mutation.EffectiveDate(); !ok {
		v := payment.DefaultEffectiveDate()
		pc.mutation.SetEffectiveDate(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PaymentCreate) check() error {
	if _, ok := pc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New("ent: missing required field \"create_time\"")}
	}
	if _, ok := pc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New("ent: missing required field \"update_time\"")}
	}
	return nil
}

func (pc *PaymentCreate) sqlSave(ctx context.Context) (*Payment, error) {
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (pc *PaymentCreate) createSpec() (*Payment, *sqlgraph.CreateSpec) {
	var (
		_node = &Payment{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: payment.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: payment.FieldID,
			},
		}
	)
	if value, ok := pc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: payment.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := pc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: payment.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := pc.mutation.PaymentTypeID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: payment.FieldPaymentTypeID,
		})
		_node.PaymentTypeID = value
	}
	if value, ok := pc.mutation.PaymentMethodTypeID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: payment.FieldPaymentMethodTypeID,
		})
		_node.PaymentMethodTypeID = value
	}
	if value, ok := pc.mutation.PaymentMethodID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: payment.FieldPaymentMethodID,
		})
		_node.PaymentMethodID = value
	}
	if value, ok := pc.mutation.PaymentGatewayResponseID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: payment.FieldPaymentGatewayResponseID,
		})
		_node.PaymentGatewayResponseID = value
	}
	if value, ok := pc.mutation.PaymentPreferenceID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: payment.FieldPaymentPreferenceID,
		})
		_node.PaymentPreferenceID = value
	}
	if value, ok := pc.mutation.PartyIDFrom(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: payment.FieldPartyIDFrom,
		})
		_node.PartyIDFrom = value
	}
	if value, ok := pc.mutation.PartyIDTo(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: payment.FieldPartyIDTo,
		})
		_node.PartyIDTo = value
	}
	if value, ok := pc.mutation.RoleTypeIDTo(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: payment.FieldRoleTypeIDTo,
		})
		_node.RoleTypeIDTo = value
	}
	if value, ok := pc.mutation.StatusID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: payment.FieldStatusID,
		})
		_node.StatusID = value
	}
	if value, ok := pc.mutation.EffectiveDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: payment.FieldEffectiveDate,
		})
		_node.EffectiveDate = value
	}
	if value, ok := pc.mutation.PaymentRefNum(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: payment.FieldPaymentRefNum,
		})
		_node.PaymentRefNum = value
	}
	if value, ok := pc.mutation.Amount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: payment.FieldAmount,
		})
		_node.Amount = value
	}
	if value, ok := pc.mutation.CurrencyUomID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: payment.FieldCurrencyUomID,
		})
		_node.CurrencyUomID = value
	}
	if value, ok := pc.mutation.Comments(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: payment.FieldComments,
		})
		_node.Comments = value
	}
	if value, ok := pc.mutation.FinAccountTransID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: payment.FieldFinAccountTransID,
		})
		_node.FinAccountTransID = value
	}
	if value, ok := pc.mutation.OverrideGlAccountID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: payment.FieldOverrideGlAccountID,
		})
		_node.OverrideGlAccountID = value
	}
	if value, ok := pc.mutation.ActualCurrencyAmount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: payment.FieldActualCurrencyAmount,
		})
		_node.ActualCurrencyAmount = value
	}
	if value, ok := pc.mutation.ActualCurrencyUomID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: payment.FieldActualCurrencyUomID,
		})
		_node.ActualCurrencyUomID = value
	}
	return _node, _spec
}

// PaymentCreateBulk is the builder for creating many Payment entities in bulk.
type PaymentCreateBulk struct {
	config
	builders []*PaymentCreate
}

// Save creates the Payment entities in the database.
func (pcb *PaymentCreateBulk) Save(ctx context.Context) ([]*Payment, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Payment, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PaymentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PaymentCreateBulk) SaveX(ctx context.Context) []*Payment {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
