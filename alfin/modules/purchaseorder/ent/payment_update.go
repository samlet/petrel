// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/payment"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/predicate"
)

// PaymentUpdate is the builder for updating Payment entities.
type PaymentUpdate struct {
	config
	hooks    []Hook
	mutation *PaymentMutation
}

// Where adds a new predicate for the PaymentUpdate builder.
func (pu *PaymentUpdate) Where(ps ...predicate.Payment) *PaymentUpdate {
	pu.mutation.predicates = append(pu.mutation.predicates, ps...)
	return pu
}

// SetPaymentTypeID sets the "payment_type_id" field.
func (pu *PaymentUpdate) SetPaymentTypeID(i int) *PaymentUpdate {
	pu.mutation.ResetPaymentTypeID()
	pu.mutation.SetPaymentTypeID(i)
	return pu
}

// SetNillablePaymentTypeID sets the "payment_type_id" field if the given value is not nil.
func (pu *PaymentUpdate) SetNillablePaymentTypeID(i *int) *PaymentUpdate {
	if i != nil {
		pu.SetPaymentTypeID(*i)
	}
	return pu
}

// AddPaymentTypeID adds i to the "payment_type_id" field.
func (pu *PaymentUpdate) AddPaymentTypeID(i int) *PaymentUpdate {
	pu.mutation.AddPaymentTypeID(i)
	return pu
}

// ClearPaymentTypeID clears the value of the "payment_type_id" field.
func (pu *PaymentUpdate) ClearPaymentTypeID() *PaymentUpdate {
	pu.mutation.ClearPaymentTypeID()
	return pu
}

// SetPaymentMethodTypeID sets the "payment_method_type_id" field.
func (pu *PaymentUpdate) SetPaymentMethodTypeID(i int) *PaymentUpdate {
	pu.mutation.ResetPaymentMethodTypeID()
	pu.mutation.SetPaymentMethodTypeID(i)
	return pu
}

// SetNillablePaymentMethodTypeID sets the "payment_method_type_id" field if the given value is not nil.
func (pu *PaymentUpdate) SetNillablePaymentMethodTypeID(i *int) *PaymentUpdate {
	if i != nil {
		pu.SetPaymentMethodTypeID(*i)
	}
	return pu
}

// AddPaymentMethodTypeID adds i to the "payment_method_type_id" field.
func (pu *PaymentUpdate) AddPaymentMethodTypeID(i int) *PaymentUpdate {
	pu.mutation.AddPaymentMethodTypeID(i)
	return pu
}

// ClearPaymentMethodTypeID clears the value of the "payment_method_type_id" field.
func (pu *PaymentUpdate) ClearPaymentMethodTypeID() *PaymentUpdate {
	pu.mutation.ClearPaymentMethodTypeID()
	return pu
}

// SetPaymentMethodID sets the "payment_method_id" field.
func (pu *PaymentUpdate) SetPaymentMethodID(i int) *PaymentUpdate {
	pu.mutation.ResetPaymentMethodID()
	pu.mutation.SetPaymentMethodID(i)
	return pu
}

// SetNillablePaymentMethodID sets the "payment_method_id" field if the given value is not nil.
func (pu *PaymentUpdate) SetNillablePaymentMethodID(i *int) *PaymentUpdate {
	if i != nil {
		pu.SetPaymentMethodID(*i)
	}
	return pu
}

// AddPaymentMethodID adds i to the "payment_method_id" field.
func (pu *PaymentUpdate) AddPaymentMethodID(i int) *PaymentUpdate {
	pu.mutation.AddPaymentMethodID(i)
	return pu
}

// ClearPaymentMethodID clears the value of the "payment_method_id" field.
func (pu *PaymentUpdate) ClearPaymentMethodID() *PaymentUpdate {
	pu.mutation.ClearPaymentMethodID()
	return pu
}

// SetPaymentGatewayResponseID sets the "payment_gateway_response_id" field.
func (pu *PaymentUpdate) SetPaymentGatewayResponseID(i int) *PaymentUpdate {
	pu.mutation.ResetPaymentGatewayResponseID()
	pu.mutation.SetPaymentGatewayResponseID(i)
	return pu
}

// SetNillablePaymentGatewayResponseID sets the "payment_gateway_response_id" field if the given value is not nil.
func (pu *PaymentUpdate) SetNillablePaymentGatewayResponseID(i *int) *PaymentUpdate {
	if i != nil {
		pu.SetPaymentGatewayResponseID(*i)
	}
	return pu
}

// AddPaymentGatewayResponseID adds i to the "payment_gateway_response_id" field.
func (pu *PaymentUpdate) AddPaymentGatewayResponseID(i int) *PaymentUpdate {
	pu.mutation.AddPaymentGatewayResponseID(i)
	return pu
}

// ClearPaymentGatewayResponseID clears the value of the "payment_gateway_response_id" field.
func (pu *PaymentUpdate) ClearPaymentGatewayResponseID() *PaymentUpdate {
	pu.mutation.ClearPaymentGatewayResponseID()
	return pu
}

// SetPaymentPreferenceID sets the "payment_preference_id" field.
func (pu *PaymentUpdate) SetPaymentPreferenceID(i int) *PaymentUpdate {
	pu.mutation.ResetPaymentPreferenceID()
	pu.mutation.SetPaymentPreferenceID(i)
	return pu
}

// SetNillablePaymentPreferenceID sets the "payment_preference_id" field if the given value is not nil.
func (pu *PaymentUpdate) SetNillablePaymentPreferenceID(i *int) *PaymentUpdate {
	if i != nil {
		pu.SetPaymentPreferenceID(*i)
	}
	return pu
}

// AddPaymentPreferenceID adds i to the "payment_preference_id" field.
func (pu *PaymentUpdate) AddPaymentPreferenceID(i int) *PaymentUpdate {
	pu.mutation.AddPaymentPreferenceID(i)
	return pu
}

// ClearPaymentPreferenceID clears the value of the "payment_preference_id" field.
func (pu *PaymentUpdate) ClearPaymentPreferenceID() *PaymentUpdate {
	pu.mutation.ClearPaymentPreferenceID()
	return pu
}

// SetPartyIDFrom sets the "party_id_from" field.
func (pu *PaymentUpdate) SetPartyIDFrom(i int) *PaymentUpdate {
	pu.mutation.ResetPartyIDFrom()
	pu.mutation.SetPartyIDFrom(i)
	return pu
}

// SetNillablePartyIDFrom sets the "party_id_from" field if the given value is not nil.
func (pu *PaymentUpdate) SetNillablePartyIDFrom(i *int) *PaymentUpdate {
	if i != nil {
		pu.SetPartyIDFrom(*i)
	}
	return pu
}

// AddPartyIDFrom adds i to the "party_id_from" field.
func (pu *PaymentUpdate) AddPartyIDFrom(i int) *PaymentUpdate {
	pu.mutation.AddPartyIDFrom(i)
	return pu
}

// ClearPartyIDFrom clears the value of the "party_id_from" field.
func (pu *PaymentUpdate) ClearPartyIDFrom() *PaymentUpdate {
	pu.mutation.ClearPartyIDFrom()
	return pu
}

// SetPartyIDTo sets the "party_id_to" field.
func (pu *PaymentUpdate) SetPartyIDTo(i int) *PaymentUpdate {
	pu.mutation.ResetPartyIDTo()
	pu.mutation.SetPartyIDTo(i)
	return pu
}

// SetNillablePartyIDTo sets the "party_id_to" field if the given value is not nil.
func (pu *PaymentUpdate) SetNillablePartyIDTo(i *int) *PaymentUpdate {
	if i != nil {
		pu.SetPartyIDTo(*i)
	}
	return pu
}

// AddPartyIDTo adds i to the "party_id_to" field.
func (pu *PaymentUpdate) AddPartyIDTo(i int) *PaymentUpdate {
	pu.mutation.AddPartyIDTo(i)
	return pu
}

// ClearPartyIDTo clears the value of the "party_id_to" field.
func (pu *PaymentUpdate) ClearPartyIDTo() *PaymentUpdate {
	pu.mutation.ClearPartyIDTo()
	return pu
}

// SetRoleTypeIDTo sets the "role_type_id_to" field.
func (pu *PaymentUpdate) SetRoleTypeIDTo(i int) *PaymentUpdate {
	pu.mutation.ResetRoleTypeIDTo()
	pu.mutation.SetRoleTypeIDTo(i)
	return pu
}

// SetNillableRoleTypeIDTo sets the "role_type_id_to" field if the given value is not nil.
func (pu *PaymentUpdate) SetNillableRoleTypeIDTo(i *int) *PaymentUpdate {
	if i != nil {
		pu.SetRoleTypeIDTo(*i)
	}
	return pu
}

// AddRoleTypeIDTo adds i to the "role_type_id_to" field.
func (pu *PaymentUpdate) AddRoleTypeIDTo(i int) *PaymentUpdate {
	pu.mutation.AddRoleTypeIDTo(i)
	return pu
}

// ClearRoleTypeIDTo clears the value of the "role_type_id_to" field.
func (pu *PaymentUpdate) ClearRoleTypeIDTo() *PaymentUpdate {
	pu.mutation.ClearRoleTypeIDTo()
	return pu
}

// SetStatusID sets the "status_id" field.
func (pu *PaymentUpdate) SetStatusID(i int) *PaymentUpdate {
	pu.mutation.ResetStatusID()
	pu.mutation.SetStatusID(i)
	return pu
}

// SetNillableStatusID sets the "status_id" field if the given value is not nil.
func (pu *PaymentUpdate) SetNillableStatusID(i *int) *PaymentUpdate {
	if i != nil {
		pu.SetStatusID(*i)
	}
	return pu
}

// AddStatusID adds i to the "status_id" field.
func (pu *PaymentUpdate) AddStatusID(i int) *PaymentUpdate {
	pu.mutation.AddStatusID(i)
	return pu
}

// ClearStatusID clears the value of the "status_id" field.
func (pu *PaymentUpdate) ClearStatusID() *PaymentUpdate {
	pu.mutation.ClearStatusID()
	return pu
}

// SetEffectiveDate sets the "effective_date" field.
func (pu *PaymentUpdate) SetEffectiveDate(t time.Time) *PaymentUpdate {
	pu.mutation.SetEffectiveDate(t)
	return pu
}

// SetNillableEffectiveDate sets the "effective_date" field if the given value is not nil.
func (pu *PaymentUpdate) SetNillableEffectiveDate(t *time.Time) *PaymentUpdate {
	if t != nil {
		pu.SetEffectiveDate(*t)
	}
	return pu
}

// ClearEffectiveDate clears the value of the "effective_date" field.
func (pu *PaymentUpdate) ClearEffectiveDate() *PaymentUpdate {
	pu.mutation.ClearEffectiveDate()
	return pu
}

// SetPaymentRefNum sets the "payment_ref_num" field.
func (pu *PaymentUpdate) SetPaymentRefNum(s string) *PaymentUpdate {
	pu.mutation.SetPaymentRefNum(s)
	return pu
}

// SetNillablePaymentRefNum sets the "payment_ref_num" field if the given value is not nil.
func (pu *PaymentUpdate) SetNillablePaymentRefNum(s *string) *PaymentUpdate {
	if s != nil {
		pu.SetPaymentRefNum(*s)
	}
	return pu
}

// ClearPaymentRefNum clears the value of the "payment_ref_num" field.
func (pu *PaymentUpdate) ClearPaymentRefNum() *PaymentUpdate {
	pu.mutation.ClearPaymentRefNum()
	return pu
}

// SetAmount sets the "amount" field.
func (pu *PaymentUpdate) SetAmount(f float64) *PaymentUpdate {
	pu.mutation.ResetAmount()
	pu.mutation.SetAmount(f)
	return pu
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (pu *PaymentUpdate) SetNillableAmount(f *float64) *PaymentUpdate {
	if f != nil {
		pu.SetAmount(*f)
	}
	return pu
}

// AddAmount adds f to the "amount" field.
func (pu *PaymentUpdate) AddAmount(f float64) *PaymentUpdate {
	pu.mutation.AddAmount(f)
	return pu
}

// ClearAmount clears the value of the "amount" field.
func (pu *PaymentUpdate) ClearAmount() *PaymentUpdate {
	pu.mutation.ClearAmount()
	return pu
}

// SetCurrencyUomID sets the "currency_uom_id" field.
func (pu *PaymentUpdate) SetCurrencyUomID(i int) *PaymentUpdate {
	pu.mutation.ResetCurrencyUomID()
	pu.mutation.SetCurrencyUomID(i)
	return pu
}

// SetNillableCurrencyUomID sets the "currency_uom_id" field if the given value is not nil.
func (pu *PaymentUpdate) SetNillableCurrencyUomID(i *int) *PaymentUpdate {
	if i != nil {
		pu.SetCurrencyUomID(*i)
	}
	return pu
}

// AddCurrencyUomID adds i to the "currency_uom_id" field.
func (pu *PaymentUpdate) AddCurrencyUomID(i int) *PaymentUpdate {
	pu.mutation.AddCurrencyUomID(i)
	return pu
}

// ClearCurrencyUomID clears the value of the "currency_uom_id" field.
func (pu *PaymentUpdate) ClearCurrencyUomID() *PaymentUpdate {
	pu.mutation.ClearCurrencyUomID()
	return pu
}

// SetComments sets the "comments" field.
func (pu *PaymentUpdate) SetComments(s string) *PaymentUpdate {
	pu.mutation.SetComments(s)
	return pu
}

// SetNillableComments sets the "comments" field if the given value is not nil.
func (pu *PaymentUpdate) SetNillableComments(s *string) *PaymentUpdate {
	if s != nil {
		pu.SetComments(*s)
	}
	return pu
}

// ClearComments clears the value of the "comments" field.
func (pu *PaymentUpdate) ClearComments() *PaymentUpdate {
	pu.mutation.ClearComments()
	return pu
}

// SetFinAccountTransID sets the "fin_account_trans_id" field.
func (pu *PaymentUpdate) SetFinAccountTransID(i int) *PaymentUpdate {
	pu.mutation.ResetFinAccountTransID()
	pu.mutation.SetFinAccountTransID(i)
	return pu
}

// SetNillableFinAccountTransID sets the "fin_account_trans_id" field if the given value is not nil.
func (pu *PaymentUpdate) SetNillableFinAccountTransID(i *int) *PaymentUpdate {
	if i != nil {
		pu.SetFinAccountTransID(*i)
	}
	return pu
}

// AddFinAccountTransID adds i to the "fin_account_trans_id" field.
func (pu *PaymentUpdate) AddFinAccountTransID(i int) *PaymentUpdate {
	pu.mutation.AddFinAccountTransID(i)
	return pu
}

// ClearFinAccountTransID clears the value of the "fin_account_trans_id" field.
func (pu *PaymentUpdate) ClearFinAccountTransID() *PaymentUpdate {
	pu.mutation.ClearFinAccountTransID()
	return pu
}

// SetOverrideGlAccountID sets the "override_gl_account_id" field.
func (pu *PaymentUpdate) SetOverrideGlAccountID(i int) *PaymentUpdate {
	pu.mutation.ResetOverrideGlAccountID()
	pu.mutation.SetOverrideGlAccountID(i)
	return pu
}

// SetNillableOverrideGlAccountID sets the "override_gl_account_id" field if the given value is not nil.
func (pu *PaymentUpdate) SetNillableOverrideGlAccountID(i *int) *PaymentUpdate {
	if i != nil {
		pu.SetOverrideGlAccountID(*i)
	}
	return pu
}

// AddOverrideGlAccountID adds i to the "override_gl_account_id" field.
func (pu *PaymentUpdate) AddOverrideGlAccountID(i int) *PaymentUpdate {
	pu.mutation.AddOverrideGlAccountID(i)
	return pu
}

// ClearOverrideGlAccountID clears the value of the "override_gl_account_id" field.
func (pu *PaymentUpdate) ClearOverrideGlAccountID() *PaymentUpdate {
	pu.mutation.ClearOverrideGlAccountID()
	return pu
}

// SetActualCurrencyAmount sets the "actual_currency_amount" field.
func (pu *PaymentUpdate) SetActualCurrencyAmount(f float64) *PaymentUpdate {
	pu.mutation.ResetActualCurrencyAmount()
	pu.mutation.SetActualCurrencyAmount(f)
	return pu
}

// SetNillableActualCurrencyAmount sets the "actual_currency_amount" field if the given value is not nil.
func (pu *PaymentUpdate) SetNillableActualCurrencyAmount(f *float64) *PaymentUpdate {
	if f != nil {
		pu.SetActualCurrencyAmount(*f)
	}
	return pu
}

// AddActualCurrencyAmount adds f to the "actual_currency_amount" field.
func (pu *PaymentUpdate) AddActualCurrencyAmount(f float64) *PaymentUpdate {
	pu.mutation.AddActualCurrencyAmount(f)
	return pu
}

// ClearActualCurrencyAmount clears the value of the "actual_currency_amount" field.
func (pu *PaymentUpdate) ClearActualCurrencyAmount() *PaymentUpdate {
	pu.mutation.ClearActualCurrencyAmount()
	return pu
}

// SetActualCurrencyUomID sets the "actual_currency_uom_id" field.
func (pu *PaymentUpdate) SetActualCurrencyUomID(i int) *PaymentUpdate {
	pu.mutation.ResetActualCurrencyUomID()
	pu.mutation.SetActualCurrencyUomID(i)
	return pu
}

// SetNillableActualCurrencyUomID sets the "actual_currency_uom_id" field if the given value is not nil.
func (pu *PaymentUpdate) SetNillableActualCurrencyUomID(i *int) *PaymentUpdate {
	if i != nil {
		pu.SetActualCurrencyUomID(*i)
	}
	return pu
}

// AddActualCurrencyUomID adds i to the "actual_currency_uom_id" field.
func (pu *PaymentUpdate) AddActualCurrencyUomID(i int) *PaymentUpdate {
	pu.mutation.AddActualCurrencyUomID(i)
	return pu
}

// ClearActualCurrencyUomID clears the value of the "actual_currency_uom_id" field.
func (pu *PaymentUpdate) ClearActualCurrencyUomID() *PaymentUpdate {
	pu.mutation.ClearActualCurrencyUomID()
	return pu
}

// Mutation returns the PaymentMutation object of the builder.
func (pu *PaymentUpdate) Mutation() *PaymentMutation {
	return pu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PaymentUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	pu.defaults()
	if len(pu.hooks) == 0 {
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PaymentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PaymentUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PaymentUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PaymentUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *PaymentUpdate) defaults() {
	if _, ok := pu.mutation.UpdateTime(); !ok {
		v := payment.UpdateDefaultUpdateTime()
		pu.mutation.SetUpdateTime(v)
	}
}

func (pu *PaymentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   payment.Table,
			Columns: payment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: payment.FieldID,
			},
		},
	}
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: payment.FieldUpdateTime,
		})
	}
	if value, ok := pu.mutation.PaymentTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: payment.FieldPaymentTypeID,
		})
	}
	if value, ok := pu.mutation.AddedPaymentTypeID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: payment.FieldPaymentTypeID,
		})
	}
	if pu.mutation.PaymentTypeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: payment.FieldPaymentTypeID,
		})
	}
	if value, ok := pu.mutation.PaymentMethodTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: payment.FieldPaymentMethodTypeID,
		})
	}
	if value, ok := pu.mutation.AddedPaymentMethodTypeID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: payment.FieldPaymentMethodTypeID,
		})
	}
	if pu.mutation.PaymentMethodTypeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: payment.FieldPaymentMethodTypeID,
		})
	}
	if value, ok := pu.mutation.PaymentMethodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: payment.FieldPaymentMethodID,
		})
	}
	if value, ok := pu.mutation.AddedPaymentMethodID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: payment.FieldPaymentMethodID,
		})
	}
	if pu.mutation.PaymentMethodIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: payment.FieldPaymentMethodID,
		})
	}
	if value, ok := pu.mutation.PaymentGatewayResponseID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: payment.FieldPaymentGatewayResponseID,
		})
	}
	if value, ok := pu.mutation.AddedPaymentGatewayResponseID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: payment.FieldPaymentGatewayResponseID,
		})
	}
	if pu.mutation.PaymentGatewayResponseIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: payment.FieldPaymentGatewayResponseID,
		})
	}
	if value, ok := pu.mutation.PaymentPreferenceID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: payment.FieldPaymentPreferenceID,
		})
	}
	if value, ok := pu.mutation.AddedPaymentPreferenceID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: payment.FieldPaymentPreferenceID,
		})
	}
	if pu.mutation.PaymentPreferenceIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: payment.FieldPaymentPreferenceID,
		})
	}
	if value, ok := pu.mutation.PartyIDFrom(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: payment.FieldPartyIDFrom,
		})
	}
	if value, ok := pu.mutation.AddedPartyIDFrom(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: payment.FieldPartyIDFrom,
		})
	}
	if pu.mutation.PartyIDFromCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: payment.FieldPartyIDFrom,
		})
	}
	if value, ok := pu.mutation.PartyIDTo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: payment.FieldPartyIDTo,
		})
	}
	if value, ok := pu.mutation.AddedPartyIDTo(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: payment.FieldPartyIDTo,
		})
	}
	if pu.mutation.PartyIDToCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: payment.FieldPartyIDTo,
		})
	}
	if value, ok := pu.mutation.RoleTypeIDTo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: payment.FieldRoleTypeIDTo,
		})
	}
	if value, ok := pu.mutation.AddedRoleTypeIDTo(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: payment.FieldRoleTypeIDTo,
		})
	}
	if pu.mutation.RoleTypeIDToCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: payment.FieldRoleTypeIDTo,
		})
	}
	if value, ok := pu.mutation.StatusID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: payment.FieldStatusID,
		})
	}
	if value, ok := pu.mutation.AddedStatusID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: payment.FieldStatusID,
		})
	}
	if pu.mutation.StatusIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: payment.FieldStatusID,
		})
	}
	if value, ok := pu.mutation.EffectiveDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: payment.FieldEffectiveDate,
		})
	}
	if pu.mutation.EffectiveDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: payment.FieldEffectiveDate,
		})
	}
	if value, ok := pu.mutation.PaymentRefNum(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: payment.FieldPaymentRefNum,
		})
	}
	if pu.mutation.PaymentRefNumCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: payment.FieldPaymentRefNum,
		})
	}
	if value, ok := pu.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: payment.FieldAmount,
		})
	}
	if value, ok := pu.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: payment.FieldAmount,
		})
	}
	if pu.mutation.AmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: payment.FieldAmount,
		})
	}
	if value, ok := pu.mutation.CurrencyUomID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: payment.FieldCurrencyUomID,
		})
	}
	if value, ok := pu.mutation.AddedCurrencyUomID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: payment.FieldCurrencyUomID,
		})
	}
	if pu.mutation.CurrencyUomIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: payment.FieldCurrencyUomID,
		})
	}
	if value, ok := pu.mutation.Comments(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: payment.FieldComments,
		})
	}
	if pu.mutation.CommentsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: payment.FieldComments,
		})
	}
	if value, ok := pu.mutation.FinAccountTransID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: payment.FieldFinAccountTransID,
		})
	}
	if value, ok := pu.mutation.AddedFinAccountTransID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: payment.FieldFinAccountTransID,
		})
	}
	if pu.mutation.FinAccountTransIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: payment.FieldFinAccountTransID,
		})
	}
	if value, ok := pu.mutation.OverrideGlAccountID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: payment.FieldOverrideGlAccountID,
		})
	}
	if value, ok := pu.mutation.AddedOverrideGlAccountID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: payment.FieldOverrideGlAccountID,
		})
	}
	if pu.mutation.OverrideGlAccountIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: payment.FieldOverrideGlAccountID,
		})
	}
	if value, ok := pu.mutation.ActualCurrencyAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: payment.FieldActualCurrencyAmount,
		})
	}
	if value, ok := pu.mutation.AddedActualCurrencyAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: payment.FieldActualCurrencyAmount,
		})
	}
	if pu.mutation.ActualCurrencyAmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: payment.FieldActualCurrencyAmount,
		})
	}
	if value, ok := pu.mutation.ActualCurrencyUomID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: payment.FieldActualCurrencyUomID,
		})
	}
	if value, ok := pu.mutation.AddedActualCurrencyUomID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: payment.FieldActualCurrencyUomID,
		})
	}
	if pu.mutation.ActualCurrencyUomIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: payment.FieldActualCurrencyUomID,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{payment.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// PaymentUpdateOne is the builder for updating a single Payment entity.
type PaymentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PaymentMutation
}

// SetPaymentTypeID sets the "payment_type_id" field.
func (puo *PaymentUpdateOne) SetPaymentTypeID(i int) *PaymentUpdateOne {
	puo.mutation.ResetPaymentTypeID()
	puo.mutation.SetPaymentTypeID(i)
	return puo
}

// SetNillablePaymentTypeID sets the "payment_type_id" field if the given value is not nil.
func (puo *PaymentUpdateOne) SetNillablePaymentTypeID(i *int) *PaymentUpdateOne {
	if i != nil {
		puo.SetPaymentTypeID(*i)
	}
	return puo
}

// AddPaymentTypeID adds i to the "payment_type_id" field.
func (puo *PaymentUpdateOne) AddPaymentTypeID(i int) *PaymentUpdateOne {
	puo.mutation.AddPaymentTypeID(i)
	return puo
}

// ClearPaymentTypeID clears the value of the "payment_type_id" field.
func (puo *PaymentUpdateOne) ClearPaymentTypeID() *PaymentUpdateOne {
	puo.mutation.ClearPaymentTypeID()
	return puo
}

// SetPaymentMethodTypeID sets the "payment_method_type_id" field.
func (puo *PaymentUpdateOne) SetPaymentMethodTypeID(i int) *PaymentUpdateOne {
	puo.mutation.ResetPaymentMethodTypeID()
	puo.mutation.SetPaymentMethodTypeID(i)
	return puo
}

// SetNillablePaymentMethodTypeID sets the "payment_method_type_id" field if the given value is not nil.
func (puo *PaymentUpdateOne) SetNillablePaymentMethodTypeID(i *int) *PaymentUpdateOne {
	if i != nil {
		puo.SetPaymentMethodTypeID(*i)
	}
	return puo
}

// AddPaymentMethodTypeID adds i to the "payment_method_type_id" field.
func (puo *PaymentUpdateOne) AddPaymentMethodTypeID(i int) *PaymentUpdateOne {
	puo.mutation.AddPaymentMethodTypeID(i)
	return puo
}

// ClearPaymentMethodTypeID clears the value of the "payment_method_type_id" field.
func (puo *PaymentUpdateOne) ClearPaymentMethodTypeID() *PaymentUpdateOne {
	puo.mutation.ClearPaymentMethodTypeID()
	return puo
}

// SetPaymentMethodID sets the "payment_method_id" field.
func (puo *PaymentUpdateOne) SetPaymentMethodID(i int) *PaymentUpdateOne {
	puo.mutation.ResetPaymentMethodID()
	puo.mutation.SetPaymentMethodID(i)
	return puo
}

// SetNillablePaymentMethodID sets the "payment_method_id" field if the given value is not nil.
func (puo *PaymentUpdateOne) SetNillablePaymentMethodID(i *int) *PaymentUpdateOne {
	if i != nil {
		puo.SetPaymentMethodID(*i)
	}
	return puo
}

// AddPaymentMethodID adds i to the "payment_method_id" field.
func (puo *PaymentUpdateOne) AddPaymentMethodID(i int) *PaymentUpdateOne {
	puo.mutation.AddPaymentMethodID(i)
	return puo
}

// ClearPaymentMethodID clears the value of the "payment_method_id" field.
func (puo *PaymentUpdateOne) ClearPaymentMethodID() *PaymentUpdateOne {
	puo.mutation.ClearPaymentMethodID()
	return puo
}

// SetPaymentGatewayResponseID sets the "payment_gateway_response_id" field.
func (puo *PaymentUpdateOne) SetPaymentGatewayResponseID(i int) *PaymentUpdateOne {
	puo.mutation.ResetPaymentGatewayResponseID()
	puo.mutation.SetPaymentGatewayResponseID(i)
	return puo
}

// SetNillablePaymentGatewayResponseID sets the "payment_gateway_response_id" field if the given value is not nil.
func (puo *PaymentUpdateOne) SetNillablePaymentGatewayResponseID(i *int) *PaymentUpdateOne {
	if i != nil {
		puo.SetPaymentGatewayResponseID(*i)
	}
	return puo
}

// AddPaymentGatewayResponseID adds i to the "payment_gateway_response_id" field.
func (puo *PaymentUpdateOne) AddPaymentGatewayResponseID(i int) *PaymentUpdateOne {
	puo.mutation.AddPaymentGatewayResponseID(i)
	return puo
}

// ClearPaymentGatewayResponseID clears the value of the "payment_gateway_response_id" field.
func (puo *PaymentUpdateOne) ClearPaymentGatewayResponseID() *PaymentUpdateOne {
	puo.mutation.ClearPaymentGatewayResponseID()
	return puo
}

// SetPaymentPreferenceID sets the "payment_preference_id" field.
func (puo *PaymentUpdateOne) SetPaymentPreferenceID(i int) *PaymentUpdateOne {
	puo.mutation.ResetPaymentPreferenceID()
	puo.mutation.SetPaymentPreferenceID(i)
	return puo
}

// SetNillablePaymentPreferenceID sets the "payment_preference_id" field if the given value is not nil.
func (puo *PaymentUpdateOne) SetNillablePaymentPreferenceID(i *int) *PaymentUpdateOne {
	if i != nil {
		puo.SetPaymentPreferenceID(*i)
	}
	return puo
}

// AddPaymentPreferenceID adds i to the "payment_preference_id" field.
func (puo *PaymentUpdateOne) AddPaymentPreferenceID(i int) *PaymentUpdateOne {
	puo.mutation.AddPaymentPreferenceID(i)
	return puo
}

// ClearPaymentPreferenceID clears the value of the "payment_preference_id" field.
func (puo *PaymentUpdateOne) ClearPaymentPreferenceID() *PaymentUpdateOne {
	puo.mutation.ClearPaymentPreferenceID()
	return puo
}

// SetPartyIDFrom sets the "party_id_from" field.
func (puo *PaymentUpdateOne) SetPartyIDFrom(i int) *PaymentUpdateOne {
	puo.mutation.ResetPartyIDFrom()
	puo.mutation.SetPartyIDFrom(i)
	return puo
}

// SetNillablePartyIDFrom sets the "party_id_from" field if the given value is not nil.
func (puo *PaymentUpdateOne) SetNillablePartyIDFrom(i *int) *PaymentUpdateOne {
	if i != nil {
		puo.SetPartyIDFrom(*i)
	}
	return puo
}

// AddPartyIDFrom adds i to the "party_id_from" field.
func (puo *PaymentUpdateOne) AddPartyIDFrom(i int) *PaymentUpdateOne {
	puo.mutation.AddPartyIDFrom(i)
	return puo
}

// ClearPartyIDFrom clears the value of the "party_id_from" field.
func (puo *PaymentUpdateOne) ClearPartyIDFrom() *PaymentUpdateOne {
	puo.mutation.ClearPartyIDFrom()
	return puo
}

// SetPartyIDTo sets the "party_id_to" field.
func (puo *PaymentUpdateOne) SetPartyIDTo(i int) *PaymentUpdateOne {
	puo.mutation.ResetPartyIDTo()
	puo.mutation.SetPartyIDTo(i)
	return puo
}

// SetNillablePartyIDTo sets the "party_id_to" field if the given value is not nil.
func (puo *PaymentUpdateOne) SetNillablePartyIDTo(i *int) *PaymentUpdateOne {
	if i != nil {
		puo.SetPartyIDTo(*i)
	}
	return puo
}

// AddPartyIDTo adds i to the "party_id_to" field.
func (puo *PaymentUpdateOne) AddPartyIDTo(i int) *PaymentUpdateOne {
	puo.mutation.AddPartyIDTo(i)
	return puo
}

// ClearPartyIDTo clears the value of the "party_id_to" field.
func (puo *PaymentUpdateOne) ClearPartyIDTo() *PaymentUpdateOne {
	puo.mutation.ClearPartyIDTo()
	return puo
}

// SetRoleTypeIDTo sets the "role_type_id_to" field.
func (puo *PaymentUpdateOne) SetRoleTypeIDTo(i int) *PaymentUpdateOne {
	puo.mutation.ResetRoleTypeIDTo()
	puo.mutation.SetRoleTypeIDTo(i)
	return puo
}

// SetNillableRoleTypeIDTo sets the "role_type_id_to" field if the given value is not nil.
func (puo *PaymentUpdateOne) SetNillableRoleTypeIDTo(i *int) *PaymentUpdateOne {
	if i != nil {
		puo.SetRoleTypeIDTo(*i)
	}
	return puo
}

// AddRoleTypeIDTo adds i to the "role_type_id_to" field.
func (puo *PaymentUpdateOne) AddRoleTypeIDTo(i int) *PaymentUpdateOne {
	puo.mutation.AddRoleTypeIDTo(i)
	return puo
}

// ClearRoleTypeIDTo clears the value of the "role_type_id_to" field.
func (puo *PaymentUpdateOne) ClearRoleTypeIDTo() *PaymentUpdateOne {
	puo.mutation.ClearRoleTypeIDTo()
	return puo
}

// SetStatusID sets the "status_id" field.
func (puo *PaymentUpdateOne) SetStatusID(i int) *PaymentUpdateOne {
	puo.mutation.ResetStatusID()
	puo.mutation.SetStatusID(i)
	return puo
}

// SetNillableStatusID sets the "status_id" field if the given value is not nil.
func (puo *PaymentUpdateOne) SetNillableStatusID(i *int) *PaymentUpdateOne {
	if i != nil {
		puo.SetStatusID(*i)
	}
	return puo
}

// AddStatusID adds i to the "status_id" field.
func (puo *PaymentUpdateOne) AddStatusID(i int) *PaymentUpdateOne {
	puo.mutation.AddStatusID(i)
	return puo
}

// ClearStatusID clears the value of the "status_id" field.
func (puo *PaymentUpdateOne) ClearStatusID() *PaymentUpdateOne {
	puo.mutation.ClearStatusID()
	return puo
}

// SetEffectiveDate sets the "effective_date" field.
func (puo *PaymentUpdateOne) SetEffectiveDate(t time.Time) *PaymentUpdateOne {
	puo.mutation.SetEffectiveDate(t)
	return puo
}

// SetNillableEffectiveDate sets the "effective_date" field if the given value is not nil.
func (puo *PaymentUpdateOne) SetNillableEffectiveDate(t *time.Time) *PaymentUpdateOne {
	if t != nil {
		puo.SetEffectiveDate(*t)
	}
	return puo
}

// ClearEffectiveDate clears the value of the "effective_date" field.
func (puo *PaymentUpdateOne) ClearEffectiveDate() *PaymentUpdateOne {
	puo.mutation.ClearEffectiveDate()
	return puo
}

// SetPaymentRefNum sets the "payment_ref_num" field.
func (puo *PaymentUpdateOne) SetPaymentRefNum(s string) *PaymentUpdateOne {
	puo.mutation.SetPaymentRefNum(s)
	return puo
}

// SetNillablePaymentRefNum sets the "payment_ref_num" field if the given value is not nil.
func (puo *PaymentUpdateOne) SetNillablePaymentRefNum(s *string) *PaymentUpdateOne {
	if s != nil {
		puo.SetPaymentRefNum(*s)
	}
	return puo
}

// ClearPaymentRefNum clears the value of the "payment_ref_num" field.
func (puo *PaymentUpdateOne) ClearPaymentRefNum() *PaymentUpdateOne {
	puo.mutation.ClearPaymentRefNum()
	return puo
}

// SetAmount sets the "amount" field.
func (puo *PaymentUpdateOne) SetAmount(f float64) *PaymentUpdateOne {
	puo.mutation.ResetAmount()
	puo.mutation.SetAmount(f)
	return puo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (puo *PaymentUpdateOne) SetNillableAmount(f *float64) *PaymentUpdateOne {
	if f != nil {
		puo.SetAmount(*f)
	}
	return puo
}

// AddAmount adds f to the "amount" field.
func (puo *PaymentUpdateOne) AddAmount(f float64) *PaymentUpdateOne {
	puo.mutation.AddAmount(f)
	return puo
}

// ClearAmount clears the value of the "amount" field.
func (puo *PaymentUpdateOne) ClearAmount() *PaymentUpdateOne {
	puo.mutation.ClearAmount()
	return puo
}

// SetCurrencyUomID sets the "currency_uom_id" field.
func (puo *PaymentUpdateOne) SetCurrencyUomID(i int) *PaymentUpdateOne {
	puo.mutation.ResetCurrencyUomID()
	puo.mutation.SetCurrencyUomID(i)
	return puo
}

// SetNillableCurrencyUomID sets the "currency_uom_id" field if the given value is not nil.
func (puo *PaymentUpdateOne) SetNillableCurrencyUomID(i *int) *PaymentUpdateOne {
	if i != nil {
		puo.SetCurrencyUomID(*i)
	}
	return puo
}

// AddCurrencyUomID adds i to the "currency_uom_id" field.
func (puo *PaymentUpdateOne) AddCurrencyUomID(i int) *PaymentUpdateOne {
	puo.mutation.AddCurrencyUomID(i)
	return puo
}

// ClearCurrencyUomID clears the value of the "currency_uom_id" field.
func (puo *PaymentUpdateOne) ClearCurrencyUomID() *PaymentUpdateOne {
	puo.mutation.ClearCurrencyUomID()
	return puo
}

// SetComments sets the "comments" field.
func (puo *PaymentUpdateOne) SetComments(s string) *PaymentUpdateOne {
	puo.mutation.SetComments(s)
	return puo
}

// SetNillableComments sets the "comments" field if the given value is not nil.
func (puo *PaymentUpdateOne) SetNillableComments(s *string) *PaymentUpdateOne {
	if s != nil {
		puo.SetComments(*s)
	}
	return puo
}

// ClearComments clears the value of the "comments" field.
func (puo *PaymentUpdateOne) ClearComments() *PaymentUpdateOne {
	puo.mutation.ClearComments()
	return puo
}

// SetFinAccountTransID sets the "fin_account_trans_id" field.
func (puo *PaymentUpdateOne) SetFinAccountTransID(i int) *PaymentUpdateOne {
	puo.mutation.ResetFinAccountTransID()
	puo.mutation.SetFinAccountTransID(i)
	return puo
}

// SetNillableFinAccountTransID sets the "fin_account_trans_id" field if the given value is not nil.
func (puo *PaymentUpdateOne) SetNillableFinAccountTransID(i *int) *PaymentUpdateOne {
	if i != nil {
		puo.SetFinAccountTransID(*i)
	}
	return puo
}

// AddFinAccountTransID adds i to the "fin_account_trans_id" field.
func (puo *PaymentUpdateOne) AddFinAccountTransID(i int) *PaymentUpdateOne {
	puo.mutation.AddFinAccountTransID(i)
	return puo
}

// ClearFinAccountTransID clears the value of the "fin_account_trans_id" field.
func (puo *PaymentUpdateOne) ClearFinAccountTransID() *PaymentUpdateOne {
	puo.mutation.ClearFinAccountTransID()
	return puo
}

// SetOverrideGlAccountID sets the "override_gl_account_id" field.
func (puo *PaymentUpdateOne) SetOverrideGlAccountID(i int) *PaymentUpdateOne {
	puo.mutation.ResetOverrideGlAccountID()
	puo.mutation.SetOverrideGlAccountID(i)
	return puo
}

// SetNillableOverrideGlAccountID sets the "override_gl_account_id" field if the given value is not nil.
func (puo *PaymentUpdateOne) SetNillableOverrideGlAccountID(i *int) *PaymentUpdateOne {
	if i != nil {
		puo.SetOverrideGlAccountID(*i)
	}
	return puo
}

// AddOverrideGlAccountID adds i to the "override_gl_account_id" field.
func (puo *PaymentUpdateOne) AddOverrideGlAccountID(i int) *PaymentUpdateOne {
	puo.mutation.AddOverrideGlAccountID(i)
	return puo
}

// ClearOverrideGlAccountID clears the value of the "override_gl_account_id" field.
func (puo *PaymentUpdateOne) ClearOverrideGlAccountID() *PaymentUpdateOne {
	puo.mutation.ClearOverrideGlAccountID()
	return puo
}

// SetActualCurrencyAmount sets the "actual_currency_amount" field.
func (puo *PaymentUpdateOne) SetActualCurrencyAmount(f float64) *PaymentUpdateOne {
	puo.mutation.ResetActualCurrencyAmount()
	puo.mutation.SetActualCurrencyAmount(f)
	return puo
}

// SetNillableActualCurrencyAmount sets the "actual_currency_amount" field if the given value is not nil.
func (puo *PaymentUpdateOne) SetNillableActualCurrencyAmount(f *float64) *PaymentUpdateOne {
	if f != nil {
		puo.SetActualCurrencyAmount(*f)
	}
	return puo
}

// AddActualCurrencyAmount adds f to the "actual_currency_amount" field.
func (puo *PaymentUpdateOne) AddActualCurrencyAmount(f float64) *PaymentUpdateOne {
	puo.mutation.AddActualCurrencyAmount(f)
	return puo
}

// ClearActualCurrencyAmount clears the value of the "actual_currency_amount" field.
func (puo *PaymentUpdateOne) ClearActualCurrencyAmount() *PaymentUpdateOne {
	puo.mutation.ClearActualCurrencyAmount()
	return puo
}

// SetActualCurrencyUomID sets the "actual_currency_uom_id" field.
func (puo *PaymentUpdateOne) SetActualCurrencyUomID(i int) *PaymentUpdateOne {
	puo.mutation.ResetActualCurrencyUomID()
	puo.mutation.SetActualCurrencyUomID(i)
	return puo
}

// SetNillableActualCurrencyUomID sets the "actual_currency_uom_id" field if the given value is not nil.
func (puo *PaymentUpdateOne) SetNillableActualCurrencyUomID(i *int) *PaymentUpdateOne {
	if i != nil {
		puo.SetActualCurrencyUomID(*i)
	}
	return puo
}

// AddActualCurrencyUomID adds i to the "actual_currency_uom_id" field.
func (puo *PaymentUpdateOne) AddActualCurrencyUomID(i int) *PaymentUpdateOne {
	puo.mutation.AddActualCurrencyUomID(i)
	return puo
}

// ClearActualCurrencyUomID clears the value of the "actual_currency_uom_id" field.
func (puo *PaymentUpdateOne) ClearActualCurrencyUomID() *PaymentUpdateOne {
	puo.mutation.ClearActualCurrencyUomID()
	return puo
}

// Mutation returns the PaymentMutation object of the builder.
func (puo *PaymentUpdateOne) Mutation() *PaymentMutation {
	return puo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PaymentUpdateOne) Select(field string, fields ...string) *PaymentUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Payment entity.
func (puo *PaymentUpdateOne) Save(ctx context.Context) (*Payment, error) {
	var (
		err  error
		node *Payment
	)
	puo.defaults()
	if len(puo.hooks) == 0 {
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PaymentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			mut = puo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, puo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PaymentUpdateOne) SaveX(ctx context.Context) *Payment {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PaymentUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PaymentUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *PaymentUpdateOne) defaults() {
	if _, ok := puo.mutation.UpdateTime(); !ok {
		v := payment.UpdateDefaultUpdateTime()
		puo.mutation.SetUpdateTime(v)
	}
}

func (puo *PaymentUpdateOne) sqlSave(ctx context.Context) (_node *Payment, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   payment.Table,
			Columns: payment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: payment.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Payment.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, payment.FieldID)
		for _, f := range fields {
			if !payment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != payment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: payment.FieldUpdateTime,
		})
	}
	if value, ok := puo.mutation.PaymentTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: payment.FieldPaymentTypeID,
		})
	}
	if value, ok := puo.mutation.AddedPaymentTypeID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: payment.FieldPaymentTypeID,
		})
	}
	if puo.mutation.PaymentTypeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: payment.FieldPaymentTypeID,
		})
	}
	if value, ok := puo.mutation.PaymentMethodTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: payment.FieldPaymentMethodTypeID,
		})
	}
	if value, ok := puo.mutation.AddedPaymentMethodTypeID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: payment.FieldPaymentMethodTypeID,
		})
	}
	if puo.mutation.PaymentMethodTypeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: payment.FieldPaymentMethodTypeID,
		})
	}
	if value, ok := puo.mutation.PaymentMethodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: payment.FieldPaymentMethodID,
		})
	}
	if value, ok := puo.mutation.AddedPaymentMethodID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: payment.FieldPaymentMethodID,
		})
	}
	if puo.mutation.PaymentMethodIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: payment.FieldPaymentMethodID,
		})
	}
	if value, ok := puo.mutation.PaymentGatewayResponseID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: payment.FieldPaymentGatewayResponseID,
		})
	}
	if value, ok := puo.mutation.AddedPaymentGatewayResponseID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: payment.FieldPaymentGatewayResponseID,
		})
	}
	if puo.mutation.PaymentGatewayResponseIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: payment.FieldPaymentGatewayResponseID,
		})
	}
	if value, ok := puo.mutation.PaymentPreferenceID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: payment.FieldPaymentPreferenceID,
		})
	}
	if value, ok := puo.mutation.AddedPaymentPreferenceID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: payment.FieldPaymentPreferenceID,
		})
	}
	if puo.mutation.PaymentPreferenceIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: payment.FieldPaymentPreferenceID,
		})
	}
	if value, ok := puo.mutation.PartyIDFrom(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: payment.FieldPartyIDFrom,
		})
	}
	if value, ok := puo.mutation.AddedPartyIDFrom(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: payment.FieldPartyIDFrom,
		})
	}
	if puo.mutation.PartyIDFromCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: payment.FieldPartyIDFrom,
		})
	}
	if value, ok := puo.mutation.PartyIDTo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: payment.FieldPartyIDTo,
		})
	}
	if value, ok := puo.mutation.AddedPartyIDTo(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: payment.FieldPartyIDTo,
		})
	}
	if puo.mutation.PartyIDToCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: payment.FieldPartyIDTo,
		})
	}
	if value, ok := puo.mutation.RoleTypeIDTo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: payment.FieldRoleTypeIDTo,
		})
	}
	if value, ok := puo.mutation.AddedRoleTypeIDTo(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: payment.FieldRoleTypeIDTo,
		})
	}
	if puo.mutation.RoleTypeIDToCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: payment.FieldRoleTypeIDTo,
		})
	}
	if value, ok := puo.mutation.StatusID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: payment.FieldStatusID,
		})
	}
	if value, ok := puo.mutation.AddedStatusID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: payment.FieldStatusID,
		})
	}
	if puo.mutation.StatusIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: payment.FieldStatusID,
		})
	}
	if value, ok := puo.mutation.EffectiveDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: payment.FieldEffectiveDate,
		})
	}
	if puo.mutation.EffectiveDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: payment.FieldEffectiveDate,
		})
	}
	if value, ok := puo.mutation.PaymentRefNum(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: payment.FieldPaymentRefNum,
		})
	}
	if puo.mutation.PaymentRefNumCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: payment.FieldPaymentRefNum,
		})
	}
	if value, ok := puo.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: payment.FieldAmount,
		})
	}
	if value, ok := puo.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: payment.FieldAmount,
		})
	}
	if puo.mutation.AmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: payment.FieldAmount,
		})
	}
	if value, ok := puo.mutation.CurrencyUomID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: payment.FieldCurrencyUomID,
		})
	}
	if value, ok := puo.mutation.AddedCurrencyUomID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: payment.FieldCurrencyUomID,
		})
	}
	if puo.mutation.CurrencyUomIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: payment.FieldCurrencyUomID,
		})
	}
	if value, ok := puo.mutation.Comments(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: payment.FieldComments,
		})
	}
	if puo.mutation.CommentsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: payment.FieldComments,
		})
	}
	if value, ok := puo.mutation.FinAccountTransID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: payment.FieldFinAccountTransID,
		})
	}
	if value, ok := puo.mutation.AddedFinAccountTransID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: payment.FieldFinAccountTransID,
		})
	}
	if puo.mutation.FinAccountTransIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: payment.FieldFinAccountTransID,
		})
	}
	if value, ok := puo.mutation.OverrideGlAccountID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: payment.FieldOverrideGlAccountID,
		})
	}
	if value, ok := puo.mutation.AddedOverrideGlAccountID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: payment.FieldOverrideGlAccountID,
		})
	}
	if puo.mutation.OverrideGlAccountIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: payment.FieldOverrideGlAccountID,
		})
	}
	if value, ok := puo.mutation.ActualCurrencyAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: payment.FieldActualCurrencyAmount,
		})
	}
	if value, ok := puo.mutation.AddedActualCurrencyAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: payment.FieldActualCurrencyAmount,
		})
	}
	if puo.mutation.ActualCurrencyAmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: payment.FieldActualCurrencyAmount,
		})
	}
	if value, ok := puo.mutation.ActualCurrencyUomID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: payment.FieldActualCurrencyUomID,
		})
	}
	if value, ok := puo.mutation.AddedActualCurrencyUomID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: payment.FieldActualCurrencyUomID,
		})
	}
	if puo.mutation.ActualCurrencyUomIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: payment.FieldActualCurrencyUomID,
		})
	}
	_node = &Payment{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{payment.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
