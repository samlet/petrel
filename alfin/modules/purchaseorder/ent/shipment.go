// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/orderheader"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/orderitemshipgroup"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/shipment"
)

// Shipment is the model entity for the Shipment schema.
type Shipment struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// ShipmentTypeID holds the value of the "shipment_type_id" field.
	ShipmentTypeID int `json:"shipment_type_id,omitempty"`
	// StatusID holds the value of the "status_id" field.
	StatusID int `json:"status_id,omitempty"`
	// PrimaryReturnID holds the value of the "primary_return_id" field.
	PrimaryReturnID int `json:"primary_return_id,omitempty"`
	// PrimaryShipGroupSeqID holds the value of the "primary_ship_group_seq_id" field.
	PrimaryShipGroupSeqID int `json:"primary_ship_group_seq_id,omitempty"`
	// PicklistBinID holds the value of the "picklist_bin_id" field.
	PicklistBinID int `json:"picklist_bin_id,omitempty"`
	// EstimatedReadyDate holds the value of the "estimated_ready_date" field.
	EstimatedReadyDate time.Time `json:"estimated_ready_date,omitempty"`
	// EstimatedShipDate holds the value of the "estimated_ship_date" field.
	EstimatedShipDate time.Time `json:"estimated_ship_date,omitempty"`
	// EstimatedShipWorkEffID holds the value of the "estimated_ship_work_eff_id" field.
	EstimatedShipWorkEffID int `json:"estimated_ship_work_eff_id,omitempty"`
	// EstimatedArrivalDate holds the value of the "estimated_arrival_date" field.
	EstimatedArrivalDate time.Time `json:"estimated_arrival_date,omitempty"`
	// EstimatedArrivalWorkEffID holds the value of the "estimated_arrival_work_eff_id" field.
	EstimatedArrivalWorkEffID int `json:"estimated_arrival_work_eff_id,omitempty"`
	// LatestCancelDate holds the value of the "latest_cancel_date" field.
	LatestCancelDate time.Time `json:"latest_cancel_date,omitempty"`
	// EstimatedShipCost holds the value of the "estimated_ship_cost" field.
	EstimatedShipCost float64 `json:"estimated_ship_cost,omitempty"`
	// CurrencyUomID holds the value of the "currency_uom_id" field.
	CurrencyUomID int `json:"currency_uom_id,omitempty"`
	// HandlingInstructions holds the value of the "handling_instructions" field.
	HandlingInstructions string `json:"handling_instructions,omitempty"`
	// OriginFacilityID holds the value of the "origin_facility_id" field.
	OriginFacilityID int `json:"origin_facility_id,omitempty"`
	// DestinationFacilityID holds the value of the "destination_facility_id" field.
	DestinationFacilityID int `json:"destination_facility_id,omitempty"`
	// OriginContactMechID holds the value of the "origin_contact_mech_id" field.
	OriginContactMechID int `json:"origin_contact_mech_id,omitempty"`
	// OriginTelecomNumberID holds the value of the "origin_telecom_number_id" field.
	OriginTelecomNumberID int `json:"origin_telecom_number_id,omitempty"`
	// DestinationContactMechID holds the value of the "destination_contact_mech_id" field.
	DestinationContactMechID int `json:"destination_contact_mech_id,omitempty"`
	// DestinationTelecomNumberID holds the value of the "destination_telecom_number_id" field.
	DestinationTelecomNumberID int `json:"destination_telecom_number_id,omitempty"`
	// PartyIDTo holds the value of the "party_id_to" field.
	PartyIDTo int `json:"party_id_to,omitempty"`
	// PartyIDFrom holds the value of the "party_id_from" field.
	PartyIDFrom int `json:"party_id_from,omitempty"`
	// AdditionalShippingCharge holds the value of the "additional_shipping_charge" field.
	AdditionalShippingCharge float64 `json:"additional_shipping_charge,omitempty"`
	// AddtlShippingChargeDesc holds the value of the "addtl_shipping_charge_desc" field.
	AddtlShippingChargeDesc string `json:"addtl_shipping_charge_desc,omitempty"`
	// CreatedDate holds the value of the "created_date" field.
	CreatedDate time.Time `json:"created_date,omitempty"`
	// CreatedByUserLogin holds the value of the "created_by_user_login" field.
	CreatedByUserLogin string `json:"created_by_user_login,omitempty"`
	// LastModifiedDate holds the value of the "last_modified_date" field.
	LastModifiedDate time.Time `json:"last_modified_date,omitempty"`
	// LastModifiedByUserLogin holds the value of the "last_modified_by_user_login" field.
	LastModifiedByUserLogin string `json:"last_modified_by_user_login,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ShipmentQuery when eager-loading is set.
	Edges                                   ShipmentEdges `json:"edges"`
	order_header_primary_shipments          *int
	order_item_ship_group_primary_shipments *int
}

// ShipmentEdges holds the relations/edges for other nodes in the graph.
type ShipmentEdges struct {
	// PrimaryOrderHeader holds the value of the primary_order_header edge.
	PrimaryOrderHeader *OrderHeader `json:"primary_order_header,omitempty"`
	// PrimaryOrderItemShipGroup holds the value of the primary_order_item_ship_group edge.
	PrimaryOrderItemShipGroup *OrderItemShipGroup `json:"primary_order_item_ship_group,omitempty"`
	// ItemIssuances holds the value of the item_issuances edge.
	ItemIssuances []*ItemIssuance `json:"item_issuances,omitempty"`
	// ShipmentItems holds the value of the shipment_items edge.
	ShipmentItems []*ShipmentItem `json:"shipment_items,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// PrimaryOrderHeaderOrErr returns the PrimaryOrderHeader value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ShipmentEdges) PrimaryOrderHeaderOrErr() (*OrderHeader, error) {
	if e.loadedTypes[0] {
		if e.PrimaryOrderHeader == nil {
			// The edge primary_order_header was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: orderheader.Label}
		}
		return e.PrimaryOrderHeader, nil
	}
	return nil, &NotLoadedError{edge: "primary_order_header"}
}

// PrimaryOrderItemShipGroupOrErr returns the PrimaryOrderItemShipGroup value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ShipmentEdges) PrimaryOrderItemShipGroupOrErr() (*OrderItemShipGroup, error) {
	if e.loadedTypes[1] {
		if e.PrimaryOrderItemShipGroup == nil {
			// The edge primary_order_item_ship_group was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: orderitemshipgroup.Label}
		}
		return e.PrimaryOrderItemShipGroup, nil
	}
	return nil, &NotLoadedError{edge: "primary_order_item_ship_group"}
}

// ItemIssuancesOrErr returns the ItemIssuances value or an error if the edge
// was not loaded in eager-loading.
func (e ShipmentEdges) ItemIssuancesOrErr() ([]*ItemIssuance, error) {
	if e.loadedTypes[2] {
		return e.ItemIssuances, nil
	}
	return nil, &NotLoadedError{edge: "item_issuances"}
}

// ShipmentItemsOrErr returns the ShipmentItems value or an error if the edge
// was not loaded in eager-loading.
func (e ShipmentEdges) ShipmentItemsOrErr() ([]*ShipmentItem, error) {
	if e.loadedTypes[3] {
		return e.ShipmentItems, nil
	}
	return nil, &NotLoadedError{edge: "shipment_items"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Shipment) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case shipment.FieldEstimatedShipCost, shipment.FieldAdditionalShippingCharge:
			values[i] = new(sql.NullFloat64)
		case shipment.FieldID, shipment.FieldShipmentTypeID, shipment.FieldStatusID, shipment.FieldPrimaryReturnID, shipment.FieldPrimaryShipGroupSeqID, shipment.FieldPicklistBinID, shipment.FieldEstimatedShipWorkEffID, shipment.FieldEstimatedArrivalWorkEffID, shipment.FieldCurrencyUomID, shipment.FieldOriginFacilityID, shipment.FieldDestinationFacilityID, shipment.FieldOriginContactMechID, shipment.FieldOriginTelecomNumberID, shipment.FieldDestinationContactMechID, shipment.FieldDestinationTelecomNumberID, shipment.FieldPartyIDTo, shipment.FieldPartyIDFrom:
			values[i] = new(sql.NullInt64)
		case shipment.FieldHandlingInstructions, shipment.FieldAddtlShippingChargeDesc, shipment.FieldCreatedByUserLogin, shipment.FieldLastModifiedByUserLogin:
			values[i] = new(sql.NullString)
		case shipment.FieldCreateTime, shipment.FieldUpdateTime, shipment.FieldEstimatedReadyDate, shipment.FieldEstimatedShipDate, shipment.FieldEstimatedArrivalDate, shipment.FieldLatestCancelDate, shipment.FieldCreatedDate, shipment.FieldLastModifiedDate:
			values[i] = new(sql.NullTime)
		case shipment.ForeignKeys[0]: // order_header_primary_shipments
			values[i] = new(sql.NullInt64)
		case shipment.ForeignKeys[1]: // order_item_ship_group_primary_shipments
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Shipment", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Shipment fields.
func (s *Shipment) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case shipment.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case shipment.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				s.CreateTime = value.Time
			}
		case shipment.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				s.UpdateTime = value.Time
			}
		case shipment.FieldShipmentTypeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field shipment_type_id", values[i])
			} else if value.Valid {
				s.ShipmentTypeID = int(value.Int64)
			}
		case shipment.FieldStatusID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status_id", values[i])
			} else if value.Valid {
				s.StatusID = int(value.Int64)
			}
		case shipment.FieldPrimaryReturnID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field primary_return_id", values[i])
			} else if value.Valid {
				s.PrimaryReturnID = int(value.Int64)
			}
		case shipment.FieldPrimaryShipGroupSeqID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field primary_ship_group_seq_id", values[i])
			} else if value.Valid {
				s.PrimaryShipGroupSeqID = int(value.Int64)
			}
		case shipment.FieldPicklistBinID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field picklist_bin_id", values[i])
			} else if value.Valid {
				s.PicklistBinID = int(value.Int64)
			}
		case shipment.FieldEstimatedReadyDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field estimated_ready_date", values[i])
			} else if value.Valid {
				s.EstimatedReadyDate = value.Time
			}
		case shipment.FieldEstimatedShipDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field estimated_ship_date", values[i])
			} else if value.Valid {
				s.EstimatedShipDate = value.Time
			}
		case shipment.FieldEstimatedShipWorkEffID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field estimated_ship_work_eff_id", values[i])
			} else if value.Valid {
				s.EstimatedShipWorkEffID = int(value.Int64)
			}
		case shipment.FieldEstimatedArrivalDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field estimated_arrival_date", values[i])
			} else if value.Valid {
				s.EstimatedArrivalDate = value.Time
			}
		case shipment.FieldEstimatedArrivalWorkEffID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field estimated_arrival_work_eff_id", values[i])
			} else if value.Valid {
				s.EstimatedArrivalWorkEffID = int(value.Int64)
			}
		case shipment.FieldLatestCancelDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field latest_cancel_date", values[i])
			} else if value.Valid {
				s.LatestCancelDate = value.Time
			}
		case shipment.FieldEstimatedShipCost:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field estimated_ship_cost", values[i])
			} else if value.Valid {
				s.EstimatedShipCost = value.Float64
			}
		case shipment.FieldCurrencyUomID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field currency_uom_id", values[i])
			} else if value.Valid {
				s.CurrencyUomID = int(value.Int64)
			}
		case shipment.FieldHandlingInstructions:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field handling_instructions", values[i])
			} else if value.Valid {
				s.HandlingInstructions = value.String
			}
		case shipment.FieldOriginFacilityID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field origin_facility_id", values[i])
			} else if value.Valid {
				s.OriginFacilityID = int(value.Int64)
			}
		case shipment.FieldDestinationFacilityID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field destination_facility_id", values[i])
			} else if value.Valid {
				s.DestinationFacilityID = int(value.Int64)
			}
		case shipment.FieldOriginContactMechID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field origin_contact_mech_id", values[i])
			} else if value.Valid {
				s.OriginContactMechID = int(value.Int64)
			}
		case shipment.FieldOriginTelecomNumberID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field origin_telecom_number_id", values[i])
			} else if value.Valid {
				s.OriginTelecomNumberID = int(value.Int64)
			}
		case shipment.FieldDestinationContactMechID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field destination_contact_mech_id", values[i])
			} else if value.Valid {
				s.DestinationContactMechID = int(value.Int64)
			}
		case shipment.FieldDestinationTelecomNumberID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field destination_telecom_number_id", values[i])
			} else if value.Valid {
				s.DestinationTelecomNumberID = int(value.Int64)
			}
		case shipment.FieldPartyIDTo:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field party_id_to", values[i])
			} else if value.Valid {
				s.PartyIDTo = int(value.Int64)
			}
		case shipment.FieldPartyIDFrom:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field party_id_from", values[i])
			} else if value.Valid {
				s.PartyIDFrom = int(value.Int64)
			}
		case shipment.FieldAdditionalShippingCharge:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field additional_shipping_charge", values[i])
			} else if value.Valid {
				s.AdditionalShippingCharge = value.Float64
			}
		case shipment.FieldAddtlShippingChargeDesc:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field addtl_shipping_charge_desc", values[i])
			} else if value.Valid {
				s.AddtlShippingChargeDesc = value.String
			}
		case shipment.FieldCreatedDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_date", values[i])
			} else if value.Valid {
				s.CreatedDate = value.Time
			}
		case shipment.FieldCreatedByUserLogin:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by_user_login", values[i])
			} else if value.Valid {
				s.CreatedByUserLogin = value.String
			}
		case shipment.FieldLastModifiedDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_modified_date", values[i])
			} else if value.Valid {
				s.LastModifiedDate = value.Time
			}
		case shipment.FieldLastModifiedByUserLogin:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_modified_by_user_login", values[i])
			} else if value.Valid {
				s.LastModifiedByUserLogin = value.String
			}
		case shipment.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field order_header_primary_shipments", value)
			} else if value.Valid {
				s.order_header_primary_shipments = new(int)
				*s.order_header_primary_shipments = int(value.Int64)
			}
		case shipment.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field order_item_ship_group_primary_shipments", value)
			} else if value.Valid {
				s.order_item_ship_group_primary_shipments = new(int)
				*s.order_item_ship_group_primary_shipments = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryPrimaryOrderHeader queries the "primary_order_header" edge of the Shipment entity.
func (s *Shipment) QueryPrimaryOrderHeader() *OrderHeaderQuery {
	return (&ShipmentClient{config: s.config}).QueryPrimaryOrderHeader(s)
}

// QueryPrimaryOrderItemShipGroup queries the "primary_order_item_ship_group" edge of the Shipment entity.
func (s *Shipment) QueryPrimaryOrderItemShipGroup() *OrderItemShipGroupQuery {
	return (&ShipmentClient{config: s.config}).QueryPrimaryOrderItemShipGroup(s)
}

// QueryItemIssuances queries the "item_issuances" edge of the Shipment entity.
func (s *Shipment) QueryItemIssuances() *ItemIssuanceQuery {
	return (&ShipmentClient{config: s.config}).QueryItemIssuances(s)
}

// QueryShipmentItems queries the "shipment_items" edge of the Shipment entity.
func (s *Shipment) QueryShipmentItems() *ShipmentItemQuery {
	return (&ShipmentClient{config: s.config}).QueryShipmentItems(s)
}

// Update returns a builder for updating this Shipment.
// Note that you need to call Shipment.Unwrap() before calling this method if this Shipment
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Shipment) Update() *ShipmentUpdateOne {
	return (&ShipmentClient{config: s.config}).UpdateOne(s)
}

// Unwrap unwraps the Shipment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Shipment) Unwrap() *Shipment {
	tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Shipment is not a transactional entity")
	}
	s.config.driver = tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Shipment) String() string {
	var builder strings.Builder
	builder.WriteString("Shipment(")
	builder.WriteString(fmt.Sprintf("id=%v", s.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(s.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(s.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", shipment_type_id=")
	builder.WriteString(fmt.Sprintf("%v", s.ShipmentTypeID))
	builder.WriteString(", status_id=")
	builder.WriteString(fmt.Sprintf("%v", s.StatusID))
	builder.WriteString(", primary_return_id=")
	builder.WriteString(fmt.Sprintf("%v", s.PrimaryReturnID))
	builder.WriteString(", primary_ship_group_seq_id=")
	builder.WriteString(fmt.Sprintf("%v", s.PrimaryShipGroupSeqID))
	builder.WriteString(", picklist_bin_id=")
	builder.WriteString(fmt.Sprintf("%v", s.PicklistBinID))
	builder.WriteString(", estimated_ready_date=")
	builder.WriteString(s.EstimatedReadyDate.Format(time.ANSIC))
	builder.WriteString(", estimated_ship_date=")
	builder.WriteString(s.EstimatedShipDate.Format(time.ANSIC))
	builder.WriteString(", estimated_ship_work_eff_id=")
	builder.WriteString(fmt.Sprintf("%v", s.EstimatedShipWorkEffID))
	builder.WriteString(", estimated_arrival_date=")
	builder.WriteString(s.EstimatedArrivalDate.Format(time.ANSIC))
	builder.WriteString(", estimated_arrival_work_eff_id=")
	builder.WriteString(fmt.Sprintf("%v", s.EstimatedArrivalWorkEffID))
	builder.WriteString(", latest_cancel_date=")
	builder.WriteString(s.LatestCancelDate.Format(time.ANSIC))
	builder.WriteString(", estimated_ship_cost=")
	builder.WriteString(fmt.Sprintf("%v", s.EstimatedShipCost))
	builder.WriteString(", currency_uom_id=")
	builder.WriteString(fmt.Sprintf("%v", s.CurrencyUomID))
	builder.WriteString(", handling_instructions=")
	builder.WriteString(s.HandlingInstructions)
	builder.WriteString(", origin_facility_id=")
	builder.WriteString(fmt.Sprintf("%v", s.OriginFacilityID))
	builder.WriteString(", destination_facility_id=")
	builder.WriteString(fmt.Sprintf("%v", s.DestinationFacilityID))
	builder.WriteString(", origin_contact_mech_id=")
	builder.WriteString(fmt.Sprintf("%v", s.OriginContactMechID))
	builder.WriteString(", origin_telecom_number_id=")
	builder.WriteString(fmt.Sprintf("%v", s.OriginTelecomNumberID))
	builder.WriteString(", destination_contact_mech_id=")
	builder.WriteString(fmt.Sprintf("%v", s.DestinationContactMechID))
	builder.WriteString(", destination_telecom_number_id=")
	builder.WriteString(fmt.Sprintf("%v", s.DestinationTelecomNumberID))
	builder.WriteString(", party_id_to=")
	builder.WriteString(fmt.Sprintf("%v", s.PartyIDTo))
	builder.WriteString(", party_id_from=")
	builder.WriteString(fmt.Sprintf("%v", s.PartyIDFrom))
	builder.WriteString(", additional_shipping_charge=")
	builder.WriteString(fmt.Sprintf("%v", s.AdditionalShippingCharge))
	builder.WriteString(", addtl_shipping_charge_desc=")
	builder.WriteString(s.AddtlShippingChargeDesc)
	builder.WriteString(", created_date=")
	builder.WriteString(s.CreatedDate.Format(time.ANSIC))
	builder.WriteString(", created_by_user_login=")
	builder.WriteString(s.CreatedByUserLogin)
	builder.WriteString(", last_modified_date=")
	builder.WriteString(s.LastModifiedDate.Format(time.ANSIC))
	builder.WriteString(", last_modified_by_user_login=")
	builder.WriteString(s.LastModifiedByUserLogin)
	builder.WriteByte(')')
	return builder.String()
}

// Shipments is a parsable slice of Shipment.
type Shipments []*Shipment

func (s Shipments) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
