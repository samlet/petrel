// Code generated by entc, DO NOT EDIT.

package shipment

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// ShipmentTypeID applies equality check predicate on the "shipment_type_id" field. It's identical to ShipmentTypeIDEQ.
func ShipmentTypeID(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShipmentTypeID), v))
	})
}

// StatusID applies equality check predicate on the "status_id" field. It's identical to StatusIDEQ.
func StatusID(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatusID), v))
	})
}

// PrimaryReturnID applies equality check predicate on the "primary_return_id" field. It's identical to PrimaryReturnIDEQ.
func PrimaryReturnID(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrimaryReturnID), v))
	})
}

// PrimaryShipGroupSeqID applies equality check predicate on the "primary_ship_group_seq_id" field. It's identical to PrimaryShipGroupSeqIDEQ.
func PrimaryShipGroupSeqID(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrimaryShipGroupSeqID), v))
	})
}

// PicklistBinID applies equality check predicate on the "picklist_bin_id" field. It's identical to PicklistBinIDEQ.
func PicklistBinID(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPicklistBinID), v))
	})
}

// EstimatedReadyDate applies equality check predicate on the "estimated_ready_date" field. It's identical to EstimatedReadyDateEQ.
func EstimatedReadyDate(v time.Time) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEstimatedReadyDate), v))
	})
}

// EstimatedShipDate applies equality check predicate on the "estimated_ship_date" field. It's identical to EstimatedShipDateEQ.
func EstimatedShipDate(v time.Time) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEstimatedShipDate), v))
	})
}

// EstimatedShipWorkEffID applies equality check predicate on the "estimated_ship_work_eff_id" field. It's identical to EstimatedShipWorkEffIDEQ.
func EstimatedShipWorkEffID(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEstimatedShipWorkEffID), v))
	})
}

// EstimatedArrivalDate applies equality check predicate on the "estimated_arrival_date" field. It's identical to EstimatedArrivalDateEQ.
func EstimatedArrivalDate(v time.Time) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEstimatedArrivalDate), v))
	})
}

// EstimatedArrivalWorkEffID applies equality check predicate on the "estimated_arrival_work_eff_id" field. It's identical to EstimatedArrivalWorkEffIDEQ.
func EstimatedArrivalWorkEffID(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEstimatedArrivalWorkEffID), v))
	})
}

// LatestCancelDate applies equality check predicate on the "latest_cancel_date" field. It's identical to LatestCancelDateEQ.
func LatestCancelDate(v time.Time) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLatestCancelDate), v))
	})
}

// EstimatedShipCost applies equality check predicate on the "estimated_ship_cost" field. It's identical to EstimatedShipCostEQ.
func EstimatedShipCost(v float64) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEstimatedShipCost), v))
	})
}

// CurrencyUomID applies equality check predicate on the "currency_uom_id" field. It's identical to CurrencyUomIDEQ.
func CurrencyUomID(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCurrencyUomID), v))
	})
}

// HandlingInstructions applies equality check predicate on the "handling_instructions" field. It's identical to HandlingInstructionsEQ.
func HandlingInstructions(v string) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHandlingInstructions), v))
	})
}

// OriginFacilityID applies equality check predicate on the "origin_facility_id" field. It's identical to OriginFacilityIDEQ.
func OriginFacilityID(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOriginFacilityID), v))
	})
}

// DestinationFacilityID applies equality check predicate on the "destination_facility_id" field. It's identical to DestinationFacilityIDEQ.
func DestinationFacilityID(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDestinationFacilityID), v))
	})
}

// OriginContactMechID applies equality check predicate on the "origin_contact_mech_id" field. It's identical to OriginContactMechIDEQ.
func OriginContactMechID(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOriginContactMechID), v))
	})
}

// OriginTelecomNumberID applies equality check predicate on the "origin_telecom_number_id" field. It's identical to OriginTelecomNumberIDEQ.
func OriginTelecomNumberID(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOriginTelecomNumberID), v))
	})
}

// DestinationContactMechID applies equality check predicate on the "destination_contact_mech_id" field. It's identical to DestinationContactMechIDEQ.
func DestinationContactMechID(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDestinationContactMechID), v))
	})
}

// DestinationTelecomNumberID applies equality check predicate on the "destination_telecom_number_id" field. It's identical to DestinationTelecomNumberIDEQ.
func DestinationTelecomNumberID(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDestinationTelecomNumberID), v))
	})
}

// PartyIDTo applies equality check predicate on the "party_id_to" field. It's identical to PartyIDToEQ.
func PartyIDTo(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPartyIDTo), v))
	})
}

// PartyIDFrom applies equality check predicate on the "party_id_from" field. It's identical to PartyIDFromEQ.
func PartyIDFrom(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPartyIDFrom), v))
	})
}

// AdditionalShippingCharge applies equality check predicate on the "additional_shipping_charge" field. It's identical to AdditionalShippingChargeEQ.
func AdditionalShippingCharge(v float64) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAdditionalShippingCharge), v))
	})
}

// AddtlShippingChargeDesc applies equality check predicate on the "addtl_shipping_charge_desc" field. It's identical to AddtlShippingChargeDescEQ.
func AddtlShippingChargeDesc(v string) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAddtlShippingChargeDesc), v))
	})
}

// CreatedDate applies equality check predicate on the "created_date" field. It's identical to CreatedDateEQ.
func CreatedDate(v time.Time) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedDate), v))
	})
}

// CreatedByUserLogin applies equality check predicate on the "created_by_user_login" field. It's identical to CreatedByUserLoginEQ.
func CreatedByUserLogin(v string) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedByUserLogin), v))
	})
}

// LastModifiedDate applies equality check predicate on the "last_modified_date" field. It's identical to LastModifiedDateEQ.
func LastModifiedDate(v time.Time) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastModifiedDate), v))
	})
}

// LastModifiedByUserLogin applies equality check predicate on the "last_modified_by_user_login" field. It's identical to LastModifiedByUserLoginEQ.
func LastModifiedByUserLogin(v string) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastModifiedByUserLogin), v))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.Shipment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shipment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.Shipment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shipment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), v))
	})
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.Shipment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shipment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.Shipment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shipment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateTime), v))
	})
}

// ShipmentTypeIDEQ applies the EQ predicate on the "shipment_type_id" field.
func ShipmentTypeIDEQ(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShipmentTypeID), v))
	})
}

// ShipmentTypeIDNEQ applies the NEQ predicate on the "shipment_type_id" field.
func ShipmentTypeIDNEQ(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShipmentTypeID), v))
	})
}

// ShipmentTypeIDIn applies the In predicate on the "shipment_type_id" field.
func ShipmentTypeIDIn(vs ...int) predicate.Shipment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shipment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldShipmentTypeID), v...))
	})
}

// ShipmentTypeIDNotIn applies the NotIn predicate on the "shipment_type_id" field.
func ShipmentTypeIDNotIn(vs ...int) predicate.Shipment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shipment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldShipmentTypeID), v...))
	})
}

// ShipmentTypeIDGT applies the GT predicate on the "shipment_type_id" field.
func ShipmentTypeIDGT(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShipmentTypeID), v))
	})
}

// ShipmentTypeIDGTE applies the GTE predicate on the "shipment_type_id" field.
func ShipmentTypeIDGTE(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShipmentTypeID), v))
	})
}

// ShipmentTypeIDLT applies the LT predicate on the "shipment_type_id" field.
func ShipmentTypeIDLT(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShipmentTypeID), v))
	})
}

// ShipmentTypeIDLTE applies the LTE predicate on the "shipment_type_id" field.
func ShipmentTypeIDLTE(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShipmentTypeID), v))
	})
}

// ShipmentTypeIDIsNil applies the IsNil predicate on the "shipment_type_id" field.
func ShipmentTypeIDIsNil() predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldShipmentTypeID)))
	})
}

// ShipmentTypeIDNotNil applies the NotNil predicate on the "shipment_type_id" field.
func ShipmentTypeIDNotNil() predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldShipmentTypeID)))
	})
}

// StatusIDEQ applies the EQ predicate on the "status_id" field.
func StatusIDEQ(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatusID), v))
	})
}

// StatusIDNEQ applies the NEQ predicate on the "status_id" field.
func StatusIDNEQ(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatusID), v))
	})
}

// StatusIDIn applies the In predicate on the "status_id" field.
func StatusIDIn(vs ...int) predicate.Shipment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shipment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStatusID), v...))
	})
}

// StatusIDNotIn applies the NotIn predicate on the "status_id" field.
func StatusIDNotIn(vs ...int) predicate.Shipment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shipment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStatusID), v...))
	})
}

// StatusIDGT applies the GT predicate on the "status_id" field.
func StatusIDGT(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatusID), v))
	})
}

// StatusIDGTE applies the GTE predicate on the "status_id" field.
func StatusIDGTE(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatusID), v))
	})
}

// StatusIDLT applies the LT predicate on the "status_id" field.
func StatusIDLT(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatusID), v))
	})
}

// StatusIDLTE applies the LTE predicate on the "status_id" field.
func StatusIDLTE(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatusID), v))
	})
}

// StatusIDIsNil applies the IsNil predicate on the "status_id" field.
func StatusIDIsNil() predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStatusID)))
	})
}

// StatusIDNotNil applies the NotNil predicate on the "status_id" field.
func StatusIDNotNil() predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStatusID)))
	})
}

// PrimaryReturnIDEQ applies the EQ predicate on the "primary_return_id" field.
func PrimaryReturnIDEQ(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrimaryReturnID), v))
	})
}

// PrimaryReturnIDNEQ applies the NEQ predicate on the "primary_return_id" field.
func PrimaryReturnIDNEQ(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPrimaryReturnID), v))
	})
}

// PrimaryReturnIDIn applies the In predicate on the "primary_return_id" field.
func PrimaryReturnIDIn(vs ...int) predicate.Shipment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shipment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPrimaryReturnID), v...))
	})
}

// PrimaryReturnIDNotIn applies the NotIn predicate on the "primary_return_id" field.
func PrimaryReturnIDNotIn(vs ...int) predicate.Shipment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shipment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPrimaryReturnID), v...))
	})
}

// PrimaryReturnIDGT applies the GT predicate on the "primary_return_id" field.
func PrimaryReturnIDGT(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPrimaryReturnID), v))
	})
}

// PrimaryReturnIDGTE applies the GTE predicate on the "primary_return_id" field.
func PrimaryReturnIDGTE(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPrimaryReturnID), v))
	})
}

// PrimaryReturnIDLT applies the LT predicate on the "primary_return_id" field.
func PrimaryReturnIDLT(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPrimaryReturnID), v))
	})
}

// PrimaryReturnIDLTE applies the LTE predicate on the "primary_return_id" field.
func PrimaryReturnIDLTE(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPrimaryReturnID), v))
	})
}

// PrimaryReturnIDIsNil applies the IsNil predicate on the "primary_return_id" field.
func PrimaryReturnIDIsNil() predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPrimaryReturnID)))
	})
}

// PrimaryReturnIDNotNil applies the NotNil predicate on the "primary_return_id" field.
func PrimaryReturnIDNotNil() predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPrimaryReturnID)))
	})
}

// PrimaryShipGroupSeqIDEQ applies the EQ predicate on the "primary_ship_group_seq_id" field.
func PrimaryShipGroupSeqIDEQ(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrimaryShipGroupSeqID), v))
	})
}

// PrimaryShipGroupSeqIDNEQ applies the NEQ predicate on the "primary_ship_group_seq_id" field.
func PrimaryShipGroupSeqIDNEQ(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPrimaryShipGroupSeqID), v))
	})
}

// PrimaryShipGroupSeqIDIn applies the In predicate on the "primary_ship_group_seq_id" field.
func PrimaryShipGroupSeqIDIn(vs ...int) predicate.Shipment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shipment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPrimaryShipGroupSeqID), v...))
	})
}

// PrimaryShipGroupSeqIDNotIn applies the NotIn predicate on the "primary_ship_group_seq_id" field.
func PrimaryShipGroupSeqIDNotIn(vs ...int) predicate.Shipment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shipment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPrimaryShipGroupSeqID), v...))
	})
}

// PrimaryShipGroupSeqIDGT applies the GT predicate on the "primary_ship_group_seq_id" field.
func PrimaryShipGroupSeqIDGT(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPrimaryShipGroupSeqID), v))
	})
}

// PrimaryShipGroupSeqIDGTE applies the GTE predicate on the "primary_ship_group_seq_id" field.
func PrimaryShipGroupSeqIDGTE(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPrimaryShipGroupSeqID), v))
	})
}

// PrimaryShipGroupSeqIDLT applies the LT predicate on the "primary_ship_group_seq_id" field.
func PrimaryShipGroupSeqIDLT(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPrimaryShipGroupSeqID), v))
	})
}

// PrimaryShipGroupSeqIDLTE applies the LTE predicate on the "primary_ship_group_seq_id" field.
func PrimaryShipGroupSeqIDLTE(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPrimaryShipGroupSeqID), v))
	})
}

// PrimaryShipGroupSeqIDIsNil applies the IsNil predicate on the "primary_ship_group_seq_id" field.
func PrimaryShipGroupSeqIDIsNil() predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPrimaryShipGroupSeqID)))
	})
}

// PrimaryShipGroupSeqIDNotNil applies the NotNil predicate on the "primary_ship_group_seq_id" field.
func PrimaryShipGroupSeqIDNotNil() predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPrimaryShipGroupSeqID)))
	})
}

// PicklistBinIDEQ applies the EQ predicate on the "picklist_bin_id" field.
func PicklistBinIDEQ(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPicklistBinID), v))
	})
}

// PicklistBinIDNEQ applies the NEQ predicate on the "picklist_bin_id" field.
func PicklistBinIDNEQ(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPicklistBinID), v))
	})
}

// PicklistBinIDIn applies the In predicate on the "picklist_bin_id" field.
func PicklistBinIDIn(vs ...int) predicate.Shipment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shipment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPicklistBinID), v...))
	})
}

// PicklistBinIDNotIn applies the NotIn predicate on the "picklist_bin_id" field.
func PicklistBinIDNotIn(vs ...int) predicate.Shipment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shipment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPicklistBinID), v...))
	})
}

// PicklistBinIDGT applies the GT predicate on the "picklist_bin_id" field.
func PicklistBinIDGT(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPicklistBinID), v))
	})
}

// PicklistBinIDGTE applies the GTE predicate on the "picklist_bin_id" field.
func PicklistBinIDGTE(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPicklistBinID), v))
	})
}

// PicklistBinIDLT applies the LT predicate on the "picklist_bin_id" field.
func PicklistBinIDLT(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPicklistBinID), v))
	})
}

// PicklistBinIDLTE applies the LTE predicate on the "picklist_bin_id" field.
func PicklistBinIDLTE(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPicklistBinID), v))
	})
}

// PicklistBinIDIsNil applies the IsNil predicate on the "picklist_bin_id" field.
func PicklistBinIDIsNil() predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPicklistBinID)))
	})
}

// PicklistBinIDNotNil applies the NotNil predicate on the "picklist_bin_id" field.
func PicklistBinIDNotNil() predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPicklistBinID)))
	})
}

// EstimatedReadyDateEQ applies the EQ predicate on the "estimated_ready_date" field.
func EstimatedReadyDateEQ(v time.Time) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEstimatedReadyDate), v))
	})
}

// EstimatedReadyDateNEQ applies the NEQ predicate on the "estimated_ready_date" field.
func EstimatedReadyDateNEQ(v time.Time) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEstimatedReadyDate), v))
	})
}

// EstimatedReadyDateIn applies the In predicate on the "estimated_ready_date" field.
func EstimatedReadyDateIn(vs ...time.Time) predicate.Shipment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shipment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEstimatedReadyDate), v...))
	})
}

// EstimatedReadyDateNotIn applies the NotIn predicate on the "estimated_ready_date" field.
func EstimatedReadyDateNotIn(vs ...time.Time) predicate.Shipment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shipment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEstimatedReadyDate), v...))
	})
}

// EstimatedReadyDateGT applies the GT predicate on the "estimated_ready_date" field.
func EstimatedReadyDateGT(v time.Time) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEstimatedReadyDate), v))
	})
}

// EstimatedReadyDateGTE applies the GTE predicate on the "estimated_ready_date" field.
func EstimatedReadyDateGTE(v time.Time) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEstimatedReadyDate), v))
	})
}

// EstimatedReadyDateLT applies the LT predicate on the "estimated_ready_date" field.
func EstimatedReadyDateLT(v time.Time) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEstimatedReadyDate), v))
	})
}

// EstimatedReadyDateLTE applies the LTE predicate on the "estimated_ready_date" field.
func EstimatedReadyDateLTE(v time.Time) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEstimatedReadyDate), v))
	})
}

// EstimatedReadyDateIsNil applies the IsNil predicate on the "estimated_ready_date" field.
func EstimatedReadyDateIsNil() predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldEstimatedReadyDate)))
	})
}

// EstimatedReadyDateNotNil applies the NotNil predicate on the "estimated_ready_date" field.
func EstimatedReadyDateNotNil() predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldEstimatedReadyDate)))
	})
}

// EstimatedShipDateEQ applies the EQ predicate on the "estimated_ship_date" field.
func EstimatedShipDateEQ(v time.Time) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEstimatedShipDate), v))
	})
}

// EstimatedShipDateNEQ applies the NEQ predicate on the "estimated_ship_date" field.
func EstimatedShipDateNEQ(v time.Time) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEstimatedShipDate), v))
	})
}

// EstimatedShipDateIn applies the In predicate on the "estimated_ship_date" field.
func EstimatedShipDateIn(vs ...time.Time) predicate.Shipment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shipment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEstimatedShipDate), v...))
	})
}

// EstimatedShipDateNotIn applies the NotIn predicate on the "estimated_ship_date" field.
func EstimatedShipDateNotIn(vs ...time.Time) predicate.Shipment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shipment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEstimatedShipDate), v...))
	})
}

// EstimatedShipDateGT applies the GT predicate on the "estimated_ship_date" field.
func EstimatedShipDateGT(v time.Time) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEstimatedShipDate), v))
	})
}

// EstimatedShipDateGTE applies the GTE predicate on the "estimated_ship_date" field.
func EstimatedShipDateGTE(v time.Time) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEstimatedShipDate), v))
	})
}

// EstimatedShipDateLT applies the LT predicate on the "estimated_ship_date" field.
func EstimatedShipDateLT(v time.Time) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEstimatedShipDate), v))
	})
}

// EstimatedShipDateLTE applies the LTE predicate on the "estimated_ship_date" field.
func EstimatedShipDateLTE(v time.Time) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEstimatedShipDate), v))
	})
}

// EstimatedShipDateIsNil applies the IsNil predicate on the "estimated_ship_date" field.
func EstimatedShipDateIsNil() predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldEstimatedShipDate)))
	})
}

// EstimatedShipDateNotNil applies the NotNil predicate on the "estimated_ship_date" field.
func EstimatedShipDateNotNil() predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldEstimatedShipDate)))
	})
}

// EstimatedShipWorkEffIDEQ applies the EQ predicate on the "estimated_ship_work_eff_id" field.
func EstimatedShipWorkEffIDEQ(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEstimatedShipWorkEffID), v))
	})
}

// EstimatedShipWorkEffIDNEQ applies the NEQ predicate on the "estimated_ship_work_eff_id" field.
func EstimatedShipWorkEffIDNEQ(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEstimatedShipWorkEffID), v))
	})
}

// EstimatedShipWorkEffIDIn applies the In predicate on the "estimated_ship_work_eff_id" field.
func EstimatedShipWorkEffIDIn(vs ...int) predicate.Shipment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shipment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEstimatedShipWorkEffID), v...))
	})
}

// EstimatedShipWorkEffIDNotIn applies the NotIn predicate on the "estimated_ship_work_eff_id" field.
func EstimatedShipWorkEffIDNotIn(vs ...int) predicate.Shipment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shipment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEstimatedShipWorkEffID), v...))
	})
}

// EstimatedShipWorkEffIDGT applies the GT predicate on the "estimated_ship_work_eff_id" field.
func EstimatedShipWorkEffIDGT(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEstimatedShipWorkEffID), v))
	})
}

// EstimatedShipWorkEffIDGTE applies the GTE predicate on the "estimated_ship_work_eff_id" field.
func EstimatedShipWorkEffIDGTE(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEstimatedShipWorkEffID), v))
	})
}

// EstimatedShipWorkEffIDLT applies the LT predicate on the "estimated_ship_work_eff_id" field.
func EstimatedShipWorkEffIDLT(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEstimatedShipWorkEffID), v))
	})
}

// EstimatedShipWorkEffIDLTE applies the LTE predicate on the "estimated_ship_work_eff_id" field.
func EstimatedShipWorkEffIDLTE(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEstimatedShipWorkEffID), v))
	})
}

// EstimatedShipWorkEffIDIsNil applies the IsNil predicate on the "estimated_ship_work_eff_id" field.
func EstimatedShipWorkEffIDIsNil() predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldEstimatedShipWorkEffID)))
	})
}

// EstimatedShipWorkEffIDNotNil applies the NotNil predicate on the "estimated_ship_work_eff_id" field.
func EstimatedShipWorkEffIDNotNil() predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldEstimatedShipWorkEffID)))
	})
}

// EstimatedArrivalDateEQ applies the EQ predicate on the "estimated_arrival_date" field.
func EstimatedArrivalDateEQ(v time.Time) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEstimatedArrivalDate), v))
	})
}

// EstimatedArrivalDateNEQ applies the NEQ predicate on the "estimated_arrival_date" field.
func EstimatedArrivalDateNEQ(v time.Time) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEstimatedArrivalDate), v))
	})
}

// EstimatedArrivalDateIn applies the In predicate on the "estimated_arrival_date" field.
func EstimatedArrivalDateIn(vs ...time.Time) predicate.Shipment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shipment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEstimatedArrivalDate), v...))
	})
}

// EstimatedArrivalDateNotIn applies the NotIn predicate on the "estimated_arrival_date" field.
func EstimatedArrivalDateNotIn(vs ...time.Time) predicate.Shipment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shipment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEstimatedArrivalDate), v...))
	})
}

// EstimatedArrivalDateGT applies the GT predicate on the "estimated_arrival_date" field.
func EstimatedArrivalDateGT(v time.Time) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEstimatedArrivalDate), v))
	})
}

// EstimatedArrivalDateGTE applies the GTE predicate on the "estimated_arrival_date" field.
func EstimatedArrivalDateGTE(v time.Time) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEstimatedArrivalDate), v))
	})
}

// EstimatedArrivalDateLT applies the LT predicate on the "estimated_arrival_date" field.
func EstimatedArrivalDateLT(v time.Time) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEstimatedArrivalDate), v))
	})
}

// EstimatedArrivalDateLTE applies the LTE predicate on the "estimated_arrival_date" field.
func EstimatedArrivalDateLTE(v time.Time) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEstimatedArrivalDate), v))
	})
}

// EstimatedArrivalDateIsNil applies the IsNil predicate on the "estimated_arrival_date" field.
func EstimatedArrivalDateIsNil() predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldEstimatedArrivalDate)))
	})
}

// EstimatedArrivalDateNotNil applies the NotNil predicate on the "estimated_arrival_date" field.
func EstimatedArrivalDateNotNil() predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldEstimatedArrivalDate)))
	})
}

// EstimatedArrivalWorkEffIDEQ applies the EQ predicate on the "estimated_arrival_work_eff_id" field.
func EstimatedArrivalWorkEffIDEQ(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEstimatedArrivalWorkEffID), v))
	})
}

// EstimatedArrivalWorkEffIDNEQ applies the NEQ predicate on the "estimated_arrival_work_eff_id" field.
func EstimatedArrivalWorkEffIDNEQ(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEstimatedArrivalWorkEffID), v))
	})
}

// EstimatedArrivalWorkEffIDIn applies the In predicate on the "estimated_arrival_work_eff_id" field.
func EstimatedArrivalWorkEffIDIn(vs ...int) predicate.Shipment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shipment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEstimatedArrivalWorkEffID), v...))
	})
}

// EstimatedArrivalWorkEffIDNotIn applies the NotIn predicate on the "estimated_arrival_work_eff_id" field.
func EstimatedArrivalWorkEffIDNotIn(vs ...int) predicate.Shipment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shipment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEstimatedArrivalWorkEffID), v...))
	})
}

// EstimatedArrivalWorkEffIDGT applies the GT predicate on the "estimated_arrival_work_eff_id" field.
func EstimatedArrivalWorkEffIDGT(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEstimatedArrivalWorkEffID), v))
	})
}

// EstimatedArrivalWorkEffIDGTE applies the GTE predicate on the "estimated_arrival_work_eff_id" field.
func EstimatedArrivalWorkEffIDGTE(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEstimatedArrivalWorkEffID), v))
	})
}

// EstimatedArrivalWorkEffIDLT applies the LT predicate on the "estimated_arrival_work_eff_id" field.
func EstimatedArrivalWorkEffIDLT(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEstimatedArrivalWorkEffID), v))
	})
}

// EstimatedArrivalWorkEffIDLTE applies the LTE predicate on the "estimated_arrival_work_eff_id" field.
func EstimatedArrivalWorkEffIDLTE(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEstimatedArrivalWorkEffID), v))
	})
}

// EstimatedArrivalWorkEffIDIsNil applies the IsNil predicate on the "estimated_arrival_work_eff_id" field.
func EstimatedArrivalWorkEffIDIsNil() predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldEstimatedArrivalWorkEffID)))
	})
}

// EstimatedArrivalWorkEffIDNotNil applies the NotNil predicate on the "estimated_arrival_work_eff_id" field.
func EstimatedArrivalWorkEffIDNotNil() predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldEstimatedArrivalWorkEffID)))
	})
}

// LatestCancelDateEQ applies the EQ predicate on the "latest_cancel_date" field.
func LatestCancelDateEQ(v time.Time) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLatestCancelDate), v))
	})
}

// LatestCancelDateNEQ applies the NEQ predicate on the "latest_cancel_date" field.
func LatestCancelDateNEQ(v time.Time) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLatestCancelDate), v))
	})
}

// LatestCancelDateIn applies the In predicate on the "latest_cancel_date" field.
func LatestCancelDateIn(vs ...time.Time) predicate.Shipment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shipment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLatestCancelDate), v...))
	})
}

// LatestCancelDateNotIn applies the NotIn predicate on the "latest_cancel_date" field.
func LatestCancelDateNotIn(vs ...time.Time) predicate.Shipment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shipment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLatestCancelDate), v...))
	})
}

// LatestCancelDateGT applies the GT predicate on the "latest_cancel_date" field.
func LatestCancelDateGT(v time.Time) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLatestCancelDate), v))
	})
}

// LatestCancelDateGTE applies the GTE predicate on the "latest_cancel_date" field.
func LatestCancelDateGTE(v time.Time) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLatestCancelDate), v))
	})
}

// LatestCancelDateLT applies the LT predicate on the "latest_cancel_date" field.
func LatestCancelDateLT(v time.Time) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLatestCancelDate), v))
	})
}

// LatestCancelDateLTE applies the LTE predicate on the "latest_cancel_date" field.
func LatestCancelDateLTE(v time.Time) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLatestCancelDate), v))
	})
}

// LatestCancelDateIsNil applies the IsNil predicate on the "latest_cancel_date" field.
func LatestCancelDateIsNil() predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLatestCancelDate)))
	})
}

// LatestCancelDateNotNil applies the NotNil predicate on the "latest_cancel_date" field.
func LatestCancelDateNotNil() predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLatestCancelDate)))
	})
}

// EstimatedShipCostEQ applies the EQ predicate on the "estimated_ship_cost" field.
func EstimatedShipCostEQ(v float64) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEstimatedShipCost), v))
	})
}

// EstimatedShipCostNEQ applies the NEQ predicate on the "estimated_ship_cost" field.
func EstimatedShipCostNEQ(v float64) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEstimatedShipCost), v))
	})
}

// EstimatedShipCostIn applies the In predicate on the "estimated_ship_cost" field.
func EstimatedShipCostIn(vs ...float64) predicate.Shipment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shipment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEstimatedShipCost), v...))
	})
}

// EstimatedShipCostNotIn applies the NotIn predicate on the "estimated_ship_cost" field.
func EstimatedShipCostNotIn(vs ...float64) predicate.Shipment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shipment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEstimatedShipCost), v...))
	})
}

// EstimatedShipCostGT applies the GT predicate on the "estimated_ship_cost" field.
func EstimatedShipCostGT(v float64) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEstimatedShipCost), v))
	})
}

// EstimatedShipCostGTE applies the GTE predicate on the "estimated_ship_cost" field.
func EstimatedShipCostGTE(v float64) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEstimatedShipCost), v))
	})
}

// EstimatedShipCostLT applies the LT predicate on the "estimated_ship_cost" field.
func EstimatedShipCostLT(v float64) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEstimatedShipCost), v))
	})
}

// EstimatedShipCostLTE applies the LTE predicate on the "estimated_ship_cost" field.
func EstimatedShipCostLTE(v float64) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEstimatedShipCost), v))
	})
}

// EstimatedShipCostIsNil applies the IsNil predicate on the "estimated_ship_cost" field.
func EstimatedShipCostIsNil() predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldEstimatedShipCost)))
	})
}

// EstimatedShipCostNotNil applies the NotNil predicate on the "estimated_ship_cost" field.
func EstimatedShipCostNotNil() predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldEstimatedShipCost)))
	})
}

// CurrencyUomIDEQ applies the EQ predicate on the "currency_uom_id" field.
func CurrencyUomIDEQ(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCurrencyUomID), v))
	})
}

// CurrencyUomIDNEQ applies the NEQ predicate on the "currency_uom_id" field.
func CurrencyUomIDNEQ(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCurrencyUomID), v))
	})
}

// CurrencyUomIDIn applies the In predicate on the "currency_uom_id" field.
func CurrencyUomIDIn(vs ...int) predicate.Shipment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shipment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCurrencyUomID), v...))
	})
}

// CurrencyUomIDNotIn applies the NotIn predicate on the "currency_uom_id" field.
func CurrencyUomIDNotIn(vs ...int) predicate.Shipment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shipment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCurrencyUomID), v...))
	})
}

// CurrencyUomIDGT applies the GT predicate on the "currency_uom_id" field.
func CurrencyUomIDGT(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCurrencyUomID), v))
	})
}

// CurrencyUomIDGTE applies the GTE predicate on the "currency_uom_id" field.
func CurrencyUomIDGTE(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCurrencyUomID), v))
	})
}

// CurrencyUomIDLT applies the LT predicate on the "currency_uom_id" field.
func CurrencyUomIDLT(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCurrencyUomID), v))
	})
}

// CurrencyUomIDLTE applies the LTE predicate on the "currency_uom_id" field.
func CurrencyUomIDLTE(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCurrencyUomID), v))
	})
}

// CurrencyUomIDIsNil applies the IsNil predicate on the "currency_uom_id" field.
func CurrencyUomIDIsNil() predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCurrencyUomID)))
	})
}

// CurrencyUomIDNotNil applies the NotNil predicate on the "currency_uom_id" field.
func CurrencyUomIDNotNil() predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCurrencyUomID)))
	})
}

// HandlingInstructionsEQ applies the EQ predicate on the "handling_instructions" field.
func HandlingInstructionsEQ(v string) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHandlingInstructions), v))
	})
}

// HandlingInstructionsNEQ applies the NEQ predicate on the "handling_instructions" field.
func HandlingInstructionsNEQ(v string) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHandlingInstructions), v))
	})
}

// HandlingInstructionsIn applies the In predicate on the "handling_instructions" field.
func HandlingInstructionsIn(vs ...string) predicate.Shipment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shipment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldHandlingInstructions), v...))
	})
}

// HandlingInstructionsNotIn applies the NotIn predicate on the "handling_instructions" field.
func HandlingInstructionsNotIn(vs ...string) predicate.Shipment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shipment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldHandlingInstructions), v...))
	})
}

// HandlingInstructionsGT applies the GT predicate on the "handling_instructions" field.
func HandlingInstructionsGT(v string) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHandlingInstructions), v))
	})
}

// HandlingInstructionsGTE applies the GTE predicate on the "handling_instructions" field.
func HandlingInstructionsGTE(v string) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHandlingInstructions), v))
	})
}

// HandlingInstructionsLT applies the LT predicate on the "handling_instructions" field.
func HandlingInstructionsLT(v string) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHandlingInstructions), v))
	})
}

// HandlingInstructionsLTE applies the LTE predicate on the "handling_instructions" field.
func HandlingInstructionsLTE(v string) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHandlingInstructions), v))
	})
}

// HandlingInstructionsContains applies the Contains predicate on the "handling_instructions" field.
func HandlingInstructionsContains(v string) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldHandlingInstructions), v))
	})
}

// HandlingInstructionsHasPrefix applies the HasPrefix predicate on the "handling_instructions" field.
func HandlingInstructionsHasPrefix(v string) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldHandlingInstructions), v))
	})
}

// HandlingInstructionsHasSuffix applies the HasSuffix predicate on the "handling_instructions" field.
func HandlingInstructionsHasSuffix(v string) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldHandlingInstructions), v))
	})
}

// HandlingInstructionsIsNil applies the IsNil predicate on the "handling_instructions" field.
func HandlingInstructionsIsNil() predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldHandlingInstructions)))
	})
}

// HandlingInstructionsNotNil applies the NotNil predicate on the "handling_instructions" field.
func HandlingInstructionsNotNil() predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldHandlingInstructions)))
	})
}

// HandlingInstructionsEqualFold applies the EqualFold predicate on the "handling_instructions" field.
func HandlingInstructionsEqualFold(v string) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldHandlingInstructions), v))
	})
}

// HandlingInstructionsContainsFold applies the ContainsFold predicate on the "handling_instructions" field.
func HandlingInstructionsContainsFold(v string) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldHandlingInstructions), v))
	})
}

// OriginFacilityIDEQ applies the EQ predicate on the "origin_facility_id" field.
func OriginFacilityIDEQ(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOriginFacilityID), v))
	})
}

// OriginFacilityIDNEQ applies the NEQ predicate on the "origin_facility_id" field.
func OriginFacilityIDNEQ(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOriginFacilityID), v))
	})
}

// OriginFacilityIDIn applies the In predicate on the "origin_facility_id" field.
func OriginFacilityIDIn(vs ...int) predicate.Shipment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shipment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOriginFacilityID), v...))
	})
}

// OriginFacilityIDNotIn applies the NotIn predicate on the "origin_facility_id" field.
func OriginFacilityIDNotIn(vs ...int) predicate.Shipment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shipment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOriginFacilityID), v...))
	})
}

// OriginFacilityIDGT applies the GT predicate on the "origin_facility_id" field.
func OriginFacilityIDGT(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOriginFacilityID), v))
	})
}

// OriginFacilityIDGTE applies the GTE predicate on the "origin_facility_id" field.
func OriginFacilityIDGTE(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOriginFacilityID), v))
	})
}

// OriginFacilityIDLT applies the LT predicate on the "origin_facility_id" field.
func OriginFacilityIDLT(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOriginFacilityID), v))
	})
}

// OriginFacilityIDLTE applies the LTE predicate on the "origin_facility_id" field.
func OriginFacilityIDLTE(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOriginFacilityID), v))
	})
}

// OriginFacilityIDIsNil applies the IsNil predicate on the "origin_facility_id" field.
func OriginFacilityIDIsNil() predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOriginFacilityID)))
	})
}

// OriginFacilityIDNotNil applies the NotNil predicate on the "origin_facility_id" field.
func OriginFacilityIDNotNil() predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOriginFacilityID)))
	})
}

// DestinationFacilityIDEQ applies the EQ predicate on the "destination_facility_id" field.
func DestinationFacilityIDEQ(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDestinationFacilityID), v))
	})
}

// DestinationFacilityIDNEQ applies the NEQ predicate on the "destination_facility_id" field.
func DestinationFacilityIDNEQ(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDestinationFacilityID), v))
	})
}

// DestinationFacilityIDIn applies the In predicate on the "destination_facility_id" field.
func DestinationFacilityIDIn(vs ...int) predicate.Shipment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shipment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDestinationFacilityID), v...))
	})
}

// DestinationFacilityIDNotIn applies the NotIn predicate on the "destination_facility_id" field.
func DestinationFacilityIDNotIn(vs ...int) predicate.Shipment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shipment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDestinationFacilityID), v...))
	})
}

// DestinationFacilityIDGT applies the GT predicate on the "destination_facility_id" field.
func DestinationFacilityIDGT(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDestinationFacilityID), v))
	})
}

// DestinationFacilityIDGTE applies the GTE predicate on the "destination_facility_id" field.
func DestinationFacilityIDGTE(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDestinationFacilityID), v))
	})
}

// DestinationFacilityIDLT applies the LT predicate on the "destination_facility_id" field.
func DestinationFacilityIDLT(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDestinationFacilityID), v))
	})
}

// DestinationFacilityIDLTE applies the LTE predicate on the "destination_facility_id" field.
func DestinationFacilityIDLTE(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDestinationFacilityID), v))
	})
}

// DestinationFacilityIDIsNil applies the IsNil predicate on the "destination_facility_id" field.
func DestinationFacilityIDIsNil() predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDestinationFacilityID)))
	})
}

// DestinationFacilityIDNotNil applies the NotNil predicate on the "destination_facility_id" field.
func DestinationFacilityIDNotNil() predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDestinationFacilityID)))
	})
}

// OriginContactMechIDEQ applies the EQ predicate on the "origin_contact_mech_id" field.
func OriginContactMechIDEQ(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOriginContactMechID), v))
	})
}

// OriginContactMechIDNEQ applies the NEQ predicate on the "origin_contact_mech_id" field.
func OriginContactMechIDNEQ(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOriginContactMechID), v))
	})
}

// OriginContactMechIDIn applies the In predicate on the "origin_contact_mech_id" field.
func OriginContactMechIDIn(vs ...int) predicate.Shipment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shipment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOriginContactMechID), v...))
	})
}

// OriginContactMechIDNotIn applies the NotIn predicate on the "origin_contact_mech_id" field.
func OriginContactMechIDNotIn(vs ...int) predicate.Shipment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shipment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOriginContactMechID), v...))
	})
}

// OriginContactMechIDGT applies the GT predicate on the "origin_contact_mech_id" field.
func OriginContactMechIDGT(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOriginContactMechID), v))
	})
}

// OriginContactMechIDGTE applies the GTE predicate on the "origin_contact_mech_id" field.
func OriginContactMechIDGTE(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOriginContactMechID), v))
	})
}

// OriginContactMechIDLT applies the LT predicate on the "origin_contact_mech_id" field.
func OriginContactMechIDLT(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOriginContactMechID), v))
	})
}

// OriginContactMechIDLTE applies the LTE predicate on the "origin_contact_mech_id" field.
func OriginContactMechIDLTE(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOriginContactMechID), v))
	})
}

// OriginContactMechIDIsNil applies the IsNil predicate on the "origin_contact_mech_id" field.
func OriginContactMechIDIsNil() predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOriginContactMechID)))
	})
}

// OriginContactMechIDNotNil applies the NotNil predicate on the "origin_contact_mech_id" field.
func OriginContactMechIDNotNil() predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOriginContactMechID)))
	})
}

// OriginTelecomNumberIDEQ applies the EQ predicate on the "origin_telecom_number_id" field.
func OriginTelecomNumberIDEQ(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOriginTelecomNumberID), v))
	})
}

// OriginTelecomNumberIDNEQ applies the NEQ predicate on the "origin_telecom_number_id" field.
func OriginTelecomNumberIDNEQ(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOriginTelecomNumberID), v))
	})
}

// OriginTelecomNumberIDIn applies the In predicate on the "origin_telecom_number_id" field.
func OriginTelecomNumberIDIn(vs ...int) predicate.Shipment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shipment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOriginTelecomNumberID), v...))
	})
}

// OriginTelecomNumberIDNotIn applies the NotIn predicate on the "origin_telecom_number_id" field.
func OriginTelecomNumberIDNotIn(vs ...int) predicate.Shipment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shipment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOriginTelecomNumberID), v...))
	})
}

// OriginTelecomNumberIDGT applies the GT predicate on the "origin_telecom_number_id" field.
func OriginTelecomNumberIDGT(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOriginTelecomNumberID), v))
	})
}

// OriginTelecomNumberIDGTE applies the GTE predicate on the "origin_telecom_number_id" field.
func OriginTelecomNumberIDGTE(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOriginTelecomNumberID), v))
	})
}

// OriginTelecomNumberIDLT applies the LT predicate on the "origin_telecom_number_id" field.
func OriginTelecomNumberIDLT(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOriginTelecomNumberID), v))
	})
}

// OriginTelecomNumberIDLTE applies the LTE predicate on the "origin_telecom_number_id" field.
func OriginTelecomNumberIDLTE(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOriginTelecomNumberID), v))
	})
}

// OriginTelecomNumberIDIsNil applies the IsNil predicate on the "origin_telecom_number_id" field.
func OriginTelecomNumberIDIsNil() predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOriginTelecomNumberID)))
	})
}

// OriginTelecomNumberIDNotNil applies the NotNil predicate on the "origin_telecom_number_id" field.
func OriginTelecomNumberIDNotNil() predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOriginTelecomNumberID)))
	})
}

// DestinationContactMechIDEQ applies the EQ predicate on the "destination_contact_mech_id" field.
func DestinationContactMechIDEQ(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDestinationContactMechID), v))
	})
}

// DestinationContactMechIDNEQ applies the NEQ predicate on the "destination_contact_mech_id" field.
func DestinationContactMechIDNEQ(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDestinationContactMechID), v))
	})
}

// DestinationContactMechIDIn applies the In predicate on the "destination_contact_mech_id" field.
func DestinationContactMechIDIn(vs ...int) predicate.Shipment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shipment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDestinationContactMechID), v...))
	})
}

// DestinationContactMechIDNotIn applies the NotIn predicate on the "destination_contact_mech_id" field.
func DestinationContactMechIDNotIn(vs ...int) predicate.Shipment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shipment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDestinationContactMechID), v...))
	})
}

// DestinationContactMechIDGT applies the GT predicate on the "destination_contact_mech_id" field.
func DestinationContactMechIDGT(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDestinationContactMechID), v))
	})
}

// DestinationContactMechIDGTE applies the GTE predicate on the "destination_contact_mech_id" field.
func DestinationContactMechIDGTE(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDestinationContactMechID), v))
	})
}

// DestinationContactMechIDLT applies the LT predicate on the "destination_contact_mech_id" field.
func DestinationContactMechIDLT(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDestinationContactMechID), v))
	})
}

// DestinationContactMechIDLTE applies the LTE predicate on the "destination_contact_mech_id" field.
func DestinationContactMechIDLTE(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDestinationContactMechID), v))
	})
}

// DestinationContactMechIDIsNil applies the IsNil predicate on the "destination_contact_mech_id" field.
func DestinationContactMechIDIsNil() predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDestinationContactMechID)))
	})
}

// DestinationContactMechIDNotNil applies the NotNil predicate on the "destination_contact_mech_id" field.
func DestinationContactMechIDNotNil() predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDestinationContactMechID)))
	})
}

// DestinationTelecomNumberIDEQ applies the EQ predicate on the "destination_telecom_number_id" field.
func DestinationTelecomNumberIDEQ(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDestinationTelecomNumberID), v))
	})
}

// DestinationTelecomNumberIDNEQ applies the NEQ predicate on the "destination_telecom_number_id" field.
func DestinationTelecomNumberIDNEQ(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDestinationTelecomNumberID), v))
	})
}

// DestinationTelecomNumberIDIn applies the In predicate on the "destination_telecom_number_id" field.
func DestinationTelecomNumberIDIn(vs ...int) predicate.Shipment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shipment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDestinationTelecomNumberID), v...))
	})
}

// DestinationTelecomNumberIDNotIn applies the NotIn predicate on the "destination_telecom_number_id" field.
func DestinationTelecomNumberIDNotIn(vs ...int) predicate.Shipment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shipment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDestinationTelecomNumberID), v...))
	})
}

// DestinationTelecomNumberIDGT applies the GT predicate on the "destination_telecom_number_id" field.
func DestinationTelecomNumberIDGT(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDestinationTelecomNumberID), v))
	})
}

// DestinationTelecomNumberIDGTE applies the GTE predicate on the "destination_telecom_number_id" field.
func DestinationTelecomNumberIDGTE(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDestinationTelecomNumberID), v))
	})
}

// DestinationTelecomNumberIDLT applies the LT predicate on the "destination_telecom_number_id" field.
func DestinationTelecomNumberIDLT(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDestinationTelecomNumberID), v))
	})
}

// DestinationTelecomNumberIDLTE applies the LTE predicate on the "destination_telecom_number_id" field.
func DestinationTelecomNumberIDLTE(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDestinationTelecomNumberID), v))
	})
}

// DestinationTelecomNumberIDIsNil applies the IsNil predicate on the "destination_telecom_number_id" field.
func DestinationTelecomNumberIDIsNil() predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDestinationTelecomNumberID)))
	})
}

// DestinationTelecomNumberIDNotNil applies the NotNil predicate on the "destination_telecom_number_id" field.
func DestinationTelecomNumberIDNotNil() predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDestinationTelecomNumberID)))
	})
}

// PartyIDToEQ applies the EQ predicate on the "party_id_to" field.
func PartyIDToEQ(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPartyIDTo), v))
	})
}

// PartyIDToNEQ applies the NEQ predicate on the "party_id_to" field.
func PartyIDToNEQ(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPartyIDTo), v))
	})
}

// PartyIDToIn applies the In predicate on the "party_id_to" field.
func PartyIDToIn(vs ...int) predicate.Shipment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shipment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPartyIDTo), v...))
	})
}

// PartyIDToNotIn applies the NotIn predicate on the "party_id_to" field.
func PartyIDToNotIn(vs ...int) predicate.Shipment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shipment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPartyIDTo), v...))
	})
}

// PartyIDToGT applies the GT predicate on the "party_id_to" field.
func PartyIDToGT(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPartyIDTo), v))
	})
}

// PartyIDToGTE applies the GTE predicate on the "party_id_to" field.
func PartyIDToGTE(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPartyIDTo), v))
	})
}

// PartyIDToLT applies the LT predicate on the "party_id_to" field.
func PartyIDToLT(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPartyIDTo), v))
	})
}

// PartyIDToLTE applies the LTE predicate on the "party_id_to" field.
func PartyIDToLTE(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPartyIDTo), v))
	})
}

// PartyIDToIsNil applies the IsNil predicate on the "party_id_to" field.
func PartyIDToIsNil() predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPartyIDTo)))
	})
}

// PartyIDToNotNil applies the NotNil predicate on the "party_id_to" field.
func PartyIDToNotNil() predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPartyIDTo)))
	})
}

// PartyIDFromEQ applies the EQ predicate on the "party_id_from" field.
func PartyIDFromEQ(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPartyIDFrom), v))
	})
}

// PartyIDFromNEQ applies the NEQ predicate on the "party_id_from" field.
func PartyIDFromNEQ(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPartyIDFrom), v))
	})
}

// PartyIDFromIn applies the In predicate on the "party_id_from" field.
func PartyIDFromIn(vs ...int) predicate.Shipment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shipment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPartyIDFrom), v...))
	})
}

// PartyIDFromNotIn applies the NotIn predicate on the "party_id_from" field.
func PartyIDFromNotIn(vs ...int) predicate.Shipment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shipment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPartyIDFrom), v...))
	})
}

// PartyIDFromGT applies the GT predicate on the "party_id_from" field.
func PartyIDFromGT(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPartyIDFrom), v))
	})
}

// PartyIDFromGTE applies the GTE predicate on the "party_id_from" field.
func PartyIDFromGTE(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPartyIDFrom), v))
	})
}

// PartyIDFromLT applies the LT predicate on the "party_id_from" field.
func PartyIDFromLT(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPartyIDFrom), v))
	})
}

// PartyIDFromLTE applies the LTE predicate on the "party_id_from" field.
func PartyIDFromLTE(v int) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPartyIDFrom), v))
	})
}

// PartyIDFromIsNil applies the IsNil predicate on the "party_id_from" field.
func PartyIDFromIsNil() predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPartyIDFrom)))
	})
}

// PartyIDFromNotNil applies the NotNil predicate on the "party_id_from" field.
func PartyIDFromNotNil() predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPartyIDFrom)))
	})
}

// AdditionalShippingChargeEQ applies the EQ predicate on the "additional_shipping_charge" field.
func AdditionalShippingChargeEQ(v float64) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAdditionalShippingCharge), v))
	})
}

// AdditionalShippingChargeNEQ applies the NEQ predicate on the "additional_shipping_charge" field.
func AdditionalShippingChargeNEQ(v float64) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAdditionalShippingCharge), v))
	})
}

// AdditionalShippingChargeIn applies the In predicate on the "additional_shipping_charge" field.
func AdditionalShippingChargeIn(vs ...float64) predicate.Shipment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shipment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAdditionalShippingCharge), v...))
	})
}

// AdditionalShippingChargeNotIn applies the NotIn predicate on the "additional_shipping_charge" field.
func AdditionalShippingChargeNotIn(vs ...float64) predicate.Shipment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shipment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAdditionalShippingCharge), v...))
	})
}

// AdditionalShippingChargeGT applies the GT predicate on the "additional_shipping_charge" field.
func AdditionalShippingChargeGT(v float64) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAdditionalShippingCharge), v))
	})
}

// AdditionalShippingChargeGTE applies the GTE predicate on the "additional_shipping_charge" field.
func AdditionalShippingChargeGTE(v float64) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAdditionalShippingCharge), v))
	})
}

// AdditionalShippingChargeLT applies the LT predicate on the "additional_shipping_charge" field.
func AdditionalShippingChargeLT(v float64) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAdditionalShippingCharge), v))
	})
}

// AdditionalShippingChargeLTE applies the LTE predicate on the "additional_shipping_charge" field.
func AdditionalShippingChargeLTE(v float64) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAdditionalShippingCharge), v))
	})
}

// AdditionalShippingChargeIsNil applies the IsNil predicate on the "additional_shipping_charge" field.
func AdditionalShippingChargeIsNil() predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAdditionalShippingCharge)))
	})
}

// AdditionalShippingChargeNotNil applies the NotNil predicate on the "additional_shipping_charge" field.
func AdditionalShippingChargeNotNil() predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAdditionalShippingCharge)))
	})
}

// AddtlShippingChargeDescEQ applies the EQ predicate on the "addtl_shipping_charge_desc" field.
func AddtlShippingChargeDescEQ(v string) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAddtlShippingChargeDesc), v))
	})
}

// AddtlShippingChargeDescNEQ applies the NEQ predicate on the "addtl_shipping_charge_desc" field.
func AddtlShippingChargeDescNEQ(v string) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAddtlShippingChargeDesc), v))
	})
}

// AddtlShippingChargeDescIn applies the In predicate on the "addtl_shipping_charge_desc" field.
func AddtlShippingChargeDescIn(vs ...string) predicate.Shipment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shipment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAddtlShippingChargeDesc), v...))
	})
}

// AddtlShippingChargeDescNotIn applies the NotIn predicate on the "addtl_shipping_charge_desc" field.
func AddtlShippingChargeDescNotIn(vs ...string) predicate.Shipment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shipment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAddtlShippingChargeDesc), v...))
	})
}

// AddtlShippingChargeDescGT applies the GT predicate on the "addtl_shipping_charge_desc" field.
func AddtlShippingChargeDescGT(v string) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAddtlShippingChargeDesc), v))
	})
}

// AddtlShippingChargeDescGTE applies the GTE predicate on the "addtl_shipping_charge_desc" field.
func AddtlShippingChargeDescGTE(v string) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAddtlShippingChargeDesc), v))
	})
}

// AddtlShippingChargeDescLT applies the LT predicate on the "addtl_shipping_charge_desc" field.
func AddtlShippingChargeDescLT(v string) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAddtlShippingChargeDesc), v))
	})
}

// AddtlShippingChargeDescLTE applies the LTE predicate on the "addtl_shipping_charge_desc" field.
func AddtlShippingChargeDescLTE(v string) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAddtlShippingChargeDesc), v))
	})
}

// AddtlShippingChargeDescContains applies the Contains predicate on the "addtl_shipping_charge_desc" field.
func AddtlShippingChargeDescContains(v string) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAddtlShippingChargeDesc), v))
	})
}

// AddtlShippingChargeDescHasPrefix applies the HasPrefix predicate on the "addtl_shipping_charge_desc" field.
func AddtlShippingChargeDescHasPrefix(v string) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAddtlShippingChargeDesc), v))
	})
}

// AddtlShippingChargeDescHasSuffix applies the HasSuffix predicate on the "addtl_shipping_charge_desc" field.
func AddtlShippingChargeDescHasSuffix(v string) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAddtlShippingChargeDesc), v))
	})
}

// AddtlShippingChargeDescIsNil applies the IsNil predicate on the "addtl_shipping_charge_desc" field.
func AddtlShippingChargeDescIsNil() predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAddtlShippingChargeDesc)))
	})
}

// AddtlShippingChargeDescNotNil applies the NotNil predicate on the "addtl_shipping_charge_desc" field.
func AddtlShippingChargeDescNotNil() predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAddtlShippingChargeDesc)))
	})
}

// AddtlShippingChargeDescEqualFold applies the EqualFold predicate on the "addtl_shipping_charge_desc" field.
func AddtlShippingChargeDescEqualFold(v string) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAddtlShippingChargeDesc), v))
	})
}

// AddtlShippingChargeDescContainsFold applies the ContainsFold predicate on the "addtl_shipping_charge_desc" field.
func AddtlShippingChargeDescContainsFold(v string) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAddtlShippingChargeDesc), v))
	})
}

// CreatedDateEQ applies the EQ predicate on the "created_date" field.
func CreatedDateEQ(v time.Time) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedDate), v))
	})
}

// CreatedDateNEQ applies the NEQ predicate on the "created_date" field.
func CreatedDateNEQ(v time.Time) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedDate), v))
	})
}

// CreatedDateIn applies the In predicate on the "created_date" field.
func CreatedDateIn(vs ...time.Time) predicate.Shipment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shipment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedDate), v...))
	})
}

// CreatedDateNotIn applies the NotIn predicate on the "created_date" field.
func CreatedDateNotIn(vs ...time.Time) predicate.Shipment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shipment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedDate), v...))
	})
}

// CreatedDateGT applies the GT predicate on the "created_date" field.
func CreatedDateGT(v time.Time) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedDate), v))
	})
}

// CreatedDateGTE applies the GTE predicate on the "created_date" field.
func CreatedDateGTE(v time.Time) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedDate), v))
	})
}

// CreatedDateLT applies the LT predicate on the "created_date" field.
func CreatedDateLT(v time.Time) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedDate), v))
	})
}

// CreatedDateLTE applies the LTE predicate on the "created_date" field.
func CreatedDateLTE(v time.Time) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedDate), v))
	})
}

// CreatedDateIsNil applies the IsNil predicate on the "created_date" field.
func CreatedDateIsNil() predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreatedDate)))
	})
}

// CreatedDateNotNil applies the NotNil predicate on the "created_date" field.
func CreatedDateNotNil() predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreatedDate)))
	})
}

// CreatedByUserLoginEQ applies the EQ predicate on the "created_by_user_login" field.
func CreatedByUserLoginEQ(v string) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedByUserLogin), v))
	})
}

// CreatedByUserLoginNEQ applies the NEQ predicate on the "created_by_user_login" field.
func CreatedByUserLoginNEQ(v string) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedByUserLogin), v))
	})
}

// CreatedByUserLoginIn applies the In predicate on the "created_by_user_login" field.
func CreatedByUserLoginIn(vs ...string) predicate.Shipment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shipment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedByUserLogin), v...))
	})
}

// CreatedByUserLoginNotIn applies the NotIn predicate on the "created_by_user_login" field.
func CreatedByUserLoginNotIn(vs ...string) predicate.Shipment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shipment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedByUserLogin), v...))
	})
}

// CreatedByUserLoginGT applies the GT predicate on the "created_by_user_login" field.
func CreatedByUserLoginGT(v string) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedByUserLogin), v))
	})
}

// CreatedByUserLoginGTE applies the GTE predicate on the "created_by_user_login" field.
func CreatedByUserLoginGTE(v string) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedByUserLogin), v))
	})
}

// CreatedByUserLoginLT applies the LT predicate on the "created_by_user_login" field.
func CreatedByUserLoginLT(v string) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedByUserLogin), v))
	})
}

// CreatedByUserLoginLTE applies the LTE predicate on the "created_by_user_login" field.
func CreatedByUserLoginLTE(v string) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedByUserLogin), v))
	})
}

// CreatedByUserLoginContains applies the Contains predicate on the "created_by_user_login" field.
func CreatedByUserLoginContains(v string) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCreatedByUserLogin), v))
	})
}

// CreatedByUserLoginHasPrefix applies the HasPrefix predicate on the "created_by_user_login" field.
func CreatedByUserLoginHasPrefix(v string) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCreatedByUserLogin), v))
	})
}

// CreatedByUserLoginHasSuffix applies the HasSuffix predicate on the "created_by_user_login" field.
func CreatedByUserLoginHasSuffix(v string) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCreatedByUserLogin), v))
	})
}

// CreatedByUserLoginIsNil applies the IsNil predicate on the "created_by_user_login" field.
func CreatedByUserLoginIsNil() predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreatedByUserLogin)))
	})
}

// CreatedByUserLoginNotNil applies the NotNil predicate on the "created_by_user_login" field.
func CreatedByUserLoginNotNil() predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreatedByUserLogin)))
	})
}

// CreatedByUserLoginEqualFold applies the EqualFold predicate on the "created_by_user_login" field.
func CreatedByUserLoginEqualFold(v string) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCreatedByUserLogin), v))
	})
}

// CreatedByUserLoginContainsFold applies the ContainsFold predicate on the "created_by_user_login" field.
func CreatedByUserLoginContainsFold(v string) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCreatedByUserLogin), v))
	})
}

// LastModifiedDateEQ applies the EQ predicate on the "last_modified_date" field.
func LastModifiedDateEQ(v time.Time) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastModifiedDate), v))
	})
}

// LastModifiedDateNEQ applies the NEQ predicate on the "last_modified_date" field.
func LastModifiedDateNEQ(v time.Time) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLastModifiedDate), v))
	})
}

// LastModifiedDateIn applies the In predicate on the "last_modified_date" field.
func LastModifiedDateIn(vs ...time.Time) predicate.Shipment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shipment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLastModifiedDate), v...))
	})
}

// LastModifiedDateNotIn applies the NotIn predicate on the "last_modified_date" field.
func LastModifiedDateNotIn(vs ...time.Time) predicate.Shipment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shipment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLastModifiedDate), v...))
	})
}

// LastModifiedDateGT applies the GT predicate on the "last_modified_date" field.
func LastModifiedDateGT(v time.Time) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLastModifiedDate), v))
	})
}

// LastModifiedDateGTE applies the GTE predicate on the "last_modified_date" field.
func LastModifiedDateGTE(v time.Time) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLastModifiedDate), v))
	})
}

// LastModifiedDateLT applies the LT predicate on the "last_modified_date" field.
func LastModifiedDateLT(v time.Time) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLastModifiedDate), v))
	})
}

// LastModifiedDateLTE applies the LTE predicate on the "last_modified_date" field.
func LastModifiedDateLTE(v time.Time) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLastModifiedDate), v))
	})
}

// LastModifiedDateIsNil applies the IsNil predicate on the "last_modified_date" field.
func LastModifiedDateIsNil() predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLastModifiedDate)))
	})
}

// LastModifiedDateNotNil applies the NotNil predicate on the "last_modified_date" field.
func LastModifiedDateNotNil() predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLastModifiedDate)))
	})
}

// LastModifiedByUserLoginEQ applies the EQ predicate on the "last_modified_by_user_login" field.
func LastModifiedByUserLoginEQ(v string) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastModifiedByUserLogin), v))
	})
}

// LastModifiedByUserLoginNEQ applies the NEQ predicate on the "last_modified_by_user_login" field.
func LastModifiedByUserLoginNEQ(v string) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLastModifiedByUserLogin), v))
	})
}

// LastModifiedByUserLoginIn applies the In predicate on the "last_modified_by_user_login" field.
func LastModifiedByUserLoginIn(vs ...string) predicate.Shipment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shipment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLastModifiedByUserLogin), v...))
	})
}

// LastModifiedByUserLoginNotIn applies the NotIn predicate on the "last_modified_by_user_login" field.
func LastModifiedByUserLoginNotIn(vs ...string) predicate.Shipment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shipment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLastModifiedByUserLogin), v...))
	})
}

// LastModifiedByUserLoginGT applies the GT predicate on the "last_modified_by_user_login" field.
func LastModifiedByUserLoginGT(v string) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLastModifiedByUserLogin), v))
	})
}

// LastModifiedByUserLoginGTE applies the GTE predicate on the "last_modified_by_user_login" field.
func LastModifiedByUserLoginGTE(v string) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLastModifiedByUserLogin), v))
	})
}

// LastModifiedByUserLoginLT applies the LT predicate on the "last_modified_by_user_login" field.
func LastModifiedByUserLoginLT(v string) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLastModifiedByUserLogin), v))
	})
}

// LastModifiedByUserLoginLTE applies the LTE predicate on the "last_modified_by_user_login" field.
func LastModifiedByUserLoginLTE(v string) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLastModifiedByUserLogin), v))
	})
}

// LastModifiedByUserLoginContains applies the Contains predicate on the "last_modified_by_user_login" field.
func LastModifiedByUserLoginContains(v string) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLastModifiedByUserLogin), v))
	})
}

// LastModifiedByUserLoginHasPrefix applies the HasPrefix predicate on the "last_modified_by_user_login" field.
func LastModifiedByUserLoginHasPrefix(v string) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLastModifiedByUserLogin), v))
	})
}

// LastModifiedByUserLoginHasSuffix applies the HasSuffix predicate on the "last_modified_by_user_login" field.
func LastModifiedByUserLoginHasSuffix(v string) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLastModifiedByUserLogin), v))
	})
}

// LastModifiedByUserLoginIsNil applies the IsNil predicate on the "last_modified_by_user_login" field.
func LastModifiedByUserLoginIsNil() predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLastModifiedByUserLogin)))
	})
}

// LastModifiedByUserLoginNotNil applies the NotNil predicate on the "last_modified_by_user_login" field.
func LastModifiedByUserLoginNotNil() predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLastModifiedByUserLogin)))
	})
}

// LastModifiedByUserLoginEqualFold applies the EqualFold predicate on the "last_modified_by_user_login" field.
func LastModifiedByUserLoginEqualFold(v string) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLastModifiedByUserLogin), v))
	})
}

// LastModifiedByUserLoginContainsFold applies the ContainsFold predicate on the "last_modified_by_user_login" field.
func LastModifiedByUserLoginContainsFold(v string) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLastModifiedByUserLogin), v))
	})
}

// HasPrimaryOrderHeader applies the HasEdge predicate on the "primary_order_header" edge.
func HasPrimaryOrderHeader() predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PrimaryOrderHeaderTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PrimaryOrderHeaderTable, PrimaryOrderHeaderColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPrimaryOrderHeaderWith applies the HasEdge predicate on the "primary_order_header" edge with a given conditions (other predicates).
func HasPrimaryOrderHeaderWith(preds ...predicate.OrderHeader) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PrimaryOrderHeaderInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PrimaryOrderHeaderTable, PrimaryOrderHeaderColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPrimaryOrderItemShipGroup applies the HasEdge predicate on the "primary_order_item_ship_group" edge.
func HasPrimaryOrderItemShipGroup() predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PrimaryOrderItemShipGroupTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PrimaryOrderItemShipGroupTable, PrimaryOrderItemShipGroupColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPrimaryOrderItemShipGroupWith applies the HasEdge predicate on the "primary_order_item_ship_group" edge with a given conditions (other predicates).
func HasPrimaryOrderItemShipGroupWith(preds ...predicate.OrderItemShipGroup) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PrimaryOrderItemShipGroupInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PrimaryOrderItemShipGroupTable, PrimaryOrderItemShipGroupColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasItemIssuances applies the HasEdge predicate on the "item_issuances" edge.
func HasItemIssuances() predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ItemIssuancesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ItemIssuancesTable, ItemIssuancesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasItemIssuancesWith applies the HasEdge predicate on the "item_issuances" edge with a given conditions (other predicates).
func HasItemIssuancesWith(preds ...predicate.ItemIssuance) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ItemIssuancesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ItemIssuancesTable, ItemIssuancesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasShipmentItems applies the HasEdge predicate on the "shipment_items" edge.
func HasShipmentItems() predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ShipmentItemsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ShipmentItemsTable, ShipmentItemsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasShipmentItemsWith applies the HasEdge predicate on the "shipment_items" edge with a given conditions (other predicates).
func HasShipmentItemsWith(preds ...predicate.ShipmentItem) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ShipmentItemsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ShipmentItemsTable, ShipmentItemsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Shipment) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Shipment) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Shipment) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		p(s.Not())
	})
}
