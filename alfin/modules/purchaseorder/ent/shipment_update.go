// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/itemissuance"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/orderheader"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/orderitemshipgroup"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/predicate"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/shipment"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/shipmentitem"
)

// ShipmentUpdate is the builder for updating Shipment entities.
type ShipmentUpdate struct {
	config
	hooks    []Hook
	mutation *ShipmentMutation
}

// Where adds a new predicate for the ShipmentUpdate builder.
func (su *ShipmentUpdate) Where(ps ...predicate.Shipment) *ShipmentUpdate {
	su.mutation.predicates = append(su.mutation.predicates, ps...)
	return su
}

// SetShipmentTypeID sets the "shipment_type_id" field.
func (su *ShipmentUpdate) SetShipmentTypeID(i int) *ShipmentUpdate {
	su.mutation.ResetShipmentTypeID()
	su.mutation.SetShipmentTypeID(i)
	return su
}

// SetNillableShipmentTypeID sets the "shipment_type_id" field if the given value is not nil.
func (su *ShipmentUpdate) SetNillableShipmentTypeID(i *int) *ShipmentUpdate {
	if i != nil {
		su.SetShipmentTypeID(*i)
	}
	return su
}

// AddShipmentTypeID adds i to the "shipment_type_id" field.
func (su *ShipmentUpdate) AddShipmentTypeID(i int) *ShipmentUpdate {
	su.mutation.AddShipmentTypeID(i)
	return su
}

// ClearShipmentTypeID clears the value of the "shipment_type_id" field.
func (su *ShipmentUpdate) ClearShipmentTypeID() *ShipmentUpdate {
	su.mutation.ClearShipmentTypeID()
	return su
}

// SetStatusID sets the "status_id" field.
func (su *ShipmentUpdate) SetStatusID(i int) *ShipmentUpdate {
	su.mutation.ResetStatusID()
	su.mutation.SetStatusID(i)
	return su
}

// SetNillableStatusID sets the "status_id" field if the given value is not nil.
func (su *ShipmentUpdate) SetNillableStatusID(i *int) *ShipmentUpdate {
	if i != nil {
		su.SetStatusID(*i)
	}
	return su
}

// AddStatusID adds i to the "status_id" field.
func (su *ShipmentUpdate) AddStatusID(i int) *ShipmentUpdate {
	su.mutation.AddStatusID(i)
	return su
}

// ClearStatusID clears the value of the "status_id" field.
func (su *ShipmentUpdate) ClearStatusID() *ShipmentUpdate {
	su.mutation.ClearStatusID()
	return su
}

// SetPrimaryReturnID sets the "primary_return_id" field.
func (su *ShipmentUpdate) SetPrimaryReturnID(i int) *ShipmentUpdate {
	su.mutation.ResetPrimaryReturnID()
	su.mutation.SetPrimaryReturnID(i)
	return su
}

// SetNillablePrimaryReturnID sets the "primary_return_id" field if the given value is not nil.
func (su *ShipmentUpdate) SetNillablePrimaryReturnID(i *int) *ShipmentUpdate {
	if i != nil {
		su.SetPrimaryReturnID(*i)
	}
	return su
}

// AddPrimaryReturnID adds i to the "primary_return_id" field.
func (su *ShipmentUpdate) AddPrimaryReturnID(i int) *ShipmentUpdate {
	su.mutation.AddPrimaryReturnID(i)
	return su
}

// ClearPrimaryReturnID clears the value of the "primary_return_id" field.
func (su *ShipmentUpdate) ClearPrimaryReturnID() *ShipmentUpdate {
	su.mutation.ClearPrimaryReturnID()
	return su
}

// SetPrimaryShipGroupSeqID sets the "primary_ship_group_seq_id" field.
func (su *ShipmentUpdate) SetPrimaryShipGroupSeqID(i int) *ShipmentUpdate {
	su.mutation.ResetPrimaryShipGroupSeqID()
	su.mutation.SetPrimaryShipGroupSeqID(i)
	return su
}

// SetNillablePrimaryShipGroupSeqID sets the "primary_ship_group_seq_id" field if the given value is not nil.
func (su *ShipmentUpdate) SetNillablePrimaryShipGroupSeqID(i *int) *ShipmentUpdate {
	if i != nil {
		su.SetPrimaryShipGroupSeqID(*i)
	}
	return su
}

// AddPrimaryShipGroupSeqID adds i to the "primary_ship_group_seq_id" field.
func (su *ShipmentUpdate) AddPrimaryShipGroupSeqID(i int) *ShipmentUpdate {
	su.mutation.AddPrimaryShipGroupSeqID(i)
	return su
}

// ClearPrimaryShipGroupSeqID clears the value of the "primary_ship_group_seq_id" field.
func (su *ShipmentUpdate) ClearPrimaryShipGroupSeqID() *ShipmentUpdate {
	su.mutation.ClearPrimaryShipGroupSeqID()
	return su
}

// SetPicklistBinID sets the "picklist_bin_id" field.
func (su *ShipmentUpdate) SetPicklistBinID(i int) *ShipmentUpdate {
	su.mutation.ResetPicklistBinID()
	su.mutation.SetPicklistBinID(i)
	return su
}

// SetNillablePicklistBinID sets the "picklist_bin_id" field if the given value is not nil.
func (su *ShipmentUpdate) SetNillablePicklistBinID(i *int) *ShipmentUpdate {
	if i != nil {
		su.SetPicklistBinID(*i)
	}
	return su
}

// AddPicklistBinID adds i to the "picklist_bin_id" field.
func (su *ShipmentUpdate) AddPicklistBinID(i int) *ShipmentUpdate {
	su.mutation.AddPicklistBinID(i)
	return su
}

// ClearPicklistBinID clears the value of the "picklist_bin_id" field.
func (su *ShipmentUpdate) ClearPicklistBinID() *ShipmentUpdate {
	su.mutation.ClearPicklistBinID()
	return su
}

// SetEstimatedReadyDate sets the "estimated_ready_date" field.
func (su *ShipmentUpdate) SetEstimatedReadyDate(t time.Time) *ShipmentUpdate {
	su.mutation.SetEstimatedReadyDate(t)
	return su
}

// SetNillableEstimatedReadyDate sets the "estimated_ready_date" field if the given value is not nil.
func (su *ShipmentUpdate) SetNillableEstimatedReadyDate(t *time.Time) *ShipmentUpdate {
	if t != nil {
		su.SetEstimatedReadyDate(*t)
	}
	return su
}

// ClearEstimatedReadyDate clears the value of the "estimated_ready_date" field.
func (su *ShipmentUpdate) ClearEstimatedReadyDate() *ShipmentUpdate {
	su.mutation.ClearEstimatedReadyDate()
	return su
}

// SetEstimatedShipDate sets the "estimated_ship_date" field.
func (su *ShipmentUpdate) SetEstimatedShipDate(t time.Time) *ShipmentUpdate {
	su.mutation.SetEstimatedShipDate(t)
	return su
}

// SetNillableEstimatedShipDate sets the "estimated_ship_date" field if the given value is not nil.
func (su *ShipmentUpdate) SetNillableEstimatedShipDate(t *time.Time) *ShipmentUpdate {
	if t != nil {
		su.SetEstimatedShipDate(*t)
	}
	return su
}

// ClearEstimatedShipDate clears the value of the "estimated_ship_date" field.
func (su *ShipmentUpdate) ClearEstimatedShipDate() *ShipmentUpdate {
	su.mutation.ClearEstimatedShipDate()
	return su
}

// SetEstimatedShipWorkEffID sets the "estimated_ship_work_eff_id" field.
func (su *ShipmentUpdate) SetEstimatedShipWorkEffID(i int) *ShipmentUpdate {
	su.mutation.ResetEstimatedShipWorkEffID()
	su.mutation.SetEstimatedShipWorkEffID(i)
	return su
}

// SetNillableEstimatedShipWorkEffID sets the "estimated_ship_work_eff_id" field if the given value is not nil.
func (su *ShipmentUpdate) SetNillableEstimatedShipWorkEffID(i *int) *ShipmentUpdate {
	if i != nil {
		su.SetEstimatedShipWorkEffID(*i)
	}
	return su
}

// AddEstimatedShipWorkEffID adds i to the "estimated_ship_work_eff_id" field.
func (su *ShipmentUpdate) AddEstimatedShipWorkEffID(i int) *ShipmentUpdate {
	su.mutation.AddEstimatedShipWorkEffID(i)
	return su
}

// ClearEstimatedShipWorkEffID clears the value of the "estimated_ship_work_eff_id" field.
func (su *ShipmentUpdate) ClearEstimatedShipWorkEffID() *ShipmentUpdate {
	su.mutation.ClearEstimatedShipWorkEffID()
	return su
}

// SetEstimatedArrivalDate sets the "estimated_arrival_date" field.
func (su *ShipmentUpdate) SetEstimatedArrivalDate(t time.Time) *ShipmentUpdate {
	su.mutation.SetEstimatedArrivalDate(t)
	return su
}

// SetNillableEstimatedArrivalDate sets the "estimated_arrival_date" field if the given value is not nil.
func (su *ShipmentUpdate) SetNillableEstimatedArrivalDate(t *time.Time) *ShipmentUpdate {
	if t != nil {
		su.SetEstimatedArrivalDate(*t)
	}
	return su
}

// ClearEstimatedArrivalDate clears the value of the "estimated_arrival_date" field.
func (su *ShipmentUpdate) ClearEstimatedArrivalDate() *ShipmentUpdate {
	su.mutation.ClearEstimatedArrivalDate()
	return su
}

// SetEstimatedArrivalWorkEffID sets the "estimated_arrival_work_eff_id" field.
func (su *ShipmentUpdate) SetEstimatedArrivalWorkEffID(i int) *ShipmentUpdate {
	su.mutation.ResetEstimatedArrivalWorkEffID()
	su.mutation.SetEstimatedArrivalWorkEffID(i)
	return su
}

// SetNillableEstimatedArrivalWorkEffID sets the "estimated_arrival_work_eff_id" field if the given value is not nil.
func (su *ShipmentUpdate) SetNillableEstimatedArrivalWorkEffID(i *int) *ShipmentUpdate {
	if i != nil {
		su.SetEstimatedArrivalWorkEffID(*i)
	}
	return su
}

// AddEstimatedArrivalWorkEffID adds i to the "estimated_arrival_work_eff_id" field.
func (su *ShipmentUpdate) AddEstimatedArrivalWorkEffID(i int) *ShipmentUpdate {
	su.mutation.AddEstimatedArrivalWorkEffID(i)
	return su
}

// ClearEstimatedArrivalWorkEffID clears the value of the "estimated_arrival_work_eff_id" field.
func (su *ShipmentUpdate) ClearEstimatedArrivalWorkEffID() *ShipmentUpdate {
	su.mutation.ClearEstimatedArrivalWorkEffID()
	return su
}

// SetLatestCancelDate sets the "latest_cancel_date" field.
func (su *ShipmentUpdate) SetLatestCancelDate(t time.Time) *ShipmentUpdate {
	su.mutation.SetLatestCancelDate(t)
	return su
}

// SetNillableLatestCancelDate sets the "latest_cancel_date" field if the given value is not nil.
func (su *ShipmentUpdate) SetNillableLatestCancelDate(t *time.Time) *ShipmentUpdate {
	if t != nil {
		su.SetLatestCancelDate(*t)
	}
	return su
}

// ClearLatestCancelDate clears the value of the "latest_cancel_date" field.
func (su *ShipmentUpdate) ClearLatestCancelDate() *ShipmentUpdate {
	su.mutation.ClearLatestCancelDate()
	return su
}

// SetEstimatedShipCost sets the "estimated_ship_cost" field.
func (su *ShipmentUpdate) SetEstimatedShipCost(f float64) *ShipmentUpdate {
	su.mutation.ResetEstimatedShipCost()
	su.mutation.SetEstimatedShipCost(f)
	return su
}

// SetNillableEstimatedShipCost sets the "estimated_ship_cost" field if the given value is not nil.
func (su *ShipmentUpdate) SetNillableEstimatedShipCost(f *float64) *ShipmentUpdate {
	if f != nil {
		su.SetEstimatedShipCost(*f)
	}
	return su
}

// AddEstimatedShipCost adds f to the "estimated_ship_cost" field.
func (su *ShipmentUpdate) AddEstimatedShipCost(f float64) *ShipmentUpdate {
	su.mutation.AddEstimatedShipCost(f)
	return su
}

// ClearEstimatedShipCost clears the value of the "estimated_ship_cost" field.
func (su *ShipmentUpdate) ClearEstimatedShipCost() *ShipmentUpdate {
	su.mutation.ClearEstimatedShipCost()
	return su
}

// SetCurrencyUomID sets the "currency_uom_id" field.
func (su *ShipmentUpdate) SetCurrencyUomID(i int) *ShipmentUpdate {
	su.mutation.ResetCurrencyUomID()
	su.mutation.SetCurrencyUomID(i)
	return su
}

// SetNillableCurrencyUomID sets the "currency_uom_id" field if the given value is not nil.
func (su *ShipmentUpdate) SetNillableCurrencyUomID(i *int) *ShipmentUpdate {
	if i != nil {
		su.SetCurrencyUomID(*i)
	}
	return su
}

// AddCurrencyUomID adds i to the "currency_uom_id" field.
func (su *ShipmentUpdate) AddCurrencyUomID(i int) *ShipmentUpdate {
	su.mutation.AddCurrencyUomID(i)
	return su
}

// ClearCurrencyUomID clears the value of the "currency_uom_id" field.
func (su *ShipmentUpdate) ClearCurrencyUomID() *ShipmentUpdate {
	su.mutation.ClearCurrencyUomID()
	return su
}

// SetHandlingInstructions sets the "handling_instructions" field.
func (su *ShipmentUpdate) SetHandlingInstructions(s string) *ShipmentUpdate {
	su.mutation.SetHandlingInstructions(s)
	return su
}

// SetNillableHandlingInstructions sets the "handling_instructions" field if the given value is not nil.
func (su *ShipmentUpdate) SetNillableHandlingInstructions(s *string) *ShipmentUpdate {
	if s != nil {
		su.SetHandlingInstructions(*s)
	}
	return su
}

// ClearHandlingInstructions clears the value of the "handling_instructions" field.
func (su *ShipmentUpdate) ClearHandlingInstructions() *ShipmentUpdate {
	su.mutation.ClearHandlingInstructions()
	return su
}

// SetOriginFacilityID sets the "origin_facility_id" field.
func (su *ShipmentUpdate) SetOriginFacilityID(i int) *ShipmentUpdate {
	su.mutation.ResetOriginFacilityID()
	su.mutation.SetOriginFacilityID(i)
	return su
}

// SetNillableOriginFacilityID sets the "origin_facility_id" field if the given value is not nil.
func (su *ShipmentUpdate) SetNillableOriginFacilityID(i *int) *ShipmentUpdate {
	if i != nil {
		su.SetOriginFacilityID(*i)
	}
	return su
}

// AddOriginFacilityID adds i to the "origin_facility_id" field.
func (su *ShipmentUpdate) AddOriginFacilityID(i int) *ShipmentUpdate {
	su.mutation.AddOriginFacilityID(i)
	return su
}

// ClearOriginFacilityID clears the value of the "origin_facility_id" field.
func (su *ShipmentUpdate) ClearOriginFacilityID() *ShipmentUpdate {
	su.mutation.ClearOriginFacilityID()
	return su
}

// SetDestinationFacilityID sets the "destination_facility_id" field.
func (su *ShipmentUpdate) SetDestinationFacilityID(i int) *ShipmentUpdate {
	su.mutation.ResetDestinationFacilityID()
	su.mutation.SetDestinationFacilityID(i)
	return su
}

// SetNillableDestinationFacilityID sets the "destination_facility_id" field if the given value is not nil.
func (su *ShipmentUpdate) SetNillableDestinationFacilityID(i *int) *ShipmentUpdate {
	if i != nil {
		su.SetDestinationFacilityID(*i)
	}
	return su
}

// AddDestinationFacilityID adds i to the "destination_facility_id" field.
func (su *ShipmentUpdate) AddDestinationFacilityID(i int) *ShipmentUpdate {
	su.mutation.AddDestinationFacilityID(i)
	return su
}

// ClearDestinationFacilityID clears the value of the "destination_facility_id" field.
func (su *ShipmentUpdate) ClearDestinationFacilityID() *ShipmentUpdate {
	su.mutation.ClearDestinationFacilityID()
	return su
}

// SetOriginContactMechID sets the "origin_contact_mech_id" field.
func (su *ShipmentUpdate) SetOriginContactMechID(i int) *ShipmentUpdate {
	su.mutation.ResetOriginContactMechID()
	su.mutation.SetOriginContactMechID(i)
	return su
}

// SetNillableOriginContactMechID sets the "origin_contact_mech_id" field if the given value is not nil.
func (su *ShipmentUpdate) SetNillableOriginContactMechID(i *int) *ShipmentUpdate {
	if i != nil {
		su.SetOriginContactMechID(*i)
	}
	return su
}

// AddOriginContactMechID adds i to the "origin_contact_mech_id" field.
func (su *ShipmentUpdate) AddOriginContactMechID(i int) *ShipmentUpdate {
	su.mutation.AddOriginContactMechID(i)
	return su
}

// ClearOriginContactMechID clears the value of the "origin_contact_mech_id" field.
func (su *ShipmentUpdate) ClearOriginContactMechID() *ShipmentUpdate {
	su.mutation.ClearOriginContactMechID()
	return su
}

// SetOriginTelecomNumberID sets the "origin_telecom_number_id" field.
func (su *ShipmentUpdate) SetOriginTelecomNumberID(i int) *ShipmentUpdate {
	su.mutation.ResetOriginTelecomNumberID()
	su.mutation.SetOriginTelecomNumberID(i)
	return su
}

// SetNillableOriginTelecomNumberID sets the "origin_telecom_number_id" field if the given value is not nil.
func (su *ShipmentUpdate) SetNillableOriginTelecomNumberID(i *int) *ShipmentUpdate {
	if i != nil {
		su.SetOriginTelecomNumberID(*i)
	}
	return su
}

// AddOriginTelecomNumberID adds i to the "origin_telecom_number_id" field.
func (su *ShipmentUpdate) AddOriginTelecomNumberID(i int) *ShipmentUpdate {
	su.mutation.AddOriginTelecomNumberID(i)
	return su
}

// ClearOriginTelecomNumberID clears the value of the "origin_telecom_number_id" field.
func (su *ShipmentUpdate) ClearOriginTelecomNumberID() *ShipmentUpdate {
	su.mutation.ClearOriginTelecomNumberID()
	return su
}

// SetDestinationContactMechID sets the "destination_contact_mech_id" field.
func (su *ShipmentUpdate) SetDestinationContactMechID(i int) *ShipmentUpdate {
	su.mutation.ResetDestinationContactMechID()
	su.mutation.SetDestinationContactMechID(i)
	return su
}

// SetNillableDestinationContactMechID sets the "destination_contact_mech_id" field if the given value is not nil.
func (su *ShipmentUpdate) SetNillableDestinationContactMechID(i *int) *ShipmentUpdate {
	if i != nil {
		su.SetDestinationContactMechID(*i)
	}
	return su
}

// AddDestinationContactMechID adds i to the "destination_contact_mech_id" field.
func (su *ShipmentUpdate) AddDestinationContactMechID(i int) *ShipmentUpdate {
	su.mutation.AddDestinationContactMechID(i)
	return su
}

// ClearDestinationContactMechID clears the value of the "destination_contact_mech_id" field.
func (su *ShipmentUpdate) ClearDestinationContactMechID() *ShipmentUpdate {
	su.mutation.ClearDestinationContactMechID()
	return su
}

// SetDestinationTelecomNumberID sets the "destination_telecom_number_id" field.
func (su *ShipmentUpdate) SetDestinationTelecomNumberID(i int) *ShipmentUpdate {
	su.mutation.ResetDestinationTelecomNumberID()
	su.mutation.SetDestinationTelecomNumberID(i)
	return su
}

// SetNillableDestinationTelecomNumberID sets the "destination_telecom_number_id" field if the given value is not nil.
func (su *ShipmentUpdate) SetNillableDestinationTelecomNumberID(i *int) *ShipmentUpdate {
	if i != nil {
		su.SetDestinationTelecomNumberID(*i)
	}
	return su
}

// AddDestinationTelecomNumberID adds i to the "destination_telecom_number_id" field.
func (su *ShipmentUpdate) AddDestinationTelecomNumberID(i int) *ShipmentUpdate {
	su.mutation.AddDestinationTelecomNumberID(i)
	return su
}

// ClearDestinationTelecomNumberID clears the value of the "destination_telecom_number_id" field.
func (su *ShipmentUpdate) ClearDestinationTelecomNumberID() *ShipmentUpdate {
	su.mutation.ClearDestinationTelecomNumberID()
	return su
}

// SetPartyIDTo sets the "party_id_to" field.
func (su *ShipmentUpdate) SetPartyIDTo(i int) *ShipmentUpdate {
	su.mutation.ResetPartyIDTo()
	su.mutation.SetPartyIDTo(i)
	return su
}

// SetNillablePartyIDTo sets the "party_id_to" field if the given value is not nil.
func (su *ShipmentUpdate) SetNillablePartyIDTo(i *int) *ShipmentUpdate {
	if i != nil {
		su.SetPartyIDTo(*i)
	}
	return su
}

// AddPartyIDTo adds i to the "party_id_to" field.
func (su *ShipmentUpdate) AddPartyIDTo(i int) *ShipmentUpdate {
	su.mutation.AddPartyIDTo(i)
	return su
}

// ClearPartyIDTo clears the value of the "party_id_to" field.
func (su *ShipmentUpdate) ClearPartyIDTo() *ShipmentUpdate {
	su.mutation.ClearPartyIDTo()
	return su
}

// SetPartyIDFrom sets the "party_id_from" field.
func (su *ShipmentUpdate) SetPartyIDFrom(i int) *ShipmentUpdate {
	su.mutation.ResetPartyIDFrom()
	su.mutation.SetPartyIDFrom(i)
	return su
}

// SetNillablePartyIDFrom sets the "party_id_from" field if the given value is not nil.
func (su *ShipmentUpdate) SetNillablePartyIDFrom(i *int) *ShipmentUpdate {
	if i != nil {
		su.SetPartyIDFrom(*i)
	}
	return su
}

// AddPartyIDFrom adds i to the "party_id_from" field.
func (su *ShipmentUpdate) AddPartyIDFrom(i int) *ShipmentUpdate {
	su.mutation.AddPartyIDFrom(i)
	return su
}

// ClearPartyIDFrom clears the value of the "party_id_from" field.
func (su *ShipmentUpdate) ClearPartyIDFrom() *ShipmentUpdate {
	su.mutation.ClearPartyIDFrom()
	return su
}

// SetAdditionalShippingCharge sets the "additional_shipping_charge" field.
func (su *ShipmentUpdate) SetAdditionalShippingCharge(f float64) *ShipmentUpdate {
	su.mutation.ResetAdditionalShippingCharge()
	su.mutation.SetAdditionalShippingCharge(f)
	return su
}

// SetNillableAdditionalShippingCharge sets the "additional_shipping_charge" field if the given value is not nil.
func (su *ShipmentUpdate) SetNillableAdditionalShippingCharge(f *float64) *ShipmentUpdate {
	if f != nil {
		su.SetAdditionalShippingCharge(*f)
	}
	return su
}

// AddAdditionalShippingCharge adds f to the "additional_shipping_charge" field.
func (su *ShipmentUpdate) AddAdditionalShippingCharge(f float64) *ShipmentUpdate {
	su.mutation.AddAdditionalShippingCharge(f)
	return su
}

// ClearAdditionalShippingCharge clears the value of the "additional_shipping_charge" field.
func (su *ShipmentUpdate) ClearAdditionalShippingCharge() *ShipmentUpdate {
	su.mutation.ClearAdditionalShippingCharge()
	return su
}

// SetAddtlShippingChargeDesc sets the "addtl_shipping_charge_desc" field.
func (su *ShipmentUpdate) SetAddtlShippingChargeDesc(s string) *ShipmentUpdate {
	su.mutation.SetAddtlShippingChargeDesc(s)
	return su
}

// SetNillableAddtlShippingChargeDesc sets the "addtl_shipping_charge_desc" field if the given value is not nil.
func (su *ShipmentUpdate) SetNillableAddtlShippingChargeDesc(s *string) *ShipmentUpdate {
	if s != nil {
		su.SetAddtlShippingChargeDesc(*s)
	}
	return su
}

// ClearAddtlShippingChargeDesc clears the value of the "addtl_shipping_charge_desc" field.
func (su *ShipmentUpdate) ClearAddtlShippingChargeDesc() *ShipmentUpdate {
	su.mutation.ClearAddtlShippingChargeDesc()
	return su
}

// SetCreatedDate sets the "created_date" field.
func (su *ShipmentUpdate) SetCreatedDate(t time.Time) *ShipmentUpdate {
	su.mutation.SetCreatedDate(t)
	return su
}

// SetNillableCreatedDate sets the "created_date" field if the given value is not nil.
func (su *ShipmentUpdate) SetNillableCreatedDate(t *time.Time) *ShipmentUpdate {
	if t != nil {
		su.SetCreatedDate(*t)
	}
	return su
}

// ClearCreatedDate clears the value of the "created_date" field.
func (su *ShipmentUpdate) ClearCreatedDate() *ShipmentUpdate {
	su.mutation.ClearCreatedDate()
	return su
}

// SetCreatedByUserLogin sets the "created_by_user_login" field.
func (su *ShipmentUpdate) SetCreatedByUserLogin(s string) *ShipmentUpdate {
	su.mutation.SetCreatedByUserLogin(s)
	return su
}

// SetNillableCreatedByUserLogin sets the "created_by_user_login" field if the given value is not nil.
func (su *ShipmentUpdate) SetNillableCreatedByUserLogin(s *string) *ShipmentUpdate {
	if s != nil {
		su.SetCreatedByUserLogin(*s)
	}
	return su
}

// ClearCreatedByUserLogin clears the value of the "created_by_user_login" field.
func (su *ShipmentUpdate) ClearCreatedByUserLogin() *ShipmentUpdate {
	su.mutation.ClearCreatedByUserLogin()
	return su
}

// SetLastModifiedDate sets the "last_modified_date" field.
func (su *ShipmentUpdate) SetLastModifiedDate(t time.Time) *ShipmentUpdate {
	su.mutation.SetLastModifiedDate(t)
	return su
}

// SetNillableLastModifiedDate sets the "last_modified_date" field if the given value is not nil.
func (su *ShipmentUpdate) SetNillableLastModifiedDate(t *time.Time) *ShipmentUpdate {
	if t != nil {
		su.SetLastModifiedDate(*t)
	}
	return su
}

// ClearLastModifiedDate clears the value of the "last_modified_date" field.
func (su *ShipmentUpdate) ClearLastModifiedDate() *ShipmentUpdate {
	su.mutation.ClearLastModifiedDate()
	return su
}

// SetLastModifiedByUserLogin sets the "last_modified_by_user_login" field.
func (su *ShipmentUpdate) SetLastModifiedByUserLogin(s string) *ShipmentUpdate {
	su.mutation.SetLastModifiedByUserLogin(s)
	return su
}

// SetNillableLastModifiedByUserLogin sets the "last_modified_by_user_login" field if the given value is not nil.
func (su *ShipmentUpdate) SetNillableLastModifiedByUserLogin(s *string) *ShipmentUpdate {
	if s != nil {
		su.SetLastModifiedByUserLogin(*s)
	}
	return su
}

// ClearLastModifiedByUserLogin clears the value of the "last_modified_by_user_login" field.
func (su *ShipmentUpdate) ClearLastModifiedByUserLogin() *ShipmentUpdate {
	su.mutation.ClearLastModifiedByUserLogin()
	return su
}

// SetPrimaryOrderHeaderID sets the "primary_order_header" edge to the OrderHeader entity by ID.
func (su *ShipmentUpdate) SetPrimaryOrderHeaderID(id int) *ShipmentUpdate {
	su.mutation.SetPrimaryOrderHeaderID(id)
	return su
}

// SetNillablePrimaryOrderHeaderID sets the "primary_order_header" edge to the OrderHeader entity by ID if the given value is not nil.
func (su *ShipmentUpdate) SetNillablePrimaryOrderHeaderID(id *int) *ShipmentUpdate {
	if id != nil {
		su = su.SetPrimaryOrderHeaderID(*id)
	}
	return su
}

// SetPrimaryOrderHeader sets the "primary_order_header" edge to the OrderHeader entity.
func (su *ShipmentUpdate) SetPrimaryOrderHeader(o *OrderHeader) *ShipmentUpdate {
	return su.SetPrimaryOrderHeaderID(o.ID)
}

// SetPrimaryOrderItemShipGroupID sets the "primary_order_item_ship_group" edge to the OrderItemShipGroup entity by ID.
func (su *ShipmentUpdate) SetPrimaryOrderItemShipGroupID(id int) *ShipmentUpdate {
	su.mutation.SetPrimaryOrderItemShipGroupID(id)
	return su
}

// SetNillablePrimaryOrderItemShipGroupID sets the "primary_order_item_ship_group" edge to the OrderItemShipGroup entity by ID if the given value is not nil.
func (su *ShipmentUpdate) SetNillablePrimaryOrderItemShipGroupID(id *int) *ShipmentUpdate {
	if id != nil {
		su = su.SetPrimaryOrderItemShipGroupID(*id)
	}
	return su
}

// SetPrimaryOrderItemShipGroup sets the "primary_order_item_ship_group" edge to the OrderItemShipGroup entity.
func (su *ShipmentUpdate) SetPrimaryOrderItemShipGroup(o *OrderItemShipGroup) *ShipmentUpdate {
	return su.SetPrimaryOrderItemShipGroupID(o.ID)
}

// AddItemIssuanceIDs adds the "item_issuances" edge to the ItemIssuance entity by IDs.
func (su *ShipmentUpdate) AddItemIssuanceIDs(ids ...int) *ShipmentUpdate {
	su.mutation.AddItemIssuanceIDs(ids...)
	return su
}

// AddItemIssuances adds the "item_issuances" edges to the ItemIssuance entity.
func (su *ShipmentUpdate) AddItemIssuances(i ...*ItemIssuance) *ShipmentUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return su.AddItemIssuanceIDs(ids...)
}

// AddShipmentItemIDs adds the "shipment_items" edge to the ShipmentItem entity by IDs.
func (su *ShipmentUpdate) AddShipmentItemIDs(ids ...int) *ShipmentUpdate {
	su.mutation.AddShipmentItemIDs(ids...)
	return su
}

// AddShipmentItems adds the "shipment_items" edges to the ShipmentItem entity.
func (su *ShipmentUpdate) AddShipmentItems(s ...*ShipmentItem) *ShipmentUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.AddShipmentItemIDs(ids...)
}

// Mutation returns the ShipmentMutation object of the builder.
func (su *ShipmentUpdate) Mutation() *ShipmentMutation {
	return su.mutation
}

// ClearPrimaryOrderHeader clears the "primary_order_header" edge to the OrderHeader entity.
func (su *ShipmentUpdate) ClearPrimaryOrderHeader() *ShipmentUpdate {
	su.mutation.ClearPrimaryOrderHeader()
	return su
}

// ClearPrimaryOrderItemShipGroup clears the "primary_order_item_ship_group" edge to the OrderItemShipGroup entity.
func (su *ShipmentUpdate) ClearPrimaryOrderItemShipGroup() *ShipmentUpdate {
	su.mutation.ClearPrimaryOrderItemShipGroup()
	return su
}

// ClearItemIssuances clears all "item_issuances" edges to the ItemIssuance entity.
func (su *ShipmentUpdate) ClearItemIssuances() *ShipmentUpdate {
	su.mutation.ClearItemIssuances()
	return su
}

// RemoveItemIssuanceIDs removes the "item_issuances" edge to ItemIssuance entities by IDs.
func (su *ShipmentUpdate) RemoveItemIssuanceIDs(ids ...int) *ShipmentUpdate {
	su.mutation.RemoveItemIssuanceIDs(ids...)
	return su
}

// RemoveItemIssuances removes "item_issuances" edges to ItemIssuance entities.
func (su *ShipmentUpdate) RemoveItemIssuances(i ...*ItemIssuance) *ShipmentUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return su.RemoveItemIssuanceIDs(ids...)
}

// ClearShipmentItems clears all "shipment_items" edges to the ShipmentItem entity.
func (su *ShipmentUpdate) ClearShipmentItems() *ShipmentUpdate {
	su.mutation.ClearShipmentItems()
	return su
}

// RemoveShipmentItemIDs removes the "shipment_items" edge to ShipmentItem entities by IDs.
func (su *ShipmentUpdate) RemoveShipmentItemIDs(ids ...int) *ShipmentUpdate {
	su.mutation.RemoveShipmentItemIDs(ids...)
	return su
}

// RemoveShipmentItems removes "shipment_items" edges to ShipmentItem entities.
func (su *ShipmentUpdate) RemoveShipmentItems(s ...*ShipmentItem) *ShipmentUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.RemoveShipmentItemIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *ShipmentUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	su.defaults()
	if len(su.hooks) == 0 {
		affected, err = su.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ShipmentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			su.mutation = mutation
			affected, err = su.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(su.hooks) - 1; i >= 0; i-- {
			mut = su.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, su.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (su *ShipmentUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *ShipmentUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *ShipmentUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *ShipmentUpdate) defaults() {
	if _, ok := su.mutation.UpdateTime(); !ok {
		v := shipment.UpdateDefaultUpdateTime()
		su.mutation.SetUpdateTime(v)
	}
}

func (su *ShipmentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   shipment.Table,
			Columns: shipment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: shipment.FieldID,
			},
		},
	}
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: shipment.FieldUpdateTime,
		})
	}
	if value, ok := su.mutation.ShipmentTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shipment.FieldShipmentTypeID,
		})
	}
	if value, ok := su.mutation.AddedShipmentTypeID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shipment.FieldShipmentTypeID,
		})
	}
	if su.mutation.ShipmentTypeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: shipment.FieldShipmentTypeID,
		})
	}
	if value, ok := su.mutation.StatusID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shipment.FieldStatusID,
		})
	}
	if value, ok := su.mutation.AddedStatusID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shipment.FieldStatusID,
		})
	}
	if su.mutation.StatusIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: shipment.FieldStatusID,
		})
	}
	if value, ok := su.mutation.PrimaryReturnID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shipment.FieldPrimaryReturnID,
		})
	}
	if value, ok := su.mutation.AddedPrimaryReturnID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shipment.FieldPrimaryReturnID,
		})
	}
	if su.mutation.PrimaryReturnIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: shipment.FieldPrimaryReturnID,
		})
	}
	if value, ok := su.mutation.PrimaryShipGroupSeqID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shipment.FieldPrimaryShipGroupSeqID,
		})
	}
	if value, ok := su.mutation.AddedPrimaryShipGroupSeqID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shipment.FieldPrimaryShipGroupSeqID,
		})
	}
	if su.mutation.PrimaryShipGroupSeqIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: shipment.FieldPrimaryShipGroupSeqID,
		})
	}
	if value, ok := su.mutation.PicklistBinID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shipment.FieldPicklistBinID,
		})
	}
	if value, ok := su.mutation.AddedPicklistBinID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shipment.FieldPicklistBinID,
		})
	}
	if su.mutation.PicklistBinIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: shipment.FieldPicklistBinID,
		})
	}
	if value, ok := su.mutation.EstimatedReadyDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: shipment.FieldEstimatedReadyDate,
		})
	}
	if su.mutation.EstimatedReadyDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: shipment.FieldEstimatedReadyDate,
		})
	}
	if value, ok := su.mutation.EstimatedShipDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: shipment.FieldEstimatedShipDate,
		})
	}
	if su.mutation.EstimatedShipDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: shipment.FieldEstimatedShipDate,
		})
	}
	if value, ok := su.mutation.EstimatedShipWorkEffID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shipment.FieldEstimatedShipWorkEffID,
		})
	}
	if value, ok := su.mutation.AddedEstimatedShipWorkEffID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shipment.FieldEstimatedShipWorkEffID,
		})
	}
	if su.mutation.EstimatedShipWorkEffIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: shipment.FieldEstimatedShipWorkEffID,
		})
	}
	if value, ok := su.mutation.EstimatedArrivalDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: shipment.FieldEstimatedArrivalDate,
		})
	}
	if su.mutation.EstimatedArrivalDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: shipment.FieldEstimatedArrivalDate,
		})
	}
	if value, ok := su.mutation.EstimatedArrivalWorkEffID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shipment.FieldEstimatedArrivalWorkEffID,
		})
	}
	if value, ok := su.mutation.AddedEstimatedArrivalWorkEffID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shipment.FieldEstimatedArrivalWorkEffID,
		})
	}
	if su.mutation.EstimatedArrivalWorkEffIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: shipment.FieldEstimatedArrivalWorkEffID,
		})
	}
	if value, ok := su.mutation.LatestCancelDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: shipment.FieldLatestCancelDate,
		})
	}
	if su.mutation.LatestCancelDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: shipment.FieldLatestCancelDate,
		})
	}
	if value, ok := su.mutation.EstimatedShipCost(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: shipment.FieldEstimatedShipCost,
		})
	}
	if value, ok := su.mutation.AddedEstimatedShipCost(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: shipment.FieldEstimatedShipCost,
		})
	}
	if su.mutation.EstimatedShipCostCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: shipment.FieldEstimatedShipCost,
		})
	}
	if value, ok := su.mutation.CurrencyUomID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shipment.FieldCurrencyUomID,
		})
	}
	if value, ok := su.mutation.AddedCurrencyUomID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shipment.FieldCurrencyUomID,
		})
	}
	if su.mutation.CurrencyUomIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: shipment.FieldCurrencyUomID,
		})
	}
	if value, ok := su.mutation.HandlingInstructions(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipment.FieldHandlingInstructions,
		})
	}
	if su.mutation.HandlingInstructionsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipment.FieldHandlingInstructions,
		})
	}
	if value, ok := su.mutation.OriginFacilityID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shipment.FieldOriginFacilityID,
		})
	}
	if value, ok := su.mutation.AddedOriginFacilityID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shipment.FieldOriginFacilityID,
		})
	}
	if su.mutation.OriginFacilityIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: shipment.FieldOriginFacilityID,
		})
	}
	if value, ok := su.mutation.DestinationFacilityID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shipment.FieldDestinationFacilityID,
		})
	}
	if value, ok := su.mutation.AddedDestinationFacilityID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shipment.FieldDestinationFacilityID,
		})
	}
	if su.mutation.DestinationFacilityIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: shipment.FieldDestinationFacilityID,
		})
	}
	if value, ok := su.mutation.OriginContactMechID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shipment.FieldOriginContactMechID,
		})
	}
	if value, ok := su.mutation.AddedOriginContactMechID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shipment.FieldOriginContactMechID,
		})
	}
	if su.mutation.OriginContactMechIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: shipment.FieldOriginContactMechID,
		})
	}
	if value, ok := su.mutation.OriginTelecomNumberID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shipment.FieldOriginTelecomNumberID,
		})
	}
	if value, ok := su.mutation.AddedOriginTelecomNumberID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shipment.FieldOriginTelecomNumberID,
		})
	}
	if su.mutation.OriginTelecomNumberIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: shipment.FieldOriginTelecomNumberID,
		})
	}
	if value, ok := su.mutation.DestinationContactMechID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shipment.FieldDestinationContactMechID,
		})
	}
	if value, ok := su.mutation.AddedDestinationContactMechID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shipment.FieldDestinationContactMechID,
		})
	}
	if su.mutation.DestinationContactMechIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: shipment.FieldDestinationContactMechID,
		})
	}
	if value, ok := su.mutation.DestinationTelecomNumberID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shipment.FieldDestinationTelecomNumberID,
		})
	}
	if value, ok := su.mutation.AddedDestinationTelecomNumberID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shipment.FieldDestinationTelecomNumberID,
		})
	}
	if su.mutation.DestinationTelecomNumberIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: shipment.FieldDestinationTelecomNumberID,
		})
	}
	if value, ok := su.mutation.PartyIDTo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shipment.FieldPartyIDTo,
		})
	}
	if value, ok := su.mutation.AddedPartyIDTo(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shipment.FieldPartyIDTo,
		})
	}
	if su.mutation.PartyIDToCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: shipment.FieldPartyIDTo,
		})
	}
	if value, ok := su.mutation.PartyIDFrom(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shipment.FieldPartyIDFrom,
		})
	}
	if value, ok := su.mutation.AddedPartyIDFrom(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shipment.FieldPartyIDFrom,
		})
	}
	if su.mutation.PartyIDFromCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: shipment.FieldPartyIDFrom,
		})
	}
	if value, ok := su.mutation.AdditionalShippingCharge(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: shipment.FieldAdditionalShippingCharge,
		})
	}
	if value, ok := su.mutation.AddedAdditionalShippingCharge(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: shipment.FieldAdditionalShippingCharge,
		})
	}
	if su.mutation.AdditionalShippingChargeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: shipment.FieldAdditionalShippingCharge,
		})
	}
	if value, ok := su.mutation.AddtlShippingChargeDesc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipment.FieldAddtlShippingChargeDesc,
		})
	}
	if su.mutation.AddtlShippingChargeDescCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipment.FieldAddtlShippingChargeDesc,
		})
	}
	if value, ok := su.mutation.CreatedDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: shipment.FieldCreatedDate,
		})
	}
	if su.mutation.CreatedDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: shipment.FieldCreatedDate,
		})
	}
	if value, ok := su.mutation.CreatedByUserLogin(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipment.FieldCreatedByUserLogin,
		})
	}
	if su.mutation.CreatedByUserLoginCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipment.FieldCreatedByUserLogin,
		})
	}
	if value, ok := su.mutation.LastModifiedDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: shipment.FieldLastModifiedDate,
		})
	}
	if su.mutation.LastModifiedDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: shipment.FieldLastModifiedDate,
		})
	}
	if value, ok := su.mutation.LastModifiedByUserLogin(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipment.FieldLastModifiedByUserLogin,
		})
	}
	if su.mutation.LastModifiedByUserLoginCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipment.FieldLastModifiedByUserLogin,
		})
	}
	if su.mutation.PrimaryOrderHeaderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shipment.PrimaryOrderHeaderTable,
			Columns: []string{shipment.PrimaryOrderHeaderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderheader.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.PrimaryOrderHeaderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shipment.PrimaryOrderHeaderTable,
			Columns: []string{shipment.PrimaryOrderHeaderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderheader.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.PrimaryOrderItemShipGroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shipment.PrimaryOrderItemShipGroupTable,
			Columns: []string{shipment.PrimaryOrderItemShipGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitemshipgroup.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.PrimaryOrderItemShipGroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shipment.PrimaryOrderItemShipGroupTable,
			Columns: []string{shipment.PrimaryOrderItemShipGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitemshipgroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.ItemIssuancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shipment.ItemIssuancesTable,
			Columns: []string{shipment.ItemIssuancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: itemissuance.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedItemIssuancesIDs(); len(nodes) > 0 && !su.mutation.ItemIssuancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shipment.ItemIssuancesTable,
			Columns: []string{shipment.ItemIssuancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: itemissuance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ItemIssuancesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shipment.ItemIssuancesTable,
			Columns: []string{shipment.ItemIssuancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: itemissuance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.ShipmentItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shipment.ShipmentItemsTable,
			Columns: []string{shipment.ShipmentItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipmentitem.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedShipmentItemsIDs(); len(nodes) > 0 && !su.mutation.ShipmentItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shipment.ShipmentItemsTable,
			Columns: []string{shipment.ShipmentItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipmentitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ShipmentItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shipment.ShipmentItemsTable,
			Columns: []string{shipment.ShipmentItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipmentitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shipment.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ShipmentUpdateOne is the builder for updating a single Shipment entity.
type ShipmentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ShipmentMutation
}

// SetShipmentTypeID sets the "shipment_type_id" field.
func (suo *ShipmentUpdateOne) SetShipmentTypeID(i int) *ShipmentUpdateOne {
	suo.mutation.ResetShipmentTypeID()
	suo.mutation.SetShipmentTypeID(i)
	return suo
}

// SetNillableShipmentTypeID sets the "shipment_type_id" field if the given value is not nil.
func (suo *ShipmentUpdateOne) SetNillableShipmentTypeID(i *int) *ShipmentUpdateOne {
	if i != nil {
		suo.SetShipmentTypeID(*i)
	}
	return suo
}

// AddShipmentTypeID adds i to the "shipment_type_id" field.
func (suo *ShipmentUpdateOne) AddShipmentTypeID(i int) *ShipmentUpdateOne {
	suo.mutation.AddShipmentTypeID(i)
	return suo
}

// ClearShipmentTypeID clears the value of the "shipment_type_id" field.
func (suo *ShipmentUpdateOne) ClearShipmentTypeID() *ShipmentUpdateOne {
	suo.mutation.ClearShipmentTypeID()
	return suo
}

// SetStatusID sets the "status_id" field.
func (suo *ShipmentUpdateOne) SetStatusID(i int) *ShipmentUpdateOne {
	suo.mutation.ResetStatusID()
	suo.mutation.SetStatusID(i)
	return suo
}

// SetNillableStatusID sets the "status_id" field if the given value is not nil.
func (suo *ShipmentUpdateOne) SetNillableStatusID(i *int) *ShipmentUpdateOne {
	if i != nil {
		suo.SetStatusID(*i)
	}
	return suo
}

// AddStatusID adds i to the "status_id" field.
func (suo *ShipmentUpdateOne) AddStatusID(i int) *ShipmentUpdateOne {
	suo.mutation.AddStatusID(i)
	return suo
}

// ClearStatusID clears the value of the "status_id" field.
func (suo *ShipmentUpdateOne) ClearStatusID() *ShipmentUpdateOne {
	suo.mutation.ClearStatusID()
	return suo
}

// SetPrimaryReturnID sets the "primary_return_id" field.
func (suo *ShipmentUpdateOne) SetPrimaryReturnID(i int) *ShipmentUpdateOne {
	suo.mutation.ResetPrimaryReturnID()
	suo.mutation.SetPrimaryReturnID(i)
	return suo
}

// SetNillablePrimaryReturnID sets the "primary_return_id" field if the given value is not nil.
func (suo *ShipmentUpdateOne) SetNillablePrimaryReturnID(i *int) *ShipmentUpdateOne {
	if i != nil {
		suo.SetPrimaryReturnID(*i)
	}
	return suo
}

// AddPrimaryReturnID adds i to the "primary_return_id" field.
func (suo *ShipmentUpdateOne) AddPrimaryReturnID(i int) *ShipmentUpdateOne {
	suo.mutation.AddPrimaryReturnID(i)
	return suo
}

// ClearPrimaryReturnID clears the value of the "primary_return_id" field.
func (suo *ShipmentUpdateOne) ClearPrimaryReturnID() *ShipmentUpdateOne {
	suo.mutation.ClearPrimaryReturnID()
	return suo
}

// SetPrimaryShipGroupSeqID sets the "primary_ship_group_seq_id" field.
func (suo *ShipmentUpdateOne) SetPrimaryShipGroupSeqID(i int) *ShipmentUpdateOne {
	suo.mutation.ResetPrimaryShipGroupSeqID()
	suo.mutation.SetPrimaryShipGroupSeqID(i)
	return suo
}

// SetNillablePrimaryShipGroupSeqID sets the "primary_ship_group_seq_id" field if the given value is not nil.
func (suo *ShipmentUpdateOne) SetNillablePrimaryShipGroupSeqID(i *int) *ShipmentUpdateOne {
	if i != nil {
		suo.SetPrimaryShipGroupSeqID(*i)
	}
	return suo
}

// AddPrimaryShipGroupSeqID adds i to the "primary_ship_group_seq_id" field.
func (suo *ShipmentUpdateOne) AddPrimaryShipGroupSeqID(i int) *ShipmentUpdateOne {
	suo.mutation.AddPrimaryShipGroupSeqID(i)
	return suo
}

// ClearPrimaryShipGroupSeqID clears the value of the "primary_ship_group_seq_id" field.
func (suo *ShipmentUpdateOne) ClearPrimaryShipGroupSeqID() *ShipmentUpdateOne {
	suo.mutation.ClearPrimaryShipGroupSeqID()
	return suo
}

// SetPicklistBinID sets the "picklist_bin_id" field.
func (suo *ShipmentUpdateOne) SetPicklistBinID(i int) *ShipmentUpdateOne {
	suo.mutation.ResetPicklistBinID()
	suo.mutation.SetPicklistBinID(i)
	return suo
}

// SetNillablePicklistBinID sets the "picklist_bin_id" field if the given value is not nil.
func (suo *ShipmentUpdateOne) SetNillablePicklistBinID(i *int) *ShipmentUpdateOne {
	if i != nil {
		suo.SetPicklistBinID(*i)
	}
	return suo
}

// AddPicklistBinID adds i to the "picklist_bin_id" field.
func (suo *ShipmentUpdateOne) AddPicklistBinID(i int) *ShipmentUpdateOne {
	suo.mutation.AddPicklistBinID(i)
	return suo
}

// ClearPicklistBinID clears the value of the "picklist_bin_id" field.
func (suo *ShipmentUpdateOne) ClearPicklistBinID() *ShipmentUpdateOne {
	suo.mutation.ClearPicklistBinID()
	return suo
}

// SetEstimatedReadyDate sets the "estimated_ready_date" field.
func (suo *ShipmentUpdateOne) SetEstimatedReadyDate(t time.Time) *ShipmentUpdateOne {
	suo.mutation.SetEstimatedReadyDate(t)
	return suo
}

// SetNillableEstimatedReadyDate sets the "estimated_ready_date" field if the given value is not nil.
func (suo *ShipmentUpdateOne) SetNillableEstimatedReadyDate(t *time.Time) *ShipmentUpdateOne {
	if t != nil {
		suo.SetEstimatedReadyDate(*t)
	}
	return suo
}

// ClearEstimatedReadyDate clears the value of the "estimated_ready_date" field.
func (suo *ShipmentUpdateOne) ClearEstimatedReadyDate() *ShipmentUpdateOne {
	suo.mutation.ClearEstimatedReadyDate()
	return suo
}

// SetEstimatedShipDate sets the "estimated_ship_date" field.
func (suo *ShipmentUpdateOne) SetEstimatedShipDate(t time.Time) *ShipmentUpdateOne {
	suo.mutation.SetEstimatedShipDate(t)
	return suo
}

// SetNillableEstimatedShipDate sets the "estimated_ship_date" field if the given value is not nil.
func (suo *ShipmentUpdateOne) SetNillableEstimatedShipDate(t *time.Time) *ShipmentUpdateOne {
	if t != nil {
		suo.SetEstimatedShipDate(*t)
	}
	return suo
}

// ClearEstimatedShipDate clears the value of the "estimated_ship_date" field.
func (suo *ShipmentUpdateOne) ClearEstimatedShipDate() *ShipmentUpdateOne {
	suo.mutation.ClearEstimatedShipDate()
	return suo
}

// SetEstimatedShipWorkEffID sets the "estimated_ship_work_eff_id" field.
func (suo *ShipmentUpdateOne) SetEstimatedShipWorkEffID(i int) *ShipmentUpdateOne {
	suo.mutation.ResetEstimatedShipWorkEffID()
	suo.mutation.SetEstimatedShipWorkEffID(i)
	return suo
}

// SetNillableEstimatedShipWorkEffID sets the "estimated_ship_work_eff_id" field if the given value is not nil.
func (suo *ShipmentUpdateOne) SetNillableEstimatedShipWorkEffID(i *int) *ShipmentUpdateOne {
	if i != nil {
		suo.SetEstimatedShipWorkEffID(*i)
	}
	return suo
}

// AddEstimatedShipWorkEffID adds i to the "estimated_ship_work_eff_id" field.
func (suo *ShipmentUpdateOne) AddEstimatedShipWorkEffID(i int) *ShipmentUpdateOne {
	suo.mutation.AddEstimatedShipWorkEffID(i)
	return suo
}

// ClearEstimatedShipWorkEffID clears the value of the "estimated_ship_work_eff_id" field.
func (suo *ShipmentUpdateOne) ClearEstimatedShipWorkEffID() *ShipmentUpdateOne {
	suo.mutation.ClearEstimatedShipWorkEffID()
	return suo
}

// SetEstimatedArrivalDate sets the "estimated_arrival_date" field.
func (suo *ShipmentUpdateOne) SetEstimatedArrivalDate(t time.Time) *ShipmentUpdateOne {
	suo.mutation.SetEstimatedArrivalDate(t)
	return suo
}

// SetNillableEstimatedArrivalDate sets the "estimated_arrival_date" field if the given value is not nil.
func (suo *ShipmentUpdateOne) SetNillableEstimatedArrivalDate(t *time.Time) *ShipmentUpdateOne {
	if t != nil {
		suo.SetEstimatedArrivalDate(*t)
	}
	return suo
}

// ClearEstimatedArrivalDate clears the value of the "estimated_arrival_date" field.
func (suo *ShipmentUpdateOne) ClearEstimatedArrivalDate() *ShipmentUpdateOne {
	suo.mutation.ClearEstimatedArrivalDate()
	return suo
}

// SetEstimatedArrivalWorkEffID sets the "estimated_arrival_work_eff_id" field.
func (suo *ShipmentUpdateOne) SetEstimatedArrivalWorkEffID(i int) *ShipmentUpdateOne {
	suo.mutation.ResetEstimatedArrivalWorkEffID()
	suo.mutation.SetEstimatedArrivalWorkEffID(i)
	return suo
}

// SetNillableEstimatedArrivalWorkEffID sets the "estimated_arrival_work_eff_id" field if the given value is not nil.
func (suo *ShipmentUpdateOne) SetNillableEstimatedArrivalWorkEffID(i *int) *ShipmentUpdateOne {
	if i != nil {
		suo.SetEstimatedArrivalWorkEffID(*i)
	}
	return suo
}

// AddEstimatedArrivalWorkEffID adds i to the "estimated_arrival_work_eff_id" field.
func (suo *ShipmentUpdateOne) AddEstimatedArrivalWorkEffID(i int) *ShipmentUpdateOne {
	suo.mutation.AddEstimatedArrivalWorkEffID(i)
	return suo
}

// ClearEstimatedArrivalWorkEffID clears the value of the "estimated_arrival_work_eff_id" field.
func (suo *ShipmentUpdateOne) ClearEstimatedArrivalWorkEffID() *ShipmentUpdateOne {
	suo.mutation.ClearEstimatedArrivalWorkEffID()
	return suo
}

// SetLatestCancelDate sets the "latest_cancel_date" field.
func (suo *ShipmentUpdateOne) SetLatestCancelDate(t time.Time) *ShipmentUpdateOne {
	suo.mutation.SetLatestCancelDate(t)
	return suo
}

// SetNillableLatestCancelDate sets the "latest_cancel_date" field if the given value is not nil.
func (suo *ShipmentUpdateOne) SetNillableLatestCancelDate(t *time.Time) *ShipmentUpdateOne {
	if t != nil {
		suo.SetLatestCancelDate(*t)
	}
	return suo
}

// ClearLatestCancelDate clears the value of the "latest_cancel_date" field.
func (suo *ShipmentUpdateOne) ClearLatestCancelDate() *ShipmentUpdateOne {
	suo.mutation.ClearLatestCancelDate()
	return suo
}

// SetEstimatedShipCost sets the "estimated_ship_cost" field.
func (suo *ShipmentUpdateOne) SetEstimatedShipCost(f float64) *ShipmentUpdateOne {
	suo.mutation.ResetEstimatedShipCost()
	suo.mutation.SetEstimatedShipCost(f)
	return suo
}

// SetNillableEstimatedShipCost sets the "estimated_ship_cost" field if the given value is not nil.
func (suo *ShipmentUpdateOne) SetNillableEstimatedShipCost(f *float64) *ShipmentUpdateOne {
	if f != nil {
		suo.SetEstimatedShipCost(*f)
	}
	return suo
}

// AddEstimatedShipCost adds f to the "estimated_ship_cost" field.
func (suo *ShipmentUpdateOne) AddEstimatedShipCost(f float64) *ShipmentUpdateOne {
	suo.mutation.AddEstimatedShipCost(f)
	return suo
}

// ClearEstimatedShipCost clears the value of the "estimated_ship_cost" field.
func (suo *ShipmentUpdateOne) ClearEstimatedShipCost() *ShipmentUpdateOne {
	suo.mutation.ClearEstimatedShipCost()
	return suo
}

// SetCurrencyUomID sets the "currency_uom_id" field.
func (suo *ShipmentUpdateOne) SetCurrencyUomID(i int) *ShipmentUpdateOne {
	suo.mutation.ResetCurrencyUomID()
	suo.mutation.SetCurrencyUomID(i)
	return suo
}

// SetNillableCurrencyUomID sets the "currency_uom_id" field if the given value is not nil.
func (suo *ShipmentUpdateOne) SetNillableCurrencyUomID(i *int) *ShipmentUpdateOne {
	if i != nil {
		suo.SetCurrencyUomID(*i)
	}
	return suo
}

// AddCurrencyUomID adds i to the "currency_uom_id" field.
func (suo *ShipmentUpdateOne) AddCurrencyUomID(i int) *ShipmentUpdateOne {
	suo.mutation.AddCurrencyUomID(i)
	return suo
}

// ClearCurrencyUomID clears the value of the "currency_uom_id" field.
func (suo *ShipmentUpdateOne) ClearCurrencyUomID() *ShipmentUpdateOne {
	suo.mutation.ClearCurrencyUomID()
	return suo
}

// SetHandlingInstructions sets the "handling_instructions" field.
func (suo *ShipmentUpdateOne) SetHandlingInstructions(s string) *ShipmentUpdateOne {
	suo.mutation.SetHandlingInstructions(s)
	return suo
}

// SetNillableHandlingInstructions sets the "handling_instructions" field if the given value is not nil.
func (suo *ShipmentUpdateOne) SetNillableHandlingInstructions(s *string) *ShipmentUpdateOne {
	if s != nil {
		suo.SetHandlingInstructions(*s)
	}
	return suo
}

// ClearHandlingInstructions clears the value of the "handling_instructions" field.
func (suo *ShipmentUpdateOne) ClearHandlingInstructions() *ShipmentUpdateOne {
	suo.mutation.ClearHandlingInstructions()
	return suo
}

// SetOriginFacilityID sets the "origin_facility_id" field.
func (suo *ShipmentUpdateOne) SetOriginFacilityID(i int) *ShipmentUpdateOne {
	suo.mutation.ResetOriginFacilityID()
	suo.mutation.SetOriginFacilityID(i)
	return suo
}

// SetNillableOriginFacilityID sets the "origin_facility_id" field if the given value is not nil.
func (suo *ShipmentUpdateOne) SetNillableOriginFacilityID(i *int) *ShipmentUpdateOne {
	if i != nil {
		suo.SetOriginFacilityID(*i)
	}
	return suo
}

// AddOriginFacilityID adds i to the "origin_facility_id" field.
func (suo *ShipmentUpdateOne) AddOriginFacilityID(i int) *ShipmentUpdateOne {
	suo.mutation.AddOriginFacilityID(i)
	return suo
}

// ClearOriginFacilityID clears the value of the "origin_facility_id" field.
func (suo *ShipmentUpdateOne) ClearOriginFacilityID() *ShipmentUpdateOne {
	suo.mutation.ClearOriginFacilityID()
	return suo
}

// SetDestinationFacilityID sets the "destination_facility_id" field.
func (suo *ShipmentUpdateOne) SetDestinationFacilityID(i int) *ShipmentUpdateOne {
	suo.mutation.ResetDestinationFacilityID()
	suo.mutation.SetDestinationFacilityID(i)
	return suo
}

// SetNillableDestinationFacilityID sets the "destination_facility_id" field if the given value is not nil.
func (suo *ShipmentUpdateOne) SetNillableDestinationFacilityID(i *int) *ShipmentUpdateOne {
	if i != nil {
		suo.SetDestinationFacilityID(*i)
	}
	return suo
}

// AddDestinationFacilityID adds i to the "destination_facility_id" field.
func (suo *ShipmentUpdateOne) AddDestinationFacilityID(i int) *ShipmentUpdateOne {
	suo.mutation.AddDestinationFacilityID(i)
	return suo
}

// ClearDestinationFacilityID clears the value of the "destination_facility_id" field.
func (suo *ShipmentUpdateOne) ClearDestinationFacilityID() *ShipmentUpdateOne {
	suo.mutation.ClearDestinationFacilityID()
	return suo
}

// SetOriginContactMechID sets the "origin_contact_mech_id" field.
func (suo *ShipmentUpdateOne) SetOriginContactMechID(i int) *ShipmentUpdateOne {
	suo.mutation.ResetOriginContactMechID()
	suo.mutation.SetOriginContactMechID(i)
	return suo
}

// SetNillableOriginContactMechID sets the "origin_contact_mech_id" field if the given value is not nil.
func (suo *ShipmentUpdateOne) SetNillableOriginContactMechID(i *int) *ShipmentUpdateOne {
	if i != nil {
		suo.SetOriginContactMechID(*i)
	}
	return suo
}

// AddOriginContactMechID adds i to the "origin_contact_mech_id" field.
func (suo *ShipmentUpdateOne) AddOriginContactMechID(i int) *ShipmentUpdateOne {
	suo.mutation.AddOriginContactMechID(i)
	return suo
}

// ClearOriginContactMechID clears the value of the "origin_contact_mech_id" field.
func (suo *ShipmentUpdateOne) ClearOriginContactMechID() *ShipmentUpdateOne {
	suo.mutation.ClearOriginContactMechID()
	return suo
}

// SetOriginTelecomNumberID sets the "origin_telecom_number_id" field.
func (suo *ShipmentUpdateOne) SetOriginTelecomNumberID(i int) *ShipmentUpdateOne {
	suo.mutation.ResetOriginTelecomNumberID()
	suo.mutation.SetOriginTelecomNumberID(i)
	return suo
}

// SetNillableOriginTelecomNumberID sets the "origin_telecom_number_id" field if the given value is not nil.
func (suo *ShipmentUpdateOne) SetNillableOriginTelecomNumberID(i *int) *ShipmentUpdateOne {
	if i != nil {
		suo.SetOriginTelecomNumberID(*i)
	}
	return suo
}

// AddOriginTelecomNumberID adds i to the "origin_telecom_number_id" field.
func (suo *ShipmentUpdateOne) AddOriginTelecomNumberID(i int) *ShipmentUpdateOne {
	suo.mutation.AddOriginTelecomNumberID(i)
	return suo
}

// ClearOriginTelecomNumberID clears the value of the "origin_telecom_number_id" field.
func (suo *ShipmentUpdateOne) ClearOriginTelecomNumberID() *ShipmentUpdateOne {
	suo.mutation.ClearOriginTelecomNumberID()
	return suo
}

// SetDestinationContactMechID sets the "destination_contact_mech_id" field.
func (suo *ShipmentUpdateOne) SetDestinationContactMechID(i int) *ShipmentUpdateOne {
	suo.mutation.ResetDestinationContactMechID()
	suo.mutation.SetDestinationContactMechID(i)
	return suo
}

// SetNillableDestinationContactMechID sets the "destination_contact_mech_id" field if the given value is not nil.
func (suo *ShipmentUpdateOne) SetNillableDestinationContactMechID(i *int) *ShipmentUpdateOne {
	if i != nil {
		suo.SetDestinationContactMechID(*i)
	}
	return suo
}

// AddDestinationContactMechID adds i to the "destination_contact_mech_id" field.
func (suo *ShipmentUpdateOne) AddDestinationContactMechID(i int) *ShipmentUpdateOne {
	suo.mutation.AddDestinationContactMechID(i)
	return suo
}

// ClearDestinationContactMechID clears the value of the "destination_contact_mech_id" field.
func (suo *ShipmentUpdateOne) ClearDestinationContactMechID() *ShipmentUpdateOne {
	suo.mutation.ClearDestinationContactMechID()
	return suo
}

// SetDestinationTelecomNumberID sets the "destination_telecom_number_id" field.
func (suo *ShipmentUpdateOne) SetDestinationTelecomNumberID(i int) *ShipmentUpdateOne {
	suo.mutation.ResetDestinationTelecomNumberID()
	suo.mutation.SetDestinationTelecomNumberID(i)
	return suo
}

// SetNillableDestinationTelecomNumberID sets the "destination_telecom_number_id" field if the given value is not nil.
func (suo *ShipmentUpdateOne) SetNillableDestinationTelecomNumberID(i *int) *ShipmentUpdateOne {
	if i != nil {
		suo.SetDestinationTelecomNumberID(*i)
	}
	return suo
}

// AddDestinationTelecomNumberID adds i to the "destination_telecom_number_id" field.
func (suo *ShipmentUpdateOne) AddDestinationTelecomNumberID(i int) *ShipmentUpdateOne {
	suo.mutation.AddDestinationTelecomNumberID(i)
	return suo
}

// ClearDestinationTelecomNumberID clears the value of the "destination_telecom_number_id" field.
func (suo *ShipmentUpdateOne) ClearDestinationTelecomNumberID() *ShipmentUpdateOne {
	suo.mutation.ClearDestinationTelecomNumberID()
	return suo
}

// SetPartyIDTo sets the "party_id_to" field.
func (suo *ShipmentUpdateOne) SetPartyIDTo(i int) *ShipmentUpdateOne {
	suo.mutation.ResetPartyIDTo()
	suo.mutation.SetPartyIDTo(i)
	return suo
}

// SetNillablePartyIDTo sets the "party_id_to" field if the given value is not nil.
func (suo *ShipmentUpdateOne) SetNillablePartyIDTo(i *int) *ShipmentUpdateOne {
	if i != nil {
		suo.SetPartyIDTo(*i)
	}
	return suo
}

// AddPartyIDTo adds i to the "party_id_to" field.
func (suo *ShipmentUpdateOne) AddPartyIDTo(i int) *ShipmentUpdateOne {
	suo.mutation.AddPartyIDTo(i)
	return suo
}

// ClearPartyIDTo clears the value of the "party_id_to" field.
func (suo *ShipmentUpdateOne) ClearPartyIDTo() *ShipmentUpdateOne {
	suo.mutation.ClearPartyIDTo()
	return suo
}

// SetPartyIDFrom sets the "party_id_from" field.
func (suo *ShipmentUpdateOne) SetPartyIDFrom(i int) *ShipmentUpdateOne {
	suo.mutation.ResetPartyIDFrom()
	suo.mutation.SetPartyIDFrom(i)
	return suo
}

// SetNillablePartyIDFrom sets the "party_id_from" field if the given value is not nil.
func (suo *ShipmentUpdateOne) SetNillablePartyIDFrom(i *int) *ShipmentUpdateOne {
	if i != nil {
		suo.SetPartyIDFrom(*i)
	}
	return suo
}

// AddPartyIDFrom adds i to the "party_id_from" field.
func (suo *ShipmentUpdateOne) AddPartyIDFrom(i int) *ShipmentUpdateOne {
	suo.mutation.AddPartyIDFrom(i)
	return suo
}

// ClearPartyIDFrom clears the value of the "party_id_from" field.
func (suo *ShipmentUpdateOne) ClearPartyIDFrom() *ShipmentUpdateOne {
	suo.mutation.ClearPartyIDFrom()
	return suo
}

// SetAdditionalShippingCharge sets the "additional_shipping_charge" field.
func (suo *ShipmentUpdateOne) SetAdditionalShippingCharge(f float64) *ShipmentUpdateOne {
	suo.mutation.ResetAdditionalShippingCharge()
	suo.mutation.SetAdditionalShippingCharge(f)
	return suo
}

// SetNillableAdditionalShippingCharge sets the "additional_shipping_charge" field if the given value is not nil.
func (suo *ShipmentUpdateOne) SetNillableAdditionalShippingCharge(f *float64) *ShipmentUpdateOne {
	if f != nil {
		suo.SetAdditionalShippingCharge(*f)
	}
	return suo
}

// AddAdditionalShippingCharge adds f to the "additional_shipping_charge" field.
func (suo *ShipmentUpdateOne) AddAdditionalShippingCharge(f float64) *ShipmentUpdateOne {
	suo.mutation.AddAdditionalShippingCharge(f)
	return suo
}

// ClearAdditionalShippingCharge clears the value of the "additional_shipping_charge" field.
func (suo *ShipmentUpdateOne) ClearAdditionalShippingCharge() *ShipmentUpdateOne {
	suo.mutation.ClearAdditionalShippingCharge()
	return suo
}

// SetAddtlShippingChargeDesc sets the "addtl_shipping_charge_desc" field.
func (suo *ShipmentUpdateOne) SetAddtlShippingChargeDesc(s string) *ShipmentUpdateOne {
	suo.mutation.SetAddtlShippingChargeDesc(s)
	return suo
}

// SetNillableAddtlShippingChargeDesc sets the "addtl_shipping_charge_desc" field if the given value is not nil.
func (suo *ShipmentUpdateOne) SetNillableAddtlShippingChargeDesc(s *string) *ShipmentUpdateOne {
	if s != nil {
		suo.SetAddtlShippingChargeDesc(*s)
	}
	return suo
}

// ClearAddtlShippingChargeDesc clears the value of the "addtl_shipping_charge_desc" field.
func (suo *ShipmentUpdateOne) ClearAddtlShippingChargeDesc() *ShipmentUpdateOne {
	suo.mutation.ClearAddtlShippingChargeDesc()
	return suo
}

// SetCreatedDate sets the "created_date" field.
func (suo *ShipmentUpdateOne) SetCreatedDate(t time.Time) *ShipmentUpdateOne {
	suo.mutation.SetCreatedDate(t)
	return suo
}

// SetNillableCreatedDate sets the "created_date" field if the given value is not nil.
func (suo *ShipmentUpdateOne) SetNillableCreatedDate(t *time.Time) *ShipmentUpdateOne {
	if t != nil {
		suo.SetCreatedDate(*t)
	}
	return suo
}

// ClearCreatedDate clears the value of the "created_date" field.
func (suo *ShipmentUpdateOne) ClearCreatedDate() *ShipmentUpdateOne {
	suo.mutation.ClearCreatedDate()
	return suo
}

// SetCreatedByUserLogin sets the "created_by_user_login" field.
func (suo *ShipmentUpdateOne) SetCreatedByUserLogin(s string) *ShipmentUpdateOne {
	suo.mutation.SetCreatedByUserLogin(s)
	return suo
}

// SetNillableCreatedByUserLogin sets the "created_by_user_login" field if the given value is not nil.
func (suo *ShipmentUpdateOne) SetNillableCreatedByUserLogin(s *string) *ShipmentUpdateOne {
	if s != nil {
		suo.SetCreatedByUserLogin(*s)
	}
	return suo
}

// ClearCreatedByUserLogin clears the value of the "created_by_user_login" field.
func (suo *ShipmentUpdateOne) ClearCreatedByUserLogin() *ShipmentUpdateOne {
	suo.mutation.ClearCreatedByUserLogin()
	return suo
}

// SetLastModifiedDate sets the "last_modified_date" field.
func (suo *ShipmentUpdateOne) SetLastModifiedDate(t time.Time) *ShipmentUpdateOne {
	suo.mutation.SetLastModifiedDate(t)
	return suo
}

// SetNillableLastModifiedDate sets the "last_modified_date" field if the given value is not nil.
func (suo *ShipmentUpdateOne) SetNillableLastModifiedDate(t *time.Time) *ShipmentUpdateOne {
	if t != nil {
		suo.SetLastModifiedDate(*t)
	}
	return suo
}

// ClearLastModifiedDate clears the value of the "last_modified_date" field.
func (suo *ShipmentUpdateOne) ClearLastModifiedDate() *ShipmentUpdateOne {
	suo.mutation.ClearLastModifiedDate()
	return suo
}

// SetLastModifiedByUserLogin sets the "last_modified_by_user_login" field.
func (suo *ShipmentUpdateOne) SetLastModifiedByUserLogin(s string) *ShipmentUpdateOne {
	suo.mutation.SetLastModifiedByUserLogin(s)
	return suo
}

// SetNillableLastModifiedByUserLogin sets the "last_modified_by_user_login" field if the given value is not nil.
func (suo *ShipmentUpdateOne) SetNillableLastModifiedByUserLogin(s *string) *ShipmentUpdateOne {
	if s != nil {
		suo.SetLastModifiedByUserLogin(*s)
	}
	return suo
}

// ClearLastModifiedByUserLogin clears the value of the "last_modified_by_user_login" field.
func (suo *ShipmentUpdateOne) ClearLastModifiedByUserLogin() *ShipmentUpdateOne {
	suo.mutation.ClearLastModifiedByUserLogin()
	return suo
}

// SetPrimaryOrderHeaderID sets the "primary_order_header" edge to the OrderHeader entity by ID.
func (suo *ShipmentUpdateOne) SetPrimaryOrderHeaderID(id int) *ShipmentUpdateOne {
	suo.mutation.SetPrimaryOrderHeaderID(id)
	return suo
}

// SetNillablePrimaryOrderHeaderID sets the "primary_order_header" edge to the OrderHeader entity by ID if the given value is not nil.
func (suo *ShipmentUpdateOne) SetNillablePrimaryOrderHeaderID(id *int) *ShipmentUpdateOne {
	if id != nil {
		suo = suo.SetPrimaryOrderHeaderID(*id)
	}
	return suo
}

// SetPrimaryOrderHeader sets the "primary_order_header" edge to the OrderHeader entity.
func (suo *ShipmentUpdateOne) SetPrimaryOrderHeader(o *OrderHeader) *ShipmentUpdateOne {
	return suo.SetPrimaryOrderHeaderID(o.ID)
}

// SetPrimaryOrderItemShipGroupID sets the "primary_order_item_ship_group" edge to the OrderItemShipGroup entity by ID.
func (suo *ShipmentUpdateOne) SetPrimaryOrderItemShipGroupID(id int) *ShipmentUpdateOne {
	suo.mutation.SetPrimaryOrderItemShipGroupID(id)
	return suo
}

// SetNillablePrimaryOrderItemShipGroupID sets the "primary_order_item_ship_group" edge to the OrderItemShipGroup entity by ID if the given value is not nil.
func (suo *ShipmentUpdateOne) SetNillablePrimaryOrderItemShipGroupID(id *int) *ShipmentUpdateOne {
	if id != nil {
		suo = suo.SetPrimaryOrderItemShipGroupID(*id)
	}
	return suo
}

// SetPrimaryOrderItemShipGroup sets the "primary_order_item_ship_group" edge to the OrderItemShipGroup entity.
func (suo *ShipmentUpdateOne) SetPrimaryOrderItemShipGroup(o *OrderItemShipGroup) *ShipmentUpdateOne {
	return suo.SetPrimaryOrderItemShipGroupID(o.ID)
}

// AddItemIssuanceIDs adds the "item_issuances" edge to the ItemIssuance entity by IDs.
func (suo *ShipmentUpdateOne) AddItemIssuanceIDs(ids ...int) *ShipmentUpdateOne {
	suo.mutation.AddItemIssuanceIDs(ids...)
	return suo
}

// AddItemIssuances adds the "item_issuances" edges to the ItemIssuance entity.
func (suo *ShipmentUpdateOne) AddItemIssuances(i ...*ItemIssuance) *ShipmentUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return suo.AddItemIssuanceIDs(ids...)
}

// AddShipmentItemIDs adds the "shipment_items" edge to the ShipmentItem entity by IDs.
func (suo *ShipmentUpdateOne) AddShipmentItemIDs(ids ...int) *ShipmentUpdateOne {
	suo.mutation.AddShipmentItemIDs(ids...)
	return suo
}

// AddShipmentItems adds the "shipment_items" edges to the ShipmentItem entity.
func (suo *ShipmentUpdateOne) AddShipmentItems(s ...*ShipmentItem) *ShipmentUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.AddShipmentItemIDs(ids...)
}

// Mutation returns the ShipmentMutation object of the builder.
func (suo *ShipmentUpdateOne) Mutation() *ShipmentMutation {
	return suo.mutation
}

// ClearPrimaryOrderHeader clears the "primary_order_header" edge to the OrderHeader entity.
func (suo *ShipmentUpdateOne) ClearPrimaryOrderHeader() *ShipmentUpdateOne {
	suo.mutation.ClearPrimaryOrderHeader()
	return suo
}

// ClearPrimaryOrderItemShipGroup clears the "primary_order_item_ship_group" edge to the OrderItemShipGroup entity.
func (suo *ShipmentUpdateOne) ClearPrimaryOrderItemShipGroup() *ShipmentUpdateOne {
	suo.mutation.ClearPrimaryOrderItemShipGroup()
	return suo
}

// ClearItemIssuances clears all "item_issuances" edges to the ItemIssuance entity.
func (suo *ShipmentUpdateOne) ClearItemIssuances() *ShipmentUpdateOne {
	suo.mutation.ClearItemIssuances()
	return suo
}

// RemoveItemIssuanceIDs removes the "item_issuances" edge to ItemIssuance entities by IDs.
func (suo *ShipmentUpdateOne) RemoveItemIssuanceIDs(ids ...int) *ShipmentUpdateOne {
	suo.mutation.RemoveItemIssuanceIDs(ids...)
	return suo
}

// RemoveItemIssuances removes "item_issuances" edges to ItemIssuance entities.
func (suo *ShipmentUpdateOne) RemoveItemIssuances(i ...*ItemIssuance) *ShipmentUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return suo.RemoveItemIssuanceIDs(ids...)
}

// ClearShipmentItems clears all "shipment_items" edges to the ShipmentItem entity.
func (suo *ShipmentUpdateOne) ClearShipmentItems() *ShipmentUpdateOne {
	suo.mutation.ClearShipmentItems()
	return suo
}

// RemoveShipmentItemIDs removes the "shipment_items" edge to ShipmentItem entities by IDs.
func (suo *ShipmentUpdateOne) RemoveShipmentItemIDs(ids ...int) *ShipmentUpdateOne {
	suo.mutation.RemoveShipmentItemIDs(ids...)
	return suo
}

// RemoveShipmentItems removes "shipment_items" edges to ShipmentItem entities.
func (suo *ShipmentUpdateOne) RemoveShipmentItems(s ...*ShipmentItem) *ShipmentUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.RemoveShipmentItemIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *ShipmentUpdateOne) Select(field string, fields ...string) *ShipmentUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Shipment entity.
func (suo *ShipmentUpdateOne) Save(ctx context.Context) (*Shipment, error) {
	var (
		err  error
		node *Shipment
	)
	suo.defaults()
	if len(suo.hooks) == 0 {
		node, err = suo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ShipmentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			suo.mutation = mutation
			node, err = suo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(suo.hooks) - 1; i >= 0; i-- {
			mut = suo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, suo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (suo *ShipmentUpdateOne) SaveX(ctx context.Context) *Shipment {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *ShipmentUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *ShipmentUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *ShipmentUpdateOne) defaults() {
	if _, ok := suo.mutation.UpdateTime(); !ok {
		v := shipment.UpdateDefaultUpdateTime()
		suo.mutation.SetUpdateTime(v)
	}
}

func (suo *ShipmentUpdateOne) sqlSave(ctx context.Context) (_node *Shipment, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   shipment.Table,
			Columns: shipment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: shipment.FieldID,
			},
		},
	}
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Shipment.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, shipment.FieldID)
		for _, f := range fields {
			if !shipment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != shipment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: shipment.FieldUpdateTime,
		})
	}
	if value, ok := suo.mutation.ShipmentTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shipment.FieldShipmentTypeID,
		})
	}
	if value, ok := suo.mutation.AddedShipmentTypeID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shipment.FieldShipmentTypeID,
		})
	}
	if suo.mutation.ShipmentTypeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: shipment.FieldShipmentTypeID,
		})
	}
	if value, ok := suo.mutation.StatusID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shipment.FieldStatusID,
		})
	}
	if value, ok := suo.mutation.AddedStatusID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shipment.FieldStatusID,
		})
	}
	if suo.mutation.StatusIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: shipment.FieldStatusID,
		})
	}
	if value, ok := suo.mutation.PrimaryReturnID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shipment.FieldPrimaryReturnID,
		})
	}
	if value, ok := suo.mutation.AddedPrimaryReturnID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shipment.FieldPrimaryReturnID,
		})
	}
	if suo.mutation.PrimaryReturnIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: shipment.FieldPrimaryReturnID,
		})
	}
	if value, ok := suo.mutation.PrimaryShipGroupSeqID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shipment.FieldPrimaryShipGroupSeqID,
		})
	}
	if value, ok := suo.mutation.AddedPrimaryShipGroupSeqID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shipment.FieldPrimaryShipGroupSeqID,
		})
	}
	if suo.mutation.PrimaryShipGroupSeqIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: shipment.FieldPrimaryShipGroupSeqID,
		})
	}
	if value, ok := suo.mutation.PicklistBinID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shipment.FieldPicklistBinID,
		})
	}
	if value, ok := suo.mutation.AddedPicklistBinID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shipment.FieldPicklistBinID,
		})
	}
	if suo.mutation.PicklistBinIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: shipment.FieldPicklistBinID,
		})
	}
	if value, ok := suo.mutation.EstimatedReadyDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: shipment.FieldEstimatedReadyDate,
		})
	}
	if suo.mutation.EstimatedReadyDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: shipment.FieldEstimatedReadyDate,
		})
	}
	if value, ok := suo.mutation.EstimatedShipDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: shipment.FieldEstimatedShipDate,
		})
	}
	if suo.mutation.EstimatedShipDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: shipment.FieldEstimatedShipDate,
		})
	}
	if value, ok := suo.mutation.EstimatedShipWorkEffID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shipment.FieldEstimatedShipWorkEffID,
		})
	}
	if value, ok := suo.mutation.AddedEstimatedShipWorkEffID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shipment.FieldEstimatedShipWorkEffID,
		})
	}
	if suo.mutation.EstimatedShipWorkEffIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: shipment.FieldEstimatedShipWorkEffID,
		})
	}
	if value, ok := suo.mutation.EstimatedArrivalDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: shipment.FieldEstimatedArrivalDate,
		})
	}
	if suo.mutation.EstimatedArrivalDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: shipment.FieldEstimatedArrivalDate,
		})
	}
	if value, ok := suo.mutation.EstimatedArrivalWorkEffID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shipment.FieldEstimatedArrivalWorkEffID,
		})
	}
	if value, ok := suo.mutation.AddedEstimatedArrivalWorkEffID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shipment.FieldEstimatedArrivalWorkEffID,
		})
	}
	if suo.mutation.EstimatedArrivalWorkEffIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: shipment.FieldEstimatedArrivalWorkEffID,
		})
	}
	if value, ok := suo.mutation.LatestCancelDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: shipment.FieldLatestCancelDate,
		})
	}
	if suo.mutation.LatestCancelDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: shipment.FieldLatestCancelDate,
		})
	}
	if value, ok := suo.mutation.EstimatedShipCost(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: shipment.FieldEstimatedShipCost,
		})
	}
	if value, ok := suo.mutation.AddedEstimatedShipCost(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: shipment.FieldEstimatedShipCost,
		})
	}
	if suo.mutation.EstimatedShipCostCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: shipment.FieldEstimatedShipCost,
		})
	}
	if value, ok := suo.mutation.CurrencyUomID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shipment.FieldCurrencyUomID,
		})
	}
	if value, ok := suo.mutation.AddedCurrencyUomID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shipment.FieldCurrencyUomID,
		})
	}
	if suo.mutation.CurrencyUomIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: shipment.FieldCurrencyUomID,
		})
	}
	if value, ok := suo.mutation.HandlingInstructions(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipment.FieldHandlingInstructions,
		})
	}
	if suo.mutation.HandlingInstructionsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipment.FieldHandlingInstructions,
		})
	}
	if value, ok := suo.mutation.OriginFacilityID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shipment.FieldOriginFacilityID,
		})
	}
	if value, ok := suo.mutation.AddedOriginFacilityID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shipment.FieldOriginFacilityID,
		})
	}
	if suo.mutation.OriginFacilityIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: shipment.FieldOriginFacilityID,
		})
	}
	if value, ok := suo.mutation.DestinationFacilityID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shipment.FieldDestinationFacilityID,
		})
	}
	if value, ok := suo.mutation.AddedDestinationFacilityID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shipment.FieldDestinationFacilityID,
		})
	}
	if suo.mutation.DestinationFacilityIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: shipment.FieldDestinationFacilityID,
		})
	}
	if value, ok := suo.mutation.OriginContactMechID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shipment.FieldOriginContactMechID,
		})
	}
	if value, ok := suo.mutation.AddedOriginContactMechID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shipment.FieldOriginContactMechID,
		})
	}
	if suo.mutation.OriginContactMechIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: shipment.FieldOriginContactMechID,
		})
	}
	if value, ok := suo.mutation.OriginTelecomNumberID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shipment.FieldOriginTelecomNumberID,
		})
	}
	if value, ok := suo.mutation.AddedOriginTelecomNumberID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shipment.FieldOriginTelecomNumberID,
		})
	}
	if suo.mutation.OriginTelecomNumberIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: shipment.FieldOriginTelecomNumberID,
		})
	}
	if value, ok := suo.mutation.DestinationContactMechID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shipment.FieldDestinationContactMechID,
		})
	}
	if value, ok := suo.mutation.AddedDestinationContactMechID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shipment.FieldDestinationContactMechID,
		})
	}
	if suo.mutation.DestinationContactMechIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: shipment.FieldDestinationContactMechID,
		})
	}
	if value, ok := suo.mutation.DestinationTelecomNumberID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shipment.FieldDestinationTelecomNumberID,
		})
	}
	if value, ok := suo.mutation.AddedDestinationTelecomNumberID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shipment.FieldDestinationTelecomNumberID,
		})
	}
	if suo.mutation.DestinationTelecomNumberIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: shipment.FieldDestinationTelecomNumberID,
		})
	}
	if value, ok := suo.mutation.PartyIDTo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shipment.FieldPartyIDTo,
		})
	}
	if value, ok := suo.mutation.AddedPartyIDTo(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shipment.FieldPartyIDTo,
		})
	}
	if suo.mutation.PartyIDToCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: shipment.FieldPartyIDTo,
		})
	}
	if value, ok := suo.mutation.PartyIDFrom(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shipment.FieldPartyIDFrom,
		})
	}
	if value, ok := suo.mutation.AddedPartyIDFrom(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shipment.FieldPartyIDFrom,
		})
	}
	if suo.mutation.PartyIDFromCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: shipment.FieldPartyIDFrom,
		})
	}
	if value, ok := suo.mutation.AdditionalShippingCharge(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: shipment.FieldAdditionalShippingCharge,
		})
	}
	if value, ok := suo.mutation.AddedAdditionalShippingCharge(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: shipment.FieldAdditionalShippingCharge,
		})
	}
	if suo.mutation.AdditionalShippingChargeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: shipment.FieldAdditionalShippingCharge,
		})
	}
	if value, ok := suo.mutation.AddtlShippingChargeDesc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipment.FieldAddtlShippingChargeDesc,
		})
	}
	if suo.mutation.AddtlShippingChargeDescCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipment.FieldAddtlShippingChargeDesc,
		})
	}
	if value, ok := suo.mutation.CreatedDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: shipment.FieldCreatedDate,
		})
	}
	if suo.mutation.CreatedDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: shipment.FieldCreatedDate,
		})
	}
	if value, ok := suo.mutation.CreatedByUserLogin(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipment.FieldCreatedByUserLogin,
		})
	}
	if suo.mutation.CreatedByUserLoginCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipment.FieldCreatedByUserLogin,
		})
	}
	if value, ok := suo.mutation.LastModifiedDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: shipment.FieldLastModifiedDate,
		})
	}
	if suo.mutation.LastModifiedDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: shipment.FieldLastModifiedDate,
		})
	}
	if value, ok := suo.mutation.LastModifiedByUserLogin(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipment.FieldLastModifiedByUserLogin,
		})
	}
	if suo.mutation.LastModifiedByUserLoginCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipment.FieldLastModifiedByUserLogin,
		})
	}
	if suo.mutation.PrimaryOrderHeaderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shipment.PrimaryOrderHeaderTable,
			Columns: []string{shipment.PrimaryOrderHeaderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderheader.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.PrimaryOrderHeaderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shipment.PrimaryOrderHeaderTable,
			Columns: []string{shipment.PrimaryOrderHeaderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderheader.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.PrimaryOrderItemShipGroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shipment.PrimaryOrderItemShipGroupTable,
			Columns: []string{shipment.PrimaryOrderItemShipGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitemshipgroup.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.PrimaryOrderItemShipGroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shipment.PrimaryOrderItemShipGroupTable,
			Columns: []string{shipment.PrimaryOrderItemShipGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitemshipgroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.ItemIssuancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shipment.ItemIssuancesTable,
			Columns: []string{shipment.ItemIssuancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: itemissuance.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedItemIssuancesIDs(); len(nodes) > 0 && !suo.mutation.ItemIssuancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shipment.ItemIssuancesTable,
			Columns: []string{shipment.ItemIssuancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: itemissuance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ItemIssuancesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shipment.ItemIssuancesTable,
			Columns: []string{shipment.ItemIssuancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: itemissuance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.ShipmentItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shipment.ShipmentItemsTable,
			Columns: []string{shipment.ShipmentItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipmentitem.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedShipmentItemsIDs(); len(nodes) > 0 && !suo.mutation.ShipmentItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shipment.ShipmentItemsTable,
			Columns: []string{shipment.ShipmentItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipmentitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ShipmentItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shipment.ShipmentItemsTable,
			Columns: []string{shipment.ShipmentItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipmentitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Shipment{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shipment.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
