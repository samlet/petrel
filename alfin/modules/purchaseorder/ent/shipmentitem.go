// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/shipment"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/shipmentitem"
)

// ShipmentItem is the model entity for the ShipmentItem schema.
type ShipmentItem struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// ShipmentItemSeqID holds the value of the "shipment_item_seq_id" field.
	ShipmentItemSeqID int `json:"shipment_item_seq_id,omitempty"`
	// ProductID holds the value of the "product_id" field.
	ProductID int `json:"product_id,omitempty"`
	// Quantity holds the value of the "quantity" field.
	Quantity float64 `json:"quantity,omitempty"`
	// ShipmentContentDescription holds the value of the "shipment_content_description" field.
	ShipmentContentDescription string `json:"shipment_content_description,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ShipmentItemQuery when eager-loading is set.
	Edges                   ShipmentItemEdges `json:"edges"`
	shipment_shipment_items *int
}

// ShipmentItemEdges holds the relations/edges for other nodes in the graph.
type ShipmentItemEdges struct {
	// Shipment holds the value of the shipment edge.
	Shipment *Shipment `json:"shipment,omitempty"`
	// ItemIssuances holds the value of the item_issuances edge.
	ItemIssuances []*ItemIssuance `json:"item_issuances,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ShipmentOrErr returns the Shipment value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ShipmentItemEdges) ShipmentOrErr() (*Shipment, error) {
	if e.loadedTypes[0] {
		if e.Shipment == nil {
			// The edge shipment was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: shipment.Label}
		}
		return e.Shipment, nil
	}
	return nil, &NotLoadedError{edge: "shipment"}
}

// ItemIssuancesOrErr returns the ItemIssuances value or an error if the edge
// was not loaded in eager-loading.
func (e ShipmentItemEdges) ItemIssuancesOrErr() ([]*ItemIssuance, error) {
	if e.loadedTypes[1] {
		return e.ItemIssuances, nil
	}
	return nil, &NotLoadedError{edge: "item_issuances"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ShipmentItem) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case shipmentitem.FieldQuantity:
			values[i] = new(sql.NullFloat64)
		case shipmentitem.FieldID, shipmentitem.FieldShipmentItemSeqID, shipmentitem.FieldProductID:
			values[i] = new(sql.NullInt64)
		case shipmentitem.FieldShipmentContentDescription:
			values[i] = new(sql.NullString)
		case shipmentitem.FieldCreateTime, shipmentitem.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case shipmentitem.ForeignKeys[0]: // shipment_shipment_items
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ShipmentItem", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ShipmentItem fields.
func (si *ShipmentItem) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case shipmentitem.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			si.ID = int(value.Int64)
		case shipmentitem.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				si.CreateTime = value.Time
			}
		case shipmentitem.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				si.UpdateTime = value.Time
			}
		case shipmentitem.FieldShipmentItemSeqID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field shipment_item_seq_id", values[i])
			} else if value.Valid {
				si.ShipmentItemSeqID = int(value.Int64)
			}
		case shipmentitem.FieldProductID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field product_id", values[i])
			} else if value.Valid {
				si.ProductID = int(value.Int64)
			}
		case shipmentitem.FieldQuantity:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field quantity", values[i])
			} else if value.Valid {
				si.Quantity = value.Float64
			}
		case shipmentitem.FieldShipmentContentDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field shipment_content_description", values[i])
			} else if value.Valid {
				si.ShipmentContentDescription = value.String
			}
		case shipmentitem.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field shipment_shipment_items", value)
			} else if value.Valid {
				si.shipment_shipment_items = new(int)
				*si.shipment_shipment_items = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryShipment queries the "shipment" edge of the ShipmentItem entity.
func (si *ShipmentItem) QueryShipment() *ShipmentQuery {
	return (&ShipmentItemClient{config: si.config}).QueryShipment(si)
}

// QueryItemIssuances queries the "item_issuances" edge of the ShipmentItem entity.
func (si *ShipmentItem) QueryItemIssuances() *ItemIssuanceQuery {
	return (&ShipmentItemClient{config: si.config}).QueryItemIssuances(si)
}

// Update returns a builder for updating this ShipmentItem.
// Note that you need to call ShipmentItem.Unwrap() before calling this method if this ShipmentItem
// was returned from a transaction, and the transaction was committed or rolled back.
func (si *ShipmentItem) Update() *ShipmentItemUpdateOne {
	return (&ShipmentItemClient{config: si.config}).UpdateOne(si)
}

// Unwrap unwraps the ShipmentItem entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (si *ShipmentItem) Unwrap() *ShipmentItem {
	tx, ok := si.config.driver.(*txDriver)
	if !ok {
		panic("ent: ShipmentItem is not a transactional entity")
	}
	si.config.driver = tx.drv
	return si
}

// String implements the fmt.Stringer.
func (si *ShipmentItem) String() string {
	var builder strings.Builder
	builder.WriteString("ShipmentItem(")
	builder.WriteString(fmt.Sprintf("id=%v", si.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(si.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(si.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", shipment_item_seq_id=")
	builder.WriteString(fmt.Sprintf("%v", si.ShipmentItemSeqID))
	builder.WriteString(", product_id=")
	builder.WriteString(fmt.Sprintf("%v", si.ProductID))
	builder.WriteString(", quantity=")
	builder.WriteString(fmt.Sprintf("%v", si.Quantity))
	builder.WriteString(", shipment_content_description=")
	builder.WriteString(si.ShipmentContentDescription)
	builder.WriteByte(')')
	return builder.String()
}

// ShipmentItems is a parsable slice of ShipmentItem.
type ShipmentItems []*ShipmentItem

func (si ShipmentItems) config(cfg config) {
	for _i := range si {
		si[_i].config = cfg
	}
}
