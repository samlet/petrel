// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/itemissuance"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/predicate"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/shipment"
	"github.com/samlet/petrel/alfin/modules/purchaseorder/ent/shipmentitem"
)

// ShipmentItemUpdate is the builder for updating ShipmentItem entities.
type ShipmentItemUpdate struct {
	config
	hooks    []Hook
	mutation *ShipmentItemMutation
}

// Where adds a new predicate for the ShipmentItemUpdate builder.
func (siu *ShipmentItemUpdate) Where(ps ...predicate.ShipmentItem) *ShipmentItemUpdate {
	siu.mutation.predicates = append(siu.mutation.predicates, ps...)
	return siu
}

// SetShipmentItemSeqID sets the "shipment_item_seq_id" field.
func (siu *ShipmentItemUpdate) SetShipmentItemSeqID(i int) *ShipmentItemUpdate {
	siu.mutation.ResetShipmentItemSeqID()
	siu.mutation.SetShipmentItemSeqID(i)
	return siu
}

// AddShipmentItemSeqID adds i to the "shipment_item_seq_id" field.
func (siu *ShipmentItemUpdate) AddShipmentItemSeqID(i int) *ShipmentItemUpdate {
	siu.mutation.AddShipmentItemSeqID(i)
	return siu
}

// SetProductID sets the "product_id" field.
func (siu *ShipmentItemUpdate) SetProductID(i int) *ShipmentItemUpdate {
	siu.mutation.ResetProductID()
	siu.mutation.SetProductID(i)
	return siu
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (siu *ShipmentItemUpdate) SetNillableProductID(i *int) *ShipmentItemUpdate {
	if i != nil {
		siu.SetProductID(*i)
	}
	return siu
}

// AddProductID adds i to the "product_id" field.
func (siu *ShipmentItemUpdate) AddProductID(i int) *ShipmentItemUpdate {
	siu.mutation.AddProductID(i)
	return siu
}

// ClearProductID clears the value of the "product_id" field.
func (siu *ShipmentItemUpdate) ClearProductID() *ShipmentItemUpdate {
	siu.mutation.ClearProductID()
	return siu
}

// SetQuantity sets the "quantity" field.
func (siu *ShipmentItemUpdate) SetQuantity(f float64) *ShipmentItemUpdate {
	siu.mutation.ResetQuantity()
	siu.mutation.SetQuantity(f)
	return siu
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (siu *ShipmentItemUpdate) SetNillableQuantity(f *float64) *ShipmentItemUpdate {
	if f != nil {
		siu.SetQuantity(*f)
	}
	return siu
}

// AddQuantity adds f to the "quantity" field.
func (siu *ShipmentItemUpdate) AddQuantity(f float64) *ShipmentItemUpdate {
	siu.mutation.AddQuantity(f)
	return siu
}

// ClearQuantity clears the value of the "quantity" field.
func (siu *ShipmentItemUpdate) ClearQuantity() *ShipmentItemUpdate {
	siu.mutation.ClearQuantity()
	return siu
}

// SetShipmentContentDescription sets the "shipment_content_description" field.
func (siu *ShipmentItemUpdate) SetShipmentContentDescription(s string) *ShipmentItemUpdate {
	siu.mutation.SetShipmentContentDescription(s)
	return siu
}

// SetNillableShipmentContentDescription sets the "shipment_content_description" field if the given value is not nil.
func (siu *ShipmentItemUpdate) SetNillableShipmentContentDescription(s *string) *ShipmentItemUpdate {
	if s != nil {
		siu.SetShipmentContentDescription(*s)
	}
	return siu
}

// ClearShipmentContentDescription clears the value of the "shipment_content_description" field.
func (siu *ShipmentItemUpdate) ClearShipmentContentDescription() *ShipmentItemUpdate {
	siu.mutation.ClearShipmentContentDescription()
	return siu
}

// SetShipmentID sets the "shipment" edge to the Shipment entity by ID.
func (siu *ShipmentItemUpdate) SetShipmentID(id int) *ShipmentItemUpdate {
	siu.mutation.SetShipmentID(id)
	return siu
}

// SetNillableShipmentID sets the "shipment" edge to the Shipment entity by ID if the given value is not nil.
func (siu *ShipmentItemUpdate) SetNillableShipmentID(id *int) *ShipmentItemUpdate {
	if id != nil {
		siu = siu.SetShipmentID(*id)
	}
	return siu
}

// SetShipment sets the "shipment" edge to the Shipment entity.
func (siu *ShipmentItemUpdate) SetShipment(s *Shipment) *ShipmentItemUpdate {
	return siu.SetShipmentID(s.ID)
}

// AddItemIssuanceIDs adds the "item_issuances" edge to the ItemIssuance entity by IDs.
func (siu *ShipmentItemUpdate) AddItemIssuanceIDs(ids ...int) *ShipmentItemUpdate {
	siu.mutation.AddItemIssuanceIDs(ids...)
	return siu
}

// AddItemIssuances adds the "item_issuances" edges to the ItemIssuance entity.
func (siu *ShipmentItemUpdate) AddItemIssuances(i ...*ItemIssuance) *ShipmentItemUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return siu.AddItemIssuanceIDs(ids...)
}

// Mutation returns the ShipmentItemMutation object of the builder.
func (siu *ShipmentItemUpdate) Mutation() *ShipmentItemMutation {
	return siu.mutation
}

// ClearShipment clears the "shipment" edge to the Shipment entity.
func (siu *ShipmentItemUpdate) ClearShipment() *ShipmentItemUpdate {
	siu.mutation.ClearShipment()
	return siu
}

// ClearItemIssuances clears all "item_issuances" edges to the ItemIssuance entity.
func (siu *ShipmentItemUpdate) ClearItemIssuances() *ShipmentItemUpdate {
	siu.mutation.ClearItemIssuances()
	return siu
}

// RemoveItemIssuanceIDs removes the "item_issuances" edge to ItemIssuance entities by IDs.
func (siu *ShipmentItemUpdate) RemoveItemIssuanceIDs(ids ...int) *ShipmentItemUpdate {
	siu.mutation.RemoveItemIssuanceIDs(ids...)
	return siu
}

// RemoveItemIssuances removes "item_issuances" edges to ItemIssuance entities.
func (siu *ShipmentItemUpdate) RemoveItemIssuances(i ...*ItemIssuance) *ShipmentItemUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return siu.RemoveItemIssuanceIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (siu *ShipmentItemUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	siu.defaults()
	if len(siu.hooks) == 0 {
		affected, err = siu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ShipmentItemMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			siu.mutation = mutation
			affected, err = siu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(siu.hooks) - 1; i >= 0; i-- {
			mut = siu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, siu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (siu *ShipmentItemUpdate) SaveX(ctx context.Context) int {
	affected, err := siu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (siu *ShipmentItemUpdate) Exec(ctx context.Context) error {
	_, err := siu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (siu *ShipmentItemUpdate) ExecX(ctx context.Context) {
	if err := siu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (siu *ShipmentItemUpdate) defaults() {
	if _, ok := siu.mutation.UpdateTime(); !ok {
		v := shipmentitem.UpdateDefaultUpdateTime()
		siu.mutation.SetUpdateTime(v)
	}
}

func (siu *ShipmentItemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   shipmentitem.Table,
			Columns: shipmentitem.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: shipmentitem.FieldID,
			},
		},
	}
	if ps := siu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := siu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: shipmentitem.FieldUpdateTime,
		})
	}
	if value, ok := siu.mutation.ShipmentItemSeqID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shipmentitem.FieldShipmentItemSeqID,
		})
	}
	if value, ok := siu.mutation.AddedShipmentItemSeqID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shipmentitem.FieldShipmentItemSeqID,
		})
	}
	if value, ok := siu.mutation.ProductID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shipmentitem.FieldProductID,
		})
	}
	if value, ok := siu.mutation.AddedProductID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shipmentitem.FieldProductID,
		})
	}
	if siu.mutation.ProductIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: shipmentitem.FieldProductID,
		})
	}
	if value, ok := siu.mutation.Quantity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: shipmentitem.FieldQuantity,
		})
	}
	if value, ok := siu.mutation.AddedQuantity(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: shipmentitem.FieldQuantity,
		})
	}
	if siu.mutation.QuantityCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: shipmentitem.FieldQuantity,
		})
	}
	if value, ok := siu.mutation.ShipmentContentDescription(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentitem.FieldShipmentContentDescription,
		})
	}
	if siu.mutation.ShipmentContentDescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmentitem.FieldShipmentContentDescription,
		})
	}
	if siu.mutation.ShipmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shipmentitem.ShipmentTable,
			Columns: []string{shipmentitem.ShipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siu.mutation.ShipmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shipmentitem.ShipmentTable,
			Columns: []string{shipmentitem.ShipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if siu.mutation.ItemIssuancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shipmentitem.ItemIssuancesTable,
			Columns: []string{shipmentitem.ItemIssuancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: itemissuance.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siu.mutation.RemovedItemIssuancesIDs(); len(nodes) > 0 && !siu.mutation.ItemIssuancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shipmentitem.ItemIssuancesTable,
			Columns: []string{shipmentitem.ItemIssuancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: itemissuance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siu.mutation.ItemIssuancesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shipmentitem.ItemIssuancesTable,
			Columns: []string{shipmentitem.ItemIssuancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: itemissuance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, siu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shipmentitem.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ShipmentItemUpdateOne is the builder for updating a single ShipmentItem entity.
type ShipmentItemUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ShipmentItemMutation
}

// SetShipmentItemSeqID sets the "shipment_item_seq_id" field.
func (siuo *ShipmentItemUpdateOne) SetShipmentItemSeqID(i int) *ShipmentItemUpdateOne {
	siuo.mutation.ResetShipmentItemSeqID()
	siuo.mutation.SetShipmentItemSeqID(i)
	return siuo
}

// AddShipmentItemSeqID adds i to the "shipment_item_seq_id" field.
func (siuo *ShipmentItemUpdateOne) AddShipmentItemSeqID(i int) *ShipmentItemUpdateOne {
	siuo.mutation.AddShipmentItemSeqID(i)
	return siuo
}

// SetProductID sets the "product_id" field.
func (siuo *ShipmentItemUpdateOne) SetProductID(i int) *ShipmentItemUpdateOne {
	siuo.mutation.ResetProductID()
	siuo.mutation.SetProductID(i)
	return siuo
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (siuo *ShipmentItemUpdateOne) SetNillableProductID(i *int) *ShipmentItemUpdateOne {
	if i != nil {
		siuo.SetProductID(*i)
	}
	return siuo
}

// AddProductID adds i to the "product_id" field.
func (siuo *ShipmentItemUpdateOne) AddProductID(i int) *ShipmentItemUpdateOne {
	siuo.mutation.AddProductID(i)
	return siuo
}

// ClearProductID clears the value of the "product_id" field.
func (siuo *ShipmentItemUpdateOne) ClearProductID() *ShipmentItemUpdateOne {
	siuo.mutation.ClearProductID()
	return siuo
}

// SetQuantity sets the "quantity" field.
func (siuo *ShipmentItemUpdateOne) SetQuantity(f float64) *ShipmentItemUpdateOne {
	siuo.mutation.ResetQuantity()
	siuo.mutation.SetQuantity(f)
	return siuo
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (siuo *ShipmentItemUpdateOne) SetNillableQuantity(f *float64) *ShipmentItemUpdateOne {
	if f != nil {
		siuo.SetQuantity(*f)
	}
	return siuo
}

// AddQuantity adds f to the "quantity" field.
func (siuo *ShipmentItemUpdateOne) AddQuantity(f float64) *ShipmentItemUpdateOne {
	siuo.mutation.AddQuantity(f)
	return siuo
}

// ClearQuantity clears the value of the "quantity" field.
func (siuo *ShipmentItemUpdateOne) ClearQuantity() *ShipmentItemUpdateOne {
	siuo.mutation.ClearQuantity()
	return siuo
}

// SetShipmentContentDescription sets the "shipment_content_description" field.
func (siuo *ShipmentItemUpdateOne) SetShipmentContentDescription(s string) *ShipmentItemUpdateOne {
	siuo.mutation.SetShipmentContentDescription(s)
	return siuo
}

// SetNillableShipmentContentDescription sets the "shipment_content_description" field if the given value is not nil.
func (siuo *ShipmentItemUpdateOne) SetNillableShipmentContentDescription(s *string) *ShipmentItemUpdateOne {
	if s != nil {
		siuo.SetShipmentContentDescription(*s)
	}
	return siuo
}

// ClearShipmentContentDescription clears the value of the "shipment_content_description" field.
func (siuo *ShipmentItemUpdateOne) ClearShipmentContentDescription() *ShipmentItemUpdateOne {
	siuo.mutation.ClearShipmentContentDescription()
	return siuo
}

// SetShipmentID sets the "shipment" edge to the Shipment entity by ID.
func (siuo *ShipmentItemUpdateOne) SetShipmentID(id int) *ShipmentItemUpdateOne {
	siuo.mutation.SetShipmentID(id)
	return siuo
}

// SetNillableShipmentID sets the "shipment" edge to the Shipment entity by ID if the given value is not nil.
func (siuo *ShipmentItemUpdateOne) SetNillableShipmentID(id *int) *ShipmentItemUpdateOne {
	if id != nil {
		siuo = siuo.SetShipmentID(*id)
	}
	return siuo
}

// SetShipment sets the "shipment" edge to the Shipment entity.
func (siuo *ShipmentItemUpdateOne) SetShipment(s *Shipment) *ShipmentItemUpdateOne {
	return siuo.SetShipmentID(s.ID)
}

// AddItemIssuanceIDs adds the "item_issuances" edge to the ItemIssuance entity by IDs.
func (siuo *ShipmentItemUpdateOne) AddItemIssuanceIDs(ids ...int) *ShipmentItemUpdateOne {
	siuo.mutation.AddItemIssuanceIDs(ids...)
	return siuo
}

// AddItemIssuances adds the "item_issuances" edges to the ItemIssuance entity.
func (siuo *ShipmentItemUpdateOne) AddItemIssuances(i ...*ItemIssuance) *ShipmentItemUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return siuo.AddItemIssuanceIDs(ids...)
}

// Mutation returns the ShipmentItemMutation object of the builder.
func (siuo *ShipmentItemUpdateOne) Mutation() *ShipmentItemMutation {
	return siuo.mutation
}

// ClearShipment clears the "shipment" edge to the Shipment entity.
func (siuo *ShipmentItemUpdateOne) ClearShipment() *ShipmentItemUpdateOne {
	siuo.mutation.ClearShipment()
	return siuo
}

// ClearItemIssuances clears all "item_issuances" edges to the ItemIssuance entity.
func (siuo *ShipmentItemUpdateOne) ClearItemIssuances() *ShipmentItemUpdateOne {
	siuo.mutation.ClearItemIssuances()
	return siuo
}

// RemoveItemIssuanceIDs removes the "item_issuances" edge to ItemIssuance entities by IDs.
func (siuo *ShipmentItemUpdateOne) RemoveItemIssuanceIDs(ids ...int) *ShipmentItemUpdateOne {
	siuo.mutation.RemoveItemIssuanceIDs(ids...)
	return siuo
}

// RemoveItemIssuances removes "item_issuances" edges to ItemIssuance entities.
func (siuo *ShipmentItemUpdateOne) RemoveItemIssuances(i ...*ItemIssuance) *ShipmentItemUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return siuo.RemoveItemIssuanceIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (siuo *ShipmentItemUpdateOne) Select(field string, fields ...string) *ShipmentItemUpdateOne {
	siuo.fields = append([]string{field}, fields...)
	return siuo
}

// Save executes the query and returns the updated ShipmentItem entity.
func (siuo *ShipmentItemUpdateOne) Save(ctx context.Context) (*ShipmentItem, error) {
	var (
		err  error
		node *ShipmentItem
	)
	siuo.defaults()
	if len(siuo.hooks) == 0 {
		node, err = siuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ShipmentItemMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			siuo.mutation = mutation
			node, err = siuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(siuo.hooks) - 1; i >= 0; i-- {
			mut = siuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, siuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (siuo *ShipmentItemUpdateOne) SaveX(ctx context.Context) *ShipmentItem {
	node, err := siuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (siuo *ShipmentItemUpdateOne) Exec(ctx context.Context) error {
	_, err := siuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (siuo *ShipmentItemUpdateOne) ExecX(ctx context.Context) {
	if err := siuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (siuo *ShipmentItemUpdateOne) defaults() {
	if _, ok := siuo.mutation.UpdateTime(); !ok {
		v := shipmentitem.UpdateDefaultUpdateTime()
		siuo.mutation.SetUpdateTime(v)
	}
}

func (siuo *ShipmentItemUpdateOne) sqlSave(ctx context.Context) (_node *ShipmentItem, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   shipmentitem.Table,
			Columns: shipmentitem.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: shipmentitem.FieldID,
			},
		},
	}
	id, ok := siuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ShipmentItem.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := siuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, shipmentitem.FieldID)
		for _, f := range fields {
			if !shipmentitem.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != shipmentitem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := siuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := siuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: shipmentitem.FieldUpdateTime,
		})
	}
	if value, ok := siuo.mutation.ShipmentItemSeqID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shipmentitem.FieldShipmentItemSeqID,
		})
	}
	if value, ok := siuo.mutation.AddedShipmentItemSeqID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shipmentitem.FieldShipmentItemSeqID,
		})
	}
	if value, ok := siuo.mutation.ProductID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shipmentitem.FieldProductID,
		})
	}
	if value, ok := siuo.mutation.AddedProductID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shipmentitem.FieldProductID,
		})
	}
	if siuo.mutation.ProductIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: shipmentitem.FieldProductID,
		})
	}
	if value, ok := siuo.mutation.Quantity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: shipmentitem.FieldQuantity,
		})
	}
	if value, ok := siuo.mutation.AddedQuantity(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: shipmentitem.FieldQuantity,
		})
	}
	if siuo.mutation.QuantityCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: shipmentitem.FieldQuantity,
		})
	}
	if value, ok := siuo.mutation.ShipmentContentDescription(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipmentitem.FieldShipmentContentDescription,
		})
	}
	if siuo.mutation.ShipmentContentDescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: shipmentitem.FieldShipmentContentDescription,
		})
	}
	if siuo.mutation.ShipmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shipmentitem.ShipmentTable,
			Columns: []string{shipmentitem.ShipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siuo.mutation.ShipmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shipmentitem.ShipmentTable,
			Columns: []string{shipmentitem.ShipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shipment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if siuo.mutation.ItemIssuancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shipmentitem.ItemIssuancesTable,
			Columns: []string{shipmentitem.ItemIssuancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: itemissuance.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siuo.mutation.RemovedItemIssuancesIDs(); len(nodes) > 0 && !siuo.mutation.ItemIssuancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shipmentitem.ItemIssuancesTable,
			Columns: []string{shipmentitem.ItemIssuancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: itemissuance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siuo.mutation.ItemIssuancesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shipmentitem.ItemIssuancesTable,
			Columns: []string{shipmentitem.ItemIssuancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: itemissuance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ShipmentItem{config: siuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, siuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shipmentitem.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
