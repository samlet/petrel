// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/samlet/petrel/alfin/modules/workeffort/ent/migrate"

	"github.com/samlet/petrel/alfin/modules/workeffort/ent/communicationeventprptyp"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/communicationeventtype"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/contactmechpurposetype"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/contactmechtype"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/contactmechtypepurpose"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/enumeration"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/enumerationtype"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/fixedasset"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/party"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/partyclassificationtype"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/partycontactmech"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/partycontenttype"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/partyidentificationtype"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/partyqualtype"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/partyrelationshiptype"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/partyrole"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/partystatus"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/partytype"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/person"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/roletype"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/securitygroup"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/securitygrouppermission"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/securitypermission"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/skilltype"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/statusitem"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/statustype"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/statusvalidchange"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/temporalexpression"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/temporalexpressionassoc"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/termtype"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/userlogin"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/userloginsecuritygroup"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/userpreference"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/workeffort"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/workeffortassoc"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/workeffortfixedassetassign"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/workeffortpartyassignment"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/workeffortskillstandard"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/workefforttype"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// CommunicationEventPrpTyp is the client for interacting with the CommunicationEventPrpTyp builders.
	CommunicationEventPrpTyp *CommunicationEventPrpTypClient
	// CommunicationEventType is the client for interacting with the CommunicationEventType builders.
	CommunicationEventType *CommunicationEventTypeClient
	// ContactMechPurposeType is the client for interacting with the ContactMechPurposeType builders.
	ContactMechPurposeType *ContactMechPurposeTypeClient
	// ContactMechType is the client for interacting with the ContactMechType builders.
	ContactMechType *ContactMechTypeClient
	// ContactMechTypePurpose is the client for interacting with the ContactMechTypePurpose builders.
	ContactMechTypePurpose *ContactMechTypePurposeClient
	// Enumeration is the client for interacting with the Enumeration builders.
	Enumeration *EnumerationClient
	// EnumerationType is the client for interacting with the EnumerationType builders.
	EnumerationType *EnumerationTypeClient
	// FixedAsset is the client for interacting with the FixedAsset builders.
	FixedAsset *FixedAssetClient
	// Party is the client for interacting with the Party builders.
	Party *PartyClient
	// PartyClassificationType is the client for interacting with the PartyClassificationType builders.
	PartyClassificationType *PartyClassificationTypeClient
	// PartyContactMech is the client for interacting with the PartyContactMech builders.
	PartyContactMech *PartyContactMechClient
	// PartyContentType is the client for interacting with the PartyContentType builders.
	PartyContentType *PartyContentTypeClient
	// PartyIdentificationType is the client for interacting with the PartyIdentificationType builders.
	PartyIdentificationType *PartyIdentificationTypeClient
	// PartyQualType is the client for interacting with the PartyQualType builders.
	PartyQualType *PartyQualTypeClient
	// PartyRelationshipType is the client for interacting with the PartyRelationshipType builders.
	PartyRelationshipType *PartyRelationshipTypeClient
	// PartyRole is the client for interacting with the PartyRole builders.
	PartyRole *PartyRoleClient
	// PartyStatus is the client for interacting with the PartyStatus builders.
	PartyStatus *PartyStatusClient
	// PartyType is the client for interacting with the PartyType builders.
	PartyType *PartyTypeClient
	// Person is the client for interacting with the Person builders.
	Person *PersonClient
	// RoleType is the client for interacting with the RoleType builders.
	RoleType *RoleTypeClient
	// SecurityGroup is the client for interacting with the SecurityGroup builders.
	SecurityGroup *SecurityGroupClient
	// SecurityGroupPermission is the client for interacting with the SecurityGroupPermission builders.
	SecurityGroupPermission *SecurityGroupPermissionClient
	// SecurityPermission is the client for interacting with the SecurityPermission builders.
	SecurityPermission *SecurityPermissionClient
	// SkillType is the client for interacting with the SkillType builders.
	SkillType *SkillTypeClient
	// StatusItem is the client for interacting with the StatusItem builders.
	StatusItem *StatusItemClient
	// StatusType is the client for interacting with the StatusType builders.
	StatusType *StatusTypeClient
	// StatusValidChange is the client for interacting with the StatusValidChange builders.
	StatusValidChange *StatusValidChangeClient
	// TemporalExpression is the client for interacting with the TemporalExpression builders.
	TemporalExpression *TemporalExpressionClient
	// TemporalExpressionAssoc is the client for interacting with the TemporalExpressionAssoc builders.
	TemporalExpressionAssoc *TemporalExpressionAssocClient
	// TermType is the client for interacting with the TermType builders.
	TermType *TermTypeClient
	// UserLogin is the client for interacting with the UserLogin builders.
	UserLogin *UserLoginClient
	// UserLoginSecurityGroup is the client for interacting with the UserLoginSecurityGroup builders.
	UserLoginSecurityGroup *UserLoginSecurityGroupClient
	// UserPreference is the client for interacting with the UserPreference builders.
	UserPreference *UserPreferenceClient
	// WorkEffort is the client for interacting with the WorkEffort builders.
	WorkEffort *WorkEffortClient
	// WorkEffortAssoc is the client for interacting with the WorkEffortAssoc builders.
	WorkEffortAssoc *WorkEffortAssocClient
	// WorkEffortFixedAssetAssign is the client for interacting with the WorkEffortFixedAssetAssign builders.
	WorkEffortFixedAssetAssign *WorkEffortFixedAssetAssignClient
	// WorkEffortPartyAssignment is the client for interacting with the WorkEffortPartyAssignment builders.
	WorkEffortPartyAssignment *WorkEffortPartyAssignmentClient
	// WorkEffortSkillStandard is the client for interacting with the WorkEffortSkillStandard builders.
	WorkEffortSkillStandard *WorkEffortSkillStandardClient
	// WorkEffortType is the client for interacting with the WorkEffortType builders.
	WorkEffortType *WorkEffortTypeClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.CommunicationEventPrpTyp = NewCommunicationEventPrpTypClient(c.config)
	c.CommunicationEventType = NewCommunicationEventTypeClient(c.config)
	c.ContactMechPurposeType = NewContactMechPurposeTypeClient(c.config)
	c.ContactMechType = NewContactMechTypeClient(c.config)
	c.ContactMechTypePurpose = NewContactMechTypePurposeClient(c.config)
	c.Enumeration = NewEnumerationClient(c.config)
	c.EnumerationType = NewEnumerationTypeClient(c.config)
	c.FixedAsset = NewFixedAssetClient(c.config)
	c.Party = NewPartyClient(c.config)
	c.PartyClassificationType = NewPartyClassificationTypeClient(c.config)
	c.PartyContactMech = NewPartyContactMechClient(c.config)
	c.PartyContentType = NewPartyContentTypeClient(c.config)
	c.PartyIdentificationType = NewPartyIdentificationTypeClient(c.config)
	c.PartyQualType = NewPartyQualTypeClient(c.config)
	c.PartyRelationshipType = NewPartyRelationshipTypeClient(c.config)
	c.PartyRole = NewPartyRoleClient(c.config)
	c.PartyStatus = NewPartyStatusClient(c.config)
	c.PartyType = NewPartyTypeClient(c.config)
	c.Person = NewPersonClient(c.config)
	c.RoleType = NewRoleTypeClient(c.config)
	c.SecurityGroup = NewSecurityGroupClient(c.config)
	c.SecurityGroupPermission = NewSecurityGroupPermissionClient(c.config)
	c.SecurityPermission = NewSecurityPermissionClient(c.config)
	c.SkillType = NewSkillTypeClient(c.config)
	c.StatusItem = NewStatusItemClient(c.config)
	c.StatusType = NewStatusTypeClient(c.config)
	c.StatusValidChange = NewStatusValidChangeClient(c.config)
	c.TemporalExpression = NewTemporalExpressionClient(c.config)
	c.TemporalExpressionAssoc = NewTemporalExpressionAssocClient(c.config)
	c.TermType = NewTermTypeClient(c.config)
	c.UserLogin = NewUserLoginClient(c.config)
	c.UserLoginSecurityGroup = NewUserLoginSecurityGroupClient(c.config)
	c.UserPreference = NewUserPreferenceClient(c.config)
	c.WorkEffort = NewWorkEffortClient(c.config)
	c.WorkEffortAssoc = NewWorkEffortAssocClient(c.config)
	c.WorkEffortFixedAssetAssign = NewWorkEffortFixedAssetAssignClient(c.config)
	c.WorkEffortPartyAssignment = NewWorkEffortPartyAssignmentClient(c.config)
	c.WorkEffortSkillStandard = NewWorkEffortSkillStandardClient(c.config)
	c.WorkEffortType = NewWorkEffortTypeClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                        ctx,
		config:                     cfg,
		CommunicationEventPrpTyp:   NewCommunicationEventPrpTypClient(cfg),
		CommunicationEventType:     NewCommunicationEventTypeClient(cfg),
		ContactMechPurposeType:     NewContactMechPurposeTypeClient(cfg),
		ContactMechType:            NewContactMechTypeClient(cfg),
		ContactMechTypePurpose:     NewContactMechTypePurposeClient(cfg),
		Enumeration:                NewEnumerationClient(cfg),
		EnumerationType:            NewEnumerationTypeClient(cfg),
		FixedAsset:                 NewFixedAssetClient(cfg),
		Party:                      NewPartyClient(cfg),
		PartyClassificationType:    NewPartyClassificationTypeClient(cfg),
		PartyContactMech:           NewPartyContactMechClient(cfg),
		PartyContentType:           NewPartyContentTypeClient(cfg),
		PartyIdentificationType:    NewPartyIdentificationTypeClient(cfg),
		PartyQualType:              NewPartyQualTypeClient(cfg),
		PartyRelationshipType:      NewPartyRelationshipTypeClient(cfg),
		PartyRole:                  NewPartyRoleClient(cfg),
		PartyStatus:                NewPartyStatusClient(cfg),
		PartyType:                  NewPartyTypeClient(cfg),
		Person:                     NewPersonClient(cfg),
		RoleType:                   NewRoleTypeClient(cfg),
		SecurityGroup:              NewSecurityGroupClient(cfg),
		SecurityGroupPermission:    NewSecurityGroupPermissionClient(cfg),
		SecurityPermission:         NewSecurityPermissionClient(cfg),
		SkillType:                  NewSkillTypeClient(cfg),
		StatusItem:                 NewStatusItemClient(cfg),
		StatusType:                 NewStatusTypeClient(cfg),
		StatusValidChange:          NewStatusValidChangeClient(cfg),
		TemporalExpression:         NewTemporalExpressionClient(cfg),
		TemporalExpressionAssoc:    NewTemporalExpressionAssocClient(cfg),
		TermType:                   NewTermTypeClient(cfg),
		UserLogin:                  NewUserLoginClient(cfg),
		UserLoginSecurityGroup:     NewUserLoginSecurityGroupClient(cfg),
		UserPreference:             NewUserPreferenceClient(cfg),
		WorkEffort:                 NewWorkEffortClient(cfg),
		WorkEffortAssoc:            NewWorkEffortAssocClient(cfg),
		WorkEffortFixedAssetAssign: NewWorkEffortFixedAssetAssignClient(cfg),
		WorkEffortPartyAssignment:  NewWorkEffortPartyAssignmentClient(cfg),
		WorkEffortSkillStandard:    NewWorkEffortSkillStandardClient(cfg),
		WorkEffortType:             NewWorkEffortTypeClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		config:                     cfg,
		CommunicationEventPrpTyp:   NewCommunicationEventPrpTypClient(cfg),
		CommunicationEventType:     NewCommunicationEventTypeClient(cfg),
		ContactMechPurposeType:     NewContactMechPurposeTypeClient(cfg),
		ContactMechType:            NewContactMechTypeClient(cfg),
		ContactMechTypePurpose:     NewContactMechTypePurposeClient(cfg),
		Enumeration:                NewEnumerationClient(cfg),
		EnumerationType:            NewEnumerationTypeClient(cfg),
		FixedAsset:                 NewFixedAssetClient(cfg),
		Party:                      NewPartyClient(cfg),
		PartyClassificationType:    NewPartyClassificationTypeClient(cfg),
		PartyContactMech:           NewPartyContactMechClient(cfg),
		PartyContentType:           NewPartyContentTypeClient(cfg),
		PartyIdentificationType:    NewPartyIdentificationTypeClient(cfg),
		PartyQualType:              NewPartyQualTypeClient(cfg),
		PartyRelationshipType:      NewPartyRelationshipTypeClient(cfg),
		PartyRole:                  NewPartyRoleClient(cfg),
		PartyStatus:                NewPartyStatusClient(cfg),
		PartyType:                  NewPartyTypeClient(cfg),
		Person:                     NewPersonClient(cfg),
		RoleType:                   NewRoleTypeClient(cfg),
		SecurityGroup:              NewSecurityGroupClient(cfg),
		SecurityGroupPermission:    NewSecurityGroupPermissionClient(cfg),
		SecurityPermission:         NewSecurityPermissionClient(cfg),
		SkillType:                  NewSkillTypeClient(cfg),
		StatusItem:                 NewStatusItemClient(cfg),
		StatusType:                 NewStatusTypeClient(cfg),
		StatusValidChange:          NewStatusValidChangeClient(cfg),
		TemporalExpression:         NewTemporalExpressionClient(cfg),
		TemporalExpressionAssoc:    NewTemporalExpressionAssocClient(cfg),
		TermType:                   NewTermTypeClient(cfg),
		UserLogin:                  NewUserLoginClient(cfg),
		UserLoginSecurityGroup:     NewUserLoginSecurityGroupClient(cfg),
		UserPreference:             NewUserPreferenceClient(cfg),
		WorkEffort:                 NewWorkEffortClient(cfg),
		WorkEffortAssoc:            NewWorkEffortAssocClient(cfg),
		WorkEffortFixedAssetAssign: NewWorkEffortFixedAssetAssignClient(cfg),
		WorkEffortPartyAssignment:  NewWorkEffortPartyAssignmentClient(cfg),
		WorkEffortSkillStandard:    NewWorkEffortSkillStandardClient(cfg),
		WorkEffortType:             NewWorkEffortTypeClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		CommunicationEventPrpTyp.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.CommunicationEventPrpTyp.Use(hooks...)
	c.CommunicationEventType.Use(hooks...)
	c.ContactMechPurposeType.Use(hooks...)
	c.ContactMechType.Use(hooks...)
	c.ContactMechTypePurpose.Use(hooks...)
	c.Enumeration.Use(hooks...)
	c.EnumerationType.Use(hooks...)
	c.FixedAsset.Use(hooks...)
	c.Party.Use(hooks...)
	c.PartyClassificationType.Use(hooks...)
	c.PartyContactMech.Use(hooks...)
	c.PartyContentType.Use(hooks...)
	c.PartyIdentificationType.Use(hooks...)
	c.PartyQualType.Use(hooks...)
	c.PartyRelationshipType.Use(hooks...)
	c.PartyRole.Use(hooks...)
	c.PartyStatus.Use(hooks...)
	c.PartyType.Use(hooks...)
	c.Person.Use(hooks...)
	c.RoleType.Use(hooks...)
	c.SecurityGroup.Use(hooks...)
	c.SecurityGroupPermission.Use(hooks...)
	c.SecurityPermission.Use(hooks...)
	c.SkillType.Use(hooks...)
	c.StatusItem.Use(hooks...)
	c.StatusType.Use(hooks...)
	c.StatusValidChange.Use(hooks...)
	c.TemporalExpression.Use(hooks...)
	c.TemporalExpressionAssoc.Use(hooks...)
	c.TermType.Use(hooks...)
	c.UserLogin.Use(hooks...)
	c.UserLoginSecurityGroup.Use(hooks...)
	c.UserPreference.Use(hooks...)
	c.WorkEffort.Use(hooks...)
	c.WorkEffortAssoc.Use(hooks...)
	c.WorkEffortFixedAssetAssign.Use(hooks...)
	c.WorkEffortPartyAssignment.Use(hooks...)
	c.WorkEffortSkillStandard.Use(hooks...)
	c.WorkEffortType.Use(hooks...)
}

// CommunicationEventPrpTypClient is a client for the CommunicationEventPrpTyp schema.
type CommunicationEventPrpTypClient struct {
	config
}

// NewCommunicationEventPrpTypClient returns a client for the CommunicationEventPrpTyp from the given config.
func NewCommunicationEventPrpTypClient(c config) *CommunicationEventPrpTypClient {
	return &CommunicationEventPrpTypClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `communicationeventprptyp.Hooks(f(g(h())))`.
func (c *CommunicationEventPrpTypClient) Use(hooks ...Hook) {
	c.hooks.CommunicationEventPrpTyp = append(c.hooks.CommunicationEventPrpTyp, hooks...)
}

// Create returns a create builder for CommunicationEventPrpTyp.
func (c *CommunicationEventPrpTypClient) Create() *CommunicationEventPrpTypCreate {
	mutation := newCommunicationEventPrpTypMutation(c.config, OpCreate)
	return &CommunicationEventPrpTypCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CommunicationEventPrpTyp entities.
func (c *CommunicationEventPrpTypClient) CreateBulk(builders ...*CommunicationEventPrpTypCreate) *CommunicationEventPrpTypCreateBulk {
	return &CommunicationEventPrpTypCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CommunicationEventPrpTyp.
func (c *CommunicationEventPrpTypClient) Update() *CommunicationEventPrpTypUpdate {
	mutation := newCommunicationEventPrpTypMutation(c.config, OpUpdate)
	return &CommunicationEventPrpTypUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CommunicationEventPrpTypClient) UpdateOne(cept *CommunicationEventPrpTyp) *CommunicationEventPrpTypUpdateOne {
	mutation := newCommunicationEventPrpTypMutation(c.config, OpUpdateOne, withCommunicationEventPrpTyp(cept))
	return &CommunicationEventPrpTypUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CommunicationEventPrpTypClient) UpdateOneID(id int) *CommunicationEventPrpTypUpdateOne {
	mutation := newCommunicationEventPrpTypMutation(c.config, OpUpdateOne, withCommunicationEventPrpTypID(id))
	return &CommunicationEventPrpTypUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CommunicationEventPrpTyp.
func (c *CommunicationEventPrpTypClient) Delete() *CommunicationEventPrpTypDelete {
	mutation := newCommunicationEventPrpTypMutation(c.config, OpDelete)
	return &CommunicationEventPrpTypDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CommunicationEventPrpTypClient) DeleteOne(cept *CommunicationEventPrpTyp) *CommunicationEventPrpTypDeleteOne {
	return c.DeleteOneID(cept.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CommunicationEventPrpTypClient) DeleteOneID(id int) *CommunicationEventPrpTypDeleteOne {
	builder := c.Delete().Where(communicationeventprptyp.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CommunicationEventPrpTypDeleteOne{builder}
}

// Query returns a query builder for CommunicationEventPrpTyp.
func (c *CommunicationEventPrpTypClient) Query() *CommunicationEventPrpTypQuery {
	return &CommunicationEventPrpTypQuery{
		config: c.config,
	}
}

// Get returns a CommunicationEventPrpTyp entity by its id.
func (c *CommunicationEventPrpTypClient) Get(ctx context.Context, id int) (*CommunicationEventPrpTyp, error) {
	return c.Query().Where(communicationeventprptyp.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CommunicationEventPrpTypClient) GetX(ctx context.Context, id int) *CommunicationEventPrpTyp {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryParent queries the parent edge of a CommunicationEventPrpTyp.
func (c *CommunicationEventPrpTypClient) QueryParent(cept *CommunicationEventPrpTyp) *CommunicationEventPrpTypQuery {
	query := &CommunicationEventPrpTypQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := cept.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(communicationeventprptyp.Table, communicationeventprptyp.FieldID, id),
			sqlgraph.To(communicationeventprptyp.Table, communicationeventprptyp.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, communicationeventprptyp.ParentTable, communicationeventprptyp.ParentColumn),
		)
		fromV = sqlgraph.Neighbors(cept.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildren queries the children edge of a CommunicationEventPrpTyp.
func (c *CommunicationEventPrpTypClient) QueryChildren(cept *CommunicationEventPrpTyp) *CommunicationEventPrpTypQuery {
	query := &CommunicationEventPrpTypQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := cept.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(communicationeventprptyp.Table, communicationeventprptyp.FieldID, id),
			sqlgraph.To(communicationeventprptyp.Table, communicationeventprptyp.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, communicationeventprptyp.ChildrenTable, communicationeventprptyp.ChildrenColumn),
		)
		fromV = sqlgraph.Neighbors(cept.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildCommunicationEventPrpTyps queries the child_communication_event_prp_typs edge of a CommunicationEventPrpTyp.
func (c *CommunicationEventPrpTypClient) QueryChildCommunicationEventPrpTyps(cept *CommunicationEventPrpTyp) *CommunicationEventPrpTypQuery {
	query := &CommunicationEventPrpTypQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := cept.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(communicationeventprptyp.Table, communicationeventprptyp.FieldID, id),
			sqlgraph.To(communicationeventprptyp.Table, communicationeventprptyp.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, communicationeventprptyp.ChildCommunicationEventPrpTypsTable, communicationeventprptyp.ChildCommunicationEventPrpTypsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(cept.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CommunicationEventPrpTypClient) Hooks() []Hook {
	return c.hooks.CommunicationEventPrpTyp
}

// CommunicationEventTypeClient is a client for the CommunicationEventType schema.
type CommunicationEventTypeClient struct {
	config
}

// NewCommunicationEventTypeClient returns a client for the CommunicationEventType from the given config.
func NewCommunicationEventTypeClient(c config) *CommunicationEventTypeClient {
	return &CommunicationEventTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `communicationeventtype.Hooks(f(g(h())))`.
func (c *CommunicationEventTypeClient) Use(hooks ...Hook) {
	c.hooks.CommunicationEventType = append(c.hooks.CommunicationEventType, hooks...)
}

// Create returns a create builder for CommunicationEventType.
func (c *CommunicationEventTypeClient) Create() *CommunicationEventTypeCreate {
	mutation := newCommunicationEventTypeMutation(c.config, OpCreate)
	return &CommunicationEventTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CommunicationEventType entities.
func (c *CommunicationEventTypeClient) CreateBulk(builders ...*CommunicationEventTypeCreate) *CommunicationEventTypeCreateBulk {
	return &CommunicationEventTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CommunicationEventType.
func (c *CommunicationEventTypeClient) Update() *CommunicationEventTypeUpdate {
	mutation := newCommunicationEventTypeMutation(c.config, OpUpdate)
	return &CommunicationEventTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CommunicationEventTypeClient) UpdateOne(cet *CommunicationEventType) *CommunicationEventTypeUpdateOne {
	mutation := newCommunicationEventTypeMutation(c.config, OpUpdateOne, withCommunicationEventType(cet))
	return &CommunicationEventTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CommunicationEventTypeClient) UpdateOneID(id int) *CommunicationEventTypeUpdateOne {
	mutation := newCommunicationEventTypeMutation(c.config, OpUpdateOne, withCommunicationEventTypeID(id))
	return &CommunicationEventTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CommunicationEventType.
func (c *CommunicationEventTypeClient) Delete() *CommunicationEventTypeDelete {
	mutation := newCommunicationEventTypeMutation(c.config, OpDelete)
	return &CommunicationEventTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CommunicationEventTypeClient) DeleteOne(cet *CommunicationEventType) *CommunicationEventTypeDeleteOne {
	return c.DeleteOneID(cet.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CommunicationEventTypeClient) DeleteOneID(id int) *CommunicationEventTypeDeleteOne {
	builder := c.Delete().Where(communicationeventtype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CommunicationEventTypeDeleteOne{builder}
}

// Query returns a query builder for CommunicationEventType.
func (c *CommunicationEventTypeClient) Query() *CommunicationEventTypeQuery {
	return &CommunicationEventTypeQuery{
		config: c.config,
	}
}

// Get returns a CommunicationEventType entity by its id.
func (c *CommunicationEventTypeClient) Get(ctx context.Context, id int) (*CommunicationEventType, error) {
	return c.Query().Where(communicationeventtype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CommunicationEventTypeClient) GetX(ctx context.Context, id int) *CommunicationEventType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryParent queries the parent edge of a CommunicationEventType.
func (c *CommunicationEventTypeClient) QueryParent(cet *CommunicationEventType) *CommunicationEventTypeQuery {
	query := &CommunicationEventTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := cet.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(communicationeventtype.Table, communicationeventtype.FieldID, id),
			sqlgraph.To(communicationeventtype.Table, communicationeventtype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, communicationeventtype.ParentTable, communicationeventtype.ParentColumn),
		)
		fromV = sqlgraph.Neighbors(cet.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildren queries the children edge of a CommunicationEventType.
func (c *CommunicationEventTypeClient) QueryChildren(cet *CommunicationEventType) *CommunicationEventTypeQuery {
	query := &CommunicationEventTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := cet.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(communicationeventtype.Table, communicationeventtype.FieldID, id),
			sqlgraph.To(communicationeventtype.Table, communicationeventtype.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, communicationeventtype.ChildrenTable, communicationeventtype.ChildrenColumn),
		)
		fromV = sqlgraph.Neighbors(cet.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryContacMechTypeContactMechType queries the contac_mech_type_contact_mech_type edge of a CommunicationEventType.
func (c *CommunicationEventTypeClient) QueryContacMechTypeContactMechType(cet *CommunicationEventType) *ContactMechTypeQuery {
	query := &ContactMechTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := cet.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(communicationeventtype.Table, communicationeventtype.FieldID, id),
			sqlgraph.To(contactmechtype.Table, contactmechtype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, communicationeventtype.ContacMechTypeContactMechTypeTable, communicationeventtype.ContacMechTypeContactMechTypeColumn),
		)
		fromV = sqlgraph.Neighbors(cet.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildCommunicationEventTypes queries the child_communication_event_types edge of a CommunicationEventType.
func (c *CommunicationEventTypeClient) QueryChildCommunicationEventTypes(cet *CommunicationEventType) *CommunicationEventTypeQuery {
	query := &CommunicationEventTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := cet.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(communicationeventtype.Table, communicationeventtype.FieldID, id),
			sqlgraph.To(communicationeventtype.Table, communicationeventtype.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, communicationeventtype.ChildCommunicationEventTypesTable, communicationeventtype.ChildCommunicationEventTypesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(cet.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CommunicationEventTypeClient) Hooks() []Hook {
	return c.hooks.CommunicationEventType
}

// ContactMechPurposeTypeClient is a client for the ContactMechPurposeType schema.
type ContactMechPurposeTypeClient struct {
	config
}

// NewContactMechPurposeTypeClient returns a client for the ContactMechPurposeType from the given config.
func NewContactMechPurposeTypeClient(c config) *ContactMechPurposeTypeClient {
	return &ContactMechPurposeTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `contactmechpurposetype.Hooks(f(g(h())))`.
func (c *ContactMechPurposeTypeClient) Use(hooks ...Hook) {
	c.hooks.ContactMechPurposeType = append(c.hooks.ContactMechPurposeType, hooks...)
}

// Create returns a create builder for ContactMechPurposeType.
func (c *ContactMechPurposeTypeClient) Create() *ContactMechPurposeTypeCreate {
	mutation := newContactMechPurposeTypeMutation(c.config, OpCreate)
	return &ContactMechPurposeTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ContactMechPurposeType entities.
func (c *ContactMechPurposeTypeClient) CreateBulk(builders ...*ContactMechPurposeTypeCreate) *ContactMechPurposeTypeCreateBulk {
	return &ContactMechPurposeTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ContactMechPurposeType.
func (c *ContactMechPurposeTypeClient) Update() *ContactMechPurposeTypeUpdate {
	mutation := newContactMechPurposeTypeMutation(c.config, OpUpdate)
	return &ContactMechPurposeTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ContactMechPurposeTypeClient) UpdateOne(cmpt *ContactMechPurposeType) *ContactMechPurposeTypeUpdateOne {
	mutation := newContactMechPurposeTypeMutation(c.config, OpUpdateOne, withContactMechPurposeType(cmpt))
	return &ContactMechPurposeTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ContactMechPurposeTypeClient) UpdateOneID(id int) *ContactMechPurposeTypeUpdateOne {
	mutation := newContactMechPurposeTypeMutation(c.config, OpUpdateOne, withContactMechPurposeTypeID(id))
	return &ContactMechPurposeTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ContactMechPurposeType.
func (c *ContactMechPurposeTypeClient) Delete() *ContactMechPurposeTypeDelete {
	mutation := newContactMechPurposeTypeMutation(c.config, OpDelete)
	return &ContactMechPurposeTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ContactMechPurposeTypeClient) DeleteOne(cmpt *ContactMechPurposeType) *ContactMechPurposeTypeDeleteOne {
	return c.DeleteOneID(cmpt.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ContactMechPurposeTypeClient) DeleteOneID(id int) *ContactMechPurposeTypeDeleteOne {
	builder := c.Delete().Where(contactmechpurposetype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ContactMechPurposeTypeDeleteOne{builder}
}

// Query returns a query builder for ContactMechPurposeType.
func (c *ContactMechPurposeTypeClient) Query() *ContactMechPurposeTypeQuery {
	return &ContactMechPurposeTypeQuery{
		config: c.config,
	}
}

// Get returns a ContactMechPurposeType entity by its id.
func (c *ContactMechPurposeTypeClient) Get(ctx context.Context, id int) (*ContactMechPurposeType, error) {
	return c.Query().Where(contactmechpurposetype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ContactMechPurposeTypeClient) GetX(ctx context.Context, id int) *ContactMechPurposeType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryContactMechTypePurposes queries the contact_mech_type_purposes edge of a ContactMechPurposeType.
func (c *ContactMechPurposeTypeClient) QueryContactMechTypePurposes(cmpt *ContactMechPurposeType) *ContactMechTypePurposeQuery {
	query := &ContactMechTypePurposeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := cmpt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(contactmechpurposetype.Table, contactmechpurposetype.FieldID, id),
			sqlgraph.To(contactmechtypepurpose.Table, contactmechtypepurpose.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, contactmechpurposetype.ContactMechTypePurposesTable, contactmechpurposetype.ContactMechTypePurposesColumn),
		)
		fromV = sqlgraph.Neighbors(cmpt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ContactMechPurposeTypeClient) Hooks() []Hook {
	return c.hooks.ContactMechPurposeType
}

// ContactMechTypeClient is a client for the ContactMechType schema.
type ContactMechTypeClient struct {
	config
}

// NewContactMechTypeClient returns a client for the ContactMechType from the given config.
func NewContactMechTypeClient(c config) *ContactMechTypeClient {
	return &ContactMechTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `contactmechtype.Hooks(f(g(h())))`.
func (c *ContactMechTypeClient) Use(hooks ...Hook) {
	c.hooks.ContactMechType = append(c.hooks.ContactMechType, hooks...)
}

// Create returns a create builder for ContactMechType.
func (c *ContactMechTypeClient) Create() *ContactMechTypeCreate {
	mutation := newContactMechTypeMutation(c.config, OpCreate)
	return &ContactMechTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ContactMechType entities.
func (c *ContactMechTypeClient) CreateBulk(builders ...*ContactMechTypeCreate) *ContactMechTypeCreateBulk {
	return &ContactMechTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ContactMechType.
func (c *ContactMechTypeClient) Update() *ContactMechTypeUpdate {
	mutation := newContactMechTypeMutation(c.config, OpUpdate)
	return &ContactMechTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ContactMechTypeClient) UpdateOne(cmt *ContactMechType) *ContactMechTypeUpdateOne {
	mutation := newContactMechTypeMutation(c.config, OpUpdateOne, withContactMechType(cmt))
	return &ContactMechTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ContactMechTypeClient) UpdateOneID(id int) *ContactMechTypeUpdateOne {
	mutation := newContactMechTypeMutation(c.config, OpUpdateOne, withContactMechTypeID(id))
	return &ContactMechTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ContactMechType.
func (c *ContactMechTypeClient) Delete() *ContactMechTypeDelete {
	mutation := newContactMechTypeMutation(c.config, OpDelete)
	return &ContactMechTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ContactMechTypeClient) DeleteOne(cmt *ContactMechType) *ContactMechTypeDeleteOne {
	return c.DeleteOneID(cmt.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ContactMechTypeClient) DeleteOneID(id int) *ContactMechTypeDeleteOne {
	builder := c.Delete().Where(contactmechtype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ContactMechTypeDeleteOne{builder}
}

// Query returns a query builder for ContactMechType.
func (c *ContactMechTypeClient) Query() *ContactMechTypeQuery {
	return &ContactMechTypeQuery{
		config: c.config,
	}
}

// Get returns a ContactMechType entity by its id.
func (c *ContactMechTypeClient) Get(ctx context.Context, id int) (*ContactMechType, error) {
	return c.Query().Where(contactmechtype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ContactMechTypeClient) GetX(ctx context.Context, id int) *ContactMechType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryParent queries the parent edge of a ContactMechType.
func (c *ContactMechTypeClient) QueryParent(cmt *ContactMechType) *ContactMechTypeQuery {
	query := &ContactMechTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := cmt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(contactmechtype.Table, contactmechtype.FieldID, id),
			sqlgraph.To(contactmechtype.Table, contactmechtype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, contactmechtype.ParentTable, contactmechtype.ParentColumn),
		)
		fromV = sqlgraph.Neighbors(cmt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildren queries the children edge of a ContactMechType.
func (c *ContactMechTypeClient) QueryChildren(cmt *ContactMechType) *ContactMechTypeQuery {
	query := &ContactMechTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := cmt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(contactmechtype.Table, contactmechtype.FieldID, id),
			sqlgraph.To(contactmechtype.Table, contactmechtype.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, contactmechtype.ChildrenTable, contactmechtype.ChildrenColumn),
		)
		fromV = sqlgraph.Neighbors(cmt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryContacMechTypeCommunicationEventTypes queries the contac_mech_type_communication_event_types edge of a ContactMechType.
func (c *ContactMechTypeClient) QueryContacMechTypeCommunicationEventTypes(cmt *ContactMechType) *CommunicationEventTypeQuery {
	query := &CommunicationEventTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := cmt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(contactmechtype.Table, contactmechtype.FieldID, id),
			sqlgraph.To(communicationeventtype.Table, communicationeventtype.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, contactmechtype.ContacMechTypeCommunicationEventTypesTable, contactmechtype.ContacMechTypeCommunicationEventTypesColumn),
		)
		fromV = sqlgraph.Neighbors(cmt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildContactMechTypes queries the child_contact_mech_types edge of a ContactMechType.
func (c *ContactMechTypeClient) QueryChildContactMechTypes(cmt *ContactMechType) *ContactMechTypeQuery {
	query := &ContactMechTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := cmt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(contactmechtype.Table, contactmechtype.FieldID, id),
			sqlgraph.To(contactmechtype.Table, contactmechtype.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, contactmechtype.ChildContactMechTypesTable, contactmechtype.ChildContactMechTypesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(cmt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryContactMechTypePurposes queries the contact_mech_type_purposes edge of a ContactMechType.
func (c *ContactMechTypeClient) QueryContactMechTypePurposes(cmt *ContactMechType) *ContactMechTypePurposeQuery {
	query := &ContactMechTypePurposeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := cmt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(contactmechtype.Table, contactmechtype.FieldID, id),
			sqlgraph.To(contactmechtypepurpose.Table, contactmechtypepurpose.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, contactmechtype.ContactMechTypePurposesTable, contactmechtype.ContactMechTypePurposesColumn),
		)
		fromV = sqlgraph.Neighbors(cmt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ContactMechTypeClient) Hooks() []Hook {
	return c.hooks.ContactMechType
}

// ContactMechTypePurposeClient is a client for the ContactMechTypePurpose schema.
type ContactMechTypePurposeClient struct {
	config
}

// NewContactMechTypePurposeClient returns a client for the ContactMechTypePurpose from the given config.
func NewContactMechTypePurposeClient(c config) *ContactMechTypePurposeClient {
	return &ContactMechTypePurposeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `contactmechtypepurpose.Hooks(f(g(h())))`.
func (c *ContactMechTypePurposeClient) Use(hooks ...Hook) {
	c.hooks.ContactMechTypePurpose = append(c.hooks.ContactMechTypePurpose, hooks...)
}

// Create returns a create builder for ContactMechTypePurpose.
func (c *ContactMechTypePurposeClient) Create() *ContactMechTypePurposeCreate {
	mutation := newContactMechTypePurposeMutation(c.config, OpCreate)
	return &ContactMechTypePurposeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ContactMechTypePurpose entities.
func (c *ContactMechTypePurposeClient) CreateBulk(builders ...*ContactMechTypePurposeCreate) *ContactMechTypePurposeCreateBulk {
	return &ContactMechTypePurposeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ContactMechTypePurpose.
func (c *ContactMechTypePurposeClient) Update() *ContactMechTypePurposeUpdate {
	mutation := newContactMechTypePurposeMutation(c.config, OpUpdate)
	return &ContactMechTypePurposeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ContactMechTypePurposeClient) UpdateOne(cmtp *ContactMechTypePurpose) *ContactMechTypePurposeUpdateOne {
	mutation := newContactMechTypePurposeMutation(c.config, OpUpdateOne, withContactMechTypePurpose(cmtp))
	return &ContactMechTypePurposeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ContactMechTypePurposeClient) UpdateOneID(id int) *ContactMechTypePurposeUpdateOne {
	mutation := newContactMechTypePurposeMutation(c.config, OpUpdateOne, withContactMechTypePurposeID(id))
	return &ContactMechTypePurposeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ContactMechTypePurpose.
func (c *ContactMechTypePurposeClient) Delete() *ContactMechTypePurposeDelete {
	mutation := newContactMechTypePurposeMutation(c.config, OpDelete)
	return &ContactMechTypePurposeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ContactMechTypePurposeClient) DeleteOne(cmtp *ContactMechTypePurpose) *ContactMechTypePurposeDeleteOne {
	return c.DeleteOneID(cmtp.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ContactMechTypePurposeClient) DeleteOneID(id int) *ContactMechTypePurposeDeleteOne {
	builder := c.Delete().Where(contactmechtypepurpose.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ContactMechTypePurposeDeleteOne{builder}
}

// Query returns a query builder for ContactMechTypePurpose.
func (c *ContactMechTypePurposeClient) Query() *ContactMechTypePurposeQuery {
	return &ContactMechTypePurposeQuery{
		config: c.config,
	}
}

// Get returns a ContactMechTypePurpose entity by its id.
func (c *ContactMechTypePurposeClient) Get(ctx context.Context, id int) (*ContactMechTypePurpose, error) {
	return c.Query().Where(contactmechtypepurpose.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ContactMechTypePurposeClient) GetX(ctx context.Context, id int) *ContactMechTypePurpose {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryContactMechType queries the contact_mech_type edge of a ContactMechTypePurpose.
func (c *ContactMechTypePurposeClient) QueryContactMechType(cmtp *ContactMechTypePurpose) *ContactMechTypeQuery {
	query := &ContactMechTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := cmtp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(contactmechtypepurpose.Table, contactmechtypepurpose.FieldID, id),
			sqlgraph.To(contactmechtype.Table, contactmechtype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, contactmechtypepurpose.ContactMechTypeTable, contactmechtypepurpose.ContactMechTypeColumn),
		)
		fromV = sqlgraph.Neighbors(cmtp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryContactMechPurposeType queries the contact_mech_purpose_type edge of a ContactMechTypePurpose.
func (c *ContactMechTypePurposeClient) QueryContactMechPurposeType(cmtp *ContactMechTypePurpose) *ContactMechPurposeTypeQuery {
	query := &ContactMechPurposeTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := cmtp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(contactmechtypepurpose.Table, contactmechtypepurpose.FieldID, id),
			sqlgraph.To(contactmechpurposetype.Table, contactmechpurposetype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, contactmechtypepurpose.ContactMechPurposeTypeTable, contactmechtypepurpose.ContactMechPurposeTypeColumn),
		)
		fromV = sqlgraph.Neighbors(cmtp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ContactMechTypePurposeClient) Hooks() []Hook {
	return c.hooks.ContactMechTypePurpose
}

// EnumerationClient is a client for the Enumeration schema.
type EnumerationClient struct {
	config
}

// NewEnumerationClient returns a client for the Enumeration from the given config.
func NewEnumerationClient(c config) *EnumerationClient {
	return &EnumerationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `enumeration.Hooks(f(g(h())))`.
func (c *EnumerationClient) Use(hooks ...Hook) {
	c.hooks.Enumeration = append(c.hooks.Enumeration, hooks...)
}

// Create returns a create builder for Enumeration.
func (c *EnumerationClient) Create() *EnumerationCreate {
	mutation := newEnumerationMutation(c.config, OpCreate)
	return &EnumerationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Enumeration entities.
func (c *EnumerationClient) CreateBulk(builders ...*EnumerationCreate) *EnumerationCreateBulk {
	return &EnumerationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Enumeration.
func (c *EnumerationClient) Update() *EnumerationUpdate {
	mutation := newEnumerationMutation(c.config, OpUpdate)
	return &EnumerationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EnumerationClient) UpdateOne(e *Enumeration) *EnumerationUpdateOne {
	mutation := newEnumerationMutation(c.config, OpUpdateOne, withEnumeration(e))
	return &EnumerationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EnumerationClient) UpdateOneID(id int) *EnumerationUpdateOne {
	mutation := newEnumerationMutation(c.config, OpUpdateOne, withEnumerationID(id))
	return &EnumerationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Enumeration.
func (c *EnumerationClient) Delete() *EnumerationDelete {
	mutation := newEnumerationMutation(c.config, OpDelete)
	return &EnumerationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *EnumerationClient) DeleteOne(e *Enumeration) *EnumerationDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *EnumerationClient) DeleteOneID(id int) *EnumerationDeleteOne {
	builder := c.Delete().Where(enumeration.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EnumerationDeleteOne{builder}
}

// Query returns a query builder for Enumeration.
func (c *EnumerationClient) Query() *EnumerationQuery {
	return &EnumerationQuery{
		config: c.config,
	}
}

// Get returns a Enumeration entity by its id.
func (c *EnumerationClient) Get(ctx context.Context, id int) (*Enumeration, error) {
	return c.Query().Where(enumeration.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EnumerationClient) GetX(ctx context.Context, id int) *Enumeration {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEnumerationType queries the enumeration_type edge of a Enumeration.
func (c *EnumerationClient) QueryEnumerationType(e *Enumeration) *EnumerationTypeQuery {
	query := &EnumerationTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enumeration.Table, enumeration.FieldID, id),
			sqlgraph.To(enumerationtype.Table, enumerationtype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, enumeration.EnumerationTypeTable, enumeration.EnumerationTypeColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryClassFixedAssets queries the class_fixed_assets edge of a Enumeration.
func (c *EnumerationClient) QueryClassFixedAssets(e *Enumeration) *FixedAssetQuery {
	query := &FixedAssetQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enumeration.Table, enumeration.FieldID, id),
			sqlgraph.To(fixedasset.Table, fixedasset.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, enumeration.ClassFixedAssetsTable, enumeration.ClassFixedAssetsColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEmploymentStatusPeople queries the employment_status_people edge of a Enumeration.
func (c *EnumerationClient) QueryEmploymentStatusPeople(e *Enumeration) *PersonQuery {
	query := &PersonQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enumeration.Table, enumeration.FieldID, id),
			sqlgraph.To(person.Table, person.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, enumeration.EmploymentStatusPeopleTable, enumeration.EmploymentStatusPeopleColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryResidenceStatusPeople queries the residence_status_people edge of a Enumeration.
func (c *EnumerationClient) QueryResidenceStatusPeople(e *Enumeration) *PersonQuery {
	query := &PersonQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enumeration.Table, enumeration.FieldID, id),
			sqlgraph.To(person.Table, person.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, enumeration.ResidenceStatusPeopleTable, enumeration.ResidenceStatusPeopleColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMaritalStatusPeople queries the marital_status_people edge of a Enumeration.
func (c *EnumerationClient) QueryMaritalStatusPeople(e *Enumeration) *PersonQuery {
	query := &PersonQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enumeration.Table, enumeration.FieldID, id),
			sqlgraph.To(person.Table, person.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, enumeration.MaritalStatusPeopleTable, enumeration.MaritalStatusPeopleColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryScopeWorkEfforts queries the scope_work_efforts edge of a Enumeration.
func (c *EnumerationClient) QueryScopeWorkEfforts(e *Enumeration) *WorkEffortQuery {
	query := &WorkEffortQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enumeration.Table, enumeration.FieldID, id),
			sqlgraph.To(workeffort.Table, workeffort.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, enumeration.ScopeWorkEffortsTable, enumeration.ScopeWorkEffortsColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryExpectationWorkEffortPartyAssignments queries the expectation_work_effort_party_assignments edge of a Enumeration.
func (c *EnumerationClient) QueryExpectationWorkEffortPartyAssignments(e *Enumeration) *WorkEffortPartyAssignmentQuery {
	query := &WorkEffortPartyAssignmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enumeration.Table, enumeration.FieldID, id),
			sqlgraph.To(workeffortpartyassignment.Table, workeffortpartyassignment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, enumeration.ExpectationWorkEffortPartyAssignmentsTable, enumeration.ExpectationWorkEffortPartyAssignmentsColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDelegateReasonWorkEffortPartyAssignments queries the delegate_reason_work_effort_party_assignments edge of a Enumeration.
func (c *EnumerationClient) QueryDelegateReasonWorkEffortPartyAssignments(e *Enumeration) *WorkEffortPartyAssignmentQuery {
	query := &WorkEffortPartyAssignmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enumeration.Table, enumeration.FieldID, id),
			sqlgraph.To(workeffortpartyassignment.Table, workeffortpartyassignment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, enumeration.DelegateReasonWorkEffortPartyAssignmentsTable, enumeration.DelegateReasonWorkEffortPartyAssignmentsColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EnumerationClient) Hooks() []Hook {
	return c.hooks.Enumeration
}

// EnumerationTypeClient is a client for the EnumerationType schema.
type EnumerationTypeClient struct {
	config
}

// NewEnumerationTypeClient returns a client for the EnumerationType from the given config.
func NewEnumerationTypeClient(c config) *EnumerationTypeClient {
	return &EnumerationTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `enumerationtype.Hooks(f(g(h())))`.
func (c *EnumerationTypeClient) Use(hooks ...Hook) {
	c.hooks.EnumerationType = append(c.hooks.EnumerationType, hooks...)
}

// Create returns a create builder for EnumerationType.
func (c *EnumerationTypeClient) Create() *EnumerationTypeCreate {
	mutation := newEnumerationTypeMutation(c.config, OpCreate)
	return &EnumerationTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EnumerationType entities.
func (c *EnumerationTypeClient) CreateBulk(builders ...*EnumerationTypeCreate) *EnumerationTypeCreateBulk {
	return &EnumerationTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EnumerationType.
func (c *EnumerationTypeClient) Update() *EnumerationTypeUpdate {
	mutation := newEnumerationTypeMutation(c.config, OpUpdate)
	return &EnumerationTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EnumerationTypeClient) UpdateOne(et *EnumerationType) *EnumerationTypeUpdateOne {
	mutation := newEnumerationTypeMutation(c.config, OpUpdateOne, withEnumerationType(et))
	return &EnumerationTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EnumerationTypeClient) UpdateOneID(id int) *EnumerationTypeUpdateOne {
	mutation := newEnumerationTypeMutation(c.config, OpUpdateOne, withEnumerationTypeID(id))
	return &EnumerationTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EnumerationType.
func (c *EnumerationTypeClient) Delete() *EnumerationTypeDelete {
	mutation := newEnumerationTypeMutation(c.config, OpDelete)
	return &EnumerationTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *EnumerationTypeClient) DeleteOne(et *EnumerationType) *EnumerationTypeDeleteOne {
	return c.DeleteOneID(et.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *EnumerationTypeClient) DeleteOneID(id int) *EnumerationTypeDeleteOne {
	builder := c.Delete().Where(enumerationtype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EnumerationTypeDeleteOne{builder}
}

// Query returns a query builder for EnumerationType.
func (c *EnumerationTypeClient) Query() *EnumerationTypeQuery {
	return &EnumerationTypeQuery{
		config: c.config,
	}
}

// Get returns a EnumerationType entity by its id.
func (c *EnumerationTypeClient) Get(ctx context.Context, id int) (*EnumerationType, error) {
	return c.Query().Where(enumerationtype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EnumerationTypeClient) GetX(ctx context.Context, id int) *EnumerationType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryParent queries the parent edge of a EnumerationType.
func (c *EnumerationTypeClient) QueryParent(et *EnumerationType) *EnumerationTypeQuery {
	query := &EnumerationTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := et.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enumerationtype.Table, enumerationtype.FieldID, id),
			sqlgraph.To(enumerationtype.Table, enumerationtype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, enumerationtype.ParentTable, enumerationtype.ParentColumn),
		)
		fromV = sqlgraph.Neighbors(et.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildren queries the children edge of a EnumerationType.
func (c *EnumerationTypeClient) QueryChildren(et *EnumerationType) *EnumerationTypeQuery {
	query := &EnumerationTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := et.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enumerationtype.Table, enumerationtype.FieldID, id),
			sqlgraph.To(enumerationtype.Table, enumerationtype.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, enumerationtype.ChildrenTable, enumerationtype.ChildrenColumn),
		)
		fromV = sqlgraph.Neighbors(et.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEnumerations queries the enumerations edge of a EnumerationType.
func (c *EnumerationTypeClient) QueryEnumerations(et *EnumerationType) *EnumerationQuery {
	query := &EnumerationQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := et.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enumerationtype.Table, enumerationtype.FieldID, id),
			sqlgraph.To(enumeration.Table, enumeration.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, enumerationtype.EnumerationsTable, enumerationtype.EnumerationsColumn),
		)
		fromV = sqlgraph.Neighbors(et.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildEnumerationTypes queries the child_enumeration_types edge of a EnumerationType.
func (c *EnumerationTypeClient) QueryChildEnumerationTypes(et *EnumerationType) *EnumerationTypeQuery {
	query := &EnumerationTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := et.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enumerationtype.Table, enumerationtype.FieldID, id),
			sqlgraph.To(enumerationtype.Table, enumerationtype.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, enumerationtype.ChildEnumerationTypesTable, enumerationtype.ChildEnumerationTypesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(et.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EnumerationTypeClient) Hooks() []Hook {
	return c.hooks.EnumerationType
}

// FixedAssetClient is a client for the FixedAsset schema.
type FixedAssetClient struct {
	config
}

// NewFixedAssetClient returns a client for the FixedAsset from the given config.
func NewFixedAssetClient(c config) *FixedAssetClient {
	return &FixedAssetClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `fixedasset.Hooks(f(g(h())))`.
func (c *FixedAssetClient) Use(hooks ...Hook) {
	c.hooks.FixedAsset = append(c.hooks.FixedAsset, hooks...)
}

// Create returns a create builder for FixedAsset.
func (c *FixedAssetClient) Create() *FixedAssetCreate {
	mutation := newFixedAssetMutation(c.config, OpCreate)
	return &FixedAssetCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of FixedAsset entities.
func (c *FixedAssetClient) CreateBulk(builders ...*FixedAssetCreate) *FixedAssetCreateBulk {
	return &FixedAssetCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for FixedAsset.
func (c *FixedAssetClient) Update() *FixedAssetUpdate {
	mutation := newFixedAssetMutation(c.config, OpUpdate)
	return &FixedAssetUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FixedAssetClient) UpdateOne(fa *FixedAsset) *FixedAssetUpdateOne {
	mutation := newFixedAssetMutation(c.config, OpUpdateOne, withFixedAsset(fa))
	return &FixedAssetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FixedAssetClient) UpdateOneID(id int) *FixedAssetUpdateOne {
	mutation := newFixedAssetMutation(c.config, OpUpdateOne, withFixedAssetID(id))
	return &FixedAssetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FixedAsset.
func (c *FixedAssetClient) Delete() *FixedAssetDelete {
	mutation := newFixedAssetMutation(c.config, OpDelete)
	return &FixedAssetDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *FixedAssetClient) DeleteOne(fa *FixedAsset) *FixedAssetDeleteOne {
	return c.DeleteOneID(fa.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *FixedAssetClient) DeleteOneID(id int) *FixedAssetDeleteOne {
	builder := c.Delete().Where(fixedasset.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FixedAssetDeleteOne{builder}
}

// Query returns a query builder for FixedAsset.
func (c *FixedAssetClient) Query() *FixedAssetQuery {
	return &FixedAssetQuery{
		config: c.config,
	}
}

// Get returns a FixedAsset entity by its id.
func (c *FixedAssetClient) Get(ctx context.Context, id int) (*FixedAsset, error) {
	return c.Query().Where(fixedasset.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FixedAssetClient) GetX(ctx context.Context, id int) *FixedAsset {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryParent queries the parent edge of a FixedAsset.
func (c *FixedAssetClient) QueryParent(fa *FixedAsset) *FixedAssetQuery {
	query := &FixedAssetQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := fa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(fixedasset.Table, fixedasset.FieldID, id),
			sqlgraph.To(fixedasset.Table, fixedasset.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, fixedasset.ParentTable, fixedasset.ParentColumn),
		)
		fromV = sqlgraph.Neighbors(fa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildren queries the children edge of a FixedAsset.
func (c *FixedAssetClient) QueryChildren(fa *FixedAsset) *FixedAssetQuery {
	query := &FixedAssetQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := fa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(fixedasset.Table, fixedasset.FieldID, id),
			sqlgraph.To(fixedasset.Table, fixedasset.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, fixedasset.ChildrenTable, fixedasset.ChildrenColumn),
		)
		fromV = sqlgraph.Neighbors(fa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryClassEnumeration queries the class_enumeration edge of a FixedAsset.
func (c *FixedAssetClient) QueryClassEnumeration(fa *FixedAsset) *EnumerationQuery {
	query := &EnumerationQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := fa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(fixedasset.Table, fixedasset.FieldID, id),
			sqlgraph.To(enumeration.Table, enumeration.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, fixedasset.ClassEnumerationTable, fixedasset.ClassEnumerationColumn),
		)
		fromV = sqlgraph.Neighbors(fa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryParty queries the party edge of a FixedAsset.
func (c *FixedAssetClient) QueryParty(fa *FixedAsset) *PartyQuery {
	query := &PartyQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := fa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(fixedasset.Table, fixedasset.FieldID, id),
			sqlgraph.To(party.Table, party.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, fixedasset.PartyTable, fixedasset.PartyColumn),
		)
		fromV = sqlgraph.Neighbors(fa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRoleType queries the role_type edge of a FixedAsset.
func (c *FixedAssetClient) QueryRoleType(fa *FixedAsset) *RoleTypeQuery {
	query := &RoleTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := fa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(fixedasset.Table, fixedasset.FieldID, id),
			sqlgraph.To(roletype.Table, roletype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, fixedasset.RoleTypeTable, fixedasset.RoleTypeColumn),
		)
		fromV = sqlgraph.Neighbors(fa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPartyRole queries the party_role edge of a FixedAsset.
func (c *FixedAssetClient) QueryPartyRole(fa *FixedAsset) *PartyRoleQuery {
	query := &PartyRoleQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := fa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(fixedasset.Table, fixedasset.FieldID, id),
			sqlgraph.To(partyrole.Table, partyrole.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, fixedasset.PartyRoleTable, fixedasset.PartyRoleColumn),
		)
		fromV = sqlgraph.Neighbors(fa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildFixedAssets queries the child_fixed_assets edge of a FixedAsset.
func (c *FixedAssetClient) QueryChildFixedAssets(fa *FixedAsset) *FixedAssetQuery {
	query := &FixedAssetQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := fa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(fixedasset.Table, fixedasset.FieldID, id),
			sqlgraph.To(fixedasset.Table, fixedasset.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, fixedasset.ChildFixedAssetsTable, fixedasset.ChildFixedAssetsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(fa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkEfforts queries the work_efforts edge of a FixedAsset.
func (c *FixedAssetClient) QueryWorkEfforts(fa *FixedAsset) *WorkEffortQuery {
	query := &WorkEffortQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := fa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(fixedasset.Table, fixedasset.FieldID, id),
			sqlgraph.To(workeffort.Table, workeffort.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, fixedasset.WorkEffortsTable, fixedasset.WorkEffortsColumn),
		)
		fromV = sqlgraph.Neighbors(fa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkEffortFixedAssetAssigns queries the work_effort_fixed_asset_assigns edge of a FixedAsset.
func (c *FixedAssetClient) QueryWorkEffortFixedAssetAssigns(fa *FixedAsset) *WorkEffortFixedAssetAssignQuery {
	query := &WorkEffortFixedAssetAssignQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := fa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(fixedasset.Table, fixedasset.FieldID, id),
			sqlgraph.To(workeffortfixedassetassign.Table, workeffortfixedassetassign.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, fixedasset.WorkEffortFixedAssetAssignsTable, fixedasset.WorkEffortFixedAssetAssignsColumn),
		)
		fromV = sqlgraph.Neighbors(fa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FixedAssetClient) Hooks() []Hook {
	return c.hooks.FixedAsset
}

// PartyClient is a client for the Party schema.
type PartyClient struct {
	config
}

// NewPartyClient returns a client for the Party from the given config.
func NewPartyClient(c config) *PartyClient {
	return &PartyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `party.Hooks(f(g(h())))`.
func (c *PartyClient) Use(hooks ...Hook) {
	c.hooks.Party = append(c.hooks.Party, hooks...)
}

// Create returns a create builder for Party.
func (c *PartyClient) Create() *PartyCreate {
	mutation := newPartyMutation(c.config, OpCreate)
	return &PartyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Party entities.
func (c *PartyClient) CreateBulk(builders ...*PartyCreate) *PartyCreateBulk {
	return &PartyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Party.
func (c *PartyClient) Update() *PartyUpdate {
	mutation := newPartyMutation(c.config, OpUpdate)
	return &PartyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PartyClient) UpdateOne(pa *Party) *PartyUpdateOne {
	mutation := newPartyMutation(c.config, OpUpdateOne, withParty(pa))
	return &PartyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PartyClient) UpdateOneID(id int) *PartyUpdateOne {
	mutation := newPartyMutation(c.config, OpUpdateOne, withPartyID(id))
	return &PartyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Party.
func (c *PartyClient) Delete() *PartyDelete {
	mutation := newPartyMutation(c.config, OpDelete)
	return &PartyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PartyClient) DeleteOne(pa *Party) *PartyDeleteOne {
	return c.DeleteOneID(pa.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PartyClient) DeleteOneID(id int) *PartyDeleteOne {
	builder := c.Delete().Where(party.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PartyDeleteOne{builder}
}

// Query returns a query builder for Party.
func (c *PartyClient) Query() *PartyQuery {
	return &PartyQuery{
		config: c.config,
	}
}

// Get returns a Party entity by its id.
func (c *PartyClient) Get(ctx context.Context, id int) (*Party, error) {
	return c.Query().Where(party.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PartyClient) GetX(ctx context.Context, id int) *Party {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPartyType queries the party_type edge of a Party.
func (c *PartyClient) QueryPartyType(pa *Party) *PartyTypeQuery {
	query := &PartyTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(party.Table, party.FieldID, id),
			sqlgraph.To(partytype.Table, partytype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, party.PartyTypeTable, party.PartyTypeColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCreatedByUserLogin queries the created_by_user_login edge of a Party.
func (c *PartyClient) QueryCreatedByUserLogin(pa *Party) *UserLoginQuery {
	query := &UserLoginQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(party.Table, party.FieldID, id),
			sqlgraph.To(userlogin.Table, userlogin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, party.CreatedByUserLoginTable, party.CreatedByUserLoginColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLastModifiedByUserLogin queries the last_modified_by_user_login edge of a Party.
func (c *PartyClient) QueryLastModifiedByUserLogin(pa *Party) *UserLoginQuery {
	query := &UserLoginQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(party.Table, party.FieldID, id),
			sqlgraph.To(userlogin.Table, userlogin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, party.LastModifiedByUserLoginTable, party.LastModifiedByUserLoginColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStatusItem queries the status_item edge of a Party.
func (c *PartyClient) QueryStatusItem(pa *Party) *StatusItemQuery {
	query := &StatusItemQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(party.Table, party.FieldID, id),
			sqlgraph.To(statusitem.Table, statusitem.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, party.StatusItemTable, party.StatusItemColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFixedAssets queries the fixed_assets edge of a Party.
func (c *PartyClient) QueryFixedAssets(pa *Party) *FixedAssetQuery {
	query := &FixedAssetQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(party.Table, party.FieldID, id),
			sqlgraph.To(fixedasset.Table, fixedasset.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, party.FixedAssetsTable, party.FixedAssetsColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPartyContactMeches queries the party_contact_meches edge of a Party.
func (c *PartyClient) QueryPartyContactMeches(pa *Party) *PartyContactMechQuery {
	query := &PartyContactMechQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(party.Table, party.FieldID, id),
			sqlgraph.To(partycontactmech.Table, partycontactmech.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, party.PartyContactMechesTable, party.PartyContactMechesColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPartyRoles queries the party_roles edge of a Party.
func (c *PartyClient) QueryPartyRoles(pa *Party) *PartyRoleQuery {
	query := &PartyRoleQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(party.Table, party.FieldID, id),
			sqlgraph.To(partyrole.Table, partyrole.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, party.PartyRolesTable, party.PartyRolesColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPartyStatuses queries the party_statuses edge of a Party.
func (c *PartyClient) QueryPartyStatuses(pa *Party) *PartyStatusQuery {
	query := &PartyStatusQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(party.Table, party.FieldID, id),
			sqlgraph.To(partystatus.Table, partystatus.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, party.PartyStatusesTable, party.PartyStatusesColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPerson queries the person edge of a Party.
func (c *PartyClient) QueryPerson(pa *Party) *PersonQuery {
	query := &PersonQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(party.Table, party.FieldID, id),
			sqlgraph.To(person.Table, person.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, party.PersonTable, party.PersonColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserLogins queries the user_logins edge of a Party.
func (c *PartyClient) QueryUserLogins(pa *Party) *UserLoginQuery {
	query := &UserLoginQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(party.Table, party.FieldID, id),
			sqlgraph.To(userlogin.Table, userlogin.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, party.UserLoginsTable, party.UserLoginsColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkEffortPartyAssignments queries the work_effort_party_assignments edge of a Party.
func (c *PartyClient) QueryWorkEffortPartyAssignments(pa *Party) *WorkEffortPartyAssignmentQuery {
	query := &WorkEffortPartyAssignmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(party.Table, party.FieldID, id),
			sqlgraph.To(workeffortpartyassignment.Table, workeffortpartyassignment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, party.WorkEffortPartyAssignmentsTable, party.WorkEffortPartyAssignmentsColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PartyClient) Hooks() []Hook {
	return c.hooks.Party
}

// PartyClassificationTypeClient is a client for the PartyClassificationType schema.
type PartyClassificationTypeClient struct {
	config
}

// NewPartyClassificationTypeClient returns a client for the PartyClassificationType from the given config.
func NewPartyClassificationTypeClient(c config) *PartyClassificationTypeClient {
	return &PartyClassificationTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `partyclassificationtype.Hooks(f(g(h())))`.
func (c *PartyClassificationTypeClient) Use(hooks ...Hook) {
	c.hooks.PartyClassificationType = append(c.hooks.PartyClassificationType, hooks...)
}

// Create returns a create builder for PartyClassificationType.
func (c *PartyClassificationTypeClient) Create() *PartyClassificationTypeCreate {
	mutation := newPartyClassificationTypeMutation(c.config, OpCreate)
	return &PartyClassificationTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PartyClassificationType entities.
func (c *PartyClassificationTypeClient) CreateBulk(builders ...*PartyClassificationTypeCreate) *PartyClassificationTypeCreateBulk {
	return &PartyClassificationTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PartyClassificationType.
func (c *PartyClassificationTypeClient) Update() *PartyClassificationTypeUpdate {
	mutation := newPartyClassificationTypeMutation(c.config, OpUpdate)
	return &PartyClassificationTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PartyClassificationTypeClient) UpdateOne(pct *PartyClassificationType) *PartyClassificationTypeUpdateOne {
	mutation := newPartyClassificationTypeMutation(c.config, OpUpdateOne, withPartyClassificationType(pct))
	return &PartyClassificationTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PartyClassificationTypeClient) UpdateOneID(id int) *PartyClassificationTypeUpdateOne {
	mutation := newPartyClassificationTypeMutation(c.config, OpUpdateOne, withPartyClassificationTypeID(id))
	return &PartyClassificationTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PartyClassificationType.
func (c *PartyClassificationTypeClient) Delete() *PartyClassificationTypeDelete {
	mutation := newPartyClassificationTypeMutation(c.config, OpDelete)
	return &PartyClassificationTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PartyClassificationTypeClient) DeleteOne(pct *PartyClassificationType) *PartyClassificationTypeDeleteOne {
	return c.DeleteOneID(pct.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PartyClassificationTypeClient) DeleteOneID(id int) *PartyClassificationTypeDeleteOne {
	builder := c.Delete().Where(partyclassificationtype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PartyClassificationTypeDeleteOne{builder}
}

// Query returns a query builder for PartyClassificationType.
func (c *PartyClassificationTypeClient) Query() *PartyClassificationTypeQuery {
	return &PartyClassificationTypeQuery{
		config: c.config,
	}
}

// Get returns a PartyClassificationType entity by its id.
func (c *PartyClassificationTypeClient) Get(ctx context.Context, id int) (*PartyClassificationType, error) {
	return c.Query().Where(partyclassificationtype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PartyClassificationTypeClient) GetX(ctx context.Context, id int) *PartyClassificationType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryParent queries the parent edge of a PartyClassificationType.
func (c *PartyClassificationTypeClient) QueryParent(pct *PartyClassificationType) *PartyClassificationTypeQuery {
	query := &PartyClassificationTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pct.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(partyclassificationtype.Table, partyclassificationtype.FieldID, id),
			sqlgraph.To(partyclassificationtype.Table, partyclassificationtype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, partyclassificationtype.ParentTable, partyclassificationtype.ParentColumn),
		)
		fromV = sqlgraph.Neighbors(pct.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildren queries the children edge of a PartyClassificationType.
func (c *PartyClassificationTypeClient) QueryChildren(pct *PartyClassificationType) *PartyClassificationTypeQuery {
	query := &PartyClassificationTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pct.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(partyclassificationtype.Table, partyclassificationtype.FieldID, id),
			sqlgraph.To(partyclassificationtype.Table, partyclassificationtype.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, partyclassificationtype.ChildrenTable, partyclassificationtype.ChildrenColumn),
		)
		fromV = sqlgraph.Neighbors(pct.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildPartyClassificationTypes queries the child_party_classification_types edge of a PartyClassificationType.
func (c *PartyClassificationTypeClient) QueryChildPartyClassificationTypes(pct *PartyClassificationType) *PartyClassificationTypeQuery {
	query := &PartyClassificationTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pct.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(partyclassificationtype.Table, partyclassificationtype.FieldID, id),
			sqlgraph.To(partyclassificationtype.Table, partyclassificationtype.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, partyclassificationtype.ChildPartyClassificationTypesTable, partyclassificationtype.ChildPartyClassificationTypesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pct.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PartyClassificationTypeClient) Hooks() []Hook {
	return c.hooks.PartyClassificationType
}

// PartyContactMechClient is a client for the PartyContactMech schema.
type PartyContactMechClient struct {
	config
}

// NewPartyContactMechClient returns a client for the PartyContactMech from the given config.
func NewPartyContactMechClient(c config) *PartyContactMechClient {
	return &PartyContactMechClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `partycontactmech.Hooks(f(g(h())))`.
func (c *PartyContactMechClient) Use(hooks ...Hook) {
	c.hooks.PartyContactMech = append(c.hooks.PartyContactMech, hooks...)
}

// Create returns a create builder for PartyContactMech.
func (c *PartyContactMechClient) Create() *PartyContactMechCreate {
	mutation := newPartyContactMechMutation(c.config, OpCreate)
	return &PartyContactMechCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PartyContactMech entities.
func (c *PartyContactMechClient) CreateBulk(builders ...*PartyContactMechCreate) *PartyContactMechCreateBulk {
	return &PartyContactMechCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PartyContactMech.
func (c *PartyContactMechClient) Update() *PartyContactMechUpdate {
	mutation := newPartyContactMechMutation(c.config, OpUpdate)
	return &PartyContactMechUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PartyContactMechClient) UpdateOne(pcm *PartyContactMech) *PartyContactMechUpdateOne {
	mutation := newPartyContactMechMutation(c.config, OpUpdateOne, withPartyContactMech(pcm))
	return &PartyContactMechUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PartyContactMechClient) UpdateOneID(id int) *PartyContactMechUpdateOne {
	mutation := newPartyContactMechMutation(c.config, OpUpdateOne, withPartyContactMechID(id))
	return &PartyContactMechUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PartyContactMech.
func (c *PartyContactMechClient) Delete() *PartyContactMechDelete {
	mutation := newPartyContactMechMutation(c.config, OpDelete)
	return &PartyContactMechDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PartyContactMechClient) DeleteOne(pcm *PartyContactMech) *PartyContactMechDeleteOne {
	return c.DeleteOneID(pcm.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PartyContactMechClient) DeleteOneID(id int) *PartyContactMechDeleteOne {
	builder := c.Delete().Where(partycontactmech.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PartyContactMechDeleteOne{builder}
}

// Query returns a query builder for PartyContactMech.
func (c *PartyContactMechClient) Query() *PartyContactMechQuery {
	return &PartyContactMechQuery{
		config: c.config,
	}
}

// Get returns a PartyContactMech entity by its id.
func (c *PartyContactMechClient) Get(ctx context.Context, id int) (*PartyContactMech, error) {
	return c.Query().Where(partycontactmech.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PartyContactMechClient) GetX(ctx context.Context, id int) *PartyContactMech {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryParty queries the party edge of a PartyContactMech.
func (c *PartyContactMechClient) QueryParty(pcm *PartyContactMech) *PartyQuery {
	query := &PartyQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pcm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(partycontactmech.Table, partycontactmech.FieldID, id),
			sqlgraph.To(party.Table, party.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, partycontactmech.PartyTable, partycontactmech.PartyColumn),
		)
		fromV = sqlgraph.Neighbors(pcm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPerson queries the person edge of a PartyContactMech.
func (c *PartyContactMechClient) QueryPerson(pcm *PartyContactMech) *PersonQuery {
	query := &PersonQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pcm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(partycontactmech.Table, partycontactmech.FieldID, id),
			sqlgraph.To(person.Table, person.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, partycontactmech.PersonTable, partycontactmech.PersonColumn),
		)
		fromV = sqlgraph.Neighbors(pcm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPartyRole queries the party_role edge of a PartyContactMech.
func (c *PartyContactMechClient) QueryPartyRole(pcm *PartyContactMech) *PartyRoleQuery {
	query := &PartyRoleQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pcm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(partycontactmech.Table, partycontactmech.FieldID, id),
			sqlgraph.To(partyrole.Table, partyrole.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, partycontactmech.PartyRoleTable, partycontactmech.PartyRoleColumn),
		)
		fromV = sqlgraph.Neighbors(pcm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRoleType queries the role_type edge of a PartyContactMech.
func (c *PartyContactMechClient) QueryRoleType(pcm *PartyContactMech) *RoleTypeQuery {
	query := &RoleTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pcm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(partycontactmech.Table, partycontactmech.FieldID, id),
			sqlgraph.To(roletype.Table, roletype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, partycontactmech.RoleTypeTable, partycontactmech.RoleTypeColumn),
		)
		fromV = sqlgraph.Neighbors(pcm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PartyContactMechClient) Hooks() []Hook {
	return c.hooks.PartyContactMech
}

// PartyContentTypeClient is a client for the PartyContentType schema.
type PartyContentTypeClient struct {
	config
}

// NewPartyContentTypeClient returns a client for the PartyContentType from the given config.
func NewPartyContentTypeClient(c config) *PartyContentTypeClient {
	return &PartyContentTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `partycontenttype.Hooks(f(g(h())))`.
func (c *PartyContentTypeClient) Use(hooks ...Hook) {
	c.hooks.PartyContentType = append(c.hooks.PartyContentType, hooks...)
}

// Create returns a create builder for PartyContentType.
func (c *PartyContentTypeClient) Create() *PartyContentTypeCreate {
	mutation := newPartyContentTypeMutation(c.config, OpCreate)
	return &PartyContentTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PartyContentType entities.
func (c *PartyContentTypeClient) CreateBulk(builders ...*PartyContentTypeCreate) *PartyContentTypeCreateBulk {
	return &PartyContentTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PartyContentType.
func (c *PartyContentTypeClient) Update() *PartyContentTypeUpdate {
	mutation := newPartyContentTypeMutation(c.config, OpUpdate)
	return &PartyContentTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PartyContentTypeClient) UpdateOne(pct *PartyContentType) *PartyContentTypeUpdateOne {
	mutation := newPartyContentTypeMutation(c.config, OpUpdateOne, withPartyContentType(pct))
	return &PartyContentTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PartyContentTypeClient) UpdateOneID(id int) *PartyContentTypeUpdateOne {
	mutation := newPartyContentTypeMutation(c.config, OpUpdateOne, withPartyContentTypeID(id))
	return &PartyContentTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PartyContentType.
func (c *PartyContentTypeClient) Delete() *PartyContentTypeDelete {
	mutation := newPartyContentTypeMutation(c.config, OpDelete)
	return &PartyContentTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PartyContentTypeClient) DeleteOne(pct *PartyContentType) *PartyContentTypeDeleteOne {
	return c.DeleteOneID(pct.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PartyContentTypeClient) DeleteOneID(id int) *PartyContentTypeDeleteOne {
	builder := c.Delete().Where(partycontenttype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PartyContentTypeDeleteOne{builder}
}

// Query returns a query builder for PartyContentType.
func (c *PartyContentTypeClient) Query() *PartyContentTypeQuery {
	return &PartyContentTypeQuery{
		config: c.config,
	}
}

// Get returns a PartyContentType entity by its id.
func (c *PartyContentTypeClient) Get(ctx context.Context, id int) (*PartyContentType, error) {
	return c.Query().Where(partycontenttype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PartyContentTypeClient) GetX(ctx context.Context, id int) *PartyContentType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryParent queries the parent edge of a PartyContentType.
func (c *PartyContentTypeClient) QueryParent(pct *PartyContentType) *PartyContentTypeQuery {
	query := &PartyContentTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pct.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(partycontenttype.Table, partycontenttype.FieldID, id),
			sqlgraph.To(partycontenttype.Table, partycontenttype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, partycontenttype.ParentTable, partycontenttype.ParentColumn),
		)
		fromV = sqlgraph.Neighbors(pct.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildren queries the children edge of a PartyContentType.
func (c *PartyContentTypeClient) QueryChildren(pct *PartyContentType) *PartyContentTypeQuery {
	query := &PartyContentTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pct.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(partycontenttype.Table, partycontenttype.FieldID, id),
			sqlgraph.To(partycontenttype.Table, partycontenttype.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, partycontenttype.ChildrenTable, partycontenttype.ChildrenColumn),
		)
		fromV = sqlgraph.Neighbors(pct.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildPartyContentTypes queries the child_party_content_types edge of a PartyContentType.
func (c *PartyContentTypeClient) QueryChildPartyContentTypes(pct *PartyContentType) *PartyContentTypeQuery {
	query := &PartyContentTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pct.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(partycontenttype.Table, partycontenttype.FieldID, id),
			sqlgraph.To(partycontenttype.Table, partycontenttype.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, partycontenttype.ChildPartyContentTypesTable, partycontenttype.ChildPartyContentTypesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pct.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PartyContentTypeClient) Hooks() []Hook {
	return c.hooks.PartyContentType
}

// PartyIdentificationTypeClient is a client for the PartyIdentificationType schema.
type PartyIdentificationTypeClient struct {
	config
}

// NewPartyIdentificationTypeClient returns a client for the PartyIdentificationType from the given config.
func NewPartyIdentificationTypeClient(c config) *PartyIdentificationTypeClient {
	return &PartyIdentificationTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `partyidentificationtype.Hooks(f(g(h())))`.
func (c *PartyIdentificationTypeClient) Use(hooks ...Hook) {
	c.hooks.PartyIdentificationType = append(c.hooks.PartyIdentificationType, hooks...)
}

// Create returns a create builder for PartyIdentificationType.
func (c *PartyIdentificationTypeClient) Create() *PartyIdentificationTypeCreate {
	mutation := newPartyIdentificationTypeMutation(c.config, OpCreate)
	return &PartyIdentificationTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PartyIdentificationType entities.
func (c *PartyIdentificationTypeClient) CreateBulk(builders ...*PartyIdentificationTypeCreate) *PartyIdentificationTypeCreateBulk {
	return &PartyIdentificationTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PartyIdentificationType.
func (c *PartyIdentificationTypeClient) Update() *PartyIdentificationTypeUpdate {
	mutation := newPartyIdentificationTypeMutation(c.config, OpUpdate)
	return &PartyIdentificationTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PartyIdentificationTypeClient) UpdateOne(pit *PartyIdentificationType) *PartyIdentificationTypeUpdateOne {
	mutation := newPartyIdentificationTypeMutation(c.config, OpUpdateOne, withPartyIdentificationType(pit))
	return &PartyIdentificationTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PartyIdentificationTypeClient) UpdateOneID(id int) *PartyIdentificationTypeUpdateOne {
	mutation := newPartyIdentificationTypeMutation(c.config, OpUpdateOne, withPartyIdentificationTypeID(id))
	return &PartyIdentificationTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PartyIdentificationType.
func (c *PartyIdentificationTypeClient) Delete() *PartyIdentificationTypeDelete {
	mutation := newPartyIdentificationTypeMutation(c.config, OpDelete)
	return &PartyIdentificationTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PartyIdentificationTypeClient) DeleteOne(pit *PartyIdentificationType) *PartyIdentificationTypeDeleteOne {
	return c.DeleteOneID(pit.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PartyIdentificationTypeClient) DeleteOneID(id int) *PartyIdentificationTypeDeleteOne {
	builder := c.Delete().Where(partyidentificationtype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PartyIdentificationTypeDeleteOne{builder}
}

// Query returns a query builder for PartyIdentificationType.
func (c *PartyIdentificationTypeClient) Query() *PartyIdentificationTypeQuery {
	return &PartyIdentificationTypeQuery{
		config: c.config,
	}
}

// Get returns a PartyIdentificationType entity by its id.
func (c *PartyIdentificationTypeClient) Get(ctx context.Context, id int) (*PartyIdentificationType, error) {
	return c.Query().Where(partyidentificationtype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PartyIdentificationTypeClient) GetX(ctx context.Context, id int) *PartyIdentificationType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryParent queries the parent edge of a PartyIdentificationType.
func (c *PartyIdentificationTypeClient) QueryParent(pit *PartyIdentificationType) *PartyIdentificationTypeQuery {
	query := &PartyIdentificationTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pit.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(partyidentificationtype.Table, partyidentificationtype.FieldID, id),
			sqlgraph.To(partyidentificationtype.Table, partyidentificationtype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, partyidentificationtype.ParentTable, partyidentificationtype.ParentColumn),
		)
		fromV = sqlgraph.Neighbors(pit.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildren queries the children edge of a PartyIdentificationType.
func (c *PartyIdentificationTypeClient) QueryChildren(pit *PartyIdentificationType) *PartyIdentificationTypeQuery {
	query := &PartyIdentificationTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pit.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(partyidentificationtype.Table, partyidentificationtype.FieldID, id),
			sqlgraph.To(partyidentificationtype.Table, partyidentificationtype.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, partyidentificationtype.ChildrenTable, partyidentificationtype.ChildrenColumn),
		)
		fromV = sqlgraph.Neighbors(pit.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildPartyIdentificationTypes queries the child_party_identification_types edge of a PartyIdentificationType.
func (c *PartyIdentificationTypeClient) QueryChildPartyIdentificationTypes(pit *PartyIdentificationType) *PartyIdentificationTypeQuery {
	query := &PartyIdentificationTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pit.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(partyidentificationtype.Table, partyidentificationtype.FieldID, id),
			sqlgraph.To(partyidentificationtype.Table, partyidentificationtype.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, partyidentificationtype.ChildPartyIdentificationTypesTable, partyidentificationtype.ChildPartyIdentificationTypesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pit.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PartyIdentificationTypeClient) Hooks() []Hook {
	return c.hooks.PartyIdentificationType
}

// PartyQualTypeClient is a client for the PartyQualType schema.
type PartyQualTypeClient struct {
	config
}

// NewPartyQualTypeClient returns a client for the PartyQualType from the given config.
func NewPartyQualTypeClient(c config) *PartyQualTypeClient {
	return &PartyQualTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `partyqualtype.Hooks(f(g(h())))`.
func (c *PartyQualTypeClient) Use(hooks ...Hook) {
	c.hooks.PartyQualType = append(c.hooks.PartyQualType, hooks...)
}

// Create returns a create builder for PartyQualType.
func (c *PartyQualTypeClient) Create() *PartyQualTypeCreate {
	mutation := newPartyQualTypeMutation(c.config, OpCreate)
	return &PartyQualTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PartyQualType entities.
func (c *PartyQualTypeClient) CreateBulk(builders ...*PartyQualTypeCreate) *PartyQualTypeCreateBulk {
	return &PartyQualTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PartyQualType.
func (c *PartyQualTypeClient) Update() *PartyQualTypeUpdate {
	mutation := newPartyQualTypeMutation(c.config, OpUpdate)
	return &PartyQualTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PartyQualTypeClient) UpdateOne(pqt *PartyQualType) *PartyQualTypeUpdateOne {
	mutation := newPartyQualTypeMutation(c.config, OpUpdateOne, withPartyQualType(pqt))
	return &PartyQualTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PartyQualTypeClient) UpdateOneID(id int) *PartyQualTypeUpdateOne {
	mutation := newPartyQualTypeMutation(c.config, OpUpdateOne, withPartyQualTypeID(id))
	return &PartyQualTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PartyQualType.
func (c *PartyQualTypeClient) Delete() *PartyQualTypeDelete {
	mutation := newPartyQualTypeMutation(c.config, OpDelete)
	return &PartyQualTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PartyQualTypeClient) DeleteOne(pqt *PartyQualType) *PartyQualTypeDeleteOne {
	return c.DeleteOneID(pqt.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PartyQualTypeClient) DeleteOneID(id int) *PartyQualTypeDeleteOne {
	builder := c.Delete().Where(partyqualtype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PartyQualTypeDeleteOne{builder}
}

// Query returns a query builder for PartyQualType.
func (c *PartyQualTypeClient) Query() *PartyQualTypeQuery {
	return &PartyQualTypeQuery{
		config: c.config,
	}
}

// Get returns a PartyQualType entity by its id.
func (c *PartyQualTypeClient) Get(ctx context.Context, id int) (*PartyQualType, error) {
	return c.Query().Where(partyqualtype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PartyQualTypeClient) GetX(ctx context.Context, id int) *PartyQualType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryParent queries the parent edge of a PartyQualType.
func (c *PartyQualTypeClient) QueryParent(pqt *PartyQualType) *PartyQualTypeQuery {
	query := &PartyQualTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pqt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(partyqualtype.Table, partyqualtype.FieldID, id),
			sqlgraph.To(partyqualtype.Table, partyqualtype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, partyqualtype.ParentTable, partyqualtype.ParentColumn),
		)
		fromV = sqlgraph.Neighbors(pqt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildren queries the children edge of a PartyQualType.
func (c *PartyQualTypeClient) QueryChildren(pqt *PartyQualType) *PartyQualTypeQuery {
	query := &PartyQualTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pqt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(partyqualtype.Table, partyqualtype.FieldID, id),
			sqlgraph.To(partyqualtype.Table, partyqualtype.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, partyqualtype.ChildrenTable, partyqualtype.ChildrenColumn),
		)
		fromV = sqlgraph.Neighbors(pqt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildPartyQualTypes queries the child_party_qual_types edge of a PartyQualType.
func (c *PartyQualTypeClient) QueryChildPartyQualTypes(pqt *PartyQualType) *PartyQualTypeQuery {
	query := &PartyQualTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pqt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(partyqualtype.Table, partyqualtype.FieldID, id),
			sqlgraph.To(partyqualtype.Table, partyqualtype.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, partyqualtype.ChildPartyQualTypesTable, partyqualtype.ChildPartyQualTypesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pqt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PartyQualTypeClient) Hooks() []Hook {
	return c.hooks.PartyQualType
}

// PartyRelationshipTypeClient is a client for the PartyRelationshipType schema.
type PartyRelationshipTypeClient struct {
	config
}

// NewPartyRelationshipTypeClient returns a client for the PartyRelationshipType from the given config.
func NewPartyRelationshipTypeClient(c config) *PartyRelationshipTypeClient {
	return &PartyRelationshipTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `partyrelationshiptype.Hooks(f(g(h())))`.
func (c *PartyRelationshipTypeClient) Use(hooks ...Hook) {
	c.hooks.PartyRelationshipType = append(c.hooks.PartyRelationshipType, hooks...)
}

// Create returns a create builder for PartyRelationshipType.
func (c *PartyRelationshipTypeClient) Create() *PartyRelationshipTypeCreate {
	mutation := newPartyRelationshipTypeMutation(c.config, OpCreate)
	return &PartyRelationshipTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PartyRelationshipType entities.
func (c *PartyRelationshipTypeClient) CreateBulk(builders ...*PartyRelationshipTypeCreate) *PartyRelationshipTypeCreateBulk {
	return &PartyRelationshipTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PartyRelationshipType.
func (c *PartyRelationshipTypeClient) Update() *PartyRelationshipTypeUpdate {
	mutation := newPartyRelationshipTypeMutation(c.config, OpUpdate)
	return &PartyRelationshipTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PartyRelationshipTypeClient) UpdateOne(prt *PartyRelationshipType) *PartyRelationshipTypeUpdateOne {
	mutation := newPartyRelationshipTypeMutation(c.config, OpUpdateOne, withPartyRelationshipType(prt))
	return &PartyRelationshipTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PartyRelationshipTypeClient) UpdateOneID(id int) *PartyRelationshipTypeUpdateOne {
	mutation := newPartyRelationshipTypeMutation(c.config, OpUpdateOne, withPartyRelationshipTypeID(id))
	return &PartyRelationshipTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PartyRelationshipType.
func (c *PartyRelationshipTypeClient) Delete() *PartyRelationshipTypeDelete {
	mutation := newPartyRelationshipTypeMutation(c.config, OpDelete)
	return &PartyRelationshipTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PartyRelationshipTypeClient) DeleteOne(prt *PartyRelationshipType) *PartyRelationshipTypeDeleteOne {
	return c.DeleteOneID(prt.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PartyRelationshipTypeClient) DeleteOneID(id int) *PartyRelationshipTypeDeleteOne {
	builder := c.Delete().Where(partyrelationshiptype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PartyRelationshipTypeDeleteOne{builder}
}

// Query returns a query builder for PartyRelationshipType.
func (c *PartyRelationshipTypeClient) Query() *PartyRelationshipTypeQuery {
	return &PartyRelationshipTypeQuery{
		config: c.config,
	}
}

// Get returns a PartyRelationshipType entity by its id.
func (c *PartyRelationshipTypeClient) Get(ctx context.Context, id int) (*PartyRelationshipType, error) {
	return c.Query().Where(partyrelationshiptype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PartyRelationshipTypeClient) GetX(ctx context.Context, id int) *PartyRelationshipType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryParent queries the parent edge of a PartyRelationshipType.
func (c *PartyRelationshipTypeClient) QueryParent(prt *PartyRelationshipType) *PartyRelationshipTypeQuery {
	query := &PartyRelationshipTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := prt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(partyrelationshiptype.Table, partyrelationshiptype.FieldID, id),
			sqlgraph.To(partyrelationshiptype.Table, partyrelationshiptype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, partyrelationshiptype.ParentTable, partyrelationshiptype.ParentColumn),
		)
		fromV = sqlgraph.Neighbors(prt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildren queries the children edge of a PartyRelationshipType.
func (c *PartyRelationshipTypeClient) QueryChildren(prt *PartyRelationshipType) *PartyRelationshipTypeQuery {
	query := &PartyRelationshipTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := prt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(partyrelationshiptype.Table, partyrelationshiptype.FieldID, id),
			sqlgraph.To(partyrelationshiptype.Table, partyrelationshiptype.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, partyrelationshiptype.ChildrenTable, partyrelationshiptype.ChildrenColumn),
		)
		fromV = sqlgraph.Neighbors(prt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryValidFromRoleType queries the valid_from_role_type edge of a PartyRelationshipType.
func (c *PartyRelationshipTypeClient) QueryValidFromRoleType(prt *PartyRelationshipType) *RoleTypeQuery {
	query := &RoleTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := prt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(partyrelationshiptype.Table, partyrelationshiptype.FieldID, id),
			sqlgraph.To(roletype.Table, roletype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, partyrelationshiptype.ValidFromRoleTypeTable, partyrelationshiptype.ValidFromRoleTypeColumn),
		)
		fromV = sqlgraph.Neighbors(prt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryValidToRoleType queries the valid_to_role_type edge of a PartyRelationshipType.
func (c *PartyRelationshipTypeClient) QueryValidToRoleType(prt *PartyRelationshipType) *RoleTypeQuery {
	query := &RoleTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := prt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(partyrelationshiptype.Table, partyrelationshiptype.FieldID, id),
			sqlgraph.To(roletype.Table, roletype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, partyrelationshiptype.ValidToRoleTypeTable, partyrelationshiptype.ValidToRoleTypeColumn),
		)
		fromV = sqlgraph.Neighbors(prt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildPartyRelationshipTypes queries the child_party_relationship_types edge of a PartyRelationshipType.
func (c *PartyRelationshipTypeClient) QueryChildPartyRelationshipTypes(prt *PartyRelationshipType) *PartyRelationshipTypeQuery {
	query := &PartyRelationshipTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := prt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(partyrelationshiptype.Table, partyrelationshiptype.FieldID, id),
			sqlgraph.To(partyrelationshiptype.Table, partyrelationshiptype.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, partyrelationshiptype.ChildPartyRelationshipTypesTable, partyrelationshiptype.ChildPartyRelationshipTypesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(prt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PartyRelationshipTypeClient) Hooks() []Hook {
	return c.hooks.PartyRelationshipType
}

// PartyRoleClient is a client for the PartyRole schema.
type PartyRoleClient struct {
	config
}

// NewPartyRoleClient returns a client for the PartyRole from the given config.
func NewPartyRoleClient(c config) *PartyRoleClient {
	return &PartyRoleClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `partyrole.Hooks(f(g(h())))`.
func (c *PartyRoleClient) Use(hooks ...Hook) {
	c.hooks.PartyRole = append(c.hooks.PartyRole, hooks...)
}

// Create returns a create builder for PartyRole.
func (c *PartyRoleClient) Create() *PartyRoleCreate {
	mutation := newPartyRoleMutation(c.config, OpCreate)
	return &PartyRoleCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PartyRole entities.
func (c *PartyRoleClient) CreateBulk(builders ...*PartyRoleCreate) *PartyRoleCreateBulk {
	return &PartyRoleCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PartyRole.
func (c *PartyRoleClient) Update() *PartyRoleUpdate {
	mutation := newPartyRoleMutation(c.config, OpUpdate)
	return &PartyRoleUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PartyRoleClient) UpdateOne(pr *PartyRole) *PartyRoleUpdateOne {
	mutation := newPartyRoleMutation(c.config, OpUpdateOne, withPartyRole(pr))
	return &PartyRoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PartyRoleClient) UpdateOneID(id int) *PartyRoleUpdateOne {
	mutation := newPartyRoleMutation(c.config, OpUpdateOne, withPartyRoleID(id))
	return &PartyRoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PartyRole.
func (c *PartyRoleClient) Delete() *PartyRoleDelete {
	mutation := newPartyRoleMutation(c.config, OpDelete)
	return &PartyRoleDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PartyRoleClient) DeleteOne(pr *PartyRole) *PartyRoleDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PartyRoleClient) DeleteOneID(id int) *PartyRoleDeleteOne {
	builder := c.Delete().Where(partyrole.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PartyRoleDeleteOne{builder}
}

// Query returns a query builder for PartyRole.
func (c *PartyRoleClient) Query() *PartyRoleQuery {
	return &PartyRoleQuery{
		config: c.config,
	}
}

// Get returns a PartyRole entity by its id.
func (c *PartyRoleClient) Get(ctx context.Context, id int) (*PartyRole, error) {
	return c.Query().Where(partyrole.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PartyRoleClient) GetX(ctx context.Context, id int) *PartyRole {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryParty queries the party edge of a PartyRole.
func (c *PartyRoleClient) QueryParty(pr *PartyRole) *PartyQuery {
	query := &PartyQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(partyrole.Table, partyrole.FieldID, id),
			sqlgraph.To(party.Table, party.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, partyrole.PartyTable, partyrole.PartyColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRoleType queries the role_type edge of a PartyRole.
func (c *PartyRoleClient) QueryRoleType(pr *PartyRole) *RoleTypeQuery {
	query := &RoleTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(partyrole.Table, partyrole.FieldID, id),
			sqlgraph.To(roletype.Table, roletype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, partyrole.RoleTypeTable, partyrole.RoleTypeColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFixedAssets queries the fixed_assets edge of a PartyRole.
func (c *PartyRoleClient) QueryFixedAssets(pr *PartyRole) *FixedAssetQuery {
	query := &FixedAssetQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(partyrole.Table, partyrole.FieldID, id),
			sqlgraph.To(fixedasset.Table, fixedasset.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, partyrole.FixedAssetsTable, partyrole.FixedAssetsColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPartyContactMeches queries the party_contact_meches edge of a PartyRole.
func (c *PartyRoleClient) QueryPartyContactMeches(pr *PartyRole) *PartyContactMechQuery {
	query := &PartyContactMechQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(partyrole.Table, partyrole.FieldID, id),
			sqlgraph.To(partycontactmech.Table, partycontactmech.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, partyrole.PartyContactMechesTable, partyrole.PartyContactMechesColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkEffortPartyAssignments queries the work_effort_party_assignments edge of a PartyRole.
func (c *PartyRoleClient) QueryWorkEffortPartyAssignments(pr *PartyRole) *WorkEffortPartyAssignmentQuery {
	query := &WorkEffortPartyAssignmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(partyrole.Table, partyrole.FieldID, id),
			sqlgraph.To(workeffortpartyassignment.Table, workeffortpartyassignment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, partyrole.WorkEffortPartyAssignmentsTable, partyrole.WorkEffortPartyAssignmentsColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PartyRoleClient) Hooks() []Hook {
	return c.hooks.PartyRole
}

// PartyStatusClient is a client for the PartyStatus schema.
type PartyStatusClient struct {
	config
}

// NewPartyStatusClient returns a client for the PartyStatus from the given config.
func NewPartyStatusClient(c config) *PartyStatusClient {
	return &PartyStatusClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `partystatus.Hooks(f(g(h())))`.
func (c *PartyStatusClient) Use(hooks ...Hook) {
	c.hooks.PartyStatus = append(c.hooks.PartyStatus, hooks...)
}

// Create returns a create builder for PartyStatus.
func (c *PartyStatusClient) Create() *PartyStatusCreate {
	mutation := newPartyStatusMutation(c.config, OpCreate)
	return &PartyStatusCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PartyStatus entities.
func (c *PartyStatusClient) CreateBulk(builders ...*PartyStatusCreate) *PartyStatusCreateBulk {
	return &PartyStatusCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PartyStatus.
func (c *PartyStatusClient) Update() *PartyStatusUpdate {
	mutation := newPartyStatusMutation(c.config, OpUpdate)
	return &PartyStatusUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PartyStatusClient) UpdateOne(ps *PartyStatus) *PartyStatusUpdateOne {
	mutation := newPartyStatusMutation(c.config, OpUpdateOne, withPartyStatus(ps))
	return &PartyStatusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PartyStatusClient) UpdateOneID(id int) *PartyStatusUpdateOne {
	mutation := newPartyStatusMutation(c.config, OpUpdateOne, withPartyStatusID(id))
	return &PartyStatusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PartyStatus.
func (c *PartyStatusClient) Delete() *PartyStatusDelete {
	mutation := newPartyStatusMutation(c.config, OpDelete)
	return &PartyStatusDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PartyStatusClient) DeleteOne(ps *PartyStatus) *PartyStatusDeleteOne {
	return c.DeleteOneID(ps.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PartyStatusClient) DeleteOneID(id int) *PartyStatusDeleteOne {
	builder := c.Delete().Where(partystatus.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PartyStatusDeleteOne{builder}
}

// Query returns a query builder for PartyStatus.
func (c *PartyStatusClient) Query() *PartyStatusQuery {
	return &PartyStatusQuery{
		config: c.config,
	}
}

// Get returns a PartyStatus entity by its id.
func (c *PartyStatusClient) Get(ctx context.Context, id int) (*PartyStatus, error) {
	return c.Query().Where(partystatus.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PartyStatusClient) GetX(ctx context.Context, id int) *PartyStatus {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryStatusItem queries the status_item edge of a PartyStatus.
func (c *PartyStatusClient) QueryStatusItem(ps *PartyStatus) *StatusItemQuery {
	query := &StatusItemQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ps.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(partystatus.Table, partystatus.FieldID, id),
			sqlgraph.To(statusitem.Table, statusitem.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, partystatus.StatusItemTable, partystatus.StatusItemColumn),
		)
		fromV = sqlgraph.Neighbors(ps.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryParty queries the party edge of a PartyStatus.
func (c *PartyStatusClient) QueryParty(ps *PartyStatus) *PartyQuery {
	query := &PartyQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ps.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(partystatus.Table, partystatus.FieldID, id),
			sqlgraph.To(party.Table, party.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, partystatus.PartyTable, partystatus.PartyColumn),
		)
		fromV = sqlgraph.Neighbors(ps.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChangeByUserLogin queries the change_by_user_login edge of a PartyStatus.
func (c *PartyStatusClient) QueryChangeByUserLogin(ps *PartyStatus) *UserLoginQuery {
	query := &UserLoginQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ps.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(partystatus.Table, partystatus.FieldID, id),
			sqlgraph.To(userlogin.Table, userlogin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, partystatus.ChangeByUserLoginTable, partystatus.ChangeByUserLoginColumn),
		)
		fromV = sqlgraph.Neighbors(ps.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PartyStatusClient) Hooks() []Hook {
	return c.hooks.PartyStatus
}

// PartyTypeClient is a client for the PartyType schema.
type PartyTypeClient struct {
	config
}

// NewPartyTypeClient returns a client for the PartyType from the given config.
func NewPartyTypeClient(c config) *PartyTypeClient {
	return &PartyTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `partytype.Hooks(f(g(h())))`.
func (c *PartyTypeClient) Use(hooks ...Hook) {
	c.hooks.PartyType = append(c.hooks.PartyType, hooks...)
}

// Create returns a create builder for PartyType.
func (c *PartyTypeClient) Create() *PartyTypeCreate {
	mutation := newPartyTypeMutation(c.config, OpCreate)
	return &PartyTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PartyType entities.
func (c *PartyTypeClient) CreateBulk(builders ...*PartyTypeCreate) *PartyTypeCreateBulk {
	return &PartyTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PartyType.
func (c *PartyTypeClient) Update() *PartyTypeUpdate {
	mutation := newPartyTypeMutation(c.config, OpUpdate)
	return &PartyTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PartyTypeClient) UpdateOne(pt *PartyType) *PartyTypeUpdateOne {
	mutation := newPartyTypeMutation(c.config, OpUpdateOne, withPartyType(pt))
	return &PartyTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PartyTypeClient) UpdateOneID(id int) *PartyTypeUpdateOne {
	mutation := newPartyTypeMutation(c.config, OpUpdateOne, withPartyTypeID(id))
	return &PartyTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PartyType.
func (c *PartyTypeClient) Delete() *PartyTypeDelete {
	mutation := newPartyTypeMutation(c.config, OpDelete)
	return &PartyTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PartyTypeClient) DeleteOne(pt *PartyType) *PartyTypeDeleteOne {
	return c.DeleteOneID(pt.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PartyTypeClient) DeleteOneID(id int) *PartyTypeDeleteOne {
	builder := c.Delete().Where(partytype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PartyTypeDeleteOne{builder}
}

// Query returns a query builder for PartyType.
func (c *PartyTypeClient) Query() *PartyTypeQuery {
	return &PartyTypeQuery{
		config: c.config,
	}
}

// Get returns a PartyType entity by its id.
func (c *PartyTypeClient) Get(ctx context.Context, id int) (*PartyType, error) {
	return c.Query().Where(partytype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PartyTypeClient) GetX(ctx context.Context, id int) *PartyType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryParent queries the parent edge of a PartyType.
func (c *PartyTypeClient) QueryParent(pt *PartyType) *PartyTypeQuery {
	query := &PartyTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(partytype.Table, partytype.FieldID, id),
			sqlgraph.To(partytype.Table, partytype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, partytype.ParentTable, partytype.ParentColumn),
		)
		fromV = sqlgraph.Neighbors(pt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildren queries the children edge of a PartyType.
func (c *PartyTypeClient) QueryChildren(pt *PartyType) *PartyTypeQuery {
	query := &PartyTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(partytype.Table, partytype.FieldID, id),
			sqlgraph.To(partytype.Table, partytype.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, partytype.ChildrenTable, partytype.ChildrenColumn),
		)
		fromV = sqlgraph.Neighbors(pt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySiblingPartyTypes queries the sibling_party_types edge of a PartyType.
func (c *PartyTypeClient) QuerySiblingPartyTypes(pt *PartyType) *PartyTypeQuery {
	query := &PartyTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(partytype.Table, partytype.FieldID, id),
			sqlgraph.To(partytype.Table, partytype.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, partytype.SiblingPartyTypesTable, partytype.SiblingPartyTypesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryParties queries the parties edge of a PartyType.
func (c *PartyTypeClient) QueryParties(pt *PartyType) *PartyQuery {
	query := &PartyQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(partytype.Table, partytype.FieldID, id),
			sqlgraph.To(party.Table, party.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, partytype.PartiesTable, partytype.PartiesColumn),
		)
		fromV = sqlgraph.Neighbors(pt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildPartyTypes queries the child_party_types edge of a PartyType.
func (c *PartyTypeClient) QueryChildPartyTypes(pt *PartyType) *PartyTypeQuery {
	query := &PartyTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(partytype.Table, partytype.FieldID, id),
			sqlgraph.To(partytype.Table, partytype.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, partytype.ChildPartyTypesTable, partytype.ChildPartyTypesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PartyTypeClient) Hooks() []Hook {
	return c.hooks.PartyType
}

// PersonClient is a client for the Person schema.
type PersonClient struct {
	config
}

// NewPersonClient returns a client for the Person from the given config.
func NewPersonClient(c config) *PersonClient {
	return &PersonClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `person.Hooks(f(g(h())))`.
func (c *PersonClient) Use(hooks ...Hook) {
	c.hooks.Person = append(c.hooks.Person, hooks...)
}

// Create returns a create builder for Person.
func (c *PersonClient) Create() *PersonCreate {
	mutation := newPersonMutation(c.config, OpCreate)
	return &PersonCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Person entities.
func (c *PersonClient) CreateBulk(builders ...*PersonCreate) *PersonCreateBulk {
	return &PersonCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Person.
func (c *PersonClient) Update() *PersonUpdate {
	mutation := newPersonMutation(c.config, OpUpdate)
	return &PersonUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PersonClient) UpdateOne(pe *Person) *PersonUpdateOne {
	mutation := newPersonMutation(c.config, OpUpdateOne, withPerson(pe))
	return &PersonUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PersonClient) UpdateOneID(id int) *PersonUpdateOne {
	mutation := newPersonMutation(c.config, OpUpdateOne, withPersonID(id))
	return &PersonUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Person.
func (c *PersonClient) Delete() *PersonDelete {
	mutation := newPersonMutation(c.config, OpDelete)
	return &PersonDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PersonClient) DeleteOne(pe *Person) *PersonDeleteOne {
	return c.DeleteOneID(pe.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PersonClient) DeleteOneID(id int) *PersonDeleteOne {
	builder := c.Delete().Where(person.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PersonDeleteOne{builder}
}

// Query returns a query builder for Person.
func (c *PersonClient) Query() *PersonQuery {
	return &PersonQuery{
		config: c.config,
	}
}

// Get returns a Person entity by its id.
func (c *PersonClient) Get(ctx context.Context, id int) (*Person, error) {
	return c.Query().Where(person.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PersonClient) GetX(ctx context.Context, id int) *Person {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryParty queries the party edge of a Person.
func (c *PersonClient) QueryParty(pe *Person) *PartyQuery {
	query := &PartyQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pe.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(person.Table, person.FieldID, id),
			sqlgraph.To(party.Table, party.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, person.PartyTable, person.PartyColumn),
		)
		fromV = sqlgraph.Neighbors(pe.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEmploymentStatusEnumeration queries the employment_status_enumeration edge of a Person.
func (c *PersonClient) QueryEmploymentStatusEnumeration(pe *Person) *EnumerationQuery {
	query := &EnumerationQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pe.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(person.Table, person.FieldID, id),
			sqlgraph.To(enumeration.Table, enumeration.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, person.EmploymentStatusEnumerationTable, person.EmploymentStatusEnumerationColumn),
		)
		fromV = sqlgraph.Neighbors(pe.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryResidenceStatusEnumeration queries the residence_status_enumeration edge of a Person.
func (c *PersonClient) QueryResidenceStatusEnumeration(pe *Person) *EnumerationQuery {
	query := &EnumerationQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pe.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(person.Table, person.FieldID, id),
			sqlgraph.To(enumeration.Table, enumeration.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, person.ResidenceStatusEnumerationTable, person.ResidenceStatusEnumerationColumn),
		)
		fromV = sqlgraph.Neighbors(pe.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMaritalStatusEnumeration queries the marital_status_enumeration edge of a Person.
func (c *PersonClient) QueryMaritalStatusEnumeration(pe *Person) *EnumerationQuery {
	query := &EnumerationQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pe.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(person.Table, person.FieldID, id),
			sqlgraph.To(enumeration.Table, enumeration.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, person.MaritalStatusEnumerationTable, person.MaritalStatusEnumerationColumn),
		)
		fromV = sqlgraph.Neighbors(pe.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPartyContactMeches queries the party_contact_meches edge of a Person.
func (c *PersonClient) QueryPartyContactMeches(pe *Person) *PartyContactMechQuery {
	query := &PartyContactMechQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pe.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(person.Table, person.FieldID, id),
			sqlgraph.To(partycontactmech.Table, partycontactmech.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, person.PartyContactMechesTable, person.PartyContactMechesColumn),
		)
		fromV = sqlgraph.Neighbors(pe.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserLogins queries the user_logins edge of a Person.
func (c *PersonClient) QueryUserLogins(pe *Person) *UserLoginQuery {
	query := &UserLoginQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pe.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(person.Table, person.FieldID, id),
			sqlgraph.To(userlogin.Table, userlogin.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, person.UserLoginsTable, person.UserLoginsColumn),
		)
		fromV = sqlgraph.Neighbors(pe.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PersonClient) Hooks() []Hook {
	return c.hooks.Person
}

// RoleTypeClient is a client for the RoleType schema.
type RoleTypeClient struct {
	config
}

// NewRoleTypeClient returns a client for the RoleType from the given config.
func NewRoleTypeClient(c config) *RoleTypeClient {
	return &RoleTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `roletype.Hooks(f(g(h())))`.
func (c *RoleTypeClient) Use(hooks ...Hook) {
	c.hooks.RoleType = append(c.hooks.RoleType, hooks...)
}

// Create returns a create builder for RoleType.
func (c *RoleTypeClient) Create() *RoleTypeCreate {
	mutation := newRoleTypeMutation(c.config, OpCreate)
	return &RoleTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of RoleType entities.
func (c *RoleTypeClient) CreateBulk(builders ...*RoleTypeCreate) *RoleTypeCreateBulk {
	return &RoleTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for RoleType.
func (c *RoleTypeClient) Update() *RoleTypeUpdate {
	mutation := newRoleTypeMutation(c.config, OpUpdate)
	return &RoleTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RoleTypeClient) UpdateOne(rt *RoleType) *RoleTypeUpdateOne {
	mutation := newRoleTypeMutation(c.config, OpUpdateOne, withRoleType(rt))
	return &RoleTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RoleTypeClient) UpdateOneID(id int) *RoleTypeUpdateOne {
	mutation := newRoleTypeMutation(c.config, OpUpdateOne, withRoleTypeID(id))
	return &RoleTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RoleType.
func (c *RoleTypeClient) Delete() *RoleTypeDelete {
	mutation := newRoleTypeMutation(c.config, OpDelete)
	return &RoleTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *RoleTypeClient) DeleteOne(rt *RoleType) *RoleTypeDeleteOne {
	return c.DeleteOneID(rt.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *RoleTypeClient) DeleteOneID(id int) *RoleTypeDeleteOne {
	builder := c.Delete().Where(roletype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RoleTypeDeleteOne{builder}
}

// Query returns a query builder for RoleType.
func (c *RoleTypeClient) Query() *RoleTypeQuery {
	return &RoleTypeQuery{
		config: c.config,
	}
}

// Get returns a RoleType entity by its id.
func (c *RoleTypeClient) Get(ctx context.Context, id int) (*RoleType, error) {
	return c.Query().Where(roletype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RoleTypeClient) GetX(ctx context.Context, id int) *RoleType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryParent queries the parent edge of a RoleType.
func (c *RoleTypeClient) QueryParent(rt *RoleType) *RoleTypeQuery {
	query := &RoleTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := rt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(roletype.Table, roletype.FieldID, id),
			sqlgraph.To(roletype.Table, roletype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, roletype.ParentTable, roletype.ParentColumn),
		)
		fromV = sqlgraph.Neighbors(rt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildren queries the children edge of a RoleType.
func (c *RoleTypeClient) QueryChildren(rt *RoleType) *RoleTypeQuery {
	query := &RoleTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := rt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(roletype.Table, roletype.FieldID, id),
			sqlgraph.To(roletype.Table, roletype.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, roletype.ChildrenTable, roletype.ChildrenColumn),
		)
		fromV = sqlgraph.Neighbors(rt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFixedAssets queries the fixed_assets edge of a RoleType.
func (c *RoleTypeClient) QueryFixedAssets(rt *RoleType) *FixedAssetQuery {
	query := &FixedAssetQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := rt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(roletype.Table, roletype.FieldID, id),
			sqlgraph.To(fixedasset.Table, fixedasset.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, roletype.FixedAssetsTable, roletype.FixedAssetsColumn),
		)
		fromV = sqlgraph.Neighbors(rt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPartyContactMeches queries the party_contact_meches edge of a RoleType.
func (c *RoleTypeClient) QueryPartyContactMeches(rt *RoleType) *PartyContactMechQuery {
	query := &PartyContactMechQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := rt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(roletype.Table, roletype.FieldID, id),
			sqlgraph.To(partycontactmech.Table, partycontactmech.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, roletype.PartyContactMechesTable, roletype.PartyContactMechesColumn),
		)
		fromV = sqlgraph.Neighbors(rt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryValidFromPartyRelationshipTypes queries the valid_from_party_relationship_types edge of a RoleType.
func (c *RoleTypeClient) QueryValidFromPartyRelationshipTypes(rt *RoleType) *PartyRelationshipTypeQuery {
	query := &PartyRelationshipTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := rt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(roletype.Table, roletype.FieldID, id),
			sqlgraph.To(partyrelationshiptype.Table, partyrelationshiptype.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, roletype.ValidFromPartyRelationshipTypesTable, roletype.ValidFromPartyRelationshipTypesColumn),
		)
		fromV = sqlgraph.Neighbors(rt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryValidToPartyRelationshipTypes queries the valid_to_party_relationship_types edge of a RoleType.
func (c *RoleTypeClient) QueryValidToPartyRelationshipTypes(rt *RoleType) *PartyRelationshipTypeQuery {
	query := &PartyRelationshipTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := rt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(roletype.Table, roletype.FieldID, id),
			sqlgraph.To(partyrelationshiptype.Table, partyrelationshiptype.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, roletype.ValidToPartyRelationshipTypesTable, roletype.ValidToPartyRelationshipTypesColumn),
		)
		fromV = sqlgraph.Neighbors(rt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPartyRoles queries the party_roles edge of a RoleType.
func (c *RoleTypeClient) QueryPartyRoles(rt *RoleType) *PartyRoleQuery {
	query := &PartyRoleQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := rt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(roletype.Table, roletype.FieldID, id),
			sqlgraph.To(partyrole.Table, partyrole.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, roletype.PartyRolesTable, roletype.PartyRolesColumn),
		)
		fromV = sqlgraph.Neighbors(rt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildRoleTypes queries the child_role_types edge of a RoleType.
func (c *RoleTypeClient) QueryChildRoleTypes(rt *RoleType) *RoleTypeQuery {
	query := &RoleTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := rt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(roletype.Table, roletype.FieldID, id),
			sqlgraph.To(roletype.Table, roletype.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, roletype.ChildRoleTypesTable, roletype.ChildRoleTypesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(rt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkEffortPartyAssignments queries the work_effort_party_assignments edge of a RoleType.
func (c *RoleTypeClient) QueryWorkEffortPartyAssignments(rt *RoleType) *WorkEffortPartyAssignmentQuery {
	query := &WorkEffortPartyAssignmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := rt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(roletype.Table, roletype.FieldID, id),
			sqlgraph.To(workeffortpartyassignment.Table, workeffortpartyassignment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, roletype.WorkEffortPartyAssignmentsTable, roletype.WorkEffortPartyAssignmentsColumn),
		)
		fromV = sqlgraph.Neighbors(rt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RoleTypeClient) Hooks() []Hook {
	return c.hooks.RoleType
}

// SecurityGroupClient is a client for the SecurityGroup schema.
type SecurityGroupClient struct {
	config
}

// NewSecurityGroupClient returns a client for the SecurityGroup from the given config.
func NewSecurityGroupClient(c config) *SecurityGroupClient {
	return &SecurityGroupClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `securitygroup.Hooks(f(g(h())))`.
func (c *SecurityGroupClient) Use(hooks ...Hook) {
	c.hooks.SecurityGroup = append(c.hooks.SecurityGroup, hooks...)
}

// Create returns a create builder for SecurityGroup.
func (c *SecurityGroupClient) Create() *SecurityGroupCreate {
	mutation := newSecurityGroupMutation(c.config, OpCreate)
	return &SecurityGroupCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SecurityGroup entities.
func (c *SecurityGroupClient) CreateBulk(builders ...*SecurityGroupCreate) *SecurityGroupCreateBulk {
	return &SecurityGroupCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SecurityGroup.
func (c *SecurityGroupClient) Update() *SecurityGroupUpdate {
	mutation := newSecurityGroupMutation(c.config, OpUpdate)
	return &SecurityGroupUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SecurityGroupClient) UpdateOne(sg *SecurityGroup) *SecurityGroupUpdateOne {
	mutation := newSecurityGroupMutation(c.config, OpUpdateOne, withSecurityGroup(sg))
	return &SecurityGroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SecurityGroupClient) UpdateOneID(id int) *SecurityGroupUpdateOne {
	mutation := newSecurityGroupMutation(c.config, OpUpdateOne, withSecurityGroupID(id))
	return &SecurityGroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SecurityGroup.
func (c *SecurityGroupClient) Delete() *SecurityGroupDelete {
	mutation := newSecurityGroupMutation(c.config, OpDelete)
	return &SecurityGroupDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SecurityGroupClient) DeleteOne(sg *SecurityGroup) *SecurityGroupDeleteOne {
	return c.DeleteOneID(sg.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SecurityGroupClient) DeleteOneID(id int) *SecurityGroupDeleteOne {
	builder := c.Delete().Where(securitygroup.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SecurityGroupDeleteOne{builder}
}

// Query returns a query builder for SecurityGroup.
func (c *SecurityGroupClient) Query() *SecurityGroupQuery {
	return &SecurityGroupQuery{
		config: c.config,
	}
}

// Get returns a SecurityGroup entity by its id.
func (c *SecurityGroupClient) Get(ctx context.Context, id int) (*SecurityGroup, error) {
	return c.Query().Where(securitygroup.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SecurityGroupClient) GetX(ctx context.Context, id int) *SecurityGroup {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySecurityGroupPermissions queries the security_group_permissions edge of a SecurityGroup.
func (c *SecurityGroupClient) QuerySecurityGroupPermissions(sg *SecurityGroup) *SecurityGroupPermissionQuery {
	query := &SecurityGroupPermissionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sg.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(securitygroup.Table, securitygroup.FieldID, id),
			sqlgraph.To(securitygrouppermission.Table, securitygrouppermission.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, securitygroup.SecurityGroupPermissionsTable, securitygroup.SecurityGroupPermissionsColumn),
		)
		fromV = sqlgraph.Neighbors(sg.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserLoginSecurityGroups queries the user_login_security_groups edge of a SecurityGroup.
func (c *SecurityGroupClient) QueryUserLoginSecurityGroups(sg *SecurityGroup) *UserLoginSecurityGroupQuery {
	query := &UserLoginSecurityGroupQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sg.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(securitygroup.Table, securitygroup.FieldID, id),
			sqlgraph.To(userloginsecuritygroup.Table, userloginsecuritygroup.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, securitygroup.UserLoginSecurityGroupsTable, securitygroup.UserLoginSecurityGroupsColumn),
		)
		fromV = sqlgraph.Neighbors(sg.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SecurityGroupClient) Hooks() []Hook {
	return c.hooks.SecurityGroup
}

// SecurityGroupPermissionClient is a client for the SecurityGroupPermission schema.
type SecurityGroupPermissionClient struct {
	config
}

// NewSecurityGroupPermissionClient returns a client for the SecurityGroupPermission from the given config.
func NewSecurityGroupPermissionClient(c config) *SecurityGroupPermissionClient {
	return &SecurityGroupPermissionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `securitygrouppermission.Hooks(f(g(h())))`.
func (c *SecurityGroupPermissionClient) Use(hooks ...Hook) {
	c.hooks.SecurityGroupPermission = append(c.hooks.SecurityGroupPermission, hooks...)
}

// Create returns a create builder for SecurityGroupPermission.
func (c *SecurityGroupPermissionClient) Create() *SecurityGroupPermissionCreate {
	mutation := newSecurityGroupPermissionMutation(c.config, OpCreate)
	return &SecurityGroupPermissionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SecurityGroupPermission entities.
func (c *SecurityGroupPermissionClient) CreateBulk(builders ...*SecurityGroupPermissionCreate) *SecurityGroupPermissionCreateBulk {
	return &SecurityGroupPermissionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SecurityGroupPermission.
func (c *SecurityGroupPermissionClient) Update() *SecurityGroupPermissionUpdate {
	mutation := newSecurityGroupPermissionMutation(c.config, OpUpdate)
	return &SecurityGroupPermissionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SecurityGroupPermissionClient) UpdateOne(sgp *SecurityGroupPermission) *SecurityGroupPermissionUpdateOne {
	mutation := newSecurityGroupPermissionMutation(c.config, OpUpdateOne, withSecurityGroupPermission(sgp))
	return &SecurityGroupPermissionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SecurityGroupPermissionClient) UpdateOneID(id int) *SecurityGroupPermissionUpdateOne {
	mutation := newSecurityGroupPermissionMutation(c.config, OpUpdateOne, withSecurityGroupPermissionID(id))
	return &SecurityGroupPermissionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SecurityGroupPermission.
func (c *SecurityGroupPermissionClient) Delete() *SecurityGroupPermissionDelete {
	mutation := newSecurityGroupPermissionMutation(c.config, OpDelete)
	return &SecurityGroupPermissionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SecurityGroupPermissionClient) DeleteOne(sgp *SecurityGroupPermission) *SecurityGroupPermissionDeleteOne {
	return c.DeleteOneID(sgp.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SecurityGroupPermissionClient) DeleteOneID(id int) *SecurityGroupPermissionDeleteOne {
	builder := c.Delete().Where(securitygrouppermission.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SecurityGroupPermissionDeleteOne{builder}
}

// Query returns a query builder for SecurityGroupPermission.
func (c *SecurityGroupPermissionClient) Query() *SecurityGroupPermissionQuery {
	return &SecurityGroupPermissionQuery{
		config: c.config,
	}
}

// Get returns a SecurityGroupPermission entity by its id.
func (c *SecurityGroupPermissionClient) Get(ctx context.Context, id int) (*SecurityGroupPermission, error) {
	return c.Query().Where(securitygrouppermission.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SecurityGroupPermissionClient) GetX(ctx context.Context, id int) *SecurityGroupPermission {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySecurityGroup queries the security_group edge of a SecurityGroupPermission.
func (c *SecurityGroupPermissionClient) QuerySecurityGroup(sgp *SecurityGroupPermission) *SecurityGroupQuery {
	query := &SecurityGroupQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sgp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(securitygrouppermission.Table, securitygrouppermission.FieldID, id),
			sqlgraph.To(securitygroup.Table, securitygroup.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, securitygrouppermission.SecurityGroupTable, securitygrouppermission.SecurityGroupColumn),
		)
		fromV = sqlgraph.Neighbors(sgp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySecurityPermission queries the security_permission edge of a SecurityGroupPermission.
func (c *SecurityGroupPermissionClient) QuerySecurityPermission(sgp *SecurityGroupPermission) *SecurityPermissionQuery {
	query := &SecurityPermissionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sgp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(securitygrouppermission.Table, securitygrouppermission.FieldID, id),
			sqlgraph.To(securitypermission.Table, securitypermission.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, securitygrouppermission.SecurityPermissionTable, securitygrouppermission.SecurityPermissionColumn),
		)
		fromV = sqlgraph.Neighbors(sgp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SecurityGroupPermissionClient) Hooks() []Hook {
	return c.hooks.SecurityGroupPermission
}

// SecurityPermissionClient is a client for the SecurityPermission schema.
type SecurityPermissionClient struct {
	config
}

// NewSecurityPermissionClient returns a client for the SecurityPermission from the given config.
func NewSecurityPermissionClient(c config) *SecurityPermissionClient {
	return &SecurityPermissionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `securitypermission.Hooks(f(g(h())))`.
func (c *SecurityPermissionClient) Use(hooks ...Hook) {
	c.hooks.SecurityPermission = append(c.hooks.SecurityPermission, hooks...)
}

// Create returns a create builder for SecurityPermission.
func (c *SecurityPermissionClient) Create() *SecurityPermissionCreate {
	mutation := newSecurityPermissionMutation(c.config, OpCreate)
	return &SecurityPermissionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SecurityPermission entities.
func (c *SecurityPermissionClient) CreateBulk(builders ...*SecurityPermissionCreate) *SecurityPermissionCreateBulk {
	return &SecurityPermissionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SecurityPermission.
func (c *SecurityPermissionClient) Update() *SecurityPermissionUpdate {
	mutation := newSecurityPermissionMutation(c.config, OpUpdate)
	return &SecurityPermissionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SecurityPermissionClient) UpdateOne(sp *SecurityPermission) *SecurityPermissionUpdateOne {
	mutation := newSecurityPermissionMutation(c.config, OpUpdateOne, withSecurityPermission(sp))
	return &SecurityPermissionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SecurityPermissionClient) UpdateOneID(id int) *SecurityPermissionUpdateOne {
	mutation := newSecurityPermissionMutation(c.config, OpUpdateOne, withSecurityPermissionID(id))
	return &SecurityPermissionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SecurityPermission.
func (c *SecurityPermissionClient) Delete() *SecurityPermissionDelete {
	mutation := newSecurityPermissionMutation(c.config, OpDelete)
	return &SecurityPermissionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SecurityPermissionClient) DeleteOne(sp *SecurityPermission) *SecurityPermissionDeleteOne {
	return c.DeleteOneID(sp.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SecurityPermissionClient) DeleteOneID(id int) *SecurityPermissionDeleteOne {
	builder := c.Delete().Where(securitypermission.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SecurityPermissionDeleteOne{builder}
}

// Query returns a query builder for SecurityPermission.
func (c *SecurityPermissionClient) Query() *SecurityPermissionQuery {
	return &SecurityPermissionQuery{
		config: c.config,
	}
}

// Get returns a SecurityPermission entity by its id.
func (c *SecurityPermissionClient) Get(ctx context.Context, id int) (*SecurityPermission, error) {
	return c.Query().Where(securitypermission.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SecurityPermissionClient) GetX(ctx context.Context, id int) *SecurityPermission {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySecurityGroupPermissions queries the security_group_permissions edge of a SecurityPermission.
func (c *SecurityPermissionClient) QuerySecurityGroupPermissions(sp *SecurityPermission) *SecurityGroupPermissionQuery {
	query := &SecurityGroupPermissionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(securitypermission.Table, securitypermission.FieldID, id),
			sqlgraph.To(securitygrouppermission.Table, securitygrouppermission.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, securitypermission.SecurityGroupPermissionsTable, securitypermission.SecurityGroupPermissionsColumn),
		)
		fromV = sqlgraph.Neighbors(sp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SecurityPermissionClient) Hooks() []Hook {
	return c.hooks.SecurityPermission
}

// SkillTypeClient is a client for the SkillType schema.
type SkillTypeClient struct {
	config
}

// NewSkillTypeClient returns a client for the SkillType from the given config.
func NewSkillTypeClient(c config) *SkillTypeClient {
	return &SkillTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `skilltype.Hooks(f(g(h())))`.
func (c *SkillTypeClient) Use(hooks ...Hook) {
	c.hooks.SkillType = append(c.hooks.SkillType, hooks...)
}

// Create returns a create builder for SkillType.
func (c *SkillTypeClient) Create() *SkillTypeCreate {
	mutation := newSkillTypeMutation(c.config, OpCreate)
	return &SkillTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SkillType entities.
func (c *SkillTypeClient) CreateBulk(builders ...*SkillTypeCreate) *SkillTypeCreateBulk {
	return &SkillTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SkillType.
func (c *SkillTypeClient) Update() *SkillTypeUpdate {
	mutation := newSkillTypeMutation(c.config, OpUpdate)
	return &SkillTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SkillTypeClient) UpdateOne(st *SkillType) *SkillTypeUpdateOne {
	mutation := newSkillTypeMutation(c.config, OpUpdateOne, withSkillType(st))
	return &SkillTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SkillTypeClient) UpdateOneID(id int) *SkillTypeUpdateOne {
	mutation := newSkillTypeMutation(c.config, OpUpdateOne, withSkillTypeID(id))
	return &SkillTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SkillType.
func (c *SkillTypeClient) Delete() *SkillTypeDelete {
	mutation := newSkillTypeMutation(c.config, OpDelete)
	return &SkillTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SkillTypeClient) DeleteOne(st *SkillType) *SkillTypeDeleteOne {
	return c.DeleteOneID(st.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SkillTypeClient) DeleteOneID(id int) *SkillTypeDeleteOne {
	builder := c.Delete().Where(skilltype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SkillTypeDeleteOne{builder}
}

// Query returns a query builder for SkillType.
func (c *SkillTypeClient) Query() *SkillTypeQuery {
	return &SkillTypeQuery{
		config: c.config,
	}
}

// Get returns a SkillType entity by its id.
func (c *SkillTypeClient) Get(ctx context.Context, id int) (*SkillType, error) {
	return c.Query().Where(skilltype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SkillTypeClient) GetX(ctx context.Context, id int) *SkillType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryParent queries the parent edge of a SkillType.
func (c *SkillTypeClient) QueryParent(st *SkillType) *SkillTypeQuery {
	query := &SkillTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := st.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(skilltype.Table, skilltype.FieldID, id),
			sqlgraph.To(skilltype.Table, skilltype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, skilltype.ParentTable, skilltype.ParentColumn),
		)
		fromV = sqlgraph.Neighbors(st.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildren queries the children edge of a SkillType.
func (c *SkillTypeClient) QueryChildren(st *SkillType) *SkillTypeQuery {
	query := &SkillTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := st.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(skilltype.Table, skilltype.FieldID, id),
			sqlgraph.To(skilltype.Table, skilltype.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, skilltype.ChildrenTable, skilltype.ChildrenColumn),
		)
		fromV = sqlgraph.Neighbors(st.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildSkillTypes queries the child_skill_types edge of a SkillType.
func (c *SkillTypeClient) QueryChildSkillTypes(st *SkillType) *SkillTypeQuery {
	query := &SkillTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := st.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(skilltype.Table, skilltype.FieldID, id),
			sqlgraph.To(skilltype.Table, skilltype.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, skilltype.ChildSkillTypesTable, skilltype.ChildSkillTypesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(st.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkEffortSkillStandards queries the work_effort_skill_standards edge of a SkillType.
func (c *SkillTypeClient) QueryWorkEffortSkillStandards(st *SkillType) *WorkEffortSkillStandardQuery {
	query := &WorkEffortSkillStandardQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := st.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(skilltype.Table, skilltype.FieldID, id),
			sqlgraph.To(workeffortskillstandard.Table, workeffortskillstandard.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, skilltype.WorkEffortSkillStandardsTable, skilltype.WorkEffortSkillStandardsColumn),
		)
		fromV = sqlgraph.Neighbors(st.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SkillTypeClient) Hooks() []Hook {
	return c.hooks.SkillType
}

// StatusItemClient is a client for the StatusItem schema.
type StatusItemClient struct {
	config
}

// NewStatusItemClient returns a client for the StatusItem from the given config.
func NewStatusItemClient(c config) *StatusItemClient {
	return &StatusItemClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `statusitem.Hooks(f(g(h())))`.
func (c *StatusItemClient) Use(hooks ...Hook) {
	c.hooks.StatusItem = append(c.hooks.StatusItem, hooks...)
}

// Create returns a create builder for StatusItem.
func (c *StatusItemClient) Create() *StatusItemCreate {
	mutation := newStatusItemMutation(c.config, OpCreate)
	return &StatusItemCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of StatusItem entities.
func (c *StatusItemClient) CreateBulk(builders ...*StatusItemCreate) *StatusItemCreateBulk {
	return &StatusItemCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for StatusItem.
func (c *StatusItemClient) Update() *StatusItemUpdate {
	mutation := newStatusItemMutation(c.config, OpUpdate)
	return &StatusItemUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StatusItemClient) UpdateOne(si *StatusItem) *StatusItemUpdateOne {
	mutation := newStatusItemMutation(c.config, OpUpdateOne, withStatusItem(si))
	return &StatusItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StatusItemClient) UpdateOneID(id int) *StatusItemUpdateOne {
	mutation := newStatusItemMutation(c.config, OpUpdateOne, withStatusItemID(id))
	return &StatusItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for StatusItem.
func (c *StatusItemClient) Delete() *StatusItemDelete {
	mutation := newStatusItemMutation(c.config, OpDelete)
	return &StatusItemDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *StatusItemClient) DeleteOne(si *StatusItem) *StatusItemDeleteOne {
	return c.DeleteOneID(si.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *StatusItemClient) DeleteOneID(id int) *StatusItemDeleteOne {
	builder := c.Delete().Where(statusitem.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StatusItemDeleteOne{builder}
}

// Query returns a query builder for StatusItem.
func (c *StatusItemClient) Query() *StatusItemQuery {
	return &StatusItemQuery{
		config: c.config,
	}
}

// Get returns a StatusItem entity by its id.
func (c *StatusItemClient) Get(ctx context.Context, id int) (*StatusItem, error) {
	return c.Query().Where(statusitem.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StatusItemClient) GetX(ctx context.Context, id int) *StatusItem {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryStatusType queries the status_type edge of a StatusItem.
func (c *StatusItemClient) QueryStatusType(si *StatusItem) *StatusTypeQuery {
	query := &StatusTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := si.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(statusitem.Table, statusitem.FieldID, id),
			sqlgraph.To(statustype.Table, statustype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, statusitem.StatusTypeTable, statusitem.StatusTypeColumn),
		)
		fromV = sqlgraph.Neighbors(si.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryParties queries the parties edge of a StatusItem.
func (c *StatusItemClient) QueryParties(si *StatusItem) *PartyQuery {
	query := &PartyQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := si.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(statusitem.Table, statusitem.FieldID, id),
			sqlgraph.To(party.Table, party.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, statusitem.PartiesTable, statusitem.PartiesColumn),
		)
		fromV = sqlgraph.Neighbors(si.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPartyStatuses queries the party_statuses edge of a StatusItem.
func (c *StatusItemClient) QueryPartyStatuses(si *StatusItem) *PartyStatusQuery {
	query := &PartyStatusQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := si.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(statusitem.Table, statusitem.FieldID, id),
			sqlgraph.To(partystatus.Table, partystatus.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, statusitem.PartyStatusesTable, statusitem.PartyStatusesColumn),
		)
		fromV = sqlgraph.Neighbors(si.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMainStatusValidChanges queries the main_status_valid_changes edge of a StatusItem.
func (c *StatusItemClient) QueryMainStatusValidChanges(si *StatusItem) *StatusValidChangeQuery {
	query := &StatusValidChangeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := si.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(statusitem.Table, statusitem.FieldID, id),
			sqlgraph.To(statusvalidchange.Table, statusvalidchange.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, statusitem.MainStatusValidChangesTable, statusitem.MainStatusValidChangesColumn),
		)
		fromV = sqlgraph.Neighbors(si.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryToStatusValidChanges queries the to_status_valid_changes edge of a StatusItem.
func (c *StatusItemClient) QueryToStatusValidChanges(si *StatusItem) *StatusValidChangeQuery {
	query := &StatusValidChangeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := si.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(statusitem.Table, statusitem.FieldID, id),
			sqlgraph.To(statusvalidchange.Table, statusvalidchange.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, statusitem.ToStatusValidChangesTable, statusitem.ToStatusValidChangesColumn),
		)
		fromV = sqlgraph.Neighbors(si.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCurrentWorkEfforts queries the current_work_efforts edge of a StatusItem.
func (c *StatusItemClient) QueryCurrentWorkEfforts(si *StatusItem) *WorkEffortQuery {
	query := &WorkEffortQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := si.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(statusitem.Table, statusitem.FieldID, id),
			sqlgraph.To(workeffort.Table, workeffort.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, statusitem.CurrentWorkEffortsTable, statusitem.CurrentWorkEffortsColumn),
		)
		fromV = sqlgraph.Neighbors(si.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkEffortFixedAssetAssigns queries the work_effort_fixed_asset_assigns edge of a StatusItem.
func (c *StatusItemClient) QueryWorkEffortFixedAssetAssigns(si *StatusItem) *WorkEffortFixedAssetAssignQuery {
	query := &WorkEffortFixedAssetAssignQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := si.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(statusitem.Table, statusitem.FieldID, id),
			sqlgraph.To(workeffortfixedassetassign.Table, workeffortfixedassetassign.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, statusitem.WorkEffortFixedAssetAssignsTable, statusitem.WorkEffortFixedAssetAssignsColumn),
		)
		fromV = sqlgraph.Neighbors(si.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAvailabilityWorkEffortFixedAssetAssigns queries the availability_work_effort_fixed_asset_assigns edge of a StatusItem.
func (c *StatusItemClient) QueryAvailabilityWorkEffortFixedAssetAssigns(si *StatusItem) *WorkEffortFixedAssetAssignQuery {
	query := &WorkEffortFixedAssetAssignQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := si.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(statusitem.Table, statusitem.FieldID, id),
			sqlgraph.To(workeffortfixedassetassign.Table, workeffortfixedassetassign.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, statusitem.AvailabilityWorkEffortFixedAssetAssignsTable, statusitem.AvailabilityWorkEffortFixedAssetAssignsColumn),
		)
		fromV = sqlgraph.Neighbors(si.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAssignmentWorkEffortPartyAssignments queries the assignment_work_effort_party_assignments edge of a StatusItem.
func (c *StatusItemClient) QueryAssignmentWorkEffortPartyAssignments(si *StatusItem) *WorkEffortPartyAssignmentQuery {
	query := &WorkEffortPartyAssignmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := si.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(statusitem.Table, statusitem.FieldID, id),
			sqlgraph.To(workeffortpartyassignment.Table, workeffortpartyassignment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, statusitem.AssignmentWorkEffortPartyAssignmentsTable, statusitem.AssignmentWorkEffortPartyAssignmentsColumn),
		)
		fromV = sqlgraph.Neighbors(si.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAvailabilityWorkEffortPartyAssignments queries the availability_work_effort_party_assignments edge of a StatusItem.
func (c *StatusItemClient) QueryAvailabilityWorkEffortPartyAssignments(si *StatusItem) *WorkEffortPartyAssignmentQuery {
	query := &WorkEffortPartyAssignmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := si.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(statusitem.Table, statusitem.FieldID, id),
			sqlgraph.To(workeffortpartyassignment.Table, workeffortpartyassignment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, statusitem.AvailabilityWorkEffortPartyAssignmentsTable, statusitem.AvailabilityWorkEffortPartyAssignmentsColumn),
		)
		fromV = sqlgraph.Neighbors(si.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *StatusItemClient) Hooks() []Hook {
	return c.hooks.StatusItem
}

// StatusTypeClient is a client for the StatusType schema.
type StatusTypeClient struct {
	config
}

// NewStatusTypeClient returns a client for the StatusType from the given config.
func NewStatusTypeClient(c config) *StatusTypeClient {
	return &StatusTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `statustype.Hooks(f(g(h())))`.
func (c *StatusTypeClient) Use(hooks ...Hook) {
	c.hooks.StatusType = append(c.hooks.StatusType, hooks...)
}

// Create returns a create builder for StatusType.
func (c *StatusTypeClient) Create() *StatusTypeCreate {
	mutation := newStatusTypeMutation(c.config, OpCreate)
	return &StatusTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of StatusType entities.
func (c *StatusTypeClient) CreateBulk(builders ...*StatusTypeCreate) *StatusTypeCreateBulk {
	return &StatusTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for StatusType.
func (c *StatusTypeClient) Update() *StatusTypeUpdate {
	mutation := newStatusTypeMutation(c.config, OpUpdate)
	return &StatusTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StatusTypeClient) UpdateOne(st *StatusType) *StatusTypeUpdateOne {
	mutation := newStatusTypeMutation(c.config, OpUpdateOne, withStatusType(st))
	return &StatusTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StatusTypeClient) UpdateOneID(id int) *StatusTypeUpdateOne {
	mutation := newStatusTypeMutation(c.config, OpUpdateOne, withStatusTypeID(id))
	return &StatusTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for StatusType.
func (c *StatusTypeClient) Delete() *StatusTypeDelete {
	mutation := newStatusTypeMutation(c.config, OpDelete)
	return &StatusTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *StatusTypeClient) DeleteOne(st *StatusType) *StatusTypeDeleteOne {
	return c.DeleteOneID(st.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *StatusTypeClient) DeleteOneID(id int) *StatusTypeDeleteOne {
	builder := c.Delete().Where(statustype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StatusTypeDeleteOne{builder}
}

// Query returns a query builder for StatusType.
func (c *StatusTypeClient) Query() *StatusTypeQuery {
	return &StatusTypeQuery{
		config: c.config,
	}
}

// Get returns a StatusType entity by its id.
func (c *StatusTypeClient) Get(ctx context.Context, id int) (*StatusType, error) {
	return c.Query().Where(statustype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StatusTypeClient) GetX(ctx context.Context, id int) *StatusType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryParent queries the parent edge of a StatusType.
func (c *StatusTypeClient) QueryParent(st *StatusType) *StatusTypeQuery {
	query := &StatusTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := st.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(statustype.Table, statustype.FieldID, id),
			sqlgraph.To(statustype.Table, statustype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, statustype.ParentTable, statustype.ParentColumn),
		)
		fromV = sqlgraph.Neighbors(st.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildren queries the children edge of a StatusType.
func (c *StatusTypeClient) QueryChildren(st *StatusType) *StatusTypeQuery {
	query := &StatusTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := st.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(statustype.Table, statustype.FieldID, id),
			sqlgraph.To(statustype.Table, statustype.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, statustype.ChildrenTable, statustype.ChildrenColumn),
		)
		fromV = sqlgraph.Neighbors(st.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStatusItems queries the status_items edge of a StatusType.
func (c *StatusTypeClient) QueryStatusItems(st *StatusType) *StatusItemQuery {
	query := &StatusItemQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := st.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(statustype.Table, statustype.FieldID, id),
			sqlgraph.To(statusitem.Table, statusitem.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, statustype.StatusItemsTable, statustype.StatusItemsColumn),
		)
		fromV = sqlgraph.Neighbors(st.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildStatusTypes queries the child_status_types edge of a StatusType.
func (c *StatusTypeClient) QueryChildStatusTypes(st *StatusType) *StatusTypeQuery {
	query := &StatusTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := st.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(statustype.Table, statustype.FieldID, id),
			sqlgraph.To(statustype.Table, statustype.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, statustype.ChildStatusTypesTable, statustype.ChildStatusTypesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(st.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *StatusTypeClient) Hooks() []Hook {
	return c.hooks.StatusType
}

// StatusValidChangeClient is a client for the StatusValidChange schema.
type StatusValidChangeClient struct {
	config
}

// NewStatusValidChangeClient returns a client for the StatusValidChange from the given config.
func NewStatusValidChangeClient(c config) *StatusValidChangeClient {
	return &StatusValidChangeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `statusvalidchange.Hooks(f(g(h())))`.
func (c *StatusValidChangeClient) Use(hooks ...Hook) {
	c.hooks.StatusValidChange = append(c.hooks.StatusValidChange, hooks...)
}

// Create returns a create builder for StatusValidChange.
func (c *StatusValidChangeClient) Create() *StatusValidChangeCreate {
	mutation := newStatusValidChangeMutation(c.config, OpCreate)
	return &StatusValidChangeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of StatusValidChange entities.
func (c *StatusValidChangeClient) CreateBulk(builders ...*StatusValidChangeCreate) *StatusValidChangeCreateBulk {
	return &StatusValidChangeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for StatusValidChange.
func (c *StatusValidChangeClient) Update() *StatusValidChangeUpdate {
	mutation := newStatusValidChangeMutation(c.config, OpUpdate)
	return &StatusValidChangeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StatusValidChangeClient) UpdateOne(svc *StatusValidChange) *StatusValidChangeUpdateOne {
	mutation := newStatusValidChangeMutation(c.config, OpUpdateOne, withStatusValidChange(svc))
	return &StatusValidChangeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StatusValidChangeClient) UpdateOneID(id int) *StatusValidChangeUpdateOne {
	mutation := newStatusValidChangeMutation(c.config, OpUpdateOne, withStatusValidChangeID(id))
	return &StatusValidChangeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for StatusValidChange.
func (c *StatusValidChangeClient) Delete() *StatusValidChangeDelete {
	mutation := newStatusValidChangeMutation(c.config, OpDelete)
	return &StatusValidChangeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *StatusValidChangeClient) DeleteOne(svc *StatusValidChange) *StatusValidChangeDeleteOne {
	return c.DeleteOneID(svc.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *StatusValidChangeClient) DeleteOneID(id int) *StatusValidChangeDeleteOne {
	builder := c.Delete().Where(statusvalidchange.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StatusValidChangeDeleteOne{builder}
}

// Query returns a query builder for StatusValidChange.
func (c *StatusValidChangeClient) Query() *StatusValidChangeQuery {
	return &StatusValidChangeQuery{
		config: c.config,
	}
}

// Get returns a StatusValidChange entity by its id.
func (c *StatusValidChangeClient) Get(ctx context.Context, id int) (*StatusValidChange, error) {
	return c.Query().Where(statusvalidchange.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StatusValidChangeClient) GetX(ctx context.Context, id int) *StatusValidChange {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMainStatusItem queries the main_status_item edge of a StatusValidChange.
func (c *StatusValidChangeClient) QueryMainStatusItem(svc *StatusValidChange) *StatusItemQuery {
	query := &StatusItemQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := svc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(statusvalidchange.Table, statusvalidchange.FieldID, id),
			sqlgraph.To(statusitem.Table, statusitem.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, statusvalidchange.MainStatusItemTable, statusvalidchange.MainStatusItemColumn),
		)
		fromV = sqlgraph.Neighbors(svc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryToStatusItem queries the to_status_item edge of a StatusValidChange.
func (c *StatusValidChangeClient) QueryToStatusItem(svc *StatusValidChange) *StatusItemQuery {
	query := &StatusItemQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := svc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(statusvalidchange.Table, statusvalidchange.FieldID, id),
			sqlgraph.To(statusitem.Table, statusitem.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, statusvalidchange.ToStatusItemTable, statusvalidchange.ToStatusItemColumn),
		)
		fromV = sqlgraph.Neighbors(svc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *StatusValidChangeClient) Hooks() []Hook {
	return c.hooks.StatusValidChange
}

// TemporalExpressionClient is a client for the TemporalExpression schema.
type TemporalExpressionClient struct {
	config
}

// NewTemporalExpressionClient returns a client for the TemporalExpression from the given config.
func NewTemporalExpressionClient(c config) *TemporalExpressionClient {
	return &TemporalExpressionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `temporalexpression.Hooks(f(g(h())))`.
func (c *TemporalExpressionClient) Use(hooks ...Hook) {
	c.hooks.TemporalExpression = append(c.hooks.TemporalExpression, hooks...)
}

// Create returns a create builder for TemporalExpression.
func (c *TemporalExpressionClient) Create() *TemporalExpressionCreate {
	mutation := newTemporalExpressionMutation(c.config, OpCreate)
	return &TemporalExpressionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TemporalExpression entities.
func (c *TemporalExpressionClient) CreateBulk(builders ...*TemporalExpressionCreate) *TemporalExpressionCreateBulk {
	return &TemporalExpressionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TemporalExpression.
func (c *TemporalExpressionClient) Update() *TemporalExpressionUpdate {
	mutation := newTemporalExpressionMutation(c.config, OpUpdate)
	return &TemporalExpressionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TemporalExpressionClient) UpdateOne(te *TemporalExpression) *TemporalExpressionUpdateOne {
	mutation := newTemporalExpressionMutation(c.config, OpUpdateOne, withTemporalExpression(te))
	return &TemporalExpressionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TemporalExpressionClient) UpdateOneID(id int) *TemporalExpressionUpdateOne {
	mutation := newTemporalExpressionMutation(c.config, OpUpdateOne, withTemporalExpressionID(id))
	return &TemporalExpressionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TemporalExpression.
func (c *TemporalExpressionClient) Delete() *TemporalExpressionDelete {
	mutation := newTemporalExpressionMutation(c.config, OpDelete)
	return &TemporalExpressionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TemporalExpressionClient) DeleteOne(te *TemporalExpression) *TemporalExpressionDeleteOne {
	return c.DeleteOneID(te.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TemporalExpressionClient) DeleteOneID(id int) *TemporalExpressionDeleteOne {
	builder := c.Delete().Where(temporalexpression.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TemporalExpressionDeleteOne{builder}
}

// Query returns a query builder for TemporalExpression.
func (c *TemporalExpressionClient) Query() *TemporalExpressionQuery {
	return &TemporalExpressionQuery{
		config: c.config,
	}
}

// Get returns a TemporalExpression entity by its id.
func (c *TemporalExpressionClient) Get(ctx context.Context, id int) (*TemporalExpression, error) {
	return c.Query().Where(temporalexpression.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TemporalExpressionClient) GetX(ctx context.Context, id int) *TemporalExpression {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryFromTemporalExpressionAssocs queries the from_temporal_expression_assocs edge of a TemporalExpression.
func (c *TemporalExpressionClient) QueryFromTemporalExpressionAssocs(te *TemporalExpression) *TemporalExpressionAssocQuery {
	query := &TemporalExpressionAssocQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := te.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(temporalexpression.Table, temporalexpression.FieldID, id),
			sqlgraph.To(temporalexpressionassoc.Table, temporalexpressionassoc.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, temporalexpression.FromTemporalExpressionAssocsTable, temporalexpression.FromTemporalExpressionAssocsColumn),
		)
		fromV = sqlgraph.Neighbors(te.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryToTemporalExpressionAssocs queries the to_temporal_expression_assocs edge of a TemporalExpression.
func (c *TemporalExpressionClient) QueryToTemporalExpressionAssocs(te *TemporalExpression) *TemporalExpressionAssocQuery {
	query := &TemporalExpressionAssocQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := te.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(temporalexpression.Table, temporalexpression.FieldID, id),
			sqlgraph.To(temporalexpressionassoc.Table, temporalexpressionassoc.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, temporalexpression.ToTemporalExpressionAssocsTable, temporalexpression.ToTemporalExpressionAssocsColumn),
		)
		fromV = sqlgraph.Neighbors(te.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkEfforts queries the work_efforts edge of a TemporalExpression.
func (c *TemporalExpressionClient) QueryWorkEfforts(te *TemporalExpression) *WorkEffortQuery {
	query := &WorkEffortQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := te.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(temporalexpression.Table, temporalexpression.FieldID, id),
			sqlgraph.To(workeffort.Table, workeffort.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, temporalexpression.WorkEffortsTable, temporalexpression.WorkEffortsColumn),
		)
		fromV = sqlgraph.Neighbors(te.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TemporalExpressionClient) Hooks() []Hook {
	return c.hooks.TemporalExpression
}

// TemporalExpressionAssocClient is a client for the TemporalExpressionAssoc schema.
type TemporalExpressionAssocClient struct {
	config
}

// NewTemporalExpressionAssocClient returns a client for the TemporalExpressionAssoc from the given config.
func NewTemporalExpressionAssocClient(c config) *TemporalExpressionAssocClient {
	return &TemporalExpressionAssocClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `temporalexpressionassoc.Hooks(f(g(h())))`.
func (c *TemporalExpressionAssocClient) Use(hooks ...Hook) {
	c.hooks.TemporalExpressionAssoc = append(c.hooks.TemporalExpressionAssoc, hooks...)
}

// Create returns a create builder for TemporalExpressionAssoc.
func (c *TemporalExpressionAssocClient) Create() *TemporalExpressionAssocCreate {
	mutation := newTemporalExpressionAssocMutation(c.config, OpCreate)
	return &TemporalExpressionAssocCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TemporalExpressionAssoc entities.
func (c *TemporalExpressionAssocClient) CreateBulk(builders ...*TemporalExpressionAssocCreate) *TemporalExpressionAssocCreateBulk {
	return &TemporalExpressionAssocCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TemporalExpressionAssoc.
func (c *TemporalExpressionAssocClient) Update() *TemporalExpressionAssocUpdate {
	mutation := newTemporalExpressionAssocMutation(c.config, OpUpdate)
	return &TemporalExpressionAssocUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TemporalExpressionAssocClient) UpdateOne(tea *TemporalExpressionAssoc) *TemporalExpressionAssocUpdateOne {
	mutation := newTemporalExpressionAssocMutation(c.config, OpUpdateOne, withTemporalExpressionAssoc(tea))
	return &TemporalExpressionAssocUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TemporalExpressionAssocClient) UpdateOneID(id int) *TemporalExpressionAssocUpdateOne {
	mutation := newTemporalExpressionAssocMutation(c.config, OpUpdateOne, withTemporalExpressionAssocID(id))
	return &TemporalExpressionAssocUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TemporalExpressionAssoc.
func (c *TemporalExpressionAssocClient) Delete() *TemporalExpressionAssocDelete {
	mutation := newTemporalExpressionAssocMutation(c.config, OpDelete)
	return &TemporalExpressionAssocDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TemporalExpressionAssocClient) DeleteOne(tea *TemporalExpressionAssoc) *TemporalExpressionAssocDeleteOne {
	return c.DeleteOneID(tea.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TemporalExpressionAssocClient) DeleteOneID(id int) *TemporalExpressionAssocDeleteOne {
	builder := c.Delete().Where(temporalexpressionassoc.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TemporalExpressionAssocDeleteOne{builder}
}

// Query returns a query builder for TemporalExpressionAssoc.
func (c *TemporalExpressionAssocClient) Query() *TemporalExpressionAssocQuery {
	return &TemporalExpressionAssocQuery{
		config: c.config,
	}
}

// Get returns a TemporalExpressionAssoc entity by its id.
func (c *TemporalExpressionAssocClient) Get(ctx context.Context, id int) (*TemporalExpressionAssoc, error) {
	return c.Query().Where(temporalexpressionassoc.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TemporalExpressionAssocClient) GetX(ctx context.Context, id int) *TemporalExpressionAssoc {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryFromTemporalExpression queries the from_temporal_expression edge of a TemporalExpressionAssoc.
func (c *TemporalExpressionAssocClient) QueryFromTemporalExpression(tea *TemporalExpressionAssoc) *TemporalExpressionQuery {
	query := &TemporalExpressionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tea.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(temporalexpressionassoc.Table, temporalexpressionassoc.FieldID, id),
			sqlgraph.To(temporalexpression.Table, temporalexpression.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, temporalexpressionassoc.FromTemporalExpressionTable, temporalexpressionassoc.FromTemporalExpressionColumn),
		)
		fromV = sqlgraph.Neighbors(tea.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryToTemporalExpression queries the to_temporal_expression edge of a TemporalExpressionAssoc.
func (c *TemporalExpressionAssocClient) QueryToTemporalExpression(tea *TemporalExpressionAssoc) *TemporalExpressionQuery {
	query := &TemporalExpressionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tea.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(temporalexpressionassoc.Table, temporalexpressionassoc.FieldID, id),
			sqlgraph.To(temporalexpression.Table, temporalexpression.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, temporalexpressionassoc.ToTemporalExpressionTable, temporalexpressionassoc.ToTemporalExpressionColumn),
		)
		fromV = sqlgraph.Neighbors(tea.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TemporalExpressionAssocClient) Hooks() []Hook {
	return c.hooks.TemporalExpressionAssoc
}

// TermTypeClient is a client for the TermType schema.
type TermTypeClient struct {
	config
}

// NewTermTypeClient returns a client for the TermType from the given config.
func NewTermTypeClient(c config) *TermTypeClient {
	return &TermTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `termtype.Hooks(f(g(h())))`.
func (c *TermTypeClient) Use(hooks ...Hook) {
	c.hooks.TermType = append(c.hooks.TermType, hooks...)
}

// Create returns a create builder for TermType.
func (c *TermTypeClient) Create() *TermTypeCreate {
	mutation := newTermTypeMutation(c.config, OpCreate)
	return &TermTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TermType entities.
func (c *TermTypeClient) CreateBulk(builders ...*TermTypeCreate) *TermTypeCreateBulk {
	return &TermTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TermType.
func (c *TermTypeClient) Update() *TermTypeUpdate {
	mutation := newTermTypeMutation(c.config, OpUpdate)
	return &TermTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TermTypeClient) UpdateOne(tt *TermType) *TermTypeUpdateOne {
	mutation := newTermTypeMutation(c.config, OpUpdateOne, withTermType(tt))
	return &TermTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TermTypeClient) UpdateOneID(id int) *TermTypeUpdateOne {
	mutation := newTermTypeMutation(c.config, OpUpdateOne, withTermTypeID(id))
	return &TermTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TermType.
func (c *TermTypeClient) Delete() *TermTypeDelete {
	mutation := newTermTypeMutation(c.config, OpDelete)
	return &TermTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TermTypeClient) DeleteOne(tt *TermType) *TermTypeDeleteOne {
	return c.DeleteOneID(tt.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TermTypeClient) DeleteOneID(id int) *TermTypeDeleteOne {
	builder := c.Delete().Where(termtype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TermTypeDeleteOne{builder}
}

// Query returns a query builder for TermType.
func (c *TermTypeClient) Query() *TermTypeQuery {
	return &TermTypeQuery{
		config: c.config,
	}
}

// Get returns a TermType entity by its id.
func (c *TermTypeClient) Get(ctx context.Context, id int) (*TermType, error) {
	return c.Query().Where(termtype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TermTypeClient) GetX(ctx context.Context, id int) *TermType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryParent queries the parent edge of a TermType.
func (c *TermTypeClient) QueryParent(tt *TermType) *TermTypeQuery {
	query := &TermTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(termtype.Table, termtype.FieldID, id),
			sqlgraph.To(termtype.Table, termtype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, termtype.ParentTable, termtype.ParentColumn),
		)
		fromV = sqlgraph.Neighbors(tt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildren queries the children edge of a TermType.
func (c *TermTypeClient) QueryChildren(tt *TermType) *TermTypeQuery {
	query := &TermTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(termtype.Table, termtype.FieldID, id),
			sqlgraph.To(termtype.Table, termtype.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, termtype.ChildrenTable, termtype.ChildrenColumn),
		)
		fromV = sqlgraph.Neighbors(tt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildTermTypes queries the child_term_types edge of a TermType.
func (c *TermTypeClient) QueryChildTermTypes(tt *TermType) *TermTypeQuery {
	query := &TermTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(termtype.Table, termtype.FieldID, id),
			sqlgraph.To(termtype.Table, termtype.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, termtype.ChildTermTypesTable, termtype.ChildTermTypesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(tt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TermTypeClient) Hooks() []Hook {
	return c.hooks.TermType
}

// UserLoginClient is a client for the UserLogin schema.
type UserLoginClient struct {
	config
}

// NewUserLoginClient returns a client for the UserLogin from the given config.
func NewUserLoginClient(c config) *UserLoginClient {
	return &UserLoginClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `userlogin.Hooks(f(g(h())))`.
func (c *UserLoginClient) Use(hooks ...Hook) {
	c.hooks.UserLogin = append(c.hooks.UserLogin, hooks...)
}

// Create returns a create builder for UserLogin.
func (c *UserLoginClient) Create() *UserLoginCreate {
	mutation := newUserLoginMutation(c.config, OpCreate)
	return &UserLoginCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserLogin entities.
func (c *UserLoginClient) CreateBulk(builders ...*UserLoginCreate) *UserLoginCreateBulk {
	return &UserLoginCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserLogin.
func (c *UserLoginClient) Update() *UserLoginUpdate {
	mutation := newUserLoginMutation(c.config, OpUpdate)
	return &UserLoginUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserLoginClient) UpdateOne(ul *UserLogin) *UserLoginUpdateOne {
	mutation := newUserLoginMutation(c.config, OpUpdateOne, withUserLogin(ul))
	return &UserLoginUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserLoginClient) UpdateOneID(id int) *UserLoginUpdateOne {
	mutation := newUserLoginMutation(c.config, OpUpdateOne, withUserLoginID(id))
	return &UserLoginUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserLogin.
func (c *UserLoginClient) Delete() *UserLoginDelete {
	mutation := newUserLoginMutation(c.config, OpDelete)
	return &UserLoginDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserLoginClient) DeleteOne(ul *UserLogin) *UserLoginDeleteOne {
	return c.DeleteOneID(ul.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserLoginClient) DeleteOneID(id int) *UserLoginDeleteOne {
	builder := c.Delete().Where(userlogin.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserLoginDeleteOne{builder}
}

// Query returns a query builder for UserLogin.
func (c *UserLoginClient) Query() *UserLoginQuery {
	return &UserLoginQuery{
		config: c.config,
	}
}

// Get returns a UserLogin entity by its id.
func (c *UserLoginClient) Get(ctx context.Context, id int) (*UserLogin, error) {
	return c.Query().Where(userlogin.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserLoginClient) GetX(ctx context.Context, id int) *UserLogin {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryParty queries the party edge of a UserLogin.
func (c *UserLoginClient) QueryParty(ul *UserLogin) *PartyQuery {
	query := &PartyQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ul.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(userlogin.Table, userlogin.FieldID, id),
			sqlgraph.To(party.Table, party.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, userlogin.PartyTable, userlogin.PartyColumn),
		)
		fromV = sqlgraph.Neighbors(ul.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPerson queries the person edge of a UserLogin.
func (c *UserLoginClient) QueryPerson(ul *UserLogin) *PersonQuery {
	query := &PersonQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ul.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(userlogin.Table, userlogin.FieldID, id),
			sqlgraph.To(person.Table, person.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, userlogin.PersonTable, userlogin.PersonColumn),
		)
		fromV = sqlgraph.Neighbors(ul.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCreatedByParties queries the created_by_parties edge of a UserLogin.
func (c *UserLoginClient) QueryCreatedByParties(ul *UserLogin) *PartyQuery {
	query := &PartyQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ul.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(userlogin.Table, userlogin.FieldID, id),
			sqlgraph.To(party.Table, party.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, userlogin.CreatedByPartiesTable, userlogin.CreatedByPartiesColumn),
		)
		fromV = sqlgraph.Neighbors(ul.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLastModifiedByParties queries the last_modified_by_parties edge of a UserLogin.
func (c *UserLoginClient) QueryLastModifiedByParties(ul *UserLogin) *PartyQuery {
	query := &PartyQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ul.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(userlogin.Table, userlogin.FieldID, id),
			sqlgraph.To(party.Table, party.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, userlogin.LastModifiedByPartiesTable, userlogin.LastModifiedByPartiesColumn),
		)
		fromV = sqlgraph.Neighbors(ul.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChangeByPartyStatuses queries the change_by_party_statuses edge of a UserLogin.
func (c *UserLoginClient) QueryChangeByPartyStatuses(ul *UserLogin) *PartyStatusQuery {
	query := &PartyStatusQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ul.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(userlogin.Table, userlogin.FieldID, id),
			sqlgraph.To(partystatus.Table, partystatus.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, userlogin.ChangeByPartyStatusesTable, userlogin.ChangeByPartyStatusesColumn),
		)
		fromV = sqlgraph.Neighbors(ul.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserLoginSecurityGroups queries the user_login_security_groups edge of a UserLogin.
func (c *UserLoginClient) QueryUserLoginSecurityGroups(ul *UserLogin) *UserLoginSecurityGroupQuery {
	query := &UserLoginSecurityGroupQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ul.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(userlogin.Table, userlogin.FieldID, id),
			sqlgraph.To(userloginsecuritygroup.Table, userloginsecuritygroup.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, userlogin.UserLoginSecurityGroupsTable, userlogin.UserLoginSecurityGroupsColumn),
		)
		fromV = sqlgraph.Neighbors(ul.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserPreferences queries the user_preferences edge of a UserLogin.
func (c *UserLoginClient) QueryUserPreferences(ul *UserLogin) *UserPreferenceQuery {
	query := &UserPreferenceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ul.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(userlogin.Table, userlogin.FieldID, id),
			sqlgraph.To(userpreference.Table, userpreference.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, userlogin.UserPreferencesTable, userlogin.UserPreferencesColumn),
		)
		fromV = sqlgraph.Neighbors(ul.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAssignedByWorkEffortPartyAssignments queries the assigned_by_work_effort_party_assignments edge of a UserLogin.
func (c *UserLoginClient) QueryAssignedByWorkEffortPartyAssignments(ul *UserLogin) *WorkEffortPartyAssignmentQuery {
	query := &WorkEffortPartyAssignmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ul.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(userlogin.Table, userlogin.FieldID, id),
			sqlgraph.To(workeffortpartyassignment.Table, workeffortpartyassignment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, userlogin.AssignedByWorkEffortPartyAssignmentsTable, userlogin.AssignedByWorkEffortPartyAssignmentsColumn),
		)
		fromV = sqlgraph.Neighbors(ul.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserLoginClient) Hooks() []Hook {
	return c.hooks.UserLogin
}

// UserLoginSecurityGroupClient is a client for the UserLoginSecurityGroup schema.
type UserLoginSecurityGroupClient struct {
	config
}

// NewUserLoginSecurityGroupClient returns a client for the UserLoginSecurityGroup from the given config.
func NewUserLoginSecurityGroupClient(c config) *UserLoginSecurityGroupClient {
	return &UserLoginSecurityGroupClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `userloginsecuritygroup.Hooks(f(g(h())))`.
func (c *UserLoginSecurityGroupClient) Use(hooks ...Hook) {
	c.hooks.UserLoginSecurityGroup = append(c.hooks.UserLoginSecurityGroup, hooks...)
}

// Create returns a create builder for UserLoginSecurityGroup.
func (c *UserLoginSecurityGroupClient) Create() *UserLoginSecurityGroupCreate {
	mutation := newUserLoginSecurityGroupMutation(c.config, OpCreate)
	return &UserLoginSecurityGroupCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserLoginSecurityGroup entities.
func (c *UserLoginSecurityGroupClient) CreateBulk(builders ...*UserLoginSecurityGroupCreate) *UserLoginSecurityGroupCreateBulk {
	return &UserLoginSecurityGroupCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserLoginSecurityGroup.
func (c *UserLoginSecurityGroupClient) Update() *UserLoginSecurityGroupUpdate {
	mutation := newUserLoginSecurityGroupMutation(c.config, OpUpdate)
	return &UserLoginSecurityGroupUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserLoginSecurityGroupClient) UpdateOne(ulsg *UserLoginSecurityGroup) *UserLoginSecurityGroupUpdateOne {
	mutation := newUserLoginSecurityGroupMutation(c.config, OpUpdateOne, withUserLoginSecurityGroup(ulsg))
	return &UserLoginSecurityGroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserLoginSecurityGroupClient) UpdateOneID(id int) *UserLoginSecurityGroupUpdateOne {
	mutation := newUserLoginSecurityGroupMutation(c.config, OpUpdateOne, withUserLoginSecurityGroupID(id))
	return &UserLoginSecurityGroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserLoginSecurityGroup.
func (c *UserLoginSecurityGroupClient) Delete() *UserLoginSecurityGroupDelete {
	mutation := newUserLoginSecurityGroupMutation(c.config, OpDelete)
	return &UserLoginSecurityGroupDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserLoginSecurityGroupClient) DeleteOne(ulsg *UserLoginSecurityGroup) *UserLoginSecurityGroupDeleteOne {
	return c.DeleteOneID(ulsg.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserLoginSecurityGroupClient) DeleteOneID(id int) *UserLoginSecurityGroupDeleteOne {
	builder := c.Delete().Where(userloginsecuritygroup.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserLoginSecurityGroupDeleteOne{builder}
}

// Query returns a query builder for UserLoginSecurityGroup.
func (c *UserLoginSecurityGroupClient) Query() *UserLoginSecurityGroupQuery {
	return &UserLoginSecurityGroupQuery{
		config: c.config,
	}
}

// Get returns a UserLoginSecurityGroup entity by its id.
func (c *UserLoginSecurityGroupClient) Get(ctx context.Context, id int) (*UserLoginSecurityGroup, error) {
	return c.Query().Where(userloginsecuritygroup.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserLoginSecurityGroupClient) GetX(ctx context.Context, id int) *UserLoginSecurityGroup {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUserLogin queries the user_login edge of a UserLoginSecurityGroup.
func (c *UserLoginSecurityGroupClient) QueryUserLogin(ulsg *UserLoginSecurityGroup) *UserLoginQuery {
	query := &UserLoginQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ulsg.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(userloginsecuritygroup.Table, userloginsecuritygroup.FieldID, id),
			sqlgraph.To(userlogin.Table, userlogin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, userloginsecuritygroup.UserLoginTable, userloginsecuritygroup.UserLoginColumn),
		)
		fromV = sqlgraph.Neighbors(ulsg.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySecurityGroup queries the security_group edge of a UserLoginSecurityGroup.
func (c *UserLoginSecurityGroupClient) QuerySecurityGroup(ulsg *UserLoginSecurityGroup) *SecurityGroupQuery {
	query := &SecurityGroupQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ulsg.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(userloginsecuritygroup.Table, userloginsecuritygroup.FieldID, id),
			sqlgraph.To(securitygroup.Table, securitygroup.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, userloginsecuritygroup.SecurityGroupTable, userloginsecuritygroup.SecurityGroupColumn),
		)
		fromV = sqlgraph.Neighbors(ulsg.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySecurityGroupPermissions queries the security_group_permissions edge of a UserLoginSecurityGroup.
func (c *UserLoginSecurityGroupClient) QuerySecurityGroupPermissions(ulsg *UserLoginSecurityGroup) *SecurityGroupPermissionQuery {
	query := &SecurityGroupPermissionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ulsg.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(userloginsecuritygroup.Table, userloginsecuritygroup.FieldID, id),
			sqlgraph.To(securitygrouppermission.Table, securitygrouppermission.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, userloginsecuritygroup.SecurityGroupPermissionsTable, userloginsecuritygroup.SecurityGroupPermissionsColumn),
		)
		fromV = sqlgraph.Neighbors(ulsg.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserLoginSecurityGroupClient) Hooks() []Hook {
	return c.hooks.UserLoginSecurityGroup
}

// UserPreferenceClient is a client for the UserPreference schema.
type UserPreferenceClient struct {
	config
}

// NewUserPreferenceClient returns a client for the UserPreference from the given config.
func NewUserPreferenceClient(c config) *UserPreferenceClient {
	return &UserPreferenceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `userpreference.Hooks(f(g(h())))`.
func (c *UserPreferenceClient) Use(hooks ...Hook) {
	c.hooks.UserPreference = append(c.hooks.UserPreference, hooks...)
}

// Create returns a create builder for UserPreference.
func (c *UserPreferenceClient) Create() *UserPreferenceCreate {
	mutation := newUserPreferenceMutation(c.config, OpCreate)
	return &UserPreferenceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserPreference entities.
func (c *UserPreferenceClient) CreateBulk(builders ...*UserPreferenceCreate) *UserPreferenceCreateBulk {
	return &UserPreferenceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserPreference.
func (c *UserPreferenceClient) Update() *UserPreferenceUpdate {
	mutation := newUserPreferenceMutation(c.config, OpUpdate)
	return &UserPreferenceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserPreferenceClient) UpdateOne(up *UserPreference) *UserPreferenceUpdateOne {
	mutation := newUserPreferenceMutation(c.config, OpUpdateOne, withUserPreference(up))
	return &UserPreferenceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserPreferenceClient) UpdateOneID(id int) *UserPreferenceUpdateOne {
	mutation := newUserPreferenceMutation(c.config, OpUpdateOne, withUserPreferenceID(id))
	return &UserPreferenceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserPreference.
func (c *UserPreferenceClient) Delete() *UserPreferenceDelete {
	mutation := newUserPreferenceMutation(c.config, OpDelete)
	return &UserPreferenceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserPreferenceClient) DeleteOne(up *UserPreference) *UserPreferenceDeleteOne {
	return c.DeleteOneID(up.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserPreferenceClient) DeleteOneID(id int) *UserPreferenceDeleteOne {
	builder := c.Delete().Where(userpreference.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserPreferenceDeleteOne{builder}
}

// Query returns a query builder for UserPreference.
func (c *UserPreferenceClient) Query() *UserPreferenceQuery {
	return &UserPreferenceQuery{
		config: c.config,
	}
}

// Get returns a UserPreference entity by its id.
func (c *UserPreferenceClient) Get(ctx context.Context, id int) (*UserPreference, error) {
	return c.Query().Where(userpreference.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserPreferenceClient) GetX(ctx context.Context, id int) *UserPreference {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUserLogin queries the user_login edge of a UserPreference.
func (c *UserPreferenceClient) QueryUserLogin(up *UserPreference) *UserLoginQuery {
	query := &UserLoginQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := up.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(userpreference.Table, userpreference.FieldID, id),
			sqlgraph.To(userlogin.Table, userlogin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, userpreference.UserLoginTable, userpreference.UserLoginColumn),
		)
		fromV = sqlgraph.Neighbors(up.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserPreferenceClient) Hooks() []Hook {
	return c.hooks.UserPreference
}

// WorkEffortClient is a client for the WorkEffort schema.
type WorkEffortClient struct {
	config
}

// NewWorkEffortClient returns a client for the WorkEffort from the given config.
func NewWorkEffortClient(c config) *WorkEffortClient {
	return &WorkEffortClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `workeffort.Hooks(f(g(h())))`.
func (c *WorkEffortClient) Use(hooks ...Hook) {
	c.hooks.WorkEffort = append(c.hooks.WorkEffort, hooks...)
}

// Create returns a create builder for WorkEffort.
func (c *WorkEffortClient) Create() *WorkEffortCreate {
	mutation := newWorkEffortMutation(c.config, OpCreate)
	return &WorkEffortCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of WorkEffort entities.
func (c *WorkEffortClient) CreateBulk(builders ...*WorkEffortCreate) *WorkEffortCreateBulk {
	return &WorkEffortCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for WorkEffort.
func (c *WorkEffortClient) Update() *WorkEffortUpdate {
	mutation := newWorkEffortMutation(c.config, OpUpdate)
	return &WorkEffortUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WorkEffortClient) UpdateOne(we *WorkEffort) *WorkEffortUpdateOne {
	mutation := newWorkEffortMutation(c.config, OpUpdateOne, withWorkEffort(we))
	return &WorkEffortUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WorkEffortClient) UpdateOneID(id int) *WorkEffortUpdateOne {
	mutation := newWorkEffortMutation(c.config, OpUpdateOne, withWorkEffortID(id))
	return &WorkEffortUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for WorkEffort.
func (c *WorkEffortClient) Delete() *WorkEffortDelete {
	mutation := newWorkEffortMutation(c.config, OpDelete)
	return &WorkEffortDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *WorkEffortClient) DeleteOne(we *WorkEffort) *WorkEffortDeleteOne {
	return c.DeleteOneID(we.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *WorkEffortClient) DeleteOneID(id int) *WorkEffortDeleteOne {
	builder := c.Delete().Where(workeffort.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WorkEffortDeleteOne{builder}
}

// Query returns a query builder for WorkEffort.
func (c *WorkEffortClient) Query() *WorkEffortQuery {
	return &WorkEffortQuery{
		config: c.config,
	}
}

// Get returns a WorkEffort entity by its id.
func (c *WorkEffortClient) Get(ctx context.Context, id int) (*WorkEffort, error) {
	return c.Query().Where(workeffort.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WorkEffortClient) GetX(ctx context.Context, id int) *WorkEffort {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryWorkEffortType queries the work_effort_type edge of a WorkEffort.
func (c *WorkEffortClient) QueryWorkEffortType(we *WorkEffort) *WorkEffortTypeQuery {
	query := &WorkEffortTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := we.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workeffort.Table, workeffort.FieldID, id),
			sqlgraph.To(workefforttype.Table, workefforttype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workeffort.WorkEffortTypeTable, workeffort.WorkEffortTypeColumn),
		)
		fromV = sqlgraph.Neighbors(we.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryParent queries the parent edge of a WorkEffort.
func (c *WorkEffortClient) QueryParent(we *WorkEffort) *WorkEffortQuery {
	query := &WorkEffortQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := we.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workeffort.Table, workeffort.FieldID, id),
			sqlgraph.To(workeffort.Table, workeffort.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workeffort.ParentTable, workeffort.ParentColumn),
		)
		fromV = sqlgraph.Neighbors(we.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildren queries the children edge of a WorkEffort.
func (c *WorkEffortClient) QueryChildren(we *WorkEffort) *WorkEffortQuery {
	query := &WorkEffortQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := we.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workeffort.Table, workeffort.FieldID, id),
			sqlgraph.To(workeffort.Table, workeffort.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, workeffort.ChildrenTable, workeffort.ChildrenColumn),
		)
		fromV = sqlgraph.Neighbors(we.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCurrentStatusItem queries the current_status_item edge of a WorkEffort.
func (c *WorkEffortClient) QueryCurrentStatusItem(we *WorkEffort) *StatusItemQuery {
	query := &StatusItemQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := we.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workeffort.Table, workeffort.FieldID, id),
			sqlgraph.To(statusitem.Table, statusitem.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workeffort.CurrentStatusItemTable, workeffort.CurrentStatusItemColumn),
		)
		fromV = sqlgraph.Neighbors(we.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryScopeEnumeration queries the scope_enumeration edge of a WorkEffort.
func (c *WorkEffortClient) QueryScopeEnumeration(we *WorkEffort) *EnumerationQuery {
	query := &EnumerationQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := we.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workeffort.Table, workeffort.FieldID, id),
			sqlgraph.To(enumeration.Table, enumeration.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workeffort.ScopeEnumerationTable, workeffort.ScopeEnumerationColumn),
		)
		fromV = sqlgraph.Neighbors(we.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFixedAsset queries the fixed_asset edge of a WorkEffort.
func (c *WorkEffortClient) QueryFixedAsset(we *WorkEffort) *FixedAssetQuery {
	query := &FixedAssetQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := we.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workeffort.Table, workeffort.FieldID, id),
			sqlgraph.To(fixedasset.Table, fixedasset.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workeffort.FixedAssetTable, workeffort.FixedAssetColumn),
		)
		fromV = sqlgraph.Neighbors(we.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTemporalExpression queries the temporal_expression edge of a WorkEffort.
func (c *WorkEffortClient) QueryTemporalExpression(we *WorkEffort) *TemporalExpressionQuery {
	query := &TemporalExpressionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := we.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workeffort.Table, workeffort.FieldID, id),
			sqlgraph.To(temporalexpression.Table, temporalexpression.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workeffort.TemporalExpressionTable, workeffort.TemporalExpressionColumn),
		)
		fromV = sqlgraph.Neighbors(we.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildWorkEfforts queries the child_work_efforts edge of a WorkEffort.
func (c *WorkEffortClient) QueryChildWorkEfforts(we *WorkEffort) *WorkEffortQuery {
	query := &WorkEffortQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := we.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workeffort.Table, workeffort.FieldID, id),
			sqlgraph.To(workeffort.Table, workeffort.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, workeffort.ChildWorkEffortsTable, workeffort.ChildWorkEffortsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(we.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFromWorkEffortAssocs queries the from_work_effort_assocs edge of a WorkEffort.
func (c *WorkEffortClient) QueryFromWorkEffortAssocs(we *WorkEffort) *WorkEffortAssocQuery {
	query := &WorkEffortAssocQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := we.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workeffort.Table, workeffort.FieldID, id),
			sqlgraph.To(workeffortassoc.Table, workeffortassoc.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, workeffort.FromWorkEffortAssocsTable, workeffort.FromWorkEffortAssocsColumn),
		)
		fromV = sqlgraph.Neighbors(we.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryToWorkEffortAssocs queries the to_work_effort_assocs edge of a WorkEffort.
func (c *WorkEffortClient) QueryToWorkEffortAssocs(we *WorkEffort) *WorkEffortAssocQuery {
	query := &WorkEffortAssocQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := we.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workeffort.Table, workeffort.FieldID, id),
			sqlgraph.To(workeffortassoc.Table, workeffortassoc.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, workeffort.ToWorkEffortAssocsTable, workeffort.ToWorkEffortAssocsColumn),
		)
		fromV = sqlgraph.Neighbors(we.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkEffortFixedAssetAssigns queries the work_effort_fixed_asset_assigns edge of a WorkEffort.
func (c *WorkEffortClient) QueryWorkEffortFixedAssetAssigns(we *WorkEffort) *WorkEffortFixedAssetAssignQuery {
	query := &WorkEffortFixedAssetAssignQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := we.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workeffort.Table, workeffort.FieldID, id),
			sqlgraph.To(workeffortfixedassetassign.Table, workeffortfixedassetassign.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, workeffort.WorkEffortFixedAssetAssignsTable, workeffort.WorkEffortFixedAssetAssignsColumn),
		)
		fromV = sqlgraph.Neighbors(we.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkEffortPartyAssignments queries the work_effort_party_assignments edge of a WorkEffort.
func (c *WorkEffortClient) QueryWorkEffortPartyAssignments(we *WorkEffort) *WorkEffortPartyAssignmentQuery {
	query := &WorkEffortPartyAssignmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := we.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workeffort.Table, workeffort.FieldID, id),
			sqlgraph.To(workeffortpartyassignment.Table, workeffortpartyassignment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, workeffort.WorkEffortPartyAssignmentsTable, workeffort.WorkEffortPartyAssignmentsColumn),
		)
		fromV = sqlgraph.Neighbors(we.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkEffortSkillStandards queries the work_effort_skill_standards edge of a WorkEffort.
func (c *WorkEffortClient) QueryWorkEffortSkillStandards(we *WorkEffort) *WorkEffortSkillStandardQuery {
	query := &WorkEffortSkillStandardQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := we.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workeffort.Table, workeffort.FieldID, id),
			sqlgraph.To(workeffortskillstandard.Table, workeffortskillstandard.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, workeffort.WorkEffortSkillStandardsTable, workeffort.WorkEffortSkillStandardsColumn),
		)
		fromV = sqlgraph.Neighbors(we.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *WorkEffortClient) Hooks() []Hook {
	return c.hooks.WorkEffort
}

// WorkEffortAssocClient is a client for the WorkEffortAssoc schema.
type WorkEffortAssocClient struct {
	config
}

// NewWorkEffortAssocClient returns a client for the WorkEffortAssoc from the given config.
func NewWorkEffortAssocClient(c config) *WorkEffortAssocClient {
	return &WorkEffortAssocClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `workeffortassoc.Hooks(f(g(h())))`.
func (c *WorkEffortAssocClient) Use(hooks ...Hook) {
	c.hooks.WorkEffortAssoc = append(c.hooks.WorkEffortAssoc, hooks...)
}

// Create returns a create builder for WorkEffortAssoc.
func (c *WorkEffortAssocClient) Create() *WorkEffortAssocCreate {
	mutation := newWorkEffortAssocMutation(c.config, OpCreate)
	return &WorkEffortAssocCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of WorkEffortAssoc entities.
func (c *WorkEffortAssocClient) CreateBulk(builders ...*WorkEffortAssocCreate) *WorkEffortAssocCreateBulk {
	return &WorkEffortAssocCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for WorkEffortAssoc.
func (c *WorkEffortAssocClient) Update() *WorkEffortAssocUpdate {
	mutation := newWorkEffortAssocMutation(c.config, OpUpdate)
	return &WorkEffortAssocUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WorkEffortAssocClient) UpdateOne(wea *WorkEffortAssoc) *WorkEffortAssocUpdateOne {
	mutation := newWorkEffortAssocMutation(c.config, OpUpdateOne, withWorkEffortAssoc(wea))
	return &WorkEffortAssocUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WorkEffortAssocClient) UpdateOneID(id int) *WorkEffortAssocUpdateOne {
	mutation := newWorkEffortAssocMutation(c.config, OpUpdateOne, withWorkEffortAssocID(id))
	return &WorkEffortAssocUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for WorkEffortAssoc.
func (c *WorkEffortAssocClient) Delete() *WorkEffortAssocDelete {
	mutation := newWorkEffortAssocMutation(c.config, OpDelete)
	return &WorkEffortAssocDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *WorkEffortAssocClient) DeleteOne(wea *WorkEffortAssoc) *WorkEffortAssocDeleteOne {
	return c.DeleteOneID(wea.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *WorkEffortAssocClient) DeleteOneID(id int) *WorkEffortAssocDeleteOne {
	builder := c.Delete().Where(workeffortassoc.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WorkEffortAssocDeleteOne{builder}
}

// Query returns a query builder for WorkEffortAssoc.
func (c *WorkEffortAssocClient) Query() *WorkEffortAssocQuery {
	return &WorkEffortAssocQuery{
		config: c.config,
	}
}

// Get returns a WorkEffortAssoc entity by its id.
func (c *WorkEffortAssocClient) Get(ctx context.Context, id int) (*WorkEffortAssoc, error) {
	return c.Query().Where(workeffortassoc.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WorkEffortAssocClient) GetX(ctx context.Context, id int) *WorkEffortAssoc {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryFromWorkEffort queries the from_work_effort edge of a WorkEffortAssoc.
func (c *WorkEffortAssocClient) QueryFromWorkEffort(wea *WorkEffortAssoc) *WorkEffortQuery {
	query := &WorkEffortQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := wea.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workeffortassoc.Table, workeffortassoc.FieldID, id),
			sqlgraph.To(workeffort.Table, workeffort.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workeffortassoc.FromWorkEffortTable, workeffortassoc.FromWorkEffortColumn),
		)
		fromV = sqlgraph.Neighbors(wea.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryToWorkEffort queries the to_work_effort edge of a WorkEffortAssoc.
func (c *WorkEffortAssocClient) QueryToWorkEffort(wea *WorkEffortAssoc) *WorkEffortQuery {
	query := &WorkEffortQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := wea.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workeffortassoc.Table, workeffortassoc.FieldID, id),
			sqlgraph.To(workeffort.Table, workeffort.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workeffortassoc.ToWorkEffortTable, workeffortassoc.ToWorkEffortColumn),
		)
		fromV = sqlgraph.Neighbors(wea.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *WorkEffortAssocClient) Hooks() []Hook {
	return c.hooks.WorkEffortAssoc
}

// WorkEffortFixedAssetAssignClient is a client for the WorkEffortFixedAssetAssign schema.
type WorkEffortFixedAssetAssignClient struct {
	config
}

// NewWorkEffortFixedAssetAssignClient returns a client for the WorkEffortFixedAssetAssign from the given config.
func NewWorkEffortFixedAssetAssignClient(c config) *WorkEffortFixedAssetAssignClient {
	return &WorkEffortFixedAssetAssignClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `workeffortfixedassetassign.Hooks(f(g(h())))`.
func (c *WorkEffortFixedAssetAssignClient) Use(hooks ...Hook) {
	c.hooks.WorkEffortFixedAssetAssign = append(c.hooks.WorkEffortFixedAssetAssign, hooks...)
}

// Create returns a create builder for WorkEffortFixedAssetAssign.
func (c *WorkEffortFixedAssetAssignClient) Create() *WorkEffortFixedAssetAssignCreate {
	mutation := newWorkEffortFixedAssetAssignMutation(c.config, OpCreate)
	return &WorkEffortFixedAssetAssignCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of WorkEffortFixedAssetAssign entities.
func (c *WorkEffortFixedAssetAssignClient) CreateBulk(builders ...*WorkEffortFixedAssetAssignCreate) *WorkEffortFixedAssetAssignCreateBulk {
	return &WorkEffortFixedAssetAssignCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for WorkEffortFixedAssetAssign.
func (c *WorkEffortFixedAssetAssignClient) Update() *WorkEffortFixedAssetAssignUpdate {
	mutation := newWorkEffortFixedAssetAssignMutation(c.config, OpUpdate)
	return &WorkEffortFixedAssetAssignUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WorkEffortFixedAssetAssignClient) UpdateOne(wefaa *WorkEffortFixedAssetAssign) *WorkEffortFixedAssetAssignUpdateOne {
	mutation := newWorkEffortFixedAssetAssignMutation(c.config, OpUpdateOne, withWorkEffortFixedAssetAssign(wefaa))
	return &WorkEffortFixedAssetAssignUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WorkEffortFixedAssetAssignClient) UpdateOneID(id int) *WorkEffortFixedAssetAssignUpdateOne {
	mutation := newWorkEffortFixedAssetAssignMutation(c.config, OpUpdateOne, withWorkEffortFixedAssetAssignID(id))
	return &WorkEffortFixedAssetAssignUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for WorkEffortFixedAssetAssign.
func (c *WorkEffortFixedAssetAssignClient) Delete() *WorkEffortFixedAssetAssignDelete {
	mutation := newWorkEffortFixedAssetAssignMutation(c.config, OpDelete)
	return &WorkEffortFixedAssetAssignDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *WorkEffortFixedAssetAssignClient) DeleteOne(wefaa *WorkEffortFixedAssetAssign) *WorkEffortFixedAssetAssignDeleteOne {
	return c.DeleteOneID(wefaa.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *WorkEffortFixedAssetAssignClient) DeleteOneID(id int) *WorkEffortFixedAssetAssignDeleteOne {
	builder := c.Delete().Where(workeffortfixedassetassign.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WorkEffortFixedAssetAssignDeleteOne{builder}
}

// Query returns a query builder for WorkEffortFixedAssetAssign.
func (c *WorkEffortFixedAssetAssignClient) Query() *WorkEffortFixedAssetAssignQuery {
	return &WorkEffortFixedAssetAssignQuery{
		config: c.config,
	}
}

// Get returns a WorkEffortFixedAssetAssign entity by its id.
func (c *WorkEffortFixedAssetAssignClient) Get(ctx context.Context, id int) (*WorkEffortFixedAssetAssign, error) {
	return c.Query().Where(workeffortfixedassetassign.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WorkEffortFixedAssetAssignClient) GetX(ctx context.Context, id int) *WorkEffortFixedAssetAssign {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryWorkEffort queries the work_effort edge of a WorkEffortFixedAssetAssign.
func (c *WorkEffortFixedAssetAssignClient) QueryWorkEffort(wefaa *WorkEffortFixedAssetAssign) *WorkEffortQuery {
	query := &WorkEffortQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := wefaa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workeffortfixedassetassign.Table, workeffortfixedassetassign.FieldID, id),
			sqlgraph.To(workeffort.Table, workeffort.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workeffortfixedassetassign.WorkEffortTable, workeffortfixedassetassign.WorkEffortColumn),
		)
		fromV = sqlgraph.Neighbors(wefaa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFixedAsset queries the fixed_asset edge of a WorkEffortFixedAssetAssign.
func (c *WorkEffortFixedAssetAssignClient) QueryFixedAsset(wefaa *WorkEffortFixedAssetAssign) *FixedAssetQuery {
	query := &FixedAssetQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := wefaa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workeffortfixedassetassign.Table, workeffortfixedassetassign.FieldID, id),
			sqlgraph.To(fixedasset.Table, fixedasset.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workeffortfixedassetassign.FixedAssetTable, workeffortfixedassetassign.FixedAssetColumn),
		)
		fromV = sqlgraph.Neighbors(wefaa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStatusItem queries the status_item edge of a WorkEffortFixedAssetAssign.
func (c *WorkEffortFixedAssetAssignClient) QueryStatusItem(wefaa *WorkEffortFixedAssetAssign) *StatusItemQuery {
	query := &StatusItemQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := wefaa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workeffortfixedassetassign.Table, workeffortfixedassetassign.FieldID, id),
			sqlgraph.To(statusitem.Table, statusitem.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workeffortfixedassetassign.StatusItemTable, workeffortfixedassetassign.StatusItemColumn),
		)
		fromV = sqlgraph.Neighbors(wefaa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAvailabilityStatusItem queries the availability_status_item edge of a WorkEffortFixedAssetAssign.
func (c *WorkEffortFixedAssetAssignClient) QueryAvailabilityStatusItem(wefaa *WorkEffortFixedAssetAssign) *StatusItemQuery {
	query := &StatusItemQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := wefaa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workeffortfixedassetassign.Table, workeffortfixedassetassign.FieldID, id),
			sqlgraph.To(statusitem.Table, statusitem.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workeffortfixedassetassign.AvailabilityStatusItemTable, workeffortfixedassetassign.AvailabilityStatusItemColumn),
		)
		fromV = sqlgraph.Neighbors(wefaa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *WorkEffortFixedAssetAssignClient) Hooks() []Hook {
	return c.hooks.WorkEffortFixedAssetAssign
}

// WorkEffortPartyAssignmentClient is a client for the WorkEffortPartyAssignment schema.
type WorkEffortPartyAssignmentClient struct {
	config
}

// NewWorkEffortPartyAssignmentClient returns a client for the WorkEffortPartyAssignment from the given config.
func NewWorkEffortPartyAssignmentClient(c config) *WorkEffortPartyAssignmentClient {
	return &WorkEffortPartyAssignmentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `workeffortpartyassignment.Hooks(f(g(h())))`.
func (c *WorkEffortPartyAssignmentClient) Use(hooks ...Hook) {
	c.hooks.WorkEffortPartyAssignment = append(c.hooks.WorkEffortPartyAssignment, hooks...)
}

// Create returns a create builder for WorkEffortPartyAssignment.
func (c *WorkEffortPartyAssignmentClient) Create() *WorkEffortPartyAssignmentCreate {
	mutation := newWorkEffortPartyAssignmentMutation(c.config, OpCreate)
	return &WorkEffortPartyAssignmentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of WorkEffortPartyAssignment entities.
func (c *WorkEffortPartyAssignmentClient) CreateBulk(builders ...*WorkEffortPartyAssignmentCreate) *WorkEffortPartyAssignmentCreateBulk {
	return &WorkEffortPartyAssignmentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for WorkEffortPartyAssignment.
func (c *WorkEffortPartyAssignmentClient) Update() *WorkEffortPartyAssignmentUpdate {
	mutation := newWorkEffortPartyAssignmentMutation(c.config, OpUpdate)
	return &WorkEffortPartyAssignmentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WorkEffortPartyAssignmentClient) UpdateOne(wepa *WorkEffortPartyAssignment) *WorkEffortPartyAssignmentUpdateOne {
	mutation := newWorkEffortPartyAssignmentMutation(c.config, OpUpdateOne, withWorkEffortPartyAssignment(wepa))
	return &WorkEffortPartyAssignmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WorkEffortPartyAssignmentClient) UpdateOneID(id int) *WorkEffortPartyAssignmentUpdateOne {
	mutation := newWorkEffortPartyAssignmentMutation(c.config, OpUpdateOne, withWorkEffortPartyAssignmentID(id))
	return &WorkEffortPartyAssignmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for WorkEffortPartyAssignment.
func (c *WorkEffortPartyAssignmentClient) Delete() *WorkEffortPartyAssignmentDelete {
	mutation := newWorkEffortPartyAssignmentMutation(c.config, OpDelete)
	return &WorkEffortPartyAssignmentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *WorkEffortPartyAssignmentClient) DeleteOne(wepa *WorkEffortPartyAssignment) *WorkEffortPartyAssignmentDeleteOne {
	return c.DeleteOneID(wepa.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *WorkEffortPartyAssignmentClient) DeleteOneID(id int) *WorkEffortPartyAssignmentDeleteOne {
	builder := c.Delete().Where(workeffortpartyassignment.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WorkEffortPartyAssignmentDeleteOne{builder}
}

// Query returns a query builder for WorkEffortPartyAssignment.
func (c *WorkEffortPartyAssignmentClient) Query() *WorkEffortPartyAssignmentQuery {
	return &WorkEffortPartyAssignmentQuery{
		config: c.config,
	}
}

// Get returns a WorkEffortPartyAssignment entity by its id.
func (c *WorkEffortPartyAssignmentClient) Get(ctx context.Context, id int) (*WorkEffortPartyAssignment, error) {
	return c.Query().Where(workeffortpartyassignment.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WorkEffortPartyAssignmentClient) GetX(ctx context.Context, id int) *WorkEffortPartyAssignment {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryWorkEffort queries the work_effort edge of a WorkEffortPartyAssignment.
func (c *WorkEffortPartyAssignmentClient) QueryWorkEffort(wepa *WorkEffortPartyAssignment) *WorkEffortQuery {
	query := &WorkEffortQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := wepa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workeffortpartyassignment.Table, workeffortpartyassignment.FieldID, id),
			sqlgraph.To(workeffort.Table, workeffort.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workeffortpartyassignment.WorkEffortTable, workeffortpartyassignment.WorkEffortColumn),
		)
		fromV = sqlgraph.Neighbors(wepa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryParty queries the party edge of a WorkEffortPartyAssignment.
func (c *WorkEffortPartyAssignmentClient) QueryParty(wepa *WorkEffortPartyAssignment) *PartyQuery {
	query := &PartyQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := wepa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workeffortpartyassignment.Table, workeffortpartyassignment.FieldID, id),
			sqlgraph.To(party.Table, party.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workeffortpartyassignment.PartyTable, workeffortpartyassignment.PartyColumn),
		)
		fromV = sqlgraph.Neighbors(wepa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPartyRole queries the party_role edge of a WorkEffortPartyAssignment.
func (c *WorkEffortPartyAssignmentClient) QueryPartyRole(wepa *WorkEffortPartyAssignment) *PartyRoleQuery {
	query := &PartyRoleQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := wepa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workeffortpartyassignment.Table, workeffortpartyassignment.FieldID, id),
			sqlgraph.To(partyrole.Table, partyrole.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workeffortpartyassignment.PartyRoleTable, workeffortpartyassignment.PartyRoleColumn),
		)
		fromV = sqlgraph.Neighbors(wepa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRoleType queries the role_type edge of a WorkEffortPartyAssignment.
func (c *WorkEffortPartyAssignmentClient) QueryRoleType(wepa *WorkEffortPartyAssignment) *RoleTypeQuery {
	query := &RoleTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := wepa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workeffortpartyassignment.Table, workeffortpartyassignment.FieldID, id),
			sqlgraph.To(roletype.Table, roletype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workeffortpartyassignment.RoleTypeTable, workeffortpartyassignment.RoleTypeColumn),
		)
		fromV = sqlgraph.Neighbors(wepa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAssignedByUserLogin queries the assigned_by_user_login edge of a WorkEffortPartyAssignment.
func (c *WorkEffortPartyAssignmentClient) QueryAssignedByUserLogin(wepa *WorkEffortPartyAssignment) *UserLoginQuery {
	query := &UserLoginQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := wepa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workeffortpartyassignment.Table, workeffortpartyassignment.FieldID, id),
			sqlgraph.To(userlogin.Table, userlogin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workeffortpartyassignment.AssignedByUserLoginTable, workeffortpartyassignment.AssignedByUserLoginColumn),
		)
		fromV = sqlgraph.Neighbors(wepa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAssignmentStatusItem queries the assignment_status_item edge of a WorkEffortPartyAssignment.
func (c *WorkEffortPartyAssignmentClient) QueryAssignmentStatusItem(wepa *WorkEffortPartyAssignment) *StatusItemQuery {
	query := &StatusItemQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := wepa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workeffortpartyassignment.Table, workeffortpartyassignment.FieldID, id),
			sqlgraph.To(statusitem.Table, statusitem.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workeffortpartyassignment.AssignmentStatusItemTable, workeffortpartyassignment.AssignmentStatusItemColumn),
		)
		fromV = sqlgraph.Neighbors(wepa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryExpectationEnumeration queries the expectation_enumeration edge of a WorkEffortPartyAssignment.
func (c *WorkEffortPartyAssignmentClient) QueryExpectationEnumeration(wepa *WorkEffortPartyAssignment) *EnumerationQuery {
	query := &EnumerationQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := wepa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workeffortpartyassignment.Table, workeffortpartyassignment.FieldID, id),
			sqlgraph.To(enumeration.Table, enumeration.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workeffortpartyassignment.ExpectationEnumerationTable, workeffortpartyassignment.ExpectationEnumerationColumn),
		)
		fromV = sqlgraph.Neighbors(wepa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDelegateReasonEnumeration queries the delegate_reason_enumeration edge of a WorkEffortPartyAssignment.
func (c *WorkEffortPartyAssignmentClient) QueryDelegateReasonEnumeration(wepa *WorkEffortPartyAssignment) *EnumerationQuery {
	query := &EnumerationQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := wepa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workeffortpartyassignment.Table, workeffortpartyassignment.FieldID, id),
			sqlgraph.To(enumeration.Table, enumeration.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workeffortpartyassignment.DelegateReasonEnumerationTable, workeffortpartyassignment.DelegateReasonEnumerationColumn),
		)
		fromV = sqlgraph.Neighbors(wepa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAvailabilityStatusItem queries the availability_status_item edge of a WorkEffortPartyAssignment.
func (c *WorkEffortPartyAssignmentClient) QueryAvailabilityStatusItem(wepa *WorkEffortPartyAssignment) *StatusItemQuery {
	query := &StatusItemQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := wepa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workeffortpartyassignment.Table, workeffortpartyassignment.FieldID, id),
			sqlgraph.To(statusitem.Table, statusitem.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workeffortpartyassignment.AvailabilityStatusItemTable, workeffortpartyassignment.AvailabilityStatusItemColumn),
		)
		fromV = sqlgraph.Neighbors(wepa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *WorkEffortPartyAssignmentClient) Hooks() []Hook {
	return c.hooks.WorkEffortPartyAssignment
}

// WorkEffortSkillStandardClient is a client for the WorkEffortSkillStandard schema.
type WorkEffortSkillStandardClient struct {
	config
}

// NewWorkEffortSkillStandardClient returns a client for the WorkEffortSkillStandard from the given config.
func NewWorkEffortSkillStandardClient(c config) *WorkEffortSkillStandardClient {
	return &WorkEffortSkillStandardClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `workeffortskillstandard.Hooks(f(g(h())))`.
func (c *WorkEffortSkillStandardClient) Use(hooks ...Hook) {
	c.hooks.WorkEffortSkillStandard = append(c.hooks.WorkEffortSkillStandard, hooks...)
}

// Create returns a create builder for WorkEffortSkillStandard.
func (c *WorkEffortSkillStandardClient) Create() *WorkEffortSkillStandardCreate {
	mutation := newWorkEffortSkillStandardMutation(c.config, OpCreate)
	return &WorkEffortSkillStandardCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of WorkEffortSkillStandard entities.
func (c *WorkEffortSkillStandardClient) CreateBulk(builders ...*WorkEffortSkillStandardCreate) *WorkEffortSkillStandardCreateBulk {
	return &WorkEffortSkillStandardCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for WorkEffortSkillStandard.
func (c *WorkEffortSkillStandardClient) Update() *WorkEffortSkillStandardUpdate {
	mutation := newWorkEffortSkillStandardMutation(c.config, OpUpdate)
	return &WorkEffortSkillStandardUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WorkEffortSkillStandardClient) UpdateOne(wess *WorkEffortSkillStandard) *WorkEffortSkillStandardUpdateOne {
	mutation := newWorkEffortSkillStandardMutation(c.config, OpUpdateOne, withWorkEffortSkillStandard(wess))
	return &WorkEffortSkillStandardUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WorkEffortSkillStandardClient) UpdateOneID(id int) *WorkEffortSkillStandardUpdateOne {
	mutation := newWorkEffortSkillStandardMutation(c.config, OpUpdateOne, withWorkEffortSkillStandardID(id))
	return &WorkEffortSkillStandardUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for WorkEffortSkillStandard.
func (c *WorkEffortSkillStandardClient) Delete() *WorkEffortSkillStandardDelete {
	mutation := newWorkEffortSkillStandardMutation(c.config, OpDelete)
	return &WorkEffortSkillStandardDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *WorkEffortSkillStandardClient) DeleteOne(wess *WorkEffortSkillStandard) *WorkEffortSkillStandardDeleteOne {
	return c.DeleteOneID(wess.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *WorkEffortSkillStandardClient) DeleteOneID(id int) *WorkEffortSkillStandardDeleteOne {
	builder := c.Delete().Where(workeffortskillstandard.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WorkEffortSkillStandardDeleteOne{builder}
}

// Query returns a query builder for WorkEffortSkillStandard.
func (c *WorkEffortSkillStandardClient) Query() *WorkEffortSkillStandardQuery {
	return &WorkEffortSkillStandardQuery{
		config: c.config,
	}
}

// Get returns a WorkEffortSkillStandard entity by its id.
func (c *WorkEffortSkillStandardClient) Get(ctx context.Context, id int) (*WorkEffortSkillStandard, error) {
	return c.Query().Where(workeffortskillstandard.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WorkEffortSkillStandardClient) GetX(ctx context.Context, id int) *WorkEffortSkillStandard {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryWorkEffort queries the work_effort edge of a WorkEffortSkillStandard.
func (c *WorkEffortSkillStandardClient) QueryWorkEffort(wess *WorkEffortSkillStandard) *WorkEffortQuery {
	query := &WorkEffortQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := wess.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workeffortskillstandard.Table, workeffortskillstandard.FieldID, id),
			sqlgraph.To(workeffort.Table, workeffort.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workeffortskillstandard.WorkEffortTable, workeffortskillstandard.WorkEffortColumn),
		)
		fromV = sqlgraph.Neighbors(wess.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySkillType queries the skill_type edge of a WorkEffortSkillStandard.
func (c *WorkEffortSkillStandardClient) QuerySkillType(wess *WorkEffortSkillStandard) *SkillTypeQuery {
	query := &SkillTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := wess.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workeffortskillstandard.Table, workeffortskillstandard.FieldID, id),
			sqlgraph.To(skilltype.Table, skilltype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workeffortskillstandard.SkillTypeTable, workeffortskillstandard.SkillTypeColumn),
		)
		fromV = sqlgraph.Neighbors(wess.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *WorkEffortSkillStandardClient) Hooks() []Hook {
	return c.hooks.WorkEffortSkillStandard
}

// WorkEffortTypeClient is a client for the WorkEffortType schema.
type WorkEffortTypeClient struct {
	config
}

// NewWorkEffortTypeClient returns a client for the WorkEffortType from the given config.
func NewWorkEffortTypeClient(c config) *WorkEffortTypeClient {
	return &WorkEffortTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `workefforttype.Hooks(f(g(h())))`.
func (c *WorkEffortTypeClient) Use(hooks ...Hook) {
	c.hooks.WorkEffortType = append(c.hooks.WorkEffortType, hooks...)
}

// Create returns a create builder for WorkEffortType.
func (c *WorkEffortTypeClient) Create() *WorkEffortTypeCreate {
	mutation := newWorkEffortTypeMutation(c.config, OpCreate)
	return &WorkEffortTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of WorkEffortType entities.
func (c *WorkEffortTypeClient) CreateBulk(builders ...*WorkEffortTypeCreate) *WorkEffortTypeCreateBulk {
	return &WorkEffortTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for WorkEffortType.
func (c *WorkEffortTypeClient) Update() *WorkEffortTypeUpdate {
	mutation := newWorkEffortTypeMutation(c.config, OpUpdate)
	return &WorkEffortTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WorkEffortTypeClient) UpdateOne(wet *WorkEffortType) *WorkEffortTypeUpdateOne {
	mutation := newWorkEffortTypeMutation(c.config, OpUpdateOne, withWorkEffortType(wet))
	return &WorkEffortTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WorkEffortTypeClient) UpdateOneID(id int) *WorkEffortTypeUpdateOne {
	mutation := newWorkEffortTypeMutation(c.config, OpUpdateOne, withWorkEffortTypeID(id))
	return &WorkEffortTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for WorkEffortType.
func (c *WorkEffortTypeClient) Delete() *WorkEffortTypeDelete {
	mutation := newWorkEffortTypeMutation(c.config, OpDelete)
	return &WorkEffortTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *WorkEffortTypeClient) DeleteOne(wet *WorkEffortType) *WorkEffortTypeDeleteOne {
	return c.DeleteOneID(wet.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *WorkEffortTypeClient) DeleteOneID(id int) *WorkEffortTypeDeleteOne {
	builder := c.Delete().Where(workefforttype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WorkEffortTypeDeleteOne{builder}
}

// Query returns a query builder for WorkEffortType.
func (c *WorkEffortTypeClient) Query() *WorkEffortTypeQuery {
	return &WorkEffortTypeQuery{
		config: c.config,
	}
}

// Get returns a WorkEffortType entity by its id.
func (c *WorkEffortTypeClient) Get(ctx context.Context, id int) (*WorkEffortType, error) {
	return c.Query().Where(workefforttype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WorkEffortTypeClient) GetX(ctx context.Context, id int) *WorkEffortType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryParent queries the parent edge of a WorkEffortType.
func (c *WorkEffortTypeClient) QueryParent(wet *WorkEffortType) *WorkEffortTypeQuery {
	query := &WorkEffortTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := wet.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workefforttype.Table, workefforttype.FieldID, id),
			sqlgraph.To(workefforttype.Table, workefforttype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workefforttype.ParentTable, workefforttype.ParentColumn),
		)
		fromV = sqlgraph.Neighbors(wet.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildren queries the children edge of a WorkEffortType.
func (c *WorkEffortTypeClient) QueryChildren(wet *WorkEffortType) *WorkEffortTypeQuery {
	query := &WorkEffortTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := wet.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workefforttype.Table, workefforttype.FieldID, id),
			sqlgraph.To(workefforttype.Table, workefforttype.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, workefforttype.ChildrenTable, workefforttype.ChildrenColumn),
		)
		fromV = sqlgraph.Neighbors(wet.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkEfforts queries the work_efforts edge of a WorkEffortType.
func (c *WorkEffortTypeClient) QueryWorkEfforts(wet *WorkEffortType) *WorkEffortQuery {
	query := &WorkEffortQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := wet.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workefforttype.Table, workefforttype.FieldID, id),
			sqlgraph.To(workeffort.Table, workeffort.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, workefforttype.WorkEffortsTable, workefforttype.WorkEffortsColumn),
		)
		fromV = sqlgraph.Neighbors(wet.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildWorkEffortTypes queries the child_work_effort_types edge of a WorkEffortType.
func (c *WorkEffortTypeClient) QueryChildWorkEffortTypes(wet *WorkEffortType) *WorkEffortTypeQuery {
	query := &WorkEffortTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := wet.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workefforttype.Table, workefforttype.FieldID, id),
			sqlgraph.To(workefforttype.Table, workefforttype.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, workefforttype.ChildWorkEffortTypesTable, workefforttype.ChildWorkEffortTypesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(wet.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *WorkEffortTypeClient) Hooks() []Hook {
	return c.hooks.WorkEffortType
}
