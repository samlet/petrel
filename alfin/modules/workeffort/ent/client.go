// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/samlet/petrel/alfin/modules/workeffort/ent/migrate"

	"github.com/samlet/petrel/alfin/modules/workeffort/ent/fixedasset"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/party"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/partyrole"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/partystatus"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/person"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/securitygroup"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/securitygrouppermission"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/temporalexpression"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/temporalexpressionassoc"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/userlogin"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/userloginsecuritygroup"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/workeffort"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/workeffortassoc"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/workeffortfixedassetassign"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/workeffortpartyassignment"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// FixedAsset is the client for interacting with the FixedAsset builders.
	FixedAsset *FixedAssetClient
	// Party is the client for interacting with the Party builders.
	Party *PartyClient
	// PartyRole is the client for interacting with the PartyRole builders.
	PartyRole *PartyRoleClient
	// PartyStatus is the client for interacting with the PartyStatus builders.
	PartyStatus *PartyStatusClient
	// Person is the client for interacting with the Person builders.
	Person *PersonClient
	// SecurityGroup is the client for interacting with the SecurityGroup builders.
	SecurityGroup *SecurityGroupClient
	// SecurityGroupPermission is the client for interacting with the SecurityGroupPermission builders.
	SecurityGroupPermission *SecurityGroupPermissionClient
	// TemporalExpression is the client for interacting with the TemporalExpression builders.
	TemporalExpression *TemporalExpressionClient
	// TemporalExpressionAssoc is the client for interacting with the TemporalExpressionAssoc builders.
	TemporalExpressionAssoc *TemporalExpressionAssocClient
	// UserLogin is the client for interacting with the UserLogin builders.
	UserLogin *UserLoginClient
	// UserLoginSecurityGroup is the client for interacting with the UserLoginSecurityGroup builders.
	UserLoginSecurityGroup *UserLoginSecurityGroupClient
	// WorkEffort is the client for interacting with the WorkEffort builders.
	WorkEffort *WorkEffortClient
	// WorkEffortAssoc is the client for interacting with the WorkEffortAssoc builders.
	WorkEffortAssoc *WorkEffortAssocClient
	// WorkEffortFixedAssetAssign is the client for interacting with the WorkEffortFixedAssetAssign builders.
	WorkEffortFixedAssetAssign *WorkEffortFixedAssetAssignClient
	// WorkEffortPartyAssignment is the client for interacting with the WorkEffortPartyAssignment builders.
	WorkEffortPartyAssignment *WorkEffortPartyAssignmentClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.FixedAsset = NewFixedAssetClient(c.config)
	c.Party = NewPartyClient(c.config)
	c.PartyRole = NewPartyRoleClient(c.config)
	c.PartyStatus = NewPartyStatusClient(c.config)
	c.Person = NewPersonClient(c.config)
	c.SecurityGroup = NewSecurityGroupClient(c.config)
	c.SecurityGroupPermission = NewSecurityGroupPermissionClient(c.config)
	c.TemporalExpression = NewTemporalExpressionClient(c.config)
	c.TemporalExpressionAssoc = NewTemporalExpressionAssocClient(c.config)
	c.UserLogin = NewUserLoginClient(c.config)
	c.UserLoginSecurityGroup = NewUserLoginSecurityGroupClient(c.config)
	c.WorkEffort = NewWorkEffortClient(c.config)
	c.WorkEffortAssoc = NewWorkEffortAssocClient(c.config)
	c.WorkEffortFixedAssetAssign = NewWorkEffortFixedAssetAssignClient(c.config)
	c.WorkEffortPartyAssignment = NewWorkEffortPartyAssignmentClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                        ctx,
		config:                     cfg,
		FixedAsset:                 NewFixedAssetClient(cfg),
		Party:                      NewPartyClient(cfg),
		PartyRole:                  NewPartyRoleClient(cfg),
		PartyStatus:                NewPartyStatusClient(cfg),
		Person:                     NewPersonClient(cfg),
		SecurityGroup:              NewSecurityGroupClient(cfg),
		SecurityGroupPermission:    NewSecurityGroupPermissionClient(cfg),
		TemporalExpression:         NewTemporalExpressionClient(cfg),
		TemporalExpressionAssoc:    NewTemporalExpressionAssocClient(cfg),
		UserLogin:                  NewUserLoginClient(cfg),
		UserLoginSecurityGroup:     NewUserLoginSecurityGroupClient(cfg),
		WorkEffort:                 NewWorkEffortClient(cfg),
		WorkEffortAssoc:            NewWorkEffortAssocClient(cfg),
		WorkEffortFixedAssetAssign: NewWorkEffortFixedAssetAssignClient(cfg),
		WorkEffortPartyAssignment:  NewWorkEffortPartyAssignmentClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		config:                     cfg,
		FixedAsset:                 NewFixedAssetClient(cfg),
		Party:                      NewPartyClient(cfg),
		PartyRole:                  NewPartyRoleClient(cfg),
		PartyStatus:                NewPartyStatusClient(cfg),
		Person:                     NewPersonClient(cfg),
		SecurityGroup:              NewSecurityGroupClient(cfg),
		SecurityGroupPermission:    NewSecurityGroupPermissionClient(cfg),
		TemporalExpression:         NewTemporalExpressionClient(cfg),
		TemporalExpressionAssoc:    NewTemporalExpressionAssocClient(cfg),
		UserLogin:                  NewUserLoginClient(cfg),
		UserLoginSecurityGroup:     NewUserLoginSecurityGroupClient(cfg),
		WorkEffort:                 NewWorkEffortClient(cfg),
		WorkEffortAssoc:            NewWorkEffortAssocClient(cfg),
		WorkEffortFixedAssetAssign: NewWorkEffortFixedAssetAssignClient(cfg),
		WorkEffortPartyAssignment:  NewWorkEffortPartyAssignmentClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		FixedAsset.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.FixedAsset.Use(hooks...)
	c.Party.Use(hooks...)
	c.PartyRole.Use(hooks...)
	c.PartyStatus.Use(hooks...)
	c.Person.Use(hooks...)
	c.SecurityGroup.Use(hooks...)
	c.SecurityGroupPermission.Use(hooks...)
	c.TemporalExpression.Use(hooks...)
	c.TemporalExpressionAssoc.Use(hooks...)
	c.UserLogin.Use(hooks...)
	c.UserLoginSecurityGroup.Use(hooks...)
	c.WorkEffort.Use(hooks...)
	c.WorkEffortAssoc.Use(hooks...)
	c.WorkEffortFixedAssetAssign.Use(hooks...)
	c.WorkEffortPartyAssignment.Use(hooks...)
}

// FixedAssetClient is a client for the FixedAsset schema.
type FixedAssetClient struct {
	config
}

// NewFixedAssetClient returns a client for the FixedAsset from the given config.
func NewFixedAssetClient(c config) *FixedAssetClient {
	return &FixedAssetClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `fixedasset.Hooks(f(g(h())))`.
func (c *FixedAssetClient) Use(hooks ...Hook) {
	c.hooks.FixedAsset = append(c.hooks.FixedAsset, hooks...)
}

// Create returns a create builder for FixedAsset.
func (c *FixedAssetClient) Create() *FixedAssetCreate {
	mutation := newFixedAssetMutation(c.config, OpCreate)
	return &FixedAssetCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of FixedAsset entities.
func (c *FixedAssetClient) CreateBulk(builders ...*FixedAssetCreate) *FixedAssetCreateBulk {
	return &FixedAssetCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for FixedAsset.
func (c *FixedAssetClient) Update() *FixedAssetUpdate {
	mutation := newFixedAssetMutation(c.config, OpUpdate)
	return &FixedAssetUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FixedAssetClient) UpdateOne(fa *FixedAsset) *FixedAssetUpdateOne {
	mutation := newFixedAssetMutation(c.config, OpUpdateOne, withFixedAsset(fa))
	return &FixedAssetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FixedAssetClient) UpdateOneID(id int) *FixedAssetUpdateOne {
	mutation := newFixedAssetMutation(c.config, OpUpdateOne, withFixedAssetID(id))
	return &FixedAssetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FixedAsset.
func (c *FixedAssetClient) Delete() *FixedAssetDelete {
	mutation := newFixedAssetMutation(c.config, OpDelete)
	return &FixedAssetDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *FixedAssetClient) DeleteOne(fa *FixedAsset) *FixedAssetDeleteOne {
	return c.DeleteOneID(fa.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *FixedAssetClient) DeleteOneID(id int) *FixedAssetDeleteOne {
	builder := c.Delete().Where(fixedasset.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FixedAssetDeleteOne{builder}
}

// Query returns a query builder for FixedAsset.
func (c *FixedAssetClient) Query() *FixedAssetQuery {
	return &FixedAssetQuery{
		config: c.config,
	}
}

// Get returns a FixedAsset entity by its id.
func (c *FixedAssetClient) Get(ctx context.Context, id int) (*FixedAsset, error) {
	return c.Query().Where(fixedasset.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FixedAssetClient) GetX(ctx context.Context, id int) *FixedAsset {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryParent queries the parent edge of a FixedAsset.
func (c *FixedAssetClient) QueryParent(fa *FixedAsset) *FixedAssetQuery {
	query := &FixedAssetQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := fa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(fixedasset.Table, fixedasset.FieldID, id),
			sqlgraph.To(fixedasset.Table, fixedasset.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, fixedasset.ParentTable, fixedasset.ParentColumn),
		)
		fromV = sqlgraph.Neighbors(fa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildren queries the children edge of a FixedAsset.
func (c *FixedAssetClient) QueryChildren(fa *FixedAsset) *FixedAssetQuery {
	query := &FixedAssetQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := fa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(fixedasset.Table, fixedasset.FieldID, id),
			sqlgraph.To(fixedasset.Table, fixedasset.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, fixedasset.ChildrenTable, fixedasset.ChildrenColumn),
		)
		fromV = sqlgraph.Neighbors(fa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryParty queries the party edge of a FixedAsset.
func (c *FixedAssetClient) QueryParty(fa *FixedAsset) *PartyQuery {
	query := &PartyQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := fa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(fixedasset.Table, fixedasset.FieldID, id),
			sqlgraph.To(party.Table, party.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, fixedasset.PartyTable, fixedasset.PartyColumn),
		)
		fromV = sqlgraph.Neighbors(fa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPartyRole queries the party_role edge of a FixedAsset.
func (c *FixedAssetClient) QueryPartyRole(fa *FixedAsset) *PartyRoleQuery {
	query := &PartyRoleQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := fa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(fixedasset.Table, fixedasset.FieldID, id),
			sqlgraph.To(partyrole.Table, partyrole.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, fixedasset.PartyRoleTable, fixedasset.PartyRoleColumn),
		)
		fromV = sqlgraph.Neighbors(fa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildFixedAssets queries the child_fixed_assets edge of a FixedAsset.
func (c *FixedAssetClient) QueryChildFixedAssets(fa *FixedAsset) *FixedAssetQuery {
	query := &FixedAssetQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := fa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(fixedasset.Table, fixedasset.FieldID, id),
			sqlgraph.To(fixedasset.Table, fixedasset.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, fixedasset.ChildFixedAssetsTable, fixedasset.ChildFixedAssetsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(fa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkEfforts queries the work_efforts edge of a FixedAsset.
func (c *FixedAssetClient) QueryWorkEfforts(fa *FixedAsset) *WorkEffortQuery {
	query := &WorkEffortQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := fa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(fixedasset.Table, fixedasset.FieldID, id),
			sqlgraph.To(workeffort.Table, workeffort.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, fixedasset.WorkEffortsTable, fixedasset.WorkEffortsColumn),
		)
		fromV = sqlgraph.Neighbors(fa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkEffortFixedAssetAssigns queries the work_effort_fixed_asset_assigns edge of a FixedAsset.
func (c *FixedAssetClient) QueryWorkEffortFixedAssetAssigns(fa *FixedAsset) *WorkEffortFixedAssetAssignQuery {
	query := &WorkEffortFixedAssetAssignQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := fa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(fixedasset.Table, fixedasset.FieldID, id),
			sqlgraph.To(workeffortfixedassetassign.Table, workeffortfixedassetassign.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, fixedasset.WorkEffortFixedAssetAssignsTable, fixedasset.WorkEffortFixedAssetAssignsColumn),
		)
		fromV = sqlgraph.Neighbors(fa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FixedAssetClient) Hooks() []Hook {
	return c.hooks.FixedAsset
}

// PartyClient is a client for the Party schema.
type PartyClient struct {
	config
}

// NewPartyClient returns a client for the Party from the given config.
func NewPartyClient(c config) *PartyClient {
	return &PartyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `party.Hooks(f(g(h())))`.
func (c *PartyClient) Use(hooks ...Hook) {
	c.hooks.Party = append(c.hooks.Party, hooks...)
}

// Create returns a create builder for Party.
func (c *PartyClient) Create() *PartyCreate {
	mutation := newPartyMutation(c.config, OpCreate)
	return &PartyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Party entities.
func (c *PartyClient) CreateBulk(builders ...*PartyCreate) *PartyCreateBulk {
	return &PartyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Party.
func (c *PartyClient) Update() *PartyUpdate {
	mutation := newPartyMutation(c.config, OpUpdate)
	return &PartyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PartyClient) UpdateOne(pa *Party) *PartyUpdateOne {
	mutation := newPartyMutation(c.config, OpUpdateOne, withParty(pa))
	return &PartyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PartyClient) UpdateOneID(id int) *PartyUpdateOne {
	mutation := newPartyMutation(c.config, OpUpdateOne, withPartyID(id))
	return &PartyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Party.
func (c *PartyClient) Delete() *PartyDelete {
	mutation := newPartyMutation(c.config, OpDelete)
	return &PartyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PartyClient) DeleteOne(pa *Party) *PartyDeleteOne {
	return c.DeleteOneID(pa.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PartyClient) DeleteOneID(id int) *PartyDeleteOne {
	builder := c.Delete().Where(party.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PartyDeleteOne{builder}
}

// Query returns a query builder for Party.
func (c *PartyClient) Query() *PartyQuery {
	return &PartyQuery{
		config: c.config,
	}
}

// Get returns a Party entity by its id.
func (c *PartyClient) Get(ctx context.Context, id int) (*Party, error) {
	return c.Query().Where(party.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PartyClient) GetX(ctx context.Context, id int) *Party {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCreatedByUserLogin queries the created_by_user_login edge of a Party.
func (c *PartyClient) QueryCreatedByUserLogin(pa *Party) *UserLoginQuery {
	query := &UserLoginQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(party.Table, party.FieldID, id),
			sqlgraph.To(userlogin.Table, userlogin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, party.CreatedByUserLoginTable, party.CreatedByUserLoginColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLastModifiedByUserLogin queries the last_modified_by_user_login edge of a Party.
func (c *PartyClient) QueryLastModifiedByUserLogin(pa *Party) *UserLoginQuery {
	query := &UserLoginQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(party.Table, party.FieldID, id),
			sqlgraph.To(userlogin.Table, userlogin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, party.LastModifiedByUserLoginTable, party.LastModifiedByUserLoginColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFixedAssets queries the fixed_assets edge of a Party.
func (c *PartyClient) QueryFixedAssets(pa *Party) *FixedAssetQuery {
	query := &FixedAssetQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(party.Table, party.FieldID, id),
			sqlgraph.To(fixedasset.Table, fixedasset.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, party.FixedAssetsTable, party.FixedAssetsColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPartyRoles queries the party_roles edge of a Party.
func (c *PartyClient) QueryPartyRoles(pa *Party) *PartyRoleQuery {
	query := &PartyRoleQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(party.Table, party.FieldID, id),
			sqlgraph.To(partyrole.Table, partyrole.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, party.PartyRolesTable, party.PartyRolesColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPartyStatuses queries the party_statuses edge of a Party.
func (c *PartyClient) QueryPartyStatuses(pa *Party) *PartyStatusQuery {
	query := &PartyStatusQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(party.Table, party.FieldID, id),
			sqlgraph.To(partystatus.Table, partystatus.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, party.PartyStatusesTable, party.PartyStatusesColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPerson queries the person edge of a Party.
func (c *PartyClient) QueryPerson(pa *Party) *PersonQuery {
	query := &PersonQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(party.Table, party.FieldID, id),
			sqlgraph.To(person.Table, person.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, party.PersonTable, party.PersonColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserLogins queries the user_logins edge of a Party.
func (c *PartyClient) QueryUserLogins(pa *Party) *UserLoginQuery {
	query := &UserLoginQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(party.Table, party.FieldID, id),
			sqlgraph.To(userlogin.Table, userlogin.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, party.UserLoginsTable, party.UserLoginsColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkEffortPartyAssignments queries the work_effort_party_assignments edge of a Party.
func (c *PartyClient) QueryWorkEffortPartyAssignments(pa *Party) *WorkEffortPartyAssignmentQuery {
	query := &WorkEffortPartyAssignmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(party.Table, party.FieldID, id),
			sqlgraph.To(workeffortpartyassignment.Table, workeffortpartyassignment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, party.WorkEffortPartyAssignmentsTable, party.WorkEffortPartyAssignmentsColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PartyClient) Hooks() []Hook {
	return c.hooks.Party
}

// PartyRoleClient is a client for the PartyRole schema.
type PartyRoleClient struct {
	config
}

// NewPartyRoleClient returns a client for the PartyRole from the given config.
func NewPartyRoleClient(c config) *PartyRoleClient {
	return &PartyRoleClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `partyrole.Hooks(f(g(h())))`.
func (c *PartyRoleClient) Use(hooks ...Hook) {
	c.hooks.PartyRole = append(c.hooks.PartyRole, hooks...)
}

// Create returns a create builder for PartyRole.
func (c *PartyRoleClient) Create() *PartyRoleCreate {
	mutation := newPartyRoleMutation(c.config, OpCreate)
	return &PartyRoleCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PartyRole entities.
func (c *PartyRoleClient) CreateBulk(builders ...*PartyRoleCreate) *PartyRoleCreateBulk {
	return &PartyRoleCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PartyRole.
func (c *PartyRoleClient) Update() *PartyRoleUpdate {
	mutation := newPartyRoleMutation(c.config, OpUpdate)
	return &PartyRoleUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PartyRoleClient) UpdateOne(pr *PartyRole) *PartyRoleUpdateOne {
	mutation := newPartyRoleMutation(c.config, OpUpdateOne, withPartyRole(pr))
	return &PartyRoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PartyRoleClient) UpdateOneID(id int) *PartyRoleUpdateOne {
	mutation := newPartyRoleMutation(c.config, OpUpdateOne, withPartyRoleID(id))
	return &PartyRoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PartyRole.
func (c *PartyRoleClient) Delete() *PartyRoleDelete {
	mutation := newPartyRoleMutation(c.config, OpDelete)
	return &PartyRoleDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PartyRoleClient) DeleteOne(pr *PartyRole) *PartyRoleDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PartyRoleClient) DeleteOneID(id int) *PartyRoleDeleteOne {
	builder := c.Delete().Where(partyrole.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PartyRoleDeleteOne{builder}
}

// Query returns a query builder for PartyRole.
func (c *PartyRoleClient) Query() *PartyRoleQuery {
	return &PartyRoleQuery{
		config: c.config,
	}
}

// Get returns a PartyRole entity by its id.
func (c *PartyRoleClient) Get(ctx context.Context, id int) (*PartyRole, error) {
	return c.Query().Where(partyrole.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PartyRoleClient) GetX(ctx context.Context, id int) *PartyRole {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryParty queries the party edge of a PartyRole.
func (c *PartyRoleClient) QueryParty(pr *PartyRole) *PartyQuery {
	query := &PartyQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(partyrole.Table, partyrole.FieldID, id),
			sqlgraph.To(party.Table, party.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, partyrole.PartyTable, partyrole.PartyColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFixedAssets queries the fixed_assets edge of a PartyRole.
func (c *PartyRoleClient) QueryFixedAssets(pr *PartyRole) *FixedAssetQuery {
	query := &FixedAssetQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(partyrole.Table, partyrole.FieldID, id),
			sqlgraph.To(fixedasset.Table, fixedasset.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, partyrole.FixedAssetsTable, partyrole.FixedAssetsColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkEffortPartyAssignments queries the work_effort_party_assignments edge of a PartyRole.
func (c *PartyRoleClient) QueryWorkEffortPartyAssignments(pr *PartyRole) *WorkEffortPartyAssignmentQuery {
	query := &WorkEffortPartyAssignmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(partyrole.Table, partyrole.FieldID, id),
			sqlgraph.To(workeffortpartyassignment.Table, workeffortpartyassignment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, partyrole.WorkEffortPartyAssignmentsTable, partyrole.WorkEffortPartyAssignmentsColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PartyRoleClient) Hooks() []Hook {
	return c.hooks.PartyRole
}

// PartyStatusClient is a client for the PartyStatus schema.
type PartyStatusClient struct {
	config
}

// NewPartyStatusClient returns a client for the PartyStatus from the given config.
func NewPartyStatusClient(c config) *PartyStatusClient {
	return &PartyStatusClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `partystatus.Hooks(f(g(h())))`.
func (c *PartyStatusClient) Use(hooks ...Hook) {
	c.hooks.PartyStatus = append(c.hooks.PartyStatus, hooks...)
}

// Create returns a create builder for PartyStatus.
func (c *PartyStatusClient) Create() *PartyStatusCreate {
	mutation := newPartyStatusMutation(c.config, OpCreate)
	return &PartyStatusCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PartyStatus entities.
func (c *PartyStatusClient) CreateBulk(builders ...*PartyStatusCreate) *PartyStatusCreateBulk {
	return &PartyStatusCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PartyStatus.
func (c *PartyStatusClient) Update() *PartyStatusUpdate {
	mutation := newPartyStatusMutation(c.config, OpUpdate)
	return &PartyStatusUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PartyStatusClient) UpdateOne(ps *PartyStatus) *PartyStatusUpdateOne {
	mutation := newPartyStatusMutation(c.config, OpUpdateOne, withPartyStatus(ps))
	return &PartyStatusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PartyStatusClient) UpdateOneID(id int) *PartyStatusUpdateOne {
	mutation := newPartyStatusMutation(c.config, OpUpdateOne, withPartyStatusID(id))
	return &PartyStatusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PartyStatus.
func (c *PartyStatusClient) Delete() *PartyStatusDelete {
	mutation := newPartyStatusMutation(c.config, OpDelete)
	return &PartyStatusDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PartyStatusClient) DeleteOne(ps *PartyStatus) *PartyStatusDeleteOne {
	return c.DeleteOneID(ps.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PartyStatusClient) DeleteOneID(id int) *PartyStatusDeleteOne {
	builder := c.Delete().Where(partystatus.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PartyStatusDeleteOne{builder}
}

// Query returns a query builder for PartyStatus.
func (c *PartyStatusClient) Query() *PartyStatusQuery {
	return &PartyStatusQuery{
		config: c.config,
	}
}

// Get returns a PartyStatus entity by its id.
func (c *PartyStatusClient) Get(ctx context.Context, id int) (*PartyStatus, error) {
	return c.Query().Where(partystatus.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PartyStatusClient) GetX(ctx context.Context, id int) *PartyStatus {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryParty queries the party edge of a PartyStatus.
func (c *PartyStatusClient) QueryParty(ps *PartyStatus) *PartyQuery {
	query := &PartyQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ps.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(partystatus.Table, partystatus.FieldID, id),
			sqlgraph.To(party.Table, party.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, partystatus.PartyTable, partystatus.PartyColumn),
		)
		fromV = sqlgraph.Neighbors(ps.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChangeByUserLogin queries the change_by_user_login edge of a PartyStatus.
func (c *PartyStatusClient) QueryChangeByUserLogin(ps *PartyStatus) *UserLoginQuery {
	query := &UserLoginQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ps.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(partystatus.Table, partystatus.FieldID, id),
			sqlgraph.To(userlogin.Table, userlogin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, partystatus.ChangeByUserLoginTable, partystatus.ChangeByUserLoginColumn),
		)
		fromV = sqlgraph.Neighbors(ps.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PartyStatusClient) Hooks() []Hook {
	return c.hooks.PartyStatus
}

// PersonClient is a client for the Person schema.
type PersonClient struct {
	config
}

// NewPersonClient returns a client for the Person from the given config.
func NewPersonClient(c config) *PersonClient {
	return &PersonClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `person.Hooks(f(g(h())))`.
func (c *PersonClient) Use(hooks ...Hook) {
	c.hooks.Person = append(c.hooks.Person, hooks...)
}

// Create returns a create builder for Person.
func (c *PersonClient) Create() *PersonCreate {
	mutation := newPersonMutation(c.config, OpCreate)
	return &PersonCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Person entities.
func (c *PersonClient) CreateBulk(builders ...*PersonCreate) *PersonCreateBulk {
	return &PersonCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Person.
func (c *PersonClient) Update() *PersonUpdate {
	mutation := newPersonMutation(c.config, OpUpdate)
	return &PersonUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PersonClient) UpdateOne(pe *Person) *PersonUpdateOne {
	mutation := newPersonMutation(c.config, OpUpdateOne, withPerson(pe))
	return &PersonUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PersonClient) UpdateOneID(id int) *PersonUpdateOne {
	mutation := newPersonMutation(c.config, OpUpdateOne, withPersonID(id))
	return &PersonUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Person.
func (c *PersonClient) Delete() *PersonDelete {
	mutation := newPersonMutation(c.config, OpDelete)
	return &PersonDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PersonClient) DeleteOne(pe *Person) *PersonDeleteOne {
	return c.DeleteOneID(pe.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PersonClient) DeleteOneID(id int) *PersonDeleteOne {
	builder := c.Delete().Where(person.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PersonDeleteOne{builder}
}

// Query returns a query builder for Person.
func (c *PersonClient) Query() *PersonQuery {
	return &PersonQuery{
		config: c.config,
	}
}

// Get returns a Person entity by its id.
func (c *PersonClient) Get(ctx context.Context, id int) (*Person, error) {
	return c.Query().Where(person.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PersonClient) GetX(ctx context.Context, id int) *Person {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryParty queries the party edge of a Person.
func (c *PersonClient) QueryParty(pe *Person) *PartyQuery {
	query := &PartyQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pe.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(person.Table, person.FieldID, id),
			sqlgraph.To(party.Table, party.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, person.PartyTable, person.PartyColumn),
		)
		fromV = sqlgraph.Neighbors(pe.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserLogins queries the user_logins edge of a Person.
func (c *PersonClient) QueryUserLogins(pe *Person) *UserLoginQuery {
	query := &UserLoginQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pe.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(person.Table, person.FieldID, id),
			sqlgraph.To(userlogin.Table, userlogin.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, person.UserLoginsTable, person.UserLoginsColumn),
		)
		fromV = sqlgraph.Neighbors(pe.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PersonClient) Hooks() []Hook {
	return c.hooks.Person
}

// SecurityGroupClient is a client for the SecurityGroup schema.
type SecurityGroupClient struct {
	config
}

// NewSecurityGroupClient returns a client for the SecurityGroup from the given config.
func NewSecurityGroupClient(c config) *SecurityGroupClient {
	return &SecurityGroupClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `securitygroup.Hooks(f(g(h())))`.
func (c *SecurityGroupClient) Use(hooks ...Hook) {
	c.hooks.SecurityGroup = append(c.hooks.SecurityGroup, hooks...)
}

// Create returns a create builder for SecurityGroup.
func (c *SecurityGroupClient) Create() *SecurityGroupCreate {
	mutation := newSecurityGroupMutation(c.config, OpCreate)
	return &SecurityGroupCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SecurityGroup entities.
func (c *SecurityGroupClient) CreateBulk(builders ...*SecurityGroupCreate) *SecurityGroupCreateBulk {
	return &SecurityGroupCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SecurityGroup.
func (c *SecurityGroupClient) Update() *SecurityGroupUpdate {
	mutation := newSecurityGroupMutation(c.config, OpUpdate)
	return &SecurityGroupUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SecurityGroupClient) UpdateOne(sg *SecurityGroup) *SecurityGroupUpdateOne {
	mutation := newSecurityGroupMutation(c.config, OpUpdateOne, withSecurityGroup(sg))
	return &SecurityGroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SecurityGroupClient) UpdateOneID(id int) *SecurityGroupUpdateOne {
	mutation := newSecurityGroupMutation(c.config, OpUpdateOne, withSecurityGroupID(id))
	return &SecurityGroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SecurityGroup.
func (c *SecurityGroupClient) Delete() *SecurityGroupDelete {
	mutation := newSecurityGroupMutation(c.config, OpDelete)
	return &SecurityGroupDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SecurityGroupClient) DeleteOne(sg *SecurityGroup) *SecurityGroupDeleteOne {
	return c.DeleteOneID(sg.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SecurityGroupClient) DeleteOneID(id int) *SecurityGroupDeleteOne {
	builder := c.Delete().Where(securitygroup.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SecurityGroupDeleteOne{builder}
}

// Query returns a query builder for SecurityGroup.
func (c *SecurityGroupClient) Query() *SecurityGroupQuery {
	return &SecurityGroupQuery{
		config: c.config,
	}
}

// Get returns a SecurityGroup entity by its id.
func (c *SecurityGroupClient) Get(ctx context.Context, id int) (*SecurityGroup, error) {
	return c.Query().Where(securitygroup.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SecurityGroupClient) GetX(ctx context.Context, id int) *SecurityGroup {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySecurityGroupPermissions queries the security_group_permissions edge of a SecurityGroup.
func (c *SecurityGroupClient) QuerySecurityGroupPermissions(sg *SecurityGroup) *SecurityGroupPermissionQuery {
	query := &SecurityGroupPermissionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sg.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(securitygroup.Table, securitygroup.FieldID, id),
			sqlgraph.To(securitygrouppermission.Table, securitygrouppermission.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, securitygroup.SecurityGroupPermissionsTable, securitygroup.SecurityGroupPermissionsColumn),
		)
		fromV = sqlgraph.Neighbors(sg.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserLoginSecurityGroups queries the user_login_security_groups edge of a SecurityGroup.
func (c *SecurityGroupClient) QueryUserLoginSecurityGroups(sg *SecurityGroup) *UserLoginSecurityGroupQuery {
	query := &UserLoginSecurityGroupQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sg.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(securitygroup.Table, securitygroup.FieldID, id),
			sqlgraph.To(userloginsecuritygroup.Table, userloginsecuritygroup.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, securitygroup.UserLoginSecurityGroupsTable, securitygroup.UserLoginSecurityGroupsColumn),
		)
		fromV = sqlgraph.Neighbors(sg.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SecurityGroupClient) Hooks() []Hook {
	return c.hooks.SecurityGroup
}

// SecurityGroupPermissionClient is a client for the SecurityGroupPermission schema.
type SecurityGroupPermissionClient struct {
	config
}

// NewSecurityGroupPermissionClient returns a client for the SecurityGroupPermission from the given config.
func NewSecurityGroupPermissionClient(c config) *SecurityGroupPermissionClient {
	return &SecurityGroupPermissionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `securitygrouppermission.Hooks(f(g(h())))`.
func (c *SecurityGroupPermissionClient) Use(hooks ...Hook) {
	c.hooks.SecurityGroupPermission = append(c.hooks.SecurityGroupPermission, hooks...)
}

// Create returns a create builder for SecurityGroupPermission.
func (c *SecurityGroupPermissionClient) Create() *SecurityGroupPermissionCreate {
	mutation := newSecurityGroupPermissionMutation(c.config, OpCreate)
	return &SecurityGroupPermissionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SecurityGroupPermission entities.
func (c *SecurityGroupPermissionClient) CreateBulk(builders ...*SecurityGroupPermissionCreate) *SecurityGroupPermissionCreateBulk {
	return &SecurityGroupPermissionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SecurityGroupPermission.
func (c *SecurityGroupPermissionClient) Update() *SecurityGroupPermissionUpdate {
	mutation := newSecurityGroupPermissionMutation(c.config, OpUpdate)
	return &SecurityGroupPermissionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SecurityGroupPermissionClient) UpdateOne(sgp *SecurityGroupPermission) *SecurityGroupPermissionUpdateOne {
	mutation := newSecurityGroupPermissionMutation(c.config, OpUpdateOne, withSecurityGroupPermission(sgp))
	return &SecurityGroupPermissionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SecurityGroupPermissionClient) UpdateOneID(id int) *SecurityGroupPermissionUpdateOne {
	mutation := newSecurityGroupPermissionMutation(c.config, OpUpdateOne, withSecurityGroupPermissionID(id))
	return &SecurityGroupPermissionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SecurityGroupPermission.
func (c *SecurityGroupPermissionClient) Delete() *SecurityGroupPermissionDelete {
	mutation := newSecurityGroupPermissionMutation(c.config, OpDelete)
	return &SecurityGroupPermissionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SecurityGroupPermissionClient) DeleteOne(sgp *SecurityGroupPermission) *SecurityGroupPermissionDeleteOne {
	return c.DeleteOneID(sgp.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SecurityGroupPermissionClient) DeleteOneID(id int) *SecurityGroupPermissionDeleteOne {
	builder := c.Delete().Where(securitygrouppermission.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SecurityGroupPermissionDeleteOne{builder}
}

// Query returns a query builder for SecurityGroupPermission.
func (c *SecurityGroupPermissionClient) Query() *SecurityGroupPermissionQuery {
	return &SecurityGroupPermissionQuery{
		config: c.config,
	}
}

// Get returns a SecurityGroupPermission entity by its id.
func (c *SecurityGroupPermissionClient) Get(ctx context.Context, id int) (*SecurityGroupPermission, error) {
	return c.Query().Where(securitygrouppermission.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SecurityGroupPermissionClient) GetX(ctx context.Context, id int) *SecurityGroupPermission {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySecurityGroup queries the security_group edge of a SecurityGroupPermission.
func (c *SecurityGroupPermissionClient) QuerySecurityGroup(sgp *SecurityGroupPermission) *SecurityGroupQuery {
	query := &SecurityGroupQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sgp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(securitygrouppermission.Table, securitygrouppermission.FieldID, id),
			sqlgraph.To(securitygroup.Table, securitygroup.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, securitygrouppermission.SecurityGroupTable, securitygrouppermission.SecurityGroupColumn),
		)
		fromV = sqlgraph.Neighbors(sgp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SecurityGroupPermissionClient) Hooks() []Hook {
	return c.hooks.SecurityGroupPermission
}

// TemporalExpressionClient is a client for the TemporalExpression schema.
type TemporalExpressionClient struct {
	config
}

// NewTemporalExpressionClient returns a client for the TemporalExpression from the given config.
func NewTemporalExpressionClient(c config) *TemporalExpressionClient {
	return &TemporalExpressionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `temporalexpression.Hooks(f(g(h())))`.
func (c *TemporalExpressionClient) Use(hooks ...Hook) {
	c.hooks.TemporalExpression = append(c.hooks.TemporalExpression, hooks...)
}

// Create returns a create builder for TemporalExpression.
func (c *TemporalExpressionClient) Create() *TemporalExpressionCreate {
	mutation := newTemporalExpressionMutation(c.config, OpCreate)
	return &TemporalExpressionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TemporalExpression entities.
func (c *TemporalExpressionClient) CreateBulk(builders ...*TemporalExpressionCreate) *TemporalExpressionCreateBulk {
	return &TemporalExpressionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TemporalExpression.
func (c *TemporalExpressionClient) Update() *TemporalExpressionUpdate {
	mutation := newTemporalExpressionMutation(c.config, OpUpdate)
	return &TemporalExpressionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TemporalExpressionClient) UpdateOne(te *TemporalExpression) *TemporalExpressionUpdateOne {
	mutation := newTemporalExpressionMutation(c.config, OpUpdateOne, withTemporalExpression(te))
	return &TemporalExpressionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TemporalExpressionClient) UpdateOneID(id int) *TemporalExpressionUpdateOne {
	mutation := newTemporalExpressionMutation(c.config, OpUpdateOne, withTemporalExpressionID(id))
	return &TemporalExpressionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TemporalExpression.
func (c *TemporalExpressionClient) Delete() *TemporalExpressionDelete {
	mutation := newTemporalExpressionMutation(c.config, OpDelete)
	return &TemporalExpressionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TemporalExpressionClient) DeleteOne(te *TemporalExpression) *TemporalExpressionDeleteOne {
	return c.DeleteOneID(te.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TemporalExpressionClient) DeleteOneID(id int) *TemporalExpressionDeleteOne {
	builder := c.Delete().Where(temporalexpression.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TemporalExpressionDeleteOne{builder}
}

// Query returns a query builder for TemporalExpression.
func (c *TemporalExpressionClient) Query() *TemporalExpressionQuery {
	return &TemporalExpressionQuery{
		config: c.config,
	}
}

// Get returns a TemporalExpression entity by its id.
func (c *TemporalExpressionClient) Get(ctx context.Context, id int) (*TemporalExpression, error) {
	return c.Query().Where(temporalexpression.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TemporalExpressionClient) GetX(ctx context.Context, id int) *TemporalExpression {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryFromTemporalExpressionAssocs queries the from_temporal_expression_assocs edge of a TemporalExpression.
func (c *TemporalExpressionClient) QueryFromTemporalExpressionAssocs(te *TemporalExpression) *TemporalExpressionAssocQuery {
	query := &TemporalExpressionAssocQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := te.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(temporalexpression.Table, temporalexpression.FieldID, id),
			sqlgraph.To(temporalexpressionassoc.Table, temporalexpressionassoc.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, temporalexpression.FromTemporalExpressionAssocsTable, temporalexpression.FromTemporalExpressionAssocsColumn),
		)
		fromV = sqlgraph.Neighbors(te.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryToTemporalExpressionAssocs queries the to_temporal_expression_assocs edge of a TemporalExpression.
func (c *TemporalExpressionClient) QueryToTemporalExpressionAssocs(te *TemporalExpression) *TemporalExpressionAssocQuery {
	query := &TemporalExpressionAssocQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := te.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(temporalexpression.Table, temporalexpression.FieldID, id),
			sqlgraph.To(temporalexpressionassoc.Table, temporalexpressionassoc.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, temporalexpression.ToTemporalExpressionAssocsTable, temporalexpression.ToTemporalExpressionAssocsColumn),
		)
		fromV = sqlgraph.Neighbors(te.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkEfforts queries the work_efforts edge of a TemporalExpression.
func (c *TemporalExpressionClient) QueryWorkEfforts(te *TemporalExpression) *WorkEffortQuery {
	query := &WorkEffortQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := te.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(temporalexpression.Table, temporalexpression.FieldID, id),
			sqlgraph.To(workeffort.Table, workeffort.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, temporalexpression.WorkEffortsTable, temporalexpression.WorkEffortsColumn),
		)
		fromV = sqlgraph.Neighbors(te.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TemporalExpressionClient) Hooks() []Hook {
	return c.hooks.TemporalExpression
}

// TemporalExpressionAssocClient is a client for the TemporalExpressionAssoc schema.
type TemporalExpressionAssocClient struct {
	config
}

// NewTemporalExpressionAssocClient returns a client for the TemporalExpressionAssoc from the given config.
func NewTemporalExpressionAssocClient(c config) *TemporalExpressionAssocClient {
	return &TemporalExpressionAssocClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `temporalexpressionassoc.Hooks(f(g(h())))`.
func (c *TemporalExpressionAssocClient) Use(hooks ...Hook) {
	c.hooks.TemporalExpressionAssoc = append(c.hooks.TemporalExpressionAssoc, hooks...)
}

// Create returns a create builder for TemporalExpressionAssoc.
func (c *TemporalExpressionAssocClient) Create() *TemporalExpressionAssocCreate {
	mutation := newTemporalExpressionAssocMutation(c.config, OpCreate)
	return &TemporalExpressionAssocCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TemporalExpressionAssoc entities.
func (c *TemporalExpressionAssocClient) CreateBulk(builders ...*TemporalExpressionAssocCreate) *TemporalExpressionAssocCreateBulk {
	return &TemporalExpressionAssocCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TemporalExpressionAssoc.
func (c *TemporalExpressionAssocClient) Update() *TemporalExpressionAssocUpdate {
	mutation := newTemporalExpressionAssocMutation(c.config, OpUpdate)
	return &TemporalExpressionAssocUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TemporalExpressionAssocClient) UpdateOne(tea *TemporalExpressionAssoc) *TemporalExpressionAssocUpdateOne {
	mutation := newTemporalExpressionAssocMutation(c.config, OpUpdateOne, withTemporalExpressionAssoc(tea))
	return &TemporalExpressionAssocUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TemporalExpressionAssocClient) UpdateOneID(id int) *TemporalExpressionAssocUpdateOne {
	mutation := newTemporalExpressionAssocMutation(c.config, OpUpdateOne, withTemporalExpressionAssocID(id))
	return &TemporalExpressionAssocUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TemporalExpressionAssoc.
func (c *TemporalExpressionAssocClient) Delete() *TemporalExpressionAssocDelete {
	mutation := newTemporalExpressionAssocMutation(c.config, OpDelete)
	return &TemporalExpressionAssocDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TemporalExpressionAssocClient) DeleteOne(tea *TemporalExpressionAssoc) *TemporalExpressionAssocDeleteOne {
	return c.DeleteOneID(tea.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TemporalExpressionAssocClient) DeleteOneID(id int) *TemporalExpressionAssocDeleteOne {
	builder := c.Delete().Where(temporalexpressionassoc.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TemporalExpressionAssocDeleteOne{builder}
}

// Query returns a query builder for TemporalExpressionAssoc.
func (c *TemporalExpressionAssocClient) Query() *TemporalExpressionAssocQuery {
	return &TemporalExpressionAssocQuery{
		config: c.config,
	}
}

// Get returns a TemporalExpressionAssoc entity by its id.
func (c *TemporalExpressionAssocClient) Get(ctx context.Context, id int) (*TemporalExpressionAssoc, error) {
	return c.Query().Where(temporalexpressionassoc.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TemporalExpressionAssocClient) GetX(ctx context.Context, id int) *TemporalExpressionAssoc {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryFromTemporalExpression queries the from_temporal_expression edge of a TemporalExpressionAssoc.
func (c *TemporalExpressionAssocClient) QueryFromTemporalExpression(tea *TemporalExpressionAssoc) *TemporalExpressionQuery {
	query := &TemporalExpressionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tea.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(temporalexpressionassoc.Table, temporalexpressionassoc.FieldID, id),
			sqlgraph.To(temporalexpression.Table, temporalexpression.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, temporalexpressionassoc.FromTemporalExpressionTable, temporalexpressionassoc.FromTemporalExpressionColumn),
		)
		fromV = sqlgraph.Neighbors(tea.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryToTemporalExpression queries the to_temporal_expression edge of a TemporalExpressionAssoc.
func (c *TemporalExpressionAssocClient) QueryToTemporalExpression(tea *TemporalExpressionAssoc) *TemporalExpressionQuery {
	query := &TemporalExpressionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tea.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(temporalexpressionassoc.Table, temporalexpressionassoc.FieldID, id),
			sqlgraph.To(temporalexpression.Table, temporalexpression.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, temporalexpressionassoc.ToTemporalExpressionTable, temporalexpressionassoc.ToTemporalExpressionColumn),
		)
		fromV = sqlgraph.Neighbors(tea.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TemporalExpressionAssocClient) Hooks() []Hook {
	return c.hooks.TemporalExpressionAssoc
}

// UserLoginClient is a client for the UserLogin schema.
type UserLoginClient struct {
	config
}

// NewUserLoginClient returns a client for the UserLogin from the given config.
func NewUserLoginClient(c config) *UserLoginClient {
	return &UserLoginClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `userlogin.Hooks(f(g(h())))`.
func (c *UserLoginClient) Use(hooks ...Hook) {
	c.hooks.UserLogin = append(c.hooks.UserLogin, hooks...)
}

// Create returns a create builder for UserLogin.
func (c *UserLoginClient) Create() *UserLoginCreate {
	mutation := newUserLoginMutation(c.config, OpCreate)
	return &UserLoginCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserLogin entities.
func (c *UserLoginClient) CreateBulk(builders ...*UserLoginCreate) *UserLoginCreateBulk {
	return &UserLoginCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserLogin.
func (c *UserLoginClient) Update() *UserLoginUpdate {
	mutation := newUserLoginMutation(c.config, OpUpdate)
	return &UserLoginUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserLoginClient) UpdateOne(ul *UserLogin) *UserLoginUpdateOne {
	mutation := newUserLoginMutation(c.config, OpUpdateOne, withUserLogin(ul))
	return &UserLoginUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserLoginClient) UpdateOneID(id int) *UserLoginUpdateOne {
	mutation := newUserLoginMutation(c.config, OpUpdateOne, withUserLoginID(id))
	return &UserLoginUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserLogin.
func (c *UserLoginClient) Delete() *UserLoginDelete {
	mutation := newUserLoginMutation(c.config, OpDelete)
	return &UserLoginDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserLoginClient) DeleteOne(ul *UserLogin) *UserLoginDeleteOne {
	return c.DeleteOneID(ul.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserLoginClient) DeleteOneID(id int) *UserLoginDeleteOne {
	builder := c.Delete().Where(userlogin.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserLoginDeleteOne{builder}
}

// Query returns a query builder for UserLogin.
func (c *UserLoginClient) Query() *UserLoginQuery {
	return &UserLoginQuery{
		config: c.config,
	}
}

// Get returns a UserLogin entity by its id.
func (c *UserLoginClient) Get(ctx context.Context, id int) (*UserLogin, error) {
	return c.Query().Where(userlogin.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserLoginClient) GetX(ctx context.Context, id int) *UserLogin {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryParty queries the party edge of a UserLogin.
func (c *UserLoginClient) QueryParty(ul *UserLogin) *PartyQuery {
	query := &PartyQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ul.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(userlogin.Table, userlogin.FieldID, id),
			sqlgraph.To(party.Table, party.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, userlogin.PartyTable, userlogin.PartyColumn),
		)
		fromV = sqlgraph.Neighbors(ul.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPerson queries the person edge of a UserLogin.
func (c *UserLoginClient) QueryPerson(ul *UserLogin) *PersonQuery {
	query := &PersonQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ul.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(userlogin.Table, userlogin.FieldID, id),
			sqlgraph.To(person.Table, person.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, userlogin.PersonTable, userlogin.PersonColumn),
		)
		fromV = sqlgraph.Neighbors(ul.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCreatedByParties queries the created_by_parties edge of a UserLogin.
func (c *UserLoginClient) QueryCreatedByParties(ul *UserLogin) *PartyQuery {
	query := &PartyQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ul.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(userlogin.Table, userlogin.FieldID, id),
			sqlgraph.To(party.Table, party.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, userlogin.CreatedByPartiesTable, userlogin.CreatedByPartiesColumn),
		)
		fromV = sqlgraph.Neighbors(ul.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLastModifiedByParties queries the last_modified_by_parties edge of a UserLogin.
func (c *UserLoginClient) QueryLastModifiedByParties(ul *UserLogin) *PartyQuery {
	query := &PartyQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ul.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(userlogin.Table, userlogin.FieldID, id),
			sqlgraph.To(party.Table, party.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, userlogin.LastModifiedByPartiesTable, userlogin.LastModifiedByPartiesColumn),
		)
		fromV = sqlgraph.Neighbors(ul.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChangeByPartyStatuses queries the change_by_party_statuses edge of a UserLogin.
func (c *UserLoginClient) QueryChangeByPartyStatuses(ul *UserLogin) *PartyStatusQuery {
	query := &PartyStatusQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ul.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(userlogin.Table, userlogin.FieldID, id),
			sqlgraph.To(partystatus.Table, partystatus.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, userlogin.ChangeByPartyStatusesTable, userlogin.ChangeByPartyStatusesColumn),
		)
		fromV = sqlgraph.Neighbors(ul.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserLoginSecurityGroups queries the user_login_security_groups edge of a UserLogin.
func (c *UserLoginClient) QueryUserLoginSecurityGroups(ul *UserLogin) *UserLoginSecurityGroupQuery {
	query := &UserLoginSecurityGroupQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ul.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(userlogin.Table, userlogin.FieldID, id),
			sqlgraph.To(userloginsecuritygroup.Table, userloginsecuritygroup.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, userlogin.UserLoginSecurityGroupsTable, userlogin.UserLoginSecurityGroupsColumn),
		)
		fromV = sqlgraph.Neighbors(ul.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAssignedByWorkEffortPartyAssignments queries the assigned_by_work_effort_party_assignments edge of a UserLogin.
func (c *UserLoginClient) QueryAssignedByWorkEffortPartyAssignments(ul *UserLogin) *WorkEffortPartyAssignmentQuery {
	query := &WorkEffortPartyAssignmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ul.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(userlogin.Table, userlogin.FieldID, id),
			sqlgraph.To(workeffortpartyassignment.Table, workeffortpartyassignment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, userlogin.AssignedByWorkEffortPartyAssignmentsTable, userlogin.AssignedByWorkEffortPartyAssignmentsColumn),
		)
		fromV = sqlgraph.Neighbors(ul.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserLoginClient) Hooks() []Hook {
	return c.hooks.UserLogin
}

// UserLoginSecurityGroupClient is a client for the UserLoginSecurityGroup schema.
type UserLoginSecurityGroupClient struct {
	config
}

// NewUserLoginSecurityGroupClient returns a client for the UserLoginSecurityGroup from the given config.
func NewUserLoginSecurityGroupClient(c config) *UserLoginSecurityGroupClient {
	return &UserLoginSecurityGroupClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `userloginsecuritygroup.Hooks(f(g(h())))`.
func (c *UserLoginSecurityGroupClient) Use(hooks ...Hook) {
	c.hooks.UserLoginSecurityGroup = append(c.hooks.UserLoginSecurityGroup, hooks...)
}

// Create returns a create builder for UserLoginSecurityGroup.
func (c *UserLoginSecurityGroupClient) Create() *UserLoginSecurityGroupCreate {
	mutation := newUserLoginSecurityGroupMutation(c.config, OpCreate)
	return &UserLoginSecurityGroupCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserLoginSecurityGroup entities.
func (c *UserLoginSecurityGroupClient) CreateBulk(builders ...*UserLoginSecurityGroupCreate) *UserLoginSecurityGroupCreateBulk {
	return &UserLoginSecurityGroupCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserLoginSecurityGroup.
func (c *UserLoginSecurityGroupClient) Update() *UserLoginSecurityGroupUpdate {
	mutation := newUserLoginSecurityGroupMutation(c.config, OpUpdate)
	return &UserLoginSecurityGroupUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserLoginSecurityGroupClient) UpdateOne(ulsg *UserLoginSecurityGroup) *UserLoginSecurityGroupUpdateOne {
	mutation := newUserLoginSecurityGroupMutation(c.config, OpUpdateOne, withUserLoginSecurityGroup(ulsg))
	return &UserLoginSecurityGroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserLoginSecurityGroupClient) UpdateOneID(id int) *UserLoginSecurityGroupUpdateOne {
	mutation := newUserLoginSecurityGroupMutation(c.config, OpUpdateOne, withUserLoginSecurityGroupID(id))
	return &UserLoginSecurityGroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserLoginSecurityGroup.
func (c *UserLoginSecurityGroupClient) Delete() *UserLoginSecurityGroupDelete {
	mutation := newUserLoginSecurityGroupMutation(c.config, OpDelete)
	return &UserLoginSecurityGroupDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserLoginSecurityGroupClient) DeleteOne(ulsg *UserLoginSecurityGroup) *UserLoginSecurityGroupDeleteOne {
	return c.DeleteOneID(ulsg.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserLoginSecurityGroupClient) DeleteOneID(id int) *UserLoginSecurityGroupDeleteOne {
	builder := c.Delete().Where(userloginsecuritygroup.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserLoginSecurityGroupDeleteOne{builder}
}

// Query returns a query builder for UserLoginSecurityGroup.
func (c *UserLoginSecurityGroupClient) Query() *UserLoginSecurityGroupQuery {
	return &UserLoginSecurityGroupQuery{
		config: c.config,
	}
}

// Get returns a UserLoginSecurityGroup entity by its id.
func (c *UserLoginSecurityGroupClient) Get(ctx context.Context, id int) (*UserLoginSecurityGroup, error) {
	return c.Query().Where(userloginsecuritygroup.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserLoginSecurityGroupClient) GetX(ctx context.Context, id int) *UserLoginSecurityGroup {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUserLogin queries the user_login edge of a UserLoginSecurityGroup.
func (c *UserLoginSecurityGroupClient) QueryUserLogin(ulsg *UserLoginSecurityGroup) *UserLoginQuery {
	query := &UserLoginQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ulsg.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(userloginsecuritygroup.Table, userloginsecuritygroup.FieldID, id),
			sqlgraph.To(userlogin.Table, userlogin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, userloginsecuritygroup.UserLoginTable, userloginsecuritygroup.UserLoginColumn),
		)
		fromV = sqlgraph.Neighbors(ulsg.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySecurityGroup queries the security_group edge of a UserLoginSecurityGroup.
func (c *UserLoginSecurityGroupClient) QuerySecurityGroup(ulsg *UserLoginSecurityGroup) *SecurityGroupQuery {
	query := &SecurityGroupQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ulsg.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(userloginsecuritygroup.Table, userloginsecuritygroup.FieldID, id),
			sqlgraph.To(securitygroup.Table, securitygroup.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, userloginsecuritygroup.SecurityGroupTable, userloginsecuritygroup.SecurityGroupColumn),
		)
		fromV = sqlgraph.Neighbors(ulsg.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySecurityGroupPermissions queries the security_group_permissions edge of a UserLoginSecurityGroup.
func (c *UserLoginSecurityGroupClient) QuerySecurityGroupPermissions(ulsg *UserLoginSecurityGroup) *SecurityGroupPermissionQuery {
	query := &SecurityGroupPermissionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ulsg.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(userloginsecuritygroup.Table, userloginsecuritygroup.FieldID, id),
			sqlgraph.To(securitygrouppermission.Table, securitygrouppermission.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, userloginsecuritygroup.SecurityGroupPermissionsTable, userloginsecuritygroup.SecurityGroupPermissionsColumn),
		)
		fromV = sqlgraph.Neighbors(ulsg.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserLoginSecurityGroupClient) Hooks() []Hook {
	return c.hooks.UserLoginSecurityGroup
}

// WorkEffortClient is a client for the WorkEffort schema.
type WorkEffortClient struct {
	config
}

// NewWorkEffortClient returns a client for the WorkEffort from the given config.
func NewWorkEffortClient(c config) *WorkEffortClient {
	return &WorkEffortClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `workeffort.Hooks(f(g(h())))`.
func (c *WorkEffortClient) Use(hooks ...Hook) {
	c.hooks.WorkEffort = append(c.hooks.WorkEffort, hooks...)
}

// Create returns a create builder for WorkEffort.
func (c *WorkEffortClient) Create() *WorkEffortCreate {
	mutation := newWorkEffortMutation(c.config, OpCreate)
	return &WorkEffortCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of WorkEffort entities.
func (c *WorkEffortClient) CreateBulk(builders ...*WorkEffortCreate) *WorkEffortCreateBulk {
	return &WorkEffortCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for WorkEffort.
func (c *WorkEffortClient) Update() *WorkEffortUpdate {
	mutation := newWorkEffortMutation(c.config, OpUpdate)
	return &WorkEffortUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WorkEffortClient) UpdateOne(we *WorkEffort) *WorkEffortUpdateOne {
	mutation := newWorkEffortMutation(c.config, OpUpdateOne, withWorkEffort(we))
	return &WorkEffortUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WorkEffortClient) UpdateOneID(id int) *WorkEffortUpdateOne {
	mutation := newWorkEffortMutation(c.config, OpUpdateOne, withWorkEffortID(id))
	return &WorkEffortUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for WorkEffort.
func (c *WorkEffortClient) Delete() *WorkEffortDelete {
	mutation := newWorkEffortMutation(c.config, OpDelete)
	return &WorkEffortDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *WorkEffortClient) DeleteOne(we *WorkEffort) *WorkEffortDeleteOne {
	return c.DeleteOneID(we.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *WorkEffortClient) DeleteOneID(id int) *WorkEffortDeleteOne {
	builder := c.Delete().Where(workeffort.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WorkEffortDeleteOne{builder}
}

// Query returns a query builder for WorkEffort.
func (c *WorkEffortClient) Query() *WorkEffortQuery {
	return &WorkEffortQuery{
		config: c.config,
	}
}

// Get returns a WorkEffort entity by its id.
func (c *WorkEffortClient) Get(ctx context.Context, id int) (*WorkEffort, error) {
	return c.Query().Where(workeffort.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WorkEffortClient) GetX(ctx context.Context, id int) *WorkEffort {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryParent queries the parent edge of a WorkEffort.
func (c *WorkEffortClient) QueryParent(we *WorkEffort) *WorkEffortQuery {
	query := &WorkEffortQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := we.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workeffort.Table, workeffort.FieldID, id),
			sqlgraph.To(workeffort.Table, workeffort.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workeffort.ParentTable, workeffort.ParentColumn),
		)
		fromV = sqlgraph.Neighbors(we.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildren queries the children edge of a WorkEffort.
func (c *WorkEffortClient) QueryChildren(we *WorkEffort) *WorkEffortQuery {
	query := &WorkEffortQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := we.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workeffort.Table, workeffort.FieldID, id),
			sqlgraph.To(workeffort.Table, workeffort.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, workeffort.ChildrenTable, workeffort.ChildrenColumn),
		)
		fromV = sqlgraph.Neighbors(we.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFixedAsset queries the fixed_asset edge of a WorkEffort.
func (c *WorkEffortClient) QueryFixedAsset(we *WorkEffort) *FixedAssetQuery {
	query := &FixedAssetQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := we.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workeffort.Table, workeffort.FieldID, id),
			sqlgraph.To(fixedasset.Table, fixedasset.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workeffort.FixedAssetTable, workeffort.FixedAssetColumn),
		)
		fromV = sqlgraph.Neighbors(we.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTemporalExpression queries the temporal_expression edge of a WorkEffort.
func (c *WorkEffortClient) QueryTemporalExpression(we *WorkEffort) *TemporalExpressionQuery {
	query := &TemporalExpressionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := we.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workeffort.Table, workeffort.FieldID, id),
			sqlgraph.To(temporalexpression.Table, temporalexpression.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workeffort.TemporalExpressionTable, workeffort.TemporalExpressionColumn),
		)
		fromV = sqlgraph.Neighbors(we.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildWorkEfforts queries the child_work_efforts edge of a WorkEffort.
func (c *WorkEffortClient) QueryChildWorkEfforts(we *WorkEffort) *WorkEffortQuery {
	query := &WorkEffortQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := we.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workeffort.Table, workeffort.FieldID, id),
			sqlgraph.To(workeffort.Table, workeffort.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, workeffort.ChildWorkEffortsTable, workeffort.ChildWorkEffortsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(we.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFromWorkEffortAssocs queries the from_work_effort_assocs edge of a WorkEffort.
func (c *WorkEffortClient) QueryFromWorkEffortAssocs(we *WorkEffort) *WorkEffortAssocQuery {
	query := &WorkEffortAssocQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := we.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workeffort.Table, workeffort.FieldID, id),
			sqlgraph.To(workeffortassoc.Table, workeffortassoc.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, workeffort.FromWorkEffortAssocsTable, workeffort.FromWorkEffortAssocsColumn),
		)
		fromV = sqlgraph.Neighbors(we.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryToWorkEffortAssocs queries the to_work_effort_assocs edge of a WorkEffort.
func (c *WorkEffortClient) QueryToWorkEffortAssocs(we *WorkEffort) *WorkEffortAssocQuery {
	query := &WorkEffortAssocQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := we.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workeffort.Table, workeffort.FieldID, id),
			sqlgraph.To(workeffortassoc.Table, workeffortassoc.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, workeffort.ToWorkEffortAssocsTable, workeffort.ToWorkEffortAssocsColumn),
		)
		fromV = sqlgraph.Neighbors(we.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkEffortFixedAssetAssigns queries the work_effort_fixed_asset_assigns edge of a WorkEffort.
func (c *WorkEffortClient) QueryWorkEffortFixedAssetAssigns(we *WorkEffort) *WorkEffortFixedAssetAssignQuery {
	query := &WorkEffortFixedAssetAssignQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := we.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workeffort.Table, workeffort.FieldID, id),
			sqlgraph.To(workeffortfixedassetassign.Table, workeffortfixedassetassign.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, workeffort.WorkEffortFixedAssetAssignsTable, workeffort.WorkEffortFixedAssetAssignsColumn),
		)
		fromV = sqlgraph.Neighbors(we.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkEffortPartyAssignments queries the work_effort_party_assignments edge of a WorkEffort.
func (c *WorkEffortClient) QueryWorkEffortPartyAssignments(we *WorkEffort) *WorkEffortPartyAssignmentQuery {
	query := &WorkEffortPartyAssignmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := we.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workeffort.Table, workeffort.FieldID, id),
			sqlgraph.To(workeffortpartyassignment.Table, workeffortpartyassignment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, workeffort.WorkEffortPartyAssignmentsTable, workeffort.WorkEffortPartyAssignmentsColumn),
		)
		fromV = sqlgraph.Neighbors(we.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *WorkEffortClient) Hooks() []Hook {
	return c.hooks.WorkEffort
}

// WorkEffortAssocClient is a client for the WorkEffortAssoc schema.
type WorkEffortAssocClient struct {
	config
}

// NewWorkEffortAssocClient returns a client for the WorkEffortAssoc from the given config.
func NewWorkEffortAssocClient(c config) *WorkEffortAssocClient {
	return &WorkEffortAssocClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `workeffortassoc.Hooks(f(g(h())))`.
func (c *WorkEffortAssocClient) Use(hooks ...Hook) {
	c.hooks.WorkEffortAssoc = append(c.hooks.WorkEffortAssoc, hooks...)
}

// Create returns a create builder for WorkEffortAssoc.
func (c *WorkEffortAssocClient) Create() *WorkEffortAssocCreate {
	mutation := newWorkEffortAssocMutation(c.config, OpCreate)
	return &WorkEffortAssocCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of WorkEffortAssoc entities.
func (c *WorkEffortAssocClient) CreateBulk(builders ...*WorkEffortAssocCreate) *WorkEffortAssocCreateBulk {
	return &WorkEffortAssocCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for WorkEffortAssoc.
func (c *WorkEffortAssocClient) Update() *WorkEffortAssocUpdate {
	mutation := newWorkEffortAssocMutation(c.config, OpUpdate)
	return &WorkEffortAssocUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WorkEffortAssocClient) UpdateOne(wea *WorkEffortAssoc) *WorkEffortAssocUpdateOne {
	mutation := newWorkEffortAssocMutation(c.config, OpUpdateOne, withWorkEffortAssoc(wea))
	return &WorkEffortAssocUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WorkEffortAssocClient) UpdateOneID(id int) *WorkEffortAssocUpdateOne {
	mutation := newWorkEffortAssocMutation(c.config, OpUpdateOne, withWorkEffortAssocID(id))
	return &WorkEffortAssocUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for WorkEffortAssoc.
func (c *WorkEffortAssocClient) Delete() *WorkEffortAssocDelete {
	mutation := newWorkEffortAssocMutation(c.config, OpDelete)
	return &WorkEffortAssocDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *WorkEffortAssocClient) DeleteOne(wea *WorkEffortAssoc) *WorkEffortAssocDeleteOne {
	return c.DeleteOneID(wea.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *WorkEffortAssocClient) DeleteOneID(id int) *WorkEffortAssocDeleteOne {
	builder := c.Delete().Where(workeffortassoc.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WorkEffortAssocDeleteOne{builder}
}

// Query returns a query builder for WorkEffortAssoc.
func (c *WorkEffortAssocClient) Query() *WorkEffortAssocQuery {
	return &WorkEffortAssocQuery{
		config: c.config,
	}
}

// Get returns a WorkEffortAssoc entity by its id.
func (c *WorkEffortAssocClient) Get(ctx context.Context, id int) (*WorkEffortAssoc, error) {
	return c.Query().Where(workeffortassoc.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WorkEffortAssocClient) GetX(ctx context.Context, id int) *WorkEffortAssoc {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryFromWorkEffort queries the from_work_effort edge of a WorkEffortAssoc.
func (c *WorkEffortAssocClient) QueryFromWorkEffort(wea *WorkEffortAssoc) *WorkEffortQuery {
	query := &WorkEffortQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := wea.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workeffortassoc.Table, workeffortassoc.FieldID, id),
			sqlgraph.To(workeffort.Table, workeffort.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workeffortassoc.FromWorkEffortTable, workeffortassoc.FromWorkEffortColumn),
		)
		fromV = sqlgraph.Neighbors(wea.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryToWorkEffort queries the to_work_effort edge of a WorkEffortAssoc.
func (c *WorkEffortAssocClient) QueryToWorkEffort(wea *WorkEffortAssoc) *WorkEffortQuery {
	query := &WorkEffortQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := wea.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workeffortassoc.Table, workeffortassoc.FieldID, id),
			sqlgraph.To(workeffort.Table, workeffort.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workeffortassoc.ToWorkEffortTable, workeffortassoc.ToWorkEffortColumn),
		)
		fromV = sqlgraph.Neighbors(wea.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *WorkEffortAssocClient) Hooks() []Hook {
	return c.hooks.WorkEffortAssoc
}

// WorkEffortFixedAssetAssignClient is a client for the WorkEffortFixedAssetAssign schema.
type WorkEffortFixedAssetAssignClient struct {
	config
}

// NewWorkEffortFixedAssetAssignClient returns a client for the WorkEffortFixedAssetAssign from the given config.
func NewWorkEffortFixedAssetAssignClient(c config) *WorkEffortFixedAssetAssignClient {
	return &WorkEffortFixedAssetAssignClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `workeffortfixedassetassign.Hooks(f(g(h())))`.
func (c *WorkEffortFixedAssetAssignClient) Use(hooks ...Hook) {
	c.hooks.WorkEffortFixedAssetAssign = append(c.hooks.WorkEffortFixedAssetAssign, hooks...)
}

// Create returns a create builder for WorkEffortFixedAssetAssign.
func (c *WorkEffortFixedAssetAssignClient) Create() *WorkEffortFixedAssetAssignCreate {
	mutation := newWorkEffortFixedAssetAssignMutation(c.config, OpCreate)
	return &WorkEffortFixedAssetAssignCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of WorkEffortFixedAssetAssign entities.
func (c *WorkEffortFixedAssetAssignClient) CreateBulk(builders ...*WorkEffortFixedAssetAssignCreate) *WorkEffortFixedAssetAssignCreateBulk {
	return &WorkEffortFixedAssetAssignCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for WorkEffortFixedAssetAssign.
func (c *WorkEffortFixedAssetAssignClient) Update() *WorkEffortFixedAssetAssignUpdate {
	mutation := newWorkEffortFixedAssetAssignMutation(c.config, OpUpdate)
	return &WorkEffortFixedAssetAssignUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WorkEffortFixedAssetAssignClient) UpdateOne(wefaa *WorkEffortFixedAssetAssign) *WorkEffortFixedAssetAssignUpdateOne {
	mutation := newWorkEffortFixedAssetAssignMutation(c.config, OpUpdateOne, withWorkEffortFixedAssetAssign(wefaa))
	return &WorkEffortFixedAssetAssignUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WorkEffortFixedAssetAssignClient) UpdateOneID(id int) *WorkEffortFixedAssetAssignUpdateOne {
	mutation := newWorkEffortFixedAssetAssignMutation(c.config, OpUpdateOne, withWorkEffortFixedAssetAssignID(id))
	return &WorkEffortFixedAssetAssignUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for WorkEffortFixedAssetAssign.
func (c *WorkEffortFixedAssetAssignClient) Delete() *WorkEffortFixedAssetAssignDelete {
	mutation := newWorkEffortFixedAssetAssignMutation(c.config, OpDelete)
	return &WorkEffortFixedAssetAssignDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *WorkEffortFixedAssetAssignClient) DeleteOne(wefaa *WorkEffortFixedAssetAssign) *WorkEffortFixedAssetAssignDeleteOne {
	return c.DeleteOneID(wefaa.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *WorkEffortFixedAssetAssignClient) DeleteOneID(id int) *WorkEffortFixedAssetAssignDeleteOne {
	builder := c.Delete().Where(workeffortfixedassetassign.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WorkEffortFixedAssetAssignDeleteOne{builder}
}

// Query returns a query builder for WorkEffortFixedAssetAssign.
func (c *WorkEffortFixedAssetAssignClient) Query() *WorkEffortFixedAssetAssignQuery {
	return &WorkEffortFixedAssetAssignQuery{
		config: c.config,
	}
}

// Get returns a WorkEffortFixedAssetAssign entity by its id.
func (c *WorkEffortFixedAssetAssignClient) Get(ctx context.Context, id int) (*WorkEffortFixedAssetAssign, error) {
	return c.Query().Where(workeffortfixedassetassign.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WorkEffortFixedAssetAssignClient) GetX(ctx context.Context, id int) *WorkEffortFixedAssetAssign {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryWorkEffort queries the work_effort edge of a WorkEffortFixedAssetAssign.
func (c *WorkEffortFixedAssetAssignClient) QueryWorkEffort(wefaa *WorkEffortFixedAssetAssign) *WorkEffortQuery {
	query := &WorkEffortQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := wefaa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workeffortfixedassetassign.Table, workeffortfixedassetassign.FieldID, id),
			sqlgraph.To(workeffort.Table, workeffort.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workeffortfixedassetassign.WorkEffortTable, workeffortfixedassetassign.WorkEffortColumn),
		)
		fromV = sqlgraph.Neighbors(wefaa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFixedAsset queries the fixed_asset edge of a WorkEffortFixedAssetAssign.
func (c *WorkEffortFixedAssetAssignClient) QueryFixedAsset(wefaa *WorkEffortFixedAssetAssign) *FixedAssetQuery {
	query := &FixedAssetQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := wefaa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workeffortfixedassetassign.Table, workeffortfixedassetassign.FieldID, id),
			sqlgraph.To(fixedasset.Table, fixedasset.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workeffortfixedassetassign.FixedAssetTable, workeffortfixedassetassign.FixedAssetColumn),
		)
		fromV = sqlgraph.Neighbors(wefaa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *WorkEffortFixedAssetAssignClient) Hooks() []Hook {
	return c.hooks.WorkEffortFixedAssetAssign
}

// WorkEffortPartyAssignmentClient is a client for the WorkEffortPartyAssignment schema.
type WorkEffortPartyAssignmentClient struct {
	config
}

// NewWorkEffortPartyAssignmentClient returns a client for the WorkEffortPartyAssignment from the given config.
func NewWorkEffortPartyAssignmentClient(c config) *WorkEffortPartyAssignmentClient {
	return &WorkEffortPartyAssignmentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `workeffortpartyassignment.Hooks(f(g(h())))`.
func (c *WorkEffortPartyAssignmentClient) Use(hooks ...Hook) {
	c.hooks.WorkEffortPartyAssignment = append(c.hooks.WorkEffortPartyAssignment, hooks...)
}

// Create returns a create builder for WorkEffortPartyAssignment.
func (c *WorkEffortPartyAssignmentClient) Create() *WorkEffortPartyAssignmentCreate {
	mutation := newWorkEffortPartyAssignmentMutation(c.config, OpCreate)
	return &WorkEffortPartyAssignmentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of WorkEffortPartyAssignment entities.
func (c *WorkEffortPartyAssignmentClient) CreateBulk(builders ...*WorkEffortPartyAssignmentCreate) *WorkEffortPartyAssignmentCreateBulk {
	return &WorkEffortPartyAssignmentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for WorkEffortPartyAssignment.
func (c *WorkEffortPartyAssignmentClient) Update() *WorkEffortPartyAssignmentUpdate {
	mutation := newWorkEffortPartyAssignmentMutation(c.config, OpUpdate)
	return &WorkEffortPartyAssignmentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WorkEffortPartyAssignmentClient) UpdateOne(wepa *WorkEffortPartyAssignment) *WorkEffortPartyAssignmentUpdateOne {
	mutation := newWorkEffortPartyAssignmentMutation(c.config, OpUpdateOne, withWorkEffortPartyAssignment(wepa))
	return &WorkEffortPartyAssignmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WorkEffortPartyAssignmentClient) UpdateOneID(id int) *WorkEffortPartyAssignmentUpdateOne {
	mutation := newWorkEffortPartyAssignmentMutation(c.config, OpUpdateOne, withWorkEffortPartyAssignmentID(id))
	return &WorkEffortPartyAssignmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for WorkEffortPartyAssignment.
func (c *WorkEffortPartyAssignmentClient) Delete() *WorkEffortPartyAssignmentDelete {
	mutation := newWorkEffortPartyAssignmentMutation(c.config, OpDelete)
	return &WorkEffortPartyAssignmentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *WorkEffortPartyAssignmentClient) DeleteOne(wepa *WorkEffortPartyAssignment) *WorkEffortPartyAssignmentDeleteOne {
	return c.DeleteOneID(wepa.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *WorkEffortPartyAssignmentClient) DeleteOneID(id int) *WorkEffortPartyAssignmentDeleteOne {
	builder := c.Delete().Where(workeffortpartyassignment.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WorkEffortPartyAssignmentDeleteOne{builder}
}

// Query returns a query builder for WorkEffortPartyAssignment.
func (c *WorkEffortPartyAssignmentClient) Query() *WorkEffortPartyAssignmentQuery {
	return &WorkEffortPartyAssignmentQuery{
		config: c.config,
	}
}

// Get returns a WorkEffortPartyAssignment entity by its id.
func (c *WorkEffortPartyAssignmentClient) Get(ctx context.Context, id int) (*WorkEffortPartyAssignment, error) {
	return c.Query().Where(workeffortpartyassignment.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WorkEffortPartyAssignmentClient) GetX(ctx context.Context, id int) *WorkEffortPartyAssignment {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryWorkEffort queries the work_effort edge of a WorkEffortPartyAssignment.
func (c *WorkEffortPartyAssignmentClient) QueryWorkEffort(wepa *WorkEffortPartyAssignment) *WorkEffortQuery {
	query := &WorkEffortQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := wepa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workeffortpartyassignment.Table, workeffortpartyassignment.FieldID, id),
			sqlgraph.To(workeffort.Table, workeffort.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workeffortpartyassignment.WorkEffortTable, workeffortpartyassignment.WorkEffortColumn),
		)
		fromV = sqlgraph.Neighbors(wepa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryParty queries the party edge of a WorkEffortPartyAssignment.
func (c *WorkEffortPartyAssignmentClient) QueryParty(wepa *WorkEffortPartyAssignment) *PartyQuery {
	query := &PartyQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := wepa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workeffortpartyassignment.Table, workeffortpartyassignment.FieldID, id),
			sqlgraph.To(party.Table, party.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workeffortpartyassignment.PartyTable, workeffortpartyassignment.PartyColumn),
		)
		fromV = sqlgraph.Neighbors(wepa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPartyRole queries the party_role edge of a WorkEffortPartyAssignment.
func (c *WorkEffortPartyAssignmentClient) QueryPartyRole(wepa *WorkEffortPartyAssignment) *PartyRoleQuery {
	query := &PartyRoleQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := wepa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workeffortpartyassignment.Table, workeffortpartyassignment.FieldID, id),
			sqlgraph.To(partyrole.Table, partyrole.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workeffortpartyassignment.PartyRoleTable, workeffortpartyassignment.PartyRoleColumn),
		)
		fromV = sqlgraph.Neighbors(wepa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAssignedByUserLogin queries the assigned_by_user_login edge of a WorkEffortPartyAssignment.
func (c *WorkEffortPartyAssignmentClient) QueryAssignedByUserLogin(wepa *WorkEffortPartyAssignment) *UserLoginQuery {
	query := &UserLoginQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := wepa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workeffortpartyassignment.Table, workeffortpartyassignment.FieldID, id),
			sqlgraph.To(userlogin.Table, userlogin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workeffortpartyassignment.AssignedByUserLoginTable, workeffortpartyassignment.AssignedByUserLoginColumn),
		)
		fromV = sqlgraph.Neighbors(wepa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *WorkEffortPartyAssignmentClient) Hooks() []Hook {
	return c.hooks.WorkEffortPartyAssignment
}
