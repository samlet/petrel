// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/communicationeventtype"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/contactmechtype"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/predicate"
)

// CommunicationEventTypeUpdate is the builder for updating CommunicationEventType entities.
type CommunicationEventTypeUpdate struct {
	config
	hooks    []Hook
	mutation *CommunicationEventTypeMutation
}

// Where adds a new predicate for the CommunicationEventTypeUpdate builder.
func (cetu *CommunicationEventTypeUpdate) Where(ps ...predicate.CommunicationEventType) *CommunicationEventTypeUpdate {
	cetu.mutation.predicates = append(cetu.mutation.predicates, ps...)
	return cetu
}

// SetStringRef sets the "string_ref" field.
func (cetu *CommunicationEventTypeUpdate) SetStringRef(s string) *CommunicationEventTypeUpdate {
	cetu.mutation.SetStringRef(s)
	return cetu
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (cetu *CommunicationEventTypeUpdate) SetNillableStringRef(s *string) *CommunicationEventTypeUpdate {
	if s != nil {
		cetu.SetStringRef(*s)
	}
	return cetu
}

// ClearStringRef clears the value of the "string_ref" field.
func (cetu *CommunicationEventTypeUpdate) ClearStringRef() *CommunicationEventTypeUpdate {
	cetu.mutation.ClearStringRef()
	return cetu
}

// SetHasTable sets the "has_table" field.
func (cetu *CommunicationEventTypeUpdate) SetHasTable(ct communicationeventtype.HasTable) *CommunicationEventTypeUpdate {
	cetu.mutation.SetHasTable(ct)
	return cetu
}

// SetNillableHasTable sets the "has_table" field if the given value is not nil.
func (cetu *CommunicationEventTypeUpdate) SetNillableHasTable(ct *communicationeventtype.HasTable) *CommunicationEventTypeUpdate {
	if ct != nil {
		cetu.SetHasTable(*ct)
	}
	return cetu
}

// ClearHasTable clears the value of the "has_table" field.
func (cetu *CommunicationEventTypeUpdate) ClearHasTable() *CommunicationEventTypeUpdate {
	cetu.mutation.ClearHasTable()
	return cetu
}

// SetDescription sets the "description" field.
func (cetu *CommunicationEventTypeUpdate) SetDescription(s string) *CommunicationEventTypeUpdate {
	cetu.mutation.SetDescription(s)
	return cetu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cetu *CommunicationEventTypeUpdate) SetNillableDescription(s *string) *CommunicationEventTypeUpdate {
	if s != nil {
		cetu.SetDescription(*s)
	}
	return cetu
}

// ClearDescription clears the value of the "description" field.
func (cetu *CommunicationEventTypeUpdate) ClearDescription() *CommunicationEventTypeUpdate {
	cetu.mutation.ClearDescription()
	return cetu
}

// SetParentID sets the "parent" edge to the CommunicationEventType entity by ID.
func (cetu *CommunicationEventTypeUpdate) SetParentID(id int) *CommunicationEventTypeUpdate {
	cetu.mutation.SetParentID(id)
	return cetu
}

// SetNillableParentID sets the "parent" edge to the CommunicationEventType entity by ID if the given value is not nil.
func (cetu *CommunicationEventTypeUpdate) SetNillableParentID(id *int) *CommunicationEventTypeUpdate {
	if id != nil {
		cetu = cetu.SetParentID(*id)
	}
	return cetu
}

// SetParent sets the "parent" edge to the CommunicationEventType entity.
func (cetu *CommunicationEventTypeUpdate) SetParent(c *CommunicationEventType) *CommunicationEventTypeUpdate {
	return cetu.SetParentID(c.ID)
}

// AddChildIDs adds the "children" edge to the CommunicationEventType entity by IDs.
func (cetu *CommunicationEventTypeUpdate) AddChildIDs(ids ...int) *CommunicationEventTypeUpdate {
	cetu.mutation.AddChildIDs(ids...)
	return cetu
}

// AddChildren adds the "children" edges to the CommunicationEventType entity.
func (cetu *CommunicationEventTypeUpdate) AddChildren(c ...*CommunicationEventType) *CommunicationEventTypeUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cetu.AddChildIDs(ids...)
}

// SetContacMechTypeContactMechTypeID sets the "contac_mech_type_contact_mech_type" edge to the ContactMechType entity by ID.
func (cetu *CommunicationEventTypeUpdate) SetContacMechTypeContactMechTypeID(id int) *CommunicationEventTypeUpdate {
	cetu.mutation.SetContacMechTypeContactMechTypeID(id)
	return cetu
}

// SetNillableContacMechTypeContactMechTypeID sets the "contac_mech_type_contact_mech_type" edge to the ContactMechType entity by ID if the given value is not nil.
func (cetu *CommunicationEventTypeUpdate) SetNillableContacMechTypeContactMechTypeID(id *int) *CommunicationEventTypeUpdate {
	if id != nil {
		cetu = cetu.SetContacMechTypeContactMechTypeID(*id)
	}
	return cetu
}

// SetContacMechTypeContactMechType sets the "contac_mech_type_contact_mech_type" edge to the ContactMechType entity.
func (cetu *CommunicationEventTypeUpdate) SetContacMechTypeContactMechType(c *ContactMechType) *CommunicationEventTypeUpdate {
	return cetu.SetContacMechTypeContactMechTypeID(c.ID)
}

// AddChildCommunicationEventTypeIDs adds the "child_communication_event_types" edge to the CommunicationEventType entity by IDs.
func (cetu *CommunicationEventTypeUpdate) AddChildCommunicationEventTypeIDs(ids ...int) *CommunicationEventTypeUpdate {
	cetu.mutation.AddChildCommunicationEventTypeIDs(ids...)
	return cetu
}

// AddChildCommunicationEventTypes adds the "child_communication_event_types" edges to the CommunicationEventType entity.
func (cetu *CommunicationEventTypeUpdate) AddChildCommunicationEventTypes(c ...*CommunicationEventType) *CommunicationEventTypeUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cetu.AddChildCommunicationEventTypeIDs(ids...)
}

// Mutation returns the CommunicationEventTypeMutation object of the builder.
func (cetu *CommunicationEventTypeUpdate) Mutation() *CommunicationEventTypeMutation {
	return cetu.mutation
}

// ClearParent clears the "parent" edge to the CommunicationEventType entity.
func (cetu *CommunicationEventTypeUpdate) ClearParent() *CommunicationEventTypeUpdate {
	cetu.mutation.ClearParent()
	return cetu
}

// ClearChildren clears all "children" edges to the CommunicationEventType entity.
func (cetu *CommunicationEventTypeUpdate) ClearChildren() *CommunicationEventTypeUpdate {
	cetu.mutation.ClearChildren()
	return cetu
}

// RemoveChildIDs removes the "children" edge to CommunicationEventType entities by IDs.
func (cetu *CommunicationEventTypeUpdate) RemoveChildIDs(ids ...int) *CommunicationEventTypeUpdate {
	cetu.mutation.RemoveChildIDs(ids...)
	return cetu
}

// RemoveChildren removes "children" edges to CommunicationEventType entities.
func (cetu *CommunicationEventTypeUpdate) RemoveChildren(c ...*CommunicationEventType) *CommunicationEventTypeUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cetu.RemoveChildIDs(ids...)
}

// ClearContacMechTypeContactMechType clears the "contac_mech_type_contact_mech_type" edge to the ContactMechType entity.
func (cetu *CommunicationEventTypeUpdate) ClearContacMechTypeContactMechType() *CommunicationEventTypeUpdate {
	cetu.mutation.ClearContacMechTypeContactMechType()
	return cetu
}

// ClearChildCommunicationEventTypes clears all "child_communication_event_types" edges to the CommunicationEventType entity.
func (cetu *CommunicationEventTypeUpdate) ClearChildCommunicationEventTypes() *CommunicationEventTypeUpdate {
	cetu.mutation.ClearChildCommunicationEventTypes()
	return cetu
}

// RemoveChildCommunicationEventTypeIDs removes the "child_communication_event_types" edge to CommunicationEventType entities by IDs.
func (cetu *CommunicationEventTypeUpdate) RemoveChildCommunicationEventTypeIDs(ids ...int) *CommunicationEventTypeUpdate {
	cetu.mutation.RemoveChildCommunicationEventTypeIDs(ids...)
	return cetu
}

// RemoveChildCommunicationEventTypes removes "child_communication_event_types" edges to CommunicationEventType entities.
func (cetu *CommunicationEventTypeUpdate) RemoveChildCommunicationEventTypes(c ...*CommunicationEventType) *CommunicationEventTypeUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cetu.RemoveChildCommunicationEventTypeIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cetu *CommunicationEventTypeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	cetu.defaults()
	if len(cetu.hooks) == 0 {
		if err = cetu.check(); err != nil {
			return 0, err
		}
		affected, err = cetu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CommunicationEventTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cetu.check(); err != nil {
				return 0, err
			}
			cetu.mutation = mutation
			affected, err = cetu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cetu.hooks) - 1; i >= 0; i-- {
			mut = cetu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cetu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cetu *CommunicationEventTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := cetu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cetu *CommunicationEventTypeUpdate) Exec(ctx context.Context) error {
	_, err := cetu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cetu *CommunicationEventTypeUpdate) ExecX(ctx context.Context) {
	if err := cetu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cetu *CommunicationEventTypeUpdate) defaults() {
	if _, ok := cetu.mutation.UpdateTime(); !ok {
		v := communicationeventtype.UpdateDefaultUpdateTime()
		cetu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cetu *CommunicationEventTypeUpdate) check() error {
	if v, ok := cetu.mutation.HasTable(); ok {
		if err := communicationeventtype.HasTableValidator(v); err != nil {
			return &ValidationError{Name: "has_table", err: fmt.Errorf("ent: validator failed for field \"has_table\": %w", err)}
		}
	}
	return nil
}

func (cetu *CommunicationEventTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   communicationeventtype.Table,
			Columns: communicationeventtype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: communicationeventtype.FieldID,
			},
		},
	}
	if ps := cetu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cetu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: communicationeventtype.FieldUpdateTime,
		})
	}
	if value, ok := cetu.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: communicationeventtype.FieldStringRef,
		})
	}
	if cetu.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: communicationeventtype.FieldStringRef,
		})
	}
	if value, ok := cetu.mutation.HasTable(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: communicationeventtype.FieldHasTable,
		})
	}
	if cetu.mutation.HasTableCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: communicationeventtype.FieldHasTable,
		})
	}
	if value, ok := cetu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: communicationeventtype.FieldDescription,
		})
	}
	if cetu.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: communicationeventtype.FieldDescription,
		})
	}
	if cetu.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   communicationeventtype.ParentTable,
			Columns: []string{communicationeventtype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: communicationeventtype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cetu.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   communicationeventtype.ParentTable,
			Columns: []string{communicationeventtype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: communicationeventtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cetu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   communicationeventtype.ChildrenTable,
			Columns: []string{communicationeventtype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: communicationeventtype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cetu.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !cetu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   communicationeventtype.ChildrenTable,
			Columns: []string{communicationeventtype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: communicationeventtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cetu.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   communicationeventtype.ChildrenTable,
			Columns: []string{communicationeventtype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: communicationeventtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cetu.mutation.ContacMechTypeContactMechTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   communicationeventtype.ContacMechTypeContactMechTypeTable,
			Columns: []string{communicationeventtype.ContacMechTypeContactMechTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: contactmechtype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cetu.mutation.ContacMechTypeContactMechTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   communicationeventtype.ContacMechTypeContactMechTypeTable,
			Columns: []string{communicationeventtype.ContacMechTypeContactMechTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: contactmechtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cetu.mutation.ChildCommunicationEventTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   communicationeventtype.ChildCommunicationEventTypesTable,
			Columns: communicationeventtype.ChildCommunicationEventTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: communicationeventtype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cetu.mutation.RemovedChildCommunicationEventTypesIDs(); len(nodes) > 0 && !cetu.mutation.ChildCommunicationEventTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   communicationeventtype.ChildCommunicationEventTypesTable,
			Columns: communicationeventtype.ChildCommunicationEventTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: communicationeventtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cetu.mutation.ChildCommunicationEventTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   communicationeventtype.ChildCommunicationEventTypesTable,
			Columns: communicationeventtype.ChildCommunicationEventTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: communicationeventtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cetu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{communicationeventtype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// CommunicationEventTypeUpdateOne is the builder for updating a single CommunicationEventType entity.
type CommunicationEventTypeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CommunicationEventTypeMutation
}

// SetStringRef sets the "string_ref" field.
func (cetuo *CommunicationEventTypeUpdateOne) SetStringRef(s string) *CommunicationEventTypeUpdateOne {
	cetuo.mutation.SetStringRef(s)
	return cetuo
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (cetuo *CommunicationEventTypeUpdateOne) SetNillableStringRef(s *string) *CommunicationEventTypeUpdateOne {
	if s != nil {
		cetuo.SetStringRef(*s)
	}
	return cetuo
}

// ClearStringRef clears the value of the "string_ref" field.
func (cetuo *CommunicationEventTypeUpdateOne) ClearStringRef() *CommunicationEventTypeUpdateOne {
	cetuo.mutation.ClearStringRef()
	return cetuo
}

// SetHasTable sets the "has_table" field.
func (cetuo *CommunicationEventTypeUpdateOne) SetHasTable(ct communicationeventtype.HasTable) *CommunicationEventTypeUpdateOne {
	cetuo.mutation.SetHasTable(ct)
	return cetuo
}

// SetNillableHasTable sets the "has_table" field if the given value is not nil.
func (cetuo *CommunicationEventTypeUpdateOne) SetNillableHasTable(ct *communicationeventtype.HasTable) *CommunicationEventTypeUpdateOne {
	if ct != nil {
		cetuo.SetHasTable(*ct)
	}
	return cetuo
}

// ClearHasTable clears the value of the "has_table" field.
func (cetuo *CommunicationEventTypeUpdateOne) ClearHasTable() *CommunicationEventTypeUpdateOne {
	cetuo.mutation.ClearHasTable()
	return cetuo
}

// SetDescription sets the "description" field.
func (cetuo *CommunicationEventTypeUpdateOne) SetDescription(s string) *CommunicationEventTypeUpdateOne {
	cetuo.mutation.SetDescription(s)
	return cetuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cetuo *CommunicationEventTypeUpdateOne) SetNillableDescription(s *string) *CommunicationEventTypeUpdateOne {
	if s != nil {
		cetuo.SetDescription(*s)
	}
	return cetuo
}

// ClearDescription clears the value of the "description" field.
func (cetuo *CommunicationEventTypeUpdateOne) ClearDescription() *CommunicationEventTypeUpdateOne {
	cetuo.mutation.ClearDescription()
	return cetuo
}

// SetParentID sets the "parent" edge to the CommunicationEventType entity by ID.
func (cetuo *CommunicationEventTypeUpdateOne) SetParentID(id int) *CommunicationEventTypeUpdateOne {
	cetuo.mutation.SetParentID(id)
	return cetuo
}

// SetNillableParentID sets the "parent" edge to the CommunicationEventType entity by ID if the given value is not nil.
func (cetuo *CommunicationEventTypeUpdateOne) SetNillableParentID(id *int) *CommunicationEventTypeUpdateOne {
	if id != nil {
		cetuo = cetuo.SetParentID(*id)
	}
	return cetuo
}

// SetParent sets the "parent" edge to the CommunicationEventType entity.
func (cetuo *CommunicationEventTypeUpdateOne) SetParent(c *CommunicationEventType) *CommunicationEventTypeUpdateOne {
	return cetuo.SetParentID(c.ID)
}

// AddChildIDs adds the "children" edge to the CommunicationEventType entity by IDs.
func (cetuo *CommunicationEventTypeUpdateOne) AddChildIDs(ids ...int) *CommunicationEventTypeUpdateOne {
	cetuo.mutation.AddChildIDs(ids...)
	return cetuo
}

// AddChildren adds the "children" edges to the CommunicationEventType entity.
func (cetuo *CommunicationEventTypeUpdateOne) AddChildren(c ...*CommunicationEventType) *CommunicationEventTypeUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cetuo.AddChildIDs(ids...)
}

// SetContacMechTypeContactMechTypeID sets the "contac_mech_type_contact_mech_type" edge to the ContactMechType entity by ID.
func (cetuo *CommunicationEventTypeUpdateOne) SetContacMechTypeContactMechTypeID(id int) *CommunicationEventTypeUpdateOne {
	cetuo.mutation.SetContacMechTypeContactMechTypeID(id)
	return cetuo
}

// SetNillableContacMechTypeContactMechTypeID sets the "contac_mech_type_contact_mech_type" edge to the ContactMechType entity by ID if the given value is not nil.
func (cetuo *CommunicationEventTypeUpdateOne) SetNillableContacMechTypeContactMechTypeID(id *int) *CommunicationEventTypeUpdateOne {
	if id != nil {
		cetuo = cetuo.SetContacMechTypeContactMechTypeID(*id)
	}
	return cetuo
}

// SetContacMechTypeContactMechType sets the "contac_mech_type_contact_mech_type" edge to the ContactMechType entity.
func (cetuo *CommunicationEventTypeUpdateOne) SetContacMechTypeContactMechType(c *ContactMechType) *CommunicationEventTypeUpdateOne {
	return cetuo.SetContacMechTypeContactMechTypeID(c.ID)
}

// AddChildCommunicationEventTypeIDs adds the "child_communication_event_types" edge to the CommunicationEventType entity by IDs.
func (cetuo *CommunicationEventTypeUpdateOne) AddChildCommunicationEventTypeIDs(ids ...int) *CommunicationEventTypeUpdateOne {
	cetuo.mutation.AddChildCommunicationEventTypeIDs(ids...)
	return cetuo
}

// AddChildCommunicationEventTypes adds the "child_communication_event_types" edges to the CommunicationEventType entity.
func (cetuo *CommunicationEventTypeUpdateOne) AddChildCommunicationEventTypes(c ...*CommunicationEventType) *CommunicationEventTypeUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cetuo.AddChildCommunicationEventTypeIDs(ids...)
}

// Mutation returns the CommunicationEventTypeMutation object of the builder.
func (cetuo *CommunicationEventTypeUpdateOne) Mutation() *CommunicationEventTypeMutation {
	return cetuo.mutation
}

// ClearParent clears the "parent" edge to the CommunicationEventType entity.
func (cetuo *CommunicationEventTypeUpdateOne) ClearParent() *CommunicationEventTypeUpdateOne {
	cetuo.mutation.ClearParent()
	return cetuo
}

// ClearChildren clears all "children" edges to the CommunicationEventType entity.
func (cetuo *CommunicationEventTypeUpdateOne) ClearChildren() *CommunicationEventTypeUpdateOne {
	cetuo.mutation.ClearChildren()
	return cetuo
}

// RemoveChildIDs removes the "children" edge to CommunicationEventType entities by IDs.
func (cetuo *CommunicationEventTypeUpdateOne) RemoveChildIDs(ids ...int) *CommunicationEventTypeUpdateOne {
	cetuo.mutation.RemoveChildIDs(ids...)
	return cetuo
}

// RemoveChildren removes "children" edges to CommunicationEventType entities.
func (cetuo *CommunicationEventTypeUpdateOne) RemoveChildren(c ...*CommunicationEventType) *CommunicationEventTypeUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cetuo.RemoveChildIDs(ids...)
}

// ClearContacMechTypeContactMechType clears the "contac_mech_type_contact_mech_type" edge to the ContactMechType entity.
func (cetuo *CommunicationEventTypeUpdateOne) ClearContacMechTypeContactMechType() *CommunicationEventTypeUpdateOne {
	cetuo.mutation.ClearContacMechTypeContactMechType()
	return cetuo
}

// ClearChildCommunicationEventTypes clears all "child_communication_event_types" edges to the CommunicationEventType entity.
func (cetuo *CommunicationEventTypeUpdateOne) ClearChildCommunicationEventTypes() *CommunicationEventTypeUpdateOne {
	cetuo.mutation.ClearChildCommunicationEventTypes()
	return cetuo
}

// RemoveChildCommunicationEventTypeIDs removes the "child_communication_event_types" edge to CommunicationEventType entities by IDs.
func (cetuo *CommunicationEventTypeUpdateOne) RemoveChildCommunicationEventTypeIDs(ids ...int) *CommunicationEventTypeUpdateOne {
	cetuo.mutation.RemoveChildCommunicationEventTypeIDs(ids...)
	return cetuo
}

// RemoveChildCommunicationEventTypes removes "child_communication_event_types" edges to CommunicationEventType entities.
func (cetuo *CommunicationEventTypeUpdateOne) RemoveChildCommunicationEventTypes(c ...*CommunicationEventType) *CommunicationEventTypeUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cetuo.RemoveChildCommunicationEventTypeIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cetuo *CommunicationEventTypeUpdateOne) Select(field string, fields ...string) *CommunicationEventTypeUpdateOne {
	cetuo.fields = append([]string{field}, fields...)
	return cetuo
}

// Save executes the query and returns the updated CommunicationEventType entity.
func (cetuo *CommunicationEventTypeUpdateOne) Save(ctx context.Context) (*CommunicationEventType, error) {
	var (
		err  error
		node *CommunicationEventType
	)
	cetuo.defaults()
	if len(cetuo.hooks) == 0 {
		if err = cetuo.check(); err != nil {
			return nil, err
		}
		node, err = cetuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CommunicationEventTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cetuo.check(); err != nil {
				return nil, err
			}
			cetuo.mutation = mutation
			node, err = cetuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cetuo.hooks) - 1; i >= 0; i-- {
			mut = cetuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cetuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cetuo *CommunicationEventTypeUpdateOne) SaveX(ctx context.Context) *CommunicationEventType {
	node, err := cetuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cetuo *CommunicationEventTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := cetuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cetuo *CommunicationEventTypeUpdateOne) ExecX(ctx context.Context) {
	if err := cetuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cetuo *CommunicationEventTypeUpdateOne) defaults() {
	if _, ok := cetuo.mutation.UpdateTime(); !ok {
		v := communicationeventtype.UpdateDefaultUpdateTime()
		cetuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cetuo *CommunicationEventTypeUpdateOne) check() error {
	if v, ok := cetuo.mutation.HasTable(); ok {
		if err := communicationeventtype.HasTableValidator(v); err != nil {
			return &ValidationError{Name: "has_table", err: fmt.Errorf("ent: validator failed for field \"has_table\": %w", err)}
		}
	}
	return nil
}

func (cetuo *CommunicationEventTypeUpdateOne) sqlSave(ctx context.Context) (_node *CommunicationEventType, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   communicationeventtype.Table,
			Columns: communicationeventtype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: communicationeventtype.FieldID,
			},
		},
	}
	id, ok := cetuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing CommunicationEventType.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := cetuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, communicationeventtype.FieldID)
		for _, f := range fields {
			if !communicationeventtype.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != communicationeventtype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cetuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cetuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: communicationeventtype.FieldUpdateTime,
		})
	}
	if value, ok := cetuo.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: communicationeventtype.FieldStringRef,
		})
	}
	if cetuo.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: communicationeventtype.FieldStringRef,
		})
	}
	if value, ok := cetuo.mutation.HasTable(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: communicationeventtype.FieldHasTable,
		})
	}
	if cetuo.mutation.HasTableCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: communicationeventtype.FieldHasTable,
		})
	}
	if value, ok := cetuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: communicationeventtype.FieldDescription,
		})
	}
	if cetuo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: communicationeventtype.FieldDescription,
		})
	}
	if cetuo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   communicationeventtype.ParentTable,
			Columns: []string{communicationeventtype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: communicationeventtype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cetuo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   communicationeventtype.ParentTable,
			Columns: []string{communicationeventtype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: communicationeventtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cetuo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   communicationeventtype.ChildrenTable,
			Columns: []string{communicationeventtype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: communicationeventtype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cetuo.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !cetuo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   communicationeventtype.ChildrenTable,
			Columns: []string{communicationeventtype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: communicationeventtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cetuo.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   communicationeventtype.ChildrenTable,
			Columns: []string{communicationeventtype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: communicationeventtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cetuo.mutation.ContacMechTypeContactMechTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   communicationeventtype.ContacMechTypeContactMechTypeTable,
			Columns: []string{communicationeventtype.ContacMechTypeContactMechTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: contactmechtype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cetuo.mutation.ContacMechTypeContactMechTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   communicationeventtype.ContacMechTypeContactMechTypeTable,
			Columns: []string{communicationeventtype.ContacMechTypeContactMechTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: contactmechtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cetuo.mutation.ChildCommunicationEventTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   communicationeventtype.ChildCommunicationEventTypesTable,
			Columns: communicationeventtype.ChildCommunicationEventTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: communicationeventtype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cetuo.mutation.RemovedChildCommunicationEventTypesIDs(); len(nodes) > 0 && !cetuo.mutation.ChildCommunicationEventTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   communicationeventtype.ChildCommunicationEventTypesTable,
			Columns: communicationeventtype.ChildCommunicationEventTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: communicationeventtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cetuo.mutation.ChildCommunicationEventTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   communicationeventtype.ChildCommunicationEventTypesTable,
			Columns: communicationeventtype.ChildCommunicationEventTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: communicationeventtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CommunicationEventType{config: cetuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cetuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{communicationeventtype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
