// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/contactmechpurposetype"
)

// ContactMechPurposeType is the model entity for the ContactMechPurposeType schema.
type ContactMechPurposeType struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// StringRef holds the value of the "string_ref" field.
	StringRef string `json:"string_ref,omitempty"`
	// ParentTypeID holds the value of the "parent_type_id" field.
	ParentTypeID int `json:"parent_type_id,omitempty"`
	// HasTable holds the value of the "has_table" field.
	HasTable contactmechpurposetype.HasTable `json:"has_table,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ContactMechPurposeTypeQuery when eager-loading is set.
	Edges ContactMechPurposeTypeEdges `json:"edges"`
}

// ContactMechPurposeTypeEdges holds the relations/edges for other nodes in the graph.
type ContactMechPurposeTypeEdges struct {
	// ContactMechTypePurposes holds the value of the contact_mech_type_purposes edge.
	ContactMechTypePurposes []*ContactMechTypePurpose `json:"contact_mech_type_purposes,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ContactMechTypePurposesOrErr returns the ContactMechTypePurposes value or an error if the edge
// was not loaded in eager-loading.
func (e ContactMechPurposeTypeEdges) ContactMechTypePurposesOrErr() ([]*ContactMechTypePurpose, error) {
	if e.loadedTypes[0] {
		return e.ContactMechTypePurposes, nil
	}
	return nil, &NotLoadedError{edge: "contact_mech_type_purposes"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ContactMechPurposeType) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case contactmechpurposetype.FieldID, contactmechpurposetype.FieldParentTypeID:
			values[i] = new(sql.NullInt64)
		case contactmechpurposetype.FieldStringRef, contactmechpurposetype.FieldHasTable, contactmechpurposetype.FieldDescription:
			values[i] = new(sql.NullString)
		case contactmechpurposetype.FieldCreateTime, contactmechpurposetype.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ContactMechPurposeType", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ContactMechPurposeType fields.
func (cmpt *ContactMechPurposeType) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case contactmechpurposetype.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cmpt.ID = int(value.Int64)
		case contactmechpurposetype.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				cmpt.CreateTime = value.Time
			}
		case contactmechpurposetype.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				cmpt.UpdateTime = value.Time
			}
		case contactmechpurposetype.FieldStringRef:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field string_ref", values[i])
			} else if value.Valid {
				cmpt.StringRef = value.String
			}
		case contactmechpurposetype.FieldParentTypeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field parent_type_id", values[i])
			} else if value.Valid {
				cmpt.ParentTypeID = int(value.Int64)
			}
		case contactmechpurposetype.FieldHasTable:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field has_table", values[i])
			} else if value.Valid {
				cmpt.HasTable = contactmechpurposetype.HasTable(value.String)
			}
		case contactmechpurposetype.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				cmpt.Description = value.String
			}
		}
	}
	return nil
}

// QueryContactMechTypePurposes queries the "contact_mech_type_purposes" edge of the ContactMechPurposeType entity.
func (cmpt *ContactMechPurposeType) QueryContactMechTypePurposes() *ContactMechTypePurposeQuery {
	return (&ContactMechPurposeTypeClient{config: cmpt.config}).QueryContactMechTypePurposes(cmpt)
}

// Update returns a builder for updating this ContactMechPurposeType.
// Note that you need to call ContactMechPurposeType.Unwrap() before calling this method if this ContactMechPurposeType
// was returned from a transaction, and the transaction was committed or rolled back.
func (cmpt *ContactMechPurposeType) Update() *ContactMechPurposeTypeUpdateOne {
	return (&ContactMechPurposeTypeClient{config: cmpt.config}).UpdateOne(cmpt)
}

// Unwrap unwraps the ContactMechPurposeType entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cmpt *ContactMechPurposeType) Unwrap() *ContactMechPurposeType {
	tx, ok := cmpt.config.driver.(*txDriver)
	if !ok {
		panic("ent: ContactMechPurposeType is not a transactional entity")
	}
	cmpt.config.driver = tx.drv
	return cmpt
}

// String implements the fmt.Stringer.
func (cmpt *ContactMechPurposeType) String() string {
	var builder strings.Builder
	builder.WriteString("ContactMechPurposeType(")
	builder.WriteString(fmt.Sprintf("id=%v", cmpt.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(cmpt.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(cmpt.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", string_ref=")
	builder.WriteString(cmpt.StringRef)
	builder.WriteString(", parent_type_id=")
	builder.WriteString(fmt.Sprintf("%v", cmpt.ParentTypeID))
	builder.WriteString(", has_table=")
	builder.WriteString(fmt.Sprintf("%v", cmpt.HasTable))
	builder.WriteString(", description=")
	builder.WriteString(cmpt.Description)
	builder.WriteByte(')')
	return builder.String()
}

// ContactMechPurposeTypes is a parsable slice of ContactMechPurposeType.
type ContactMechPurposeTypes []*ContactMechPurposeType

func (cmpt ContactMechPurposeTypes) config(cfg config) {
	for _i := range cmpt {
		cmpt[_i].config = cfg
	}
}
