// Code generated by entc, DO NOT EDIT.

package contactmechpurposetype

import (
	"fmt"
	"time"
)

const (
	// Label holds the string label denoting the contactmechpurposetype type in the database.
	Label = "contact_mech_purpose_type"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldStringRef holds the string denoting the string_ref field in the database.
	FieldStringRef = "string_ref"
	// FieldParentTypeID holds the string denoting the parent_type_id field in the database.
	FieldParentTypeID = "parent_type_id"
	// FieldHasTable holds the string denoting the has_table field in the database.
	FieldHasTable = "has_table"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// EdgeContactMechTypePurposes holds the string denoting the contact_mech_type_purposes edge name in mutations.
	EdgeContactMechTypePurposes = "contact_mech_type_purposes"
	// Table holds the table name of the contactmechpurposetype in the database.
	Table = "contact_mech_purpose_types"
	// ContactMechTypePurposesTable is the table the holds the contact_mech_type_purposes relation/edge.
	ContactMechTypePurposesTable = "contact_mech_type_purposes"
	// ContactMechTypePurposesInverseTable is the table name for the ContactMechTypePurpose entity.
	// It exists in this package in order to avoid circular dependency with the "contactmechtypepurpose" package.
	ContactMechTypePurposesInverseTable = "contact_mech_type_purposes"
	// ContactMechTypePurposesColumn is the table column denoting the contact_mech_type_purposes relation/edge.
	ContactMechTypePurposesColumn = "contact_mech_purpose_type_contact_mech_type_purposes"
)

// Columns holds all SQL columns for contactmechpurposetype fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldStringRef,
	FieldParentTypeID,
	FieldHasTable,
	FieldDescription,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
)

// HasTable defines the type for the "has_table" enum field.
type HasTable string

// HasTable values.
const (
	HasTableYes     HasTable = "Yes"
	HasTableNo      HasTable = "No"
	HasTableUnknown HasTable = "Unknown"
)

func (ht HasTable) String() string {
	return string(ht)
}

// HasTableValidator is a validator for the "has_table" field enum values. It is called by the builders before save.
func HasTableValidator(ht HasTable) error {
	switch ht {
	case HasTableYes, HasTableNo, HasTableUnknown:
		return nil
	default:
		return fmt.Errorf("contactmechpurposetype: invalid enum value for has_table field: %q", ht)
	}
}
