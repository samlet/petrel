// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/communicationeventtype"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/contactmechtype"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/contactmechtypepurpose"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/predicate"
)

// ContactMechTypeQuery is the builder for querying ContactMechType entities.
type ContactMechTypeQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.ContactMechType
	// eager-loading edges.
	withParent                                *ContactMechTypeQuery
	withChildren                              *ContactMechTypeQuery
	withContacMechTypeCommunicationEventTypes *CommunicationEventTypeQuery
	withChildContactMechTypes                 *ContactMechTypeQuery
	withContactMechTypePurposes               *ContactMechTypePurposeQuery
	withFKs                                   bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ContactMechTypeQuery builder.
func (cmtq *ContactMechTypeQuery) Where(ps ...predicate.ContactMechType) *ContactMechTypeQuery {
	cmtq.predicates = append(cmtq.predicates, ps...)
	return cmtq
}

// Limit adds a limit step to the query.
func (cmtq *ContactMechTypeQuery) Limit(limit int) *ContactMechTypeQuery {
	cmtq.limit = &limit
	return cmtq
}

// Offset adds an offset step to the query.
func (cmtq *ContactMechTypeQuery) Offset(offset int) *ContactMechTypeQuery {
	cmtq.offset = &offset
	return cmtq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (cmtq *ContactMechTypeQuery) Unique(unique bool) *ContactMechTypeQuery {
	cmtq.unique = &unique
	return cmtq
}

// Order adds an order step to the query.
func (cmtq *ContactMechTypeQuery) Order(o ...OrderFunc) *ContactMechTypeQuery {
	cmtq.order = append(cmtq.order, o...)
	return cmtq
}

// QueryParent chains the current query on the "parent" edge.
func (cmtq *ContactMechTypeQuery) QueryParent() *ContactMechTypeQuery {
	query := &ContactMechTypeQuery{config: cmtq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cmtq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cmtq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(contactmechtype.Table, contactmechtype.FieldID, selector),
			sqlgraph.To(contactmechtype.Table, contactmechtype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, contactmechtype.ParentTable, contactmechtype.ParentColumn),
		)
		fromU = sqlgraph.SetNeighbors(cmtq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryChildren chains the current query on the "children" edge.
func (cmtq *ContactMechTypeQuery) QueryChildren() *ContactMechTypeQuery {
	query := &ContactMechTypeQuery{config: cmtq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cmtq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cmtq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(contactmechtype.Table, contactmechtype.FieldID, selector),
			sqlgraph.To(contactmechtype.Table, contactmechtype.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, contactmechtype.ChildrenTable, contactmechtype.ChildrenColumn),
		)
		fromU = sqlgraph.SetNeighbors(cmtq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryContacMechTypeCommunicationEventTypes chains the current query on the "contac_mech_type_communication_event_types" edge.
func (cmtq *ContactMechTypeQuery) QueryContacMechTypeCommunicationEventTypes() *CommunicationEventTypeQuery {
	query := &CommunicationEventTypeQuery{config: cmtq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cmtq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cmtq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(contactmechtype.Table, contactmechtype.FieldID, selector),
			sqlgraph.To(communicationeventtype.Table, communicationeventtype.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, contactmechtype.ContacMechTypeCommunicationEventTypesTable, contactmechtype.ContacMechTypeCommunicationEventTypesColumn),
		)
		fromU = sqlgraph.SetNeighbors(cmtq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryChildContactMechTypes chains the current query on the "child_contact_mech_types" edge.
func (cmtq *ContactMechTypeQuery) QueryChildContactMechTypes() *ContactMechTypeQuery {
	query := &ContactMechTypeQuery{config: cmtq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cmtq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cmtq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(contactmechtype.Table, contactmechtype.FieldID, selector),
			sqlgraph.To(contactmechtype.Table, contactmechtype.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, contactmechtype.ChildContactMechTypesTable, contactmechtype.ChildContactMechTypesPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(cmtq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryContactMechTypePurposes chains the current query on the "contact_mech_type_purposes" edge.
func (cmtq *ContactMechTypeQuery) QueryContactMechTypePurposes() *ContactMechTypePurposeQuery {
	query := &ContactMechTypePurposeQuery{config: cmtq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cmtq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cmtq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(contactmechtype.Table, contactmechtype.FieldID, selector),
			sqlgraph.To(contactmechtypepurpose.Table, contactmechtypepurpose.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, contactmechtype.ContactMechTypePurposesTable, contactmechtype.ContactMechTypePurposesColumn),
		)
		fromU = sqlgraph.SetNeighbors(cmtq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ContactMechType entity from the query.
// Returns a *NotFoundError when no ContactMechType was found.
func (cmtq *ContactMechTypeQuery) First(ctx context.Context) (*ContactMechType, error) {
	nodes, err := cmtq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{contactmechtype.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (cmtq *ContactMechTypeQuery) FirstX(ctx context.Context) *ContactMechType {
	node, err := cmtq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ContactMechType ID from the query.
// Returns a *NotFoundError when no ContactMechType ID was found.
func (cmtq *ContactMechTypeQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = cmtq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{contactmechtype.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (cmtq *ContactMechTypeQuery) FirstIDX(ctx context.Context) int {
	id, err := cmtq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ContactMechType entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one ContactMechType entity is not found.
// Returns a *NotFoundError when no ContactMechType entities are found.
func (cmtq *ContactMechTypeQuery) Only(ctx context.Context) (*ContactMechType, error) {
	nodes, err := cmtq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{contactmechtype.Label}
	default:
		return nil, &NotSingularError{contactmechtype.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (cmtq *ContactMechTypeQuery) OnlyX(ctx context.Context) *ContactMechType {
	node, err := cmtq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ContactMechType ID in the query.
// Returns a *NotSingularError when exactly one ContactMechType ID is not found.
// Returns a *NotFoundError when no entities are found.
func (cmtq *ContactMechTypeQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = cmtq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{contactmechtype.Label}
	default:
		err = &NotSingularError{contactmechtype.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (cmtq *ContactMechTypeQuery) OnlyIDX(ctx context.Context) int {
	id, err := cmtq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ContactMechTypes.
func (cmtq *ContactMechTypeQuery) All(ctx context.Context) ([]*ContactMechType, error) {
	if err := cmtq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return cmtq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (cmtq *ContactMechTypeQuery) AllX(ctx context.Context) []*ContactMechType {
	nodes, err := cmtq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ContactMechType IDs.
func (cmtq *ContactMechTypeQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := cmtq.Select(contactmechtype.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (cmtq *ContactMechTypeQuery) IDsX(ctx context.Context) []int {
	ids, err := cmtq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (cmtq *ContactMechTypeQuery) Count(ctx context.Context) (int, error) {
	if err := cmtq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return cmtq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (cmtq *ContactMechTypeQuery) CountX(ctx context.Context) int {
	count, err := cmtq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (cmtq *ContactMechTypeQuery) Exist(ctx context.Context) (bool, error) {
	if err := cmtq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return cmtq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (cmtq *ContactMechTypeQuery) ExistX(ctx context.Context) bool {
	exist, err := cmtq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ContactMechTypeQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (cmtq *ContactMechTypeQuery) Clone() *ContactMechTypeQuery {
	if cmtq == nil {
		return nil
	}
	return &ContactMechTypeQuery{
		config:       cmtq.config,
		limit:        cmtq.limit,
		offset:       cmtq.offset,
		order:        append([]OrderFunc{}, cmtq.order...),
		predicates:   append([]predicate.ContactMechType{}, cmtq.predicates...),
		withParent:   cmtq.withParent.Clone(),
		withChildren: cmtq.withChildren.Clone(),
		withContacMechTypeCommunicationEventTypes: cmtq.withContacMechTypeCommunicationEventTypes.Clone(),
		withChildContactMechTypes:                 cmtq.withChildContactMechTypes.Clone(),
		withContactMechTypePurposes:               cmtq.withContactMechTypePurposes.Clone(),
		// clone intermediate query.
		sql:  cmtq.sql.Clone(),
		path: cmtq.path,
	}
}

// WithParent tells the query-builder to eager-load the nodes that are connected to
// the "parent" edge. The optional arguments are used to configure the query builder of the edge.
func (cmtq *ContactMechTypeQuery) WithParent(opts ...func(*ContactMechTypeQuery)) *ContactMechTypeQuery {
	query := &ContactMechTypeQuery{config: cmtq.config}
	for _, opt := range opts {
		opt(query)
	}
	cmtq.withParent = query
	return cmtq
}

// WithChildren tells the query-builder to eager-load the nodes that are connected to
// the "children" edge. The optional arguments are used to configure the query builder of the edge.
func (cmtq *ContactMechTypeQuery) WithChildren(opts ...func(*ContactMechTypeQuery)) *ContactMechTypeQuery {
	query := &ContactMechTypeQuery{config: cmtq.config}
	for _, opt := range opts {
		opt(query)
	}
	cmtq.withChildren = query
	return cmtq
}

// WithContacMechTypeCommunicationEventTypes tells the query-builder to eager-load the nodes that are connected to
// the "contac_mech_type_communication_event_types" edge. The optional arguments are used to configure the query builder of the edge.
func (cmtq *ContactMechTypeQuery) WithContacMechTypeCommunicationEventTypes(opts ...func(*CommunicationEventTypeQuery)) *ContactMechTypeQuery {
	query := &CommunicationEventTypeQuery{config: cmtq.config}
	for _, opt := range opts {
		opt(query)
	}
	cmtq.withContacMechTypeCommunicationEventTypes = query
	return cmtq
}

// WithChildContactMechTypes tells the query-builder to eager-load the nodes that are connected to
// the "child_contact_mech_types" edge. The optional arguments are used to configure the query builder of the edge.
func (cmtq *ContactMechTypeQuery) WithChildContactMechTypes(opts ...func(*ContactMechTypeQuery)) *ContactMechTypeQuery {
	query := &ContactMechTypeQuery{config: cmtq.config}
	for _, opt := range opts {
		opt(query)
	}
	cmtq.withChildContactMechTypes = query
	return cmtq
}

// WithContactMechTypePurposes tells the query-builder to eager-load the nodes that are connected to
// the "contact_mech_type_purposes" edge. The optional arguments are used to configure the query builder of the edge.
func (cmtq *ContactMechTypeQuery) WithContactMechTypePurposes(opts ...func(*ContactMechTypePurposeQuery)) *ContactMechTypeQuery {
	query := &ContactMechTypePurposeQuery{config: cmtq.config}
	for _, opt := range opts {
		opt(query)
	}
	cmtq.withContactMechTypePurposes = query
	return cmtq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ContactMechType.Query().
//		GroupBy(contactmechtype.FieldCreateTime).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (cmtq *ContactMechTypeQuery) GroupBy(field string, fields ...string) *ContactMechTypeGroupBy {
	group := &ContactMechTypeGroupBy{config: cmtq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := cmtq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return cmtq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//	}
//
//	client.ContactMechType.Query().
//		Select(contactmechtype.FieldCreateTime).
//		Scan(ctx, &v)
//
func (cmtq *ContactMechTypeQuery) Select(field string, fields ...string) *ContactMechTypeSelect {
	cmtq.fields = append([]string{field}, fields...)
	return &ContactMechTypeSelect{ContactMechTypeQuery: cmtq}
}

func (cmtq *ContactMechTypeQuery) prepareQuery(ctx context.Context) error {
	for _, f := range cmtq.fields {
		if !contactmechtype.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if cmtq.path != nil {
		prev, err := cmtq.path(ctx)
		if err != nil {
			return err
		}
		cmtq.sql = prev
	}
	return nil
}

func (cmtq *ContactMechTypeQuery) sqlAll(ctx context.Context) ([]*ContactMechType, error) {
	var (
		nodes       = []*ContactMechType{}
		withFKs     = cmtq.withFKs
		_spec       = cmtq.querySpec()
		loadedTypes = [5]bool{
			cmtq.withParent != nil,
			cmtq.withChildren != nil,
			cmtq.withContacMechTypeCommunicationEventTypes != nil,
			cmtq.withChildContactMechTypes != nil,
			cmtq.withContactMechTypePurposes != nil,
		}
	)
	if cmtq.withParent != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, contactmechtype.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &ContactMechType{config: cmtq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, cmtq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := cmtq.withParent; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*ContactMechType)
		for i := range nodes {
			if nodes[i].contact_mech_type_children == nil {
				continue
			}
			fk := *nodes[i].contact_mech_type_children
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(contactmechtype.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "contact_mech_type_children" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Parent = n
			}
		}
	}

	if query := cmtq.withChildren; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*ContactMechType)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.Children = []*ContactMechType{}
		}
		query.withFKs = true
		query.Where(predicate.ContactMechType(func(s *sql.Selector) {
			s.Where(sql.InValues(contactmechtype.ChildrenColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.contact_mech_type_children
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "contact_mech_type_children" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "contact_mech_type_children" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.Children = append(node.Edges.Children, n)
		}
	}

	if query := cmtq.withContacMechTypeCommunicationEventTypes; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*ContactMechType)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.ContacMechTypeCommunicationEventTypes = []*CommunicationEventType{}
		}
		query.withFKs = true
		query.Where(predicate.CommunicationEventType(func(s *sql.Selector) {
			s.Where(sql.InValues(contactmechtype.ContacMechTypeCommunicationEventTypesColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.contact_mech_type_contac_mech_type_communication_event_types
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "contact_mech_type_contac_mech_type_communication_event_types" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "contact_mech_type_contac_mech_type_communication_event_types" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.ContacMechTypeCommunicationEventTypes = append(node.Edges.ContacMechTypeCommunicationEventTypes, n)
		}
	}

	if query := cmtq.withChildContactMechTypes; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		ids := make(map[int]*ContactMechType, len(nodes))
		for _, node := range nodes {
			ids[node.ID] = node
			fks = append(fks, node.ID)
			node.Edges.ChildContactMechTypes = []*ContactMechType{}
		}
		var (
			edgeids []int
			edges   = make(map[int][]*ContactMechType)
		)
		_spec := &sqlgraph.EdgeQuerySpec{
			Edge: &sqlgraph.EdgeSpec{
				Inverse: false,
				Table:   contactmechtype.ChildContactMechTypesTable,
				Columns: contactmechtype.ChildContactMechTypesPrimaryKey,
			},
			Predicate: func(s *sql.Selector) {
				s.Where(sql.InValues(contactmechtype.ChildContactMechTypesPrimaryKey[0], fks...))
			},
			ScanValues: func() [2]interface{} {
				return [2]interface{}{new(sql.NullInt64), new(sql.NullInt64)}
			},
			Assign: func(out, in interface{}) error {
				eout, ok := out.(*sql.NullInt64)
				if !ok || eout == nil {
					return fmt.Errorf("unexpected id value for edge-out")
				}
				ein, ok := in.(*sql.NullInt64)
				if !ok || ein == nil {
					return fmt.Errorf("unexpected id value for edge-in")
				}
				outValue := int(eout.Int64)
				inValue := int(ein.Int64)
				node, ok := ids[outValue]
				if !ok {
					return fmt.Errorf("unexpected node id in edges: %v", outValue)
				}
				if _, ok := edges[inValue]; !ok {
					edgeids = append(edgeids, inValue)
				}
				edges[inValue] = append(edges[inValue], node)
				return nil
			},
		}
		if err := sqlgraph.QueryEdges(ctx, cmtq.driver, _spec); err != nil {
			return nil, fmt.Errorf(`query edges "child_contact_mech_types": %w`, err)
		}
		query.Where(contactmechtype.IDIn(edgeids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := edges[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected "child_contact_mech_types" node returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.ChildContactMechTypes = append(nodes[i].Edges.ChildContactMechTypes, n)
			}
		}
	}

	if query := cmtq.withContactMechTypePurposes; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*ContactMechType)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.ContactMechTypePurposes = []*ContactMechTypePurpose{}
		}
		query.withFKs = true
		query.Where(predicate.ContactMechTypePurpose(func(s *sql.Selector) {
			s.Where(sql.InValues(contactmechtype.ContactMechTypePurposesColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.contact_mech_type_contact_mech_type_purposes
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "contact_mech_type_contact_mech_type_purposes" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "contact_mech_type_contact_mech_type_purposes" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.ContactMechTypePurposes = append(node.Edges.ContactMechTypePurposes, n)
		}
	}

	return nodes, nil
}

func (cmtq *ContactMechTypeQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := cmtq.querySpec()
	return sqlgraph.CountNodes(ctx, cmtq.driver, _spec)
}

func (cmtq *ContactMechTypeQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := cmtq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (cmtq *ContactMechTypeQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   contactmechtype.Table,
			Columns: contactmechtype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: contactmechtype.FieldID,
			},
		},
		From:   cmtq.sql,
		Unique: true,
	}
	if unique := cmtq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := cmtq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, contactmechtype.FieldID)
		for i := range fields {
			if fields[i] != contactmechtype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := cmtq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := cmtq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := cmtq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := cmtq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (cmtq *ContactMechTypeQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(cmtq.driver.Dialect())
	t1 := builder.Table(contactmechtype.Table)
	columns := cmtq.fields
	if len(columns) == 0 {
		columns = contactmechtype.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if cmtq.sql != nil {
		selector = cmtq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	for _, p := range cmtq.predicates {
		p(selector)
	}
	for _, p := range cmtq.order {
		p(selector)
	}
	if offset := cmtq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := cmtq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ContactMechTypeGroupBy is the group-by builder for ContactMechType entities.
type ContactMechTypeGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (cmtgb *ContactMechTypeGroupBy) Aggregate(fns ...AggregateFunc) *ContactMechTypeGroupBy {
	cmtgb.fns = append(cmtgb.fns, fns...)
	return cmtgb
}

// Scan applies the group-by query and scans the result into the given value.
func (cmtgb *ContactMechTypeGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := cmtgb.path(ctx)
	if err != nil {
		return err
	}
	cmtgb.sql = query
	return cmtgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (cmtgb *ContactMechTypeGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := cmtgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (cmtgb *ContactMechTypeGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(cmtgb.fields) > 1 {
		return nil, errors.New("ent: ContactMechTypeGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := cmtgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (cmtgb *ContactMechTypeGroupBy) StringsX(ctx context.Context) []string {
	v, err := cmtgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (cmtgb *ContactMechTypeGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = cmtgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{contactmechtype.Label}
	default:
		err = fmt.Errorf("ent: ContactMechTypeGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (cmtgb *ContactMechTypeGroupBy) StringX(ctx context.Context) string {
	v, err := cmtgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (cmtgb *ContactMechTypeGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(cmtgb.fields) > 1 {
		return nil, errors.New("ent: ContactMechTypeGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := cmtgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (cmtgb *ContactMechTypeGroupBy) IntsX(ctx context.Context) []int {
	v, err := cmtgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (cmtgb *ContactMechTypeGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = cmtgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{contactmechtype.Label}
	default:
		err = fmt.Errorf("ent: ContactMechTypeGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (cmtgb *ContactMechTypeGroupBy) IntX(ctx context.Context) int {
	v, err := cmtgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (cmtgb *ContactMechTypeGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(cmtgb.fields) > 1 {
		return nil, errors.New("ent: ContactMechTypeGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := cmtgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (cmtgb *ContactMechTypeGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := cmtgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (cmtgb *ContactMechTypeGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = cmtgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{contactmechtype.Label}
	default:
		err = fmt.Errorf("ent: ContactMechTypeGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (cmtgb *ContactMechTypeGroupBy) Float64X(ctx context.Context) float64 {
	v, err := cmtgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (cmtgb *ContactMechTypeGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(cmtgb.fields) > 1 {
		return nil, errors.New("ent: ContactMechTypeGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := cmtgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (cmtgb *ContactMechTypeGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := cmtgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (cmtgb *ContactMechTypeGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = cmtgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{contactmechtype.Label}
	default:
		err = fmt.Errorf("ent: ContactMechTypeGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (cmtgb *ContactMechTypeGroupBy) BoolX(ctx context.Context) bool {
	v, err := cmtgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (cmtgb *ContactMechTypeGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range cmtgb.fields {
		if !contactmechtype.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := cmtgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cmtgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (cmtgb *ContactMechTypeGroupBy) sqlQuery() *sql.Selector {
	selector := cmtgb.sql.Select()
	aggregation := make([]string, 0, len(cmtgb.fns))
	for _, fn := range cmtgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(cmtgb.fields)+len(cmtgb.fns))
		for _, f := range cmtgb.fields {
			columns = append(columns, selector.C(f))
		}
		for _, c := range aggregation {
			columns = append(columns, c)
		}
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(cmtgb.fields...)...)
}

// ContactMechTypeSelect is the builder for selecting fields of ContactMechType entities.
type ContactMechTypeSelect struct {
	*ContactMechTypeQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (cmts *ContactMechTypeSelect) Scan(ctx context.Context, v interface{}) error {
	if err := cmts.prepareQuery(ctx); err != nil {
		return err
	}
	cmts.sql = cmts.ContactMechTypeQuery.sqlQuery(ctx)
	return cmts.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (cmts *ContactMechTypeSelect) ScanX(ctx context.Context, v interface{}) {
	if err := cmts.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (cmts *ContactMechTypeSelect) Strings(ctx context.Context) ([]string, error) {
	if len(cmts.fields) > 1 {
		return nil, errors.New("ent: ContactMechTypeSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := cmts.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (cmts *ContactMechTypeSelect) StringsX(ctx context.Context) []string {
	v, err := cmts.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (cmts *ContactMechTypeSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = cmts.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{contactmechtype.Label}
	default:
		err = fmt.Errorf("ent: ContactMechTypeSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (cmts *ContactMechTypeSelect) StringX(ctx context.Context) string {
	v, err := cmts.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (cmts *ContactMechTypeSelect) Ints(ctx context.Context) ([]int, error) {
	if len(cmts.fields) > 1 {
		return nil, errors.New("ent: ContactMechTypeSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := cmts.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (cmts *ContactMechTypeSelect) IntsX(ctx context.Context) []int {
	v, err := cmts.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (cmts *ContactMechTypeSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = cmts.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{contactmechtype.Label}
	default:
		err = fmt.Errorf("ent: ContactMechTypeSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (cmts *ContactMechTypeSelect) IntX(ctx context.Context) int {
	v, err := cmts.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (cmts *ContactMechTypeSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(cmts.fields) > 1 {
		return nil, errors.New("ent: ContactMechTypeSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := cmts.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (cmts *ContactMechTypeSelect) Float64sX(ctx context.Context) []float64 {
	v, err := cmts.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (cmts *ContactMechTypeSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = cmts.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{contactmechtype.Label}
	default:
		err = fmt.Errorf("ent: ContactMechTypeSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (cmts *ContactMechTypeSelect) Float64X(ctx context.Context) float64 {
	v, err := cmts.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (cmts *ContactMechTypeSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(cmts.fields) > 1 {
		return nil, errors.New("ent: ContactMechTypeSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := cmts.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (cmts *ContactMechTypeSelect) BoolsX(ctx context.Context) []bool {
	v, err := cmts.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (cmts *ContactMechTypeSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = cmts.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{contactmechtype.Label}
	default:
		err = fmt.Errorf("ent: ContactMechTypeSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (cmts *ContactMechTypeSelect) BoolX(ctx context.Context) bool {
	v, err := cmts.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (cmts *ContactMechTypeSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := cmts.sql.Query()
	if err := cmts.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
