// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/communicationeventtype"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/contactmechtype"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/contactmechtypepurpose"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/predicate"
)

// ContactMechTypeUpdate is the builder for updating ContactMechType entities.
type ContactMechTypeUpdate struct {
	config
	hooks    []Hook
	mutation *ContactMechTypeMutation
}

// Where adds a new predicate for the ContactMechTypeUpdate builder.
func (cmtu *ContactMechTypeUpdate) Where(ps ...predicate.ContactMechType) *ContactMechTypeUpdate {
	cmtu.mutation.predicates = append(cmtu.mutation.predicates, ps...)
	return cmtu
}

// SetStringRef sets the "string_ref" field.
func (cmtu *ContactMechTypeUpdate) SetStringRef(s string) *ContactMechTypeUpdate {
	cmtu.mutation.SetStringRef(s)
	return cmtu
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (cmtu *ContactMechTypeUpdate) SetNillableStringRef(s *string) *ContactMechTypeUpdate {
	if s != nil {
		cmtu.SetStringRef(*s)
	}
	return cmtu
}

// ClearStringRef clears the value of the "string_ref" field.
func (cmtu *ContactMechTypeUpdate) ClearStringRef() *ContactMechTypeUpdate {
	cmtu.mutation.ClearStringRef()
	return cmtu
}

// SetHasTable sets the "has_table" field.
func (cmtu *ContactMechTypeUpdate) SetHasTable(ct contactmechtype.HasTable) *ContactMechTypeUpdate {
	cmtu.mutation.SetHasTable(ct)
	return cmtu
}

// SetNillableHasTable sets the "has_table" field if the given value is not nil.
func (cmtu *ContactMechTypeUpdate) SetNillableHasTable(ct *contactmechtype.HasTable) *ContactMechTypeUpdate {
	if ct != nil {
		cmtu.SetHasTable(*ct)
	}
	return cmtu
}

// ClearHasTable clears the value of the "has_table" field.
func (cmtu *ContactMechTypeUpdate) ClearHasTable() *ContactMechTypeUpdate {
	cmtu.mutation.ClearHasTable()
	return cmtu
}

// SetDescription sets the "description" field.
func (cmtu *ContactMechTypeUpdate) SetDescription(s string) *ContactMechTypeUpdate {
	cmtu.mutation.SetDescription(s)
	return cmtu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cmtu *ContactMechTypeUpdate) SetNillableDescription(s *string) *ContactMechTypeUpdate {
	if s != nil {
		cmtu.SetDescription(*s)
	}
	return cmtu
}

// ClearDescription clears the value of the "description" field.
func (cmtu *ContactMechTypeUpdate) ClearDescription() *ContactMechTypeUpdate {
	cmtu.mutation.ClearDescription()
	return cmtu
}

// SetParentID sets the "parent" edge to the ContactMechType entity by ID.
func (cmtu *ContactMechTypeUpdate) SetParentID(id int) *ContactMechTypeUpdate {
	cmtu.mutation.SetParentID(id)
	return cmtu
}

// SetNillableParentID sets the "parent" edge to the ContactMechType entity by ID if the given value is not nil.
func (cmtu *ContactMechTypeUpdate) SetNillableParentID(id *int) *ContactMechTypeUpdate {
	if id != nil {
		cmtu = cmtu.SetParentID(*id)
	}
	return cmtu
}

// SetParent sets the "parent" edge to the ContactMechType entity.
func (cmtu *ContactMechTypeUpdate) SetParent(c *ContactMechType) *ContactMechTypeUpdate {
	return cmtu.SetParentID(c.ID)
}

// AddChildIDs adds the "children" edge to the ContactMechType entity by IDs.
func (cmtu *ContactMechTypeUpdate) AddChildIDs(ids ...int) *ContactMechTypeUpdate {
	cmtu.mutation.AddChildIDs(ids...)
	return cmtu
}

// AddChildren adds the "children" edges to the ContactMechType entity.
func (cmtu *ContactMechTypeUpdate) AddChildren(c ...*ContactMechType) *ContactMechTypeUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cmtu.AddChildIDs(ids...)
}

// AddContacMechTypeCommunicationEventTypeIDs adds the "contac_mech_type_communication_event_types" edge to the CommunicationEventType entity by IDs.
func (cmtu *ContactMechTypeUpdate) AddContacMechTypeCommunicationEventTypeIDs(ids ...int) *ContactMechTypeUpdate {
	cmtu.mutation.AddContacMechTypeCommunicationEventTypeIDs(ids...)
	return cmtu
}

// AddContacMechTypeCommunicationEventTypes adds the "contac_mech_type_communication_event_types" edges to the CommunicationEventType entity.
func (cmtu *ContactMechTypeUpdate) AddContacMechTypeCommunicationEventTypes(c ...*CommunicationEventType) *ContactMechTypeUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cmtu.AddContacMechTypeCommunicationEventTypeIDs(ids...)
}

// AddChildContactMechTypeIDs adds the "child_contact_mech_types" edge to the ContactMechType entity by IDs.
func (cmtu *ContactMechTypeUpdate) AddChildContactMechTypeIDs(ids ...int) *ContactMechTypeUpdate {
	cmtu.mutation.AddChildContactMechTypeIDs(ids...)
	return cmtu
}

// AddChildContactMechTypes adds the "child_contact_mech_types" edges to the ContactMechType entity.
func (cmtu *ContactMechTypeUpdate) AddChildContactMechTypes(c ...*ContactMechType) *ContactMechTypeUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cmtu.AddChildContactMechTypeIDs(ids...)
}

// AddContactMechTypePurposeIDs adds the "contact_mech_type_purposes" edge to the ContactMechTypePurpose entity by IDs.
func (cmtu *ContactMechTypeUpdate) AddContactMechTypePurposeIDs(ids ...int) *ContactMechTypeUpdate {
	cmtu.mutation.AddContactMechTypePurposeIDs(ids...)
	return cmtu
}

// AddContactMechTypePurposes adds the "contact_mech_type_purposes" edges to the ContactMechTypePurpose entity.
func (cmtu *ContactMechTypeUpdate) AddContactMechTypePurposes(c ...*ContactMechTypePurpose) *ContactMechTypeUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cmtu.AddContactMechTypePurposeIDs(ids...)
}

// Mutation returns the ContactMechTypeMutation object of the builder.
func (cmtu *ContactMechTypeUpdate) Mutation() *ContactMechTypeMutation {
	return cmtu.mutation
}

// ClearParent clears the "parent" edge to the ContactMechType entity.
func (cmtu *ContactMechTypeUpdate) ClearParent() *ContactMechTypeUpdate {
	cmtu.mutation.ClearParent()
	return cmtu
}

// ClearChildren clears all "children" edges to the ContactMechType entity.
func (cmtu *ContactMechTypeUpdate) ClearChildren() *ContactMechTypeUpdate {
	cmtu.mutation.ClearChildren()
	return cmtu
}

// RemoveChildIDs removes the "children" edge to ContactMechType entities by IDs.
func (cmtu *ContactMechTypeUpdate) RemoveChildIDs(ids ...int) *ContactMechTypeUpdate {
	cmtu.mutation.RemoveChildIDs(ids...)
	return cmtu
}

// RemoveChildren removes "children" edges to ContactMechType entities.
func (cmtu *ContactMechTypeUpdate) RemoveChildren(c ...*ContactMechType) *ContactMechTypeUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cmtu.RemoveChildIDs(ids...)
}

// ClearContacMechTypeCommunicationEventTypes clears all "contac_mech_type_communication_event_types" edges to the CommunicationEventType entity.
func (cmtu *ContactMechTypeUpdate) ClearContacMechTypeCommunicationEventTypes() *ContactMechTypeUpdate {
	cmtu.mutation.ClearContacMechTypeCommunicationEventTypes()
	return cmtu
}

// RemoveContacMechTypeCommunicationEventTypeIDs removes the "contac_mech_type_communication_event_types" edge to CommunicationEventType entities by IDs.
func (cmtu *ContactMechTypeUpdate) RemoveContacMechTypeCommunicationEventTypeIDs(ids ...int) *ContactMechTypeUpdate {
	cmtu.mutation.RemoveContacMechTypeCommunicationEventTypeIDs(ids...)
	return cmtu
}

// RemoveContacMechTypeCommunicationEventTypes removes "contac_mech_type_communication_event_types" edges to CommunicationEventType entities.
func (cmtu *ContactMechTypeUpdate) RemoveContacMechTypeCommunicationEventTypes(c ...*CommunicationEventType) *ContactMechTypeUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cmtu.RemoveContacMechTypeCommunicationEventTypeIDs(ids...)
}

// ClearChildContactMechTypes clears all "child_contact_mech_types" edges to the ContactMechType entity.
func (cmtu *ContactMechTypeUpdate) ClearChildContactMechTypes() *ContactMechTypeUpdate {
	cmtu.mutation.ClearChildContactMechTypes()
	return cmtu
}

// RemoveChildContactMechTypeIDs removes the "child_contact_mech_types" edge to ContactMechType entities by IDs.
func (cmtu *ContactMechTypeUpdate) RemoveChildContactMechTypeIDs(ids ...int) *ContactMechTypeUpdate {
	cmtu.mutation.RemoveChildContactMechTypeIDs(ids...)
	return cmtu
}

// RemoveChildContactMechTypes removes "child_contact_mech_types" edges to ContactMechType entities.
func (cmtu *ContactMechTypeUpdate) RemoveChildContactMechTypes(c ...*ContactMechType) *ContactMechTypeUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cmtu.RemoveChildContactMechTypeIDs(ids...)
}

// ClearContactMechTypePurposes clears all "contact_mech_type_purposes" edges to the ContactMechTypePurpose entity.
func (cmtu *ContactMechTypeUpdate) ClearContactMechTypePurposes() *ContactMechTypeUpdate {
	cmtu.mutation.ClearContactMechTypePurposes()
	return cmtu
}

// RemoveContactMechTypePurposeIDs removes the "contact_mech_type_purposes" edge to ContactMechTypePurpose entities by IDs.
func (cmtu *ContactMechTypeUpdate) RemoveContactMechTypePurposeIDs(ids ...int) *ContactMechTypeUpdate {
	cmtu.mutation.RemoveContactMechTypePurposeIDs(ids...)
	return cmtu
}

// RemoveContactMechTypePurposes removes "contact_mech_type_purposes" edges to ContactMechTypePurpose entities.
func (cmtu *ContactMechTypeUpdate) RemoveContactMechTypePurposes(c ...*ContactMechTypePurpose) *ContactMechTypeUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cmtu.RemoveContactMechTypePurposeIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cmtu *ContactMechTypeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	cmtu.defaults()
	if len(cmtu.hooks) == 0 {
		if err = cmtu.check(); err != nil {
			return 0, err
		}
		affected, err = cmtu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ContactMechTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cmtu.check(); err != nil {
				return 0, err
			}
			cmtu.mutation = mutation
			affected, err = cmtu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cmtu.hooks) - 1; i >= 0; i-- {
			mut = cmtu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cmtu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cmtu *ContactMechTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := cmtu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cmtu *ContactMechTypeUpdate) Exec(ctx context.Context) error {
	_, err := cmtu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmtu *ContactMechTypeUpdate) ExecX(ctx context.Context) {
	if err := cmtu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cmtu *ContactMechTypeUpdate) defaults() {
	if _, ok := cmtu.mutation.UpdateTime(); !ok {
		v := contactmechtype.UpdateDefaultUpdateTime()
		cmtu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cmtu *ContactMechTypeUpdate) check() error {
	if v, ok := cmtu.mutation.HasTable(); ok {
		if err := contactmechtype.HasTableValidator(v); err != nil {
			return &ValidationError{Name: "has_table", err: fmt.Errorf("ent: validator failed for field \"has_table\": %w", err)}
		}
	}
	return nil
}

func (cmtu *ContactMechTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   contactmechtype.Table,
			Columns: contactmechtype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: contactmechtype.FieldID,
			},
		},
	}
	if ps := cmtu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cmtu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: contactmechtype.FieldUpdateTime,
		})
	}
	if value, ok := cmtu.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: contactmechtype.FieldStringRef,
		})
	}
	if cmtu.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: contactmechtype.FieldStringRef,
		})
	}
	if value, ok := cmtu.mutation.HasTable(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: contactmechtype.FieldHasTable,
		})
	}
	if cmtu.mutation.HasTableCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: contactmechtype.FieldHasTable,
		})
	}
	if value, ok := cmtu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: contactmechtype.FieldDescription,
		})
	}
	if cmtu.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: contactmechtype.FieldDescription,
		})
	}
	if cmtu.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contactmechtype.ParentTable,
			Columns: []string{contactmechtype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: contactmechtype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmtu.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contactmechtype.ParentTable,
			Columns: []string{contactmechtype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: contactmechtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cmtu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   contactmechtype.ChildrenTable,
			Columns: []string{contactmechtype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: contactmechtype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmtu.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !cmtu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   contactmechtype.ChildrenTable,
			Columns: []string{contactmechtype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: contactmechtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmtu.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   contactmechtype.ChildrenTable,
			Columns: []string{contactmechtype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: contactmechtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cmtu.mutation.ContacMechTypeCommunicationEventTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   contactmechtype.ContacMechTypeCommunicationEventTypesTable,
			Columns: []string{contactmechtype.ContacMechTypeCommunicationEventTypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: communicationeventtype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmtu.mutation.RemovedContacMechTypeCommunicationEventTypesIDs(); len(nodes) > 0 && !cmtu.mutation.ContacMechTypeCommunicationEventTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   contactmechtype.ContacMechTypeCommunicationEventTypesTable,
			Columns: []string{contactmechtype.ContacMechTypeCommunicationEventTypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: communicationeventtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmtu.mutation.ContacMechTypeCommunicationEventTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   contactmechtype.ContacMechTypeCommunicationEventTypesTable,
			Columns: []string{contactmechtype.ContacMechTypeCommunicationEventTypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: communicationeventtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cmtu.mutation.ChildContactMechTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   contactmechtype.ChildContactMechTypesTable,
			Columns: contactmechtype.ChildContactMechTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: contactmechtype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmtu.mutation.RemovedChildContactMechTypesIDs(); len(nodes) > 0 && !cmtu.mutation.ChildContactMechTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   contactmechtype.ChildContactMechTypesTable,
			Columns: contactmechtype.ChildContactMechTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: contactmechtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmtu.mutation.ChildContactMechTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   contactmechtype.ChildContactMechTypesTable,
			Columns: contactmechtype.ChildContactMechTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: contactmechtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cmtu.mutation.ContactMechTypePurposesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   contactmechtype.ContactMechTypePurposesTable,
			Columns: []string{contactmechtype.ContactMechTypePurposesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: contactmechtypepurpose.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmtu.mutation.RemovedContactMechTypePurposesIDs(); len(nodes) > 0 && !cmtu.mutation.ContactMechTypePurposesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   contactmechtype.ContactMechTypePurposesTable,
			Columns: []string{contactmechtype.ContactMechTypePurposesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: contactmechtypepurpose.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmtu.mutation.ContactMechTypePurposesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   contactmechtype.ContactMechTypePurposesTable,
			Columns: []string{contactmechtype.ContactMechTypePurposesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: contactmechtypepurpose.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cmtu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{contactmechtype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ContactMechTypeUpdateOne is the builder for updating a single ContactMechType entity.
type ContactMechTypeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ContactMechTypeMutation
}

// SetStringRef sets the "string_ref" field.
func (cmtuo *ContactMechTypeUpdateOne) SetStringRef(s string) *ContactMechTypeUpdateOne {
	cmtuo.mutation.SetStringRef(s)
	return cmtuo
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (cmtuo *ContactMechTypeUpdateOne) SetNillableStringRef(s *string) *ContactMechTypeUpdateOne {
	if s != nil {
		cmtuo.SetStringRef(*s)
	}
	return cmtuo
}

// ClearStringRef clears the value of the "string_ref" field.
func (cmtuo *ContactMechTypeUpdateOne) ClearStringRef() *ContactMechTypeUpdateOne {
	cmtuo.mutation.ClearStringRef()
	return cmtuo
}

// SetHasTable sets the "has_table" field.
func (cmtuo *ContactMechTypeUpdateOne) SetHasTable(ct contactmechtype.HasTable) *ContactMechTypeUpdateOne {
	cmtuo.mutation.SetHasTable(ct)
	return cmtuo
}

// SetNillableHasTable sets the "has_table" field if the given value is not nil.
func (cmtuo *ContactMechTypeUpdateOne) SetNillableHasTable(ct *contactmechtype.HasTable) *ContactMechTypeUpdateOne {
	if ct != nil {
		cmtuo.SetHasTable(*ct)
	}
	return cmtuo
}

// ClearHasTable clears the value of the "has_table" field.
func (cmtuo *ContactMechTypeUpdateOne) ClearHasTable() *ContactMechTypeUpdateOne {
	cmtuo.mutation.ClearHasTable()
	return cmtuo
}

// SetDescription sets the "description" field.
func (cmtuo *ContactMechTypeUpdateOne) SetDescription(s string) *ContactMechTypeUpdateOne {
	cmtuo.mutation.SetDescription(s)
	return cmtuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cmtuo *ContactMechTypeUpdateOne) SetNillableDescription(s *string) *ContactMechTypeUpdateOne {
	if s != nil {
		cmtuo.SetDescription(*s)
	}
	return cmtuo
}

// ClearDescription clears the value of the "description" field.
func (cmtuo *ContactMechTypeUpdateOne) ClearDescription() *ContactMechTypeUpdateOne {
	cmtuo.mutation.ClearDescription()
	return cmtuo
}

// SetParentID sets the "parent" edge to the ContactMechType entity by ID.
func (cmtuo *ContactMechTypeUpdateOne) SetParentID(id int) *ContactMechTypeUpdateOne {
	cmtuo.mutation.SetParentID(id)
	return cmtuo
}

// SetNillableParentID sets the "parent" edge to the ContactMechType entity by ID if the given value is not nil.
func (cmtuo *ContactMechTypeUpdateOne) SetNillableParentID(id *int) *ContactMechTypeUpdateOne {
	if id != nil {
		cmtuo = cmtuo.SetParentID(*id)
	}
	return cmtuo
}

// SetParent sets the "parent" edge to the ContactMechType entity.
func (cmtuo *ContactMechTypeUpdateOne) SetParent(c *ContactMechType) *ContactMechTypeUpdateOne {
	return cmtuo.SetParentID(c.ID)
}

// AddChildIDs adds the "children" edge to the ContactMechType entity by IDs.
func (cmtuo *ContactMechTypeUpdateOne) AddChildIDs(ids ...int) *ContactMechTypeUpdateOne {
	cmtuo.mutation.AddChildIDs(ids...)
	return cmtuo
}

// AddChildren adds the "children" edges to the ContactMechType entity.
func (cmtuo *ContactMechTypeUpdateOne) AddChildren(c ...*ContactMechType) *ContactMechTypeUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cmtuo.AddChildIDs(ids...)
}

// AddContacMechTypeCommunicationEventTypeIDs adds the "contac_mech_type_communication_event_types" edge to the CommunicationEventType entity by IDs.
func (cmtuo *ContactMechTypeUpdateOne) AddContacMechTypeCommunicationEventTypeIDs(ids ...int) *ContactMechTypeUpdateOne {
	cmtuo.mutation.AddContacMechTypeCommunicationEventTypeIDs(ids...)
	return cmtuo
}

// AddContacMechTypeCommunicationEventTypes adds the "contac_mech_type_communication_event_types" edges to the CommunicationEventType entity.
func (cmtuo *ContactMechTypeUpdateOne) AddContacMechTypeCommunicationEventTypes(c ...*CommunicationEventType) *ContactMechTypeUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cmtuo.AddContacMechTypeCommunicationEventTypeIDs(ids...)
}

// AddChildContactMechTypeIDs adds the "child_contact_mech_types" edge to the ContactMechType entity by IDs.
func (cmtuo *ContactMechTypeUpdateOne) AddChildContactMechTypeIDs(ids ...int) *ContactMechTypeUpdateOne {
	cmtuo.mutation.AddChildContactMechTypeIDs(ids...)
	return cmtuo
}

// AddChildContactMechTypes adds the "child_contact_mech_types" edges to the ContactMechType entity.
func (cmtuo *ContactMechTypeUpdateOne) AddChildContactMechTypes(c ...*ContactMechType) *ContactMechTypeUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cmtuo.AddChildContactMechTypeIDs(ids...)
}

// AddContactMechTypePurposeIDs adds the "contact_mech_type_purposes" edge to the ContactMechTypePurpose entity by IDs.
func (cmtuo *ContactMechTypeUpdateOne) AddContactMechTypePurposeIDs(ids ...int) *ContactMechTypeUpdateOne {
	cmtuo.mutation.AddContactMechTypePurposeIDs(ids...)
	return cmtuo
}

// AddContactMechTypePurposes adds the "contact_mech_type_purposes" edges to the ContactMechTypePurpose entity.
func (cmtuo *ContactMechTypeUpdateOne) AddContactMechTypePurposes(c ...*ContactMechTypePurpose) *ContactMechTypeUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cmtuo.AddContactMechTypePurposeIDs(ids...)
}

// Mutation returns the ContactMechTypeMutation object of the builder.
func (cmtuo *ContactMechTypeUpdateOne) Mutation() *ContactMechTypeMutation {
	return cmtuo.mutation
}

// ClearParent clears the "parent" edge to the ContactMechType entity.
func (cmtuo *ContactMechTypeUpdateOne) ClearParent() *ContactMechTypeUpdateOne {
	cmtuo.mutation.ClearParent()
	return cmtuo
}

// ClearChildren clears all "children" edges to the ContactMechType entity.
func (cmtuo *ContactMechTypeUpdateOne) ClearChildren() *ContactMechTypeUpdateOne {
	cmtuo.mutation.ClearChildren()
	return cmtuo
}

// RemoveChildIDs removes the "children" edge to ContactMechType entities by IDs.
func (cmtuo *ContactMechTypeUpdateOne) RemoveChildIDs(ids ...int) *ContactMechTypeUpdateOne {
	cmtuo.mutation.RemoveChildIDs(ids...)
	return cmtuo
}

// RemoveChildren removes "children" edges to ContactMechType entities.
func (cmtuo *ContactMechTypeUpdateOne) RemoveChildren(c ...*ContactMechType) *ContactMechTypeUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cmtuo.RemoveChildIDs(ids...)
}

// ClearContacMechTypeCommunicationEventTypes clears all "contac_mech_type_communication_event_types" edges to the CommunicationEventType entity.
func (cmtuo *ContactMechTypeUpdateOne) ClearContacMechTypeCommunicationEventTypes() *ContactMechTypeUpdateOne {
	cmtuo.mutation.ClearContacMechTypeCommunicationEventTypes()
	return cmtuo
}

// RemoveContacMechTypeCommunicationEventTypeIDs removes the "contac_mech_type_communication_event_types" edge to CommunicationEventType entities by IDs.
func (cmtuo *ContactMechTypeUpdateOne) RemoveContacMechTypeCommunicationEventTypeIDs(ids ...int) *ContactMechTypeUpdateOne {
	cmtuo.mutation.RemoveContacMechTypeCommunicationEventTypeIDs(ids...)
	return cmtuo
}

// RemoveContacMechTypeCommunicationEventTypes removes "contac_mech_type_communication_event_types" edges to CommunicationEventType entities.
func (cmtuo *ContactMechTypeUpdateOne) RemoveContacMechTypeCommunicationEventTypes(c ...*CommunicationEventType) *ContactMechTypeUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cmtuo.RemoveContacMechTypeCommunicationEventTypeIDs(ids...)
}

// ClearChildContactMechTypes clears all "child_contact_mech_types" edges to the ContactMechType entity.
func (cmtuo *ContactMechTypeUpdateOne) ClearChildContactMechTypes() *ContactMechTypeUpdateOne {
	cmtuo.mutation.ClearChildContactMechTypes()
	return cmtuo
}

// RemoveChildContactMechTypeIDs removes the "child_contact_mech_types" edge to ContactMechType entities by IDs.
func (cmtuo *ContactMechTypeUpdateOne) RemoveChildContactMechTypeIDs(ids ...int) *ContactMechTypeUpdateOne {
	cmtuo.mutation.RemoveChildContactMechTypeIDs(ids...)
	return cmtuo
}

// RemoveChildContactMechTypes removes "child_contact_mech_types" edges to ContactMechType entities.
func (cmtuo *ContactMechTypeUpdateOne) RemoveChildContactMechTypes(c ...*ContactMechType) *ContactMechTypeUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cmtuo.RemoveChildContactMechTypeIDs(ids...)
}

// ClearContactMechTypePurposes clears all "contact_mech_type_purposes" edges to the ContactMechTypePurpose entity.
func (cmtuo *ContactMechTypeUpdateOne) ClearContactMechTypePurposes() *ContactMechTypeUpdateOne {
	cmtuo.mutation.ClearContactMechTypePurposes()
	return cmtuo
}

// RemoveContactMechTypePurposeIDs removes the "contact_mech_type_purposes" edge to ContactMechTypePurpose entities by IDs.
func (cmtuo *ContactMechTypeUpdateOne) RemoveContactMechTypePurposeIDs(ids ...int) *ContactMechTypeUpdateOne {
	cmtuo.mutation.RemoveContactMechTypePurposeIDs(ids...)
	return cmtuo
}

// RemoveContactMechTypePurposes removes "contact_mech_type_purposes" edges to ContactMechTypePurpose entities.
func (cmtuo *ContactMechTypeUpdateOne) RemoveContactMechTypePurposes(c ...*ContactMechTypePurpose) *ContactMechTypeUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cmtuo.RemoveContactMechTypePurposeIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cmtuo *ContactMechTypeUpdateOne) Select(field string, fields ...string) *ContactMechTypeUpdateOne {
	cmtuo.fields = append([]string{field}, fields...)
	return cmtuo
}

// Save executes the query and returns the updated ContactMechType entity.
func (cmtuo *ContactMechTypeUpdateOne) Save(ctx context.Context) (*ContactMechType, error) {
	var (
		err  error
		node *ContactMechType
	)
	cmtuo.defaults()
	if len(cmtuo.hooks) == 0 {
		if err = cmtuo.check(); err != nil {
			return nil, err
		}
		node, err = cmtuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ContactMechTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cmtuo.check(); err != nil {
				return nil, err
			}
			cmtuo.mutation = mutation
			node, err = cmtuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cmtuo.hooks) - 1; i >= 0; i-- {
			mut = cmtuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cmtuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cmtuo *ContactMechTypeUpdateOne) SaveX(ctx context.Context) *ContactMechType {
	node, err := cmtuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cmtuo *ContactMechTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := cmtuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmtuo *ContactMechTypeUpdateOne) ExecX(ctx context.Context) {
	if err := cmtuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cmtuo *ContactMechTypeUpdateOne) defaults() {
	if _, ok := cmtuo.mutation.UpdateTime(); !ok {
		v := contactmechtype.UpdateDefaultUpdateTime()
		cmtuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cmtuo *ContactMechTypeUpdateOne) check() error {
	if v, ok := cmtuo.mutation.HasTable(); ok {
		if err := contactmechtype.HasTableValidator(v); err != nil {
			return &ValidationError{Name: "has_table", err: fmt.Errorf("ent: validator failed for field \"has_table\": %w", err)}
		}
	}
	return nil
}

func (cmtuo *ContactMechTypeUpdateOne) sqlSave(ctx context.Context) (_node *ContactMechType, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   contactmechtype.Table,
			Columns: contactmechtype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: contactmechtype.FieldID,
			},
		},
	}
	id, ok := cmtuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ContactMechType.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := cmtuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, contactmechtype.FieldID)
		for _, f := range fields {
			if !contactmechtype.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != contactmechtype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cmtuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cmtuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: contactmechtype.FieldUpdateTime,
		})
	}
	if value, ok := cmtuo.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: contactmechtype.FieldStringRef,
		})
	}
	if cmtuo.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: contactmechtype.FieldStringRef,
		})
	}
	if value, ok := cmtuo.mutation.HasTable(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: contactmechtype.FieldHasTable,
		})
	}
	if cmtuo.mutation.HasTableCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: contactmechtype.FieldHasTable,
		})
	}
	if value, ok := cmtuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: contactmechtype.FieldDescription,
		})
	}
	if cmtuo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: contactmechtype.FieldDescription,
		})
	}
	if cmtuo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contactmechtype.ParentTable,
			Columns: []string{contactmechtype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: contactmechtype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmtuo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contactmechtype.ParentTable,
			Columns: []string{contactmechtype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: contactmechtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cmtuo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   contactmechtype.ChildrenTable,
			Columns: []string{contactmechtype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: contactmechtype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmtuo.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !cmtuo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   contactmechtype.ChildrenTable,
			Columns: []string{contactmechtype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: contactmechtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmtuo.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   contactmechtype.ChildrenTable,
			Columns: []string{contactmechtype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: contactmechtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cmtuo.mutation.ContacMechTypeCommunicationEventTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   contactmechtype.ContacMechTypeCommunicationEventTypesTable,
			Columns: []string{contactmechtype.ContacMechTypeCommunicationEventTypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: communicationeventtype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmtuo.mutation.RemovedContacMechTypeCommunicationEventTypesIDs(); len(nodes) > 0 && !cmtuo.mutation.ContacMechTypeCommunicationEventTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   contactmechtype.ContacMechTypeCommunicationEventTypesTable,
			Columns: []string{contactmechtype.ContacMechTypeCommunicationEventTypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: communicationeventtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmtuo.mutation.ContacMechTypeCommunicationEventTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   contactmechtype.ContacMechTypeCommunicationEventTypesTable,
			Columns: []string{contactmechtype.ContacMechTypeCommunicationEventTypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: communicationeventtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cmtuo.mutation.ChildContactMechTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   contactmechtype.ChildContactMechTypesTable,
			Columns: contactmechtype.ChildContactMechTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: contactmechtype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmtuo.mutation.RemovedChildContactMechTypesIDs(); len(nodes) > 0 && !cmtuo.mutation.ChildContactMechTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   contactmechtype.ChildContactMechTypesTable,
			Columns: contactmechtype.ChildContactMechTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: contactmechtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmtuo.mutation.ChildContactMechTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   contactmechtype.ChildContactMechTypesTable,
			Columns: contactmechtype.ChildContactMechTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: contactmechtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cmtuo.mutation.ContactMechTypePurposesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   contactmechtype.ContactMechTypePurposesTable,
			Columns: []string{contactmechtype.ContactMechTypePurposesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: contactmechtypepurpose.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmtuo.mutation.RemovedContactMechTypePurposesIDs(); len(nodes) > 0 && !cmtuo.mutation.ContactMechTypePurposesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   contactmechtype.ContactMechTypePurposesTable,
			Columns: []string{contactmechtype.ContactMechTypePurposesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: contactmechtypepurpose.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmtuo.mutation.ContactMechTypePurposesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   contactmechtype.ContactMechTypePurposesTable,
			Columns: []string{contactmechtype.ContactMechTypePurposesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: contactmechtypepurpose.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ContactMechType{config: cmtuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cmtuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{contactmechtype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
