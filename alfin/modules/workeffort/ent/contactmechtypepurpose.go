// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/contactmechpurposetype"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/contactmechtype"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/contactmechtypepurpose"
)

// ContactMechTypePurpose is the model entity for the ContactMechTypePurpose schema.
type ContactMechTypePurpose struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// StringRef holds the value of the "string_ref" field.
	StringRef string `json:"string_ref,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ContactMechTypePurposeQuery when eager-loading is set.
	Edges                                                ContactMechTypePurposeEdges `json:"edges"`
	contact_mech_purpose_type_contact_mech_type_purposes *int
	contact_mech_type_contact_mech_type_purposes         *int
}

// ContactMechTypePurposeEdges holds the relations/edges for other nodes in the graph.
type ContactMechTypePurposeEdges struct {
	// ContactMechType holds the value of the contact_mech_type edge.
	ContactMechType *ContactMechType `json:"contact_mech_type,omitempty"`
	// ContactMechPurposeType holds the value of the contact_mech_purpose_type edge.
	ContactMechPurposeType *ContactMechPurposeType `json:"contact_mech_purpose_type,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ContactMechTypeOrErr returns the ContactMechType value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ContactMechTypePurposeEdges) ContactMechTypeOrErr() (*ContactMechType, error) {
	if e.loadedTypes[0] {
		if e.ContactMechType == nil {
			// The edge contact_mech_type was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: contactmechtype.Label}
		}
		return e.ContactMechType, nil
	}
	return nil, &NotLoadedError{edge: "contact_mech_type"}
}

// ContactMechPurposeTypeOrErr returns the ContactMechPurposeType value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ContactMechTypePurposeEdges) ContactMechPurposeTypeOrErr() (*ContactMechPurposeType, error) {
	if e.loadedTypes[1] {
		if e.ContactMechPurposeType == nil {
			// The edge contact_mech_purpose_type was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: contactmechpurposetype.Label}
		}
		return e.ContactMechPurposeType, nil
	}
	return nil, &NotLoadedError{edge: "contact_mech_purpose_type"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ContactMechTypePurpose) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case contactmechtypepurpose.FieldID:
			values[i] = new(sql.NullInt64)
		case contactmechtypepurpose.FieldStringRef:
			values[i] = new(sql.NullString)
		case contactmechtypepurpose.FieldCreateTime, contactmechtypepurpose.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case contactmechtypepurpose.ForeignKeys[0]: // contact_mech_purpose_type_contact_mech_type_purposes
			values[i] = new(sql.NullInt64)
		case contactmechtypepurpose.ForeignKeys[1]: // contact_mech_type_contact_mech_type_purposes
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ContactMechTypePurpose", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ContactMechTypePurpose fields.
func (cmtp *ContactMechTypePurpose) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case contactmechtypepurpose.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cmtp.ID = int(value.Int64)
		case contactmechtypepurpose.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				cmtp.CreateTime = value.Time
			}
		case contactmechtypepurpose.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				cmtp.UpdateTime = value.Time
			}
		case contactmechtypepurpose.FieldStringRef:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field string_ref", values[i])
			} else if value.Valid {
				cmtp.StringRef = value.String
			}
		case contactmechtypepurpose.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field contact_mech_purpose_type_contact_mech_type_purposes", value)
			} else if value.Valid {
				cmtp.contact_mech_purpose_type_contact_mech_type_purposes = new(int)
				*cmtp.contact_mech_purpose_type_contact_mech_type_purposes = int(value.Int64)
			}
		case contactmechtypepurpose.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field contact_mech_type_contact_mech_type_purposes", value)
			} else if value.Valid {
				cmtp.contact_mech_type_contact_mech_type_purposes = new(int)
				*cmtp.contact_mech_type_contact_mech_type_purposes = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryContactMechType queries the "contact_mech_type" edge of the ContactMechTypePurpose entity.
func (cmtp *ContactMechTypePurpose) QueryContactMechType() *ContactMechTypeQuery {
	return (&ContactMechTypePurposeClient{config: cmtp.config}).QueryContactMechType(cmtp)
}

// QueryContactMechPurposeType queries the "contact_mech_purpose_type" edge of the ContactMechTypePurpose entity.
func (cmtp *ContactMechTypePurpose) QueryContactMechPurposeType() *ContactMechPurposeTypeQuery {
	return (&ContactMechTypePurposeClient{config: cmtp.config}).QueryContactMechPurposeType(cmtp)
}

// Update returns a builder for updating this ContactMechTypePurpose.
// Note that you need to call ContactMechTypePurpose.Unwrap() before calling this method if this ContactMechTypePurpose
// was returned from a transaction, and the transaction was committed or rolled back.
func (cmtp *ContactMechTypePurpose) Update() *ContactMechTypePurposeUpdateOne {
	return (&ContactMechTypePurposeClient{config: cmtp.config}).UpdateOne(cmtp)
}

// Unwrap unwraps the ContactMechTypePurpose entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cmtp *ContactMechTypePurpose) Unwrap() *ContactMechTypePurpose {
	tx, ok := cmtp.config.driver.(*txDriver)
	if !ok {
		panic("ent: ContactMechTypePurpose is not a transactional entity")
	}
	cmtp.config.driver = tx.drv
	return cmtp
}

// String implements the fmt.Stringer.
func (cmtp *ContactMechTypePurpose) String() string {
	var builder strings.Builder
	builder.WriteString("ContactMechTypePurpose(")
	builder.WriteString(fmt.Sprintf("id=%v", cmtp.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(cmtp.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(cmtp.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", string_ref=")
	builder.WriteString(cmtp.StringRef)
	builder.WriteByte(')')
	return builder.String()
}

// ContactMechTypePurposes is a parsable slice of ContactMechTypePurpose.
type ContactMechTypePurposes []*ContactMechTypePurpose

func (cmtp ContactMechTypePurposes) config(cfg config) {
	for _i := range cmtp {
		cmtp[_i].config = cfg
	}
}
