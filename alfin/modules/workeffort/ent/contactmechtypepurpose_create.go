// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/contactmechpurposetype"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/contactmechtype"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/contactmechtypepurpose"
)

// ContactMechTypePurposeCreate is the builder for creating a ContactMechTypePurpose entity.
type ContactMechTypePurposeCreate struct {
	config
	mutation *ContactMechTypePurposeMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (cmtpc *ContactMechTypePurposeCreate) SetCreateTime(t time.Time) *ContactMechTypePurposeCreate {
	cmtpc.mutation.SetCreateTime(t)
	return cmtpc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (cmtpc *ContactMechTypePurposeCreate) SetNillableCreateTime(t *time.Time) *ContactMechTypePurposeCreate {
	if t != nil {
		cmtpc.SetCreateTime(*t)
	}
	return cmtpc
}

// SetUpdateTime sets the "update_time" field.
func (cmtpc *ContactMechTypePurposeCreate) SetUpdateTime(t time.Time) *ContactMechTypePurposeCreate {
	cmtpc.mutation.SetUpdateTime(t)
	return cmtpc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (cmtpc *ContactMechTypePurposeCreate) SetNillableUpdateTime(t *time.Time) *ContactMechTypePurposeCreate {
	if t != nil {
		cmtpc.SetUpdateTime(*t)
	}
	return cmtpc
}

// SetStringRef sets the "string_ref" field.
func (cmtpc *ContactMechTypePurposeCreate) SetStringRef(s string) *ContactMechTypePurposeCreate {
	cmtpc.mutation.SetStringRef(s)
	return cmtpc
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (cmtpc *ContactMechTypePurposeCreate) SetNillableStringRef(s *string) *ContactMechTypePurposeCreate {
	if s != nil {
		cmtpc.SetStringRef(*s)
	}
	return cmtpc
}

// SetContactMechTypeID sets the "contact_mech_type" edge to the ContactMechType entity by ID.
func (cmtpc *ContactMechTypePurposeCreate) SetContactMechTypeID(id int) *ContactMechTypePurposeCreate {
	cmtpc.mutation.SetContactMechTypeID(id)
	return cmtpc
}

// SetNillableContactMechTypeID sets the "contact_mech_type" edge to the ContactMechType entity by ID if the given value is not nil.
func (cmtpc *ContactMechTypePurposeCreate) SetNillableContactMechTypeID(id *int) *ContactMechTypePurposeCreate {
	if id != nil {
		cmtpc = cmtpc.SetContactMechTypeID(*id)
	}
	return cmtpc
}

// SetContactMechType sets the "contact_mech_type" edge to the ContactMechType entity.
func (cmtpc *ContactMechTypePurposeCreate) SetContactMechType(c *ContactMechType) *ContactMechTypePurposeCreate {
	return cmtpc.SetContactMechTypeID(c.ID)
}

// SetContactMechPurposeTypeID sets the "contact_mech_purpose_type" edge to the ContactMechPurposeType entity by ID.
func (cmtpc *ContactMechTypePurposeCreate) SetContactMechPurposeTypeID(id int) *ContactMechTypePurposeCreate {
	cmtpc.mutation.SetContactMechPurposeTypeID(id)
	return cmtpc
}

// SetNillableContactMechPurposeTypeID sets the "contact_mech_purpose_type" edge to the ContactMechPurposeType entity by ID if the given value is not nil.
func (cmtpc *ContactMechTypePurposeCreate) SetNillableContactMechPurposeTypeID(id *int) *ContactMechTypePurposeCreate {
	if id != nil {
		cmtpc = cmtpc.SetContactMechPurposeTypeID(*id)
	}
	return cmtpc
}

// SetContactMechPurposeType sets the "contact_mech_purpose_type" edge to the ContactMechPurposeType entity.
func (cmtpc *ContactMechTypePurposeCreate) SetContactMechPurposeType(c *ContactMechPurposeType) *ContactMechTypePurposeCreate {
	return cmtpc.SetContactMechPurposeTypeID(c.ID)
}

// Mutation returns the ContactMechTypePurposeMutation object of the builder.
func (cmtpc *ContactMechTypePurposeCreate) Mutation() *ContactMechTypePurposeMutation {
	return cmtpc.mutation
}

// Save creates the ContactMechTypePurpose in the database.
func (cmtpc *ContactMechTypePurposeCreate) Save(ctx context.Context) (*ContactMechTypePurpose, error) {
	var (
		err  error
		node *ContactMechTypePurpose
	)
	cmtpc.defaults()
	if len(cmtpc.hooks) == 0 {
		if err = cmtpc.check(); err != nil {
			return nil, err
		}
		node, err = cmtpc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ContactMechTypePurposeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cmtpc.check(); err != nil {
				return nil, err
			}
			cmtpc.mutation = mutation
			if node, err = cmtpc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(cmtpc.hooks) - 1; i >= 0; i-- {
			mut = cmtpc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cmtpc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cmtpc *ContactMechTypePurposeCreate) SaveX(ctx context.Context) *ContactMechTypePurpose {
	v, err := cmtpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (cmtpc *ContactMechTypePurposeCreate) defaults() {
	if _, ok := cmtpc.mutation.CreateTime(); !ok {
		v := contactmechtypepurpose.DefaultCreateTime()
		cmtpc.mutation.SetCreateTime(v)
	}
	if _, ok := cmtpc.mutation.UpdateTime(); !ok {
		v := contactmechtypepurpose.DefaultUpdateTime()
		cmtpc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cmtpc *ContactMechTypePurposeCreate) check() error {
	if _, ok := cmtpc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New("ent: missing required field \"create_time\"")}
	}
	if _, ok := cmtpc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New("ent: missing required field \"update_time\"")}
	}
	return nil
}

func (cmtpc *ContactMechTypePurposeCreate) sqlSave(ctx context.Context) (*ContactMechTypePurpose, error) {
	_node, _spec := cmtpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cmtpc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (cmtpc *ContactMechTypePurposeCreate) createSpec() (*ContactMechTypePurpose, *sqlgraph.CreateSpec) {
	var (
		_node = &ContactMechTypePurpose{config: cmtpc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: contactmechtypepurpose.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: contactmechtypepurpose.FieldID,
			},
		}
	)
	if value, ok := cmtpc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: contactmechtypepurpose.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := cmtpc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: contactmechtypepurpose.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := cmtpc.mutation.StringRef(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: contactmechtypepurpose.FieldStringRef,
		})
		_node.StringRef = value
	}
	if nodes := cmtpc.mutation.ContactMechTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contactmechtypepurpose.ContactMechTypeTable,
			Columns: []string{contactmechtypepurpose.ContactMechTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: contactmechtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.contact_mech_type_contact_mech_type_purposes = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cmtpc.mutation.ContactMechPurposeTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contactmechtypepurpose.ContactMechPurposeTypeTable,
			Columns: []string{contactmechtypepurpose.ContactMechPurposeTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: contactmechpurposetype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.contact_mech_purpose_type_contact_mech_type_purposes = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ContactMechTypePurposeCreateBulk is the builder for creating many ContactMechTypePurpose entities in bulk.
type ContactMechTypePurposeCreateBulk struct {
	config
	builders []*ContactMechTypePurposeCreate
}

// Save creates the ContactMechTypePurpose entities in the database.
func (cmtpcb *ContactMechTypePurposeCreateBulk) Save(ctx context.Context) ([]*ContactMechTypePurpose, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cmtpcb.builders))
	nodes := make([]*ContactMechTypePurpose, len(cmtpcb.builders))
	mutators := make([]Mutator, len(cmtpcb.builders))
	for i := range cmtpcb.builders {
		func(i int, root context.Context) {
			builder := cmtpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ContactMechTypePurposeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cmtpcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cmtpcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cmtpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cmtpcb *ContactMechTypePurposeCreateBulk) SaveX(ctx context.Context) []*ContactMechTypePurpose {
	v, err := cmtpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
