// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/contactmechpurposetype"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/contactmechtype"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/contactmechtypepurpose"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/predicate"
)

// ContactMechTypePurposeQuery is the builder for querying ContactMechTypePurpose entities.
type ContactMechTypePurposeQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.ContactMechTypePurpose
	// eager-loading edges.
	withContactMechType        *ContactMechTypeQuery
	withContactMechPurposeType *ContactMechPurposeTypeQuery
	withFKs                    bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ContactMechTypePurposeQuery builder.
func (cmtpq *ContactMechTypePurposeQuery) Where(ps ...predicate.ContactMechTypePurpose) *ContactMechTypePurposeQuery {
	cmtpq.predicates = append(cmtpq.predicates, ps...)
	return cmtpq
}

// Limit adds a limit step to the query.
func (cmtpq *ContactMechTypePurposeQuery) Limit(limit int) *ContactMechTypePurposeQuery {
	cmtpq.limit = &limit
	return cmtpq
}

// Offset adds an offset step to the query.
func (cmtpq *ContactMechTypePurposeQuery) Offset(offset int) *ContactMechTypePurposeQuery {
	cmtpq.offset = &offset
	return cmtpq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (cmtpq *ContactMechTypePurposeQuery) Unique(unique bool) *ContactMechTypePurposeQuery {
	cmtpq.unique = &unique
	return cmtpq
}

// Order adds an order step to the query.
func (cmtpq *ContactMechTypePurposeQuery) Order(o ...OrderFunc) *ContactMechTypePurposeQuery {
	cmtpq.order = append(cmtpq.order, o...)
	return cmtpq
}

// QueryContactMechType chains the current query on the "contact_mech_type" edge.
func (cmtpq *ContactMechTypePurposeQuery) QueryContactMechType() *ContactMechTypeQuery {
	query := &ContactMechTypeQuery{config: cmtpq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cmtpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cmtpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(contactmechtypepurpose.Table, contactmechtypepurpose.FieldID, selector),
			sqlgraph.To(contactmechtype.Table, contactmechtype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, contactmechtypepurpose.ContactMechTypeTable, contactmechtypepurpose.ContactMechTypeColumn),
		)
		fromU = sqlgraph.SetNeighbors(cmtpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryContactMechPurposeType chains the current query on the "contact_mech_purpose_type" edge.
func (cmtpq *ContactMechTypePurposeQuery) QueryContactMechPurposeType() *ContactMechPurposeTypeQuery {
	query := &ContactMechPurposeTypeQuery{config: cmtpq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cmtpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cmtpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(contactmechtypepurpose.Table, contactmechtypepurpose.FieldID, selector),
			sqlgraph.To(contactmechpurposetype.Table, contactmechpurposetype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, contactmechtypepurpose.ContactMechPurposeTypeTable, contactmechtypepurpose.ContactMechPurposeTypeColumn),
		)
		fromU = sqlgraph.SetNeighbors(cmtpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ContactMechTypePurpose entity from the query.
// Returns a *NotFoundError when no ContactMechTypePurpose was found.
func (cmtpq *ContactMechTypePurposeQuery) First(ctx context.Context) (*ContactMechTypePurpose, error) {
	nodes, err := cmtpq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{contactmechtypepurpose.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (cmtpq *ContactMechTypePurposeQuery) FirstX(ctx context.Context) *ContactMechTypePurpose {
	node, err := cmtpq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ContactMechTypePurpose ID from the query.
// Returns a *NotFoundError when no ContactMechTypePurpose ID was found.
func (cmtpq *ContactMechTypePurposeQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = cmtpq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{contactmechtypepurpose.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (cmtpq *ContactMechTypePurposeQuery) FirstIDX(ctx context.Context) int {
	id, err := cmtpq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ContactMechTypePurpose entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one ContactMechTypePurpose entity is not found.
// Returns a *NotFoundError when no ContactMechTypePurpose entities are found.
func (cmtpq *ContactMechTypePurposeQuery) Only(ctx context.Context) (*ContactMechTypePurpose, error) {
	nodes, err := cmtpq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{contactmechtypepurpose.Label}
	default:
		return nil, &NotSingularError{contactmechtypepurpose.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (cmtpq *ContactMechTypePurposeQuery) OnlyX(ctx context.Context) *ContactMechTypePurpose {
	node, err := cmtpq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ContactMechTypePurpose ID in the query.
// Returns a *NotSingularError when exactly one ContactMechTypePurpose ID is not found.
// Returns a *NotFoundError when no entities are found.
func (cmtpq *ContactMechTypePurposeQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = cmtpq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{contactmechtypepurpose.Label}
	default:
		err = &NotSingularError{contactmechtypepurpose.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (cmtpq *ContactMechTypePurposeQuery) OnlyIDX(ctx context.Context) int {
	id, err := cmtpq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ContactMechTypePurposes.
func (cmtpq *ContactMechTypePurposeQuery) All(ctx context.Context) ([]*ContactMechTypePurpose, error) {
	if err := cmtpq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return cmtpq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (cmtpq *ContactMechTypePurposeQuery) AllX(ctx context.Context) []*ContactMechTypePurpose {
	nodes, err := cmtpq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ContactMechTypePurpose IDs.
func (cmtpq *ContactMechTypePurposeQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := cmtpq.Select(contactmechtypepurpose.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (cmtpq *ContactMechTypePurposeQuery) IDsX(ctx context.Context) []int {
	ids, err := cmtpq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (cmtpq *ContactMechTypePurposeQuery) Count(ctx context.Context) (int, error) {
	if err := cmtpq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return cmtpq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (cmtpq *ContactMechTypePurposeQuery) CountX(ctx context.Context) int {
	count, err := cmtpq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (cmtpq *ContactMechTypePurposeQuery) Exist(ctx context.Context) (bool, error) {
	if err := cmtpq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return cmtpq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (cmtpq *ContactMechTypePurposeQuery) ExistX(ctx context.Context) bool {
	exist, err := cmtpq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ContactMechTypePurposeQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (cmtpq *ContactMechTypePurposeQuery) Clone() *ContactMechTypePurposeQuery {
	if cmtpq == nil {
		return nil
	}
	return &ContactMechTypePurposeQuery{
		config:                     cmtpq.config,
		limit:                      cmtpq.limit,
		offset:                     cmtpq.offset,
		order:                      append([]OrderFunc{}, cmtpq.order...),
		predicates:                 append([]predicate.ContactMechTypePurpose{}, cmtpq.predicates...),
		withContactMechType:        cmtpq.withContactMechType.Clone(),
		withContactMechPurposeType: cmtpq.withContactMechPurposeType.Clone(),
		// clone intermediate query.
		sql:  cmtpq.sql.Clone(),
		path: cmtpq.path,
	}
}

// WithContactMechType tells the query-builder to eager-load the nodes that are connected to
// the "contact_mech_type" edge. The optional arguments are used to configure the query builder of the edge.
func (cmtpq *ContactMechTypePurposeQuery) WithContactMechType(opts ...func(*ContactMechTypeQuery)) *ContactMechTypePurposeQuery {
	query := &ContactMechTypeQuery{config: cmtpq.config}
	for _, opt := range opts {
		opt(query)
	}
	cmtpq.withContactMechType = query
	return cmtpq
}

// WithContactMechPurposeType tells the query-builder to eager-load the nodes that are connected to
// the "contact_mech_purpose_type" edge. The optional arguments are used to configure the query builder of the edge.
func (cmtpq *ContactMechTypePurposeQuery) WithContactMechPurposeType(opts ...func(*ContactMechPurposeTypeQuery)) *ContactMechTypePurposeQuery {
	query := &ContactMechPurposeTypeQuery{config: cmtpq.config}
	for _, opt := range opts {
		opt(query)
	}
	cmtpq.withContactMechPurposeType = query
	return cmtpq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ContactMechTypePurpose.Query().
//		GroupBy(contactmechtypepurpose.FieldCreateTime).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (cmtpq *ContactMechTypePurposeQuery) GroupBy(field string, fields ...string) *ContactMechTypePurposeGroupBy {
	group := &ContactMechTypePurposeGroupBy{config: cmtpq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := cmtpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return cmtpq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//	}
//
//	client.ContactMechTypePurpose.Query().
//		Select(contactmechtypepurpose.FieldCreateTime).
//		Scan(ctx, &v)
//
func (cmtpq *ContactMechTypePurposeQuery) Select(field string, fields ...string) *ContactMechTypePurposeSelect {
	cmtpq.fields = append([]string{field}, fields...)
	return &ContactMechTypePurposeSelect{ContactMechTypePurposeQuery: cmtpq}
}

func (cmtpq *ContactMechTypePurposeQuery) prepareQuery(ctx context.Context) error {
	for _, f := range cmtpq.fields {
		if !contactmechtypepurpose.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if cmtpq.path != nil {
		prev, err := cmtpq.path(ctx)
		if err != nil {
			return err
		}
		cmtpq.sql = prev
	}
	return nil
}

func (cmtpq *ContactMechTypePurposeQuery) sqlAll(ctx context.Context) ([]*ContactMechTypePurpose, error) {
	var (
		nodes       = []*ContactMechTypePurpose{}
		withFKs     = cmtpq.withFKs
		_spec       = cmtpq.querySpec()
		loadedTypes = [2]bool{
			cmtpq.withContactMechType != nil,
			cmtpq.withContactMechPurposeType != nil,
		}
	)
	if cmtpq.withContactMechType != nil || cmtpq.withContactMechPurposeType != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, contactmechtypepurpose.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &ContactMechTypePurpose{config: cmtpq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, cmtpq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := cmtpq.withContactMechType; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*ContactMechTypePurpose)
		for i := range nodes {
			if nodes[i].contact_mech_type_contact_mech_type_purposes == nil {
				continue
			}
			fk := *nodes[i].contact_mech_type_contact_mech_type_purposes
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(contactmechtype.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "contact_mech_type_contact_mech_type_purposes" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.ContactMechType = n
			}
		}
	}

	if query := cmtpq.withContactMechPurposeType; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*ContactMechTypePurpose)
		for i := range nodes {
			if nodes[i].contact_mech_purpose_type_contact_mech_type_purposes == nil {
				continue
			}
			fk := *nodes[i].contact_mech_purpose_type_contact_mech_type_purposes
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(contactmechpurposetype.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "contact_mech_purpose_type_contact_mech_type_purposes" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.ContactMechPurposeType = n
			}
		}
	}

	return nodes, nil
}

func (cmtpq *ContactMechTypePurposeQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := cmtpq.querySpec()
	return sqlgraph.CountNodes(ctx, cmtpq.driver, _spec)
}

func (cmtpq *ContactMechTypePurposeQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := cmtpq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (cmtpq *ContactMechTypePurposeQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   contactmechtypepurpose.Table,
			Columns: contactmechtypepurpose.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: contactmechtypepurpose.FieldID,
			},
		},
		From:   cmtpq.sql,
		Unique: true,
	}
	if unique := cmtpq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := cmtpq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, contactmechtypepurpose.FieldID)
		for i := range fields {
			if fields[i] != contactmechtypepurpose.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := cmtpq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := cmtpq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := cmtpq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := cmtpq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (cmtpq *ContactMechTypePurposeQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(cmtpq.driver.Dialect())
	t1 := builder.Table(contactmechtypepurpose.Table)
	columns := cmtpq.fields
	if len(columns) == 0 {
		columns = contactmechtypepurpose.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if cmtpq.sql != nil {
		selector = cmtpq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	for _, p := range cmtpq.predicates {
		p(selector)
	}
	for _, p := range cmtpq.order {
		p(selector)
	}
	if offset := cmtpq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := cmtpq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ContactMechTypePurposeGroupBy is the group-by builder for ContactMechTypePurpose entities.
type ContactMechTypePurposeGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (cmtpgb *ContactMechTypePurposeGroupBy) Aggregate(fns ...AggregateFunc) *ContactMechTypePurposeGroupBy {
	cmtpgb.fns = append(cmtpgb.fns, fns...)
	return cmtpgb
}

// Scan applies the group-by query and scans the result into the given value.
func (cmtpgb *ContactMechTypePurposeGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := cmtpgb.path(ctx)
	if err != nil {
		return err
	}
	cmtpgb.sql = query
	return cmtpgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (cmtpgb *ContactMechTypePurposeGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := cmtpgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (cmtpgb *ContactMechTypePurposeGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(cmtpgb.fields) > 1 {
		return nil, errors.New("ent: ContactMechTypePurposeGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := cmtpgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (cmtpgb *ContactMechTypePurposeGroupBy) StringsX(ctx context.Context) []string {
	v, err := cmtpgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (cmtpgb *ContactMechTypePurposeGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = cmtpgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{contactmechtypepurpose.Label}
	default:
		err = fmt.Errorf("ent: ContactMechTypePurposeGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (cmtpgb *ContactMechTypePurposeGroupBy) StringX(ctx context.Context) string {
	v, err := cmtpgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (cmtpgb *ContactMechTypePurposeGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(cmtpgb.fields) > 1 {
		return nil, errors.New("ent: ContactMechTypePurposeGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := cmtpgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (cmtpgb *ContactMechTypePurposeGroupBy) IntsX(ctx context.Context) []int {
	v, err := cmtpgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (cmtpgb *ContactMechTypePurposeGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = cmtpgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{contactmechtypepurpose.Label}
	default:
		err = fmt.Errorf("ent: ContactMechTypePurposeGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (cmtpgb *ContactMechTypePurposeGroupBy) IntX(ctx context.Context) int {
	v, err := cmtpgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (cmtpgb *ContactMechTypePurposeGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(cmtpgb.fields) > 1 {
		return nil, errors.New("ent: ContactMechTypePurposeGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := cmtpgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (cmtpgb *ContactMechTypePurposeGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := cmtpgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (cmtpgb *ContactMechTypePurposeGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = cmtpgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{contactmechtypepurpose.Label}
	default:
		err = fmt.Errorf("ent: ContactMechTypePurposeGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (cmtpgb *ContactMechTypePurposeGroupBy) Float64X(ctx context.Context) float64 {
	v, err := cmtpgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (cmtpgb *ContactMechTypePurposeGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(cmtpgb.fields) > 1 {
		return nil, errors.New("ent: ContactMechTypePurposeGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := cmtpgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (cmtpgb *ContactMechTypePurposeGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := cmtpgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (cmtpgb *ContactMechTypePurposeGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = cmtpgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{contactmechtypepurpose.Label}
	default:
		err = fmt.Errorf("ent: ContactMechTypePurposeGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (cmtpgb *ContactMechTypePurposeGroupBy) BoolX(ctx context.Context) bool {
	v, err := cmtpgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (cmtpgb *ContactMechTypePurposeGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range cmtpgb.fields {
		if !contactmechtypepurpose.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := cmtpgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cmtpgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (cmtpgb *ContactMechTypePurposeGroupBy) sqlQuery() *sql.Selector {
	selector := cmtpgb.sql.Select()
	aggregation := make([]string, 0, len(cmtpgb.fns))
	for _, fn := range cmtpgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(cmtpgb.fields)+len(cmtpgb.fns))
		for _, f := range cmtpgb.fields {
			columns = append(columns, selector.C(f))
		}
		for _, c := range aggregation {
			columns = append(columns, c)
		}
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(cmtpgb.fields...)...)
}

// ContactMechTypePurposeSelect is the builder for selecting fields of ContactMechTypePurpose entities.
type ContactMechTypePurposeSelect struct {
	*ContactMechTypePurposeQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (cmtps *ContactMechTypePurposeSelect) Scan(ctx context.Context, v interface{}) error {
	if err := cmtps.prepareQuery(ctx); err != nil {
		return err
	}
	cmtps.sql = cmtps.ContactMechTypePurposeQuery.sqlQuery(ctx)
	return cmtps.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (cmtps *ContactMechTypePurposeSelect) ScanX(ctx context.Context, v interface{}) {
	if err := cmtps.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (cmtps *ContactMechTypePurposeSelect) Strings(ctx context.Context) ([]string, error) {
	if len(cmtps.fields) > 1 {
		return nil, errors.New("ent: ContactMechTypePurposeSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := cmtps.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (cmtps *ContactMechTypePurposeSelect) StringsX(ctx context.Context) []string {
	v, err := cmtps.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (cmtps *ContactMechTypePurposeSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = cmtps.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{contactmechtypepurpose.Label}
	default:
		err = fmt.Errorf("ent: ContactMechTypePurposeSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (cmtps *ContactMechTypePurposeSelect) StringX(ctx context.Context) string {
	v, err := cmtps.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (cmtps *ContactMechTypePurposeSelect) Ints(ctx context.Context) ([]int, error) {
	if len(cmtps.fields) > 1 {
		return nil, errors.New("ent: ContactMechTypePurposeSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := cmtps.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (cmtps *ContactMechTypePurposeSelect) IntsX(ctx context.Context) []int {
	v, err := cmtps.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (cmtps *ContactMechTypePurposeSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = cmtps.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{contactmechtypepurpose.Label}
	default:
		err = fmt.Errorf("ent: ContactMechTypePurposeSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (cmtps *ContactMechTypePurposeSelect) IntX(ctx context.Context) int {
	v, err := cmtps.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (cmtps *ContactMechTypePurposeSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(cmtps.fields) > 1 {
		return nil, errors.New("ent: ContactMechTypePurposeSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := cmtps.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (cmtps *ContactMechTypePurposeSelect) Float64sX(ctx context.Context) []float64 {
	v, err := cmtps.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (cmtps *ContactMechTypePurposeSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = cmtps.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{contactmechtypepurpose.Label}
	default:
		err = fmt.Errorf("ent: ContactMechTypePurposeSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (cmtps *ContactMechTypePurposeSelect) Float64X(ctx context.Context) float64 {
	v, err := cmtps.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (cmtps *ContactMechTypePurposeSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(cmtps.fields) > 1 {
		return nil, errors.New("ent: ContactMechTypePurposeSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := cmtps.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (cmtps *ContactMechTypePurposeSelect) BoolsX(ctx context.Context) []bool {
	v, err := cmtps.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (cmtps *ContactMechTypePurposeSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = cmtps.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{contactmechtypepurpose.Label}
	default:
		err = fmt.Errorf("ent: ContactMechTypePurposeSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (cmtps *ContactMechTypePurposeSelect) BoolX(ctx context.Context) bool {
	v, err := cmtps.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (cmtps *ContactMechTypePurposeSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := cmtps.sql.Query()
	if err := cmtps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
