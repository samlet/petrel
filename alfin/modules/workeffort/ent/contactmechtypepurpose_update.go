// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/contactmechpurposetype"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/contactmechtype"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/contactmechtypepurpose"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/predicate"
)

// ContactMechTypePurposeUpdate is the builder for updating ContactMechTypePurpose entities.
type ContactMechTypePurposeUpdate struct {
	config
	hooks    []Hook
	mutation *ContactMechTypePurposeMutation
}

// Where adds a new predicate for the ContactMechTypePurposeUpdate builder.
func (cmtpu *ContactMechTypePurposeUpdate) Where(ps ...predicate.ContactMechTypePurpose) *ContactMechTypePurposeUpdate {
	cmtpu.mutation.predicates = append(cmtpu.mutation.predicates, ps...)
	return cmtpu
}

// SetStringRef sets the "string_ref" field.
func (cmtpu *ContactMechTypePurposeUpdate) SetStringRef(s string) *ContactMechTypePurposeUpdate {
	cmtpu.mutation.SetStringRef(s)
	return cmtpu
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (cmtpu *ContactMechTypePurposeUpdate) SetNillableStringRef(s *string) *ContactMechTypePurposeUpdate {
	if s != nil {
		cmtpu.SetStringRef(*s)
	}
	return cmtpu
}

// ClearStringRef clears the value of the "string_ref" field.
func (cmtpu *ContactMechTypePurposeUpdate) ClearStringRef() *ContactMechTypePurposeUpdate {
	cmtpu.mutation.ClearStringRef()
	return cmtpu
}

// SetContactMechTypeID sets the "contact_mech_type" edge to the ContactMechType entity by ID.
func (cmtpu *ContactMechTypePurposeUpdate) SetContactMechTypeID(id int) *ContactMechTypePurposeUpdate {
	cmtpu.mutation.SetContactMechTypeID(id)
	return cmtpu
}

// SetNillableContactMechTypeID sets the "contact_mech_type" edge to the ContactMechType entity by ID if the given value is not nil.
func (cmtpu *ContactMechTypePurposeUpdate) SetNillableContactMechTypeID(id *int) *ContactMechTypePurposeUpdate {
	if id != nil {
		cmtpu = cmtpu.SetContactMechTypeID(*id)
	}
	return cmtpu
}

// SetContactMechType sets the "contact_mech_type" edge to the ContactMechType entity.
func (cmtpu *ContactMechTypePurposeUpdate) SetContactMechType(c *ContactMechType) *ContactMechTypePurposeUpdate {
	return cmtpu.SetContactMechTypeID(c.ID)
}

// SetContactMechPurposeTypeID sets the "contact_mech_purpose_type" edge to the ContactMechPurposeType entity by ID.
func (cmtpu *ContactMechTypePurposeUpdate) SetContactMechPurposeTypeID(id int) *ContactMechTypePurposeUpdate {
	cmtpu.mutation.SetContactMechPurposeTypeID(id)
	return cmtpu
}

// SetNillableContactMechPurposeTypeID sets the "contact_mech_purpose_type" edge to the ContactMechPurposeType entity by ID if the given value is not nil.
func (cmtpu *ContactMechTypePurposeUpdate) SetNillableContactMechPurposeTypeID(id *int) *ContactMechTypePurposeUpdate {
	if id != nil {
		cmtpu = cmtpu.SetContactMechPurposeTypeID(*id)
	}
	return cmtpu
}

// SetContactMechPurposeType sets the "contact_mech_purpose_type" edge to the ContactMechPurposeType entity.
func (cmtpu *ContactMechTypePurposeUpdate) SetContactMechPurposeType(c *ContactMechPurposeType) *ContactMechTypePurposeUpdate {
	return cmtpu.SetContactMechPurposeTypeID(c.ID)
}

// Mutation returns the ContactMechTypePurposeMutation object of the builder.
func (cmtpu *ContactMechTypePurposeUpdate) Mutation() *ContactMechTypePurposeMutation {
	return cmtpu.mutation
}

// ClearContactMechType clears the "contact_mech_type" edge to the ContactMechType entity.
func (cmtpu *ContactMechTypePurposeUpdate) ClearContactMechType() *ContactMechTypePurposeUpdate {
	cmtpu.mutation.ClearContactMechType()
	return cmtpu
}

// ClearContactMechPurposeType clears the "contact_mech_purpose_type" edge to the ContactMechPurposeType entity.
func (cmtpu *ContactMechTypePurposeUpdate) ClearContactMechPurposeType() *ContactMechTypePurposeUpdate {
	cmtpu.mutation.ClearContactMechPurposeType()
	return cmtpu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cmtpu *ContactMechTypePurposeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	cmtpu.defaults()
	if len(cmtpu.hooks) == 0 {
		affected, err = cmtpu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ContactMechTypePurposeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cmtpu.mutation = mutation
			affected, err = cmtpu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cmtpu.hooks) - 1; i >= 0; i-- {
			mut = cmtpu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cmtpu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cmtpu *ContactMechTypePurposeUpdate) SaveX(ctx context.Context) int {
	affected, err := cmtpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cmtpu *ContactMechTypePurposeUpdate) Exec(ctx context.Context) error {
	_, err := cmtpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmtpu *ContactMechTypePurposeUpdate) ExecX(ctx context.Context) {
	if err := cmtpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cmtpu *ContactMechTypePurposeUpdate) defaults() {
	if _, ok := cmtpu.mutation.UpdateTime(); !ok {
		v := contactmechtypepurpose.UpdateDefaultUpdateTime()
		cmtpu.mutation.SetUpdateTime(v)
	}
}

func (cmtpu *ContactMechTypePurposeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   contactmechtypepurpose.Table,
			Columns: contactmechtypepurpose.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: contactmechtypepurpose.FieldID,
			},
		},
	}
	if ps := cmtpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cmtpu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: contactmechtypepurpose.FieldUpdateTime,
		})
	}
	if value, ok := cmtpu.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: contactmechtypepurpose.FieldStringRef,
		})
	}
	if cmtpu.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: contactmechtypepurpose.FieldStringRef,
		})
	}
	if cmtpu.mutation.ContactMechTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contactmechtypepurpose.ContactMechTypeTable,
			Columns: []string{contactmechtypepurpose.ContactMechTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: contactmechtype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmtpu.mutation.ContactMechTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contactmechtypepurpose.ContactMechTypeTable,
			Columns: []string{contactmechtypepurpose.ContactMechTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: contactmechtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cmtpu.mutation.ContactMechPurposeTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contactmechtypepurpose.ContactMechPurposeTypeTable,
			Columns: []string{contactmechtypepurpose.ContactMechPurposeTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: contactmechpurposetype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmtpu.mutation.ContactMechPurposeTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contactmechtypepurpose.ContactMechPurposeTypeTable,
			Columns: []string{contactmechtypepurpose.ContactMechPurposeTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: contactmechpurposetype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cmtpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{contactmechtypepurpose.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ContactMechTypePurposeUpdateOne is the builder for updating a single ContactMechTypePurpose entity.
type ContactMechTypePurposeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ContactMechTypePurposeMutation
}

// SetStringRef sets the "string_ref" field.
func (cmtpuo *ContactMechTypePurposeUpdateOne) SetStringRef(s string) *ContactMechTypePurposeUpdateOne {
	cmtpuo.mutation.SetStringRef(s)
	return cmtpuo
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (cmtpuo *ContactMechTypePurposeUpdateOne) SetNillableStringRef(s *string) *ContactMechTypePurposeUpdateOne {
	if s != nil {
		cmtpuo.SetStringRef(*s)
	}
	return cmtpuo
}

// ClearStringRef clears the value of the "string_ref" field.
func (cmtpuo *ContactMechTypePurposeUpdateOne) ClearStringRef() *ContactMechTypePurposeUpdateOne {
	cmtpuo.mutation.ClearStringRef()
	return cmtpuo
}

// SetContactMechTypeID sets the "contact_mech_type" edge to the ContactMechType entity by ID.
func (cmtpuo *ContactMechTypePurposeUpdateOne) SetContactMechTypeID(id int) *ContactMechTypePurposeUpdateOne {
	cmtpuo.mutation.SetContactMechTypeID(id)
	return cmtpuo
}

// SetNillableContactMechTypeID sets the "contact_mech_type" edge to the ContactMechType entity by ID if the given value is not nil.
func (cmtpuo *ContactMechTypePurposeUpdateOne) SetNillableContactMechTypeID(id *int) *ContactMechTypePurposeUpdateOne {
	if id != nil {
		cmtpuo = cmtpuo.SetContactMechTypeID(*id)
	}
	return cmtpuo
}

// SetContactMechType sets the "contact_mech_type" edge to the ContactMechType entity.
func (cmtpuo *ContactMechTypePurposeUpdateOne) SetContactMechType(c *ContactMechType) *ContactMechTypePurposeUpdateOne {
	return cmtpuo.SetContactMechTypeID(c.ID)
}

// SetContactMechPurposeTypeID sets the "contact_mech_purpose_type" edge to the ContactMechPurposeType entity by ID.
func (cmtpuo *ContactMechTypePurposeUpdateOne) SetContactMechPurposeTypeID(id int) *ContactMechTypePurposeUpdateOne {
	cmtpuo.mutation.SetContactMechPurposeTypeID(id)
	return cmtpuo
}

// SetNillableContactMechPurposeTypeID sets the "contact_mech_purpose_type" edge to the ContactMechPurposeType entity by ID if the given value is not nil.
func (cmtpuo *ContactMechTypePurposeUpdateOne) SetNillableContactMechPurposeTypeID(id *int) *ContactMechTypePurposeUpdateOne {
	if id != nil {
		cmtpuo = cmtpuo.SetContactMechPurposeTypeID(*id)
	}
	return cmtpuo
}

// SetContactMechPurposeType sets the "contact_mech_purpose_type" edge to the ContactMechPurposeType entity.
func (cmtpuo *ContactMechTypePurposeUpdateOne) SetContactMechPurposeType(c *ContactMechPurposeType) *ContactMechTypePurposeUpdateOne {
	return cmtpuo.SetContactMechPurposeTypeID(c.ID)
}

// Mutation returns the ContactMechTypePurposeMutation object of the builder.
func (cmtpuo *ContactMechTypePurposeUpdateOne) Mutation() *ContactMechTypePurposeMutation {
	return cmtpuo.mutation
}

// ClearContactMechType clears the "contact_mech_type" edge to the ContactMechType entity.
func (cmtpuo *ContactMechTypePurposeUpdateOne) ClearContactMechType() *ContactMechTypePurposeUpdateOne {
	cmtpuo.mutation.ClearContactMechType()
	return cmtpuo
}

// ClearContactMechPurposeType clears the "contact_mech_purpose_type" edge to the ContactMechPurposeType entity.
func (cmtpuo *ContactMechTypePurposeUpdateOne) ClearContactMechPurposeType() *ContactMechTypePurposeUpdateOne {
	cmtpuo.mutation.ClearContactMechPurposeType()
	return cmtpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cmtpuo *ContactMechTypePurposeUpdateOne) Select(field string, fields ...string) *ContactMechTypePurposeUpdateOne {
	cmtpuo.fields = append([]string{field}, fields...)
	return cmtpuo
}

// Save executes the query and returns the updated ContactMechTypePurpose entity.
func (cmtpuo *ContactMechTypePurposeUpdateOne) Save(ctx context.Context) (*ContactMechTypePurpose, error) {
	var (
		err  error
		node *ContactMechTypePurpose
	)
	cmtpuo.defaults()
	if len(cmtpuo.hooks) == 0 {
		node, err = cmtpuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ContactMechTypePurposeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cmtpuo.mutation = mutation
			node, err = cmtpuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cmtpuo.hooks) - 1; i >= 0; i-- {
			mut = cmtpuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cmtpuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cmtpuo *ContactMechTypePurposeUpdateOne) SaveX(ctx context.Context) *ContactMechTypePurpose {
	node, err := cmtpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cmtpuo *ContactMechTypePurposeUpdateOne) Exec(ctx context.Context) error {
	_, err := cmtpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmtpuo *ContactMechTypePurposeUpdateOne) ExecX(ctx context.Context) {
	if err := cmtpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cmtpuo *ContactMechTypePurposeUpdateOne) defaults() {
	if _, ok := cmtpuo.mutation.UpdateTime(); !ok {
		v := contactmechtypepurpose.UpdateDefaultUpdateTime()
		cmtpuo.mutation.SetUpdateTime(v)
	}
}

func (cmtpuo *ContactMechTypePurposeUpdateOne) sqlSave(ctx context.Context) (_node *ContactMechTypePurpose, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   contactmechtypepurpose.Table,
			Columns: contactmechtypepurpose.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: contactmechtypepurpose.FieldID,
			},
		},
	}
	id, ok := cmtpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ContactMechTypePurpose.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := cmtpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, contactmechtypepurpose.FieldID)
		for _, f := range fields {
			if !contactmechtypepurpose.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != contactmechtypepurpose.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cmtpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cmtpuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: contactmechtypepurpose.FieldUpdateTime,
		})
	}
	if value, ok := cmtpuo.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: contactmechtypepurpose.FieldStringRef,
		})
	}
	if cmtpuo.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: contactmechtypepurpose.FieldStringRef,
		})
	}
	if cmtpuo.mutation.ContactMechTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contactmechtypepurpose.ContactMechTypeTable,
			Columns: []string{contactmechtypepurpose.ContactMechTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: contactmechtype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmtpuo.mutation.ContactMechTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contactmechtypepurpose.ContactMechTypeTable,
			Columns: []string{contactmechtypepurpose.ContactMechTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: contactmechtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cmtpuo.mutation.ContactMechPurposeTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contactmechtypepurpose.ContactMechPurposeTypeTable,
			Columns: []string{contactmechtypepurpose.ContactMechPurposeTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: contactmechpurposetype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmtpuo.mutation.ContactMechPurposeTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contactmechtypepurpose.ContactMechPurposeTypeTable,
			Columns: []string{contactmechtypepurpose.ContactMechPurposeTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: contactmechpurposetype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ContactMechTypePurpose{config: cmtpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cmtpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{contactmechtypepurpose.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
