// Code generated by entc, DO NOT EDIT.

package enumeration

import (
	"time"
)

const (
	// Label holds the string label denoting the enumeration type in the database.
	Label = "enumeration"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldStringRef holds the string denoting the string_ref field in the database.
	FieldStringRef = "string_ref"
	// FieldEnumCode holds the string denoting the enum_code field in the database.
	FieldEnumCode = "enum_code"
	// FieldSequenceID holds the string denoting the sequence_id field in the database.
	FieldSequenceID = "sequence_id"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// EdgeEnumerationType holds the string denoting the enumeration_type edge name in mutations.
	EdgeEnumerationType = "enumeration_type"
	// EdgeClassFixedAssets holds the string denoting the class_fixed_assets edge name in mutations.
	EdgeClassFixedAssets = "class_fixed_assets"
	// EdgeEmploymentStatusPeople holds the string denoting the employment_status_people edge name in mutations.
	EdgeEmploymentStatusPeople = "employment_status_people"
	// EdgeResidenceStatusPeople holds the string denoting the residence_status_people edge name in mutations.
	EdgeResidenceStatusPeople = "residence_status_people"
	// EdgeMaritalStatusPeople holds the string denoting the marital_status_people edge name in mutations.
	EdgeMaritalStatusPeople = "marital_status_people"
	// EdgeScopeWorkEfforts holds the string denoting the scope_work_efforts edge name in mutations.
	EdgeScopeWorkEfforts = "scope_work_efforts"
	// EdgeExpectationWorkEffortPartyAssignments holds the string denoting the expectation_work_effort_party_assignments edge name in mutations.
	EdgeExpectationWorkEffortPartyAssignments = "expectation_work_effort_party_assignments"
	// EdgeDelegateReasonWorkEffortPartyAssignments holds the string denoting the delegate_reason_work_effort_party_assignments edge name in mutations.
	EdgeDelegateReasonWorkEffortPartyAssignments = "delegate_reason_work_effort_party_assignments"
	// Table holds the table name of the enumeration in the database.
	Table = "enumerations"
	// EnumerationTypeTable is the table the holds the enumeration_type relation/edge.
	EnumerationTypeTable = "enumerations"
	// EnumerationTypeInverseTable is the table name for the EnumerationType entity.
	// It exists in this package in order to avoid circular dependency with the "enumerationtype" package.
	EnumerationTypeInverseTable = "enumeration_types"
	// EnumerationTypeColumn is the table column denoting the enumeration_type relation/edge.
	EnumerationTypeColumn = "enumeration_type_enumerations"
	// ClassFixedAssetsTable is the table the holds the class_fixed_assets relation/edge.
	ClassFixedAssetsTable = "fixed_assets"
	// ClassFixedAssetsInverseTable is the table name for the FixedAsset entity.
	// It exists in this package in order to avoid circular dependency with the "fixedasset" package.
	ClassFixedAssetsInverseTable = "fixed_assets"
	// ClassFixedAssetsColumn is the table column denoting the class_fixed_assets relation/edge.
	ClassFixedAssetsColumn = "enumeration_class_fixed_assets"
	// EmploymentStatusPeopleTable is the table the holds the employment_status_people relation/edge.
	EmploymentStatusPeopleTable = "persons"
	// EmploymentStatusPeopleInverseTable is the table name for the Person entity.
	// It exists in this package in order to avoid circular dependency with the "person" package.
	EmploymentStatusPeopleInverseTable = "persons"
	// EmploymentStatusPeopleColumn is the table column denoting the employment_status_people relation/edge.
	EmploymentStatusPeopleColumn = "enumeration_employment_status_people"
	// ResidenceStatusPeopleTable is the table the holds the residence_status_people relation/edge.
	ResidenceStatusPeopleTable = "persons"
	// ResidenceStatusPeopleInverseTable is the table name for the Person entity.
	// It exists in this package in order to avoid circular dependency with the "person" package.
	ResidenceStatusPeopleInverseTable = "persons"
	// ResidenceStatusPeopleColumn is the table column denoting the residence_status_people relation/edge.
	ResidenceStatusPeopleColumn = "enumeration_residence_status_people"
	// MaritalStatusPeopleTable is the table the holds the marital_status_people relation/edge.
	MaritalStatusPeopleTable = "persons"
	// MaritalStatusPeopleInverseTable is the table name for the Person entity.
	// It exists in this package in order to avoid circular dependency with the "person" package.
	MaritalStatusPeopleInverseTable = "persons"
	// MaritalStatusPeopleColumn is the table column denoting the marital_status_people relation/edge.
	MaritalStatusPeopleColumn = "enumeration_marital_status_people"
	// ScopeWorkEffortsTable is the table the holds the scope_work_efforts relation/edge.
	ScopeWorkEffortsTable = "work_efforts"
	// ScopeWorkEffortsInverseTable is the table name for the WorkEffort entity.
	// It exists in this package in order to avoid circular dependency with the "workeffort" package.
	ScopeWorkEffortsInverseTable = "work_efforts"
	// ScopeWorkEffortsColumn is the table column denoting the scope_work_efforts relation/edge.
	ScopeWorkEffortsColumn = "enumeration_scope_work_efforts"
	// ExpectationWorkEffortPartyAssignmentsTable is the table the holds the expectation_work_effort_party_assignments relation/edge.
	ExpectationWorkEffortPartyAssignmentsTable = "work_effort_party_assignments"
	// ExpectationWorkEffortPartyAssignmentsInverseTable is the table name for the WorkEffortPartyAssignment entity.
	// It exists in this package in order to avoid circular dependency with the "workeffortpartyassignment" package.
	ExpectationWorkEffortPartyAssignmentsInverseTable = "work_effort_party_assignments"
	// ExpectationWorkEffortPartyAssignmentsColumn is the table column denoting the expectation_work_effort_party_assignments relation/edge.
	ExpectationWorkEffortPartyAssignmentsColumn = "enumeration_expectation_work_effort_party_assignments"
	// DelegateReasonWorkEffortPartyAssignmentsTable is the table the holds the delegate_reason_work_effort_party_assignments relation/edge.
	DelegateReasonWorkEffortPartyAssignmentsTable = "work_effort_party_assignments"
	// DelegateReasonWorkEffortPartyAssignmentsInverseTable is the table name for the WorkEffortPartyAssignment entity.
	// It exists in this package in order to avoid circular dependency with the "workeffortpartyassignment" package.
	DelegateReasonWorkEffortPartyAssignmentsInverseTable = "work_effort_party_assignments"
	// DelegateReasonWorkEffortPartyAssignmentsColumn is the table column denoting the delegate_reason_work_effort_party_assignments relation/edge.
	DelegateReasonWorkEffortPartyAssignmentsColumn = "enumeration_delegate_reason_work_effort_party_assignments"
)

// Columns holds all SQL columns for enumeration fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldStringRef,
	FieldEnumCode,
	FieldSequenceID,
	FieldDescription,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "enumerations"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"enumeration_type_enumerations",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
)
