// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/enumeration"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/enumerationtype"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/fixedasset"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/person"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/predicate"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/workeffort"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/workeffortpartyassignment"
)

// EnumerationUpdate is the builder for updating Enumeration entities.
type EnumerationUpdate struct {
	config
	hooks    []Hook
	mutation *EnumerationMutation
}

// Where adds a new predicate for the EnumerationUpdate builder.
func (eu *EnumerationUpdate) Where(ps ...predicate.Enumeration) *EnumerationUpdate {
	eu.mutation.predicates = append(eu.mutation.predicates, ps...)
	return eu
}

// SetStringRef sets the "string_ref" field.
func (eu *EnumerationUpdate) SetStringRef(s string) *EnumerationUpdate {
	eu.mutation.SetStringRef(s)
	return eu
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (eu *EnumerationUpdate) SetNillableStringRef(s *string) *EnumerationUpdate {
	if s != nil {
		eu.SetStringRef(*s)
	}
	return eu
}

// ClearStringRef clears the value of the "string_ref" field.
func (eu *EnumerationUpdate) ClearStringRef() *EnumerationUpdate {
	eu.mutation.ClearStringRef()
	return eu
}

// SetEnumCode sets the "enum_code" field.
func (eu *EnumerationUpdate) SetEnumCode(s string) *EnumerationUpdate {
	eu.mutation.SetEnumCode(s)
	return eu
}

// SetNillableEnumCode sets the "enum_code" field if the given value is not nil.
func (eu *EnumerationUpdate) SetNillableEnumCode(s *string) *EnumerationUpdate {
	if s != nil {
		eu.SetEnumCode(*s)
	}
	return eu
}

// ClearEnumCode clears the value of the "enum_code" field.
func (eu *EnumerationUpdate) ClearEnumCode() *EnumerationUpdate {
	eu.mutation.ClearEnumCode()
	return eu
}

// SetSequenceID sets the "sequence_id" field.
func (eu *EnumerationUpdate) SetSequenceID(i int) *EnumerationUpdate {
	eu.mutation.ResetSequenceID()
	eu.mutation.SetSequenceID(i)
	return eu
}

// SetNillableSequenceID sets the "sequence_id" field if the given value is not nil.
func (eu *EnumerationUpdate) SetNillableSequenceID(i *int) *EnumerationUpdate {
	if i != nil {
		eu.SetSequenceID(*i)
	}
	return eu
}

// AddSequenceID adds i to the "sequence_id" field.
func (eu *EnumerationUpdate) AddSequenceID(i int) *EnumerationUpdate {
	eu.mutation.AddSequenceID(i)
	return eu
}

// ClearSequenceID clears the value of the "sequence_id" field.
func (eu *EnumerationUpdate) ClearSequenceID() *EnumerationUpdate {
	eu.mutation.ClearSequenceID()
	return eu
}

// SetDescription sets the "description" field.
func (eu *EnumerationUpdate) SetDescription(s string) *EnumerationUpdate {
	eu.mutation.SetDescription(s)
	return eu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (eu *EnumerationUpdate) SetNillableDescription(s *string) *EnumerationUpdate {
	if s != nil {
		eu.SetDescription(*s)
	}
	return eu
}

// ClearDescription clears the value of the "description" field.
func (eu *EnumerationUpdate) ClearDescription() *EnumerationUpdate {
	eu.mutation.ClearDescription()
	return eu
}

// SetEnumerationTypeID sets the "enumeration_type" edge to the EnumerationType entity by ID.
func (eu *EnumerationUpdate) SetEnumerationTypeID(id int) *EnumerationUpdate {
	eu.mutation.SetEnumerationTypeID(id)
	return eu
}

// SetNillableEnumerationTypeID sets the "enumeration_type" edge to the EnumerationType entity by ID if the given value is not nil.
func (eu *EnumerationUpdate) SetNillableEnumerationTypeID(id *int) *EnumerationUpdate {
	if id != nil {
		eu = eu.SetEnumerationTypeID(*id)
	}
	return eu
}

// SetEnumerationType sets the "enumeration_type" edge to the EnumerationType entity.
func (eu *EnumerationUpdate) SetEnumerationType(e *EnumerationType) *EnumerationUpdate {
	return eu.SetEnumerationTypeID(e.ID)
}

// AddClassFixedAssetIDs adds the "class_fixed_assets" edge to the FixedAsset entity by IDs.
func (eu *EnumerationUpdate) AddClassFixedAssetIDs(ids ...int) *EnumerationUpdate {
	eu.mutation.AddClassFixedAssetIDs(ids...)
	return eu
}

// AddClassFixedAssets adds the "class_fixed_assets" edges to the FixedAsset entity.
func (eu *EnumerationUpdate) AddClassFixedAssets(f ...*FixedAsset) *EnumerationUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return eu.AddClassFixedAssetIDs(ids...)
}

// AddEmploymentStatusPersonIDs adds the "employment_status_people" edge to the Person entity by IDs.
func (eu *EnumerationUpdate) AddEmploymentStatusPersonIDs(ids ...int) *EnumerationUpdate {
	eu.mutation.AddEmploymentStatusPersonIDs(ids...)
	return eu
}

// AddEmploymentStatusPeople adds the "employment_status_people" edges to the Person entity.
func (eu *EnumerationUpdate) AddEmploymentStatusPeople(p ...*Person) *EnumerationUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return eu.AddEmploymentStatusPersonIDs(ids...)
}

// AddResidenceStatusPersonIDs adds the "residence_status_people" edge to the Person entity by IDs.
func (eu *EnumerationUpdate) AddResidenceStatusPersonIDs(ids ...int) *EnumerationUpdate {
	eu.mutation.AddResidenceStatusPersonIDs(ids...)
	return eu
}

// AddResidenceStatusPeople adds the "residence_status_people" edges to the Person entity.
func (eu *EnumerationUpdate) AddResidenceStatusPeople(p ...*Person) *EnumerationUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return eu.AddResidenceStatusPersonIDs(ids...)
}

// AddMaritalStatusPersonIDs adds the "marital_status_people" edge to the Person entity by IDs.
func (eu *EnumerationUpdate) AddMaritalStatusPersonIDs(ids ...int) *EnumerationUpdate {
	eu.mutation.AddMaritalStatusPersonIDs(ids...)
	return eu
}

// AddMaritalStatusPeople adds the "marital_status_people" edges to the Person entity.
func (eu *EnumerationUpdate) AddMaritalStatusPeople(p ...*Person) *EnumerationUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return eu.AddMaritalStatusPersonIDs(ids...)
}

// AddScopeWorkEffortIDs adds the "scope_work_efforts" edge to the WorkEffort entity by IDs.
func (eu *EnumerationUpdate) AddScopeWorkEffortIDs(ids ...int) *EnumerationUpdate {
	eu.mutation.AddScopeWorkEffortIDs(ids...)
	return eu
}

// AddScopeWorkEfforts adds the "scope_work_efforts" edges to the WorkEffort entity.
func (eu *EnumerationUpdate) AddScopeWorkEfforts(w ...*WorkEffort) *EnumerationUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return eu.AddScopeWorkEffortIDs(ids...)
}

// AddExpectationWorkEffortPartyAssignmentIDs adds the "expectation_work_effort_party_assignments" edge to the WorkEffortPartyAssignment entity by IDs.
func (eu *EnumerationUpdate) AddExpectationWorkEffortPartyAssignmentIDs(ids ...int) *EnumerationUpdate {
	eu.mutation.AddExpectationWorkEffortPartyAssignmentIDs(ids...)
	return eu
}

// AddExpectationWorkEffortPartyAssignments adds the "expectation_work_effort_party_assignments" edges to the WorkEffortPartyAssignment entity.
func (eu *EnumerationUpdate) AddExpectationWorkEffortPartyAssignments(w ...*WorkEffortPartyAssignment) *EnumerationUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return eu.AddExpectationWorkEffortPartyAssignmentIDs(ids...)
}

// AddDelegateReasonWorkEffortPartyAssignmentIDs adds the "delegate_reason_work_effort_party_assignments" edge to the WorkEffortPartyAssignment entity by IDs.
func (eu *EnumerationUpdate) AddDelegateReasonWorkEffortPartyAssignmentIDs(ids ...int) *EnumerationUpdate {
	eu.mutation.AddDelegateReasonWorkEffortPartyAssignmentIDs(ids...)
	return eu
}

// AddDelegateReasonWorkEffortPartyAssignments adds the "delegate_reason_work_effort_party_assignments" edges to the WorkEffortPartyAssignment entity.
func (eu *EnumerationUpdate) AddDelegateReasonWorkEffortPartyAssignments(w ...*WorkEffortPartyAssignment) *EnumerationUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return eu.AddDelegateReasonWorkEffortPartyAssignmentIDs(ids...)
}

// Mutation returns the EnumerationMutation object of the builder.
func (eu *EnumerationUpdate) Mutation() *EnumerationMutation {
	return eu.mutation
}

// ClearEnumerationType clears the "enumeration_type" edge to the EnumerationType entity.
func (eu *EnumerationUpdate) ClearEnumerationType() *EnumerationUpdate {
	eu.mutation.ClearEnumerationType()
	return eu
}

// ClearClassFixedAssets clears all "class_fixed_assets" edges to the FixedAsset entity.
func (eu *EnumerationUpdate) ClearClassFixedAssets() *EnumerationUpdate {
	eu.mutation.ClearClassFixedAssets()
	return eu
}

// RemoveClassFixedAssetIDs removes the "class_fixed_assets" edge to FixedAsset entities by IDs.
func (eu *EnumerationUpdate) RemoveClassFixedAssetIDs(ids ...int) *EnumerationUpdate {
	eu.mutation.RemoveClassFixedAssetIDs(ids...)
	return eu
}

// RemoveClassFixedAssets removes "class_fixed_assets" edges to FixedAsset entities.
func (eu *EnumerationUpdate) RemoveClassFixedAssets(f ...*FixedAsset) *EnumerationUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return eu.RemoveClassFixedAssetIDs(ids...)
}

// ClearEmploymentStatusPeople clears all "employment_status_people" edges to the Person entity.
func (eu *EnumerationUpdate) ClearEmploymentStatusPeople() *EnumerationUpdate {
	eu.mutation.ClearEmploymentStatusPeople()
	return eu
}

// RemoveEmploymentStatusPersonIDs removes the "employment_status_people" edge to Person entities by IDs.
func (eu *EnumerationUpdate) RemoveEmploymentStatusPersonIDs(ids ...int) *EnumerationUpdate {
	eu.mutation.RemoveEmploymentStatusPersonIDs(ids...)
	return eu
}

// RemoveEmploymentStatusPeople removes "employment_status_people" edges to Person entities.
func (eu *EnumerationUpdate) RemoveEmploymentStatusPeople(p ...*Person) *EnumerationUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return eu.RemoveEmploymentStatusPersonIDs(ids...)
}

// ClearResidenceStatusPeople clears all "residence_status_people" edges to the Person entity.
func (eu *EnumerationUpdate) ClearResidenceStatusPeople() *EnumerationUpdate {
	eu.mutation.ClearResidenceStatusPeople()
	return eu
}

// RemoveResidenceStatusPersonIDs removes the "residence_status_people" edge to Person entities by IDs.
func (eu *EnumerationUpdate) RemoveResidenceStatusPersonIDs(ids ...int) *EnumerationUpdate {
	eu.mutation.RemoveResidenceStatusPersonIDs(ids...)
	return eu
}

// RemoveResidenceStatusPeople removes "residence_status_people" edges to Person entities.
func (eu *EnumerationUpdate) RemoveResidenceStatusPeople(p ...*Person) *EnumerationUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return eu.RemoveResidenceStatusPersonIDs(ids...)
}

// ClearMaritalStatusPeople clears all "marital_status_people" edges to the Person entity.
func (eu *EnumerationUpdate) ClearMaritalStatusPeople() *EnumerationUpdate {
	eu.mutation.ClearMaritalStatusPeople()
	return eu
}

// RemoveMaritalStatusPersonIDs removes the "marital_status_people" edge to Person entities by IDs.
func (eu *EnumerationUpdate) RemoveMaritalStatusPersonIDs(ids ...int) *EnumerationUpdate {
	eu.mutation.RemoveMaritalStatusPersonIDs(ids...)
	return eu
}

// RemoveMaritalStatusPeople removes "marital_status_people" edges to Person entities.
func (eu *EnumerationUpdate) RemoveMaritalStatusPeople(p ...*Person) *EnumerationUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return eu.RemoveMaritalStatusPersonIDs(ids...)
}

// ClearScopeWorkEfforts clears all "scope_work_efforts" edges to the WorkEffort entity.
func (eu *EnumerationUpdate) ClearScopeWorkEfforts() *EnumerationUpdate {
	eu.mutation.ClearScopeWorkEfforts()
	return eu
}

// RemoveScopeWorkEffortIDs removes the "scope_work_efforts" edge to WorkEffort entities by IDs.
func (eu *EnumerationUpdate) RemoveScopeWorkEffortIDs(ids ...int) *EnumerationUpdate {
	eu.mutation.RemoveScopeWorkEffortIDs(ids...)
	return eu
}

// RemoveScopeWorkEfforts removes "scope_work_efforts" edges to WorkEffort entities.
func (eu *EnumerationUpdate) RemoveScopeWorkEfforts(w ...*WorkEffort) *EnumerationUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return eu.RemoveScopeWorkEffortIDs(ids...)
}

// ClearExpectationWorkEffortPartyAssignments clears all "expectation_work_effort_party_assignments" edges to the WorkEffortPartyAssignment entity.
func (eu *EnumerationUpdate) ClearExpectationWorkEffortPartyAssignments() *EnumerationUpdate {
	eu.mutation.ClearExpectationWorkEffortPartyAssignments()
	return eu
}

// RemoveExpectationWorkEffortPartyAssignmentIDs removes the "expectation_work_effort_party_assignments" edge to WorkEffortPartyAssignment entities by IDs.
func (eu *EnumerationUpdate) RemoveExpectationWorkEffortPartyAssignmentIDs(ids ...int) *EnumerationUpdate {
	eu.mutation.RemoveExpectationWorkEffortPartyAssignmentIDs(ids...)
	return eu
}

// RemoveExpectationWorkEffortPartyAssignments removes "expectation_work_effort_party_assignments" edges to WorkEffortPartyAssignment entities.
func (eu *EnumerationUpdate) RemoveExpectationWorkEffortPartyAssignments(w ...*WorkEffortPartyAssignment) *EnumerationUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return eu.RemoveExpectationWorkEffortPartyAssignmentIDs(ids...)
}

// ClearDelegateReasonWorkEffortPartyAssignments clears all "delegate_reason_work_effort_party_assignments" edges to the WorkEffortPartyAssignment entity.
func (eu *EnumerationUpdate) ClearDelegateReasonWorkEffortPartyAssignments() *EnumerationUpdate {
	eu.mutation.ClearDelegateReasonWorkEffortPartyAssignments()
	return eu
}

// RemoveDelegateReasonWorkEffortPartyAssignmentIDs removes the "delegate_reason_work_effort_party_assignments" edge to WorkEffortPartyAssignment entities by IDs.
func (eu *EnumerationUpdate) RemoveDelegateReasonWorkEffortPartyAssignmentIDs(ids ...int) *EnumerationUpdate {
	eu.mutation.RemoveDelegateReasonWorkEffortPartyAssignmentIDs(ids...)
	return eu
}

// RemoveDelegateReasonWorkEffortPartyAssignments removes "delegate_reason_work_effort_party_assignments" edges to WorkEffortPartyAssignment entities.
func (eu *EnumerationUpdate) RemoveDelegateReasonWorkEffortPartyAssignments(w ...*WorkEffortPartyAssignment) *EnumerationUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return eu.RemoveDelegateReasonWorkEffortPartyAssignmentIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *EnumerationUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	eu.defaults()
	if len(eu.hooks) == 0 {
		affected, err = eu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EnumerationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			eu.mutation = mutation
			affected, err = eu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(eu.hooks) - 1; i >= 0; i-- {
			mut = eu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, eu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EnumerationUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EnumerationUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EnumerationUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (eu *EnumerationUpdate) defaults() {
	if _, ok := eu.mutation.UpdateTime(); !ok {
		v := enumeration.UpdateDefaultUpdateTime()
		eu.mutation.SetUpdateTime(v)
	}
}

func (eu *EnumerationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   enumeration.Table,
			Columns: enumeration.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: enumeration.FieldID,
			},
		},
	}
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: enumeration.FieldUpdateTime,
		})
	}
	if value, ok := eu.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: enumeration.FieldStringRef,
		})
	}
	if eu.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: enumeration.FieldStringRef,
		})
	}
	if value, ok := eu.mutation.EnumCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: enumeration.FieldEnumCode,
		})
	}
	if eu.mutation.EnumCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: enumeration.FieldEnumCode,
		})
	}
	if value, ok := eu.mutation.SequenceID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: enumeration.FieldSequenceID,
		})
	}
	if value, ok := eu.mutation.AddedSequenceID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: enumeration.FieldSequenceID,
		})
	}
	if eu.mutation.SequenceIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: enumeration.FieldSequenceID,
		})
	}
	if value, ok := eu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: enumeration.FieldDescription,
		})
	}
	if eu.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: enumeration.FieldDescription,
		})
	}
	if eu.mutation.EnumerationTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enumeration.EnumerationTypeTable,
			Columns: []string{enumeration.EnumerationTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: enumerationtype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.EnumerationTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enumeration.EnumerationTypeTable,
			Columns: []string{enumeration.EnumerationTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: enumerationtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.ClassFixedAssetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.ClassFixedAssetsTable,
			Columns: []string{enumeration.ClassFixedAssetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: fixedasset.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedClassFixedAssetsIDs(); len(nodes) > 0 && !eu.mutation.ClassFixedAssetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.ClassFixedAssetsTable,
			Columns: []string{enumeration.ClassFixedAssetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: fixedasset.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.ClassFixedAssetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.ClassFixedAssetsTable,
			Columns: []string{enumeration.ClassFixedAssetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: fixedasset.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.EmploymentStatusPeopleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.EmploymentStatusPeopleTable,
			Columns: []string{enumeration.EmploymentStatusPeopleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: person.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedEmploymentStatusPeopleIDs(); len(nodes) > 0 && !eu.mutation.EmploymentStatusPeopleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.EmploymentStatusPeopleTable,
			Columns: []string{enumeration.EmploymentStatusPeopleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: person.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.EmploymentStatusPeopleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.EmploymentStatusPeopleTable,
			Columns: []string{enumeration.EmploymentStatusPeopleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: person.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.ResidenceStatusPeopleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.ResidenceStatusPeopleTable,
			Columns: []string{enumeration.ResidenceStatusPeopleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: person.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedResidenceStatusPeopleIDs(); len(nodes) > 0 && !eu.mutation.ResidenceStatusPeopleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.ResidenceStatusPeopleTable,
			Columns: []string{enumeration.ResidenceStatusPeopleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: person.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.ResidenceStatusPeopleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.ResidenceStatusPeopleTable,
			Columns: []string{enumeration.ResidenceStatusPeopleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: person.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.MaritalStatusPeopleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.MaritalStatusPeopleTable,
			Columns: []string{enumeration.MaritalStatusPeopleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: person.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedMaritalStatusPeopleIDs(); len(nodes) > 0 && !eu.mutation.MaritalStatusPeopleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.MaritalStatusPeopleTable,
			Columns: []string{enumeration.MaritalStatusPeopleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: person.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.MaritalStatusPeopleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.MaritalStatusPeopleTable,
			Columns: []string{enumeration.MaritalStatusPeopleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: person.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.ScopeWorkEffortsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.ScopeWorkEffortsTable,
			Columns: []string{enumeration.ScopeWorkEffortsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffort.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedScopeWorkEffortsIDs(); len(nodes) > 0 && !eu.mutation.ScopeWorkEffortsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.ScopeWorkEffortsTable,
			Columns: []string{enumeration.ScopeWorkEffortsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffort.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.ScopeWorkEffortsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.ScopeWorkEffortsTable,
			Columns: []string{enumeration.ScopeWorkEffortsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffort.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.ExpectationWorkEffortPartyAssignmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.ExpectationWorkEffortPartyAssignmentsTable,
			Columns: []string{enumeration.ExpectationWorkEffortPartyAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffortpartyassignment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedExpectationWorkEffortPartyAssignmentsIDs(); len(nodes) > 0 && !eu.mutation.ExpectationWorkEffortPartyAssignmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.ExpectationWorkEffortPartyAssignmentsTable,
			Columns: []string{enumeration.ExpectationWorkEffortPartyAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffortpartyassignment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.ExpectationWorkEffortPartyAssignmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.ExpectationWorkEffortPartyAssignmentsTable,
			Columns: []string{enumeration.ExpectationWorkEffortPartyAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffortpartyassignment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.DelegateReasonWorkEffortPartyAssignmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.DelegateReasonWorkEffortPartyAssignmentsTable,
			Columns: []string{enumeration.DelegateReasonWorkEffortPartyAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffortpartyassignment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedDelegateReasonWorkEffortPartyAssignmentsIDs(); len(nodes) > 0 && !eu.mutation.DelegateReasonWorkEffortPartyAssignmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.DelegateReasonWorkEffortPartyAssignmentsTable,
			Columns: []string{enumeration.DelegateReasonWorkEffortPartyAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffortpartyassignment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.DelegateReasonWorkEffortPartyAssignmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.DelegateReasonWorkEffortPartyAssignmentsTable,
			Columns: []string{enumeration.DelegateReasonWorkEffortPartyAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffortpartyassignment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{enumeration.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// EnumerationUpdateOne is the builder for updating a single Enumeration entity.
type EnumerationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EnumerationMutation
}

// SetStringRef sets the "string_ref" field.
func (euo *EnumerationUpdateOne) SetStringRef(s string) *EnumerationUpdateOne {
	euo.mutation.SetStringRef(s)
	return euo
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (euo *EnumerationUpdateOne) SetNillableStringRef(s *string) *EnumerationUpdateOne {
	if s != nil {
		euo.SetStringRef(*s)
	}
	return euo
}

// ClearStringRef clears the value of the "string_ref" field.
func (euo *EnumerationUpdateOne) ClearStringRef() *EnumerationUpdateOne {
	euo.mutation.ClearStringRef()
	return euo
}

// SetEnumCode sets the "enum_code" field.
func (euo *EnumerationUpdateOne) SetEnumCode(s string) *EnumerationUpdateOne {
	euo.mutation.SetEnumCode(s)
	return euo
}

// SetNillableEnumCode sets the "enum_code" field if the given value is not nil.
func (euo *EnumerationUpdateOne) SetNillableEnumCode(s *string) *EnumerationUpdateOne {
	if s != nil {
		euo.SetEnumCode(*s)
	}
	return euo
}

// ClearEnumCode clears the value of the "enum_code" field.
func (euo *EnumerationUpdateOne) ClearEnumCode() *EnumerationUpdateOne {
	euo.mutation.ClearEnumCode()
	return euo
}

// SetSequenceID sets the "sequence_id" field.
func (euo *EnumerationUpdateOne) SetSequenceID(i int) *EnumerationUpdateOne {
	euo.mutation.ResetSequenceID()
	euo.mutation.SetSequenceID(i)
	return euo
}

// SetNillableSequenceID sets the "sequence_id" field if the given value is not nil.
func (euo *EnumerationUpdateOne) SetNillableSequenceID(i *int) *EnumerationUpdateOne {
	if i != nil {
		euo.SetSequenceID(*i)
	}
	return euo
}

// AddSequenceID adds i to the "sequence_id" field.
func (euo *EnumerationUpdateOne) AddSequenceID(i int) *EnumerationUpdateOne {
	euo.mutation.AddSequenceID(i)
	return euo
}

// ClearSequenceID clears the value of the "sequence_id" field.
func (euo *EnumerationUpdateOne) ClearSequenceID() *EnumerationUpdateOne {
	euo.mutation.ClearSequenceID()
	return euo
}

// SetDescription sets the "description" field.
func (euo *EnumerationUpdateOne) SetDescription(s string) *EnumerationUpdateOne {
	euo.mutation.SetDescription(s)
	return euo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (euo *EnumerationUpdateOne) SetNillableDescription(s *string) *EnumerationUpdateOne {
	if s != nil {
		euo.SetDescription(*s)
	}
	return euo
}

// ClearDescription clears the value of the "description" field.
func (euo *EnumerationUpdateOne) ClearDescription() *EnumerationUpdateOne {
	euo.mutation.ClearDescription()
	return euo
}

// SetEnumerationTypeID sets the "enumeration_type" edge to the EnumerationType entity by ID.
func (euo *EnumerationUpdateOne) SetEnumerationTypeID(id int) *EnumerationUpdateOne {
	euo.mutation.SetEnumerationTypeID(id)
	return euo
}

// SetNillableEnumerationTypeID sets the "enumeration_type" edge to the EnumerationType entity by ID if the given value is not nil.
func (euo *EnumerationUpdateOne) SetNillableEnumerationTypeID(id *int) *EnumerationUpdateOne {
	if id != nil {
		euo = euo.SetEnumerationTypeID(*id)
	}
	return euo
}

// SetEnumerationType sets the "enumeration_type" edge to the EnumerationType entity.
func (euo *EnumerationUpdateOne) SetEnumerationType(e *EnumerationType) *EnumerationUpdateOne {
	return euo.SetEnumerationTypeID(e.ID)
}

// AddClassFixedAssetIDs adds the "class_fixed_assets" edge to the FixedAsset entity by IDs.
func (euo *EnumerationUpdateOne) AddClassFixedAssetIDs(ids ...int) *EnumerationUpdateOne {
	euo.mutation.AddClassFixedAssetIDs(ids...)
	return euo
}

// AddClassFixedAssets adds the "class_fixed_assets" edges to the FixedAsset entity.
func (euo *EnumerationUpdateOne) AddClassFixedAssets(f ...*FixedAsset) *EnumerationUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return euo.AddClassFixedAssetIDs(ids...)
}

// AddEmploymentStatusPersonIDs adds the "employment_status_people" edge to the Person entity by IDs.
func (euo *EnumerationUpdateOne) AddEmploymentStatusPersonIDs(ids ...int) *EnumerationUpdateOne {
	euo.mutation.AddEmploymentStatusPersonIDs(ids...)
	return euo
}

// AddEmploymentStatusPeople adds the "employment_status_people" edges to the Person entity.
func (euo *EnumerationUpdateOne) AddEmploymentStatusPeople(p ...*Person) *EnumerationUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return euo.AddEmploymentStatusPersonIDs(ids...)
}

// AddResidenceStatusPersonIDs adds the "residence_status_people" edge to the Person entity by IDs.
func (euo *EnumerationUpdateOne) AddResidenceStatusPersonIDs(ids ...int) *EnumerationUpdateOne {
	euo.mutation.AddResidenceStatusPersonIDs(ids...)
	return euo
}

// AddResidenceStatusPeople adds the "residence_status_people" edges to the Person entity.
func (euo *EnumerationUpdateOne) AddResidenceStatusPeople(p ...*Person) *EnumerationUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return euo.AddResidenceStatusPersonIDs(ids...)
}

// AddMaritalStatusPersonIDs adds the "marital_status_people" edge to the Person entity by IDs.
func (euo *EnumerationUpdateOne) AddMaritalStatusPersonIDs(ids ...int) *EnumerationUpdateOne {
	euo.mutation.AddMaritalStatusPersonIDs(ids...)
	return euo
}

// AddMaritalStatusPeople adds the "marital_status_people" edges to the Person entity.
func (euo *EnumerationUpdateOne) AddMaritalStatusPeople(p ...*Person) *EnumerationUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return euo.AddMaritalStatusPersonIDs(ids...)
}

// AddScopeWorkEffortIDs adds the "scope_work_efforts" edge to the WorkEffort entity by IDs.
func (euo *EnumerationUpdateOne) AddScopeWorkEffortIDs(ids ...int) *EnumerationUpdateOne {
	euo.mutation.AddScopeWorkEffortIDs(ids...)
	return euo
}

// AddScopeWorkEfforts adds the "scope_work_efforts" edges to the WorkEffort entity.
func (euo *EnumerationUpdateOne) AddScopeWorkEfforts(w ...*WorkEffort) *EnumerationUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return euo.AddScopeWorkEffortIDs(ids...)
}

// AddExpectationWorkEffortPartyAssignmentIDs adds the "expectation_work_effort_party_assignments" edge to the WorkEffortPartyAssignment entity by IDs.
func (euo *EnumerationUpdateOne) AddExpectationWorkEffortPartyAssignmentIDs(ids ...int) *EnumerationUpdateOne {
	euo.mutation.AddExpectationWorkEffortPartyAssignmentIDs(ids...)
	return euo
}

// AddExpectationWorkEffortPartyAssignments adds the "expectation_work_effort_party_assignments" edges to the WorkEffortPartyAssignment entity.
func (euo *EnumerationUpdateOne) AddExpectationWorkEffortPartyAssignments(w ...*WorkEffortPartyAssignment) *EnumerationUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return euo.AddExpectationWorkEffortPartyAssignmentIDs(ids...)
}

// AddDelegateReasonWorkEffortPartyAssignmentIDs adds the "delegate_reason_work_effort_party_assignments" edge to the WorkEffortPartyAssignment entity by IDs.
func (euo *EnumerationUpdateOne) AddDelegateReasonWorkEffortPartyAssignmentIDs(ids ...int) *EnumerationUpdateOne {
	euo.mutation.AddDelegateReasonWorkEffortPartyAssignmentIDs(ids...)
	return euo
}

// AddDelegateReasonWorkEffortPartyAssignments adds the "delegate_reason_work_effort_party_assignments" edges to the WorkEffortPartyAssignment entity.
func (euo *EnumerationUpdateOne) AddDelegateReasonWorkEffortPartyAssignments(w ...*WorkEffortPartyAssignment) *EnumerationUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return euo.AddDelegateReasonWorkEffortPartyAssignmentIDs(ids...)
}

// Mutation returns the EnumerationMutation object of the builder.
func (euo *EnumerationUpdateOne) Mutation() *EnumerationMutation {
	return euo.mutation
}

// ClearEnumerationType clears the "enumeration_type" edge to the EnumerationType entity.
func (euo *EnumerationUpdateOne) ClearEnumerationType() *EnumerationUpdateOne {
	euo.mutation.ClearEnumerationType()
	return euo
}

// ClearClassFixedAssets clears all "class_fixed_assets" edges to the FixedAsset entity.
func (euo *EnumerationUpdateOne) ClearClassFixedAssets() *EnumerationUpdateOne {
	euo.mutation.ClearClassFixedAssets()
	return euo
}

// RemoveClassFixedAssetIDs removes the "class_fixed_assets" edge to FixedAsset entities by IDs.
func (euo *EnumerationUpdateOne) RemoveClassFixedAssetIDs(ids ...int) *EnumerationUpdateOne {
	euo.mutation.RemoveClassFixedAssetIDs(ids...)
	return euo
}

// RemoveClassFixedAssets removes "class_fixed_assets" edges to FixedAsset entities.
func (euo *EnumerationUpdateOne) RemoveClassFixedAssets(f ...*FixedAsset) *EnumerationUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return euo.RemoveClassFixedAssetIDs(ids...)
}

// ClearEmploymentStatusPeople clears all "employment_status_people" edges to the Person entity.
func (euo *EnumerationUpdateOne) ClearEmploymentStatusPeople() *EnumerationUpdateOne {
	euo.mutation.ClearEmploymentStatusPeople()
	return euo
}

// RemoveEmploymentStatusPersonIDs removes the "employment_status_people" edge to Person entities by IDs.
func (euo *EnumerationUpdateOne) RemoveEmploymentStatusPersonIDs(ids ...int) *EnumerationUpdateOne {
	euo.mutation.RemoveEmploymentStatusPersonIDs(ids...)
	return euo
}

// RemoveEmploymentStatusPeople removes "employment_status_people" edges to Person entities.
func (euo *EnumerationUpdateOne) RemoveEmploymentStatusPeople(p ...*Person) *EnumerationUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return euo.RemoveEmploymentStatusPersonIDs(ids...)
}

// ClearResidenceStatusPeople clears all "residence_status_people" edges to the Person entity.
func (euo *EnumerationUpdateOne) ClearResidenceStatusPeople() *EnumerationUpdateOne {
	euo.mutation.ClearResidenceStatusPeople()
	return euo
}

// RemoveResidenceStatusPersonIDs removes the "residence_status_people" edge to Person entities by IDs.
func (euo *EnumerationUpdateOne) RemoveResidenceStatusPersonIDs(ids ...int) *EnumerationUpdateOne {
	euo.mutation.RemoveResidenceStatusPersonIDs(ids...)
	return euo
}

// RemoveResidenceStatusPeople removes "residence_status_people" edges to Person entities.
func (euo *EnumerationUpdateOne) RemoveResidenceStatusPeople(p ...*Person) *EnumerationUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return euo.RemoveResidenceStatusPersonIDs(ids...)
}

// ClearMaritalStatusPeople clears all "marital_status_people" edges to the Person entity.
func (euo *EnumerationUpdateOne) ClearMaritalStatusPeople() *EnumerationUpdateOne {
	euo.mutation.ClearMaritalStatusPeople()
	return euo
}

// RemoveMaritalStatusPersonIDs removes the "marital_status_people" edge to Person entities by IDs.
func (euo *EnumerationUpdateOne) RemoveMaritalStatusPersonIDs(ids ...int) *EnumerationUpdateOne {
	euo.mutation.RemoveMaritalStatusPersonIDs(ids...)
	return euo
}

// RemoveMaritalStatusPeople removes "marital_status_people" edges to Person entities.
func (euo *EnumerationUpdateOne) RemoveMaritalStatusPeople(p ...*Person) *EnumerationUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return euo.RemoveMaritalStatusPersonIDs(ids...)
}

// ClearScopeWorkEfforts clears all "scope_work_efforts" edges to the WorkEffort entity.
func (euo *EnumerationUpdateOne) ClearScopeWorkEfforts() *EnumerationUpdateOne {
	euo.mutation.ClearScopeWorkEfforts()
	return euo
}

// RemoveScopeWorkEffortIDs removes the "scope_work_efforts" edge to WorkEffort entities by IDs.
func (euo *EnumerationUpdateOne) RemoveScopeWorkEffortIDs(ids ...int) *EnumerationUpdateOne {
	euo.mutation.RemoveScopeWorkEffortIDs(ids...)
	return euo
}

// RemoveScopeWorkEfforts removes "scope_work_efforts" edges to WorkEffort entities.
func (euo *EnumerationUpdateOne) RemoveScopeWorkEfforts(w ...*WorkEffort) *EnumerationUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return euo.RemoveScopeWorkEffortIDs(ids...)
}

// ClearExpectationWorkEffortPartyAssignments clears all "expectation_work_effort_party_assignments" edges to the WorkEffortPartyAssignment entity.
func (euo *EnumerationUpdateOne) ClearExpectationWorkEffortPartyAssignments() *EnumerationUpdateOne {
	euo.mutation.ClearExpectationWorkEffortPartyAssignments()
	return euo
}

// RemoveExpectationWorkEffortPartyAssignmentIDs removes the "expectation_work_effort_party_assignments" edge to WorkEffortPartyAssignment entities by IDs.
func (euo *EnumerationUpdateOne) RemoveExpectationWorkEffortPartyAssignmentIDs(ids ...int) *EnumerationUpdateOne {
	euo.mutation.RemoveExpectationWorkEffortPartyAssignmentIDs(ids...)
	return euo
}

// RemoveExpectationWorkEffortPartyAssignments removes "expectation_work_effort_party_assignments" edges to WorkEffortPartyAssignment entities.
func (euo *EnumerationUpdateOne) RemoveExpectationWorkEffortPartyAssignments(w ...*WorkEffortPartyAssignment) *EnumerationUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return euo.RemoveExpectationWorkEffortPartyAssignmentIDs(ids...)
}

// ClearDelegateReasonWorkEffortPartyAssignments clears all "delegate_reason_work_effort_party_assignments" edges to the WorkEffortPartyAssignment entity.
func (euo *EnumerationUpdateOne) ClearDelegateReasonWorkEffortPartyAssignments() *EnumerationUpdateOne {
	euo.mutation.ClearDelegateReasonWorkEffortPartyAssignments()
	return euo
}

// RemoveDelegateReasonWorkEffortPartyAssignmentIDs removes the "delegate_reason_work_effort_party_assignments" edge to WorkEffortPartyAssignment entities by IDs.
func (euo *EnumerationUpdateOne) RemoveDelegateReasonWorkEffortPartyAssignmentIDs(ids ...int) *EnumerationUpdateOne {
	euo.mutation.RemoveDelegateReasonWorkEffortPartyAssignmentIDs(ids...)
	return euo
}

// RemoveDelegateReasonWorkEffortPartyAssignments removes "delegate_reason_work_effort_party_assignments" edges to WorkEffortPartyAssignment entities.
func (euo *EnumerationUpdateOne) RemoveDelegateReasonWorkEffortPartyAssignments(w ...*WorkEffortPartyAssignment) *EnumerationUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return euo.RemoveDelegateReasonWorkEffortPartyAssignmentIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *EnumerationUpdateOne) Select(field string, fields ...string) *EnumerationUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Enumeration entity.
func (euo *EnumerationUpdateOne) Save(ctx context.Context) (*Enumeration, error) {
	var (
		err  error
		node *Enumeration
	)
	euo.defaults()
	if len(euo.hooks) == 0 {
		node, err = euo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EnumerationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			euo.mutation = mutation
			node, err = euo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(euo.hooks) - 1; i >= 0; i-- {
			mut = euo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, euo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EnumerationUpdateOne) SaveX(ctx context.Context) *Enumeration {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *EnumerationUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EnumerationUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (euo *EnumerationUpdateOne) defaults() {
	if _, ok := euo.mutation.UpdateTime(); !ok {
		v := enumeration.UpdateDefaultUpdateTime()
		euo.mutation.SetUpdateTime(v)
	}
}

func (euo *EnumerationUpdateOne) sqlSave(ctx context.Context) (_node *Enumeration, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   enumeration.Table,
			Columns: enumeration.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: enumeration.FieldID,
			},
		},
	}
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Enumeration.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, enumeration.FieldID)
		for _, f := range fields {
			if !enumeration.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != enumeration.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: enumeration.FieldUpdateTime,
		})
	}
	if value, ok := euo.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: enumeration.FieldStringRef,
		})
	}
	if euo.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: enumeration.FieldStringRef,
		})
	}
	if value, ok := euo.mutation.EnumCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: enumeration.FieldEnumCode,
		})
	}
	if euo.mutation.EnumCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: enumeration.FieldEnumCode,
		})
	}
	if value, ok := euo.mutation.SequenceID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: enumeration.FieldSequenceID,
		})
	}
	if value, ok := euo.mutation.AddedSequenceID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: enumeration.FieldSequenceID,
		})
	}
	if euo.mutation.SequenceIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: enumeration.FieldSequenceID,
		})
	}
	if value, ok := euo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: enumeration.FieldDescription,
		})
	}
	if euo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: enumeration.FieldDescription,
		})
	}
	if euo.mutation.EnumerationTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enumeration.EnumerationTypeTable,
			Columns: []string{enumeration.EnumerationTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: enumerationtype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.EnumerationTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enumeration.EnumerationTypeTable,
			Columns: []string{enumeration.EnumerationTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: enumerationtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.ClassFixedAssetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.ClassFixedAssetsTable,
			Columns: []string{enumeration.ClassFixedAssetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: fixedasset.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedClassFixedAssetsIDs(); len(nodes) > 0 && !euo.mutation.ClassFixedAssetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.ClassFixedAssetsTable,
			Columns: []string{enumeration.ClassFixedAssetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: fixedasset.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.ClassFixedAssetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.ClassFixedAssetsTable,
			Columns: []string{enumeration.ClassFixedAssetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: fixedasset.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.EmploymentStatusPeopleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.EmploymentStatusPeopleTable,
			Columns: []string{enumeration.EmploymentStatusPeopleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: person.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedEmploymentStatusPeopleIDs(); len(nodes) > 0 && !euo.mutation.EmploymentStatusPeopleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.EmploymentStatusPeopleTable,
			Columns: []string{enumeration.EmploymentStatusPeopleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: person.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.EmploymentStatusPeopleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.EmploymentStatusPeopleTable,
			Columns: []string{enumeration.EmploymentStatusPeopleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: person.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.ResidenceStatusPeopleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.ResidenceStatusPeopleTable,
			Columns: []string{enumeration.ResidenceStatusPeopleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: person.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedResidenceStatusPeopleIDs(); len(nodes) > 0 && !euo.mutation.ResidenceStatusPeopleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.ResidenceStatusPeopleTable,
			Columns: []string{enumeration.ResidenceStatusPeopleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: person.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.ResidenceStatusPeopleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.ResidenceStatusPeopleTable,
			Columns: []string{enumeration.ResidenceStatusPeopleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: person.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.MaritalStatusPeopleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.MaritalStatusPeopleTable,
			Columns: []string{enumeration.MaritalStatusPeopleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: person.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedMaritalStatusPeopleIDs(); len(nodes) > 0 && !euo.mutation.MaritalStatusPeopleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.MaritalStatusPeopleTable,
			Columns: []string{enumeration.MaritalStatusPeopleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: person.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.MaritalStatusPeopleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.MaritalStatusPeopleTable,
			Columns: []string{enumeration.MaritalStatusPeopleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: person.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.ScopeWorkEffortsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.ScopeWorkEffortsTable,
			Columns: []string{enumeration.ScopeWorkEffortsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffort.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedScopeWorkEffortsIDs(); len(nodes) > 0 && !euo.mutation.ScopeWorkEffortsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.ScopeWorkEffortsTable,
			Columns: []string{enumeration.ScopeWorkEffortsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffort.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.ScopeWorkEffortsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.ScopeWorkEffortsTable,
			Columns: []string{enumeration.ScopeWorkEffortsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffort.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.ExpectationWorkEffortPartyAssignmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.ExpectationWorkEffortPartyAssignmentsTable,
			Columns: []string{enumeration.ExpectationWorkEffortPartyAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffortpartyassignment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedExpectationWorkEffortPartyAssignmentsIDs(); len(nodes) > 0 && !euo.mutation.ExpectationWorkEffortPartyAssignmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.ExpectationWorkEffortPartyAssignmentsTable,
			Columns: []string{enumeration.ExpectationWorkEffortPartyAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffortpartyassignment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.ExpectationWorkEffortPartyAssignmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.ExpectationWorkEffortPartyAssignmentsTable,
			Columns: []string{enumeration.ExpectationWorkEffortPartyAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffortpartyassignment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.DelegateReasonWorkEffortPartyAssignmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.DelegateReasonWorkEffortPartyAssignmentsTable,
			Columns: []string{enumeration.DelegateReasonWorkEffortPartyAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffortpartyassignment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedDelegateReasonWorkEffortPartyAssignmentsIDs(); len(nodes) > 0 && !euo.mutation.DelegateReasonWorkEffortPartyAssignmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.DelegateReasonWorkEffortPartyAssignmentsTable,
			Columns: []string{enumeration.DelegateReasonWorkEffortPartyAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffortpartyassignment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.DelegateReasonWorkEffortPartyAssignmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumeration.DelegateReasonWorkEffortPartyAssignmentsTable,
			Columns: []string{enumeration.DelegateReasonWorkEffortPartyAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffortpartyassignment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Enumeration{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{enumeration.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
