// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/enumeration"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/enumerationtype"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/predicate"
)

// EnumerationTypeUpdate is the builder for updating EnumerationType entities.
type EnumerationTypeUpdate struct {
	config
	hooks    []Hook
	mutation *EnumerationTypeMutation
}

// Where adds a new predicate for the EnumerationTypeUpdate builder.
func (etu *EnumerationTypeUpdate) Where(ps ...predicate.EnumerationType) *EnumerationTypeUpdate {
	etu.mutation.predicates = append(etu.mutation.predicates, ps...)
	return etu
}

// SetStringRef sets the "string_ref" field.
func (etu *EnumerationTypeUpdate) SetStringRef(s string) *EnumerationTypeUpdate {
	etu.mutation.SetStringRef(s)
	return etu
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (etu *EnumerationTypeUpdate) SetNillableStringRef(s *string) *EnumerationTypeUpdate {
	if s != nil {
		etu.SetStringRef(*s)
	}
	return etu
}

// ClearStringRef clears the value of the "string_ref" field.
func (etu *EnumerationTypeUpdate) ClearStringRef() *EnumerationTypeUpdate {
	etu.mutation.ClearStringRef()
	return etu
}

// SetHasTable sets the "has_table" field.
func (etu *EnumerationTypeUpdate) SetHasTable(et enumerationtype.HasTable) *EnumerationTypeUpdate {
	etu.mutation.SetHasTable(et)
	return etu
}

// SetNillableHasTable sets the "has_table" field if the given value is not nil.
func (etu *EnumerationTypeUpdate) SetNillableHasTable(et *enumerationtype.HasTable) *EnumerationTypeUpdate {
	if et != nil {
		etu.SetHasTable(*et)
	}
	return etu
}

// ClearHasTable clears the value of the "has_table" field.
func (etu *EnumerationTypeUpdate) ClearHasTable() *EnumerationTypeUpdate {
	etu.mutation.ClearHasTable()
	return etu
}

// SetDescription sets the "description" field.
func (etu *EnumerationTypeUpdate) SetDescription(s string) *EnumerationTypeUpdate {
	etu.mutation.SetDescription(s)
	return etu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (etu *EnumerationTypeUpdate) SetNillableDescription(s *string) *EnumerationTypeUpdate {
	if s != nil {
		etu.SetDescription(*s)
	}
	return etu
}

// ClearDescription clears the value of the "description" field.
func (etu *EnumerationTypeUpdate) ClearDescription() *EnumerationTypeUpdate {
	etu.mutation.ClearDescription()
	return etu
}

// SetParentID sets the "parent" edge to the EnumerationType entity by ID.
func (etu *EnumerationTypeUpdate) SetParentID(id int) *EnumerationTypeUpdate {
	etu.mutation.SetParentID(id)
	return etu
}

// SetNillableParentID sets the "parent" edge to the EnumerationType entity by ID if the given value is not nil.
func (etu *EnumerationTypeUpdate) SetNillableParentID(id *int) *EnumerationTypeUpdate {
	if id != nil {
		etu = etu.SetParentID(*id)
	}
	return etu
}

// SetParent sets the "parent" edge to the EnumerationType entity.
func (etu *EnumerationTypeUpdate) SetParent(e *EnumerationType) *EnumerationTypeUpdate {
	return etu.SetParentID(e.ID)
}

// AddChildIDs adds the "children" edge to the EnumerationType entity by IDs.
func (etu *EnumerationTypeUpdate) AddChildIDs(ids ...int) *EnumerationTypeUpdate {
	etu.mutation.AddChildIDs(ids...)
	return etu
}

// AddChildren adds the "children" edges to the EnumerationType entity.
func (etu *EnumerationTypeUpdate) AddChildren(e ...*EnumerationType) *EnumerationTypeUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return etu.AddChildIDs(ids...)
}

// AddEnumerationIDs adds the "enumerations" edge to the Enumeration entity by IDs.
func (etu *EnumerationTypeUpdate) AddEnumerationIDs(ids ...int) *EnumerationTypeUpdate {
	etu.mutation.AddEnumerationIDs(ids...)
	return etu
}

// AddEnumerations adds the "enumerations" edges to the Enumeration entity.
func (etu *EnumerationTypeUpdate) AddEnumerations(e ...*Enumeration) *EnumerationTypeUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return etu.AddEnumerationIDs(ids...)
}

// AddChildEnumerationTypeIDs adds the "child_enumeration_types" edge to the EnumerationType entity by IDs.
func (etu *EnumerationTypeUpdate) AddChildEnumerationTypeIDs(ids ...int) *EnumerationTypeUpdate {
	etu.mutation.AddChildEnumerationTypeIDs(ids...)
	return etu
}

// AddChildEnumerationTypes adds the "child_enumeration_types" edges to the EnumerationType entity.
func (etu *EnumerationTypeUpdate) AddChildEnumerationTypes(e ...*EnumerationType) *EnumerationTypeUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return etu.AddChildEnumerationTypeIDs(ids...)
}

// Mutation returns the EnumerationTypeMutation object of the builder.
func (etu *EnumerationTypeUpdate) Mutation() *EnumerationTypeMutation {
	return etu.mutation
}

// ClearParent clears the "parent" edge to the EnumerationType entity.
func (etu *EnumerationTypeUpdate) ClearParent() *EnumerationTypeUpdate {
	etu.mutation.ClearParent()
	return etu
}

// ClearChildren clears all "children" edges to the EnumerationType entity.
func (etu *EnumerationTypeUpdate) ClearChildren() *EnumerationTypeUpdate {
	etu.mutation.ClearChildren()
	return etu
}

// RemoveChildIDs removes the "children" edge to EnumerationType entities by IDs.
func (etu *EnumerationTypeUpdate) RemoveChildIDs(ids ...int) *EnumerationTypeUpdate {
	etu.mutation.RemoveChildIDs(ids...)
	return etu
}

// RemoveChildren removes "children" edges to EnumerationType entities.
func (etu *EnumerationTypeUpdate) RemoveChildren(e ...*EnumerationType) *EnumerationTypeUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return etu.RemoveChildIDs(ids...)
}

// ClearEnumerations clears all "enumerations" edges to the Enumeration entity.
func (etu *EnumerationTypeUpdate) ClearEnumerations() *EnumerationTypeUpdate {
	etu.mutation.ClearEnumerations()
	return etu
}

// RemoveEnumerationIDs removes the "enumerations" edge to Enumeration entities by IDs.
func (etu *EnumerationTypeUpdate) RemoveEnumerationIDs(ids ...int) *EnumerationTypeUpdate {
	etu.mutation.RemoveEnumerationIDs(ids...)
	return etu
}

// RemoveEnumerations removes "enumerations" edges to Enumeration entities.
func (etu *EnumerationTypeUpdate) RemoveEnumerations(e ...*Enumeration) *EnumerationTypeUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return etu.RemoveEnumerationIDs(ids...)
}

// ClearChildEnumerationTypes clears all "child_enumeration_types" edges to the EnumerationType entity.
func (etu *EnumerationTypeUpdate) ClearChildEnumerationTypes() *EnumerationTypeUpdate {
	etu.mutation.ClearChildEnumerationTypes()
	return etu
}

// RemoveChildEnumerationTypeIDs removes the "child_enumeration_types" edge to EnumerationType entities by IDs.
func (etu *EnumerationTypeUpdate) RemoveChildEnumerationTypeIDs(ids ...int) *EnumerationTypeUpdate {
	etu.mutation.RemoveChildEnumerationTypeIDs(ids...)
	return etu
}

// RemoveChildEnumerationTypes removes "child_enumeration_types" edges to EnumerationType entities.
func (etu *EnumerationTypeUpdate) RemoveChildEnumerationTypes(e ...*EnumerationType) *EnumerationTypeUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return etu.RemoveChildEnumerationTypeIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (etu *EnumerationTypeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	etu.defaults()
	if len(etu.hooks) == 0 {
		if err = etu.check(); err != nil {
			return 0, err
		}
		affected, err = etu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EnumerationTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = etu.check(); err != nil {
				return 0, err
			}
			etu.mutation = mutation
			affected, err = etu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(etu.hooks) - 1; i >= 0; i-- {
			mut = etu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, etu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (etu *EnumerationTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := etu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (etu *EnumerationTypeUpdate) Exec(ctx context.Context) error {
	_, err := etu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (etu *EnumerationTypeUpdate) ExecX(ctx context.Context) {
	if err := etu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (etu *EnumerationTypeUpdate) defaults() {
	if _, ok := etu.mutation.UpdateTime(); !ok {
		v := enumerationtype.UpdateDefaultUpdateTime()
		etu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (etu *EnumerationTypeUpdate) check() error {
	if v, ok := etu.mutation.HasTable(); ok {
		if err := enumerationtype.HasTableValidator(v); err != nil {
			return &ValidationError{Name: "has_table", err: fmt.Errorf("ent: validator failed for field \"has_table\": %w", err)}
		}
	}
	return nil
}

func (etu *EnumerationTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   enumerationtype.Table,
			Columns: enumerationtype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: enumerationtype.FieldID,
			},
		},
	}
	if ps := etu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := etu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: enumerationtype.FieldUpdateTime,
		})
	}
	if value, ok := etu.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: enumerationtype.FieldStringRef,
		})
	}
	if etu.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: enumerationtype.FieldStringRef,
		})
	}
	if value, ok := etu.mutation.HasTable(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: enumerationtype.FieldHasTable,
		})
	}
	if etu.mutation.HasTableCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: enumerationtype.FieldHasTable,
		})
	}
	if value, ok := etu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: enumerationtype.FieldDescription,
		})
	}
	if etu.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: enumerationtype.FieldDescription,
		})
	}
	if etu.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enumerationtype.ParentTable,
			Columns: []string{enumerationtype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: enumerationtype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := etu.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enumerationtype.ParentTable,
			Columns: []string{enumerationtype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: enumerationtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if etu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumerationtype.ChildrenTable,
			Columns: []string{enumerationtype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: enumerationtype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := etu.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !etu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumerationtype.ChildrenTable,
			Columns: []string{enumerationtype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: enumerationtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := etu.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumerationtype.ChildrenTable,
			Columns: []string{enumerationtype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: enumerationtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if etu.mutation.EnumerationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumerationtype.EnumerationsTable,
			Columns: []string{enumerationtype.EnumerationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: enumeration.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := etu.mutation.RemovedEnumerationsIDs(); len(nodes) > 0 && !etu.mutation.EnumerationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumerationtype.EnumerationsTable,
			Columns: []string{enumerationtype.EnumerationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: enumeration.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := etu.mutation.EnumerationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumerationtype.EnumerationsTable,
			Columns: []string{enumerationtype.EnumerationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: enumeration.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if etu.mutation.ChildEnumerationTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   enumerationtype.ChildEnumerationTypesTable,
			Columns: enumerationtype.ChildEnumerationTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: enumerationtype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := etu.mutation.RemovedChildEnumerationTypesIDs(); len(nodes) > 0 && !etu.mutation.ChildEnumerationTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   enumerationtype.ChildEnumerationTypesTable,
			Columns: enumerationtype.ChildEnumerationTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: enumerationtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := etu.mutation.ChildEnumerationTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   enumerationtype.ChildEnumerationTypesTable,
			Columns: enumerationtype.ChildEnumerationTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: enumerationtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, etu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{enumerationtype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// EnumerationTypeUpdateOne is the builder for updating a single EnumerationType entity.
type EnumerationTypeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EnumerationTypeMutation
}

// SetStringRef sets the "string_ref" field.
func (etuo *EnumerationTypeUpdateOne) SetStringRef(s string) *EnumerationTypeUpdateOne {
	etuo.mutation.SetStringRef(s)
	return etuo
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (etuo *EnumerationTypeUpdateOne) SetNillableStringRef(s *string) *EnumerationTypeUpdateOne {
	if s != nil {
		etuo.SetStringRef(*s)
	}
	return etuo
}

// ClearStringRef clears the value of the "string_ref" field.
func (etuo *EnumerationTypeUpdateOne) ClearStringRef() *EnumerationTypeUpdateOne {
	etuo.mutation.ClearStringRef()
	return etuo
}

// SetHasTable sets the "has_table" field.
func (etuo *EnumerationTypeUpdateOne) SetHasTable(et enumerationtype.HasTable) *EnumerationTypeUpdateOne {
	etuo.mutation.SetHasTable(et)
	return etuo
}

// SetNillableHasTable sets the "has_table" field if the given value is not nil.
func (etuo *EnumerationTypeUpdateOne) SetNillableHasTable(et *enumerationtype.HasTable) *EnumerationTypeUpdateOne {
	if et != nil {
		etuo.SetHasTable(*et)
	}
	return etuo
}

// ClearHasTable clears the value of the "has_table" field.
func (etuo *EnumerationTypeUpdateOne) ClearHasTable() *EnumerationTypeUpdateOne {
	etuo.mutation.ClearHasTable()
	return etuo
}

// SetDescription sets the "description" field.
func (etuo *EnumerationTypeUpdateOne) SetDescription(s string) *EnumerationTypeUpdateOne {
	etuo.mutation.SetDescription(s)
	return etuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (etuo *EnumerationTypeUpdateOne) SetNillableDescription(s *string) *EnumerationTypeUpdateOne {
	if s != nil {
		etuo.SetDescription(*s)
	}
	return etuo
}

// ClearDescription clears the value of the "description" field.
func (etuo *EnumerationTypeUpdateOne) ClearDescription() *EnumerationTypeUpdateOne {
	etuo.mutation.ClearDescription()
	return etuo
}

// SetParentID sets the "parent" edge to the EnumerationType entity by ID.
func (etuo *EnumerationTypeUpdateOne) SetParentID(id int) *EnumerationTypeUpdateOne {
	etuo.mutation.SetParentID(id)
	return etuo
}

// SetNillableParentID sets the "parent" edge to the EnumerationType entity by ID if the given value is not nil.
func (etuo *EnumerationTypeUpdateOne) SetNillableParentID(id *int) *EnumerationTypeUpdateOne {
	if id != nil {
		etuo = etuo.SetParentID(*id)
	}
	return etuo
}

// SetParent sets the "parent" edge to the EnumerationType entity.
func (etuo *EnumerationTypeUpdateOne) SetParent(e *EnumerationType) *EnumerationTypeUpdateOne {
	return etuo.SetParentID(e.ID)
}

// AddChildIDs adds the "children" edge to the EnumerationType entity by IDs.
func (etuo *EnumerationTypeUpdateOne) AddChildIDs(ids ...int) *EnumerationTypeUpdateOne {
	etuo.mutation.AddChildIDs(ids...)
	return etuo
}

// AddChildren adds the "children" edges to the EnumerationType entity.
func (etuo *EnumerationTypeUpdateOne) AddChildren(e ...*EnumerationType) *EnumerationTypeUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return etuo.AddChildIDs(ids...)
}

// AddEnumerationIDs adds the "enumerations" edge to the Enumeration entity by IDs.
func (etuo *EnumerationTypeUpdateOne) AddEnumerationIDs(ids ...int) *EnumerationTypeUpdateOne {
	etuo.mutation.AddEnumerationIDs(ids...)
	return etuo
}

// AddEnumerations adds the "enumerations" edges to the Enumeration entity.
func (etuo *EnumerationTypeUpdateOne) AddEnumerations(e ...*Enumeration) *EnumerationTypeUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return etuo.AddEnumerationIDs(ids...)
}

// AddChildEnumerationTypeIDs adds the "child_enumeration_types" edge to the EnumerationType entity by IDs.
func (etuo *EnumerationTypeUpdateOne) AddChildEnumerationTypeIDs(ids ...int) *EnumerationTypeUpdateOne {
	etuo.mutation.AddChildEnumerationTypeIDs(ids...)
	return etuo
}

// AddChildEnumerationTypes adds the "child_enumeration_types" edges to the EnumerationType entity.
func (etuo *EnumerationTypeUpdateOne) AddChildEnumerationTypes(e ...*EnumerationType) *EnumerationTypeUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return etuo.AddChildEnumerationTypeIDs(ids...)
}

// Mutation returns the EnumerationTypeMutation object of the builder.
func (etuo *EnumerationTypeUpdateOne) Mutation() *EnumerationTypeMutation {
	return etuo.mutation
}

// ClearParent clears the "parent" edge to the EnumerationType entity.
func (etuo *EnumerationTypeUpdateOne) ClearParent() *EnumerationTypeUpdateOne {
	etuo.mutation.ClearParent()
	return etuo
}

// ClearChildren clears all "children" edges to the EnumerationType entity.
func (etuo *EnumerationTypeUpdateOne) ClearChildren() *EnumerationTypeUpdateOne {
	etuo.mutation.ClearChildren()
	return etuo
}

// RemoveChildIDs removes the "children" edge to EnumerationType entities by IDs.
func (etuo *EnumerationTypeUpdateOne) RemoveChildIDs(ids ...int) *EnumerationTypeUpdateOne {
	etuo.mutation.RemoveChildIDs(ids...)
	return etuo
}

// RemoveChildren removes "children" edges to EnumerationType entities.
func (etuo *EnumerationTypeUpdateOne) RemoveChildren(e ...*EnumerationType) *EnumerationTypeUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return etuo.RemoveChildIDs(ids...)
}

// ClearEnumerations clears all "enumerations" edges to the Enumeration entity.
func (etuo *EnumerationTypeUpdateOne) ClearEnumerations() *EnumerationTypeUpdateOne {
	etuo.mutation.ClearEnumerations()
	return etuo
}

// RemoveEnumerationIDs removes the "enumerations" edge to Enumeration entities by IDs.
func (etuo *EnumerationTypeUpdateOne) RemoveEnumerationIDs(ids ...int) *EnumerationTypeUpdateOne {
	etuo.mutation.RemoveEnumerationIDs(ids...)
	return etuo
}

// RemoveEnumerations removes "enumerations" edges to Enumeration entities.
func (etuo *EnumerationTypeUpdateOne) RemoveEnumerations(e ...*Enumeration) *EnumerationTypeUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return etuo.RemoveEnumerationIDs(ids...)
}

// ClearChildEnumerationTypes clears all "child_enumeration_types" edges to the EnumerationType entity.
func (etuo *EnumerationTypeUpdateOne) ClearChildEnumerationTypes() *EnumerationTypeUpdateOne {
	etuo.mutation.ClearChildEnumerationTypes()
	return etuo
}

// RemoveChildEnumerationTypeIDs removes the "child_enumeration_types" edge to EnumerationType entities by IDs.
func (etuo *EnumerationTypeUpdateOne) RemoveChildEnumerationTypeIDs(ids ...int) *EnumerationTypeUpdateOne {
	etuo.mutation.RemoveChildEnumerationTypeIDs(ids...)
	return etuo
}

// RemoveChildEnumerationTypes removes "child_enumeration_types" edges to EnumerationType entities.
func (etuo *EnumerationTypeUpdateOne) RemoveChildEnumerationTypes(e ...*EnumerationType) *EnumerationTypeUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return etuo.RemoveChildEnumerationTypeIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (etuo *EnumerationTypeUpdateOne) Select(field string, fields ...string) *EnumerationTypeUpdateOne {
	etuo.fields = append([]string{field}, fields...)
	return etuo
}

// Save executes the query and returns the updated EnumerationType entity.
func (etuo *EnumerationTypeUpdateOne) Save(ctx context.Context) (*EnumerationType, error) {
	var (
		err  error
		node *EnumerationType
	)
	etuo.defaults()
	if len(etuo.hooks) == 0 {
		if err = etuo.check(); err != nil {
			return nil, err
		}
		node, err = etuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EnumerationTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = etuo.check(); err != nil {
				return nil, err
			}
			etuo.mutation = mutation
			node, err = etuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(etuo.hooks) - 1; i >= 0; i-- {
			mut = etuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, etuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (etuo *EnumerationTypeUpdateOne) SaveX(ctx context.Context) *EnumerationType {
	node, err := etuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (etuo *EnumerationTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := etuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (etuo *EnumerationTypeUpdateOne) ExecX(ctx context.Context) {
	if err := etuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (etuo *EnumerationTypeUpdateOne) defaults() {
	if _, ok := etuo.mutation.UpdateTime(); !ok {
		v := enumerationtype.UpdateDefaultUpdateTime()
		etuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (etuo *EnumerationTypeUpdateOne) check() error {
	if v, ok := etuo.mutation.HasTable(); ok {
		if err := enumerationtype.HasTableValidator(v); err != nil {
			return &ValidationError{Name: "has_table", err: fmt.Errorf("ent: validator failed for field \"has_table\": %w", err)}
		}
	}
	return nil
}

func (etuo *EnumerationTypeUpdateOne) sqlSave(ctx context.Context) (_node *EnumerationType, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   enumerationtype.Table,
			Columns: enumerationtype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: enumerationtype.FieldID,
			},
		},
	}
	id, ok := etuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing EnumerationType.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := etuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, enumerationtype.FieldID)
		for _, f := range fields {
			if !enumerationtype.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != enumerationtype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := etuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := etuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: enumerationtype.FieldUpdateTime,
		})
	}
	if value, ok := etuo.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: enumerationtype.FieldStringRef,
		})
	}
	if etuo.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: enumerationtype.FieldStringRef,
		})
	}
	if value, ok := etuo.mutation.HasTable(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: enumerationtype.FieldHasTable,
		})
	}
	if etuo.mutation.HasTableCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: enumerationtype.FieldHasTable,
		})
	}
	if value, ok := etuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: enumerationtype.FieldDescription,
		})
	}
	if etuo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: enumerationtype.FieldDescription,
		})
	}
	if etuo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enumerationtype.ParentTable,
			Columns: []string{enumerationtype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: enumerationtype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := etuo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enumerationtype.ParentTable,
			Columns: []string{enumerationtype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: enumerationtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if etuo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumerationtype.ChildrenTable,
			Columns: []string{enumerationtype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: enumerationtype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := etuo.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !etuo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumerationtype.ChildrenTable,
			Columns: []string{enumerationtype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: enumerationtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := etuo.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumerationtype.ChildrenTable,
			Columns: []string{enumerationtype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: enumerationtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if etuo.mutation.EnumerationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumerationtype.EnumerationsTable,
			Columns: []string{enumerationtype.EnumerationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: enumeration.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := etuo.mutation.RemovedEnumerationsIDs(); len(nodes) > 0 && !etuo.mutation.EnumerationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumerationtype.EnumerationsTable,
			Columns: []string{enumerationtype.EnumerationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: enumeration.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := etuo.mutation.EnumerationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumerationtype.EnumerationsTable,
			Columns: []string{enumerationtype.EnumerationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: enumeration.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if etuo.mutation.ChildEnumerationTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   enumerationtype.ChildEnumerationTypesTable,
			Columns: enumerationtype.ChildEnumerationTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: enumerationtype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := etuo.mutation.RemovedChildEnumerationTypesIDs(); len(nodes) > 0 && !etuo.mutation.ChildEnumerationTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   enumerationtype.ChildEnumerationTypesTable,
			Columns: enumerationtype.ChildEnumerationTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: enumerationtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := etuo.mutation.ChildEnumerationTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   enumerationtype.ChildEnumerationTypesTable,
			Columns: enumerationtype.ChildEnumerationTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: enumerationtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &EnumerationType{config: etuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, etuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{enumerationtype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
