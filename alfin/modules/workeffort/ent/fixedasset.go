// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/fixedasset"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/party"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/partyrole"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/roletype"
)

// FixedAsset is the model entity for the FixedAsset schema.
type FixedAsset struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// StringRef holds the value of the "string_ref" field.
	StringRef string `json:"string_ref,omitempty"`
	// FixedAssetTypeID holds the value of the "fixed_asset_type_id" field.
	FixedAssetTypeID int `json:"fixed_asset_type_id,omitempty"`
	// InstanceOfProductID holds the value of the "instance_of_product_id" field.
	InstanceOfProductID int `json:"instance_of_product_id,omitempty"`
	// ClassEnumID holds the value of the "class_enum_id" field.
	ClassEnumID int `json:"class_enum_id,omitempty"`
	// FixedAssetName holds the value of the "fixed_asset_name" field.
	FixedAssetName string `json:"fixed_asset_name,omitempty"`
	// AcquireOrderID holds the value of the "acquire_order_id" field.
	AcquireOrderID int `json:"acquire_order_id,omitempty"`
	// AcquireOrderItemSeqID holds the value of the "acquire_order_item_seq_id" field.
	AcquireOrderItemSeqID int `json:"acquire_order_item_seq_id,omitempty"`
	// DateAcquired holds the value of the "date_acquired" field.
	DateAcquired time.Time `json:"date_acquired,omitempty"`
	// DateLastServiced holds the value of the "date_last_serviced" field.
	DateLastServiced time.Time `json:"date_last_serviced,omitempty"`
	// DateNextService holds the value of the "date_next_service" field.
	DateNextService time.Time `json:"date_next_service,omitempty"`
	// ExpectedEndOfLife holds the value of the "expected_end_of_life" field.
	ExpectedEndOfLife time.Time `json:"expected_end_of_life,omitempty"`
	// ActualEndOfLife holds the value of the "actual_end_of_life" field.
	ActualEndOfLife time.Time `json:"actual_end_of_life,omitempty"`
	// ProductionCapacity holds the value of the "production_capacity" field.
	ProductionCapacity float64 `json:"production_capacity,omitempty"`
	// UomID holds the value of the "uom_id" field.
	UomID int `json:"uom_id,omitempty"`
	// CalendarID holds the value of the "calendar_id" field.
	CalendarID int `json:"calendar_id,omitempty"`
	// SerialNumber holds the value of the "serial_number" field.
	SerialNumber string `json:"serial_number,omitempty"`
	// LocatedAtFacilityID holds the value of the "located_at_facility_id" field.
	LocatedAtFacilityID int `json:"located_at_facility_id,omitempty"`
	// LocatedAtLocationSeqID holds the value of the "located_at_location_seq_id" field.
	LocatedAtLocationSeqID int `json:"located_at_location_seq_id,omitempty"`
	// SalvageValue holds the value of the "salvage_value" field.
	SalvageValue float64 `json:"salvage_value,omitempty"`
	// Depreciation holds the value of the "depreciation" field.
	Depreciation float64 `json:"depreciation,omitempty"`
	// PurchaseCost holds the value of the "purchase_cost" field.
	PurchaseCost float64 `json:"purchase_cost,omitempty"`
	// PurchaseCostUomID holds the value of the "purchase_cost_uom_id" field.
	PurchaseCostUomID int `json:"purchase_cost_uom_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FixedAssetQuery when eager-loading is set.
	Edges                   FixedAssetEdges `json:"edges"`
	fixed_asset_children    *int
	party_fixed_assets      *int
	party_role_fixed_assets *int
	role_type_fixed_assets  *int
}

// FixedAssetEdges holds the relations/edges for other nodes in the graph.
type FixedAssetEdges struct {
	// Parent holds the value of the parent edge.
	Parent *FixedAsset `json:"parent,omitempty"`
	// Children holds the value of the children edge.
	Children []*FixedAsset `json:"children,omitempty"`
	// Party holds the value of the party edge.
	Party *Party `json:"party,omitempty"`
	// RoleType holds the value of the role_type edge.
	RoleType *RoleType `json:"role_type,omitempty"`
	// PartyRole holds the value of the party_role edge.
	PartyRole *PartyRole `json:"party_role,omitempty"`
	// ChildFixedAssets holds the value of the child_fixed_assets edge.
	ChildFixedAssets []*FixedAsset `json:"child_fixed_assets,omitempty"`
	// WorkEfforts holds the value of the work_efforts edge.
	WorkEfforts []*WorkEffort `json:"work_efforts,omitempty"`
	// WorkEffortFixedAssetAssigns holds the value of the work_effort_fixed_asset_assigns edge.
	WorkEffortFixedAssetAssigns []*WorkEffortFixedAssetAssign `json:"work_effort_fixed_asset_assigns,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [8]bool
}

// ParentOrErr returns the Parent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FixedAssetEdges) ParentOrErr() (*FixedAsset, error) {
	if e.loadedTypes[0] {
		if e.Parent == nil {
			// The edge parent was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: fixedasset.Label}
		}
		return e.Parent, nil
	}
	return nil, &NotLoadedError{edge: "parent"}
}

// ChildrenOrErr returns the Children value or an error if the edge
// was not loaded in eager-loading.
func (e FixedAssetEdges) ChildrenOrErr() ([]*FixedAsset, error) {
	if e.loadedTypes[1] {
		return e.Children, nil
	}
	return nil, &NotLoadedError{edge: "children"}
}

// PartyOrErr returns the Party value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FixedAssetEdges) PartyOrErr() (*Party, error) {
	if e.loadedTypes[2] {
		if e.Party == nil {
			// The edge party was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: party.Label}
		}
		return e.Party, nil
	}
	return nil, &NotLoadedError{edge: "party"}
}

// RoleTypeOrErr returns the RoleType value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FixedAssetEdges) RoleTypeOrErr() (*RoleType, error) {
	if e.loadedTypes[3] {
		if e.RoleType == nil {
			// The edge role_type was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: roletype.Label}
		}
		return e.RoleType, nil
	}
	return nil, &NotLoadedError{edge: "role_type"}
}

// PartyRoleOrErr returns the PartyRole value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FixedAssetEdges) PartyRoleOrErr() (*PartyRole, error) {
	if e.loadedTypes[4] {
		if e.PartyRole == nil {
			// The edge party_role was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: partyrole.Label}
		}
		return e.PartyRole, nil
	}
	return nil, &NotLoadedError{edge: "party_role"}
}

// ChildFixedAssetsOrErr returns the ChildFixedAssets value or an error if the edge
// was not loaded in eager-loading.
func (e FixedAssetEdges) ChildFixedAssetsOrErr() ([]*FixedAsset, error) {
	if e.loadedTypes[5] {
		return e.ChildFixedAssets, nil
	}
	return nil, &NotLoadedError{edge: "child_fixed_assets"}
}

// WorkEffortsOrErr returns the WorkEfforts value or an error if the edge
// was not loaded in eager-loading.
func (e FixedAssetEdges) WorkEffortsOrErr() ([]*WorkEffort, error) {
	if e.loadedTypes[6] {
		return e.WorkEfforts, nil
	}
	return nil, &NotLoadedError{edge: "work_efforts"}
}

// WorkEffortFixedAssetAssignsOrErr returns the WorkEffortFixedAssetAssigns value or an error if the edge
// was not loaded in eager-loading.
func (e FixedAssetEdges) WorkEffortFixedAssetAssignsOrErr() ([]*WorkEffortFixedAssetAssign, error) {
	if e.loadedTypes[7] {
		return e.WorkEffortFixedAssetAssigns, nil
	}
	return nil, &NotLoadedError{edge: "work_effort_fixed_asset_assigns"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FixedAsset) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case fixedasset.FieldProductionCapacity, fixedasset.FieldSalvageValue, fixedasset.FieldDepreciation, fixedasset.FieldPurchaseCost:
			values[i] = new(sql.NullFloat64)
		case fixedasset.FieldID, fixedasset.FieldFixedAssetTypeID, fixedasset.FieldInstanceOfProductID, fixedasset.FieldClassEnumID, fixedasset.FieldAcquireOrderID, fixedasset.FieldAcquireOrderItemSeqID, fixedasset.FieldUomID, fixedasset.FieldCalendarID, fixedasset.FieldLocatedAtFacilityID, fixedasset.FieldLocatedAtLocationSeqID, fixedasset.FieldPurchaseCostUomID:
			values[i] = new(sql.NullInt64)
		case fixedasset.FieldStringRef, fixedasset.FieldFixedAssetName, fixedasset.FieldSerialNumber:
			values[i] = new(sql.NullString)
		case fixedasset.FieldCreateTime, fixedasset.FieldUpdateTime, fixedasset.FieldDateAcquired, fixedasset.FieldDateLastServiced, fixedasset.FieldDateNextService, fixedasset.FieldExpectedEndOfLife, fixedasset.FieldActualEndOfLife:
			values[i] = new(sql.NullTime)
		case fixedasset.ForeignKeys[0]: // fixed_asset_children
			values[i] = new(sql.NullInt64)
		case fixedasset.ForeignKeys[1]: // party_fixed_assets
			values[i] = new(sql.NullInt64)
		case fixedasset.ForeignKeys[2]: // party_role_fixed_assets
			values[i] = new(sql.NullInt64)
		case fixedasset.ForeignKeys[3]: // role_type_fixed_assets
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type FixedAsset", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FixedAsset fields.
func (fa *FixedAsset) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case fixedasset.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			fa.ID = int(value.Int64)
		case fixedasset.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				fa.CreateTime = value.Time
			}
		case fixedasset.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				fa.UpdateTime = value.Time
			}
		case fixedasset.FieldStringRef:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field string_ref", values[i])
			} else if value.Valid {
				fa.StringRef = value.String
			}
		case fixedasset.FieldFixedAssetTypeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field fixed_asset_type_id", values[i])
			} else if value.Valid {
				fa.FixedAssetTypeID = int(value.Int64)
			}
		case fixedasset.FieldInstanceOfProductID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field instance_of_product_id", values[i])
			} else if value.Valid {
				fa.InstanceOfProductID = int(value.Int64)
			}
		case fixedasset.FieldClassEnumID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field class_enum_id", values[i])
			} else if value.Valid {
				fa.ClassEnumID = int(value.Int64)
			}
		case fixedasset.FieldFixedAssetName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field fixed_asset_name", values[i])
			} else if value.Valid {
				fa.FixedAssetName = value.String
			}
		case fixedasset.FieldAcquireOrderID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field acquire_order_id", values[i])
			} else if value.Valid {
				fa.AcquireOrderID = int(value.Int64)
			}
		case fixedasset.FieldAcquireOrderItemSeqID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field acquire_order_item_seq_id", values[i])
			} else if value.Valid {
				fa.AcquireOrderItemSeqID = int(value.Int64)
			}
		case fixedasset.FieldDateAcquired:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field date_acquired", values[i])
			} else if value.Valid {
				fa.DateAcquired = value.Time
			}
		case fixedasset.FieldDateLastServiced:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field date_last_serviced", values[i])
			} else if value.Valid {
				fa.DateLastServiced = value.Time
			}
		case fixedasset.FieldDateNextService:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field date_next_service", values[i])
			} else if value.Valid {
				fa.DateNextService = value.Time
			}
		case fixedasset.FieldExpectedEndOfLife:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expected_end_of_life", values[i])
			} else if value.Valid {
				fa.ExpectedEndOfLife = value.Time
			}
		case fixedasset.FieldActualEndOfLife:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field actual_end_of_life", values[i])
			} else if value.Valid {
				fa.ActualEndOfLife = value.Time
			}
		case fixedasset.FieldProductionCapacity:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field production_capacity", values[i])
			} else if value.Valid {
				fa.ProductionCapacity = value.Float64
			}
		case fixedasset.FieldUomID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field uom_id", values[i])
			} else if value.Valid {
				fa.UomID = int(value.Int64)
			}
		case fixedasset.FieldCalendarID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field calendar_id", values[i])
			} else if value.Valid {
				fa.CalendarID = int(value.Int64)
			}
		case fixedasset.FieldSerialNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field serial_number", values[i])
			} else if value.Valid {
				fa.SerialNumber = value.String
			}
		case fixedasset.FieldLocatedAtFacilityID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field located_at_facility_id", values[i])
			} else if value.Valid {
				fa.LocatedAtFacilityID = int(value.Int64)
			}
		case fixedasset.FieldLocatedAtLocationSeqID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field located_at_location_seq_id", values[i])
			} else if value.Valid {
				fa.LocatedAtLocationSeqID = int(value.Int64)
			}
		case fixedasset.FieldSalvageValue:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field salvage_value", values[i])
			} else if value.Valid {
				fa.SalvageValue = value.Float64
			}
		case fixedasset.FieldDepreciation:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field depreciation", values[i])
			} else if value.Valid {
				fa.Depreciation = value.Float64
			}
		case fixedasset.FieldPurchaseCost:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field purchase_cost", values[i])
			} else if value.Valid {
				fa.PurchaseCost = value.Float64
			}
		case fixedasset.FieldPurchaseCostUomID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field purchase_cost_uom_id", values[i])
			} else if value.Valid {
				fa.PurchaseCostUomID = int(value.Int64)
			}
		case fixedasset.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field fixed_asset_children", value)
			} else if value.Valid {
				fa.fixed_asset_children = new(int)
				*fa.fixed_asset_children = int(value.Int64)
			}
		case fixedasset.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field party_fixed_assets", value)
			} else if value.Valid {
				fa.party_fixed_assets = new(int)
				*fa.party_fixed_assets = int(value.Int64)
			}
		case fixedasset.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field party_role_fixed_assets", value)
			} else if value.Valid {
				fa.party_role_fixed_assets = new(int)
				*fa.party_role_fixed_assets = int(value.Int64)
			}
		case fixedasset.ForeignKeys[3]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field role_type_fixed_assets", value)
			} else if value.Valid {
				fa.role_type_fixed_assets = new(int)
				*fa.role_type_fixed_assets = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryParent queries the "parent" edge of the FixedAsset entity.
func (fa *FixedAsset) QueryParent() *FixedAssetQuery {
	return (&FixedAssetClient{config: fa.config}).QueryParent(fa)
}

// QueryChildren queries the "children" edge of the FixedAsset entity.
func (fa *FixedAsset) QueryChildren() *FixedAssetQuery {
	return (&FixedAssetClient{config: fa.config}).QueryChildren(fa)
}

// QueryParty queries the "party" edge of the FixedAsset entity.
func (fa *FixedAsset) QueryParty() *PartyQuery {
	return (&FixedAssetClient{config: fa.config}).QueryParty(fa)
}

// QueryRoleType queries the "role_type" edge of the FixedAsset entity.
func (fa *FixedAsset) QueryRoleType() *RoleTypeQuery {
	return (&FixedAssetClient{config: fa.config}).QueryRoleType(fa)
}

// QueryPartyRole queries the "party_role" edge of the FixedAsset entity.
func (fa *FixedAsset) QueryPartyRole() *PartyRoleQuery {
	return (&FixedAssetClient{config: fa.config}).QueryPartyRole(fa)
}

// QueryChildFixedAssets queries the "child_fixed_assets" edge of the FixedAsset entity.
func (fa *FixedAsset) QueryChildFixedAssets() *FixedAssetQuery {
	return (&FixedAssetClient{config: fa.config}).QueryChildFixedAssets(fa)
}

// QueryWorkEfforts queries the "work_efforts" edge of the FixedAsset entity.
func (fa *FixedAsset) QueryWorkEfforts() *WorkEffortQuery {
	return (&FixedAssetClient{config: fa.config}).QueryWorkEfforts(fa)
}

// QueryWorkEffortFixedAssetAssigns queries the "work_effort_fixed_asset_assigns" edge of the FixedAsset entity.
func (fa *FixedAsset) QueryWorkEffortFixedAssetAssigns() *WorkEffortFixedAssetAssignQuery {
	return (&FixedAssetClient{config: fa.config}).QueryWorkEffortFixedAssetAssigns(fa)
}

// Update returns a builder for updating this FixedAsset.
// Note that you need to call FixedAsset.Unwrap() before calling this method if this FixedAsset
// was returned from a transaction, and the transaction was committed or rolled back.
func (fa *FixedAsset) Update() *FixedAssetUpdateOne {
	return (&FixedAssetClient{config: fa.config}).UpdateOne(fa)
}

// Unwrap unwraps the FixedAsset entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (fa *FixedAsset) Unwrap() *FixedAsset {
	tx, ok := fa.config.driver.(*txDriver)
	if !ok {
		panic("ent: FixedAsset is not a transactional entity")
	}
	fa.config.driver = tx.drv
	return fa
}

// String implements the fmt.Stringer.
func (fa *FixedAsset) String() string {
	var builder strings.Builder
	builder.WriteString("FixedAsset(")
	builder.WriteString(fmt.Sprintf("id=%v", fa.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(fa.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(fa.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", string_ref=")
	builder.WriteString(fa.StringRef)
	builder.WriteString(", fixed_asset_type_id=")
	builder.WriteString(fmt.Sprintf("%v", fa.FixedAssetTypeID))
	builder.WriteString(", instance_of_product_id=")
	builder.WriteString(fmt.Sprintf("%v", fa.InstanceOfProductID))
	builder.WriteString(", class_enum_id=")
	builder.WriteString(fmt.Sprintf("%v", fa.ClassEnumID))
	builder.WriteString(", fixed_asset_name=")
	builder.WriteString(fa.FixedAssetName)
	builder.WriteString(", acquire_order_id=")
	builder.WriteString(fmt.Sprintf("%v", fa.AcquireOrderID))
	builder.WriteString(", acquire_order_item_seq_id=")
	builder.WriteString(fmt.Sprintf("%v", fa.AcquireOrderItemSeqID))
	builder.WriteString(", date_acquired=")
	builder.WriteString(fa.DateAcquired.Format(time.ANSIC))
	builder.WriteString(", date_last_serviced=")
	builder.WriteString(fa.DateLastServiced.Format(time.ANSIC))
	builder.WriteString(", date_next_service=")
	builder.WriteString(fa.DateNextService.Format(time.ANSIC))
	builder.WriteString(", expected_end_of_life=")
	builder.WriteString(fa.ExpectedEndOfLife.Format(time.ANSIC))
	builder.WriteString(", actual_end_of_life=")
	builder.WriteString(fa.ActualEndOfLife.Format(time.ANSIC))
	builder.WriteString(", production_capacity=")
	builder.WriteString(fmt.Sprintf("%v", fa.ProductionCapacity))
	builder.WriteString(", uom_id=")
	builder.WriteString(fmt.Sprintf("%v", fa.UomID))
	builder.WriteString(", calendar_id=")
	builder.WriteString(fmt.Sprintf("%v", fa.CalendarID))
	builder.WriteString(", serial_number=")
	builder.WriteString(fa.SerialNumber)
	builder.WriteString(", located_at_facility_id=")
	builder.WriteString(fmt.Sprintf("%v", fa.LocatedAtFacilityID))
	builder.WriteString(", located_at_location_seq_id=")
	builder.WriteString(fmt.Sprintf("%v", fa.LocatedAtLocationSeqID))
	builder.WriteString(", salvage_value=")
	builder.WriteString(fmt.Sprintf("%v", fa.SalvageValue))
	builder.WriteString(", depreciation=")
	builder.WriteString(fmt.Sprintf("%v", fa.Depreciation))
	builder.WriteString(", purchase_cost=")
	builder.WriteString(fmt.Sprintf("%v", fa.PurchaseCost))
	builder.WriteString(", purchase_cost_uom_id=")
	builder.WriteString(fmt.Sprintf("%v", fa.PurchaseCostUomID))
	builder.WriteByte(')')
	return builder.String()
}

// FixedAssets is a parsable slice of FixedAsset.
type FixedAssets []*FixedAsset

func (fa FixedAssets) config(cfg config) {
	for _i := range fa {
		fa[_i].config = cfg
	}
}
