// Code generated by entc, DO NOT EDIT.

package fixedasset

import (
	"time"
)

const (
	// Label holds the string label denoting the fixedasset type in the database.
	Label = "fixed_asset"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldStringRef holds the string denoting the string_ref field in the database.
	FieldStringRef = "string_ref"
	// FieldFixedAssetTypeID holds the string denoting the fixed_asset_type_id field in the database.
	FieldFixedAssetTypeID = "fixed_asset_type_id"
	// FieldInstanceOfProductID holds the string denoting the instance_of_product_id field in the database.
	FieldInstanceOfProductID = "instance_of_product_id"
	// FieldClassEnumID holds the string denoting the class_enum_id field in the database.
	FieldClassEnumID = "class_enum_id"
	// FieldFixedAssetName holds the string denoting the fixed_asset_name field in the database.
	FieldFixedAssetName = "fixed_asset_name"
	// FieldAcquireOrderID holds the string denoting the acquire_order_id field in the database.
	FieldAcquireOrderID = "acquire_order_id"
	// FieldAcquireOrderItemSeqID holds the string denoting the acquire_order_item_seq_id field in the database.
	FieldAcquireOrderItemSeqID = "acquire_order_item_seq_id"
	// FieldDateAcquired holds the string denoting the date_acquired field in the database.
	FieldDateAcquired = "date_acquired"
	// FieldDateLastServiced holds the string denoting the date_last_serviced field in the database.
	FieldDateLastServiced = "date_last_serviced"
	// FieldDateNextService holds the string denoting the date_next_service field in the database.
	FieldDateNextService = "date_next_service"
	// FieldExpectedEndOfLife holds the string denoting the expected_end_of_life field in the database.
	FieldExpectedEndOfLife = "expected_end_of_life"
	// FieldActualEndOfLife holds the string denoting the actual_end_of_life field in the database.
	FieldActualEndOfLife = "actual_end_of_life"
	// FieldProductionCapacity holds the string denoting the production_capacity field in the database.
	FieldProductionCapacity = "production_capacity"
	// FieldUomID holds the string denoting the uom_id field in the database.
	FieldUomID = "uom_id"
	// FieldCalendarID holds the string denoting the calendar_id field in the database.
	FieldCalendarID = "calendar_id"
	// FieldSerialNumber holds the string denoting the serial_number field in the database.
	FieldSerialNumber = "serial_number"
	// FieldLocatedAtFacilityID holds the string denoting the located_at_facility_id field in the database.
	FieldLocatedAtFacilityID = "located_at_facility_id"
	// FieldLocatedAtLocationSeqID holds the string denoting the located_at_location_seq_id field in the database.
	FieldLocatedAtLocationSeqID = "located_at_location_seq_id"
	// FieldSalvageValue holds the string denoting the salvage_value field in the database.
	FieldSalvageValue = "salvage_value"
	// FieldDepreciation holds the string denoting the depreciation field in the database.
	FieldDepreciation = "depreciation"
	// FieldPurchaseCost holds the string denoting the purchase_cost field in the database.
	FieldPurchaseCost = "purchase_cost"
	// FieldPurchaseCostUomID holds the string denoting the purchase_cost_uom_id field in the database.
	FieldPurchaseCostUomID = "purchase_cost_uom_id"
	// EdgeParent holds the string denoting the parent edge name in mutations.
	EdgeParent = "parent"
	// EdgeChildren holds the string denoting the children edge name in mutations.
	EdgeChildren = "children"
	// EdgeParty holds the string denoting the party edge name in mutations.
	EdgeParty = "party"
	// EdgeRoleType holds the string denoting the role_type edge name in mutations.
	EdgeRoleType = "role_type"
	// EdgePartyRole holds the string denoting the party_role edge name in mutations.
	EdgePartyRole = "party_role"
	// EdgeChildFixedAssets holds the string denoting the child_fixed_assets edge name in mutations.
	EdgeChildFixedAssets = "child_fixed_assets"
	// EdgeWorkEfforts holds the string denoting the work_efforts edge name in mutations.
	EdgeWorkEfforts = "work_efforts"
	// EdgeWorkEffortFixedAssetAssigns holds the string denoting the work_effort_fixed_asset_assigns edge name in mutations.
	EdgeWorkEffortFixedAssetAssigns = "work_effort_fixed_asset_assigns"
	// Table holds the table name of the fixedasset in the database.
	Table = "fixed_assets"
	// ParentTable is the table the holds the parent relation/edge.
	ParentTable = "fixed_assets"
	// ParentColumn is the table column denoting the parent relation/edge.
	ParentColumn = "fixed_asset_children"
	// ChildrenTable is the table the holds the children relation/edge.
	ChildrenTable = "fixed_assets"
	// ChildrenColumn is the table column denoting the children relation/edge.
	ChildrenColumn = "fixed_asset_children"
	// PartyTable is the table the holds the party relation/edge.
	PartyTable = "fixed_assets"
	// PartyInverseTable is the table name for the Party entity.
	// It exists in this package in order to avoid circular dependency with the "party" package.
	PartyInverseTable = "parties"
	// PartyColumn is the table column denoting the party relation/edge.
	PartyColumn = "party_fixed_assets"
	// RoleTypeTable is the table the holds the role_type relation/edge.
	RoleTypeTable = "fixed_assets"
	// RoleTypeInverseTable is the table name for the RoleType entity.
	// It exists in this package in order to avoid circular dependency with the "roletype" package.
	RoleTypeInverseTable = "role_types"
	// RoleTypeColumn is the table column denoting the role_type relation/edge.
	RoleTypeColumn = "role_type_fixed_assets"
	// PartyRoleTable is the table the holds the party_role relation/edge.
	PartyRoleTable = "fixed_assets"
	// PartyRoleInverseTable is the table name for the PartyRole entity.
	// It exists in this package in order to avoid circular dependency with the "partyrole" package.
	PartyRoleInverseTable = "party_roles"
	// PartyRoleColumn is the table column denoting the party_role relation/edge.
	PartyRoleColumn = "party_role_fixed_assets"
	// ChildFixedAssetsTable is the table the holds the child_fixed_assets relation/edge. The primary key declared below.
	ChildFixedAssetsTable = "fixed_asset_child_fixed_assets"
	// WorkEffortsTable is the table the holds the work_efforts relation/edge.
	WorkEffortsTable = "work_efforts"
	// WorkEffortsInverseTable is the table name for the WorkEffort entity.
	// It exists in this package in order to avoid circular dependency with the "workeffort" package.
	WorkEffortsInverseTable = "work_efforts"
	// WorkEffortsColumn is the table column denoting the work_efforts relation/edge.
	WorkEffortsColumn = "fixed_asset_work_efforts"
	// WorkEffortFixedAssetAssignsTable is the table the holds the work_effort_fixed_asset_assigns relation/edge.
	WorkEffortFixedAssetAssignsTable = "work_effort_fixed_asset_assigns"
	// WorkEffortFixedAssetAssignsInverseTable is the table name for the WorkEffortFixedAssetAssign entity.
	// It exists in this package in order to avoid circular dependency with the "workeffortfixedassetassign" package.
	WorkEffortFixedAssetAssignsInverseTable = "work_effort_fixed_asset_assigns"
	// WorkEffortFixedAssetAssignsColumn is the table column denoting the work_effort_fixed_asset_assigns relation/edge.
	WorkEffortFixedAssetAssignsColumn = "fixed_asset_work_effort_fixed_asset_assigns"
)

// Columns holds all SQL columns for fixedasset fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldStringRef,
	FieldFixedAssetTypeID,
	FieldInstanceOfProductID,
	FieldClassEnumID,
	FieldFixedAssetName,
	FieldAcquireOrderID,
	FieldAcquireOrderItemSeqID,
	FieldDateAcquired,
	FieldDateLastServiced,
	FieldDateNextService,
	FieldExpectedEndOfLife,
	FieldActualEndOfLife,
	FieldProductionCapacity,
	FieldUomID,
	FieldCalendarID,
	FieldSerialNumber,
	FieldLocatedAtFacilityID,
	FieldLocatedAtLocationSeqID,
	FieldSalvageValue,
	FieldDepreciation,
	FieldPurchaseCost,
	FieldPurchaseCostUomID,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "fixed_assets"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"fixed_asset_children",
	"party_fixed_assets",
	"party_role_fixed_assets",
	"role_type_fixed_assets",
}

var (
	// ChildFixedAssetsPrimaryKey and ChildFixedAssetsColumn2 are the table columns denoting the
	// primary key for the child_fixed_assets relation (M2M).
	ChildFixedAssetsPrimaryKey = []string{"fixed_asset_id", "child_fixed_asset_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// DefaultDateAcquired holds the default value on creation for the "date_acquired" field.
	DefaultDateAcquired func() time.Time
	// DefaultDateLastServiced holds the default value on creation for the "date_last_serviced" field.
	DefaultDateLastServiced func() time.Time
	// DefaultDateNextService holds the default value on creation for the "date_next_service" field.
	DefaultDateNextService func() time.Time
	// DefaultExpectedEndOfLife holds the default value on creation for the "expected_end_of_life" field.
	DefaultExpectedEndOfLife func() time.Time
	// DefaultActualEndOfLife holds the default value on creation for the "actual_end_of_life" field.
	DefaultActualEndOfLife func() time.Time
)
