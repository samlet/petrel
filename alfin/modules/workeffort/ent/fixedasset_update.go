// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/fixedasset"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/party"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/partyrole"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/predicate"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/roletype"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/workeffort"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/workeffortfixedassetassign"
)

// FixedAssetUpdate is the builder for updating FixedAsset entities.
type FixedAssetUpdate struct {
	config
	hooks    []Hook
	mutation *FixedAssetMutation
}

// Where adds a new predicate for the FixedAssetUpdate builder.
func (fau *FixedAssetUpdate) Where(ps ...predicate.FixedAsset) *FixedAssetUpdate {
	fau.mutation.predicates = append(fau.mutation.predicates, ps...)
	return fau
}

// SetStringRef sets the "string_ref" field.
func (fau *FixedAssetUpdate) SetStringRef(s string) *FixedAssetUpdate {
	fau.mutation.SetStringRef(s)
	return fau
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (fau *FixedAssetUpdate) SetNillableStringRef(s *string) *FixedAssetUpdate {
	if s != nil {
		fau.SetStringRef(*s)
	}
	return fau
}

// ClearStringRef clears the value of the "string_ref" field.
func (fau *FixedAssetUpdate) ClearStringRef() *FixedAssetUpdate {
	fau.mutation.ClearStringRef()
	return fau
}

// SetFixedAssetTypeID sets the "fixed_asset_type_id" field.
func (fau *FixedAssetUpdate) SetFixedAssetTypeID(i int) *FixedAssetUpdate {
	fau.mutation.ResetFixedAssetTypeID()
	fau.mutation.SetFixedAssetTypeID(i)
	return fau
}

// SetNillableFixedAssetTypeID sets the "fixed_asset_type_id" field if the given value is not nil.
func (fau *FixedAssetUpdate) SetNillableFixedAssetTypeID(i *int) *FixedAssetUpdate {
	if i != nil {
		fau.SetFixedAssetTypeID(*i)
	}
	return fau
}

// AddFixedAssetTypeID adds i to the "fixed_asset_type_id" field.
func (fau *FixedAssetUpdate) AddFixedAssetTypeID(i int) *FixedAssetUpdate {
	fau.mutation.AddFixedAssetTypeID(i)
	return fau
}

// ClearFixedAssetTypeID clears the value of the "fixed_asset_type_id" field.
func (fau *FixedAssetUpdate) ClearFixedAssetTypeID() *FixedAssetUpdate {
	fau.mutation.ClearFixedAssetTypeID()
	return fau
}

// SetInstanceOfProductID sets the "instance_of_product_id" field.
func (fau *FixedAssetUpdate) SetInstanceOfProductID(i int) *FixedAssetUpdate {
	fau.mutation.ResetInstanceOfProductID()
	fau.mutation.SetInstanceOfProductID(i)
	return fau
}

// SetNillableInstanceOfProductID sets the "instance_of_product_id" field if the given value is not nil.
func (fau *FixedAssetUpdate) SetNillableInstanceOfProductID(i *int) *FixedAssetUpdate {
	if i != nil {
		fau.SetInstanceOfProductID(*i)
	}
	return fau
}

// AddInstanceOfProductID adds i to the "instance_of_product_id" field.
func (fau *FixedAssetUpdate) AddInstanceOfProductID(i int) *FixedAssetUpdate {
	fau.mutation.AddInstanceOfProductID(i)
	return fau
}

// ClearInstanceOfProductID clears the value of the "instance_of_product_id" field.
func (fau *FixedAssetUpdate) ClearInstanceOfProductID() *FixedAssetUpdate {
	fau.mutation.ClearInstanceOfProductID()
	return fau
}

// SetClassEnumID sets the "class_enum_id" field.
func (fau *FixedAssetUpdate) SetClassEnumID(i int) *FixedAssetUpdate {
	fau.mutation.ResetClassEnumID()
	fau.mutation.SetClassEnumID(i)
	return fau
}

// SetNillableClassEnumID sets the "class_enum_id" field if the given value is not nil.
func (fau *FixedAssetUpdate) SetNillableClassEnumID(i *int) *FixedAssetUpdate {
	if i != nil {
		fau.SetClassEnumID(*i)
	}
	return fau
}

// AddClassEnumID adds i to the "class_enum_id" field.
func (fau *FixedAssetUpdate) AddClassEnumID(i int) *FixedAssetUpdate {
	fau.mutation.AddClassEnumID(i)
	return fau
}

// ClearClassEnumID clears the value of the "class_enum_id" field.
func (fau *FixedAssetUpdate) ClearClassEnumID() *FixedAssetUpdate {
	fau.mutation.ClearClassEnumID()
	return fau
}

// SetFixedAssetName sets the "fixed_asset_name" field.
func (fau *FixedAssetUpdate) SetFixedAssetName(s string) *FixedAssetUpdate {
	fau.mutation.SetFixedAssetName(s)
	return fau
}

// SetNillableFixedAssetName sets the "fixed_asset_name" field if the given value is not nil.
func (fau *FixedAssetUpdate) SetNillableFixedAssetName(s *string) *FixedAssetUpdate {
	if s != nil {
		fau.SetFixedAssetName(*s)
	}
	return fau
}

// ClearFixedAssetName clears the value of the "fixed_asset_name" field.
func (fau *FixedAssetUpdate) ClearFixedAssetName() *FixedAssetUpdate {
	fau.mutation.ClearFixedAssetName()
	return fau
}

// SetAcquireOrderID sets the "acquire_order_id" field.
func (fau *FixedAssetUpdate) SetAcquireOrderID(i int) *FixedAssetUpdate {
	fau.mutation.ResetAcquireOrderID()
	fau.mutation.SetAcquireOrderID(i)
	return fau
}

// SetNillableAcquireOrderID sets the "acquire_order_id" field if the given value is not nil.
func (fau *FixedAssetUpdate) SetNillableAcquireOrderID(i *int) *FixedAssetUpdate {
	if i != nil {
		fau.SetAcquireOrderID(*i)
	}
	return fau
}

// AddAcquireOrderID adds i to the "acquire_order_id" field.
func (fau *FixedAssetUpdate) AddAcquireOrderID(i int) *FixedAssetUpdate {
	fau.mutation.AddAcquireOrderID(i)
	return fau
}

// ClearAcquireOrderID clears the value of the "acquire_order_id" field.
func (fau *FixedAssetUpdate) ClearAcquireOrderID() *FixedAssetUpdate {
	fau.mutation.ClearAcquireOrderID()
	return fau
}

// SetAcquireOrderItemSeqID sets the "acquire_order_item_seq_id" field.
func (fau *FixedAssetUpdate) SetAcquireOrderItemSeqID(i int) *FixedAssetUpdate {
	fau.mutation.ResetAcquireOrderItemSeqID()
	fau.mutation.SetAcquireOrderItemSeqID(i)
	return fau
}

// SetNillableAcquireOrderItemSeqID sets the "acquire_order_item_seq_id" field if the given value is not nil.
func (fau *FixedAssetUpdate) SetNillableAcquireOrderItemSeqID(i *int) *FixedAssetUpdate {
	if i != nil {
		fau.SetAcquireOrderItemSeqID(*i)
	}
	return fau
}

// AddAcquireOrderItemSeqID adds i to the "acquire_order_item_seq_id" field.
func (fau *FixedAssetUpdate) AddAcquireOrderItemSeqID(i int) *FixedAssetUpdate {
	fau.mutation.AddAcquireOrderItemSeqID(i)
	return fau
}

// ClearAcquireOrderItemSeqID clears the value of the "acquire_order_item_seq_id" field.
func (fau *FixedAssetUpdate) ClearAcquireOrderItemSeqID() *FixedAssetUpdate {
	fau.mutation.ClearAcquireOrderItemSeqID()
	return fau
}

// SetDateAcquired sets the "date_acquired" field.
func (fau *FixedAssetUpdate) SetDateAcquired(t time.Time) *FixedAssetUpdate {
	fau.mutation.SetDateAcquired(t)
	return fau
}

// SetNillableDateAcquired sets the "date_acquired" field if the given value is not nil.
func (fau *FixedAssetUpdate) SetNillableDateAcquired(t *time.Time) *FixedAssetUpdate {
	if t != nil {
		fau.SetDateAcquired(*t)
	}
	return fau
}

// ClearDateAcquired clears the value of the "date_acquired" field.
func (fau *FixedAssetUpdate) ClearDateAcquired() *FixedAssetUpdate {
	fau.mutation.ClearDateAcquired()
	return fau
}

// SetDateLastServiced sets the "date_last_serviced" field.
func (fau *FixedAssetUpdate) SetDateLastServiced(t time.Time) *FixedAssetUpdate {
	fau.mutation.SetDateLastServiced(t)
	return fau
}

// SetNillableDateLastServiced sets the "date_last_serviced" field if the given value is not nil.
func (fau *FixedAssetUpdate) SetNillableDateLastServiced(t *time.Time) *FixedAssetUpdate {
	if t != nil {
		fau.SetDateLastServiced(*t)
	}
	return fau
}

// ClearDateLastServiced clears the value of the "date_last_serviced" field.
func (fau *FixedAssetUpdate) ClearDateLastServiced() *FixedAssetUpdate {
	fau.mutation.ClearDateLastServiced()
	return fau
}

// SetDateNextService sets the "date_next_service" field.
func (fau *FixedAssetUpdate) SetDateNextService(t time.Time) *FixedAssetUpdate {
	fau.mutation.SetDateNextService(t)
	return fau
}

// SetNillableDateNextService sets the "date_next_service" field if the given value is not nil.
func (fau *FixedAssetUpdate) SetNillableDateNextService(t *time.Time) *FixedAssetUpdate {
	if t != nil {
		fau.SetDateNextService(*t)
	}
	return fau
}

// ClearDateNextService clears the value of the "date_next_service" field.
func (fau *FixedAssetUpdate) ClearDateNextService() *FixedAssetUpdate {
	fau.mutation.ClearDateNextService()
	return fau
}

// SetExpectedEndOfLife sets the "expected_end_of_life" field.
func (fau *FixedAssetUpdate) SetExpectedEndOfLife(t time.Time) *FixedAssetUpdate {
	fau.mutation.SetExpectedEndOfLife(t)
	return fau
}

// SetNillableExpectedEndOfLife sets the "expected_end_of_life" field if the given value is not nil.
func (fau *FixedAssetUpdate) SetNillableExpectedEndOfLife(t *time.Time) *FixedAssetUpdate {
	if t != nil {
		fau.SetExpectedEndOfLife(*t)
	}
	return fau
}

// ClearExpectedEndOfLife clears the value of the "expected_end_of_life" field.
func (fau *FixedAssetUpdate) ClearExpectedEndOfLife() *FixedAssetUpdate {
	fau.mutation.ClearExpectedEndOfLife()
	return fau
}

// SetActualEndOfLife sets the "actual_end_of_life" field.
func (fau *FixedAssetUpdate) SetActualEndOfLife(t time.Time) *FixedAssetUpdate {
	fau.mutation.SetActualEndOfLife(t)
	return fau
}

// SetNillableActualEndOfLife sets the "actual_end_of_life" field if the given value is not nil.
func (fau *FixedAssetUpdate) SetNillableActualEndOfLife(t *time.Time) *FixedAssetUpdate {
	if t != nil {
		fau.SetActualEndOfLife(*t)
	}
	return fau
}

// ClearActualEndOfLife clears the value of the "actual_end_of_life" field.
func (fau *FixedAssetUpdate) ClearActualEndOfLife() *FixedAssetUpdate {
	fau.mutation.ClearActualEndOfLife()
	return fau
}

// SetProductionCapacity sets the "production_capacity" field.
func (fau *FixedAssetUpdate) SetProductionCapacity(f float64) *FixedAssetUpdate {
	fau.mutation.ResetProductionCapacity()
	fau.mutation.SetProductionCapacity(f)
	return fau
}

// SetNillableProductionCapacity sets the "production_capacity" field if the given value is not nil.
func (fau *FixedAssetUpdate) SetNillableProductionCapacity(f *float64) *FixedAssetUpdate {
	if f != nil {
		fau.SetProductionCapacity(*f)
	}
	return fau
}

// AddProductionCapacity adds f to the "production_capacity" field.
func (fau *FixedAssetUpdate) AddProductionCapacity(f float64) *FixedAssetUpdate {
	fau.mutation.AddProductionCapacity(f)
	return fau
}

// ClearProductionCapacity clears the value of the "production_capacity" field.
func (fau *FixedAssetUpdate) ClearProductionCapacity() *FixedAssetUpdate {
	fau.mutation.ClearProductionCapacity()
	return fau
}

// SetUomID sets the "uom_id" field.
func (fau *FixedAssetUpdate) SetUomID(i int) *FixedAssetUpdate {
	fau.mutation.ResetUomID()
	fau.mutation.SetUomID(i)
	return fau
}

// SetNillableUomID sets the "uom_id" field if the given value is not nil.
func (fau *FixedAssetUpdate) SetNillableUomID(i *int) *FixedAssetUpdate {
	if i != nil {
		fau.SetUomID(*i)
	}
	return fau
}

// AddUomID adds i to the "uom_id" field.
func (fau *FixedAssetUpdate) AddUomID(i int) *FixedAssetUpdate {
	fau.mutation.AddUomID(i)
	return fau
}

// ClearUomID clears the value of the "uom_id" field.
func (fau *FixedAssetUpdate) ClearUomID() *FixedAssetUpdate {
	fau.mutation.ClearUomID()
	return fau
}

// SetCalendarID sets the "calendar_id" field.
func (fau *FixedAssetUpdate) SetCalendarID(i int) *FixedAssetUpdate {
	fau.mutation.ResetCalendarID()
	fau.mutation.SetCalendarID(i)
	return fau
}

// SetNillableCalendarID sets the "calendar_id" field if the given value is not nil.
func (fau *FixedAssetUpdate) SetNillableCalendarID(i *int) *FixedAssetUpdate {
	if i != nil {
		fau.SetCalendarID(*i)
	}
	return fau
}

// AddCalendarID adds i to the "calendar_id" field.
func (fau *FixedAssetUpdate) AddCalendarID(i int) *FixedAssetUpdate {
	fau.mutation.AddCalendarID(i)
	return fau
}

// ClearCalendarID clears the value of the "calendar_id" field.
func (fau *FixedAssetUpdate) ClearCalendarID() *FixedAssetUpdate {
	fau.mutation.ClearCalendarID()
	return fau
}

// SetSerialNumber sets the "serial_number" field.
func (fau *FixedAssetUpdate) SetSerialNumber(s string) *FixedAssetUpdate {
	fau.mutation.SetSerialNumber(s)
	return fau
}

// SetNillableSerialNumber sets the "serial_number" field if the given value is not nil.
func (fau *FixedAssetUpdate) SetNillableSerialNumber(s *string) *FixedAssetUpdate {
	if s != nil {
		fau.SetSerialNumber(*s)
	}
	return fau
}

// ClearSerialNumber clears the value of the "serial_number" field.
func (fau *FixedAssetUpdate) ClearSerialNumber() *FixedAssetUpdate {
	fau.mutation.ClearSerialNumber()
	return fau
}

// SetLocatedAtFacilityID sets the "located_at_facility_id" field.
func (fau *FixedAssetUpdate) SetLocatedAtFacilityID(i int) *FixedAssetUpdate {
	fau.mutation.ResetLocatedAtFacilityID()
	fau.mutation.SetLocatedAtFacilityID(i)
	return fau
}

// SetNillableLocatedAtFacilityID sets the "located_at_facility_id" field if the given value is not nil.
func (fau *FixedAssetUpdate) SetNillableLocatedAtFacilityID(i *int) *FixedAssetUpdate {
	if i != nil {
		fau.SetLocatedAtFacilityID(*i)
	}
	return fau
}

// AddLocatedAtFacilityID adds i to the "located_at_facility_id" field.
func (fau *FixedAssetUpdate) AddLocatedAtFacilityID(i int) *FixedAssetUpdate {
	fau.mutation.AddLocatedAtFacilityID(i)
	return fau
}

// ClearLocatedAtFacilityID clears the value of the "located_at_facility_id" field.
func (fau *FixedAssetUpdate) ClearLocatedAtFacilityID() *FixedAssetUpdate {
	fau.mutation.ClearLocatedAtFacilityID()
	return fau
}

// SetLocatedAtLocationSeqID sets the "located_at_location_seq_id" field.
func (fau *FixedAssetUpdate) SetLocatedAtLocationSeqID(i int) *FixedAssetUpdate {
	fau.mutation.ResetLocatedAtLocationSeqID()
	fau.mutation.SetLocatedAtLocationSeqID(i)
	return fau
}

// SetNillableLocatedAtLocationSeqID sets the "located_at_location_seq_id" field if the given value is not nil.
func (fau *FixedAssetUpdate) SetNillableLocatedAtLocationSeqID(i *int) *FixedAssetUpdate {
	if i != nil {
		fau.SetLocatedAtLocationSeqID(*i)
	}
	return fau
}

// AddLocatedAtLocationSeqID adds i to the "located_at_location_seq_id" field.
func (fau *FixedAssetUpdate) AddLocatedAtLocationSeqID(i int) *FixedAssetUpdate {
	fau.mutation.AddLocatedAtLocationSeqID(i)
	return fau
}

// ClearLocatedAtLocationSeqID clears the value of the "located_at_location_seq_id" field.
func (fau *FixedAssetUpdate) ClearLocatedAtLocationSeqID() *FixedAssetUpdate {
	fau.mutation.ClearLocatedAtLocationSeqID()
	return fau
}

// SetSalvageValue sets the "salvage_value" field.
func (fau *FixedAssetUpdate) SetSalvageValue(f float64) *FixedAssetUpdate {
	fau.mutation.ResetSalvageValue()
	fau.mutation.SetSalvageValue(f)
	return fau
}

// SetNillableSalvageValue sets the "salvage_value" field if the given value is not nil.
func (fau *FixedAssetUpdate) SetNillableSalvageValue(f *float64) *FixedAssetUpdate {
	if f != nil {
		fau.SetSalvageValue(*f)
	}
	return fau
}

// AddSalvageValue adds f to the "salvage_value" field.
func (fau *FixedAssetUpdate) AddSalvageValue(f float64) *FixedAssetUpdate {
	fau.mutation.AddSalvageValue(f)
	return fau
}

// ClearSalvageValue clears the value of the "salvage_value" field.
func (fau *FixedAssetUpdate) ClearSalvageValue() *FixedAssetUpdate {
	fau.mutation.ClearSalvageValue()
	return fau
}

// SetDepreciation sets the "depreciation" field.
func (fau *FixedAssetUpdate) SetDepreciation(f float64) *FixedAssetUpdate {
	fau.mutation.ResetDepreciation()
	fau.mutation.SetDepreciation(f)
	return fau
}

// SetNillableDepreciation sets the "depreciation" field if the given value is not nil.
func (fau *FixedAssetUpdate) SetNillableDepreciation(f *float64) *FixedAssetUpdate {
	if f != nil {
		fau.SetDepreciation(*f)
	}
	return fau
}

// AddDepreciation adds f to the "depreciation" field.
func (fau *FixedAssetUpdate) AddDepreciation(f float64) *FixedAssetUpdate {
	fau.mutation.AddDepreciation(f)
	return fau
}

// ClearDepreciation clears the value of the "depreciation" field.
func (fau *FixedAssetUpdate) ClearDepreciation() *FixedAssetUpdate {
	fau.mutation.ClearDepreciation()
	return fau
}

// SetPurchaseCost sets the "purchase_cost" field.
func (fau *FixedAssetUpdate) SetPurchaseCost(f float64) *FixedAssetUpdate {
	fau.mutation.ResetPurchaseCost()
	fau.mutation.SetPurchaseCost(f)
	return fau
}

// SetNillablePurchaseCost sets the "purchase_cost" field if the given value is not nil.
func (fau *FixedAssetUpdate) SetNillablePurchaseCost(f *float64) *FixedAssetUpdate {
	if f != nil {
		fau.SetPurchaseCost(*f)
	}
	return fau
}

// AddPurchaseCost adds f to the "purchase_cost" field.
func (fau *FixedAssetUpdate) AddPurchaseCost(f float64) *FixedAssetUpdate {
	fau.mutation.AddPurchaseCost(f)
	return fau
}

// ClearPurchaseCost clears the value of the "purchase_cost" field.
func (fau *FixedAssetUpdate) ClearPurchaseCost() *FixedAssetUpdate {
	fau.mutation.ClearPurchaseCost()
	return fau
}

// SetPurchaseCostUomID sets the "purchase_cost_uom_id" field.
func (fau *FixedAssetUpdate) SetPurchaseCostUomID(i int) *FixedAssetUpdate {
	fau.mutation.ResetPurchaseCostUomID()
	fau.mutation.SetPurchaseCostUomID(i)
	return fau
}

// SetNillablePurchaseCostUomID sets the "purchase_cost_uom_id" field if the given value is not nil.
func (fau *FixedAssetUpdate) SetNillablePurchaseCostUomID(i *int) *FixedAssetUpdate {
	if i != nil {
		fau.SetPurchaseCostUomID(*i)
	}
	return fau
}

// AddPurchaseCostUomID adds i to the "purchase_cost_uom_id" field.
func (fau *FixedAssetUpdate) AddPurchaseCostUomID(i int) *FixedAssetUpdate {
	fau.mutation.AddPurchaseCostUomID(i)
	return fau
}

// ClearPurchaseCostUomID clears the value of the "purchase_cost_uom_id" field.
func (fau *FixedAssetUpdate) ClearPurchaseCostUomID() *FixedAssetUpdate {
	fau.mutation.ClearPurchaseCostUomID()
	return fau
}

// SetParentID sets the "parent" edge to the FixedAsset entity by ID.
func (fau *FixedAssetUpdate) SetParentID(id int) *FixedAssetUpdate {
	fau.mutation.SetParentID(id)
	return fau
}

// SetNillableParentID sets the "parent" edge to the FixedAsset entity by ID if the given value is not nil.
func (fau *FixedAssetUpdate) SetNillableParentID(id *int) *FixedAssetUpdate {
	if id != nil {
		fau = fau.SetParentID(*id)
	}
	return fau
}

// SetParent sets the "parent" edge to the FixedAsset entity.
func (fau *FixedAssetUpdate) SetParent(f *FixedAsset) *FixedAssetUpdate {
	return fau.SetParentID(f.ID)
}

// AddChildIDs adds the "children" edge to the FixedAsset entity by IDs.
func (fau *FixedAssetUpdate) AddChildIDs(ids ...int) *FixedAssetUpdate {
	fau.mutation.AddChildIDs(ids...)
	return fau
}

// AddChildren adds the "children" edges to the FixedAsset entity.
func (fau *FixedAssetUpdate) AddChildren(f ...*FixedAsset) *FixedAssetUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fau.AddChildIDs(ids...)
}

// SetPartyID sets the "party" edge to the Party entity by ID.
func (fau *FixedAssetUpdate) SetPartyID(id int) *FixedAssetUpdate {
	fau.mutation.SetPartyID(id)
	return fau
}

// SetNillablePartyID sets the "party" edge to the Party entity by ID if the given value is not nil.
func (fau *FixedAssetUpdate) SetNillablePartyID(id *int) *FixedAssetUpdate {
	if id != nil {
		fau = fau.SetPartyID(*id)
	}
	return fau
}

// SetParty sets the "party" edge to the Party entity.
func (fau *FixedAssetUpdate) SetParty(p *Party) *FixedAssetUpdate {
	return fau.SetPartyID(p.ID)
}

// SetRoleTypeID sets the "role_type" edge to the RoleType entity by ID.
func (fau *FixedAssetUpdate) SetRoleTypeID(id int) *FixedAssetUpdate {
	fau.mutation.SetRoleTypeID(id)
	return fau
}

// SetNillableRoleTypeID sets the "role_type" edge to the RoleType entity by ID if the given value is not nil.
func (fau *FixedAssetUpdate) SetNillableRoleTypeID(id *int) *FixedAssetUpdate {
	if id != nil {
		fau = fau.SetRoleTypeID(*id)
	}
	return fau
}

// SetRoleType sets the "role_type" edge to the RoleType entity.
func (fau *FixedAssetUpdate) SetRoleType(r *RoleType) *FixedAssetUpdate {
	return fau.SetRoleTypeID(r.ID)
}

// SetPartyRoleID sets the "party_role" edge to the PartyRole entity by ID.
func (fau *FixedAssetUpdate) SetPartyRoleID(id int) *FixedAssetUpdate {
	fau.mutation.SetPartyRoleID(id)
	return fau
}

// SetNillablePartyRoleID sets the "party_role" edge to the PartyRole entity by ID if the given value is not nil.
func (fau *FixedAssetUpdate) SetNillablePartyRoleID(id *int) *FixedAssetUpdate {
	if id != nil {
		fau = fau.SetPartyRoleID(*id)
	}
	return fau
}

// SetPartyRole sets the "party_role" edge to the PartyRole entity.
func (fau *FixedAssetUpdate) SetPartyRole(p *PartyRole) *FixedAssetUpdate {
	return fau.SetPartyRoleID(p.ID)
}

// AddChildFixedAssetIDs adds the "child_fixed_assets" edge to the FixedAsset entity by IDs.
func (fau *FixedAssetUpdate) AddChildFixedAssetIDs(ids ...int) *FixedAssetUpdate {
	fau.mutation.AddChildFixedAssetIDs(ids...)
	return fau
}

// AddChildFixedAssets adds the "child_fixed_assets" edges to the FixedAsset entity.
func (fau *FixedAssetUpdate) AddChildFixedAssets(f ...*FixedAsset) *FixedAssetUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fau.AddChildFixedAssetIDs(ids...)
}

// AddWorkEffortIDs adds the "work_efforts" edge to the WorkEffort entity by IDs.
func (fau *FixedAssetUpdate) AddWorkEffortIDs(ids ...int) *FixedAssetUpdate {
	fau.mutation.AddWorkEffortIDs(ids...)
	return fau
}

// AddWorkEfforts adds the "work_efforts" edges to the WorkEffort entity.
func (fau *FixedAssetUpdate) AddWorkEfforts(w ...*WorkEffort) *FixedAssetUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return fau.AddWorkEffortIDs(ids...)
}

// AddWorkEffortFixedAssetAssignIDs adds the "work_effort_fixed_asset_assigns" edge to the WorkEffortFixedAssetAssign entity by IDs.
func (fau *FixedAssetUpdate) AddWorkEffortFixedAssetAssignIDs(ids ...int) *FixedAssetUpdate {
	fau.mutation.AddWorkEffortFixedAssetAssignIDs(ids...)
	return fau
}

// AddWorkEffortFixedAssetAssigns adds the "work_effort_fixed_asset_assigns" edges to the WorkEffortFixedAssetAssign entity.
func (fau *FixedAssetUpdate) AddWorkEffortFixedAssetAssigns(w ...*WorkEffortFixedAssetAssign) *FixedAssetUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return fau.AddWorkEffortFixedAssetAssignIDs(ids...)
}

// Mutation returns the FixedAssetMutation object of the builder.
func (fau *FixedAssetUpdate) Mutation() *FixedAssetMutation {
	return fau.mutation
}

// ClearParent clears the "parent" edge to the FixedAsset entity.
func (fau *FixedAssetUpdate) ClearParent() *FixedAssetUpdate {
	fau.mutation.ClearParent()
	return fau
}

// ClearChildren clears all "children" edges to the FixedAsset entity.
func (fau *FixedAssetUpdate) ClearChildren() *FixedAssetUpdate {
	fau.mutation.ClearChildren()
	return fau
}

// RemoveChildIDs removes the "children" edge to FixedAsset entities by IDs.
func (fau *FixedAssetUpdate) RemoveChildIDs(ids ...int) *FixedAssetUpdate {
	fau.mutation.RemoveChildIDs(ids...)
	return fau
}

// RemoveChildren removes "children" edges to FixedAsset entities.
func (fau *FixedAssetUpdate) RemoveChildren(f ...*FixedAsset) *FixedAssetUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fau.RemoveChildIDs(ids...)
}

// ClearParty clears the "party" edge to the Party entity.
func (fau *FixedAssetUpdate) ClearParty() *FixedAssetUpdate {
	fau.mutation.ClearParty()
	return fau
}

// ClearRoleType clears the "role_type" edge to the RoleType entity.
func (fau *FixedAssetUpdate) ClearRoleType() *FixedAssetUpdate {
	fau.mutation.ClearRoleType()
	return fau
}

// ClearPartyRole clears the "party_role" edge to the PartyRole entity.
func (fau *FixedAssetUpdate) ClearPartyRole() *FixedAssetUpdate {
	fau.mutation.ClearPartyRole()
	return fau
}

// ClearChildFixedAssets clears all "child_fixed_assets" edges to the FixedAsset entity.
func (fau *FixedAssetUpdate) ClearChildFixedAssets() *FixedAssetUpdate {
	fau.mutation.ClearChildFixedAssets()
	return fau
}

// RemoveChildFixedAssetIDs removes the "child_fixed_assets" edge to FixedAsset entities by IDs.
func (fau *FixedAssetUpdate) RemoveChildFixedAssetIDs(ids ...int) *FixedAssetUpdate {
	fau.mutation.RemoveChildFixedAssetIDs(ids...)
	return fau
}

// RemoveChildFixedAssets removes "child_fixed_assets" edges to FixedAsset entities.
func (fau *FixedAssetUpdate) RemoveChildFixedAssets(f ...*FixedAsset) *FixedAssetUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fau.RemoveChildFixedAssetIDs(ids...)
}

// ClearWorkEfforts clears all "work_efforts" edges to the WorkEffort entity.
func (fau *FixedAssetUpdate) ClearWorkEfforts() *FixedAssetUpdate {
	fau.mutation.ClearWorkEfforts()
	return fau
}

// RemoveWorkEffortIDs removes the "work_efforts" edge to WorkEffort entities by IDs.
func (fau *FixedAssetUpdate) RemoveWorkEffortIDs(ids ...int) *FixedAssetUpdate {
	fau.mutation.RemoveWorkEffortIDs(ids...)
	return fau
}

// RemoveWorkEfforts removes "work_efforts" edges to WorkEffort entities.
func (fau *FixedAssetUpdate) RemoveWorkEfforts(w ...*WorkEffort) *FixedAssetUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return fau.RemoveWorkEffortIDs(ids...)
}

// ClearWorkEffortFixedAssetAssigns clears all "work_effort_fixed_asset_assigns" edges to the WorkEffortFixedAssetAssign entity.
func (fau *FixedAssetUpdate) ClearWorkEffortFixedAssetAssigns() *FixedAssetUpdate {
	fau.mutation.ClearWorkEffortFixedAssetAssigns()
	return fau
}

// RemoveWorkEffortFixedAssetAssignIDs removes the "work_effort_fixed_asset_assigns" edge to WorkEffortFixedAssetAssign entities by IDs.
func (fau *FixedAssetUpdate) RemoveWorkEffortFixedAssetAssignIDs(ids ...int) *FixedAssetUpdate {
	fau.mutation.RemoveWorkEffortFixedAssetAssignIDs(ids...)
	return fau
}

// RemoveWorkEffortFixedAssetAssigns removes "work_effort_fixed_asset_assigns" edges to WorkEffortFixedAssetAssign entities.
func (fau *FixedAssetUpdate) RemoveWorkEffortFixedAssetAssigns(w ...*WorkEffortFixedAssetAssign) *FixedAssetUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return fau.RemoveWorkEffortFixedAssetAssignIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fau *FixedAssetUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	fau.defaults()
	if len(fau.hooks) == 0 {
		affected, err = fau.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FixedAssetMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			fau.mutation = mutation
			affected, err = fau.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(fau.hooks) - 1; i >= 0; i-- {
			mut = fau.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fau.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (fau *FixedAssetUpdate) SaveX(ctx context.Context) int {
	affected, err := fau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fau *FixedAssetUpdate) Exec(ctx context.Context) error {
	_, err := fau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fau *FixedAssetUpdate) ExecX(ctx context.Context) {
	if err := fau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fau *FixedAssetUpdate) defaults() {
	if _, ok := fau.mutation.UpdateTime(); !ok {
		v := fixedasset.UpdateDefaultUpdateTime()
		fau.mutation.SetUpdateTime(v)
	}
}

func (fau *FixedAssetUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   fixedasset.Table,
			Columns: fixedasset.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: fixedasset.FieldID,
			},
		},
	}
	if ps := fau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fau.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: fixedasset.FieldUpdateTime,
		})
	}
	if value, ok := fau.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fixedasset.FieldStringRef,
		})
	}
	if fau.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: fixedasset.FieldStringRef,
		})
	}
	if value, ok := fau.mutation.FixedAssetTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: fixedasset.FieldFixedAssetTypeID,
		})
	}
	if value, ok := fau.mutation.AddedFixedAssetTypeID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: fixedasset.FieldFixedAssetTypeID,
		})
	}
	if fau.mutation.FixedAssetTypeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: fixedasset.FieldFixedAssetTypeID,
		})
	}
	if value, ok := fau.mutation.InstanceOfProductID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: fixedasset.FieldInstanceOfProductID,
		})
	}
	if value, ok := fau.mutation.AddedInstanceOfProductID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: fixedasset.FieldInstanceOfProductID,
		})
	}
	if fau.mutation.InstanceOfProductIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: fixedasset.FieldInstanceOfProductID,
		})
	}
	if value, ok := fau.mutation.ClassEnumID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: fixedasset.FieldClassEnumID,
		})
	}
	if value, ok := fau.mutation.AddedClassEnumID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: fixedasset.FieldClassEnumID,
		})
	}
	if fau.mutation.ClassEnumIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: fixedasset.FieldClassEnumID,
		})
	}
	if value, ok := fau.mutation.FixedAssetName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fixedasset.FieldFixedAssetName,
		})
	}
	if fau.mutation.FixedAssetNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: fixedasset.FieldFixedAssetName,
		})
	}
	if value, ok := fau.mutation.AcquireOrderID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: fixedasset.FieldAcquireOrderID,
		})
	}
	if value, ok := fau.mutation.AddedAcquireOrderID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: fixedasset.FieldAcquireOrderID,
		})
	}
	if fau.mutation.AcquireOrderIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: fixedasset.FieldAcquireOrderID,
		})
	}
	if value, ok := fau.mutation.AcquireOrderItemSeqID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: fixedasset.FieldAcquireOrderItemSeqID,
		})
	}
	if value, ok := fau.mutation.AddedAcquireOrderItemSeqID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: fixedasset.FieldAcquireOrderItemSeqID,
		})
	}
	if fau.mutation.AcquireOrderItemSeqIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: fixedasset.FieldAcquireOrderItemSeqID,
		})
	}
	if value, ok := fau.mutation.DateAcquired(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: fixedasset.FieldDateAcquired,
		})
	}
	if fau.mutation.DateAcquiredCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: fixedasset.FieldDateAcquired,
		})
	}
	if value, ok := fau.mutation.DateLastServiced(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: fixedasset.FieldDateLastServiced,
		})
	}
	if fau.mutation.DateLastServicedCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: fixedasset.FieldDateLastServiced,
		})
	}
	if value, ok := fau.mutation.DateNextService(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: fixedasset.FieldDateNextService,
		})
	}
	if fau.mutation.DateNextServiceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: fixedasset.FieldDateNextService,
		})
	}
	if value, ok := fau.mutation.ExpectedEndOfLife(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: fixedasset.FieldExpectedEndOfLife,
		})
	}
	if fau.mutation.ExpectedEndOfLifeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: fixedasset.FieldExpectedEndOfLife,
		})
	}
	if value, ok := fau.mutation.ActualEndOfLife(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: fixedasset.FieldActualEndOfLife,
		})
	}
	if fau.mutation.ActualEndOfLifeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: fixedasset.FieldActualEndOfLife,
		})
	}
	if value, ok := fau.mutation.ProductionCapacity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: fixedasset.FieldProductionCapacity,
		})
	}
	if value, ok := fau.mutation.AddedProductionCapacity(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: fixedasset.FieldProductionCapacity,
		})
	}
	if fau.mutation.ProductionCapacityCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: fixedasset.FieldProductionCapacity,
		})
	}
	if value, ok := fau.mutation.UomID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: fixedasset.FieldUomID,
		})
	}
	if value, ok := fau.mutation.AddedUomID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: fixedasset.FieldUomID,
		})
	}
	if fau.mutation.UomIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: fixedasset.FieldUomID,
		})
	}
	if value, ok := fau.mutation.CalendarID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: fixedasset.FieldCalendarID,
		})
	}
	if value, ok := fau.mutation.AddedCalendarID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: fixedasset.FieldCalendarID,
		})
	}
	if fau.mutation.CalendarIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: fixedasset.FieldCalendarID,
		})
	}
	if value, ok := fau.mutation.SerialNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fixedasset.FieldSerialNumber,
		})
	}
	if fau.mutation.SerialNumberCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: fixedasset.FieldSerialNumber,
		})
	}
	if value, ok := fau.mutation.LocatedAtFacilityID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: fixedasset.FieldLocatedAtFacilityID,
		})
	}
	if value, ok := fau.mutation.AddedLocatedAtFacilityID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: fixedasset.FieldLocatedAtFacilityID,
		})
	}
	if fau.mutation.LocatedAtFacilityIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: fixedasset.FieldLocatedAtFacilityID,
		})
	}
	if value, ok := fau.mutation.LocatedAtLocationSeqID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: fixedasset.FieldLocatedAtLocationSeqID,
		})
	}
	if value, ok := fau.mutation.AddedLocatedAtLocationSeqID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: fixedasset.FieldLocatedAtLocationSeqID,
		})
	}
	if fau.mutation.LocatedAtLocationSeqIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: fixedasset.FieldLocatedAtLocationSeqID,
		})
	}
	if value, ok := fau.mutation.SalvageValue(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: fixedasset.FieldSalvageValue,
		})
	}
	if value, ok := fau.mutation.AddedSalvageValue(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: fixedasset.FieldSalvageValue,
		})
	}
	if fau.mutation.SalvageValueCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: fixedasset.FieldSalvageValue,
		})
	}
	if value, ok := fau.mutation.Depreciation(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: fixedasset.FieldDepreciation,
		})
	}
	if value, ok := fau.mutation.AddedDepreciation(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: fixedasset.FieldDepreciation,
		})
	}
	if fau.mutation.DepreciationCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: fixedasset.FieldDepreciation,
		})
	}
	if value, ok := fau.mutation.PurchaseCost(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: fixedasset.FieldPurchaseCost,
		})
	}
	if value, ok := fau.mutation.AddedPurchaseCost(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: fixedasset.FieldPurchaseCost,
		})
	}
	if fau.mutation.PurchaseCostCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: fixedasset.FieldPurchaseCost,
		})
	}
	if value, ok := fau.mutation.PurchaseCostUomID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: fixedasset.FieldPurchaseCostUomID,
		})
	}
	if value, ok := fau.mutation.AddedPurchaseCostUomID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: fixedasset.FieldPurchaseCostUomID,
		})
	}
	if fau.mutation.PurchaseCostUomIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: fixedasset.FieldPurchaseCostUomID,
		})
	}
	if fau.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fixedasset.ParentTable,
			Columns: []string{fixedasset.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: fixedasset.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fau.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fixedasset.ParentTable,
			Columns: []string{fixedasset.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: fixedasset.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fau.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   fixedasset.ChildrenTable,
			Columns: []string{fixedasset.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: fixedasset.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fau.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !fau.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   fixedasset.ChildrenTable,
			Columns: []string{fixedasset.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: fixedasset.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fau.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   fixedasset.ChildrenTable,
			Columns: []string{fixedasset.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: fixedasset.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fau.mutation.PartyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fixedasset.PartyTable,
			Columns: []string{fixedasset.PartyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: party.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fau.mutation.PartyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fixedasset.PartyTable,
			Columns: []string{fixedasset.PartyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: party.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fau.mutation.RoleTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fixedasset.RoleTypeTable,
			Columns: []string{fixedasset.RoleTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: roletype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fau.mutation.RoleTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fixedasset.RoleTypeTable,
			Columns: []string{fixedasset.RoleTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: roletype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fau.mutation.PartyRoleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fixedasset.PartyRoleTable,
			Columns: []string{fixedasset.PartyRoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partyrole.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fau.mutation.PartyRoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fixedasset.PartyRoleTable,
			Columns: []string{fixedasset.PartyRoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partyrole.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fau.mutation.ChildFixedAssetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   fixedasset.ChildFixedAssetsTable,
			Columns: fixedasset.ChildFixedAssetsPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: fixedasset.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fau.mutation.RemovedChildFixedAssetsIDs(); len(nodes) > 0 && !fau.mutation.ChildFixedAssetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   fixedasset.ChildFixedAssetsTable,
			Columns: fixedasset.ChildFixedAssetsPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: fixedasset.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fau.mutation.ChildFixedAssetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   fixedasset.ChildFixedAssetsTable,
			Columns: fixedasset.ChildFixedAssetsPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: fixedasset.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fau.mutation.WorkEffortsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   fixedasset.WorkEffortsTable,
			Columns: []string{fixedasset.WorkEffortsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffort.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fau.mutation.RemovedWorkEffortsIDs(); len(nodes) > 0 && !fau.mutation.WorkEffortsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   fixedasset.WorkEffortsTable,
			Columns: []string{fixedasset.WorkEffortsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffort.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fau.mutation.WorkEffortsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   fixedasset.WorkEffortsTable,
			Columns: []string{fixedasset.WorkEffortsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffort.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fau.mutation.WorkEffortFixedAssetAssignsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   fixedasset.WorkEffortFixedAssetAssignsTable,
			Columns: []string{fixedasset.WorkEffortFixedAssetAssignsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffortfixedassetassign.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fau.mutation.RemovedWorkEffortFixedAssetAssignsIDs(); len(nodes) > 0 && !fau.mutation.WorkEffortFixedAssetAssignsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   fixedasset.WorkEffortFixedAssetAssignsTable,
			Columns: []string{fixedasset.WorkEffortFixedAssetAssignsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffortfixedassetassign.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fau.mutation.WorkEffortFixedAssetAssignsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   fixedasset.WorkEffortFixedAssetAssignsTable,
			Columns: []string{fixedasset.WorkEffortFixedAssetAssignsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffortfixedassetassign.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fixedasset.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// FixedAssetUpdateOne is the builder for updating a single FixedAsset entity.
type FixedAssetUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FixedAssetMutation
}

// SetStringRef sets the "string_ref" field.
func (fauo *FixedAssetUpdateOne) SetStringRef(s string) *FixedAssetUpdateOne {
	fauo.mutation.SetStringRef(s)
	return fauo
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (fauo *FixedAssetUpdateOne) SetNillableStringRef(s *string) *FixedAssetUpdateOne {
	if s != nil {
		fauo.SetStringRef(*s)
	}
	return fauo
}

// ClearStringRef clears the value of the "string_ref" field.
func (fauo *FixedAssetUpdateOne) ClearStringRef() *FixedAssetUpdateOne {
	fauo.mutation.ClearStringRef()
	return fauo
}

// SetFixedAssetTypeID sets the "fixed_asset_type_id" field.
func (fauo *FixedAssetUpdateOne) SetFixedAssetTypeID(i int) *FixedAssetUpdateOne {
	fauo.mutation.ResetFixedAssetTypeID()
	fauo.mutation.SetFixedAssetTypeID(i)
	return fauo
}

// SetNillableFixedAssetTypeID sets the "fixed_asset_type_id" field if the given value is not nil.
func (fauo *FixedAssetUpdateOne) SetNillableFixedAssetTypeID(i *int) *FixedAssetUpdateOne {
	if i != nil {
		fauo.SetFixedAssetTypeID(*i)
	}
	return fauo
}

// AddFixedAssetTypeID adds i to the "fixed_asset_type_id" field.
func (fauo *FixedAssetUpdateOne) AddFixedAssetTypeID(i int) *FixedAssetUpdateOne {
	fauo.mutation.AddFixedAssetTypeID(i)
	return fauo
}

// ClearFixedAssetTypeID clears the value of the "fixed_asset_type_id" field.
func (fauo *FixedAssetUpdateOne) ClearFixedAssetTypeID() *FixedAssetUpdateOne {
	fauo.mutation.ClearFixedAssetTypeID()
	return fauo
}

// SetInstanceOfProductID sets the "instance_of_product_id" field.
func (fauo *FixedAssetUpdateOne) SetInstanceOfProductID(i int) *FixedAssetUpdateOne {
	fauo.mutation.ResetInstanceOfProductID()
	fauo.mutation.SetInstanceOfProductID(i)
	return fauo
}

// SetNillableInstanceOfProductID sets the "instance_of_product_id" field if the given value is not nil.
func (fauo *FixedAssetUpdateOne) SetNillableInstanceOfProductID(i *int) *FixedAssetUpdateOne {
	if i != nil {
		fauo.SetInstanceOfProductID(*i)
	}
	return fauo
}

// AddInstanceOfProductID adds i to the "instance_of_product_id" field.
func (fauo *FixedAssetUpdateOne) AddInstanceOfProductID(i int) *FixedAssetUpdateOne {
	fauo.mutation.AddInstanceOfProductID(i)
	return fauo
}

// ClearInstanceOfProductID clears the value of the "instance_of_product_id" field.
func (fauo *FixedAssetUpdateOne) ClearInstanceOfProductID() *FixedAssetUpdateOne {
	fauo.mutation.ClearInstanceOfProductID()
	return fauo
}

// SetClassEnumID sets the "class_enum_id" field.
func (fauo *FixedAssetUpdateOne) SetClassEnumID(i int) *FixedAssetUpdateOne {
	fauo.mutation.ResetClassEnumID()
	fauo.mutation.SetClassEnumID(i)
	return fauo
}

// SetNillableClassEnumID sets the "class_enum_id" field if the given value is not nil.
func (fauo *FixedAssetUpdateOne) SetNillableClassEnumID(i *int) *FixedAssetUpdateOne {
	if i != nil {
		fauo.SetClassEnumID(*i)
	}
	return fauo
}

// AddClassEnumID adds i to the "class_enum_id" field.
func (fauo *FixedAssetUpdateOne) AddClassEnumID(i int) *FixedAssetUpdateOne {
	fauo.mutation.AddClassEnumID(i)
	return fauo
}

// ClearClassEnumID clears the value of the "class_enum_id" field.
func (fauo *FixedAssetUpdateOne) ClearClassEnumID() *FixedAssetUpdateOne {
	fauo.mutation.ClearClassEnumID()
	return fauo
}

// SetFixedAssetName sets the "fixed_asset_name" field.
func (fauo *FixedAssetUpdateOne) SetFixedAssetName(s string) *FixedAssetUpdateOne {
	fauo.mutation.SetFixedAssetName(s)
	return fauo
}

// SetNillableFixedAssetName sets the "fixed_asset_name" field if the given value is not nil.
func (fauo *FixedAssetUpdateOne) SetNillableFixedAssetName(s *string) *FixedAssetUpdateOne {
	if s != nil {
		fauo.SetFixedAssetName(*s)
	}
	return fauo
}

// ClearFixedAssetName clears the value of the "fixed_asset_name" field.
func (fauo *FixedAssetUpdateOne) ClearFixedAssetName() *FixedAssetUpdateOne {
	fauo.mutation.ClearFixedAssetName()
	return fauo
}

// SetAcquireOrderID sets the "acquire_order_id" field.
func (fauo *FixedAssetUpdateOne) SetAcquireOrderID(i int) *FixedAssetUpdateOne {
	fauo.mutation.ResetAcquireOrderID()
	fauo.mutation.SetAcquireOrderID(i)
	return fauo
}

// SetNillableAcquireOrderID sets the "acquire_order_id" field if the given value is not nil.
func (fauo *FixedAssetUpdateOne) SetNillableAcquireOrderID(i *int) *FixedAssetUpdateOne {
	if i != nil {
		fauo.SetAcquireOrderID(*i)
	}
	return fauo
}

// AddAcquireOrderID adds i to the "acquire_order_id" field.
func (fauo *FixedAssetUpdateOne) AddAcquireOrderID(i int) *FixedAssetUpdateOne {
	fauo.mutation.AddAcquireOrderID(i)
	return fauo
}

// ClearAcquireOrderID clears the value of the "acquire_order_id" field.
func (fauo *FixedAssetUpdateOne) ClearAcquireOrderID() *FixedAssetUpdateOne {
	fauo.mutation.ClearAcquireOrderID()
	return fauo
}

// SetAcquireOrderItemSeqID sets the "acquire_order_item_seq_id" field.
func (fauo *FixedAssetUpdateOne) SetAcquireOrderItemSeqID(i int) *FixedAssetUpdateOne {
	fauo.mutation.ResetAcquireOrderItemSeqID()
	fauo.mutation.SetAcquireOrderItemSeqID(i)
	return fauo
}

// SetNillableAcquireOrderItemSeqID sets the "acquire_order_item_seq_id" field if the given value is not nil.
func (fauo *FixedAssetUpdateOne) SetNillableAcquireOrderItemSeqID(i *int) *FixedAssetUpdateOne {
	if i != nil {
		fauo.SetAcquireOrderItemSeqID(*i)
	}
	return fauo
}

// AddAcquireOrderItemSeqID adds i to the "acquire_order_item_seq_id" field.
func (fauo *FixedAssetUpdateOne) AddAcquireOrderItemSeqID(i int) *FixedAssetUpdateOne {
	fauo.mutation.AddAcquireOrderItemSeqID(i)
	return fauo
}

// ClearAcquireOrderItemSeqID clears the value of the "acquire_order_item_seq_id" field.
func (fauo *FixedAssetUpdateOne) ClearAcquireOrderItemSeqID() *FixedAssetUpdateOne {
	fauo.mutation.ClearAcquireOrderItemSeqID()
	return fauo
}

// SetDateAcquired sets the "date_acquired" field.
func (fauo *FixedAssetUpdateOne) SetDateAcquired(t time.Time) *FixedAssetUpdateOne {
	fauo.mutation.SetDateAcquired(t)
	return fauo
}

// SetNillableDateAcquired sets the "date_acquired" field if the given value is not nil.
func (fauo *FixedAssetUpdateOne) SetNillableDateAcquired(t *time.Time) *FixedAssetUpdateOne {
	if t != nil {
		fauo.SetDateAcquired(*t)
	}
	return fauo
}

// ClearDateAcquired clears the value of the "date_acquired" field.
func (fauo *FixedAssetUpdateOne) ClearDateAcquired() *FixedAssetUpdateOne {
	fauo.mutation.ClearDateAcquired()
	return fauo
}

// SetDateLastServiced sets the "date_last_serviced" field.
func (fauo *FixedAssetUpdateOne) SetDateLastServiced(t time.Time) *FixedAssetUpdateOne {
	fauo.mutation.SetDateLastServiced(t)
	return fauo
}

// SetNillableDateLastServiced sets the "date_last_serviced" field if the given value is not nil.
func (fauo *FixedAssetUpdateOne) SetNillableDateLastServiced(t *time.Time) *FixedAssetUpdateOne {
	if t != nil {
		fauo.SetDateLastServiced(*t)
	}
	return fauo
}

// ClearDateLastServiced clears the value of the "date_last_serviced" field.
func (fauo *FixedAssetUpdateOne) ClearDateLastServiced() *FixedAssetUpdateOne {
	fauo.mutation.ClearDateLastServiced()
	return fauo
}

// SetDateNextService sets the "date_next_service" field.
func (fauo *FixedAssetUpdateOne) SetDateNextService(t time.Time) *FixedAssetUpdateOne {
	fauo.mutation.SetDateNextService(t)
	return fauo
}

// SetNillableDateNextService sets the "date_next_service" field if the given value is not nil.
func (fauo *FixedAssetUpdateOne) SetNillableDateNextService(t *time.Time) *FixedAssetUpdateOne {
	if t != nil {
		fauo.SetDateNextService(*t)
	}
	return fauo
}

// ClearDateNextService clears the value of the "date_next_service" field.
func (fauo *FixedAssetUpdateOne) ClearDateNextService() *FixedAssetUpdateOne {
	fauo.mutation.ClearDateNextService()
	return fauo
}

// SetExpectedEndOfLife sets the "expected_end_of_life" field.
func (fauo *FixedAssetUpdateOne) SetExpectedEndOfLife(t time.Time) *FixedAssetUpdateOne {
	fauo.mutation.SetExpectedEndOfLife(t)
	return fauo
}

// SetNillableExpectedEndOfLife sets the "expected_end_of_life" field if the given value is not nil.
func (fauo *FixedAssetUpdateOne) SetNillableExpectedEndOfLife(t *time.Time) *FixedAssetUpdateOne {
	if t != nil {
		fauo.SetExpectedEndOfLife(*t)
	}
	return fauo
}

// ClearExpectedEndOfLife clears the value of the "expected_end_of_life" field.
func (fauo *FixedAssetUpdateOne) ClearExpectedEndOfLife() *FixedAssetUpdateOne {
	fauo.mutation.ClearExpectedEndOfLife()
	return fauo
}

// SetActualEndOfLife sets the "actual_end_of_life" field.
func (fauo *FixedAssetUpdateOne) SetActualEndOfLife(t time.Time) *FixedAssetUpdateOne {
	fauo.mutation.SetActualEndOfLife(t)
	return fauo
}

// SetNillableActualEndOfLife sets the "actual_end_of_life" field if the given value is not nil.
func (fauo *FixedAssetUpdateOne) SetNillableActualEndOfLife(t *time.Time) *FixedAssetUpdateOne {
	if t != nil {
		fauo.SetActualEndOfLife(*t)
	}
	return fauo
}

// ClearActualEndOfLife clears the value of the "actual_end_of_life" field.
func (fauo *FixedAssetUpdateOne) ClearActualEndOfLife() *FixedAssetUpdateOne {
	fauo.mutation.ClearActualEndOfLife()
	return fauo
}

// SetProductionCapacity sets the "production_capacity" field.
func (fauo *FixedAssetUpdateOne) SetProductionCapacity(f float64) *FixedAssetUpdateOne {
	fauo.mutation.ResetProductionCapacity()
	fauo.mutation.SetProductionCapacity(f)
	return fauo
}

// SetNillableProductionCapacity sets the "production_capacity" field if the given value is not nil.
func (fauo *FixedAssetUpdateOne) SetNillableProductionCapacity(f *float64) *FixedAssetUpdateOne {
	if f != nil {
		fauo.SetProductionCapacity(*f)
	}
	return fauo
}

// AddProductionCapacity adds f to the "production_capacity" field.
func (fauo *FixedAssetUpdateOne) AddProductionCapacity(f float64) *FixedAssetUpdateOne {
	fauo.mutation.AddProductionCapacity(f)
	return fauo
}

// ClearProductionCapacity clears the value of the "production_capacity" field.
func (fauo *FixedAssetUpdateOne) ClearProductionCapacity() *FixedAssetUpdateOne {
	fauo.mutation.ClearProductionCapacity()
	return fauo
}

// SetUomID sets the "uom_id" field.
func (fauo *FixedAssetUpdateOne) SetUomID(i int) *FixedAssetUpdateOne {
	fauo.mutation.ResetUomID()
	fauo.mutation.SetUomID(i)
	return fauo
}

// SetNillableUomID sets the "uom_id" field if the given value is not nil.
func (fauo *FixedAssetUpdateOne) SetNillableUomID(i *int) *FixedAssetUpdateOne {
	if i != nil {
		fauo.SetUomID(*i)
	}
	return fauo
}

// AddUomID adds i to the "uom_id" field.
func (fauo *FixedAssetUpdateOne) AddUomID(i int) *FixedAssetUpdateOne {
	fauo.mutation.AddUomID(i)
	return fauo
}

// ClearUomID clears the value of the "uom_id" field.
func (fauo *FixedAssetUpdateOne) ClearUomID() *FixedAssetUpdateOne {
	fauo.mutation.ClearUomID()
	return fauo
}

// SetCalendarID sets the "calendar_id" field.
func (fauo *FixedAssetUpdateOne) SetCalendarID(i int) *FixedAssetUpdateOne {
	fauo.mutation.ResetCalendarID()
	fauo.mutation.SetCalendarID(i)
	return fauo
}

// SetNillableCalendarID sets the "calendar_id" field if the given value is not nil.
func (fauo *FixedAssetUpdateOne) SetNillableCalendarID(i *int) *FixedAssetUpdateOne {
	if i != nil {
		fauo.SetCalendarID(*i)
	}
	return fauo
}

// AddCalendarID adds i to the "calendar_id" field.
func (fauo *FixedAssetUpdateOne) AddCalendarID(i int) *FixedAssetUpdateOne {
	fauo.mutation.AddCalendarID(i)
	return fauo
}

// ClearCalendarID clears the value of the "calendar_id" field.
func (fauo *FixedAssetUpdateOne) ClearCalendarID() *FixedAssetUpdateOne {
	fauo.mutation.ClearCalendarID()
	return fauo
}

// SetSerialNumber sets the "serial_number" field.
func (fauo *FixedAssetUpdateOne) SetSerialNumber(s string) *FixedAssetUpdateOne {
	fauo.mutation.SetSerialNumber(s)
	return fauo
}

// SetNillableSerialNumber sets the "serial_number" field if the given value is not nil.
func (fauo *FixedAssetUpdateOne) SetNillableSerialNumber(s *string) *FixedAssetUpdateOne {
	if s != nil {
		fauo.SetSerialNumber(*s)
	}
	return fauo
}

// ClearSerialNumber clears the value of the "serial_number" field.
func (fauo *FixedAssetUpdateOne) ClearSerialNumber() *FixedAssetUpdateOne {
	fauo.mutation.ClearSerialNumber()
	return fauo
}

// SetLocatedAtFacilityID sets the "located_at_facility_id" field.
func (fauo *FixedAssetUpdateOne) SetLocatedAtFacilityID(i int) *FixedAssetUpdateOne {
	fauo.mutation.ResetLocatedAtFacilityID()
	fauo.mutation.SetLocatedAtFacilityID(i)
	return fauo
}

// SetNillableLocatedAtFacilityID sets the "located_at_facility_id" field if the given value is not nil.
func (fauo *FixedAssetUpdateOne) SetNillableLocatedAtFacilityID(i *int) *FixedAssetUpdateOne {
	if i != nil {
		fauo.SetLocatedAtFacilityID(*i)
	}
	return fauo
}

// AddLocatedAtFacilityID adds i to the "located_at_facility_id" field.
func (fauo *FixedAssetUpdateOne) AddLocatedAtFacilityID(i int) *FixedAssetUpdateOne {
	fauo.mutation.AddLocatedAtFacilityID(i)
	return fauo
}

// ClearLocatedAtFacilityID clears the value of the "located_at_facility_id" field.
func (fauo *FixedAssetUpdateOne) ClearLocatedAtFacilityID() *FixedAssetUpdateOne {
	fauo.mutation.ClearLocatedAtFacilityID()
	return fauo
}

// SetLocatedAtLocationSeqID sets the "located_at_location_seq_id" field.
func (fauo *FixedAssetUpdateOne) SetLocatedAtLocationSeqID(i int) *FixedAssetUpdateOne {
	fauo.mutation.ResetLocatedAtLocationSeqID()
	fauo.mutation.SetLocatedAtLocationSeqID(i)
	return fauo
}

// SetNillableLocatedAtLocationSeqID sets the "located_at_location_seq_id" field if the given value is not nil.
func (fauo *FixedAssetUpdateOne) SetNillableLocatedAtLocationSeqID(i *int) *FixedAssetUpdateOne {
	if i != nil {
		fauo.SetLocatedAtLocationSeqID(*i)
	}
	return fauo
}

// AddLocatedAtLocationSeqID adds i to the "located_at_location_seq_id" field.
func (fauo *FixedAssetUpdateOne) AddLocatedAtLocationSeqID(i int) *FixedAssetUpdateOne {
	fauo.mutation.AddLocatedAtLocationSeqID(i)
	return fauo
}

// ClearLocatedAtLocationSeqID clears the value of the "located_at_location_seq_id" field.
func (fauo *FixedAssetUpdateOne) ClearLocatedAtLocationSeqID() *FixedAssetUpdateOne {
	fauo.mutation.ClearLocatedAtLocationSeqID()
	return fauo
}

// SetSalvageValue sets the "salvage_value" field.
func (fauo *FixedAssetUpdateOne) SetSalvageValue(f float64) *FixedAssetUpdateOne {
	fauo.mutation.ResetSalvageValue()
	fauo.mutation.SetSalvageValue(f)
	return fauo
}

// SetNillableSalvageValue sets the "salvage_value" field if the given value is not nil.
func (fauo *FixedAssetUpdateOne) SetNillableSalvageValue(f *float64) *FixedAssetUpdateOne {
	if f != nil {
		fauo.SetSalvageValue(*f)
	}
	return fauo
}

// AddSalvageValue adds f to the "salvage_value" field.
func (fauo *FixedAssetUpdateOne) AddSalvageValue(f float64) *FixedAssetUpdateOne {
	fauo.mutation.AddSalvageValue(f)
	return fauo
}

// ClearSalvageValue clears the value of the "salvage_value" field.
func (fauo *FixedAssetUpdateOne) ClearSalvageValue() *FixedAssetUpdateOne {
	fauo.mutation.ClearSalvageValue()
	return fauo
}

// SetDepreciation sets the "depreciation" field.
func (fauo *FixedAssetUpdateOne) SetDepreciation(f float64) *FixedAssetUpdateOne {
	fauo.mutation.ResetDepreciation()
	fauo.mutation.SetDepreciation(f)
	return fauo
}

// SetNillableDepreciation sets the "depreciation" field if the given value is not nil.
func (fauo *FixedAssetUpdateOne) SetNillableDepreciation(f *float64) *FixedAssetUpdateOne {
	if f != nil {
		fauo.SetDepreciation(*f)
	}
	return fauo
}

// AddDepreciation adds f to the "depreciation" field.
func (fauo *FixedAssetUpdateOne) AddDepreciation(f float64) *FixedAssetUpdateOne {
	fauo.mutation.AddDepreciation(f)
	return fauo
}

// ClearDepreciation clears the value of the "depreciation" field.
func (fauo *FixedAssetUpdateOne) ClearDepreciation() *FixedAssetUpdateOne {
	fauo.mutation.ClearDepreciation()
	return fauo
}

// SetPurchaseCost sets the "purchase_cost" field.
func (fauo *FixedAssetUpdateOne) SetPurchaseCost(f float64) *FixedAssetUpdateOne {
	fauo.mutation.ResetPurchaseCost()
	fauo.mutation.SetPurchaseCost(f)
	return fauo
}

// SetNillablePurchaseCost sets the "purchase_cost" field if the given value is not nil.
func (fauo *FixedAssetUpdateOne) SetNillablePurchaseCost(f *float64) *FixedAssetUpdateOne {
	if f != nil {
		fauo.SetPurchaseCost(*f)
	}
	return fauo
}

// AddPurchaseCost adds f to the "purchase_cost" field.
func (fauo *FixedAssetUpdateOne) AddPurchaseCost(f float64) *FixedAssetUpdateOne {
	fauo.mutation.AddPurchaseCost(f)
	return fauo
}

// ClearPurchaseCost clears the value of the "purchase_cost" field.
func (fauo *FixedAssetUpdateOne) ClearPurchaseCost() *FixedAssetUpdateOne {
	fauo.mutation.ClearPurchaseCost()
	return fauo
}

// SetPurchaseCostUomID sets the "purchase_cost_uom_id" field.
func (fauo *FixedAssetUpdateOne) SetPurchaseCostUomID(i int) *FixedAssetUpdateOne {
	fauo.mutation.ResetPurchaseCostUomID()
	fauo.mutation.SetPurchaseCostUomID(i)
	return fauo
}

// SetNillablePurchaseCostUomID sets the "purchase_cost_uom_id" field if the given value is not nil.
func (fauo *FixedAssetUpdateOne) SetNillablePurchaseCostUomID(i *int) *FixedAssetUpdateOne {
	if i != nil {
		fauo.SetPurchaseCostUomID(*i)
	}
	return fauo
}

// AddPurchaseCostUomID adds i to the "purchase_cost_uom_id" field.
func (fauo *FixedAssetUpdateOne) AddPurchaseCostUomID(i int) *FixedAssetUpdateOne {
	fauo.mutation.AddPurchaseCostUomID(i)
	return fauo
}

// ClearPurchaseCostUomID clears the value of the "purchase_cost_uom_id" field.
func (fauo *FixedAssetUpdateOne) ClearPurchaseCostUomID() *FixedAssetUpdateOne {
	fauo.mutation.ClearPurchaseCostUomID()
	return fauo
}

// SetParentID sets the "parent" edge to the FixedAsset entity by ID.
func (fauo *FixedAssetUpdateOne) SetParentID(id int) *FixedAssetUpdateOne {
	fauo.mutation.SetParentID(id)
	return fauo
}

// SetNillableParentID sets the "parent" edge to the FixedAsset entity by ID if the given value is not nil.
func (fauo *FixedAssetUpdateOne) SetNillableParentID(id *int) *FixedAssetUpdateOne {
	if id != nil {
		fauo = fauo.SetParentID(*id)
	}
	return fauo
}

// SetParent sets the "parent" edge to the FixedAsset entity.
func (fauo *FixedAssetUpdateOne) SetParent(f *FixedAsset) *FixedAssetUpdateOne {
	return fauo.SetParentID(f.ID)
}

// AddChildIDs adds the "children" edge to the FixedAsset entity by IDs.
func (fauo *FixedAssetUpdateOne) AddChildIDs(ids ...int) *FixedAssetUpdateOne {
	fauo.mutation.AddChildIDs(ids...)
	return fauo
}

// AddChildren adds the "children" edges to the FixedAsset entity.
func (fauo *FixedAssetUpdateOne) AddChildren(f ...*FixedAsset) *FixedAssetUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fauo.AddChildIDs(ids...)
}

// SetPartyID sets the "party" edge to the Party entity by ID.
func (fauo *FixedAssetUpdateOne) SetPartyID(id int) *FixedAssetUpdateOne {
	fauo.mutation.SetPartyID(id)
	return fauo
}

// SetNillablePartyID sets the "party" edge to the Party entity by ID if the given value is not nil.
func (fauo *FixedAssetUpdateOne) SetNillablePartyID(id *int) *FixedAssetUpdateOne {
	if id != nil {
		fauo = fauo.SetPartyID(*id)
	}
	return fauo
}

// SetParty sets the "party" edge to the Party entity.
func (fauo *FixedAssetUpdateOne) SetParty(p *Party) *FixedAssetUpdateOne {
	return fauo.SetPartyID(p.ID)
}

// SetRoleTypeID sets the "role_type" edge to the RoleType entity by ID.
func (fauo *FixedAssetUpdateOne) SetRoleTypeID(id int) *FixedAssetUpdateOne {
	fauo.mutation.SetRoleTypeID(id)
	return fauo
}

// SetNillableRoleTypeID sets the "role_type" edge to the RoleType entity by ID if the given value is not nil.
func (fauo *FixedAssetUpdateOne) SetNillableRoleTypeID(id *int) *FixedAssetUpdateOne {
	if id != nil {
		fauo = fauo.SetRoleTypeID(*id)
	}
	return fauo
}

// SetRoleType sets the "role_type" edge to the RoleType entity.
func (fauo *FixedAssetUpdateOne) SetRoleType(r *RoleType) *FixedAssetUpdateOne {
	return fauo.SetRoleTypeID(r.ID)
}

// SetPartyRoleID sets the "party_role" edge to the PartyRole entity by ID.
func (fauo *FixedAssetUpdateOne) SetPartyRoleID(id int) *FixedAssetUpdateOne {
	fauo.mutation.SetPartyRoleID(id)
	return fauo
}

// SetNillablePartyRoleID sets the "party_role" edge to the PartyRole entity by ID if the given value is not nil.
func (fauo *FixedAssetUpdateOne) SetNillablePartyRoleID(id *int) *FixedAssetUpdateOne {
	if id != nil {
		fauo = fauo.SetPartyRoleID(*id)
	}
	return fauo
}

// SetPartyRole sets the "party_role" edge to the PartyRole entity.
func (fauo *FixedAssetUpdateOne) SetPartyRole(p *PartyRole) *FixedAssetUpdateOne {
	return fauo.SetPartyRoleID(p.ID)
}

// AddChildFixedAssetIDs adds the "child_fixed_assets" edge to the FixedAsset entity by IDs.
func (fauo *FixedAssetUpdateOne) AddChildFixedAssetIDs(ids ...int) *FixedAssetUpdateOne {
	fauo.mutation.AddChildFixedAssetIDs(ids...)
	return fauo
}

// AddChildFixedAssets adds the "child_fixed_assets" edges to the FixedAsset entity.
func (fauo *FixedAssetUpdateOne) AddChildFixedAssets(f ...*FixedAsset) *FixedAssetUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fauo.AddChildFixedAssetIDs(ids...)
}

// AddWorkEffortIDs adds the "work_efforts" edge to the WorkEffort entity by IDs.
func (fauo *FixedAssetUpdateOne) AddWorkEffortIDs(ids ...int) *FixedAssetUpdateOne {
	fauo.mutation.AddWorkEffortIDs(ids...)
	return fauo
}

// AddWorkEfforts adds the "work_efforts" edges to the WorkEffort entity.
func (fauo *FixedAssetUpdateOne) AddWorkEfforts(w ...*WorkEffort) *FixedAssetUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return fauo.AddWorkEffortIDs(ids...)
}

// AddWorkEffortFixedAssetAssignIDs adds the "work_effort_fixed_asset_assigns" edge to the WorkEffortFixedAssetAssign entity by IDs.
func (fauo *FixedAssetUpdateOne) AddWorkEffortFixedAssetAssignIDs(ids ...int) *FixedAssetUpdateOne {
	fauo.mutation.AddWorkEffortFixedAssetAssignIDs(ids...)
	return fauo
}

// AddWorkEffortFixedAssetAssigns adds the "work_effort_fixed_asset_assigns" edges to the WorkEffortFixedAssetAssign entity.
func (fauo *FixedAssetUpdateOne) AddWorkEffortFixedAssetAssigns(w ...*WorkEffortFixedAssetAssign) *FixedAssetUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return fauo.AddWorkEffortFixedAssetAssignIDs(ids...)
}

// Mutation returns the FixedAssetMutation object of the builder.
func (fauo *FixedAssetUpdateOne) Mutation() *FixedAssetMutation {
	return fauo.mutation
}

// ClearParent clears the "parent" edge to the FixedAsset entity.
func (fauo *FixedAssetUpdateOne) ClearParent() *FixedAssetUpdateOne {
	fauo.mutation.ClearParent()
	return fauo
}

// ClearChildren clears all "children" edges to the FixedAsset entity.
func (fauo *FixedAssetUpdateOne) ClearChildren() *FixedAssetUpdateOne {
	fauo.mutation.ClearChildren()
	return fauo
}

// RemoveChildIDs removes the "children" edge to FixedAsset entities by IDs.
func (fauo *FixedAssetUpdateOne) RemoveChildIDs(ids ...int) *FixedAssetUpdateOne {
	fauo.mutation.RemoveChildIDs(ids...)
	return fauo
}

// RemoveChildren removes "children" edges to FixedAsset entities.
func (fauo *FixedAssetUpdateOne) RemoveChildren(f ...*FixedAsset) *FixedAssetUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fauo.RemoveChildIDs(ids...)
}

// ClearParty clears the "party" edge to the Party entity.
func (fauo *FixedAssetUpdateOne) ClearParty() *FixedAssetUpdateOne {
	fauo.mutation.ClearParty()
	return fauo
}

// ClearRoleType clears the "role_type" edge to the RoleType entity.
func (fauo *FixedAssetUpdateOne) ClearRoleType() *FixedAssetUpdateOne {
	fauo.mutation.ClearRoleType()
	return fauo
}

// ClearPartyRole clears the "party_role" edge to the PartyRole entity.
func (fauo *FixedAssetUpdateOne) ClearPartyRole() *FixedAssetUpdateOne {
	fauo.mutation.ClearPartyRole()
	return fauo
}

// ClearChildFixedAssets clears all "child_fixed_assets" edges to the FixedAsset entity.
func (fauo *FixedAssetUpdateOne) ClearChildFixedAssets() *FixedAssetUpdateOne {
	fauo.mutation.ClearChildFixedAssets()
	return fauo
}

// RemoveChildFixedAssetIDs removes the "child_fixed_assets" edge to FixedAsset entities by IDs.
func (fauo *FixedAssetUpdateOne) RemoveChildFixedAssetIDs(ids ...int) *FixedAssetUpdateOne {
	fauo.mutation.RemoveChildFixedAssetIDs(ids...)
	return fauo
}

// RemoveChildFixedAssets removes "child_fixed_assets" edges to FixedAsset entities.
func (fauo *FixedAssetUpdateOne) RemoveChildFixedAssets(f ...*FixedAsset) *FixedAssetUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fauo.RemoveChildFixedAssetIDs(ids...)
}

// ClearWorkEfforts clears all "work_efforts" edges to the WorkEffort entity.
func (fauo *FixedAssetUpdateOne) ClearWorkEfforts() *FixedAssetUpdateOne {
	fauo.mutation.ClearWorkEfforts()
	return fauo
}

// RemoveWorkEffortIDs removes the "work_efforts" edge to WorkEffort entities by IDs.
func (fauo *FixedAssetUpdateOne) RemoveWorkEffortIDs(ids ...int) *FixedAssetUpdateOne {
	fauo.mutation.RemoveWorkEffortIDs(ids...)
	return fauo
}

// RemoveWorkEfforts removes "work_efforts" edges to WorkEffort entities.
func (fauo *FixedAssetUpdateOne) RemoveWorkEfforts(w ...*WorkEffort) *FixedAssetUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return fauo.RemoveWorkEffortIDs(ids...)
}

// ClearWorkEffortFixedAssetAssigns clears all "work_effort_fixed_asset_assigns" edges to the WorkEffortFixedAssetAssign entity.
func (fauo *FixedAssetUpdateOne) ClearWorkEffortFixedAssetAssigns() *FixedAssetUpdateOne {
	fauo.mutation.ClearWorkEffortFixedAssetAssigns()
	return fauo
}

// RemoveWorkEffortFixedAssetAssignIDs removes the "work_effort_fixed_asset_assigns" edge to WorkEffortFixedAssetAssign entities by IDs.
func (fauo *FixedAssetUpdateOne) RemoveWorkEffortFixedAssetAssignIDs(ids ...int) *FixedAssetUpdateOne {
	fauo.mutation.RemoveWorkEffortFixedAssetAssignIDs(ids...)
	return fauo
}

// RemoveWorkEffortFixedAssetAssigns removes "work_effort_fixed_asset_assigns" edges to WorkEffortFixedAssetAssign entities.
func (fauo *FixedAssetUpdateOne) RemoveWorkEffortFixedAssetAssigns(w ...*WorkEffortFixedAssetAssign) *FixedAssetUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return fauo.RemoveWorkEffortFixedAssetAssignIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fauo *FixedAssetUpdateOne) Select(field string, fields ...string) *FixedAssetUpdateOne {
	fauo.fields = append([]string{field}, fields...)
	return fauo
}

// Save executes the query and returns the updated FixedAsset entity.
func (fauo *FixedAssetUpdateOne) Save(ctx context.Context) (*FixedAsset, error) {
	var (
		err  error
		node *FixedAsset
	)
	fauo.defaults()
	if len(fauo.hooks) == 0 {
		node, err = fauo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FixedAssetMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			fauo.mutation = mutation
			node, err = fauo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(fauo.hooks) - 1; i >= 0; i-- {
			mut = fauo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fauo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (fauo *FixedAssetUpdateOne) SaveX(ctx context.Context) *FixedAsset {
	node, err := fauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fauo *FixedAssetUpdateOne) Exec(ctx context.Context) error {
	_, err := fauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fauo *FixedAssetUpdateOne) ExecX(ctx context.Context) {
	if err := fauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fauo *FixedAssetUpdateOne) defaults() {
	if _, ok := fauo.mutation.UpdateTime(); !ok {
		v := fixedasset.UpdateDefaultUpdateTime()
		fauo.mutation.SetUpdateTime(v)
	}
}

func (fauo *FixedAssetUpdateOne) sqlSave(ctx context.Context) (_node *FixedAsset, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   fixedasset.Table,
			Columns: fixedasset.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: fixedasset.FieldID,
			},
		},
	}
	id, ok := fauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing FixedAsset.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := fauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, fixedasset.FieldID)
		for _, f := range fields {
			if !fixedasset.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != fixedasset.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fauo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: fixedasset.FieldUpdateTime,
		})
	}
	if value, ok := fauo.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fixedasset.FieldStringRef,
		})
	}
	if fauo.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: fixedasset.FieldStringRef,
		})
	}
	if value, ok := fauo.mutation.FixedAssetTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: fixedasset.FieldFixedAssetTypeID,
		})
	}
	if value, ok := fauo.mutation.AddedFixedAssetTypeID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: fixedasset.FieldFixedAssetTypeID,
		})
	}
	if fauo.mutation.FixedAssetTypeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: fixedasset.FieldFixedAssetTypeID,
		})
	}
	if value, ok := fauo.mutation.InstanceOfProductID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: fixedasset.FieldInstanceOfProductID,
		})
	}
	if value, ok := fauo.mutation.AddedInstanceOfProductID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: fixedasset.FieldInstanceOfProductID,
		})
	}
	if fauo.mutation.InstanceOfProductIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: fixedasset.FieldInstanceOfProductID,
		})
	}
	if value, ok := fauo.mutation.ClassEnumID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: fixedasset.FieldClassEnumID,
		})
	}
	if value, ok := fauo.mutation.AddedClassEnumID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: fixedasset.FieldClassEnumID,
		})
	}
	if fauo.mutation.ClassEnumIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: fixedasset.FieldClassEnumID,
		})
	}
	if value, ok := fauo.mutation.FixedAssetName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fixedasset.FieldFixedAssetName,
		})
	}
	if fauo.mutation.FixedAssetNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: fixedasset.FieldFixedAssetName,
		})
	}
	if value, ok := fauo.mutation.AcquireOrderID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: fixedasset.FieldAcquireOrderID,
		})
	}
	if value, ok := fauo.mutation.AddedAcquireOrderID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: fixedasset.FieldAcquireOrderID,
		})
	}
	if fauo.mutation.AcquireOrderIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: fixedasset.FieldAcquireOrderID,
		})
	}
	if value, ok := fauo.mutation.AcquireOrderItemSeqID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: fixedasset.FieldAcquireOrderItemSeqID,
		})
	}
	if value, ok := fauo.mutation.AddedAcquireOrderItemSeqID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: fixedasset.FieldAcquireOrderItemSeqID,
		})
	}
	if fauo.mutation.AcquireOrderItemSeqIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: fixedasset.FieldAcquireOrderItemSeqID,
		})
	}
	if value, ok := fauo.mutation.DateAcquired(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: fixedasset.FieldDateAcquired,
		})
	}
	if fauo.mutation.DateAcquiredCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: fixedasset.FieldDateAcquired,
		})
	}
	if value, ok := fauo.mutation.DateLastServiced(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: fixedasset.FieldDateLastServiced,
		})
	}
	if fauo.mutation.DateLastServicedCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: fixedasset.FieldDateLastServiced,
		})
	}
	if value, ok := fauo.mutation.DateNextService(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: fixedasset.FieldDateNextService,
		})
	}
	if fauo.mutation.DateNextServiceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: fixedasset.FieldDateNextService,
		})
	}
	if value, ok := fauo.mutation.ExpectedEndOfLife(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: fixedasset.FieldExpectedEndOfLife,
		})
	}
	if fauo.mutation.ExpectedEndOfLifeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: fixedasset.FieldExpectedEndOfLife,
		})
	}
	if value, ok := fauo.mutation.ActualEndOfLife(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: fixedasset.FieldActualEndOfLife,
		})
	}
	if fauo.mutation.ActualEndOfLifeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: fixedasset.FieldActualEndOfLife,
		})
	}
	if value, ok := fauo.mutation.ProductionCapacity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: fixedasset.FieldProductionCapacity,
		})
	}
	if value, ok := fauo.mutation.AddedProductionCapacity(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: fixedasset.FieldProductionCapacity,
		})
	}
	if fauo.mutation.ProductionCapacityCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: fixedasset.FieldProductionCapacity,
		})
	}
	if value, ok := fauo.mutation.UomID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: fixedasset.FieldUomID,
		})
	}
	if value, ok := fauo.mutation.AddedUomID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: fixedasset.FieldUomID,
		})
	}
	if fauo.mutation.UomIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: fixedasset.FieldUomID,
		})
	}
	if value, ok := fauo.mutation.CalendarID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: fixedasset.FieldCalendarID,
		})
	}
	if value, ok := fauo.mutation.AddedCalendarID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: fixedasset.FieldCalendarID,
		})
	}
	if fauo.mutation.CalendarIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: fixedasset.FieldCalendarID,
		})
	}
	if value, ok := fauo.mutation.SerialNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fixedasset.FieldSerialNumber,
		})
	}
	if fauo.mutation.SerialNumberCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: fixedasset.FieldSerialNumber,
		})
	}
	if value, ok := fauo.mutation.LocatedAtFacilityID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: fixedasset.FieldLocatedAtFacilityID,
		})
	}
	if value, ok := fauo.mutation.AddedLocatedAtFacilityID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: fixedasset.FieldLocatedAtFacilityID,
		})
	}
	if fauo.mutation.LocatedAtFacilityIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: fixedasset.FieldLocatedAtFacilityID,
		})
	}
	if value, ok := fauo.mutation.LocatedAtLocationSeqID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: fixedasset.FieldLocatedAtLocationSeqID,
		})
	}
	if value, ok := fauo.mutation.AddedLocatedAtLocationSeqID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: fixedasset.FieldLocatedAtLocationSeqID,
		})
	}
	if fauo.mutation.LocatedAtLocationSeqIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: fixedasset.FieldLocatedAtLocationSeqID,
		})
	}
	if value, ok := fauo.mutation.SalvageValue(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: fixedasset.FieldSalvageValue,
		})
	}
	if value, ok := fauo.mutation.AddedSalvageValue(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: fixedasset.FieldSalvageValue,
		})
	}
	if fauo.mutation.SalvageValueCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: fixedasset.FieldSalvageValue,
		})
	}
	if value, ok := fauo.mutation.Depreciation(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: fixedasset.FieldDepreciation,
		})
	}
	if value, ok := fauo.mutation.AddedDepreciation(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: fixedasset.FieldDepreciation,
		})
	}
	if fauo.mutation.DepreciationCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: fixedasset.FieldDepreciation,
		})
	}
	if value, ok := fauo.mutation.PurchaseCost(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: fixedasset.FieldPurchaseCost,
		})
	}
	if value, ok := fauo.mutation.AddedPurchaseCost(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: fixedasset.FieldPurchaseCost,
		})
	}
	if fauo.mutation.PurchaseCostCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: fixedasset.FieldPurchaseCost,
		})
	}
	if value, ok := fauo.mutation.PurchaseCostUomID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: fixedasset.FieldPurchaseCostUomID,
		})
	}
	if value, ok := fauo.mutation.AddedPurchaseCostUomID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: fixedasset.FieldPurchaseCostUomID,
		})
	}
	if fauo.mutation.PurchaseCostUomIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: fixedasset.FieldPurchaseCostUomID,
		})
	}
	if fauo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fixedasset.ParentTable,
			Columns: []string{fixedasset.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: fixedasset.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fauo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fixedasset.ParentTable,
			Columns: []string{fixedasset.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: fixedasset.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fauo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   fixedasset.ChildrenTable,
			Columns: []string{fixedasset.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: fixedasset.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fauo.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !fauo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   fixedasset.ChildrenTable,
			Columns: []string{fixedasset.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: fixedasset.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fauo.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   fixedasset.ChildrenTable,
			Columns: []string{fixedasset.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: fixedasset.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fauo.mutation.PartyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fixedasset.PartyTable,
			Columns: []string{fixedasset.PartyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: party.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fauo.mutation.PartyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fixedasset.PartyTable,
			Columns: []string{fixedasset.PartyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: party.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fauo.mutation.RoleTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fixedasset.RoleTypeTable,
			Columns: []string{fixedasset.RoleTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: roletype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fauo.mutation.RoleTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fixedasset.RoleTypeTable,
			Columns: []string{fixedasset.RoleTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: roletype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fauo.mutation.PartyRoleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fixedasset.PartyRoleTable,
			Columns: []string{fixedasset.PartyRoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partyrole.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fauo.mutation.PartyRoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fixedasset.PartyRoleTable,
			Columns: []string{fixedasset.PartyRoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partyrole.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fauo.mutation.ChildFixedAssetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   fixedasset.ChildFixedAssetsTable,
			Columns: fixedasset.ChildFixedAssetsPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: fixedasset.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fauo.mutation.RemovedChildFixedAssetsIDs(); len(nodes) > 0 && !fauo.mutation.ChildFixedAssetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   fixedasset.ChildFixedAssetsTable,
			Columns: fixedasset.ChildFixedAssetsPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: fixedasset.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fauo.mutation.ChildFixedAssetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   fixedasset.ChildFixedAssetsTable,
			Columns: fixedasset.ChildFixedAssetsPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: fixedasset.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fauo.mutation.WorkEffortsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   fixedasset.WorkEffortsTable,
			Columns: []string{fixedasset.WorkEffortsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffort.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fauo.mutation.RemovedWorkEffortsIDs(); len(nodes) > 0 && !fauo.mutation.WorkEffortsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   fixedasset.WorkEffortsTable,
			Columns: []string{fixedasset.WorkEffortsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffort.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fauo.mutation.WorkEffortsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   fixedasset.WorkEffortsTable,
			Columns: []string{fixedasset.WorkEffortsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffort.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fauo.mutation.WorkEffortFixedAssetAssignsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   fixedasset.WorkEffortFixedAssetAssignsTable,
			Columns: []string{fixedasset.WorkEffortFixedAssetAssignsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffortfixedassetassign.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fauo.mutation.RemovedWorkEffortFixedAssetAssignsIDs(); len(nodes) > 0 && !fauo.mutation.WorkEffortFixedAssetAssignsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   fixedasset.WorkEffortFixedAssetAssignsTable,
			Columns: []string{fixedasset.WorkEffortFixedAssetAssignsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffortfixedassetassign.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fauo.mutation.WorkEffortFixedAssetAssignsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   fixedasset.WorkEffortFixedAssetAssignsTable,
			Columns: []string{fixedasset.WorkEffortFixedAssetAssignsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffortfixedassetassign.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &FixedAsset{config: fauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fixedasset.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
