// Code generated by entc, DO NOT EDIT.

package hook

import (
	"context"
	"fmt"

	"github.com/samlet/petrel/alfin/modules/workeffort/ent"
)

// The FixedAssetFunc type is an adapter to allow the use of ordinary
// function as FixedAsset mutator.
type FixedAssetFunc func(context.Context, *ent.FixedAssetMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f FixedAssetFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.FixedAssetMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.FixedAssetMutation", m)
	}
	return f(ctx, mv)
}

// The PartyFunc type is an adapter to allow the use of ordinary
// function as Party mutator.
type PartyFunc func(context.Context, *ent.PartyMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PartyFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.PartyMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PartyMutation", m)
	}
	return f(ctx, mv)
}

// The PartyContactMechFunc type is an adapter to allow the use of ordinary
// function as PartyContactMech mutator.
type PartyContactMechFunc func(context.Context, *ent.PartyContactMechMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PartyContactMechFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.PartyContactMechMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PartyContactMechMutation", m)
	}
	return f(ctx, mv)
}

// The PartyRoleFunc type is an adapter to allow the use of ordinary
// function as PartyRole mutator.
type PartyRoleFunc func(context.Context, *ent.PartyRoleMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PartyRoleFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.PartyRoleMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PartyRoleMutation", m)
	}
	return f(ctx, mv)
}

// The PartyStatusFunc type is an adapter to allow the use of ordinary
// function as PartyStatus mutator.
type PartyStatusFunc func(context.Context, *ent.PartyStatusMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PartyStatusFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.PartyStatusMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PartyStatusMutation", m)
	}
	return f(ctx, mv)
}

// The PersonFunc type is an adapter to allow the use of ordinary
// function as Person mutator.
type PersonFunc func(context.Context, *ent.PersonMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PersonFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.PersonMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PersonMutation", m)
	}
	return f(ctx, mv)
}

// The RoleTypeFunc type is an adapter to allow the use of ordinary
// function as RoleType mutator.
type RoleTypeFunc func(context.Context, *ent.RoleTypeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f RoleTypeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.RoleTypeMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.RoleTypeMutation", m)
	}
	return f(ctx, mv)
}

// The SecurityGroupFunc type is an adapter to allow the use of ordinary
// function as SecurityGroup mutator.
type SecurityGroupFunc func(context.Context, *ent.SecurityGroupMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f SecurityGroupFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.SecurityGroupMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.SecurityGroupMutation", m)
	}
	return f(ctx, mv)
}

// The SecurityGroupPermissionFunc type is an adapter to allow the use of ordinary
// function as SecurityGroupPermission mutator.
type SecurityGroupPermissionFunc func(context.Context, *ent.SecurityGroupPermissionMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f SecurityGroupPermissionFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.SecurityGroupPermissionMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.SecurityGroupPermissionMutation", m)
	}
	return f(ctx, mv)
}

// The SkillTypeFunc type is an adapter to allow the use of ordinary
// function as SkillType mutator.
type SkillTypeFunc func(context.Context, *ent.SkillTypeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f SkillTypeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.SkillTypeMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.SkillTypeMutation", m)
	}
	return f(ctx, mv)
}

// The StatusItemFunc type is an adapter to allow the use of ordinary
// function as StatusItem mutator.
type StatusItemFunc func(context.Context, *ent.StatusItemMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f StatusItemFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.StatusItemMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.StatusItemMutation", m)
	}
	return f(ctx, mv)
}

// The StatusTypeFunc type is an adapter to allow the use of ordinary
// function as StatusType mutator.
type StatusTypeFunc func(context.Context, *ent.StatusTypeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f StatusTypeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.StatusTypeMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.StatusTypeMutation", m)
	}
	return f(ctx, mv)
}

// The StatusValidChangeFunc type is an adapter to allow the use of ordinary
// function as StatusValidChange mutator.
type StatusValidChangeFunc func(context.Context, *ent.StatusValidChangeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f StatusValidChangeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.StatusValidChangeMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.StatusValidChangeMutation", m)
	}
	return f(ctx, mv)
}

// The TemporalExpressionFunc type is an adapter to allow the use of ordinary
// function as TemporalExpression mutator.
type TemporalExpressionFunc func(context.Context, *ent.TemporalExpressionMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f TemporalExpressionFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.TemporalExpressionMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.TemporalExpressionMutation", m)
	}
	return f(ctx, mv)
}

// The TemporalExpressionAssocFunc type is an adapter to allow the use of ordinary
// function as TemporalExpressionAssoc mutator.
type TemporalExpressionAssocFunc func(context.Context, *ent.TemporalExpressionAssocMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f TemporalExpressionAssocFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.TemporalExpressionAssocMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.TemporalExpressionAssocMutation", m)
	}
	return f(ctx, mv)
}

// The UserLoginFunc type is an adapter to allow the use of ordinary
// function as UserLogin mutator.
type UserLoginFunc func(context.Context, *ent.UserLoginMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f UserLoginFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.UserLoginMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.UserLoginMutation", m)
	}
	return f(ctx, mv)
}

// The UserLoginSecurityGroupFunc type is an adapter to allow the use of ordinary
// function as UserLoginSecurityGroup mutator.
type UserLoginSecurityGroupFunc func(context.Context, *ent.UserLoginSecurityGroupMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f UserLoginSecurityGroupFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.UserLoginSecurityGroupMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.UserLoginSecurityGroupMutation", m)
	}
	return f(ctx, mv)
}

// The WorkEffortFunc type is an adapter to allow the use of ordinary
// function as WorkEffort mutator.
type WorkEffortFunc func(context.Context, *ent.WorkEffortMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f WorkEffortFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.WorkEffortMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.WorkEffortMutation", m)
	}
	return f(ctx, mv)
}

// The WorkEffortAssocFunc type is an adapter to allow the use of ordinary
// function as WorkEffortAssoc mutator.
type WorkEffortAssocFunc func(context.Context, *ent.WorkEffortAssocMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f WorkEffortAssocFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.WorkEffortAssocMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.WorkEffortAssocMutation", m)
	}
	return f(ctx, mv)
}

// The WorkEffortFixedAssetAssignFunc type is an adapter to allow the use of ordinary
// function as WorkEffortFixedAssetAssign mutator.
type WorkEffortFixedAssetAssignFunc func(context.Context, *ent.WorkEffortFixedAssetAssignMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f WorkEffortFixedAssetAssignFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.WorkEffortFixedAssetAssignMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.WorkEffortFixedAssetAssignMutation", m)
	}
	return f(ctx, mv)
}

// The WorkEffortPartyAssignmentFunc type is an adapter to allow the use of ordinary
// function as WorkEffortPartyAssignment mutator.
type WorkEffortPartyAssignmentFunc func(context.Context, *ent.WorkEffortPartyAssignmentMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f WorkEffortPartyAssignmentFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.WorkEffortPartyAssignmentMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.WorkEffortPartyAssignmentMutation", m)
	}
	return f(ctx, mv)
}

// The WorkEffortSkillStandardFunc type is an adapter to allow the use of ordinary
// function as WorkEffortSkillStandard mutator.
type WorkEffortSkillStandardFunc func(context.Context, *ent.WorkEffortSkillStandardMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f WorkEffortSkillStandardFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.WorkEffortSkillStandardMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.WorkEffortSkillStandardMutation", m)
	}
	return f(ctx, mv)
}

// The WorkEffortTypeFunc type is an adapter to allow the use of ordinary
// function as WorkEffortType mutator.
type WorkEffortTypeFunc func(context.Context, *ent.WorkEffortTypeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f WorkEffortTypeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.WorkEffortTypeMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.WorkEffortTypeMutation", m)
	}
	return f(ctx, mv)
}

// Condition is a hook condition function.
type Condition func(context.Context, ent.Mutation) bool

// And groups conditions with the AND operator.
func And(first, second Condition, rest ...Condition) Condition {
	return func(ctx context.Context, m ent.Mutation) bool {
		if !first(ctx, m) || !second(ctx, m) {
			return false
		}
		for _, cond := range rest {
			if !cond(ctx, m) {
				return false
			}
		}
		return true
	}
}

// Or groups conditions with the OR operator.
func Or(first, second Condition, rest ...Condition) Condition {
	return func(ctx context.Context, m ent.Mutation) bool {
		if first(ctx, m) || second(ctx, m) {
			return true
		}
		for _, cond := range rest {
			if cond(ctx, m) {
				return true
			}
		}
		return false
	}
}

// Not negates a given condition.
func Not(cond Condition) Condition {
	return func(ctx context.Context, m ent.Mutation) bool {
		return !cond(ctx, m)
	}
}

// HasOp is a condition testing mutation operation.
func HasOp(op ent.Op) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		return m.Op().Is(op)
	}
}

// HasAddedFields is a condition validating `.AddedField` on fields.
func HasAddedFields(field string, fields ...string) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		if _, exists := m.AddedField(field); !exists {
			return false
		}
		for _, field := range fields {
			if _, exists := m.AddedField(field); !exists {
				return false
			}
		}
		return true
	}
}

// HasClearedFields is a condition validating `.FieldCleared` on fields.
func HasClearedFields(field string, fields ...string) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		if exists := m.FieldCleared(field); !exists {
			return false
		}
		for _, field := range fields {
			if exists := m.FieldCleared(field); !exists {
				return false
			}
		}
		return true
	}
}

// HasFields is a condition validating `.Field` on fields.
func HasFields(field string, fields ...string) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		if _, exists := m.Field(field); !exists {
			return false
		}
		for _, field := range fields {
			if _, exists := m.Field(field); !exists {
				return false
			}
		}
		return true
	}
}

// If executes the given hook under condition.
//
//	hook.If(ComputeAverage, And(HasFields(...), HasAddedFields(...)))
//
func If(hk ent.Hook, cond Condition) ent.Hook {
	return func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if cond(ctx, m) {
				return hk(next).Mutate(ctx, m)
			}
			return next.Mutate(ctx, m)
		})
	}
}

// On executes the given hook only for the given operation.
//
//	hook.On(Log, ent.Delete|ent.Create)
//
func On(hk ent.Hook, op ent.Op) ent.Hook {
	return If(hk, HasOp(op))
}

// Unless skips the given hook only for the given operation.
//
//	hook.Unless(Log, ent.Update|ent.UpdateOne)
//
func Unless(hk ent.Hook, op ent.Op) ent.Hook {
	return If(hk, Not(HasOp(op)))
}

// FixedError is a hook returning a fixed error.
func FixedError(err error) ent.Hook {
	return func(ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(context.Context, ent.Mutation) (ent.Value, error) {
			return nil, err
		})
	}
}

// Reject returns a hook that rejects all operations that match op.
//
//	func (T) Hooks() []ent.Hook {
//		return []ent.Hook{
//			Reject(ent.Delete|ent.Update),
//		}
//	}
//
func Reject(op ent.Op) ent.Hook {
	hk := FixedError(fmt.Errorf("%s operation is not allowed", op))
	return On(hk, op)
}

// Chain acts as a list of hooks and is effectively immutable.
// Once created, it will always hold the same set of hooks in the same order.
type Chain struct {
	hooks []ent.Hook
}

// NewChain creates a new chain of hooks.
func NewChain(hooks ...ent.Hook) Chain {
	return Chain{append([]ent.Hook(nil), hooks...)}
}

// Hook chains the list of hooks and returns the final hook.
func (c Chain) Hook() ent.Hook {
	return func(mutator ent.Mutator) ent.Mutator {
		for i := len(c.hooks) - 1; i >= 0; i-- {
			mutator = c.hooks[i](mutator)
		}
		return mutator
	}
}

// Append extends a chain, adding the specified hook
// as the last ones in the mutation flow.
func (c Chain) Append(hooks ...ent.Hook) Chain {
	newHooks := make([]ent.Hook, 0, len(c.hooks)+len(hooks))
	newHooks = append(newHooks, c.hooks...)
	newHooks = append(newHooks, hooks...)
	return Chain{newHooks}
}

// Extend extends a chain, adding the specified chain
// as the last ones in the mutation flow.
func (c Chain) Extend(chain Chain) Chain {
	return c.Append(chain.hooks...)
}
