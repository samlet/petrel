// Code generated by entc, DO NOT EDIT.

package party

import (
	"fmt"
	"time"
)

const (
	// Label holds the string label denoting the party type in the database.
	Label = "party"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldStringRef holds the string denoting the string_ref field in the database.
	FieldStringRef = "string_ref"
	// FieldExternalID holds the string denoting the external_id field in the database.
	FieldExternalID = "external_id"
	// FieldPreferredCurrencyUomID holds the string denoting the preferred_currency_uom_id field in the database.
	FieldPreferredCurrencyUomID = "preferred_currency_uom_id"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldCreatedDate holds the string denoting the created_date field in the database.
	FieldCreatedDate = "created_date"
	// FieldLastModifiedDate holds the string denoting the last_modified_date field in the database.
	FieldLastModifiedDate = "last_modified_date"
	// FieldDataSourceID holds the string denoting the data_source_id field in the database.
	FieldDataSourceID = "data_source_id"
	// FieldIsUnread holds the string denoting the is_unread field in the database.
	FieldIsUnread = "is_unread"
	// EdgePartyType holds the string denoting the party_type edge name in mutations.
	EdgePartyType = "party_type"
	// EdgeCreatedByUserLogin holds the string denoting the created_by_user_login edge name in mutations.
	EdgeCreatedByUserLogin = "created_by_user_login"
	// EdgeLastModifiedByUserLogin holds the string denoting the last_modified_by_user_login edge name in mutations.
	EdgeLastModifiedByUserLogin = "last_modified_by_user_login"
	// EdgeStatusItem holds the string denoting the status_item edge name in mutations.
	EdgeStatusItem = "status_item"
	// EdgeFixedAssets holds the string denoting the fixed_assets edge name in mutations.
	EdgeFixedAssets = "fixed_assets"
	// EdgePartyContactMeches holds the string denoting the party_contact_meches edge name in mutations.
	EdgePartyContactMeches = "party_contact_meches"
	// EdgePartyRoles holds the string denoting the party_roles edge name in mutations.
	EdgePartyRoles = "party_roles"
	// EdgePartyStatuses holds the string denoting the party_statuses edge name in mutations.
	EdgePartyStatuses = "party_statuses"
	// EdgePerson holds the string denoting the person edge name in mutations.
	EdgePerson = "person"
	// EdgeUserLogins holds the string denoting the user_logins edge name in mutations.
	EdgeUserLogins = "user_logins"
	// EdgeWorkEffortPartyAssignments holds the string denoting the work_effort_party_assignments edge name in mutations.
	EdgeWorkEffortPartyAssignments = "work_effort_party_assignments"
	// Table holds the table name of the party in the database.
	Table = "parties"
	// PartyTypeTable is the table the holds the party_type relation/edge.
	PartyTypeTable = "parties"
	// PartyTypeInverseTable is the table name for the PartyType entity.
	// It exists in this package in order to avoid circular dependency with the "partytype" package.
	PartyTypeInverseTable = "party_types"
	// PartyTypeColumn is the table column denoting the party_type relation/edge.
	PartyTypeColumn = "party_type_parties"
	// CreatedByUserLoginTable is the table the holds the created_by_user_login relation/edge.
	CreatedByUserLoginTable = "parties"
	// CreatedByUserLoginInverseTable is the table name for the UserLogin entity.
	// It exists in this package in order to avoid circular dependency with the "userlogin" package.
	CreatedByUserLoginInverseTable = "user_logins"
	// CreatedByUserLoginColumn is the table column denoting the created_by_user_login relation/edge.
	CreatedByUserLoginColumn = "user_login_created_by_parties"
	// LastModifiedByUserLoginTable is the table the holds the last_modified_by_user_login relation/edge.
	LastModifiedByUserLoginTable = "parties"
	// LastModifiedByUserLoginInverseTable is the table name for the UserLogin entity.
	// It exists in this package in order to avoid circular dependency with the "userlogin" package.
	LastModifiedByUserLoginInverseTable = "user_logins"
	// LastModifiedByUserLoginColumn is the table column denoting the last_modified_by_user_login relation/edge.
	LastModifiedByUserLoginColumn = "user_login_last_modified_by_parties"
	// StatusItemTable is the table the holds the status_item relation/edge.
	StatusItemTable = "parties"
	// StatusItemInverseTable is the table name for the StatusItem entity.
	// It exists in this package in order to avoid circular dependency with the "statusitem" package.
	StatusItemInverseTable = "status_items"
	// StatusItemColumn is the table column denoting the status_item relation/edge.
	StatusItemColumn = "status_item_parties"
	// FixedAssetsTable is the table the holds the fixed_assets relation/edge.
	FixedAssetsTable = "fixed_assets"
	// FixedAssetsInverseTable is the table name for the FixedAsset entity.
	// It exists in this package in order to avoid circular dependency with the "fixedasset" package.
	FixedAssetsInverseTable = "fixed_assets"
	// FixedAssetsColumn is the table column denoting the fixed_assets relation/edge.
	FixedAssetsColumn = "party_fixed_assets"
	// PartyContactMechesTable is the table the holds the party_contact_meches relation/edge.
	PartyContactMechesTable = "party_contact_meches"
	// PartyContactMechesInverseTable is the table name for the PartyContactMech entity.
	// It exists in this package in order to avoid circular dependency with the "partycontactmech" package.
	PartyContactMechesInverseTable = "party_contact_meches"
	// PartyContactMechesColumn is the table column denoting the party_contact_meches relation/edge.
	PartyContactMechesColumn = "party_party_contact_meches"
	// PartyRolesTable is the table the holds the party_roles relation/edge.
	PartyRolesTable = "party_roles"
	// PartyRolesInverseTable is the table name for the PartyRole entity.
	// It exists in this package in order to avoid circular dependency with the "partyrole" package.
	PartyRolesInverseTable = "party_roles"
	// PartyRolesColumn is the table column denoting the party_roles relation/edge.
	PartyRolesColumn = "party_party_roles"
	// PartyStatusesTable is the table the holds the party_statuses relation/edge.
	PartyStatusesTable = "party_status"
	// PartyStatusesInverseTable is the table name for the PartyStatus entity.
	// It exists in this package in order to avoid circular dependency with the "partystatus" package.
	PartyStatusesInverseTable = "party_status"
	// PartyStatusesColumn is the table column denoting the party_statuses relation/edge.
	PartyStatusesColumn = "party_party_statuses"
	// PersonTable is the table the holds the person relation/edge.
	PersonTable = "persons"
	// PersonInverseTable is the table name for the Person entity.
	// It exists in this package in order to avoid circular dependency with the "person" package.
	PersonInverseTable = "persons"
	// PersonColumn is the table column denoting the person relation/edge.
	PersonColumn = "party_person"
	// UserLoginsTable is the table the holds the user_logins relation/edge.
	UserLoginsTable = "user_logins"
	// UserLoginsInverseTable is the table name for the UserLogin entity.
	// It exists in this package in order to avoid circular dependency with the "userlogin" package.
	UserLoginsInverseTable = "user_logins"
	// UserLoginsColumn is the table column denoting the user_logins relation/edge.
	UserLoginsColumn = "party_user_logins"
	// WorkEffortPartyAssignmentsTable is the table the holds the work_effort_party_assignments relation/edge.
	WorkEffortPartyAssignmentsTable = "work_effort_party_assignments"
	// WorkEffortPartyAssignmentsInverseTable is the table name for the WorkEffortPartyAssignment entity.
	// It exists in this package in order to avoid circular dependency with the "workeffortpartyassignment" package.
	WorkEffortPartyAssignmentsInverseTable = "work_effort_party_assignments"
	// WorkEffortPartyAssignmentsColumn is the table column denoting the work_effort_party_assignments relation/edge.
	WorkEffortPartyAssignmentsColumn = "party_work_effort_party_assignments"
)

// Columns holds all SQL columns for party fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldStringRef,
	FieldExternalID,
	FieldPreferredCurrencyUomID,
	FieldDescription,
	FieldCreatedDate,
	FieldLastModifiedDate,
	FieldDataSourceID,
	FieldIsUnread,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "parties"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"party_type_parties",
	"status_item_parties",
	"user_login_created_by_parties",
	"user_login_last_modified_by_parties",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// DefaultCreatedDate holds the default value on creation for the "created_date" field.
	DefaultCreatedDate func() time.Time
	// DefaultLastModifiedDate holds the default value on creation for the "last_modified_date" field.
	DefaultLastModifiedDate func() time.Time
)

// IsUnread defines the type for the "is_unread" enum field.
type IsUnread string

// IsUnread values.
const (
	IsUnreadYes     IsUnread = "Yes"
	IsUnreadNo      IsUnread = "No"
	IsUnreadUnknown IsUnread = "Unknown"
)

func (iu IsUnread) String() string {
	return string(iu)
}

// IsUnreadValidator is a validator for the "is_unread" field enum values. It is called by the builders before save.
func IsUnreadValidator(iu IsUnread) error {
	switch iu {
	case IsUnreadYes, IsUnreadNo, IsUnreadUnknown:
		return nil
	default:
		return fmt.Errorf("party: invalid enum value for is_unread field: %q", iu)
	}
}
