// Code generated by entc, DO NOT EDIT.

package party

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// PartyTypeID applies equality check predicate on the "party_type_id" field. It's identical to PartyTypeIDEQ.
func PartyTypeID(v int) predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPartyTypeID), v))
	})
}

// ExternalID applies equality check predicate on the "external_id" field. It's identical to ExternalIDEQ.
func ExternalID(v int) predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExternalID), v))
	})
}

// PreferredCurrencyUomID applies equality check predicate on the "preferred_currency_uom_id" field. It's identical to PreferredCurrencyUomIDEQ.
func PreferredCurrencyUomID(v int) predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPreferredCurrencyUomID), v))
	})
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// StatusID applies equality check predicate on the "status_id" field. It's identical to StatusIDEQ.
func StatusID(v int) predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatusID), v))
	})
}

// CreatedDate applies equality check predicate on the "created_date" field. It's identical to CreatedDateEQ.
func CreatedDate(v time.Time) predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedDate), v))
	})
}

// LastModifiedDate applies equality check predicate on the "last_modified_date" field. It's identical to LastModifiedDateEQ.
func LastModifiedDate(v time.Time) predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastModifiedDate), v))
	})
}

// DataSourceID applies equality check predicate on the "data_source_id" field. It's identical to DataSourceIDEQ.
func DataSourceID(v int) predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDataSourceID), v))
	})
}

// PartyTypeIDEQ applies the EQ predicate on the "party_type_id" field.
func PartyTypeIDEQ(v int) predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPartyTypeID), v))
	})
}

// PartyTypeIDNEQ applies the NEQ predicate on the "party_type_id" field.
func PartyTypeIDNEQ(v int) predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPartyTypeID), v))
	})
}

// PartyTypeIDIn applies the In predicate on the "party_type_id" field.
func PartyTypeIDIn(vs ...int) predicate.Party {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Party(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPartyTypeID), v...))
	})
}

// PartyTypeIDNotIn applies the NotIn predicate on the "party_type_id" field.
func PartyTypeIDNotIn(vs ...int) predicate.Party {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Party(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPartyTypeID), v...))
	})
}

// PartyTypeIDGT applies the GT predicate on the "party_type_id" field.
func PartyTypeIDGT(v int) predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPartyTypeID), v))
	})
}

// PartyTypeIDGTE applies the GTE predicate on the "party_type_id" field.
func PartyTypeIDGTE(v int) predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPartyTypeID), v))
	})
}

// PartyTypeIDLT applies the LT predicate on the "party_type_id" field.
func PartyTypeIDLT(v int) predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPartyTypeID), v))
	})
}

// PartyTypeIDLTE applies the LTE predicate on the "party_type_id" field.
func PartyTypeIDLTE(v int) predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPartyTypeID), v))
	})
}

// PartyTypeIDIsNil applies the IsNil predicate on the "party_type_id" field.
func PartyTypeIDIsNil() predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPartyTypeID)))
	})
}

// PartyTypeIDNotNil applies the NotNil predicate on the "party_type_id" field.
func PartyTypeIDNotNil() predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPartyTypeID)))
	})
}

// ExternalIDEQ applies the EQ predicate on the "external_id" field.
func ExternalIDEQ(v int) predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExternalID), v))
	})
}

// ExternalIDNEQ applies the NEQ predicate on the "external_id" field.
func ExternalIDNEQ(v int) predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldExternalID), v))
	})
}

// ExternalIDIn applies the In predicate on the "external_id" field.
func ExternalIDIn(vs ...int) predicate.Party {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Party(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldExternalID), v...))
	})
}

// ExternalIDNotIn applies the NotIn predicate on the "external_id" field.
func ExternalIDNotIn(vs ...int) predicate.Party {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Party(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldExternalID), v...))
	})
}

// ExternalIDGT applies the GT predicate on the "external_id" field.
func ExternalIDGT(v int) predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldExternalID), v))
	})
}

// ExternalIDGTE applies the GTE predicate on the "external_id" field.
func ExternalIDGTE(v int) predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldExternalID), v))
	})
}

// ExternalIDLT applies the LT predicate on the "external_id" field.
func ExternalIDLT(v int) predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldExternalID), v))
	})
}

// ExternalIDLTE applies the LTE predicate on the "external_id" field.
func ExternalIDLTE(v int) predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldExternalID), v))
	})
}

// ExternalIDIsNil applies the IsNil predicate on the "external_id" field.
func ExternalIDIsNil() predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldExternalID)))
	})
}

// ExternalIDNotNil applies the NotNil predicate on the "external_id" field.
func ExternalIDNotNil() predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldExternalID)))
	})
}

// PreferredCurrencyUomIDEQ applies the EQ predicate on the "preferred_currency_uom_id" field.
func PreferredCurrencyUomIDEQ(v int) predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPreferredCurrencyUomID), v))
	})
}

// PreferredCurrencyUomIDNEQ applies the NEQ predicate on the "preferred_currency_uom_id" field.
func PreferredCurrencyUomIDNEQ(v int) predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPreferredCurrencyUomID), v))
	})
}

// PreferredCurrencyUomIDIn applies the In predicate on the "preferred_currency_uom_id" field.
func PreferredCurrencyUomIDIn(vs ...int) predicate.Party {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Party(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPreferredCurrencyUomID), v...))
	})
}

// PreferredCurrencyUomIDNotIn applies the NotIn predicate on the "preferred_currency_uom_id" field.
func PreferredCurrencyUomIDNotIn(vs ...int) predicate.Party {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Party(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPreferredCurrencyUomID), v...))
	})
}

// PreferredCurrencyUomIDGT applies the GT predicate on the "preferred_currency_uom_id" field.
func PreferredCurrencyUomIDGT(v int) predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPreferredCurrencyUomID), v))
	})
}

// PreferredCurrencyUomIDGTE applies the GTE predicate on the "preferred_currency_uom_id" field.
func PreferredCurrencyUomIDGTE(v int) predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPreferredCurrencyUomID), v))
	})
}

// PreferredCurrencyUomIDLT applies the LT predicate on the "preferred_currency_uom_id" field.
func PreferredCurrencyUomIDLT(v int) predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPreferredCurrencyUomID), v))
	})
}

// PreferredCurrencyUomIDLTE applies the LTE predicate on the "preferred_currency_uom_id" field.
func PreferredCurrencyUomIDLTE(v int) predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPreferredCurrencyUomID), v))
	})
}

// PreferredCurrencyUomIDIsNil applies the IsNil predicate on the "preferred_currency_uom_id" field.
func PreferredCurrencyUomIDIsNil() predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPreferredCurrencyUomID)))
	})
}

// PreferredCurrencyUomIDNotNil applies the NotNil predicate on the "preferred_currency_uom_id" field.
func PreferredCurrencyUomIDNotNil() predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPreferredCurrencyUomID)))
	})
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDescription), v))
	})
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Party {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Party(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDescription), v...))
	})
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Party {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Party(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDescription), v...))
	})
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDescription), v))
	})
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDescription), v))
	})
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDescription), v))
	})
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDescription), v))
	})
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDescription), v))
	})
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDescription), v))
	})
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDescription), v))
	})
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDescription)))
	})
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDescription)))
	})
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDescription), v))
	})
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDescription), v))
	})
}

// StatusIDEQ applies the EQ predicate on the "status_id" field.
func StatusIDEQ(v int) predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatusID), v))
	})
}

// StatusIDNEQ applies the NEQ predicate on the "status_id" field.
func StatusIDNEQ(v int) predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatusID), v))
	})
}

// StatusIDIn applies the In predicate on the "status_id" field.
func StatusIDIn(vs ...int) predicate.Party {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Party(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStatusID), v...))
	})
}

// StatusIDNotIn applies the NotIn predicate on the "status_id" field.
func StatusIDNotIn(vs ...int) predicate.Party {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Party(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStatusID), v...))
	})
}

// StatusIDGT applies the GT predicate on the "status_id" field.
func StatusIDGT(v int) predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatusID), v))
	})
}

// StatusIDGTE applies the GTE predicate on the "status_id" field.
func StatusIDGTE(v int) predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatusID), v))
	})
}

// StatusIDLT applies the LT predicate on the "status_id" field.
func StatusIDLT(v int) predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatusID), v))
	})
}

// StatusIDLTE applies the LTE predicate on the "status_id" field.
func StatusIDLTE(v int) predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatusID), v))
	})
}

// StatusIDIsNil applies the IsNil predicate on the "status_id" field.
func StatusIDIsNil() predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStatusID)))
	})
}

// StatusIDNotNil applies the NotNil predicate on the "status_id" field.
func StatusIDNotNil() predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStatusID)))
	})
}

// CreatedDateEQ applies the EQ predicate on the "created_date" field.
func CreatedDateEQ(v time.Time) predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedDate), v))
	})
}

// CreatedDateNEQ applies the NEQ predicate on the "created_date" field.
func CreatedDateNEQ(v time.Time) predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedDate), v))
	})
}

// CreatedDateIn applies the In predicate on the "created_date" field.
func CreatedDateIn(vs ...time.Time) predicate.Party {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Party(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedDate), v...))
	})
}

// CreatedDateNotIn applies the NotIn predicate on the "created_date" field.
func CreatedDateNotIn(vs ...time.Time) predicate.Party {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Party(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedDate), v...))
	})
}

// CreatedDateGT applies the GT predicate on the "created_date" field.
func CreatedDateGT(v time.Time) predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedDate), v))
	})
}

// CreatedDateGTE applies the GTE predicate on the "created_date" field.
func CreatedDateGTE(v time.Time) predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedDate), v))
	})
}

// CreatedDateLT applies the LT predicate on the "created_date" field.
func CreatedDateLT(v time.Time) predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedDate), v))
	})
}

// CreatedDateLTE applies the LTE predicate on the "created_date" field.
func CreatedDateLTE(v time.Time) predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedDate), v))
	})
}

// CreatedDateIsNil applies the IsNil predicate on the "created_date" field.
func CreatedDateIsNil() predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreatedDate)))
	})
}

// CreatedDateNotNil applies the NotNil predicate on the "created_date" field.
func CreatedDateNotNil() predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreatedDate)))
	})
}

// LastModifiedDateEQ applies the EQ predicate on the "last_modified_date" field.
func LastModifiedDateEQ(v time.Time) predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastModifiedDate), v))
	})
}

// LastModifiedDateNEQ applies the NEQ predicate on the "last_modified_date" field.
func LastModifiedDateNEQ(v time.Time) predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLastModifiedDate), v))
	})
}

// LastModifiedDateIn applies the In predicate on the "last_modified_date" field.
func LastModifiedDateIn(vs ...time.Time) predicate.Party {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Party(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLastModifiedDate), v...))
	})
}

// LastModifiedDateNotIn applies the NotIn predicate on the "last_modified_date" field.
func LastModifiedDateNotIn(vs ...time.Time) predicate.Party {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Party(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLastModifiedDate), v...))
	})
}

// LastModifiedDateGT applies the GT predicate on the "last_modified_date" field.
func LastModifiedDateGT(v time.Time) predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLastModifiedDate), v))
	})
}

// LastModifiedDateGTE applies the GTE predicate on the "last_modified_date" field.
func LastModifiedDateGTE(v time.Time) predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLastModifiedDate), v))
	})
}

// LastModifiedDateLT applies the LT predicate on the "last_modified_date" field.
func LastModifiedDateLT(v time.Time) predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLastModifiedDate), v))
	})
}

// LastModifiedDateLTE applies the LTE predicate on the "last_modified_date" field.
func LastModifiedDateLTE(v time.Time) predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLastModifiedDate), v))
	})
}

// LastModifiedDateIsNil applies the IsNil predicate on the "last_modified_date" field.
func LastModifiedDateIsNil() predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLastModifiedDate)))
	})
}

// LastModifiedDateNotNil applies the NotNil predicate on the "last_modified_date" field.
func LastModifiedDateNotNil() predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLastModifiedDate)))
	})
}

// DataSourceIDEQ applies the EQ predicate on the "data_source_id" field.
func DataSourceIDEQ(v int) predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDataSourceID), v))
	})
}

// DataSourceIDNEQ applies the NEQ predicate on the "data_source_id" field.
func DataSourceIDNEQ(v int) predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDataSourceID), v))
	})
}

// DataSourceIDIn applies the In predicate on the "data_source_id" field.
func DataSourceIDIn(vs ...int) predicate.Party {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Party(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDataSourceID), v...))
	})
}

// DataSourceIDNotIn applies the NotIn predicate on the "data_source_id" field.
func DataSourceIDNotIn(vs ...int) predicate.Party {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Party(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDataSourceID), v...))
	})
}

// DataSourceIDGT applies the GT predicate on the "data_source_id" field.
func DataSourceIDGT(v int) predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDataSourceID), v))
	})
}

// DataSourceIDGTE applies the GTE predicate on the "data_source_id" field.
func DataSourceIDGTE(v int) predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDataSourceID), v))
	})
}

// DataSourceIDLT applies the LT predicate on the "data_source_id" field.
func DataSourceIDLT(v int) predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDataSourceID), v))
	})
}

// DataSourceIDLTE applies the LTE predicate on the "data_source_id" field.
func DataSourceIDLTE(v int) predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDataSourceID), v))
	})
}

// DataSourceIDIsNil applies the IsNil predicate on the "data_source_id" field.
func DataSourceIDIsNil() predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDataSourceID)))
	})
}

// DataSourceIDNotNil applies the NotNil predicate on the "data_source_id" field.
func DataSourceIDNotNil() predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDataSourceID)))
	})
}

// IsUnreadEQ applies the EQ predicate on the "is_unread" field.
func IsUnreadEQ(v IsUnread) predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsUnread), v))
	})
}

// IsUnreadNEQ applies the NEQ predicate on the "is_unread" field.
func IsUnreadNEQ(v IsUnread) predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsUnread), v))
	})
}

// IsUnreadIn applies the In predicate on the "is_unread" field.
func IsUnreadIn(vs ...IsUnread) predicate.Party {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Party(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIsUnread), v...))
	})
}

// IsUnreadNotIn applies the NotIn predicate on the "is_unread" field.
func IsUnreadNotIn(vs ...IsUnread) predicate.Party {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Party(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIsUnread), v...))
	})
}

// IsUnreadIsNil applies the IsNil predicate on the "is_unread" field.
func IsUnreadIsNil() predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldIsUnread)))
	})
}

// IsUnreadNotNil applies the NotNil predicate on the "is_unread" field.
func IsUnreadNotNil() predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldIsUnread)))
	})
}

// HasCreatedByUserLogin applies the HasEdge predicate on the "created_by_user_login" edge.
func HasCreatedByUserLogin() predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CreatedByUserLoginTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CreatedByUserLoginTable, CreatedByUserLoginColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCreatedByUserLoginWith applies the HasEdge predicate on the "created_by_user_login" edge with a given conditions (other predicates).
func HasCreatedByUserLoginWith(preds ...predicate.UserLogin) predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CreatedByUserLoginInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CreatedByUserLoginTable, CreatedByUserLoginColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLastModifiedByUserLogin applies the HasEdge predicate on the "last_modified_by_user_login" edge.
func HasLastModifiedByUserLogin() predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(LastModifiedByUserLoginTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, LastModifiedByUserLoginTable, LastModifiedByUserLoginColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLastModifiedByUserLoginWith applies the HasEdge predicate on the "last_modified_by_user_login" edge with a given conditions (other predicates).
func HasLastModifiedByUserLoginWith(preds ...predicate.UserLogin) predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(LastModifiedByUserLoginInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, LastModifiedByUserLoginTable, LastModifiedByUserLoginColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFixedAssets applies the HasEdge predicate on the "fixed_assets" edge.
func HasFixedAssets() predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(FixedAssetsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, FixedAssetsTable, FixedAssetsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFixedAssetsWith applies the HasEdge predicate on the "fixed_assets" edge with a given conditions (other predicates).
func HasFixedAssetsWith(preds ...predicate.FixedAsset) predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(FixedAssetsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, FixedAssetsTable, FixedAssetsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPartyRoles applies the HasEdge predicate on the "party_roles" edge.
func HasPartyRoles() predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PartyRolesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PartyRolesTable, PartyRolesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPartyRolesWith applies the HasEdge predicate on the "party_roles" edge with a given conditions (other predicates).
func HasPartyRolesWith(preds ...predicate.PartyRole) predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PartyRolesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PartyRolesTable, PartyRolesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPartyStatuses applies the HasEdge predicate on the "party_statuses" edge.
func HasPartyStatuses() predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PartyStatusesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PartyStatusesTable, PartyStatusesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPartyStatusesWith applies the HasEdge predicate on the "party_statuses" edge with a given conditions (other predicates).
func HasPartyStatusesWith(preds ...predicate.PartyStatus) predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PartyStatusesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PartyStatusesTable, PartyStatusesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPerson applies the HasEdge predicate on the "person" edge.
func HasPerson() predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PersonTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, PersonTable, PersonColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPersonWith applies the HasEdge predicate on the "person" edge with a given conditions (other predicates).
func HasPersonWith(preds ...predicate.Person) predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PersonInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, PersonTable, PersonColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUserLogins applies the HasEdge predicate on the "user_logins" edge.
func HasUserLogins() predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserLoginsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UserLoginsTable, UserLoginsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserLoginsWith applies the HasEdge predicate on the "user_logins" edge with a given conditions (other predicates).
func HasUserLoginsWith(preds ...predicate.UserLogin) predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserLoginsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UserLoginsTable, UserLoginsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasWorkEffortPartyAssignments applies the HasEdge predicate on the "work_effort_party_assignments" edge.
func HasWorkEffortPartyAssignments() predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(WorkEffortPartyAssignmentsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, WorkEffortPartyAssignmentsTable, WorkEffortPartyAssignmentsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWorkEffortPartyAssignmentsWith applies the HasEdge predicate on the "work_effort_party_assignments" edge with a given conditions (other predicates).
func HasWorkEffortPartyAssignmentsWith(preds ...predicate.WorkEffortPartyAssignment) predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(WorkEffortPartyAssignmentsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, WorkEffortPartyAssignmentsTable, WorkEffortPartyAssignmentsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Party) predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Party) predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Party) predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		p(s.Not())
	})
}
