// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/fixedasset"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/party"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/partycontactmech"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/partyrole"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/partystatus"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/partytype"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/person"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/statusitem"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/userlogin"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/workeffortpartyassignment"
)

// PartyCreate is the builder for creating a Party entity.
type PartyCreate struct {
	config
	mutation *PartyMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (pc *PartyCreate) SetCreateTime(t time.Time) *PartyCreate {
	pc.mutation.SetCreateTime(t)
	return pc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (pc *PartyCreate) SetNillableCreateTime(t *time.Time) *PartyCreate {
	if t != nil {
		pc.SetCreateTime(*t)
	}
	return pc
}

// SetUpdateTime sets the "update_time" field.
func (pc *PartyCreate) SetUpdateTime(t time.Time) *PartyCreate {
	pc.mutation.SetUpdateTime(t)
	return pc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (pc *PartyCreate) SetNillableUpdateTime(t *time.Time) *PartyCreate {
	if t != nil {
		pc.SetUpdateTime(*t)
	}
	return pc
}

// SetStringRef sets the "string_ref" field.
func (pc *PartyCreate) SetStringRef(s string) *PartyCreate {
	pc.mutation.SetStringRef(s)
	return pc
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (pc *PartyCreate) SetNillableStringRef(s *string) *PartyCreate {
	if s != nil {
		pc.SetStringRef(*s)
	}
	return pc
}

// SetExternalID sets the "external_id" field.
func (pc *PartyCreate) SetExternalID(i int) *PartyCreate {
	pc.mutation.SetExternalID(i)
	return pc
}

// SetNillableExternalID sets the "external_id" field if the given value is not nil.
func (pc *PartyCreate) SetNillableExternalID(i *int) *PartyCreate {
	if i != nil {
		pc.SetExternalID(*i)
	}
	return pc
}

// SetPreferredCurrencyUomID sets the "preferred_currency_uom_id" field.
func (pc *PartyCreate) SetPreferredCurrencyUomID(i int) *PartyCreate {
	pc.mutation.SetPreferredCurrencyUomID(i)
	return pc
}

// SetNillablePreferredCurrencyUomID sets the "preferred_currency_uom_id" field if the given value is not nil.
func (pc *PartyCreate) SetNillablePreferredCurrencyUomID(i *int) *PartyCreate {
	if i != nil {
		pc.SetPreferredCurrencyUomID(*i)
	}
	return pc
}

// SetDescription sets the "description" field.
func (pc *PartyCreate) SetDescription(s string) *PartyCreate {
	pc.mutation.SetDescription(s)
	return pc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pc *PartyCreate) SetNillableDescription(s *string) *PartyCreate {
	if s != nil {
		pc.SetDescription(*s)
	}
	return pc
}

// SetCreatedDate sets the "created_date" field.
func (pc *PartyCreate) SetCreatedDate(t time.Time) *PartyCreate {
	pc.mutation.SetCreatedDate(t)
	return pc
}

// SetNillableCreatedDate sets the "created_date" field if the given value is not nil.
func (pc *PartyCreate) SetNillableCreatedDate(t *time.Time) *PartyCreate {
	if t != nil {
		pc.SetCreatedDate(*t)
	}
	return pc
}

// SetLastModifiedDate sets the "last_modified_date" field.
func (pc *PartyCreate) SetLastModifiedDate(t time.Time) *PartyCreate {
	pc.mutation.SetLastModifiedDate(t)
	return pc
}

// SetNillableLastModifiedDate sets the "last_modified_date" field if the given value is not nil.
func (pc *PartyCreate) SetNillableLastModifiedDate(t *time.Time) *PartyCreate {
	if t != nil {
		pc.SetLastModifiedDate(*t)
	}
	return pc
}

// SetDataSourceID sets the "data_source_id" field.
func (pc *PartyCreate) SetDataSourceID(i int) *PartyCreate {
	pc.mutation.SetDataSourceID(i)
	return pc
}

// SetNillableDataSourceID sets the "data_source_id" field if the given value is not nil.
func (pc *PartyCreate) SetNillableDataSourceID(i *int) *PartyCreate {
	if i != nil {
		pc.SetDataSourceID(*i)
	}
	return pc
}

// SetIsUnread sets the "is_unread" field.
func (pc *PartyCreate) SetIsUnread(pu party.IsUnread) *PartyCreate {
	pc.mutation.SetIsUnread(pu)
	return pc
}

// SetNillableIsUnread sets the "is_unread" field if the given value is not nil.
func (pc *PartyCreate) SetNillableIsUnread(pu *party.IsUnread) *PartyCreate {
	if pu != nil {
		pc.SetIsUnread(*pu)
	}
	return pc
}

// SetPartyTypeID sets the "party_type" edge to the PartyType entity by ID.
func (pc *PartyCreate) SetPartyTypeID(id int) *PartyCreate {
	pc.mutation.SetPartyTypeID(id)
	return pc
}

// SetNillablePartyTypeID sets the "party_type" edge to the PartyType entity by ID if the given value is not nil.
func (pc *PartyCreate) SetNillablePartyTypeID(id *int) *PartyCreate {
	if id != nil {
		pc = pc.SetPartyTypeID(*id)
	}
	return pc
}

// SetPartyType sets the "party_type" edge to the PartyType entity.
func (pc *PartyCreate) SetPartyType(p *PartyType) *PartyCreate {
	return pc.SetPartyTypeID(p.ID)
}

// SetCreatedByUserLoginID sets the "created_by_user_login" edge to the UserLogin entity by ID.
func (pc *PartyCreate) SetCreatedByUserLoginID(id int) *PartyCreate {
	pc.mutation.SetCreatedByUserLoginID(id)
	return pc
}

// SetNillableCreatedByUserLoginID sets the "created_by_user_login" edge to the UserLogin entity by ID if the given value is not nil.
func (pc *PartyCreate) SetNillableCreatedByUserLoginID(id *int) *PartyCreate {
	if id != nil {
		pc = pc.SetCreatedByUserLoginID(*id)
	}
	return pc
}

// SetCreatedByUserLogin sets the "created_by_user_login" edge to the UserLogin entity.
func (pc *PartyCreate) SetCreatedByUserLogin(u *UserLogin) *PartyCreate {
	return pc.SetCreatedByUserLoginID(u.ID)
}

// SetLastModifiedByUserLoginID sets the "last_modified_by_user_login" edge to the UserLogin entity by ID.
func (pc *PartyCreate) SetLastModifiedByUserLoginID(id int) *PartyCreate {
	pc.mutation.SetLastModifiedByUserLoginID(id)
	return pc
}

// SetNillableLastModifiedByUserLoginID sets the "last_modified_by_user_login" edge to the UserLogin entity by ID if the given value is not nil.
func (pc *PartyCreate) SetNillableLastModifiedByUserLoginID(id *int) *PartyCreate {
	if id != nil {
		pc = pc.SetLastModifiedByUserLoginID(*id)
	}
	return pc
}

// SetLastModifiedByUserLogin sets the "last_modified_by_user_login" edge to the UserLogin entity.
func (pc *PartyCreate) SetLastModifiedByUserLogin(u *UserLogin) *PartyCreate {
	return pc.SetLastModifiedByUserLoginID(u.ID)
}

// SetStatusItemID sets the "status_item" edge to the StatusItem entity by ID.
func (pc *PartyCreate) SetStatusItemID(id int) *PartyCreate {
	pc.mutation.SetStatusItemID(id)
	return pc
}

// SetNillableStatusItemID sets the "status_item" edge to the StatusItem entity by ID if the given value is not nil.
func (pc *PartyCreate) SetNillableStatusItemID(id *int) *PartyCreate {
	if id != nil {
		pc = pc.SetStatusItemID(*id)
	}
	return pc
}

// SetStatusItem sets the "status_item" edge to the StatusItem entity.
func (pc *PartyCreate) SetStatusItem(s *StatusItem) *PartyCreate {
	return pc.SetStatusItemID(s.ID)
}

// AddFixedAssetIDs adds the "fixed_assets" edge to the FixedAsset entity by IDs.
func (pc *PartyCreate) AddFixedAssetIDs(ids ...int) *PartyCreate {
	pc.mutation.AddFixedAssetIDs(ids...)
	return pc
}

// AddFixedAssets adds the "fixed_assets" edges to the FixedAsset entity.
func (pc *PartyCreate) AddFixedAssets(f ...*FixedAsset) *PartyCreate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return pc.AddFixedAssetIDs(ids...)
}

// AddPartyContactMechIDs adds the "party_contact_meches" edge to the PartyContactMech entity by IDs.
func (pc *PartyCreate) AddPartyContactMechIDs(ids ...int) *PartyCreate {
	pc.mutation.AddPartyContactMechIDs(ids...)
	return pc
}

// AddPartyContactMeches adds the "party_contact_meches" edges to the PartyContactMech entity.
func (pc *PartyCreate) AddPartyContactMeches(p ...*PartyContactMech) *PartyCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pc.AddPartyContactMechIDs(ids...)
}

// AddPartyRoleIDs adds the "party_roles" edge to the PartyRole entity by IDs.
func (pc *PartyCreate) AddPartyRoleIDs(ids ...int) *PartyCreate {
	pc.mutation.AddPartyRoleIDs(ids...)
	return pc
}

// AddPartyRoles adds the "party_roles" edges to the PartyRole entity.
func (pc *PartyCreate) AddPartyRoles(p ...*PartyRole) *PartyCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pc.AddPartyRoleIDs(ids...)
}

// AddPartyStatusIDs adds the "party_statuses" edge to the PartyStatus entity by IDs.
func (pc *PartyCreate) AddPartyStatusIDs(ids ...int) *PartyCreate {
	pc.mutation.AddPartyStatusIDs(ids...)
	return pc
}

// AddPartyStatuses adds the "party_statuses" edges to the PartyStatus entity.
func (pc *PartyCreate) AddPartyStatuses(p ...*PartyStatus) *PartyCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pc.AddPartyStatusIDs(ids...)
}

// SetPersonID sets the "person" edge to the Person entity by ID.
func (pc *PartyCreate) SetPersonID(id int) *PartyCreate {
	pc.mutation.SetPersonID(id)
	return pc
}

// SetNillablePersonID sets the "person" edge to the Person entity by ID if the given value is not nil.
func (pc *PartyCreate) SetNillablePersonID(id *int) *PartyCreate {
	if id != nil {
		pc = pc.SetPersonID(*id)
	}
	return pc
}

// SetPerson sets the "person" edge to the Person entity.
func (pc *PartyCreate) SetPerson(p *Person) *PartyCreate {
	return pc.SetPersonID(p.ID)
}

// AddUserLoginIDs adds the "user_logins" edge to the UserLogin entity by IDs.
func (pc *PartyCreate) AddUserLoginIDs(ids ...int) *PartyCreate {
	pc.mutation.AddUserLoginIDs(ids...)
	return pc
}

// AddUserLogins adds the "user_logins" edges to the UserLogin entity.
func (pc *PartyCreate) AddUserLogins(u ...*UserLogin) *PartyCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return pc.AddUserLoginIDs(ids...)
}

// AddWorkEffortPartyAssignmentIDs adds the "work_effort_party_assignments" edge to the WorkEffortPartyAssignment entity by IDs.
func (pc *PartyCreate) AddWorkEffortPartyAssignmentIDs(ids ...int) *PartyCreate {
	pc.mutation.AddWorkEffortPartyAssignmentIDs(ids...)
	return pc
}

// AddWorkEffortPartyAssignments adds the "work_effort_party_assignments" edges to the WorkEffortPartyAssignment entity.
func (pc *PartyCreate) AddWorkEffortPartyAssignments(w ...*WorkEffortPartyAssignment) *PartyCreate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return pc.AddWorkEffortPartyAssignmentIDs(ids...)
}

// Mutation returns the PartyMutation object of the builder.
func (pc *PartyCreate) Mutation() *PartyMutation {
	return pc.mutation
}

// Save creates the Party in the database.
func (pc *PartyCreate) Save(ctx context.Context) (*Party, error) {
	var (
		err  error
		node *Party
	)
	pc.defaults()
	if len(pc.hooks) == 0 {
		if err = pc.check(); err != nil {
			return nil, err
		}
		node, err = pc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PartyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pc.check(); err != nil {
				return nil, err
			}
			pc.mutation = mutation
			if node, err = pc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(pc.hooks) - 1; i >= 0; i-- {
			mut = pc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PartyCreate) SaveX(ctx context.Context) *Party {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (pc *PartyCreate) defaults() {
	if _, ok := pc.mutation.CreateTime(); !ok {
		v := party.DefaultCreateTime()
		pc.mutation.SetCreateTime(v)
	}
	if _, ok := pc.mutation.UpdateTime(); !ok {
		v := party.DefaultUpdateTime()
		pc.mutation.SetUpdateTime(v)
	}
	if _, ok := pc.mutation.CreatedDate(); !ok {
		v := party.DefaultCreatedDate()
		pc.mutation.SetCreatedDate(v)
	}
	if _, ok := pc.mutation.LastModifiedDate(); !ok {
		v := party.DefaultLastModifiedDate()
		pc.mutation.SetLastModifiedDate(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PartyCreate) check() error {
	if _, ok := pc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New("ent: missing required field \"create_time\"")}
	}
	if _, ok := pc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New("ent: missing required field \"update_time\"")}
	}
	if v, ok := pc.mutation.IsUnread(); ok {
		if err := party.IsUnreadValidator(v); err != nil {
			return &ValidationError{Name: "is_unread", err: fmt.Errorf("ent: validator failed for field \"is_unread\": %w", err)}
		}
	}
	return nil
}

func (pc *PartyCreate) sqlSave(ctx context.Context) (*Party, error) {
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (pc *PartyCreate) createSpec() (*Party, *sqlgraph.CreateSpec) {
	var (
		_node = &Party{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: party.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: party.FieldID,
			},
		}
	)
	if value, ok := pc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: party.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := pc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: party.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := pc.mutation.StringRef(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: party.FieldStringRef,
		})
		_node.StringRef = value
	}
	if value, ok := pc.mutation.ExternalID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: party.FieldExternalID,
		})
		_node.ExternalID = value
	}
	if value, ok := pc.mutation.PreferredCurrencyUomID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: party.FieldPreferredCurrencyUomID,
		})
		_node.PreferredCurrencyUomID = value
	}
	if value, ok := pc.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: party.FieldDescription,
		})
		_node.Description = value
	}
	if value, ok := pc.mutation.CreatedDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: party.FieldCreatedDate,
		})
		_node.CreatedDate = value
	}
	if value, ok := pc.mutation.LastModifiedDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: party.FieldLastModifiedDate,
		})
		_node.LastModifiedDate = value
	}
	if value, ok := pc.mutation.DataSourceID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: party.FieldDataSourceID,
		})
		_node.DataSourceID = value
	}
	if value, ok := pc.mutation.IsUnread(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: party.FieldIsUnread,
		})
		_node.IsUnread = value
	}
	if nodes := pc.mutation.PartyTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   party.PartyTypeTable,
			Columns: []string{party.PartyTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partytype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.party_type_parties = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.CreatedByUserLoginIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   party.CreatedByUserLoginTable,
			Columns: []string{party.CreatedByUserLoginColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: userlogin.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_login_created_by_parties = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.LastModifiedByUserLoginIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   party.LastModifiedByUserLoginTable,
			Columns: []string{party.LastModifiedByUserLoginColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: userlogin.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_login_last_modified_by_parties = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.StatusItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   party.StatusItemTable,
			Columns: []string{party.StatusItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.status_item_parties = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.FixedAssetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   party.FixedAssetsTable,
			Columns: []string{party.FixedAssetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: fixedasset.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.PartyContactMechesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   party.PartyContactMechesTable,
			Columns: []string{party.PartyContactMechesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partycontactmech.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.PartyRolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   party.PartyRolesTable,
			Columns: []string{party.PartyRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partyrole.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.PartyStatusesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   party.PartyStatusesTable,
			Columns: []string{party.PartyStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partystatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.PersonIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   party.PersonTable,
			Columns: []string{party.PersonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: person.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.UserLoginsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   party.UserLoginsTable,
			Columns: []string{party.UserLoginsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: userlogin.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.WorkEffortPartyAssignmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   party.WorkEffortPartyAssignmentsTable,
			Columns: []string{party.WorkEffortPartyAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffortpartyassignment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PartyCreateBulk is the builder for creating many Party entities in bulk.
type PartyCreateBulk struct {
	config
	builders []*PartyCreate
}

// Save creates the Party entities in the database.
func (pcb *PartyCreateBulk) Save(ctx context.Context) ([]*Party, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Party, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PartyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PartyCreateBulk) SaveX(ctx context.Context) []*Party {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
