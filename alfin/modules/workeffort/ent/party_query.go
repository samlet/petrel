// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/fixedasset"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/party"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/partycontactmech"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/partyrole"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/partystatus"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/partytype"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/person"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/predicate"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/statusitem"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/userlogin"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/workeffortpartyassignment"
)

// PartyQuery is the builder for querying Party entities.
type PartyQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.Party
	// eager-loading edges.
	withPartyType                  *PartyTypeQuery
	withCreatedByUserLogin         *UserLoginQuery
	withLastModifiedByUserLogin    *UserLoginQuery
	withStatusItem                 *StatusItemQuery
	withFixedAssets                *FixedAssetQuery
	withPartyContactMeches         *PartyContactMechQuery
	withPartyRoles                 *PartyRoleQuery
	withPartyStatuses              *PartyStatusQuery
	withPerson                     *PersonQuery
	withUserLogins                 *UserLoginQuery
	withWorkEffortPartyAssignments *WorkEffortPartyAssignmentQuery
	withFKs                        bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the PartyQuery builder.
func (pq *PartyQuery) Where(ps ...predicate.Party) *PartyQuery {
	pq.predicates = append(pq.predicates, ps...)
	return pq
}

// Limit adds a limit step to the query.
func (pq *PartyQuery) Limit(limit int) *PartyQuery {
	pq.limit = &limit
	return pq
}

// Offset adds an offset step to the query.
func (pq *PartyQuery) Offset(offset int) *PartyQuery {
	pq.offset = &offset
	return pq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (pq *PartyQuery) Unique(unique bool) *PartyQuery {
	pq.unique = &unique
	return pq
}

// Order adds an order step to the query.
func (pq *PartyQuery) Order(o ...OrderFunc) *PartyQuery {
	pq.order = append(pq.order, o...)
	return pq
}

// QueryPartyType chains the current query on the "party_type" edge.
func (pq *PartyQuery) QueryPartyType() *PartyTypeQuery {
	query := &PartyTypeQuery{config: pq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(party.Table, party.FieldID, selector),
			sqlgraph.To(partytype.Table, partytype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, party.PartyTypeTable, party.PartyTypeColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCreatedByUserLogin chains the current query on the "created_by_user_login" edge.
func (pq *PartyQuery) QueryCreatedByUserLogin() *UserLoginQuery {
	query := &UserLoginQuery{config: pq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(party.Table, party.FieldID, selector),
			sqlgraph.To(userlogin.Table, userlogin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, party.CreatedByUserLoginTable, party.CreatedByUserLoginColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryLastModifiedByUserLogin chains the current query on the "last_modified_by_user_login" edge.
func (pq *PartyQuery) QueryLastModifiedByUserLogin() *UserLoginQuery {
	query := &UserLoginQuery{config: pq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(party.Table, party.FieldID, selector),
			sqlgraph.To(userlogin.Table, userlogin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, party.LastModifiedByUserLoginTable, party.LastModifiedByUserLoginColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryStatusItem chains the current query on the "status_item" edge.
func (pq *PartyQuery) QueryStatusItem() *StatusItemQuery {
	query := &StatusItemQuery{config: pq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(party.Table, party.FieldID, selector),
			sqlgraph.To(statusitem.Table, statusitem.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, party.StatusItemTable, party.StatusItemColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFixedAssets chains the current query on the "fixed_assets" edge.
func (pq *PartyQuery) QueryFixedAssets() *FixedAssetQuery {
	query := &FixedAssetQuery{config: pq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(party.Table, party.FieldID, selector),
			sqlgraph.To(fixedasset.Table, fixedasset.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, party.FixedAssetsTable, party.FixedAssetsColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPartyContactMeches chains the current query on the "party_contact_meches" edge.
func (pq *PartyQuery) QueryPartyContactMeches() *PartyContactMechQuery {
	query := &PartyContactMechQuery{config: pq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(party.Table, party.FieldID, selector),
			sqlgraph.To(partycontactmech.Table, partycontactmech.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, party.PartyContactMechesTable, party.PartyContactMechesColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPartyRoles chains the current query on the "party_roles" edge.
func (pq *PartyQuery) QueryPartyRoles() *PartyRoleQuery {
	query := &PartyRoleQuery{config: pq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(party.Table, party.FieldID, selector),
			sqlgraph.To(partyrole.Table, partyrole.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, party.PartyRolesTable, party.PartyRolesColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPartyStatuses chains the current query on the "party_statuses" edge.
func (pq *PartyQuery) QueryPartyStatuses() *PartyStatusQuery {
	query := &PartyStatusQuery{config: pq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(party.Table, party.FieldID, selector),
			sqlgraph.To(partystatus.Table, partystatus.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, party.PartyStatusesTable, party.PartyStatusesColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPerson chains the current query on the "person" edge.
func (pq *PartyQuery) QueryPerson() *PersonQuery {
	query := &PersonQuery{config: pq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(party.Table, party.FieldID, selector),
			sqlgraph.To(person.Table, person.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, party.PersonTable, party.PersonColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUserLogins chains the current query on the "user_logins" edge.
func (pq *PartyQuery) QueryUserLogins() *UserLoginQuery {
	query := &UserLoginQuery{config: pq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(party.Table, party.FieldID, selector),
			sqlgraph.To(userlogin.Table, userlogin.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, party.UserLoginsTable, party.UserLoginsColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryWorkEffortPartyAssignments chains the current query on the "work_effort_party_assignments" edge.
func (pq *PartyQuery) QueryWorkEffortPartyAssignments() *WorkEffortPartyAssignmentQuery {
	query := &WorkEffortPartyAssignmentQuery{config: pq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(party.Table, party.FieldID, selector),
			sqlgraph.To(workeffortpartyassignment.Table, workeffortpartyassignment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, party.WorkEffortPartyAssignmentsTable, party.WorkEffortPartyAssignmentsColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Party entity from the query.
// Returns a *NotFoundError when no Party was found.
func (pq *PartyQuery) First(ctx context.Context) (*Party, error) {
	nodes, err := pq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{party.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (pq *PartyQuery) FirstX(ctx context.Context) *Party {
	node, err := pq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Party ID from the query.
// Returns a *NotFoundError when no Party ID was found.
func (pq *PartyQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = pq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{party.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (pq *PartyQuery) FirstIDX(ctx context.Context) int {
	id, err := pq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Party entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one Party entity is not found.
// Returns a *NotFoundError when no Party entities are found.
func (pq *PartyQuery) Only(ctx context.Context) (*Party, error) {
	nodes, err := pq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{party.Label}
	default:
		return nil, &NotSingularError{party.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (pq *PartyQuery) OnlyX(ctx context.Context) *Party {
	node, err := pq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Party ID in the query.
// Returns a *NotSingularError when exactly one Party ID is not found.
// Returns a *NotFoundError when no entities are found.
func (pq *PartyQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = pq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{party.Label}
	default:
		err = &NotSingularError{party.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (pq *PartyQuery) OnlyIDX(ctx context.Context) int {
	id, err := pq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Parties.
func (pq *PartyQuery) All(ctx context.Context) ([]*Party, error) {
	if err := pq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return pq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (pq *PartyQuery) AllX(ctx context.Context) []*Party {
	nodes, err := pq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Party IDs.
func (pq *PartyQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := pq.Select(party.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (pq *PartyQuery) IDsX(ctx context.Context) []int {
	ids, err := pq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (pq *PartyQuery) Count(ctx context.Context) (int, error) {
	if err := pq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return pq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (pq *PartyQuery) CountX(ctx context.Context) int {
	count, err := pq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (pq *PartyQuery) Exist(ctx context.Context) (bool, error) {
	if err := pq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return pq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (pq *PartyQuery) ExistX(ctx context.Context) bool {
	exist, err := pq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the PartyQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (pq *PartyQuery) Clone() *PartyQuery {
	if pq == nil {
		return nil
	}
	return &PartyQuery{
		config:                         pq.config,
		limit:                          pq.limit,
		offset:                         pq.offset,
		order:                          append([]OrderFunc{}, pq.order...),
		predicates:                     append([]predicate.Party{}, pq.predicates...),
		withPartyType:                  pq.withPartyType.Clone(),
		withCreatedByUserLogin:         pq.withCreatedByUserLogin.Clone(),
		withLastModifiedByUserLogin:    pq.withLastModifiedByUserLogin.Clone(),
		withStatusItem:                 pq.withStatusItem.Clone(),
		withFixedAssets:                pq.withFixedAssets.Clone(),
		withPartyContactMeches:         pq.withPartyContactMeches.Clone(),
		withPartyRoles:                 pq.withPartyRoles.Clone(),
		withPartyStatuses:              pq.withPartyStatuses.Clone(),
		withPerson:                     pq.withPerson.Clone(),
		withUserLogins:                 pq.withUserLogins.Clone(),
		withWorkEffortPartyAssignments: pq.withWorkEffortPartyAssignments.Clone(),
		// clone intermediate query.
		sql:  pq.sql.Clone(),
		path: pq.path,
	}
}

// WithPartyType tells the query-builder to eager-load the nodes that are connected to
// the "party_type" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PartyQuery) WithPartyType(opts ...func(*PartyTypeQuery)) *PartyQuery {
	query := &PartyTypeQuery{config: pq.config}
	for _, opt := range opts {
		opt(query)
	}
	pq.withPartyType = query
	return pq
}

// WithCreatedByUserLogin tells the query-builder to eager-load the nodes that are connected to
// the "created_by_user_login" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PartyQuery) WithCreatedByUserLogin(opts ...func(*UserLoginQuery)) *PartyQuery {
	query := &UserLoginQuery{config: pq.config}
	for _, opt := range opts {
		opt(query)
	}
	pq.withCreatedByUserLogin = query
	return pq
}

// WithLastModifiedByUserLogin tells the query-builder to eager-load the nodes that are connected to
// the "last_modified_by_user_login" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PartyQuery) WithLastModifiedByUserLogin(opts ...func(*UserLoginQuery)) *PartyQuery {
	query := &UserLoginQuery{config: pq.config}
	for _, opt := range opts {
		opt(query)
	}
	pq.withLastModifiedByUserLogin = query
	return pq
}

// WithStatusItem tells the query-builder to eager-load the nodes that are connected to
// the "status_item" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PartyQuery) WithStatusItem(opts ...func(*StatusItemQuery)) *PartyQuery {
	query := &StatusItemQuery{config: pq.config}
	for _, opt := range opts {
		opt(query)
	}
	pq.withStatusItem = query
	return pq
}

// WithFixedAssets tells the query-builder to eager-load the nodes that are connected to
// the "fixed_assets" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PartyQuery) WithFixedAssets(opts ...func(*FixedAssetQuery)) *PartyQuery {
	query := &FixedAssetQuery{config: pq.config}
	for _, opt := range opts {
		opt(query)
	}
	pq.withFixedAssets = query
	return pq
}

// WithPartyContactMeches tells the query-builder to eager-load the nodes that are connected to
// the "party_contact_meches" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PartyQuery) WithPartyContactMeches(opts ...func(*PartyContactMechQuery)) *PartyQuery {
	query := &PartyContactMechQuery{config: pq.config}
	for _, opt := range opts {
		opt(query)
	}
	pq.withPartyContactMeches = query
	return pq
}

// WithPartyRoles tells the query-builder to eager-load the nodes that are connected to
// the "party_roles" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PartyQuery) WithPartyRoles(opts ...func(*PartyRoleQuery)) *PartyQuery {
	query := &PartyRoleQuery{config: pq.config}
	for _, opt := range opts {
		opt(query)
	}
	pq.withPartyRoles = query
	return pq
}

// WithPartyStatuses tells the query-builder to eager-load the nodes that are connected to
// the "party_statuses" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PartyQuery) WithPartyStatuses(opts ...func(*PartyStatusQuery)) *PartyQuery {
	query := &PartyStatusQuery{config: pq.config}
	for _, opt := range opts {
		opt(query)
	}
	pq.withPartyStatuses = query
	return pq
}

// WithPerson tells the query-builder to eager-load the nodes that are connected to
// the "person" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PartyQuery) WithPerson(opts ...func(*PersonQuery)) *PartyQuery {
	query := &PersonQuery{config: pq.config}
	for _, opt := range opts {
		opt(query)
	}
	pq.withPerson = query
	return pq
}

// WithUserLogins tells the query-builder to eager-load the nodes that are connected to
// the "user_logins" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PartyQuery) WithUserLogins(opts ...func(*UserLoginQuery)) *PartyQuery {
	query := &UserLoginQuery{config: pq.config}
	for _, opt := range opts {
		opt(query)
	}
	pq.withUserLogins = query
	return pq
}

// WithWorkEffortPartyAssignments tells the query-builder to eager-load the nodes that are connected to
// the "work_effort_party_assignments" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PartyQuery) WithWorkEffortPartyAssignments(opts ...func(*WorkEffortPartyAssignmentQuery)) *PartyQuery {
	query := &WorkEffortPartyAssignmentQuery{config: pq.config}
	for _, opt := range opts {
		opt(query)
	}
	pq.withWorkEffortPartyAssignments = query
	return pq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Party.Query().
//		GroupBy(party.FieldCreateTime).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (pq *PartyQuery) GroupBy(field string, fields ...string) *PartyGroupBy {
	group := &PartyGroupBy{config: pq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return pq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//	}
//
//	client.Party.Query().
//		Select(party.FieldCreateTime).
//		Scan(ctx, &v)
//
func (pq *PartyQuery) Select(field string, fields ...string) *PartySelect {
	pq.fields = append([]string{field}, fields...)
	return &PartySelect{PartyQuery: pq}
}

func (pq *PartyQuery) prepareQuery(ctx context.Context) error {
	for _, f := range pq.fields {
		if !party.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if pq.path != nil {
		prev, err := pq.path(ctx)
		if err != nil {
			return err
		}
		pq.sql = prev
	}
	return nil
}

func (pq *PartyQuery) sqlAll(ctx context.Context) ([]*Party, error) {
	var (
		nodes       = []*Party{}
		withFKs     = pq.withFKs
		_spec       = pq.querySpec()
		loadedTypes = [11]bool{
			pq.withPartyType != nil,
			pq.withCreatedByUserLogin != nil,
			pq.withLastModifiedByUserLogin != nil,
			pq.withStatusItem != nil,
			pq.withFixedAssets != nil,
			pq.withPartyContactMeches != nil,
			pq.withPartyRoles != nil,
			pq.withPartyStatuses != nil,
			pq.withPerson != nil,
			pq.withUserLogins != nil,
			pq.withWorkEffortPartyAssignments != nil,
		}
	)
	if pq.withPartyType != nil || pq.withCreatedByUserLogin != nil || pq.withLastModifiedByUserLogin != nil || pq.withStatusItem != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, party.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &Party{config: pq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, pq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := pq.withPartyType; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*Party)
		for i := range nodes {
			if nodes[i].party_type_parties == nil {
				continue
			}
			fk := *nodes[i].party_type_parties
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(partytype.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "party_type_parties" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.PartyType = n
			}
		}
	}

	if query := pq.withCreatedByUserLogin; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*Party)
		for i := range nodes {
			if nodes[i].user_login_created_by_parties == nil {
				continue
			}
			fk := *nodes[i].user_login_created_by_parties
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(userlogin.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "user_login_created_by_parties" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.CreatedByUserLogin = n
			}
		}
	}

	if query := pq.withLastModifiedByUserLogin; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*Party)
		for i := range nodes {
			if nodes[i].user_login_last_modified_by_parties == nil {
				continue
			}
			fk := *nodes[i].user_login_last_modified_by_parties
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(userlogin.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "user_login_last_modified_by_parties" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.LastModifiedByUserLogin = n
			}
		}
	}

	if query := pq.withStatusItem; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*Party)
		for i := range nodes {
			if nodes[i].status_item_parties == nil {
				continue
			}
			fk := *nodes[i].status_item_parties
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(statusitem.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "status_item_parties" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.StatusItem = n
			}
		}
	}

	if query := pq.withFixedAssets; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*Party)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.FixedAssets = []*FixedAsset{}
		}
		query.withFKs = true
		query.Where(predicate.FixedAsset(func(s *sql.Selector) {
			s.Where(sql.InValues(party.FixedAssetsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.party_fixed_assets
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "party_fixed_assets" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "party_fixed_assets" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.FixedAssets = append(node.Edges.FixedAssets, n)
		}
	}

	if query := pq.withPartyContactMeches; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*Party)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.PartyContactMeches = []*PartyContactMech{}
		}
		query.withFKs = true
		query.Where(predicate.PartyContactMech(func(s *sql.Selector) {
			s.Where(sql.InValues(party.PartyContactMechesColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.party_party_contact_meches
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "party_party_contact_meches" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "party_party_contact_meches" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.PartyContactMeches = append(node.Edges.PartyContactMeches, n)
		}
	}

	if query := pq.withPartyRoles; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*Party)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.PartyRoles = []*PartyRole{}
		}
		query.withFKs = true
		query.Where(predicate.PartyRole(func(s *sql.Selector) {
			s.Where(sql.InValues(party.PartyRolesColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.party_party_roles
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "party_party_roles" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "party_party_roles" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.PartyRoles = append(node.Edges.PartyRoles, n)
		}
	}

	if query := pq.withPartyStatuses; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*Party)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.PartyStatuses = []*PartyStatus{}
		}
		query.withFKs = true
		query.Where(predicate.PartyStatus(func(s *sql.Selector) {
			s.Where(sql.InValues(party.PartyStatusesColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.party_party_statuses
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "party_party_statuses" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "party_party_statuses" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.PartyStatuses = append(node.Edges.PartyStatuses, n)
		}
	}

	if query := pq.withPerson; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*Party)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
		}
		query.withFKs = true
		query.Where(predicate.Person(func(s *sql.Selector) {
			s.Where(sql.InValues(party.PersonColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.party_person
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "party_person" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "party_person" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.Person = n
		}
	}

	if query := pq.withUserLogins; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*Party)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.UserLogins = []*UserLogin{}
		}
		query.withFKs = true
		query.Where(predicate.UserLogin(func(s *sql.Selector) {
			s.Where(sql.InValues(party.UserLoginsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.party_user_logins
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "party_user_logins" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "party_user_logins" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.UserLogins = append(node.Edges.UserLogins, n)
		}
	}

	if query := pq.withWorkEffortPartyAssignments; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*Party)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.WorkEffortPartyAssignments = []*WorkEffortPartyAssignment{}
		}
		query.withFKs = true
		query.Where(predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
			s.Where(sql.InValues(party.WorkEffortPartyAssignmentsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.party_work_effort_party_assignments
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "party_work_effort_party_assignments" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "party_work_effort_party_assignments" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.WorkEffortPartyAssignments = append(node.Edges.WorkEffortPartyAssignments, n)
		}
	}

	return nodes, nil
}

func (pq *PartyQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := pq.querySpec()
	return sqlgraph.CountNodes(ctx, pq.driver, _spec)
}

func (pq *PartyQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := pq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (pq *PartyQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   party.Table,
			Columns: party.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: party.FieldID,
			},
		},
		From:   pq.sql,
		Unique: true,
	}
	if unique := pq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := pq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, party.FieldID)
		for i := range fields {
			if fields[i] != party.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := pq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := pq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := pq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := pq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (pq *PartyQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(pq.driver.Dialect())
	t1 := builder.Table(party.Table)
	columns := pq.fields
	if len(columns) == 0 {
		columns = party.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if pq.sql != nil {
		selector = pq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	for _, p := range pq.predicates {
		p(selector)
	}
	for _, p := range pq.order {
		p(selector)
	}
	if offset := pq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := pq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// PartyGroupBy is the group-by builder for Party entities.
type PartyGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (pgb *PartyGroupBy) Aggregate(fns ...AggregateFunc) *PartyGroupBy {
	pgb.fns = append(pgb.fns, fns...)
	return pgb
}

// Scan applies the group-by query and scans the result into the given value.
func (pgb *PartyGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := pgb.path(ctx)
	if err != nil {
		return err
	}
	pgb.sql = query
	return pgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (pgb *PartyGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := pgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (pgb *PartyGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(pgb.fields) > 1 {
		return nil, errors.New("ent: PartyGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := pgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (pgb *PartyGroupBy) StringsX(ctx context.Context) []string {
	v, err := pgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (pgb *PartyGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = pgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{party.Label}
	default:
		err = fmt.Errorf("ent: PartyGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (pgb *PartyGroupBy) StringX(ctx context.Context) string {
	v, err := pgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (pgb *PartyGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(pgb.fields) > 1 {
		return nil, errors.New("ent: PartyGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := pgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (pgb *PartyGroupBy) IntsX(ctx context.Context) []int {
	v, err := pgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (pgb *PartyGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = pgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{party.Label}
	default:
		err = fmt.Errorf("ent: PartyGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (pgb *PartyGroupBy) IntX(ctx context.Context) int {
	v, err := pgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (pgb *PartyGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(pgb.fields) > 1 {
		return nil, errors.New("ent: PartyGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := pgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (pgb *PartyGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := pgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (pgb *PartyGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = pgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{party.Label}
	default:
		err = fmt.Errorf("ent: PartyGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (pgb *PartyGroupBy) Float64X(ctx context.Context) float64 {
	v, err := pgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (pgb *PartyGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(pgb.fields) > 1 {
		return nil, errors.New("ent: PartyGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := pgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (pgb *PartyGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := pgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (pgb *PartyGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = pgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{party.Label}
	default:
		err = fmt.Errorf("ent: PartyGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (pgb *PartyGroupBy) BoolX(ctx context.Context) bool {
	v, err := pgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (pgb *PartyGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range pgb.fields {
		if !party.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := pgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (pgb *PartyGroupBy) sqlQuery() *sql.Selector {
	selector := pgb.sql.Select()
	aggregation := make([]string, 0, len(pgb.fns))
	for _, fn := range pgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(pgb.fields)+len(pgb.fns))
		for _, f := range pgb.fields {
			columns = append(columns, selector.C(f))
		}
		for _, c := range aggregation {
			columns = append(columns, c)
		}
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(pgb.fields...)...)
}

// PartySelect is the builder for selecting fields of Party entities.
type PartySelect struct {
	*PartyQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (ps *PartySelect) Scan(ctx context.Context, v interface{}) error {
	if err := ps.prepareQuery(ctx); err != nil {
		return err
	}
	ps.sql = ps.PartyQuery.sqlQuery(ctx)
	return ps.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (ps *PartySelect) ScanX(ctx context.Context, v interface{}) {
	if err := ps.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (ps *PartySelect) Strings(ctx context.Context) ([]string, error) {
	if len(ps.fields) > 1 {
		return nil, errors.New("ent: PartySelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := ps.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (ps *PartySelect) StringsX(ctx context.Context) []string {
	v, err := ps.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (ps *PartySelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = ps.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{party.Label}
	default:
		err = fmt.Errorf("ent: PartySelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (ps *PartySelect) StringX(ctx context.Context) string {
	v, err := ps.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (ps *PartySelect) Ints(ctx context.Context) ([]int, error) {
	if len(ps.fields) > 1 {
		return nil, errors.New("ent: PartySelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := ps.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (ps *PartySelect) IntsX(ctx context.Context) []int {
	v, err := ps.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (ps *PartySelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = ps.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{party.Label}
	default:
		err = fmt.Errorf("ent: PartySelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (ps *PartySelect) IntX(ctx context.Context) int {
	v, err := ps.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (ps *PartySelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(ps.fields) > 1 {
		return nil, errors.New("ent: PartySelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := ps.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (ps *PartySelect) Float64sX(ctx context.Context) []float64 {
	v, err := ps.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (ps *PartySelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = ps.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{party.Label}
	default:
		err = fmt.Errorf("ent: PartySelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (ps *PartySelect) Float64X(ctx context.Context) float64 {
	v, err := ps.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (ps *PartySelect) Bools(ctx context.Context) ([]bool, error) {
	if len(ps.fields) > 1 {
		return nil, errors.New("ent: PartySelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := ps.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (ps *PartySelect) BoolsX(ctx context.Context) []bool {
	v, err := ps.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (ps *PartySelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = ps.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{party.Label}
	default:
		err = fmt.Errorf("ent: PartySelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (ps *PartySelect) BoolX(ctx context.Context) bool {
	v, err := ps.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ps *PartySelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := ps.sql.Query()
	if err := ps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
