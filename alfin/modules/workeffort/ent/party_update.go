// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/fixedasset"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/party"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/partycontactmech"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/partyrole"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/partystatus"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/partytype"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/person"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/predicate"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/statusitem"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/userlogin"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/workeffortpartyassignment"
)

// PartyUpdate is the builder for updating Party entities.
type PartyUpdate struct {
	config
	hooks    []Hook
	mutation *PartyMutation
}

// Where adds a new predicate for the PartyUpdate builder.
func (pu *PartyUpdate) Where(ps ...predicate.Party) *PartyUpdate {
	pu.mutation.predicates = append(pu.mutation.predicates, ps...)
	return pu
}

// SetStringRef sets the "string_ref" field.
func (pu *PartyUpdate) SetStringRef(s string) *PartyUpdate {
	pu.mutation.SetStringRef(s)
	return pu
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (pu *PartyUpdate) SetNillableStringRef(s *string) *PartyUpdate {
	if s != nil {
		pu.SetStringRef(*s)
	}
	return pu
}

// ClearStringRef clears the value of the "string_ref" field.
func (pu *PartyUpdate) ClearStringRef() *PartyUpdate {
	pu.mutation.ClearStringRef()
	return pu
}

// SetExternalID sets the "external_id" field.
func (pu *PartyUpdate) SetExternalID(i int) *PartyUpdate {
	pu.mutation.ResetExternalID()
	pu.mutation.SetExternalID(i)
	return pu
}

// SetNillableExternalID sets the "external_id" field if the given value is not nil.
func (pu *PartyUpdate) SetNillableExternalID(i *int) *PartyUpdate {
	if i != nil {
		pu.SetExternalID(*i)
	}
	return pu
}

// AddExternalID adds i to the "external_id" field.
func (pu *PartyUpdate) AddExternalID(i int) *PartyUpdate {
	pu.mutation.AddExternalID(i)
	return pu
}

// ClearExternalID clears the value of the "external_id" field.
func (pu *PartyUpdate) ClearExternalID() *PartyUpdate {
	pu.mutation.ClearExternalID()
	return pu
}

// SetPreferredCurrencyUomID sets the "preferred_currency_uom_id" field.
func (pu *PartyUpdate) SetPreferredCurrencyUomID(i int) *PartyUpdate {
	pu.mutation.ResetPreferredCurrencyUomID()
	pu.mutation.SetPreferredCurrencyUomID(i)
	return pu
}

// SetNillablePreferredCurrencyUomID sets the "preferred_currency_uom_id" field if the given value is not nil.
func (pu *PartyUpdate) SetNillablePreferredCurrencyUomID(i *int) *PartyUpdate {
	if i != nil {
		pu.SetPreferredCurrencyUomID(*i)
	}
	return pu
}

// AddPreferredCurrencyUomID adds i to the "preferred_currency_uom_id" field.
func (pu *PartyUpdate) AddPreferredCurrencyUomID(i int) *PartyUpdate {
	pu.mutation.AddPreferredCurrencyUomID(i)
	return pu
}

// ClearPreferredCurrencyUomID clears the value of the "preferred_currency_uom_id" field.
func (pu *PartyUpdate) ClearPreferredCurrencyUomID() *PartyUpdate {
	pu.mutation.ClearPreferredCurrencyUomID()
	return pu
}

// SetDescription sets the "description" field.
func (pu *PartyUpdate) SetDescription(s string) *PartyUpdate {
	pu.mutation.SetDescription(s)
	return pu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pu *PartyUpdate) SetNillableDescription(s *string) *PartyUpdate {
	if s != nil {
		pu.SetDescription(*s)
	}
	return pu
}

// ClearDescription clears the value of the "description" field.
func (pu *PartyUpdate) ClearDescription() *PartyUpdate {
	pu.mutation.ClearDescription()
	return pu
}

// SetCreatedDate sets the "created_date" field.
func (pu *PartyUpdate) SetCreatedDate(t time.Time) *PartyUpdate {
	pu.mutation.SetCreatedDate(t)
	return pu
}

// SetNillableCreatedDate sets the "created_date" field if the given value is not nil.
func (pu *PartyUpdate) SetNillableCreatedDate(t *time.Time) *PartyUpdate {
	if t != nil {
		pu.SetCreatedDate(*t)
	}
	return pu
}

// ClearCreatedDate clears the value of the "created_date" field.
func (pu *PartyUpdate) ClearCreatedDate() *PartyUpdate {
	pu.mutation.ClearCreatedDate()
	return pu
}

// SetLastModifiedDate sets the "last_modified_date" field.
func (pu *PartyUpdate) SetLastModifiedDate(t time.Time) *PartyUpdate {
	pu.mutation.SetLastModifiedDate(t)
	return pu
}

// SetNillableLastModifiedDate sets the "last_modified_date" field if the given value is not nil.
func (pu *PartyUpdate) SetNillableLastModifiedDate(t *time.Time) *PartyUpdate {
	if t != nil {
		pu.SetLastModifiedDate(*t)
	}
	return pu
}

// ClearLastModifiedDate clears the value of the "last_modified_date" field.
func (pu *PartyUpdate) ClearLastModifiedDate() *PartyUpdate {
	pu.mutation.ClearLastModifiedDate()
	return pu
}

// SetDataSourceID sets the "data_source_id" field.
func (pu *PartyUpdate) SetDataSourceID(i int) *PartyUpdate {
	pu.mutation.ResetDataSourceID()
	pu.mutation.SetDataSourceID(i)
	return pu
}

// SetNillableDataSourceID sets the "data_source_id" field if the given value is not nil.
func (pu *PartyUpdate) SetNillableDataSourceID(i *int) *PartyUpdate {
	if i != nil {
		pu.SetDataSourceID(*i)
	}
	return pu
}

// AddDataSourceID adds i to the "data_source_id" field.
func (pu *PartyUpdate) AddDataSourceID(i int) *PartyUpdate {
	pu.mutation.AddDataSourceID(i)
	return pu
}

// ClearDataSourceID clears the value of the "data_source_id" field.
func (pu *PartyUpdate) ClearDataSourceID() *PartyUpdate {
	pu.mutation.ClearDataSourceID()
	return pu
}

// SetIsUnread sets the "is_unread" field.
func (pu *PartyUpdate) SetIsUnread(value party.IsUnread) *PartyUpdate {
	pu.mutation.SetIsUnread(value)
	return pu
}

// SetNillableIsUnread sets the "is_unread" field if the given value is not nil.
func (pu *PartyUpdate) SetNillableIsUnread(value *party.IsUnread) *PartyUpdate {
	if value != nil {
		pu.SetIsUnread(*value)
	}
	return pu
}

// ClearIsUnread clears the value of the "is_unread" field.
func (pu *PartyUpdate) ClearIsUnread() *PartyUpdate {
	pu.mutation.ClearIsUnread()
	return pu
}

// SetPartyTypeID sets the "party_type" edge to the PartyType entity by ID.
func (pu *PartyUpdate) SetPartyTypeID(id int) *PartyUpdate {
	pu.mutation.SetPartyTypeID(id)
	return pu
}

// SetNillablePartyTypeID sets the "party_type" edge to the PartyType entity by ID if the given value is not nil.
func (pu *PartyUpdate) SetNillablePartyTypeID(id *int) *PartyUpdate {
	if id != nil {
		pu = pu.SetPartyTypeID(*id)
	}
	return pu
}

// SetPartyType sets the "party_type" edge to the PartyType entity.
func (pu *PartyUpdate) SetPartyType(p *PartyType) *PartyUpdate {
	return pu.SetPartyTypeID(p.ID)
}

// SetCreatedByUserLoginID sets the "created_by_user_login" edge to the UserLogin entity by ID.
func (pu *PartyUpdate) SetCreatedByUserLoginID(id int) *PartyUpdate {
	pu.mutation.SetCreatedByUserLoginID(id)
	return pu
}

// SetNillableCreatedByUserLoginID sets the "created_by_user_login" edge to the UserLogin entity by ID if the given value is not nil.
func (pu *PartyUpdate) SetNillableCreatedByUserLoginID(id *int) *PartyUpdate {
	if id != nil {
		pu = pu.SetCreatedByUserLoginID(*id)
	}
	return pu
}

// SetCreatedByUserLogin sets the "created_by_user_login" edge to the UserLogin entity.
func (pu *PartyUpdate) SetCreatedByUserLogin(u *UserLogin) *PartyUpdate {
	return pu.SetCreatedByUserLoginID(u.ID)
}

// SetLastModifiedByUserLoginID sets the "last_modified_by_user_login" edge to the UserLogin entity by ID.
func (pu *PartyUpdate) SetLastModifiedByUserLoginID(id int) *PartyUpdate {
	pu.mutation.SetLastModifiedByUserLoginID(id)
	return pu
}

// SetNillableLastModifiedByUserLoginID sets the "last_modified_by_user_login" edge to the UserLogin entity by ID if the given value is not nil.
func (pu *PartyUpdate) SetNillableLastModifiedByUserLoginID(id *int) *PartyUpdate {
	if id != nil {
		pu = pu.SetLastModifiedByUserLoginID(*id)
	}
	return pu
}

// SetLastModifiedByUserLogin sets the "last_modified_by_user_login" edge to the UserLogin entity.
func (pu *PartyUpdate) SetLastModifiedByUserLogin(u *UserLogin) *PartyUpdate {
	return pu.SetLastModifiedByUserLoginID(u.ID)
}

// SetStatusItemID sets the "status_item" edge to the StatusItem entity by ID.
func (pu *PartyUpdate) SetStatusItemID(id int) *PartyUpdate {
	pu.mutation.SetStatusItemID(id)
	return pu
}

// SetNillableStatusItemID sets the "status_item" edge to the StatusItem entity by ID if the given value is not nil.
func (pu *PartyUpdate) SetNillableStatusItemID(id *int) *PartyUpdate {
	if id != nil {
		pu = pu.SetStatusItemID(*id)
	}
	return pu
}

// SetStatusItem sets the "status_item" edge to the StatusItem entity.
func (pu *PartyUpdate) SetStatusItem(s *StatusItem) *PartyUpdate {
	return pu.SetStatusItemID(s.ID)
}

// AddFixedAssetIDs adds the "fixed_assets" edge to the FixedAsset entity by IDs.
func (pu *PartyUpdate) AddFixedAssetIDs(ids ...int) *PartyUpdate {
	pu.mutation.AddFixedAssetIDs(ids...)
	return pu
}

// AddFixedAssets adds the "fixed_assets" edges to the FixedAsset entity.
func (pu *PartyUpdate) AddFixedAssets(f ...*FixedAsset) *PartyUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return pu.AddFixedAssetIDs(ids...)
}

// AddPartyContactMechIDs adds the "party_contact_meches" edge to the PartyContactMech entity by IDs.
func (pu *PartyUpdate) AddPartyContactMechIDs(ids ...int) *PartyUpdate {
	pu.mutation.AddPartyContactMechIDs(ids...)
	return pu
}

// AddPartyContactMeches adds the "party_contact_meches" edges to the PartyContactMech entity.
func (pu *PartyUpdate) AddPartyContactMeches(p ...*PartyContactMech) *PartyUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddPartyContactMechIDs(ids...)
}

// AddPartyRoleIDs adds the "party_roles" edge to the PartyRole entity by IDs.
func (pu *PartyUpdate) AddPartyRoleIDs(ids ...int) *PartyUpdate {
	pu.mutation.AddPartyRoleIDs(ids...)
	return pu
}

// AddPartyRoles adds the "party_roles" edges to the PartyRole entity.
func (pu *PartyUpdate) AddPartyRoles(p ...*PartyRole) *PartyUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddPartyRoleIDs(ids...)
}

// AddPartyStatusIDs adds the "party_statuses" edge to the PartyStatus entity by IDs.
func (pu *PartyUpdate) AddPartyStatusIDs(ids ...int) *PartyUpdate {
	pu.mutation.AddPartyStatusIDs(ids...)
	return pu
}

// AddPartyStatuses adds the "party_statuses" edges to the PartyStatus entity.
func (pu *PartyUpdate) AddPartyStatuses(p ...*PartyStatus) *PartyUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddPartyStatusIDs(ids...)
}

// SetPersonID sets the "person" edge to the Person entity by ID.
func (pu *PartyUpdate) SetPersonID(id int) *PartyUpdate {
	pu.mutation.SetPersonID(id)
	return pu
}

// SetNillablePersonID sets the "person" edge to the Person entity by ID if the given value is not nil.
func (pu *PartyUpdate) SetNillablePersonID(id *int) *PartyUpdate {
	if id != nil {
		pu = pu.SetPersonID(*id)
	}
	return pu
}

// SetPerson sets the "person" edge to the Person entity.
func (pu *PartyUpdate) SetPerson(p *Person) *PartyUpdate {
	return pu.SetPersonID(p.ID)
}

// AddUserLoginIDs adds the "user_logins" edge to the UserLogin entity by IDs.
func (pu *PartyUpdate) AddUserLoginIDs(ids ...int) *PartyUpdate {
	pu.mutation.AddUserLoginIDs(ids...)
	return pu
}

// AddUserLogins adds the "user_logins" edges to the UserLogin entity.
func (pu *PartyUpdate) AddUserLogins(u ...*UserLogin) *PartyUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return pu.AddUserLoginIDs(ids...)
}

// AddWorkEffortPartyAssignmentIDs adds the "work_effort_party_assignments" edge to the WorkEffortPartyAssignment entity by IDs.
func (pu *PartyUpdate) AddWorkEffortPartyAssignmentIDs(ids ...int) *PartyUpdate {
	pu.mutation.AddWorkEffortPartyAssignmentIDs(ids...)
	return pu
}

// AddWorkEffortPartyAssignments adds the "work_effort_party_assignments" edges to the WorkEffortPartyAssignment entity.
func (pu *PartyUpdate) AddWorkEffortPartyAssignments(w ...*WorkEffortPartyAssignment) *PartyUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return pu.AddWorkEffortPartyAssignmentIDs(ids...)
}

// Mutation returns the PartyMutation object of the builder.
func (pu *PartyUpdate) Mutation() *PartyMutation {
	return pu.mutation
}

// ClearPartyType clears the "party_type" edge to the PartyType entity.
func (pu *PartyUpdate) ClearPartyType() *PartyUpdate {
	pu.mutation.ClearPartyType()
	return pu
}

// ClearCreatedByUserLogin clears the "created_by_user_login" edge to the UserLogin entity.
func (pu *PartyUpdate) ClearCreatedByUserLogin() *PartyUpdate {
	pu.mutation.ClearCreatedByUserLogin()
	return pu
}

// ClearLastModifiedByUserLogin clears the "last_modified_by_user_login" edge to the UserLogin entity.
func (pu *PartyUpdate) ClearLastModifiedByUserLogin() *PartyUpdate {
	pu.mutation.ClearLastModifiedByUserLogin()
	return pu
}

// ClearStatusItem clears the "status_item" edge to the StatusItem entity.
func (pu *PartyUpdate) ClearStatusItem() *PartyUpdate {
	pu.mutation.ClearStatusItem()
	return pu
}

// ClearFixedAssets clears all "fixed_assets" edges to the FixedAsset entity.
func (pu *PartyUpdate) ClearFixedAssets() *PartyUpdate {
	pu.mutation.ClearFixedAssets()
	return pu
}

// RemoveFixedAssetIDs removes the "fixed_assets" edge to FixedAsset entities by IDs.
func (pu *PartyUpdate) RemoveFixedAssetIDs(ids ...int) *PartyUpdate {
	pu.mutation.RemoveFixedAssetIDs(ids...)
	return pu
}

// RemoveFixedAssets removes "fixed_assets" edges to FixedAsset entities.
func (pu *PartyUpdate) RemoveFixedAssets(f ...*FixedAsset) *PartyUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return pu.RemoveFixedAssetIDs(ids...)
}

// ClearPartyContactMeches clears all "party_contact_meches" edges to the PartyContactMech entity.
func (pu *PartyUpdate) ClearPartyContactMeches() *PartyUpdate {
	pu.mutation.ClearPartyContactMeches()
	return pu
}

// RemovePartyContactMechIDs removes the "party_contact_meches" edge to PartyContactMech entities by IDs.
func (pu *PartyUpdate) RemovePartyContactMechIDs(ids ...int) *PartyUpdate {
	pu.mutation.RemovePartyContactMechIDs(ids...)
	return pu
}

// RemovePartyContactMeches removes "party_contact_meches" edges to PartyContactMech entities.
func (pu *PartyUpdate) RemovePartyContactMeches(p ...*PartyContactMech) *PartyUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemovePartyContactMechIDs(ids...)
}

// ClearPartyRoles clears all "party_roles" edges to the PartyRole entity.
func (pu *PartyUpdate) ClearPartyRoles() *PartyUpdate {
	pu.mutation.ClearPartyRoles()
	return pu
}

// RemovePartyRoleIDs removes the "party_roles" edge to PartyRole entities by IDs.
func (pu *PartyUpdate) RemovePartyRoleIDs(ids ...int) *PartyUpdate {
	pu.mutation.RemovePartyRoleIDs(ids...)
	return pu
}

// RemovePartyRoles removes "party_roles" edges to PartyRole entities.
func (pu *PartyUpdate) RemovePartyRoles(p ...*PartyRole) *PartyUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemovePartyRoleIDs(ids...)
}

// ClearPartyStatuses clears all "party_statuses" edges to the PartyStatus entity.
func (pu *PartyUpdate) ClearPartyStatuses() *PartyUpdate {
	pu.mutation.ClearPartyStatuses()
	return pu
}

// RemovePartyStatusIDs removes the "party_statuses" edge to PartyStatus entities by IDs.
func (pu *PartyUpdate) RemovePartyStatusIDs(ids ...int) *PartyUpdate {
	pu.mutation.RemovePartyStatusIDs(ids...)
	return pu
}

// RemovePartyStatuses removes "party_statuses" edges to PartyStatus entities.
func (pu *PartyUpdate) RemovePartyStatuses(p ...*PartyStatus) *PartyUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemovePartyStatusIDs(ids...)
}

// ClearPerson clears the "person" edge to the Person entity.
func (pu *PartyUpdate) ClearPerson() *PartyUpdate {
	pu.mutation.ClearPerson()
	return pu
}

// ClearUserLogins clears all "user_logins" edges to the UserLogin entity.
func (pu *PartyUpdate) ClearUserLogins() *PartyUpdate {
	pu.mutation.ClearUserLogins()
	return pu
}

// RemoveUserLoginIDs removes the "user_logins" edge to UserLogin entities by IDs.
func (pu *PartyUpdate) RemoveUserLoginIDs(ids ...int) *PartyUpdate {
	pu.mutation.RemoveUserLoginIDs(ids...)
	return pu
}

// RemoveUserLogins removes "user_logins" edges to UserLogin entities.
func (pu *PartyUpdate) RemoveUserLogins(u ...*UserLogin) *PartyUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return pu.RemoveUserLoginIDs(ids...)
}

// ClearWorkEffortPartyAssignments clears all "work_effort_party_assignments" edges to the WorkEffortPartyAssignment entity.
func (pu *PartyUpdate) ClearWorkEffortPartyAssignments() *PartyUpdate {
	pu.mutation.ClearWorkEffortPartyAssignments()
	return pu
}

// RemoveWorkEffortPartyAssignmentIDs removes the "work_effort_party_assignments" edge to WorkEffortPartyAssignment entities by IDs.
func (pu *PartyUpdate) RemoveWorkEffortPartyAssignmentIDs(ids ...int) *PartyUpdate {
	pu.mutation.RemoveWorkEffortPartyAssignmentIDs(ids...)
	return pu
}

// RemoveWorkEffortPartyAssignments removes "work_effort_party_assignments" edges to WorkEffortPartyAssignment entities.
func (pu *PartyUpdate) RemoveWorkEffortPartyAssignments(w ...*WorkEffortPartyAssignment) *PartyUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return pu.RemoveWorkEffortPartyAssignmentIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PartyUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	pu.defaults()
	if len(pu.hooks) == 0 {
		if err = pu.check(); err != nil {
			return 0, err
		}
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PartyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pu.check(); err != nil {
				return 0, err
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PartyUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PartyUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PartyUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *PartyUpdate) defaults() {
	if _, ok := pu.mutation.UpdateTime(); !ok {
		v := party.UpdateDefaultUpdateTime()
		pu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PartyUpdate) check() error {
	if v, ok := pu.mutation.IsUnread(); ok {
		if err := party.IsUnreadValidator(v); err != nil {
			return &ValidationError{Name: "is_unread", err: fmt.Errorf("ent: validator failed for field \"is_unread\": %w", err)}
		}
	}
	return nil
}

func (pu *PartyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   party.Table,
			Columns: party.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: party.FieldID,
			},
		},
	}
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: party.FieldUpdateTime,
		})
	}
	if value, ok := pu.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: party.FieldStringRef,
		})
	}
	if pu.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: party.FieldStringRef,
		})
	}
	if value, ok := pu.mutation.ExternalID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: party.FieldExternalID,
		})
	}
	if value, ok := pu.mutation.AddedExternalID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: party.FieldExternalID,
		})
	}
	if pu.mutation.ExternalIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: party.FieldExternalID,
		})
	}
	if value, ok := pu.mutation.PreferredCurrencyUomID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: party.FieldPreferredCurrencyUomID,
		})
	}
	if value, ok := pu.mutation.AddedPreferredCurrencyUomID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: party.FieldPreferredCurrencyUomID,
		})
	}
	if pu.mutation.PreferredCurrencyUomIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: party.FieldPreferredCurrencyUomID,
		})
	}
	if value, ok := pu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: party.FieldDescription,
		})
	}
	if pu.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: party.FieldDescription,
		})
	}
	if value, ok := pu.mutation.CreatedDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: party.FieldCreatedDate,
		})
	}
	if pu.mutation.CreatedDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: party.FieldCreatedDate,
		})
	}
	if value, ok := pu.mutation.LastModifiedDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: party.FieldLastModifiedDate,
		})
	}
	if pu.mutation.LastModifiedDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: party.FieldLastModifiedDate,
		})
	}
	if value, ok := pu.mutation.DataSourceID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: party.FieldDataSourceID,
		})
	}
	if value, ok := pu.mutation.AddedDataSourceID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: party.FieldDataSourceID,
		})
	}
	if pu.mutation.DataSourceIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: party.FieldDataSourceID,
		})
	}
	if value, ok := pu.mutation.IsUnread(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: party.FieldIsUnread,
		})
	}
	if pu.mutation.IsUnreadCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: party.FieldIsUnread,
		})
	}
	if pu.mutation.PartyTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   party.PartyTypeTable,
			Columns: []string{party.PartyTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partytype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PartyTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   party.PartyTypeTable,
			Columns: []string{party.PartyTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partytype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.CreatedByUserLoginCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   party.CreatedByUserLoginTable,
			Columns: []string{party.CreatedByUserLoginColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: userlogin.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.CreatedByUserLoginIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   party.CreatedByUserLoginTable,
			Columns: []string{party.CreatedByUserLoginColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: userlogin.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.LastModifiedByUserLoginCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   party.LastModifiedByUserLoginTable,
			Columns: []string{party.LastModifiedByUserLoginColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: userlogin.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.LastModifiedByUserLoginIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   party.LastModifiedByUserLoginTable,
			Columns: []string{party.LastModifiedByUserLoginColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: userlogin.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.StatusItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   party.StatusItemTable,
			Columns: []string{party.StatusItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusitem.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.StatusItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   party.StatusItemTable,
			Columns: []string{party.StatusItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.FixedAssetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   party.FixedAssetsTable,
			Columns: []string{party.FixedAssetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: fixedasset.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedFixedAssetsIDs(); len(nodes) > 0 && !pu.mutation.FixedAssetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   party.FixedAssetsTable,
			Columns: []string{party.FixedAssetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: fixedasset.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.FixedAssetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   party.FixedAssetsTable,
			Columns: []string{party.FixedAssetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: fixedasset.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.PartyContactMechesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   party.PartyContactMechesTable,
			Columns: []string{party.PartyContactMechesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partycontactmech.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedPartyContactMechesIDs(); len(nodes) > 0 && !pu.mutation.PartyContactMechesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   party.PartyContactMechesTable,
			Columns: []string{party.PartyContactMechesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partycontactmech.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PartyContactMechesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   party.PartyContactMechesTable,
			Columns: []string{party.PartyContactMechesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partycontactmech.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.PartyRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   party.PartyRolesTable,
			Columns: []string{party.PartyRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partyrole.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedPartyRolesIDs(); len(nodes) > 0 && !pu.mutation.PartyRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   party.PartyRolesTable,
			Columns: []string{party.PartyRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partyrole.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PartyRolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   party.PartyRolesTable,
			Columns: []string{party.PartyRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partyrole.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.PartyStatusesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   party.PartyStatusesTable,
			Columns: []string{party.PartyStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partystatus.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedPartyStatusesIDs(); len(nodes) > 0 && !pu.mutation.PartyStatusesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   party.PartyStatusesTable,
			Columns: []string{party.PartyStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partystatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PartyStatusesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   party.PartyStatusesTable,
			Columns: []string{party.PartyStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partystatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.PersonCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   party.PersonTable,
			Columns: []string{party.PersonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: person.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PersonIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   party.PersonTable,
			Columns: []string{party.PersonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: person.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.UserLoginsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   party.UserLoginsTable,
			Columns: []string{party.UserLoginsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: userlogin.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedUserLoginsIDs(); len(nodes) > 0 && !pu.mutation.UserLoginsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   party.UserLoginsTable,
			Columns: []string{party.UserLoginsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: userlogin.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.UserLoginsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   party.UserLoginsTable,
			Columns: []string{party.UserLoginsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: userlogin.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.WorkEffortPartyAssignmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   party.WorkEffortPartyAssignmentsTable,
			Columns: []string{party.WorkEffortPartyAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffortpartyassignment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedWorkEffortPartyAssignmentsIDs(); len(nodes) > 0 && !pu.mutation.WorkEffortPartyAssignmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   party.WorkEffortPartyAssignmentsTable,
			Columns: []string{party.WorkEffortPartyAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffortpartyassignment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.WorkEffortPartyAssignmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   party.WorkEffortPartyAssignmentsTable,
			Columns: []string{party.WorkEffortPartyAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffortpartyassignment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{party.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// PartyUpdateOne is the builder for updating a single Party entity.
type PartyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PartyMutation
}

// SetStringRef sets the "string_ref" field.
func (puo *PartyUpdateOne) SetStringRef(s string) *PartyUpdateOne {
	puo.mutation.SetStringRef(s)
	return puo
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (puo *PartyUpdateOne) SetNillableStringRef(s *string) *PartyUpdateOne {
	if s != nil {
		puo.SetStringRef(*s)
	}
	return puo
}

// ClearStringRef clears the value of the "string_ref" field.
func (puo *PartyUpdateOne) ClearStringRef() *PartyUpdateOne {
	puo.mutation.ClearStringRef()
	return puo
}

// SetExternalID sets the "external_id" field.
func (puo *PartyUpdateOne) SetExternalID(i int) *PartyUpdateOne {
	puo.mutation.ResetExternalID()
	puo.mutation.SetExternalID(i)
	return puo
}

// SetNillableExternalID sets the "external_id" field if the given value is not nil.
func (puo *PartyUpdateOne) SetNillableExternalID(i *int) *PartyUpdateOne {
	if i != nil {
		puo.SetExternalID(*i)
	}
	return puo
}

// AddExternalID adds i to the "external_id" field.
func (puo *PartyUpdateOne) AddExternalID(i int) *PartyUpdateOne {
	puo.mutation.AddExternalID(i)
	return puo
}

// ClearExternalID clears the value of the "external_id" field.
func (puo *PartyUpdateOne) ClearExternalID() *PartyUpdateOne {
	puo.mutation.ClearExternalID()
	return puo
}

// SetPreferredCurrencyUomID sets the "preferred_currency_uom_id" field.
func (puo *PartyUpdateOne) SetPreferredCurrencyUomID(i int) *PartyUpdateOne {
	puo.mutation.ResetPreferredCurrencyUomID()
	puo.mutation.SetPreferredCurrencyUomID(i)
	return puo
}

// SetNillablePreferredCurrencyUomID sets the "preferred_currency_uom_id" field if the given value is not nil.
func (puo *PartyUpdateOne) SetNillablePreferredCurrencyUomID(i *int) *PartyUpdateOne {
	if i != nil {
		puo.SetPreferredCurrencyUomID(*i)
	}
	return puo
}

// AddPreferredCurrencyUomID adds i to the "preferred_currency_uom_id" field.
func (puo *PartyUpdateOne) AddPreferredCurrencyUomID(i int) *PartyUpdateOne {
	puo.mutation.AddPreferredCurrencyUomID(i)
	return puo
}

// ClearPreferredCurrencyUomID clears the value of the "preferred_currency_uom_id" field.
func (puo *PartyUpdateOne) ClearPreferredCurrencyUomID() *PartyUpdateOne {
	puo.mutation.ClearPreferredCurrencyUomID()
	return puo
}

// SetDescription sets the "description" field.
func (puo *PartyUpdateOne) SetDescription(s string) *PartyUpdateOne {
	puo.mutation.SetDescription(s)
	return puo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (puo *PartyUpdateOne) SetNillableDescription(s *string) *PartyUpdateOne {
	if s != nil {
		puo.SetDescription(*s)
	}
	return puo
}

// ClearDescription clears the value of the "description" field.
func (puo *PartyUpdateOne) ClearDescription() *PartyUpdateOne {
	puo.mutation.ClearDescription()
	return puo
}

// SetCreatedDate sets the "created_date" field.
func (puo *PartyUpdateOne) SetCreatedDate(t time.Time) *PartyUpdateOne {
	puo.mutation.SetCreatedDate(t)
	return puo
}

// SetNillableCreatedDate sets the "created_date" field if the given value is not nil.
func (puo *PartyUpdateOne) SetNillableCreatedDate(t *time.Time) *PartyUpdateOne {
	if t != nil {
		puo.SetCreatedDate(*t)
	}
	return puo
}

// ClearCreatedDate clears the value of the "created_date" field.
func (puo *PartyUpdateOne) ClearCreatedDate() *PartyUpdateOne {
	puo.mutation.ClearCreatedDate()
	return puo
}

// SetLastModifiedDate sets the "last_modified_date" field.
func (puo *PartyUpdateOne) SetLastModifiedDate(t time.Time) *PartyUpdateOne {
	puo.mutation.SetLastModifiedDate(t)
	return puo
}

// SetNillableLastModifiedDate sets the "last_modified_date" field if the given value is not nil.
func (puo *PartyUpdateOne) SetNillableLastModifiedDate(t *time.Time) *PartyUpdateOne {
	if t != nil {
		puo.SetLastModifiedDate(*t)
	}
	return puo
}

// ClearLastModifiedDate clears the value of the "last_modified_date" field.
func (puo *PartyUpdateOne) ClearLastModifiedDate() *PartyUpdateOne {
	puo.mutation.ClearLastModifiedDate()
	return puo
}

// SetDataSourceID sets the "data_source_id" field.
func (puo *PartyUpdateOne) SetDataSourceID(i int) *PartyUpdateOne {
	puo.mutation.ResetDataSourceID()
	puo.mutation.SetDataSourceID(i)
	return puo
}

// SetNillableDataSourceID sets the "data_source_id" field if the given value is not nil.
func (puo *PartyUpdateOne) SetNillableDataSourceID(i *int) *PartyUpdateOne {
	if i != nil {
		puo.SetDataSourceID(*i)
	}
	return puo
}

// AddDataSourceID adds i to the "data_source_id" field.
func (puo *PartyUpdateOne) AddDataSourceID(i int) *PartyUpdateOne {
	puo.mutation.AddDataSourceID(i)
	return puo
}

// ClearDataSourceID clears the value of the "data_source_id" field.
func (puo *PartyUpdateOne) ClearDataSourceID() *PartyUpdateOne {
	puo.mutation.ClearDataSourceID()
	return puo
}

// SetIsUnread sets the "is_unread" field.
func (puo *PartyUpdateOne) SetIsUnread(pu party.IsUnread) *PartyUpdateOne {
	puo.mutation.SetIsUnread(pu)
	return puo
}

// SetNillableIsUnread sets the "is_unread" field if the given value is not nil.
func (puo *PartyUpdateOne) SetNillableIsUnread(pu *party.IsUnread) *PartyUpdateOne {
	if pu != nil {
		puo.SetIsUnread(*pu)
	}
	return puo
}

// ClearIsUnread clears the value of the "is_unread" field.
func (puo *PartyUpdateOne) ClearIsUnread() *PartyUpdateOne {
	puo.mutation.ClearIsUnread()
	return puo
}

// SetPartyTypeID sets the "party_type" edge to the PartyType entity by ID.
func (puo *PartyUpdateOne) SetPartyTypeID(id int) *PartyUpdateOne {
	puo.mutation.SetPartyTypeID(id)
	return puo
}

// SetNillablePartyTypeID sets the "party_type" edge to the PartyType entity by ID if the given value is not nil.
func (puo *PartyUpdateOne) SetNillablePartyTypeID(id *int) *PartyUpdateOne {
	if id != nil {
		puo = puo.SetPartyTypeID(*id)
	}
	return puo
}

// SetPartyType sets the "party_type" edge to the PartyType entity.
func (puo *PartyUpdateOne) SetPartyType(p *PartyType) *PartyUpdateOne {
	return puo.SetPartyTypeID(p.ID)
}

// SetCreatedByUserLoginID sets the "created_by_user_login" edge to the UserLogin entity by ID.
func (puo *PartyUpdateOne) SetCreatedByUserLoginID(id int) *PartyUpdateOne {
	puo.mutation.SetCreatedByUserLoginID(id)
	return puo
}

// SetNillableCreatedByUserLoginID sets the "created_by_user_login" edge to the UserLogin entity by ID if the given value is not nil.
func (puo *PartyUpdateOne) SetNillableCreatedByUserLoginID(id *int) *PartyUpdateOne {
	if id != nil {
		puo = puo.SetCreatedByUserLoginID(*id)
	}
	return puo
}

// SetCreatedByUserLogin sets the "created_by_user_login" edge to the UserLogin entity.
func (puo *PartyUpdateOne) SetCreatedByUserLogin(u *UserLogin) *PartyUpdateOne {
	return puo.SetCreatedByUserLoginID(u.ID)
}

// SetLastModifiedByUserLoginID sets the "last_modified_by_user_login" edge to the UserLogin entity by ID.
func (puo *PartyUpdateOne) SetLastModifiedByUserLoginID(id int) *PartyUpdateOne {
	puo.mutation.SetLastModifiedByUserLoginID(id)
	return puo
}

// SetNillableLastModifiedByUserLoginID sets the "last_modified_by_user_login" edge to the UserLogin entity by ID if the given value is not nil.
func (puo *PartyUpdateOne) SetNillableLastModifiedByUserLoginID(id *int) *PartyUpdateOne {
	if id != nil {
		puo = puo.SetLastModifiedByUserLoginID(*id)
	}
	return puo
}

// SetLastModifiedByUserLogin sets the "last_modified_by_user_login" edge to the UserLogin entity.
func (puo *PartyUpdateOne) SetLastModifiedByUserLogin(u *UserLogin) *PartyUpdateOne {
	return puo.SetLastModifiedByUserLoginID(u.ID)
}

// SetStatusItemID sets the "status_item" edge to the StatusItem entity by ID.
func (puo *PartyUpdateOne) SetStatusItemID(id int) *PartyUpdateOne {
	puo.mutation.SetStatusItemID(id)
	return puo
}

// SetNillableStatusItemID sets the "status_item" edge to the StatusItem entity by ID if the given value is not nil.
func (puo *PartyUpdateOne) SetNillableStatusItemID(id *int) *PartyUpdateOne {
	if id != nil {
		puo = puo.SetStatusItemID(*id)
	}
	return puo
}

// SetStatusItem sets the "status_item" edge to the StatusItem entity.
func (puo *PartyUpdateOne) SetStatusItem(s *StatusItem) *PartyUpdateOne {
	return puo.SetStatusItemID(s.ID)
}

// AddFixedAssetIDs adds the "fixed_assets" edge to the FixedAsset entity by IDs.
func (puo *PartyUpdateOne) AddFixedAssetIDs(ids ...int) *PartyUpdateOne {
	puo.mutation.AddFixedAssetIDs(ids...)
	return puo
}

// AddFixedAssets adds the "fixed_assets" edges to the FixedAsset entity.
func (puo *PartyUpdateOne) AddFixedAssets(f ...*FixedAsset) *PartyUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return puo.AddFixedAssetIDs(ids...)
}

// AddPartyContactMechIDs adds the "party_contact_meches" edge to the PartyContactMech entity by IDs.
func (puo *PartyUpdateOne) AddPartyContactMechIDs(ids ...int) *PartyUpdateOne {
	puo.mutation.AddPartyContactMechIDs(ids...)
	return puo
}

// AddPartyContactMeches adds the "party_contact_meches" edges to the PartyContactMech entity.
func (puo *PartyUpdateOne) AddPartyContactMeches(p ...*PartyContactMech) *PartyUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddPartyContactMechIDs(ids...)
}

// AddPartyRoleIDs adds the "party_roles" edge to the PartyRole entity by IDs.
func (puo *PartyUpdateOne) AddPartyRoleIDs(ids ...int) *PartyUpdateOne {
	puo.mutation.AddPartyRoleIDs(ids...)
	return puo
}

// AddPartyRoles adds the "party_roles" edges to the PartyRole entity.
func (puo *PartyUpdateOne) AddPartyRoles(p ...*PartyRole) *PartyUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddPartyRoleIDs(ids...)
}

// AddPartyStatusIDs adds the "party_statuses" edge to the PartyStatus entity by IDs.
func (puo *PartyUpdateOne) AddPartyStatusIDs(ids ...int) *PartyUpdateOne {
	puo.mutation.AddPartyStatusIDs(ids...)
	return puo
}

// AddPartyStatuses adds the "party_statuses" edges to the PartyStatus entity.
func (puo *PartyUpdateOne) AddPartyStatuses(p ...*PartyStatus) *PartyUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddPartyStatusIDs(ids...)
}

// SetPersonID sets the "person" edge to the Person entity by ID.
func (puo *PartyUpdateOne) SetPersonID(id int) *PartyUpdateOne {
	puo.mutation.SetPersonID(id)
	return puo
}

// SetNillablePersonID sets the "person" edge to the Person entity by ID if the given value is not nil.
func (puo *PartyUpdateOne) SetNillablePersonID(id *int) *PartyUpdateOne {
	if id != nil {
		puo = puo.SetPersonID(*id)
	}
	return puo
}

// SetPerson sets the "person" edge to the Person entity.
func (puo *PartyUpdateOne) SetPerson(p *Person) *PartyUpdateOne {
	return puo.SetPersonID(p.ID)
}

// AddUserLoginIDs adds the "user_logins" edge to the UserLogin entity by IDs.
func (puo *PartyUpdateOne) AddUserLoginIDs(ids ...int) *PartyUpdateOne {
	puo.mutation.AddUserLoginIDs(ids...)
	return puo
}

// AddUserLogins adds the "user_logins" edges to the UserLogin entity.
func (puo *PartyUpdateOne) AddUserLogins(u ...*UserLogin) *PartyUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return puo.AddUserLoginIDs(ids...)
}

// AddWorkEffortPartyAssignmentIDs adds the "work_effort_party_assignments" edge to the WorkEffortPartyAssignment entity by IDs.
func (puo *PartyUpdateOne) AddWorkEffortPartyAssignmentIDs(ids ...int) *PartyUpdateOne {
	puo.mutation.AddWorkEffortPartyAssignmentIDs(ids...)
	return puo
}

// AddWorkEffortPartyAssignments adds the "work_effort_party_assignments" edges to the WorkEffortPartyAssignment entity.
func (puo *PartyUpdateOne) AddWorkEffortPartyAssignments(w ...*WorkEffortPartyAssignment) *PartyUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return puo.AddWorkEffortPartyAssignmentIDs(ids...)
}

// Mutation returns the PartyMutation object of the builder.
func (puo *PartyUpdateOne) Mutation() *PartyMutation {
	return puo.mutation
}

// ClearPartyType clears the "party_type" edge to the PartyType entity.
func (puo *PartyUpdateOne) ClearPartyType() *PartyUpdateOne {
	puo.mutation.ClearPartyType()
	return puo
}

// ClearCreatedByUserLogin clears the "created_by_user_login" edge to the UserLogin entity.
func (puo *PartyUpdateOne) ClearCreatedByUserLogin() *PartyUpdateOne {
	puo.mutation.ClearCreatedByUserLogin()
	return puo
}

// ClearLastModifiedByUserLogin clears the "last_modified_by_user_login" edge to the UserLogin entity.
func (puo *PartyUpdateOne) ClearLastModifiedByUserLogin() *PartyUpdateOne {
	puo.mutation.ClearLastModifiedByUserLogin()
	return puo
}

// ClearStatusItem clears the "status_item" edge to the StatusItem entity.
func (puo *PartyUpdateOne) ClearStatusItem() *PartyUpdateOne {
	puo.mutation.ClearStatusItem()
	return puo
}

// ClearFixedAssets clears all "fixed_assets" edges to the FixedAsset entity.
func (puo *PartyUpdateOne) ClearFixedAssets() *PartyUpdateOne {
	puo.mutation.ClearFixedAssets()
	return puo
}

// RemoveFixedAssetIDs removes the "fixed_assets" edge to FixedAsset entities by IDs.
func (puo *PartyUpdateOne) RemoveFixedAssetIDs(ids ...int) *PartyUpdateOne {
	puo.mutation.RemoveFixedAssetIDs(ids...)
	return puo
}

// RemoveFixedAssets removes "fixed_assets" edges to FixedAsset entities.
func (puo *PartyUpdateOne) RemoveFixedAssets(f ...*FixedAsset) *PartyUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return puo.RemoveFixedAssetIDs(ids...)
}

// ClearPartyContactMeches clears all "party_contact_meches" edges to the PartyContactMech entity.
func (puo *PartyUpdateOne) ClearPartyContactMeches() *PartyUpdateOne {
	puo.mutation.ClearPartyContactMeches()
	return puo
}

// RemovePartyContactMechIDs removes the "party_contact_meches" edge to PartyContactMech entities by IDs.
func (puo *PartyUpdateOne) RemovePartyContactMechIDs(ids ...int) *PartyUpdateOne {
	puo.mutation.RemovePartyContactMechIDs(ids...)
	return puo
}

// RemovePartyContactMeches removes "party_contact_meches" edges to PartyContactMech entities.
func (puo *PartyUpdateOne) RemovePartyContactMeches(p ...*PartyContactMech) *PartyUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemovePartyContactMechIDs(ids...)
}

// ClearPartyRoles clears all "party_roles" edges to the PartyRole entity.
func (puo *PartyUpdateOne) ClearPartyRoles() *PartyUpdateOne {
	puo.mutation.ClearPartyRoles()
	return puo
}

// RemovePartyRoleIDs removes the "party_roles" edge to PartyRole entities by IDs.
func (puo *PartyUpdateOne) RemovePartyRoleIDs(ids ...int) *PartyUpdateOne {
	puo.mutation.RemovePartyRoleIDs(ids...)
	return puo
}

// RemovePartyRoles removes "party_roles" edges to PartyRole entities.
func (puo *PartyUpdateOne) RemovePartyRoles(p ...*PartyRole) *PartyUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemovePartyRoleIDs(ids...)
}

// ClearPartyStatuses clears all "party_statuses" edges to the PartyStatus entity.
func (puo *PartyUpdateOne) ClearPartyStatuses() *PartyUpdateOne {
	puo.mutation.ClearPartyStatuses()
	return puo
}

// RemovePartyStatusIDs removes the "party_statuses" edge to PartyStatus entities by IDs.
func (puo *PartyUpdateOne) RemovePartyStatusIDs(ids ...int) *PartyUpdateOne {
	puo.mutation.RemovePartyStatusIDs(ids...)
	return puo
}

// RemovePartyStatuses removes "party_statuses" edges to PartyStatus entities.
func (puo *PartyUpdateOne) RemovePartyStatuses(p ...*PartyStatus) *PartyUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemovePartyStatusIDs(ids...)
}

// ClearPerson clears the "person" edge to the Person entity.
func (puo *PartyUpdateOne) ClearPerson() *PartyUpdateOne {
	puo.mutation.ClearPerson()
	return puo
}

// ClearUserLogins clears all "user_logins" edges to the UserLogin entity.
func (puo *PartyUpdateOne) ClearUserLogins() *PartyUpdateOne {
	puo.mutation.ClearUserLogins()
	return puo
}

// RemoveUserLoginIDs removes the "user_logins" edge to UserLogin entities by IDs.
func (puo *PartyUpdateOne) RemoveUserLoginIDs(ids ...int) *PartyUpdateOne {
	puo.mutation.RemoveUserLoginIDs(ids...)
	return puo
}

// RemoveUserLogins removes "user_logins" edges to UserLogin entities.
func (puo *PartyUpdateOne) RemoveUserLogins(u ...*UserLogin) *PartyUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return puo.RemoveUserLoginIDs(ids...)
}

// ClearWorkEffortPartyAssignments clears all "work_effort_party_assignments" edges to the WorkEffortPartyAssignment entity.
func (puo *PartyUpdateOne) ClearWorkEffortPartyAssignments() *PartyUpdateOne {
	puo.mutation.ClearWorkEffortPartyAssignments()
	return puo
}

// RemoveWorkEffortPartyAssignmentIDs removes the "work_effort_party_assignments" edge to WorkEffortPartyAssignment entities by IDs.
func (puo *PartyUpdateOne) RemoveWorkEffortPartyAssignmentIDs(ids ...int) *PartyUpdateOne {
	puo.mutation.RemoveWorkEffortPartyAssignmentIDs(ids...)
	return puo
}

// RemoveWorkEffortPartyAssignments removes "work_effort_party_assignments" edges to WorkEffortPartyAssignment entities.
func (puo *PartyUpdateOne) RemoveWorkEffortPartyAssignments(w ...*WorkEffortPartyAssignment) *PartyUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return puo.RemoveWorkEffortPartyAssignmentIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PartyUpdateOne) Select(field string, fields ...string) *PartyUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Party entity.
func (puo *PartyUpdateOne) Save(ctx context.Context) (*Party, error) {
	var (
		err  error
		node *Party
	)
	puo.defaults()
	if len(puo.hooks) == 0 {
		if err = puo.check(); err != nil {
			return nil, err
		}
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PartyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = puo.check(); err != nil {
				return nil, err
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			mut = puo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, puo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PartyUpdateOne) SaveX(ctx context.Context) *Party {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PartyUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PartyUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *PartyUpdateOne) defaults() {
	if _, ok := puo.mutation.UpdateTime(); !ok {
		v := party.UpdateDefaultUpdateTime()
		puo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PartyUpdateOne) check() error {
	if v, ok := puo.mutation.IsUnread(); ok {
		if err := party.IsUnreadValidator(v); err != nil {
			return &ValidationError{Name: "is_unread", err: fmt.Errorf("ent: validator failed for field \"is_unread\": %w", err)}
		}
	}
	return nil
}

func (puo *PartyUpdateOne) sqlSave(ctx context.Context) (_node *Party, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   party.Table,
			Columns: party.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: party.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Party.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, party.FieldID)
		for _, f := range fields {
			if !party.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != party.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: party.FieldUpdateTime,
		})
	}
	if value, ok := puo.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: party.FieldStringRef,
		})
	}
	if puo.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: party.FieldStringRef,
		})
	}
	if value, ok := puo.mutation.ExternalID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: party.FieldExternalID,
		})
	}
	if value, ok := puo.mutation.AddedExternalID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: party.FieldExternalID,
		})
	}
	if puo.mutation.ExternalIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: party.FieldExternalID,
		})
	}
	if value, ok := puo.mutation.PreferredCurrencyUomID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: party.FieldPreferredCurrencyUomID,
		})
	}
	if value, ok := puo.mutation.AddedPreferredCurrencyUomID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: party.FieldPreferredCurrencyUomID,
		})
	}
	if puo.mutation.PreferredCurrencyUomIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: party.FieldPreferredCurrencyUomID,
		})
	}
	if value, ok := puo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: party.FieldDescription,
		})
	}
	if puo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: party.FieldDescription,
		})
	}
	if value, ok := puo.mutation.CreatedDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: party.FieldCreatedDate,
		})
	}
	if puo.mutation.CreatedDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: party.FieldCreatedDate,
		})
	}
	if value, ok := puo.mutation.LastModifiedDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: party.FieldLastModifiedDate,
		})
	}
	if puo.mutation.LastModifiedDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: party.FieldLastModifiedDate,
		})
	}
	if value, ok := puo.mutation.DataSourceID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: party.FieldDataSourceID,
		})
	}
	if value, ok := puo.mutation.AddedDataSourceID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: party.FieldDataSourceID,
		})
	}
	if puo.mutation.DataSourceIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: party.FieldDataSourceID,
		})
	}
	if value, ok := puo.mutation.IsUnread(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: party.FieldIsUnread,
		})
	}
	if puo.mutation.IsUnreadCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: party.FieldIsUnread,
		})
	}
	if puo.mutation.PartyTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   party.PartyTypeTable,
			Columns: []string{party.PartyTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partytype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PartyTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   party.PartyTypeTable,
			Columns: []string{party.PartyTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partytype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.CreatedByUserLoginCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   party.CreatedByUserLoginTable,
			Columns: []string{party.CreatedByUserLoginColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: userlogin.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.CreatedByUserLoginIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   party.CreatedByUserLoginTable,
			Columns: []string{party.CreatedByUserLoginColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: userlogin.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.LastModifiedByUserLoginCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   party.LastModifiedByUserLoginTable,
			Columns: []string{party.LastModifiedByUserLoginColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: userlogin.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.LastModifiedByUserLoginIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   party.LastModifiedByUserLoginTable,
			Columns: []string{party.LastModifiedByUserLoginColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: userlogin.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.StatusItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   party.StatusItemTable,
			Columns: []string{party.StatusItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusitem.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.StatusItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   party.StatusItemTable,
			Columns: []string{party.StatusItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.FixedAssetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   party.FixedAssetsTable,
			Columns: []string{party.FixedAssetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: fixedasset.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedFixedAssetsIDs(); len(nodes) > 0 && !puo.mutation.FixedAssetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   party.FixedAssetsTable,
			Columns: []string{party.FixedAssetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: fixedasset.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.FixedAssetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   party.FixedAssetsTable,
			Columns: []string{party.FixedAssetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: fixedasset.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.PartyContactMechesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   party.PartyContactMechesTable,
			Columns: []string{party.PartyContactMechesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partycontactmech.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedPartyContactMechesIDs(); len(nodes) > 0 && !puo.mutation.PartyContactMechesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   party.PartyContactMechesTable,
			Columns: []string{party.PartyContactMechesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partycontactmech.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PartyContactMechesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   party.PartyContactMechesTable,
			Columns: []string{party.PartyContactMechesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partycontactmech.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.PartyRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   party.PartyRolesTable,
			Columns: []string{party.PartyRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partyrole.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedPartyRolesIDs(); len(nodes) > 0 && !puo.mutation.PartyRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   party.PartyRolesTable,
			Columns: []string{party.PartyRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partyrole.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PartyRolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   party.PartyRolesTable,
			Columns: []string{party.PartyRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partyrole.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.PartyStatusesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   party.PartyStatusesTable,
			Columns: []string{party.PartyStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partystatus.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedPartyStatusesIDs(); len(nodes) > 0 && !puo.mutation.PartyStatusesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   party.PartyStatusesTable,
			Columns: []string{party.PartyStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partystatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PartyStatusesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   party.PartyStatusesTable,
			Columns: []string{party.PartyStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partystatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.PersonCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   party.PersonTable,
			Columns: []string{party.PersonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: person.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PersonIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   party.PersonTable,
			Columns: []string{party.PersonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: person.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.UserLoginsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   party.UserLoginsTable,
			Columns: []string{party.UserLoginsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: userlogin.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedUserLoginsIDs(); len(nodes) > 0 && !puo.mutation.UserLoginsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   party.UserLoginsTable,
			Columns: []string{party.UserLoginsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: userlogin.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.UserLoginsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   party.UserLoginsTable,
			Columns: []string{party.UserLoginsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: userlogin.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.WorkEffortPartyAssignmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   party.WorkEffortPartyAssignmentsTable,
			Columns: []string{party.WorkEffortPartyAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffortpartyassignment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedWorkEffortPartyAssignmentsIDs(); len(nodes) > 0 && !puo.mutation.WorkEffortPartyAssignmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   party.WorkEffortPartyAssignmentsTable,
			Columns: []string{party.WorkEffortPartyAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffortpartyassignment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.WorkEffortPartyAssignmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   party.WorkEffortPartyAssignmentsTable,
			Columns: []string{party.WorkEffortPartyAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffortpartyassignment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Party{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{party.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
