// Code generated by entc, DO NOT EDIT.

package partycontactmech

import (
	"fmt"
	"time"
)

const (
	// Label holds the string label denoting the partycontactmech type in the database.
	Label = "party_contact_mech"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldStringRef holds the string denoting the string_ref field in the database.
	FieldStringRef = "string_ref"
	// FieldContactMechID holds the string denoting the contact_mech_id field in the database.
	FieldContactMechID = "contact_mech_id"
	// FieldFromDate holds the string denoting the from_date field in the database.
	FieldFromDate = "from_date"
	// FieldThruDate holds the string denoting the thru_date field in the database.
	FieldThruDate = "thru_date"
	// FieldAllowSolicitation holds the string denoting the allow_solicitation field in the database.
	FieldAllowSolicitation = "allow_solicitation"
	// FieldExtension holds the string denoting the extension field in the database.
	FieldExtension = "extension"
	// FieldVerified holds the string denoting the verified field in the database.
	FieldVerified = "verified"
	// FieldComments holds the string denoting the comments field in the database.
	FieldComments = "comments"
	// FieldYearsWithContactMech holds the string denoting the years_with_contact_mech field in the database.
	FieldYearsWithContactMech = "years_with_contact_mech"
	// FieldMonthsWithContactMech holds the string denoting the months_with_contact_mech field in the database.
	FieldMonthsWithContactMech = "months_with_contact_mech"
	// EdgeParty holds the string denoting the party edge name in mutations.
	EdgeParty = "party"
	// EdgePerson holds the string denoting the person edge name in mutations.
	EdgePerson = "person"
	// EdgePartyRole holds the string denoting the party_role edge name in mutations.
	EdgePartyRole = "party_role"
	// EdgeRoleType holds the string denoting the role_type edge name in mutations.
	EdgeRoleType = "role_type"
	// Table holds the table name of the partycontactmech in the database.
	Table = "party_contact_meches"
	// PartyTable is the table the holds the party relation/edge.
	PartyTable = "party_contact_meches"
	// PartyInverseTable is the table name for the Party entity.
	// It exists in this package in order to avoid circular dependency with the "party" package.
	PartyInverseTable = "parties"
	// PartyColumn is the table column denoting the party relation/edge.
	PartyColumn = "party_party_contact_meches"
	// PersonTable is the table the holds the person relation/edge.
	PersonTable = "party_contact_meches"
	// PersonInverseTable is the table name for the Person entity.
	// It exists in this package in order to avoid circular dependency with the "person" package.
	PersonInverseTable = "persons"
	// PersonColumn is the table column denoting the person relation/edge.
	PersonColumn = "person_party_contact_meches"
	// PartyRoleTable is the table the holds the party_role relation/edge.
	PartyRoleTable = "party_contact_meches"
	// PartyRoleInverseTable is the table name for the PartyRole entity.
	// It exists in this package in order to avoid circular dependency with the "partyrole" package.
	PartyRoleInverseTable = "party_roles"
	// PartyRoleColumn is the table column denoting the party_role relation/edge.
	PartyRoleColumn = "party_role_party_contact_meches"
	// RoleTypeTable is the table the holds the role_type relation/edge.
	RoleTypeTable = "party_contact_meches"
	// RoleTypeInverseTable is the table name for the RoleType entity.
	// It exists in this package in order to avoid circular dependency with the "roletype" package.
	RoleTypeInverseTable = "role_types"
	// RoleTypeColumn is the table column denoting the role_type relation/edge.
	RoleTypeColumn = "role_type_party_contact_meches"
)

// Columns holds all SQL columns for partycontactmech fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldStringRef,
	FieldContactMechID,
	FieldFromDate,
	FieldThruDate,
	FieldAllowSolicitation,
	FieldExtension,
	FieldVerified,
	FieldComments,
	FieldYearsWithContactMech,
	FieldMonthsWithContactMech,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "party_contact_meches"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"party_party_contact_meches",
	"party_role_party_contact_meches",
	"person_party_contact_meches",
	"role_type_party_contact_meches",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// DefaultFromDate holds the default value on creation for the "from_date" field.
	DefaultFromDate func() time.Time
	// DefaultThruDate holds the default value on creation for the "thru_date" field.
	DefaultThruDate func() time.Time
)

// AllowSolicitation defines the type for the "allow_solicitation" enum field.
type AllowSolicitation string

// AllowSolicitation values.
const (
	AllowSolicitationYes     AllowSolicitation = "Yes"
	AllowSolicitationNo      AllowSolicitation = "No"
	AllowSolicitationUnknown AllowSolicitation = "Unknown"
)

func (as AllowSolicitation) String() string {
	return string(as)
}

// AllowSolicitationValidator is a validator for the "allow_solicitation" field enum values. It is called by the builders before save.
func AllowSolicitationValidator(as AllowSolicitation) error {
	switch as {
	case AllowSolicitationYes, AllowSolicitationNo, AllowSolicitationUnknown:
		return nil
	default:
		return fmt.Errorf("partycontactmech: invalid enum value for allow_solicitation field: %q", as)
	}
}

// Verified defines the type for the "verified" enum field.
type Verified string

// Verified values.
const (
	VerifiedYes     Verified = "Yes"
	VerifiedNo      Verified = "No"
	VerifiedUnknown Verified = "Unknown"
)

func (v Verified) String() string {
	return string(v)
}

// VerifiedValidator is a validator for the "verified" field enum values. It is called by the builders before save.
func VerifiedValidator(v Verified) error {
	switch v {
	case VerifiedYes, VerifiedNo, VerifiedUnknown:
		return nil
	default:
		return fmt.Errorf("partycontactmech: invalid enum value for verified field: %q", v)
	}
}
