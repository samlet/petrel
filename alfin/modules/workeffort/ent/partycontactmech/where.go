// Code generated by entc, DO NOT EDIT.

package partycontactmech

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// StringRef applies equality check predicate on the "string_ref" field. It's identical to StringRefEQ.
func StringRef(v string) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStringRef), v))
	})
}

// ContactMechID applies equality check predicate on the "contact_mech_id" field. It's identical to ContactMechIDEQ.
func ContactMechID(v int) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldContactMechID), v))
	})
}

// FromDate applies equality check predicate on the "from_date" field. It's identical to FromDateEQ.
func FromDate(v time.Time) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFromDate), v))
	})
}

// ThruDate applies equality check predicate on the "thru_date" field. It's identical to ThruDateEQ.
func ThruDate(v time.Time) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldThruDate), v))
	})
}

// Extension applies equality check predicate on the "extension" field. It's identical to ExtensionEQ.
func Extension(v string) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExtension), v))
	})
}

// Comments applies equality check predicate on the "comments" field. It's identical to CommentsEQ.
func Comments(v string) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldComments), v))
	})
}

// YearsWithContactMech applies equality check predicate on the "years_with_contact_mech" field. It's identical to YearsWithContactMechEQ.
func YearsWithContactMech(v int) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldYearsWithContactMech), v))
	})
}

// MonthsWithContactMech applies equality check predicate on the "months_with_contact_mech" field. It's identical to MonthsWithContactMechEQ.
func MonthsWithContactMech(v int) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMonthsWithContactMech), v))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.PartyContactMech {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PartyContactMech(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.PartyContactMech {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PartyContactMech(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), v))
	})
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.PartyContactMech {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PartyContactMech(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.PartyContactMech {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PartyContactMech(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateTime), v))
	})
}

// StringRefEQ applies the EQ predicate on the "string_ref" field.
func StringRefEQ(v string) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStringRef), v))
	})
}

// StringRefNEQ applies the NEQ predicate on the "string_ref" field.
func StringRefNEQ(v string) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStringRef), v))
	})
}

// StringRefIn applies the In predicate on the "string_ref" field.
func StringRefIn(vs ...string) predicate.PartyContactMech {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PartyContactMech(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStringRef), v...))
	})
}

// StringRefNotIn applies the NotIn predicate on the "string_ref" field.
func StringRefNotIn(vs ...string) predicate.PartyContactMech {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PartyContactMech(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStringRef), v...))
	})
}

// StringRefGT applies the GT predicate on the "string_ref" field.
func StringRefGT(v string) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStringRef), v))
	})
}

// StringRefGTE applies the GTE predicate on the "string_ref" field.
func StringRefGTE(v string) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStringRef), v))
	})
}

// StringRefLT applies the LT predicate on the "string_ref" field.
func StringRefLT(v string) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStringRef), v))
	})
}

// StringRefLTE applies the LTE predicate on the "string_ref" field.
func StringRefLTE(v string) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStringRef), v))
	})
}

// StringRefContains applies the Contains predicate on the "string_ref" field.
func StringRefContains(v string) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStringRef), v))
	})
}

// StringRefHasPrefix applies the HasPrefix predicate on the "string_ref" field.
func StringRefHasPrefix(v string) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStringRef), v))
	})
}

// StringRefHasSuffix applies the HasSuffix predicate on the "string_ref" field.
func StringRefHasSuffix(v string) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStringRef), v))
	})
}

// StringRefIsNil applies the IsNil predicate on the "string_ref" field.
func StringRefIsNil() predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStringRef)))
	})
}

// StringRefNotNil applies the NotNil predicate on the "string_ref" field.
func StringRefNotNil() predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStringRef)))
	})
}

// StringRefEqualFold applies the EqualFold predicate on the "string_ref" field.
func StringRefEqualFold(v string) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStringRef), v))
	})
}

// StringRefContainsFold applies the ContainsFold predicate on the "string_ref" field.
func StringRefContainsFold(v string) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStringRef), v))
	})
}

// ContactMechIDEQ applies the EQ predicate on the "contact_mech_id" field.
func ContactMechIDEQ(v int) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldContactMechID), v))
	})
}

// ContactMechIDNEQ applies the NEQ predicate on the "contact_mech_id" field.
func ContactMechIDNEQ(v int) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldContactMechID), v))
	})
}

// ContactMechIDIn applies the In predicate on the "contact_mech_id" field.
func ContactMechIDIn(vs ...int) predicate.PartyContactMech {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PartyContactMech(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldContactMechID), v...))
	})
}

// ContactMechIDNotIn applies the NotIn predicate on the "contact_mech_id" field.
func ContactMechIDNotIn(vs ...int) predicate.PartyContactMech {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PartyContactMech(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldContactMechID), v...))
	})
}

// ContactMechIDGT applies the GT predicate on the "contact_mech_id" field.
func ContactMechIDGT(v int) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldContactMechID), v))
	})
}

// ContactMechIDGTE applies the GTE predicate on the "contact_mech_id" field.
func ContactMechIDGTE(v int) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldContactMechID), v))
	})
}

// ContactMechIDLT applies the LT predicate on the "contact_mech_id" field.
func ContactMechIDLT(v int) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldContactMechID), v))
	})
}

// ContactMechIDLTE applies the LTE predicate on the "contact_mech_id" field.
func ContactMechIDLTE(v int) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldContactMechID), v))
	})
}

// FromDateEQ applies the EQ predicate on the "from_date" field.
func FromDateEQ(v time.Time) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFromDate), v))
	})
}

// FromDateNEQ applies the NEQ predicate on the "from_date" field.
func FromDateNEQ(v time.Time) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFromDate), v))
	})
}

// FromDateIn applies the In predicate on the "from_date" field.
func FromDateIn(vs ...time.Time) predicate.PartyContactMech {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PartyContactMech(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFromDate), v...))
	})
}

// FromDateNotIn applies the NotIn predicate on the "from_date" field.
func FromDateNotIn(vs ...time.Time) predicate.PartyContactMech {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PartyContactMech(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFromDate), v...))
	})
}

// FromDateGT applies the GT predicate on the "from_date" field.
func FromDateGT(v time.Time) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFromDate), v))
	})
}

// FromDateGTE applies the GTE predicate on the "from_date" field.
func FromDateGTE(v time.Time) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFromDate), v))
	})
}

// FromDateLT applies the LT predicate on the "from_date" field.
func FromDateLT(v time.Time) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFromDate), v))
	})
}

// FromDateLTE applies the LTE predicate on the "from_date" field.
func FromDateLTE(v time.Time) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFromDate), v))
	})
}

// ThruDateEQ applies the EQ predicate on the "thru_date" field.
func ThruDateEQ(v time.Time) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldThruDate), v))
	})
}

// ThruDateNEQ applies the NEQ predicate on the "thru_date" field.
func ThruDateNEQ(v time.Time) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldThruDate), v))
	})
}

// ThruDateIn applies the In predicate on the "thru_date" field.
func ThruDateIn(vs ...time.Time) predicate.PartyContactMech {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PartyContactMech(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldThruDate), v...))
	})
}

// ThruDateNotIn applies the NotIn predicate on the "thru_date" field.
func ThruDateNotIn(vs ...time.Time) predicate.PartyContactMech {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PartyContactMech(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldThruDate), v...))
	})
}

// ThruDateGT applies the GT predicate on the "thru_date" field.
func ThruDateGT(v time.Time) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldThruDate), v))
	})
}

// ThruDateGTE applies the GTE predicate on the "thru_date" field.
func ThruDateGTE(v time.Time) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldThruDate), v))
	})
}

// ThruDateLT applies the LT predicate on the "thru_date" field.
func ThruDateLT(v time.Time) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldThruDate), v))
	})
}

// ThruDateLTE applies the LTE predicate on the "thru_date" field.
func ThruDateLTE(v time.Time) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldThruDate), v))
	})
}

// ThruDateIsNil applies the IsNil predicate on the "thru_date" field.
func ThruDateIsNil() predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldThruDate)))
	})
}

// ThruDateNotNil applies the NotNil predicate on the "thru_date" field.
func ThruDateNotNil() predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldThruDate)))
	})
}

// AllowSolicitationEQ applies the EQ predicate on the "allow_solicitation" field.
func AllowSolicitationEQ(v AllowSolicitation) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAllowSolicitation), v))
	})
}

// AllowSolicitationNEQ applies the NEQ predicate on the "allow_solicitation" field.
func AllowSolicitationNEQ(v AllowSolicitation) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAllowSolicitation), v))
	})
}

// AllowSolicitationIn applies the In predicate on the "allow_solicitation" field.
func AllowSolicitationIn(vs ...AllowSolicitation) predicate.PartyContactMech {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PartyContactMech(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAllowSolicitation), v...))
	})
}

// AllowSolicitationNotIn applies the NotIn predicate on the "allow_solicitation" field.
func AllowSolicitationNotIn(vs ...AllowSolicitation) predicate.PartyContactMech {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PartyContactMech(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAllowSolicitation), v...))
	})
}

// AllowSolicitationIsNil applies the IsNil predicate on the "allow_solicitation" field.
func AllowSolicitationIsNil() predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAllowSolicitation)))
	})
}

// AllowSolicitationNotNil applies the NotNil predicate on the "allow_solicitation" field.
func AllowSolicitationNotNil() predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAllowSolicitation)))
	})
}

// ExtensionEQ applies the EQ predicate on the "extension" field.
func ExtensionEQ(v string) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExtension), v))
	})
}

// ExtensionNEQ applies the NEQ predicate on the "extension" field.
func ExtensionNEQ(v string) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldExtension), v))
	})
}

// ExtensionIn applies the In predicate on the "extension" field.
func ExtensionIn(vs ...string) predicate.PartyContactMech {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PartyContactMech(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldExtension), v...))
	})
}

// ExtensionNotIn applies the NotIn predicate on the "extension" field.
func ExtensionNotIn(vs ...string) predicate.PartyContactMech {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PartyContactMech(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldExtension), v...))
	})
}

// ExtensionGT applies the GT predicate on the "extension" field.
func ExtensionGT(v string) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldExtension), v))
	})
}

// ExtensionGTE applies the GTE predicate on the "extension" field.
func ExtensionGTE(v string) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldExtension), v))
	})
}

// ExtensionLT applies the LT predicate on the "extension" field.
func ExtensionLT(v string) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldExtension), v))
	})
}

// ExtensionLTE applies the LTE predicate on the "extension" field.
func ExtensionLTE(v string) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldExtension), v))
	})
}

// ExtensionContains applies the Contains predicate on the "extension" field.
func ExtensionContains(v string) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldExtension), v))
	})
}

// ExtensionHasPrefix applies the HasPrefix predicate on the "extension" field.
func ExtensionHasPrefix(v string) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldExtension), v))
	})
}

// ExtensionHasSuffix applies the HasSuffix predicate on the "extension" field.
func ExtensionHasSuffix(v string) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldExtension), v))
	})
}

// ExtensionIsNil applies the IsNil predicate on the "extension" field.
func ExtensionIsNil() predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldExtension)))
	})
}

// ExtensionNotNil applies the NotNil predicate on the "extension" field.
func ExtensionNotNil() predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldExtension)))
	})
}

// ExtensionEqualFold applies the EqualFold predicate on the "extension" field.
func ExtensionEqualFold(v string) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldExtension), v))
	})
}

// ExtensionContainsFold applies the ContainsFold predicate on the "extension" field.
func ExtensionContainsFold(v string) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldExtension), v))
	})
}

// VerifiedEQ applies the EQ predicate on the "verified" field.
func VerifiedEQ(v Verified) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVerified), v))
	})
}

// VerifiedNEQ applies the NEQ predicate on the "verified" field.
func VerifiedNEQ(v Verified) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldVerified), v))
	})
}

// VerifiedIn applies the In predicate on the "verified" field.
func VerifiedIn(vs ...Verified) predicate.PartyContactMech {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PartyContactMech(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldVerified), v...))
	})
}

// VerifiedNotIn applies the NotIn predicate on the "verified" field.
func VerifiedNotIn(vs ...Verified) predicate.PartyContactMech {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PartyContactMech(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldVerified), v...))
	})
}

// VerifiedIsNil applies the IsNil predicate on the "verified" field.
func VerifiedIsNil() predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldVerified)))
	})
}

// VerifiedNotNil applies the NotNil predicate on the "verified" field.
func VerifiedNotNil() predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldVerified)))
	})
}

// CommentsEQ applies the EQ predicate on the "comments" field.
func CommentsEQ(v string) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldComments), v))
	})
}

// CommentsNEQ applies the NEQ predicate on the "comments" field.
func CommentsNEQ(v string) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldComments), v))
	})
}

// CommentsIn applies the In predicate on the "comments" field.
func CommentsIn(vs ...string) predicate.PartyContactMech {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PartyContactMech(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldComments), v...))
	})
}

// CommentsNotIn applies the NotIn predicate on the "comments" field.
func CommentsNotIn(vs ...string) predicate.PartyContactMech {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PartyContactMech(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldComments), v...))
	})
}

// CommentsGT applies the GT predicate on the "comments" field.
func CommentsGT(v string) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldComments), v))
	})
}

// CommentsGTE applies the GTE predicate on the "comments" field.
func CommentsGTE(v string) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldComments), v))
	})
}

// CommentsLT applies the LT predicate on the "comments" field.
func CommentsLT(v string) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldComments), v))
	})
}

// CommentsLTE applies the LTE predicate on the "comments" field.
func CommentsLTE(v string) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldComments), v))
	})
}

// CommentsContains applies the Contains predicate on the "comments" field.
func CommentsContains(v string) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldComments), v))
	})
}

// CommentsHasPrefix applies the HasPrefix predicate on the "comments" field.
func CommentsHasPrefix(v string) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldComments), v))
	})
}

// CommentsHasSuffix applies the HasSuffix predicate on the "comments" field.
func CommentsHasSuffix(v string) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldComments), v))
	})
}

// CommentsIsNil applies the IsNil predicate on the "comments" field.
func CommentsIsNil() predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldComments)))
	})
}

// CommentsNotNil applies the NotNil predicate on the "comments" field.
func CommentsNotNil() predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldComments)))
	})
}

// CommentsEqualFold applies the EqualFold predicate on the "comments" field.
func CommentsEqualFold(v string) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldComments), v))
	})
}

// CommentsContainsFold applies the ContainsFold predicate on the "comments" field.
func CommentsContainsFold(v string) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldComments), v))
	})
}

// YearsWithContactMechEQ applies the EQ predicate on the "years_with_contact_mech" field.
func YearsWithContactMechEQ(v int) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldYearsWithContactMech), v))
	})
}

// YearsWithContactMechNEQ applies the NEQ predicate on the "years_with_contact_mech" field.
func YearsWithContactMechNEQ(v int) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldYearsWithContactMech), v))
	})
}

// YearsWithContactMechIn applies the In predicate on the "years_with_contact_mech" field.
func YearsWithContactMechIn(vs ...int) predicate.PartyContactMech {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PartyContactMech(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldYearsWithContactMech), v...))
	})
}

// YearsWithContactMechNotIn applies the NotIn predicate on the "years_with_contact_mech" field.
func YearsWithContactMechNotIn(vs ...int) predicate.PartyContactMech {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PartyContactMech(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldYearsWithContactMech), v...))
	})
}

// YearsWithContactMechGT applies the GT predicate on the "years_with_contact_mech" field.
func YearsWithContactMechGT(v int) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldYearsWithContactMech), v))
	})
}

// YearsWithContactMechGTE applies the GTE predicate on the "years_with_contact_mech" field.
func YearsWithContactMechGTE(v int) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldYearsWithContactMech), v))
	})
}

// YearsWithContactMechLT applies the LT predicate on the "years_with_contact_mech" field.
func YearsWithContactMechLT(v int) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldYearsWithContactMech), v))
	})
}

// YearsWithContactMechLTE applies the LTE predicate on the "years_with_contact_mech" field.
func YearsWithContactMechLTE(v int) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldYearsWithContactMech), v))
	})
}

// YearsWithContactMechIsNil applies the IsNil predicate on the "years_with_contact_mech" field.
func YearsWithContactMechIsNil() predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldYearsWithContactMech)))
	})
}

// YearsWithContactMechNotNil applies the NotNil predicate on the "years_with_contact_mech" field.
func YearsWithContactMechNotNil() predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldYearsWithContactMech)))
	})
}

// MonthsWithContactMechEQ applies the EQ predicate on the "months_with_contact_mech" field.
func MonthsWithContactMechEQ(v int) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMonthsWithContactMech), v))
	})
}

// MonthsWithContactMechNEQ applies the NEQ predicate on the "months_with_contact_mech" field.
func MonthsWithContactMechNEQ(v int) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMonthsWithContactMech), v))
	})
}

// MonthsWithContactMechIn applies the In predicate on the "months_with_contact_mech" field.
func MonthsWithContactMechIn(vs ...int) predicate.PartyContactMech {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PartyContactMech(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMonthsWithContactMech), v...))
	})
}

// MonthsWithContactMechNotIn applies the NotIn predicate on the "months_with_contact_mech" field.
func MonthsWithContactMechNotIn(vs ...int) predicate.PartyContactMech {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PartyContactMech(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMonthsWithContactMech), v...))
	})
}

// MonthsWithContactMechGT applies the GT predicate on the "months_with_contact_mech" field.
func MonthsWithContactMechGT(v int) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMonthsWithContactMech), v))
	})
}

// MonthsWithContactMechGTE applies the GTE predicate on the "months_with_contact_mech" field.
func MonthsWithContactMechGTE(v int) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMonthsWithContactMech), v))
	})
}

// MonthsWithContactMechLT applies the LT predicate on the "months_with_contact_mech" field.
func MonthsWithContactMechLT(v int) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMonthsWithContactMech), v))
	})
}

// MonthsWithContactMechLTE applies the LTE predicate on the "months_with_contact_mech" field.
func MonthsWithContactMechLTE(v int) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMonthsWithContactMech), v))
	})
}

// MonthsWithContactMechIsNil applies the IsNil predicate on the "months_with_contact_mech" field.
func MonthsWithContactMechIsNil() predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMonthsWithContactMech)))
	})
}

// MonthsWithContactMechNotNil applies the NotNil predicate on the "months_with_contact_mech" field.
func MonthsWithContactMechNotNil() predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMonthsWithContactMech)))
	})
}

// HasParty applies the HasEdge predicate on the "party" edge.
func HasParty() predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PartyTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PartyTable, PartyColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPartyWith applies the HasEdge predicate on the "party" edge with a given conditions (other predicates).
func HasPartyWith(preds ...predicate.Party) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PartyInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PartyTable, PartyColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPerson applies the HasEdge predicate on the "person" edge.
func HasPerson() predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PersonTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PersonTable, PersonColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPersonWith applies the HasEdge predicate on the "person" edge with a given conditions (other predicates).
func HasPersonWith(preds ...predicate.Person) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PersonInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PersonTable, PersonColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPartyRole applies the HasEdge predicate on the "party_role" edge.
func HasPartyRole() predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PartyRoleTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PartyRoleTable, PartyRoleColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPartyRoleWith applies the HasEdge predicate on the "party_role" edge with a given conditions (other predicates).
func HasPartyRoleWith(preds ...predicate.PartyRole) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PartyRoleInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PartyRoleTable, PartyRoleColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRoleType applies the HasEdge predicate on the "role_type" edge.
func HasRoleType() predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RoleTypeTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RoleTypeTable, RoleTypeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRoleTypeWith applies the HasEdge predicate on the "role_type" edge with a given conditions (other predicates).
func HasRoleTypeWith(preds ...predicate.RoleType) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RoleTypeInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RoleTypeTable, RoleTypeColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PartyContactMech) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PartyContactMech) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PartyContactMech) predicate.PartyContactMech {
	return predicate.PartyContactMech(func(s *sql.Selector) {
		p(s.Not())
	})
}
