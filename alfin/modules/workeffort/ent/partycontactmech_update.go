// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/party"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/partycontactmech"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/partyrole"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/person"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/predicate"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/roletype"
)

// PartyContactMechUpdate is the builder for updating PartyContactMech entities.
type PartyContactMechUpdate struct {
	config
	hooks    []Hook
	mutation *PartyContactMechMutation
}

// Where adds a new predicate for the PartyContactMechUpdate builder.
func (pcmu *PartyContactMechUpdate) Where(ps ...predicate.PartyContactMech) *PartyContactMechUpdate {
	pcmu.mutation.predicates = append(pcmu.mutation.predicates, ps...)
	return pcmu
}

// SetStringRef sets the "string_ref" field.
func (pcmu *PartyContactMechUpdate) SetStringRef(s string) *PartyContactMechUpdate {
	pcmu.mutation.SetStringRef(s)
	return pcmu
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (pcmu *PartyContactMechUpdate) SetNillableStringRef(s *string) *PartyContactMechUpdate {
	if s != nil {
		pcmu.SetStringRef(*s)
	}
	return pcmu
}

// ClearStringRef clears the value of the "string_ref" field.
func (pcmu *PartyContactMechUpdate) ClearStringRef() *PartyContactMechUpdate {
	pcmu.mutation.ClearStringRef()
	return pcmu
}

// SetContactMechID sets the "contact_mech_id" field.
func (pcmu *PartyContactMechUpdate) SetContactMechID(i int) *PartyContactMechUpdate {
	pcmu.mutation.ResetContactMechID()
	pcmu.mutation.SetContactMechID(i)
	return pcmu
}

// AddContactMechID adds i to the "contact_mech_id" field.
func (pcmu *PartyContactMechUpdate) AddContactMechID(i int) *PartyContactMechUpdate {
	pcmu.mutation.AddContactMechID(i)
	return pcmu
}

// SetFromDate sets the "from_date" field.
func (pcmu *PartyContactMechUpdate) SetFromDate(t time.Time) *PartyContactMechUpdate {
	pcmu.mutation.SetFromDate(t)
	return pcmu
}

// SetNillableFromDate sets the "from_date" field if the given value is not nil.
func (pcmu *PartyContactMechUpdate) SetNillableFromDate(t *time.Time) *PartyContactMechUpdate {
	if t != nil {
		pcmu.SetFromDate(*t)
	}
	return pcmu
}

// SetThruDate sets the "thru_date" field.
func (pcmu *PartyContactMechUpdate) SetThruDate(t time.Time) *PartyContactMechUpdate {
	pcmu.mutation.SetThruDate(t)
	return pcmu
}

// SetNillableThruDate sets the "thru_date" field if the given value is not nil.
func (pcmu *PartyContactMechUpdate) SetNillableThruDate(t *time.Time) *PartyContactMechUpdate {
	if t != nil {
		pcmu.SetThruDate(*t)
	}
	return pcmu
}

// ClearThruDate clears the value of the "thru_date" field.
func (pcmu *PartyContactMechUpdate) ClearThruDate() *PartyContactMechUpdate {
	pcmu.mutation.ClearThruDate()
	return pcmu
}

// SetAllowSolicitation sets the "allow_solicitation" field.
func (pcmu *PartyContactMechUpdate) SetAllowSolicitation(ps partycontactmech.AllowSolicitation) *PartyContactMechUpdate {
	pcmu.mutation.SetAllowSolicitation(ps)
	return pcmu
}

// SetNillableAllowSolicitation sets the "allow_solicitation" field if the given value is not nil.
func (pcmu *PartyContactMechUpdate) SetNillableAllowSolicitation(ps *partycontactmech.AllowSolicitation) *PartyContactMechUpdate {
	if ps != nil {
		pcmu.SetAllowSolicitation(*ps)
	}
	return pcmu
}

// ClearAllowSolicitation clears the value of the "allow_solicitation" field.
func (pcmu *PartyContactMechUpdate) ClearAllowSolicitation() *PartyContactMechUpdate {
	pcmu.mutation.ClearAllowSolicitation()
	return pcmu
}

// SetExtension sets the "extension" field.
func (pcmu *PartyContactMechUpdate) SetExtension(s string) *PartyContactMechUpdate {
	pcmu.mutation.SetExtension(s)
	return pcmu
}

// SetNillableExtension sets the "extension" field if the given value is not nil.
func (pcmu *PartyContactMechUpdate) SetNillableExtension(s *string) *PartyContactMechUpdate {
	if s != nil {
		pcmu.SetExtension(*s)
	}
	return pcmu
}

// ClearExtension clears the value of the "extension" field.
func (pcmu *PartyContactMechUpdate) ClearExtension() *PartyContactMechUpdate {
	pcmu.mutation.ClearExtension()
	return pcmu
}

// SetVerified sets the "verified" field.
func (pcmu *PartyContactMechUpdate) SetVerified(pa partycontactmech.Verified) *PartyContactMechUpdate {
	pcmu.mutation.SetVerified(pa)
	return pcmu
}

// SetNillableVerified sets the "verified" field if the given value is not nil.
func (pcmu *PartyContactMechUpdate) SetNillableVerified(pa *partycontactmech.Verified) *PartyContactMechUpdate {
	if pa != nil {
		pcmu.SetVerified(*pa)
	}
	return pcmu
}

// ClearVerified clears the value of the "verified" field.
func (pcmu *PartyContactMechUpdate) ClearVerified() *PartyContactMechUpdate {
	pcmu.mutation.ClearVerified()
	return pcmu
}

// SetComments sets the "comments" field.
func (pcmu *PartyContactMechUpdate) SetComments(s string) *PartyContactMechUpdate {
	pcmu.mutation.SetComments(s)
	return pcmu
}

// SetNillableComments sets the "comments" field if the given value is not nil.
func (pcmu *PartyContactMechUpdate) SetNillableComments(s *string) *PartyContactMechUpdate {
	if s != nil {
		pcmu.SetComments(*s)
	}
	return pcmu
}

// ClearComments clears the value of the "comments" field.
func (pcmu *PartyContactMechUpdate) ClearComments() *PartyContactMechUpdate {
	pcmu.mutation.ClearComments()
	return pcmu
}

// SetYearsWithContactMech sets the "years_with_contact_mech" field.
func (pcmu *PartyContactMechUpdate) SetYearsWithContactMech(i int) *PartyContactMechUpdate {
	pcmu.mutation.ResetYearsWithContactMech()
	pcmu.mutation.SetYearsWithContactMech(i)
	return pcmu
}

// SetNillableYearsWithContactMech sets the "years_with_contact_mech" field if the given value is not nil.
func (pcmu *PartyContactMechUpdate) SetNillableYearsWithContactMech(i *int) *PartyContactMechUpdate {
	if i != nil {
		pcmu.SetYearsWithContactMech(*i)
	}
	return pcmu
}

// AddYearsWithContactMech adds i to the "years_with_contact_mech" field.
func (pcmu *PartyContactMechUpdate) AddYearsWithContactMech(i int) *PartyContactMechUpdate {
	pcmu.mutation.AddYearsWithContactMech(i)
	return pcmu
}

// ClearYearsWithContactMech clears the value of the "years_with_contact_mech" field.
func (pcmu *PartyContactMechUpdate) ClearYearsWithContactMech() *PartyContactMechUpdate {
	pcmu.mutation.ClearYearsWithContactMech()
	return pcmu
}

// SetMonthsWithContactMech sets the "months_with_contact_mech" field.
func (pcmu *PartyContactMechUpdate) SetMonthsWithContactMech(i int) *PartyContactMechUpdate {
	pcmu.mutation.ResetMonthsWithContactMech()
	pcmu.mutation.SetMonthsWithContactMech(i)
	return pcmu
}

// SetNillableMonthsWithContactMech sets the "months_with_contact_mech" field if the given value is not nil.
func (pcmu *PartyContactMechUpdate) SetNillableMonthsWithContactMech(i *int) *PartyContactMechUpdate {
	if i != nil {
		pcmu.SetMonthsWithContactMech(*i)
	}
	return pcmu
}

// AddMonthsWithContactMech adds i to the "months_with_contact_mech" field.
func (pcmu *PartyContactMechUpdate) AddMonthsWithContactMech(i int) *PartyContactMechUpdate {
	pcmu.mutation.AddMonthsWithContactMech(i)
	return pcmu
}

// ClearMonthsWithContactMech clears the value of the "months_with_contact_mech" field.
func (pcmu *PartyContactMechUpdate) ClearMonthsWithContactMech() *PartyContactMechUpdate {
	pcmu.mutation.ClearMonthsWithContactMech()
	return pcmu
}

// SetPartyID sets the "party" edge to the Party entity by ID.
func (pcmu *PartyContactMechUpdate) SetPartyID(id int) *PartyContactMechUpdate {
	pcmu.mutation.SetPartyID(id)
	return pcmu
}

// SetNillablePartyID sets the "party" edge to the Party entity by ID if the given value is not nil.
func (pcmu *PartyContactMechUpdate) SetNillablePartyID(id *int) *PartyContactMechUpdate {
	if id != nil {
		pcmu = pcmu.SetPartyID(*id)
	}
	return pcmu
}

// SetParty sets the "party" edge to the Party entity.
func (pcmu *PartyContactMechUpdate) SetParty(p *Party) *PartyContactMechUpdate {
	return pcmu.SetPartyID(p.ID)
}

// SetPersonID sets the "person" edge to the Person entity by ID.
func (pcmu *PartyContactMechUpdate) SetPersonID(id int) *PartyContactMechUpdate {
	pcmu.mutation.SetPersonID(id)
	return pcmu
}

// SetNillablePersonID sets the "person" edge to the Person entity by ID if the given value is not nil.
func (pcmu *PartyContactMechUpdate) SetNillablePersonID(id *int) *PartyContactMechUpdate {
	if id != nil {
		pcmu = pcmu.SetPersonID(*id)
	}
	return pcmu
}

// SetPerson sets the "person" edge to the Person entity.
func (pcmu *PartyContactMechUpdate) SetPerson(p *Person) *PartyContactMechUpdate {
	return pcmu.SetPersonID(p.ID)
}

// SetPartyRoleID sets the "party_role" edge to the PartyRole entity by ID.
func (pcmu *PartyContactMechUpdate) SetPartyRoleID(id int) *PartyContactMechUpdate {
	pcmu.mutation.SetPartyRoleID(id)
	return pcmu
}

// SetNillablePartyRoleID sets the "party_role" edge to the PartyRole entity by ID if the given value is not nil.
func (pcmu *PartyContactMechUpdate) SetNillablePartyRoleID(id *int) *PartyContactMechUpdate {
	if id != nil {
		pcmu = pcmu.SetPartyRoleID(*id)
	}
	return pcmu
}

// SetPartyRole sets the "party_role" edge to the PartyRole entity.
func (pcmu *PartyContactMechUpdate) SetPartyRole(p *PartyRole) *PartyContactMechUpdate {
	return pcmu.SetPartyRoleID(p.ID)
}

// SetRoleTypeID sets the "role_type" edge to the RoleType entity by ID.
func (pcmu *PartyContactMechUpdate) SetRoleTypeID(id int) *PartyContactMechUpdate {
	pcmu.mutation.SetRoleTypeID(id)
	return pcmu
}

// SetNillableRoleTypeID sets the "role_type" edge to the RoleType entity by ID if the given value is not nil.
func (pcmu *PartyContactMechUpdate) SetNillableRoleTypeID(id *int) *PartyContactMechUpdate {
	if id != nil {
		pcmu = pcmu.SetRoleTypeID(*id)
	}
	return pcmu
}

// SetRoleType sets the "role_type" edge to the RoleType entity.
func (pcmu *PartyContactMechUpdate) SetRoleType(r *RoleType) *PartyContactMechUpdate {
	return pcmu.SetRoleTypeID(r.ID)
}

// Mutation returns the PartyContactMechMutation object of the builder.
func (pcmu *PartyContactMechUpdate) Mutation() *PartyContactMechMutation {
	return pcmu.mutation
}

// ClearParty clears the "party" edge to the Party entity.
func (pcmu *PartyContactMechUpdate) ClearParty() *PartyContactMechUpdate {
	pcmu.mutation.ClearParty()
	return pcmu
}

// ClearPerson clears the "person" edge to the Person entity.
func (pcmu *PartyContactMechUpdate) ClearPerson() *PartyContactMechUpdate {
	pcmu.mutation.ClearPerson()
	return pcmu
}

// ClearPartyRole clears the "party_role" edge to the PartyRole entity.
func (pcmu *PartyContactMechUpdate) ClearPartyRole() *PartyContactMechUpdate {
	pcmu.mutation.ClearPartyRole()
	return pcmu
}

// ClearRoleType clears the "role_type" edge to the RoleType entity.
func (pcmu *PartyContactMechUpdate) ClearRoleType() *PartyContactMechUpdate {
	pcmu.mutation.ClearRoleType()
	return pcmu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pcmu *PartyContactMechUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	pcmu.defaults()
	if len(pcmu.hooks) == 0 {
		if err = pcmu.check(); err != nil {
			return 0, err
		}
		affected, err = pcmu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PartyContactMechMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pcmu.check(); err != nil {
				return 0, err
			}
			pcmu.mutation = mutation
			affected, err = pcmu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pcmu.hooks) - 1; i >= 0; i-- {
			mut = pcmu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pcmu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pcmu *PartyContactMechUpdate) SaveX(ctx context.Context) int {
	affected, err := pcmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pcmu *PartyContactMechUpdate) Exec(ctx context.Context) error {
	_, err := pcmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcmu *PartyContactMechUpdate) ExecX(ctx context.Context) {
	if err := pcmu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pcmu *PartyContactMechUpdate) defaults() {
	if _, ok := pcmu.mutation.UpdateTime(); !ok {
		v := partycontactmech.UpdateDefaultUpdateTime()
		pcmu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pcmu *PartyContactMechUpdate) check() error {
	if v, ok := pcmu.mutation.AllowSolicitation(); ok {
		if err := partycontactmech.AllowSolicitationValidator(v); err != nil {
			return &ValidationError{Name: "allow_solicitation", err: fmt.Errorf("ent: validator failed for field \"allow_solicitation\": %w", err)}
		}
	}
	if v, ok := pcmu.mutation.Verified(); ok {
		if err := partycontactmech.VerifiedValidator(v); err != nil {
			return &ValidationError{Name: "verified", err: fmt.Errorf("ent: validator failed for field \"verified\": %w", err)}
		}
	}
	return nil
}

func (pcmu *PartyContactMechUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   partycontactmech.Table,
			Columns: partycontactmech.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: partycontactmech.FieldID,
			},
		},
	}
	if ps := pcmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pcmu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: partycontactmech.FieldUpdateTime,
		})
	}
	if value, ok := pcmu.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: partycontactmech.FieldStringRef,
		})
	}
	if pcmu.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: partycontactmech.FieldStringRef,
		})
	}
	if value, ok := pcmu.mutation.ContactMechID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: partycontactmech.FieldContactMechID,
		})
	}
	if value, ok := pcmu.mutation.AddedContactMechID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: partycontactmech.FieldContactMechID,
		})
	}
	if value, ok := pcmu.mutation.FromDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: partycontactmech.FieldFromDate,
		})
	}
	if value, ok := pcmu.mutation.ThruDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: partycontactmech.FieldThruDate,
		})
	}
	if pcmu.mutation.ThruDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: partycontactmech.FieldThruDate,
		})
	}
	if value, ok := pcmu.mutation.AllowSolicitation(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: partycontactmech.FieldAllowSolicitation,
		})
	}
	if pcmu.mutation.AllowSolicitationCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: partycontactmech.FieldAllowSolicitation,
		})
	}
	if value, ok := pcmu.mutation.Extension(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: partycontactmech.FieldExtension,
		})
	}
	if pcmu.mutation.ExtensionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: partycontactmech.FieldExtension,
		})
	}
	if value, ok := pcmu.mutation.Verified(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: partycontactmech.FieldVerified,
		})
	}
	if pcmu.mutation.VerifiedCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: partycontactmech.FieldVerified,
		})
	}
	if value, ok := pcmu.mutation.Comments(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: partycontactmech.FieldComments,
		})
	}
	if pcmu.mutation.CommentsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: partycontactmech.FieldComments,
		})
	}
	if value, ok := pcmu.mutation.YearsWithContactMech(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: partycontactmech.FieldYearsWithContactMech,
		})
	}
	if value, ok := pcmu.mutation.AddedYearsWithContactMech(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: partycontactmech.FieldYearsWithContactMech,
		})
	}
	if pcmu.mutation.YearsWithContactMechCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: partycontactmech.FieldYearsWithContactMech,
		})
	}
	if value, ok := pcmu.mutation.MonthsWithContactMech(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: partycontactmech.FieldMonthsWithContactMech,
		})
	}
	if value, ok := pcmu.mutation.AddedMonthsWithContactMech(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: partycontactmech.FieldMonthsWithContactMech,
		})
	}
	if pcmu.mutation.MonthsWithContactMechCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: partycontactmech.FieldMonthsWithContactMech,
		})
	}
	if pcmu.mutation.PartyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partycontactmech.PartyTable,
			Columns: []string{partycontactmech.PartyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: party.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcmu.mutation.PartyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partycontactmech.PartyTable,
			Columns: []string{partycontactmech.PartyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: party.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pcmu.mutation.PersonCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partycontactmech.PersonTable,
			Columns: []string{partycontactmech.PersonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: person.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcmu.mutation.PersonIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partycontactmech.PersonTable,
			Columns: []string{partycontactmech.PersonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: person.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pcmu.mutation.PartyRoleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partycontactmech.PartyRoleTable,
			Columns: []string{partycontactmech.PartyRoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partyrole.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcmu.mutation.PartyRoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partycontactmech.PartyRoleTable,
			Columns: []string{partycontactmech.PartyRoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partyrole.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pcmu.mutation.RoleTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partycontactmech.RoleTypeTable,
			Columns: []string{partycontactmech.RoleTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: roletype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcmu.mutation.RoleTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partycontactmech.RoleTypeTable,
			Columns: []string{partycontactmech.RoleTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: roletype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pcmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{partycontactmech.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// PartyContactMechUpdateOne is the builder for updating a single PartyContactMech entity.
type PartyContactMechUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PartyContactMechMutation
}

// SetStringRef sets the "string_ref" field.
func (pcmuo *PartyContactMechUpdateOne) SetStringRef(s string) *PartyContactMechUpdateOne {
	pcmuo.mutation.SetStringRef(s)
	return pcmuo
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (pcmuo *PartyContactMechUpdateOne) SetNillableStringRef(s *string) *PartyContactMechUpdateOne {
	if s != nil {
		pcmuo.SetStringRef(*s)
	}
	return pcmuo
}

// ClearStringRef clears the value of the "string_ref" field.
func (pcmuo *PartyContactMechUpdateOne) ClearStringRef() *PartyContactMechUpdateOne {
	pcmuo.mutation.ClearStringRef()
	return pcmuo
}

// SetContactMechID sets the "contact_mech_id" field.
func (pcmuo *PartyContactMechUpdateOne) SetContactMechID(i int) *PartyContactMechUpdateOne {
	pcmuo.mutation.ResetContactMechID()
	pcmuo.mutation.SetContactMechID(i)
	return pcmuo
}

// AddContactMechID adds i to the "contact_mech_id" field.
func (pcmuo *PartyContactMechUpdateOne) AddContactMechID(i int) *PartyContactMechUpdateOne {
	pcmuo.mutation.AddContactMechID(i)
	return pcmuo
}

// SetFromDate sets the "from_date" field.
func (pcmuo *PartyContactMechUpdateOne) SetFromDate(t time.Time) *PartyContactMechUpdateOne {
	pcmuo.mutation.SetFromDate(t)
	return pcmuo
}

// SetNillableFromDate sets the "from_date" field if the given value is not nil.
func (pcmuo *PartyContactMechUpdateOne) SetNillableFromDate(t *time.Time) *PartyContactMechUpdateOne {
	if t != nil {
		pcmuo.SetFromDate(*t)
	}
	return pcmuo
}

// SetThruDate sets the "thru_date" field.
func (pcmuo *PartyContactMechUpdateOne) SetThruDate(t time.Time) *PartyContactMechUpdateOne {
	pcmuo.mutation.SetThruDate(t)
	return pcmuo
}

// SetNillableThruDate sets the "thru_date" field if the given value is not nil.
func (pcmuo *PartyContactMechUpdateOne) SetNillableThruDate(t *time.Time) *PartyContactMechUpdateOne {
	if t != nil {
		pcmuo.SetThruDate(*t)
	}
	return pcmuo
}

// ClearThruDate clears the value of the "thru_date" field.
func (pcmuo *PartyContactMechUpdateOne) ClearThruDate() *PartyContactMechUpdateOne {
	pcmuo.mutation.ClearThruDate()
	return pcmuo
}

// SetAllowSolicitation sets the "allow_solicitation" field.
func (pcmuo *PartyContactMechUpdateOne) SetAllowSolicitation(ps partycontactmech.AllowSolicitation) *PartyContactMechUpdateOne {
	pcmuo.mutation.SetAllowSolicitation(ps)
	return pcmuo
}

// SetNillableAllowSolicitation sets the "allow_solicitation" field if the given value is not nil.
func (pcmuo *PartyContactMechUpdateOne) SetNillableAllowSolicitation(ps *partycontactmech.AllowSolicitation) *PartyContactMechUpdateOne {
	if ps != nil {
		pcmuo.SetAllowSolicitation(*ps)
	}
	return pcmuo
}

// ClearAllowSolicitation clears the value of the "allow_solicitation" field.
func (pcmuo *PartyContactMechUpdateOne) ClearAllowSolicitation() *PartyContactMechUpdateOne {
	pcmuo.mutation.ClearAllowSolicitation()
	return pcmuo
}

// SetExtension sets the "extension" field.
func (pcmuo *PartyContactMechUpdateOne) SetExtension(s string) *PartyContactMechUpdateOne {
	pcmuo.mutation.SetExtension(s)
	return pcmuo
}

// SetNillableExtension sets the "extension" field if the given value is not nil.
func (pcmuo *PartyContactMechUpdateOne) SetNillableExtension(s *string) *PartyContactMechUpdateOne {
	if s != nil {
		pcmuo.SetExtension(*s)
	}
	return pcmuo
}

// ClearExtension clears the value of the "extension" field.
func (pcmuo *PartyContactMechUpdateOne) ClearExtension() *PartyContactMechUpdateOne {
	pcmuo.mutation.ClearExtension()
	return pcmuo
}

// SetVerified sets the "verified" field.
func (pcmuo *PartyContactMechUpdateOne) SetVerified(pa partycontactmech.Verified) *PartyContactMechUpdateOne {
	pcmuo.mutation.SetVerified(pa)
	return pcmuo
}

// SetNillableVerified sets the "verified" field if the given value is not nil.
func (pcmuo *PartyContactMechUpdateOne) SetNillableVerified(pa *partycontactmech.Verified) *PartyContactMechUpdateOne {
	if pa != nil {
		pcmuo.SetVerified(*pa)
	}
	return pcmuo
}

// ClearVerified clears the value of the "verified" field.
func (pcmuo *PartyContactMechUpdateOne) ClearVerified() *PartyContactMechUpdateOne {
	pcmuo.mutation.ClearVerified()
	return pcmuo
}

// SetComments sets the "comments" field.
func (pcmuo *PartyContactMechUpdateOne) SetComments(s string) *PartyContactMechUpdateOne {
	pcmuo.mutation.SetComments(s)
	return pcmuo
}

// SetNillableComments sets the "comments" field if the given value is not nil.
func (pcmuo *PartyContactMechUpdateOne) SetNillableComments(s *string) *PartyContactMechUpdateOne {
	if s != nil {
		pcmuo.SetComments(*s)
	}
	return pcmuo
}

// ClearComments clears the value of the "comments" field.
func (pcmuo *PartyContactMechUpdateOne) ClearComments() *PartyContactMechUpdateOne {
	pcmuo.mutation.ClearComments()
	return pcmuo
}

// SetYearsWithContactMech sets the "years_with_contact_mech" field.
func (pcmuo *PartyContactMechUpdateOne) SetYearsWithContactMech(i int) *PartyContactMechUpdateOne {
	pcmuo.mutation.ResetYearsWithContactMech()
	pcmuo.mutation.SetYearsWithContactMech(i)
	return pcmuo
}

// SetNillableYearsWithContactMech sets the "years_with_contact_mech" field if the given value is not nil.
func (pcmuo *PartyContactMechUpdateOne) SetNillableYearsWithContactMech(i *int) *PartyContactMechUpdateOne {
	if i != nil {
		pcmuo.SetYearsWithContactMech(*i)
	}
	return pcmuo
}

// AddYearsWithContactMech adds i to the "years_with_contact_mech" field.
func (pcmuo *PartyContactMechUpdateOne) AddYearsWithContactMech(i int) *PartyContactMechUpdateOne {
	pcmuo.mutation.AddYearsWithContactMech(i)
	return pcmuo
}

// ClearYearsWithContactMech clears the value of the "years_with_contact_mech" field.
func (pcmuo *PartyContactMechUpdateOne) ClearYearsWithContactMech() *PartyContactMechUpdateOne {
	pcmuo.mutation.ClearYearsWithContactMech()
	return pcmuo
}

// SetMonthsWithContactMech sets the "months_with_contact_mech" field.
func (pcmuo *PartyContactMechUpdateOne) SetMonthsWithContactMech(i int) *PartyContactMechUpdateOne {
	pcmuo.mutation.ResetMonthsWithContactMech()
	pcmuo.mutation.SetMonthsWithContactMech(i)
	return pcmuo
}

// SetNillableMonthsWithContactMech sets the "months_with_contact_mech" field if the given value is not nil.
func (pcmuo *PartyContactMechUpdateOne) SetNillableMonthsWithContactMech(i *int) *PartyContactMechUpdateOne {
	if i != nil {
		pcmuo.SetMonthsWithContactMech(*i)
	}
	return pcmuo
}

// AddMonthsWithContactMech adds i to the "months_with_contact_mech" field.
func (pcmuo *PartyContactMechUpdateOne) AddMonthsWithContactMech(i int) *PartyContactMechUpdateOne {
	pcmuo.mutation.AddMonthsWithContactMech(i)
	return pcmuo
}

// ClearMonthsWithContactMech clears the value of the "months_with_contact_mech" field.
func (pcmuo *PartyContactMechUpdateOne) ClearMonthsWithContactMech() *PartyContactMechUpdateOne {
	pcmuo.mutation.ClearMonthsWithContactMech()
	return pcmuo
}

// SetPartyID sets the "party" edge to the Party entity by ID.
func (pcmuo *PartyContactMechUpdateOne) SetPartyID(id int) *PartyContactMechUpdateOne {
	pcmuo.mutation.SetPartyID(id)
	return pcmuo
}

// SetNillablePartyID sets the "party" edge to the Party entity by ID if the given value is not nil.
func (pcmuo *PartyContactMechUpdateOne) SetNillablePartyID(id *int) *PartyContactMechUpdateOne {
	if id != nil {
		pcmuo = pcmuo.SetPartyID(*id)
	}
	return pcmuo
}

// SetParty sets the "party" edge to the Party entity.
func (pcmuo *PartyContactMechUpdateOne) SetParty(p *Party) *PartyContactMechUpdateOne {
	return pcmuo.SetPartyID(p.ID)
}

// SetPersonID sets the "person" edge to the Person entity by ID.
func (pcmuo *PartyContactMechUpdateOne) SetPersonID(id int) *PartyContactMechUpdateOne {
	pcmuo.mutation.SetPersonID(id)
	return pcmuo
}

// SetNillablePersonID sets the "person" edge to the Person entity by ID if the given value is not nil.
func (pcmuo *PartyContactMechUpdateOne) SetNillablePersonID(id *int) *PartyContactMechUpdateOne {
	if id != nil {
		pcmuo = pcmuo.SetPersonID(*id)
	}
	return pcmuo
}

// SetPerson sets the "person" edge to the Person entity.
func (pcmuo *PartyContactMechUpdateOne) SetPerson(p *Person) *PartyContactMechUpdateOne {
	return pcmuo.SetPersonID(p.ID)
}

// SetPartyRoleID sets the "party_role" edge to the PartyRole entity by ID.
func (pcmuo *PartyContactMechUpdateOne) SetPartyRoleID(id int) *PartyContactMechUpdateOne {
	pcmuo.mutation.SetPartyRoleID(id)
	return pcmuo
}

// SetNillablePartyRoleID sets the "party_role" edge to the PartyRole entity by ID if the given value is not nil.
func (pcmuo *PartyContactMechUpdateOne) SetNillablePartyRoleID(id *int) *PartyContactMechUpdateOne {
	if id != nil {
		pcmuo = pcmuo.SetPartyRoleID(*id)
	}
	return pcmuo
}

// SetPartyRole sets the "party_role" edge to the PartyRole entity.
func (pcmuo *PartyContactMechUpdateOne) SetPartyRole(p *PartyRole) *PartyContactMechUpdateOne {
	return pcmuo.SetPartyRoleID(p.ID)
}

// SetRoleTypeID sets the "role_type" edge to the RoleType entity by ID.
func (pcmuo *PartyContactMechUpdateOne) SetRoleTypeID(id int) *PartyContactMechUpdateOne {
	pcmuo.mutation.SetRoleTypeID(id)
	return pcmuo
}

// SetNillableRoleTypeID sets the "role_type" edge to the RoleType entity by ID if the given value is not nil.
func (pcmuo *PartyContactMechUpdateOne) SetNillableRoleTypeID(id *int) *PartyContactMechUpdateOne {
	if id != nil {
		pcmuo = pcmuo.SetRoleTypeID(*id)
	}
	return pcmuo
}

// SetRoleType sets the "role_type" edge to the RoleType entity.
func (pcmuo *PartyContactMechUpdateOne) SetRoleType(r *RoleType) *PartyContactMechUpdateOne {
	return pcmuo.SetRoleTypeID(r.ID)
}

// Mutation returns the PartyContactMechMutation object of the builder.
func (pcmuo *PartyContactMechUpdateOne) Mutation() *PartyContactMechMutation {
	return pcmuo.mutation
}

// ClearParty clears the "party" edge to the Party entity.
func (pcmuo *PartyContactMechUpdateOne) ClearParty() *PartyContactMechUpdateOne {
	pcmuo.mutation.ClearParty()
	return pcmuo
}

// ClearPerson clears the "person" edge to the Person entity.
func (pcmuo *PartyContactMechUpdateOne) ClearPerson() *PartyContactMechUpdateOne {
	pcmuo.mutation.ClearPerson()
	return pcmuo
}

// ClearPartyRole clears the "party_role" edge to the PartyRole entity.
func (pcmuo *PartyContactMechUpdateOne) ClearPartyRole() *PartyContactMechUpdateOne {
	pcmuo.mutation.ClearPartyRole()
	return pcmuo
}

// ClearRoleType clears the "role_type" edge to the RoleType entity.
func (pcmuo *PartyContactMechUpdateOne) ClearRoleType() *PartyContactMechUpdateOne {
	pcmuo.mutation.ClearRoleType()
	return pcmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pcmuo *PartyContactMechUpdateOne) Select(field string, fields ...string) *PartyContactMechUpdateOne {
	pcmuo.fields = append([]string{field}, fields...)
	return pcmuo
}

// Save executes the query and returns the updated PartyContactMech entity.
func (pcmuo *PartyContactMechUpdateOne) Save(ctx context.Context) (*PartyContactMech, error) {
	var (
		err  error
		node *PartyContactMech
	)
	pcmuo.defaults()
	if len(pcmuo.hooks) == 0 {
		if err = pcmuo.check(); err != nil {
			return nil, err
		}
		node, err = pcmuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PartyContactMechMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pcmuo.check(); err != nil {
				return nil, err
			}
			pcmuo.mutation = mutation
			node, err = pcmuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pcmuo.hooks) - 1; i >= 0; i-- {
			mut = pcmuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pcmuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (pcmuo *PartyContactMechUpdateOne) SaveX(ctx context.Context) *PartyContactMech {
	node, err := pcmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pcmuo *PartyContactMechUpdateOne) Exec(ctx context.Context) error {
	_, err := pcmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcmuo *PartyContactMechUpdateOne) ExecX(ctx context.Context) {
	if err := pcmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pcmuo *PartyContactMechUpdateOne) defaults() {
	if _, ok := pcmuo.mutation.UpdateTime(); !ok {
		v := partycontactmech.UpdateDefaultUpdateTime()
		pcmuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pcmuo *PartyContactMechUpdateOne) check() error {
	if v, ok := pcmuo.mutation.AllowSolicitation(); ok {
		if err := partycontactmech.AllowSolicitationValidator(v); err != nil {
			return &ValidationError{Name: "allow_solicitation", err: fmt.Errorf("ent: validator failed for field \"allow_solicitation\": %w", err)}
		}
	}
	if v, ok := pcmuo.mutation.Verified(); ok {
		if err := partycontactmech.VerifiedValidator(v); err != nil {
			return &ValidationError{Name: "verified", err: fmt.Errorf("ent: validator failed for field \"verified\": %w", err)}
		}
	}
	return nil
}

func (pcmuo *PartyContactMechUpdateOne) sqlSave(ctx context.Context) (_node *PartyContactMech, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   partycontactmech.Table,
			Columns: partycontactmech.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: partycontactmech.FieldID,
			},
		},
	}
	id, ok := pcmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing PartyContactMech.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := pcmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, partycontactmech.FieldID)
		for _, f := range fields {
			if !partycontactmech.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != partycontactmech.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pcmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pcmuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: partycontactmech.FieldUpdateTime,
		})
	}
	if value, ok := pcmuo.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: partycontactmech.FieldStringRef,
		})
	}
	if pcmuo.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: partycontactmech.FieldStringRef,
		})
	}
	if value, ok := pcmuo.mutation.ContactMechID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: partycontactmech.FieldContactMechID,
		})
	}
	if value, ok := pcmuo.mutation.AddedContactMechID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: partycontactmech.FieldContactMechID,
		})
	}
	if value, ok := pcmuo.mutation.FromDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: partycontactmech.FieldFromDate,
		})
	}
	if value, ok := pcmuo.mutation.ThruDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: partycontactmech.FieldThruDate,
		})
	}
	if pcmuo.mutation.ThruDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: partycontactmech.FieldThruDate,
		})
	}
	if value, ok := pcmuo.mutation.AllowSolicitation(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: partycontactmech.FieldAllowSolicitation,
		})
	}
	if pcmuo.mutation.AllowSolicitationCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: partycontactmech.FieldAllowSolicitation,
		})
	}
	if value, ok := pcmuo.mutation.Extension(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: partycontactmech.FieldExtension,
		})
	}
	if pcmuo.mutation.ExtensionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: partycontactmech.FieldExtension,
		})
	}
	if value, ok := pcmuo.mutation.Verified(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: partycontactmech.FieldVerified,
		})
	}
	if pcmuo.mutation.VerifiedCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: partycontactmech.FieldVerified,
		})
	}
	if value, ok := pcmuo.mutation.Comments(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: partycontactmech.FieldComments,
		})
	}
	if pcmuo.mutation.CommentsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: partycontactmech.FieldComments,
		})
	}
	if value, ok := pcmuo.mutation.YearsWithContactMech(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: partycontactmech.FieldYearsWithContactMech,
		})
	}
	if value, ok := pcmuo.mutation.AddedYearsWithContactMech(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: partycontactmech.FieldYearsWithContactMech,
		})
	}
	if pcmuo.mutation.YearsWithContactMechCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: partycontactmech.FieldYearsWithContactMech,
		})
	}
	if value, ok := pcmuo.mutation.MonthsWithContactMech(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: partycontactmech.FieldMonthsWithContactMech,
		})
	}
	if value, ok := pcmuo.mutation.AddedMonthsWithContactMech(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: partycontactmech.FieldMonthsWithContactMech,
		})
	}
	if pcmuo.mutation.MonthsWithContactMechCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: partycontactmech.FieldMonthsWithContactMech,
		})
	}
	if pcmuo.mutation.PartyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partycontactmech.PartyTable,
			Columns: []string{partycontactmech.PartyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: party.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcmuo.mutation.PartyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partycontactmech.PartyTable,
			Columns: []string{partycontactmech.PartyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: party.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pcmuo.mutation.PersonCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partycontactmech.PersonTable,
			Columns: []string{partycontactmech.PersonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: person.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcmuo.mutation.PersonIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partycontactmech.PersonTable,
			Columns: []string{partycontactmech.PersonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: person.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pcmuo.mutation.PartyRoleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partycontactmech.PartyRoleTable,
			Columns: []string{partycontactmech.PartyRoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partyrole.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcmuo.mutation.PartyRoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partycontactmech.PartyRoleTable,
			Columns: []string{partycontactmech.PartyRoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partyrole.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pcmuo.mutation.RoleTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partycontactmech.RoleTypeTable,
			Columns: []string{partycontactmech.RoleTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: roletype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcmuo.mutation.RoleTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partycontactmech.RoleTypeTable,
			Columns: []string{partycontactmech.RoleTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: roletype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PartyContactMech{config: pcmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pcmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{partycontactmech.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
