// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/partycontenttype"
)

// PartyContentType is the model entity for the PartyContentType schema.
type PartyContentType struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// StringRef holds the value of the "string_ref" field.
	StringRef string `json:"string_ref,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PartyContentTypeQuery when eager-loading is set.
	Edges                       PartyContentTypeEdges `json:"edges"`
	party_content_type_children *int
}

// PartyContentTypeEdges holds the relations/edges for other nodes in the graph.
type PartyContentTypeEdges struct {
	// Parent holds the value of the parent edge.
	Parent *PartyContentType `json:"parent,omitempty"`
	// Children holds the value of the children edge.
	Children []*PartyContentType `json:"children,omitempty"`
	// ChildPartyContentTypes holds the value of the child_party_content_types edge.
	ChildPartyContentTypes []*PartyContentType `json:"child_party_content_types,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// ParentOrErr returns the Parent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PartyContentTypeEdges) ParentOrErr() (*PartyContentType, error) {
	if e.loadedTypes[0] {
		if e.Parent == nil {
			// The edge parent was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: partycontenttype.Label}
		}
		return e.Parent, nil
	}
	return nil, &NotLoadedError{edge: "parent"}
}

// ChildrenOrErr returns the Children value or an error if the edge
// was not loaded in eager-loading.
func (e PartyContentTypeEdges) ChildrenOrErr() ([]*PartyContentType, error) {
	if e.loadedTypes[1] {
		return e.Children, nil
	}
	return nil, &NotLoadedError{edge: "children"}
}

// ChildPartyContentTypesOrErr returns the ChildPartyContentTypes value or an error if the edge
// was not loaded in eager-loading.
func (e PartyContentTypeEdges) ChildPartyContentTypesOrErr() ([]*PartyContentType, error) {
	if e.loadedTypes[2] {
		return e.ChildPartyContentTypes, nil
	}
	return nil, &NotLoadedError{edge: "child_party_content_types"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PartyContentType) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case partycontenttype.FieldID:
			values[i] = new(sql.NullInt64)
		case partycontenttype.FieldStringRef, partycontenttype.FieldDescription:
			values[i] = new(sql.NullString)
		case partycontenttype.FieldCreateTime, partycontenttype.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case partycontenttype.ForeignKeys[0]: // party_content_type_children
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type PartyContentType", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PartyContentType fields.
func (pct *PartyContentType) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case partycontenttype.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pct.ID = int(value.Int64)
		case partycontenttype.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				pct.CreateTime = value.Time
			}
		case partycontenttype.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				pct.UpdateTime = value.Time
			}
		case partycontenttype.FieldStringRef:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field string_ref", values[i])
			} else if value.Valid {
				pct.StringRef = value.String
			}
		case partycontenttype.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				pct.Description = value.String
			}
		case partycontenttype.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field party_content_type_children", value)
			} else if value.Valid {
				pct.party_content_type_children = new(int)
				*pct.party_content_type_children = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryParent queries the "parent" edge of the PartyContentType entity.
func (pct *PartyContentType) QueryParent() *PartyContentTypeQuery {
	return (&PartyContentTypeClient{config: pct.config}).QueryParent(pct)
}

// QueryChildren queries the "children" edge of the PartyContentType entity.
func (pct *PartyContentType) QueryChildren() *PartyContentTypeQuery {
	return (&PartyContentTypeClient{config: pct.config}).QueryChildren(pct)
}

// QueryChildPartyContentTypes queries the "child_party_content_types" edge of the PartyContentType entity.
func (pct *PartyContentType) QueryChildPartyContentTypes() *PartyContentTypeQuery {
	return (&PartyContentTypeClient{config: pct.config}).QueryChildPartyContentTypes(pct)
}

// Update returns a builder for updating this PartyContentType.
// Note that you need to call PartyContentType.Unwrap() before calling this method if this PartyContentType
// was returned from a transaction, and the transaction was committed or rolled back.
func (pct *PartyContentType) Update() *PartyContentTypeUpdateOne {
	return (&PartyContentTypeClient{config: pct.config}).UpdateOne(pct)
}

// Unwrap unwraps the PartyContentType entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pct *PartyContentType) Unwrap() *PartyContentType {
	tx, ok := pct.config.driver.(*txDriver)
	if !ok {
		panic("ent: PartyContentType is not a transactional entity")
	}
	pct.config.driver = tx.drv
	return pct
}

// String implements the fmt.Stringer.
func (pct *PartyContentType) String() string {
	var builder strings.Builder
	builder.WriteString("PartyContentType(")
	builder.WriteString(fmt.Sprintf("id=%v", pct.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(pct.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(pct.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", string_ref=")
	builder.WriteString(pct.StringRef)
	builder.WriteString(", description=")
	builder.WriteString(pct.Description)
	builder.WriteByte(')')
	return builder.String()
}

// PartyContentTypes is a parsable slice of PartyContentType.
type PartyContentTypes []*PartyContentType

func (pct PartyContentTypes) config(cfg config) {
	for _i := range pct {
		pct[_i].config = cfg
	}
}
