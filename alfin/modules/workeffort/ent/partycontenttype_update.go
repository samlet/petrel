// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/partycontenttype"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/predicate"
)

// PartyContentTypeUpdate is the builder for updating PartyContentType entities.
type PartyContentTypeUpdate struct {
	config
	hooks    []Hook
	mutation *PartyContentTypeMutation
}

// Where adds a new predicate for the PartyContentTypeUpdate builder.
func (pctu *PartyContentTypeUpdate) Where(ps ...predicate.PartyContentType) *PartyContentTypeUpdate {
	pctu.mutation.predicates = append(pctu.mutation.predicates, ps...)
	return pctu
}

// SetStringRef sets the "string_ref" field.
func (pctu *PartyContentTypeUpdate) SetStringRef(s string) *PartyContentTypeUpdate {
	pctu.mutation.SetStringRef(s)
	return pctu
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (pctu *PartyContentTypeUpdate) SetNillableStringRef(s *string) *PartyContentTypeUpdate {
	if s != nil {
		pctu.SetStringRef(*s)
	}
	return pctu
}

// ClearStringRef clears the value of the "string_ref" field.
func (pctu *PartyContentTypeUpdate) ClearStringRef() *PartyContentTypeUpdate {
	pctu.mutation.ClearStringRef()
	return pctu
}

// SetDescription sets the "description" field.
func (pctu *PartyContentTypeUpdate) SetDescription(s string) *PartyContentTypeUpdate {
	pctu.mutation.SetDescription(s)
	return pctu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pctu *PartyContentTypeUpdate) SetNillableDescription(s *string) *PartyContentTypeUpdate {
	if s != nil {
		pctu.SetDescription(*s)
	}
	return pctu
}

// ClearDescription clears the value of the "description" field.
func (pctu *PartyContentTypeUpdate) ClearDescription() *PartyContentTypeUpdate {
	pctu.mutation.ClearDescription()
	return pctu
}

// SetParentID sets the "parent" edge to the PartyContentType entity by ID.
func (pctu *PartyContentTypeUpdate) SetParentID(id int) *PartyContentTypeUpdate {
	pctu.mutation.SetParentID(id)
	return pctu
}

// SetNillableParentID sets the "parent" edge to the PartyContentType entity by ID if the given value is not nil.
func (pctu *PartyContentTypeUpdate) SetNillableParentID(id *int) *PartyContentTypeUpdate {
	if id != nil {
		pctu = pctu.SetParentID(*id)
	}
	return pctu
}

// SetParent sets the "parent" edge to the PartyContentType entity.
func (pctu *PartyContentTypeUpdate) SetParent(p *PartyContentType) *PartyContentTypeUpdate {
	return pctu.SetParentID(p.ID)
}

// AddChildIDs adds the "children" edge to the PartyContentType entity by IDs.
func (pctu *PartyContentTypeUpdate) AddChildIDs(ids ...int) *PartyContentTypeUpdate {
	pctu.mutation.AddChildIDs(ids...)
	return pctu
}

// AddChildren adds the "children" edges to the PartyContentType entity.
func (pctu *PartyContentTypeUpdate) AddChildren(p ...*PartyContentType) *PartyContentTypeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pctu.AddChildIDs(ids...)
}

// AddChildPartyContentTypeIDs adds the "child_party_content_types" edge to the PartyContentType entity by IDs.
func (pctu *PartyContentTypeUpdate) AddChildPartyContentTypeIDs(ids ...int) *PartyContentTypeUpdate {
	pctu.mutation.AddChildPartyContentTypeIDs(ids...)
	return pctu
}

// AddChildPartyContentTypes adds the "child_party_content_types" edges to the PartyContentType entity.
func (pctu *PartyContentTypeUpdate) AddChildPartyContentTypes(p ...*PartyContentType) *PartyContentTypeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pctu.AddChildPartyContentTypeIDs(ids...)
}

// Mutation returns the PartyContentTypeMutation object of the builder.
func (pctu *PartyContentTypeUpdate) Mutation() *PartyContentTypeMutation {
	return pctu.mutation
}

// ClearParent clears the "parent" edge to the PartyContentType entity.
func (pctu *PartyContentTypeUpdate) ClearParent() *PartyContentTypeUpdate {
	pctu.mutation.ClearParent()
	return pctu
}

// ClearChildren clears all "children" edges to the PartyContentType entity.
func (pctu *PartyContentTypeUpdate) ClearChildren() *PartyContentTypeUpdate {
	pctu.mutation.ClearChildren()
	return pctu
}

// RemoveChildIDs removes the "children" edge to PartyContentType entities by IDs.
func (pctu *PartyContentTypeUpdate) RemoveChildIDs(ids ...int) *PartyContentTypeUpdate {
	pctu.mutation.RemoveChildIDs(ids...)
	return pctu
}

// RemoveChildren removes "children" edges to PartyContentType entities.
func (pctu *PartyContentTypeUpdate) RemoveChildren(p ...*PartyContentType) *PartyContentTypeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pctu.RemoveChildIDs(ids...)
}

// ClearChildPartyContentTypes clears all "child_party_content_types" edges to the PartyContentType entity.
func (pctu *PartyContentTypeUpdate) ClearChildPartyContentTypes() *PartyContentTypeUpdate {
	pctu.mutation.ClearChildPartyContentTypes()
	return pctu
}

// RemoveChildPartyContentTypeIDs removes the "child_party_content_types" edge to PartyContentType entities by IDs.
func (pctu *PartyContentTypeUpdate) RemoveChildPartyContentTypeIDs(ids ...int) *PartyContentTypeUpdate {
	pctu.mutation.RemoveChildPartyContentTypeIDs(ids...)
	return pctu
}

// RemoveChildPartyContentTypes removes "child_party_content_types" edges to PartyContentType entities.
func (pctu *PartyContentTypeUpdate) RemoveChildPartyContentTypes(p ...*PartyContentType) *PartyContentTypeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pctu.RemoveChildPartyContentTypeIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pctu *PartyContentTypeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	pctu.defaults()
	if len(pctu.hooks) == 0 {
		affected, err = pctu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PartyContentTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pctu.mutation = mutation
			affected, err = pctu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pctu.hooks) - 1; i >= 0; i-- {
			mut = pctu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pctu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pctu *PartyContentTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := pctu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pctu *PartyContentTypeUpdate) Exec(ctx context.Context) error {
	_, err := pctu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pctu *PartyContentTypeUpdate) ExecX(ctx context.Context) {
	if err := pctu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pctu *PartyContentTypeUpdate) defaults() {
	if _, ok := pctu.mutation.UpdateTime(); !ok {
		v := partycontenttype.UpdateDefaultUpdateTime()
		pctu.mutation.SetUpdateTime(v)
	}
}

func (pctu *PartyContentTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   partycontenttype.Table,
			Columns: partycontenttype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: partycontenttype.FieldID,
			},
		},
	}
	if ps := pctu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pctu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: partycontenttype.FieldUpdateTime,
		})
	}
	if value, ok := pctu.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: partycontenttype.FieldStringRef,
		})
	}
	if pctu.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: partycontenttype.FieldStringRef,
		})
	}
	if value, ok := pctu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: partycontenttype.FieldDescription,
		})
	}
	if pctu.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: partycontenttype.FieldDescription,
		})
	}
	if pctu.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partycontenttype.ParentTable,
			Columns: []string{partycontenttype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partycontenttype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pctu.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partycontenttype.ParentTable,
			Columns: []string{partycontenttype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partycontenttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pctu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partycontenttype.ChildrenTable,
			Columns: []string{partycontenttype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partycontenttype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pctu.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !pctu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partycontenttype.ChildrenTable,
			Columns: []string{partycontenttype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partycontenttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pctu.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partycontenttype.ChildrenTable,
			Columns: []string{partycontenttype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partycontenttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pctu.mutation.ChildPartyContentTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   partycontenttype.ChildPartyContentTypesTable,
			Columns: partycontenttype.ChildPartyContentTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partycontenttype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pctu.mutation.RemovedChildPartyContentTypesIDs(); len(nodes) > 0 && !pctu.mutation.ChildPartyContentTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   partycontenttype.ChildPartyContentTypesTable,
			Columns: partycontenttype.ChildPartyContentTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partycontenttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pctu.mutation.ChildPartyContentTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   partycontenttype.ChildPartyContentTypesTable,
			Columns: partycontenttype.ChildPartyContentTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partycontenttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pctu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{partycontenttype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// PartyContentTypeUpdateOne is the builder for updating a single PartyContentType entity.
type PartyContentTypeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PartyContentTypeMutation
}

// SetStringRef sets the "string_ref" field.
func (pctuo *PartyContentTypeUpdateOne) SetStringRef(s string) *PartyContentTypeUpdateOne {
	pctuo.mutation.SetStringRef(s)
	return pctuo
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (pctuo *PartyContentTypeUpdateOne) SetNillableStringRef(s *string) *PartyContentTypeUpdateOne {
	if s != nil {
		pctuo.SetStringRef(*s)
	}
	return pctuo
}

// ClearStringRef clears the value of the "string_ref" field.
func (pctuo *PartyContentTypeUpdateOne) ClearStringRef() *PartyContentTypeUpdateOne {
	pctuo.mutation.ClearStringRef()
	return pctuo
}

// SetDescription sets the "description" field.
func (pctuo *PartyContentTypeUpdateOne) SetDescription(s string) *PartyContentTypeUpdateOne {
	pctuo.mutation.SetDescription(s)
	return pctuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pctuo *PartyContentTypeUpdateOne) SetNillableDescription(s *string) *PartyContentTypeUpdateOne {
	if s != nil {
		pctuo.SetDescription(*s)
	}
	return pctuo
}

// ClearDescription clears the value of the "description" field.
func (pctuo *PartyContentTypeUpdateOne) ClearDescription() *PartyContentTypeUpdateOne {
	pctuo.mutation.ClearDescription()
	return pctuo
}

// SetParentID sets the "parent" edge to the PartyContentType entity by ID.
func (pctuo *PartyContentTypeUpdateOne) SetParentID(id int) *PartyContentTypeUpdateOne {
	pctuo.mutation.SetParentID(id)
	return pctuo
}

// SetNillableParentID sets the "parent" edge to the PartyContentType entity by ID if the given value is not nil.
func (pctuo *PartyContentTypeUpdateOne) SetNillableParentID(id *int) *PartyContentTypeUpdateOne {
	if id != nil {
		pctuo = pctuo.SetParentID(*id)
	}
	return pctuo
}

// SetParent sets the "parent" edge to the PartyContentType entity.
func (pctuo *PartyContentTypeUpdateOne) SetParent(p *PartyContentType) *PartyContentTypeUpdateOne {
	return pctuo.SetParentID(p.ID)
}

// AddChildIDs adds the "children" edge to the PartyContentType entity by IDs.
func (pctuo *PartyContentTypeUpdateOne) AddChildIDs(ids ...int) *PartyContentTypeUpdateOne {
	pctuo.mutation.AddChildIDs(ids...)
	return pctuo
}

// AddChildren adds the "children" edges to the PartyContentType entity.
func (pctuo *PartyContentTypeUpdateOne) AddChildren(p ...*PartyContentType) *PartyContentTypeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pctuo.AddChildIDs(ids...)
}

// AddChildPartyContentTypeIDs adds the "child_party_content_types" edge to the PartyContentType entity by IDs.
func (pctuo *PartyContentTypeUpdateOne) AddChildPartyContentTypeIDs(ids ...int) *PartyContentTypeUpdateOne {
	pctuo.mutation.AddChildPartyContentTypeIDs(ids...)
	return pctuo
}

// AddChildPartyContentTypes adds the "child_party_content_types" edges to the PartyContentType entity.
func (pctuo *PartyContentTypeUpdateOne) AddChildPartyContentTypes(p ...*PartyContentType) *PartyContentTypeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pctuo.AddChildPartyContentTypeIDs(ids...)
}

// Mutation returns the PartyContentTypeMutation object of the builder.
func (pctuo *PartyContentTypeUpdateOne) Mutation() *PartyContentTypeMutation {
	return pctuo.mutation
}

// ClearParent clears the "parent" edge to the PartyContentType entity.
func (pctuo *PartyContentTypeUpdateOne) ClearParent() *PartyContentTypeUpdateOne {
	pctuo.mutation.ClearParent()
	return pctuo
}

// ClearChildren clears all "children" edges to the PartyContentType entity.
func (pctuo *PartyContentTypeUpdateOne) ClearChildren() *PartyContentTypeUpdateOne {
	pctuo.mutation.ClearChildren()
	return pctuo
}

// RemoveChildIDs removes the "children" edge to PartyContentType entities by IDs.
func (pctuo *PartyContentTypeUpdateOne) RemoveChildIDs(ids ...int) *PartyContentTypeUpdateOne {
	pctuo.mutation.RemoveChildIDs(ids...)
	return pctuo
}

// RemoveChildren removes "children" edges to PartyContentType entities.
func (pctuo *PartyContentTypeUpdateOne) RemoveChildren(p ...*PartyContentType) *PartyContentTypeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pctuo.RemoveChildIDs(ids...)
}

// ClearChildPartyContentTypes clears all "child_party_content_types" edges to the PartyContentType entity.
func (pctuo *PartyContentTypeUpdateOne) ClearChildPartyContentTypes() *PartyContentTypeUpdateOne {
	pctuo.mutation.ClearChildPartyContentTypes()
	return pctuo
}

// RemoveChildPartyContentTypeIDs removes the "child_party_content_types" edge to PartyContentType entities by IDs.
func (pctuo *PartyContentTypeUpdateOne) RemoveChildPartyContentTypeIDs(ids ...int) *PartyContentTypeUpdateOne {
	pctuo.mutation.RemoveChildPartyContentTypeIDs(ids...)
	return pctuo
}

// RemoveChildPartyContentTypes removes "child_party_content_types" edges to PartyContentType entities.
func (pctuo *PartyContentTypeUpdateOne) RemoveChildPartyContentTypes(p ...*PartyContentType) *PartyContentTypeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pctuo.RemoveChildPartyContentTypeIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pctuo *PartyContentTypeUpdateOne) Select(field string, fields ...string) *PartyContentTypeUpdateOne {
	pctuo.fields = append([]string{field}, fields...)
	return pctuo
}

// Save executes the query and returns the updated PartyContentType entity.
func (pctuo *PartyContentTypeUpdateOne) Save(ctx context.Context) (*PartyContentType, error) {
	var (
		err  error
		node *PartyContentType
	)
	pctuo.defaults()
	if len(pctuo.hooks) == 0 {
		node, err = pctuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PartyContentTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pctuo.mutation = mutation
			node, err = pctuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pctuo.hooks) - 1; i >= 0; i-- {
			mut = pctuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pctuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (pctuo *PartyContentTypeUpdateOne) SaveX(ctx context.Context) *PartyContentType {
	node, err := pctuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pctuo *PartyContentTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := pctuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pctuo *PartyContentTypeUpdateOne) ExecX(ctx context.Context) {
	if err := pctuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pctuo *PartyContentTypeUpdateOne) defaults() {
	if _, ok := pctuo.mutation.UpdateTime(); !ok {
		v := partycontenttype.UpdateDefaultUpdateTime()
		pctuo.mutation.SetUpdateTime(v)
	}
}

func (pctuo *PartyContentTypeUpdateOne) sqlSave(ctx context.Context) (_node *PartyContentType, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   partycontenttype.Table,
			Columns: partycontenttype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: partycontenttype.FieldID,
			},
		},
	}
	id, ok := pctuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing PartyContentType.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := pctuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, partycontenttype.FieldID)
		for _, f := range fields {
			if !partycontenttype.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != partycontenttype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pctuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pctuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: partycontenttype.FieldUpdateTime,
		})
	}
	if value, ok := pctuo.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: partycontenttype.FieldStringRef,
		})
	}
	if pctuo.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: partycontenttype.FieldStringRef,
		})
	}
	if value, ok := pctuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: partycontenttype.FieldDescription,
		})
	}
	if pctuo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: partycontenttype.FieldDescription,
		})
	}
	if pctuo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partycontenttype.ParentTable,
			Columns: []string{partycontenttype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partycontenttype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pctuo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partycontenttype.ParentTable,
			Columns: []string{partycontenttype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partycontenttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pctuo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partycontenttype.ChildrenTable,
			Columns: []string{partycontenttype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partycontenttype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pctuo.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !pctuo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partycontenttype.ChildrenTable,
			Columns: []string{partycontenttype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partycontenttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pctuo.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partycontenttype.ChildrenTable,
			Columns: []string{partycontenttype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partycontenttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pctuo.mutation.ChildPartyContentTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   partycontenttype.ChildPartyContentTypesTable,
			Columns: partycontenttype.ChildPartyContentTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partycontenttype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pctuo.mutation.RemovedChildPartyContentTypesIDs(); len(nodes) > 0 && !pctuo.mutation.ChildPartyContentTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   partycontenttype.ChildPartyContentTypesTable,
			Columns: partycontenttype.ChildPartyContentTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partycontenttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pctuo.mutation.ChildPartyContentTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   partycontenttype.ChildPartyContentTypesTable,
			Columns: partycontenttype.ChildPartyContentTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partycontenttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PartyContentType{config: pctuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pctuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{partycontenttype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
