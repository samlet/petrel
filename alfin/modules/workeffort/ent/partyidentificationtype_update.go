// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/partyidentificationtype"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/predicate"
)

// PartyIdentificationTypeUpdate is the builder for updating PartyIdentificationType entities.
type PartyIdentificationTypeUpdate struct {
	config
	hooks    []Hook
	mutation *PartyIdentificationTypeMutation
}

// Where adds a new predicate for the PartyIdentificationTypeUpdate builder.
func (pitu *PartyIdentificationTypeUpdate) Where(ps ...predicate.PartyIdentificationType) *PartyIdentificationTypeUpdate {
	pitu.mutation.predicates = append(pitu.mutation.predicates, ps...)
	return pitu
}

// SetStringRef sets the "string_ref" field.
func (pitu *PartyIdentificationTypeUpdate) SetStringRef(s string) *PartyIdentificationTypeUpdate {
	pitu.mutation.SetStringRef(s)
	return pitu
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (pitu *PartyIdentificationTypeUpdate) SetNillableStringRef(s *string) *PartyIdentificationTypeUpdate {
	if s != nil {
		pitu.SetStringRef(*s)
	}
	return pitu
}

// ClearStringRef clears the value of the "string_ref" field.
func (pitu *PartyIdentificationTypeUpdate) ClearStringRef() *PartyIdentificationTypeUpdate {
	pitu.mutation.ClearStringRef()
	return pitu
}

// SetHasTable sets the "has_table" field.
func (pitu *PartyIdentificationTypeUpdate) SetHasTable(pt partyidentificationtype.HasTable) *PartyIdentificationTypeUpdate {
	pitu.mutation.SetHasTable(pt)
	return pitu
}

// SetNillableHasTable sets the "has_table" field if the given value is not nil.
func (pitu *PartyIdentificationTypeUpdate) SetNillableHasTable(pt *partyidentificationtype.HasTable) *PartyIdentificationTypeUpdate {
	if pt != nil {
		pitu.SetHasTable(*pt)
	}
	return pitu
}

// ClearHasTable clears the value of the "has_table" field.
func (pitu *PartyIdentificationTypeUpdate) ClearHasTable() *PartyIdentificationTypeUpdate {
	pitu.mutation.ClearHasTable()
	return pitu
}

// SetDescription sets the "description" field.
func (pitu *PartyIdentificationTypeUpdate) SetDescription(s string) *PartyIdentificationTypeUpdate {
	pitu.mutation.SetDescription(s)
	return pitu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pitu *PartyIdentificationTypeUpdate) SetNillableDescription(s *string) *PartyIdentificationTypeUpdate {
	if s != nil {
		pitu.SetDescription(*s)
	}
	return pitu
}

// ClearDescription clears the value of the "description" field.
func (pitu *PartyIdentificationTypeUpdate) ClearDescription() *PartyIdentificationTypeUpdate {
	pitu.mutation.ClearDescription()
	return pitu
}

// SetParentID sets the "parent" edge to the PartyIdentificationType entity by ID.
func (pitu *PartyIdentificationTypeUpdate) SetParentID(id int) *PartyIdentificationTypeUpdate {
	pitu.mutation.SetParentID(id)
	return pitu
}

// SetNillableParentID sets the "parent" edge to the PartyIdentificationType entity by ID if the given value is not nil.
func (pitu *PartyIdentificationTypeUpdate) SetNillableParentID(id *int) *PartyIdentificationTypeUpdate {
	if id != nil {
		pitu = pitu.SetParentID(*id)
	}
	return pitu
}

// SetParent sets the "parent" edge to the PartyIdentificationType entity.
func (pitu *PartyIdentificationTypeUpdate) SetParent(p *PartyIdentificationType) *PartyIdentificationTypeUpdate {
	return pitu.SetParentID(p.ID)
}

// AddChildIDs adds the "children" edge to the PartyIdentificationType entity by IDs.
func (pitu *PartyIdentificationTypeUpdate) AddChildIDs(ids ...int) *PartyIdentificationTypeUpdate {
	pitu.mutation.AddChildIDs(ids...)
	return pitu
}

// AddChildren adds the "children" edges to the PartyIdentificationType entity.
func (pitu *PartyIdentificationTypeUpdate) AddChildren(p ...*PartyIdentificationType) *PartyIdentificationTypeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pitu.AddChildIDs(ids...)
}

// AddChildPartyIdentificationTypeIDs adds the "child_party_identification_types" edge to the PartyIdentificationType entity by IDs.
func (pitu *PartyIdentificationTypeUpdate) AddChildPartyIdentificationTypeIDs(ids ...int) *PartyIdentificationTypeUpdate {
	pitu.mutation.AddChildPartyIdentificationTypeIDs(ids...)
	return pitu
}

// AddChildPartyIdentificationTypes adds the "child_party_identification_types" edges to the PartyIdentificationType entity.
func (pitu *PartyIdentificationTypeUpdate) AddChildPartyIdentificationTypes(p ...*PartyIdentificationType) *PartyIdentificationTypeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pitu.AddChildPartyIdentificationTypeIDs(ids...)
}

// Mutation returns the PartyIdentificationTypeMutation object of the builder.
func (pitu *PartyIdentificationTypeUpdate) Mutation() *PartyIdentificationTypeMutation {
	return pitu.mutation
}

// ClearParent clears the "parent" edge to the PartyIdentificationType entity.
func (pitu *PartyIdentificationTypeUpdate) ClearParent() *PartyIdentificationTypeUpdate {
	pitu.mutation.ClearParent()
	return pitu
}

// ClearChildren clears all "children" edges to the PartyIdentificationType entity.
func (pitu *PartyIdentificationTypeUpdate) ClearChildren() *PartyIdentificationTypeUpdate {
	pitu.mutation.ClearChildren()
	return pitu
}

// RemoveChildIDs removes the "children" edge to PartyIdentificationType entities by IDs.
func (pitu *PartyIdentificationTypeUpdate) RemoveChildIDs(ids ...int) *PartyIdentificationTypeUpdate {
	pitu.mutation.RemoveChildIDs(ids...)
	return pitu
}

// RemoveChildren removes "children" edges to PartyIdentificationType entities.
func (pitu *PartyIdentificationTypeUpdate) RemoveChildren(p ...*PartyIdentificationType) *PartyIdentificationTypeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pitu.RemoveChildIDs(ids...)
}

// ClearChildPartyIdentificationTypes clears all "child_party_identification_types" edges to the PartyIdentificationType entity.
func (pitu *PartyIdentificationTypeUpdate) ClearChildPartyIdentificationTypes() *PartyIdentificationTypeUpdate {
	pitu.mutation.ClearChildPartyIdentificationTypes()
	return pitu
}

// RemoveChildPartyIdentificationTypeIDs removes the "child_party_identification_types" edge to PartyIdentificationType entities by IDs.
func (pitu *PartyIdentificationTypeUpdate) RemoveChildPartyIdentificationTypeIDs(ids ...int) *PartyIdentificationTypeUpdate {
	pitu.mutation.RemoveChildPartyIdentificationTypeIDs(ids...)
	return pitu
}

// RemoveChildPartyIdentificationTypes removes "child_party_identification_types" edges to PartyIdentificationType entities.
func (pitu *PartyIdentificationTypeUpdate) RemoveChildPartyIdentificationTypes(p ...*PartyIdentificationType) *PartyIdentificationTypeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pitu.RemoveChildPartyIdentificationTypeIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pitu *PartyIdentificationTypeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	pitu.defaults()
	if len(pitu.hooks) == 0 {
		if err = pitu.check(); err != nil {
			return 0, err
		}
		affected, err = pitu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PartyIdentificationTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pitu.check(); err != nil {
				return 0, err
			}
			pitu.mutation = mutation
			affected, err = pitu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pitu.hooks) - 1; i >= 0; i-- {
			mut = pitu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pitu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pitu *PartyIdentificationTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := pitu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pitu *PartyIdentificationTypeUpdate) Exec(ctx context.Context) error {
	_, err := pitu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pitu *PartyIdentificationTypeUpdate) ExecX(ctx context.Context) {
	if err := pitu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pitu *PartyIdentificationTypeUpdate) defaults() {
	if _, ok := pitu.mutation.UpdateTime(); !ok {
		v := partyidentificationtype.UpdateDefaultUpdateTime()
		pitu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pitu *PartyIdentificationTypeUpdate) check() error {
	if v, ok := pitu.mutation.HasTable(); ok {
		if err := partyidentificationtype.HasTableValidator(v); err != nil {
			return &ValidationError{Name: "has_table", err: fmt.Errorf("ent: validator failed for field \"has_table\": %w", err)}
		}
	}
	return nil
}

func (pitu *PartyIdentificationTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   partyidentificationtype.Table,
			Columns: partyidentificationtype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: partyidentificationtype.FieldID,
			},
		},
	}
	if ps := pitu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pitu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: partyidentificationtype.FieldUpdateTime,
		})
	}
	if value, ok := pitu.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: partyidentificationtype.FieldStringRef,
		})
	}
	if pitu.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: partyidentificationtype.FieldStringRef,
		})
	}
	if value, ok := pitu.mutation.HasTable(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: partyidentificationtype.FieldHasTable,
		})
	}
	if pitu.mutation.HasTableCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: partyidentificationtype.FieldHasTable,
		})
	}
	if value, ok := pitu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: partyidentificationtype.FieldDescription,
		})
	}
	if pitu.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: partyidentificationtype.FieldDescription,
		})
	}
	if pitu.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partyidentificationtype.ParentTable,
			Columns: []string{partyidentificationtype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partyidentificationtype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pitu.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partyidentificationtype.ParentTable,
			Columns: []string{partyidentificationtype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partyidentificationtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pitu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partyidentificationtype.ChildrenTable,
			Columns: []string{partyidentificationtype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partyidentificationtype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pitu.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !pitu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partyidentificationtype.ChildrenTable,
			Columns: []string{partyidentificationtype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partyidentificationtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pitu.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partyidentificationtype.ChildrenTable,
			Columns: []string{partyidentificationtype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partyidentificationtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pitu.mutation.ChildPartyIdentificationTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   partyidentificationtype.ChildPartyIdentificationTypesTable,
			Columns: partyidentificationtype.ChildPartyIdentificationTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partyidentificationtype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pitu.mutation.RemovedChildPartyIdentificationTypesIDs(); len(nodes) > 0 && !pitu.mutation.ChildPartyIdentificationTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   partyidentificationtype.ChildPartyIdentificationTypesTable,
			Columns: partyidentificationtype.ChildPartyIdentificationTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partyidentificationtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pitu.mutation.ChildPartyIdentificationTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   partyidentificationtype.ChildPartyIdentificationTypesTable,
			Columns: partyidentificationtype.ChildPartyIdentificationTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partyidentificationtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pitu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{partyidentificationtype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// PartyIdentificationTypeUpdateOne is the builder for updating a single PartyIdentificationType entity.
type PartyIdentificationTypeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PartyIdentificationTypeMutation
}

// SetStringRef sets the "string_ref" field.
func (pituo *PartyIdentificationTypeUpdateOne) SetStringRef(s string) *PartyIdentificationTypeUpdateOne {
	pituo.mutation.SetStringRef(s)
	return pituo
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (pituo *PartyIdentificationTypeUpdateOne) SetNillableStringRef(s *string) *PartyIdentificationTypeUpdateOne {
	if s != nil {
		pituo.SetStringRef(*s)
	}
	return pituo
}

// ClearStringRef clears the value of the "string_ref" field.
func (pituo *PartyIdentificationTypeUpdateOne) ClearStringRef() *PartyIdentificationTypeUpdateOne {
	pituo.mutation.ClearStringRef()
	return pituo
}

// SetHasTable sets the "has_table" field.
func (pituo *PartyIdentificationTypeUpdateOne) SetHasTable(pt partyidentificationtype.HasTable) *PartyIdentificationTypeUpdateOne {
	pituo.mutation.SetHasTable(pt)
	return pituo
}

// SetNillableHasTable sets the "has_table" field if the given value is not nil.
func (pituo *PartyIdentificationTypeUpdateOne) SetNillableHasTable(pt *partyidentificationtype.HasTable) *PartyIdentificationTypeUpdateOne {
	if pt != nil {
		pituo.SetHasTable(*pt)
	}
	return pituo
}

// ClearHasTable clears the value of the "has_table" field.
func (pituo *PartyIdentificationTypeUpdateOne) ClearHasTable() *PartyIdentificationTypeUpdateOne {
	pituo.mutation.ClearHasTable()
	return pituo
}

// SetDescription sets the "description" field.
func (pituo *PartyIdentificationTypeUpdateOne) SetDescription(s string) *PartyIdentificationTypeUpdateOne {
	pituo.mutation.SetDescription(s)
	return pituo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pituo *PartyIdentificationTypeUpdateOne) SetNillableDescription(s *string) *PartyIdentificationTypeUpdateOne {
	if s != nil {
		pituo.SetDescription(*s)
	}
	return pituo
}

// ClearDescription clears the value of the "description" field.
func (pituo *PartyIdentificationTypeUpdateOne) ClearDescription() *PartyIdentificationTypeUpdateOne {
	pituo.mutation.ClearDescription()
	return pituo
}

// SetParentID sets the "parent" edge to the PartyIdentificationType entity by ID.
func (pituo *PartyIdentificationTypeUpdateOne) SetParentID(id int) *PartyIdentificationTypeUpdateOne {
	pituo.mutation.SetParentID(id)
	return pituo
}

// SetNillableParentID sets the "parent" edge to the PartyIdentificationType entity by ID if the given value is not nil.
func (pituo *PartyIdentificationTypeUpdateOne) SetNillableParentID(id *int) *PartyIdentificationTypeUpdateOne {
	if id != nil {
		pituo = pituo.SetParentID(*id)
	}
	return pituo
}

// SetParent sets the "parent" edge to the PartyIdentificationType entity.
func (pituo *PartyIdentificationTypeUpdateOne) SetParent(p *PartyIdentificationType) *PartyIdentificationTypeUpdateOne {
	return pituo.SetParentID(p.ID)
}

// AddChildIDs adds the "children" edge to the PartyIdentificationType entity by IDs.
func (pituo *PartyIdentificationTypeUpdateOne) AddChildIDs(ids ...int) *PartyIdentificationTypeUpdateOne {
	pituo.mutation.AddChildIDs(ids...)
	return pituo
}

// AddChildren adds the "children" edges to the PartyIdentificationType entity.
func (pituo *PartyIdentificationTypeUpdateOne) AddChildren(p ...*PartyIdentificationType) *PartyIdentificationTypeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pituo.AddChildIDs(ids...)
}

// AddChildPartyIdentificationTypeIDs adds the "child_party_identification_types" edge to the PartyIdentificationType entity by IDs.
func (pituo *PartyIdentificationTypeUpdateOne) AddChildPartyIdentificationTypeIDs(ids ...int) *PartyIdentificationTypeUpdateOne {
	pituo.mutation.AddChildPartyIdentificationTypeIDs(ids...)
	return pituo
}

// AddChildPartyIdentificationTypes adds the "child_party_identification_types" edges to the PartyIdentificationType entity.
func (pituo *PartyIdentificationTypeUpdateOne) AddChildPartyIdentificationTypes(p ...*PartyIdentificationType) *PartyIdentificationTypeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pituo.AddChildPartyIdentificationTypeIDs(ids...)
}

// Mutation returns the PartyIdentificationTypeMutation object of the builder.
func (pituo *PartyIdentificationTypeUpdateOne) Mutation() *PartyIdentificationTypeMutation {
	return pituo.mutation
}

// ClearParent clears the "parent" edge to the PartyIdentificationType entity.
func (pituo *PartyIdentificationTypeUpdateOne) ClearParent() *PartyIdentificationTypeUpdateOne {
	pituo.mutation.ClearParent()
	return pituo
}

// ClearChildren clears all "children" edges to the PartyIdentificationType entity.
func (pituo *PartyIdentificationTypeUpdateOne) ClearChildren() *PartyIdentificationTypeUpdateOne {
	pituo.mutation.ClearChildren()
	return pituo
}

// RemoveChildIDs removes the "children" edge to PartyIdentificationType entities by IDs.
func (pituo *PartyIdentificationTypeUpdateOne) RemoveChildIDs(ids ...int) *PartyIdentificationTypeUpdateOne {
	pituo.mutation.RemoveChildIDs(ids...)
	return pituo
}

// RemoveChildren removes "children" edges to PartyIdentificationType entities.
func (pituo *PartyIdentificationTypeUpdateOne) RemoveChildren(p ...*PartyIdentificationType) *PartyIdentificationTypeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pituo.RemoveChildIDs(ids...)
}

// ClearChildPartyIdentificationTypes clears all "child_party_identification_types" edges to the PartyIdentificationType entity.
func (pituo *PartyIdentificationTypeUpdateOne) ClearChildPartyIdentificationTypes() *PartyIdentificationTypeUpdateOne {
	pituo.mutation.ClearChildPartyIdentificationTypes()
	return pituo
}

// RemoveChildPartyIdentificationTypeIDs removes the "child_party_identification_types" edge to PartyIdentificationType entities by IDs.
func (pituo *PartyIdentificationTypeUpdateOne) RemoveChildPartyIdentificationTypeIDs(ids ...int) *PartyIdentificationTypeUpdateOne {
	pituo.mutation.RemoveChildPartyIdentificationTypeIDs(ids...)
	return pituo
}

// RemoveChildPartyIdentificationTypes removes "child_party_identification_types" edges to PartyIdentificationType entities.
func (pituo *PartyIdentificationTypeUpdateOne) RemoveChildPartyIdentificationTypes(p ...*PartyIdentificationType) *PartyIdentificationTypeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pituo.RemoveChildPartyIdentificationTypeIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pituo *PartyIdentificationTypeUpdateOne) Select(field string, fields ...string) *PartyIdentificationTypeUpdateOne {
	pituo.fields = append([]string{field}, fields...)
	return pituo
}

// Save executes the query and returns the updated PartyIdentificationType entity.
func (pituo *PartyIdentificationTypeUpdateOne) Save(ctx context.Context) (*PartyIdentificationType, error) {
	var (
		err  error
		node *PartyIdentificationType
	)
	pituo.defaults()
	if len(pituo.hooks) == 0 {
		if err = pituo.check(); err != nil {
			return nil, err
		}
		node, err = pituo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PartyIdentificationTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pituo.check(); err != nil {
				return nil, err
			}
			pituo.mutation = mutation
			node, err = pituo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pituo.hooks) - 1; i >= 0; i-- {
			mut = pituo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pituo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (pituo *PartyIdentificationTypeUpdateOne) SaveX(ctx context.Context) *PartyIdentificationType {
	node, err := pituo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pituo *PartyIdentificationTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := pituo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pituo *PartyIdentificationTypeUpdateOne) ExecX(ctx context.Context) {
	if err := pituo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pituo *PartyIdentificationTypeUpdateOne) defaults() {
	if _, ok := pituo.mutation.UpdateTime(); !ok {
		v := partyidentificationtype.UpdateDefaultUpdateTime()
		pituo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pituo *PartyIdentificationTypeUpdateOne) check() error {
	if v, ok := pituo.mutation.HasTable(); ok {
		if err := partyidentificationtype.HasTableValidator(v); err != nil {
			return &ValidationError{Name: "has_table", err: fmt.Errorf("ent: validator failed for field \"has_table\": %w", err)}
		}
	}
	return nil
}

func (pituo *PartyIdentificationTypeUpdateOne) sqlSave(ctx context.Context) (_node *PartyIdentificationType, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   partyidentificationtype.Table,
			Columns: partyidentificationtype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: partyidentificationtype.FieldID,
			},
		},
	}
	id, ok := pituo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing PartyIdentificationType.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := pituo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, partyidentificationtype.FieldID)
		for _, f := range fields {
			if !partyidentificationtype.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != partyidentificationtype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pituo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pituo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: partyidentificationtype.FieldUpdateTime,
		})
	}
	if value, ok := pituo.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: partyidentificationtype.FieldStringRef,
		})
	}
	if pituo.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: partyidentificationtype.FieldStringRef,
		})
	}
	if value, ok := pituo.mutation.HasTable(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: partyidentificationtype.FieldHasTable,
		})
	}
	if pituo.mutation.HasTableCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: partyidentificationtype.FieldHasTable,
		})
	}
	if value, ok := pituo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: partyidentificationtype.FieldDescription,
		})
	}
	if pituo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: partyidentificationtype.FieldDescription,
		})
	}
	if pituo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partyidentificationtype.ParentTable,
			Columns: []string{partyidentificationtype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partyidentificationtype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pituo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partyidentificationtype.ParentTable,
			Columns: []string{partyidentificationtype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partyidentificationtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pituo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partyidentificationtype.ChildrenTable,
			Columns: []string{partyidentificationtype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partyidentificationtype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pituo.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !pituo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partyidentificationtype.ChildrenTable,
			Columns: []string{partyidentificationtype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partyidentificationtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pituo.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partyidentificationtype.ChildrenTable,
			Columns: []string{partyidentificationtype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partyidentificationtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pituo.mutation.ChildPartyIdentificationTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   partyidentificationtype.ChildPartyIdentificationTypesTable,
			Columns: partyidentificationtype.ChildPartyIdentificationTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partyidentificationtype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pituo.mutation.RemovedChildPartyIdentificationTypesIDs(); len(nodes) > 0 && !pituo.mutation.ChildPartyIdentificationTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   partyidentificationtype.ChildPartyIdentificationTypesTable,
			Columns: partyidentificationtype.ChildPartyIdentificationTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partyidentificationtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pituo.mutation.ChildPartyIdentificationTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   partyidentificationtype.ChildPartyIdentificationTypesTable,
			Columns: partyidentificationtype.ChildPartyIdentificationTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partyidentificationtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PartyIdentificationType{config: pituo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pituo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{partyidentificationtype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
