// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/partyrelationshiptype"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/roletype"
)

// PartyRelationshipType is the model entity for the PartyRelationshipType schema.
type PartyRelationshipType struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// StringRef holds the value of the "string_ref" field.
	StringRef string `json:"string_ref,omitempty"`
	// HasTable holds the value of the "has_table" field.
	HasTable partyrelationshiptype.HasTable `json:"has_table,omitempty"`
	// PartyRelationshipName holds the value of the "party_relationship_name" field.
	PartyRelationshipName string `json:"party_relationship_name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PartyRelationshipTypeQuery when eager-loading is set.
	Edges                                         PartyRelationshipTypeEdges `json:"edges"`
	party_relationship_type_children              *int
	role_type_valid_from_party_relationship_types *int
	role_type_valid_to_party_relationship_types   *int
}

// PartyRelationshipTypeEdges holds the relations/edges for other nodes in the graph.
type PartyRelationshipTypeEdges struct {
	// Parent holds the value of the parent edge.
	Parent *PartyRelationshipType `json:"parent,omitempty"`
	// Children holds the value of the children edge.
	Children []*PartyRelationshipType `json:"children,omitempty"`
	// ValidFromRoleType holds the value of the valid_from_role_type edge.
	ValidFromRoleType *RoleType `json:"valid_from_role_type,omitempty"`
	// ValidToRoleType holds the value of the valid_to_role_type edge.
	ValidToRoleType *RoleType `json:"valid_to_role_type,omitempty"`
	// ChildPartyRelationshipTypes holds the value of the child_party_relationship_types edge.
	ChildPartyRelationshipTypes []*PartyRelationshipType `json:"child_party_relationship_types,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// ParentOrErr returns the Parent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PartyRelationshipTypeEdges) ParentOrErr() (*PartyRelationshipType, error) {
	if e.loadedTypes[0] {
		if e.Parent == nil {
			// The edge parent was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: partyrelationshiptype.Label}
		}
		return e.Parent, nil
	}
	return nil, &NotLoadedError{edge: "parent"}
}

// ChildrenOrErr returns the Children value or an error if the edge
// was not loaded in eager-loading.
func (e PartyRelationshipTypeEdges) ChildrenOrErr() ([]*PartyRelationshipType, error) {
	if e.loadedTypes[1] {
		return e.Children, nil
	}
	return nil, &NotLoadedError{edge: "children"}
}

// ValidFromRoleTypeOrErr returns the ValidFromRoleType value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PartyRelationshipTypeEdges) ValidFromRoleTypeOrErr() (*RoleType, error) {
	if e.loadedTypes[2] {
		if e.ValidFromRoleType == nil {
			// The edge valid_from_role_type was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: roletype.Label}
		}
		return e.ValidFromRoleType, nil
	}
	return nil, &NotLoadedError{edge: "valid_from_role_type"}
}

// ValidToRoleTypeOrErr returns the ValidToRoleType value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PartyRelationshipTypeEdges) ValidToRoleTypeOrErr() (*RoleType, error) {
	if e.loadedTypes[3] {
		if e.ValidToRoleType == nil {
			// The edge valid_to_role_type was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: roletype.Label}
		}
		return e.ValidToRoleType, nil
	}
	return nil, &NotLoadedError{edge: "valid_to_role_type"}
}

// ChildPartyRelationshipTypesOrErr returns the ChildPartyRelationshipTypes value or an error if the edge
// was not loaded in eager-loading.
func (e PartyRelationshipTypeEdges) ChildPartyRelationshipTypesOrErr() ([]*PartyRelationshipType, error) {
	if e.loadedTypes[4] {
		return e.ChildPartyRelationshipTypes, nil
	}
	return nil, &NotLoadedError{edge: "child_party_relationship_types"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PartyRelationshipType) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case partyrelationshiptype.FieldID:
			values[i] = new(sql.NullInt64)
		case partyrelationshiptype.FieldStringRef, partyrelationshiptype.FieldHasTable, partyrelationshiptype.FieldPartyRelationshipName, partyrelationshiptype.FieldDescription:
			values[i] = new(sql.NullString)
		case partyrelationshiptype.FieldCreateTime, partyrelationshiptype.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case partyrelationshiptype.ForeignKeys[0]: // party_relationship_type_children
			values[i] = new(sql.NullInt64)
		case partyrelationshiptype.ForeignKeys[1]: // role_type_valid_from_party_relationship_types
			values[i] = new(sql.NullInt64)
		case partyrelationshiptype.ForeignKeys[2]: // role_type_valid_to_party_relationship_types
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type PartyRelationshipType", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PartyRelationshipType fields.
func (prt *PartyRelationshipType) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case partyrelationshiptype.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			prt.ID = int(value.Int64)
		case partyrelationshiptype.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				prt.CreateTime = value.Time
			}
		case partyrelationshiptype.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				prt.UpdateTime = value.Time
			}
		case partyrelationshiptype.FieldStringRef:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field string_ref", values[i])
			} else if value.Valid {
				prt.StringRef = value.String
			}
		case partyrelationshiptype.FieldHasTable:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field has_table", values[i])
			} else if value.Valid {
				prt.HasTable = partyrelationshiptype.HasTable(value.String)
			}
		case partyrelationshiptype.FieldPartyRelationshipName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field party_relationship_name", values[i])
			} else if value.Valid {
				prt.PartyRelationshipName = value.String
			}
		case partyrelationshiptype.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				prt.Description = value.String
			}
		case partyrelationshiptype.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field party_relationship_type_children", value)
			} else if value.Valid {
				prt.party_relationship_type_children = new(int)
				*prt.party_relationship_type_children = int(value.Int64)
			}
		case partyrelationshiptype.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field role_type_valid_from_party_relationship_types", value)
			} else if value.Valid {
				prt.role_type_valid_from_party_relationship_types = new(int)
				*prt.role_type_valid_from_party_relationship_types = int(value.Int64)
			}
		case partyrelationshiptype.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field role_type_valid_to_party_relationship_types", value)
			} else if value.Valid {
				prt.role_type_valid_to_party_relationship_types = new(int)
				*prt.role_type_valid_to_party_relationship_types = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryParent queries the "parent" edge of the PartyRelationshipType entity.
func (prt *PartyRelationshipType) QueryParent() *PartyRelationshipTypeQuery {
	return (&PartyRelationshipTypeClient{config: prt.config}).QueryParent(prt)
}

// QueryChildren queries the "children" edge of the PartyRelationshipType entity.
func (prt *PartyRelationshipType) QueryChildren() *PartyRelationshipTypeQuery {
	return (&PartyRelationshipTypeClient{config: prt.config}).QueryChildren(prt)
}

// QueryValidFromRoleType queries the "valid_from_role_type" edge of the PartyRelationshipType entity.
func (prt *PartyRelationshipType) QueryValidFromRoleType() *RoleTypeQuery {
	return (&PartyRelationshipTypeClient{config: prt.config}).QueryValidFromRoleType(prt)
}

// QueryValidToRoleType queries the "valid_to_role_type" edge of the PartyRelationshipType entity.
func (prt *PartyRelationshipType) QueryValidToRoleType() *RoleTypeQuery {
	return (&PartyRelationshipTypeClient{config: prt.config}).QueryValidToRoleType(prt)
}

// QueryChildPartyRelationshipTypes queries the "child_party_relationship_types" edge of the PartyRelationshipType entity.
func (prt *PartyRelationshipType) QueryChildPartyRelationshipTypes() *PartyRelationshipTypeQuery {
	return (&PartyRelationshipTypeClient{config: prt.config}).QueryChildPartyRelationshipTypes(prt)
}

// Update returns a builder for updating this PartyRelationshipType.
// Note that you need to call PartyRelationshipType.Unwrap() before calling this method if this PartyRelationshipType
// was returned from a transaction, and the transaction was committed or rolled back.
func (prt *PartyRelationshipType) Update() *PartyRelationshipTypeUpdateOne {
	return (&PartyRelationshipTypeClient{config: prt.config}).UpdateOne(prt)
}

// Unwrap unwraps the PartyRelationshipType entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (prt *PartyRelationshipType) Unwrap() *PartyRelationshipType {
	tx, ok := prt.config.driver.(*txDriver)
	if !ok {
		panic("ent: PartyRelationshipType is not a transactional entity")
	}
	prt.config.driver = tx.drv
	return prt
}

// String implements the fmt.Stringer.
func (prt *PartyRelationshipType) String() string {
	var builder strings.Builder
	builder.WriteString("PartyRelationshipType(")
	builder.WriteString(fmt.Sprintf("id=%v", prt.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(prt.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(prt.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", string_ref=")
	builder.WriteString(prt.StringRef)
	builder.WriteString(", has_table=")
	builder.WriteString(fmt.Sprintf("%v", prt.HasTable))
	builder.WriteString(", party_relationship_name=")
	builder.WriteString(prt.PartyRelationshipName)
	builder.WriteString(", description=")
	builder.WriteString(prt.Description)
	builder.WriteByte(')')
	return builder.String()
}

// PartyRelationshipTypes is a parsable slice of PartyRelationshipType.
type PartyRelationshipTypes []*PartyRelationshipType

func (prt PartyRelationshipTypes) config(cfg config) {
	for _i := range prt {
		prt[_i].config = cfg
	}
}
