// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/partyrelationshiptype"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/predicate"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/roletype"
)

// PartyRelationshipTypeUpdate is the builder for updating PartyRelationshipType entities.
type PartyRelationshipTypeUpdate struct {
	config
	hooks    []Hook
	mutation *PartyRelationshipTypeMutation
}

// Where adds a new predicate for the PartyRelationshipTypeUpdate builder.
func (prtu *PartyRelationshipTypeUpdate) Where(ps ...predicate.PartyRelationshipType) *PartyRelationshipTypeUpdate {
	prtu.mutation.predicates = append(prtu.mutation.predicates, ps...)
	return prtu
}

// SetStringRef sets the "string_ref" field.
func (prtu *PartyRelationshipTypeUpdate) SetStringRef(s string) *PartyRelationshipTypeUpdate {
	prtu.mutation.SetStringRef(s)
	return prtu
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (prtu *PartyRelationshipTypeUpdate) SetNillableStringRef(s *string) *PartyRelationshipTypeUpdate {
	if s != nil {
		prtu.SetStringRef(*s)
	}
	return prtu
}

// ClearStringRef clears the value of the "string_ref" field.
func (prtu *PartyRelationshipTypeUpdate) ClearStringRef() *PartyRelationshipTypeUpdate {
	prtu.mutation.ClearStringRef()
	return prtu
}

// SetHasTable sets the "has_table" field.
func (prtu *PartyRelationshipTypeUpdate) SetHasTable(pt partyrelationshiptype.HasTable) *PartyRelationshipTypeUpdate {
	prtu.mutation.SetHasTable(pt)
	return prtu
}

// SetNillableHasTable sets the "has_table" field if the given value is not nil.
func (prtu *PartyRelationshipTypeUpdate) SetNillableHasTable(pt *partyrelationshiptype.HasTable) *PartyRelationshipTypeUpdate {
	if pt != nil {
		prtu.SetHasTable(*pt)
	}
	return prtu
}

// ClearHasTable clears the value of the "has_table" field.
func (prtu *PartyRelationshipTypeUpdate) ClearHasTable() *PartyRelationshipTypeUpdate {
	prtu.mutation.ClearHasTable()
	return prtu
}

// SetPartyRelationshipName sets the "party_relationship_name" field.
func (prtu *PartyRelationshipTypeUpdate) SetPartyRelationshipName(s string) *PartyRelationshipTypeUpdate {
	prtu.mutation.SetPartyRelationshipName(s)
	return prtu
}

// SetNillablePartyRelationshipName sets the "party_relationship_name" field if the given value is not nil.
func (prtu *PartyRelationshipTypeUpdate) SetNillablePartyRelationshipName(s *string) *PartyRelationshipTypeUpdate {
	if s != nil {
		prtu.SetPartyRelationshipName(*s)
	}
	return prtu
}

// ClearPartyRelationshipName clears the value of the "party_relationship_name" field.
func (prtu *PartyRelationshipTypeUpdate) ClearPartyRelationshipName() *PartyRelationshipTypeUpdate {
	prtu.mutation.ClearPartyRelationshipName()
	return prtu
}

// SetDescription sets the "description" field.
func (prtu *PartyRelationshipTypeUpdate) SetDescription(s string) *PartyRelationshipTypeUpdate {
	prtu.mutation.SetDescription(s)
	return prtu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (prtu *PartyRelationshipTypeUpdate) SetNillableDescription(s *string) *PartyRelationshipTypeUpdate {
	if s != nil {
		prtu.SetDescription(*s)
	}
	return prtu
}

// ClearDescription clears the value of the "description" field.
func (prtu *PartyRelationshipTypeUpdate) ClearDescription() *PartyRelationshipTypeUpdate {
	prtu.mutation.ClearDescription()
	return prtu
}

// SetParentID sets the "parent" edge to the PartyRelationshipType entity by ID.
func (prtu *PartyRelationshipTypeUpdate) SetParentID(id int) *PartyRelationshipTypeUpdate {
	prtu.mutation.SetParentID(id)
	return prtu
}

// SetNillableParentID sets the "parent" edge to the PartyRelationshipType entity by ID if the given value is not nil.
func (prtu *PartyRelationshipTypeUpdate) SetNillableParentID(id *int) *PartyRelationshipTypeUpdate {
	if id != nil {
		prtu = prtu.SetParentID(*id)
	}
	return prtu
}

// SetParent sets the "parent" edge to the PartyRelationshipType entity.
func (prtu *PartyRelationshipTypeUpdate) SetParent(p *PartyRelationshipType) *PartyRelationshipTypeUpdate {
	return prtu.SetParentID(p.ID)
}

// AddChildIDs adds the "children" edge to the PartyRelationshipType entity by IDs.
func (prtu *PartyRelationshipTypeUpdate) AddChildIDs(ids ...int) *PartyRelationshipTypeUpdate {
	prtu.mutation.AddChildIDs(ids...)
	return prtu
}

// AddChildren adds the "children" edges to the PartyRelationshipType entity.
func (prtu *PartyRelationshipTypeUpdate) AddChildren(p ...*PartyRelationshipType) *PartyRelationshipTypeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return prtu.AddChildIDs(ids...)
}

// SetValidFromRoleTypeID sets the "valid_from_role_type" edge to the RoleType entity by ID.
func (prtu *PartyRelationshipTypeUpdate) SetValidFromRoleTypeID(id int) *PartyRelationshipTypeUpdate {
	prtu.mutation.SetValidFromRoleTypeID(id)
	return prtu
}

// SetNillableValidFromRoleTypeID sets the "valid_from_role_type" edge to the RoleType entity by ID if the given value is not nil.
func (prtu *PartyRelationshipTypeUpdate) SetNillableValidFromRoleTypeID(id *int) *PartyRelationshipTypeUpdate {
	if id != nil {
		prtu = prtu.SetValidFromRoleTypeID(*id)
	}
	return prtu
}

// SetValidFromRoleType sets the "valid_from_role_type" edge to the RoleType entity.
func (prtu *PartyRelationshipTypeUpdate) SetValidFromRoleType(r *RoleType) *PartyRelationshipTypeUpdate {
	return prtu.SetValidFromRoleTypeID(r.ID)
}

// SetValidToRoleTypeID sets the "valid_to_role_type" edge to the RoleType entity by ID.
func (prtu *PartyRelationshipTypeUpdate) SetValidToRoleTypeID(id int) *PartyRelationshipTypeUpdate {
	prtu.mutation.SetValidToRoleTypeID(id)
	return prtu
}

// SetNillableValidToRoleTypeID sets the "valid_to_role_type" edge to the RoleType entity by ID if the given value is not nil.
func (prtu *PartyRelationshipTypeUpdate) SetNillableValidToRoleTypeID(id *int) *PartyRelationshipTypeUpdate {
	if id != nil {
		prtu = prtu.SetValidToRoleTypeID(*id)
	}
	return prtu
}

// SetValidToRoleType sets the "valid_to_role_type" edge to the RoleType entity.
func (prtu *PartyRelationshipTypeUpdate) SetValidToRoleType(r *RoleType) *PartyRelationshipTypeUpdate {
	return prtu.SetValidToRoleTypeID(r.ID)
}

// AddChildPartyRelationshipTypeIDs adds the "child_party_relationship_types" edge to the PartyRelationshipType entity by IDs.
func (prtu *PartyRelationshipTypeUpdate) AddChildPartyRelationshipTypeIDs(ids ...int) *PartyRelationshipTypeUpdate {
	prtu.mutation.AddChildPartyRelationshipTypeIDs(ids...)
	return prtu
}

// AddChildPartyRelationshipTypes adds the "child_party_relationship_types" edges to the PartyRelationshipType entity.
func (prtu *PartyRelationshipTypeUpdate) AddChildPartyRelationshipTypes(p ...*PartyRelationshipType) *PartyRelationshipTypeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return prtu.AddChildPartyRelationshipTypeIDs(ids...)
}

// Mutation returns the PartyRelationshipTypeMutation object of the builder.
func (prtu *PartyRelationshipTypeUpdate) Mutation() *PartyRelationshipTypeMutation {
	return prtu.mutation
}

// ClearParent clears the "parent" edge to the PartyRelationshipType entity.
func (prtu *PartyRelationshipTypeUpdate) ClearParent() *PartyRelationshipTypeUpdate {
	prtu.mutation.ClearParent()
	return prtu
}

// ClearChildren clears all "children" edges to the PartyRelationshipType entity.
func (prtu *PartyRelationshipTypeUpdate) ClearChildren() *PartyRelationshipTypeUpdate {
	prtu.mutation.ClearChildren()
	return prtu
}

// RemoveChildIDs removes the "children" edge to PartyRelationshipType entities by IDs.
func (prtu *PartyRelationshipTypeUpdate) RemoveChildIDs(ids ...int) *PartyRelationshipTypeUpdate {
	prtu.mutation.RemoveChildIDs(ids...)
	return prtu
}

// RemoveChildren removes "children" edges to PartyRelationshipType entities.
func (prtu *PartyRelationshipTypeUpdate) RemoveChildren(p ...*PartyRelationshipType) *PartyRelationshipTypeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return prtu.RemoveChildIDs(ids...)
}

// ClearValidFromRoleType clears the "valid_from_role_type" edge to the RoleType entity.
func (prtu *PartyRelationshipTypeUpdate) ClearValidFromRoleType() *PartyRelationshipTypeUpdate {
	prtu.mutation.ClearValidFromRoleType()
	return prtu
}

// ClearValidToRoleType clears the "valid_to_role_type" edge to the RoleType entity.
func (prtu *PartyRelationshipTypeUpdate) ClearValidToRoleType() *PartyRelationshipTypeUpdate {
	prtu.mutation.ClearValidToRoleType()
	return prtu
}

// ClearChildPartyRelationshipTypes clears all "child_party_relationship_types" edges to the PartyRelationshipType entity.
func (prtu *PartyRelationshipTypeUpdate) ClearChildPartyRelationshipTypes() *PartyRelationshipTypeUpdate {
	prtu.mutation.ClearChildPartyRelationshipTypes()
	return prtu
}

// RemoveChildPartyRelationshipTypeIDs removes the "child_party_relationship_types" edge to PartyRelationshipType entities by IDs.
func (prtu *PartyRelationshipTypeUpdate) RemoveChildPartyRelationshipTypeIDs(ids ...int) *PartyRelationshipTypeUpdate {
	prtu.mutation.RemoveChildPartyRelationshipTypeIDs(ids...)
	return prtu
}

// RemoveChildPartyRelationshipTypes removes "child_party_relationship_types" edges to PartyRelationshipType entities.
func (prtu *PartyRelationshipTypeUpdate) RemoveChildPartyRelationshipTypes(p ...*PartyRelationshipType) *PartyRelationshipTypeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return prtu.RemoveChildPartyRelationshipTypeIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (prtu *PartyRelationshipTypeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	prtu.defaults()
	if len(prtu.hooks) == 0 {
		if err = prtu.check(); err != nil {
			return 0, err
		}
		affected, err = prtu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PartyRelationshipTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = prtu.check(); err != nil {
				return 0, err
			}
			prtu.mutation = mutation
			affected, err = prtu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(prtu.hooks) - 1; i >= 0; i-- {
			mut = prtu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, prtu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (prtu *PartyRelationshipTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := prtu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (prtu *PartyRelationshipTypeUpdate) Exec(ctx context.Context) error {
	_, err := prtu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (prtu *PartyRelationshipTypeUpdate) ExecX(ctx context.Context) {
	if err := prtu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (prtu *PartyRelationshipTypeUpdate) defaults() {
	if _, ok := prtu.mutation.UpdateTime(); !ok {
		v := partyrelationshiptype.UpdateDefaultUpdateTime()
		prtu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (prtu *PartyRelationshipTypeUpdate) check() error {
	if v, ok := prtu.mutation.HasTable(); ok {
		if err := partyrelationshiptype.HasTableValidator(v); err != nil {
			return &ValidationError{Name: "has_table", err: fmt.Errorf("ent: validator failed for field \"has_table\": %w", err)}
		}
	}
	return nil
}

func (prtu *PartyRelationshipTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   partyrelationshiptype.Table,
			Columns: partyrelationshiptype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: partyrelationshiptype.FieldID,
			},
		},
	}
	if ps := prtu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := prtu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: partyrelationshiptype.FieldUpdateTime,
		})
	}
	if value, ok := prtu.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: partyrelationshiptype.FieldStringRef,
		})
	}
	if prtu.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: partyrelationshiptype.FieldStringRef,
		})
	}
	if value, ok := prtu.mutation.HasTable(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: partyrelationshiptype.FieldHasTable,
		})
	}
	if prtu.mutation.HasTableCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: partyrelationshiptype.FieldHasTable,
		})
	}
	if value, ok := prtu.mutation.PartyRelationshipName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: partyrelationshiptype.FieldPartyRelationshipName,
		})
	}
	if prtu.mutation.PartyRelationshipNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: partyrelationshiptype.FieldPartyRelationshipName,
		})
	}
	if value, ok := prtu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: partyrelationshiptype.FieldDescription,
		})
	}
	if prtu.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: partyrelationshiptype.FieldDescription,
		})
	}
	if prtu.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partyrelationshiptype.ParentTable,
			Columns: []string{partyrelationshiptype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partyrelationshiptype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := prtu.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partyrelationshiptype.ParentTable,
			Columns: []string{partyrelationshiptype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partyrelationshiptype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if prtu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partyrelationshiptype.ChildrenTable,
			Columns: []string{partyrelationshiptype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partyrelationshiptype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := prtu.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !prtu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partyrelationshiptype.ChildrenTable,
			Columns: []string{partyrelationshiptype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partyrelationshiptype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := prtu.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partyrelationshiptype.ChildrenTable,
			Columns: []string{partyrelationshiptype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partyrelationshiptype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if prtu.mutation.ValidFromRoleTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partyrelationshiptype.ValidFromRoleTypeTable,
			Columns: []string{partyrelationshiptype.ValidFromRoleTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: roletype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := prtu.mutation.ValidFromRoleTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partyrelationshiptype.ValidFromRoleTypeTable,
			Columns: []string{partyrelationshiptype.ValidFromRoleTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: roletype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if prtu.mutation.ValidToRoleTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partyrelationshiptype.ValidToRoleTypeTable,
			Columns: []string{partyrelationshiptype.ValidToRoleTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: roletype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := prtu.mutation.ValidToRoleTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partyrelationshiptype.ValidToRoleTypeTable,
			Columns: []string{partyrelationshiptype.ValidToRoleTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: roletype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if prtu.mutation.ChildPartyRelationshipTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   partyrelationshiptype.ChildPartyRelationshipTypesTable,
			Columns: partyrelationshiptype.ChildPartyRelationshipTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partyrelationshiptype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := prtu.mutation.RemovedChildPartyRelationshipTypesIDs(); len(nodes) > 0 && !prtu.mutation.ChildPartyRelationshipTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   partyrelationshiptype.ChildPartyRelationshipTypesTable,
			Columns: partyrelationshiptype.ChildPartyRelationshipTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partyrelationshiptype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := prtu.mutation.ChildPartyRelationshipTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   partyrelationshiptype.ChildPartyRelationshipTypesTable,
			Columns: partyrelationshiptype.ChildPartyRelationshipTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partyrelationshiptype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, prtu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{partyrelationshiptype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// PartyRelationshipTypeUpdateOne is the builder for updating a single PartyRelationshipType entity.
type PartyRelationshipTypeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PartyRelationshipTypeMutation
}

// SetStringRef sets the "string_ref" field.
func (prtuo *PartyRelationshipTypeUpdateOne) SetStringRef(s string) *PartyRelationshipTypeUpdateOne {
	prtuo.mutation.SetStringRef(s)
	return prtuo
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (prtuo *PartyRelationshipTypeUpdateOne) SetNillableStringRef(s *string) *PartyRelationshipTypeUpdateOne {
	if s != nil {
		prtuo.SetStringRef(*s)
	}
	return prtuo
}

// ClearStringRef clears the value of the "string_ref" field.
func (prtuo *PartyRelationshipTypeUpdateOne) ClearStringRef() *PartyRelationshipTypeUpdateOne {
	prtuo.mutation.ClearStringRef()
	return prtuo
}

// SetHasTable sets the "has_table" field.
func (prtuo *PartyRelationshipTypeUpdateOne) SetHasTable(pt partyrelationshiptype.HasTable) *PartyRelationshipTypeUpdateOne {
	prtuo.mutation.SetHasTable(pt)
	return prtuo
}

// SetNillableHasTable sets the "has_table" field if the given value is not nil.
func (prtuo *PartyRelationshipTypeUpdateOne) SetNillableHasTable(pt *partyrelationshiptype.HasTable) *PartyRelationshipTypeUpdateOne {
	if pt != nil {
		prtuo.SetHasTable(*pt)
	}
	return prtuo
}

// ClearHasTable clears the value of the "has_table" field.
func (prtuo *PartyRelationshipTypeUpdateOne) ClearHasTable() *PartyRelationshipTypeUpdateOne {
	prtuo.mutation.ClearHasTable()
	return prtuo
}

// SetPartyRelationshipName sets the "party_relationship_name" field.
func (prtuo *PartyRelationshipTypeUpdateOne) SetPartyRelationshipName(s string) *PartyRelationshipTypeUpdateOne {
	prtuo.mutation.SetPartyRelationshipName(s)
	return prtuo
}

// SetNillablePartyRelationshipName sets the "party_relationship_name" field if the given value is not nil.
func (prtuo *PartyRelationshipTypeUpdateOne) SetNillablePartyRelationshipName(s *string) *PartyRelationshipTypeUpdateOne {
	if s != nil {
		prtuo.SetPartyRelationshipName(*s)
	}
	return prtuo
}

// ClearPartyRelationshipName clears the value of the "party_relationship_name" field.
func (prtuo *PartyRelationshipTypeUpdateOne) ClearPartyRelationshipName() *PartyRelationshipTypeUpdateOne {
	prtuo.mutation.ClearPartyRelationshipName()
	return prtuo
}

// SetDescription sets the "description" field.
func (prtuo *PartyRelationshipTypeUpdateOne) SetDescription(s string) *PartyRelationshipTypeUpdateOne {
	prtuo.mutation.SetDescription(s)
	return prtuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (prtuo *PartyRelationshipTypeUpdateOne) SetNillableDescription(s *string) *PartyRelationshipTypeUpdateOne {
	if s != nil {
		prtuo.SetDescription(*s)
	}
	return prtuo
}

// ClearDescription clears the value of the "description" field.
func (prtuo *PartyRelationshipTypeUpdateOne) ClearDescription() *PartyRelationshipTypeUpdateOne {
	prtuo.mutation.ClearDescription()
	return prtuo
}

// SetParentID sets the "parent" edge to the PartyRelationshipType entity by ID.
func (prtuo *PartyRelationshipTypeUpdateOne) SetParentID(id int) *PartyRelationshipTypeUpdateOne {
	prtuo.mutation.SetParentID(id)
	return prtuo
}

// SetNillableParentID sets the "parent" edge to the PartyRelationshipType entity by ID if the given value is not nil.
func (prtuo *PartyRelationshipTypeUpdateOne) SetNillableParentID(id *int) *PartyRelationshipTypeUpdateOne {
	if id != nil {
		prtuo = prtuo.SetParentID(*id)
	}
	return prtuo
}

// SetParent sets the "parent" edge to the PartyRelationshipType entity.
func (prtuo *PartyRelationshipTypeUpdateOne) SetParent(p *PartyRelationshipType) *PartyRelationshipTypeUpdateOne {
	return prtuo.SetParentID(p.ID)
}

// AddChildIDs adds the "children" edge to the PartyRelationshipType entity by IDs.
func (prtuo *PartyRelationshipTypeUpdateOne) AddChildIDs(ids ...int) *PartyRelationshipTypeUpdateOne {
	prtuo.mutation.AddChildIDs(ids...)
	return prtuo
}

// AddChildren adds the "children" edges to the PartyRelationshipType entity.
func (prtuo *PartyRelationshipTypeUpdateOne) AddChildren(p ...*PartyRelationshipType) *PartyRelationshipTypeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return prtuo.AddChildIDs(ids...)
}

// SetValidFromRoleTypeID sets the "valid_from_role_type" edge to the RoleType entity by ID.
func (prtuo *PartyRelationshipTypeUpdateOne) SetValidFromRoleTypeID(id int) *PartyRelationshipTypeUpdateOne {
	prtuo.mutation.SetValidFromRoleTypeID(id)
	return prtuo
}

// SetNillableValidFromRoleTypeID sets the "valid_from_role_type" edge to the RoleType entity by ID if the given value is not nil.
func (prtuo *PartyRelationshipTypeUpdateOne) SetNillableValidFromRoleTypeID(id *int) *PartyRelationshipTypeUpdateOne {
	if id != nil {
		prtuo = prtuo.SetValidFromRoleTypeID(*id)
	}
	return prtuo
}

// SetValidFromRoleType sets the "valid_from_role_type" edge to the RoleType entity.
func (prtuo *PartyRelationshipTypeUpdateOne) SetValidFromRoleType(r *RoleType) *PartyRelationshipTypeUpdateOne {
	return prtuo.SetValidFromRoleTypeID(r.ID)
}

// SetValidToRoleTypeID sets the "valid_to_role_type" edge to the RoleType entity by ID.
func (prtuo *PartyRelationshipTypeUpdateOne) SetValidToRoleTypeID(id int) *PartyRelationshipTypeUpdateOne {
	prtuo.mutation.SetValidToRoleTypeID(id)
	return prtuo
}

// SetNillableValidToRoleTypeID sets the "valid_to_role_type" edge to the RoleType entity by ID if the given value is not nil.
func (prtuo *PartyRelationshipTypeUpdateOne) SetNillableValidToRoleTypeID(id *int) *PartyRelationshipTypeUpdateOne {
	if id != nil {
		prtuo = prtuo.SetValidToRoleTypeID(*id)
	}
	return prtuo
}

// SetValidToRoleType sets the "valid_to_role_type" edge to the RoleType entity.
func (prtuo *PartyRelationshipTypeUpdateOne) SetValidToRoleType(r *RoleType) *PartyRelationshipTypeUpdateOne {
	return prtuo.SetValidToRoleTypeID(r.ID)
}

// AddChildPartyRelationshipTypeIDs adds the "child_party_relationship_types" edge to the PartyRelationshipType entity by IDs.
func (prtuo *PartyRelationshipTypeUpdateOne) AddChildPartyRelationshipTypeIDs(ids ...int) *PartyRelationshipTypeUpdateOne {
	prtuo.mutation.AddChildPartyRelationshipTypeIDs(ids...)
	return prtuo
}

// AddChildPartyRelationshipTypes adds the "child_party_relationship_types" edges to the PartyRelationshipType entity.
func (prtuo *PartyRelationshipTypeUpdateOne) AddChildPartyRelationshipTypes(p ...*PartyRelationshipType) *PartyRelationshipTypeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return prtuo.AddChildPartyRelationshipTypeIDs(ids...)
}

// Mutation returns the PartyRelationshipTypeMutation object of the builder.
func (prtuo *PartyRelationshipTypeUpdateOne) Mutation() *PartyRelationshipTypeMutation {
	return prtuo.mutation
}

// ClearParent clears the "parent" edge to the PartyRelationshipType entity.
func (prtuo *PartyRelationshipTypeUpdateOne) ClearParent() *PartyRelationshipTypeUpdateOne {
	prtuo.mutation.ClearParent()
	return prtuo
}

// ClearChildren clears all "children" edges to the PartyRelationshipType entity.
func (prtuo *PartyRelationshipTypeUpdateOne) ClearChildren() *PartyRelationshipTypeUpdateOne {
	prtuo.mutation.ClearChildren()
	return prtuo
}

// RemoveChildIDs removes the "children" edge to PartyRelationshipType entities by IDs.
func (prtuo *PartyRelationshipTypeUpdateOne) RemoveChildIDs(ids ...int) *PartyRelationshipTypeUpdateOne {
	prtuo.mutation.RemoveChildIDs(ids...)
	return prtuo
}

// RemoveChildren removes "children" edges to PartyRelationshipType entities.
func (prtuo *PartyRelationshipTypeUpdateOne) RemoveChildren(p ...*PartyRelationshipType) *PartyRelationshipTypeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return prtuo.RemoveChildIDs(ids...)
}

// ClearValidFromRoleType clears the "valid_from_role_type" edge to the RoleType entity.
func (prtuo *PartyRelationshipTypeUpdateOne) ClearValidFromRoleType() *PartyRelationshipTypeUpdateOne {
	prtuo.mutation.ClearValidFromRoleType()
	return prtuo
}

// ClearValidToRoleType clears the "valid_to_role_type" edge to the RoleType entity.
func (prtuo *PartyRelationshipTypeUpdateOne) ClearValidToRoleType() *PartyRelationshipTypeUpdateOne {
	prtuo.mutation.ClearValidToRoleType()
	return prtuo
}

// ClearChildPartyRelationshipTypes clears all "child_party_relationship_types" edges to the PartyRelationshipType entity.
func (prtuo *PartyRelationshipTypeUpdateOne) ClearChildPartyRelationshipTypes() *PartyRelationshipTypeUpdateOne {
	prtuo.mutation.ClearChildPartyRelationshipTypes()
	return prtuo
}

// RemoveChildPartyRelationshipTypeIDs removes the "child_party_relationship_types" edge to PartyRelationshipType entities by IDs.
func (prtuo *PartyRelationshipTypeUpdateOne) RemoveChildPartyRelationshipTypeIDs(ids ...int) *PartyRelationshipTypeUpdateOne {
	prtuo.mutation.RemoveChildPartyRelationshipTypeIDs(ids...)
	return prtuo
}

// RemoveChildPartyRelationshipTypes removes "child_party_relationship_types" edges to PartyRelationshipType entities.
func (prtuo *PartyRelationshipTypeUpdateOne) RemoveChildPartyRelationshipTypes(p ...*PartyRelationshipType) *PartyRelationshipTypeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return prtuo.RemoveChildPartyRelationshipTypeIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (prtuo *PartyRelationshipTypeUpdateOne) Select(field string, fields ...string) *PartyRelationshipTypeUpdateOne {
	prtuo.fields = append([]string{field}, fields...)
	return prtuo
}

// Save executes the query and returns the updated PartyRelationshipType entity.
func (prtuo *PartyRelationshipTypeUpdateOne) Save(ctx context.Context) (*PartyRelationshipType, error) {
	var (
		err  error
		node *PartyRelationshipType
	)
	prtuo.defaults()
	if len(prtuo.hooks) == 0 {
		if err = prtuo.check(); err != nil {
			return nil, err
		}
		node, err = prtuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PartyRelationshipTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = prtuo.check(); err != nil {
				return nil, err
			}
			prtuo.mutation = mutation
			node, err = prtuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(prtuo.hooks) - 1; i >= 0; i-- {
			mut = prtuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, prtuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (prtuo *PartyRelationshipTypeUpdateOne) SaveX(ctx context.Context) *PartyRelationshipType {
	node, err := prtuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (prtuo *PartyRelationshipTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := prtuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (prtuo *PartyRelationshipTypeUpdateOne) ExecX(ctx context.Context) {
	if err := prtuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (prtuo *PartyRelationshipTypeUpdateOne) defaults() {
	if _, ok := prtuo.mutation.UpdateTime(); !ok {
		v := partyrelationshiptype.UpdateDefaultUpdateTime()
		prtuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (prtuo *PartyRelationshipTypeUpdateOne) check() error {
	if v, ok := prtuo.mutation.HasTable(); ok {
		if err := partyrelationshiptype.HasTableValidator(v); err != nil {
			return &ValidationError{Name: "has_table", err: fmt.Errorf("ent: validator failed for field \"has_table\": %w", err)}
		}
	}
	return nil
}

func (prtuo *PartyRelationshipTypeUpdateOne) sqlSave(ctx context.Context) (_node *PartyRelationshipType, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   partyrelationshiptype.Table,
			Columns: partyrelationshiptype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: partyrelationshiptype.FieldID,
			},
		},
	}
	id, ok := prtuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing PartyRelationshipType.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := prtuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, partyrelationshiptype.FieldID)
		for _, f := range fields {
			if !partyrelationshiptype.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != partyrelationshiptype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := prtuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := prtuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: partyrelationshiptype.FieldUpdateTime,
		})
	}
	if value, ok := prtuo.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: partyrelationshiptype.FieldStringRef,
		})
	}
	if prtuo.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: partyrelationshiptype.FieldStringRef,
		})
	}
	if value, ok := prtuo.mutation.HasTable(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: partyrelationshiptype.FieldHasTable,
		})
	}
	if prtuo.mutation.HasTableCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: partyrelationshiptype.FieldHasTable,
		})
	}
	if value, ok := prtuo.mutation.PartyRelationshipName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: partyrelationshiptype.FieldPartyRelationshipName,
		})
	}
	if prtuo.mutation.PartyRelationshipNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: partyrelationshiptype.FieldPartyRelationshipName,
		})
	}
	if value, ok := prtuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: partyrelationshiptype.FieldDescription,
		})
	}
	if prtuo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: partyrelationshiptype.FieldDescription,
		})
	}
	if prtuo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partyrelationshiptype.ParentTable,
			Columns: []string{partyrelationshiptype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partyrelationshiptype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := prtuo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partyrelationshiptype.ParentTable,
			Columns: []string{partyrelationshiptype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partyrelationshiptype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if prtuo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partyrelationshiptype.ChildrenTable,
			Columns: []string{partyrelationshiptype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partyrelationshiptype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := prtuo.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !prtuo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partyrelationshiptype.ChildrenTable,
			Columns: []string{partyrelationshiptype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partyrelationshiptype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := prtuo.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partyrelationshiptype.ChildrenTable,
			Columns: []string{partyrelationshiptype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partyrelationshiptype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if prtuo.mutation.ValidFromRoleTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partyrelationshiptype.ValidFromRoleTypeTable,
			Columns: []string{partyrelationshiptype.ValidFromRoleTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: roletype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := prtuo.mutation.ValidFromRoleTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partyrelationshiptype.ValidFromRoleTypeTable,
			Columns: []string{partyrelationshiptype.ValidFromRoleTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: roletype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if prtuo.mutation.ValidToRoleTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partyrelationshiptype.ValidToRoleTypeTable,
			Columns: []string{partyrelationshiptype.ValidToRoleTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: roletype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := prtuo.mutation.ValidToRoleTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partyrelationshiptype.ValidToRoleTypeTable,
			Columns: []string{partyrelationshiptype.ValidToRoleTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: roletype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if prtuo.mutation.ChildPartyRelationshipTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   partyrelationshiptype.ChildPartyRelationshipTypesTable,
			Columns: partyrelationshiptype.ChildPartyRelationshipTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partyrelationshiptype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := prtuo.mutation.RemovedChildPartyRelationshipTypesIDs(); len(nodes) > 0 && !prtuo.mutation.ChildPartyRelationshipTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   partyrelationshiptype.ChildPartyRelationshipTypesTable,
			Columns: partyrelationshiptype.ChildPartyRelationshipTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partyrelationshiptype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := prtuo.mutation.ChildPartyRelationshipTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   partyrelationshiptype.ChildPartyRelationshipTypesTable,
			Columns: partyrelationshiptype.ChildPartyRelationshipTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partyrelationshiptype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PartyRelationshipType{config: prtuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, prtuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{partyrelationshiptype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
