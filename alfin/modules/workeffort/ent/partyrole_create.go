// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/fixedasset"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/party"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/partyrole"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/workeffortpartyassignment"
)

// PartyRoleCreate is the builder for creating a PartyRole entity.
type PartyRoleCreate struct {
	config
	mutation *PartyRoleMutation
	hooks    []Hook
}

// SetRoleTypeID sets the "role_type_id" field.
func (prc *PartyRoleCreate) SetRoleTypeID(i int) *PartyRoleCreate {
	prc.mutation.SetRoleTypeID(i)
	return prc
}

// SetPartyID sets the "party" edge to the Party entity by ID.
func (prc *PartyRoleCreate) SetPartyID(id int) *PartyRoleCreate {
	prc.mutation.SetPartyID(id)
	return prc
}

// SetNillablePartyID sets the "party" edge to the Party entity by ID if the given value is not nil.
func (prc *PartyRoleCreate) SetNillablePartyID(id *int) *PartyRoleCreate {
	if id != nil {
		prc = prc.SetPartyID(*id)
	}
	return prc
}

// SetParty sets the "party" edge to the Party entity.
func (prc *PartyRoleCreate) SetParty(p *Party) *PartyRoleCreate {
	return prc.SetPartyID(p.ID)
}

// AddFixedAssetIDs adds the "fixed_assets" edge to the FixedAsset entity by IDs.
func (prc *PartyRoleCreate) AddFixedAssetIDs(ids ...int) *PartyRoleCreate {
	prc.mutation.AddFixedAssetIDs(ids...)
	return prc
}

// AddFixedAssets adds the "fixed_assets" edges to the FixedAsset entity.
func (prc *PartyRoleCreate) AddFixedAssets(f ...*FixedAsset) *PartyRoleCreate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return prc.AddFixedAssetIDs(ids...)
}

// AddWorkEffortPartyAssignmentIDs adds the "work_effort_party_assignments" edge to the WorkEffortPartyAssignment entity by IDs.
func (prc *PartyRoleCreate) AddWorkEffortPartyAssignmentIDs(ids ...int) *PartyRoleCreate {
	prc.mutation.AddWorkEffortPartyAssignmentIDs(ids...)
	return prc
}

// AddWorkEffortPartyAssignments adds the "work_effort_party_assignments" edges to the WorkEffortPartyAssignment entity.
func (prc *PartyRoleCreate) AddWorkEffortPartyAssignments(w ...*WorkEffortPartyAssignment) *PartyRoleCreate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return prc.AddWorkEffortPartyAssignmentIDs(ids...)
}

// Mutation returns the PartyRoleMutation object of the builder.
func (prc *PartyRoleCreate) Mutation() *PartyRoleMutation {
	return prc.mutation
}

// Save creates the PartyRole in the database.
func (prc *PartyRoleCreate) Save(ctx context.Context) (*PartyRole, error) {
	var (
		err  error
		node *PartyRole
	)
	if len(prc.hooks) == 0 {
		if err = prc.check(); err != nil {
			return nil, err
		}
		node, err = prc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PartyRoleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = prc.check(); err != nil {
				return nil, err
			}
			prc.mutation = mutation
			node, err = prc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(prc.hooks) - 1; i >= 0; i-- {
			mut = prc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, prc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (prc *PartyRoleCreate) SaveX(ctx context.Context) *PartyRole {
	v, err := prc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (prc *PartyRoleCreate) check() error {
	if _, ok := prc.mutation.RoleTypeID(); !ok {
		return &ValidationError{Name: "role_type_id", err: errors.New("ent: missing required field \"role_type_id\"")}
	}
	return nil
}

func (prc *PartyRoleCreate) sqlSave(ctx context.Context) (*PartyRole, error) {
	_node, _spec := prc.createSpec()
	if err := sqlgraph.CreateNode(ctx, prc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (prc *PartyRoleCreate) createSpec() (*PartyRole, *sqlgraph.CreateSpec) {
	var (
		_node = &PartyRole{config: prc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: partyrole.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: partyrole.FieldID,
			},
		}
	)
	if value, ok := prc.mutation.RoleTypeID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: partyrole.FieldRoleTypeID,
		})
		_node.RoleTypeID = value
	}
	if nodes := prc.mutation.PartyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partyrole.PartyTable,
			Columns: []string{partyrole.PartyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: party.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.party_party_roles = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := prc.mutation.FixedAssetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partyrole.FixedAssetsTable,
			Columns: []string{partyrole.FixedAssetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: fixedasset.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := prc.mutation.WorkEffortPartyAssignmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partyrole.WorkEffortPartyAssignmentsTable,
			Columns: []string{partyrole.WorkEffortPartyAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffortpartyassignment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PartyRoleCreateBulk is the builder for creating many PartyRole entities in bulk.
type PartyRoleCreateBulk struct {
	config
	builders []*PartyRoleCreate
}

// Save creates the PartyRole entities in the database.
func (prcb *PartyRoleCreateBulk) Save(ctx context.Context) ([]*PartyRole, error) {
	specs := make([]*sqlgraph.CreateSpec, len(prcb.builders))
	nodes := make([]*PartyRole, len(prcb.builders))
	mutators := make([]Mutator, len(prcb.builders))
	for i := range prcb.builders {
		func(i int, root context.Context) {
			builder := prcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PartyRoleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, prcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, prcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, prcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (prcb *PartyRoleCreateBulk) SaveX(ctx context.Context) []*PartyRole {
	v, err := prcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
