// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/fixedasset"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/party"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/partycontactmech"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/partyrole"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/predicate"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/roletype"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/workeffortpartyassignment"
)

// PartyRoleQuery is the builder for querying PartyRole entities.
type PartyRoleQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.PartyRole
	// eager-loading edges.
	withParty                      *PartyQuery
	withRoleType                   *RoleTypeQuery
	withFixedAssets                *FixedAssetQuery
	withPartyContactMeches         *PartyContactMechQuery
	withWorkEffortPartyAssignments *WorkEffortPartyAssignmentQuery
	withFKs                        bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the PartyRoleQuery builder.
func (prq *PartyRoleQuery) Where(ps ...predicate.PartyRole) *PartyRoleQuery {
	prq.predicates = append(prq.predicates, ps...)
	return prq
}

// Limit adds a limit step to the query.
func (prq *PartyRoleQuery) Limit(limit int) *PartyRoleQuery {
	prq.limit = &limit
	return prq
}

// Offset adds an offset step to the query.
func (prq *PartyRoleQuery) Offset(offset int) *PartyRoleQuery {
	prq.offset = &offset
	return prq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (prq *PartyRoleQuery) Unique(unique bool) *PartyRoleQuery {
	prq.unique = &unique
	return prq
}

// Order adds an order step to the query.
func (prq *PartyRoleQuery) Order(o ...OrderFunc) *PartyRoleQuery {
	prq.order = append(prq.order, o...)
	return prq
}

// QueryParty chains the current query on the "party" edge.
func (prq *PartyRoleQuery) QueryParty() *PartyQuery {
	query := &PartyQuery{config: prq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := prq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := prq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(partyrole.Table, partyrole.FieldID, selector),
			sqlgraph.To(party.Table, party.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, partyrole.PartyTable, partyrole.PartyColumn),
		)
		fromU = sqlgraph.SetNeighbors(prq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRoleType chains the current query on the "role_type" edge.
func (prq *PartyRoleQuery) QueryRoleType() *RoleTypeQuery {
	query := &RoleTypeQuery{config: prq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := prq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := prq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(partyrole.Table, partyrole.FieldID, selector),
			sqlgraph.To(roletype.Table, roletype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, partyrole.RoleTypeTable, partyrole.RoleTypeColumn),
		)
		fromU = sqlgraph.SetNeighbors(prq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFixedAssets chains the current query on the "fixed_assets" edge.
func (prq *PartyRoleQuery) QueryFixedAssets() *FixedAssetQuery {
	query := &FixedAssetQuery{config: prq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := prq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := prq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(partyrole.Table, partyrole.FieldID, selector),
			sqlgraph.To(fixedasset.Table, fixedasset.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, partyrole.FixedAssetsTable, partyrole.FixedAssetsColumn),
		)
		fromU = sqlgraph.SetNeighbors(prq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPartyContactMeches chains the current query on the "party_contact_meches" edge.
func (prq *PartyRoleQuery) QueryPartyContactMeches() *PartyContactMechQuery {
	query := &PartyContactMechQuery{config: prq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := prq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := prq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(partyrole.Table, partyrole.FieldID, selector),
			sqlgraph.To(partycontactmech.Table, partycontactmech.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, partyrole.PartyContactMechesTable, partyrole.PartyContactMechesColumn),
		)
		fromU = sqlgraph.SetNeighbors(prq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryWorkEffortPartyAssignments chains the current query on the "work_effort_party_assignments" edge.
func (prq *PartyRoleQuery) QueryWorkEffortPartyAssignments() *WorkEffortPartyAssignmentQuery {
	query := &WorkEffortPartyAssignmentQuery{config: prq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := prq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := prq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(partyrole.Table, partyrole.FieldID, selector),
			sqlgraph.To(workeffortpartyassignment.Table, workeffortpartyassignment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, partyrole.WorkEffortPartyAssignmentsTable, partyrole.WorkEffortPartyAssignmentsColumn),
		)
		fromU = sqlgraph.SetNeighbors(prq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first PartyRole entity from the query.
// Returns a *NotFoundError when no PartyRole was found.
func (prq *PartyRoleQuery) First(ctx context.Context) (*PartyRole, error) {
	nodes, err := prq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{partyrole.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (prq *PartyRoleQuery) FirstX(ctx context.Context) *PartyRole {
	node, err := prq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first PartyRole ID from the query.
// Returns a *NotFoundError when no PartyRole ID was found.
func (prq *PartyRoleQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = prq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{partyrole.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (prq *PartyRoleQuery) FirstIDX(ctx context.Context) int {
	id, err := prq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single PartyRole entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one PartyRole entity is not found.
// Returns a *NotFoundError when no PartyRole entities are found.
func (prq *PartyRoleQuery) Only(ctx context.Context) (*PartyRole, error) {
	nodes, err := prq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{partyrole.Label}
	default:
		return nil, &NotSingularError{partyrole.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (prq *PartyRoleQuery) OnlyX(ctx context.Context) *PartyRole {
	node, err := prq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only PartyRole ID in the query.
// Returns a *NotSingularError when exactly one PartyRole ID is not found.
// Returns a *NotFoundError when no entities are found.
func (prq *PartyRoleQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = prq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{partyrole.Label}
	default:
		err = &NotSingularError{partyrole.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (prq *PartyRoleQuery) OnlyIDX(ctx context.Context) int {
	id, err := prq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of PartyRoles.
func (prq *PartyRoleQuery) All(ctx context.Context) ([]*PartyRole, error) {
	if err := prq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return prq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (prq *PartyRoleQuery) AllX(ctx context.Context) []*PartyRole {
	nodes, err := prq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of PartyRole IDs.
func (prq *PartyRoleQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := prq.Select(partyrole.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (prq *PartyRoleQuery) IDsX(ctx context.Context) []int {
	ids, err := prq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (prq *PartyRoleQuery) Count(ctx context.Context) (int, error) {
	if err := prq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return prq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (prq *PartyRoleQuery) CountX(ctx context.Context) int {
	count, err := prq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (prq *PartyRoleQuery) Exist(ctx context.Context) (bool, error) {
	if err := prq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return prq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (prq *PartyRoleQuery) ExistX(ctx context.Context) bool {
	exist, err := prq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the PartyRoleQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (prq *PartyRoleQuery) Clone() *PartyRoleQuery {
	if prq == nil {
		return nil
	}
	return &PartyRoleQuery{
		config:                         prq.config,
		limit:                          prq.limit,
		offset:                         prq.offset,
		order:                          append([]OrderFunc{}, prq.order...),
		predicates:                     append([]predicate.PartyRole{}, prq.predicates...),
		withParty:                      prq.withParty.Clone(),
		withRoleType:                   prq.withRoleType.Clone(),
		withFixedAssets:                prq.withFixedAssets.Clone(),
		withPartyContactMeches:         prq.withPartyContactMeches.Clone(),
		withWorkEffortPartyAssignments: prq.withWorkEffortPartyAssignments.Clone(),
		// clone intermediate query.
		sql:  prq.sql.Clone(),
		path: prq.path,
	}
}

// WithParty tells the query-builder to eager-load the nodes that are connected to
// the "party" edge. The optional arguments are used to configure the query builder of the edge.
func (prq *PartyRoleQuery) WithParty(opts ...func(*PartyQuery)) *PartyRoleQuery {
	query := &PartyQuery{config: prq.config}
	for _, opt := range opts {
		opt(query)
	}
	prq.withParty = query
	return prq
}

// WithRoleType tells the query-builder to eager-load the nodes that are connected to
// the "role_type" edge. The optional arguments are used to configure the query builder of the edge.
func (prq *PartyRoleQuery) WithRoleType(opts ...func(*RoleTypeQuery)) *PartyRoleQuery {
	query := &RoleTypeQuery{config: prq.config}
	for _, opt := range opts {
		opt(query)
	}
	prq.withRoleType = query
	return prq
}

// WithFixedAssets tells the query-builder to eager-load the nodes that are connected to
// the "fixed_assets" edge. The optional arguments are used to configure the query builder of the edge.
func (prq *PartyRoleQuery) WithFixedAssets(opts ...func(*FixedAssetQuery)) *PartyRoleQuery {
	query := &FixedAssetQuery{config: prq.config}
	for _, opt := range opts {
		opt(query)
	}
	prq.withFixedAssets = query
	return prq
}

// WithPartyContactMeches tells the query-builder to eager-load the nodes that are connected to
// the "party_contact_meches" edge. The optional arguments are used to configure the query builder of the edge.
func (prq *PartyRoleQuery) WithPartyContactMeches(opts ...func(*PartyContactMechQuery)) *PartyRoleQuery {
	query := &PartyContactMechQuery{config: prq.config}
	for _, opt := range opts {
		opt(query)
	}
	prq.withPartyContactMeches = query
	return prq
}

// WithWorkEffortPartyAssignments tells the query-builder to eager-load the nodes that are connected to
// the "work_effort_party_assignments" edge. The optional arguments are used to configure the query builder of the edge.
func (prq *PartyRoleQuery) WithWorkEffortPartyAssignments(opts ...func(*WorkEffortPartyAssignmentQuery)) *PartyRoleQuery {
	query := &WorkEffortPartyAssignmentQuery{config: prq.config}
	for _, opt := range opts {
		opt(query)
	}
	prq.withWorkEffortPartyAssignments = query
	return prq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.PartyRole.Query().
//		GroupBy(partyrole.FieldCreateTime).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (prq *PartyRoleQuery) GroupBy(field string, fields ...string) *PartyRoleGroupBy {
	group := &PartyRoleGroupBy{config: prq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := prq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return prq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//	}
//
//	client.PartyRole.Query().
//		Select(partyrole.FieldCreateTime).
//		Scan(ctx, &v)
//
func (prq *PartyRoleQuery) Select(field string, fields ...string) *PartyRoleSelect {
	prq.fields = append([]string{field}, fields...)
	return &PartyRoleSelect{PartyRoleQuery: prq}
}

func (prq *PartyRoleQuery) prepareQuery(ctx context.Context) error {
	for _, f := range prq.fields {
		if !partyrole.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if prq.path != nil {
		prev, err := prq.path(ctx)
		if err != nil {
			return err
		}
		prq.sql = prev
	}
	return nil
}

func (prq *PartyRoleQuery) sqlAll(ctx context.Context) ([]*PartyRole, error) {
	var (
		nodes       = []*PartyRole{}
		withFKs     = prq.withFKs
		_spec       = prq.querySpec()
		loadedTypes = [5]bool{
			prq.withParty != nil,
			prq.withRoleType != nil,
			prq.withFixedAssets != nil,
			prq.withPartyContactMeches != nil,
			prq.withWorkEffortPartyAssignments != nil,
		}
	)
	if prq.withParty != nil || prq.withRoleType != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, partyrole.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &PartyRole{config: prq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, prq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := prq.withParty; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*PartyRole)
		for i := range nodes {
			if nodes[i].party_party_roles == nil {
				continue
			}
			fk := *nodes[i].party_party_roles
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(party.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "party_party_roles" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Party = n
			}
		}
	}

	if query := prq.withRoleType; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*PartyRole)
		for i := range nodes {
			if nodes[i].role_type_party_roles == nil {
				continue
			}
			fk := *nodes[i].role_type_party_roles
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(roletype.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "role_type_party_roles" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.RoleType = n
			}
		}
	}

	if query := prq.withFixedAssets; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*PartyRole)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.FixedAssets = []*FixedAsset{}
		}
		query.withFKs = true
		query.Where(predicate.FixedAsset(func(s *sql.Selector) {
			s.Where(sql.InValues(partyrole.FixedAssetsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.party_role_fixed_assets
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "party_role_fixed_assets" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "party_role_fixed_assets" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.FixedAssets = append(node.Edges.FixedAssets, n)
		}
	}

	if query := prq.withPartyContactMeches; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*PartyRole)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.PartyContactMeches = []*PartyContactMech{}
		}
		query.withFKs = true
		query.Where(predicate.PartyContactMech(func(s *sql.Selector) {
			s.Where(sql.InValues(partyrole.PartyContactMechesColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.party_role_party_contact_meches
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "party_role_party_contact_meches" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "party_role_party_contact_meches" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.PartyContactMeches = append(node.Edges.PartyContactMeches, n)
		}
	}

	if query := prq.withWorkEffortPartyAssignments; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*PartyRole)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.WorkEffortPartyAssignments = []*WorkEffortPartyAssignment{}
		}
		query.withFKs = true
		query.Where(predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
			s.Where(sql.InValues(partyrole.WorkEffortPartyAssignmentsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.party_role_work_effort_party_assignments
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "party_role_work_effort_party_assignments" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "party_role_work_effort_party_assignments" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.WorkEffortPartyAssignments = append(node.Edges.WorkEffortPartyAssignments, n)
		}
	}

	return nodes, nil
}

func (prq *PartyRoleQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := prq.querySpec()
	return sqlgraph.CountNodes(ctx, prq.driver, _spec)
}

func (prq *PartyRoleQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := prq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (prq *PartyRoleQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   partyrole.Table,
			Columns: partyrole.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: partyrole.FieldID,
			},
		},
		From:   prq.sql,
		Unique: true,
	}
	if unique := prq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := prq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, partyrole.FieldID)
		for i := range fields {
			if fields[i] != partyrole.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := prq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := prq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := prq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := prq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (prq *PartyRoleQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(prq.driver.Dialect())
	t1 := builder.Table(partyrole.Table)
	columns := prq.fields
	if len(columns) == 0 {
		columns = partyrole.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if prq.sql != nil {
		selector = prq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	for _, p := range prq.predicates {
		p(selector)
	}
	for _, p := range prq.order {
		p(selector)
	}
	if offset := prq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := prq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// PartyRoleGroupBy is the group-by builder for PartyRole entities.
type PartyRoleGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (prgb *PartyRoleGroupBy) Aggregate(fns ...AggregateFunc) *PartyRoleGroupBy {
	prgb.fns = append(prgb.fns, fns...)
	return prgb
}

// Scan applies the group-by query and scans the result into the given value.
func (prgb *PartyRoleGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := prgb.path(ctx)
	if err != nil {
		return err
	}
	prgb.sql = query
	return prgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (prgb *PartyRoleGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := prgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (prgb *PartyRoleGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(prgb.fields) > 1 {
		return nil, errors.New("ent: PartyRoleGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := prgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (prgb *PartyRoleGroupBy) StringsX(ctx context.Context) []string {
	v, err := prgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (prgb *PartyRoleGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = prgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{partyrole.Label}
	default:
		err = fmt.Errorf("ent: PartyRoleGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (prgb *PartyRoleGroupBy) StringX(ctx context.Context) string {
	v, err := prgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (prgb *PartyRoleGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(prgb.fields) > 1 {
		return nil, errors.New("ent: PartyRoleGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := prgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (prgb *PartyRoleGroupBy) IntsX(ctx context.Context) []int {
	v, err := prgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (prgb *PartyRoleGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = prgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{partyrole.Label}
	default:
		err = fmt.Errorf("ent: PartyRoleGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (prgb *PartyRoleGroupBy) IntX(ctx context.Context) int {
	v, err := prgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (prgb *PartyRoleGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(prgb.fields) > 1 {
		return nil, errors.New("ent: PartyRoleGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := prgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (prgb *PartyRoleGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := prgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (prgb *PartyRoleGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = prgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{partyrole.Label}
	default:
		err = fmt.Errorf("ent: PartyRoleGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (prgb *PartyRoleGroupBy) Float64X(ctx context.Context) float64 {
	v, err := prgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (prgb *PartyRoleGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(prgb.fields) > 1 {
		return nil, errors.New("ent: PartyRoleGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := prgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (prgb *PartyRoleGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := prgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (prgb *PartyRoleGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = prgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{partyrole.Label}
	default:
		err = fmt.Errorf("ent: PartyRoleGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (prgb *PartyRoleGroupBy) BoolX(ctx context.Context) bool {
	v, err := prgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (prgb *PartyRoleGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range prgb.fields {
		if !partyrole.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := prgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := prgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (prgb *PartyRoleGroupBy) sqlQuery() *sql.Selector {
	selector := prgb.sql.Select()
	aggregation := make([]string, 0, len(prgb.fns))
	for _, fn := range prgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(prgb.fields)+len(prgb.fns))
		for _, f := range prgb.fields {
			columns = append(columns, selector.C(f))
		}
		for _, c := range aggregation {
			columns = append(columns, c)
		}
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(prgb.fields...)...)
}

// PartyRoleSelect is the builder for selecting fields of PartyRole entities.
type PartyRoleSelect struct {
	*PartyRoleQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (prs *PartyRoleSelect) Scan(ctx context.Context, v interface{}) error {
	if err := prs.prepareQuery(ctx); err != nil {
		return err
	}
	prs.sql = prs.PartyRoleQuery.sqlQuery(ctx)
	return prs.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (prs *PartyRoleSelect) ScanX(ctx context.Context, v interface{}) {
	if err := prs.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (prs *PartyRoleSelect) Strings(ctx context.Context) ([]string, error) {
	if len(prs.fields) > 1 {
		return nil, errors.New("ent: PartyRoleSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := prs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (prs *PartyRoleSelect) StringsX(ctx context.Context) []string {
	v, err := prs.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (prs *PartyRoleSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = prs.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{partyrole.Label}
	default:
		err = fmt.Errorf("ent: PartyRoleSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (prs *PartyRoleSelect) StringX(ctx context.Context) string {
	v, err := prs.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (prs *PartyRoleSelect) Ints(ctx context.Context) ([]int, error) {
	if len(prs.fields) > 1 {
		return nil, errors.New("ent: PartyRoleSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := prs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (prs *PartyRoleSelect) IntsX(ctx context.Context) []int {
	v, err := prs.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (prs *PartyRoleSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = prs.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{partyrole.Label}
	default:
		err = fmt.Errorf("ent: PartyRoleSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (prs *PartyRoleSelect) IntX(ctx context.Context) int {
	v, err := prs.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (prs *PartyRoleSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(prs.fields) > 1 {
		return nil, errors.New("ent: PartyRoleSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := prs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (prs *PartyRoleSelect) Float64sX(ctx context.Context) []float64 {
	v, err := prs.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (prs *PartyRoleSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = prs.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{partyrole.Label}
	default:
		err = fmt.Errorf("ent: PartyRoleSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (prs *PartyRoleSelect) Float64X(ctx context.Context) float64 {
	v, err := prs.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (prs *PartyRoleSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(prs.fields) > 1 {
		return nil, errors.New("ent: PartyRoleSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := prs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (prs *PartyRoleSelect) BoolsX(ctx context.Context) []bool {
	v, err := prs.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (prs *PartyRoleSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = prs.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{partyrole.Label}
	default:
		err = fmt.Errorf("ent: PartyRoleSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (prs *PartyRoleSelect) BoolX(ctx context.Context) bool {
	v, err := prs.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (prs *PartyRoleSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := prs.sql.Query()
	if err := prs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
