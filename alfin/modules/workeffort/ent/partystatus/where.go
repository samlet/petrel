// Code generated by entc, DO NOT EDIT.

package partystatus

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.PartyStatus {
	return predicate.PartyStatus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.PartyStatus {
	return predicate.PartyStatus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.PartyStatus {
	return predicate.PartyStatus(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.PartyStatus {
	return predicate.PartyStatus(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.PartyStatus {
	return predicate.PartyStatus(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.PartyStatus {
	return predicate.PartyStatus(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.PartyStatus {
	return predicate.PartyStatus(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.PartyStatus {
	return predicate.PartyStatus(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.PartyStatus {
	return predicate.PartyStatus(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// StatusID applies equality check predicate on the "status_id" field. It's identical to StatusIDEQ.
func StatusID(v int) predicate.PartyStatus {
	return predicate.PartyStatus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatusID), v))
	})
}

// StatusDate applies equality check predicate on the "status_date" field. It's identical to StatusDateEQ.
func StatusDate(v time.Time) predicate.PartyStatus {
	return predicate.PartyStatus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatusDate), v))
	})
}

// StatusIDEQ applies the EQ predicate on the "status_id" field.
func StatusIDEQ(v int) predicate.PartyStatus {
	return predicate.PartyStatus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatusID), v))
	})
}

// StatusIDNEQ applies the NEQ predicate on the "status_id" field.
func StatusIDNEQ(v int) predicate.PartyStatus {
	return predicate.PartyStatus(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatusID), v))
	})
}

// StatusIDIn applies the In predicate on the "status_id" field.
func StatusIDIn(vs ...int) predicate.PartyStatus {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PartyStatus(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStatusID), v...))
	})
}

// StatusIDNotIn applies the NotIn predicate on the "status_id" field.
func StatusIDNotIn(vs ...int) predicate.PartyStatus {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PartyStatus(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStatusID), v...))
	})
}

// StatusIDGT applies the GT predicate on the "status_id" field.
func StatusIDGT(v int) predicate.PartyStatus {
	return predicate.PartyStatus(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatusID), v))
	})
}

// StatusIDGTE applies the GTE predicate on the "status_id" field.
func StatusIDGTE(v int) predicate.PartyStatus {
	return predicate.PartyStatus(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatusID), v))
	})
}

// StatusIDLT applies the LT predicate on the "status_id" field.
func StatusIDLT(v int) predicate.PartyStatus {
	return predicate.PartyStatus(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatusID), v))
	})
}

// StatusIDLTE applies the LTE predicate on the "status_id" field.
func StatusIDLTE(v int) predicate.PartyStatus {
	return predicate.PartyStatus(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatusID), v))
	})
}

// StatusDateEQ applies the EQ predicate on the "status_date" field.
func StatusDateEQ(v time.Time) predicate.PartyStatus {
	return predicate.PartyStatus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatusDate), v))
	})
}

// StatusDateNEQ applies the NEQ predicate on the "status_date" field.
func StatusDateNEQ(v time.Time) predicate.PartyStatus {
	return predicate.PartyStatus(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatusDate), v))
	})
}

// StatusDateIn applies the In predicate on the "status_date" field.
func StatusDateIn(vs ...time.Time) predicate.PartyStatus {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PartyStatus(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStatusDate), v...))
	})
}

// StatusDateNotIn applies the NotIn predicate on the "status_date" field.
func StatusDateNotIn(vs ...time.Time) predicate.PartyStatus {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PartyStatus(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStatusDate), v...))
	})
}

// StatusDateGT applies the GT predicate on the "status_date" field.
func StatusDateGT(v time.Time) predicate.PartyStatus {
	return predicate.PartyStatus(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatusDate), v))
	})
}

// StatusDateGTE applies the GTE predicate on the "status_date" field.
func StatusDateGTE(v time.Time) predicate.PartyStatus {
	return predicate.PartyStatus(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatusDate), v))
	})
}

// StatusDateLT applies the LT predicate on the "status_date" field.
func StatusDateLT(v time.Time) predicate.PartyStatus {
	return predicate.PartyStatus(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatusDate), v))
	})
}

// StatusDateLTE applies the LTE predicate on the "status_date" field.
func StatusDateLTE(v time.Time) predicate.PartyStatus {
	return predicate.PartyStatus(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatusDate), v))
	})
}

// HasParty applies the HasEdge predicate on the "party" edge.
func HasParty() predicate.PartyStatus {
	return predicate.PartyStatus(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PartyTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PartyTable, PartyColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPartyWith applies the HasEdge predicate on the "party" edge with a given conditions (other predicates).
func HasPartyWith(preds ...predicate.Party) predicate.PartyStatus {
	return predicate.PartyStatus(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PartyInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PartyTable, PartyColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasChangeByUserLogin applies the HasEdge predicate on the "change_by_user_login" edge.
func HasChangeByUserLogin() predicate.PartyStatus {
	return predicate.PartyStatus(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ChangeByUserLoginTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ChangeByUserLoginTable, ChangeByUserLoginColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChangeByUserLoginWith applies the HasEdge predicate on the "change_by_user_login" edge with a given conditions (other predicates).
func HasChangeByUserLoginWith(preds ...predicate.UserLogin) predicate.PartyStatus {
	return predicate.PartyStatus(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ChangeByUserLoginInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ChangeByUserLoginTable, ChangeByUserLoginColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PartyStatus) predicate.PartyStatus {
	return predicate.PartyStatus(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PartyStatus) predicate.PartyStatus {
	return predicate.PartyStatus(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PartyStatus) predicate.PartyStatus {
	return predicate.PartyStatus(func(s *sql.Selector) {
		p(s.Not())
	})
}
