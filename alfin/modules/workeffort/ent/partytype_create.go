// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/party"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/partytype"
)

// PartyTypeCreate is the builder for creating a PartyType entity.
type PartyTypeCreate struct {
	config
	mutation *PartyTypeMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (ptc *PartyTypeCreate) SetCreateTime(t time.Time) *PartyTypeCreate {
	ptc.mutation.SetCreateTime(t)
	return ptc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (ptc *PartyTypeCreate) SetNillableCreateTime(t *time.Time) *PartyTypeCreate {
	if t != nil {
		ptc.SetCreateTime(*t)
	}
	return ptc
}

// SetUpdateTime sets the "update_time" field.
func (ptc *PartyTypeCreate) SetUpdateTime(t time.Time) *PartyTypeCreate {
	ptc.mutation.SetUpdateTime(t)
	return ptc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (ptc *PartyTypeCreate) SetNillableUpdateTime(t *time.Time) *PartyTypeCreate {
	if t != nil {
		ptc.SetUpdateTime(*t)
	}
	return ptc
}

// SetStringRef sets the "string_ref" field.
func (ptc *PartyTypeCreate) SetStringRef(s string) *PartyTypeCreate {
	ptc.mutation.SetStringRef(s)
	return ptc
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (ptc *PartyTypeCreate) SetNillableStringRef(s *string) *PartyTypeCreate {
	if s != nil {
		ptc.SetStringRef(*s)
	}
	return ptc
}

// SetHasTable sets the "has_table" field.
func (ptc *PartyTypeCreate) SetHasTable(pt partytype.HasTable) *PartyTypeCreate {
	ptc.mutation.SetHasTable(pt)
	return ptc
}

// SetNillableHasTable sets the "has_table" field if the given value is not nil.
func (ptc *PartyTypeCreate) SetNillableHasTable(pt *partytype.HasTable) *PartyTypeCreate {
	if pt != nil {
		ptc.SetHasTable(*pt)
	}
	return ptc
}

// SetDescription sets the "description" field.
func (ptc *PartyTypeCreate) SetDescription(s string) *PartyTypeCreate {
	ptc.mutation.SetDescription(s)
	return ptc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ptc *PartyTypeCreate) SetNillableDescription(s *string) *PartyTypeCreate {
	if s != nil {
		ptc.SetDescription(*s)
	}
	return ptc
}

// SetParentID sets the "parent" edge to the PartyType entity by ID.
func (ptc *PartyTypeCreate) SetParentID(id int) *PartyTypeCreate {
	ptc.mutation.SetParentID(id)
	return ptc
}

// SetNillableParentID sets the "parent" edge to the PartyType entity by ID if the given value is not nil.
func (ptc *PartyTypeCreate) SetNillableParentID(id *int) *PartyTypeCreate {
	if id != nil {
		ptc = ptc.SetParentID(*id)
	}
	return ptc
}

// SetParent sets the "parent" edge to the PartyType entity.
func (ptc *PartyTypeCreate) SetParent(p *PartyType) *PartyTypeCreate {
	return ptc.SetParentID(p.ID)
}

// AddChildIDs adds the "children" edge to the PartyType entity by IDs.
func (ptc *PartyTypeCreate) AddChildIDs(ids ...int) *PartyTypeCreate {
	ptc.mutation.AddChildIDs(ids...)
	return ptc
}

// AddChildren adds the "children" edges to the PartyType entity.
func (ptc *PartyTypeCreate) AddChildren(p ...*PartyType) *PartyTypeCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ptc.AddChildIDs(ids...)
}

// AddSiblingPartyTypeIDs adds the "sibling_party_types" edge to the PartyType entity by IDs.
func (ptc *PartyTypeCreate) AddSiblingPartyTypeIDs(ids ...int) *PartyTypeCreate {
	ptc.mutation.AddSiblingPartyTypeIDs(ids...)
	return ptc
}

// AddSiblingPartyTypes adds the "sibling_party_types" edges to the PartyType entity.
func (ptc *PartyTypeCreate) AddSiblingPartyTypes(p ...*PartyType) *PartyTypeCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ptc.AddSiblingPartyTypeIDs(ids...)
}

// AddPartyIDs adds the "parties" edge to the Party entity by IDs.
func (ptc *PartyTypeCreate) AddPartyIDs(ids ...int) *PartyTypeCreate {
	ptc.mutation.AddPartyIDs(ids...)
	return ptc
}

// AddParties adds the "parties" edges to the Party entity.
func (ptc *PartyTypeCreate) AddParties(p ...*Party) *PartyTypeCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ptc.AddPartyIDs(ids...)
}

// AddChildPartyTypeIDs adds the "child_party_types" edge to the PartyType entity by IDs.
func (ptc *PartyTypeCreate) AddChildPartyTypeIDs(ids ...int) *PartyTypeCreate {
	ptc.mutation.AddChildPartyTypeIDs(ids...)
	return ptc
}

// AddChildPartyTypes adds the "child_party_types" edges to the PartyType entity.
func (ptc *PartyTypeCreate) AddChildPartyTypes(p ...*PartyType) *PartyTypeCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ptc.AddChildPartyTypeIDs(ids...)
}

// Mutation returns the PartyTypeMutation object of the builder.
func (ptc *PartyTypeCreate) Mutation() *PartyTypeMutation {
	return ptc.mutation
}

// Save creates the PartyType in the database.
func (ptc *PartyTypeCreate) Save(ctx context.Context) (*PartyType, error) {
	var (
		err  error
		node *PartyType
	)
	ptc.defaults()
	if len(ptc.hooks) == 0 {
		if err = ptc.check(); err != nil {
			return nil, err
		}
		node, err = ptc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PartyTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ptc.check(); err != nil {
				return nil, err
			}
			ptc.mutation = mutation
			if node, err = ptc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ptc.hooks) - 1; i >= 0; i-- {
			mut = ptc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ptc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ptc *PartyTypeCreate) SaveX(ctx context.Context) *PartyType {
	v, err := ptc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (ptc *PartyTypeCreate) defaults() {
	if _, ok := ptc.mutation.CreateTime(); !ok {
		v := partytype.DefaultCreateTime()
		ptc.mutation.SetCreateTime(v)
	}
	if _, ok := ptc.mutation.UpdateTime(); !ok {
		v := partytype.DefaultUpdateTime()
		ptc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ptc *PartyTypeCreate) check() error {
	if _, ok := ptc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New("ent: missing required field \"create_time\"")}
	}
	if _, ok := ptc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New("ent: missing required field \"update_time\"")}
	}
	if v, ok := ptc.mutation.HasTable(); ok {
		if err := partytype.HasTableValidator(v); err != nil {
			return &ValidationError{Name: "has_table", err: fmt.Errorf("ent: validator failed for field \"has_table\": %w", err)}
		}
	}
	return nil
}

func (ptc *PartyTypeCreate) sqlSave(ctx context.Context) (*PartyType, error) {
	_node, _spec := ptc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ptc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (ptc *PartyTypeCreate) createSpec() (*PartyType, *sqlgraph.CreateSpec) {
	var (
		_node = &PartyType{config: ptc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: partytype.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: partytype.FieldID,
			},
		}
	)
	if value, ok := ptc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: partytype.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := ptc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: partytype.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := ptc.mutation.StringRef(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: partytype.FieldStringRef,
		})
		_node.StringRef = value
	}
	if value, ok := ptc.mutation.HasTable(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: partytype.FieldHasTable,
		})
		_node.HasTable = value
	}
	if value, ok := ptc.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: partytype.FieldDescription,
		})
		_node.Description = value
	}
	if nodes := ptc.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partytype.ParentTable,
			Columns: []string{partytype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partytype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.party_type_children = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ptc.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partytype.ChildrenTable,
			Columns: []string{partytype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partytype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ptc.mutation.SiblingPartyTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   partytype.SiblingPartyTypesTable,
			Columns: partytype.SiblingPartyTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partytype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ptc.mutation.PartiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partytype.PartiesTable,
			Columns: []string{partytype.PartiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: party.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ptc.mutation.ChildPartyTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   partytype.ChildPartyTypesTable,
			Columns: partytype.ChildPartyTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partytype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PartyTypeCreateBulk is the builder for creating many PartyType entities in bulk.
type PartyTypeCreateBulk struct {
	config
	builders []*PartyTypeCreate
}

// Save creates the PartyType entities in the database.
func (ptcb *PartyTypeCreateBulk) Save(ctx context.Context) ([]*PartyType, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ptcb.builders))
	nodes := make([]*PartyType, len(ptcb.builders))
	mutators := make([]Mutator, len(ptcb.builders))
	for i := range ptcb.builders {
		func(i int, root context.Context) {
			builder := ptcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PartyTypeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ptcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ptcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ptcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ptcb *PartyTypeCreateBulk) SaveX(ctx context.Context) []*PartyType {
	v, err := ptcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
