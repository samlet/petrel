// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/party"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/partytype"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/predicate"
)

// PartyTypeUpdate is the builder for updating PartyType entities.
type PartyTypeUpdate struct {
	config
	hooks    []Hook
	mutation *PartyTypeMutation
}

// Where adds a new predicate for the PartyTypeUpdate builder.
func (ptu *PartyTypeUpdate) Where(ps ...predicate.PartyType) *PartyTypeUpdate {
	ptu.mutation.predicates = append(ptu.mutation.predicates, ps...)
	return ptu
}

// SetStringRef sets the "string_ref" field.
func (ptu *PartyTypeUpdate) SetStringRef(s string) *PartyTypeUpdate {
	ptu.mutation.SetStringRef(s)
	return ptu
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (ptu *PartyTypeUpdate) SetNillableStringRef(s *string) *PartyTypeUpdate {
	if s != nil {
		ptu.SetStringRef(*s)
	}
	return ptu
}

// ClearStringRef clears the value of the "string_ref" field.
func (ptu *PartyTypeUpdate) ClearStringRef() *PartyTypeUpdate {
	ptu.mutation.ClearStringRef()
	return ptu
}

// SetHasTable sets the "has_table" field.
func (ptu *PartyTypeUpdate) SetHasTable(pt partytype.HasTable) *PartyTypeUpdate {
	ptu.mutation.SetHasTable(pt)
	return ptu
}

// SetNillableHasTable sets the "has_table" field if the given value is not nil.
func (ptu *PartyTypeUpdate) SetNillableHasTable(pt *partytype.HasTable) *PartyTypeUpdate {
	if pt != nil {
		ptu.SetHasTable(*pt)
	}
	return ptu
}

// ClearHasTable clears the value of the "has_table" field.
func (ptu *PartyTypeUpdate) ClearHasTable() *PartyTypeUpdate {
	ptu.mutation.ClearHasTable()
	return ptu
}

// SetDescription sets the "description" field.
func (ptu *PartyTypeUpdate) SetDescription(s string) *PartyTypeUpdate {
	ptu.mutation.SetDescription(s)
	return ptu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ptu *PartyTypeUpdate) SetNillableDescription(s *string) *PartyTypeUpdate {
	if s != nil {
		ptu.SetDescription(*s)
	}
	return ptu
}

// ClearDescription clears the value of the "description" field.
func (ptu *PartyTypeUpdate) ClearDescription() *PartyTypeUpdate {
	ptu.mutation.ClearDescription()
	return ptu
}

// SetParentID sets the "parent" edge to the PartyType entity by ID.
func (ptu *PartyTypeUpdate) SetParentID(id int) *PartyTypeUpdate {
	ptu.mutation.SetParentID(id)
	return ptu
}

// SetNillableParentID sets the "parent" edge to the PartyType entity by ID if the given value is not nil.
func (ptu *PartyTypeUpdate) SetNillableParentID(id *int) *PartyTypeUpdate {
	if id != nil {
		ptu = ptu.SetParentID(*id)
	}
	return ptu
}

// SetParent sets the "parent" edge to the PartyType entity.
func (ptu *PartyTypeUpdate) SetParent(p *PartyType) *PartyTypeUpdate {
	return ptu.SetParentID(p.ID)
}

// AddChildIDs adds the "children" edge to the PartyType entity by IDs.
func (ptu *PartyTypeUpdate) AddChildIDs(ids ...int) *PartyTypeUpdate {
	ptu.mutation.AddChildIDs(ids...)
	return ptu
}

// AddChildren adds the "children" edges to the PartyType entity.
func (ptu *PartyTypeUpdate) AddChildren(p ...*PartyType) *PartyTypeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ptu.AddChildIDs(ids...)
}

// AddSiblingPartyTypeIDs adds the "sibling_party_types" edge to the PartyType entity by IDs.
func (ptu *PartyTypeUpdate) AddSiblingPartyTypeIDs(ids ...int) *PartyTypeUpdate {
	ptu.mutation.AddSiblingPartyTypeIDs(ids...)
	return ptu
}

// AddSiblingPartyTypes adds the "sibling_party_types" edges to the PartyType entity.
func (ptu *PartyTypeUpdate) AddSiblingPartyTypes(p ...*PartyType) *PartyTypeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ptu.AddSiblingPartyTypeIDs(ids...)
}

// AddPartyIDs adds the "parties" edge to the Party entity by IDs.
func (ptu *PartyTypeUpdate) AddPartyIDs(ids ...int) *PartyTypeUpdate {
	ptu.mutation.AddPartyIDs(ids...)
	return ptu
}

// AddParties adds the "parties" edges to the Party entity.
func (ptu *PartyTypeUpdate) AddParties(p ...*Party) *PartyTypeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ptu.AddPartyIDs(ids...)
}

// AddChildPartyTypeIDs adds the "child_party_types" edge to the PartyType entity by IDs.
func (ptu *PartyTypeUpdate) AddChildPartyTypeIDs(ids ...int) *PartyTypeUpdate {
	ptu.mutation.AddChildPartyTypeIDs(ids...)
	return ptu
}

// AddChildPartyTypes adds the "child_party_types" edges to the PartyType entity.
func (ptu *PartyTypeUpdate) AddChildPartyTypes(p ...*PartyType) *PartyTypeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ptu.AddChildPartyTypeIDs(ids...)
}

// Mutation returns the PartyTypeMutation object of the builder.
func (ptu *PartyTypeUpdate) Mutation() *PartyTypeMutation {
	return ptu.mutation
}

// ClearParent clears the "parent" edge to the PartyType entity.
func (ptu *PartyTypeUpdate) ClearParent() *PartyTypeUpdate {
	ptu.mutation.ClearParent()
	return ptu
}

// ClearChildren clears all "children" edges to the PartyType entity.
func (ptu *PartyTypeUpdate) ClearChildren() *PartyTypeUpdate {
	ptu.mutation.ClearChildren()
	return ptu
}

// RemoveChildIDs removes the "children" edge to PartyType entities by IDs.
func (ptu *PartyTypeUpdate) RemoveChildIDs(ids ...int) *PartyTypeUpdate {
	ptu.mutation.RemoveChildIDs(ids...)
	return ptu
}

// RemoveChildren removes "children" edges to PartyType entities.
func (ptu *PartyTypeUpdate) RemoveChildren(p ...*PartyType) *PartyTypeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ptu.RemoveChildIDs(ids...)
}

// ClearSiblingPartyTypes clears all "sibling_party_types" edges to the PartyType entity.
func (ptu *PartyTypeUpdate) ClearSiblingPartyTypes() *PartyTypeUpdate {
	ptu.mutation.ClearSiblingPartyTypes()
	return ptu
}

// RemoveSiblingPartyTypeIDs removes the "sibling_party_types" edge to PartyType entities by IDs.
func (ptu *PartyTypeUpdate) RemoveSiblingPartyTypeIDs(ids ...int) *PartyTypeUpdate {
	ptu.mutation.RemoveSiblingPartyTypeIDs(ids...)
	return ptu
}

// RemoveSiblingPartyTypes removes "sibling_party_types" edges to PartyType entities.
func (ptu *PartyTypeUpdate) RemoveSiblingPartyTypes(p ...*PartyType) *PartyTypeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ptu.RemoveSiblingPartyTypeIDs(ids...)
}

// ClearParties clears all "parties" edges to the Party entity.
func (ptu *PartyTypeUpdate) ClearParties() *PartyTypeUpdate {
	ptu.mutation.ClearParties()
	return ptu
}

// RemovePartyIDs removes the "parties" edge to Party entities by IDs.
func (ptu *PartyTypeUpdate) RemovePartyIDs(ids ...int) *PartyTypeUpdate {
	ptu.mutation.RemovePartyIDs(ids...)
	return ptu
}

// RemoveParties removes "parties" edges to Party entities.
func (ptu *PartyTypeUpdate) RemoveParties(p ...*Party) *PartyTypeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ptu.RemovePartyIDs(ids...)
}

// ClearChildPartyTypes clears all "child_party_types" edges to the PartyType entity.
func (ptu *PartyTypeUpdate) ClearChildPartyTypes() *PartyTypeUpdate {
	ptu.mutation.ClearChildPartyTypes()
	return ptu
}

// RemoveChildPartyTypeIDs removes the "child_party_types" edge to PartyType entities by IDs.
func (ptu *PartyTypeUpdate) RemoveChildPartyTypeIDs(ids ...int) *PartyTypeUpdate {
	ptu.mutation.RemoveChildPartyTypeIDs(ids...)
	return ptu
}

// RemoveChildPartyTypes removes "child_party_types" edges to PartyType entities.
func (ptu *PartyTypeUpdate) RemoveChildPartyTypes(p ...*PartyType) *PartyTypeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ptu.RemoveChildPartyTypeIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ptu *PartyTypeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	ptu.defaults()
	if len(ptu.hooks) == 0 {
		if err = ptu.check(); err != nil {
			return 0, err
		}
		affected, err = ptu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PartyTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ptu.check(); err != nil {
				return 0, err
			}
			ptu.mutation = mutation
			affected, err = ptu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ptu.hooks) - 1; i >= 0; i-- {
			mut = ptu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ptu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ptu *PartyTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := ptu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ptu *PartyTypeUpdate) Exec(ctx context.Context) error {
	_, err := ptu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptu *PartyTypeUpdate) ExecX(ctx context.Context) {
	if err := ptu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ptu *PartyTypeUpdate) defaults() {
	if _, ok := ptu.mutation.UpdateTime(); !ok {
		v := partytype.UpdateDefaultUpdateTime()
		ptu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ptu *PartyTypeUpdate) check() error {
	if v, ok := ptu.mutation.HasTable(); ok {
		if err := partytype.HasTableValidator(v); err != nil {
			return &ValidationError{Name: "has_table", err: fmt.Errorf("ent: validator failed for field \"has_table\": %w", err)}
		}
	}
	return nil
}

func (ptu *PartyTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   partytype.Table,
			Columns: partytype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: partytype.FieldID,
			},
		},
	}
	if ps := ptu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ptu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: partytype.FieldUpdateTime,
		})
	}
	if value, ok := ptu.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: partytype.FieldStringRef,
		})
	}
	if ptu.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: partytype.FieldStringRef,
		})
	}
	if value, ok := ptu.mutation.HasTable(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: partytype.FieldHasTable,
		})
	}
	if ptu.mutation.HasTableCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: partytype.FieldHasTable,
		})
	}
	if value, ok := ptu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: partytype.FieldDescription,
		})
	}
	if ptu.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: partytype.FieldDescription,
		})
	}
	if ptu.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partytype.ParentTable,
			Columns: []string{partytype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partytype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptu.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partytype.ParentTable,
			Columns: []string{partytype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partytype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ptu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partytype.ChildrenTable,
			Columns: []string{partytype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partytype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptu.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !ptu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partytype.ChildrenTable,
			Columns: []string{partytype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partytype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptu.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partytype.ChildrenTable,
			Columns: []string{partytype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partytype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ptu.mutation.SiblingPartyTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   partytype.SiblingPartyTypesTable,
			Columns: partytype.SiblingPartyTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partytype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptu.mutation.RemovedSiblingPartyTypesIDs(); len(nodes) > 0 && !ptu.mutation.SiblingPartyTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   partytype.SiblingPartyTypesTable,
			Columns: partytype.SiblingPartyTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partytype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptu.mutation.SiblingPartyTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   partytype.SiblingPartyTypesTable,
			Columns: partytype.SiblingPartyTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partytype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ptu.mutation.PartiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partytype.PartiesTable,
			Columns: []string{partytype.PartiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: party.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptu.mutation.RemovedPartiesIDs(); len(nodes) > 0 && !ptu.mutation.PartiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partytype.PartiesTable,
			Columns: []string{partytype.PartiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: party.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptu.mutation.PartiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partytype.PartiesTable,
			Columns: []string{partytype.PartiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: party.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ptu.mutation.ChildPartyTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   partytype.ChildPartyTypesTable,
			Columns: partytype.ChildPartyTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partytype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptu.mutation.RemovedChildPartyTypesIDs(); len(nodes) > 0 && !ptu.mutation.ChildPartyTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   partytype.ChildPartyTypesTable,
			Columns: partytype.ChildPartyTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partytype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptu.mutation.ChildPartyTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   partytype.ChildPartyTypesTable,
			Columns: partytype.ChildPartyTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partytype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ptu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{partytype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// PartyTypeUpdateOne is the builder for updating a single PartyType entity.
type PartyTypeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PartyTypeMutation
}

// SetStringRef sets the "string_ref" field.
func (ptuo *PartyTypeUpdateOne) SetStringRef(s string) *PartyTypeUpdateOne {
	ptuo.mutation.SetStringRef(s)
	return ptuo
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (ptuo *PartyTypeUpdateOne) SetNillableStringRef(s *string) *PartyTypeUpdateOne {
	if s != nil {
		ptuo.SetStringRef(*s)
	}
	return ptuo
}

// ClearStringRef clears the value of the "string_ref" field.
func (ptuo *PartyTypeUpdateOne) ClearStringRef() *PartyTypeUpdateOne {
	ptuo.mutation.ClearStringRef()
	return ptuo
}

// SetHasTable sets the "has_table" field.
func (ptuo *PartyTypeUpdateOne) SetHasTable(pt partytype.HasTable) *PartyTypeUpdateOne {
	ptuo.mutation.SetHasTable(pt)
	return ptuo
}

// SetNillableHasTable sets the "has_table" field if the given value is not nil.
func (ptuo *PartyTypeUpdateOne) SetNillableHasTable(pt *partytype.HasTable) *PartyTypeUpdateOne {
	if pt != nil {
		ptuo.SetHasTable(*pt)
	}
	return ptuo
}

// ClearHasTable clears the value of the "has_table" field.
func (ptuo *PartyTypeUpdateOne) ClearHasTable() *PartyTypeUpdateOne {
	ptuo.mutation.ClearHasTable()
	return ptuo
}

// SetDescription sets the "description" field.
func (ptuo *PartyTypeUpdateOne) SetDescription(s string) *PartyTypeUpdateOne {
	ptuo.mutation.SetDescription(s)
	return ptuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ptuo *PartyTypeUpdateOne) SetNillableDescription(s *string) *PartyTypeUpdateOne {
	if s != nil {
		ptuo.SetDescription(*s)
	}
	return ptuo
}

// ClearDescription clears the value of the "description" field.
func (ptuo *PartyTypeUpdateOne) ClearDescription() *PartyTypeUpdateOne {
	ptuo.mutation.ClearDescription()
	return ptuo
}

// SetParentID sets the "parent" edge to the PartyType entity by ID.
func (ptuo *PartyTypeUpdateOne) SetParentID(id int) *PartyTypeUpdateOne {
	ptuo.mutation.SetParentID(id)
	return ptuo
}

// SetNillableParentID sets the "parent" edge to the PartyType entity by ID if the given value is not nil.
func (ptuo *PartyTypeUpdateOne) SetNillableParentID(id *int) *PartyTypeUpdateOne {
	if id != nil {
		ptuo = ptuo.SetParentID(*id)
	}
	return ptuo
}

// SetParent sets the "parent" edge to the PartyType entity.
func (ptuo *PartyTypeUpdateOne) SetParent(p *PartyType) *PartyTypeUpdateOne {
	return ptuo.SetParentID(p.ID)
}

// AddChildIDs adds the "children" edge to the PartyType entity by IDs.
func (ptuo *PartyTypeUpdateOne) AddChildIDs(ids ...int) *PartyTypeUpdateOne {
	ptuo.mutation.AddChildIDs(ids...)
	return ptuo
}

// AddChildren adds the "children" edges to the PartyType entity.
func (ptuo *PartyTypeUpdateOne) AddChildren(p ...*PartyType) *PartyTypeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ptuo.AddChildIDs(ids...)
}

// AddSiblingPartyTypeIDs adds the "sibling_party_types" edge to the PartyType entity by IDs.
func (ptuo *PartyTypeUpdateOne) AddSiblingPartyTypeIDs(ids ...int) *PartyTypeUpdateOne {
	ptuo.mutation.AddSiblingPartyTypeIDs(ids...)
	return ptuo
}

// AddSiblingPartyTypes adds the "sibling_party_types" edges to the PartyType entity.
func (ptuo *PartyTypeUpdateOne) AddSiblingPartyTypes(p ...*PartyType) *PartyTypeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ptuo.AddSiblingPartyTypeIDs(ids...)
}

// AddPartyIDs adds the "parties" edge to the Party entity by IDs.
func (ptuo *PartyTypeUpdateOne) AddPartyIDs(ids ...int) *PartyTypeUpdateOne {
	ptuo.mutation.AddPartyIDs(ids...)
	return ptuo
}

// AddParties adds the "parties" edges to the Party entity.
func (ptuo *PartyTypeUpdateOne) AddParties(p ...*Party) *PartyTypeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ptuo.AddPartyIDs(ids...)
}

// AddChildPartyTypeIDs adds the "child_party_types" edge to the PartyType entity by IDs.
func (ptuo *PartyTypeUpdateOne) AddChildPartyTypeIDs(ids ...int) *PartyTypeUpdateOne {
	ptuo.mutation.AddChildPartyTypeIDs(ids...)
	return ptuo
}

// AddChildPartyTypes adds the "child_party_types" edges to the PartyType entity.
func (ptuo *PartyTypeUpdateOne) AddChildPartyTypes(p ...*PartyType) *PartyTypeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ptuo.AddChildPartyTypeIDs(ids...)
}

// Mutation returns the PartyTypeMutation object of the builder.
func (ptuo *PartyTypeUpdateOne) Mutation() *PartyTypeMutation {
	return ptuo.mutation
}

// ClearParent clears the "parent" edge to the PartyType entity.
func (ptuo *PartyTypeUpdateOne) ClearParent() *PartyTypeUpdateOne {
	ptuo.mutation.ClearParent()
	return ptuo
}

// ClearChildren clears all "children" edges to the PartyType entity.
func (ptuo *PartyTypeUpdateOne) ClearChildren() *PartyTypeUpdateOne {
	ptuo.mutation.ClearChildren()
	return ptuo
}

// RemoveChildIDs removes the "children" edge to PartyType entities by IDs.
func (ptuo *PartyTypeUpdateOne) RemoveChildIDs(ids ...int) *PartyTypeUpdateOne {
	ptuo.mutation.RemoveChildIDs(ids...)
	return ptuo
}

// RemoveChildren removes "children" edges to PartyType entities.
func (ptuo *PartyTypeUpdateOne) RemoveChildren(p ...*PartyType) *PartyTypeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ptuo.RemoveChildIDs(ids...)
}

// ClearSiblingPartyTypes clears all "sibling_party_types" edges to the PartyType entity.
func (ptuo *PartyTypeUpdateOne) ClearSiblingPartyTypes() *PartyTypeUpdateOne {
	ptuo.mutation.ClearSiblingPartyTypes()
	return ptuo
}

// RemoveSiblingPartyTypeIDs removes the "sibling_party_types" edge to PartyType entities by IDs.
func (ptuo *PartyTypeUpdateOne) RemoveSiblingPartyTypeIDs(ids ...int) *PartyTypeUpdateOne {
	ptuo.mutation.RemoveSiblingPartyTypeIDs(ids...)
	return ptuo
}

// RemoveSiblingPartyTypes removes "sibling_party_types" edges to PartyType entities.
func (ptuo *PartyTypeUpdateOne) RemoveSiblingPartyTypes(p ...*PartyType) *PartyTypeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ptuo.RemoveSiblingPartyTypeIDs(ids...)
}

// ClearParties clears all "parties" edges to the Party entity.
func (ptuo *PartyTypeUpdateOne) ClearParties() *PartyTypeUpdateOne {
	ptuo.mutation.ClearParties()
	return ptuo
}

// RemovePartyIDs removes the "parties" edge to Party entities by IDs.
func (ptuo *PartyTypeUpdateOne) RemovePartyIDs(ids ...int) *PartyTypeUpdateOne {
	ptuo.mutation.RemovePartyIDs(ids...)
	return ptuo
}

// RemoveParties removes "parties" edges to Party entities.
func (ptuo *PartyTypeUpdateOne) RemoveParties(p ...*Party) *PartyTypeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ptuo.RemovePartyIDs(ids...)
}

// ClearChildPartyTypes clears all "child_party_types" edges to the PartyType entity.
func (ptuo *PartyTypeUpdateOne) ClearChildPartyTypes() *PartyTypeUpdateOne {
	ptuo.mutation.ClearChildPartyTypes()
	return ptuo
}

// RemoveChildPartyTypeIDs removes the "child_party_types" edge to PartyType entities by IDs.
func (ptuo *PartyTypeUpdateOne) RemoveChildPartyTypeIDs(ids ...int) *PartyTypeUpdateOne {
	ptuo.mutation.RemoveChildPartyTypeIDs(ids...)
	return ptuo
}

// RemoveChildPartyTypes removes "child_party_types" edges to PartyType entities.
func (ptuo *PartyTypeUpdateOne) RemoveChildPartyTypes(p ...*PartyType) *PartyTypeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ptuo.RemoveChildPartyTypeIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ptuo *PartyTypeUpdateOne) Select(field string, fields ...string) *PartyTypeUpdateOne {
	ptuo.fields = append([]string{field}, fields...)
	return ptuo
}

// Save executes the query and returns the updated PartyType entity.
func (ptuo *PartyTypeUpdateOne) Save(ctx context.Context) (*PartyType, error) {
	var (
		err  error
		node *PartyType
	)
	ptuo.defaults()
	if len(ptuo.hooks) == 0 {
		if err = ptuo.check(); err != nil {
			return nil, err
		}
		node, err = ptuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PartyTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ptuo.check(); err != nil {
				return nil, err
			}
			ptuo.mutation = mutation
			node, err = ptuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ptuo.hooks) - 1; i >= 0; i-- {
			mut = ptuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ptuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ptuo *PartyTypeUpdateOne) SaveX(ctx context.Context) *PartyType {
	node, err := ptuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ptuo *PartyTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := ptuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptuo *PartyTypeUpdateOne) ExecX(ctx context.Context) {
	if err := ptuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ptuo *PartyTypeUpdateOne) defaults() {
	if _, ok := ptuo.mutation.UpdateTime(); !ok {
		v := partytype.UpdateDefaultUpdateTime()
		ptuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ptuo *PartyTypeUpdateOne) check() error {
	if v, ok := ptuo.mutation.HasTable(); ok {
		if err := partytype.HasTableValidator(v); err != nil {
			return &ValidationError{Name: "has_table", err: fmt.Errorf("ent: validator failed for field \"has_table\": %w", err)}
		}
	}
	return nil
}

func (ptuo *PartyTypeUpdateOne) sqlSave(ctx context.Context) (_node *PartyType, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   partytype.Table,
			Columns: partytype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: partytype.FieldID,
			},
		},
	}
	id, ok := ptuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing PartyType.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := ptuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, partytype.FieldID)
		for _, f := range fields {
			if !partytype.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != partytype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ptuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ptuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: partytype.FieldUpdateTime,
		})
	}
	if value, ok := ptuo.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: partytype.FieldStringRef,
		})
	}
	if ptuo.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: partytype.FieldStringRef,
		})
	}
	if value, ok := ptuo.mutation.HasTable(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: partytype.FieldHasTable,
		})
	}
	if ptuo.mutation.HasTableCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: partytype.FieldHasTable,
		})
	}
	if value, ok := ptuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: partytype.FieldDescription,
		})
	}
	if ptuo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: partytype.FieldDescription,
		})
	}
	if ptuo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partytype.ParentTable,
			Columns: []string{partytype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partytype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptuo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partytype.ParentTable,
			Columns: []string{partytype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partytype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ptuo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partytype.ChildrenTable,
			Columns: []string{partytype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partytype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptuo.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !ptuo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partytype.ChildrenTable,
			Columns: []string{partytype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partytype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptuo.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partytype.ChildrenTable,
			Columns: []string{partytype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partytype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ptuo.mutation.SiblingPartyTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   partytype.SiblingPartyTypesTable,
			Columns: partytype.SiblingPartyTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partytype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptuo.mutation.RemovedSiblingPartyTypesIDs(); len(nodes) > 0 && !ptuo.mutation.SiblingPartyTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   partytype.SiblingPartyTypesTable,
			Columns: partytype.SiblingPartyTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partytype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptuo.mutation.SiblingPartyTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   partytype.SiblingPartyTypesTable,
			Columns: partytype.SiblingPartyTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partytype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ptuo.mutation.PartiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partytype.PartiesTable,
			Columns: []string{partytype.PartiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: party.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptuo.mutation.RemovedPartiesIDs(); len(nodes) > 0 && !ptuo.mutation.PartiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partytype.PartiesTable,
			Columns: []string{partytype.PartiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: party.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptuo.mutation.PartiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partytype.PartiesTable,
			Columns: []string{partytype.PartiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: party.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ptuo.mutation.ChildPartyTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   partytype.ChildPartyTypesTable,
			Columns: partytype.ChildPartyTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partytype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptuo.mutation.RemovedChildPartyTypesIDs(); len(nodes) > 0 && !ptuo.mutation.ChildPartyTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   partytype.ChildPartyTypesTable,
			Columns: partytype.ChildPartyTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partytype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptuo.mutation.ChildPartyTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   partytype.ChildPartyTypesTable,
			Columns: partytype.ChildPartyTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partytype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PartyType{config: ptuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ptuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{partytype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
