// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/party"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/person"
)

// Person is the model entity for the Person schema.
type Person struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// StringRef holds the value of the "string_ref" field.
	StringRef string `json:"string_ref,omitempty"`
	// Salutation holds the value of the "salutation" field.
	Salutation string `json:"salutation,omitempty"`
	// FirstName holds the value of the "first_name" field.
	FirstName string `json:"first_name,omitempty"`
	// MiddleName holds the value of the "middle_name" field.
	MiddleName string `json:"middle_name,omitempty"`
	// LastName holds the value of the "last_name" field.
	LastName string `json:"last_name,omitempty"`
	// PersonalTitle holds the value of the "personal_title" field.
	PersonalTitle string `json:"personal_title,omitempty"`
	// Suffix holds the value of the "suffix" field.
	Suffix string `json:"suffix,omitempty"`
	// Nickname holds the value of the "nickname" field.
	Nickname string `json:"nickname,omitempty"`
	// FirstNameLocal holds the value of the "first_name_local" field.
	FirstNameLocal string `json:"first_name_local,omitempty"`
	// MiddleNameLocal holds the value of the "middle_name_local" field.
	MiddleNameLocal string `json:"middle_name_local,omitempty"`
	// LastNameLocal holds the value of the "last_name_local" field.
	LastNameLocal string `json:"last_name_local,omitempty"`
	// OtherLocal holds the value of the "other_local" field.
	OtherLocal string `json:"other_local,omitempty"`
	// MemberID holds the value of the "member_id" field.
	MemberID int `json:"member_id,omitempty"`
	// Gender holds the value of the "gender" field.
	Gender person.Gender `json:"gender,omitempty"`
	// BirthDate holds the value of the "birth_date" field.
	BirthDate time.Time `json:"birth_date,omitempty"`
	// DeceasedDate holds the value of the "deceased_date" field.
	DeceasedDate time.Time `json:"deceased_date,omitempty"`
	// Height holds the value of the "height" field.
	Height float64 `json:"height,omitempty"`
	// Weight holds the value of the "weight" field.
	Weight float64 `json:"weight,omitempty"`
	// MothersMaidenName holds the value of the "mothers_maiden_name" field.
	MothersMaidenName string `json:"mothers_maiden_name,omitempty"`
	// OldMaritalStatus holds the value of the "old_marital_status" field.
	OldMaritalStatus person.OldMaritalStatus `json:"old_marital_status,omitempty"`
	// MaritalStatusEnumID holds the value of the "marital_status_enum_id" field.
	MaritalStatusEnumID int `json:"marital_status_enum_id,omitempty"`
	// SocialSecurityNumber holds the value of the "social_security_number" field.
	SocialSecurityNumber string `json:"social_security_number,omitempty"`
	// PassportNumber holds the value of the "passport_number" field.
	PassportNumber string `json:"passport_number,omitempty"`
	// PassportExpireDate holds the value of the "passport_expire_date" field.
	PassportExpireDate time.Time `json:"passport_expire_date,omitempty"`
	// TotalYearsWorkExperience holds the value of the "total_years_work_experience" field.
	TotalYearsWorkExperience float64 `json:"total_years_work_experience,omitempty"`
	// Comments holds the value of the "comments" field.
	Comments string `json:"comments,omitempty"`
	// EmploymentStatusEnumID holds the value of the "employment_status_enum_id" field.
	EmploymentStatusEnumID int `json:"employment_status_enum_id,omitempty"`
	// ResidenceStatusEnumID holds the value of the "residence_status_enum_id" field.
	ResidenceStatusEnumID int `json:"residence_status_enum_id,omitempty"`
	// Occupation holds the value of the "occupation" field.
	Occupation string `json:"occupation,omitempty"`
	// YearsWithEmployer holds the value of the "years_with_employer" field.
	YearsWithEmployer int `json:"years_with_employer,omitempty"`
	// MonthsWithEmployer holds the value of the "months_with_employer" field.
	MonthsWithEmployer int `json:"months_with_employer,omitempty"`
	// ExistingCustomer holds the value of the "existing_customer" field.
	ExistingCustomer person.ExistingCustomer `json:"existing_customer,omitempty"`
	// CardID holds the value of the "card_id" field.
	CardID string `json:"card_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PersonQuery when eager-loading is set.
	Edges        PersonEdges `json:"edges"`
	party_person *int
}

// PersonEdges holds the relations/edges for other nodes in the graph.
type PersonEdges struct {
	// Party holds the value of the party edge.
	Party *Party `json:"party,omitempty"`
	// PartyContactMeches holds the value of the party_contact_meches edge.
	PartyContactMeches []*PartyContactMech `json:"party_contact_meches,omitempty"`
	// UserLogins holds the value of the user_logins edge.
	UserLogins []*UserLogin `json:"user_logins,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// PartyOrErr returns the Party value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PersonEdges) PartyOrErr() (*Party, error) {
	if e.loadedTypes[0] {
		if e.Party == nil {
			// The edge party was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: party.Label}
		}
		return e.Party, nil
	}
	return nil, &NotLoadedError{edge: "party"}
}

// PartyContactMechesOrErr returns the PartyContactMeches value or an error if the edge
// was not loaded in eager-loading.
func (e PersonEdges) PartyContactMechesOrErr() ([]*PartyContactMech, error) {
	if e.loadedTypes[1] {
		return e.PartyContactMeches, nil
	}
	return nil, &NotLoadedError{edge: "party_contact_meches"}
}

// UserLoginsOrErr returns the UserLogins value or an error if the edge
// was not loaded in eager-loading.
func (e PersonEdges) UserLoginsOrErr() ([]*UserLogin, error) {
	if e.loadedTypes[2] {
		return e.UserLogins, nil
	}
	return nil, &NotLoadedError{edge: "user_logins"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Person) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case person.FieldHeight, person.FieldWeight, person.FieldTotalYearsWorkExperience:
			values[i] = new(sql.NullFloat64)
		case person.FieldID, person.FieldMemberID, person.FieldMaritalStatusEnumID, person.FieldEmploymentStatusEnumID, person.FieldResidenceStatusEnumID, person.FieldYearsWithEmployer, person.FieldMonthsWithEmployer:
			values[i] = new(sql.NullInt64)
		case person.FieldStringRef, person.FieldSalutation, person.FieldFirstName, person.FieldMiddleName, person.FieldLastName, person.FieldPersonalTitle, person.FieldSuffix, person.FieldNickname, person.FieldFirstNameLocal, person.FieldMiddleNameLocal, person.FieldLastNameLocal, person.FieldOtherLocal, person.FieldGender, person.FieldMothersMaidenName, person.FieldOldMaritalStatus, person.FieldSocialSecurityNumber, person.FieldPassportNumber, person.FieldComments, person.FieldOccupation, person.FieldExistingCustomer, person.FieldCardID:
			values[i] = new(sql.NullString)
		case person.FieldCreateTime, person.FieldUpdateTime, person.FieldBirthDate, person.FieldDeceasedDate, person.FieldPassportExpireDate:
			values[i] = new(sql.NullTime)
		case person.ForeignKeys[0]: // party_person
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Person", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Person fields.
func (pe *Person) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case person.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pe.ID = int(value.Int64)
		case person.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				pe.CreateTime = value.Time
			}
		case person.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				pe.UpdateTime = value.Time
			}
		case person.FieldStringRef:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field string_ref", values[i])
			} else if value.Valid {
				pe.StringRef = value.String
			}
		case person.FieldSalutation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field salutation", values[i])
			} else if value.Valid {
				pe.Salutation = value.String
			}
		case person.FieldFirstName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field first_name", values[i])
			} else if value.Valid {
				pe.FirstName = value.String
			}
		case person.FieldMiddleName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field middle_name", values[i])
			} else if value.Valid {
				pe.MiddleName = value.String
			}
		case person.FieldLastName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_name", values[i])
			} else if value.Valid {
				pe.LastName = value.String
			}
		case person.FieldPersonalTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field personal_title", values[i])
			} else if value.Valid {
				pe.PersonalTitle = value.String
			}
		case person.FieldSuffix:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field suffix", values[i])
			} else if value.Valid {
				pe.Suffix = value.String
			}
		case person.FieldNickname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field nickname", values[i])
			} else if value.Valid {
				pe.Nickname = value.String
			}
		case person.FieldFirstNameLocal:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field first_name_local", values[i])
			} else if value.Valid {
				pe.FirstNameLocal = value.String
			}
		case person.FieldMiddleNameLocal:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field middle_name_local", values[i])
			} else if value.Valid {
				pe.MiddleNameLocal = value.String
			}
		case person.FieldLastNameLocal:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_name_local", values[i])
			} else if value.Valid {
				pe.LastNameLocal = value.String
			}
		case person.FieldOtherLocal:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field other_local", values[i])
			} else if value.Valid {
				pe.OtherLocal = value.String
			}
		case person.FieldMemberID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field member_id", values[i])
			} else if value.Valid {
				pe.MemberID = int(value.Int64)
			}
		case person.FieldGender:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field gender", values[i])
			} else if value.Valid {
				pe.Gender = person.Gender(value.String)
			}
		case person.FieldBirthDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field birth_date", values[i])
			} else if value.Valid {
				pe.BirthDate = value.Time
			}
		case person.FieldDeceasedDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deceased_date", values[i])
			} else if value.Valid {
				pe.DeceasedDate = value.Time
			}
		case person.FieldHeight:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field height", values[i])
			} else if value.Valid {
				pe.Height = value.Float64
			}
		case person.FieldWeight:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field weight", values[i])
			} else if value.Valid {
				pe.Weight = value.Float64
			}
		case person.FieldMothersMaidenName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mothers_maiden_name", values[i])
			} else if value.Valid {
				pe.MothersMaidenName = value.String
			}
		case person.FieldOldMaritalStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field old_marital_status", values[i])
			} else if value.Valid {
				pe.OldMaritalStatus = person.OldMaritalStatus(value.String)
			}
		case person.FieldMaritalStatusEnumID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field marital_status_enum_id", values[i])
			} else if value.Valid {
				pe.MaritalStatusEnumID = int(value.Int64)
			}
		case person.FieldSocialSecurityNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field social_security_number", values[i])
			} else if value.Valid {
				pe.SocialSecurityNumber = value.String
			}
		case person.FieldPassportNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field passport_number", values[i])
			} else if value.Valid {
				pe.PassportNumber = value.String
			}
		case person.FieldPassportExpireDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field passport_expire_date", values[i])
			} else if value.Valid {
				pe.PassportExpireDate = value.Time
			}
		case person.FieldTotalYearsWorkExperience:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field total_years_work_experience", values[i])
			} else if value.Valid {
				pe.TotalYearsWorkExperience = value.Float64
			}
		case person.FieldComments:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field comments", values[i])
			} else if value.Valid {
				pe.Comments = value.String
			}
		case person.FieldEmploymentStatusEnumID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field employment_status_enum_id", values[i])
			} else if value.Valid {
				pe.EmploymentStatusEnumID = int(value.Int64)
			}
		case person.FieldResidenceStatusEnumID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field residence_status_enum_id", values[i])
			} else if value.Valid {
				pe.ResidenceStatusEnumID = int(value.Int64)
			}
		case person.FieldOccupation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field occupation", values[i])
			} else if value.Valid {
				pe.Occupation = value.String
			}
		case person.FieldYearsWithEmployer:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field years_with_employer", values[i])
			} else if value.Valid {
				pe.YearsWithEmployer = int(value.Int64)
			}
		case person.FieldMonthsWithEmployer:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field months_with_employer", values[i])
			} else if value.Valid {
				pe.MonthsWithEmployer = int(value.Int64)
			}
		case person.FieldExistingCustomer:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field existing_customer", values[i])
			} else if value.Valid {
				pe.ExistingCustomer = person.ExistingCustomer(value.String)
			}
		case person.FieldCardID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field card_id", values[i])
			} else if value.Valid {
				pe.CardID = value.String
			}
		case person.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field party_person", value)
			} else if value.Valid {
				pe.party_person = new(int)
				*pe.party_person = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryParty queries the "party" edge of the Person entity.
func (pe *Person) QueryParty() *PartyQuery {
	return (&PersonClient{config: pe.config}).QueryParty(pe)
}

// QueryPartyContactMeches queries the "party_contact_meches" edge of the Person entity.
func (pe *Person) QueryPartyContactMeches() *PartyContactMechQuery {
	return (&PersonClient{config: pe.config}).QueryPartyContactMeches(pe)
}

// QueryUserLogins queries the "user_logins" edge of the Person entity.
func (pe *Person) QueryUserLogins() *UserLoginQuery {
	return (&PersonClient{config: pe.config}).QueryUserLogins(pe)
}

// Update returns a builder for updating this Person.
// Note that you need to call Person.Unwrap() before calling this method if this Person
// was returned from a transaction, and the transaction was committed or rolled back.
func (pe *Person) Update() *PersonUpdateOne {
	return (&PersonClient{config: pe.config}).UpdateOne(pe)
}

// Unwrap unwraps the Person entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pe *Person) Unwrap() *Person {
	tx, ok := pe.config.driver.(*txDriver)
	if !ok {
		panic("ent: Person is not a transactional entity")
	}
	pe.config.driver = tx.drv
	return pe
}

// String implements the fmt.Stringer.
func (pe *Person) String() string {
	var builder strings.Builder
	builder.WriteString("Person(")
	builder.WriteString(fmt.Sprintf("id=%v", pe.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(pe.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(pe.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", string_ref=")
	builder.WriteString(pe.StringRef)
	builder.WriteString(", salutation=")
	builder.WriteString(pe.Salutation)
	builder.WriteString(", first_name=")
	builder.WriteString(pe.FirstName)
	builder.WriteString(", middle_name=")
	builder.WriteString(pe.MiddleName)
	builder.WriteString(", last_name=")
	builder.WriteString(pe.LastName)
	builder.WriteString(", personal_title=")
	builder.WriteString(pe.PersonalTitle)
	builder.WriteString(", suffix=")
	builder.WriteString(pe.Suffix)
	builder.WriteString(", nickname=")
	builder.WriteString(pe.Nickname)
	builder.WriteString(", first_name_local=")
	builder.WriteString(pe.FirstNameLocal)
	builder.WriteString(", middle_name_local=")
	builder.WriteString(pe.MiddleNameLocal)
	builder.WriteString(", last_name_local=")
	builder.WriteString(pe.LastNameLocal)
	builder.WriteString(", other_local=")
	builder.WriteString(pe.OtherLocal)
	builder.WriteString(", member_id=")
	builder.WriteString(fmt.Sprintf("%v", pe.MemberID))
	builder.WriteString(", gender=")
	builder.WriteString(fmt.Sprintf("%v", pe.Gender))
	builder.WriteString(", birth_date=")
	builder.WriteString(pe.BirthDate.Format(time.ANSIC))
	builder.WriteString(", deceased_date=")
	builder.WriteString(pe.DeceasedDate.Format(time.ANSIC))
	builder.WriteString(", height=")
	builder.WriteString(fmt.Sprintf("%v", pe.Height))
	builder.WriteString(", weight=")
	builder.WriteString(fmt.Sprintf("%v", pe.Weight))
	builder.WriteString(", mothers_maiden_name=")
	builder.WriteString(pe.MothersMaidenName)
	builder.WriteString(", old_marital_status=")
	builder.WriteString(fmt.Sprintf("%v", pe.OldMaritalStatus))
	builder.WriteString(", marital_status_enum_id=")
	builder.WriteString(fmt.Sprintf("%v", pe.MaritalStatusEnumID))
	builder.WriteString(", social_security_number=")
	builder.WriteString(pe.SocialSecurityNumber)
	builder.WriteString(", passport_number=")
	builder.WriteString(pe.PassportNumber)
	builder.WriteString(", passport_expire_date=")
	builder.WriteString(pe.PassportExpireDate.Format(time.ANSIC))
	builder.WriteString(", total_years_work_experience=")
	builder.WriteString(fmt.Sprintf("%v", pe.TotalYearsWorkExperience))
	builder.WriteString(", comments=")
	builder.WriteString(pe.Comments)
	builder.WriteString(", employment_status_enum_id=")
	builder.WriteString(fmt.Sprintf("%v", pe.EmploymentStatusEnumID))
	builder.WriteString(", residence_status_enum_id=")
	builder.WriteString(fmt.Sprintf("%v", pe.ResidenceStatusEnumID))
	builder.WriteString(", occupation=")
	builder.WriteString(pe.Occupation)
	builder.WriteString(", years_with_employer=")
	builder.WriteString(fmt.Sprintf("%v", pe.YearsWithEmployer))
	builder.WriteString(", months_with_employer=")
	builder.WriteString(fmt.Sprintf("%v", pe.MonthsWithEmployer))
	builder.WriteString(", existing_customer=")
	builder.WriteString(fmt.Sprintf("%v", pe.ExistingCustomer))
	builder.WriteString(", card_id=")
	builder.WriteString(pe.CardID)
	builder.WriteByte(')')
	return builder.String()
}

// Persons is a parsable slice of Person.
type Persons []*Person

func (pe Persons) config(cfg config) {
	for _i := range pe {
		pe[_i].config = cfg
	}
}
