// Code generated by entc, DO NOT EDIT.

package person

import (
	"fmt"
	"time"
)

const (
	// Label holds the string label denoting the person type in the database.
	Label = "person"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldStringRef holds the string denoting the string_ref field in the database.
	FieldStringRef = "string_ref"
	// FieldSalutation holds the string denoting the salutation field in the database.
	FieldSalutation = "salutation"
	// FieldFirstName holds the string denoting the first_name field in the database.
	FieldFirstName = "first_name"
	// FieldMiddleName holds the string denoting the middle_name field in the database.
	FieldMiddleName = "middle_name"
	// FieldLastName holds the string denoting the last_name field in the database.
	FieldLastName = "last_name"
	// FieldPersonalTitle holds the string denoting the personal_title field in the database.
	FieldPersonalTitle = "personal_title"
	// FieldSuffix holds the string denoting the suffix field in the database.
	FieldSuffix = "suffix"
	// FieldNickname holds the string denoting the nickname field in the database.
	FieldNickname = "nickname"
	// FieldFirstNameLocal holds the string denoting the first_name_local field in the database.
	FieldFirstNameLocal = "first_name_local"
	// FieldMiddleNameLocal holds the string denoting the middle_name_local field in the database.
	FieldMiddleNameLocal = "middle_name_local"
	// FieldLastNameLocal holds the string denoting the last_name_local field in the database.
	FieldLastNameLocal = "last_name_local"
	// FieldOtherLocal holds the string denoting the other_local field in the database.
	FieldOtherLocal = "other_local"
	// FieldMemberID holds the string denoting the member_id field in the database.
	FieldMemberID = "member_id"
	// FieldGender holds the string denoting the gender field in the database.
	FieldGender = "gender"
	// FieldBirthDate holds the string denoting the birth_date field in the database.
	FieldBirthDate = "birth_date"
	// FieldDeceasedDate holds the string denoting the deceased_date field in the database.
	FieldDeceasedDate = "deceased_date"
	// FieldHeight holds the string denoting the height field in the database.
	FieldHeight = "height"
	// FieldWeight holds the string denoting the weight field in the database.
	FieldWeight = "weight"
	// FieldMothersMaidenName holds the string denoting the mothers_maiden_name field in the database.
	FieldMothersMaidenName = "mothers_maiden_name"
	// FieldOldMaritalStatus holds the string denoting the old_marital_status field in the database.
	FieldOldMaritalStatus = "old_marital_status"
	// FieldSocialSecurityNumber holds the string denoting the social_security_number field in the database.
	FieldSocialSecurityNumber = "social_security_number"
	// FieldPassportNumber holds the string denoting the passport_number field in the database.
	FieldPassportNumber = "passport_number"
	// FieldPassportExpireDate holds the string denoting the passport_expire_date field in the database.
	FieldPassportExpireDate = "passport_expire_date"
	// FieldTotalYearsWorkExperience holds the string denoting the total_years_work_experience field in the database.
	FieldTotalYearsWorkExperience = "total_years_work_experience"
	// FieldComments holds the string denoting the comments field in the database.
	FieldComments = "comments"
	// FieldOccupation holds the string denoting the occupation field in the database.
	FieldOccupation = "occupation"
	// FieldYearsWithEmployer holds the string denoting the years_with_employer field in the database.
	FieldYearsWithEmployer = "years_with_employer"
	// FieldMonthsWithEmployer holds the string denoting the months_with_employer field in the database.
	FieldMonthsWithEmployer = "months_with_employer"
	// FieldExistingCustomer holds the string denoting the existing_customer field in the database.
	FieldExistingCustomer = "existing_customer"
	// FieldCardID holds the string denoting the card_id field in the database.
	FieldCardID = "card_id"
	// EdgeParty holds the string denoting the party edge name in mutations.
	EdgeParty = "party"
	// EdgeEmploymentStatusEnumeration holds the string denoting the employment_status_enumeration edge name in mutations.
	EdgeEmploymentStatusEnumeration = "employment_status_enumeration"
	// EdgeResidenceStatusEnumeration holds the string denoting the residence_status_enumeration edge name in mutations.
	EdgeResidenceStatusEnumeration = "residence_status_enumeration"
	// EdgeMaritalStatusEnumeration holds the string denoting the marital_status_enumeration edge name in mutations.
	EdgeMaritalStatusEnumeration = "marital_status_enumeration"
	// EdgePartyContactMeches holds the string denoting the party_contact_meches edge name in mutations.
	EdgePartyContactMeches = "party_contact_meches"
	// EdgeUserLogins holds the string denoting the user_logins edge name in mutations.
	EdgeUserLogins = "user_logins"
	// Table holds the table name of the person in the database.
	Table = "persons"
	// PartyTable is the table the holds the party relation/edge.
	PartyTable = "persons"
	// PartyInverseTable is the table name for the Party entity.
	// It exists in this package in order to avoid circular dependency with the "party" package.
	PartyInverseTable = "parties"
	// PartyColumn is the table column denoting the party relation/edge.
	PartyColumn = "party_person"
	// EmploymentStatusEnumerationTable is the table the holds the employment_status_enumeration relation/edge.
	EmploymentStatusEnumerationTable = "persons"
	// EmploymentStatusEnumerationInverseTable is the table name for the Enumeration entity.
	// It exists in this package in order to avoid circular dependency with the "enumeration" package.
	EmploymentStatusEnumerationInverseTable = "enumerations"
	// EmploymentStatusEnumerationColumn is the table column denoting the employment_status_enumeration relation/edge.
	EmploymentStatusEnumerationColumn = "enumeration_employment_status_people"
	// ResidenceStatusEnumerationTable is the table the holds the residence_status_enumeration relation/edge.
	ResidenceStatusEnumerationTable = "persons"
	// ResidenceStatusEnumerationInverseTable is the table name for the Enumeration entity.
	// It exists in this package in order to avoid circular dependency with the "enumeration" package.
	ResidenceStatusEnumerationInverseTable = "enumerations"
	// ResidenceStatusEnumerationColumn is the table column denoting the residence_status_enumeration relation/edge.
	ResidenceStatusEnumerationColumn = "enumeration_residence_status_people"
	// MaritalStatusEnumerationTable is the table the holds the marital_status_enumeration relation/edge.
	MaritalStatusEnumerationTable = "persons"
	// MaritalStatusEnumerationInverseTable is the table name for the Enumeration entity.
	// It exists in this package in order to avoid circular dependency with the "enumeration" package.
	MaritalStatusEnumerationInverseTable = "enumerations"
	// MaritalStatusEnumerationColumn is the table column denoting the marital_status_enumeration relation/edge.
	MaritalStatusEnumerationColumn = "enumeration_marital_status_people"
	// PartyContactMechesTable is the table the holds the party_contact_meches relation/edge.
	PartyContactMechesTable = "party_contact_meches"
	// PartyContactMechesInverseTable is the table name for the PartyContactMech entity.
	// It exists in this package in order to avoid circular dependency with the "partycontactmech" package.
	PartyContactMechesInverseTable = "party_contact_meches"
	// PartyContactMechesColumn is the table column denoting the party_contact_meches relation/edge.
	PartyContactMechesColumn = "person_party_contact_meches"
	// UserLoginsTable is the table the holds the user_logins relation/edge.
	UserLoginsTable = "user_logins"
	// UserLoginsInverseTable is the table name for the UserLogin entity.
	// It exists in this package in order to avoid circular dependency with the "userlogin" package.
	UserLoginsInverseTable = "user_logins"
	// UserLoginsColumn is the table column denoting the user_logins relation/edge.
	UserLoginsColumn = "person_user_logins"
)

// Columns holds all SQL columns for person fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldStringRef,
	FieldSalutation,
	FieldFirstName,
	FieldMiddleName,
	FieldLastName,
	FieldPersonalTitle,
	FieldSuffix,
	FieldNickname,
	FieldFirstNameLocal,
	FieldMiddleNameLocal,
	FieldLastNameLocal,
	FieldOtherLocal,
	FieldMemberID,
	FieldGender,
	FieldBirthDate,
	FieldDeceasedDate,
	FieldHeight,
	FieldWeight,
	FieldMothersMaidenName,
	FieldOldMaritalStatus,
	FieldSocialSecurityNumber,
	FieldPassportNumber,
	FieldPassportExpireDate,
	FieldTotalYearsWorkExperience,
	FieldComments,
	FieldOccupation,
	FieldYearsWithEmployer,
	FieldMonthsWithEmployer,
	FieldExistingCustomer,
	FieldCardID,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "persons"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"enumeration_employment_status_people",
	"enumeration_residence_status_people",
	"enumeration_marital_status_people",
	"party_person",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// DefaultBirthDate holds the default value on creation for the "birth_date" field.
	DefaultBirthDate func() time.Time
	// DefaultDeceasedDate holds the default value on creation for the "deceased_date" field.
	DefaultDeceasedDate func() time.Time
	// DefaultPassportExpireDate holds the default value on creation for the "passport_expire_date" field.
	DefaultPassportExpireDate func() time.Time
	// CardIDValidator is a validator for the "card_id" field. It is called by the builders before save.
	CardIDValidator func(string) error
)

// Gender defines the type for the "gender" enum field.
type Gender string

// Gender values.
const (
	GenderYes     Gender = "Yes"
	GenderNo      Gender = "No"
	GenderUnknown Gender = "Unknown"
)

func (ge Gender) String() string {
	return string(ge)
}

// GenderValidator is a validator for the "gender" field enum values. It is called by the builders before save.
func GenderValidator(ge Gender) error {
	switch ge {
	case GenderYes, GenderNo, GenderUnknown:
		return nil
	default:
		return fmt.Errorf("person: invalid enum value for gender field: %q", ge)
	}
}

// OldMaritalStatus defines the type for the "old_marital_status" enum field.
type OldMaritalStatus string

// OldMaritalStatus values.
const (
	OldMaritalStatusYes     OldMaritalStatus = "Yes"
	OldMaritalStatusNo      OldMaritalStatus = "No"
	OldMaritalStatusUnknown OldMaritalStatus = "Unknown"
)

func (oms OldMaritalStatus) String() string {
	return string(oms)
}

// OldMaritalStatusValidator is a validator for the "old_marital_status" field enum values. It is called by the builders before save.
func OldMaritalStatusValidator(oms OldMaritalStatus) error {
	switch oms {
	case OldMaritalStatusYes, OldMaritalStatusNo, OldMaritalStatusUnknown:
		return nil
	default:
		return fmt.Errorf("person: invalid enum value for old_marital_status field: %q", oms)
	}
}

// ExistingCustomer defines the type for the "existing_customer" enum field.
type ExistingCustomer string

// ExistingCustomer values.
const (
	ExistingCustomerYes     ExistingCustomer = "Yes"
	ExistingCustomerNo      ExistingCustomer = "No"
	ExistingCustomerUnknown ExistingCustomer = "Unknown"
)

func (ec ExistingCustomer) String() string {
	return string(ec)
}

// ExistingCustomerValidator is a validator for the "existing_customer" field enum values. It is called by the builders before save.
func ExistingCustomerValidator(ec ExistingCustomer) error {
	switch ec {
	case ExistingCustomerYes, ExistingCustomerNo, ExistingCustomerUnknown:
		return nil
	default:
		return fmt.Errorf("person: invalid enum value for existing_customer field: %q", ec)
	}
}
