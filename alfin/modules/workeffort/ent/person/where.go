// Code generated by entc, DO NOT EDIT.

package person

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Salutation applies equality check predicate on the "salutation" field. It's identical to SalutationEQ.
func Salutation(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSalutation), v))
	})
}

// FirstName applies equality check predicate on the "first_name" field. It's identical to FirstNameEQ.
func FirstName(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFirstName), v))
	})
}

// MiddleName applies equality check predicate on the "middle_name" field. It's identical to MiddleNameEQ.
func MiddleName(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMiddleName), v))
	})
}

// LastName applies equality check predicate on the "last_name" field. It's identical to LastNameEQ.
func LastName(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastName), v))
	})
}

// PersonalTitle applies equality check predicate on the "personal_title" field. It's identical to PersonalTitleEQ.
func PersonalTitle(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPersonalTitle), v))
	})
}

// Suffix applies equality check predicate on the "suffix" field. It's identical to SuffixEQ.
func Suffix(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSuffix), v))
	})
}

// Nickname applies equality check predicate on the "nickname" field. It's identical to NicknameEQ.
func Nickname(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNickname), v))
	})
}

// FirstNameLocal applies equality check predicate on the "first_name_local" field. It's identical to FirstNameLocalEQ.
func FirstNameLocal(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFirstNameLocal), v))
	})
}

// MiddleNameLocal applies equality check predicate on the "middle_name_local" field. It's identical to MiddleNameLocalEQ.
func MiddleNameLocal(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMiddleNameLocal), v))
	})
}

// LastNameLocal applies equality check predicate on the "last_name_local" field. It's identical to LastNameLocalEQ.
func LastNameLocal(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastNameLocal), v))
	})
}

// OtherLocal applies equality check predicate on the "other_local" field. It's identical to OtherLocalEQ.
func OtherLocal(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOtherLocal), v))
	})
}

// MemberID applies equality check predicate on the "member_id" field. It's identical to MemberIDEQ.
func MemberID(v int) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMemberID), v))
	})
}

// BirthDate applies equality check predicate on the "birth_date" field. It's identical to BirthDateEQ.
func BirthDate(v time.Time) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBirthDate), v))
	})
}

// DeceasedDate applies equality check predicate on the "deceased_date" field. It's identical to DeceasedDateEQ.
func DeceasedDate(v time.Time) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeceasedDate), v))
	})
}

// Height applies equality check predicate on the "height" field. It's identical to HeightEQ.
func Height(v float64) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHeight), v))
	})
}

// Weight applies equality check predicate on the "weight" field. It's identical to WeightEQ.
func Weight(v float64) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWeight), v))
	})
}

// MothersMaidenName applies equality check predicate on the "mothers_maiden_name" field. It's identical to MothersMaidenNameEQ.
func MothersMaidenName(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMothersMaidenName), v))
	})
}

// MaritalStatusEnumID applies equality check predicate on the "marital_status_enum_id" field. It's identical to MaritalStatusEnumIDEQ.
func MaritalStatusEnumID(v int) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMaritalStatusEnumID), v))
	})
}

// SocialSecurityNumber applies equality check predicate on the "social_security_number" field. It's identical to SocialSecurityNumberEQ.
func SocialSecurityNumber(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSocialSecurityNumber), v))
	})
}

// PassportNumber applies equality check predicate on the "passport_number" field. It's identical to PassportNumberEQ.
func PassportNumber(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPassportNumber), v))
	})
}

// PassportExpireDate applies equality check predicate on the "passport_expire_date" field. It's identical to PassportExpireDateEQ.
func PassportExpireDate(v time.Time) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPassportExpireDate), v))
	})
}

// TotalYearsWorkExperience applies equality check predicate on the "total_years_work_experience" field. It's identical to TotalYearsWorkExperienceEQ.
func TotalYearsWorkExperience(v float64) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTotalYearsWorkExperience), v))
	})
}

// Comments applies equality check predicate on the "comments" field. It's identical to CommentsEQ.
func Comments(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldComments), v))
	})
}

// EmploymentStatusEnumID applies equality check predicate on the "employment_status_enum_id" field. It's identical to EmploymentStatusEnumIDEQ.
func EmploymentStatusEnumID(v int) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEmploymentStatusEnumID), v))
	})
}

// ResidenceStatusEnumID applies equality check predicate on the "residence_status_enum_id" field. It's identical to ResidenceStatusEnumIDEQ.
func ResidenceStatusEnumID(v int) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldResidenceStatusEnumID), v))
	})
}

// Occupation applies equality check predicate on the "occupation" field. It's identical to OccupationEQ.
func Occupation(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOccupation), v))
	})
}

// YearsWithEmployer applies equality check predicate on the "years_with_employer" field. It's identical to YearsWithEmployerEQ.
func YearsWithEmployer(v int) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldYearsWithEmployer), v))
	})
}

// MonthsWithEmployer applies equality check predicate on the "months_with_employer" field. It's identical to MonthsWithEmployerEQ.
func MonthsWithEmployer(v int) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMonthsWithEmployer), v))
	})
}

// CardID applies equality check predicate on the "card_id" field. It's identical to CardIDEQ.
func CardID(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCardID), v))
	})
}

// SalutationEQ applies the EQ predicate on the "salutation" field.
func SalutationEQ(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSalutation), v))
	})
}

// SalutationNEQ applies the NEQ predicate on the "salutation" field.
func SalutationNEQ(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSalutation), v))
	})
}

// SalutationIn applies the In predicate on the "salutation" field.
func SalutationIn(vs ...string) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSalutation), v...))
	})
}

// SalutationNotIn applies the NotIn predicate on the "salutation" field.
func SalutationNotIn(vs ...string) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSalutation), v...))
	})
}

// SalutationGT applies the GT predicate on the "salutation" field.
func SalutationGT(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSalutation), v))
	})
}

// SalutationGTE applies the GTE predicate on the "salutation" field.
func SalutationGTE(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSalutation), v))
	})
}

// SalutationLT applies the LT predicate on the "salutation" field.
func SalutationLT(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSalutation), v))
	})
}

// SalutationLTE applies the LTE predicate on the "salutation" field.
func SalutationLTE(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSalutation), v))
	})
}

// SalutationContains applies the Contains predicate on the "salutation" field.
func SalutationContains(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSalutation), v))
	})
}

// SalutationHasPrefix applies the HasPrefix predicate on the "salutation" field.
func SalutationHasPrefix(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSalutation), v))
	})
}

// SalutationHasSuffix applies the HasSuffix predicate on the "salutation" field.
func SalutationHasSuffix(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSalutation), v))
	})
}

// SalutationIsNil applies the IsNil predicate on the "salutation" field.
func SalutationIsNil() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSalutation)))
	})
}

// SalutationNotNil applies the NotNil predicate on the "salutation" field.
func SalutationNotNil() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSalutation)))
	})
}

// SalutationEqualFold applies the EqualFold predicate on the "salutation" field.
func SalutationEqualFold(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSalutation), v))
	})
}

// SalutationContainsFold applies the ContainsFold predicate on the "salutation" field.
func SalutationContainsFold(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSalutation), v))
	})
}

// FirstNameEQ applies the EQ predicate on the "first_name" field.
func FirstNameEQ(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFirstName), v))
	})
}

// FirstNameNEQ applies the NEQ predicate on the "first_name" field.
func FirstNameNEQ(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFirstName), v))
	})
}

// FirstNameIn applies the In predicate on the "first_name" field.
func FirstNameIn(vs ...string) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFirstName), v...))
	})
}

// FirstNameNotIn applies the NotIn predicate on the "first_name" field.
func FirstNameNotIn(vs ...string) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFirstName), v...))
	})
}

// FirstNameGT applies the GT predicate on the "first_name" field.
func FirstNameGT(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFirstName), v))
	})
}

// FirstNameGTE applies the GTE predicate on the "first_name" field.
func FirstNameGTE(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFirstName), v))
	})
}

// FirstNameLT applies the LT predicate on the "first_name" field.
func FirstNameLT(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFirstName), v))
	})
}

// FirstNameLTE applies the LTE predicate on the "first_name" field.
func FirstNameLTE(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFirstName), v))
	})
}

// FirstNameContains applies the Contains predicate on the "first_name" field.
func FirstNameContains(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFirstName), v))
	})
}

// FirstNameHasPrefix applies the HasPrefix predicate on the "first_name" field.
func FirstNameHasPrefix(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFirstName), v))
	})
}

// FirstNameHasSuffix applies the HasSuffix predicate on the "first_name" field.
func FirstNameHasSuffix(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFirstName), v))
	})
}

// FirstNameIsNil applies the IsNil predicate on the "first_name" field.
func FirstNameIsNil() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFirstName)))
	})
}

// FirstNameNotNil applies the NotNil predicate on the "first_name" field.
func FirstNameNotNil() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFirstName)))
	})
}

// FirstNameEqualFold applies the EqualFold predicate on the "first_name" field.
func FirstNameEqualFold(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFirstName), v))
	})
}

// FirstNameContainsFold applies the ContainsFold predicate on the "first_name" field.
func FirstNameContainsFold(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFirstName), v))
	})
}

// MiddleNameEQ applies the EQ predicate on the "middle_name" field.
func MiddleNameEQ(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMiddleName), v))
	})
}

// MiddleNameNEQ applies the NEQ predicate on the "middle_name" field.
func MiddleNameNEQ(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMiddleName), v))
	})
}

// MiddleNameIn applies the In predicate on the "middle_name" field.
func MiddleNameIn(vs ...string) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMiddleName), v...))
	})
}

// MiddleNameNotIn applies the NotIn predicate on the "middle_name" field.
func MiddleNameNotIn(vs ...string) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMiddleName), v...))
	})
}

// MiddleNameGT applies the GT predicate on the "middle_name" field.
func MiddleNameGT(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMiddleName), v))
	})
}

// MiddleNameGTE applies the GTE predicate on the "middle_name" field.
func MiddleNameGTE(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMiddleName), v))
	})
}

// MiddleNameLT applies the LT predicate on the "middle_name" field.
func MiddleNameLT(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMiddleName), v))
	})
}

// MiddleNameLTE applies the LTE predicate on the "middle_name" field.
func MiddleNameLTE(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMiddleName), v))
	})
}

// MiddleNameContains applies the Contains predicate on the "middle_name" field.
func MiddleNameContains(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMiddleName), v))
	})
}

// MiddleNameHasPrefix applies the HasPrefix predicate on the "middle_name" field.
func MiddleNameHasPrefix(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMiddleName), v))
	})
}

// MiddleNameHasSuffix applies the HasSuffix predicate on the "middle_name" field.
func MiddleNameHasSuffix(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMiddleName), v))
	})
}

// MiddleNameIsNil applies the IsNil predicate on the "middle_name" field.
func MiddleNameIsNil() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMiddleName)))
	})
}

// MiddleNameNotNil applies the NotNil predicate on the "middle_name" field.
func MiddleNameNotNil() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMiddleName)))
	})
}

// MiddleNameEqualFold applies the EqualFold predicate on the "middle_name" field.
func MiddleNameEqualFold(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMiddleName), v))
	})
}

// MiddleNameContainsFold applies the ContainsFold predicate on the "middle_name" field.
func MiddleNameContainsFold(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMiddleName), v))
	})
}

// LastNameEQ applies the EQ predicate on the "last_name" field.
func LastNameEQ(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastName), v))
	})
}

// LastNameNEQ applies the NEQ predicate on the "last_name" field.
func LastNameNEQ(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLastName), v))
	})
}

// LastNameIn applies the In predicate on the "last_name" field.
func LastNameIn(vs ...string) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLastName), v...))
	})
}

// LastNameNotIn applies the NotIn predicate on the "last_name" field.
func LastNameNotIn(vs ...string) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLastName), v...))
	})
}

// LastNameGT applies the GT predicate on the "last_name" field.
func LastNameGT(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLastName), v))
	})
}

// LastNameGTE applies the GTE predicate on the "last_name" field.
func LastNameGTE(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLastName), v))
	})
}

// LastNameLT applies the LT predicate on the "last_name" field.
func LastNameLT(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLastName), v))
	})
}

// LastNameLTE applies the LTE predicate on the "last_name" field.
func LastNameLTE(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLastName), v))
	})
}

// LastNameContains applies the Contains predicate on the "last_name" field.
func LastNameContains(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLastName), v))
	})
}

// LastNameHasPrefix applies the HasPrefix predicate on the "last_name" field.
func LastNameHasPrefix(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLastName), v))
	})
}

// LastNameHasSuffix applies the HasSuffix predicate on the "last_name" field.
func LastNameHasSuffix(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLastName), v))
	})
}

// LastNameIsNil applies the IsNil predicate on the "last_name" field.
func LastNameIsNil() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLastName)))
	})
}

// LastNameNotNil applies the NotNil predicate on the "last_name" field.
func LastNameNotNil() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLastName)))
	})
}

// LastNameEqualFold applies the EqualFold predicate on the "last_name" field.
func LastNameEqualFold(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLastName), v))
	})
}

// LastNameContainsFold applies the ContainsFold predicate on the "last_name" field.
func LastNameContainsFold(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLastName), v))
	})
}

// PersonalTitleEQ applies the EQ predicate on the "personal_title" field.
func PersonalTitleEQ(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPersonalTitle), v))
	})
}

// PersonalTitleNEQ applies the NEQ predicate on the "personal_title" field.
func PersonalTitleNEQ(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPersonalTitle), v))
	})
}

// PersonalTitleIn applies the In predicate on the "personal_title" field.
func PersonalTitleIn(vs ...string) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPersonalTitle), v...))
	})
}

// PersonalTitleNotIn applies the NotIn predicate on the "personal_title" field.
func PersonalTitleNotIn(vs ...string) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPersonalTitle), v...))
	})
}

// PersonalTitleGT applies the GT predicate on the "personal_title" field.
func PersonalTitleGT(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPersonalTitle), v))
	})
}

// PersonalTitleGTE applies the GTE predicate on the "personal_title" field.
func PersonalTitleGTE(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPersonalTitle), v))
	})
}

// PersonalTitleLT applies the LT predicate on the "personal_title" field.
func PersonalTitleLT(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPersonalTitle), v))
	})
}

// PersonalTitleLTE applies the LTE predicate on the "personal_title" field.
func PersonalTitleLTE(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPersonalTitle), v))
	})
}

// PersonalTitleContains applies the Contains predicate on the "personal_title" field.
func PersonalTitleContains(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPersonalTitle), v))
	})
}

// PersonalTitleHasPrefix applies the HasPrefix predicate on the "personal_title" field.
func PersonalTitleHasPrefix(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPersonalTitle), v))
	})
}

// PersonalTitleHasSuffix applies the HasSuffix predicate on the "personal_title" field.
func PersonalTitleHasSuffix(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPersonalTitle), v))
	})
}

// PersonalTitleIsNil applies the IsNil predicate on the "personal_title" field.
func PersonalTitleIsNil() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPersonalTitle)))
	})
}

// PersonalTitleNotNil applies the NotNil predicate on the "personal_title" field.
func PersonalTitleNotNil() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPersonalTitle)))
	})
}

// PersonalTitleEqualFold applies the EqualFold predicate on the "personal_title" field.
func PersonalTitleEqualFold(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPersonalTitle), v))
	})
}

// PersonalTitleContainsFold applies the ContainsFold predicate on the "personal_title" field.
func PersonalTitleContainsFold(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPersonalTitle), v))
	})
}

// SuffixEQ applies the EQ predicate on the "suffix" field.
func SuffixEQ(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSuffix), v))
	})
}

// SuffixNEQ applies the NEQ predicate on the "suffix" field.
func SuffixNEQ(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSuffix), v))
	})
}

// SuffixIn applies the In predicate on the "suffix" field.
func SuffixIn(vs ...string) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSuffix), v...))
	})
}

// SuffixNotIn applies the NotIn predicate on the "suffix" field.
func SuffixNotIn(vs ...string) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSuffix), v...))
	})
}

// SuffixGT applies the GT predicate on the "suffix" field.
func SuffixGT(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSuffix), v))
	})
}

// SuffixGTE applies the GTE predicate on the "suffix" field.
func SuffixGTE(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSuffix), v))
	})
}

// SuffixLT applies the LT predicate on the "suffix" field.
func SuffixLT(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSuffix), v))
	})
}

// SuffixLTE applies the LTE predicate on the "suffix" field.
func SuffixLTE(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSuffix), v))
	})
}

// SuffixContains applies the Contains predicate on the "suffix" field.
func SuffixContains(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSuffix), v))
	})
}

// SuffixHasPrefix applies the HasPrefix predicate on the "suffix" field.
func SuffixHasPrefix(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSuffix), v))
	})
}

// SuffixHasSuffix applies the HasSuffix predicate on the "suffix" field.
func SuffixHasSuffix(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSuffix), v))
	})
}

// SuffixIsNil applies the IsNil predicate on the "suffix" field.
func SuffixIsNil() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSuffix)))
	})
}

// SuffixNotNil applies the NotNil predicate on the "suffix" field.
func SuffixNotNil() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSuffix)))
	})
}

// SuffixEqualFold applies the EqualFold predicate on the "suffix" field.
func SuffixEqualFold(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSuffix), v))
	})
}

// SuffixContainsFold applies the ContainsFold predicate on the "suffix" field.
func SuffixContainsFold(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSuffix), v))
	})
}

// NicknameEQ applies the EQ predicate on the "nickname" field.
func NicknameEQ(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNickname), v))
	})
}

// NicknameNEQ applies the NEQ predicate on the "nickname" field.
func NicknameNEQ(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNickname), v))
	})
}

// NicknameIn applies the In predicate on the "nickname" field.
func NicknameIn(vs ...string) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldNickname), v...))
	})
}

// NicknameNotIn applies the NotIn predicate on the "nickname" field.
func NicknameNotIn(vs ...string) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldNickname), v...))
	})
}

// NicknameGT applies the GT predicate on the "nickname" field.
func NicknameGT(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNickname), v))
	})
}

// NicknameGTE applies the GTE predicate on the "nickname" field.
func NicknameGTE(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNickname), v))
	})
}

// NicknameLT applies the LT predicate on the "nickname" field.
func NicknameLT(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNickname), v))
	})
}

// NicknameLTE applies the LTE predicate on the "nickname" field.
func NicknameLTE(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNickname), v))
	})
}

// NicknameContains applies the Contains predicate on the "nickname" field.
func NicknameContains(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldNickname), v))
	})
}

// NicknameHasPrefix applies the HasPrefix predicate on the "nickname" field.
func NicknameHasPrefix(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldNickname), v))
	})
}

// NicknameHasSuffix applies the HasSuffix predicate on the "nickname" field.
func NicknameHasSuffix(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldNickname), v))
	})
}

// NicknameIsNil applies the IsNil predicate on the "nickname" field.
func NicknameIsNil() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldNickname)))
	})
}

// NicknameNotNil applies the NotNil predicate on the "nickname" field.
func NicknameNotNil() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldNickname)))
	})
}

// NicknameEqualFold applies the EqualFold predicate on the "nickname" field.
func NicknameEqualFold(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldNickname), v))
	})
}

// NicknameContainsFold applies the ContainsFold predicate on the "nickname" field.
func NicknameContainsFold(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldNickname), v))
	})
}

// FirstNameLocalEQ applies the EQ predicate on the "first_name_local" field.
func FirstNameLocalEQ(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFirstNameLocal), v))
	})
}

// FirstNameLocalNEQ applies the NEQ predicate on the "first_name_local" field.
func FirstNameLocalNEQ(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFirstNameLocal), v))
	})
}

// FirstNameLocalIn applies the In predicate on the "first_name_local" field.
func FirstNameLocalIn(vs ...string) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFirstNameLocal), v...))
	})
}

// FirstNameLocalNotIn applies the NotIn predicate on the "first_name_local" field.
func FirstNameLocalNotIn(vs ...string) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFirstNameLocal), v...))
	})
}

// FirstNameLocalGT applies the GT predicate on the "first_name_local" field.
func FirstNameLocalGT(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFirstNameLocal), v))
	})
}

// FirstNameLocalGTE applies the GTE predicate on the "first_name_local" field.
func FirstNameLocalGTE(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFirstNameLocal), v))
	})
}

// FirstNameLocalLT applies the LT predicate on the "first_name_local" field.
func FirstNameLocalLT(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFirstNameLocal), v))
	})
}

// FirstNameLocalLTE applies the LTE predicate on the "first_name_local" field.
func FirstNameLocalLTE(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFirstNameLocal), v))
	})
}

// FirstNameLocalContains applies the Contains predicate on the "first_name_local" field.
func FirstNameLocalContains(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFirstNameLocal), v))
	})
}

// FirstNameLocalHasPrefix applies the HasPrefix predicate on the "first_name_local" field.
func FirstNameLocalHasPrefix(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFirstNameLocal), v))
	})
}

// FirstNameLocalHasSuffix applies the HasSuffix predicate on the "first_name_local" field.
func FirstNameLocalHasSuffix(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFirstNameLocal), v))
	})
}

// FirstNameLocalIsNil applies the IsNil predicate on the "first_name_local" field.
func FirstNameLocalIsNil() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFirstNameLocal)))
	})
}

// FirstNameLocalNotNil applies the NotNil predicate on the "first_name_local" field.
func FirstNameLocalNotNil() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFirstNameLocal)))
	})
}

// FirstNameLocalEqualFold applies the EqualFold predicate on the "first_name_local" field.
func FirstNameLocalEqualFold(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFirstNameLocal), v))
	})
}

// FirstNameLocalContainsFold applies the ContainsFold predicate on the "first_name_local" field.
func FirstNameLocalContainsFold(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFirstNameLocal), v))
	})
}

// MiddleNameLocalEQ applies the EQ predicate on the "middle_name_local" field.
func MiddleNameLocalEQ(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMiddleNameLocal), v))
	})
}

// MiddleNameLocalNEQ applies the NEQ predicate on the "middle_name_local" field.
func MiddleNameLocalNEQ(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMiddleNameLocal), v))
	})
}

// MiddleNameLocalIn applies the In predicate on the "middle_name_local" field.
func MiddleNameLocalIn(vs ...string) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMiddleNameLocal), v...))
	})
}

// MiddleNameLocalNotIn applies the NotIn predicate on the "middle_name_local" field.
func MiddleNameLocalNotIn(vs ...string) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMiddleNameLocal), v...))
	})
}

// MiddleNameLocalGT applies the GT predicate on the "middle_name_local" field.
func MiddleNameLocalGT(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMiddleNameLocal), v))
	})
}

// MiddleNameLocalGTE applies the GTE predicate on the "middle_name_local" field.
func MiddleNameLocalGTE(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMiddleNameLocal), v))
	})
}

// MiddleNameLocalLT applies the LT predicate on the "middle_name_local" field.
func MiddleNameLocalLT(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMiddleNameLocal), v))
	})
}

// MiddleNameLocalLTE applies the LTE predicate on the "middle_name_local" field.
func MiddleNameLocalLTE(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMiddleNameLocal), v))
	})
}

// MiddleNameLocalContains applies the Contains predicate on the "middle_name_local" field.
func MiddleNameLocalContains(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMiddleNameLocal), v))
	})
}

// MiddleNameLocalHasPrefix applies the HasPrefix predicate on the "middle_name_local" field.
func MiddleNameLocalHasPrefix(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMiddleNameLocal), v))
	})
}

// MiddleNameLocalHasSuffix applies the HasSuffix predicate on the "middle_name_local" field.
func MiddleNameLocalHasSuffix(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMiddleNameLocal), v))
	})
}

// MiddleNameLocalIsNil applies the IsNil predicate on the "middle_name_local" field.
func MiddleNameLocalIsNil() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMiddleNameLocal)))
	})
}

// MiddleNameLocalNotNil applies the NotNil predicate on the "middle_name_local" field.
func MiddleNameLocalNotNil() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMiddleNameLocal)))
	})
}

// MiddleNameLocalEqualFold applies the EqualFold predicate on the "middle_name_local" field.
func MiddleNameLocalEqualFold(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMiddleNameLocal), v))
	})
}

// MiddleNameLocalContainsFold applies the ContainsFold predicate on the "middle_name_local" field.
func MiddleNameLocalContainsFold(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMiddleNameLocal), v))
	})
}

// LastNameLocalEQ applies the EQ predicate on the "last_name_local" field.
func LastNameLocalEQ(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastNameLocal), v))
	})
}

// LastNameLocalNEQ applies the NEQ predicate on the "last_name_local" field.
func LastNameLocalNEQ(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLastNameLocal), v))
	})
}

// LastNameLocalIn applies the In predicate on the "last_name_local" field.
func LastNameLocalIn(vs ...string) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLastNameLocal), v...))
	})
}

// LastNameLocalNotIn applies the NotIn predicate on the "last_name_local" field.
func LastNameLocalNotIn(vs ...string) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLastNameLocal), v...))
	})
}

// LastNameLocalGT applies the GT predicate on the "last_name_local" field.
func LastNameLocalGT(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLastNameLocal), v))
	})
}

// LastNameLocalGTE applies the GTE predicate on the "last_name_local" field.
func LastNameLocalGTE(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLastNameLocal), v))
	})
}

// LastNameLocalLT applies the LT predicate on the "last_name_local" field.
func LastNameLocalLT(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLastNameLocal), v))
	})
}

// LastNameLocalLTE applies the LTE predicate on the "last_name_local" field.
func LastNameLocalLTE(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLastNameLocal), v))
	})
}

// LastNameLocalContains applies the Contains predicate on the "last_name_local" field.
func LastNameLocalContains(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLastNameLocal), v))
	})
}

// LastNameLocalHasPrefix applies the HasPrefix predicate on the "last_name_local" field.
func LastNameLocalHasPrefix(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLastNameLocal), v))
	})
}

// LastNameLocalHasSuffix applies the HasSuffix predicate on the "last_name_local" field.
func LastNameLocalHasSuffix(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLastNameLocal), v))
	})
}

// LastNameLocalIsNil applies the IsNil predicate on the "last_name_local" field.
func LastNameLocalIsNil() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLastNameLocal)))
	})
}

// LastNameLocalNotNil applies the NotNil predicate on the "last_name_local" field.
func LastNameLocalNotNil() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLastNameLocal)))
	})
}

// LastNameLocalEqualFold applies the EqualFold predicate on the "last_name_local" field.
func LastNameLocalEqualFold(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLastNameLocal), v))
	})
}

// LastNameLocalContainsFold applies the ContainsFold predicate on the "last_name_local" field.
func LastNameLocalContainsFold(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLastNameLocal), v))
	})
}

// OtherLocalEQ applies the EQ predicate on the "other_local" field.
func OtherLocalEQ(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOtherLocal), v))
	})
}

// OtherLocalNEQ applies the NEQ predicate on the "other_local" field.
func OtherLocalNEQ(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOtherLocal), v))
	})
}

// OtherLocalIn applies the In predicate on the "other_local" field.
func OtherLocalIn(vs ...string) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOtherLocal), v...))
	})
}

// OtherLocalNotIn applies the NotIn predicate on the "other_local" field.
func OtherLocalNotIn(vs ...string) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOtherLocal), v...))
	})
}

// OtherLocalGT applies the GT predicate on the "other_local" field.
func OtherLocalGT(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOtherLocal), v))
	})
}

// OtherLocalGTE applies the GTE predicate on the "other_local" field.
func OtherLocalGTE(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOtherLocal), v))
	})
}

// OtherLocalLT applies the LT predicate on the "other_local" field.
func OtherLocalLT(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOtherLocal), v))
	})
}

// OtherLocalLTE applies the LTE predicate on the "other_local" field.
func OtherLocalLTE(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOtherLocal), v))
	})
}

// OtherLocalContains applies the Contains predicate on the "other_local" field.
func OtherLocalContains(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOtherLocal), v))
	})
}

// OtherLocalHasPrefix applies the HasPrefix predicate on the "other_local" field.
func OtherLocalHasPrefix(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOtherLocal), v))
	})
}

// OtherLocalHasSuffix applies the HasSuffix predicate on the "other_local" field.
func OtherLocalHasSuffix(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOtherLocal), v))
	})
}

// OtherLocalIsNil applies the IsNil predicate on the "other_local" field.
func OtherLocalIsNil() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOtherLocal)))
	})
}

// OtherLocalNotNil applies the NotNil predicate on the "other_local" field.
func OtherLocalNotNil() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOtherLocal)))
	})
}

// OtherLocalEqualFold applies the EqualFold predicate on the "other_local" field.
func OtherLocalEqualFold(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOtherLocal), v))
	})
}

// OtherLocalContainsFold applies the ContainsFold predicate on the "other_local" field.
func OtherLocalContainsFold(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOtherLocal), v))
	})
}

// MemberIDEQ applies the EQ predicate on the "member_id" field.
func MemberIDEQ(v int) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMemberID), v))
	})
}

// MemberIDNEQ applies the NEQ predicate on the "member_id" field.
func MemberIDNEQ(v int) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMemberID), v))
	})
}

// MemberIDIn applies the In predicate on the "member_id" field.
func MemberIDIn(vs ...int) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMemberID), v...))
	})
}

// MemberIDNotIn applies the NotIn predicate on the "member_id" field.
func MemberIDNotIn(vs ...int) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMemberID), v...))
	})
}

// MemberIDGT applies the GT predicate on the "member_id" field.
func MemberIDGT(v int) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMemberID), v))
	})
}

// MemberIDGTE applies the GTE predicate on the "member_id" field.
func MemberIDGTE(v int) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMemberID), v))
	})
}

// MemberIDLT applies the LT predicate on the "member_id" field.
func MemberIDLT(v int) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMemberID), v))
	})
}

// MemberIDLTE applies the LTE predicate on the "member_id" field.
func MemberIDLTE(v int) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMemberID), v))
	})
}

// MemberIDIsNil applies the IsNil predicate on the "member_id" field.
func MemberIDIsNil() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMemberID)))
	})
}

// MemberIDNotNil applies the NotNil predicate on the "member_id" field.
func MemberIDNotNil() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMemberID)))
	})
}

// GenderEQ applies the EQ predicate on the "gender" field.
func GenderEQ(v Gender) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGender), v))
	})
}

// GenderNEQ applies the NEQ predicate on the "gender" field.
func GenderNEQ(v Gender) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGender), v))
	})
}

// GenderIn applies the In predicate on the "gender" field.
func GenderIn(vs ...Gender) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldGender), v...))
	})
}

// GenderNotIn applies the NotIn predicate on the "gender" field.
func GenderNotIn(vs ...Gender) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldGender), v...))
	})
}

// GenderIsNil applies the IsNil predicate on the "gender" field.
func GenderIsNil() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldGender)))
	})
}

// GenderNotNil applies the NotNil predicate on the "gender" field.
func GenderNotNil() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldGender)))
	})
}

// BirthDateEQ applies the EQ predicate on the "birth_date" field.
func BirthDateEQ(v time.Time) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBirthDate), v))
	})
}

// BirthDateNEQ applies the NEQ predicate on the "birth_date" field.
func BirthDateNEQ(v time.Time) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBirthDate), v))
	})
}

// BirthDateIn applies the In predicate on the "birth_date" field.
func BirthDateIn(vs ...time.Time) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBirthDate), v...))
	})
}

// BirthDateNotIn applies the NotIn predicate on the "birth_date" field.
func BirthDateNotIn(vs ...time.Time) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBirthDate), v...))
	})
}

// BirthDateGT applies the GT predicate on the "birth_date" field.
func BirthDateGT(v time.Time) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBirthDate), v))
	})
}

// BirthDateGTE applies the GTE predicate on the "birth_date" field.
func BirthDateGTE(v time.Time) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBirthDate), v))
	})
}

// BirthDateLT applies the LT predicate on the "birth_date" field.
func BirthDateLT(v time.Time) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBirthDate), v))
	})
}

// BirthDateLTE applies the LTE predicate on the "birth_date" field.
func BirthDateLTE(v time.Time) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBirthDate), v))
	})
}

// BirthDateIsNil applies the IsNil predicate on the "birth_date" field.
func BirthDateIsNil() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldBirthDate)))
	})
}

// BirthDateNotNil applies the NotNil predicate on the "birth_date" field.
func BirthDateNotNil() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldBirthDate)))
	})
}

// DeceasedDateEQ applies the EQ predicate on the "deceased_date" field.
func DeceasedDateEQ(v time.Time) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeceasedDate), v))
	})
}

// DeceasedDateNEQ applies the NEQ predicate on the "deceased_date" field.
func DeceasedDateNEQ(v time.Time) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeceasedDate), v))
	})
}

// DeceasedDateIn applies the In predicate on the "deceased_date" field.
func DeceasedDateIn(vs ...time.Time) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeceasedDate), v...))
	})
}

// DeceasedDateNotIn applies the NotIn predicate on the "deceased_date" field.
func DeceasedDateNotIn(vs ...time.Time) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeceasedDate), v...))
	})
}

// DeceasedDateGT applies the GT predicate on the "deceased_date" field.
func DeceasedDateGT(v time.Time) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeceasedDate), v))
	})
}

// DeceasedDateGTE applies the GTE predicate on the "deceased_date" field.
func DeceasedDateGTE(v time.Time) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeceasedDate), v))
	})
}

// DeceasedDateLT applies the LT predicate on the "deceased_date" field.
func DeceasedDateLT(v time.Time) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeceasedDate), v))
	})
}

// DeceasedDateLTE applies the LTE predicate on the "deceased_date" field.
func DeceasedDateLTE(v time.Time) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeceasedDate), v))
	})
}

// DeceasedDateIsNil applies the IsNil predicate on the "deceased_date" field.
func DeceasedDateIsNil() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeceasedDate)))
	})
}

// DeceasedDateNotNil applies the NotNil predicate on the "deceased_date" field.
func DeceasedDateNotNil() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeceasedDate)))
	})
}

// HeightEQ applies the EQ predicate on the "height" field.
func HeightEQ(v float64) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHeight), v))
	})
}

// HeightNEQ applies the NEQ predicate on the "height" field.
func HeightNEQ(v float64) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHeight), v))
	})
}

// HeightIn applies the In predicate on the "height" field.
func HeightIn(vs ...float64) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldHeight), v...))
	})
}

// HeightNotIn applies the NotIn predicate on the "height" field.
func HeightNotIn(vs ...float64) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldHeight), v...))
	})
}

// HeightGT applies the GT predicate on the "height" field.
func HeightGT(v float64) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHeight), v))
	})
}

// HeightGTE applies the GTE predicate on the "height" field.
func HeightGTE(v float64) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHeight), v))
	})
}

// HeightLT applies the LT predicate on the "height" field.
func HeightLT(v float64) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHeight), v))
	})
}

// HeightLTE applies the LTE predicate on the "height" field.
func HeightLTE(v float64) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHeight), v))
	})
}

// HeightIsNil applies the IsNil predicate on the "height" field.
func HeightIsNil() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldHeight)))
	})
}

// HeightNotNil applies the NotNil predicate on the "height" field.
func HeightNotNil() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldHeight)))
	})
}

// WeightEQ applies the EQ predicate on the "weight" field.
func WeightEQ(v float64) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWeight), v))
	})
}

// WeightNEQ applies the NEQ predicate on the "weight" field.
func WeightNEQ(v float64) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWeight), v))
	})
}

// WeightIn applies the In predicate on the "weight" field.
func WeightIn(vs ...float64) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldWeight), v...))
	})
}

// WeightNotIn applies the NotIn predicate on the "weight" field.
func WeightNotIn(vs ...float64) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldWeight), v...))
	})
}

// WeightGT applies the GT predicate on the "weight" field.
func WeightGT(v float64) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWeight), v))
	})
}

// WeightGTE applies the GTE predicate on the "weight" field.
func WeightGTE(v float64) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWeight), v))
	})
}

// WeightLT applies the LT predicate on the "weight" field.
func WeightLT(v float64) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWeight), v))
	})
}

// WeightLTE applies the LTE predicate on the "weight" field.
func WeightLTE(v float64) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWeight), v))
	})
}

// WeightIsNil applies the IsNil predicate on the "weight" field.
func WeightIsNil() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldWeight)))
	})
}

// WeightNotNil applies the NotNil predicate on the "weight" field.
func WeightNotNil() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldWeight)))
	})
}

// MothersMaidenNameEQ applies the EQ predicate on the "mothers_maiden_name" field.
func MothersMaidenNameEQ(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMothersMaidenName), v))
	})
}

// MothersMaidenNameNEQ applies the NEQ predicate on the "mothers_maiden_name" field.
func MothersMaidenNameNEQ(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMothersMaidenName), v))
	})
}

// MothersMaidenNameIn applies the In predicate on the "mothers_maiden_name" field.
func MothersMaidenNameIn(vs ...string) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMothersMaidenName), v...))
	})
}

// MothersMaidenNameNotIn applies the NotIn predicate on the "mothers_maiden_name" field.
func MothersMaidenNameNotIn(vs ...string) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMothersMaidenName), v...))
	})
}

// MothersMaidenNameGT applies the GT predicate on the "mothers_maiden_name" field.
func MothersMaidenNameGT(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMothersMaidenName), v))
	})
}

// MothersMaidenNameGTE applies the GTE predicate on the "mothers_maiden_name" field.
func MothersMaidenNameGTE(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMothersMaidenName), v))
	})
}

// MothersMaidenNameLT applies the LT predicate on the "mothers_maiden_name" field.
func MothersMaidenNameLT(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMothersMaidenName), v))
	})
}

// MothersMaidenNameLTE applies the LTE predicate on the "mothers_maiden_name" field.
func MothersMaidenNameLTE(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMothersMaidenName), v))
	})
}

// MothersMaidenNameContains applies the Contains predicate on the "mothers_maiden_name" field.
func MothersMaidenNameContains(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMothersMaidenName), v))
	})
}

// MothersMaidenNameHasPrefix applies the HasPrefix predicate on the "mothers_maiden_name" field.
func MothersMaidenNameHasPrefix(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMothersMaidenName), v))
	})
}

// MothersMaidenNameHasSuffix applies the HasSuffix predicate on the "mothers_maiden_name" field.
func MothersMaidenNameHasSuffix(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMothersMaidenName), v))
	})
}

// MothersMaidenNameIsNil applies the IsNil predicate on the "mothers_maiden_name" field.
func MothersMaidenNameIsNil() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMothersMaidenName)))
	})
}

// MothersMaidenNameNotNil applies the NotNil predicate on the "mothers_maiden_name" field.
func MothersMaidenNameNotNil() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMothersMaidenName)))
	})
}

// MothersMaidenNameEqualFold applies the EqualFold predicate on the "mothers_maiden_name" field.
func MothersMaidenNameEqualFold(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMothersMaidenName), v))
	})
}

// MothersMaidenNameContainsFold applies the ContainsFold predicate on the "mothers_maiden_name" field.
func MothersMaidenNameContainsFold(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMothersMaidenName), v))
	})
}

// OldMaritalStatusEQ applies the EQ predicate on the "old_marital_status" field.
func OldMaritalStatusEQ(v OldMaritalStatus) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOldMaritalStatus), v))
	})
}

// OldMaritalStatusNEQ applies the NEQ predicate on the "old_marital_status" field.
func OldMaritalStatusNEQ(v OldMaritalStatus) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOldMaritalStatus), v))
	})
}

// OldMaritalStatusIn applies the In predicate on the "old_marital_status" field.
func OldMaritalStatusIn(vs ...OldMaritalStatus) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOldMaritalStatus), v...))
	})
}

// OldMaritalStatusNotIn applies the NotIn predicate on the "old_marital_status" field.
func OldMaritalStatusNotIn(vs ...OldMaritalStatus) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOldMaritalStatus), v...))
	})
}

// OldMaritalStatusIsNil applies the IsNil predicate on the "old_marital_status" field.
func OldMaritalStatusIsNil() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOldMaritalStatus)))
	})
}

// OldMaritalStatusNotNil applies the NotNil predicate on the "old_marital_status" field.
func OldMaritalStatusNotNil() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOldMaritalStatus)))
	})
}

// MaritalStatusEnumIDEQ applies the EQ predicate on the "marital_status_enum_id" field.
func MaritalStatusEnumIDEQ(v int) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMaritalStatusEnumID), v))
	})
}

// MaritalStatusEnumIDNEQ applies the NEQ predicate on the "marital_status_enum_id" field.
func MaritalStatusEnumIDNEQ(v int) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMaritalStatusEnumID), v))
	})
}

// MaritalStatusEnumIDIn applies the In predicate on the "marital_status_enum_id" field.
func MaritalStatusEnumIDIn(vs ...int) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMaritalStatusEnumID), v...))
	})
}

// MaritalStatusEnumIDNotIn applies the NotIn predicate on the "marital_status_enum_id" field.
func MaritalStatusEnumIDNotIn(vs ...int) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMaritalStatusEnumID), v...))
	})
}

// MaritalStatusEnumIDGT applies the GT predicate on the "marital_status_enum_id" field.
func MaritalStatusEnumIDGT(v int) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMaritalStatusEnumID), v))
	})
}

// MaritalStatusEnumIDGTE applies the GTE predicate on the "marital_status_enum_id" field.
func MaritalStatusEnumIDGTE(v int) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMaritalStatusEnumID), v))
	})
}

// MaritalStatusEnumIDLT applies the LT predicate on the "marital_status_enum_id" field.
func MaritalStatusEnumIDLT(v int) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMaritalStatusEnumID), v))
	})
}

// MaritalStatusEnumIDLTE applies the LTE predicate on the "marital_status_enum_id" field.
func MaritalStatusEnumIDLTE(v int) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMaritalStatusEnumID), v))
	})
}

// MaritalStatusEnumIDIsNil applies the IsNil predicate on the "marital_status_enum_id" field.
func MaritalStatusEnumIDIsNil() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMaritalStatusEnumID)))
	})
}

// MaritalStatusEnumIDNotNil applies the NotNil predicate on the "marital_status_enum_id" field.
func MaritalStatusEnumIDNotNil() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMaritalStatusEnumID)))
	})
}

// SocialSecurityNumberEQ applies the EQ predicate on the "social_security_number" field.
func SocialSecurityNumberEQ(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSocialSecurityNumber), v))
	})
}

// SocialSecurityNumberNEQ applies the NEQ predicate on the "social_security_number" field.
func SocialSecurityNumberNEQ(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSocialSecurityNumber), v))
	})
}

// SocialSecurityNumberIn applies the In predicate on the "social_security_number" field.
func SocialSecurityNumberIn(vs ...string) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSocialSecurityNumber), v...))
	})
}

// SocialSecurityNumberNotIn applies the NotIn predicate on the "social_security_number" field.
func SocialSecurityNumberNotIn(vs ...string) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSocialSecurityNumber), v...))
	})
}

// SocialSecurityNumberGT applies the GT predicate on the "social_security_number" field.
func SocialSecurityNumberGT(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSocialSecurityNumber), v))
	})
}

// SocialSecurityNumberGTE applies the GTE predicate on the "social_security_number" field.
func SocialSecurityNumberGTE(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSocialSecurityNumber), v))
	})
}

// SocialSecurityNumberLT applies the LT predicate on the "social_security_number" field.
func SocialSecurityNumberLT(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSocialSecurityNumber), v))
	})
}

// SocialSecurityNumberLTE applies the LTE predicate on the "social_security_number" field.
func SocialSecurityNumberLTE(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSocialSecurityNumber), v))
	})
}

// SocialSecurityNumberContains applies the Contains predicate on the "social_security_number" field.
func SocialSecurityNumberContains(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSocialSecurityNumber), v))
	})
}

// SocialSecurityNumberHasPrefix applies the HasPrefix predicate on the "social_security_number" field.
func SocialSecurityNumberHasPrefix(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSocialSecurityNumber), v))
	})
}

// SocialSecurityNumberHasSuffix applies the HasSuffix predicate on the "social_security_number" field.
func SocialSecurityNumberHasSuffix(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSocialSecurityNumber), v))
	})
}

// SocialSecurityNumberIsNil applies the IsNil predicate on the "social_security_number" field.
func SocialSecurityNumberIsNil() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSocialSecurityNumber)))
	})
}

// SocialSecurityNumberNotNil applies the NotNil predicate on the "social_security_number" field.
func SocialSecurityNumberNotNil() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSocialSecurityNumber)))
	})
}

// SocialSecurityNumberEqualFold applies the EqualFold predicate on the "social_security_number" field.
func SocialSecurityNumberEqualFold(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSocialSecurityNumber), v))
	})
}

// SocialSecurityNumberContainsFold applies the ContainsFold predicate on the "social_security_number" field.
func SocialSecurityNumberContainsFold(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSocialSecurityNumber), v))
	})
}

// PassportNumberEQ applies the EQ predicate on the "passport_number" field.
func PassportNumberEQ(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPassportNumber), v))
	})
}

// PassportNumberNEQ applies the NEQ predicate on the "passport_number" field.
func PassportNumberNEQ(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPassportNumber), v))
	})
}

// PassportNumberIn applies the In predicate on the "passport_number" field.
func PassportNumberIn(vs ...string) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPassportNumber), v...))
	})
}

// PassportNumberNotIn applies the NotIn predicate on the "passport_number" field.
func PassportNumberNotIn(vs ...string) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPassportNumber), v...))
	})
}

// PassportNumberGT applies the GT predicate on the "passport_number" field.
func PassportNumberGT(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPassportNumber), v))
	})
}

// PassportNumberGTE applies the GTE predicate on the "passport_number" field.
func PassportNumberGTE(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPassportNumber), v))
	})
}

// PassportNumberLT applies the LT predicate on the "passport_number" field.
func PassportNumberLT(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPassportNumber), v))
	})
}

// PassportNumberLTE applies the LTE predicate on the "passport_number" field.
func PassportNumberLTE(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPassportNumber), v))
	})
}

// PassportNumberContains applies the Contains predicate on the "passport_number" field.
func PassportNumberContains(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPassportNumber), v))
	})
}

// PassportNumberHasPrefix applies the HasPrefix predicate on the "passport_number" field.
func PassportNumberHasPrefix(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPassportNumber), v))
	})
}

// PassportNumberHasSuffix applies the HasSuffix predicate on the "passport_number" field.
func PassportNumberHasSuffix(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPassportNumber), v))
	})
}

// PassportNumberIsNil applies the IsNil predicate on the "passport_number" field.
func PassportNumberIsNil() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPassportNumber)))
	})
}

// PassportNumberNotNil applies the NotNil predicate on the "passport_number" field.
func PassportNumberNotNil() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPassportNumber)))
	})
}

// PassportNumberEqualFold applies the EqualFold predicate on the "passport_number" field.
func PassportNumberEqualFold(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPassportNumber), v))
	})
}

// PassportNumberContainsFold applies the ContainsFold predicate on the "passport_number" field.
func PassportNumberContainsFold(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPassportNumber), v))
	})
}

// PassportExpireDateEQ applies the EQ predicate on the "passport_expire_date" field.
func PassportExpireDateEQ(v time.Time) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPassportExpireDate), v))
	})
}

// PassportExpireDateNEQ applies the NEQ predicate on the "passport_expire_date" field.
func PassportExpireDateNEQ(v time.Time) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPassportExpireDate), v))
	})
}

// PassportExpireDateIn applies the In predicate on the "passport_expire_date" field.
func PassportExpireDateIn(vs ...time.Time) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPassportExpireDate), v...))
	})
}

// PassportExpireDateNotIn applies the NotIn predicate on the "passport_expire_date" field.
func PassportExpireDateNotIn(vs ...time.Time) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPassportExpireDate), v...))
	})
}

// PassportExpireDateGT applies the GT predicate on the "passport_expire_date" field.
func PassportExpireDateGT(v time.Time) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPassportExpireDate), v))
	})
}

// PassportExpireDateGTE applies the GTE predicate on the "passport_expire_date" field.
func PassportExpireDateGTE(v time.Time) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPassportExpireDate), v))
	})
}

// PassportExpireDateLT applies the LT predicate on the "passport_expire_date" field.
func PassportExpireDateLT(v time.Time) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPassportExpireDate), v))
	})
}

// PassportExpireDateLTE applies the LTE predicate on the "passport_expire_date" field.
func PassportExpireDateLTE(v time.Time) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPassportExpireDate), v))
	})
}

// PassportExpireDateIsNil applies the IsNil predicate on the "passport_expire_date" field.
func PassportExpireDateIsNil() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPassportExpireDate)))
	})
}

// PassportExpireDateNotNil applies the NotNil predicate on the "passport_expire_date" field.
func PassportExpireDateNotNil() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPassportExpireDate)))
	})
}

// TotalYearsWorkExperienceEQ applies the EQ predicate on the "total_years_work_experience" field.
func TotalYearsWorkExperienceEQ(v float64) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTotalYearsWorkExperience), v))
	})
}

// TotalYearsWorkExperienceNEQ applies the NEQ predicate on the "total_years_work_experience" field.
func TotalYearsWorkExperienceNEQ(v float64) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTotalYearsWorkExperience), v))
	})
}

// TotalYearsWorkExperienceIn applies the In predicate on the "total_years_work_experience" field.
func TotalYearsWorkExperienceIn(vs ...float64) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTotalYearsWorkExperience), v...))
	})
}

// TotalYearsWorkExperienceNotIn applies the NotIn predicate on the "total_years_work_experience" field.
func TotalYearsWorkExperienceNotIn(vs ...float64) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTotalYearsWorkExperience), v...))
	})
}

// TotalYearsWorkExperienceGT applies the GT predicate on the "total_years_work_experience" field.
func TotalYearsWorkExperienceGT(v float64) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTotalYearsWorkExperience), v))
	})
}

// TotalYearsWorkExperienceGTE applies the GTE predicate on the "total_years_work_experience" field.
func TotalYearsWorkExperienceGTE(v float64) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTotalYearsWorkExperience), v))
	})
}

// TotalYearsWorkExperienceLT applies the LT predicate on the "total_years_work_experience" field.
func TotalYearsWorkExperienceLT(v float64) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTotalYearsWorkExperience), v))
	})
}

// TotalYearsWorkExperienceLTE applies the LTE predicate on the "total_years_work_experience" field.
func TotalYearsWorkExperienceLTE(v float64) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTotalYearsWorkExperience), v))
	})
}

// TotalYearsWorkExperienceIsNil applies the IsNil predicate on the "total_years_work_experience" field.
func TotalYearsWorkExperienceIsNil() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTotalYearsWorkExperience)))
	})
}

// TotalYearsWorkExperienceNotNil applies the NotNil predicate on the "total_years_work_experience" field.
func TotalYearsWorkExperienceNotNil() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTotalYearsWorkExperience)))
	})
}

// CommentsEQ applies the EQ predicate on the "comments" field.
func CommentsEQ(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldComments), v))
	})
}

// CommentsNEQ applies the NEQ predicate on the "comments" field.
func CommentsNEQ(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldComments), v))
	})
}

// CommentsIn applies the In predicate on the "comments" field.
func CommentsIn(vs ...string) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldComments), v...))
	})
}

// CommentsNotIn applies the NotIn predicate on the "comments" field.
func CommentsNotIn(vs ...string) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldComments), v...))
	})
}

// CommentsGT applies the GT predicate on the "comments" field.
func CommentsGT(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldComments), v))
	})
}

// CommentsGTE applies the GTE predicate on the "comments" field.
func CommentsGTE(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldComments), v))
	})
}

// CommentsLT applies the LT predicate on the "comments" field.
func CommentsLT(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldComments), v))
	})
}

// CommentsLTE applies the LTE predicate on the "comments" field.
func CommentsLTE(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldComments), v))
	})
}

// CommentsContains applies the Contains predicate on the "comments" field.
func CommentsContains(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldComments), v))
	})
}

// CommentsHasPrefix applies the HasPrefix predicate on the "comments" field.
func CommentsHasPrefix(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldComments), v))
	})
}

// CommentsHasSuffix applies the HasSuffix predicate on the "comments" field.
func CommentsHasSuffix(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldComments), v))
	})
}

// CommentsIsNil applies the IsNil predicate on the "comments" field.
func CommentsIsNil() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldComments)))
	})
}

// CommentsNotNil applies the NotNil predicate on the "comments" field.
func CommentsNotNil() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldComments)))
	})
}

// CommentsEqualFold applies the EqualFold predicate on the "comments" field.
func CommentsEqualFold(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldComments), v))
	})
}

// CommentsContainsFold applies the ContainsFold predicate on the "comments" field.
func CommentsContainsFold(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldComments), v))
	})
}

// EmploymentStatusEnumIDEQ applies the EQ predicate on the "employment_status_enum_id" field.
func EmploymentStatusEnumIDEQ(v int) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEmploymentStatusEnumID), v))
	})
}

// EmploymentStatusEnumIDNEQ applies the NEQ predicate on the "employment_status_enum_id" field.
func EmploymentStatusEnumIDNEQ(v int) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEmploymentStatusEnumID), v))
	})
}

// EmploymentStatusEnumIDIn applies the In predicate on the "employment_status_enum_id" field.
func EmploymentStatusEnumIDIn(vs ...int) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEmploymentStatusEnumID), v...))
	})
}

// EmploymentStatusEnumIDNotIn applies the NotIn predicate on the "employment_status_enum_id" field.
func EmploymentStatusEnumIDNotIn(vs ...int) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEmploymentStatusEnumID), v...))
	})
}

// EmploymentStatusEnumIDGT applies the GT predicate on the "employment_status_enum_id" field.
func EmploymentStatusEnumIDGT(v int) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEmploymentStatusEnumID), v))
	})
}

// EmploymentStatusEnumIDGTE applies the GTE predicate on the "employment_status_enum_id" field.
func EmploymentStatusEnumIDGTE(v int) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEmploymentStatusEnumID), v))
	})
}

// EmploymentStatusEnumIDLT applies the LT predicate on the "employment_status_enum_id" field.
func EmploymentStatusEnumIDLT(v int) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEmploymentStatusEnumID), v))
	})
}

// EmploymentStatusEnumIDLTE applies the LTE predicate on the "employment_status_enum_id" field.
func EmploymentStatusEnumIDLTE(v int) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEmploymentStatusEnumID), v))
	})
}

// EmploymentStatusEnumIDIsNil applies the IsNil predicate on the "employment_status_enum_id" field.
func EmploymentStatusEnumIDIsNil() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldEmploymentStatusEnumID)))
	})
}

// EmploymentStatusEnumIDNotNil applies the NotNil predicate on the "employment_status_enum_id" field.
func EmploymentStatusEnumIDNotNil() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldEmploymentStatusEnumID)))
	})
}

// ResidenceStatusEnumIDEQ applies the EQ predicate on the "residence_status_enum_id" field.
func ResidenceStatusEnumIDEQ(v int) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldResidenceStatusEnumID), v))
	})
}

// ResidenceStatusEnumIDNEQ applies the NEQ predicate on the "residence_status_enum_id" field.
func ResidenceStatusEnumIDNEQ(v int) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldResidenceStatusEnumID), v))
	})
}

// ResidenceStatusEnumIDIn applies the In predicate on the "residence_status_enum_id" field.
func ResidenceStatusEnumIDIn(vs ...int) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldResidenceStatusEnumID), v...))
	})
}

// ResidenceStatusEnumIDNotIn applies the NotIn predicate on the "residence_status_enum_id" field.
func ResidenceStatusEnumIDNotIn(vs ...int) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldResidenceStatusEnumID), v...))
	})
}

// ResidenceStatusEnumIDGT applies the GT predicate on the "residence_status_enum_id" field.
func ResidenceStatusEnumIDGT(v int) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldResidenceStatusEnumID), v))
	})
}

// ResidenceStatusEnumIDGTE applies the GTE predicate on the "residence_status_enum_id" field.
func ResidenceStatusEnumIDGTE(v int) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldResidenceStatusEnumID), v))
	})
}

// ResidenceStatusEnumIDLT applies the LT predicate on the "residence_status_enum_id" field.
func ResidenceStatusEnumIDLT(v int) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldResidenceStatusEnumID), v))
	})
}

// ResidenceStatusEnumIDLTE applies the LTE predicate on the "residence_status_enum_id" field.
func ResidenceStatusEnumIDLTE(v int) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldResidenceStatusEnumID), v))
	})
}

// ResidenceStatusEnumIDIsNil applies the IsNil predicate on the "residence_status_enum_id" field.
func ResidenceStatusEnumIDIsNil() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldResidenceStatusEnumID)))
	})
}

// ResidenceStatusEnumIDNotNil applies the NotNil predicate on the "residence_status_enum_id" field.
func ResidenceStatusEnumIDNotNil() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldResidenceStatusEnumID)))
	})
}

// OccupationEQ applies the EQ predicate on the "occupation" field.
func OccupationEQ(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOccupation), v))
	})
}

// OccupationNEQ applies the NEQ predicate on the "occupation" field.
func OccupationNEQ(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOccupation), v))
	})
}

// OccupationIn applies the In predicate on the "occupation" field.
func OccupationIn(vs ...string) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOccupation), v...))
	})
}

// OccupationNotIn applies the NotIn predicate on the "occupation" field.
func OccupationNotIn(vs ...string) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOccupation), v...))
	})
}

// OccupationGT applies the GT predicate on the "occupation" field.
func OccupationGT(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOccupation), v))
	})
}

// OccupationGTE applies the GTE predicate on the "occupation" field.
func OccupationGTE(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOccupation), v))
	})
}

// OccupationLT applies the LT predicate on the "occupation" field.
func OccupationLT(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOccupation), v))
	})
}

// OccupationLTE applies the LTE predicate on the "occupation" field.
func OccupationLTE(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOccupation), v))
	})
}

// OccupationContains applies the Contains predicate on the "occupation" field.
func OccupationContains(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOccupation), v))
	})
}

// OccupationHasPrefix applies the HasPrefix predicate on the "occupation" field.
func OccupationHasPrefix(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOccupation), v))
	})
}

// OccupationHasSuffix applies the HasSuffix predicate on the "occupation" field.
func OccupationHasSuffix(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOccupation), v))
	})
}

// OccupationIsNil applies the IsNil predicate on the "occupation" field.
func OccupationIsNil() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOccupation)))
	})
}

// OccupationNotNil applies the NotNil predicate on the "occupation" field.
func OccupationNotNil() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOccupation)))
	})
}

// OccupationEqualFold applies the EqualFold predicate on the "occupation" field.
func OccupationEqualFold(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOccupation), v))
	})
}

// OccupationContainsFold applies the ContainsFold predicate on the "occupation" field.
func OccupationContainsFold(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOccupation), v))
	})
}

// YearsWithEmployerEQ applies the EQ predicate on the "years_with_employer" field.
func YearsWithEmployerEQ(v int) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldYearsWithEmployer), v))
	})
}

// YearsWithEmployerNEQ applies the NEQ predicate on the "years_with_employer" field.
func YearsWithEmployerNEQ(v int) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldYearsWithEmployer), v))
	})
}

// YearsWithEmployerIn applies the In predicate on the "years_with_employer" field.
func YearsWithEmployerIn(vs ...int) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldYearsWithEmployer), v...))
	})
}

// YearsWithEmployerNotIn applies the NotIn predicate on the "years_with_employer" field.
func YearsWithEmployerNotIn(vs ...int) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldYearsWithEmployer), v...))
	})
}

// YearsWithEmployerGT applies the GT predicate on the "years_with_employer" field.
func YearsWithEmployerGT(v int) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldYearsWithEmployer), v))
	})
}

// YearsWithEmployerGTE applies the GTE predicate on the "years_with_employer" field.
func YearsWithEmployerGTE(v int) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldYearsWithEmployer), v))
	})
}

// YearsWithEmployerLT applies the LT predicate on the "years_with_employer" field.
func YearsWithEmployerLT(v int) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldYearsWithEmployer), v))
	})
}

// YearsWithEmployerLTE applies the LTE predicate on the "years_with_employer" field.
func YearsWithEmployerLTE(v int) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldYearsWithEmployer), v))
	})
}

// YearsWithEmployerIsNil applies the IsNil predicate on the "years_with_employer" field.
func YearsWithEmployerIsNil() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldYearsWithEmployer)))
	})
}

// YearsWithEmployerNotNil applies the NotNil predicate on the "years_with_employer" field.
func YearsWithEmployerNotNil() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldYearsWithEmployer)))
	})
}

// MonthsWithEmployerEQ applies the EQ predicate on the "months_with_employer" field.
func MonthsWithEmployerEQ(v int) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMonthsWithEmployer), v))
	})
}

// MonthsWithEmployerNEQ applies the NEQ predicate on the "months_with_employer" field.
func MonthsWithEmployerNEQ(v int) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMonthsWithEmployer), v))
	})
}

// MonthsWithEmployerIn applies the In predicate on the "months_with_employer" field.
func MonthsWithEmployerIn(vs ...int) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMonthsWithEmployer), v...))
	})
}

// MonthsWithEmployerNotIn applies the NotIn predicate on the "months_with_employer" field.
func MonthsWithEmployerNotIn(vs ...int) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMonthsWithEmployer), v...))
	})
}

// MonthsWithEmployerGT applies the GT predicate on the "months_with_employer" field.
func MonthsWithEmployerGT(v int) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMonthsWithEmployer), v))
	})
}

// MonthsWithEmployerGTE applies the GTE predicate on the "months_with_employer" field.
func MonthsWithEmployerGTE(v int) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMonthsWithEmployer), v))
	})
}

// MonthsWithEmployerLT applies the LT predicate on the "months_with_employer" field.
func MonthsWithEmployerLT(v int) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMonthsWithEmployer), v))
	})
}

// MonthsWithEmployerLTE applies the LTE predicate on the "months_with_employer" field.
func MonthsWithEmployerLTE(v int) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMonthsWithEmployer), v))
	})
}

// MonthsWithEmployerIsNil applies the IsNil predicate on the "months_with_employer" field.
func MonthsWithEmployerIsNil() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMonthsWithEmployer)))
	})
}

// MonthsWithEmployerNotNil applies the NotNil predicate on the "months_with_employer" field.
func MonthsWithEmployerNotNil() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMonthsWithEmployer)))
	})
}

// ExistingCustomerEQ applies the EQ predicate on the "existing_customer" field.
func ExistingCustomerEQ(v ExistingCustomer) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExistingCustomer), v))
	})
}

// ExistingCustomerNEQ applies the NEQ predicate on the "existing_customer" field.
func ExistingCustomerNEQ(v ExistingCustomer) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldExistingCustomer), v))
	})
}

// ExistingCustomerIn applies the In predicate on the "existing_customer" field.
func ExistingCustomerIn(vs ...ExistingCustomer) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldExistingCustomer), v...))
	})
}

// ExistingCustomerNotIn applies the NotIn predicate on the "existing_customer" field.
func ExistingCustomerNotIn(vs ...ExistingCustomer) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldExistingCustomer), v...))
	})
}

// ExistingCustomerIsNil applies the IsNil predicate on the "existing_customer" field.
func ExistingCustomerIsNil() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldExistingCustomer)))
	})
}

// ExistingCustomerNotNil applies the NotNil predicate on the "existing_customer" field.
func ExistingCustomerNotNil() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldExistingCustomer)))
	})
}

// CardIDEQ applies the EQ predicate on the "card_id" field.
func CardIDEQ(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCardID), v))
	})
}

// CardIDNEQ applies the NEQ predicate on the "card_id" field.
func CardIDNEQ(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCardID), v))
	})
}

// CardIDIn applies the In predicate on the "card_id" field.
func CardIDIn(vs ...string) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCardID), v...))
	})
}

// CardIDNotIn applies the NotIn predicate on the "card_id" field.
func CardIDNotIn(vs ...string) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCardID), v...))
	})
}

// CardIDGT applies the GT predicate on the "card_id" field.
func CardIDGT(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCardID), v))
	})
}

// CardIDGTE applies the GTE predicate on the "card_id" field.
func CardIDGTE(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCardID), v))
	})
}

// CardIDLT applies the LT predicate on the "card_id" field.
func CardIDLT(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCardID), v))
	})
}

// CardIDLTE applies the LTE predicate on the "card_id" field.
func CardIDLTE(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCardID), v))
	})
}

// CardIDContains applies the Contains predicate on the "card_id" field.
func CardIDContains(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCardID), v))
	})
}

// CardIDHasPrefix applies the HasPrefix predicate on the "card_id" field.
func CardIDHasPrefix(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCardID), v))
	})
}

// CardIDHasSuffix applies the HasSuffix predicate on the "card_id" field.
func CardIDHasSuffix(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCardID), v))
	})
}

// CardIDIsNil applies the IsNil predicate on the "card_id" field.
func CardIDIsNil() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCardID)))
	})
}

// CardIDNotNil applies the NotNil predicate on the "card_id" field.
func CardIDNotNil() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCardID)))
	})
}

// CardIDEqualFold applies the EqualFold predicate on the "card_id" field.
func CardIDEqualFold(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCardID), v))
	})
}

// CardIDContainsFold applies the ContainsFold predicate on the "card_id" field.
func CardIDContainsFold(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCardID), v))
	})
}

// HasParty applies the HasEdge predicate on the "party" edge.
func HasParty() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PartyTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, PartyTable, PartyColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPartyWith applies the HasEdge predicate on the "party" edge with a given conditions (other predicates).
func HasPartyWith(preds ...predicate.Party) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PartyInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, PartyTable, PartyColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUserLogins applies the HasEdge predicate on the "user_logins" edge.
func HasUserLogins() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserLoginsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UserLoginsTable, UserLoginsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserLoginsWith applies the HasEdge predicate on the "user_logins" edge with a given conditions (other predicates).
func HasUserLoginsWith(preds ...predicate.UserLogin) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserLoginsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UserLoginsTable, UserLoginsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Person) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Person) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Person) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		p(s.Not())
	})
}
