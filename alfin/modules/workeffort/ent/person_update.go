// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/party"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/partycontactmech"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/person"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/predicate"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/userlogin"
)

// PersonUpdate is the builder for updating Person entities.
type PersonUpdate struct {
	config
	hooks    []Hook
	mutation *PersonMutation
}

// Where adds a new predicate for the PersonUpdate builder.
func (pu *PersonUpdate) Where(ps ...predicate.Person) *PersonUpdate {
	pu.mutation.predicates = append(pu.mutation.predicates, ps...)
	return pu
}

// SetStringRef sets the "string_ref" field.
func (pu *PersonUpdate) SetStringRef(s string) *PersonUpdate {
	pu.mutation.SetStringRef(s)
	return pu
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (pu *PersonUpdate) SetNillableStringRef(s *string) *PersonUpdate {
	if s != nil {
		pu.SetStringRef(*s)
	}
	return pu
}

// ClearStringRef clears the value of the "string_ref" field.
func (pu *PersonUpdate) ClearStringRef() *PersonUpdate {
	pu.mutation.ClearStringRef()
	return pu
}

// SetSalutation sets the "salutation" field.
func (pu *PersonUpdate) SetSalutation(s string) *PersonUpdate {
	pu.mutation.SetSalutation(s)
	return pu
}

// SetNillableSalutation sets the "salutation" field if the given value is not nil.
func (pu *PersonUpdate) SetNillableSalutation(s *string) *PersonUpdate {
	if s != nil {
		pu.SetSalutation(*s)
	}
	return pu
}

// ClearSalutation clears the value of the "salutation" field.
func (pu *PersonUpdate) ClearSalutation() *PersonUpdate {
	pu.mutation.ClearSalutation()
	return pu
}

// SetFirstName sets the "first_name" field.
func (pu *PersonUpdate) SetFirstName(s string) *PersonUpdate {
	pu.mutation.SetFirstName(s)
	return pu
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (pu *PersonUpdate) SetNillableFirstName(s *string) *PersonUpdate {
	if s != nil {
		pu.SetFirstName(*s)
	}
	return pu
}

// ClearFirstName clears the value of the "first_name" field.
func (pu *PersonUpdate) ClearFirstName() *PersonUpdate {
	pu.mutation.ClearFirstName()
	return pu
}

// SetMiddleName sets the "middle_name" field.
func (pu *PersonUpdate) SetMiddleName(s string) *PersonUpdate {
	pu.mutation.SetMiddleName(s)
	return pu
}

// SetNillableMiddleName sets the "middle_name" field if the given value is not nil.
func (pu *PersonUpdate) SetNillableMiddleName(s *string) *PersonUpdate {
	if s != nil {
		pu.SetMiddleName(*s)
	}
	return pu
}

// ClearMiddleName clears the value of the "middle_name" field.
func (pu *PersonUpdate) ClearMiddleName() *PersonUpdate {
	pu.mutation.ClearMiddleName()
	return pu
}

// SetLastName sets the "last_name" field.
func (pu *PersonUpdate) SetLastName(s string) *PersonUpdate {
	pu.mutation.SetLastName(s)
	return pu
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (pu *PersonUpdate) SetNillableLastName(s *string) *PersonUpdate {
	if s != nil {
		pu.SetLastName(*s)
	}
	return pu
}

// ClearLastName clears the value of the "last_name" field.
func (pu *PersonUpdate) ClearLastName() *PersonUpdate {
	pu.mutation.ClearLastName()
	return pu
}

// SetPersonalTitle sets the "personal_title" field.
func (pu *PersonUpdate) SetPersonalTitle(s string) *PersonUpdate {
	pu.mutation.SetPersonalTitle(s)
	return pu
}

// SetNillablePersonalTitle sets the "personal_title" field if the given value is not nil.
func (pu *PersonUpdate) SetNillablePersonalTitle(s *string) *PersonUpdate {
	if s != nil {
		pu.SetPersonalTitle(*s)
	}
	return pu
}

// ClearPersonalTitle clears the value of the "personal_title" field.
func (pu *PersonUpdate) ClearPersonalTitle() *PersonUpdate {
	pu.mutation.ClearPersonalTitle()
	return pu
}

// SetSuffix sets the "suffix" field.
func (pu *PersonUpdate) SetSuffix(s string) *PersonUpdate {
	pu.mutation.SetSuffix(s)
	return pu
}

// SetNillableSuffix sets the "suffix" field if the given value is not nil.
func (pu *PersonUpdate) SetNillableSuffix(s *string) *PersonUpdate {
	if s != nil {
		pu.SetSuffix(*s)
	}
	return pu
}

// ClearSuffix clears the value of the "suffix" field.
func (pu *PersonUpdate) ClearSuffix() *PersonUpdate {
	pu.mutation.ClearSuffix()
	return pu
}

// SetNickname sets the "nickname" field.
func (pu *PersonUpdate) SetNickname(s string) *PersonUpdate {
	pu.mutation.SetNickname(s)
	return pu
}

// SetNillableNickname sets the "nickname" field if the given value is not nil.
func (pu *PersonUpdate) SetNillableNickname(s *string) *PersonUpdate {
	if s != nil {
		pu.SetNickname(*s)
	}
	return pu
}

// ClearNickname clears the value of the "nickname" field.
func (pu *PersonUpdate) ClearNickname() *PersonUpdate {
	pu.mutation.ClearNickname()
	return pu
}

// SetFirstNameLocal sets the "first_name_local" field.
func (pu *PersonUpdate) SetFirstNameLocal(s string) *PersonUpdate {
	pu.mutation.SetFirstNameLocal(s)
	return pu
}

// SetNillableFirstNameLocal sets the "first_name_local" field if the given value is not nil.
func (pu *PersonUpdate) SetNillableFirstNameLocal(s *string) *PersonUpdate {
	if s != nil {
		pu.SetFirstNameLocal(*s)
	}
	return pu
}

// ClearFirstNameLocal clears the value of the "first_name_local" field.
func (pu *PersonUpdate) ClearFirstNameLocal() *PersonUpdate {
	pu.mutation.ClearFirstNameLocal()
	return pu
}

// SetMiddleNameLocal sets the "middle_name_local" field.
func (pu *PersonUpdate) SetMiddleNameLocal(s string) *PersonUpdate {
	pu.mutation.SetMiddleNameLocal(s)
	return pu
}

// SetNillableMiddleNameLocal sets the "middle_name_local" field if the given value is not nil.
func (pu *PersonUpdate) SetNillableMiddleNameLocal(s *string) *PersonUpdate {
	if s != nil {
		pu.SetMiddleNameLocal(*s)
	}
	return pu
}

// ClearMiddleNameLocal clears the value of the "middle_name_local" field.
func (pu *PersonUpdate) ClearMiddleNameLocal() *PersonUpdate {
	pu.mutation.ClearMiddleNameLocal()
	return pu
}

// SetLastNameLocal sets the "last_name_local" field.
func (pu *PersonUpdate) SetLastNameLocal(s string) *PersonUpdate {
	pu.mutation.SetLastNameLocal(s)
	return pu
}

// SetNillableLastNameLocal sets the "last_name_local" field if the given value is not nil.
func (pu *PersonUpdate) SetNillableLastNameLocal(s *string) *PersonUpdate {
	if s != nil {
		pu.SetLastNameLocal(*s)
	}
	return pu
}

// ClearLastNameLocal clears the value of the "last_name_local" field.
func (pu *PersonUpdate) ClearLastNameLocal() *PersonUpdate {
	pu.mutation.ClearLastNameLocal()
	return pu
}

// SetOtherLocal sets the "other_local" field.
func (pu *PersonUpdate) SetOtherLocal(s string) *PersonUpdate {
	pu.mutation.SetOtherLocal(s)
	return pu
}

// SetNillableOtherLocal sets the "other_local" field if the given value is not nil.
func (pu *PersonUpdate) SetNillableOtherLocal(s *string) *PersonUpdate {
	if s != nil {
		pu.SetOtherLocal(*s)
	}
	return pu
}

// ClearOtherLocal clears the value of the "other_local" field.
func (pu *PersonUpdate) ClearOtherLocal() *PersonUpdate {
	pu.mutation.ClearOtherLocal()
	return pu
}

// SetMemberID sets the "member_id" field.
func (pu *PersonUpdate) SetMemberID(i int) *PersonUpdate {
	pu.mutation.ResetMemberID()
	pu.mutation.SetMemberID(i)
	return pu
}

// SetNillableMemberID sets the "member_id" field if the given value is not nil.
func (pu *PersonUpdate) SetNillableMemberID(i *int) *PersonUpdate {
	if i != nil {
		pu.SetMemberID(*i)
	}
	return pu
}

// AddMemberID adds i to the "member_id" field.
func (pu *PersonUpdate) AddMemberID(i int) *PersonUpdate {
	pu.mutation.AddMemberID(i)
	return pu
}

// ClearMemberID clears the value of the "member_id" field.
func (pu *PersonUpdate) ClearMemberID() *PersonUpdate {
	pu.mutation.ClearMemberID()
	return pu
}

// SetGender sets the "gender" field.
func (pu *PersonUpdate) SetGender(pe person.Gender) *PersonUpdate {
	pu.mutation.SetGender(pe)
	return pu
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (pu *PersonUpdate) SetNillableGender(pe *person.Gender) *PersonUpdate {
	if pe != nil {
		pu.SetGender(*pe)
	}
	return pu
}

// ClearGender clears the value of the "gender" field.
func (pu *PersonUpdate) ClearGender() *PersonUpdate {
	pu.mutation.ClearGender()
	return pu
}

// SetBirthDate sets the "birth_date" field.
func (pu *PersonUpdate) SetBirthDate(t time.Time) *PersonUpdate {
	pu.mutation.SetBirthDate(t)
	return pu
}

// SetNillableBirthDate sets the "birth_date" field if the given value is not nil.
func (pu *PersonUpdate) SetNillableBirthDate(t *time.Time) *PersonUpdate {
	if t != nil {
		pu.SetBirthDate(*t)
	}
	return pu
}

// ClearBirthDate clears the value of the "birth_date" field.
func (pu *PersonUpdate) ClearBirthDate() *PersonUpdate {
	pu.mutation.ClearBirthDate()
	return pu
}

// SetDeceasedDate sets the "deceased_date" field.
func (pu *PersonUpdate) SetDeceasedDate(t time.Time) *PersonUpdate {
	pu.mutation.SetDeceasedDate(t)
	return pu
}

// SetNillableDeceasedDate sets the "deceased_date" field if the given value is not nil.
func (pu *PersonUpdate) SetNillableDeceasedDate(t *time.Time) *PersonUpdate {
	if t != nil {
		pu.SetDeceasedDate(*t)
	}
	return pu
}

// ClearDeceasedDate clears the value of the "deceased_date" field.
func (pu *PersonUpdate) ClearDeceasedDate() *PersonUpdate {
	pu.mutation.ClearDeceasedDate()
	return pu
}

// SetHeight sets the "height" field.
func (pu *PersonUpdate) SetHeight(f float64) *PersonUpdate {
	pu.mutation.ResetHeight()
	pu.mutation.SetHeight(f)
	return pu
}

// SetNillableHeight sets the "height" field if the given value is not nil.
func (pu *PersonUpdate) SetNillableHeight(f *float64) *PersonUpdate {
	if f != nil {
		pu.SetHeight(*f)
	}
	return pu
}

// AddHeight adds f to the "height" field.
func (pu *PersonUpdate) AddHeight(f float64) *PersonUpdate {
	pu.mutation.AddHeight(f)
	return pu
}

// ClearHeight clears the value of the "height" field.
func (pu *PersonUpdate) ClearHeight() *PersonUpdate {
	pu.mutation.ClearHeight()
	return pu
}

// SetWeight sets the "weight" field.
func (pu *PersonUpdate) SetWeight(f float64) *PersonUpdate {
	pu.mutation.ResetWeight()
	pu.mutation.SetWeight(f)
	return pu
}

// SetNillableWeight sets the "weight" field if the given value is not nil.
func (pu *PersonUpdate) SetNillableWeight(f *float64) *PersonUpdate {
	if f != nil {
		pu.SetWeight(*f)
	}
	return pu
}

// AddWeight adds f to the "weight" field.
func (pu *PersonUpdate) AddWeight(f float64) *PersonUpdate {
	pu.mutation.AddWeight(f)
	return pu
}

// ClearWeight clears the value of the "weight" field.
func (pu *PersonUpdate) ClearWeight() *PersonUpdate {
	pu.mutation.ClearWeight()
	return pu
}

// SetMothersMaidenName sets the "mothers_maiden_name" field.
func (pu *PersonUpdate) SetMothersMaidenName(s string) *PersonUpdate {
	pu.mutation.SetMothersMaidenName(s)
	return pu
}

// SetNillableMothersMaidenName sets the "mothers_maiden_name" field if the given value is not nil.
func (pu *PersonUpdate) SetNillableMothersMaidenName(s *string) *PersonUpdate {
	if s != nil {
		pu.SetMothersMaidenName(*s)
	}
	return pu
}

// ClearMothersMaidenName clears the value of the "mothers_maiden_name" field.
func (pu *PersonUpdate) ClearMothersMaidenName() *PersonUpdate {
	pu.mutation.ClearMothersMaidenName()
	return pu
}

// SetOldMaritalStatus sets the "old_marital_status" field.
func (pu *PersonUpdate) SetOldMaritalStatus(pms person.OldMaritalStatus) *PersonUpdate {
	pu.mutation.SetOldMaritalStatus(pms)
	return pu
}

// SetNillableOldMaritalStatus sets the "old_marital_status" field if the given value is not nil.
func (pu *PersonUpdate) SetNillableOldMaritalStatus(pms *person.OldMaritalStatus) *PersonUpdate {
	if pms != nil {
		pu.SetOldMaritalStatus(*pms)
	}
	return pu
}

// ClearOldMaritalStatus clears the value of the "old_marital_status" field.
func (pu *PersonUpdate) ClearOldMaritalStatus() *PersonUpdate {
	pu.mutation.ClearOldMaritalStatus()
	return pu
}

// SetMaritalStatusEnumID sets the "marital_status_enum_id" field.
func (pu *PersonUpdate) SetMaritalStatusEnumID(i int) *PersonUpdate {
	pu.mutation.ResetMaritalStatusEnumID()
	pu.mutation.SetMaritalStatusEnumID(i)
	return pu
}

// SetNillableMaritalStatusEnumID sets the "marital_status_enum_id" field if the given value is not nil.
func (pu *PersonUpdate) SetNillableMaritalStatusEnumID(i *int) *PersonUpdate {
	if i != nil {
		pu.SetMaritalStatusEnumID(*i)
	}
	return pu
}

// AddMaritalStatusEnumID adds i to the "marital_status_enum_id" field.
func (pu *PersonUpdate) AddMaritalStatusEnumID(i int) *PersonUpdate {
	pu.mutation.AddMaritalStatusEnumID(i)
	return pu
}

// ClearMaritalStatusEnumID clears the value of the "marital_status_enum_id" field.
func (pu *PersonUpdate) ClearMaritalStatusEnumID() *PersonUpdate {
	pu.mutation.ClearMaritalStatusEnumID()
	return pu
}

// SetSocialSecurityNumber sets the "social_security_number" field.
func (pu *PersonUpdate) SetSocialSecurityNumber(s string) *PersonUpdate {
	pu.mutation.SetSocialSecurityNumber(s)
	return pu
}

// SetNillableSocialSecurityNumber sets the "social_security_number" field if the given value is not nil.
func (pu *PersonUpdate) SetNillableSocialSecurityNumber(s *string) *PersonUpdate {
	if s != nil {
		pu.SetSocialSecurityNumber(*s)
	}
	return pu
}

// ClearSocialSecurityNumber clears the value of the "social_security_number" field.
func (pu *PersonUpdate) ClearSocialSecurityNumber() *PersonUpdate {
	pu.mutation.ClearSocialSecurityNumber()
	return pu
}

// SetPassportNumber sets the "passport_number" field.
func (pu *PersonUpdate) SetPassportNumber(s string) *PersonUpdate {
	pu.mutation.SetPassportNumber(s)
	return pu
}

// SetNillablePassportNumber sets the "passport_number" field if the given value is not nil.
func (pu *PersonUpdate) SetNillablePassportNumber(s *string) *PersonUpdate {
	if s != nil {
		pu.SetPassportNumber(*s)
	}
	return pu
}

// ClearPassportNumber clears the value of the "passport_number" field.
func (pu *PersonUpdate) ClearPassportNumber() *PersonUpdate {
	pu.mutation.ClearPassportNumber()
	return pu
}

// SetPassportExpireDate sets the "passport_expire_date" field.
func (pu *PersonUpdate) SetPassportExpireDate(t time.Time) *PersonUpdate {
	pu.mutation.SetPassportExpireDate(t)
	return pu
}

// SetNillablePassportExpireDate sets the "passport_expire_date" field if the given value is not nil.
func (pu *PersonUpdate) SetNillablePassportExpireDate(t *time.Time) *PersonUpdate {
	if t != nil {
		pu.SetPassportExpireDate(*t)
	}
	return pu
}

// ClearPassportExpireDate clears the value of the "passport_expire_date" field.
func (pu *PersonUpdate) ClearPassportExpireDate() *PersonUpdate {
	pu.mutation.ClearPassportExpireDate()
	return pu
}

// SetTotalYearsWorkExperience sets the "total_years_work_experience" field.
func (pu *PersonUpdate) SetTotalYearsWorkExperience(f float64) *PersonUpdate {
	pu.mutation.ResetTotalYearsWorkExperience()
	pu.mutation.SetTotalYearsWorkExperience(f)
	return pu
}

// SetNillableTotalYearsWorkExperience sets the "total_years_work_experience" field if the given value is not nil.
func (pu *PersonUpdate) SetNillableTotalYearsWorkExperience(f *float64) *PersonUpdate {
	if f != nil {
		pu.SetTotalYearsWorkExperience(*f)
	}
	return pu
}

// AddTotalYearsWorkExperience adds f to the "total_years_work_experience" field.
func (pu *PersonUpdate) AddTotalYearsWorkExperience(f float64) *PersonUpdate {
	pu.mutation.AddTotalYearsWorkExperience(f)
	return pu
}

// ClearTotalYearsWorkExperience clears the value of the "total_years_work_experience" field.
func (pu *PersonUpdate) ClearTotalYearsWorkExperience() *PersonUpdate {
	pu.mutation.ClearTotalYearsWorkExperience()
	return pu
}

// SetComments sets the "comments" field.
func (pu *PersonUpdate) SetComments(s string) *PersonUpdate {
	pu.mutation.SetComments(s)
	return pu
}

// SetNillableComments sets the "comments" field if the given value is not nil.
func (pu *PersonUpdate) SetNillableComments(s *string) *PersonUpdate {
	if s != nil {
		pu.SetComments(*s)
	}
	return pu
}

// ClearComments clears the value of the "comments" field.
func (pu *PersonUpdate) ClearComments() *PersonUpdate {
	pu.mutation.ClearComments()
	return pu
}

// SetEmploymentStatusEnumID sets the "employment_status_enum_id" field.
func (pu *PersonUpdate) SetEmploymentStatusEnumID(i int) *PersonUpdate {
	pu.mutation.ResetEmploymentStatusEnumID()
	pu.mutation.SetEmploymentStatusEnumID(i)
	return pu
}

// SetNillableEmploymentStatusEnumID sets the "employment_status_enum_id" field if the given value is not nil.
func (pu *PersonUpdate) SetNillableEmploymentStatusEnumID(i *int) *PersonUpdate {
	if i != nil {
		pu.SetEmploymentStatusEnumID(*i)
	}
	return pu
}

// AddEmploymentStatusEnumID adds i to the "employment_status_enum_id" field.
func (pu *PersonUpdate) AddEmploymentStatusEnumID(i int) *PersonUpdate {
	pu.mutation.AddEmploymentStatusEnumID(i)
	return pu
}

// ClearEmploymentStatusEnumID clears the value of the "employment_status_enum_id" field.
func (pu *PersonUpdate) ClearEmploymentStatusEnumID() *PersonUpdate {
	pu.mutation.ClearEmploymentStatusEnumID()
	return pu
}

// SetResidenceStatusEnumID sets the "residence_status_enum_id" field.
func (pu *PersonUpdate) SetResidenceStatusEnumID(i int) *PersonUpdate {
	pu.mutation.ResetResidenceStatusEnumID()
	pu.mutation.SetResidenceStatusEnumID(i)
	return pu
}

// SetNillableResidenceStatusEnumID sets the "residence_status_enum_id" field if the given value is not nil.
func (pu *PersonUpdate) SetNillableResidenceStatusEnumID(i *int) *PersonUpdate {
	if i != nil {
		pu.SetResidenceStatusEnumID(*i)
	}
	return pu
}

// AddResidenceStatusEnumID adds i to the "residence_status_enum_id" field.
func (pu *PersonUpdate) AddResidenceStatusEnumID(i int) *PersonUpdate {
	pu.mutation.AddResidenceStatusEnumID(i)
	return pu
}

// ClearResidenceStatusEnumID clears the value of the "residence_status_enum_id" field.
func (pu *PersonUpdate) ClearResidenceStatusEnumID() *PersonUpdate {
	pu.mutation.ClearResidenceStatusEnumID()
	return pu
}

// SetOccupation sets the "occupation" field.
func (pu *PersonUpdate) SetOccupation(s string) *PersonUpdate {
	pu.mutation.SetOccupation(s)
	return pu
}

// SetNillableOccupation sets the "occupation" field if the given value is not nil.
func (pu *PersonUpdate) SetNillableOccupation(s *string) *PersonUpdate {
	if s != nil {
		pu.SetOccupation(*s)
	}
	return pu
}

// ClearOccupation clears the value of the "occupation" field.
func (pu *PersonUpdate) ClearOccupation() *PersonUpdate {
	pu.mutation.ClearOccupation()
	return pu
}

// SetYearsWithEmployer sets the "years_with_employer" field.
func (pu *PersonUpdate) SetYearsWithEmployer(i int) *PersonUpdate {
	pu.mutation.ResetYearsWithEmployer()
	pu.mutation.SetYearsWithEmployer(i)
	return pu
}

// SetNillableYearsWithEmployer sets the "years_with_employer" field if the given value is not nil.
func (pu *PersonUpdate) SetNillableYearsWithEmployer(i *int) *PersonUpdate {
	if i != nil {
		pu.SetYearsWithEmployer(*i)
	}
	return pu
}

// AddYearsWithEmployer adds i to the "years_with_employer" field.
func (pu *PersonUpdate) AddYearsWithEmployer(i int) *PersonUpdate {
	pu.mutation.AddYearsWithEmployer(i)
	return pu
}

// ClearYearsWithEmployer clears the value of the "years_with_employer" field.
func (pu *PersonUpdate) ClearYearsWithEmployer() *PersonUpdate {
	pu.mutation.ClearYearsWithEmployer()
	return pu
}

// SetMonthsWithEmployer sets the "months_with_employer" field.
func (pu *PersonUpdate) SetMonthsWithEmployer(i int) *PersonUpdate {
	pu.mutation.ResetMonthsWithEmployer()
	pu.mutation.SetMonthsWithEmployer(i)
	return pu
}

// SetNillableMonthsWithEmployer sets the "months_with_employer" field if the given value is not nil.
func (pu *PersonUpdate) SetNillableMonthsWithEmployer(i *int) *PersonUpdate {
	if i != nil {
		pu.SetMonthsWithEmployer(*i)
	}
	return pu
}

// AddMonthsWithEmployer adds i to the "months_with_employer" field.
func (pu *PersonUpdate) AddMonthsWithEmployer(i int) *PersonUpdate {
	pu.mutation.AddMonthsWithEmployer(i)
	return pu
}

// ClearMonthsWithEmployer clears the value of the "months_with_employer" field.
func (pu *PersonUpdate) ClearMonthsWithEmployer() *PersonUpdate {
	pu.mutation.ClearMonthsWithEmployer()
	return pu
}

// SetExistingCustomer sets the "existing_customer" field.
func (pu *PersonUpdate) SetExistingCustomer(pc person.ExistingCustomer) *PersonUpdate {
	pu.mutation.SetExistingCustomer(pc)
	return pu
}

// SetNillableExistingCustomer sets the "existing_customer" field if the given value is not nil.
func (pu *PersonUpdate) SetNillableExistingCustomer(pc *person.ExistingCustomer) *PersonUpdate {
	if pc != nil {
		pu.SetExistingCustomer(*pc)
	}
	return pu
}

// ClearExistingCustomer clears the value of the "existing_customer" field.
func (pu *PersonUpdate) ClearExistingCustomer() *PersonUpdate {
	pu.mutation.ClearExistingCustomer()
	return pu
}

// SetCardID sets the "card_id" field.
func (pu *PersonUpdate) SetCardID(s string) *PersonUpdate {
	pu.mutation.SetCardID(s)
	return pu
}

// SetNillableCardID sets the "card_id" field if the given value is not nil.
func (pu *PersonUpdate) SetNillableCardID(s *string) *PersonUpdate {
	if s != nil {
		pu.SetCardID(*s)
	}
	return pu
}

// ClearCardID clears the value of the "card_id" field.
func (pu *PersonUpdate) ClearCardID() *PersonUpdate {
	pu.mutation.ClearCardID()
	return pu
}

// SetPartyID sets the "party" edge to the Party entity by ID.
func (pu *PersonUpdate) SetPartyID(id int) *PersonUpdate {
	pu.mutation.SetPartyID(id)
	return pu
}

// SetNillablePartyID sets the "party" edge to the Party entity by ID if the given value is not nil.
func (pu *PersonUpdate) SetNillablePartyID(id *int) *PersonUpdate {
	if id != nil {
		pu = pu.SetPartyID(*id)
	}
	return pu
}

// SetParty sets the "party" edge to the Party entity.
func (pu *PersonUpdate) SetParty(p *Party) *PersonUpdate {
	return pu.SetPartyID(p.ID)
}

// AddPartyContactMechIDs adds the "party_contact_meches" edge to the PartyContactMech entity by IDs.
func (pu *PersonUpdate) AddPartyContactMechIDs(ids ...int) *PersonUpdate {
	pu.mutation.AddPartyContactMechIDs(ids...)
	return pu
}

// AddPartyContactMeches adds the "party_contact_meches" edges to the PartyContactMech entity.
func (pu *PersonUpdate) AddPartyContactMeches(p ...*PartyContactMech) *PersonUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddPartyContactMechIDs(ids...)
}

// AddUserLoginIDs adds the "user_logins" edge to the UserLogin entity by IDs.
func (pu *PersonUpdate) AddUserLoginIDs(ids ...int) *PersonUpdate {
	pu.mutation.AddUserLoginIDs(ids...)
	return pu
}

// AddUserLogins adds the "user_logins" edges to the UserLogin entity.
func (pu *PersonUpdate) AddUserLogins(u ...*UserLogin) *PersonUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return pu.AddUserLoginIDs(ids...)
}

// Mutation returns the PersonMutation object of the builder.
func (pu *PersonUpdate) Mutation() *PersonMutation {
	return pu.mutation
}

// ClearParty clears the "party" edge to the Party entity.
func (pu *PersonUpdate) ClearParty() *PersonUpdate {
	pu.mutation.ClearParty()
	return pu
}

// ClearPartyContactMeches clears all "party_contact_meches" edges to the PartyContactMech entity.
func (pu *PersonUpdate) ClearPartyContactMeches() *PersonUpdate {
	pu.mutation.ClearPartyContactMeches()
	return pu
}

// RemovePartyContactMechIDs removes the "party_contact_meches" edge to PartyContactMech entities by IDs.
func (pu *PersonUpdate) RemovePartyContactMechIDs(ids ...int) *PersonUpdate {
	pu.mutation.RemovePartyContactMechIDs(ids...)
	return pu
}

// RemovePartyContactMeches removes "party_contact_meches" edges to PartyContactMech entities.
func (pu *PersonUpdate) RemovePartyContactMeches(p ...*PartyContactMech) *PersonUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemovePartyContactMechIDs(ids...)
}

// ClearUserLogins clears all "user_logins" edges to the UserLogin entity.
func (pu *PersonUpdate) ClearUserLogins() *PersonUpdate {
	pu.mutation.ClearUserLogins()
	return pu
}

// RemoveUserLoginIDs removes the "user_logins" edge to UserLogin entities by IDs.
func (pu *PersonUpdate) RemoveUserLoginIDs(ids ...int) *PersonUpdate {
	pu.mutation.RemoveUserLoginIDs(ids...)
	return pu
}

// RemoveUserLogins removes "user_logins" edges to UserLogin entities.
func (pu *PersonUpdate) RemoveUserLogins(u ...*UserLogin) *PersonUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return pu.RemoveUserLoginIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PersonUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	pu.defaults()
	if len(pu.hooks) == 0 {
		if err = pu.check(); err != nil {
			return 0, err
		}
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PersonMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pu.check(); err != nil {
				return 0, err
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PersonUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PersonUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PersonUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *PersonUpdate) defaults() {
	if _, ok := pu.mutation.UpdateTime(); !ok {
		v := person.UpdateDefaultUpdateTime()
		pu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PersonUpdate) check() error {
	if v, ok := pu.mutation.Gender(); ok {
		if err := person.GenderValidator(v); err != nil {
			return &ValidationError{Name: "gender", err: fmt.Errorf("ent: validator failed for field \"gender\": %w", err)}
		}
	}
	if v, ok := pu.mutation.OldMaritalStatus(); ok {
		if err := person.OldMaritalStatusValidator(v); err != nil {
			return &ValidationError{Name: "old_marital_status", err: fmt.Errorf("ent: validator failed for field \"old_marital_status\": %w", err)}
		}
	}
	if v, ok := pu.mutation.ExistingCustomer(); ok {
		if err := person.ExistingCustomerValidator(v); err != nil {
			return &ValidationError{Name: "existing_customer", err: fmt.Errorf("ent: validator failed for field \"existing_customer\": %w", err)}
		}
	}
	if v, ok := pu.mutation.CardID(); ok {
		if err := person.CardIDValidator(v); err != nil {
			return &ValidationError{Name: "card_id", err: fmt.Errorf("ent: validator failed for field \"card_id\": %w", err)}
		}
	}
	return nil
}

func (pu *PersonUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   person.Table,
			Columns: person.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: person.FieldID,
			},
		},
	}
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: person.FieldUpdateTime,
		})
	}
	if value, ok := pu.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldStringRef,
		})
	}
	if pu.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: person.FieldStringRef,
		})
	}
	if value, ok := pu.mutation.Salutation(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldSalutation,
		})
	}
	if pu.mutation.SalutationCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: person.FieldSalutation,
		})
	}
	if value, ok := pu.mutation.FirstName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldFirstName,
		})
	}
	if pu.mutation.FirstNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: person.FieldFirstName,
		})
	}
	if value, ok := pu.mutation.MiddleName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldMiddleName,
		})
	}
	if pu.mutation.MiddleNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: person.FieldMiddleName,
		})
	}
	if value, ok := pu.mutation.LastName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldLastName,
		})
	}
	if pu.mutation.LastNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: person.FieldLastName,
		})
	}
	if value, ok := pu.mutation.PersonalTitle(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldPersonalTitle,
		})
	}
	if pu.mutation.PersonalTitleCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: person.FieldPersonalTitle,
		})
	}
	if value, ok := pu.mutation.Suffix(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldSuffix,
		})
	}
	if pu.mutation.SuffixCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: person.FieldSuffix,
		})
	}
	if value, ok := pu.mutation.Nickname(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldNickname,
		})
	}
	if pu.mutation.NicknameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: person.FieldNickname,
		})
	}
	if value, ok := pu.mutation.FirstNameLocal(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldFirstNameLocal,
		})
	}
	if pu.mutation.FirstNameLocalCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: person.FieldFirstNameLocal,
		})
	}
	if value, ok := pu.mutation.MiddleNameLocal(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldMiddleNameLocal,
		})
	}
	if pu.mutation.MiddleNameLocalCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: person.FieldMiddleNameLocal,
		})
	}
	if value, ok := pu.mutation.LastNameLocal(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldLastNameLocal,
		})
	}
	if pu.mutation.LastNameLocalCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: person.FieldLastNameLocal,
		})
	}
	if value, ok := pu.mutation.OtherLocal(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldOtherLocal,
		})
	}
	if pu.mutation.OtherLocalCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: person.FieldOtherLocal,
		})
	}
	if value, ok := pu.mutation.MemberID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldMemberID,
		})
	}
	if value, ok := pu.mutation.AddedMemberID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldMemberID,
		})
	}
	if pu.mutation.MemberIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: person.FieldMemberID,
		})
	}
	if value, ok := pu.mutation.Gender(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: person.FieldGender,
		})
	}
	if pu.mutation.GenderCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: person.FieldGender,
		})
	}
	if value, ok := pu.mutation.BirthDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: person.FieldBirthDate,
		})
	}
	if pu.mutation.BirthDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: person.FieldBirthDate,
		})
	}
	if value, ok := pu.mutation.DeceasedDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: person.FieldDeceasedDate,
		})
	}
	if pu.mutation.DeceasedDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: person.FieldDeceasedDate,
		})
	}
	if value, ok := pu.mutation.Height(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: person.FieldHeight,
		})
	}
	if value, ok := pu.mutation.AddedHeight(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: person.FieldHeight,
		})
	}
	if pu.mutation.HeightCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: person.FieldHeight,
		})
	}
	if value, ok := pu.mutation.Weight(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: person.FieldWeight,
		})
	}
	if value, ok := pu.mutation.AddedWeight(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: person.FieldWeight,
		})
	}
	if pu.mutation.WeightCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: person.FieldWeight,
		})
	}
	if value, ok := pu.mutation.MothersMaidenName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldMothersMaidenName,
		})
	}
	if pu.mutation.MothersMaidenNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: person.FieldMothersMaidenName,
		})
	}
	if value, ok := pu.mutation.OldMaritalStatus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: person.FieldOldMaritalStatus,
		})
	}
	if pu.mutation.OldMaritalStatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: person.FieldOldMaritalStatus,
		})
	}
	if value, ok := pu.mutation.MaritalStatusEnumID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldMaritalStatusEnumID,
		})
	}
	if value, ok := pu.mutation.AddedMaritalStatusEnumID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldMaritalStatusEnumID,
		})
	}
	if pu.mutation.MaritalStatusEnumIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: person.FieldMaritalStatusEnumID,
		})
	}
	if value, ok := pu.mutation.SocialSecurityNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldSocialSecurityNumber,
		})
	}
	if pu.mutation.SocialSecurityNumberCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: person.FieldSocialSecurityNumber,
		})
	}
	if value, ok := pu.mutation.PassportNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldPassportNumber,
		})
	}
	if pu.mutation.PassportNumberCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: person.FieldPassportNumber,
		})
	}
	if value, ok := pu.mutation.PassportExpireDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: person.FieldPassportExpireDate,
		})
	}
	if pu.mutation.PassportExpireDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: person.FieldPassportExpireDate,
		})
	}
	if value, ok := pu.mutation.TotalYearsWorkExperience(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: person.FieldTotalYearsWorkExperience,
		})
	}
	if value, ok := pu.mutation.AddedTotalYearsWorkExperience(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: person.FieldTotalYearsWorkExperience,
		})
	}
	if pu.mutation.TotalYearsWorkExperienceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: person.FieldTotalYearsWorkExperience,
		})
	}
	if value, ok := pu.mutation.Comments(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldComments,
		})
	}
	if pu.mutation.CommentsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: person.FieldComments,
		})
	}
	if value, ok := pu.mutation.EmploymentStatusEnumID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldEmploymentStatusEnumID,
		})
	}
	if value, ok := pu.mutation.AddedEmploymentStatusEnumID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldEmploymentStatusEnumID,
		})
	}
	if pu.mutation.EmploymentStatusEnumIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: person.FieldEmploymentStatusEnumID,
		})
	}
	if value, ok := pu.mutation.ResidenceStatusEnumID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldResidenceStatusEnumID,
		})
	}
	if value, ok := pu.mutation.AddedResidenceStatusEnumID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldResidenceStatusEnumID,
		})
	}
	if pu.mutation.ResidenceStatusEnumIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: person.FieldResidenceStatusEnumID,
		})
	}
	if value, ok := pu.mutation.Occupation(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldOccupation,
		})
	}
	if pu.mutation.OccupationCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: person.FieldOccupation,
		})
	}
	if value, ok := pu.mutation.YearsWithEmployer(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldYearsWithEmployer,
		})
	}
	if value, ok := pu.mutation.AddedYearsWithEmployer(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldYearsWithEmployer,
		})
	}
	if pu.mutation.YearsWithEmployerCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: person.FieldYearsWithEmployer,
		})
	}
	if value, ok := pu.mutation.MonthsWithEmployer(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldMonthsWithEmployer,
		})
	}
	if value, ok := pu.mutation.AddedMonthsWithEmployer(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldMonthsWithEmployer,
		})
	}
	if pu.mutation.MonthsWithEmployerCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: person.FieldMonthsWithEmployer,
		})
	}
	if value, ok := pu.mutation.ExistingCustomer(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: person.FieldExistingCustomer,
		})
	}
	if pu.mutation.ExistingCustomerCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: person.FieldExistingCustomer,
		})
	}
	if value, ok := pu.mutation.CardID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldCardID,
		})
	}
	if pu.mutation.CardIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: person.FieldCardID,
		})
	}
	if pu.mutation.PartyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   person.PartyTable,
			Columns: []string{person.PartyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: party.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PartyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   person.PartyTable,
			Columns: []string{person.PartyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: party.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.PartyContactMechesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   person.PartyContactMechesTable,
			Columns: []string{person.PartyContactMechesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partycontactmech.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedPartyContactMechesIDs(); len(nodes) > 0 && !pu.mutation.PartyContactMechesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   person.PartyContactMechesTable,
			Columns: []string{person.PartyContactMechesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partycontactmech.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PartyContactMechesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   person.PartyContactMechesTable,
			Columns: []string{person.PartyContactMechesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partycontactmech.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.UserLoginsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   person.UserLoginsTable,
			Columns: []string{person.UserLoginsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: userlogin.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedUserLoginsIDs(); len(nodes) > 0 && !pu.mutation.UserLoginsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   person.UserLoginsTable,
			Columns: []string{person.UserLoginsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: userlogin.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.UserLoginsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   person.UserLoginsTable,
			Columns: []string{person.UserLoginsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: userlogin.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{person.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// PersonUpdateOne is the builder for updating a single Person entity.
type PersonUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PersonMutation
}

// SetStringRef sets the "string_ref" field.
func (puo *PersonUpdateOne) SetStringRef(s string) *PersonUpdateOne {
	puo.mutation.SetStringRef(s)
	return puo
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableStringRef(s *string) *PersonUpdateOne {
	if s != nil {
		puo.SetStringRef(*s)
	}
	return puo
}

// ClearStringRef clears the value of the "string_ref" field.
func (puo *PersonUpdateOne) ClearStringRef() *PersonUpdateOne {
	puo.mutation.ClearStringRef()
	return puo
}

// SetSalutation sets the "salutation" field.
func (puo *PersonUpdateOne) SetSalutation(s string) *PersonUpdateOne {
	puo.mutation.SetSalutation(s)
	return puo
}

// SetNillableSalutation sets the "salutation" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableSalutation(s *string) *PersonUpdateOne {
	if s != nil {
		puo.SetSalutation(*s)
	}
	return puo
}

// ClearSalutation clears the value of the "salutation" field.
func (puo *PersonUpdateOne) ClearSalutation() *PersonUpdateOne {
	puo.mutation.ClearSalutation()
	return puo
}

// SetFirstName sets the "first_name" field.
func (puo *PersonUpdateOne) SetFirstName(s string) *PersonUpdateOne {
	puo.mutation.SetFirstName(s)
	return puo
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableFirstName(s *string) *PersonUpdateOne {
	if s != nil {
		puo.SetFirstName(*s)
	}
	return puo
}

// ClearFirstName clears the value of the "first_name" field.
func (puo *PersonUpdateOne) ClearFirstName() *PersonUpdateOne {
	puo.mutation.ClearFirstName()
	return puo
}

// SetMiddleName sets the "middle_name" field.
func (puo *PersonUpdateOne) SetMiddleName(s string) *PersonUpdateOne {
	puo.mutation.SetMiddleName(s)
	return puo
}

// SetNillableMiddleName sets the "middle_name" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableMiddleName(s *string) *PersonUpdateOne {
	if s != nil {
		puo.SetMiddleName(*s)
	}
	return puo
}

// ClearMiddleName clears the value of the "middle_name" field.
func (puo *PersonUpdateOne) ClearMiddleName() *PersonUpdateOne {
	puo.mutation.ClearMiddleName()
	return puo
}

// SetLastName sets the "last_name" field.
func (puo *PersonUpdateOne) SetLastName(s string) *PersonUpdateOne {
	puo.mutation.SetLastName(s)
	return puo
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableLastName(s *string) *PersonUpdateOne {
	if s != nil {
		puo.SetLastName(*s)
	}
	return puo
}

// ClearLastName clears the value of the "last_name" field.
func (puo *PersonUpdateOne) ClearLastName() *PersonUpdateOne {
	puo.mutation.ClearLastName()
	return puo
}

// SetPersonalTitle sets the "personal_title" field.
func (puo *PersonUpdateOne) SetPersonalTitle(s string) *PersonUpdateOne {
	puo.mutation.SetPersonalTitle(s)
	return puo
}

// SetNillablePersonalTitle sets the "personal_title" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillablePersonalTitle(s *string) *PersonUpdateOne {
	if s != nil {
		puo.SetPersonalTitle(*s)
	}
	return puo
}

// ClearPersonalTitle clears the value of the "personal_title" field.
func (puo *PersonUpdateOne) ClearPersonalTitle() *PersonUpdateOne {
	puo.mutation.ClearPersonalTitle()
	return puo
}

// SetSuffix sets the "suffix" field.
func (puo *PersonUpdateOne) SetSuffix(s string) *PersonUpdateOne {
	puo.mutation.SetSuffix(s)
	return puo
}

// SetNillableSuffix sets the "suffix" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableSuffix(s *string) *PersonUpdateOne {
	if s != nil {
		puo.SetSuffix(*s)
	}
	return puo
}

// ClearSuffix clears the value of the "suffix" field.
func (puo *PersonUpdateOne) ClearSuffix() *PersonUpdateOne {
	puo.mutation.ClearSuffix()
	return puo
}

// SetNickname sets the "nickname" field.
func (puo *PersonUpdateOne) SetNickname(s string) *PersonUpdateOne {
	puo.mutation.SetNickname(s)
	return puo
}

// SetNillableNickname sets the "nickname" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableNickname(s *string) *PersonUpdateOne {
	if s != nil {
		puo.SetNickname(*s)
	}
	return puo
}

// ClearNickname clears the value of the "nickname" field.
func (puo *PersonUpdateOne) ClearNickname() *PersonUpdateOne {
	puo.mutation.ClearNickname()
	return puo
}

// SetFirstNameLocal sets the "first_name_local" field.
func (puo *PersonUpdateOne) SetFirstNameLocal(s string) *PersonUpdateOne {
	puo.mutation.SetFirstNameLocal(s)
	return puo
}

// SetNillableFirstNameLocal sets the "first_name_local" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableFirstNameLocal(s *string) *PersonUpdateOne {
	if s != nil {
		puo.SetFirstNameLocal(*s)
	}
	return puo
}

// ClearFirstNameLocal clears the value of the "first_name_local" field.
func (puo *PersonUpdateOne) ClearFirstNameLocal() *PersonUpdateOne {
	puo.mutation.ClearFirstNameLocal()
	return puo
}

// SetMiddleNameLocal sets the "middle_name_local" field.
func (puo *PersonUpdateOne) SetMiddleNameLocal(s string) *PersonUpdateOne {
	puo.mutation.SetMiddleNameLocal(s)
	return puo
}

// SetNillableMiddleNameLocal sets the "middle_name_local" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableMiddleNameLocal(s *string) *PersonUpdateOne {
	if s != nil {
		puo.SetMiddleNameLocal(*s)
	}
	return puo
}

// ClearMiddleNameLocal clears the value of the "middle_name_local" field.
func (puo *PersonUpdateOne) ClearMiddleNameLocal() *PersonUpdateOne {
	puo.mutation.ClearMiddleNameLocal()
	return puo
}

// SetLastNameLocal sets the "last_name_local" field.
func (puo *PersonUpdateOne) SetLastNameLocal(s string) *PersonUpdateOne {
	puo.mutation.SetLastNameLocal(s)
	return puo
}

// SetNillableLastNameLocal sets the "last_name_local" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableLastNameLocal(s *string) *PersonUpdateOne {
	if s != nil {
		puo.SetLastNameLocal(*s)
	}
	return puo
}

// ClearLastNameLocal clears the value of the "last_name_local" field.
func (puo *PersonUpdateOne) ClearLastNameLocal() *PersonUpdateOne {
	puo.mutation.ClearLastNameLocal()
	return puo
}

// SetOtherLocal sets the "other_local" field.
func (puo *PersonUpdateOne) SetOtherLocal(s string) *PersonUpdateOne {
	puo.mutation.SetOtherLocal(s)
	return puo
}

// SetNillableOtherLocal sets the "other_local" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableOtherLocal(s *string) *PersonUpdateOne {
	if s != nil {
		puo.SetOtherLocal(*s)
	}
	return puo
}

// ClearOtherLocal clears the value of the "other_local" field.
func (puo *PersonUpdateOne) ClearOtherLocal() *PersonUpdateOne {
	puo.mutation.ClearOtherLocal()
	return puo
}

// SetMemberID sets the "member_id" field.
func (puo *PersonUpdateOne) SetMemberID(i int) *PersonUpdateOne {
	puo.mutation.ResetMemberID()
	puo.mutation.SetMemberID(i)
	return puo
}

// SetNillableMemberID sets the "member_id" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableMemberID(i *int) *PersonUpdateOne {
	if i != nil {
		puo.SetMemberID(*i)
	}
	return puo
}

// AddMemberID adds i to the "member_id" field.
func (puo *PersonUpdateOne) AddMemberID(i int) *PersonUpdateOne {
	puo.mutation.AddMemberID(i)
	return puo
}

// ClearMemberID clears the value of the "member_id" field.
func (puo *PersonUpdateOne) ClearMemberID() *PersonUpdateOne {
	puo.mutation.ClearMemberID()
	return puo
}

// SetGender sets the "gender" field.
func (puo *PersonUpdateOne) SetGender(pe person.Gender) *PersonUpdateOne {
	puo.mutation.SetGender(pe)
	return puo
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableGender(pe *person.Gender) *PersonUpdateOne {
	if pe != nil {
		puo.SetGender(*pe)
	}
	return puo
}

// ClearGender clears the value of the "gender" field.
func (puo *PersonUpdateOne) ClearGender() *PersonUpdateOne {
	puo.mutation.ClearGender()
	return puo
}

// SetBirthDate sets the "birth_date" field.
func (puo *PersonUpdateOne) SetBirthDate(t time.Time) *PersonUpdateOne {
	puo.mutation.SetBirthDate(t)
	return puo
}

// SetNillableBirthDate sets the "birth_date" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableBirthDate(t *time.Time) *PersonUpdateOne {
	if t != nil {
		puo.SetBirthDate(*t)
	}
	return puo
}

// ClearBirthDate clears the value of the "birth_date" field.
func (puo *PersonUpdateOne) ClearBirthDate() *PersonUpdateOne {
	puo.mutation.ClearBirthDate()
	return puo
}

// SetDeceasedDate sets the "deceased_date" field.
func (puo *PersonUpdateOne) SetDeceasedDate(t time.Time) *PersonUpdateOne {
	puo.mutation.SetDeceasedDate(t)
	return puo
}

// SetNillableDeceasedDate sets the "deceased_date" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableDeceasedDate(t *time.Time) *PersonUpdateOne {
	if t != nil {
		puo.SetDeceasedDate(*t)
	}
	return puo
}

// ClearDeceasedDate clears the value of the "deceased_date" field.
func (puo *PersonUpdateOne) ClearDeceasedDate() *PersonUpdateOne {
	puo.mutation.ClearDeceasedDate()
	return puo
}

// SetHeight sets the "height" field.
func (puo *PersonUpdateOne) SetHeight(f float64) *PersonUpdateOne {
	puo.mutation.ResetHeight()
	puo.mutation.SetHeight(f)
	return puo
}

// SetNillableHeight sets the "height" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableHeight(f *float64) *PersonUpdateOne {
	if f != nil {
		puo.SetHeight(*f)
	}
	return puo
}

// AddHeight adds f to the "height" field.
func (puo *PersonUpdateOne) AddHeight(f float64) *PersonUpdateOne {
	puo.mutation.AddHeight(f)
	return puo
}

// ClearHeight clears the value of the "height" field.
func (puo *PersonUpdateOne) ClearHeight() *PersonUpdateOne {
	puo.mutation.ClearHeight()
	return puo
}

// SetWeight sets the "weight" field.
func (puo *PersonUpdateOne) SetWeight(f float64) *PersonUpdateOne {
	puo.mutation.ResetWeight()
	puo.mutation.SetWeight(f)
	return puo
}

// SetNillableWeight sets the "weight" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableWeight(f *float64) *PersonUpdateOne {
	if f != nil {
		puo.SetWeight(*f)
	}
	return puo
}

// AddWeight adds f to the "weight" field.
func (puo *PersonUpdateOne) AddWeight(f float64) *PersonUpdateOne {
	puo.mutation.AddWeight(f)
	return puo
}

// ClearWeight clears the value of the "weight" field.
func (puo *PersonUpdateOne) ClearWeight() *PersonUpdateOne {
	puo.mutation.ClearWeight()
	return puo
}

// SetMothersMaidenName sets the "mothers_maiden_name" field.
func (puo *PersonUpdateOne) SetMothersMaidenName(s string) *PersonUpdateOne {
	puo.mutation.SetMothersMaidenName(s)
	return puo
}

// SetNillableMothersMaidenName sets the "mothers_maiden_name" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableMothersMaidenName(s *string) *PersonUpdateOne {
	if s != nil {
		puo.SetMothersMaidenName(*s)
	}
	return puo
}

// ClearMothersMaidenName clears the value of the "mothers_maiden_name" field.
func (puo *PersonUpdateOne) ClearMothersMaidenName() *PersonUpdateOne {
	puo.mutation.ClearMothersMaidenName()
	return puo
}

// SetOldMaritalStatus sets the "old_marital_status" field.
func (puo *PersonUpdateOne) SetOldMaritalStatus(pms person.OldMaritalStatus) *PersonUpdateOne {
	puo.mutation.SetOldMaritalStatus(pms)
	return puo
}

// SetNillableOldMaritalStatus sets the "old_marital_status" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableOldMaritalStatus(pms *person.OldMaritalStatus) *PersonUpdateOne {
	if pms != nil {
		puo.SetOldMaritalStatus(*pms)
	}
	return puo
}

// ClearOldMaritalStatus clears the value of the "old_marital_status" field.
func (puo *PersonUpdateOne) ClearOldMaritalStatus() *PersonUpdateOne {
	puo.mutation.ClearOldMaritalStatus()
	return puo
}

// SetMaritalStatusEnumID sets the "marital_status_enum_id" field.
func (puo *PersonUpdateOne) SetMaritalStatusEnumID(i int) *PersonUpdateOne {
	puo.mutation.ResetMaritalStatusEnumID()
	puo.mutation.SetMaritalStatusEnumID(i)
	return puo
}

// SetNillableMaritalStatusEnumID sets the "marital_status_enum_id" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableMaritalStatusEnumID(i *int) *PersonUpdateOne {
	if i != nil {
		puo.SetMaritalStatusEnumID(*i)
	}
	return puo
}

// AddMaritalStatusEnumID adds i to the "marital_status_enum_id" field.
func (puo *PersonUpdateOne) AddMaritalStatusEnumID(i int) *PersonUpdateOne {
	puo.mutation.AddMaritalStatusEnumID(i)
	return puo
}

// ClearMaritalStatusEnumID clears the value of the "marital_status_enum_id" field.
func (puo *PersonUpdateOne) ClearMaritalStatusEnumID() *PersonUpdateOne {
	puo.mutation.ClearMaritalStatusEnumID()
	return puo
}

// SetSocialSecurityNumber sets the "social_security_number" field.
func (puo *PersonUpdateOne) SetSocialSecurityNumber(s string) *PersonUpdateOne {
	puo.mutation.SetSocialSecurityNumber(s)
	return puo
}

// SetNillableSocialSecurityNumber sets the "social_security_number" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableSocialSecurityNumber(s *string) *PersonUpdateOne {
	if s != nil {
		puo.SetSocialSecurityNumber(*s)
	}
	return puo
}

// ClearSocialSecurityNumber clears the value of the "social_security_number" field.
func (puo *PersonUpdateOne) ClearSocialSecurityNumber() *PersonUpdateOne {
	puo.mutation.ClearSocialSecurityNumber()
	return puo
}

// SetPassportNumber sets the "passport_number" field.
func (puo *PersonUpdateOne) SetPassportNumber(s string) *PersonUpdateOne {
	puo.mutation.SetPassportNumber(s)
	return puo
}

// SetNillablePassportNumber sets the "passport_number" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillablePassportNumber(s *string) *PersonUpdateOne {
	if s != nil {
		puo.SetPassportNumber(*s)
	}
	return puo
}

// ClearPassportNumber clears the value of the "passport_number" field.
func (puo *PersonUpdateOne) ClearPassportNumber() *PersonUpdateOne {
	puo.mutation.ClearPassportNumber()
	return puo
}

// SetPassportExpireDate sets the "passport_expire_date" field.
func (puo *PersonUpdateOne) SetPassportExpireDate(t time.Time) *PersonUpdateOne {
	puo.mutation.SetPassportExpireDate(t)
	return puo
}

// SetNillablePassportExpireDate sets the "passport_expire_date" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillablePassportExpireDate(t *time.Time) *PersonUpdateOne {
	if t != nil {
		puo.SetPassportExpireDate(*t)
	}
	return puo
}

// ClearPassportExpireDate clears the value of the "passport_expire_date" field.
func (puo *PersonUpdateOne) ClearPassportExpireDate() *PersonUpdateOne {
	puo.mutation.ClearPassportExpireDate()
	return puo
}

// SetTotalYearsWorkExperience sets the "total_years_work_experience" field.
func (puo *PersonUpdateOne) SetTotalYearsWorkExperience(f float64) *PersonUpdateOne {
	puo.mutation.ResetTotalYearsWorkExperience()
	puo.mutation.SetTotalYearsWorkExperience(f)
	return puo
}

// SetNillableTotalYearsWorkExperience sets the "total_years_work_experience" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableTotalYearsWorkExperience(f *float64) *PersonUpdateOne {
	if f != nil {
		puo.SetTotalYearsWorkExperience(*f)
	}
	return puo
}

// AddTotalYearsWorkExperience adds f to the "total_years_work_experience" field.
func (puo *PersonUpdateOne) AddTotalYearsWorkExperience(f float64) *PersonUpdateOne {
	puo.mutation.AddTotalYearsWorkExperience(f)
	return puo
}

// ClearTotalYearsWorkExperience clears the value of the "total_years_work_experience" field.
func (puo *PersonUpdateOne) ClearTotalYearsWorkExperience() *PersonUpdateOne {
	puo.mutation.ClearTotalYearsWorkExperience()
	return puo
}

// SetComments sets the "comments" field.
func (puo *PersonUpdateOne) SetComments(s string) *PersonUpdateOne {
	puo.mutation.SetComments(s)
	return puo
}

// SetNillableComments sets the "comments" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableComments(s *string) *PersonUpdateOne {
	if s != nil {
		puo.SetComments(*s)
	}
	return puo
}

// ClearComments clears the value of the "comments" field.
func (puo *PersonUpdateOne) ClearComments() *PersonUpdateOne {
	puo.mutation.ClearComments()
	return puo
}

// SetEmploymentStatusEnumID sets the "employment_status_enum_id" field.
func (puo *PersonUpdateOne) SetEmploymentStatusEnumID(i int) *PersonUpdateOne {
	puo.mutation.ResetEmploymentStatusEnumID()
	puo.mutation.SetEmploymentStatusEnumID(i)
	return puo
}

// SetNillableEmploymentStatusEnumID sets the "employment_status_enum_id" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableEmploymentStatusEnumID(i *int) *PersonUpdateOne {
	if i != nil {
		puo.SetEmploymentStatusEnumID(*i)
	}
	return puo
}

// AddEmploymentStatusEnumID adds i to the "employment_status_enum_id" field.
func (puo *PersonUpdateOne) AddEmploymentStatusEnumID(i int) *PersonUpdateOne {
	puo.mutation.AddEmploymentStatusEnumID(i)
	return puo
}

// ClearEmploymentStatusEnumID clears the value of the "employment_status_enum_id" field.
func (puo *PersonUpdateOne) ClearEmploymentStatusEnumID() *PersonUpdateOne {
	puo.mutation.ClearEmploymentStatusEnumID()
	return puo
}

// SetResidenceStatusEnumID sets the "residence_status_enum_id" field.
func (puo *PersonUpdateOne) SetResidenceStatusEnumID(i int) *PersonUpdateOne {
	puo.mutation.ResetResidenceStatusEnumID()
	puo.mutation.SetResidenceStatusEnumID(i)
	return puo
}

// SetNillableResidenceStatusEnumID sets the "residence_status_enum_id" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableResidenceStatusEnumID(i *int) *PersonUpdateOne {
	if i != nil {
		puo.SetResidenceStatusEnumID(*i)
	}
	return puo
}

// AddResidenceStatusEnumID adds i to the "residence_status_enum_id" field.
func (puo *PersonUpdateOne) AddResidenceStatusEnumID(i int) *PersonUpdateOne {
	puo.mutation.AddResidenceStatusEnumID(i)
	return puo
}

// ClearResidenceStatusEnumID clears the value of the "residence_status_enum_id" field.
func (puo *PersonUpdateOne) ClearResidenceStatusEnumID() *PersonUpdateOne {
	puo.mutation.ClearResidenceStatusEnumID()
	return puo
}

// SetOccupation sets the "occupation" field.
func (puo *PersonUpdateOne) SetOccupation(s string) *PersonUpdateOne {
	puo.mutation.SetOccupation(s)
	return puo
}

// SetNillableOccupation sets the "occupation" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableOccupation(s *string) *PersonUpdateOne {
	if s != nil {
		puo.SetOccupation(*s)
	}
	return puo
}

// ClearOccupation clears the value of the "occupation" field.
func (puo *PersonUpdateOne) ClearOccupation() *PersonUpdateOne {
	puo.mutation.ClearOccupation()
	return puo
}

// SetYearsWithEmployer sets the "years_with_employer" field.
func (puo *PersonUpdateOne) SetYearsWithEmployer(i int) *PersonUpdateOne {
	puo.mutation.ResetYearsWithEmployer()
	puo.mutation.SetYearsWithEmployer(i)
	return puo
}

// SetNillableYearsWithEmployer sets the "years_with_employer" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableYearsWithEmployer(i *int) *PersonUpdateOne {
	if i != nil {
		puo.SetYearsWithEmployer(*i)
	}
	return puo
}

// AddYearsWithEmployer adds i to the "years_with_employer" field.
func (puo *PersonUpdateOne) AddYearsWithEmployer(i int) *PersonUpdateOne {
	puo.mutation.AddYearsWithEmployer(i)
	return puo
}

// ClearYearsWithEmployer clears the value of the "years_with_employer" field.
func (puo *PersonUpdateOne) ClearYearsWithEmployer() *PersonUpdateOne {
	puo.mutation.ClearYearsWithEmployer()
	return puo
}

// SetMonthsWithEmployer sets the "months_with_employer" field.
func (puo *PersonUpdateOne) SetMonthsWithEmployer(i int) *PersonUpdateOne {
	puo.mutation.ResetMonthsWithEmployer()
	puo.mutation.SetMonthsWithEmployer(i)
	return puo
}

// SetNillableMonthsWithEmployer sets the "months_with_employer" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableMonthsWithEmployer(i *int) *PersonUpdateOne {
	if i != nil {
		puo.SetMonthsWithEmployer(*i)
	}
	return puo
}

// AddMonthsWithEmployer adds i to the "months_with_employer" field.
func (puo *PersonUpdateOne) AddMonthsWithEmployer(i int) *PersonUpdateOne {
	puo.mutation.AddMonthsWithEmployer(i)
	return puo
}

// ClearMonthsWithEmployer clears the value of the "months_with_employer" field.
func (puo *PersonUpdateOne) ClearMonthsWithEmployer() *PersonUpdateOne {
	puo.mutation.ClearMonthsWithEmployer()
	return puo
}

// SetExistingCustomer sets the "existing_customer" field.
func (puo *PersonUpdateOne) SetExistingCustomer(pc person.ExistingCustomer) *PersonUpdateOne {
	puo.mutation.SetExistingCustomer(pc)
	return puo
}

// SetNillableExistingCustomer sets the "existing_customer" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableExistingCustomer(pc *person.ExistingCustomer) *PersonUpdateOne {
	if pc != nil {
		puo.SetExistingCustomer(*pc)
	}
	return puo
}

// ClearExistingCustomer clears the value of the "existing_customer" field.
func (puo *PersonUpdateOne) ClearExistingCustomer() *PersonUpdateOne {
	puo.mutation.ClearExistingCustomer()
	return puo
}

// SetCardID sets the "card_id" field.
func (puo *PersonUpdateOne) SetCardID(s string) *PersonUpdateOne {
	puo.mutation.SetCardID(s)
	return puo
}

// SetNillableCardID sets the "card_id" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableCardID(s *string) *PersonUpdateOne {
	if s != nil {
		puo.SetCardID(*s)
	}
	return puo
}

// ClearCardID clears the value of the "card_id" field.
func (puo *PersonUpdateOne) ClearCardID() *PersonUpdateOne {
	puo.mutation.ClearCardID()
	return puo
}

// SetPartyID sets the "party" edge to the Party entity by ID.
func (puo *PersonUpdateOne) SetPartyID(id int) *PersonUpdateOne {
	puo.mutation.SetPartyID(id)
	return puo
}

// SetNillablePartyID sets the "party" edge to the Party entity by ID if the given value is not nil.
func (puo *PersonUpdateOne) SetNillablePartyID(id *int) *PersonUpdateOne {
	if id != nil {
		puo = puo.SetPartyID(*id)
	}
	return puo
}

// SetParty sets the "party" edge to the Party entity.
func (puo *PersonUpdateOne) SetParty(p *Party) *PersonUpdateOne {
	return puo.SetPartyID(p.ID)
}

// AddPartyContactMechIDs adds the "party_contact_meches" edge to the PartyContactMech entity by IDs.
func (puo *PersonUpdateOne) AddPartyContactMechIDs(ids ...int) *PersonUpdateOne {
	puo.mutation.AddPartyContactMechIDs(ids...)
	return puo
}

// AddPartyContactMeches adds the "party_contact_meches" edges to the PartyContactMech entity.
func (puo *PersonUpdateOne) AddPartyContactMeches(p ...*PartyContactMech) *PersonUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddPartyContactMechIDs(ids...)
}

// AddUserLoginIDs adds the "user_logins" edge to the UserLogin entity by IDs.
func (puo *PersonUpdateOne) AddUserLoginIDs(ids ...int) *PersonUpdateOne {
	puo.mutation.AddUserLoginIDs(ids...)
	return puo
}

// AddUserLogins adds the "user_logins" edges to the UserLogin entity.
func (puo *PersonUpdateOne) AddUserLogins(u ...*UserLogin) *PersonUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return puo.AddUserLoginIDs(ids...)
}

// Mutation returns the PersonMutation object of the builder.
func (puo *PersonUpdateOne) Mutation() *PersonMutation {
	return puo.mutation
}

// ClearParty clears the "party" edge to the Party entity.
func (puo *PersonUpdateOne) ClearParty() *PersonUpdateOne {
	puo.mutation.ClearParty()
	return puo
}

// ClearPartyContactMeches clears all "party_contact_meches" edges to the PartyContactMech entity.
func (puo *PersonUpdateOne) ClearPartyContactMeches() *PersonUpdateOne {
	puo.mutation.ClearPartyContactMeches()
	return puo
}

// RemovePartyContactMechIDs removes the "party_contact_meches" edge to PartyContactMech entities by IDs.
func (puo *PersonUpdateOne) RemovePartyContactMechIDs(ids ...int) *PersonUpdateOne {
	puo.mutation.RemovePartyContactMechIDs(ids...)
	return puo
}

// RemovePartyContactMeches removes "party_contact_meches" edges to PartyContactMech entities.
func (puo *PersonUpdateOne) RemovePartyContactMeches(p ...*PartyContactMech) *PersonUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemovePartyContactMechIDs(ids...)
}

// ClearUserLogins clears all "user_logins" edges to the UserLogin entity.
func (puo *PersonUpdateOne) ClearUserLogins() *PersonUpdateOne {
	puo.mutation.ClearUserLogins()
	return puo
}

// RemoveUserLoginIDs removes the "user_logins" edge to UserLogin entities by IDs.
func (puo *PersonUpdateOne) RemoveUserLoginIDs(ids ...int) *PersonUpdateOne {
	puo.mutation.RemoveUserLoginIDs(ids...)
	return puo
}

// RemoveUserLogins removes "user_logins" edges to UserLogin entities.
func (puo *PersonUpdateOne) RemoveUserLogins(u ...*UserLogin) *PersonUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return puo.RemoveUserLoginIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PersonUpdateOne) Select(field string, fields ...string) *PersonUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Person entity.
func (puo *PersonUpdateOne) Save(ctx context.Context) (*Person, error) {
	var (
		err  error
		node *Person
	)
	puo.defaults()
	if len(puo.hooks) == 0 {
		if err = puo.check(); err != nil {
			return nil, err
		}
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PersonMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = puo.check(); err != nil {
				return nil, err
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			mut = puo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, puo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PersonUpdateOne) SaveX(ctx context.Context) *Person {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PersonUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PersonUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *PersonUpdateOne) defaults() {
	if _, ok := puo.mutation.UpdateTime(); !ok {
		v := person.UpdateDefaultUpdateTime()
		puo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PersonUpdateOne) check() error {
	if v, ok := puo.mutation.Gender(); ok {
		if err := person.GenderValidator(v); err != nil {
			return &ValidationError{Name: "gender", err: fmt.Errorf("ent: validator failed for field \"gender\": %w", err)}
		}
	}
	if v, ok := puo.mutation.OldMaritalStatus(); ok {
		if err := person.OldMaritalStatusValidator(v); err != nil {
			return &ValidationError{Name: "old_marital_status", err: fmt.Errorf("ent: validator failed for field \"old_marital_status\": %w", err)}
		}
	}
	if v, ok := puo.mutation.ExistingCustomer(); ok {
		if err := person.ExistingCustomerValidator(v); err != nil {
			return &ValidationError{Name: "existing_customer", err: fmt.Errorf("ent: validator failed for field \"existing_customer\": %w", err)}
		}
	}
	if v, ok := puo.mutation.CardID(); ok {
		if err := person.CardIDValidator(v); err != nil {
			return &ValidationError{Name: "card_id", err: fmt.Errorf("ent: validator failed for field \"card_id\": %w", err)}
		}
	}
	return nil
}

func (puo *PersonUpdateOne) sqlSave(ctx context.Context) (_node *Person, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   person.Table,
			Columns: person.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: person.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Person.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, person.FieldID)
		for _, f := range fields {
			if !person.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != person.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: person.FieldUpdateTime,
		})
	}
	if value, ok := puo.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldStringRef,
		})
	}
	if puo.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: person.FieldStringRef,
		})
	}
	if value, ok := puo.mutation.Salutation(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldSalutation,
		})
	}
	if puo.mutation.SalutationCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: person.FieldSalutation,
		})
	}
	if value, ok := puo.mutation.FirstName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldFirstName,
		})
	}
	if puo.mutation.FirstNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: person.FieldFirstName,
		})
	}
	if value, ok := puo.mutation.MiddleName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldMiddleName,
		})
	}
	if puo.mutation.MiddleNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: person.FieldMiddleName,
		})
	}
	if value, ok := puo.mutation.LastName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldLastName,
		})
	}
	if puo.mutation.LastNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: person.FieldLastName,
		})
	}
	if value, ok := puo.mutation.PersonalTitle(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldPersonalTitle,
		})
	}
	if puo.mutation.PersonalTitleCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: person.FieldPersonalTitle,
		})
	}
	if value, ok := puo.mutation.Suffix(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldSuffix,
		})
	}
	if puo.mutation.SuffixCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: person.FieldSuffix,
		})
	}
	if value, ok := puo.mutation.Nickname(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldNickname,
		})
	}
	if puo.mutation.NicknameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: person.FieldNickname,
		})
	}
	if value, ok := puo.mutation.FirstNameLocal(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldFirstNameLocal,
		})
	}
	if puo.mutation.FirstNameLocalCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: person.FieldFirstNameLocal,
		})
	}
	if value, ok := puo.mutation.MiddleNameLocal(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldMiddleNameLocal,
		})
	}
	if puo.mutation.MiddleNameLocalCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: person.FieldMiddleNameLocal,
		})
	}
	if value, ok := puo.mutation.LastNameLocal(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldLastNameLocal,
		})
	}
	if puo.mutation.LastNameLocalCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: person.FieldLastNameLocal,
		})
	}
	if value, ok := puo.mutation.OtherLocal(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldOtherLocal,
		})
	}
	if puo.mutation.OtherLocalCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: person.FieldOtherLocal,
		})
	}
	if value, ok := puo.mutation.MemberID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldMemberID,
		})
	}
	if value, ok := puo.mutation.AddedMemberID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldMemberID,
		})
	}
	if puo.mutation.MemberIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: person.FieldMemberID,
		})
	}
	if value, ok := puo.mutation.Gender(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: person.FieldGender,
		})
	}
	if puo.mutation.GenderCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: person.FieldGender,
		})
	}
	if value, ok := puo.mutation.BirthDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: person.FieldBirthDate,
		})
	}
	if puo.mutation.BirthDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: person.FieldBirthDate,
		})
	}
	if value, ok := puo.mutation.DeceasedDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: person.FieldDeceasedDate,
		})
	}
	if puo.mutation.DeceasedDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: person.FieldDeceasedDate,
		})
	}
	if value, ok := puo.mutation.Height(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: person.FieldHeight,
		})
	}
	if value, ok := puo.mutation.AddedHeight(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: person.FieldHeight,
		})
	}
	if puo.mutation.HeightCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: person.FieldHeight,
		})
	}
	if value, ok := puo.mutation.Weight(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: person.FieldWeight,
		})
	}
	if value, ok := puo.mutation.AddedWeight(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: person.FieldWeight,
		})
	}
	if puo.mutation.WeightCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: person.FieldWeight,
		})
	}
	if value, ok := puo.mutation.MothersMaidenName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldMothersMaidenName,
		})
	}
	if puo.mutation.MothersMaidenNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: person.FieldMothersMaidenName,
		})
	}
	if value, ok := puo.mutation.OldMaritalStatus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: person.FieldOldMaritalStatus,
		})
	}
	if puo.mutation.OldMaritalStatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: person.FieldOldMaritalStatus,
		})
	}
	if value, ok := puo.mutation.MaritalStatusEnumID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldMaritalStatusEnumID,
		})
	}
	if value, ok := puo.mutation.AddedMaritalStatusEnumID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldMaritalStatusEnumID,
		})
	}
	if puo.mutation.MaritalStatusEnumIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: person.FieldMaritalStatusEnumID,
		})
	}
	if value, ok := puo.mutation.SocialSecurityNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldSocialSecurityNumber,
		})
	}
	if puo.mutation.SocialSecurityNumberCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: person.FieldSocialSecurityNumber,
		})
	}
	if value, ok := puo.mutation.PassportNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldPassportNumber,
		})
	}
	if puo.mutation.PassportNumberCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: person.FieldPassportNumber,
		})
	}
	if value, ok := puo.mutation.PassportExpireDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: person.FieldPassportExpireDate,
		})
	}
	if puo.mutation.PassportExpireDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: person.FieldPassportExpireDate,
		})
	}
	if value, ok := puo.mutation.TotalYearsWorkExperience(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: person.FieldTotalYearsWorkExperience,
		})
	}
	if value, ok := puo.mutation.AddedTotalYearsWorkExperience(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: person.FieldTotalYearsWorkExperience,
		})
	}
	if puo.mutation.TotalYearsWorkExperienceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: person.FieldTotalYearsWorkExperience,
		})
	}
	if value, ok := puo.mutation.Comments(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldComments,
		})
	}
	if puo.mutation.CommentsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: person.FieldComments,
		})
	}
	if value, ok := puo.mutation.EmploymentStatusEnumID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldEmploymentStatusEnumID,
		})
	}
	if value, ok := puo.mutation.AddedEmploymentStatusEnumID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldEmploymentStatusEnumID,
		})
	}
	if puo.mutation.EmploymentStatusEnumIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: person.FieldEmploymentStatusEnumID,
		})
	}
	if value, ok := puo.mutation.ResidenceStatusEnumID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldResidenceStatusEnumID,
		})
	}
	if value, ok := puo.mutation.AddedResidenceStatusEnumID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldResidenceStatusEnumID,
		})
	}
	if puo.mutation.ResidenceStatusEnumIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: person.FieldResidenceStatusEnumID,
		})
	}
	if value, ok := puo.mutation.Occupation(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldOccupation,
		})
	}
	if puo.mutation.OccupationCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: person.FieldOccupation,
		})
	}
	if value, ok := puo.mutation.YearsWithEmployer(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldYearsWithEmployer,
		})
	}
	if value, ok := puo.mutation.AddedYearsWithEmployer(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldYearsWithEmployer,
		})
	}
	if puo.mutation.YearsWithEmployerCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: person.FieldYearsWithEmployer,
		})
	}
	if value, ok := puo.mutation.MonthsWithEmployer(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldMonthsWithEmployer,
		})
	}
	if value, ok := puo.mutation.AddedMonthsWithEmployer(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldMonthsWithEmployer,
		})
	}
	if puo.mutation.MonthsWithEmployerCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: person.FieldMonthsWithEmployer,
		})
	}
	if value, ok := puo.mutation.ExistingCustomer(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: person.FieldExistingCustomer,
		})
	}
	if puo.mutation.ExistingCustomerCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: person.FieldExistingCustomer,
		})
	}
	if value, ok := puo.mutation.CardID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldCardID,
		})
	}
	if puo.mutation.CardIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: person.FieldCardID,
		})
	}
	if puo.mutation.PartyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   person.PartyTable,
			Columns: []string{person.PartyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: party.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PartyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   person.PartyTable,
			Columns: []string{person.PartyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: party.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.PartyContactMechesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   person.PartyContactMechesTable,
			Columns: []string{person.PartyContactMechesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partycontactmech.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedPartyContactMechesIDs(); len(nodes) > 0 && !puo.mutation.PartyContactMechesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   person.PartyContactMechesTable,
			Columns: []string{person.PartyContactMechesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partycontactmech.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PartyContactMechesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   person.PartyContactMechesTable,
			Columns: []string{person.PartyContactMechesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partycontactmech.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.UserLoginsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   person.UserLoginsTable,
			Columns: []string{person.UserLoginsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: userlogin.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedUserLoginsIDs(); len(nodes) > 0 && !puo.mutation.UserLoginsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   person.UserLoginsTable,
			Columns: []string{person.UserLoginsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: userlogin.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.UserLoginsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   person.UserLoginsTable,
			Columns: []string{person.UserLoginsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: userlogin.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Person{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{person.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
