// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/fixedasset"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/partycontactmech"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/partyrole"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/roletype"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/workeffortpartyassignment"
)

// RoleTypeCreate is the builder for creating a RoleType entity.
type RoleTypeCreate struct {
	config
	mutation *RoleTypeMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (rtc *RoleTypeCreate) SetCreateTime(t time.Time) *RoleTypeCreate {
	rtc.mutation.SetCreateTime(t)
	return rtc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (rtc *RoleTypeCreate) SetNillableCreateTime(t *time.Time) *RoleTypeCreate {
	if t != nil {
		rtc.SetCreateTime(*t)
	}
	return rtc
}

// SetUpdateTime sets the "update_time" field.
func (rtc *RoleTypeCreate) SetUpdateTime(t time.Time) *RoleTypeCreate {
	rtc.mutation.SetUpdateTime(t)
	return rtc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (rtc *RoleTypeCreate) SetNillableUpdateTime(t *time.Time) *RoleTypeCreate {
	if t != nil {
		rtc.SetUpdateTime(*t)
	}
	return rtc
}

// SetStringRef sets the "string_ref" field.
func (rtc *RoleTypeCreate) SetStringRef(s string) *RoleTypeCreate {
	rtc.mutation.SetStringRef(s)
	return rtc
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (rtc *RoleTypeCreate) SetNillableStringRef(s *string) *RoleTypeCreate {
	if s != nil {
		rtc.SetStringRef(*s)
	}
	return rtc
}

// SetHasTable sets the "has_table" field.
func (rtc *RoleTypeCreate) SetHasTable(rt roletype.HasTable) *RoleTypeCreate {
	rtc.mutation.SetHasTable(rt)
	return rtc
}

// SetNillableHasTable sets the "has_table" field if the given value is not nil.
func (rtc *RoleTypeCreate) SetNillableHasTable(rt *roletype.HasTable) *RoleTypeCreate {
	if rt != nil {
		rtc.SetHasTable(*rt)
	}
	return rtc
}

// SetDescription sets the "description" field.
func (rtc *RoleTypeCreate) SetDescription(s string) *RoleTypeCreate {
	rtc.mutation.SetDescription(s)
	return rtc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (rtc *RoleTypeCreate) SetNillableDescription(s *string) *RoleTypeCreate {
	if s != nil {
		rtc.SetDescription(*s)
	}
	return rtc
}

// SetParentID sets the "parent" edge to the RoleType entity by ID.
func (rtc *RoleTypeCreate) SetParentID(id int) *RoleTypeCreate {
	rtc.mutation.SetParentID(id)
	return rtc
}

// SetNillableParentID sets the "parent" edge to the RoleType entity by ID if the given value is not nil.
func (rtc *RoleTypeCreate) SetNillableParentID(id *int) *RoleTypeCreate {
	if id != nil {
		rtc = rtc.SetParentID(*id)
	}
	return rtc
}

// SetParent sets the "parent" edge to the RoleType entity.
func (rtc *RoleTypeCreate) SetParent(r *RoleType) *RoleTypeCreate {
	return rtc.SetParentID(r.ID)
}

// AddChildIDs adds the "children" edge to the RoleType entity by IDs.
func (rtc *RoleTypeCreate) AddChildIDs(ids ...int) *RoleTypeCreate {
	rtc.mutation.AddChildIDs(ids...)
	return rtc
}

// AddChildren adds the "children" edges to the RoleType entity.
func (rtc *RoleTypeCreate) AddChildren(r ...*RoleType) *RoleTypeCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rtc.AddChildIDs(ids...)
}

// AddFixedAssetIDs adds the "fixed_assets" edge to the FixedAsset entity by IDs.
func (rtc *RoleTypeCreate) AddFixedAssetIDs(ids ...int) *RoleTypeCreate {
	rtc.mutation.AddFixedAssetIDs(ids...)
	return rtc
}

// AddFixedAssets adds the "fixed_assets" edges to the FixedAsset entity.
func (rtc *RoleTypeCreate) AddFixedAssets(f ...*FixedAsset) *RoleTypeCreate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return rtc.AddFixedAssetIDs(ids...)
}

// AddPartyContactMechIDs adds the "party_contact_meches" edge to the PartyContactMech entity by IDs.
func (rtc *RoleTypeCreate) AddPartyContactMechIDs(ids ...int) *RoleTypeCreate {
	rtc.mutation.AddPartyContactMechIDs(ids...)
	return rtc
}

// AddPartyContactMeches adds the "party_contact_meches" edges to the PartyContactMech entity.
func (rtc *RoleTypeCreate) AddPartyContactMeches(p ...*PartyContactMech) *RoleTypeCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return rtc.AddPartyContactMechIDs(ids...)
}

// AddPartyRoleIDs adds the "party_roles" edge to the PartyRole entity by IDs.
func (rtc *RoleTypeCreate) AddPartyRoleIDs(ids ...int) *RoleTypeCreate {
	rtc.mutation.AddPartyRoleIDs(ids...)
	return rtc
}

// AddPartyRoles adds the "party_roles" edges to the PartyRole entity.
func (rtc *RoleTypeCreate) AddPartyRoles(p ...*PartyRole) *RoleTypeCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return rtc.AddPartyRoleIDs(ids...)
}

// AddChildRoleTypeIDs adds the "child_role_types" edge to the RoleType entity by IDs.
func (rtc *RoleTypeCreate) AddChildRoleTypeIDs(ids ...int) *RoleTypeCreate {
	rtc.mutation.AddChildRoleTypeIDs(ids...)
	return rtc
}

// AddChildRoleTypes adds the "child_role_types" edges to the RoleType entity.
func (rtc *RoleTypeCreate) AddChildRoleTypes(r ...*RoleType) *RoleTypeCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rtc.AddChildRoleTypeIDs(ids...)
}

// AddWorkEffortPartyAssignmentIDs adds the "work_effort_party_assignments" edge to the WorkEffortPartyAssignment entity by IDs.
func (rtc *RoleTypeCreate) AddWorkEffortPartyAssignmentIDs(ids ...int) *RoleTypeCreate {
	rtc.mutation.AddWorkEffortPartyAssignmentIDs(ids...)
	return rtc
}

// AddWorkEffortPartyAssignments adds the "work_effort_party_assignments" edges to the WorkEffortPartyAssignment entity.
func (rtc *RoleTypeCreate) AddWorkEffortPartyAssignments(w ...*WorkEffortPartyAssignment) *RoleTypeCreate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return rtc.AddWorkEffortPartyAssignmentIDs(ids...)
}

// Mutation returns the RoleTypeMutation object of the builder.
func (rtc *RoleTypeCreate) Mutation() *RoleTypeMutation {
	return rtc.mutation
}

// Save creates the RoleType in the database.
func (rtc *RoleTypeCreate) Save(ctx context.Context) (*RoleType, error) {
	var (
		err  error
		node *RoleType
	)
	rtc.defaults()
	if len(rtc.hooks) == 0 {
		if err = rtc.check(); err != nil {
			return nil, err
		}
		node, err = rtc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RoleTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rtc.check(); err != nil {
				return nil, err
			}
			rtc.mutation = mutation
			if node, err = rtc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(rtc.hooks) - 1; i >= 0; i-- {
			mut = rtc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rtc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (rtc *RoleTypeCreate) SaveX(ctx context.Context) *RoleType {
	v, err := rtc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (rtc *RoleTypeCreate) defaults() {
	if _, ok := rtc.mutation.CreateTime(); !ok {
		v := roletype.DefaultCreateTime()
		rtc.mutation.SetCreateTime(v)
	}
	if _, ok := rtc.mutation.UpdateTime(); !ok {
		v := roletype.DefaultUpdateTime()
		rtc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rtc *RoleTypeCreate) check() error {
	if _, ok := rtc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New("ent: missing required field \"create_time\"")}
	}
	if _, ok := rtc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New("ent: missing required field \"update_time\"")}
	}
	if v, ok := rtc.mutation.HasTable(); ok {
		if err := roletype.HasTableValidator(v); err != nil {
			return &ValidationError{Name: "has_table", err: fmt.Errorf("ent: validator failed for field \"has_table\": %w", err)}
		}
	}
	return nil
}

func (rtc *RoleTypeCreate) sqlSave(ctx context.Context) (*RoleType, error) {
	_node, _spec := rtc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rtc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (rtc *RoleTypeCreate) createSpec() (*RoleType, *sqlgraph.CreateSpec) {
	var (
		_node = &RoleType{config: rtc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: roletype.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: roletype.FieldID,
			},
		}
	)
	if value, ok := rtc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: roletype.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := rtc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: roletype.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := rtc.mutation.StringRef(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: roletype.FieldStringRef,
		})
		_node.StringRef = value
	}
	if value, ok := rtc.mutation.HasTable(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: roletype.FieldHasTable,
		})
		_node.HasTable = value
	}
	if value, ok := rtc.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: roletype.FieldDescription,
		})
		_node.Description = value
	}
	if nodes := rtc.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   roletype.ParentTable,
			Columns: []string{roletype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: roletype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.role_type_children = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rtc.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   roletype.ChildrenTable,
			Columns: []string{roletype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: roletype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rtc.mutation.FixedAssetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   roletype.FixedAssetsTable,
			Columns: []string{roletype.FixedAssetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: fixedasset.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rtc.mutation.PartyContactMechesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   roletype.PartyContactMechesTable,
			Columns: []string{roletype.PartyContactMechesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partycontactmech.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rtc.mutation.PartyRolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   roletype.PartyRolesTable,
			Columns: []string{roletype.PartyRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partyrole.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rtc.mutation.ChildRoleTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   roletype.ChildRoleTypesTable,
			Columns: roletype.ChildRoleTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: roletype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rtc.mutation.WorkEffortPartyAssignmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   roletype.WorkEffortPartyAssignmentsTable,
			Columns: []string{roletype.WorkEffortPartyAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffortpartyassignment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// RoleTypeCreateBulk is the builder for creating many RoleType entities in bulk.
type RoleTypeCreateBulk struct {
	config
	builders []*RoleTypeCreate
}

// Save creates the RoleType entities in the database.
func (rtcb *RoleTypeCreateBulk) Save(ctx context.Context) ([]*RoleType, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rtcb.builders))
	nodes := make([]*RoleType, len(rtcb.builders))
	mutators := make([]Mutator, len(rtcb.builders))
	for i := range rtcb.builders {
		func(i int, root context.Context) {
			builder := rtcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RoleTypeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rtcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rtcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rtcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rtcb *RoleTypeCreateBulk) SaveX(ctx context.Context) []*RoleType {
	v, err := rtcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
