// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/fixedasset"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/partycontactmech"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/partyrelationshiptype"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/partyrole"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/predicate"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/roletype"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/workeffortpartyassignment"
)

// RoleTypeQuery is the builder for querying RoleType entities.
type RoleTypeQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.RoleType
	// eager-loading edges.
	withParent                          *RoleTypeQuery
	withChildren                        *RoleTypeQuery
	withFixedAssets                     *FixedAssetQuery
	withPartyContactMeches              *PartyContactMechQuery
	withValidFromPartyRelationshipTypes *PartyRelationshipTypeQuery
	withValidToPartyRelationshipTypes   *PartyRelationshipTypeQuery
	withPartyRoles                      *PartyRoleQuery
	withChildRoleTypes                  *RoleTypeQuery
	withWorkEffortPartyAssignments      *WorkEffortPartyAssignmentQuery
	withFKs                             bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the RoleTypeQuery builder.
func (rtq *RoleTypeQuery) Where(ps ...predicate.RoleType) *RoleTypeQuery {
	rtq.predicates = append(rtq.predicates, ps...)
	return rtq
}

// Limit adds a limit step to the query.
func (rtq *RoleTypeQuery) Limit(limit int) *RoleTypeQuery {
	rtq.limit = &limit
	return rtq
}

// Offset adds an offset step to the query.
func (rtq *RoleTypeQuery) Offset(offset int) *RoleTypeQuery {
	rtq.offset = &offset
	return rtq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (rtq *RoleTypeQuery) Unique(unique bool) *RoleTypeQuery {
	rtq.unique = &unique
	return rtq
}

// Order adds an order step to the query.
func (rtq *RoleTypeQuery) Order(o ...OrderFunc) *RoleTypeQuery {
	rtq.order = append(rtq.order, o...)
	return rtq
}

// QueryParent chains the current query on the "parent" edge.
func (rtq *RoleTypeQuery) QueryParent() *RoleTypeQuery {
	query := &RoleTypeQuery{config: rtq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rtq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rtq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(roletype.Table, roletype.FieldID, selector),
			sqlgraph.To(roletype.Table, roletype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, roletype.ParentTable, roletype.ParentColumn),
		)
		fromU = sqlgraph.SetNeighbors(rtq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryChildren chains the current query on the "children" edge.
func (rtq *RoleTypeQuery) QueryChildren() *RoleTypeQuery {
	query := &RoleTypeQuery{config: rtq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rtq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rtq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(roletype.Table, roletype.FieldID, selector),
			sqlgraph.To(roletype.Table, roletype.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, roletype.ChildrenTable, roletype.ChildrenColumn),
		)
		fromU = sqlgraph.SetNeighbors(rtq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFixedAssets chains the current query on the "fixed_assets" edge.
func (rtq *RoleTypeQuery) QueryFixedAssets() *FixedAssetQuery {
	query := &FixedAssetQuery{config: rtq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rtq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rtq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(roletype.Table, roletype.FieldID, selector),
			sqlgraph.To(fixedasset.Table, fixedasset.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, roletype.FixedAssetsTable, roletype.FixedAssetsColumn),
		)
		fromU = sqlgraph.SetNeighbors(rtq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPartyContactMeches chains the current query on the "party_contact_meches" edge.
func (rtq *RoleTypeQuery) QueryPartyContactMeches() *PartyContactMechQuery {
	query := &PartyContactMechQuery{config: rtq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rtq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rtq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(roletype.Table, roletype.FieldID, selector),
			sqlgraph.To(partycontactmech.Table, partycontactmech.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, roletype.PartyContactMechesTable, roletype.PartyContactMechesColumn),
		)
		fromU = sqlgraph.SetNeighbors(rtq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryValidFromPartyRelationshipTypes chains the current query on the "valid_from_party_relationship_types" edge.
func (rtq *RoleTypeQuery) QueryValidFromPartyRelationshipTypes() *PartyRelationshipTypeQuery {
	query := &PartyRelationshipTypeQuery{config: rtq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rtq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rtq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(roletype.Table, roletype.FieldID, selector),
			sqlgraph.To(partyrelationshiptype.Table, partyrelationshiptype.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, roletype.ValidFromPartyRelationshipTypesTable, roletype.ValidFromPartyRelationshipTypesColumn),
		)
		fromU = sqlgraph.SetNeighbors(rtq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryValidToPartyRelationshipTypes chains the current query on the "valid_to_party_relationship_types" edge.
func (rtq *RoleTypeQuery) QueryValidToPartyRelationshipTypes() *PartyRelationshipTypeQuery {
	query := &PartyRelationshipTypeQuery{config: rtq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rtq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rtq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(roletype.Table, roletype.FieldID, selector),
			sqlgraph.To(partyrelationshiptype.Table, partyrelationshiptype.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, roletype.ValidToPartyRelationshipTypesTable, roletype.ValidToPartyRelationshipTypesColumn),
		)
		fromU = sqlgraph.SetNeighbors(rtq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPartyRoles chains the current query on the "party_roles" edge.
func (rtq *RoleTypeQuery) QueryPartyRoles() *PartyRoleQuery {
	query := &PartyRoleQuery{config: rtq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rtq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rtq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(roletype.Table, roletype.FieldID, selector),
			sqlgraph.To(partyrole.Table, partyrole.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, roletype.PartyRolesTable, roletype.PartyRolesColumn),
		)
		fromU = sqlgraph.SetNeighbors(rtq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryChildRoleTypes chains the current query on the "child_role_types" edge.
func (rtq *RoleTypeQuery) QueryChildRoleTypes() *RoleTypeQuery {
	query := &RoleTypeQuery{config: rtq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rtq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rtq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(roletype.Table, roletype.FieldID, selector),
			sqlgraph.To(roletype.Table, roletype.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, roletype.ChildRoleTypesTable, roletype.ChildRoleTypesPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(rtq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryWorkEffortPartyAssignments chains the current query on the "work_effort_party_assignments" edge.
func (rtq *RoleTypeQuery) QueryWorkEffortPartyAssignments() *WorkEffortPartyAssignmentQuery {
	query := &WorkEffortPartyAssignmentQuery{config: rtq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rtq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rtq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(roletype.Table, roletype.FieldID, selector),
			sqlgraph.To(workeffortpartyassignment.Table, workeffortpartyassignment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, roletype.WorkEffortPartyAssignmentsTable, roletype.WorkEffortPartyAssignmentsColumn),
		)
		fromU = sqlgraph.SetNeighbors(rtq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first RoleType entity from the query.
// Returns a *NotFoundError when no RoleType was found.
func (rtq *RoleTypeQuery) First(ctx context.Context) (*RoleType, error) {
	nodes, err := rtq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{roletype.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (rtq *RoleTypeQuery) FirstX(ctx context.Context) *RoleType {
	node, err := rtq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first RoleType ID from the query.
// Returns a *NotFoundError when no RoleType ID was found.
func (rtq *RoleTypeQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = rtq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{roletype.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (rtq *RoleTypeQuery) FirstIDX(ctx context.Context) int {
	id, err := rtq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single RoleType entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one RoleType entity is not found.
// Returns a *NotFoundError when no RoleType entities are found.
func (rtq *RoleTypeQuery) Only(ctx context.Context) (*RoleType, error) {
	nodes, err := rtq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{roletype.Label}
	default:
		return nil, &NotSingularError{roletype.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (rtq *RoleTypeQuery) OnlyX(ctx context.Context) *RoleType {
	node, err := rtq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only RoleType ID in the query.
// Returns a *NotSingularError when exactly one RoleType ID is not found.
// Returns a *NotFoundError when no entities are found.
func (rtq *RoleTypeQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = rtq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{roletype.Label}
	default:
		err = &NotSingularError{roletype.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (rtq *RoleTypeQuery) OnlyIDX(ctx context.Context) int {
	id, err := rtq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of RoleTypes.
func (rtq *RoleTypeQuery) All(ctx context.Context) ([]*RoleType, error) {
	if err := rtq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return rtq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (rtq *RoleTypeQuery) AllX(ctx context.Context) []*RoleType {
	nodes, err := rtq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of RoleType IDs.
func (rtq *RoleTypeQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := rtq.Select(roletype.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (rtq *RoleTypeQuery) IDsX(ctx context.Context) []int {
	ids, err := rtq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (rtq *RoleTypeQuery) Count(ctx context.Context) (int, error) {
	if err := rtq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return rtq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (rtq *RoleTypeQuery) CountX(ctx context.Context) int {
	count, err := rtq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (rtq *RoleTypeQuery) Exist(ctx context.Context) (bool, error) {
	if err := rtq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return rtq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (rtq *RoleTypeQuery) ExistX(ctx context.Context) bool {
	exist, err := rtq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the RoleTypeQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (rtq *RoleTypeQuery) Clone() *RoleTypeQuery {
	if rtq == nil {
		return nil
	}
	return &RoleTypeQuery{
		config:                              rtq.config,
		limit:                               rtq.limit,
		offset:                              rtq.offset,
		order:                               append([]OrderFunc{}, rtq.order...),
		predicates:                          append([]predicate.RoleType{}, rtq.predicates...),
		withParent:                          rtq.withParent.Clone(),
		withChildren:                        rtq.withChildren.Clone(),
		withFixedAssets:                     rtq.withFixedAssets.Clone(),
		withPartyContactMeches:              rtq.withPartyContactMeches.Clone(),
		withValidFromPartyRelationshipTypes: rtq.withValidFromPartyRelationshipTypes.Clone(),
		withValidToPartyRelationshipTypes:   rtq.withValidToPartyRelationshipTypes.Clone(),
		withPartyRoles:                      rtq.withPartyRoles.Clone(),
		withChildRoleTypes:                  rtq.withChildRoleTypes.Clone(),
		withWorkEffortPartyAssignments:      rtq.withWorkEffortPartyAssignments.Clone(),
		// clone intermediate query.
		sql:  rtq.sql.Clone(),
		path: rtq.path,
	}
}

// WithParent tells the query-builder to eager-load the nodes that are connected to
// the "parent" edge. The optional arguments are used to configure the query builder of the edge.
func (rtq *RoleTypeQuery) WithParent(opts ...func(*RoleTypeQuery)) *RoleTypeQuery {
	query := &RoleTypeQuery{config: rtq.config}
	for _, opt := range opts {
		opt(query)
	}
	rtq.withParent = query
	return rtq
}

// WithChildren tells the query-builder to eager-load the nodes that are connected to
// the "children" edge. The optional arguments are used to configure the query builder of the edge.
func (rtq *RoleTypeQuery) WithChildren(opts ...func(*RoleTypeQuery)) *RoleTypeQuery {
	query := &RoleTypeQuery{config: rtq.config}
	for _, opt := range opts {
		opt(query)
	}
	rtq.withChildren = query
	return rtq
}

// WithFixedAssets tells the query-builder to eager-load the nodes that are connected to
// the "fixed_assets" edge. The optional arguments are used to configure the query builder of the edge.
func (rtq *RoleTypeQuery) WithFixedAssets(opts ...func(*FixedAssetQuery)) *RoleTypeQuery {
	query := &FixedAssetQuery{config: rtq.config}
	for _, opt := range opts {
		opt(query)
	}
	rtq.withFixedAssets = query
	return rtq
}

// WithPartyContactMeches tells the query-builder to eager-load the nodes that are connected to
// the "party_contact_meches" edge. The optional arguments are used to configure the query builder of the edge.
func (rtq *RoleTypeQuery) WithPartyContactMeches(opts ...func(*PartyContactMechQuery)) *RoleTypeQuery {
	query := &PartyContactMechQuery{config: rtq.config}
	for _, opt := range opts {
		opt(query)
	}
	rtq.withPartyContactMeches = query
	return rtq
}

// WithValidFromPartyRelationshipTypes tells the query-builder to eager-load the nodes that are connected to
// the "valid_from_party_relationship_types" edge. The optional arguments are used to configure the query builder of the edge.
func (rtq *RoleTypeQuery) WithValidFromPartyRelationshipTypes(opts ...func(*PartyRelationshipTypeQuery)) *RoleTypeQuery {
	query := &PartyRelationshipTypeQuery{config: rtq.config}
	for _, opt := range opts {
		opt(query)
	}
	rtq.withValidFromPartyRelationshipTypes = query
	return rtq
}

// WithValidToPartyRelationshipTypes tells the query-builder to eager-load the nodes that are connected to
// the "valid_to_party_relationship_types" edge. The optional arguments are used to configure the query builder of the edge.
func (rtq *RoleTypeQuery) WithValidToPartyRelationshipTypes(opts ...func(*PartyRelationshipTypeQuery)) *RoleTypeQuery {
	query := &PartyRelationshipTypeQuery{config: rtq.config}
	for _, opt := range opts {
		opt(query)
	}
	rtq.withValidToPartyRelationshipTypes = query
	return rtq
}

// WithPartyRoles tells the query-builder to eager-load the nodes that are connected to
// the "party_roles" edge. The optional arguments are used to configure the query builder of the edge.
func (rtq *RoleTypeQuery) WithPartyRoles(opts ...func(*PartyRoleQuery)) *RoleTypeQuery {
	query := &PartyRoleQuery{config: rtq.config}
	for _, opt := range opts {
		opt(query)
	}
	rtq.withPartyRoles = query
	return rtq
}

// WithChildRoleTypes tells the query-builder to eager-load the nodes that are connected to
// the "child_role_types" edge. The optional arguments are used to configure the query builder of the edge.
func (rtq *RoleTypeQuery) WithChildRoleTypes(opts ...func(*RoleTypeQuery)) *RoleTypeQuery {
	query := &RoleTypeQuery{config: rtq.config}
	for _, opt := range opts {
		opt(query)
	}
	rtq.withChildRoleTypes = query
	return rtq
}

// WithWorkEffortPartyAssignments tells the query-builder to eager-load the nodes that are connected to
// the "work_effort_party_assignments" edge. The optional arguments are used to configure the query builder of the edge.
func (rtq *RoleTypeQuery) WithWorkEffortPartyAssignments(opts ...func(*WorkEffortPartyAssignmentQuery)) *RoleTypeQuery {
	query := &WorkEffortPartyAssignmentQuery{config: rtq.config}
	for _, opt := range opts {
		opt(query)
	}
	rtq.withWorkEffortPartyAssignments = query
	return rtq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.RoleType.Query().
//		GroupBy(roletype.FieldCreateTime).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (rtq *RoleTypeQuery) GroupBy(field string, fields ...string) *RoleTypeGroupBy {
	group := &RoleTypeGroupBy{config: rtq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := rtq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return rtq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//	}
//
//	client.RoleType.Query().
//		Select(roletype.FieldCreateTime).
//		Scan(ctx, &v)
//
func (rtq *RoleTypeQuery) Select(field string, fields ...string) *RoleTypeSelect {
	rtq.fields = append([]string{field}, fields...)
	return &RoleTypeSelect{RoleTypeQuery: rtq}
}

func (rtq *RoleTypeQuery) prepareQuery(ctx context.Context) error {
	for _, f := range rtq.fields {
		if !roletype.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if rtq.path != nil {
		prev, err := rtq.path(ctx)
		if err != nil {
			return err
		}
		rtq.sql = prev
	}
	return nil
}

func (rtq *RoleTypeQuery) sqlAll(ctx context.Context) ([]*RoleType, error) {
	var (
		nodes       = []*RoleType{}
		withFKs     = rtq.withFKs
		_spec       = rtq.querySpec()
		loadedTypes = [9]bool{
			rtq.withParent != nil,
			rtq.withChildren != nil,
			rtq.withFixedAssets != nil,
			rtq.withPartyContactMeches != nil,
			rtq.withValidFromPartyRelationshipTypes != nil,
			rtq.withValidToPartyRelationshipTypes != nil,
			rtq.withPartyRoles != nil,
			rtq.withChildRoleTypes != nil,
			rtq.withWorkEffortPartyAssignments != nil,
		}
	)
	if rtq.withParent != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, roletype.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &RoleType{config: rtq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, rtq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := rtq.withParent; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*RoleType)
		for i := range nodes {
			if nodes[i].role_type_children == nil {
				continue
			}
			fk := *nodes[i].role_type_children
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(roletype.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "role_type_children" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Parent = n
			}
		}
	}

	if query := rtq.withChildren; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*RoleType)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.Children = []*RoleType{}
		}
		query.withFKs = true
		query.Where(predicate.RoleType(func(s *sql.Selector) {
			s.Where(sql.InValues(roletype.ChildrenColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.role_type_children
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "role_type_children" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "role_type_children" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.Children = append(node.Edges.Children, n)
		}
	}

	if query := rtq.withFixedAssets; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*RoleType)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.FixedAssets = []*FixedAsset{}
		}
		query.withFKs = true
		query.Where(predicate.FixedAsset(func(s *sql.Selector) {
			s.Where(sql.InValues(roletype.FixedAssetsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.role_type_fixed_assets
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "role_type_fixed_assets" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "role_type_fixed_assets" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.FixedAssets = append(node.Edges.FixedAssets, n)
		}
	}

	if query := rtq.withPartyContactMeches; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*RoleType)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.PartyContactMeches = []*PartyContactMech{}
		}
		query.withFKs = true
		query.Where(predicate.PartyContactMech(func(s *sql.Selector) {
			s.Where(sql.InValues(roletype.PartyContactMechesColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.role_type_party_contact_meches
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "role_type_party_contact_meches" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "role_type_party_contact_meches" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.PartyContactMeches = append(node.Edges.PartyContactMeches, n)
		}
	}

	if query := rtq.withValidFromPartyRelationshipTypes; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*RoleType)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.ValidFromPartyRelationshipTypes = []*PartyRelationshipType{}
		}
		query.withFKs = true
		query.Where(predicate.PartyRelationshipType(func(s *sql.Selector) {
			s.Where(sql.InValues(roletype.ValidFromPartyRelationshipTypesColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.role_type_valid_from_party_relationship_types
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "role_type_valid_from_party_relationship_types" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "role_type_valid_from_party_relationship_types" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.ValidFromPartyRelationshipTypes = append(node.Edges.ValidFromPartyRelationshipTypes, n)
		}
	}

	if query := rtq.withValidToPartyRelationshipTypes; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*RoleType)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.ValidToPartyRelationshipTypes = []*PartyRelationshipType{}
		}
		query.withFKs = true
		query.Where(predicate.PartyRelationshipType(func(s *sql.Selector) {
			s.Where(sql.InValues(roletype.ValidToPartyRelationshipTypesColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.role_type_valid_to_party_relationship_types
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "role_type_valid_to_party_relationship_types" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "role_type_valid_to_party_relationship_types" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.ValidToPartyRelationshipTypes = append(node.Edges.ValidToPartyRelationshipTypes, n)
		}
	}

	if query := rtq.withPartyRoles; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*RoleType)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.PartyRoles = []*PartyRole{}
		}
		query.withFKs = true
		query.Where(predicate.PartyRole(func(s *sql.Selector) {
			s.Where(sql.InValues(roletype.PartyRolesColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.role_type_party_roles
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "role_type_party_roles" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "role_type_party_roles" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.PartyRoles = append(node.Edges.PartyRoles, n)
		}
	}

	if query := rtq.withChildRoleTypes; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		ids := make(map[int]*RoleType, len(nodes))
		for _, node := range nodes {
			ids[node.ID] = node
			fks = append(fks, node.ID)
			node.Edges.ChildRoleTypes = []*RoleType{}
		}
		var (
			edgeids []int
			edges   = make(map[int][]*RoleType)
		)
		_spec := &sqlgraph.EdgeQuerySpec{
			Edge: &sqlgraph.EdgeSpec{
				Inverse: false,
				Table:   roletype.ChildRoleTypesTable,
				Columns: roletype.ChildRoleTypesPrimaryKey,
			},
			Predicate: func(s *sql.Selector) {
				s.Where(sql.InValues(roletype.ChildRoleTypesPrimaryKey[0], fks...))
			},
			ScanValues: func() [2]interface{} {
				return [2]interface{}{new(sql.NullInt64), new(sql.NullInt64)}
			},
			Assign: func(out, in interface{}) error {
				eout, ok := out.(*sql.NullInt64)
				if !ok || eout == nil {
					return fmt.Errorf("unexpected id value for edge-out")
				}
				ein, ok := in.(*sql.NullInt64)
				if !ok || ein == nil {
					return fmt.Errorf("unexpected id value for edge-in")
				}
				outValue := int(eout.Int64)
				inValue := int(ein.Int64)
				node, ok := ids[outValue]
				if !ok {
					return fmt.Errorf("unexpected node id in edges: %v", outValue)
				}
				if _, ok := edges[inValue]; !ok {
					edgeids = append(edgeids, inValue)
				}
				edges[inValue] = append(edges[inValue], node)
				return nil
			},
		}
		if err := sqlgraph.QueryEdges(ctx, rtq.driver, _spec); err != nil {
			return nil, fmt.Errorf(`query edges "child_role_types": %w`, err)
		}
		query.Where(roletype.IDIn(edgeids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := edges[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected "child_role_types" node returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.ChildRoleTypes = append(nodes[i].Edges.ChildRoleTypes, n)
			}
		}
	}

	if query := rtq.withWorkEffortPartyAssignments; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*RoleType)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.WorkEffortPartyAssignments = []*WorkEffortPartyAssignment{}
		}
		query.withFKs = true
		query.Where(predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
			s.Where(sql.InValues(roletype.WorkEffortPartyAssignmentsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.role_type_work_effort_party_assignments
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "role_type_work_effort_party_assignments" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "role_type_work_effort_party_assignments" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.WorkEffortPartyAssignments = append(node.Edges.WorkEffortPartyAssignments, n)
		}
	}

	return nodes, nil
}

func (rtq *RoleTypeQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := rtq.querySpec()
	return sqlgraph.CountNodes(ctx, rtq.driver, _spec)
}

func (rtq *RoleTypeQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := rtq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (rtq *RoleTypeQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   roletype.Table,
			Columns: roletype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: roletype.FieldID,
			},
		},
		From:   rtq.sql,
		Unique: true,
	}
	if unique := rtq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := rtq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, roletype.FieldID)
		for i := range fields {
			if fields[i] != roletype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := rtq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := rtq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := rtq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := rtq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (rtq *RoleTypeQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(rtq.driver.Dialect())
	t1 := builder.Table(roletype.Table)
	columns := rtq.fields
	if len(columns) == 0 {
		columns = roletype.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if rtq.sql != nil {
		selector = rtq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	for _, p := range rtq.predicates {
		p(selector)
	}
	for _, p := range rtq.order {
		p(selector)
	}
	if offset := rtq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := rtq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// RoleTypeGroupBy is the group-by builder for RoleType entities.
type RoleTypeGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (rtgb *RoleTypeGroupBy) Aggregate(fns ...AggregateFunc) *RoleTypeGroupBy {
	rtgb.fns = append(rtgb.fns, fns...)
	return rtgb
}

// Scan applies the group-by query and scans the result into the given value.
func (rtgb *RoleTypeGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := rtgb.path(ctx)
	if err != nil {
		return err
	}
	rtgb.sql = query
	return rtgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (rtgb *RoleTypeGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := rtgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (rtgb *RoleTypeGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(rtgb.fields) > 1 {
		return nil, errors.New("ent: RoleTypeGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := rtgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (rtgb *RoleTypeGroupBy) StringsX(ctx context.Context) []string {
	v, err := rtgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (rtgb *RoleTypeGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = rtgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{roletype.Label}
	default:
		err = fmt.Errorf("ent: RoleTypeGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (rtgb *RoleTypeGroupBy) StringX(ctx context.Context) string {
	v, err := rtgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (rtgb *RoleTypeGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(rtgb.fields) > 1 {
		return nil, errors.New("ent: RoleTypeGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := rtgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (rtgb *RoleTypeGroupBy) IntsX(ctx context.Context) []int {
	v, err := rtgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (rtgb *RoleTypeGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = rtgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{roletype.Label}
	default:
		err = fmt.Errorf("ent: RoleTypeGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (rtgb *RoleTypeGroupBy) IntX(ctx context.Context) int {
	v, err := rtgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (rtgb *RoleTypeGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(rtgb.fields) > 1 {
		return nil, errors.New("ent: RoleTypeGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := rtgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (rtgb *RoleTypeGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := rtgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (rtgb *RoleTypeGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = rtgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{roletype.Label}
	default:
		err = fmt.Errorf("ent: RoleTypeGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (rtgb *RoleTypeGroupBy) Float64X(ctx context.Context) float64 {
	v, err := rtgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (rtgb *RoleTypeGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(rtgb.fields) > 1 {
		return nil, errors.New("ent: RoleTypeGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := rtgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (rtgb *RoleTypeGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := rtgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (rtgb *RoleTypeGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = rtgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{roletype.Label}
	default:
		err = fmt.Errorf("ent: RoleTypeGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (rtgb *RoleTypeGroupBy) BoolX(ctx context.Context) bool {
	v, err := rtgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (rtgb *RoleTypeGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range rtgb.fields {
		if !roletype.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := rtgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := rtgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (rtgb *RoleTypeGroupBy) sqlQuery() *sql.Selector {
	selector := rtgb.sql.Select()
	aggregation := make([]string, 0, len(rtgb.fns))
	for _, fn := range rtgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(rtgb.fields)+len(rtgb.fns))
		for _, f := range rtgb.fields {
			columns = append(columns, selector.C(f))
		}
		for _, c := range aggregation {
			columns = append(columns, c)
		}
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(rtgb.fields...)...)
}

// RoleTypeSelect is the builder for selecting fields of RoleType entities.
type RoleTypeSelect struct {
	*RoleTypeQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (rts *RoleTypeSelect) Scan(ctx context.Context, v interface{}) error {
	if err := rts.prepareQuery(ctx); err != nil {
		return err
	}
	rts.sql = rts.RoleTypeQuery.sqlQuery(ctx)
	return rts.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (rts *RoleTypeSelect) ScanX(ctx context.Context, v interface{}) {
	if err := rts.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (rts *RoleTypeSelect) Strings(ctx context.Context) ([]string, error) {
	if len(rts.fields) > 1 {
		return nil, errors.New("ent: RoleTypeSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := rts.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (rts *RoleTypeSelect) StringsX(ctx context.Context) []string {
	v, err := rts.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (rts *RoleTypeSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = rts.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{roletype.Label}
	default:
		err = fmt.Errorf("ent: RoleTypeSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (rts *RoleTypeSelect) StringX(ctx context.Context) string {
	v, err := rts.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (rts *RoleTypeSelect) Ints(ctx context.Context) ([]int, error) {
	if len(rts.fields) > 1 {
		return nil, errors.New("ent: RoleTypeSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := rts.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (rts *RoleTypeSelect) IntsX(ctx context.Context) []int {
	v, err := rts.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (rts *RoleTypeSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = rts.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{roletype.Label}
	default:
		err = fmt.Errorf("ent: RoleTypeSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (rts *RoleTypeSelect) IntX(ctx context.Context) int {
	v, err := rts.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (rts *RoleTypeSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(rts.fields) > 1 {
		return nil, errors.New("ent: RoleTypeSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := rts.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (rts *RoleTypeSelect) Float64sX(ctx context.Context) []float64 {
	v, err := rts.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (rts *RoleTypeSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = rts.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{roletype.Label}
	default:
		err = fmt.Errorf("ent: RoleTypeSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (rts *RoleTypeSelect) Float64X(ctx context.Context) float64 {
	v, err := rts.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (rts *RoleTypeSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(rts.fields) > 1 {
		return nil, errors.New("ent: RoleTypeSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := rts.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (rts *RoleTypeSelect) BoolsX(ctx context.Context) []bool {
	v, err := rts.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (rts *RoleTypeSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = rts.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{roletype.Label}
	default:
		err = fmt.Errorf("ent: RoleTypeSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (rts *RoleTypeSelect) BoolX(ctx context.Context) bool {
	v, err := rts.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (rts *RoleTypeSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := rts.sql.Query()
	if err := rts.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
