// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/fixedasset"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/partycontactmech"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/partyrelationshiptype"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/partyrole"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/predicate"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/roletype"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/workeffortpartyassignment"
)

// RoleTypeUpdate is the builder for updating RoleType entities.
type RoleTypeUpdate struct {
	config
	hooks    []Hook
	mutation *RoleTypeMutation
}

// Where adds a new predicate for the RoleTypeUpdate builder.
func (rtu *RoleTypeUpdate) Where(ps ...predicate.RoleType) *RoleTypeUpdate {
	rtu.mutation.predicates = append(rtu.mutation.predicates, ps...)
	return rtu
}

// SetStringRef sets the "string_ref" field.
func (rtu *RoleTypeUpdate) SetStringRef(s string) *RoleTypeUpdate {
	rtu.mutation.SetStringRef(s)
	return rtu
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (rtu *RoleTypeUpdate) SetNillableStringRef(s *string) *RoleTypeUpdate {
	if s != nil {
		rtu.SetStringRef(*s)
	}
	return rtu
}

// ClearStringRef clears the value of the "string_ref" field.
func (rtu *RoleTypeUpdate) ClearStringRef() *RoleTypeUpdate {
	rtu.mutation.ClearStringRef()
	return rtu
}

// SetHasTable sets the "has_table" field.
func (rtu *RoleTypeUpdate) SetHasTable(rt roletype.HasTable) *RoleTypeUpdate {
	rtu.mutation.SetHasTable(rt)
	return rtu
}

// SetNillableHasTable sets the "has_table" field if the given value is not nil.
func (rtu *RoleTypeUpdate) SetNillableHasTable(rt *roletype.HasTable) *RoleTypeUpdate {
	if rt != nil {
		rtu.SetHasTable(*rt)
	}
	return rtu
}

// ClearHasTable clears the value of the "has_table" field.
func (rtu *RoleTypeUpdate) ClearHasTable() *RoleTypeUpdate {
	rtu.mutation.ClearHasTable()
	return rtu
}

// SetDescription sets the "description" field.
func (rtu *RoleTypeUpdate) SetDescription(s string) *RoleTypeUpdate {
	rtu.mutation.SetDescription(s)
	return rtu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (rtu *RoleTypeUpdate) SetNillableDescription(s *string) *RoleTypeUpdate {
	if s != nil {
		rtu.SetDescription(*s)
	}
	return rtu
}

// ClearDescription clears the value of the "description" field.
func (rtu *RoleTypeUpdate) ClearDescription() *RoleTypeUpdate {
	rtu.mutation.ClearDescription()
	return rtu
}

// SetParentID sets the "parent" edge to the RoleType entity by ID.
func (rtu *RoleTypeUpdate) SetParentID(id int) *RoleTypeUpdate {
	rtu.mutation.SetParentID(id)
	return rtu
}

// SetNillableParentID sets the "parent" edge to the RoleType entity by ID if the given value is not nil.
func (rtu *RoleTypeUpdate) SetNillableParentID(id *int) *RoleTypeUpdate {
	if id != nil {
		rtu = rtu.SetParentID(*id)
	}
	return rtu
}

// SetParent sets the "parent" edge to the RoleType entity.
func (rtu *RoleTypeUpdate) SetParent(r *RoleType) *RoleTypeUpdate {
	return rtu.SetParentID(r.ID)
}

// AddChildIDs adds the "children" edge to the RoleType entity by IDs.
func (rtu *RoleTypeUpdate) AddChildIDs(ids ...int) *RoleTypeUpdate {
	rtu.mutation.AddChildIDs(ids...)
	return rtu
}

// AddChildren adds the "children" edges to the RoleType entity.
func (rtu *RoleTypeUpdate) AddChildren(r ...*RoleType) *RoleTypeUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rtu.AddChildIDs(ids...)
}

// AddFixedAssetIDs adds the "fixed_assets" edge to the FixedAsset entity by IDs.
func (rtu *RoleTypeUpdate) AddFixedAssetIDs(ids ...int) *RoleTypeUpdate {
	rtu.mutation.AddFixedAssetIDs(ids...)
	return rtu
}

// AddFixedAssets adds the "fixed_assets" edges to the FixedAsset entity.
func (rtu *RoleTypeUpdate) AddFixedAssets(f ...*FixedAsset) *RoleTypeUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return rtu.AddFixedAssetIDs(ids...)
}

// AddPartyContactMechIDs adds the "party_contact_meches" edge to the PartyContactMech entity by IDs.
func (rtu *RoleTypeUpdate) AddPartyContactMechIDs(ids ...int) *RoleTypeUpdate {
	rtu.mutation.AddPartyContactMechIDs(ids...)
	return rtu
}

// AddPartyContactMeches adds the "party_contact_meches" edges to the PartyContactMech entity.
func (rtu *RoleTypeUpdate) AddPartyContactMeches(p ...*PartyContactMech) *RoleTypeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return rtu.AddPartyContactMechIDs(ids...)
}

// AddValidFromPartyRelationshipTypeIDs adds the "valid_from_party_relationship_types" edge to the PartyRelationshipType entity by IDs.
func (rtu *RoleTypeUpdate) AddValidFromPartyRelationshipTypeIDs(ids ...int) *RoleTypeUpdate {
	rtu.mutation.AddValidFromPartyRelationshipTypeIDs(ids...)
	return rtu
}

// AddValidFromPartyRelationshipTypes adds the "valid_from_party_relationship_types" edges to the PartyRelationshipType entity.
func (rtu *RoleTypeUpdate) AddValidFromPartyRelationshipTypes(p ...*PartyRelationshipType) *RoleTypeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return rtu.AddValidFromPartyRelationshipTypeIDs(ids...)
}

// AddValidToPartyRelationshipTypeIDs adds the "valid_to_party_relationship_types" edge to the PartyRelationshipType entity by IDs.
func (rtu *RoleTypeUpdate) AddValidToPartyRelationshipTypeIDs(ids ...int) *RoleTypeUpdate {
	rtu.mutation.AddValidToPartyRelationshipTypeIDs(ids...)
	return rtu
}

// AddValidToPartyRelationshipTypes adds the "valid_to_party_relationship_types" edges to the PartyRelationshipType entity.
func (rtu *RoleTypeUpdate) AddValidToPartyRelationshipTypes(p ...*PartyRelationshipType) *RoleTypeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return rtu.AddValidToPartyRelationshipTypeIDs(ids...)
}

// AddPartyRoleIDs adds the "party_roles" edge to the PartyRole entity by IDs.
func (rtu *RoleTypeUpdate) AddPartyRoleIDs(ids ...int) *RoleTypeUpdate {
	rtu.mutation.AddPartyRoleIDs(ids...)
	return rtu
}

// AddPartyRoles adds the "party_roles" edges to the PartyRole entity.
func (rtu *RoleTypeUpdate) AddPartyRoles(p ...*PartyRole) *RoleTypeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return rtu.AddPartyRoleIDs(ids...)
}

// AddChildRoleTypeIDs adds the "child_role_types" edge to the RoleType entity by IDs.
func (rtu *RoleTypeUpdate) AddChildRoleTypeIDs(ids ...int) *RoleTypeUpdate {
	rtu.mutation.AddChildRoleTypeIDs(ids...)
	return rtu
}

// AddChildRoleTypes adds the "child_role_types" edges to the RoleType entity.
func (rtu *RoleTypeUpdate) AddChildRoleTypes(r ...*RoleType) *RoleTypeUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rtu.AddChildRoleTypeIDs(ids...)
}

// AddWorkEffortPartyAssignmentIDs adds the "work_effort_party_assignments" edge to the WorkEffortPartyAssignment entity by IDs.
func (rtu *RoleTypeUpdate) AddWorkEffortPartyAssignmentIDs(ids ...int) *RoleTypeUpdate {
	rtu.mutation.AddWorkEffortPartyAssignmentIDs(ids...)
	return rtu
}

// AddWorkEffortPartyAssignments adds the "work_effort_party_assignments" edges to the WorkEffortPartyAssignment entity.
func (rtu *RoleTypeUpdate) AddWorkEffortPartyAssignments(w ...*WorkEffortPartyAssignment) *RoleTypeUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return rtu.AddWorkEffortPartyAssignmentIDs(ids...)
}

// Mutation returns the RoleTypeMutation object of the builder.
func (rtu *RoleTypeUpdate) Mutation() *RoleTypeMutation {
	return rtu.mutation
}

// ClearParent clears the "parent" edge to the RoleType entity.
func (rtu *RoleTypeUpdate) ClearParent() *RoleTypeUpdate {
	rtu.mutation.ClearParent()
	return rtu
}

// ClearChildren clears all "children" edges to the RoleType entity.
func (rtu *RoleTypeUpdate) ClearChildren() *RoleTypeUpdate {
	rtu.mutation.ClearChildren()
	return rtu
}

// RemoveChildIDs removes the "children" edge to RoleType entities by IDs.
func (rtu *RoleTypeUpdate) RemoveChildIDs(ids ...int) *RoleTypeUpdate {
	rtu.mutation.RemoveChildIDs(ids...)
	return rtu
}

// RemoveChildren removes "children" edges to RoleType entities.
func (rtu *RoleTypeUpdate) RemoveChildren(r ...*RoleType) *RoleTypeUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rtu.RemoveChildIDs(ids...)
}

// ClearFixedAssets clears all "fixed_assets" edges to the FixedAsset entity.
func (rtu *RoleTypeUpdate) ClearFixedAssets() *RoleTypeUpdate {
	rtu.mutation.ClearFixedAssets()
	return rtu
}

// RemoveFixedAssetIDs removes the "fixed_assets" edge to FixedAsset entities by IDs.
func (rtu *RoleTypeUpdate) RemoveFixedAssetIDs(ids ...int) *RoleTypeUpdate {
	rtu.mutation.RemoveFixedAssetIDs(ids...)
	return rtu
}

// RemoveFixedAssets removes "fixed_assets" edges to FixedAsset entities.
func (rtu *RoleTypeUpdate) RemoveFixedAssets(f ...*FixedAsset) *RoleTypeUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return rtu.RemoveFixedAssetIDs(ids...)
}

// ClearPartyContactMeches clears all "party_contact_meches" edges to the PartyContactMech entity.
func (rtu *RoleTypeUpdate) ClearPartyContactMeches() *RoleTypeUpdate {
	rtu.mutation.ClearPartyContactMeches()
	return rtu
}

// RemovePartyContactMechIDs removes the "party_contact_meches" edge to PartyContactMech entities by IDs.
func (rtu *RoleTypeUpdate) RemovePartyContactMechIDs(ids ...int) *RoleTypeUpdate {
	rtu.mutation.RemovePartyContactMechIDs(ids...)
	return rtu
}

// RemovePartyContactMeches removes "party_contact_meches" edges to PartyContactMech entities.
func (rtu *RoleTypeUpdate) RemovePartyContactMeches(p ...*PartyContactMech) *RoleTypeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return rtu.RemovePartyContactMechIDs(ids...)
}

// ClearValidFromPartyRelationshipTypes clears all "valid_from_party_relationship_types" edges to the PartyRelationshipType entity.
func (rtu *RoleTypeUpdate) ClearValidFromPartyRelationshipTypes() *RoleTypeUpdate {
	rtu.mutation.ClearValidFromPartyRelationshipTypes()
	return rtu
}

// RemoveValidFromPartyRelationshipTypeIDs removes the "valid_from_party_relationship_types" edge to PartyRelationshipType entities by IDs.
func (rtu *RoleTypeUpdate) RemoveValidFromPartyRelationshipTypeIDs(ids ...int) *RoleTypeUpdate {
	rtu.mutation.RemoveValidFromPartyRelationshipTypeIDs(ids...)
	return rtu
}

// RemoveValidFromPartyRelationshipTypes removes "valid_from_party_relationship_types" edges to PartyRelationshipType entities.
func (rtu *RoleTypeUpdate) RemoveValidFromPartyRelationshipTypes(p ...*PartyRelationshipType) *RoleTypeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return rtu.RemoveValidFromPartyRelationshipTypeIDs(ids...)
}

// ClearValidToPartyRelationshipTypes clears all "valid_to_party_relationship_types" edges to the PartyRelationshipType entity.
func (rtu *RoleTypeUpdate) ClearValidToPartyRelationshipTypes() *RoleTypeUpdate {
	rtu.mutation.ClearValidToPartyRelationshipTypes()
	return rtu
}

// RemoveValidToPartyRelationshipTypeIDs removes the "valid_to_party_relationship_types" edge to PartyRelationshipType entities by IDs.
func (rtu *RoleTypeUpdate) RemoveValidToPartyRelationshipTypeIDs(ids ...int) *RoleTypeUpdate {
	rtu.mutation.RemoveValidToPartyRelationshipTypeIDs(ids...)
	return rtu
}

// RemoveValidToPartyRelationshipTypes removes "valid_to_party_relationship_types" edges to PartyRelationshipType entities.
func (rtu *RoleTypeUpdate) RemoveValidToPartyRelationshipTypes(p ...*PartyRelationshipType) *RoleTypeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return rtu.RemoveValidToPartyRelationshipTypeIDs(ids...)
}

// ClearPartyRoles clears all "party_roles" edges to the PartyRole entity.
func (rtu *RoleTypeUpdate) ClearPartyRoles() *RoleTypeUpdate {
	rtu.mutation.ClearPartyRoles()
	return rtu
}

// RemovePartyRoleIDs removes the "party_roles" edge to PartyRole entities by IDs.
func (rtu *RoleTypeUpdate) RemovePartyRoleIDs(ids ...int) *RoleTypeUpdate {
	rtu.mutation.RemovePartyRoleIDs(ids...)
	return rtu
}

// RemovePartyRoles removes "party_roles" edges to PartyRole entities.
func (rtu *RoleTypeUpdate) RemovePartyRoles(p ...*PartyRole) *RoleTypeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return rtu.RemovePartyRoleIDs(ids...)
}

// ClearChildRoleTypes clears all "child_role_types" edges to the RoleType entity.
func (rtu *RoleTypeUpdate) ClearChildRoleTypes() *RoleTypeUpdate {
	rtu.mutation.ClearChildRoleTypes()
	return rtu
}

// RemoveChildRoleTypeIDs removes the "child_role_types" edge to RoleType entities by IDs.
func (rtu *RoleTypeUpdate) RemoveChildRoleTypeIDs(ids ...int) *RoleTypeUpdate {
	rtu.mutation.RemoveChildRoleTypeIDs(ids...)
	return rtu
}

// RemoveChildRoleTypes removes "child_role_types" edges to RoleType entities.
func (rtu *RoleTypeUpdate) RemoveChildRoleTypes(r ...*RoleType) *RoleTypeUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rtu.RemoveChildRoleTypeIDs(ids...)
}

// ClearWorkEffortPartyAssignments clears all "work_effort_party_assignments" edges to the WorkEffortPartyAssignment entity.
func (rtu *RoleTypeUpdate) ClearWorkEffortPartyAssignments() *RoleTypeUpdate {
	rtu.mutation.ClearWorkEffortPartyAssignments()
	return rtu
}

// RemoveWorkEffortPartyAssignmentIDs removes the "work_effort_party_assignments" edge to WorkEffortPartyAssignment entities by IDs.
func (rtu *RoleTypeUpdate) RemoveWorkEffortPartyAssignmentIDs(ids ...int) *RoleTypeUpdate {
	rtu.mutation.RemoveWorkEffortPartyAssignmentIDs(ids...)
	return rtu
}

// RemoveWorkEffortPartyAssignments removes "work_effort_party_assignments" edges to WorkEffortPartyAssignment entities.
func (rtu *RoleTypeUpdate) RemoveWorkEffortPartyAssignments(w ...*WorkEffortPartyAssignment) *RoleTypeUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return rtu.RemoveWorkEffortPartyAssignmentIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rtu *RoleTypeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	rtu.defaults()
	if len(rtu.hooks) == 0 {
		if err = rtu.check(); err != nil {
			return 0, err
		}
		affected, err = rtu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RoleTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rtu.check(); err != nil {
				return 0, err
			}
			rtu.mutation = mutation
			affected, err = rtu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(rtu.hooks) - 1; i >= 0; i-- {
			mut = rtu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rtu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (rtu *RoleTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := rtu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rtu *RoleTypeUpdate) Exec(ctx context.Context) error {
	_, err := rtu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rtu *RoleTypeUpdate) ExecX(ctx context.Context) {
	if err := rtu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rtu *RoleTypeUpdate) defaults() {
	if _, ok := rtu.mutation.UpdateTime(); !ok {
		v := roletype.UpdateDefaultUpdateTime()
		rtu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rtu *RoleTypeUpdate) check() error {
	if v, ok := rtu.mutation.HasTable(); ok {
		if err := roletype.HasTableValidator(v); err != nil {
			return &ValidationError{Name: "has_table", err: fmt.Errorf("ent: validator failed for field \"has_table\": %w", err)}
		}
	}
	return nil
}

func (rtu *RoleTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   roletype.Table,
			Columns: roletype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: roletype.FieldID,
			},
		},
	}
	if ps := rtu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rtu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: roletype.FieldUpdateTime,
		})
	}
	if value, ok := rtu.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: roletype.FieldStringRef,
		})
	}
	if rtu.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: roletype.FieldStringRef,
		})
	}
	if value, ok := rtu.mutation.HasTable(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: roletype.FieldHasTable,
		})
	}
	if rtu.mutation.HasTableCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: roletype.FieldHasTable,
		})
	}
	if value, ok := rtu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: roletype.FieldDescription,
		})
	}
	if rtu.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: roletype.FieldDescription,
		})
	}
	if rtu.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   roletype.ParentTable,
			Columns: []string{roletype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: roletype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rtu.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   roletype.ParentTable,
			Columns: []string{roletype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: roletype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rtu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   roletype.ChildrenTable,
			Columns: []string{roletype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: roletype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rtu.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !rtu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   roletype.ChildrenTable,
			Columns: []string{roletype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: roletype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rtu.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   roletype.ChildrenTable,
			Columns: []string{roletype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: roletype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rtu.mutation.FixedAssetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   roletype.FixedAssetsTable,
			Columns: []string{roletype.FixedAssetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: fixedasset.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rtu.mutation.RemovedFixedAssetsIDs(); len(nodes) > 0 && !rtu.mutation.FixedAssetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   roletype.FixedAssetsTable,
			Columns: []string{roletype.FixedAssetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: fixedasset.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rtu.mutation.FixedAssetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   roletype.FixedAssetsTable,
			Columns: []string{roletype.FixedAssetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: fixedasset.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rtu.mutation.PartyContactMechesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   roletype.PartyContactMechesTable,
			Columns: []string{roletype.PartyContactMechesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partycontactmech.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rtu.mutation.RemovedPartyContactMechesIDs(); len(nodes) > 0 && !rtu.mutation.PartyContactMechesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   roletype.PartyContactMechesTable,
			Columns: []string{roletype.PartyContactMechesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partycontactmech.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rtu.mutation.PartyContactMechesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   roletype.PartyContactMechesTable,
			Columns: []string{roletype.PartyContactMechesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partycontactmech.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rtu.mutation.ValidFromPartyRelationshipTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   roletype.ValidFromPartyRelationshipTypesTable,
			Columns: []string{roletype.ValidFromPartyRelationshipTypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partyrelationshiptype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rtu.mutation.RemovedValidFromPartyRelationshipTypesIDs(); len(nodes) > 0 && !rtu.mutation.ValidFromPartyRelationshipTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   roletype.ValidFromPartyRelationshipTypesTable,
			Columns: []string{roletype.ValidFromPartyRelationshipTypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partyrelationshiptype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rtu.mutation.ValidFromPartyRelationshipTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   roletype.ValidFromPartyRelationshipTypesTable,
			Columns: []string{roletype.ValidFromPartyRelationshipTypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partyrelationshiptype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rtu.mutation.ValidToPartyRelationshipTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   roletype.ValidToPartyRelationshipTypesTable,
			Columns: []string{roletype.ValidToPartyRelationshipTypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partyrelationshiptype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rtu.mutation.RemovedValidToPartyRelationshipTypesIDs(); len(nodes) > 0 && !rtu.mutation.ValidToPartyRelationshipTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   roletype.ValidToPartyRelationshipTypesTable,
			Columns: []string{roletype.ValidToPartyRelationshipTypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partyrelationshiptype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rtu.mutation.ValidToPartyRelationshipTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   roletype.ValidToPartyRelationshipTypesTable,
			Columns: []string{roletype.ValidToPartyRelationshipTypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partyrelationshiptype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rtu.mutation.PartyRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   roletype.PartyRolesTable,
			Columns: []string{roletype.PartyRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partyrole.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rtu.mutation.RemovedPartyRolesIDs(); len(nodes) > 0 && !rtu.mutation.PartyRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   roletype.PartyRolesTable,
			Columns: []string{roletype.PartyRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partyrole.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rtu.mutation.PartyRolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   roletype.PartyRolesTable,
			Columns: []string{roletype.PartyRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partyrole.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rtu.mutation.ChildRoleTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   roletype.ChildRoleTypesTable,
			Columns: roletype.ChildRoleTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: roletype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rtu.mutation.RemovedChildRoleTypesIDs(); len(nodes) > 0 && !rtu.mutation.ChildRoleTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   roletype.ChildRoleTypesTable,
			Columns: roletype.ChildRoleTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: roletype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rtu.mutation.ChildRoleTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   roletype.ChildRoleTypesTable,
			Columns: roletype.ChildRoleTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: roletype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rtu.mutation.WorkEffortPartyAssignmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   roletype.WorkEffortPartyAssignmentsTable,
			Columns: []string{roletype.WorkEffortPartyAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffortpartyassignment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rtu.mutation.RemovedWorkEffortPartyAssignmentsIDs(); len(nodes) > 0 && !rtu.mutation.WorkEffortPartyAssignmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   roletype.WorkEffortPartyAssignmentsTable,
			Columns: []string{roletype.WorkEffortPartyAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffortpartyassignment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rtu.mutation.WorkEffortPartyAssignmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   roletype.WorkEffortPartyAssignmentsTable,
			Columns: []string{roletype.WorkEffortPartyAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffortpartyassignment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rtu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{roletype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// RoleTypeUpdateOne is the builder for updating a single RoleType entity.
type RoleTypeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RoleTypeMutation
}

// SetStringRef sets the "string_ref" field.
func (rtuo *RoleTypeUpdateOne) SetStringRef(s string) *RoleTypeUpdateOne {
	rtuo.mutation.SetStringRef(s)
	return rtuo
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (rtuo *RoleTypeUpdateOne) SetNillableStringRef(s *string) *RoleTypeUpdateOne {
	if s != nil {
		rtuo.SetStringRef(*s)
	}
	return rtuo
}

// ClearStringRef clears the value of the "string_ref" field.
func (rtuo *RoleTypeUpdateOne) ClearStringRef() *RoleTypeUpdateOne {
	rtuo.mutation.ClearStringRef()
	return rtuo
}

// SetHasTable sets the "has_table" field.
func (rtuo *RoleTypeUpdateOne) SetHasTable(rt roletype.HasTable) *RoleTypeUpdateOne {
	rtuo.mutation.SetHasTable(rt)
	return rtuo
}

// SetNillableHasTable sets the "has_table" field if the given value is not nil.
func (rtuo *RoleTypeUpdateOne) SetNillableHasTable(rt *roletype.HasTable) *RoleTypeUpdateOne {
	if rt != nil {
		rtuo.SetHasTable(*rt)
	}
	return rtuo
}

// ClearHasTable clears the value of the "has_table" field.
func (rtuo *RoleTypeUpdateOne) ClearHasTable() *RoleTypeUpdateOne {
	rtuo.mutation.ClearHasTable()
	return rtuo
}

// SetDescription sets the "description" field.
func (rtuo *RoleTypeUpdateOne) SetDescription(s string) *RoleTypeUpdateOne {
	rtuo.mutation.SetDescription(s)
	return rtuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (rtuo *RoleTypeUpdateOne) SetNillableDescription(s *string) *RoleTypeUpdateOne {
	if s != nil {
		rtuo.SetDescription(*s)
	}
	return rtuo
}

// ClearDescription clears the value of the "description" field.
func (rtuo *RoleTypeUpdateOne) ClearDescription() *RoleTypeUpdateOne {
	rtuo.mutation.ClearDescription()
	return rtuo
}

// SetParentID sets the "parent" edge to the RoleType entity by ID.
func (rtuo *RoleTypeUpdateOne) SetParentID(id int) *RoleTypeUpdateOne {
	rtuo.mutation.SetParentID(id)
	return rtuo
}

// SetNillableParentID sets the "parent" edge to the RoleType entity by ID if the given value is not nil.
func (rtuo *RoleTypeUpdateOne) SetNillableParentID(id *int) *RoleTypeUpdateOne {
	if id != nil {
		rtuo = rtuo.SetParentID(*id)
	}
	return rtuo
}

// SetParent sets the "parent" edge to the RoleType entity.
func (rtuo *RoleTypeUpdateOne) SetParent(r *RoleType) *RoleTypeUpdateOne {
	return rtuo.SetParentID(r.ID)
}

// AddChildIDs adds the "children" edge to the RoleType entity by IDs.
func (rtuo *RoleTypeUpdateOne) AddChildIDs(ids ...int) *RoleTypeUpdateOne {
	rtuo.mutation.AddChildIDs(ids...)
	return rtuo
}

// AddChildren adds the "children" edges to the RoleType entity.
func (rtuo *RoleTypeUpdateOne) AddChildren(r ...*RoleType) *RoleTypeUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rtuo.AddChildIDs(ids...)
}

// AddFixedAssetIDs adds the "fixed_assets" edge to the FixedAsset entity by IDs.
func (rtuo *RoleTypeUpdateOne) AddFixedAssetIDs(ids ...int) *RoleTypeUpdateOne {
	rtuo.mutation.AddFixedAssetIDs(ids...)
	return rtuo
}

// AddFixedAssets adds the "fixed_assets" edges to the FixedAsset entity.
func (rtuo *RoleTypeUpdateOne) AddFixedAssets(f ...*FixedAsset) *RoleTypeUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return rtuo.AddFixedAssetIDs(ids...)
}

// AddPartyContactMechIDs adds the "party_contact_meches" edge to the PartyContactMech entity by IDs.
func (rtuo *RoleTypeUpdateOne) AddPartyContactMechIDs(ids ...int) *RoleTypeUpdateOne {
	rtuo.mutation.AddPartyContactMechIDs(ids...)
	return rtuo
}

// AddPartyContactMeches adds the "party_contact_meches" edges to the PartyContactMech entity.
func (rtuo *RoleTypeUpdateOne) AddPartyContactMeches(p ...*PartyContactMech) *RoleTypeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return rtuo.AddPartyContactMechIDs(ids...)
}

// AddValidFromPartyRelationshipTypeIDs adds the "valid_from_party_relationship_types" edge to the PartyRelationshipType entity by IDs.
func (rtuo *RoleTypeUpdateOne) AddValidFromPartyRelationshipTypeIDs(ids ...int) *RoleTypeUpdateOne {
	rtuo.mutation.AddValidFromPartyRelationshipTypeIDs(ids...)
	return rtuo
}

// AddValidFromPartyRelationshipTypes adds the "valid_from_party_relationship_types" edges to the PartyRelationshipType entity.
func (rtuo *RoleTypeUpdateOne) AddValidFromPartyRelationshipTypes(p ...*PartyRelationshipType) *RoleTypeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return rtuo.AddValidFromPartyRelationshipTypeIDs(ids...)
}

// AddValidToPartyRelationshipTypeIDs adds the "valid_to_party_relationship_types" edge to the PartyRelationshipType entity by IDs.
func (rtuo *RoleTypeUpdateOne) AddValidToPartyRelationshipTypeIDs(ids ...int) *RoleTypeUpdateOne {
	rtuo.mutation.AddValidToPartyRelationshipTypeIDs(ids...)
	return rtuo
}

// AddValidToPartyRelationshipTypes adds the "valid_to_party_relationship_types" edges to the PartyRelationshipType entity.
func (rtuo *RoleTypeUpdateOne) AddValidToPartyRelationshipTypes(p ...*PartyRelationshipType) *RoleTypeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return rtuo.AddValidToPartyRelationshipTypeIDs(ids...)
}

// AddPartyRoleIDs adds the "party_roles" edge to the PartyRole entity by IDs.
func (rtuo *RoleTypeUpdateOne) AddPartyRoleIDs(ids ...int) *RoleTypeUpdateOne {
	rtuo.mutation.AddPartyRoleIDs(ids...)
	return rtuo
}

// AddPartyRoles adds the "party_roles" edges to the PartyRole entity.
func (rtuo *RoleTypeUpdateOne) AddPartyRoles(p ...*PartyRole) *RoleTypeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return rtuo.AddPartyRoleIDs(ids...)
}

// AddChildRoleTypeIDs adds the "child_role_types" edge to the RoleType entity by IDs.
func (rtuo *RoleTypeUpdateOne) AddChildRoleTypeIDs(ids ...int) *RoleTypeUpdateOne {
	rtuo.mutation.AddChildRoleTypeIDs(ids...)
	return rtuo
}

// AddChildRoleTypes adds the "child_role_types" edges to the RoleType entity.
func (rtuo *RoleTypeUpdateOne) AddChildRoleTypes(r ...*RoleType) *RoleTypeUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rtuo.AddChildRoleTypeIDs(ids...)
}

// AddWorkEffortPartyAssignmentIDs adds the "work_effort_party_assignments" edge to the WorkEffortPartyAssignment entity by IDs.
func (rtuo *RoleTypeUpdateOne) AddWorkEffortPartyAssignmentIDs(ids ...int) *RoleTypeUpdateOne {
	rtuo.mutation.AddWorkEffortPartyAssignmentIDs(ids...)
	return rtuo
}

// AddWorkEffortPartyAssignments adds the "work_effort_party_assignments" edges to the WorkEffortPartyAssignment entity.
func (rtuo *RoleTypeUpdateOne) AddWorkEffortPartyAssignments(w ...*WorkEffortPartyAssignment) *RoleTypeUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return rtuo.AddWorkEffortPartyAssignmentIDs(ids...)
}

// Mutation returns the RoleTypeMutation object of the builder.
func (rtuo *RoleTypeUpdateOne) Mutation() *RoleTypeMutation {
	return rtuo.mutation
}

// ClearParent clears the "parent" edge to the RoleType entity.
func (rtuo *RoleTypeUpdateOne) ClearParent() *RoleTypeUpdateOne {
	rtuo.mutation.ClearParent()
	return rtuo
}

// ClearChildren clears all "children" edges to the RoleType entity.
func (rtuo *RoleTypeUpdateOne) ClearChildren() *RoleTypeUpdateOne {
	rtuo.mutation.ClearChildren()
	return rtuo
}

// RemoveChildIDs removes the "children" edge to RoleType entities by IDs.
func (rtuo *RoleTypeUpdateOne) RemoveChildIDs(ids ...int) *RoleTypeUpdateOne {
	rtuo.mutation.RemoveChildIDs(ids...)
	return rtuo
}

// RemoveChildren removes "children" edges to RoleType entities.
func (rtuo *RoleTypeUpdateOne) RemoveChildren(r ...*RoleType) *RoleTypeUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rtuo.RemoveChildIDs(ids...)
}

// ClearFixedAssets clears all "fixed_assets" edges to the FixedAsset entity.
func (rtuo *RoleTypeUpdateOne) ClearFixedAssets() *RoleTypeUpdateOne {
	rtuo.mutation.ClearFixedAssets()
	return rtuo
}

// RemoveFixedAssetIDs removes the "fixed_assets" edge to FixedAsset entities by IDs.
func (rtuo *RoleTypeUpdateOne) RemoveFixedAssetIDs(ids ...int) *RoleTypeUpdateOne {
	rtuo.mutation.RemoveFixedAssetIDs(ids...)
	return rtuo
}

// RemoveFixedAssets removes "fixed_assets" edges to FixedAsset entities.
func (rtuo *RoleTypeUpdateOne) RemoveFixedAssets(f ...*FixedAsset) *RoleTypeUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return rtuo.RemoveFixedAssetIDs(ids...)
}

// ClearPartyContactMeches clears all "party_contact_meches" edges to the PartyContactMech entity.
func (rtuo *RoleTypeUpdateOne) ClearPartyContactMeches() *RoleTypeUpdateOne {
	rtuo.mutation.ClearPartyContactMeches()
	return rtuo
}

// RemovePartyContactMechIDs removes the "party_contact_meches" edge to PartyContactMech entities by IDs.
func (rtuo *RoleTypeUpdateOne) RemovePartyContactMechIDs(ids ...int) *RoleTypeUpdateOne {
	rtuo.mutation.RemovePartyContactMechIDs(ids...)
	return rtuo
}

// RemovePartyContactMeches removes "party_contact_meches" edges to PartyContactMech entities.
func (rtuo *RoleTypeUpdateOne) RemovePartyContactMeches(p ...*PartyContactMech) *RoleTypeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return rtuo.RemovePartyContactMechIDs(ids...)
}

// ClearValidFromPartyRelationshipTypes clears all "valid_from_party_relationship_types" edges to the PartyRelationshipType entity.
func (rtuo *RoleTypeUpdateOne) ClearValidFromPartyRelationshipTypes() *RoleTypeUpdateOne {
	rtuo.mutation.ClearValidFromPartyRelationshipTypes()
	return rtuo
}

// RemoveValidFromPartyRelationshipTypeIDs removes the "valid_from_party_relationship_types" edge to PartyRelationshipType entities by IDs.
func (rtuo *RoleTypeUpdateOne) RemoveValidFromPartyRelationshipTypeIDs(ids ...int) *RoleTypeUpdateOne {
	rtuo.mutation.RemoveValidFromPartyRelationshipTypeIDs(ids...)
	return rtuo
}

// RemoveValidFromPartyRelationshipTypes removes "valid_from_party_relationship_types" edges to PartyRelationshipType entities.
func (rtuo *RoleTypeUpdateOne) RemoveValidFromPartyRelationshipTypes(p ...*PartyRelationshipType) *RoleTypeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return rtuo.RemoveValidFromPartyRelationshipTypeIDs(ids...)
}

// ClearValidToPartyRelationshipTypes clears all "valid_to_party_relationship_types" edges to the PartyRelationshipType entity.
func (rtuo *RoleTypeUpdateOne) ClearValidToPartyRelationshipTypes() *RoleTypeUpdateOne {
	rtuo.mutation.ClearValidToPartyRelationshipTypes()
	return rtuo
}

// RemoveValidToPartyRelationshipTypeIDs removes the "valid_to_party_relationship_types" edge to PartyRelationshipType entities by IDs.
func (rtuo *RoleTypeUpdateOne) RemoveValidToPartyRelationshipTypeIDs(ids ...int) *RoleTypeUpdateOne {
	rtuo.mutation.RemoveValidToPartyRelationshipTypeIDs(ids...)
	return rtuo
}

// RemoveValidToPartyRelationshipTypes removes "valid_to_party_relationship_types" edges to PartyRelationshipType entities.
func (rtuo *RoleTypeUpdateOne) RemoveValidToPartyRelationshipTypes(p ...*PartyRelationshipType) *RoleTypeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return rtuo.RemoveValidToPartyRelationshipTypeIDs(ids...)
}

// ClearPartyRoles clears all "party_roles" edges to the PartyRole entity.
func (rtuo *RoleTypeUpdateOne) ClearPartyRoles() *RoleTypeUpdateOne {
	rtuo.mutation.ClearPartyRoles()
	return rtuo
}

// RemovePartyRoleIDs removes the "party_roles" edge to PartyRole entities by IDs.
func (rtuo *RoleTypeUpdateOne) RemovePartyRoleIDs(ids ...int) *RoleTypeUpdateOne {
	rtuo.mutation.RemovePartyRoleIDs(ids...)
	return rtuo
}

// RemovePartyRoles removes "party_roles" edges to PartyRole entities.
func (rtuo *RoleTypeUpdateOne) RemovePartyRoles(p ...*PartyRole) *RoleTypeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return rtuo.RemovePartyRoleIDs(ids...)
}

// ClearChildRoleTypes clears all "child_role_types" edges to the RoleType entity.
func (rtuo *RoleTypeUpdateOne) ClearChildRoleTypes() *RoleTypeUpdateOne {
	rtuo.mutation.ClearChildRoleTypes()
	return rtuo
}

// RemoveChildRoleTypeIDs removes the "child_role_types" edge to RoleType entities by IDs.
func (rtuo *RoleTypeUpdateOne) RemoveChildRoleTypeIDs(ids ...int) *RoleTypeUpdateOne {
	rtuo.mutation.RemoveChildRoleTypeIDs(ids...)
	return rtuo
}

// RemoveChildRoleTypes removes "child_role_types" edges to RoleType entities.
func (rtuo *RoleTypeUpdateOne) RemoveChildRoleTypes(r ...*RoleType) *RoleTypeUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rtuo.RemoveChildRoleTypeIDs(ids...)
}

// ClearWorkEffortPartyAssignments clears all "work_effort_party_assignments" edges to the WorkEffortPartyAssignment entity.
func (rtuo *RoleTypeUpdateOne) ClearWorkEffortPartyAssignments() *RoleTypeUpdateOne {
	rtuo.mutation.ClearWorkEffortPartyAssignments()
	return rtuo
}

// RemoveWorkEffortPartyAssignmentIDs removes the "work_effort_party_assignments" edge to WorkEffortPartyAssignment entities by IDs.
func (rtuo *RoleTypeUpdateOne) RemoveWorkEffortPartyAssignmentIDs(ids ...int) *RoleTypeUpdateOne {
	rtuo.mutation.RemoveWorkEffortPartyAssignmentIDs(ids...)
	return rtuo
}

// RemoveWorkEffortPartyAssignments removes "work_effort_party_assignments" edges to WorkEffortPartyAssignment entities.
func (rtuo *RoleTypeUpdateOne) RemoveWorkEffortPartyAssignments(w ...*WorkEffortPartyAssignment) *RoleTypeUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return rtuo.RemoveWorkEffortPartyAssignmentIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rtuo *RoleTypeUpdateOne) Select(field string, fields ...string) *RoleTypeUpdateOne {
	rtuo.fields = append([]string{field}, fields...)
	return rtuo
}

// Save executes the query and returns the updated RoleType entity.
func (rtuo *RoleTypeUpdateOne) Save(ctx context.Context) (*RoleType, error) {
	var (
		err  error
		node *RoleType
	)
	rtuo.defaults()
	if len(rtuo.hooks) == 0 {
		if err = rtuo.check(); err != nil {
			return nil, err
		}
		node, err = rtuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RoleTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rtuo.check(); err != nil {
				return nil, err
			}
			rtuo.mutation = mutation
			node, err = rtuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(rtuo.hooks) - 1; i >= 0; i-- {
			mut = rtuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rtuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (rtuo *RoleTypeUpdateOne) SaveX(ctx context.Context) *RoleType {
	node, err := rtuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rtuo *RoleTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := rtuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rtuo *RoleTypeUpdateOne) ExecX(ctx context.Context) {
	if err := rtuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rtuo *RoleTypeUpdateOne) defaults() {
	if _, ok := rtuo.mutation.UpdateTime(); !ok {
		v := roletype.UpdateDefaultUpdateTime()
		rtuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rtuo *RoleTypeUpdateOne) check() error {
	if v, ok := rtuo.mutation.HasTable(); ok {
		if err := roletype.HasTableValidator(v); err != nil {
			return &ValidationError{Name: "has_table", err: fmt.Errorf("ent: validator failed for field \"has_table\": %w", err)}
		}
	}
	return nil
}

func (rtuo *RoleTypeUpdateOne) sqlSave(ctx context.Context) (_node *RoleType, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   roletype.Table,
			Columns: roletype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: roletype.FieldID,
			},
		},
	}
	id, ok := rtuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing RoleType.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := rtuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, roletype.FieldID)
		for _, f := range fields {
			if !roletype.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != roletype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rtuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rtuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: roletype.FieldUpdateTime,
		})
	}
	if value, ok := rtuo.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: roletype.FieldStringRef,
		})
	}
	if rtuo.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: roletype.FieldStringRef,
		})
	}
	if value, ok := rtuo.mutation.HasTable(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: roletype.FieldHasTable,
		})
	}
	if rtuo.mutation.HasTableCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: roletype.FieldHasTable,
		})
	}
	if value, ok := rtuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: roletype.FieldDescription,
		})
	}
	if rtuo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: roletype.FieldDescription,
		})
	}
	if rtuo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   roletype.ParentTable,
			Columns: []string{roletype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: roletype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rtuo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   roletype.ParentTable,
			Columns: []string{roletype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: roletype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rtuo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   roletype.ChildrenTable,
			Columns: []string{roletype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: roletype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rtuo.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !rtuo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   roletype.ChildrenTable,
			Columns: []string{roletype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: roletype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rtuo.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   roletype.ChildrenTable,
			Columns: []string{roletype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: roletype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rtuo.mutation.FixedAssetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   roletype.FixedAssetsTable,
			Columns: []string{roletype.FixedAssetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: fixedasset.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rtuo.mutation.RemovedFixedAssetsIDs(); len(nodes) > 0 && !rtuo.mutation.FixedAssetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   roletype.FixedAssetsTable,
			Columns: []string{roletype.FixedAssetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: fixedasset.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rtuo.mutation.FixedAssetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   roletype.FixedAssetsTable,
			Columns: []string{roletype.FixedAssetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: fixedasset.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rtuo.mutation.PartyContactMechesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   roletype.PartyContactMechesTable,
			Columns: []string{roletype.PartyContactMechesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partycontactmech.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rtuo.mutation.RemovedPartyContactMechesIDs(); len(nodes) > 0 && !rtuo.mutation.PartyContactMechesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   roletype.PartyContactMechesTable,
			Columns: []string{roletype.PartyContactMechesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partycontactmech.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rtuo.mutation.PartyContactMechesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   roletype.PartyContactMechesTable,
			Columns: []string{roletype.PartyContactMechesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partycontactmech.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rtuo.mutation.ValidFromPartyRelationshipTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   roletype.ValidFromPartyRelationshipTypesTable,
			Columns: []string{roletype.ValidFromPartyRelationshipTypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partyrelationshiptype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rtuo.mutation.RemovedValidFromPartyRelationshipTypesIDs(); len(nodes) > 0 && !rtuo.mutation.ValidFromPartyRelationshipTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   roletype.ValidFromPartyRelationshipTypesTable,
			Columns: []string{roletype.ValidFromPartyRelationshipTypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partyrelationshiptype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rtuo.mutation.ValidFromPartyRelationshipTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   roletype.ValidFromPartyRelationshipTypesTable,
			Columns: []string{roletype.ValidFromPartyRelationshipTypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partyrelationshiptype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rtuo.mutation.ValidToPartyRelationshipTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   roletype.ValidToPartyRelationshipTypesTable,
			Columns: []string{roletype.ValidToPartyRelationshipTypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partyrelationshiptype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rtuo.mutation.RemovedValidToPartyRelationshipTypesIDs(); len(nodes) > 0 && !rtuo.mutation.ValidToPartyRelationshipTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   roletype.ValidToPartyRelationshipTypesTable,
			Columns: []string{roletype.ValidToPartyRelationshipTypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partyrelationshiptype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rtuo.mutation.ValidToPartyRelationshipTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   roletype.ValidToPartyRelationshipTypesTable,
			Columns: []string{roletype.ValidToPartyRelationshipTypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partyrelationshiptype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rtuo.mutation.PartyRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   roletype.PartyRolesTable,
			Columns: []string{roletype.PartyRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partyrole.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rtuo.mutation.RemovedPartyRolesIDs(); len(nodes) > 0 && !rtuo.mutation.PartyRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   roletype.PartyRolesTable,
			Columns: []string{roletype.PartyRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partyrole.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rtuo.mutation.PartyRolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   roletype.PartyRolesTable,
			Columns: []string{roletype.PartyRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partyrole.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rtuo.mutation.ChildRoleTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   roletype.ChildRoleTypesTable,
			Columns: roletype.ChildRoleTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: roletype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rtuo.mutation.RemovedChildRoleTypesIDs(); len(nodes) > 0 && !rtuo.mutation.ChildRoleTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   roletype.ChildRoleTypesTable,
			Columns: roletype.ChildRoleTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: roletype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rtuo.mutation.ChildRoleTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   roletype.ChildRoleTypesTable,
			Columns: roletype.ChildRoleTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: roletype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rtuo.mutation.WorkEffortPartyAssignmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   roletype.WorkEffortPartyAssignmentsTable,
			Columns: []string{roletype.WorkEffortPartyAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffortpartyassignment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rtuo.mutation.RemovedWorkEffortPartyAssignmentsIDs(); len(nodes) > 0 && !rtuo.mutation.WorkEffortPartyAssignmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   roletype.WorkEffortPartyAssignmentsTable,
			Columns: []string{roletype.WorkEffortPartyAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffortpartyassignment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rtuo.mutation.WorkEffortPartyAssignmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   roletype.WorkEffortPartyAssignmentsTable,
			Columns: []string{roletype.WorkEffortPartyAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffortpartyassignment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &RoleType{config: rtuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rtuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{roletype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
