// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/securitygroup"
)

// SecurityGroup is the model entity for the SecurityGroup schema.
type SecurityGroup struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// StringRef holds the value of the "string_ref" field.
	StringRef string `json:"string_ref,omitempty"`
	// GroupName holds the value of the "group_name" field.
	GroupName string `json:"group_name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SecurityGroupQuery when eager-loading is set.
	Edges SecurityGroupEdges `json:"edges"`
}

// SecurityGroupEdges holds the relations/edges for other nodes in the graph.
type SecurityGroupEdges struct {
	// SecurityGroupPermissions holds the value of the security_group_permissions edge.
	SecurityGroupPermissions []*SecurityGroupPermission `json:"security_group_permissions,omitempty"`
	// UserLoginSecurityGroups holds the value of the user_login_security_groups edge.
	UserLoginSecurityGroups []*UserLoginSecurityGroup `json:"user_login_security_groups,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// SecurityGroupPermissionsOrErr returns the SecurityGroupPermissions value or an error if the edge
// was not loaded in eager-loading.
func (e SecurityGroupEdges) SecurityGroupPermissionsOrErr() ([]*SecurityGroupPermission, error) {
	if e.loadedTypes[0] {
		return e.SecurityGroupPermissions, nil
	}
	return nil, &NotLoadedError{edge: "security_group_permissions"}
}

// UserLoginSecurityGroupsOrErr returns the UserLoginSecurityGroups value or an error if the edge
// was not loaded in eager-loading.
func (e SecurityGroupEdges) UserLoginSecurityGroupsOrErr() ([]*UserLoginSecurityGroup, error) {
	if e.loadedTypes[1] {
		return e.UserLoginSecurityGroups, nil
	}
	return nil, &NotLoadedError{edge: "user_login_security_groups"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SecurityGroup) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case securitygroup.FieldID:
			values[i] = new(sql.NullInt64)
		case securitygroup.FieldStringRef, securitygroup.FieldGroupName, securitygroup.FieldDescription:
			values[i] = new(sql.NullString)
		case securitygroup.FieldCreateTime, securitygroup.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type SecurityGroup", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SecurityGroup fields.
func (sg *SecurityGroup) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case securitygroup.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sg.ID = int(value.Int64)
		case securitygroup.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				sg.CreateTime = value.Time
			}
		case securitygroup.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				sg.UpdateTime = value.Time
			}
		case securitygroup.FieldStringRef:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field string_ref", values[i])
			} else if value.Valid {
				sg.StringRef = value.String
			}
		case securitygroup.FieldGroupName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field group_name", values[i])
			} else if value.Valid {
				sg.GroupName = value.String
			}
		case securitygroup.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				sg.Description = value.String
			}
		}
	}
	return nil
}

// QuerySecurityGroupPermissions queries the "security_group_permissions" edge of the SecurityGroup entity.
func (sg *SecurityGroup) QuerySecurityGroupPermissions() *SecurityGroupPermissionQuery {
	return (&SecurityGroupClient{config: sg.config}).QuerySecurityGroupPermissions(sg)
}

// QueryUserLoginSecurityGroups queries the "user_login_security_groups" edge of the SecurityGroup entity.
func (sg *SecurityGroup) QueryUserLoginSecurityGroups() *UserLoginSecurityGroupQuery {
	return (&SecurityGroupClient{config: sg.config}).QueryUserLoginSecurityGroups(sg)
}

// Update returns a builder for updating this SecurityGroup.
// Note that you need to call SecurityGroup.Unwrap() before calling this method if this SecurityGroup
// was returned from a transaction, and the transaction was committed or rolled back.
func (sg *SecurityGroup) Update() *SecurityGroupUpdateOne {
	return (&SecurityGroupClient{config: sg.config}).UpdateOne(sg)
}

// Unwrap unwraps the SecurityGroup entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sg *SecurityGroup) Unwrap() *SecurityGroup {
	tx, ok := sg.config.driver.(*txDriver)
	if !ok {
		panic("ent: SecurityGroup is not a transactional entity")
	}
	sg.config.driver = tx.drv
	return sg
}

// String implements the fmt.Stringer.
func (sg *SecurityGroup) String() string {
	var builder strings.Builder
	builder.WriteString("SecurityGroup(")
	builder.WriteString(fmt.Sprintf("id=%v", sg.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(sg.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(sg.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", string_ref=")
	builder.WriteString(sg.StringRef)
	builder.WriteString(", group_name=")
	builder.WriteString(sg.GroupName)
	builder.WriteString(", description=")
	builder.WriteString(sg.Description)
	builder.WriteByte(')')
	return builder.String()
}

// SecurityGroups is a parsable slice of SecurityGroup.
type SecurityGroups []*SecurityGroup

func (sg SecurityGroups) config(cfg config) {
	for _i := range sg {
		sg[_i].config = cfg
	}
}
