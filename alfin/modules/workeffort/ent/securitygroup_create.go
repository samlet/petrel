// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/securitygroup"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/securitygrouppermission"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/userloginsecuritygroup"
)

// SecurityGroupCreate is the builder for creating a SecurityGroup entity.
type SecurityGroupCreate struct {
	config
	mutation *SecurityGroupMutation
	hooks    []Hook
}

// SetGroupName sets the "group_name" field.
func (sgc *SecurityGroupCreate) SetGroupName(s string) *SecurityGroupCreate {
	sgc.mutation.SetGroupName(s)
	return sgc
}

// SetNillableGroupName sets the "group_name" field if the given value is not nil.
func (sgc *SecurityGroupCreate) SetNillableGroupName(s *string) *SecurityGroupCreate {
	if s != nil {
		sgc.SetGroupName(*s)
	}
	return sgc
}

// SetDescription sets the "description" field.
func (sgc *SecurityGroupCreate) SetDescription(s string) *SecurityGroupCreate {
	sgc.mutation.SetDescription(s)
	return sgc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (sgc *SecurityGroupCreate) SetNillableDescription(s *string) *SecurityGroupCreate {
	if s != nil {
		sgc.SetDescription(*s)
	}
	return sgc
}

// AddSecurityGroupPermissionIDs adds the "security_group_permissions" edge to the SecurityGroupPermission entity by IDs.
func (sgc *SecurityGroupCreate) AddSecurityGroupPermissionIDs(ids ...int) *SecurityGroupCreate {
	sgc.mutation.AddSecurityGroupPermissionIDs(ids...)
	return sgc
}

// AddSecurityGroupPermissions adds the "security_group_permissions" edges to the SecurityGroupPermission entity.
func (sgc *SecurityGroupCreate) AddSecurityGroupPermissions(s ...*SecurityGroupPermission) *SecurityGroupCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sgc.AddSecurityGroupPermissionIDs(ids...)
}

// AddUserLoginSecurityGroupIDs adds the "user_login_security_groups" edge to the UserLoginSecurityGroup entity by IDs.
func (sgc *SecurityGroupCreate) AddUserLoginSecurityGroupIDs(ids ...int) *SecurityGroupCreate {
	sgc.mutation.AddUserLoginSecurityGroupIDs(ids...)
	return sgc
}

// AddUserLoginSecurityGroups adds the "user_login_security_groups" edges to the UserLoginSecurityGroup entity.
func (sgc *SecurityGroupCreate) AddUserLoginSecurityGroups(u ...*UserLoginSecurityGroup) *SecurityGroupCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return sgc.AddUserLoginSecurityGroupIDs(ids...)
}

// Mutation returns the SecurityGroupMutation object of the builder.
func (sgc *SecurityGroupCreate) Mutation() *SecurityGroupMutation {
	return sgc.mutation
}

// Save creates the SecurityGroup in the database.
func (sgc *SecurityGroupCreate) Save(ctx context.Context) (*SecurityGroup, error) {
	var (
		err  error
		node *SecurityGroup
	)
	if len(sgc.hooks) == 0 {
		if err = sgc.check(); err != nil {
			return nil, err
		}
		node, err = sgc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SecurityGroupMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sgc.check(); err != nil {
				return nil, err
			}
			sgc.mutation = mutation
			node, err = sgc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(sgc.hooks) - 1; i >= 0; i-- {
			mut = sgc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sgc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sgc *SecurityGroupCreate) SaveX(ctx context.Context) *SecurityGroup {
	v, err := sgc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (sgc *SecurityGroupCreate) check() error {
	return nil
}

func (sgc *SecurityGroupCreate) sqlSave(ctx context.Context) (*SecurityGroup, error) {
	_node, _spec := sgc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sgc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (sgc *SecurityGroupCreate) createSpec() (*SecurityGroup, *sqlgraph.CreateSpec) {
	var (
		_node = &SecurityGroup{config: sgc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: securitygroup.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: securitygroup.FieldID,
			},
		}
	)
	if value, ok := sgc.mutation.GroupName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: securitygroup.FieldGroupName,
		})
		_node.GroupName = value
	}
	if value, ok := sgc.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: securitygroup.FieldDescription,
		})
		_node.Description = value
	}
	if nodes := sgc.mutation.SecurityGroupPermissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   securitygroup.SecurityGroupPermissionsTable,
			Columns: []string{securitygroup.SecurityGroupPermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: securitygrouppermission.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sgc.mutation.UserLoginSecurityGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   securitygroup.UserLoginSecurityGroupsTable,
			Columns: []string{securitygroup.UserLoginSecurityGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: userloginsecuritygroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SecurityGroupCreateBulk is the builder for creating many SecurityGroup entities in bulk.
type SecurityGroupCreateBulk struct {
	config
	builders []*SecurityGroupCreate
}

// Save creates the SecurityGroup entities in the database.
func (sgcb *SecurityGroupCreateBulk) Save(ctx context.Context) ([]*SecurityGroup, error) {
	specs := make([]*sqlgraph.CreateSpec, len(sgcb.builders))
	nodes := make([]*SecurityGroup, len(sgcb.builders))
	mutators := make([]Mutator, len(sgcb.builders))
	for i := range sgcb.builders {
		func(i int, root context.Context) {
			builder := sgcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SecurityGroupMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sgcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sgcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sgcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sgcb *SecurityGroupCreateBulk) SaveX(ctx context.Context) []*SecurityGroup {
	v, err := sgcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
