// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/predicate"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/securitygroup"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/securitygrouppermission"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/userloginsecuritygroup"
)

// SecurityGroupUpdate is the builder for updating SecurityGroup entities.
type SecurityGroupUpdate struct {
	config
	hooks    []Hook
	mutation *SecurityGroupMutation
}

// Where adds a new predicate for the SecurityGroupUpdate builder.
func (sgu *SecurityGroupUpdate) Where(ps ...predicate.SecurityGroup) *SecurityGroupUpdate {
	sgu.mutation.predicates = append(sgu.mutation.predicates, ps...)
	return sgu
}

// SetStringRef sets the "string_ref" field.
func (sgu *SecurityGroupUpdate) SetStringRef(s string) *SecurityGroupUpdate {
	sgu.mutation.SetStringRef(s)
	return sgu
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (sgu *SecurityGroupUpdate) SetNillableStringRef(s *string) *SecurityGroupUpdate {
	if s != nil {
		sgu.SetStringRef(*s)
	}
	return sgu
}

// ClearStringRef clears the value of the "string_ref" field.
func (sgu *SecurityGroupUpdate) ClearStringRef() *SecurityGroupUpdate {
	sgu.mutation.ClearStringRef()
	return sgu
}

// SetGroupName sets the "group_name" field.
func (sgu *SecurityGroupUpdate) SetGroupName(s string) *SecurityGroupUpdate {
	sgu.mutation.SetGroupName(s)
	return sgu
}

// SetNillableGroupName sets the "group_name" field if the given value is not nil.
func (sgu *SecurityGroupUpdate) SetNillableGroupName(s *string) *SecurityGroupUpdate {
	if s != nil {
		sgu.SetGroupName(*s)
	}
	return sgu
}

// ClearGroupName clears the value of the "group_name" field.
func (sgu *SecurityGroupUpdate) ClearGroupName() *SecurityGroupUpdate {
	sgu.mutation.ClearGroupName()
	return sgu
}

// SetDescription sets the "description" field.
func (sgu *SecurityGroupUpdate) SetDescription(s string) *SecurityGroupUpdate {
	sgu.mutation.SetDescription(s)
	return sgu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (sgu *SecurityGroupUpdate) SetNillableDescription(s *string) *SecurityGroupUpdate {
	if s != nil {
		sgu.SetDescription(*s)
	}
	return sgu
}

// ClearDescription clears the value of the "description" field.
func (sgu *SecurityGroupUpdate) ClearDescription() *SecurityGroupUpdate {
	sgu.mutation.ClearDescription()
	return sgu
}

// AddSecurityGroupPermissionIDs adds the "security_group_permissions" edge to the SecurityGroupPermission entity by IDs.
func (sgu *SecurityGroupUpdate) AddSecurityGroupPermissionIDs(ids ...int) *SecurityGroupUpdate {
	sgu.mutation.AddSecurityGroupPermissionIDs(ids...)
	return sgu
}

// AddSecurityGroupPermissions adds the "security_group_permissions" edges to the SecurityGroupPermission entity.
func (sgu *SecurityGroupUpdate) AddSecurityGroupPermissions(s ...*SecurityGroupPermission) *SecurityGroupUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sgu.AddSecurityGroupPermissionIDs(ids...)
}

// AddUserLoginSecurityGroupIDs adds the "user_login_security_groups" edge to the UserLoginSecurityGroup entity by IDs.
func (sgu *SecurityGroupUpdate) AddUserLoginSecurityGroupIDs(ids ...int) *SecurityGroupUpdate {
	sgu.mutation.AddUserLoginSecurityGroupIDs(ids...)
	return sgu
}

// AddUserLoginSecurityGroups adds the "user_login_security_groups" edges to the UserLoginSecurityGroup entity.
func (sgu *SecurityGroupUpdate) AddUserLoginSecurityGroups(u ...*UserLoginSecurityGroup) *SecurityGroupUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return sgu.AddUserLoginSecurityGroupIDs(ids...)
}

// Mutation returns the SecurityGroupMutation object of the builder.
func (sgu *SecurityGroupUpdate) Mutation() *SecurityGroupMutation {
	return sgu.mutation
}

// ClearSecurityGroupPermissions clears all "security_group_permissions" edges to the SecurityGroupPermission entity.
func (sgu *SecurityGroupUpdate) ClearSecurityGroupPermissions() *SecurityGroupUpdate {
	sgu.mutation.ClearSecurityGroupPermissions()
	return sgu
}

// RemoveSecurityGroupPermissionIDs removes the "security_group_permissions" edge to SecurityGroupPermission entities by IDs.
func (sgu *SecurityGroupUpdate) RemoveSecurityGroupPermissionIDs(ids ...int) *SecurityGroupUpdate {
	sgu.mutation.RemoveSecurityGroupPermissionIDs(ids...)
	return sgu
}

// RemoveSecurityGroupPermissions removes "security_group_permissions" edges to SecurityGroupPermission entities.
func (sgu *SecurityGroupUpdate) RemoveSecurityGroupPermissions(s ...*SecurityGroupPermission) *SecurityGroupUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sgu.RemoveSecurityGroupPermissionIDs(ids...)
}

// ClearUserLoginSecurityGroups clears all "user_login_security_groups" edges to the UserLoginSecurityGroup entity.
func (sgu *SecurityGroupUpdate) ClearUserLoginSecurityGroups() *SecurityGroupUpdate {
	sgu.mutation.ClearUserLoginSecurityGroups()
	return sgu
}

// RemoveUserLoginSecurityGroupIDs removes the "user_login_security_groups" edge to UserLoginSecurityGroup entities by IDs.
func (sgu *SecurityGroupUpdate) RemoveUserLoginSecurityGroupIDs(ids ...int) *SecurityGroupUpdate {
	sgu.mutation.RemoveUserLoginSecurityGroupIDs(ids...)
	return sgu
}

// RemoveUserLoginSecurityGroups removes "user_login_security_groups" edges to UserLoginSecurityGroup entities.
func (sgu *SecurityGroupUpdate) RemoveUserLoginSecurityGroups(u ...*UserLoginSecurityGroup) *SecurityGroupUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return sgu.RemoveUserLoginSecurityGroupIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sgu *SecurityGroupUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	sgu.defaults()
	if len(sgu.hooks) == 0 {
		affected, err = sgu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SecurityGroupMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			sgu.mutation = mutation
			affected, err = sgu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(sgu.hooks) - 1; i >= 0; i-- {
			mut = sgu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sgu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (sgu *SecurityGroupUpdate) SaveX(ctx context.Context) int {
	affected, err := sgu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sgu *SecurityGroupUpdate) Exec(ctx context.Context) error {
	_, err := sgu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sgu *SecurityGroupUpdate) ExecX(ctx context.Context) {
	if err := sgu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sgu *SecurityGroupUpdate) defaults() {
	if _, ok := sgu.mutation.UpdateTime(); !ok {
		v := securitygroup.UpdateDefaultUpdateTime()
		sgu.mutation.SetUpdateTime(v)
	}
}

func (sgu *SecurityGroupUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   securitygroup.Table,
			Columns: securitygroup.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: securitygroup.FieldID,
			},
		},
	}
	if ps := sgu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sgu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: securitygroup.FieldUpdateTime,
		})
	}
	if value, ok := sgu.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: securitygroup.FieldStringRef,
		})
	}
	if sgu.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: securitygroup.FieldStringRef,
		})
	}
	if value, ok := sgu.mutation.GroupName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: securitygroup.FieldGroupName,
		})
	}
	if sgu.mutation.GroupNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: securitygroup.FieldGroupName,
		})
	}
	if value, ok := sgu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: securitygroup.FieldDescription,
		})
	}
	if sgu.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: securitygroup.FieldDescription,
		})
	}
	if sgu.mutation.SecurityGroupPermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   securitygroup.SecurityGroupPermissionsTable,
			Columns: []string{securitygroup.SecurityGroupPermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: securitygrouppermission.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sgu.mutation.RemovedSecurityGroupPermissionsIDs(); len(nodes) > 0 && !sgu.mutation.SecurityGroupPermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   securitygroup.SecurityGroupPermissionsTable,
			Columns: []string{securitygroup.SecurityGroupPermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: securitygrouppermission.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sgu.mutation.SecurityGroupPermissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   securitygroup.SecurityGroupPermissionsTable,
			Columns: []string{securitygroup.SecurityGroupPermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: securitygrouppermission.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sgu.mutation.UserLoginSecurityGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   securitygroup.UserLoginSecurityGroupsTable,
			Columns: []string{securitygroup.UserLoginSecurityGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: userloginsecuritygroup.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sgu.mutation.RemovedUserLoginSecurityGroupsIDs(); len(nodes) > 0 && !sgu.mutation.UserLoginSecurityGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   securitygroup.UserLoginSecurityGroupsTable,
			Columns: []string{securitygroup.UserLoginSecurityGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: userloginsecuritygroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sgu.mutation.UserLoginSecurityGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   securitygroup.UserLoginSecurityGroupsTable,
			Columns: []string{securitygroup.UserLoginSecurityGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: userloginsecuritygroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sgu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{securitygroup.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// SecurityGroupUpdateOne is the builder for updating a single SecurityGroup entity.
type SecurityGroupUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SecurityGroupMutation
}

// SetStringRef sets the "string_ref" field.
func (sguo *SecurityGroupUpdateOne) SetStringRef(s string) *SecurityGroupUpdateOne {
	sguo.mutation.SetStringRef(s)
	return sguo
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (sguo *SecurityGroupUpdateOne) SetNillableStringRef(s *string) *SecurityGroupUpdateOne {
	if s != nil {
		sguo.SetStringRef(*s)
	}
	return sguo
}

// ClearStringRef clears the value of the "string_ref" field.
func (sguo *SecurityGroupUpdateOne) ClearStringRef() *SecurityGroupUpdateOne {
	sguo.mutation.ClearStringRef()
	return sguo
}

// SetGroupName sets the "group_name" field.
func (sguo *SecurityGroupUpdateOne) SetGroupName(s string) *SecurityGroupUpdateOne {
	sguo.mutation.SetGroupName(s)
	return sguo
}

// SetNillableGroupName sets the "group_name" field if the given value is not nil.
func (sguo *SecurityGroupUpdateOne) SetNillableGroupName(s *string) *SecurityGroupUpdateOne {
	if s != nil {
		sguo.SetGroupName(*s)
	}
	return sguo
}

// ClearGroupName clears the value of the "group_name" field.
func (sguo *SecurityGroupUpdateOne) ClearGroupName() *SecurityGroupUpdateOne {
	sguo.mutation.ClearGroupName()
	return sguo
}

// SetDescription sets the "description" field.
func (sguo *SecurityGroupUpdateOne) SetDescription(s string) *SecurityGroupUpdateOne {
	sguo.mutation.SetDescription(s)
	return sguo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (sguo *SecurityGroupUpdateOne) SetNillableDescription(s *string) *SecurityGroupUpdateOne {
	if s != nil {
		sguo.SetDescription(*s)
	}
	return sguo
}

// ClearDescription clears the value of the "description" field.
func (sguo *SecurityGroupUpdateOne) ClearDescription() *SecurityGroupUpdateOne {
	sguo.mutation.ClearDescription()
	return sguo
}

// AddSecurityGroupPermissionIDs adds the "security_group_permissions" edge to the SecurityGroupPermission entity by IDs.
func (sguo *SecurityGroupUpdateOne) AddSecurityGroupPermissionIDs(ids ...int) *SecurityGroupUpdateOne {
	sguo.mutation.AddSecurityGroupPermissionIDs(ids...)
	return sguo
}

// AddSecurityGroupPermissions adds the "security_group_permissions" edges to the SecurityGroupPermission entity.
func (sguo *SecurityGroupUpdateOne) AddSecurityGroupPermissions(s ...*SecurityGroupPermission) *SecurityGroupUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sguo.AddSecurityGroupPermissionIDs(ids...)
}

// AddUserLoginSecurityGroupIDs adds the "user_login_security_groups" edge to the UserLoginSecurityGroup entity by IDs.
func (sguo *SecurityGroupUpdateOne) AddUserLoginSecurityGroupIDs(ids ...int) *SecurityGroupUpdateOne {
	sguo.mutation.AddUserLoginSecurityGroupIDs(ids...)
	return sguo
}

// AddUserLoginSecurityGroups adds the "user_login_security_groups" edges to the UserLoginSecurityGroup entity.
func (sguo *SecurityGroupUpdateOne) AddUserLoginSecurityGroups(u ...*UserLoginSecurityGroup) *SecurityGroupUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return sguo.AddUserLoginSecurityGroupIDs(ids...)
}

// Mutation returns the SecurityGroupMutation object of the builder.
func (sguo *SecurityGroupUpdateOne) Mutation() *SecurityGroupMutation {
	return sguo.mutation
}

// ClearSecurityGroupPermissions clears all "security_group_permissions" edges to the SecurityGroupPermission entity.
func (sguo *SecurityGroupUpdateOne) ClearSecurityGroupPermissions() *SecurityGroupUpdateOne {
	sguo.mutation.ClearSecurityGroupPermissions()
	return sguo
}

// RemoveSecurityGroupPermissionIDs removes the "security_group_permissions" edge to SecurityGroupPermission entities by IDs.
func (sguo *SecurityGroupUpdateOne) RemoveSecurityGroupPermissionIDs(ids ...int) *SecurityGroupUpdateOne {
	sguo.mutation.RemoveSecurityGroupPermissionIDs(ids...)
	return sguo
}

// RemoveSecurityGroupPermissions removes "security_group_permissions" edges to SecurityGroupPermission entities.
func (sguo *SecurityGroupUpdateOne) RemoveSecurityGroupPermissions(s ...*SecurityGroupPermission) *SecurityGroupUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sguo.RemoveSecurityGroupPermissionIDs(ids...)
}

// ClearUserLoginSecurityGroups clears all "user_login_security_groups" edges to the UserLoginSecurityGroup entity.
func (sguo *SecurityGroupUpdateOne) ClearUserLoginSecurityGroups() *SecurityGroupUpdateOne {
	sguo.mutation.ClearUserLoginSecurityGroups()
	return sguo
}

// RemoveUserLoginSecurityGroupIDs removes the "user_login_security_groups" edge to UserLoginSecurityGroup entities by IDs.
func (sguo *SecurityGroupUpdateOne) RemoveUserLoginSecurityGroupIDs(ids ...int) *SecurityGroupUpdateOne {
	sguo.mutation.RemoveUserLoginSecurityGroupIDs(ids...)
	return sguo
}

// RemoveUserLoginSecurityGroups removes "user_login_security_groups" edges to UserLoginSecurityGroup entities.
func (sguo *SecurityGroupUpdateOne) RemoveUserLoginSecurityGroups(u ...*UserLoginSecurityGroup) *SecurityGroupUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return sguo.RemoveUserLoginSecurityGroupIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sguo *SecurityGroupUpdateOne) Select(field string, fields ...string) *SecurityGroupUpdateOne {
	sguo.fields = append([]string{field}, fields...)
	return sguo
}

// Save executes the query and returns the updated SecurityGroup entity.
func (sguo *SecurityGroupUpdateOne) Save(ctx context.Context) (*SecurityGroup, error) {
	var (
		err  error
		node *SecurityGroup
	)
	sguo.defaults()
	if len(sguo.hooks) == 0 {
		node, err = sguo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SecurityGroupMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			sguo.mutation = mutation
			node, err = sguo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(sguo.hooks) - 1; i >= 0; i-- {
			mut = sguo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sguo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (sguo *SecurityGroupUpdateOne) SaveX(ctx context.Context) *SecurityGroup {
	node, err := sguo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sguo *SecurityGroupUpdateOne) Exec(ctx context.Context) error {
	_, err := sguo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sguo *SecurityGroupUpdateOne) ExecX(ctx context.Context) {
	if err := sguo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sguo *SecurityGroupUpdateOne) defaults() {
	if _, ok := sguo.mutation.UpdateTime(); !ok {
		v := securitygroup.UpdateDefaultUpdateTime()
		sguo.mutation.SetUpdateTime(v)
	}
}

func (sguo *SecurityGroupUpdateOne) sqlSave(ctx context.Context) (_node *SecurityGroup, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   securitygroup.Table,
			Columns: securitygroup.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: securitygroup.FieldID,
			},
		},
	}
	id, ok := sguo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing SecurityGroup.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := sguo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, securitygroup.FieldID)
		for _, f := range fields {
			if !securitygroup.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != securitygroup.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sguo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sguo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: securitygroup.FieldUpdateTime,
		})
	}
	if value, ok := sguo.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: securitygroup.FieldStringRef,
		})
	}
	if sguo.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: securitygroup.FieldStringRef,
		})
	}
	if value, ok := sguo.mutation.GroupName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: securitygroup.FieldGroupName,
		})
	}
	if sguo.mutation.GroupNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: securitygroup.FieldGroupName,
		})
	}
	if value, ok := sguo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: securitygroup.FieldDescription,
		})
	}
	if sguo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: securitygroup.FieldDescription,
		})
	}
	if sguo.mutation.SecurityGroupPermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   securitygroup.SecurityGroupPermissionsTable,
			Columns: []string{securitygroup.SecurityGroupPermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: securitygrouppermission.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sguo.mutation.RemovedSecurityGroupPermissionsIDs(); len(nodes) > 0 && !sguo.mutation.SecurityGroupPermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   securitygroup.SecurityGroupPermissionsTable,
			Columns: []string{securitygroup.SecurityGroupPermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: securitygrouppermission.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sguo.mutation.SecurityGroupPermissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   securitygroup.SecurityGroupPermissionsTable,
			Columns: []string{securitygroup.SecurityGroupPermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: securitygrouppermission.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sguo.mutation.UserLoginSecurityGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   securitygroup.UserLoginSecurityGroupsTable,
			Columns: []string{securitygroup.UserLoginSecurityGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: userloginsecuritygroup.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sguo.mutation.RemovedUserLoginSecurityGroupsIDs(); len(nodes) > 0 && !sguo.mutation.UserLoginSecurityGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   securitygroup.UserLoginSecurityGroupsTable,
			Columns: []string{securitygroup.UserLoginSecurityGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: userloginsecuritygroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sguo.mutation.UserLoginSecurityGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   securitygroup.UserLoginSecurityGroupsTable,
			Columns: []string{securitygroup.UserLoginSecurityGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: userloginsecuritygroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SecurityGroup{config: sguo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sguo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{securitygroup.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
