// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/predicate"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/securitygrouppermission"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/securitypermission"
)

// SecurityPermissionUpdate is the builder for updating SecurityPermission entities.
type SecurityPermissionUpdate struct {
	config
	hooks    []Hook
	mutation *SecurityPermissionMutation
}

// Where adds a new predicate for the SecurityPermissionUpdate builder.
func (spu *SecurityPermissionUpdate) Where(ps ...predicate.SecurityPermission) *SecurityPermissionUpdate {
	spu.mutation.predicates = append(spu.mutation.predicates, ps...)
	return spu
}

// SetStringRef sets the "string_ref" field.
func (spu *SecurityPermissionUpdate) SetStringRef(s string) *SecurityPermissionUpdate {
	spu.mutation.SetStringRef(s)
	return spu
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (spu *SecurityPermissionUpdate) SetNillableStringRef(s *string) *SecurityPermissionUpdate {
	if s != nil {
		spu.SetStringRef(*s)
	}
	return spu
}

// ClearStringRef clears the value of the "string_ref" field.
func (spu *SecurityPermissionUpdate) ClearStringRef() *SecurityPermissionUpdate {
	spu.mutation.ClearStringRef()
	return spu
}

// SetDescription sets the "description" field.
func (spu *SecurityPermissionUpdate) SetDescription(s string) *SecurityPermissionUpdate {
	spu.mutation.SetDescription(s)
	return spu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (spu *SecurityPermissionUpdate) SetNillableDescription(s *string) *SecurityPermissionUpdate {
	if s != nil {
		spu.SetDescription(*s)
	}
	return spu
}

// ClearDescription clears the value of the "description" field.
func (spu *SecurityPermissionUpdate) ClearDescription() *SecurityPermissionUpdate {
	spu.mutation.ClearDescription()
	return spu
}

// AddSecurityGroupPermissionIDs adds the "security_group_permissions" edge to the SecurityGroupPermission entity by IDs.
func (spu *SecurityPermissionUpdate) AddSecurityGroupPermissionIDs(ids ...int) *SecurityPermissionUpdate {
	spu.mutation.AddSecurityGroupPermissionIDs(ids...)
	return spu
}

// AddSecurityGroupPermissions adds the "security_group_permissions" edges to the SecurityGroupPermission entity.
func (spu *SecurityPermissionUpdate) AddSecurityGroupPermissions(s ...*SecurityGroupPermission) *SecurityPermissionUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return spu.AddSecurityGroupPermissionIDs(ids...)
}

// Mutation returns the SecurityPermissionMutation object of the builder.
func (spu *SecurityPermissionUpdate) Mutation() *SecurityPermissionMutation {
	return spu.mutation
}

// ClearSecurityGroupPermissions clears all "security_group_permissions" edges to the SecurityGroupPermission entity.
func (spu *SecurityPermissionUpdate) ClearSecurityGroupPermissions() *SecurityPermissionUpdate {
	spu.mutation.ClearSecurityGroupPermissions()
	return spu
}

// RemoveSecurityGroupPermissionIDs removes the "security_group_permissions" edge to SecurityGroupPermission entities by IDs.
func (spu *SecurityPermissionUpdate) RemoveSecurityGroupPermissionIDs(ids ...int) *SecurityPermissionUpdate {
	spu.mutation.RemoveSecurityGroupPermissionIDs(ids...)
	return spu
}

// RemoveSecurityGroupPermissions removes "security_group_permissions" edges to SecurityGroupPermission entities.
func (spu *SecurityPermissionUpdate) RemoveSecurityGroupPermissions(s ...*SecurityGroupPermission) *SecurityPermissionUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return spu.RemoveSecurityGroupPermissionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (spu *SecurityPermissionUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	spu.defaults()
	if len(spu.hooks) == 0 {
		affected, err = spu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SecurityPermissionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			spu.mutation = mutation
			affected, err = spu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(spu.hooks) - 1; i >= 0; i-- {
			mut = spu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, spu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (spu *SecurityPermissionUpdate) SaveX(ctx context.Context) int {
	affected, err := spu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (spu *SecurityPermissionUpdate) Exec(ctx context.Context) error {
	_, err := spu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spu *SecurityPermissionUpdate) ExecX(ctx context.Context) {
	if err := spu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (spu *SecurityPermissionUpdate) defaults() {
	if _, ok := spu.mutation.UpdateTime(); !ok {
		v := securitypermission.UpdateDefaultUpdateTime()
		spu.mutation.SetUpdateTime(v)
	}
}

func (spu *SecurityPermissionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   securitypermission.Table,
			Columns: securitypermission.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: securitypermission.FieldID,
			},
		},
	}
	if ps := spu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := spu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: securitypermission.FieldUpdateTime,
		})
	}
	if value, ok := spu.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: securitypermission.FieldStringRef,
		})
	}
	if spu.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: securitypermission.FieldStringRef,
		})
	}
	if value, ok := spu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: securitypermission.FieldDescription,
		})
	}
	if spu.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: securitypermission.FieldDescription,
		})
	}
	if spu.mutation.SecurityGroupPermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   securitypermission.SecurityGroupPermissionsTable,
			Columns: []string{securitypermission.SecurityGroupPermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: securitygrouppermission.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spu.mutation.RemovedSecurityGroupPermissionsIDs(); len(nodes) > 0 && !spu.mutation.SecurityGroupPermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   securitypermission.SecurityGroupPermissionsTable,
			Columns: []string{securitypermission.SecurityGroupPermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: securitygrouppermission.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spu.mutation.SecurityGroupPermissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   securitypermission.SecurityGroupPermissionsTable,
			Columns: []string{securitypermission.SecurityGroupPermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: securitygrouppermission.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, spu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{securitypermission.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// SecurityPermissionUpdateOne is the builder for updating a single SecurityPermission entity.
type SecurityPermissionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SecurityPermissionMutation
}

// SetStringRef sets the "string_ref" field.
func (spuo *SecurityPermissionUpdateOne) SetStringRef(s string) *SecurityPermissionUpdateOne {
	spuo.mutation.SetStringRef(s)
	return spuo
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (spuo *SecurityPermissionUpdateOne) SetNillableStringRef(s *string) *SecurityPermissionUpdateOne {
	if s != nil {
		spuo.SetStringRef(*s)
	}
	return spuo
}

// ClearStringRef clears the value of the "string_ref" field.
func (spuo *SecurityPermissionUpdateOne) ClearStringRef() *SecurityPermissionUpdateOne {
	spuo.mutation.ClearStringRef()
	return spuo
}

// SetDescription sets the "description" field.
func (spuo *SecurityPermissionUpdateOne) SetDescription(s string) *SecurityPermissionUpdateOne {
	spuo.mutation.SetDescription(s)
	return spuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (spuo *SecurityPermissionUpdateOne) SetNillableDescription(s *string) *SecurityPermissionUpdateOne {
	if s != nil {
		spuo.SetDescription(*s)
	}
	return spuo
}

// ClearDescription clears the value of the "description" field.
func (spuo *SecurityPermissionUpdateOne) ClearDescription() *SecurityPermissionUpdateOne {
	spuo.mutation.ClearDescription()
	return spuo
}

// AddSecurityGroupPermissionIDs adds the "security_group_permissions" edge to the SecurityGroupPermission entity by IDs.
func (spuo *SecurityPermissionUpdateOne) AddSecurityGroupPermissionIDs(ids ...int) *SecurityPermissionUpdateOne {
	spuo.mutation.AddSecurityGroupPermissionIDs(ids...)
	return spuo
}

// AddSecurityGroupPermissions adds the "security_group_permissions" edges to the SecurityGroupPermission entity.
func (spuo *SecurityPermissionUpdateOne) AddSecurityGroupPermissions(s ...*SecurityGroupPermission) *SecurityPermissionUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return spuo.AddSecurityGroupPermissionIDs(ids...)
}

// Mutation returns the SecurityPermissionMutation object of the builder.
func (spuo *SecurityPermissionUpdateOne) Mutation() *SecurityPermissionMutation {
	return spuo.mutation
}

// ClearSecurityGroupPermissions clears all "security_group_permissions" edges to the SecurityGroupPermission entity.
func (spuo *SecurityPermissionUpdateOne) ClearSecurityGroupPermissions() *SecurityPermissionUpdateOne {
	spuo.mutation.ClearSecurityGroupPermissions()
	return spuo
}

// RemoveSecurityGroupPermissionIDs removes the "security_group_permissions" edge to SecurityGroupPermission entities by IDs.
func (spuo *SecurityPermissionUpdateOne) RemoveSecurityGroupPermissionIDs(ids ...int) *SecurityPermissionUpdateOne {
	spuo.mutation.RemoveSecurityGroupPermissionIDs(ids...)
	return spuo
}

// RemoveSecurityGroupPermissions removes "security_group_permissions" edges to SecurityGroupPermission entities.
func (spuo *SecurityPermissionUpdateOne) RemoveSecurityGroupPermissions(s ...*SecurityGroupPermission) *SecurityPermissionUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return spuo.RemoveSecurityGroupPermissionIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (spuo *SecurityPermissionUpdateOne) Select(field string, fields ...string) *SecurityPermissionUpdateOne {
	spuo.fields = append([]string{field}, fields...)
	return spuo
}

// Save executes the query and returns the updated SecurityPermission entity.
func (spuo *SecurityPermissionUpdateOne) Save(ctx context.Context) (*SecurityPermission, error) {
	var (
		err  error
		node *SecurityPermission
	)
	spuo.defaults()
	if len(spuo.hooks) == 0 {
		node, err = spuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SecurityPermissionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			spuo.mutation = mutation
			node, err = spuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(spuo.hooks) - 1; i >= 0; i-- {
			mut = spuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, spuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (spuo *SecurityPermissionUpdateOne) SaveX(ctx context.Context) *SecurityPermission {
	node, err := spuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (spuo *SecurityPermissionUpdateOne) Exec(ctx context.Context) error {
	_, err := spuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spuo *SecurityPermissionUpdateOne) ExecX(ctx context.Context) {
	if err := spuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (spuo *SecurityPermissionUpdateOne) defaults() {
	if _, ok := spuo.mutation.UpdateTime(); !ok {
		v := securitypermission.UpdateDefaultUpdateTime()
		spuo.mutation.SetUpdateTime(v)
	}
}

func (spuo *SecurityPermissionUpdateOne) sqlSave(ctx context.Context) (_node *SecurityPermission, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   securitypermission.Table,
			Columns: securitypermission.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: securitypermission.FieldID,
			},
		},
	}
	id, ok := spuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing SecurityPermission.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := spuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, securitypermission.FieldID)
		for _, f := range fields {
			if !securitypermission.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != securitypermission.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := spuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := spuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: securitypermission.FieldUpdateTime,
		})
	}
	if value, ok := spuo.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: securitypermission.FieldStringRef,
		})
	}
	if spuo.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: securitypermission.FieldStringRef,
		})
	}
	if value, ok := spuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: securitypermission.FieldDescription,
		})
	}
	if spuo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: securitypermission.FieldDescription,
		})
	}
	if spuo.mutation.SecurityGroupPermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   securitypermission.SecurityGroupPermissionsTable,
			Columns: []string{securitypermission.SecurityGroupPermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: securitygrouppermission.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spuo.mutation.RemovedSecurityGroupPermissionsIDs(); len(nodes) > 0 && !spuo.mutation.SecurityGroupPermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   securitypermission.SecurityGroupPermissionsTable,
			Columns: []string{securitypermission.SecurityGroupPermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: securitygrouppermission.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spuo.mutation.SecurityGroupPermissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   securitypermission.SecurityGroupPermissionsTable,
			Columns: []string{securitypermission.SecurityGroupPermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: securitygrouppermission.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SecurityPermission{config: spuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, spuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{securitypermission.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
