// Code generated by entc, DO NOT EDIT.

package statusitem

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// StringRef applies equality check predicate on the "string_ref" field. It's identical to StringRefEQ.
func StringRef(v string) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStringRef), v))
	})
}

// StatusCode applies equality check predicate on the "status_code" field. It's identical to StatusCodeEQ.
func StatusCode(v string) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatusCode), v))
	})
}

// SequenceID applies equality check predicate on the "sequence_id" field. It's identical to SequenceIDEQ.
func SequenceID(v int) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSequenceID), v))
	})
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.StatusItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StatusItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.StatusItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StatusItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), v))
	})
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.StatusItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StatusItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.StatusItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StatusItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateTime), v))
	})
}

// StringRefEQ applies the EQ predicate on the "string_ref" field.
func StringRefEQ(v string) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStringRef), v))
	})
}

// StringRefNEQ applies the NEQ predicate on the "string_ref" field.
func StringRefNEQ(v string) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStringRef), v))
	})
}

// StringRefIn applies the In predicate on the "string_ref" field.
func StringRefIn(vs ...string) predicate.StatusItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StatusItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStringRef), v...))
	})
}

// StringRefNotIn applies the NotIn predicate on the "string_ref" field.
func StringRefNotIn(vs ...string) predicate.StatusItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StatusItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStringRef), v...))
	})
}

// StringRefGT applies the GT predicate on the "string_ref" field.
func StringRefGT(v string) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStringRef), v))
	})
}

// StringRefGTE applies the GTE predicate on the "string_ref" field.
func StringRefGTE(v string) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStringRef), v))
	})
}

// StringRefLT applies the LT predicate on the "string_ref" field.
func StringRefLT(v string) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStringRef), v))
	})
}

// StringRefLTE applies the LTE predicate on the "string_ref" field.
func StringRefLTE(v string) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStringRef), v))
	})
}

// StringRefContains applies the Contains predicate on the "string_ref" field.
func StringRefContains(v string) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStringRef), v))
	})
}

// StringRefHasPrefix applies the HasPrefix predicate on the "string_ref" field.
func StringRefHasPrefix(v string) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStringRef), v))
	})
}

// StringRefHasSuffix applies the HasSuffix predicate on the "string_ref" field.
func StringRefHasSuffix(v string) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStringRef), v))
	})
}

// StringRefIsNil applies the IsNil predicate on the "string_ref" field.
func StringRefIsNil() predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStringRef)))
	})
}

// StringRefNotNil applies the NotNil predicate on the "string_ref" field.
func StringRefNotNil() predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStringRef)))
	})
}

// StringRefEqualFold applies the EqualFold predicate on the "string_ref" field.
func StringRefEqualFold(v string) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStringRef), v))
	})
}

// StringRefContainsFold applies the ContainsFold predicate on the "string_ref" field.
func StringRefContainsFold(v string) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStringRef), v))
	})
}

// StatusCodeEQ applies the EQ predicate on the "status_code" field.
func StatusCodeEQ(v string) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatusCode), v))
	})
}

// StatusCodeNEQ applies the NEQ predicate on the "status_code" field.
func StatusCodeNEQ(v string) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatusCode), v))
	})
}

// StatusCodeIn applies the In predicate on the "status_code" field.
func StatusCodeIn(vs ...string) predicate.StatusItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StatusItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStatusCode), v...))
	})
}

// StatusCodeNotIn applies the NotIn predicate on the "status_code" field.
func StatusCodeNotIn(vs ...string) predicate.StatusItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StatusItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStatusCode), v...))
	})
}

// StatusCodeGT applies the GT predicate on the "status_code" field.
func StatusCodeGT(v string) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatusCode), v))
	})
}

// StatusCodeGTE applies the GTE predicate on the "status_code" field.
func StatusCodeGTE(v string) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatusCode), v))
	})
}

// StatusCodeLT applies the LT predicate on the "status_code" field.
func StatusCodeLT(v string) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatusCode), v))
	})
}

// StatusCodeLTE applies the LTE predicate on the "status_code" field.
func StatusCodeLTE(v string) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatusCode), v))
	})
}

// StatusCodeContains applies the Contains predicate on the "status_code" field.
func StatusCodeContains(v string) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStatusCode), v))
	})
}

// StatusCodeHasPrefix applies the HasPrefix predicate on the "status_code" field.
func StatusCodeHasPrefix(v string) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStatusCode), v))
	})
}

// StatusCodeHasSuffix applies the HasSuffix predicate on the "status_code" field.
func StatusCodeHasSuffix(v string) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStatusCode), v))
	})
}

// StatusCodeIsNil applies the IsNil predicate on the "status_code" field.
func StatusCodeIsNil() predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStatusCode)))
	})
}

// StatusCodeNotNil applies the NotNil predicate on the "status_code" field.
func StatusCodeNotNil() predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStatusCode)))
	})
}

// StatusCodeEqualFold applies the EqualFold predicate on the "status_code" field.
func StatusCodeEqualFold(v string) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStatusCode), v))
	})
}

// StatusCodeContainsFold applies the ContainsFold predicate on the "status_code" field.
func StatusCodeContainsFold(v string) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStatusCode), v))
	})
}

// SequenceIDEQ applies the EQ predicate on the "sequence_id" field.
func SequenceIDEQ(v int) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSequenceID), v))
	})
}

// SequenceIDNEQ applies the NEQ predicate on the "sequence_id" field.
func SequenceIDNEQ(v int) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSequenceID), v))
	})
}

// SequenceIDIn applies the In predicate on the "sequence_id" field.
func SequenceIDIn(vs ...int) predicate.StatusItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StatusItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSequenceID), v...))
	})
}

// SequenceIDNotIn applies the NotIn predicate on the "sequence_id" field.
func SequenceIDNotIn(vs ...int) predicate.StatusItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StatusItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSequenceID), v...))
	})
}

// SequenceIDGT applies the GT predicate on the "sequence_id" field.
func SequenceIDGT(v int) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSequenceID), v))
	})
}

// SequenceIDGTE applies the GTE predicate on the "sequence_id" field.
func SequenceIDGTE(v int) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSequenceID), v))
	})
}

// SequenceIDLT applies the LT predicate on the "sequence_id" field.
func SequenceIDLT(v int) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSequenceID), v))
	})
}

// SequenceIDLTE applies the LTE predicate on the "sequence_id" field.
func SequenceIDLTE(v int) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSequenceID), v))
	})
}

// SequenceIDIsNil applies the IsNil predicate on the "sequence_id" field.
func SequenceIDIsNil() predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSequenceID)))
	})
}

// SequenceIDNotNil applies the NotNil predicate on the "sequence_id" field.
func SequenceIDNotNil() predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSequenceID)))
	})
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDescription), v))
	})
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.StatusItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StatusItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDescription), v...))
	})
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.StatusItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StatusItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDescription), v...))
	})
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDescription), v))
	})
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDescription), v))
	})
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDescription), v))
	})
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDescription), v))
	})
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDescription), v))
	})
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDescription), v))
	})
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDescription), v))
	})
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDescription)))
	})
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDescription)))
	})
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDescription), v))
	})
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDescription), v))
	})
}

// HasStatusType applies the HasEdge predicate on the "status_type" edge.
func HasStatusType() predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StatusTypeTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, StatusTypeTable, StatusTypeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStatusTypeWith applies the HasEdge predicate on the "status_type" edge with a given conditions (other predicates).
func HasStatusTypeWith(preds ...predicate.StatusType) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StatusTypeInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, StatusTypeTable, StatusTypeColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasParties applies the HasEdge predicate on the "parties" edge.
func HasParties() predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PartiesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PartiesTable, PartiesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPartiesWith applies the HasEdge predicate on the "parties" edge with a given conditions (other predicates).
func HasPartiesWith(preds ...predicate.Party) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PartiesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PartiesTable, PartiesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPartyStatuses applies the HasEdge predicate on the "party_statuses" edge.
func HasPartyStatuses() predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PartyStatusesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PartyStatusesTable, PartyStatusesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPartyStatusesWith applies the HasEdge predicate on the "party_statuses" edge with a given conditions (other predicates).
func HasPartyStatusesWith(preds ...predicate.PartyStatus) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PartyStatusesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PartyStatusesTable, PartyStatusesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMainStatusValidChanges applies the HasEdge predicate on the "main_status_valid_changes" edge.
func HasMainStatusValidChanges() predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MainStatusValidChangesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MainStatusValidChangesTable, MainStatusValidChangesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMainStatusValidChangesWith applies the HasEdge predicate on the "main_status_valid_changes" edge with a given conditions (other predicates).
func HasMainStatusValidChangesWith(preds ...predicate.StatusValidChange) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MainStatusValidChangesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MainStatusValidChangesTable, MainStatusValidChangesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasToStatusValidChanges applies the HasEdge predicate on the "to_status_valid_changes" edge.
func HasToStatusValidChanges() predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ToStatusValidChangesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ToStatusValidChangesTable, ToStatusValidChangesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasToStatusValidChangesWith applies the HasEdge predicate on the "to_status_valid_changes" edge with a given conditions (other predicates).
func HasToStatusValidChangesWith(preds ...predicate.StatusValidChange) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ToStatusValidChangesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ToStatusValidChangesTable, ToStatusValidChangesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCurrentWorkEfforts applies the HasEdge predicate on the "current_work_efforts" edge.
func HasCurrentWorkEfforts() predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CurrentWorkEffortsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CurrentWorkEffortsTable, CurrentWorkEffortsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCurrentWorkEffortsWith applies the HasEdge predicate on the "current_work_efforts" edge with a given conditions (other predicates).
func HasCurrentWorkEffortsWith(preds ...predicate.WorkEffort) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CurrentWorkEffortsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CurrentWorkEffortsTable, CurrentWorkEffortsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasWorkEffortFixedAssetAssigns applies the HasEdge predicate on the "work_effort_fixed_asset_assigns" edge.
func HasWorkEffortFixedAssetAssigns() predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(WorkEffortFixedAssetAssignsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, WorkEffortFixedAssetAssignsTable, WorkEffortFixedAssetAssignsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWorkEffortFixedAssetAssignsWith applies the HasEdge predicate on the "work_effort_fixed_asset_assigns" edge with a given conditions (other predicates).
func HasWorkEffortFixedAssetAssignsWith(preds ...predicate.WorkEffortFixedAssetAssign) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(WorkEffortFixedAssetAssignsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, WorkEffortFixedAssetAssignsTable, WorkEffortFixedAssetAssignsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAvailabilityWorkEffortFixedAssetAssigns applies the HasEdge predicate on the "availability_work_effort_fixed_asset_assigns" edge.
func HasAvailabilityWorkEffortFixedAssetAssigns() predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AvailabilityWorkEffortFixedAssetAssignsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AvailabilityWorkEffortFixedAssetAssignsTable, AvailabilityWorkEffortFixedAssetAssignsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAvailabilityWorkEffortFixedAssetAssignsWith applies the HasEdge predicate on the "availability_work_effort_fixed_asset_assigns" edge with a given conditions (other predicates).
func HasAvailabilityWorkEffortFixedAssetAssignsWith(preds ...predicate.WorkEffortFixedAssetAssign) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AvailabilityWorkEffortFixedAssetAssignsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AvailabilityWorkEffortFixedAssetAssignsTable, AvailabilityWorkEffortFixedAssetAssignsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAssignmentWorkEffortPartyAssignments applies the HasEdge predicate on the "assignment_work_effort_party_assignments" edge.
func HasAssignmentWorkEffortPartyAssignments() predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AssignmentWorkEffortPartyAssignmentsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AssignmentWorkEffortPartyAssignmentsTable, AssignmentWorkEffortPartyAssignmentsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAssignmentWorkEffortPartyAssignmentsWith applies the HasEdge predicate on the "assignment_work_effort_party_assignments" edge with a given conditions (other predicates).
func HasAssignmentWorkEffortPartyAssignmentsWith(preds ...predicate.WorkEffortPartyAssignment) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AssignmentWorkEffortPartyAssignmentsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AssignmentWorkEffortPartyAssignmentsTable, AssignmentWorkEffortPartyAssignmentsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAvailabilityWorkEffortPartyAssignments applies the HasEdge predicate on the "availability_work_effort_party_assignments" edge.
func HasAvailabilityWorkEffortPartyAssignments() predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AvailabilityWorkEffortPartyAssignmentsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AvailabilityWorkEffortPartyAssignmentsTable, AvailabilityWorkEffortPartyAssignmentsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAvailabilityWorkEffortPartyAssignmentsWith applies the HasEdge predicate on the "availability_work_effort_party_assignments" edge with a given conditions (other predicates).
func HasAvailabilityWorkEffortPartyAssignmentsWith(preds ...predicate.WorkEffortPartyAssignment) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AvailabilityWorkEffortPartyAssignmentsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AvailabilityWorkEffortPartyAssignmentsTable, AvailabilityWorkEffortPartyAssignmentsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.StatusItem) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.StatusItem) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.StatusItem) predicate.StatusItem {
	return predicate.StatusItem(func(s *sql.Selector) {
		p(s.Not())
	})
}
